uint64_t bitarray_size(unsigned int a1)
{
  unsigned int v2;

  if (a1 > 0x2D)
    __assert_rtn("bitarray_size", "bitarray.c", 283, "log_size <= MAX_LEVEL * NB");
  v2 = 8;
  if (a1 > 9)
    v2 = levels_num_words[(a1 - 10) / 9] + (1 << (a1 - 6));
  return 8 * v2;
}

void *bitarray_create(unsigned int a1)
{
  size_t v1;

  v1 = bitarray_size(a1);
  return j__calloc(1uLL, v1);
}

BOOL bitarray_get(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x2D)
    __assert_rtn("bitarray_get", "bitarray.c", 301, "log_size <= MAX_LEVEL * NB");
  if (a3 >= 1 << a2)
    __assert_rtn("bitarray_get", "bitarray.c", 302, "index < (1 << log_size)");
  if (a2 > 9)
    return GET_SIMPLE(a1 + 8 * levels_num_words[(a2 - 10) / 9] + 64 * (a3 >> 9), a3 & 0x1FF);
  else
    return GET_SIMPLE(a1, a3);
}

BOOL GET_SIMPLE(uint64_t a1, unsigned int a2)
{
  return word_get_bit_simple((_QWORD *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F);
}

uint64_t bitarray_set(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 v13;

  v12 = a1;
  v11 = a2;
  v10 = a3;
  if (a2 >= 0x2E)
    __assert_rtn("bitarray_set", "bitarray.c", 317, "log_size <= MAX_LEVEL * NB");
  if (v10 >= 1 << v11)
    __assert_rtn("bitarray_set", "bitarray.c", 318, "index < (1 << log_size)");
  if (v11 > 9)
  {
    v9 = (v11 - 10) / 9;
    v8 = 0;
    v4 = v10 & 0x1FF;
    v10 >>= 9;
    if ((SET_CHANGED_GO_DOWN(v12 + 8 * levels_num_words[v9] + 64 * v10, v4, &v8) & 1) != 0)
    {
      if (v8)
      {
        return 1;
      }
      else
      {
        switch(v9)
        {
          case 0u:
            goto LABEL_18;
          case 1u:
            goto LABEL_16;
          case 2u:
            goto LABEL_14;
          case 3u:
            v5 = v10 & 0x1FF;
            v10 >>= 9;
            if (SET_GO_DOWN(v12 + 64 * v10 + 16810048, v5))
            {
LABEL_14:
              v6 = v10 & 0x1FF;
              v10 >>= 9;
              if (SET_GO_DOWN(v12 + 64 * v10 + 32832, v6))
              {
LABEL_16:
                v7 = v10 & 0x1FF;
                v10 >>= 9;
                if (SET_GO_DOWN(v12 + 64 * v10 + 64, v7))
                {
LABEL_18:
                  SET_SIMPLE(v12, v10 & 0x1FF);
                  v13 = 1;
                }
                else
                {
                  v13 = 1;
                }
              }
              else
              {
                v13 = 1;
              }
            }
            else
            {
              v13 = 1;
            }
            break;
          default:
            qword_A4008 = (uint64_t)"FATAL ERROR - invalid bitarray level";
            qword_A4038 = v9;
            __break(1u);
            JUMPOUT(0x1B9CLL);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return SET_CHANGED(v12, v10);
  }
  return v13;
}

uint64_t SET_CHANGED(uint64_t a1, unsigned int a2)
{
  return word_set_bit_changed((_QWORD *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F) & 1;
}

uint64_t SET_CHANGED_GO_DOWN(uint64_t a1, unsigned int a2, BOOL *a3)
{
  return word_set_bit_changed_go_down((uint64_t *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F, a3) & 1;
}

BOOL SET_GO_DOWN(uint64_t a1, unsigned int a2)
{
  return word_set_bit_go_down((uint64_t *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F);
}

_QWORD *SET_SIMPLE(uint64_t a1, unsigned int a2)
{
  return word_set_bit_simple((_QWORD *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F);
}

uint64_t bitarray_zap(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 v13;

  v12 = a1;
  v11 = a2;
  v10 = a3;
  if (a2 >= 0x2E)
    __assert_rtn("bitarray_zap", "bitarray.c", 370, "log_size <= MAX_LEVEL * NB");
  if (v10 >= 1 << v11)
    __assert_rtn("bitarray_zap", "bitarray.c", 371, "index < (1 << log_size)");
  if (v11 > 9)
  {
    v9 = (v11 - 10) / 9;
    v8 = 0;
    v4 = v10 & 0x1FF;
    v10 >>= 9;
    if ((ZAP_CHANGED_GO_DOWN(v12 + 8 * levels_num_words[v9] + 64 * v10, v4, &v8) & 1) != 0)
    {
      if (v8)
      {
        switch(v9)
        {
          case 0u:
            goto LABEL_18;
          case 1u:
            goto LABEL_16;
          case 2u:
            goto LABEL_14;
          case 3u:
            v5 = v10 & 0x1FF;
            v10 >>= 9;
            if (ZAP_GO_DOWN(v12 + 64 * v10 + 16810048, v5))
            {
LABEL_14:
              v6 = v10 & 0x1FF;
              v10 >>= 9;
              if (ZAP_GO_DOWN(v12 + 64 * v10 + 32832, v6))
              {
LABEL_16:
                v7 = v10 & 0x1FF;
                v10 >>= 9;
                if (ZAP_GO_DOWN(v12 + 64 * v10 + 64, v7))
                {
LABEL_18:
                  ZAP_SIMPLE(v12, v10 & 0x1FF);
                  v13 = 1;
                }
                else
                {
                  v13 = 1;
                }
              }
              else
              {
                v13 = 1;
              }
            }
            else
            {
              v13 = 1;
            }
            break;
          default:
            qword_A4008 = (uint64_t)"FATAL ERROR - invalid bitarray level";
            qword_A4038 = v9;
            __break(1u);
            JUMPOUT(0x1F90);
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return ZAP_CHANGED(v12, v10);
  }
  return v13;
}

uint64_t ZAP_CHANGED(uint64_t a1, unsigned int a2)
{
  return word_zap_bit_changed((_QWORD *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F) & 1;
}

uint64_t ZAP_CHANGED_GO_DOWN(uint64_t a1, unsigned int a2, BOOL *a3)
{
  char v4;

  v4 = word_zap_bit_changed_go_down((uint64_t *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F, a3) & 1;
  if (v4 && (all_zeros(a1) & 1) == 0)
    *a3 = 0;
  return v4 & 1;
}

BOOL ZAP_GO_DOWN(uint64_t a1, unsigned int a2)
{
  BOOL v3;

  v3 = word_zap_bit_go_down((uint64_t *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F);
  return (!v3 || (all_zeros(a1) & 1) != 0) && v3;
}

_QWORD *ZAP_SIMPLE(uint64_t a1, unsigned int a2)
{
  return word_zap_bit_simple((_QWORD *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F);
}

uint64_t bitarray_first_set(uint64_t a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  if (a2 >= 0x2E)
    __assert_rtn("bitarray_first_set", "bitarray.c", 487, "log_size <= MAX_LEVEL * NB");
  v9 = a1;
  v8 = FFS(a1);
  if (a2 > 9)
  {
    if (v8)
    {
      v7 = (a2 - 1) / 9;
      v6 = v8 - 1;
      switch(v7)
      {
        case 1u:
          break;
        case 2u:
          v9 = a1 + 64;
          v6 = FFS(a1 + 64 + 64 * v6) + (v6 << 9) - 1;
          break;
        case 3u:
          v3 = FFS(a1 + 64 + 64 * v6);
          v9 = a1 + 32832;
          v6 = FFS(a1 + 32832 + 64 * (v3 + (v6 << 9) - 1)) + ((v3 + (v6 << 9) - 1) << 9) - 1;
          break;
        case 4u:
          v5 = FFS(a1 + 64 + 64 * v6) + (v6 << 9) - 1;
          v2 = FFS(a1 + 32832 + 8 * (8 * v5));
          v9 = a1 + 16810048;
          v6 = FFS(a1 + 16810048 + 8 * (8 * (v2 + (v5 << 9) - 1))) + ((v2 + (v5 << 9) - 1) << 9) - 1;
          break;
        default:
          qword_A4008 = (uint64_t)"FATAL ERROR - invalid bitarray level";
          qword_A4038 = v7;
          __break(1u);
          JUMPOUT(0x23E0);
      }
      return (FFS(v9 + 64 * (1 << (9 * v7 - 9)) + 64 * v6) + (v6 << 9));
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return v8;
  }
}

uint64_t FFS(uint64_t a1)
{
  int v2;
  unsigned int i;

  for (i = 0; i < 8; ++i)
  {
    v2 = __ffsll(*(_QWORD *)(a1 + 8 * i));
    if (v2)
      return v2 + (i << 6);
  }
  return 0;
}

uint64_t bitarray_zap_first_set(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  int v3;
  int v4;
  int v5;
  char v6;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int8 v21;

  v20 = a1;
  v19 = a2;
  v18 = a3;
  if (a2 >= 0x2E)
    __assert_rtn("bitarray_zap_first_set", "bitarray.c", 507, "log_size <= MAX_LEVEL * NB");
  v17 = v20;
  v16 = FFS(v20);
  if (v16)
  {
    v15 = (v19 - 1) / 9;
    if (v15)
    {
      v14 = v16 - 1;
      switch(v15)
      {
        case 1u:
          break;
        case 2u:
          v17 += 64;
          v14 = FFS(v17 + 64 * v14) + (v14 << 9) - 1;
          break;
        case 3u:
          v17 += 64;
          v5 = FFS(v17 + 64 * v14);
          v17 += 0x8000;
          v14 = FFS(v17 + 64 * (v5 + (v14 << 9) - 1)) + ((v5 + (v14 << 9) - 1) << 9) - 1;
          break;
        case 4u:
          v17 += 64;
          v3 = FFS(v17 + 64 * v14);
          v17 += 0x8000;
          v8 = v3 + (v14 << 9) - 1;
          v4 = FFS(v17 + 8 * (8 * v8));
          v17 += 0x1000000;
          v14 = FFS(v17 + 8 * (8 * (v4 + (v8 << 9) - 1))) + ((v4 + (v8 << 9) - 1) << 9) - 1;
          break;
        default:
          qword_A4008 = (uint64_t)"FATAL ERROR - invalid bitarray level";
          qword_A4038 = v15;
          __break(1u);
          JUMPOUT(0x27B0);
      }
      v17 += 64 * (1 << (9 * v15 - 9));
      v14 = FFS(v17 + 64 * v14) + (v14 << 9) - 1;
      v16 = v14;
      *v18 = v14;
      if (v16 >= 1 << v19)
        __assert_rtn("bitarray_zap_first_set", "bitarray.c", 526, "ix < (1 << log_size)");
      --v15;
      v13 = 0;
      v12 = v16 & 0x1FF;
      v16 >>= 9;
      v6 = ZAP_CHANGED_GO_DOWN(v20 + 8 * levels_num_words[v15] + 64 * v16, v12, &v13);
      if ((v6 & 1) != 0)
      {
        if (v13)
        {
          switch(v15)
          {
            case 0u:
              goto LABEL_23;
            case 1u:
              goto LABEL_22;
            case 2u:
              goto LABEL_21;
            case 3u:
              v9 = v16 & 0x1FF;
              v16 >>= 9;
              if (ZAP_GO_DOWN(v20 + 64 * v16 + 16810048, v9))
              {
LABEL_21:
                v10 = v16 & 0x1FF;
                v16 >>= 9;
                if (ZAP_GO_DOWN(v20 + 64 * v16 + 32832, v10))
                {
LABEL_22:
                  v11 = v16 & 0x1FF;
                  v16 >>= 9;
                  if (ZAP_GO_DOWN(v20 + 64 * v16 + 64, v11))
LABEL_23:
                    ZAP_SIMPLE(v20, v16 & 0x1FF);
                }
              }
              v21 = 1;
              break;
            default:
              qword_A4008 = (uint64_t)"FATAL ERROR - invalid bitarray level";
              qword_A4038 = v15;
              __break(1u);
              JUMPOUT(0x2A48);
          }
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      *v18 = --v16;
      ZAP_SIMPLE(v20, v16);
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v21;
}

uint64_t bitarray_zap_first_set_multiple(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v4;
  int v5;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  if (a2 >= 0x2E)
    __assert_rtn("bitarray_zap_first_set_multiple", "bitarray.c", 578, "log_size <= MAX_LEVEL * NB");
  if (a2 > 9)
  {
    v17 = 0;
    v16 = (a2 - 1) / 9;
    while (v17 < a3)
    {
      v14 = a1;
      v12 = FFS(a1);
      if (!v12)
        return v17;
      v11 = v12 - 1;
      switch(v16)
      {
        case 1u:
          break;
        case 2u:
          v14 = a1 + 64;
          v11 = FFS(a1 + 64 + 64 * v11) + (v11 << 9) - 1;
          break;
        case 3u:
          v5 = FFS(a1 + 64 + 64 * v11);
          v14 = a1 + 32832;
          v11 = FFS(a1 + 32832 + 64 * (v5 + (v11 << 9) - 1)) + ((v5 + (v11 << 9) - 1) << 9) - 1;
          break;
        case 4u:
          v7 = FFS(a1 + 64 + 64 * v11) + (v11 << 9) - 1;
          v4 = FFS(a1 + 32832 + 8 * (8 * v7));
          v14 = a1 + 16810048;
          v11 = FFS(a1 + 16810048 + 8 * (8 * (v4 + (v7 << 9) - 1))) + ((v4 + (v7 << 9) - 1) << 9) - 1;
          break;
        default:
          qword_A4008 = (uint64_t)"FATAL ERROR - invalid bitarray level";
          qword_A4038 = v16;
          __break(1u);
          JUMPOUT(0x2D50);
      }
      v15 = v14 + 64 * (1 << (9 * v16 - 9));
      v13 = v11;
      v10 = FFS_and_zap_word(v15 + 64 * v11, a3 - v17, a4 + 4 * v17, v11 << 9);
      if (!v10)
        __assert_rtn("bitarray_zap_first_set_multiple", "bitarray.c", 603, "z");
      v17 += v10;
      if (v17 < a3 || all_zeros(v15 + 64 * v11))
      {
        switch(v16)
        {
          case 1u:
            goto LABEL_22;
          case 2u:
            goto LABEL_21;
          case 3u:
            goto LABEL_20;
          case 4u:
            v13 = v11 >> 9;
            if (ZAP_GO_DOWN(a1 + 64 * (v11 >> 9) + 16810048, v11 & 0x1FF))
            {
LABEL_20:
              v8 = v13 & 0x1FF;
              v13 >>= 9;
              if (ZAP_GO_DOWN(a1 + 64 * v13 + 32832, v8))
              {
LABEL_21:
                v9 = v13 & 0x1FF;
                v13 >>= 9;
                if (ZAP_GO_DOWN(a1 + 64 * v13 + 64, v9))
LABEL_22:
                  ZAP_SIMPLE(a1, v13 & 0x1FF);
              }
            }
            break;
          default:
            qword_A4008 = (uint64_t)"FATAL ERROR - invalid bitarray level";
            qword_A4038 = v16 - 1;
            __break(1u);
            JUMPOUT(0x2F9CLL);
        }
      }
    }
    return v17;
  }
  else
  {
    return FFS_and_zap_word(a1, a3, a4, 0);
  }
}

uint64_t FFS_and_zap_word(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v6;
  int v7;
  unint64_t v8;
  unsigned int i;
  unsigned int v10;

  v10 = 0;
  for (i = 0; i < 8; ++i)
  {
    v8 = *(_QWORD *)(a1 + 8 * i);
    if (v8)
    {
      do
      {
        v6 = __ffsll(v8);
        if (!v6)
          __assert_rtn("FFS_and_zap_word", "bitarray.c", 554, "f");
        v7 = v6 - 1;
        v4 = v10++;
        *(_DWORD *)(a3 + 4 * v4) = v7 + (i << 6) + a4;
        v8 &= ~(1 << v7);
      }
      while (v8 && v10 < a2);
      *(_QWORD *)(a1 + 8 * i) = v8;
      if (v10 >= a2)
        break;
    }
  }
  return v10;
}

uint64_t all_zeros(uint64_t a1)
{
  unsigned int i;
  char v3;

  for (i = 0; i < 8; ++i)
  {
    if (*(_QWORD *)(a1 + 8 * i))
    {
      v3 = 0;
      return v3 & 1;
    }
  }
  v3 = 1;
  return v3 & 1;
}

BOOL word_get_bit_simple(_QWORD *a1, char a2)
{
  return (*a1 & (1 << a2)) != 0;
}

uint64_t word_set_bit_changed(_QWORD *a1, char a2)
{
  char v3;

  if (*a1 == (*a1 | (1 << a2)))
  {
    v3 = 0;
  }
  else
  {
    *a1 |= 1 << a2;
    v3 = 1;
  }
  return v3 & 1;
}

uint64_t word_set_bit_changed_go_down(uint64_t *a1, char a2, BOOL *a3)
{
  uint64_t v4;
  char v5;

  v4 = *a1;
  if (*a1 == (*a1 | (1 << a2)))
  {
    v5 = 0;
  }
  else
  {
    *a1 |= 1 << a2;
    *a3 = v4 != 0;
    v5 = 1;
  }
  return v5 & 1;
}

BOOL word_set_bit_go_down(uint64_t *a1, char a2)
{
  uint64_t v3;

  v3 = *a1;
  if (*a1 == (*a1 | (1 << a2)))
  {
    return 0;
  }
  else
  {
    *a1 |= 1 << a2;
    return v3 == 0;
  }
}

_QWORD *word_set_bit_simple(_QWORD *result, char a2)
{
  *result |= 1 << a2;
  return result;
}

uint64_t word_zap_bit_changed(_QWORD *a1, char a2)
{
  char v3;

  if (*a1 == (*a1 & ~(1 << a2)))
  {
    v3 = 0;
  }
  else
  {
    *a1 &= ~(1 << a2);
    v3 = 1;
  }
  return v3 & 1;
}

uint64_t word_zap_bit_changed_go_down(uint64_t *a1, char a2, BOOL *a3)
{
  uint64_t v4;
  char v5;

  v4 = *a1 & ~(1 << a2);
  if (*a1 == v4)
  {
    v5 = 0;
  }
  else
  {
    *a1 = v4;
    *a3 = v4 == 0;
    v5 = 1;
  }
  return v5 & 1;
}

BOOL word_zap_bit_go_down(uint64_t *a1, char a2)
{
  uint64_t v3;

  v3 = *a1 & ~(1 << a2);
  if (*a1 == v3)
  {
    return 0;
  }
  else
  {
    *a1 = v3;
    return v3 == 0;
  }
}

_QWORD *word_zap_bit_simple(_QWORD *result, char a2)
{
  *result &= ~(1 << a2);
  return result;
}

unint64_t __ffsll(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = __clz(__rbit64(a1));
  v2 = 0;
  if (a1)
    return v1 + 1;
  return v2;
}

BOOL xzm_reclaim_init(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;

  word_A4068 = 0;
  unk_A4060 = 0;
  v8 = mach_vm_reclaim_ringbuffer_init(&xzm_reclaim_buffer);
  if (v8)
    malloc_report(3, (uint64_t)"xzm: failed to initialize deferred reclamation buffer (%d)\n", v1, v2, v3, v4, v5, v6, v8);
  else
    *(_QWORD *)(a1 + 464) = &xzm_reclaim_buffer;
  return v8 == 0;
}

uint64_t xzm_reclaim_mark_used(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v6;
  unsigned int v8;

  v8 = a4;
  if (HIDWORD(a4))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"size <= UINT32_MAX\" failed (/Library/Caches/com.apple.x"
                           "bs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:165)";
    __break(1u);
    JUMPOUT(0x37E8);
  }
  os_unfair_lock_lock_with_options(a1 + 32, 327680);
  v6 = mach_vm_reclaim_mark_used(a1, a2, a3, v8);
  if ((v6 & 1) != 0)
    _xzm_reclaim_id_cache_push((_WORD *)(a1 + 40), a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));
  if ((v6 & 1) != 0 || (a5 & 1) == 0)
    return v6 & 1;
  else
    return mach_vm_reclaim_is_reclaimed(a1, a2);
}

_WORD *_xzm_reclaim_id_cache_push(_WORD *result, uint64_t a2)
{
  uint64_t v2;

  if ((unsigned __int16)*result >= 0x400u)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"cache->ric_head < XZM_RECLAIM_ID_COUNT\" failed (/Librar"
                           "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:141)";
    __break(1u);
    JUMPOUT(0x38E4);
  }
  v2 = (unsigned __int16)*result;
  *result = v2 + 1;
  *(_QWORD *)&result[4 * v2 + 4] = a2;
  return result;
}

uint64_t xzm_reclaim_is_available(uint64_t a1, uint64_t a2)
{
  return mach_vm_reclaim_is_available(a1, a2) & 1;
}

uint64_t xzm_reclaim_mark_free(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v5;
  unsigned __int16 v6;
  unsigned int v7;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v14 = a1;
  v13 = a2;
  v12 = a3;
  v11 = a4;
  v10 = 0;
  v9 = 0;
  v7 = a3;
  if (HIDWORD(a3))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"size <= UINT32_MAX\" failed (/Library/Caches/com.apple.x"
                           "bs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:194)";
    __break(1u);
    JUMPOUT(0x39B4);
  }
  if ((a2 & 0x3FFF) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"vm_addr % XZM_SEGMENT_SLICE_SIZE == 0\" failed (/Library"
                           "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:195)";
    __break(1u);
    JUMPOUT(0x39E8);
  }
  if ((a3 & 0x3FFF) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"vm_size % XZM_SEGMENT_SLICE_SIZE == 0\" failed (/Library"
                           "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:196)";
    __break(1u);
    JUMPOUT(0x3A1CLL);
  }
  v6 = v11 & 1;
  v15 = v14 + 32;
  os_unfair_lock_lock_with_options(v14 + 32, 327680);
  while (!_xzm_reclaim_id_cache_is_empty((_WORD *)(v14 + 40)))
  {
    v10 = _xzm_reclaim_id_cache_pop((_WORD *)(v14 + 40));
    v5 = mach_vm_reclaim_mark_free_with_id(v14, a2, v7, v6, v10, &v9);
    if (!v5)
      goto LABEL_14;
    if (v5 != 5)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: mach_vm_reclaim_mark_free_with_id failed";
      qword_A4038 = v5;
      __break(1u);
      JUMPOUT(0x3AF4);
    }
  }
  v10 = mach_vm_reclaim_mark_free(v14, a2, v7, v6, &v9);
LABEL_14:
  v16 = v14 + 32;
  os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 32));
  if ((v9 & 1) != 0)
    mach_vm_reclaim_update_kernel_accounting(v14);
  return v10;
}

BOOL _xzm_reclaim_id_cache_is_empty(_WORD *a1)
{
  return *a1 == 0;
}

uint64_t _xzm_reclaim_id_cache_pop(_WORD *a1)
{
  __int16 v1;

  if (_xzm_reclaim_id_cache_is_empty(a1))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_reclaim_id_cache_is_empty(cache)\" failed (/Librar"
                           "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:134)";
    __break(1u);
    JUMPOUT(0x3BC0);
  }
  v1 = (*a1)--;
  return *(_QWORD *)&a1[4 * (unsigned __int16)(v1 - 1) + 4];
}

uint64_t xzm_reclaim_force_sync(uint64_t a1)
{
  uint64_t result;

  result = mach_vm_reclaim_synchronize(a1, 1024);
  if ((_DWORD)result)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kr == KERN_SUCCESS\" failed (/Library/Caches/com.apple.x"
                           "bs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:236)";
    __break(1u);
    JUMPOUT(0x3C48);
  }
  return result;
}

mach_vm_address_t _xzm_range_group_alloc_anywhere_segment(mach_vm_address_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  kern_return_t v7;
  int flags;
  mach_vm_address_t address;
  int v10;
  BOOL v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  mach_vm_size_t v16;
  mach_vm_address_t v17;

  v17 = a1;
  v16 = a2;
  v15 = a3;
  v14 = a4;
  v13 = a5;
  v12 = a5 & 1;
  v11 = (a5 & 2) != 0;
  v10 = _xzm_range_group_vm_tag_for_segment(a2, a5 & 1);
  address = v17;
  flags = (v10 << 24) | 1;
  if (v11)
    flags = (v10 << 24) | 3;
  if (v15 > 0x400000)
    v6 = v15;
  else
    v6 = 0x400000;
  v15 = v6;
  if (((v6 - 1) & v6) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"powerof2(align)\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:337)";
    __break(1u);
    JUMPOUT(0x3D6CLL);
  }
  v7 = mach_vm_map(mach_task_self_, &address, v16, v15 - 1, flags, 0, 0, 0, 3, 7, 1u);
  if (v7)
  {
    if (v7 != 3)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Failed to allocate data segment";
      qword_A4038 = v7;
      __break(1u);
      JUMPOUT(0x3E24);
    }
    return 0;
  }
  else
  {
    if (!address)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"vm_addr\" failed (/Library/Caches/com.apple.xbs/Source"
                             "s/libmalloc_driverkit/src/xzone/xzone_segment.c:353)";
      __break(1u);
      JUMPOUT(0x3E98);
    }
    if (address % v15)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"vm_addr % align == 0\" failed (/Library/Caches/com.app"
                             "le.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:354)";
      __break(1u);
      JUMPOUT(0x3ED8);
    }
    return address;
  }
}

uint64_t _xzm_range_group_vm_tag_for_segment(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return 3;
  else
    return 2;
}

void xzm_main_malloc_zone_init_range_groups(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  kern_return_t v7;
  uint64_t cur_protection;
  BOOL v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  mach_vm_address_t address[2];
  kern_return_t v16;
  _QWORD v17[3];
  mach_vm_address_t v18;
  unint64_t v19;
  mach_vm_address_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;

  v35 = a1;
  v34 = 0;
  v33 = 0;
  v32 = 0;
  v31 = 0;
  v30 = parse_void_ranges(&v33, &v31);
  if ((v30 & 1) != 0)
  {
    if (!v33)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"left_void.min_address\" failed (/Library/Caches/com.ap"
                             "ple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:611)";
      __break(1u);
      JUMPOUT(0x3FA8);
    }
    if (v34 < v33)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"left_void.max_address >= left_void.min_address\" faile"
                             "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:612)";
      __break(1u);
      JUMPOUT(0x3FE0);
    }
    if (v31 < v34)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"right_void.min_address >= left_void.max_address\" fail"
                             "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:613)";
      __break(1u);
      JUMPOUT(0x4018);
    }
    if (v32 < v31)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"right_void.max_address >= right_void.min_address\" fai"
                             "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:614)";
      __break(1u);
      JUMPOUT(0x4050);
    }
    v29 = 0;
    if ((v33 & 0x1FFFFFF) != 0)
      v12 = (v33 & 0xFFFFFFFFFE000000) + 0x2000000;
    else
      v12 = v33;
    v29 = v12;
    v28 = v34 - 0x300000000;
    v37 = v34 < 0x300000000;
    if (v34 < 0x300000000)
      v28 = 0;
    v28 &= 0xFFFFFFFFFE000000;
    v27 = 0;
    if (v28 > v29)
      v27 = v28 - v29;
    if ((v27 & 0x1FFFFFF) != 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"left_candidate_span % XZM_PAGE_TABLE_GRANULE == 0\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:649)";
      __break(1u);
      JUMPOUT(0x4140);
    }
    v26 = 0;
    if ((v31 & 0x1FFFFFF) != 0)
      v11 = ((v31 + 0x100000000) & 0xFFFFFFFFFE000000) + 0x2000000;
    else
      v11 = v31 + 0x100000000;
    v26 = v11;
    v25 = v32 - 0x200000000;
    v36 = v32 < 0x200000000;
    if (v32 < 0x200000000)
      v25 = 0;
    v25 &= 0xFFFFFFFFFE000000;
    v24 = 0;
    if (v25 > v26)
      v24 = v25 - v26;
    if ((v24 & 0x1FFFFFF) != 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"right_candidate_span % XZM_PAGE_TABLE_GRANULE == 0\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:669)";
      __break(1u);
      JUMPOUT(0x4240);
    }
    v23 = v27 + v24;
    if (!(v27 + v24))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"candidate_span\" failed (/Library/Caches/com.apple.xbs"
                             "/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:675)";
      __break(1u);
      JUMPOUT(0x4288);
    }
    v22 = v23 >> 25;
    v21 = qword_A8220 % (v23 >> 25);
    v20 = 0;
    v19 = v27 >> 25;
    if (v21 >= v27 >> 25)
    {
      v21 -= v19;
      v20 = v26 + (v21 << 25);
    }
    else
    {
      v20 = v29 + (v21 << 25);
    }
    v18 = v20 + 0x200000000;
    if (v20 < v33 || (v10 = 1, v18 + 0x100000000 > v34))
    {
      v9 = 0;
      if (v20 >= v31 + 0x100000000)
        v9 = v20 + 0x200000000 <= v32;
      v10 = v9;
    }
    if ((v10 & 1) == 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(start_address >= left_void.min_address && end_address"
                             " + XZM_RANGE_SEPARATION <= left_void.max_address) || (start_address >= right_void.min_addre"
                             "ss + XZM_RANGE_SEPARATION && start_address + XZM_POINTER_RANGE_SIZE <= right_void.max_addre"
                             "ss)\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:700)";
      __break(1u);
      JUMPOUT(0x43F0);
    }
    v17[0] = 0x202000000000000;
    v17[1] = v20;
    v17[2] = v18;
    v16 = mach_vm_range_create(mach_task_self_, 1, v17, 24);
    if (v16)
    {
      if (v16 == 46)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: mach_vm_range_create() not supported?";
        __break(1u);
        JUMPOUT(0x44C0);
      }
      if (v16 != 53)
      {
        address[1] = v16;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unexpected error from mach_vm_range_create()";
        qword_A4038 = v16;
        __break(1u);
        JUMPOUT(0x44FCLL);
      }
      malloc_report(3, (uint64_t)"mach_vm_range_create() denied\n", v1, v2, v3, v4, v5, v6, cur_protection);
    }
    else
    {
      address[0] = v20;
      v7 = mach_vm_map(mach_task_self_, address, 0x200000000uLL, 0, 0x4000, 0, 0, 0, 0, 0, 1u);
      v16 = v7;
      if (v7)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: pointer range initial overwrite failed";
        qword_A4038 = v16;
        __break(1u);
        JUMPOUT(0x45ACLL);
      }
      *(_BYTE *)(v35 + 328) |= 1u;
      v14 = *(_QWORD *)(v35 + 384) + 56;
      if (*(_BYTE *)v14 != 1)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_rg->xzrg_id == XZM_RANGE_GROUP_PTR\" failed (/Li"
                               "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:753)";
        __break(1u);
        JUMPOUT(0x460CLL);
      }
      *(_QWORD *)(*(_QWORD *)(v35 + 384) + 80) = v20;
      *(_QWORD *)(v14 + 32) = 0x200000000;
      *(_QWORD *)(v14 + 40) = v20;
      *(_QWORD *)(v14 + 48) = 0x200000000;
      v13 = *(_QWORD *)(v35 + 384);
      if (*(_BYTE *)v13)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"data_rg->xzrg_id == XZM_RANGE_GROUP_DATA\" failed (/"
                               "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:761)";
        __break(1u);
        JUMPOUT(0x4680);
      }
      *(_QWORD *)(v13 + 24) = v34;
      *(_QWORD *)(v13 + 32) = v31 - v34;
    }
  }
}

uint64_t parse_void_ranges(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  int v15;
  char *__endptr;
  size_t v17;
  unint64_t *v18;
  unint64_t *v19;
  char v21[256];

  v19 = a1;
  v18 = a2;
  v17 = 255;
  __endptr = 0;
  if (sysctlbyname("vm.malloc_ranges", v21, &v17, 0, 0) == -1)
  {
    v15 = *__error();
    if (v15 == 1)
    {
      malloc_report(3, (uint64_t)"sysctlbyname(\"vm.malloc_ranges\") denied\n", v2, v3, v4, v5, v6, v7, v14);
    }
    else
    {
      if (v15 != 2)
      {
        v8 = *__error();
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: sysctlbyname(\"vm.malloc_ranges\") failed";
        qword_A4038 = v8;
        __break(1u);
        JUMPOUT(0x47B8);
      }
      malloc_report(6, (uint64_t)"VM user ranges not supported\n", v2, v3, v4, v5, v6, v7, v14);
    }
    return 0;
  }
  else
  {
    v21[v17] = 0;
    __endptr = v21;
    v9 = strtoull(v21, &__endptr, 16);
    *v19 = v9;
    ++__endptr;
    v10 = strtoull(__endptr, &__endptr, 16);
    v19[1] = v10;
    ++__endptr;
    v11 = strtoull(__endptr, &__endptr, 16);
    *v18 = v11;
    ++__endptr;
    v12 = strtoull(__endptr, &__endptr, 16);
    v18[1] = v12;
    return 1;
  }
}

uint64_t xzm_chunk_mark_free(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  BOOL v3;
  char v4;
  int v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned __int8 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;

  v16 = a1;
  v15 = a2;
  v14 = 0;
  v14 = *(_BYTE *)(a2 + 32) & 0xF;
  v19 = a1;
  v18 = v14;
  v17 = 0;
  v24 = a1;
  if (*(_QWORD *)(a1 + 232))
    v9 = *(_QWORD *)(a1 + 232);
  else
    v9 = v24;
  v17 = v9;
  if (v18 == 2 || v18 == 5)
  {
    v20 = (*(_BYTE *)(v17 + 328) & 4) != 0;
  }
  else
  {
    if (v18 - 6 >= 2)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Attempt to check for deferred reclamation on non-chunk slice";
      __break(1u);
      JUMPOUT(0x49BCLL);
    }
    v20 = (*(_BYTE *)(v17 + 328) & 8) != 0;
  }
  if (!v20)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_uses_deferred_reclamation(zone, kind)\" "
                           "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1229)";
    __break(1u);
    JUMPOUT(0x49ECLL);
  }
  v22 = v14;
  if (v14 < 2u)
    goto LABEL_17;
  if (v14 != 2)
  {
    if (v14 - 3 >= 2)
    {
      if (v14 - 5 >= 3)
      {
        v21 = v22;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v22;
        __break(1u);
        JUMPOUT(0x4A98);
      }
      goto LABEL_18;
    }
LABEL_17:
    v23 = 0;
    goto LABEL_19;
  }
LABEL_18:
  v23 = 1;
LABEL_19:
  if (!v23)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_chunk(kind)\" failed (/Library/Caches"
                           "/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1230)";
    __break(1u);
    JUMPOUT(0x4AC8);
  }
  v13 = 0;
  v25 = v16;
  if (*(_QWORD *)(v16 + 232))
    v8 = *(_QWORD *)(v16 + 232);
  else
    v8 = v25;
  v13 = v8;
  v12 = 0;
  v12 = *(_QWORD *)(v8 + 464);
  v11 = 0;
  v28 = v16;
  v27 = v15;
  v26 = 0;
  v35 = v16;
  v34 = v15;
  v33 = v15 & 0xFFFFFFFFFFFFC000;
  v7 = 1;
  if ((v15 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v6 = 0;
    if (v34 >= v33 + 2136)
      v6 = v34 < v33 + 48 * *(unsigned int *)(v33 + 16) + 2136;
    v7 = v6;
  }
  if ((v7 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x4C04);
  }
  v26 = v33;
  v41 = v33;
  v40 = v27;
  v44 = v33;
  v43 = v27;
  if (v27 < v33 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x4C70);
  }
  v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - v44 - 2136) >> 4);
  if (v42 >= *(unsigned int *)(v44 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x4CD8);
  }
  v11 = (uint64_t *)(v33 + 88 + 8 * v42);
  if (*v11 != -1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"*reclaim_id == VM_RECLAIM_INDEX_NULL\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1236)";
    __break(1u);
    JUMPOUT(0x4D20);
  }
  v10 = 0;
  v32 = v16;
  v31 = v15;
  v30 = &v10;
  if (!&v10)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.xbs/S"
                           "ources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
    __break(1u);
    JUMPOUT(0x4D74);
  }
  v29 = 0;
  v39 = v32;
  v38 = v31;
  v37 = v30;
  v5 = *(_BYTE *)(v31 + 32) & 0xF;
  if (v5 == 2)
  {
    *v37 = 0x4000;
  }
  else if (v5 == 5)
  {
    *v37 = 0x10000;
  }
  else
  {
    if ((v5 - 6) >= 2)
    {
      v36 = 0;
      v36 = *(_BYTE *)(v38 + 32) & 0xF;
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
      qword_A4038 = v36;
      __break(1u);
      JUMPOUT(0x4E60);
    }
    *v37 = (unint64_t)*(unsigned int *)(v38 + 40) << 14;
  }
  v46 = v39;
  v45 = v38;
  v49 = v39;
  v48 = v38;
  v47 = v38 & 0xFFFFFFFFFFFFC000;
  v4 = 1;
  if ((v38 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v3 = 0;
    if (v48 >= v47 + 2136)
      v3 = v48 < v47 + 48 * *(unsigned int *)(v47 + 16) + 2136;
    v4 = v3;
  }
  if ((v4 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x4F40);
  }
  v51 = v47;
  v50 = v45;
  v54 = v47;
  v53 = v45;
  if (v45 < v47 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x4FA4);
  }
  v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - v54 - 2136) >> 4);
  if (v52 >= *(unsigned int *)(v54 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x500CLL);
  }
  v56 = v47;
  v55 = v52;
  v29 = *(_QWORD *)(v47 + 80) + ((unint64_t)v52 << 14);
  result = xzm_reclaim_mark_free(v12, v29, v10, 1);
  *v11 = result;
  return result;
}

uint64_t xzm_chunk_mark_used(uint64_t a1, unint64_t a2)
{
  BOOL v3;
  char v4;
  int v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int8 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  unint64_t v57;

  v17 = a1;
  v16 = a2;
  v15 = 0;
  v15 = *(_BYTE *)(a2 + 32) & 0xF;
  v20 = a1;
  v19 = v15;
  v18 = 0;
  v25 = a1;
  if (*(_QWORD *)(a1 + 232))
    v9 = *(_QWORD *)(a1 + 232);
  else
    v9 = v25;
  v18 = v9;
  if (v19 == 2 || v19 == 5)
  {
    v21 = (*(_BYTE *)(v18 + 328) & 4) != 0;
  }
  else
  {
    if (v19 - 6 >= 2)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Attempt to check for deferred reclamation on non-chunk slice";
      __break(1u);
      JUMPOUT(0x517CLL);
    }
    v21 = (*(_BYTE *)(v18 + 328) & 8) != 0;
  }
  if (!v21)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_uses_deferred_reclamation(zone, kind)\" "
                           "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1249)";
    __break(1u);
    JUMPOUT(0x51ACLL);
  }
  v23 = v15;
  if (v15 < 2u)
    goto LABEL_17;
  if (v15 != 2)
  {
    if (v15 - 3 >= 2)
    {
      if (v15 - 5 >= 3)
      {
        v22 = v23;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v23;
        __break(1u);
        JUMPOUT(0x5258);
      }
      goto LABEL_18;
    }
LABEL_17:
    v24 = 0;
    goto LABEL_19;
  }
LABEL_18:
  v24 = 1;
LABEL_19:
  if (!v24)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_chunk(kind)\" failed (/Library/Caches"
                           "/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1250)";
    __break(1u);
    JUMPOUT(0x5288);
  }
  v14 = 0;
  v26 = v17;
  if (*(_QWORD *)(v17 + 232))
    v8 = *(_QWORD *)(v17 + 232);
  else
    v8 = v26;
  v14 = v8;
  v13 = 0;
  v13 = *(_QWORD *)(v8 + 464);
  v12 = 0;
  v29 = v17;
  v28 = v16;
  v27 = 0;
  v36 = v17;
  v35 = v16;
  v34 = v16 & 0xFFFFFFFFFFFFC000;
  v7 = 1;
  if ((v16 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v6 = 0;
    if (v35 >= v34 + 2136)
      v6 = v35 < v34 + 48 * *(unsigned int *)(v34 + 16) + 2136;
    v7 = v6;
  }
  if ((v7 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x53D0);
  }
  v27 = v34;
  v42 = v34;
  v41 = v28;
  v45 = v34;
  v44 = v28;
  if (v28 < v34 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x5440);
  }
  v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - v45 - 2136) >> 4);
  if (v43 >= *(unsigned int *)(v45 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x54ACLL);
  }
  v12 = (uint64_t *)(v34 + 88 + 8 * v43);
  if (*v12 == -1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"*reclaim_id != VM_RECLAIM_INDEX_NULL\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1256)";
    __break(1u);
    JUMPOUT(0x54F8);
  }
  v11 = 0;
  v33 = v17;
  v32 = v16;
  v31 = &v11;
  if (!&v11)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.xbs/S"
                           "ources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
    __break(1u);
    JUMPOUT(0x5550);
  }
  v30 = 0;
  v40 = v33;
  v39 = v32;
  v38 = v31;
  v5 = *(_BYTE *)(v32 + 32) & 0xF;
  if (v5 == 2)
  {
    *v38 = 0x4000;
  }
  else if (v5 == 5)
  {
    *v38 = 0x10000;
  }
  else
  {
    if ((v5 - 6) >= 2)
    {
      v37 = 0;
      v37 = *(_BYTE *)(v39 + 32) & 0xF;
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
      qword_A4038 = v37;
      __break(1u);
      JUMPOUT(0x5654);
    }
    *v38 = (unint64_t)*(unsigned int *)(v39 + 40) << 14;
  }
  v47 = v40;
  v46 = v39;
  v50 = v40;
  v49 = v39;
  v48 = v39 & 0xFFFFFFFFFFFFC000;
  v4 = 1;
  if ((v39 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v3 = 0;
    if (v49 >= v48 + 2136)
      v3 = v49 < v48 + 48 * *(unsigned int *)(v48 + 16) + 2136;
    v4 = v3;
  }
  if ((v4 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x5740);
  }
  v52 = v48;
  v51 = v46;
  v55 = v48;
  v54 = v46;
  if (v46 < v48 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x57A8);
  }
  v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - v55 - 2136) >> 4);
  if (v53 >= *(unsigned int *)(v55 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x5814);
  }
  v57 = v48;
  v56 = v53;
  v30 = *(_QWORD *)(v48 + 80) + ((unint64_t)v53 << 14);
  v10 = xzm_reclaim_mark_used(v13, *v12, v30, v11, 1);
  if ((v10 & 1) != 0)
    *v12 = -1;
  return v10 & 1;
}

unint64_t xzm_segment_group_alloc_chunk(unsigned __int8 *a1, unsigned __int8 a2, unsigned __int8 *a3, unsigned int a4, uint64_t *a5, unint64_t a6, char a7, char a8)
{
  BOOL v9;
  char v10;
  int v11;
  BOOL v12;
  BOOL v13;
  kern_return_t v14;
  mach_vm_address_t address;
  char *v16;
  mach_vm_size_t v17;
  uint64_t chunk;
  char v20;
  char v21;
  unint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned __int8 v26;
  unsigned __int8 *v27;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  os_unfair_lock_t v32;
  os_unfair_lock_t v33;
  os_unfair_lock_t lock;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  char *v37;
  mach_vm_size_t *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  mach_vm_size_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;

  v27 = a1;
  v26 = a2;
  v25 = a3;
  v24 = a4;
  v23 = a5;
  v22 = a6;
  v21 = a7;
  v20 = a8;
  if (a2 == 7)
  {
    if (v25)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"guard_config == NULL\" failed (/Library/Caches/com.app"
                             "le.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2103)";
      __break(1u);
      JUMPOUT(0x5910);
    }
    if (v23)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"preallocate_list == NULL\" failed (/Library/Caches/com"
                             ".apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2104)";
      __break(1u);
      JUMPOUT(0x5940);
    }
    v13 = 1;
    if (v24 <= 0x80)
      v13 = v22 > 0x100000;
    if (!v13)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(slice_count > XZM_LARGE_BLOCK_SIZE_MAX / XZM_SEGMENT_"
                             "SLICE_SIZE) || (alignment > XZM_ALIGNMENT_MAX)\" failed (/Library/Caches/com.apple.xbs/Sour"
                             "ces/libmalloc_driverkit/src/xzone/xzone_segment.c:2107)";
      __break(1u);
      JUMPOUT(0x599CLL);
    }
    return _xzm_segment_group_alloc_huge_chunk(v27, v24, v21 & 1, v22, v20 & 1);
  }
  else
  {
    v12 = 1;
    if (v26 != 6)
      v12 = v22 == 0;
    if (!v12)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kind == XZM_SLICE_KIND_LARGE_CHUNK || alignment == 0\""
                             " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2111)";
      __break(1u);
      JUMPOUT(0x5A20);
    }
    if (v26 == 6 && v24 == 1)
      v24 = 2;
    v31 = v27 + 4;
    os_unfair_lock_lock_with_options(v27 + 4, 327680);
    chunk = _xzm_segment_group_find_and_allocate_chunk((unint64_t *)v27, v26, v25, v23, v24, v22);
    if (chunk)
    {
      v36 = v27 + 4;
      os_unfair_lock_unlock((os_unfair_lock_t)v27 + 1);
    }
    else
    {
      v41 = v27 + 8;
      if (os_unfair_lock_trylock((os_unfair_lock_t)v27 + 2))
      {
        v35 = v27 + 4;
        os_unfair_lock_unlock((os_unfair_lock_t)v27 + 1);
        chunk = _xzm_segment_group_alloc_segment_and_chunk((uint64_t)v27, v26, v25, v23, v24, v22);
      }
      else
      {
        lock = (os_unfair_lock_t)(v27 + 4);
        os_unfair_lock_unlock((os_unfair_lock_t)v27 + 1);
        v30 = v27 + 8;
        os_unfair_lock_lock_with_options(v27 + 8, 327680);
        v29 = v27 + 4;
        os_unfair_lock_lock_with_options(v27 + 4, 327680);
        chunk = _xzm_segment_group_find_and_allocate_chunk((unint64_t *)v27, v26, v25, v23, v24, v22);
        v33 = (os_unfair_lock_t)(v27 + 4);
        os_unfair_lock_unlock((os_unfair_lock_t)v27 + 1);
        if (chunk)
        {
          v32 = (os_unfair_lock_t)(v27 + 8);
          os_unfair_lock_unlock((os_unfair_lock_t)v27 + 2);
        }
        else
        {
          chunk = _xzm_segment_group_alloc_segment_and_chunk((uint64_t)v27, v26, v25, v23, v24, v22);
        }
      }
    }
    if (chunk)
    {
      v17 = 0;
      v16 = 0;
      v40 = *((_QWORD *)v27 + 3);
      v39 = chunk;
      v38 = &v17;
      if (!&v17)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.x"
                               "bs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
        __break(1u);
        JUMPOUT(0x5C48);
      }
      v37 = 0;
      v46 = v40;
      v45 = v39;
      v44 = v38;
      v11 = *(_BYTE *)(v39 + 32) & 0xF;
      if (v11 == 2)
      {
        *v44 = 0x4000;
      }
      else if (v11 == 5)
      {
        *v44 = 0x10000;
      }
      else
      {
        if ((v11 - 6) >= 2)
        {
          v43 = 0;
          v43 = *(_BYTE *)(v45 + 32) & 0xF;
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
          qword_A4038 = v43;
          __break(1u);
          JUMPOUT(0x5D34);
        }
        *v44 = (unint64_t)*(unsigned int *)(v45 + 40) << 14;
      }
      v48 = v46;
      v47 = v45;
      v51 = v46;
      v50 = v45;
      v49 = v45 & 0xFFFFFFFFFFFFC000;
      v10 = 1;
      if ((v45 & 0xFFFFFFFFFFFFC000) != 0)
      {
        v9 = 0;
        if (v50 >= v49 + 2136)
          v9 = v50 < v49 + 48 * *(unsigned int *)(v49 + 16) + 2136;
        v10 = v9;
      }
      if ((v10 & 1) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x5E14);
      }
      v53 = v49;
      v52 = v47;
      v56 = v49;
      v55 = v47;
      if (v47 < v49 + 2136)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x5E78);
      }
      v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - v56 - 2136) >> 4);
      if (v54 >= *(unsigned int *)(v56 + 16))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x5EE0);
      }
      v58 = v49;
      v57 = v54;
      v37 = (char *)(*(_QWORD *)(v49 + 80) + ((unint64_t)v54 << 14));
      v16 = v37;
      if ((*(_BYTE *)(chunk + 32) & 0x10) == 0)
      {
        v42 = v27;
        if ((*(_BYTE *)(*((_QWORD *)v27 + 3) + 328) & 2) != 0 && v26 == 6)
        {
          _xzm_segment_group_overwrite_chunk((mach_vm_address_t)v16, v17);
          *(_BYTE *)(chunk + 32) |= 0x10u;
        }
        else if ((v21 & 1) != 0)
        {
          if (v26 == 2)
            _platform_bzero(v16, v17);
          else
            _xzm_segment_group_clear_chunk((uint64_t)v27, v16, v17);
          *(_BYTE *)(chunk + 32) |= 0x10u;
        }
      }
      if ((v20 & 1) != 0)
      {
        if (v25)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"guard_config == NULL\" failed (/Library/Caches/com"
                                 ".apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2212)";
          __break(1u);
          JUMPOUT(0x6000);
        }
        if (v26 != 6)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kind == XZM_SLICE_KIND_LARGE_CHUNK\" failed (/Libr"
                                 "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2213)";
          __break(1u);
          JUMPOUT(0x6034);
        }
        address = (mach_vm_address_t)v16;
        v14 = mach_vm_map(mach_task_self_, &address, v17, 0, 33570818, 0, 0, 0, 3, 7, 1u);
        if (v14)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: mach_vm_map() overwrite failed";
          qword_A4038 = v14;
          __break(1u);
          JUMPOUT(0x60F4);
        }
      }
    }
    return chunk;
  }
}

unint64_t _xzm_segment_group_alloc_huge_chunk(unsigned __int8 *a1, unsigned int a2, char a3, unint64_t a4, char a5)
{
  int v5;
  int v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  _BOOL4 v44;
  int v45;
  int v46;
  uint64_t v47;
  _BOOL4 v48;
  int v49;
  int v50;
  int v51;
  int v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  char v61;
  unint64_t v62;
  char v63;
  unsigned int v64;
  unsigned __int8 *v65;
  unint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char v72;

  v53 = &v72;
  v65 = a1;
  v64 = a2;
  v63 = a3;
  v62 = a4;
  v61 = a5;
  if (!(a4 >> 22))
    v62 = 0;
  if ((v62 & 0x3FFFFF) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"alignment % XZM_SEGMENT_SIZE == 0\" failed (/Library/Cac"
                           "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1973)";
    __break(1u);
    JUMPOUT(0x6198);
  }
  v60 = 0;
  v60 = (*(_BYTE *)(*((_QWORD *)v65 + 3) + 328) & 8) != 0;
  v5 = *v65 - 1;
  v52 = 1;
  if (v5)
    v52 = !v60;
  if ((v52 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"sg->xzsg_id == XZM_SEGMENT_GROUP_DATA_LARGE || !defer_la"
                           "rge\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1976)";
    __break(1u);
    JUMPOUT(0x6210);
  }
  v6 = *v65;
  v51 = 1;
  if (v6)
    v51 = v60;
  if ((v51 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"sg->xzsg_id == XZM_SEGMENT_GROUP_DATA || defer_large\" f"
                           "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1977)";
    __break(1u);
    JUMPOUT(0x6264);
  }
  v59 = (unint64_t)v64 << 14;
  v58 = 0;
  if (*v65 == 1
    && *((_WORD *)v65 + 256)
    && v64 <= *((_DWORD *)v65 + 129)
    && v62 <= 0x400000
    && (v58 = _xzm_segment_group_alloc_huge_chunk_from_cache((uint64_t)v65, v64)) != 0)
  {
    if ((v63 & 1) != 0)
    {
      v7 = v53;
      v57 = 0;
      v56 = 0;
      v8 = v58;
      *((_QWORD *)v53 + 2) = *((_QWORD *)v65 + 3);
      *((_QWORD *)v7 + 1) = v8;
      *(_QWORD *)v7 = &v57;
      if (!*(_QWORD *)v7)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.x"
                               "bs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
        __break(1u);
        JUMPOUT(0x6358);
      }
      v9 = v53;
      v71 = 0;
      v10 = *((_QWORD *)v53 + 1);
      v11 = *(_QWORD *)v53;
      *((_QWORD *)v53 + 6) = *((_QWORD *)v53 + 2);
      *((_QWORD *)v9 + 5) = v10;
      *((_QWORD *)v9 + 4) = v11;
      if (*((_QWORD *)v9 + 4))
      {
        v50 = *(_BYTE *)(*((_QWORD *)v53 + 5) + 32) & 0xF;
        if (v50 == 2)
        {
          **((_QWORD **)v53 + 4) = 0x4000;
        }
        else if (v50 == 5)
        {
          **((_QWORD **)v53 + 4) = 0x10000;
        }
        else
        {
          if ((v50 - 6) >= 2)
          {
            v12 = v53;
            *((_QWORD *)v53 + 3) = 0;
            *((_QWORD *)v12 + 3) = *(_BYTE *)(*((_QWORD *)v12 + 5) + 32) & 0xF;
            v13 = *((_QWORD *)v12 + 3);
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
            qword_A4038 = v13;
            __break(1u);
            JUMPOUT(0x645CLL);
          }
          **((_QWORD **)v53 + 4) = (unint64_t)*(unsigned int *)(*((_QWORD *)v53 + 5) + 40) << 14;
        }
      }
      v14 = v53;
      v15 = *((_QWORD *)v53 + 5);
      *((_QWORD *)v53 + 17) = *((_QWORD *)v53 + 6);
      *((_QWORD *)v14 + 16) = v15;
      v16 = *((_QWORD *)v14 + 16);
      *((_QWORD *)v14 + 20) = *((_QWORD *)v14 + 17);
      *((_QWORD *)v14 + 19) = v16;
      *((_QWORD *)v14 + 18) = 0;
      *((_QWORD *)v14 + 18) = *((_QWORD *)v14 + 19) & 0xFFFFFFFFFFFFC000;
      v17 = *((_QWORD *)v14 + 18);
      v49 = 1;
      if (v17)
      {
        v18 = *((_QWORD *)v53 + 19) >= (unint64_t)(*((_QWORD *)v53 + 18) + 2136);
        v48 = 0;
        if (v18)
          v48 = *((_QWORD *)v53 + 19) < *((_QWORD *)v53 + 18)
                                      + 48 * (unint64_t)*(unsigned int *)(*((_QWORD *)v53 + 18) + 16)
                                      + 2136;
        v49 = v48;
      }
      if ((v49 & 1) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x6548);
      }
      v19 = v53;
      v20 = *((_QWORD *)v53 + 16);
      *((_QWORD *)v53 + 22) = *((_QWORD *)v53 + 18);
      *((_QWORD *)v19 + 21) = v20;
      v47 = *((_QWORD *)v19 + 22);
      v21 = *((_QWORD *)v19 + 21);
      *((_QWORD *)v19 + 25) = v47;
      *((_QWORD *)v19 + 24) = v21;
      if (*((_QWORD *)v19 + 24) < (unint64_t)(*((_QWORD *)v19 + 25) + 2136))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x65B0);
      }
      v22 = v53;
      *((_QWORD *)v53 + 23) = 0;
      *((_QWORD *)v22 + 23) = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v22 + 24) - *((_QWORD *)v22 + 25) - 2136) >> 4);
      if (*((_QWORD *)v22 + 23) >= (uint64_t)*(unsigned int *)(*((_QWORD *)v22 + 25) + 16))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x661CLL);
      }
      v23 = v53;
      v24 = *((_QWORD *)v53 + 23);
      *((_QWORD *)v53 + 27) = v47;
      *((_DWORD *)v23 + 53) = v24;
      v71 = (char *)(*(_QWORD *)(*((_QWORD *)v23 + 27) + 80) + ((unint64_t)*((unsigned int *)v23 + 53) << 14));
      v56 = v71;
      _xzm_segment_group_clear_chunk((uint64_t)v65, v71, v57);
      *(_BYTE *)(v58 + 32) |= 0x10u;
    }
    else
    {
      *(_BYTE *)(v58 + 32) &= ~0x10u;
    }
    v55 = 0;
    v54 = 0;
    v70 = *((_QWORD *)v65 + 3);
    v69 = v58;
    v68 = &v55;
    if (&v41 == (uint64_t *)-96)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.xbs"
                             "/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
      __break(1u);
      JUMPOUT(0x66E0);
    }
    v25 = v53;
    v67 = 0;
    v26 = v69;
    v27 = v68;
    *((_QWORD *)v53 + 10) = v70;
    *((_QWORD *)v25 + 9) = v26;
    *((_QWORD *)v25 + 8) = v27;
    if (*((_QWORD *)v25 + 8))
    {
      v46 = *(_BYTE *)(*((_QWORD *)v53 + 9) + 32) & 0xF;
      if (v46 == 2)
      {
        **((_QWORD **)v53 + 8) = 0x4000;
      }
      else if (v46 == 5)
      {
        **((_QWORD **)v53 + 8) = 0x10000;
      }
      else
      {
        if ((v46 - 6) >= 2)
        {
          v28 = v53;
          *((_QWORD *)v53 + 7) = 0;
          *((_QWORD *)v28 + 7) = *(_BYTE *)(*((_QWORD *)v28 + 9) + 32) & 0xF;
          v29 = *((_QWORD *)v28 + 7);
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
          qword_A4038 = v29;
          __break(1u);
          JUMPOUT(0x67E4);
        }
        **((_QWORD **)v53 + 8) = (unint64_t)*(unsigned int *)(*((_QWORD *)v53 + 9) + 40) << 14;
      }
    }
    v30 = v53;
    v31 = *((_QWORD *)v53 + 9);
    *((_QWORD *)v53 + 12) = *((_QWORD *)v53 + 10);
    *((_QWORD *)v30 + 11) = v31;
    v32 = *((_QWORD *)v30 + 11);
    *((_QWORD *)v30 + 15) = *((_QWORD *)v30 + 12);
    *((_QWORD *)v30 + 14) = v32;
    *((_QWORD *)v30 + 13) = 0;
    *((_QWORD *)v30 + 13) = *((_QWORD *)v30 + 14) & 0xFFFFFFFFFFFFC000;
    v33 = *((_QWORD *)v30 + 13);
    v45 = 1;
    if (v33)
    {
      v18 = *((_QWORD *)v53 + 14) >= (unint64_t)(*((_QWORD *)v53 + 13) + 2136);
      v44 = 0;
      if (v18)
        v44 = *((_QWORD *)v53 + 14) < *((_QWORD *)v53 + 13)
                                    + 48 * (unint64_t)*(unsigned int *)(*((_QWORD *)v53 + 13) + 16)
                                    + 2136;
      v45 = v44;
    }
    if ((v45 & 1) == 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0x68D0);
    }
    v34 = v53;
    v35 = *((_QWORD *)v53 + 11);
    *((_QWORD *)v53 + 29) = *((_QWORD *)v53 + 13);
    *((_QWORD *)v34 + 28) = v35;
    v43 = *((_QWORD *)v34 + 29);
    v36 = *((_QWORD *)v34 + 28);
    *((_QWORD *)v34 + 32) = v43;
    *((_QWORD *)v34 + 31) = v36;
    if (*((_QWORD *)v34 + 31) < (unint64_t)(*((_QWORD *)v34 + 32) + 2136))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0x6938);
    }
    v37 = v53;
    *((_QWORD *)v53 + 30) = 0;
    *((_QWORD *)v37 + 30) = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v37 + 31) - *((_QWORD *)v37 + 32) - 2136) >> 4);
    if (*((_QWORD *)v37 + 30) >= (uint64_t)*(unsigned int *)(*((_QWORD *)v37 + 32) + 16))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0x69A4);
    }
    v38 = v53;
    v39 = *((_QWORD *)v53 + 30);
    *((_QWORD *)v53 + 34) = v43;
    *((_DWORD *)v38 + 67) = v39;
    v67 = *(_QWORD *)(*((_QWORD *)v38 + 34) + 80) + ((unint64_t)*((unsigned int *)v38 + 67) << 14);
    v54 = v67;
    v42 = 1;
    if (v62)
      v42 = v54 % v62 == 0;
    if (!v42)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"alignment == 0 || (start % alignment) == 0\" failed (/"
                             "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2003)";
      __break(1u);
      JUMPOUT(0x6A3CLL);
    }
    return v58;
  }
  else if ((_xzm_segment_group_alloc_segment((uint64_t)v65, v59, v62, (uint64_t *)&v58, v61 & 1) & 1) != 0)
  {
    return v58;
  }
  else
  {
    return 0;
  }
}

uint64_t _xzm_segment_group_find_and_allocate_chunk(unint64_t *a1, unsigned __int8 a2, unsigned __int8 *a3, uint64_t *a4, unsigned int a5, unint64_t a6)
{
  unsigned int v6;
  BOOL v7;
  double v8;
  float v9;
  uint64_t v10;
  int v12;
  BOOL v13;
  char v14;
  unsigned int v15;
  char v16;
  int v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  uint64_t inited;
  int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t i;
  unint64_t *v29;
  uint32_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  char v43;
  unint64_t v44;
  BOOL v45;
  int64_t v46;
  unint64_t v47;

  v36 = a6;
  if (a2 >= 2u)
  {
    if (a2 == 2)
    {
LABEL_7:
      v43 = 1;
      goto LABEL_8;
    }
    if (a2 - 3 >= 2)
    {
      if (a2 - 5 >= 3)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = a2;
        __break(1u);
        JUMPOUT(0x6B8CLL);
      }
      goto LABEL_7;
    }
  }
  v43 = 0;
LABEL_8:
  if (!v43)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_chunk(kind)\" failed (/Library/Caches"
                           "/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1617)";
    __break(1u);
    JUMPOUT(0x6BBCLL);
  }
  v23 = 1;
  if (a2 == 2)
    v23 = a5 == 1;
  if (!v23)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kind != XZM_SLICE_KIND_TINY_CHUNK || slice_count == 1\" "
                           "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1618)";
    __break(1u);
    JUMPOUT(0x6C18);
  }
  if (!a5)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count != 0\" failed (/Library/Caches/com.apple.xbs"
                           "/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1619)";
    __break(1u);
    JUMPOUT(0x6C48);
  }
  if ((unint64_t)a5 << 14 > 0x200000)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count * XZM_SEGMENT_SLICE_SIZE <= XZM_LARGE_BLOCK_"
                           "SIZE_MAX\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1621)";
    __break(1u);
    JUMPOUT(0x6C80);
  }
  v22 = 1;
  if (a6)
    v22 = a2 == 6;
  if (!v22)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"alignment == 0 || kind == XZM_SLICE_KIND_LARGE_CHUNK\" f"
                           "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1622)";
    __break(1u);
    JUMPOUT(0x6CD8);
  }
  v21 = 1;
  if (a2 == 2)
    v21 = a3 != 0;
  if (!v21)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kind != XZM_SLICE_KIND_TINY_CHUNK || guard_config != NUL"
                           "L\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1624)";
    __break(1u);
    JUMPOUT(0x6D34);
  }
  v20 = 1;
  if (a2 == 5)
    v20 = a3 != 0;
  if (!v20)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kind != XZM_SLICE_KIND_SMALL_CHUNK || guard_config != NU"
                           "LL\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1625)";
    __break(1u);
    JUMPOUT(0x6D90);
  }
  v19 = 1;
  if (a2 == 6)
    v19 = a3 == 0;
  if (!v19)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kind != XZM_SLICE_KIND_LARGE_CHUNK || guard_config == NU"
                           "LL\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1626)";
    __break(1u);
    JUMPOUT(0x6DECLL);
  }
  if (a6 <= 0x4000)
    v36 = 0;
  v35 = v36 >> 14;
  if (((v36 >> 14) & 0x3FFFF00000000) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Unexpected align value";
    qword_A4038 = v36;
    __break(1u);
    JUMPOUT(0x6E78);
  }
  if (a3 && *a3)
  {
    v32 = arc4random_uniform(*a3) + 1;
    v33 = v32 * a5;
    v31 = (unsigned __int16)(a3[1] * (_WORD)v33) >> 8;
    if (a3[1] * (_BYTE)v33)
    {
      v30 = (a3[1] * v33);
      if (v30 > arc4random_uniform(0x100u))
        ++v31;
    }
    v34 = v33 + v31;
  }
  else
  {
    v34 = a5;
    v32 = 1;
    v31 = 0;
  }
  v18 = 1;
  if (v34 >= 0x81)
    v18 = v36 != 0;
  if (!v18)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"total_slice_count <= (XZM_LARGE_BLOCK_SIZE_MAX / XZM_SEG"
                           "MENT_SLICE_SIZE) || alignment != 0\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_"
                           "driverkit/src/xzone/xzone_segment.c:1663)";
    __break(1u);
    JUMPOUT(0x6FCCLL);
  }
  if (v32 < (int)v31)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunks_in_run >= guards\" failed (/Library/Caches/com.ap"
                           "ple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1666)";
    __break(1u);
    JUMPOUT(0x7004);
  }
  if (v35)
  {
    v17 = v35 - 1;
    v6 = v34 + v35 - 1;
    v7 = __CFADD__(v34, v35 - 1);
    v34 += v17;
    if (v7)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Unexpected total slice count";
      qword_A4038 = a5 + v17;
      __break(1u);
      JUMPOUT(0x70BCLL);
    }
    if (v6 >= 0x100)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"total_slice_count < XZM_SLICES_PER_SEGMENT\" failed (/"
                             "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1686)";
      __break(1u);
      JUMPOUT(0x70F4);
    }
  }
  v29 = (unint64_t *)xzm_span_queue_for ((uint64_t)a1, v34);
LABEL_60:
  if (v29 >= a1 + 58)
    return 0;
  v27 = 0;
  for (i = *v29; ; i = v27)
  {
    v16 = 0;
    if (i)
    {
      v27 = *(_QWORD *)(i + 16);
      v16 = 1;
    }
    if ((v16 & 1) == 0)
    {
      v29 += 2;
      goto LABEL_60;
    }
    v15 = (*(_BYTE *)(i + 32) & 0xF) == 1 ? 1 : *(_DWORD *)(i + 40);
    v26 = v15;
    if (v15 >= v34)
    {
      switch(*(_BYTE *)a1)
      {
        case 0:
        case 2:
          v45 = (*(_BYTE *)(a1[3] + 328) & 4) != 0;
          break;
        case 1:
        case 3:
          v45 = (*(_BYTE *)(a1[3] + 328) & 8) != 0;
          break;
        default:
          v10 = *(unsigned __int8 *)a1;
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
          qword_A4038 = v10;
          __break(1u);
          JUMPOUT(0x7288);
      }
      if (!v45 || (_xzm_segment_group_span_mark_used((unsigned __int8 *)a1, i) & 1) != 0)
        break;
    }
  }
  if (*(_QWORD *)(i + 16))
    *(_QWORD *)(*(_QWORD *)(i + 16) + 24) = *(_QWORD *)(i + 24);
  **(_QWORD **)(i + 24) = *(_QWORD *)(i + 16);
  *(_QWORD *)(i + 16) = -1;
  *(_QWORD *)(i + 24) = -1;
  v44 = i & 0xFFFFFFFFFFFFC000;
  v14 = 1;
  if ((i & 0xFFFFFFFFFFFFC000) != 0)
  {
    v13 = 0;
    if (i >= v44 + 2136)
      v13 = i < (i & 0xFFFFFFFFFFFFC000)
              + 48 * *(unsigned int *)((char *)&dword_10 + (i & 0xFFFFFFFFFFFFC000))
              + 2136;
    v14 = v13;
  }
  if ((v14 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x73F8);
  }
  if (v35)
  {
    if (i < v44 + 2136)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0x7460);
    }
    v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(i - v44 - 2136) >> 4);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(i - (i & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)&dword_10 + (i & 0xFFFFFFFFFFFFC000)))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0x74C8);
    }
    if (v47 % v35)
      v12 = v35 + v47 / v35 * v35;
    else
      v12 = -1431655765 * ((uint64_t)(i - v44 - 2136) >> 4);
    v25 = v12 - v47;
    if (a5 > v34 - (v12 - (_DWORD)v47))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count <= (total_slice_count - to_remove)\" faile"
                             "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1721)";
      __break(1u);
      JUMPOUT(0x7584);
    }
    if (v25)
    {
      v26 = v15 - v25;
      i = _xzm_segment_group_segment_slice_split((os_unfair_lock_s *)a1, v44, i, v15 - v25, 1);
      v34 = a5;
    }
  }
  if (v26 > v34)
    _xzm_segment_group_segment_slice_split((os_unfair_lock_s *)a1, v44, i, v34, 0);
  if (i < v44 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x7650);
  }
  v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(i - v44 - 2136) >> 4);
  if (v46 >= *(unsigned int *)(v44 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x76B8);
  }
  inited = _xzm_segment_group_segment_span_init_run((uint64_t)a1, v44, a2, a4, v46, v34, v31, v32, v8, v9);
  if (!inited)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                           "bmalloc_driverkit/src/xzone/xzone_segment.c:1747)";
    __break(1u);
    JUMPOUT(0x7720);
  }
  if (!_xzm_segment_group_segment_is_valid((os_unfair_lock_s *)a1, v44))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_segment_is_valid(sg, segment)\" faile"
                           "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1749)";
    __break(1u);
    JUMPOUT(0x7758);
  }
  return inited;
}

uint64_t _xzm_segment_group_alloc_segment_and_chunk(uint64_t a1, unsigned __int8 a2, unsigned __int8 *a3, uint64_t *a4, unsigned int a5, unint64_t a6)
{
  _BYTE v7[9];

  v7[8] = 0;
  *(_QWORD *)v7 = _xzm_segment_group_alloc_segment(a1, 0, 0, 0, 0);
  if ((v7[0] & 1) != 0)
  {
    *(_QWORD *)&v7[1] = _xzm_segment_group_find_and_allocate_chunk((unint64_t *)a1, a2, a3, a4, a5, a6);
    if (!*(_QWORD *)&v7[1])
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk\" failed (/Library/Caches/com.apple.xbs/Sources/"
                             "libmalloc_driverkit/src/xzone/xzone_segment.c:2032)";
      __break(1u);
      JUMPOUT(0x7864);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 4));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  return *(_QWORD *)&v7[1];
}

uint64_t _xzm_segment_group_overwrite_chunk(mach_vm_address_t a1, mach_vm_size_t a2)
{
  uint64_t result;
  mach_vm_address_t address[3];

  address[2] = a1;
  address[1] = a2;
  address[0] = a1;
  result = mach_vm_map(mach_task_self_, address, a2, 0, 33570816, 0, 0, 0, 3, 7, 1u);
  if ((_DWORD)result)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: mach_vm_map() overwrite failed";
    qword_A4038 = (int)result;
    __break(1u);
    JUMPOUT(0x7974);
  }
  return result;
}

void _xzm_segment_group_clear_chunk(uint64_t a1, char *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (madvise(a2, a3, 11))
  {
    __error();
    malloc_zone_error(0, 0, (uint64_t)"Failed to madvise(MADV_ZERO) chunk at %p, error: %d\n", v3, v4, v5, v6, v7, (uint64_t)a2);
    _xzm_segment_group_bzero_chunk(a1, a2, a3);
  }
}

void xzm_segment_group_segment_madvise_span(uint64_t a1, void *a2, unsigned int a3)
{
  if (((unsigned __int16)a2 & 0x3FFF) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice_start % XZM_SEGMENT_SLICE_SIZE == 0\" f"
                           "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2649)";
    __break(1u);
    JUMPOUT(0x7A60);
  }
  xzm_madvise(*(_QWORD *)(a1 + 24), a2, (unint64_t)a3 << 14);
}

void xzm_madvise(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (mvm_madvise_plat(a2, a3, 7))
  {
    __error();
    malloc_zone_error(0, 0, (uint64_t)"Failed to madvise chunk at %p, error: %d\n", v3, v4, v5, v6, v7, (uint64_t)a2);
  }
}

void xzm_segment_group_segment_madvise_chunk(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _BOOL4 v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  char v14;
  uint64_t v15;
  size_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;

  v11 = a1;
  v10 = a2;
  v13 = *(_BYTE *)(a2 + 32) & 0xF;
  v7 = v13;
  if (v13 < 2u)
    goto LABEL_6;
  if (v7 != 2)
  {
    if ((v7 - 3) >= 2)
    {
      if ((v7 - 5) >= 3)
      {
        v12 = v13;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v13;
        __break(1u);
        JUMPOUT(0x7BF8);
      }
      goto LABEL_7;
    }
LABEL_6:
    v14 = 0;
    goto LABEL_8;
  }
LABEL_7:
  v14 = 1;
LABEL_8:
  if (!v14)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_chunk(chunk->xzc_bits.xzcb_kind)\" fa"
                           "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2658)";
    __break(1u);
    JUMPOUT(0x7C28);
  }
  v9 = 0;
  v8 = 0;
  v18 = *(_QWORD *)(v11 + 24);
  v17 = v10;
  v16 = &v9;
  if (&v2 == (uint64_t *)-40)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.xbs/S"
                           "ources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
    __break(1u);
    JUMPOUT(0x7C84);
  }
  v15 = 0;
  v22 = v18;
  v21 = v17;
  v20 = v16;
  if (v16)
  {
    v6 = *(_BYTE *)(v21 + 32) & 0xF;
    if (v6 == 2)
    {
      *v20 = 0x4000;
    }
    else if (v6 == 5)
    {
      *v20 = 0x10000;
    }
    else
    {
      if ((v6 - 6) >= 2)
      {
        v19 = 0;
        v19 = *(_BYTE *)(v21 + 32) & 0xF;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
        qword_A4038 = v19;
        __break(1u);
        JUMPOUT(0x7D70);
      }
      *v20 = (unint64_t)*(unsigned int *)(v21 + 40) << 14;
    }
  }
  v24 = v22;
  v23 = v21;
  v27 = v22;
  v26 = v21;
  v25 = v21 & 0xFFFFFFFFFFFFC000;
  v5 = 1;
  if ((v21 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v4 = 0;
    if (v26 >= v25 + 2136)
      v4 = v26 < v25 + 48 * *(unsigned int *)(v25 + 16) + 2136;
    v5 = v4;
  }
  if ((v5 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x7E50);
  }
  v29 = v25;
  v28 = v23;
  v3 = v25;
  v32 = v25;
  v31 = v23;
  if (v23 < v25 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x7EB4);
  }
  v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v32 - 2136) >> 4);
  if (v30 >= *(unsigned int *)(v32 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x7F1CLL);
  }
  v34 = v3;
  v33 = v30;
  xzm_madvise(*(_QWORD *)(v11 + 24), (void *)(*(_QWORD *)(v3 + 80) + ((unint64_t)v30 << 14)), v9);
}

void xzm_segment_group_free_chunk(unsigned __int8 *a1, unint64_t a2, char a3)
{
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  mach_vm_size_t *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL4 v54;
  int v55;
  int v56;
  _BOOL4 v57;
  int v58;
  uint64_t v59;
  _BOOL4 v60;
  int v61;
  int v62;
  char *v63;
  int v64;
  char v65;
  unint64_t v66;
  mach_vm_address_t v67;
  mach_vm_size_t v68;
  unint64_t v69;
  mach_vm_address_t v70;
  mach_vm_size_t v71;
  unsigned __int8 v72;
  char v73;
  unint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  os_unfair_lock_t lock;
  uint64_t v78;
  unsigned __int8 v79;
  char v80;
  mach_vm_address_t v81;
  mach_vm_size_t *v82;
  unint64_t v83;
  char v84;
  BOOL v85;
  BOOL v86;
  unsigned __int8 v87;
  char v88;

  v63 = &v84;
  v75 = a1;
  v74 = a2;
  v73 = a3;
  v72 = 0;
  v72 = *(_BYTE *)(a2 + 32) & 0xF;
  v79 = v72;
  v64 = v72;
  if (v72 < 2u)
    goto LABEL_6;
  if (v64 != 2)
  {
    if ((v64 - 3) >= 2)
    {
      if ((v64 - 5) >= 3)
      {
        v78 = v79;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v79;
        __break(1u);
        JUMPOUT(0x8054);
      }
      goto LABEL_7;
    }
LABEL_6:
    v80 = 0;
    goto LABEL_8;
  }
LABEL_7:
  v80 = 1;
LABEL_8:
  if (!v80)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_chunk(kind)\" failed (/Library/Caches"
                           "/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2672)";
    __break(1u);
    JUMPOUT(0x8084);
  }
  if (v72 == 7)
  {
    _xzm_segment_group_free_huge_chunk((uint64_t)v75, v74, v73 & 1);
  }
  else
  {
    if ((v73 & 1) != 0)
    {
      if (v72 != 6)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kind == XZM_SLICE_KIND_LARGE_CHUNK\" failed (/Librar"
                               "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2681)";
        __break(1u);
        JUMPOUT(0x80ECLL);
      }
      v3 = v63;
      v71 = 0;
      v70 = 0;
      v4 = v74;
      *((_QWORD *)v63 + 4) = *((_QWORD *)v75 + 3);
      *((_QWORD *)v3 + 3) = v4;
      *((_QWORD *)v3 + 2) = &v71;
      if (!*((_QWORD *)v3 + 2))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.x"
                               "bs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
        __break(1u);
        JUMPOUT(0x814CLL);
      }
      v5 = v63;
      *((_QWORD *)v63 + 1) = 0;
      v6 = *((_QWORD *)v5 + 3);
      v7 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 20) = *((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 19) = v6;
      *((_QWORD *)v5 + 18) = v7;
      if (*((_QWORD *)v5 + 18))
      {
        v62 = *(_BYTE *)(*((_QWORD *)v63 + 19) + 32) & 0xF;
        if (v62 == 2)
        {
          **((_QWORD **)v63 + 18) = 0x4000;
        }
        else if (v62 == 5)
        {
          **((_QWORD **)v63 + 18) = 0x10000;
        }
        else
        {
          if ((v62 - 6) >= 2)
          {
            v8 = v63;
            *((_QWORD *)v63 + 17) = 0;
            *((_QWORD *)v8 + 17) = *(_BYTE *)(*((_QWORD *)v8 + 19) + 32) & 0xF;
            v9 = *((_QWORD *)v8 + 17);
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
            qword_A4038 = v9;
            __break(1u);
            JUMPOUT(0x8250);
          }
          **((_QWORD **)v63 + 18) = (unint64_t)*(unsigned int *)(*((_QWORD *)v63 + 19) + 40) << 14;
        }
      }
      v10 = v63;
      v11 = *((_QWORD *)v63 + 19);
      *((_QWORD *)v63 + 31) = *((_QWORD *)v63 + 20);
      *((_QWORD *)v10 + 30) = v11;
      v12 = *((_QWORD *)v10 + 30);
      *((_QWORD *)v10 + 34) = *((_QWORD *)v10 + 31);
      *((_QWORD *)v10 + 33) = v12;
      *((_QWORD *)v10 + 32) = 0;
      *((_QWORD *)v10 + 32) = *((_QWORD *)v10 + 33) & 0xFFFFFFFFFFFFC000;
      v13 = *((_QWORD *)v10 + 32);
      v61 = 1;
      if (v13)
      {
        v14 = *((_QWORD *)v63 + 33) >= (unint64_t)(*((_QWORD *)v63 + 32) + 2136);
        v60 = 0;
        if (v14)
          v60 = *((_QWORD *)v63 + 33) < *((_QWORD *)v63 + 32)
                                      + 48 * (unint64_t)*(unsigned int *)(*((_QWORD *)v63 + 32) + 16)
                                      + 2136;
        v61 = v60;
      }
      if ((v61 & 1) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x833CLL);
      }
      v15 = v63;
      v16 = *((_QWORD *)v63 + 30);
      *((_QWORD *)v63 + 36) = *((_QWORD *)v63 + 32);
      *((_QWORD *)v15 + 35) = v16;
      v59 = *((_QWORD *)v15 + 36);
      v17 = *((_QWORD *)v15 + 35);
      *((_QWORD *)v15 + 39) = v59;
      *((_QWORD *)v15 + 38) = v17;
      if (*((_QWORD *)v15 + 38) < (unint64_t)(*((_QWORD *)v15 + 39) + 2136))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x83A4);
      }
      v18 = v63;
      *((_QWORD *)v63 + 37) = 0;
      *((_QWORD *)v18 + 37) = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v18 + 38) - *((_QWORD *)v18 + 39) - 2136) >> 4);
      if (*((_QWORD *)v18 + 37) >= (uint64_t)*(unsigned int *)(*((_QWORD *)v18 + 39) + 16))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x8410);
      }
      v19 = v63;
      v20 = *((_QWORD *)v63 + 37);
      *((_QWORD *)v63 + 41) = v59;
      *((_DWORD *)v19 + 81) = v20;
      *((_QWORD *)v19 + 1) = *(_QWORD *)(*((_QWORD *)v19 + 41) + 80)
                           + ((unint64_t)*((unsigned int *)v19 + 81) << 14);
      v70 = *((_QWORD *)v19 + 1);
      _xzm_segment_group_overwrite_chunk(v70, v71);
    }
    v21 = v63;
    v69 = 0;
    v22 = v74;
    *((_QWORD *)v63 + 8) = *((_QWORD *)v75 + 3);
    *((_QWORD *)v21 + 7) = v22;
    *((_QWORD *)v21 + 6) = 0;
    *((_QWORD *)v21 + 6) = *((_QWORD *)v21 + 7) & 0xFFFFFFFFFFFFC000;
    v23 = *((_QWORD *)v21 + 6);
    v58 = 1;
    if (v23)
    {
      v14 = *((_QWORD *)v63 + 7) >= (unint64_t)(*((_QWORD *)v63 + 6) + 2136);
      v57 = 0;
      if (v14)
        v57 = *((_QWORD *)v63 + 7) < *((_QWORD *)v63 + 6)
                                   + 48 * (unint64_t)*(unsigned int *)(*((_QWORD *)v63 + 6) + 16)
                                   + 2136;
      v58 = v57;
    }
    if ((v58 & 1) == 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0x8530);
    }
    v24 = v63;
    v69 = *((_QWORD *)v63 + 6);
    *((_QWORD *)v63 + 5) = v75;
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v24 + 5) + 24) + 328) & 2) != 0 && v72 == 6)
    {
      v68 = 0;
      v67 = 0;
      v25 = v74;
      *(_QWORD *)v63 = *((_QWORD *)v75 + 3);
      v83 = v25;
      v82 = &v68;
      if (&v49 == (uint64_t *)-120)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.x"
                               "bs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
        __break(1u);
        JUMPOUT(0x85C8);
      }
      v26 = v63;
      v81 = 0;
      v27 = v83;
      v28 = v82;
      *((_QWORD *)v63 + 24) = *(_QWORD *)v63;
      *((_QWORD *)v26 + 23) = v27;
      *((_QWORD *)v26 + 22) = v28;
      if (*((_QWORD *)v26 + 22))
      {
        v56 = *(_BYTE *)(*((_QWORD *)v63 + 23) + 32) & 0xF;
        if (v56 == 2)
        {
          **((_QWORD **)v63 + 22) = 0x4000;
        }
        else if (v56 == 5)
        {
          **((_QWORD **)v63 + 22) = 0x10000;
        }
        else
        {
          if ((v56 - 6) >= 2)
          {
            v29 = v63;
            *((_QWORD *)v63 + 21) = 0;
            *((_QWORD *)v29 + 21) = *(_BYTE *)(*((_QWORD *)v29 + 23) + 32) & 0xF;
            v30 = *((_QWORD *)v29 + 21);
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
            qword_A4038 = v30;
            __break(1u);
            JUMPOUT(0x86CCLL);
          }
          **((_QWORD **)v63 + 22) = (unint64_t)*(unsigned int *)(*((_QWORD *)v63 + 23) + 40) << 14;
        }
      }
      v31 = v63;
      v32 = *((_QWORD *)v63 + 23);
      *((_QWORD *)v63 + 26) = *((_QWORD *)v63 + 24);
      *((_QWORD *)v31 + 25) = v32;
      v33 = *((_QWORD *)v31 + 25);
      *((_QWORD *)v31 + 29) = *((_QWORD *)v31 + 26);
      *((_QWORD *)v31 + 28) = v33;
      *((_QWORD *)v31 + 27) = 0;
      *((_QWORD *)v31 + 27) = *((_QWORD *)v31 + 28) & 0xFFFFFFFFFFFFC000;
      v34 = *((_QWORD *)v31 + 27);
      v55 = 1;
      if (v34)
      {
        v14 = *((_QWORD *)v63 + 28) >= (unint64_t)(*((_QWORD *)v63 + 27) + 2136);
        v54 = 0;
        if (v14)
          v54 = *((_QWORD *)v63 + 28) < *((_QWORD *)v63 + 27)
                                      + 48 * (unint64_t)*(unsigned int *)(*((_QWORD *)v63 + 27) + 16)
                                      + 2136;
        v55 = v54;
      }
      if ((v55 & 1) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x87B8);
      }
      v35 = v63;
      v36 = *((_QWORD *)v63 + 25);
      *((_QWORD *)v63 + 43) = *((_QWORD *)v63 + 27);
      *((_QWORD *)v35 + 42) = v36;
      v53 = *((_QWORD *)v35 + 43);
      v37 = *((_QWORD *)v35 + 42);
      *((_QWORD *)v35 + 46) = v53;
      *((_QWORD *)v35 + 45) = v37;
      if (*((_QWORD *)v35 + 45) < (unint64_t)(*((_QWORD *)v35 + 46) + 2136))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x8820);
      }
      v38 = v63;
      *((_QWORD *)v63 + 44) = 0;
      *((_QWORD *)v38 + 44) = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v38 + 45) - *((_QWORD *)v38 + 46) - 2136) >> 4);
      if (*((_QWORD *)v38 + 44) >= (uint64_t)*(unsigned int *)(*((_QWORD *)v38 + 46) + 16))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x888CLL);
      }
      v39 = v63;
      v40 = *((_QWORD *)v63 + 44);
      *((_QWORD *)v63 + 48) = v53;
      *((_DWORD *)v39 + 95) = v40;
      v81 = *(_QWORD *)(*((_QWORD *)v39 + 48) + 80) + ((unint64_t)*((unsigned int *)v39 + 95) << 14);
      v67 = v81;
      _xzm_segment_group_overwrite_chunk(v81, v68);
    }
    else
    {
      v41 = v63;
      *((_QWORD *)v63 + 13) = v75;
      v52 = **((unsigned __int8 **)v41 + 13);
      switch((int)v52)
      {
        case 0:
        case 2:
          v86 = (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v63 + 13) + 24) + 328) & 4) != 0;
          break;
        case 1:
        case 3:
          v86 = (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v63 + 13) + 24) + 328) & 8) != 0;
          break;
        default:
          v42 = v63;
          *((_QWORD *)v63 + 12) = 0;
          *((_QWORD *)v42 + 12) = **((unsigned __int8 **)v42 + 13);
          v43 = *((_QWORD *)v42 + 12);
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
          qword_A4038 = v43;
          __break(1u);
          JUMPOUT(0x8984);
      }
      if (!v86 && v72 != 5)
        xzm_segment_group_segment_madvise_chunk((uint64_t)v75, v74);
    }
    v76 = v75 + 4;
    os_unfair_lock_lock_with_options(v75 + 4, 327680);
    if (!_xzm_segment_group_segment_is_valid((os_unfair_lock_s *)v75, v69))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_segment_is_valid(sg, segment)\" fai"
                             "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2711)";
      __break(1u);
      JUMPOUT(0x8A04);
    }
    v66 = 0;
    v66 = _xzm_segment_group_segment_span_free_coalesce(v75, v69, v74, 0);
    --*(_DWORD *)(v69 + 8);
    v65 = 0;
    v87 = **(_BYTE **)v69;
    v51 = v87;
    if (v87 < 2u)
    {
      v88 = 1;
    }
    else
    {
      if ((v51 - 2) >= 2)
      {
        v44 = v63;
        *((_QWORD *)v63 + 15) = 0;
        *((_QWORD *)v44 + 15) = v87;
        v45 = *((_QWORD *)v44 + 15);
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
        qword_A4038 = v45;
        __break(1u);
        JUMPOUT(0x8ACCLL);
      }
      v88 = 0;
    }
    v65 = v88;
    if (*(_DWORD *)(v69 + 8) || (v65 & 1) == 0)
    {
      v46 = v63;
      *((_QWORD *)v63 + 10) = v75;
      v50 = **((unsigned __int8 **)v46 + 10);
      switch((int)v50)
      {
        case 0:
        case 2:
          v85 = (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v63 + 10) + 24) + 328) & 4) != 0;
          break;
        case 1:
        case 3:
          v85 = (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v63 + 10) + 24) + 328) & 8) != 0;
          break;
        default:
          v47 = v63;
          *((_QWORD *)v63 + 9) = 0;
          *((_QWORD *)v47 + 9) = **((unsigned __int8 **)v47 + 10);
          v48 = *((_QWORD *)v47 + 9);
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
          qword_A4038 = v48;
          __break(1u);
          JUMPOUT(0x8BB8);
      }
      if (v85)
        _xzm_segment_group_span_mark_free(v75, v66);
      if (!_xzm_segment_group_segment_is_valid((os_unfair_lock_s *)v75, v69))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_segment_is_valid(sg, segment)\" f"
                               "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2739)";
        __break(1u);
        JUMPOUT(0x8C10);
      }
      lock = (os_unfair_lock_t)(v75 + 4);
      os_unfair_lock_unlock((os_unfair_lock_t)v75 + 1);
    }
    else
    {
      _xzm_segment_group_segment_free(v75, v69);
    }
  }
}

void _xzm_segment_group_free_huge_chunk(uint64_t a1, unint64_t a2, char a3)
{
  BOOL v3;
  char v4;
  unint64_t v6;

  v6 = a2 & 0xFFFFFFFFFFFFC000;
  v4 = 1;
  if ((a2 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v3 = 0;
    if (a2 >= v6 + 2136)
      v3 = a2 < (a2 & 0xFFFFFFFFFFFFC000)
              + 48 * *(unsigned int *)((char *)dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
              + 2136;
    v4 = v3;
  }
  if ((v4 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x8D44);
  }
  if (*((_BYTE *)&dword_14 + (a2 & 0xFFFFFFFFFFFFC000)) != 1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_kind == XZM_SEGMENT_KIND_HUGE\" failed (/Li"
                           "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2604)";
    __break(1u);
    JUMPOUT(0x8D84);
  }
  if (*(int *)((char *)&dword_8 + (a2 & 0xFFFFFFFFFFFFC000)) != 1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_used == 1\" failed (/Library/Caches/com.app"
                           "le.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2605)";
    __break(1u);
    JUMPOUT(0x8DBCLL);
  }
  if (!*(_WORD *)(a1 + 512)
    || (a3 & 1) != 0
    || *(unsigned int *)((char *)&dword_C + (a2 & 0xFFFFFFFFFFFFC000)) >= *(_DWORD *)(a1 + 516)
    || *(unsigned int *)((char *)&dword_C + (a2 & 0xFFFFFFFFFFFFC000)) < 0x81
    || !_xzm_segment_group_free_huge_chunk_to_cache(a1, v6))
  {
    _xzm_segment_group_segment_deallocate(a1, v6, 1);
  }
}

uint64_t _xzm_segment_group_segment_is_valid(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t result;
  BOOL v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t j;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  unint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;

  if (*(_QWORD *)a2 != (_QWORD)a1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_segment_group == sg\" failed (/Library/Cach"
                           "es/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1058)";
    __break(1u);
    JUMPOUT(0x8E9CLL);
  }
  v16 = a2 + 48 * *(unsigned int *)(a2 + 16) + 2136;
  v14 = a2 + 2136;
  if (*(_BYTE *)(a2 + 20) == 1)
  {
    if (*(_DWORD *)(a2 + 8) != 1)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_used == 1\" failed (/Library/Caches/com.a"
                             "pple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1064)";
      __break(1u);
      JUMPOUT(0x8F38);
    }
    if ((*(_BYTE *)(a2 + 2168) & 0xF) != 7)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_HUGE_CHUNK"
                             "\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1066)";
      __break(1u);
      JUMPOUT(0x8F84);
    }
    if (*(_DWORD *)(a2 + 2176) != *(_DWORD *)(a2 + 12))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzcs_slice_count == segment->xzs_slice_count\" "
                             "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1067)";
      __break(1u);
      JUMPOUT(0x8FC4);
    }
  }
  else
  {
    os_unfair_lock_assert_owner(a1 + 1);
    while (v14 < v16)
    {
      v13 = *(_BYTE *)(v14 + 32) & 0xF;
      switch(v13)
      {
        case 1u:
          if (*(_WORD *)(v14 + 34))
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice->xzc_mzone_idx == XZM_MZONE_INDEX_INVALID\""
                                   " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1129)";
            __break(1u);
            JUMPOUT(0x952CLL);
          }
          _xzm_segment_group_assert_correct_span_queue((uint64_t)a1, v14);
          if (v14 < a2 + 2136)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slic"
                                   "es\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                                   "zone/xzone_inline_internal.h:278)";
            __break(1u);
            JUMPOUT(0x95A4);
          }
          v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - a2 - 2136) >> 4);
          if (v22 >= *(unsigned int *)(a2 + 16))
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_coun"
                                   "t\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xz"
                                   "one/xzone_inline_internal.h:280)";
            __break(1u);
            JUMPOUT(0x960CLL);
          }
          v4 = 1;
          if (*(_QWORD *)(a2 + 88 + 8 * v22) != -1)
            v4 = ((*(unsigned __int8 *)(v14 + 32) >> 4) & 1) == 0;
          if (!v4)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"*reclaim_id == VM_RECLAIM_INDEX_NULL || !slice->"
                                   "xzc_bits.xzcb_is_pristine\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_d"
                                   "riverkit/src/xzone/xzone_segment.c:1135)";
            __break(1u);
            JUMPOUT(0x9684);
          }
          v14 += 48;
          break;
        case 2u:
          v14 += 48;
          break;
        case 3u:
          if (*(_WORD *)(v14 + 34))
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice->xzc_mzone_idx == XZM_MZONE_INDEX_INVALID\""
                                   " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1141)";
            __break(1u);
            JUMPOUT(0x96C8);
          }
          _xzm_segment_group_assert_correct_span_queue((uint64_t)a1, v14);
          if (v14 < a2 + 2136)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slic"
                                   "es\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                                   "zone/xzone_inline_internal.h:278)";
            __break(1u);
            JUMPOUT(0x9728);
          }
          v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - a2 - 2136) >> 4);
          if (v19 >= *(unsigned int *)(a2 + 16))
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_coun"
                                   "t\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xz"
                                   "one/xzone_inline_internal.h:280)";
            __break(1u);
            JUMPOUT(0x9790);
          }
          v7 = *(unsigned int *)(v14 + 40);
          if (v7 <= 1)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count > 1\" failed (/Library/Caches/com.ap"
                                   "ple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1146)";
            __break(1u);
            JUMPOUT(0x97E0);
          }
          v6 = v19 + v7 - 1;
          if (v6 >= *(unsigned int *)(a2 + 16))
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"last_slice_index < segment->xzs_slice_entry_coun"
                                   "t\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone"
                                   "_segment.c:1149)";
            __break(1u);
            JUMPOUT(0x9838);
          }
          if ((*(_BYTE *)(a2 + 48 * v6 + 2168) & 0xF) != 4)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"last->xzc_bits.xzcb_kind == XZM_SLICE_KIND_MULTI"
                                   "_BODY\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/x"
                                   "zone_segment.c:1153)";
            __break(1u);
            JUMPOUT(0x9898);
          }
          if (*(_DWORD *)(a2 + 48 * v6 + 2172) != 48 * (_DWORD)v7 - 48)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"last->xzsl_slice_offset_bytes == (uint32_t)(size"
                                   "of(struct xzm_slice_s) * (slice_count - 1))\" failed (/Library/Caches/com.apple.xbs/S"
                                   "ources/libmalloc_driverkit/src/xzone/xzone_segment.c:1155)";
            __break(1u);
            JUMPOUT(0x98E0);
          }
          if (v14 < a2 + 2136)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slic"
                                   "es\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                                   "zone/xzone_inline_internal.h:278)";
            __break(1u);
            JUMPOUT(0x994CLL);
          }
          v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - a2 - 2136) >> 4);
          if (v21 >= *(unsigned int *)(a2 + 16))
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_coun"
                                   "t\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xz"
                                   "one/xzone_inline_internal.h:280)";
            __break(1u);
            JUMPOUT(0x99B4);
          }
          v3 = 1;
          if (*(_QWORD *)(a2 + 88 + 8 * v21) != -1)
            v3 = ((*(unsigned __int8 *)(v14 + 32) >> 4) & 1) == 0;
          if (!v3)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"*reclaim_id == VM_RECLAIM_INDEX_NULL || !slice->"
                                   "xzc_bits.xzcb_is_pristine\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_d"
                                   "riverkit/src/xzone/xzone_segment.c:1161)";
            __break(1u);
            JUMPOUT(0x9A2CLL);
          }
          v14 = a2 + 48 * v6 + 2184;
          break;
        case 5u:
        case 6u:
          if (v14 < a2 + 2136)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slic"
                                   "es\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                                   "zone/xzone_inline_internal.h:278)";
            __break(1u);
            JUMPOUT(0x90ACLL);
          }
          v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - a2 - 2136) >> 4);
          if (v20 >= *(unsigned int *)(a2 + 16))
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_coun"
                                   "t\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xz"
                                   "one/xzone_inline_internal.h:280)";
            __break(1u);
            JUMPOUT(0x9114);
          }
          v12 = *(unsigned int *)(v14 + 40);
          if (v12 <= 1)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count > 1\" failed (/Library/Caches/com.ap"
                                   "ple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1083)";
            __break(1u);
            JUMPOUT(0x9164);
          }
          v15 = v14 + 48;
          if (v12 - 1 > 2)
            v5 = 3;
          else
            v5 = v12 - 1;
          for (i = 1; i <= v5; ++i)
          {
            if ((*(_BYTE *)(v15 + 32) & 0xF) != 4)
            {
              qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice->xzc_bits.xzcb_kind == XZM_SLICE_KIND_MU"
                                     "LTI_BODY\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xz"
                                     "one/xzone_segment.c:1089)";
              __break(1u);
              JUMPOUT(0x9214);
            }
            if (*(_DWORD *)(v15 + 36) != 48 * (_DWORD)i)
            {
              qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice->xzsl_slice_offset_bytes == (uint32_t)(s"
                                     "izeof(struct xzm_slice_s) * i)\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                                     "alloc_driverkit/src/xzone/xzone_segment.c:1091)";
              __break(1u);
              JUMPOUT(0x9254);
            }
            v15 += 48;
          }
          if (v20 + v12 - 1 >= *(unsigned int *)(a2 + 16))
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"last_slice_index < segment->xzs_slice_entry_coun"
                                   "t\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone"
                                   "_segment.c:1095)";
            __break(1u);
            JUMPOUT(0x92CCLL);
          }
          v10 = v20 + v12 - 1;
          if (a2 + 48 * v10 + 2136 >= v15)
          {
            if ((*(_BYTE *)(a2 + 48 * v10 + 2168) & 0xF) != 4)
            {
              qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"last->xzc_bits.xzcb_kind == XZM_SLICE_KIND_MUL"
                                     "TI_BODY\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzo"
                                     "ne/xzone_segment.c:1099)";
              __break(1u);
              JUMPOUT(0x9340);
            }
            if (*(_DWORD *)(a2 + 48 * v10 + 2172) != 48 * (_DWORD)v12 - 48)
            {
              qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"last->xzsl_slice_offset_bytes == (uint32_t)(si"
                                     "zeof(struct xzm_slice_s) * (slice_count - 1))\" failed (/Library/Caches/com.apple.x"
                                     "bs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1102)";
              __break(1u);
              JUMPOUT(0x9388);
            }
          }
          v14 = a2 + 48 * v10 + 2184;
          break;
        case 7u:
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: huge chunk in normal segment";
          __break(1u);
          JUMPOUT(0x94F8);
        case 8u:
          v9 = *(unsigned int *)(v14 + 40);
          v14 += 48;
          for (j = 1; j < v9; ++j)
          {
            if ((*(_BYTE *)(v14 + 32) & 0xF) != 4)
            {
              qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice->xzc_bits.xzcb_kind == XZM_SLICE_KIND_MU"
                                     "LTI_BODY\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xz"
                                     "one/xzone_segment.c:1113)";
              __break(1u);
              JUMPOUT(0x941CLL);
            }
            if (*(_DWORD *)(v14 + 36) != 48 * (_DWORD)j)
            {
              qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice->xzsl_slice_offset_bytes == (uint32_t)(s"
                                     "izeof(struct xzm_slice_s) * i)\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                                     "alloc_driverkit/src/xzone/xzone_segment.c:1115)";
              __break(1u);
              JUMPOUT(0x945CLL);
            }
            v14 += 48;
          }
          if (v14 < v16 && (*(_BYTE *)(v14 + 32) & 0xF) == 8)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice->xzc_bits.xzcb_kind != XZM_SLICE_KIND_GUAR"
                                   "D\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone"
                                   "_segment.c:1120)";
            __break(1u);
            JUMPOUT(0x94CCLL);
          }
          return result;
        default:
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Unexpected slice kind";
          qword_A4038 = v13;
          __break(1u);
          JUMPOUT(0x9A78);
      }
    }
  }
  return 1;
}

unint64_t _xzm_segment_group_segment_span_free_coalesce(unsigned __int8 *a1, uint64_t a2, unint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned __int8 v22;
  char v23;
  BOOL v24;
  BOOL v25;
  char v26;
  char v27;
  char v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;

  v22 = *(_BYTE *)(a3 + 32) & 0xF;
  if (v22 < 2u)
    goto LABEL_6;
  if (v22 != 2)
  {
    if (v22 - 3 >= 2)
    {
      if (v22 - 5 >= 3)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v22;
        __break(1u);
        JUMPOUT(0x9BA0);
      }
      goto LABEL_7;
    }
LABEL_6:
    v23 = 0;
    goto LABEL_8;
  }
LABEL_7:
  v23 = 1;
LABEL_8:
  if (v23 == 1)
  {
    if ((*(_BYTE *)(a3 + 32) & 0xF) == 2)
      v14 = 1;
    else
      v14 = *(_DWORD *)(a3 + 40);
    v17 = v14;
  }
  else
  {
    v28 = *(_BYTE *)(a3 + 32) & 0xF;
    v13 = 1;
    if (v28 != 1)
      v13 = v28 == 3;
    if (!v13)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: attempting to coalesce slice of unexpected type";
      __break(1u);
      JUMPOUT(0x9CBCLL);
    }
    if ((*(_BYTE *)(a3 + 32) & 0xF) == 1)
      v12 = 1;
    else
      v12 = *(_DWORD *)(a3 + 40);
    v17 = v12;
  }
  v16 = a3;
  if (a4)
    *a4 = 1;
  *(_BYTE *)(a3 + 32) &= 0xF0u;
  v15 = a3 + 48 * v17;
  if (v15 < a2 + 48 * (unint64_t)*(unsigned int *)(a2 + 16) + 2136)
  {
    v27 = *(_BYTE *)(v15 + 32) & 0xF;
    v11 = 1;
    if (v27 != 1)
      v11 = v27 == 3;
    if (v11)
    {
      switch(*a1)
      {
        case 0u:
        case 2u:
          v25 = (*(_BYTE *)(*((_QWORD *)a1 + 3) + 328) & 4) != 0;
          break;
        case 1u:
        case 3u:
          v25 = (*(_BYTE *)(*((_QWORD *)a1 + 3) + 328) & 8) != 0;
          break;
        default:
          v4 = *a1;
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
          qword_A4038 = v4;
          __break(1u);
          JUMPOUT(0x9E4CLL);
      }
      if (!v25 || (_xzm_segment_group_span_mark_used(a1, v15) & 1) != 0)
      {
        v29 = a3 + 48 * v17;
        if ((*(_BYTE *)(v29 + 32) & 0xF) == 1)
          v10 = 1;
        else
          v10 = *(_DWORD *)(v29 + 40);
        v17 += v10;
        _xzm_segment_group_segment_span_remove_from_queue((uint64_t)a1, v15);
      }
      else if (a4)
      {
        *a4 = 0;
      }
    }
  }
  if (a3 > a2 + 2136)
  {
    v32 = a3 - 48;
    if ((*(_BYTE *)(a3 - 16) & 0xF) == 4)
    {
      v31 = a3 - 48 - *(unsigned int *)(a3 - 12);
      if (v31 < (v32 & 0xFFFFFFFFFFFFC000 | 0x858))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(X"
                               "ZM_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs"
                               "/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:584)";
        __break(1u);
        JUMPOUT(0x9FD0);
      }
      v9 = *(_BYTE *)(v31 + 32) & 0xF;
      if ((v9 - 1) < 2)
      {
        v34 = v31 == v32;
      }
      else if (v9 == 3 || (v9 - 5) < 4)
      {
        if (v32 < v31)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple."
                                 "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:562)";
          __break(1u);
          JUMPOUT(0xA080);
        }
        v34 = v32 < v31 + 48 * *(unsigned int *)(v31 + 40);
      }
      else
      {
        v34 = 0;
      }
      if (v34)
        v33 = a3 - 48 - *(unsigned int *)(a3 - 12);
      else
        v33 = a3 - 48;
    }
    else
    {
      v33 = a3 - 48;
    }
    v26 = *(_BYTE *)(v33 + 32) & 0xF;
    v8 = 1;
    if (v26 != 1)
      v8 = v26 == 3;
    if (v8)
    {
      switch(*a1)
      {
        case 0u:
        case 2u:
          v24 = (*(_BYTE *)(*((_QWORD *)a1 + 3) + 328) & 4) != 0;
          break;
        case 1u:
        case 3u:
          v24 = (*(_BYTE *)(*((_QWORD *)a1 + 3) + 328) & 8) != 0;
          break;
        default:
          v5 = *a1;
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
          qword_A4038 = v5;
          __break(1u);
          JUMPOUT(0xA1F0);
      }
      if (!v24 || (_xzm_segment_group_span_mark_used(a1, v33) & 1) != 0)
      {
        if ((*(_BYTE *)(v33 + 32) & 0xF) == 1)
          v7 = 1;
        else
          v7 = *(_DWORD *)(v33 + 40);
        v17 += v7;
        _xzm_segment_group_segment_span_remove_from_queue((uint64_t)a1, v33);
        v16 = v33;
      }
      else if (a4)
      {
        *a4 = 0;
      }
    }
  }
  if (v16 < a2 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0xA320);
  }
  v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - a2 - 2136) >> 4);
  if (v30 >= *(unsigned int *)(a2 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0xA38CLL);
  }
  _xzm_segment_group_segment_span_free((os_unfair_lock_s *)a1, a2, v30, v17, 0);
  return v16;
}

void _xzm_segment_group_segment_free(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  os_unfair_lock_t v10;
  os_unfair_lock_t lock;
  uint64_t v12;
  unsigned __int8 *v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;

  v9 = a1;
  v8 = a2;
  if (*(_DWORD *)(a2 + 8))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_used == 0\" failed (/Library/Caches/com.app"
                           "le.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2352)";
    __break(1u);
    JUMPOUT(0xA42CLL);
  }
  v19 = v8;
  v7 = v8 + 2136;
  v6 = 0;
  v13 = v9;
  switch(*v9)
  {
    case 0u:
    case 2u:
      v14 = (*(_BYTE *)(*((_QWORD *)v13 + 3) + 328) & 4) != 0;
      break;
    case 1u:
    case 3u:
      v14 = (*(_BYTE *)(*((_QWORD *)v13 + 3) + 328) & 8) != 0;
      break;
    default:
      v12 = 0;
      v2 = *v13;
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
      qword_A4038 = v2;
      __break(1u);
      JUMPOUT(0xA4F4);
  }
  if (v14)
  {
    if ((_xzm_segment_group_span_mark_used(v9, v7) & 1) == 0)
    {
LABEL_20:
      v18 = v8;
      v6 = v8 + 2136;
      do
      {
        v7 = v6;
        v23 = v8;
        v22 = v6;
        v21 = 0;
        v25 = v8;
        v24 = v6;
        v28 = v8;
        v27 = v6;
        if (v6 < v8 + 2136)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices"
                                 "\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone"
                                 "/xzone_inline_internal.h:278)";
          __break(1u);
          JUMPOUT(0xA718);
        }
        v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - v28 - 2136) >> 4);
        if (v26 >= *(unsigned int *)(v28 + 16))
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\""
                                 " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/x"
                                 "zone_inline_internal.h:280)";
          __break(1u);
          JUMPOUT(0xA784);
        }
        v21 = (_QWORD *)(v8 + 88 + 8 * v26);
        if (*v21 == -1)
          _xzm_segment_group_span_mark_free(v9, v7);
        v16 = v7;
        if ((*(_BYTE *)(v7 + 32) & 0xF) == 1)
          v3 = 1;
        else
          v3 = *(_DWORD *)(v16 + 40);
        v6 = v7 + 48 * v3;
        v15 = v8;
      }
      while (v6 < v8 + 48 * *(unsigned int *)(v8 + 16) + 2136);
      v10 = (os_unfair_lock_t)(v9 + 4);
      os_unfair_lock_unlock((os_unfair_lock_t)v9 + 1);
      return;
    }
    while (1)
    {
      v17 = v7;
      v4 = (*(_BYTE *)(v7 + 32) & 0xF) == 1 ? 1 : *(_DWORD *)(v17 + 40);
      v20 = v8;
      if (v4 >= *(_DWORD *)(v8 + 12))
        break;
      v5 = 0;
      _xzm_segment_group_segment_span_remove_from_queue((uint64_t)v9, v7);
      v7 = _xzm_segment_group_segment_span_free_coalesce(v9, v8, v7, &v5);
      if ((v5 & 1) == 0)
        goto LABEL_20;
    }
  }
  if ((*(_BYTE *)(v7 + 32) & 0xF) != 3)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"span->xzc_bits.xzcb_kind == XZM_SLICE_KIND_MULTI_FREE\" "
                           "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2378)";
    __break(1u);
    JUMPOUT(0xA600);
  }
  if (*(_DWORD *)(v7 + 40) != *(_DWORD *)(v8 + 12))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"span->xzcs_slice_count == segment->xzs_slice_count\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2379)";
    __break(1u);
    JUMPOUT(0xA640);
  }
  _xzm_segment_group_segment_span_remove_from_queue((uint64_t)v9, v7);
  lock = (os_unfair_lock_t)(v9 + 4);
  os_unfair_lock_unlock((os_unfair_lock_t)v9 + 1);
  _xzm_segment_group_segment_deallocate((uint64_t)v9, v8, 1);
}

uint64_t _xzm_segment_group_span_mark_free(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  BOOL v4;
  char v5;
  int v6;
  BOOL v7;
  char v8;
  BOOL v9;
  uint64_t *v10;
  unint64_t v11;
  BOOL v12;
  char v13;
  unint64_t v14;

  switch(*a1)
  {
    case 0u:
    case 2u:
      v12 = (*(_BYTE *)(*((_QWORD *)a1 + 3) + 328) & 4) != 0;
      break;
    case 1u:
    case 3u:
      v12 = (*(_BYTE *)(*((_QWORD *)a1 + 3) + 328) & 8) != 0;
      break;
    default:
      v2 = *a1;
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
      qword_A4038 = v2;
      __break(1u);
      JUMPOUT(0xA94CLL);
  }
  if (!v12)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_uses_deferred_reclamation(sg)\" faile"
                           "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1182)";
    __break(1u);
    JUMPOUT(0xA97CLL);
  }
  v13 = *(_BYTE *)(a2 + 32) & 0xF;
  v9 = 1;
  if (v13 != 1)
    v9 = v13 == 3;
  if (!v9)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_free_span(span->xzc_bits.xzcb_kind)\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1183)";
    __break(1u);
    JUMPOUT(0xA9E8);
  }
  v11 = a2 & 0xFFFFFFFFFFFFC000;
  v8 = 1;
  if ((a2 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v7 = 0;
    if (a2 >= v11 + 2136)
      v7 = a2 < (a2 & 0xFFFFFFFFFFFFC000)
              + 48 * *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
              + 2136;
    v8 = v7;
  }
  if ((v8 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0xAAF0);
  }
  if (a2 < v11 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0xAB5CLL);
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - (a2 & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000)))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0xABC4);
  }
  v10 = (uint64_t *)(v11 + 88 + 0xFFFFFFFD55555558 * ((uint64_t)(a2 - v11 - 2136) >> 4));
  if (*v10 != -1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"*reclaim_id == VM_RECLAIM_INDEX_NULL\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1190)";
    __break(1u);
    JUMPOUT(0xAC0CLL);
  }
  if ((*(_BYTE *)(a2 + 32) & 0xF) == 1)
    v6 = 1;
  else
    v6 = *(_DWORD *)(a2 + 40);
  v14 = a2 & 0xFFFFFFFFFFFFC000;
  v5 = 1;
  if ((a2 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v4 = 0;
    if (a2 >= v14 + 2136)
      v4 = a2 < (a2 & 0xFFFFFFFFFFFFC000)
              + 48 * *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
              + 2136;
    v5 = v4;
  }
  if ((v5 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0xAD4CLL);
  }
  if (a2 < v14 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0xADB0);
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - (a2 & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000)))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0xAE18);
  }
  result = xzm_reclaim_mark_free(*(_QWORD *)(*((_QWORD *)a1 + 3) + 464), *(uint64_t *)((char *)&stru_20.filesize + (a2 & 0xFFFFFFFFFFFFC000))+ ((unint64_t)(-1431655765 * ((uint64_t)(a2 - v14 - 2136) >> 4)) << 14), (v6 << 14), 1);
  *v10 = result;
  return result;
}

uint64_t xzm_segment_group_try_realloc_large_chunk(os_unfair_lock_s *a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  unsigned __int8 v4;
  BOOL v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  char v12;
  unint64_t v13;
  unsigned int v14;
  signed int i;
  unint64_t v16;
  unsigned int v17;
  unint64_t v23;
  unint64_t v24;
  uint64_t os_unfair_lock_opaque_low;
  BOOL v26;
  char v27;
  int64_t v28;
  unint64_t v29;

  v24 = a3 & 0xFFFFFFFFFFFFC000;
  v12 = 1;
  if ((a3 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v11 = 0;
    if (a3 >= v24 + 2136)
      v11 = a3 < (a3 & 0xFFFFFFFFFFFFC000)
               + 48 * *(unsigned int *)((char *)dword_10 + (a3 & 0xFFFFFFFFFFFFC000))
               + 2136;
    v12 = v11;
  }
  if ((v12 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0xAF78);
  }
  if (v24 != a2)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_for_slice(&sg->xzsg_main_ref->xzmz_base, ch"
                           "unk) == segment\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone"
                           "/xzone_segment.c:2750)";
    __break(1u);
    JUMPOUT(0xAFB4);
  }
  if (a4 <= 2)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"new_slice_count > (XZM_SMALL_BLOCK_SIZE_MAX / XZM_SEGMEN"
                           "T_SLICE_SIZE)\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/x"
                           "zone_segment.c:2752)";
    __break(1u);
    JUMPOUT(0xAFE8);
  }
  if (a4 >= 0x81)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"new_slice_count <= (XZM_LARGE_BLOCK_SIZE_MAX / XZM_SEGME"
                           "NT_SLICE_SIZE)\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/"
                           "xzone_segment.c:2754)";
    __break(1u);
    JUMPOUT(0xB01CLL);
  }
  if ((*(_BYTE *)(a3 + 32) & 0xF) != 6)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_LARGE_CHUNK\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2755)";
    __break(1u);
    JUMPOUT(0xB058);
  }
  if (*(_DWORD *)(a3 + 40) >= a4)
  {
    if (*(_DWORD *)(a3 + 40) > a4)
    {
      os_unfair_lock_lock_with_options(&a1[1], 327680);
      v14 = *(_DWORD *)(a3 + 40) - a4;
      *(_DWORD *)(a3 + 40) = a4;
      v13 = a3 + 48 * (*(_DWORD *)(a3 + 40) - 1);
      *(_BYTE *)(v13 + 32) = *(_BYTE *)(v13 + 32) & 0xF0 | 4;
      *(_DWORD *)(v13 + 36) = v13 - a3;
      v23 = a3 & 0xFFFFFFFFFFFFC000;
      v7 = 1;
      if ((a3 & 0xFFFFFFFFFFFFC000) != 0)
      {
        v6 = 0;
        if (a3 >= v23 + 2136)
          v6 = a3 < (a3 & 0xFFFFFFFFFFFFC000)
                  + 48 * *(unsigned int *)((char *)dword_10 + (a3 & 0xFFFFFFFFFFFFC000))
                  + 2136;
        v7 = v6;
      }
      if ((v7 & 1) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0xB61CLL);
      }
      if (v14 <= 1)
        v4 = 2;
      else
        v4 = 6;
      v29 = a3 + 48 * a4;
      if (v29 < v23 + 2136)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0xB6ACLL);
      }
      v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v23 - 2136) >> 4);
      if (v28 >= *(unsigned int *)((char *)dword_10 + (a3 & 0xFFFFFFFFFFFFC000)))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0xB718);
      }
      _xzm_segment_group_segment_span_mark_allocated((uint64_t)a1, v23, v4, v28, v14);
      os_unfair_lock_unlock(a1 + 1);
      xzm_segment_group_free_chunk((unsigned __int8 *)a1, a3 + 48 * a4, 0);
      return 1;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    os_unfair_lock_lock_with_options(&a1[1], 327680);
    v17 = a4 - *(_DWORD *)(a3 + 40);
    v16 = a3 + 48 * *(unsigned int *)(a3 + 40);
    if (v16 >= a2 + 48 * (unint64_t)*(unsigned int *)(a2 + 16) + 2136)
      goto LABEL_31;
    v27 = *(_BYTE *)(v16 + 32) & 0xF;
    v10 = 1;
    if (v27 != 1)
      v10 = v27 == 3;
    if (!v10)
      goto LABEL_31;
    v9 = (*(_BYTE *)(v16 + 32) & 0xF) == 1 ? 1 : *(_DWORD *)(v16 + 40);
    if (v9 < v17)
      goto LABEL_31;
    switch(LOBYTE(a1->_os_unfair_lock_opaque))
    {
      case 0:
      case 2:
        v26 = (*(_BYTE *)(*(_QWORD *)&a1[6]._os_unfair_lock_opaque + 328) & 4) != 0;
        break;
      case 1:
      case 3:
        v26 = (*(_BYTE *)(*(_QWORD *)&a1[6]._os_unfair_lock_opaque + 328) & 8) != 0;
        break;
      default:
        os_unfair_lock_opaque_low = LOBYTE(a1->_os_unfair_lock_opaque);
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
        qword_A4038 = os_unfair_lock_opaque_low;
        __break(1u);
        JUMPOUT(0xB27CLL);
    }
    if (!v26 || (_xzm_segment_group_span_mark_used((unsigned __int8 *)a1, v16) & 1) != 0)
    {
      _xzm_segment_group_segment_span_remove_from_queue((uint64_t)a1, v16);
      if ((*(_BYTE *)(v16 + 32) & 0xF) == 1)
        v8 = 1;
      else
        v8 = *(_DWORD *)(v16 + 40);
      if (v8 > v17)
        _xzm_segment_group_segment_slice_split(a1, a2, v16, v17, 0);
      for (i = 0; i < v17; ++i)
      {
        *(_BYTE *)(v16 + 48 * i + 32) = *(_BYTE *)(v16 + 48 * i + 32) & 0xF0 | 4;
        *(_DWORD *)(v16 + 48 * i + 36) = v16 + 48 * i - a3;
      }
      *(_DWORD *)(a3 + 40) = a4;
      if (!_xzm_segment_group_segment_is_valid(a1, a2))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_segment_is_valid(sg, segment)\" f"
                               "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2796)";
        __break(1u);
        JUMPOUT(0xB45CLL);
      }
      os_unfair_lock_unlock(a1 + 1);
      return 1;
    }
    else
    {
LABEL_31:
      os_unfair_lock_unlock(a1 + 1);
      return 0;
    }
  }
}

uint64_t _xzm_segment_group_span_mark_used(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t v2;
  BOOL v4;
  char v5;
  int v6;
  BOOL v7;
  char v8;
  BOOL v9;
  char v10;
  BOOL v11;
  char v12;
  uint64_t *v13;
  unint64_t v15;
  BOOL v16;
  char v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  switch(*a1)
  {
    case 0u:
    case 2u:
      v16 = (*(_BYTE *)(*((_QWORD *)a1 + 3) + 328) & 4) != 0;
      break;
    case 1u:
    case 3u:
      v16 = (*(_BYTE *)(*((_QWORD *)a1 + 3) + 328) & 8) != 0;
      break;
    default:
      v2 = *a1;
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
      qword_A4038 = v2;
      __break(1u);
      JUMPOUT(0xB868);
  }
  if (!v16)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_uses_deferred_reclamation(sg)\" faile"
                           "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1200)";
    __break(1u);
    JUMPOUT(0xB898);
  }
  v17 = *(_BYTE *)(a2 + 32) & 0xF;
  v11 = 1;
  if (v17 != 1)
    v11 = v17 == 3;
  if (!v11)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_free_span(span->xzc_bits.xzcb_kind)\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1201)";
    __break(1u);
    JUMPOUT(0xB904);
  }
  v21 = a2 & 0xFFFFFFFFFFFFC000;
  v10 = 1;
  if ((a2 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v9 = 0;
    if (a2 >= v21 + 2136)
      v9 = a2 < (a2 & 0xFFFFFFFFFFFFC000)
              + 48 * *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
              + 2136;
    v10 = v9;
  }
  if ((v10 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0xB9F4);
  }
  if (a2 < v21 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0xBA7CLL);
  }
  v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v21 - 2136) >> 4);
  if (v22 >= *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000)))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0xBAE8);
  }
  if (*(_QWORD *)((char *)&stru_20.maxprot + 8 * v22 + (a2 & 0xFFFFFFFFFFFFC000)) == -1)
  {
    return 1;
  }
  else
  {
    v15 = a2 & 0xFFFFFFFFFFFFC000;
    v8 = 1;
    if ((a2 & 0xFFFFFFFFFFFFC000) != 0)
    {
      v7 = 0;
      if (a2 >= v15 + 2136)
        v7 = a2 < (a2 & 0xFFFFFFFFFFFFC000)
                + 48 * *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
                + 2136;
      v8 = v7;
    }
    if ((v8 & 1) == 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0xBC24);
    }
    if (a2 < v15 + 2136)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0xBC94);
    }
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v15 - 2136) >> 4);
    if (v18 >= *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000)))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0xBD00);
    }
    v13 = (uint64_t *)(v15 + 88 + 8 * v18);
    if (*v13 == -1)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"*reclaim_id != VM_RECLAIM_INDEX_NULL\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1213)";
      __break(1u);
      JUMPOUT(0xBD4CLL);
    }
    if ((*(_BYTE *)(a2 + 32) & 0xF) == 1)
      v6 = 1;
    else
      v6 = *(_DWORD *)(a2 + 40);
    v19 = a2 & 0xFFFFFFFFFFFFC000;
    v5 = 1;
    if ((a2 & 0xFFFFFFFFFFFFC000) != 0)
    {
      v4 = 0;
      if (a2 >= v19 + 2136)
        v4 = a2 < (a2 & 0xFFFFFFFFFFFFC000)
                + 48 * *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
                + 2136;
      v5 = v4;
    }
    if ((v5 & 1) == 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0xBEA0);
    }
    if (a2 < v19 + 2136)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0xBF08);
    }
    v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v19 - 2136) >> 4);
    if (v20 >= *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000)))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0xBF74);
    }
    v12 = xzm_reclaim_mark_used(*(_QWORD *)(*((_QWORD *)a1 + 3) + 464), *v13, *(uint64_t *)((char *)&stru_20.filesize + (a2 & 0xFFFFFFFFFFFFC000))+ ((unint64_t)v20 << 14), (v6 << 14), 1);
    if ((v12 & 1) != 0)
      *v13 = -1;
    return v12 & 1;
  }
}

void _xzm_segment_group_segment_span_remove_from_queue(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 24) = *(_QWORD *)(a2 + 24);
  **(_QWORD **)(a2 + 24) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = -1;
  *(_QWORD *)(a2 + 24) = -1;
}

unint64_t _xzm_segment_group_segment_slice_split(os_unfair_lock_s *a1, uint64_t a2, unint64_t a3, unsigned int a4, char a5)
{
  uint64_t os_unfair_lock_opaque_low;
  BOOL v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v14;
  BOOL v15;
  int64_t v16;
  int64_t v17;

  v14 = a3 & 0xFFFFFFFFFFFFC000;
  v8 = 1;
  if ((a3 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v7 = 0;
    if (a3 >= v14 + 2136)
      v7 = a3 < (a3 & 0xFFFFFFFFFFFFC000)
              + 48 * *(unsigned int *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFC000))
              + 2136;
    v8 = v7;
  }
  if ((v8 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0xC190);
  }
  if (v14 != a2)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_for_slice(&sg->xzsg_main_ref->xzmz_base, sp"
                           "an) == segment\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/"
                           "xzone_segment.c:1328)";
    __break(1u);
    JUMPOUT(0xC1C8);
  }
  if ((*(_BYTE *)(a3 + 32) & 0xF) != 3)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"span->xzc_bits.xzcb_kind == XZM_SLICE_KIND_MULTI_FREE\" "
                           "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1329)";
    __break(1u);
    JUMPOUT(0xC204);
  }
  if (*(_DWORD *)(a3 + 40) <= a4)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"span->xzcs_slice_count > slice_count\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1330)";
    __break(1u);
    JUMPOUT(0xC240);
  }
  if (*(_BYTE *)(a2 + 20) == 1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_kind != XZM_SEGMENT_KIND_HUGE\" failed (/Li"
                           "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1331)";
    __break(1u);
    JUMPOUT(0xC278);
  }
  v9 = *(_DWORD *)(a3 + 40) - a4;
  if ((a5 & 1) != 0)
  {
    v11 = a3 + 48 * v9;
    *(_DWORD *)(v11 + 40) = *(_DWORD *)(a3 + 40) - v9;
    *(_BYTE *)(v11 + 32) = *(_BYTE *)(v11 + 32) & 0xF0 | 3;
    *(_BYTE *)(v11 + 32) = *(_BYTE *)(v11 + 32) & 0xEF | *(_BYTE *)(a3 + 32) & 0x10;
    if (a3 < a2 + 2136)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0xC368);
    }
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3 - a2 - 2136) >> 4);
    if (v17 >= *(unsigned int *)(a2 + 16))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0xC3D0);
    }
    v10 = v17;
    _xzm_segment_group_segment_span_free(a1, a2, v17, v9, (*(_BYTE *)(a3 + 32) & 0x10) != 0);
  }
  else
  {
    v11 = a3;
    if (a3 < a2 + 2136)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0xC430);
    }
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3 - a2 - 2136) >> 4);
    if (v16 >= *(unsigned int *)(a2 + 16))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0xC498);
    }
    v10 = v16 + a4;
    _xzm_segment_group_segment_span_free(a1, a2, v16 + a4, v9, (*(_BYTE *)(a3 + 32) & 0x10) != 0);
  }
  switch(LOBYTE(a1->_os_unfair_lock_opaque))
  {
    case 0:
    case 2:
      v15 = (*(_BYTE *)(*(_QWORD *)&a1[6]._os_unfair_lock_opaque + 328) & 4) != 0;
      break;
    case 1:
    case 3:
      v15 = (*(_BYTE *)(*(_QWORD *)&a1[6]._os_unfair_lock_opaque + 328) & 8) != 0;
      break;
    default:
      os_unfair_lock_opaque_low = LOBYTE(a1->_os_unfair_lock_opaque);
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
      qword_A4038 = os_unfair_lock_opaque_low;
      __break(1u);
      JUMPOUT(0xC574);
  }
  if (v15 && (*(_BYTE *)(a2 + 48 * v10 + 2168) & 0x10) == 0)
    _xzm_segment_group_span_mark_free((unsigned __int8 *)a1, a2 + 48 * v10 + 2136);
  return v11;
}

uint64_t _xzm_segment_group_segment_span_mark_allocated(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, unsigned int a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t v9;
  unint64_t v10;
  char v11;
  int64_t v12;

  if (a3 < 2u)
    goto LABEL_6;
  if (a3 != 2)
  {
    if (a3 - 3 >= 2)
    {
      if (a3 - 5 >= 3)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = a3;
        __break(1u);
        JUMPOUT(0xC6BCLL);
      }
      goto LABEL_7;
    }
LABEL_6:
    v11 = 0;
    goto LABEL_8;
  }
LABEL_7:
  v11 = 1;
LABEL_8:
  if (!v11)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_chunk(kind)\" failed (/Library/Caches"
                           "/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1426)";
    __break(1u);
    JUMPOUT(0xC6ECLL);
  }
  if (a4 >= *(unsigned int *)(a2 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_index < segment->xzs_slice_entry_count\" failed (/"
                           "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1427)";
    __break(1u);
    JUMPOUT(0xC728);
  }
  if (a5 - 1 > 2)
    v6 = 3;
  else
    v6 = a5 - 1;
  v9 = v6;
  if (a4 + v6 >= *(unsigned int *)(a2 + 16))
    v9 = ~a4 + *(unsigned int *)(a2 + 16);
  v10 = a2 + 48 * a4 + 2184;
  for (i = 1; i <= v9; ++i)
  {
    *(_BYTE *)(v10 + 32) = *(_BYTE *)(v10 + 32) & 0xF0 | 4;
    *(_DWORD *)(v10 + 36) = 48 * i;
    v10 += 48;
  }
  v7 = a4 + a5 - 1;
  if (a3 != 7)
  {
    if (v7 >= *(unsigned int *)(a2 + 16))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"last_slice_index < segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1450)";
      __break(1u);
      JUMPOUT(0xC8BCLL);
    }
    if (a2 + 48 * v7 + 2136 >= v10)
    {
      *(_BYTE *)(a2 + 48 * v7 + 2168) = *(_BYTE *)(a2 + 48 * v7 + 2168) & 0xF0 | 4;
      *(_DWORD *)(a2 + 48 * v7 + 2172) = 48 * a5 - 48;
    }
  }
  if (a3 == 2)
  {
    if (a5 != 1)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count == 1\" failed (/Library/Caches/com.apple.x"
                             "bs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1465)";
      __break(1u);
      JUMPOUT(0xC97CLL);
    }
  }
  else
  {
    *(_DWORD *)(a2 + 48 * a4 + 2176) = a5;
  }
  *(_BYTE *)(a2 + 48 * a4 + 2168) = *(_BYTE *)(a2 + 48 * a4 + 2168) & 0xF0 | a3 & 0xF;
  if (a2 + 48 * a4 + 2136 < a2 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0xCA00);
  }
  v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(48 * a4) >> 4);
  if (v12 >= *(unsigned int *)(a2 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0xCA68);
  }
  *(_QWORD *)(a2 + 88 + 8 * v12) = -1;
  ++*(_DWORD *)(a2 + 8);
  return a2 + 48 * a4 + 2136;
}

uint64_t xzm_segment_group_try_realloc_huge_chunk(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL4 v16;
  int v17;
  int v18;
  _BOOL4 v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  mach_vm_address_t plat;
  int v24;
  unint64_t i;
  mach_vm_size_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  os_unfair_lock_s *v35;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  unsigned int v74;

  v35 = (os_unfair_lock_s *)a1;
  v34 = a2;
  v33 = a3;
  v32 = a4;
  v31 = a5;
  v40 = *(_QWORD *)(a1 + 24);
  v39 = a4;
  v38 = a4 & 0xFFFFFFFFFFFFC000;
  v20 = 1;
  if ((a4 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v19 = 0;
    if (v39 >= v38 + 2136)
      v19 = v39 < v38 + 48 * *(unsigned int *)(v38 + 16) + 2136;
    v20 = v19;
  }
  if ((v20 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0xCB94);
  }
  if (v38 != v33)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_for_slice(&sg->xzsg_main_ref->xzmz_base, ch"
                           "unk) == segment\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone"
                           "/xzone_segment.c:2842)";
    __break(1u);
    JUMPOUT(0xCBCCLL);
  }
  if (v31 <= 0x80)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"new_slice_count > (XZM_LARGE_BLOCK_SIZE_MAX / XZM_SEGMEN"
                           "T_SLICE_SIZE)\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/x"
                           "zone_segment.c:2844)";
    __break(1u);
    JUMPOUT(0xCC00);
  }
  if ((*(_BYTE *)(v32 + 32) & 0xF) != 7)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_HUGE_CHUNK\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2845)";
    __break(1u);
    JUMPOUT(0xCC3CLL);
  }
  if (*(_DWORD *)(v32 + 40) >= v31)
  {
    if (*(_DWORD *)(v32 + 40) > v31)
    {
      _xzm_segment_group_split_huge_segment((uint64_t)v35, v33, v31);
      if (!_xzm_segment_group_segment_is_valid(v35, v33))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_segment_is_valid(sg, segment)\" f"
                               "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2902)";
        __break(1u);
        JUMPOUT(0xD318);
      }
      return 1;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v30 = 0;
    v29 = 0;
    v44 = v34;
    v43 = v32;
    v42 = &v30;
    if (&v9 != (uint64_t *)-152)
    {
      v18 = *(_BYTE *)(v43 + 32) & 0xF;
      if (v18 == 2)
      {
        *v42 = 0x4000;
      }
      else if (v18 == 5)
      {
        *v42 = 0x10000;
      }
      else
      {
        if ((v18 - 6) >= 2)
        {
          v41 = 0;
          v41 = *(_BYTE *)(v43 + 32) & 0xF;
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
          qword_A4038 = v41;
          __break(1u);
          JUMPOUT(0xCD48);
        }
        *v42 = (unint64_t)*(unsigned int *)(v43 + 40) << 14;
      }
    }
    v63 = v44;
    v62 = v43;
    v66 = v44;
    v65 = v43;
    v64 = v43 & 0xFFFFFFFFFFFFC000;
    v17 = 1;
    if ((v43 & 0xFFFFFFFFFFFFC000) != 0)
    {
      v16 = 0;
      if (v65 >= v64 + 2136)
        v16 = v65 < v64 + 48 * *(unsigned int *)(v64 + 16) + 2136;
      v17 = v16;
    }
    if ((v17 & 1) == 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0xCE28);
    }
    v68 = v64;
    v67 = v62;
    v15 = v64;
    v71 = v64;
    v70 = v62;
    if (v62 < v64 + 2136)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0xCE8CLL);
    }
    v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - v71 - 2136) >> 4);
    if (v69 >= *(unsigned int *)(v71 + 16))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0xCEF4);
    }
    v73 = v15;
    v72 = v69;
    v29 = *(_QWORD *)(v15 + 80) + ((unint64_t)v69 << 14);
    v28 = v29 + v30;
    v27 = 0;
    v27 = v31 - *(_DWORD *)(v32 + 40);
    v26 = v27 << 14;
    i = 0;
    if ((((_DWORD)v29 + (_DWORD)v30) & 0x3FFFFF) != 0)
      v14 = (v28 & 0xFFFFFFFFFFC00000) + 0x400000;
    else
      v14 = v28;
    for (i = v14; i < v28 + v26; i += 0x400000)
    {
      v47 = *(_QWORD *)&v35[6]._os_unfair_lock_opaque;
      v46 = i;
      v45 = 0;
      v55 = i;
      v54 = v47;
      v53 = 0;
      v52 = 0;
      v60 = i;
      v59 = &v53;
      v58 = i;
      if (i >> 36)
      {
        *v59 = 0;
        v61 = 0x4000;
      }
      else
      {
        v57 = v58 >> 22;
        *v59 = 0;
        if (v57 >= 0x4000)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Li"
                                 "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
          __break(1u);
          JUMPOUT(0xD084);
        }
        v61 = v57;
      }
      v52 = v61;
      if (v61 >= 0x4000)
        v56 = 0;
      else
        v56 = *(_QWORD *)(v54 + 408) + 4 * v52;
      v45 = (unsigned int *)v56;
      if (v56)
      {
        v74 = *v45;
        v48 = (unint64_t)v74 << 14;
      }
      else
      {
        v48 = 0;
      }
      if (v48)
        return 0;
    }
    v24 = 6;
    plat = 0;
    plat = mvm_allocate_plat(v28, v26, 0, 0, 0, 6, 0, a8);
    if (plat)
    {
      v13 = 0;
      v22 = (unint64_t)v31 << 14;
      v49 = v33;
      v51 = v33;
      v50 = 0;
      _xzm_segment_group_init_segment(v35, v33, *(_QWORD *)(v33 + 80), v22, 1, 0);
      v21 = v13;
      if ((v28 & 0x3FFFFF) != 0)
        v12 = (v28 & 0xFFFFFFFFFFC00000) + 0x400000;
      else
        v12 = v28;
      v21 = v12;
      if (v29 + v22 > v12)
      {
        v37 = v34;
        v11 = *(_QWORD *)(v34 + 232);
        if (v11)
          v10 = v11;
        else
          v10 = v37;
        _xzm_segment_table_allocated_at(v10, v21, v33);
      }
      if (!_xzm_segment_group_segment_is_valid(v35, v33))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_segment_is_valid(sg, segment)\" f"
                               "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2894)";
        __break(1u);
        JUMPOUT(0xD2A0);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t _xzm_segment_group_init_segment(os_unfair_lock_s *a1, unint64_t a2, unint64_t a3, unint64_t a4, char a5, char a6)
{
  int v7;
  unsigned int v8;
  uint64_t v9;

  v9 = 0;
  if (a2 >> 36)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)segment < XZM_LIMIT_ADDRESS\" failed (/Librar"
                           "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1765)";
    __break(1u);
    JUMPOUT(0xD3ACLL);
  }
  if (a3 >> 36)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)body < XZM_LIMIT_ADDRESS\" failed (/Library/C"
                           "aches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1766)";
    __break(1u);
    JUMPOUT(0xD3E0);
  }
  if ((a2 & 0x3FFF) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)segment % XZM_METAPOOL_SEGMENT_ALIGN == 0\" f"
                           "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1767)";
    __break(1u);
    JUMPOUT(0xD414);
  }
  if ((a3 & 0x3FFFFF) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)body % XZM_SEGMENT_SIZE == 0\" failed (/Libra"
                           "ry/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1768)";
    __break(1u);
    JUMPOUT(0xD448);
  }
  if ((a4 & 0x3FFF) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"body_size % XZM_SEGMENT_SLICE_SIZE == 0\" failed (/Libra"
                           "ry/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1769)";
    __break(1u);
    JUMPOUT(0xD47CLL);
  }
  v8 = a4 >> 14;
  if (((a4 >> 14) & 0x3FFFF00000000) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Slice count too large in init_segment";
    __break(1u);
    JUMPOUT(0xD4D0);
  }
  *(_QWORD *)a2 = a1;
  *(_DWORD *)(a2 + 12) = v8;
  if (v8 > 0xFF)
    v7 = 256;
  else
    v7 = a4 >> 14;
  *(_DWORD *)(a2 + 16) = v7;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 80) = a3;
  *(_QWORD *)(a2 + 72) = -1;
  *(_BYTE *)(a2 + 20) = a5 & 1;
  if ((a5 & 1) != 0)
  {
    v9 = _xzm_segment_group_segment_span_mark_allocated((uint64_t)a1, a2, 7u, 0, *(_DWORD *)(a2 + 12));
    *(_BYTE *)(v9 + 32) = *(_BYTE *)(v9 + 32) & 0xEF | (16 * (a6 & 1));
  }
  else
  {
    os_unfair_lock_lock_with_options(&a1[1], 327680);
    _xzm_segment_group_segment_span_free(a1, a2, 0, v8, a6 & 1);
  }
  if (!_xzm_segment_group_segment_is_valid(a1, a2))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_segment_is_valid(sg, segment)\" faile"
                           "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1798)";
    __break(1u);
    JUMPOUT(0xD614);
  }
  return v9;
}

uint64_t _xzm_segment_table_allocated_at(uint64_t result, unint64_t a2, unint64_t a3)
{
  int v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;

  v6 = a2;
  if ((a2 & 0x3FFFFF) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)data % XZM_SEGMENT_SIZE == 0\" failed (/Libra"
                           "ry/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:35)";
    __break(1u);
    JUMPOUT(0xD668);
  }
  v3 = *(_DWORD *)(a3 + 12) - 1;
  v14 = a3;
  v13 = v3;
  v16 = a3;
  v15 = v3 + 1;
  v5 = *(_QWORD *)(a3 + 80) + ((unint64_t)(v3 + 1) << 14);
  if (a2 >= v5)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)data < (uintptr_t)segment_end\" failed (/Libr"
                           "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:38)";
    __break(1u);
    JUMPOUT(0xD6ECLL);
  }
  v11 = a3;
  if ((a3 & 0x3FFF) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)segment % XZM_METAPOOL_SEGMENT_ALIGN == 0\" f"
                           "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inl"
                           "ine_internal.h:186)";
    __break(1u);
    JUMPOUT(0xD730);
  }
  if (v11 >> 14 >= 0xFFFFFFFF)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"((uintptr_t)segment >> XZM_METAPOOL_SEGMENT_BLOCK_SHIFT)"
                           " < UINT32_MAX\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/."
                           "./xzone/xzone_inline_internal.h:190)";
    __break(1u);
    JUMPOUT(0xD768);
  }
  v12 = v11 >> 14;
  v4 = v12;
  while (v6 < v5)
  {
    v9 = v6;
    v8 = result;
    v7 = 0;
    v20 = v6;
    v19 = &v7;
    v18 = v6;
    if (v6 >> 36)
    {
      *v19 = 0;
      v21 = 0x4000;
    }
    else
    {
      v17 = v18 >> 22;
      *v19 = 0;
      if (v17 >= 0x4000)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Libr"
                               "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
        __break(1u);
        JUMPOUT(0xD84CLL);
      }
      v21 = v17;
    }
    if (v21 < 0x4000)
      v10 = (unsigned int *)(*(_QWORD *)(v8 + 408) + 4 * v21);
    else
      v10 = 0;
    if (!v10)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"entry != NULL\" failed (/Library/Caches/com.apple.xbs/"
                             "Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:82)";
      __break(1u);
      JUMPOUT(0xD8CCLL);
    }
    if (*v10)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"entry->xste_val == 0\" failed (/Library/Caches/com.app"
                             "le.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:84)";
      __break(1u);
      JUMPOUT(0xD900);
    }
    atomic_store(v4, v10);
    v6 += 0x400000;
  }
  return result;
}

uint64_t _xzm_segment_group_split_huge_segment(uint64_t result, unint64_t a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  mach_vm_size_t v7;
  mach_vm_address_t v8;
  unint64_t v9;
  uint64_t v12;

  v12 = result;
  if (*(_BYTE *)(a2 + 20) != 1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_kind == XZM_SEGMENT_KIND_HUGE\" failed (/Li"
                           "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2413)";
    __break(1u);
    JUMPOUT(0xD990);
  }
  if (*(_DWORD *)(a2 + 12) < a3)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_slice_count >= required_slices\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2414)";
    __break(1u);
    JUMPOUT(0xD9CCLL);
  }
  if (*(_DWORD *)(a2 + 12) != a3)
  {
    v9 = *(_QWORD *)(a2 + 80) + ((unint64_t)*(unsigned int *)(a2 + 12) << 14);
    v8 = *(_QWORD *)(a2 + 80) + ((unint64_t)a3 << 14);
    if (v8 < v9)
    {
      v7 = v9 - v8;
      if ((v8 & 0x3FFFFF) != 0)
        v3 = (v8 & 0xFFFFFFFFFFC00000) + 0x400000;
      else
        v3 = *(_QWORD *)(a2 + 80) + ((unint64_t)a3 << 14);
      v6 = *(_QWORD *)(*(_QWORD *)(result + 24) + 400);
      v5 = (void *)xzm_metapool_alloc(v6);
      v4 = v9 - v3;
      if (v3 < v9)
        _xzm_segment_table_freed_at(*(_QWORD *)(v12 + 24), v3, a2, 0);
      os_unfair_lock_lock_with_options(v12 + 520, 327680);
      if (v3 >= v9 || v4 <= 0x200000 || *(unsigned __int16 *)(v12 + 514) >= (int)*(unsigned __int16 *)(v12 + 512))
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 520));
        xzm_metapool_free(v6, v5);
        xzm_range_group_free_segment_body(*(_BYTE **)(v12 + 16), v8, v7);
      }
      else
      {
        _xzm_segment_group_init_segment((os_unfair_lock_s *)v12, (unint64_t)v5, v3, v4, 1, 0);
        _xzm_segment_group_cache_mark_free(v12, (uint64_t)v5);
        os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 520));
        if (v3 > v8)
          xzm_range_group_free_segment_body(*(_BYTE **)(v12 + 16), v8, v7 - v4);
      }
      result = _xzm_segment_group_init_segment((os_unfair_lock_s *)v12, a2, *(_QWORD *)(a2 + 80), (unint64_t)a3 << 14, 1, 0);
    }
    if (*(_QWORD *)(a2 + 80) + ((unint64_t)*(unsigned int *)(a2 + 12) << 14) != v8)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_end(segment) == remainder\" failed (/Libr"
                             "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2496)";
      __break(1u);
      JUMPOUT(0xDD1CLL);
    }
  }
  return result;
}

unint64_t _xzm_segment_group_alloc_huge_chunk_from_cache(uint64_t a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t i;
  unint64_t v8;

  if (*(_BYTE *)a1 != 1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"sg->xzsg_id == XZM_SEGMENT_GROUP_DATA_LARGE\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1900)";
    __break(1u);
    JUMPOUT(0xDD78);
  }
  v6 = 0;
  v5 = a1 + 464;
  os_unfair_lock_lock_with_options(a1 + 520, 327680);
  if (*(_WORD *)(a1 + 514))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 464);
    while (1)
    {
      v8 = 0;
      for (i = *(_QWORD *)v5; ; i = v6)
      {
        v3 = 0;
        if (i)
        {
          v6 = *(_QWORD *)(i + 24);
          v3 = 1;
        }
        if ((v3 & 1) == 0)
          break;
        if (*(_DWORD *)(i + 12) >= a2
          && *(_DWORD *)(i + 12) < 2 * a2
          && (!v8 || *(_DWORD *)(i + 12) < *(_DWORD *)(v8 + 12)))
        {
          if (xzm_reclaim_is_available(v4, *(_QWORD *)(i + 72)))
            v8 = i;
          else
            _xzm_segment_group_cache_invalidate(a1, (void *)i);
        }
      }
      if (!v8)
        break;
      if (_xzm_segment_group_cache_mark_used(a1, v8))
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 56));
        _xzm_segment_table_allocated_at(*(_QWORD *)(a1 + 24), *(_QWORD *)(v8 + 80), v8);
        return v8 + 2136;
      }
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 56));
  return 0;
}

uint64_t _xzm_segment_group_alloc_segment(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t *a4, char a5)
{
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  char v9;
  unint64_t v10;
  mach_vm_address_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  uint64_t inited;

  if (a2 || (v9 = 1, a4))
  {
    v8 = 0;
    if (a2)
      v8 = a4 != 0;
    v9 = v8;
  }
  if ((v9 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(required_bytes == 0 && huge_chunk == NULL) || (required"
                           "_bytes > 0 && huge_chunk != NULL)\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_d"
                           "riverkit/src/xzone/xzone_segment.c:1816)";
    __break(1u);
    JUMPOUT(0xE064);
  }
  v7 = 1;
  if (!a2)
    v7 = a3 == 0;
  if (!v7)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"huge || alignment == 0\" failed (/Library/Caches/com.app"
                           "le.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1821)";
    __break(1u);
    JUMPOUT(0xE0D4);
  }
  if (a2)
  {
    if ((a2 & 0x3FFF) != 0)
      v6 = (a2 & 0xFFFFFFFFFFFFC000) + 0x4000;
    else
      v6 = a2;
    v13 = v6;
  }
  else
  {
    v13 = 0x400000;
  }
  v12 = a2 != 0;
  if ((a5 & 1) != 0)
    v12 |= 2u;
  v11 = xzm_range_group_alloc_segment(*(_BYTE **)(a1 + 16), v13, a3, 0, v12);
  if (v11)
  {
    if (v11 >> 36)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)segment_body < XZM_LIMIT_ADDRESS\" failed ("
                             "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1870)";
      __break(1u);
      JUMPOUT(0xE1F4);
    }
    v10 = xzm_metapool_alloc(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 400));
    inited = _xzm_segment_group_init_segment((os_unfair_lock_s *)a1, v10, v11, v13, a2 != 0, 1);
    _xzm_segment_table_allocated_at(*(_QWORD *)(a1 + 24), v11, v10);
    if (a2)
      *a4 = inited;
    return 1;
  }
  else
  {
    return 0;
  }
}

void _xzm_segment_group_cache_invalidate(uint64_t a1, void *a2)
{
  os_unfair_lock_assert_owner((os_unfair_lock_t)(a1 + 520));
  __xzm_segment_cache_remove(a1 + 464, (uint64_t)a2);
  xzm_metapool_free(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 400), a2);
}

uint64_t _xzm_segment_group_cache_mark_used(uint64_t a1, uint64_t a2)
{
  char v5;

  os_unfair_lock_assert_owner((os_unfair_lock_t)(a1 + 520));
  if ((xzm_reclaim_mark_used(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 464), *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80), (unint64_t)*(unsigned int *)(a2 + 12) << 14, 0) & 1) != 0)
  {
    *(_QWORD *)(a2 + 72) = -1;
    __xzm_segment_cache_remove(a1 + 464, a2);
    v5 = 1;
  }
  else
  {
    _xzm_segment_group_cache_invalidate(a1, (void *)a2);
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t __xzm_segment_cache_remove(uint64_t result, uint64_t a2)
{
  if (!*(_WORD *)(result + 50))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"cache->xzsc_count > 0\" failed (/Library/Caches/com.appl"
                           "e.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:892)";
    __break(1u);
    JUMPOUT(0xE434);
  }
  --*(_WORD *)(result + 50);
  if (*(_QWORD *)(a2 + 24))
  {
    *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(result + 40) = *(_DWORD *)(result + 24);
    *(_QWORD *)(result + 32) = *(_QWORD *)(result + 16);
    *(_DWORD *)(result + 24) = 894;
    *(_QWORD *)(result + 16) = "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c";
  }
  **(_QWORD **)(a2 + 32) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = -1;
  *(_QWORD *)(a2 + 32) = -1;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 48) = 894;
  *(_QWORD *)(a2 + 40) = "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c";
  return result;
}

mach_vm_address_t xzm_range_group_alloc_segment(_BYTE *a1, unint64_t a2, unint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (!*a1)
    return _xzm_range_group_alloc_data_segment((uint64_t)a1, a2, a3, a4, a5);
  if (a3)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"alignment == 0\" failed (/Library/Caches/com.apple.xbs/S"
                           "ources/libmalloc_driverkit/src/xzone/xzone_segment.c:483)";
    __break(1u);
    JUMPOUT(0xE5BCLL);
  }
  if (((a5 >> 1) & 1) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!(rga_flags & XZM_RANGE_GROUP_ALLOC_FLAGS_PURGEABLE)\" f"
                           "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:486)";
    __break(1u);
    JUMPOUT(0xE5F0);
  }
  return _xzm_range_group_alloc_ptr_segment(a1, a2, a4, a5);
}

mach_vm_address_t _xzm_range_group_alloc_data_segment(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if (*(_BYTE *)a1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"rg->xzrg_id == XZM_RANGE_GROUP_DATA\" failed (/Library/C"
                           "aches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:388)";
    __break(1u);
    JUMPOUT(0xE670);
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 328) & 1) != 0)
    return _xzm_range_group_alloc_anywhere_segment(0, a2, a3, a4, a5);
  else
    return _xzm_range_group_alloc_mvm_segment(a2, a3, a4, a5);
}

mach_vm_address_t _xzm_range_group_alloc_ptr_segment(_BYTE *a1, unint64_t a2, uint64_t a3, int a4)
{
  kern_return_t v5;
  mach_vm_address_t address;
  mach_vm_address_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;

  v11 = a1;
  v10 = a2;
  v9 = a3;
  v8 = a4;
  if (*a1 != 1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"rg->xzrg_id == XZM_RANGE_GROUP_PTR\" failed (/Library/Ca"
                           "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:426)";
    __break(1u);
    JUMPOUT(0xE730);
  }
  if ((v8 & 1) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!(rga_flags & XZM_RANGE_GROUP_ALLOC_FLAGS_HUGE)\" failed"
                           " (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:427)";
    __break(1u);
    JUMPOUT(0xE760);
  }
  if (v10 != 0x400000)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"size == XZM_SEGMENT_SIZE\" failed (/Library/Caches/com.a"
                           "pple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:428)";
    __break(1u);
    JUMPOUT(0xE794);
  }
  if (*(_BYTE *)(*((_QWORD *)v11 + 1) + 344) == 2)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"rg->xzrg_main_ref->xzmz_segment_group_count != XZM_SEGME"
                           "NT_GROUP_COUNT_DATA_ONLY\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/"
                           "src/xzone/xzone_segment.c:430)";
    __break(1u);
    JUMPOUT(0xE7D0);
  }
  if ((*(_BYTE *)(*((_QWORD *)v11 + 1) + 328) & 1) == 0)
    return _xzm_range_group_alloc_mvm_segment(v10, 0, v9, v8);
  v7 = _xzm_range_group_bump_alloc_segment((uint64_t)v11, v10);
  if (!v7)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Pointer range exhausted";
    __break(1u);
    JUMPOUT(0xE82CLL);
  }
  address = v7;
  v5 = mach_vm_map(mach_task_self_, &address, v10, 0, 33570816, 0, 0, 0, 3, 7, 1u);
  if (v5)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: pointer range mach_vm_map() overwrite failed";
    qword_A4038 = v5;
    __break(1u);
    JUMPOUT(0xE8F4);
  }
  return v7;
}

mach_vm_address_t _xzm_range_group_alloc_mvm_segment(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5;
  int v6;
  int v7;

  v7 = 0;
  if ((a4 & 2) != 0)
    v7 = 128;
  v6 = _xzm_range_group_vm_tag_for_segment(a1, a4 & 1);
  if (!a2)
    return mvm_allocate_pages_plat(a1, 0x16u, v7, v6, a3);
  v5 = __clz(__rbit64(a2));
  if (v5 >= 0xFF)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"align_pow < UINT8_MAX\" failed (/Library/Caches/com.appl"
                           "e.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:301)";
    __break(1u);
    JUMPOUT(0xEA24);
  }
  if (v5 >= 0x17)
    return mvm_allocate_pages_plat(a1, v5, v7, v6, a3);
  else
    return mvm_allocate_pages_plat(a1, 0x16u, v7, v6, a3);
}

unint64_t _xzm_range_group_bump_alloc_segment(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v8 = 0;
  os_unfair_lock_lock_with_options(a1 + 16, 327680);
  if (*(_QWORD *)(a1 + 48) >= a2)
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (v8 % a2)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment_addr % size == 0\" failed (/Library/Caches/com"
                             ".apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:368)";
      __break(1u);
      JUMPOUT(0xEB20);
    }
    *(_QWORD *)(a1 + 40) += a2;
    *(_QWORD *)(a1 + 48) -= a2;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
  if (v8)
    return v8;
  malloc_zone_error(0, 0, (uint64_t)"Failed to allocate segment - out of space\n", v2, v3, v4, v5, v6, 0);
  return 0;
}

uint64_t xzm_span_queue_for (uint64_t a1, unsigned int a2)
{
  int v2;
  int v3;
  unint64_t v5;

  if ((unint64_t)a2 << 14 > 0x400000)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count * XZM_SEGMENT_SLICE_SIZE <= XZM_SEGMENT_SIZE"
                           "\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1010)";
    __break(1u);
    JUMPOUT(0xEBFCLL);
  }
  v2 = __clz(0xFFuLL);
  if (((0xFFu >> (61 - v2)) & 3 | (4 * (63 - v2))) - 5 >= 0x1BuLL)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"xzm_slice_bin8(XZM_SLICES_PER_SEGMENT) < XZM_SPAN_QUEUE_"
                           "COUNT\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1012)";
    __break(1u);
    JUMPOUT(0xED10);
  }
  if (!a2)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count != 0\" failed (/Library/Caches/com.apple.xbs"
                           "/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:993)";
    __break(1u);
    JUMPOUT(0xED50);
  }
  if (a2 > 8)
  {
    if (a2 >= 0x101)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count <= XZM_SLICES_PER_SEGMENT\" failed (/Libra"
                             "ry/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:998)";
      __break(1u);
      JUMPOUT(0xEDA8);
    }
    v3 = __clz(a2 - 1);
    v5 = (((a2 - 1) >> (61 - v3)) & 3 | (4 * (63 - v3))) - 5;
  }
  else
  {
    v5 = a2 - 1;
  }
  if (v5 >= 0x1B)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bin < XZM_SPAN_QUEUE_COUNT\" failed (/Library/Caches/com"
                           ".apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1014)";
    __break(1u);
    JUMPOUT(0xEE34);
  }
  if (*(_DWORD *)(a1 + 16 * v5 + 40) < a2)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"sq->xzsq_slice_count >= slice_count\" failed (/Library/C"
                           "aches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1024)";
    __break(1u);
    JUMPOUT(0xEE94);
  }
  return a1 + 16 * v5 + 32;
}

uint64_t _xzm_segment_group_segment_span_init_run(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t *a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, float a10)
{
  uint64_t v11;
  unsigned int i;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  v17 = 0;
  if (a7)
    v16 = _xzm_random_bits(a7, a8 + 1, a9, a10);
  else
    v16 = 0;
  if (a3 == 2)
  {
    v15 = 1;
  }
  else if (a3 == 5)
  {
    v15 = 4;
  }
  else
  {
    if (a4)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!preallocate_list\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1565)";
      __break(1u);
      JUMPOUT(0xEF84);
    }
    if (a7)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"guard_count == 0\" failed (/Library/Caches/com.apple.x"
                             "bs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1566)";
      __break(1u);
      JUMPOUT(0xEFB4);
    }
    if (a3 != 6)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kind == XZM_SLICE_KIND_LARGE_CHUNK\" failed (/Library/"
                             "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1567)";
      __break(1u);
      JUMPOUT(0xEFE8);
    }
    if (a8 != 1)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"num_chunks == 1\" failed (/Library/Caches/com.apple.xb"
                             "s/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1568)";
      __break(1u);
      JUMPOUT(0xF01CLL);
    }
    v15 = a6;
  }
  if (a8 * v15 + a7 != a6)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(num_chunks * slices_per_chunk + guard_count) == total_s"
                           "lices\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1572)";
    __break(1u);
    JUMPOUT(0xF074);
  }
  if (a5 + a6 > *(_DWORD *)(a2 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(start_index + total_slices) <= segment->xzs_slice_entry"
                           "_count\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1574)";
    __break(1u);
    JUMPOUT(0xF0B8);
  }
  v14 = a5;
  v13 = (*(_BYTE *)(a2 + 48 * a5 + 2168) & 0x10) != 0;
  for (i = 0; i < a8; ++i)
  {
    if ((v16 & 1) != 0)
      _xzm_segment_group_segment_create_guard(a1, a2, v14++);
    v16 >>= 1;
    v11 = _xzm_segment_group_segment_span_mark_allocated(a1, a2, a3, v14, v15);
    *(_BYTE *)(v11 + 32) = *(_BYTE *)(v11 + 32) & 0xEF | (16 * v13);
    v14 += v15;
    if (i)
    {
      *(_QWORD *)(v11 + 16) = *a4;
      *a4 = v11;
    }
    else
    {
      v17 = v11;
    }
  }
  if (v16 >= 2)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"guard_mask <= 1\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1598)";
    __break(1u);
    JUMPOUT(0xF22CLL);
  }
  if (v16)
    _xzm_segment_group_segment_create_guard(a1, a2, v14++);
  if (v14 - a5 != a6)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index - start_index == total_slices\" failed (/Library/C"
                           "aches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1604)";
    __break(1u);
    JUMPOUT(0xF298);
  }
  return v17;
}

uint64_t _xzm_random_bits(unsigned int a1, uint32_t a2, double a3, float a4)
{
  unsigned int v4;
  unsigned int v6;
  uint32_t v7;
  unsigned int v8;
  int v9;

  v9 = (1 << a2) - 1;
  if (a1 < (3 * a2) >> 2)
  {
    if (a1 > a2 >> 2)
    {
      v8 = arc4random() & v9;
      LOWORD(v4) = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)v8));
      v7 = v4;
      v6 = dist_u32(v4, a1);
      if (v6 > dist_u32(a2 - v7, a1))
      {
        v7 = a2 - v7;
        v8 ^= v9;
      }
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
  }
  else
  {
    v8 = (1 << a2) - 1;
    v7 = a2;
  }
  if (v7 >= a1)
  {
    if (a1 < v7)
      v8 = _xzm_random_clear_n_bits(v8, v7, v7 - a1);
  }
  else
  {
    v8 = _xzm_random_clear_n_bits(v8 ^ v9, a2 - v7, a1 - v7) ^ v9;
  }
  LOWORD(a4) = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)v8));
  if (LODWORD(a4) != a1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"__builtin_popcount(retval) == pop\" failed (/Library/Cac"
                           "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1539)";
    __break(1u);
    JUMPOUT(0xF4A4);
  }
  if ((v8 & ~v9) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(retval & ~mask) == 0\" failed (/Library/Caches/com.appl"
                           "e.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1540)";
    __break(1u);
    JUMPOUT(0xF4DCLL);
  }
  return v8;
}

uint64_t _xzm_segment_group_segment_create_guard(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  int i;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;

  v9 = a3;
  v8 = a2 + 48 * a3 + 2136;
  v7 = 1;
  if (a2 + 48 * (unint64_t)a3 + 2184 < a2 + 48 * (unint64_t)*(unsigned int *)(a2 + 16) + 2136
    && (*(_BYTE *)(a2 + 48 * a3 + 2216) & 0xF) == 8)
  {
    v7 = *(_DWORD *)(a2 + 48 * a3 + 2224) + 1;
  }
  if (v8 > a2 + 2136)
  {
    v11 = a2 + 48 * a3 + 2088;
    if ((*(_BYTE *)(a2 + 48 * a3 + 2120) & 0xF) == 4)
    {
      v10 = a2 + 48 * a3 + 2088 - *(unsigned int *)(a2 + 48 * a3 + 2124);
      if (v10 < ((a2 + 48 * a3 + 2088) & 0xFFFFFFFFFFFFC000 | 0x858))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(X"
                               "ZM_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs"
                               "/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:584)";
        __break(1u);
        JUMPOUT(0xF658);
      }
      v5 = *(_BYTE *)(v10 + 32) & 0xF;
      if ((v5 - 1) < 2)
      {
        v13 = v10 == v11;
      }
      else if (v5 == 3 || (v5 - 5) < 4)
      {
        if (v11 < v10)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple."
                                 "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:562)";
          __break(1u);
          JUMPOUT(0xF6FCLL);
        }
        v13 = v11 < v10 + 48 * *(unsigned int *)(v10 + 40);
      }
      else
      {
        v13 = 0;
      }
      if (v13)
        v12 = a2 + 48 * a3 + 2088 - *(unsigned int *)(a2 + 48 * a3 + 2124);
      else
        v12 = a2 + 48 * a3 + 2088;
    }
    else
    {
      v12 = a2 + 48 * a3 + 2088;
    }
    if ((*(_BYTE *)(v12 + 32) & 0xF) == 8)
    {
      v9 = a3 - *(_DWORD *)(v12 + 40);
      v7 += *(_DWORD *)(v12 + 40);
      v8 = v12;
    }
  }
  if (v7 < 2)
  {
    ++*(_DWORD *)(a2 + 8);
  }
  else
  {
    for (i = 1; i < v7; ++i)
    {
      *(_DWORD *)(v8 + 48 * i + 36) = 48 * i;
      *(_BYTE *)(v8 + 48 * i + 32) = *(_BYTE *)(v8 + 48 * i + 32) & 0xF0 | 4;
    }
  }
  if (v8 != a2 + 48 * v9 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice == &segment->xzs_slices[index]\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1404)";
    __break(1u);
    JUMPOUT(0xF8B8);
  }
  *(_DWORD *)(v8 + 40) = v7;
  result = mprotect((void *)(*(_QWORD *)(a2 + 80) + ((unint64_t)v9 << 14)), (unint64_t)v7 << 14, 0);
  if ((_DWORD)result)
  {
    v4 = *__error();
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Failed to mprotect guard page";
    qword_A4038 = v4;
    __break(1u);
    JUMPOUT(0xF964);
  }
  *(_BYTE *)(v8 + 32) = *(_BYTE *)(v8 + 32) & 0xF0 | 8;
  return result;
}

uint64_t dist_u32(unsigned int a1, unsigned int a2)
{
  if (a1 >= a2)
    return a1 - a2;
  else
    return a2 - a1;
}

uint64_t _xzm_random_clear_n_bits(unsigned int a1, uint32_t a2, int a3)
{
  unsigned int v5;
  uint32_t v6;

  while (a3--)
  {
    v6 = arc4random_uniform(a2);
    v5 = a1;
    while (v6)
    {
      v5 &= v5 - 1;
      --v6;
    }
    a1 ^= 1 << __clz(__rbit32(v5));
    --a2;
  }
  return a1;
}

void _xzm_segment_group_bzero_chunk(uint64_t a1, char *a2, unint64_t a3)
{
  size_t v3;

  while (a3)
  {
    if (a3 >= 0x80000)
      v3 = 0x80000;
    else
      v3 = a3;
    _platform_bzero(a2, v3);
    xzm_madvise(*(_QWORD *)(a1 + 24), a2, v3);
    a2 += v3;
    a3 -= v3;
  }
}

uint64_t _xzm_segment_group_free_huge_chunk_to_cache(uint64_t a1, unint64_t a2)
{
  char v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *i;
  uint64_t v7;

  v7 = a1 + 464;
  v5 = 0;
  if (!*(_WORD *)(a1 + 512))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"cache->xzsc_max_count > 0\" failed (/Library/Caches/com."
                           "apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2507)";
    __break(1u);
    JUMPOUT(0xFBECLL);
  }
  if (*(_DWORD *)(a2 + 12) > *(_DWORD *)(a1 + 516))
  {
    return 0;
  }
  else
  {
    _xzm_segment_table_freed_at(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 80), a2, 1);
    os_unfair_lock_lock_with_options(v7 + 56, 327680);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 464);
    if (*(unsigned __int16 *)(a1 + 514) == *(unsigned __int16 *)(a1 + 512))
    {
      for (i = *(_QWORD **)(a1 + 464); ; i = v5)
      {
        v3 = 0;
        if (i)
        {
          v5 = (_QWORD *)i[3];
          v3 = 1;
        }
        if ((v3 & 1) == 0 || (xzm_reclaim_is_available(v4, i[9]) & 1) != 0)
          break;
        _xzm_segment_group_cache_invalidate(a1, i);
      }
    }
    while (*(unsigned __int16 *)(v7 + 50) == *(unsigned __int16 *)(v7 + 48))
      _xzm_segment_group_cache_evict(a1);
    _xzm_segment_group_cache_mark_free(a1, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 56));
    return 1;
  }
}

void _xzm_segment_group_segment_deallocate(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    _xzm_segment_table_freed_at(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 80), a2, 1);
  xzm_range_group_free_segment_body(*(_BYTE **)(a1 + 16), *(_QWORD *)(a2 + 80), (unint64_t)*(unsigned int *)(a2 + 12) << 14);
  xzm_metapool_free(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 400), (void *)a2);
}

uint64_t _xzm_segment_table_freed_at(uint64_t result, unint64_t a2, unint64_t a3, char a4)
{
  int v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;

  v7 = a2;
  v4 = *(_DWORD *)(a3 + 12) - 1;
  v17 = a3;
  v16 = v4;
  v19 = a3;
  v18 = v4 + 1;
  v6 = *(_QWORD *)(a3 + 80) + ((unint64_t)(v4 + 1) << 14);
  v5 = 1;
  if ((a4 & 1) != 0)
    v5 = *(_QWORD *)(a3 + 80) == a2;
  if (!v5)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!full_segment || _xzm_segment_start(metadata) == data\" "
                           "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:101)";
    __break(1u);
    JUMPOUT(0xFF44);
  }
  while (v7 < v6)
  {
    v10 = v7;
    v9 = result;
    v8 = 0;
    v23 = v7;
    v22 = &v8;
    v21 = v7;
    if (v7 >> 36)
    {
      *v22 = 0;
      v24 = 0x4000;
    }
    else
    {
      v20 = v21 >> 22;
      *v22 = 0;
      if (v20 >= 0x4000)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Libr"
                               "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
        __break(1u);
        JUMPOUT(0x10020);
      }
      v24 = v20;
    }
    if (v24 < 0x4000)
      v11 = (_DWORD *)(*(_QWORD *)(v9 + 408) + 4 * v24);
    else
      v11 = 0;
    if (!v11)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"entry != NULL\" failed (/Library/Caches/com.apple.xbs/"
                             "Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:105)";
      __break(1u);
      JUMPOUT(0x100B4);
    }
    v14 = a3;
    if ((a3 & 0x3FFF) != 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)segment % XZM_METAPOOL_SEGMENT_ALIGN == 0\""
                             " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone"
                             "_inline_internal.h:186)";
      __break(1u);
      JUMPOUT(0x100F4);
    }
    if (v14 >> 14 >= 0xFFFFFFFF)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"((uintptr_t)segment >> XZM_METAPOOL_SEGMENT_BLOCK_SHIF"
                             "T) < UINT32_MAX\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzo"
                             "ne/../xzone/xzone_inline_internal.h:190)";
      __break(1u);
      JUMPOUT(0x10130);
    }
    v15 = v14 >> 14;
    if (v15 != *v11)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_to_segment_table_entry(metadata).xste_val"
                             " == entry->xste_val\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src"
                             "/xzone/xzone_segment.c:107)";
      __break(1u);
      JUMPOUT(0x10184);
    }
    v12 = 0;
    v13 = 0;
    *v11 = 0;
    v7 += 0x400000;
  }
  return result;
}

uint64_t _xzm_segment_group_cache_evict(uint64_t a1)
{
  uint64_t result;
  unint64_t v2;

  os_unfair_lock_assert_owner((os_unfair_lock_t)(a1 + 520));
  v2 = **(_QWORD **)(*(_QWORD *)(a1 + 472) + 8);
  if (*(_QWORD *)(v2 + 72) == -1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_reclaim_id != VM_RECLAIM_INDEX_NULL\" faile"
                           "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:972)";
    __break(1u);
    JUMPOUT(0x102E0);
  }
  result = _xzm_segment_group_cache_mark_used(a1, v2);
  if ((_DWORD)result)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 520));
    _xzm_segment_group_segment_deallocate(a1, v2, 0);
    return os_unfair_lock_lock_with_options(a1 + 520, 327680);
  }
  return result;
}

uint64_t *_xzm_segment_group_cache_mark_free(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  os_unfair_lock_assert_owner((os_unfair_lock_t)(a1 + 520));
  v2 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a2 + 80);
  v7 = v2;
  v6 = 0;
  v13 = v8;
  v12 = &v6;
  v11 = v8;
  if (v8 >> 36)
  {
    *v12 = 0;
    v14 = 0x4000;
  }
  else
  {
    v10 = v11 >> 22;
    *v12 = 0;
    if (v10 >= 0x4000)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x10448);
    }
    v14 = v10;
  }
  if (v14 >= 0x4000)
    v9 = 0;
  else
    v9 = (_DWORD *)(*(_QWORD *)(v7 + 408) + 4 * v14);
  if (*v9)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"entry->xste_val == 0\" failed (/Library/Caches/com.apple"
                           ".xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:929)";
    __break(1u);
    JUMPOUT(0x104CCLL);
  }
  if (*(_QWORD *)(a2 + 72) != -1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_reclaim_id == VM_RECLAIM_INDEX_NULL\" faile"
                           "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:931)";
    __break(1u);
    JUMPOUT(0x10504);
  }
  *(_QWORD *)(a2 + 72) = xzm_reclaim_mark_free(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 464), *(_QWORD *)(a2 + 80), (unint64_t)*(unsigned int *)(a2 + 12) << 14, 0);
  return __xzm_segment_cache_insert((uint64_t *)(a1 + 464), a2);
}

uint64_t *__xzm_segment_cache_insert(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  if (*((unsigned __int16 *)result + 25) >= (int)*((unsigned __int16 *)result + 24))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"cache->xzsc_count < cache->xzsc_max_count\" failed (/Lib"
                           "rary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:900)";
    __break(1u);
    JUMPOUT(0x10604);
  }
  v2 = *result;
  *(_QWORD *)(a2 + 24) = *result;
  if (v2)
    *(_QWORD *)(*result + 32) = a2 + 24;
  else
    result[1] = a2 + 24;
  *result = a2;
  *(_QWORD *)(a2 + 32) = result;
  *((_DWORD *)result + 10) = *((_DWORD *)result + 6);
  result[4] = result[2];
  *((_DWORD *)result + 6) = 901;
  result[2] = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c";
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 48) = 901;
  *(_QWORD *)(a2 + 40) = "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c";
  ++*((_WORD *)result + 25);
  return result;
}

void xzm_range_group_free_segment_body(_BYTE *a1, mach_vm_address_t a2, mach_vm_size_t a3)
{
  if (*a1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"rg->xzrg_id == XZM_RANGE_GROUP_DATA\" failed (/Library/C"
                           "aches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:495)";
    __break(1u);
    JUMPOUT(0x10748);
  }
  mvm_deallocate_plat(a2, a3, 64);
}

uint64_t *_xzm_segment_group_assert_correct_span_queue(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  BOOL v3;
  uint64_t i;
  unsigned int v5;
  char v6;

  v6 = *(_BYTE *)(a2 + 32) & 0xF;
  v3 = 1;
  if (v6 != 1)
    v3 = v6 == 3;
  if (!v3)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_free_span(kind)\" failed (/Library/Ca"
                           "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1034)";
    __break(1u);
    JUMPOUT(0x1080CLL);
  }
  if (v6 == 1)
    v5 = 1;
  else
    v5 = *(_DWORD *)(a2 + 40);
  result = (uint64_t *)xzm_span_queue_for (a1, v5);
  for (i = *result; ; i = *(_QWORD *)(i + 16))
  {
    if (!i)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Didn't find free span in expected span queue";
      __break(1u);
      JUMPOUT(0x108D0);
    }
    if (i == a2)
      break;
  }
  return result;
}

uint64_t _xzm_segment_group_segment_span_free(os_unfair_lock_s *a1, uint64_t a2, unsigned int a3, unsigned int a4, char a5)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  int64_t v11;

  if (!a4)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count != 0\" failed (/Library/Caches/com.apple.xbs"
                           "/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1279)";
    __break(1u);
    JUMPOUT(0x1092CLL);
  }
  if (a3 >= *(_DWORD *)(a2 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_index < segment->xzs_slice_entry_count\" failed (/"
                           "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1280)";
    __break(1u);
    JUMPOUT(0x10968);
  }
  result = a3;
  v7 = a2 + 48 * a3 + 2136;
  *(_BYTE *)(a2 + 48 * a3 + 2168) = *(_BYTE *)(a2 + 48 * a3 + 2168) & 0xEF | (16 * (a5 & 1));
  if (a4 == 1)
  {
    if (*(_BYTE *)(a2 + 20) == 1)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_kind != XZM_SEGMENT_KIND_HUGE\" failed (/"
                             "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1296)";
      __break(1u);
      JUMPOUT(0x109FCLL);
    }
    *(_BYTE *)(a2 + 48 * a3 + 2168) = *(_BYTE *)(a2 + 48 * a3 + 2168) & 0xF0 | 1;
  }
  else
  {
    *(_BYTE *)(a2 + 48 * a3 + 2168) = *(_BYTE *)(a2 + 48 * a3 + 2168) & 0xF0 | 3;
    *(_DWORD *)(a2 + 48 * a3 + 2176) = a4;
    if (a3 + a4 - 1 >= *(_DWORD *)(a2 + 16))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_index + slice_count - 1 < segment->xzs_slice_ent"
                             "ry_count\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzon"
                             "e_segment.c:1302)";
      __break(1u);
      JUMPOUT(0x10A7CLL);
    }
    *(_BYTE *)(a2 + 48 * (a3 + a4 - 1) + 2168) = *(_BYTE *)(a2 + 48 * (a3 + a4 - 1) + 2168) & 0xF0 | 4;
    *(_DWORD *)(a2 + 48 * (a3 + a4 - 1) + 2172) = 48 * a4 - 48;
  }
  if (!*(_BYTE *)(a2 + 20))
  {
    os_unfair_lock_assert_owner(a1 + 1);
    result = xzm_span_queue_for ((uint64_t)a1, a4);
    v6 = *(_QWORD *)result;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)result;
    if (v6)
      *(_QWORD *)(*(_QWORD *)result + 24) = v7 + 16;
    *(_QWORD *)result = v7;
    *(_QWORD *)(v7 + 24) = result;
  }
  if (v7 < a2 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x10BD0);
  }
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - a2 - 2136) >> 4);
  if (v11 >= *(unsigned int *)(a2 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x10C38);
  }
  *(_QWORD *)(a2 + 88 + 8 * v11) = -1;
  return result;
}

_BYTE *malloc_common_strstr(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  while (*a1)
  {
    if (!_platform_strncmp(a1, a2, a3))
      return a1;
    ++a1;
  }
  return 0;
}

uint64_t malloc_common_convert_to_long(char *a1, _QWORD *a2)
{
  char v3;
  uint64_t v4;

  v4 = 0;
  while (*a1)
  {
    v3 = *a1;
    if (*a1 < 48 || v3 > 57)
      break;
    v4 = 10 * v4 + v3 - 48;
    ++a1;
  }
  *a2 = a1;
  return v4;
}

_BYTE *malloc_common_value_for_key(_BYTE *a1, uint64_t a2)
{
  unint64_t i;
  unint64_t v4;

  v4 = _platform_strlen(a2);
  while (1)
  {
    a1 = malloc_common_strstr(a1, a2, v4);
    if (!a1)
      break;
    for (i = 0; i < v4; ++i)
      ++a1;
    if (*a1 == 61)
      return a1 + 1;
  }
  return 0;
}

_BYTE *malloc_common_value_for_key_copy(_BYTE *a1, uint64_t a2, _BYTE *a3, unint64_t a4)
{
  char *v4;
  char v6;
  _BYTE *i;
  unint64_t v8;
  char *v9;

  v9 = malloc_common_value_for_key(a1, a2);
  if (!v9)
    return 0;
  v8 = a4;
  for (i = a3; v8 > 1; ++i)
  {
    v4 = v9++;
    v6 = *v4;
    if (!*v4 || v6 == 32 || v6 == 9 || v6 == 10)
      break;
    *i = v6;
    --v8;
  }
  *i = 0;
  return a3;
}

uint64_t malloc_zone_batch_malloc_fallback(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  unsigned int i;

  for (i = 0; i < a4; ++i)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, a2);
    if (!v5)
      break;
    *(_QWORD *)(a3 + 8 * i) = v5;
  }
  return i;
}

uint64_t malloc_zone_batch_free_fallback(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int i;
  uint64_t v7;

  v7 = result;
  for (i = 1; i <= a3; ++i)
  {
    v3 = *(_QWORD *)(a2 + 8 * (a3 - i));
    if (v3)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 48))(v7, v3);
  }
  return result;
}

uint64_t malloc_zone_pressure_relief_fallback()
{
  return 0;
}

BOOL _malloc_is_platform_binary()
{
  uint64_t v0;
  int v2;

  v2 = 0;
  v0 = getpid();
  return !csops(v0, 0, &v2, 4) && (v2 & 0x4000000) != 0;
}

BOOL _malloc_allow_internal_security_policy()
{
  return MEMORY[0xFFFFF4084] != 0;
}

_QWORD *create_purgeable_zone(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int32_t v11;
  unint64_t v12;
  _QWORD *pages;

  pages = (_QWORD *)mvm_allocate_pages((vm_page_size + 20479) & ~(vm_page_size - 1), 0, 0x40000000, 1);
  if (!pages)
    return 0;
  v12 = MEMORY[0xFFFFFC038];
  rack_init((uint64_t)(pages + 2064), 1, 0, a3 | 0x80);
  rack_init((uint64_t)(pages + 2160), 2, 0, a3 | 0x80);
  if ((large_cache_enabled & 1) != 0)
  {
    pages[2553] = v12 >> 10;
    v11 = NSVersionOfLinkTimeLibrary("System");
    *((_DWORD *)pages + 5102) = v11 != -1 && v11 >> 16 < 112;
  }
  *((_DWORD *)pages + 26) = 11;
  pages[2] = purgeable_size;
  pages[3] = purgeable_malloc;
  pages[4] = purgeable_calloc;
  pages[5] = purgeable_valloc;
  pages[6] = purgeable_free;
  pages[7] = purgeable_realloc;
  pages[8] = purgeable_destroy;
  pages[10] = purgeable_batch_malloc;
  pages[11] = purgeable_batch_free;
  pages[12] = purgeable_introspect;
  pages[14] = purgeable_memalign;
  pages[15] = purgeable_free_definite_size;
  pages[16] = purgeable_pressure_relief;
  pages[17] = purgeable_claimed_address;
  *pages = 0;
  pages[1] = 0;
  mprotect(pages, 0xC8uLL, 1);
  *((_DWORD *)pages + 4098) = a3 | 0x80;
  if ((pages[2049] & 7) != 0)
  {
    if ((pages[2049] & 4) == 0)
      malloc_report(6, (uint64_t)"purgeable zone does not support guard pages\n", v3, v4, v5, v6, v7, v8, v10);
    *((_DWORD *)pages + 4098) &= 0xFFFFFFF8;
  }
  *((_DWORD *)pages + 4704) = 0;
  pages[2557] = a2;
  return pages;
}

uint64_t purgeable_size(os_unfair_lock_s *a1, unint64_t a2)
{
  return szone_size_try_large(a1, a2);
}

unint64_t purgeable_malloc(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x3C00)
    return szone_malloc((os_unfair_lock_s *)a1, a2);
  else
    return szone_malloc(*(os_unfair_lock_s **)(a1 + 20456), a2);
}

unint64_t purgeable_calloc(os_unfair_lock_s *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4[3];
  os_unfair_lock_s *v5;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  BOOL v13;

  v5 = a1;
  v4[2] = a2;
  v4[1] = a3;
  v4[0] = 0;
  v11 = a2;
  v10 = a3;
  v9 = 0;
  v8 = v4;
  v7 = a3;
  if (a2 == 1
    || (v7 = v11 * v10, v13 = (v11 * (unsigned __int128)v10) >> 64 != 0, is_mul_ok(v11, v10))
    && v7 <= malloc_absolute_max_size)
  {
    *v8 = v7;
    v12 = 0;
  }
  else
  {
    malloc_set_errno_fast(1, 12);
    v12 = -1;
  }
  if (v12)
    return 0;
  if (v4[0] > 0x3C00)
    return szone_calloc(v5, 1uLL, v4[0]);
  return szone_calloc(*(os_unfair_lock_s **)&v5[5114]._os_unfair_lock_opaque, 1uLL, v4[0]);
}

uint64_t purgeable_valloc(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x3C00)
    return szone_valloc((os_unfair_lock_s *)a1, a2);
  else
    return szone_valloc(*(os_unfair_lock_s **)(a1 + 20456), a2);
}

void purgeable_free(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  os_unfair_lock_lock_with_options(a1 + 18816, 327680);
  v8 = large_entry_for_pointer_no_lock(a1, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 18816));
  if (v8)
    free_large((_DWORD *)a1, a2, 0);
  else
    szone_free(*(_DWORD **)(a1 + 20456), a2, v2, v3, v4, v5, v6, v7);
}

uint64_t purgeable_realloc(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  if (!a2)
    return purgeable_malloc(a1, a3);
  if (a3)
  {
    v27 = purgeable_size((os_unfair_lock_s *)a1, a2);
    if (!v27)
      v27 = szone_size(*(os_unfair_lock_s **)(a1 + 20456), a2);
    if (v27)
    {
      if (v27 > 0x3C00)
      {
        if (a3 > 0x3C00)
        {
          v24 = purgeable_malloc(a1, a3);
          if (v24)
          {
            if (v27 >= a3)
              _platform_memmove(v24, a2, a3);
            else
              _platform_memmove(v24, a2, v27);
            purgeable_free_definite_size(a1, a2, v27, v18, v19, v20, v21, v22);
          }
          return v24;
        }
        else
        {
          v25 = szone_malloc(*(os_unfair_lock_s **)(a1 + 20456), a3);
          if (v25)
          {
            _platform_memmove(v25, a2, a3);
            purgeable_free_definite_size(a1, a2, v27, v13, v14, v15, v16, v17);
          }
          return v25;
        }
      }
      else if (a3 > 0x3C00)
      {
        v26 = purgeable_malloc(a1, a3);
        if (v26)
        {
          _platform_memmove(v26, a2, v27);
          szone_free_definite_size(*(_DWORD **)(a1 + 20456), a2, v27, v8, v9, v10, v11, v12);
        }
        return v26;
      }
      else
      {
        return szone_realloc(*(os_unfair_lock_s **)(a1 + 20456), a2, a3, v3, v4, v5, v6, v7);
      }
    }
    else
    {
      malloc_zone_error(*(_DWORD *)(a1 + 16392), 1, (uint64_t)"pointer %p being reallocated was not allocated\n", v3, v4, v5, v6, v7, a2);
      return 0;
    }
  }
  else
  {
    purgeable_free(a1, a2);
    return purgeable_malloc(a1, 1uLL);
  }
}

void purgeable_destroy(mach_vm_address_t a1)
{
  mach_vm_address_t v2;
  mach_vm_size_t v3;
  mach_vm_address_t *v4;
  uint64_t v5;
  mach_vm_address_t v6;

  v6 = a1;
  v5 = 0;
  v5 = *(unsigned int *)(a1 + 18824);
  v4 = 0;
  v2 = 0;
  v3 = 0;
  while (v5--)
  {
    v4 = (mach_vm_address_t *)(*(_QWORD *)(v6 + 18832) + 24 * v5);
    if (*v4)
      mvm_deallocate_pages(*v4, v4[1], *(_DWORD *)(v6 + 16392));
  }
  large_entries_free_no_lock(v6, *(_QWORD *)(v6 + 18832), *(_DWORD *)(v6 + 18824), &v2);
  if (v3)
    mvm_deallocate_pages(v2, v3, 0);
  mvm_deallocate_pages(v6, (vm_page_size + 20479) & ~(vm_page_size - 1), 0);
}

uint64_t purgeable_batch_malloc(uint64_t a1, unint64_t a2, uint64_t *a3, unsigned int a4)
{
  return szone_batch_malloc(*(_QWORD *)(a1 + 20456), a2, a3, a4);
}

void purgeable_batch_free(uint64_t a1, uint64_t a2, unsigned int a3)
{
  szone_batch_free(*(_DWORD **)(a1 + 20456), a2, a3);
}

uint64_t purgeable_memalign(uint64_t a1, vm_size_t a2, unint64_t a3)
{
  if (a3 > 0x3C00)
    return szone_memalign((os_unfair_lock_s *)a1, a2, a3);
  else
    return szone_memalign(*(os_unfair_lock_s **)(a1 + 20456), a2, a3);
}

void purgeable_free_definite_size(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 > 0x3C00)
    szone_free_definite_size((_DWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
  else
    szone_free_definite_size(*(_DWORD **)(a1 + 20456), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t purgeable_pressure_relief(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = szone_pressure_relief(a1, a2);
  return v3 + szone_pressure_relief(*(_QWORD *)(a1 + 20456), a2);
}

BOOL purgeable_claimed_address(uint64_t a1, unint64_t a2)
{
  return szone_claimed_address(*(os_unfair_lock_s **)(a1 + 20456), a2);
}

uint64_t malloc_set_errno_fast(uint64_t result, int a2)
{
  if ((result & 1) != 0)
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = a2;
  return result;
}

uint64_t purgeable_ptr_in_use_enumerator(unsigned int a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t *a4), void (*a6)(_QWORD, uint64_t, uint64_t, __int128 *, uint64_t))
{
  unsigned int v7;
  uint64_t v8;
  void (*v9)(_QWORD, uint64_t, uint64_t, __int128 *, uint64_t);
  uint64_t (*v10)(unsigned int, uint64_t, uint64_t, uint64_t *);
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;

  v14 = a1;
  v13 = a2;
  v12 = a3;
  v11 = a4;
  v10 = a5;
  v9 = a6;
  v8 = 0;
  v10 = reader_or_in_memory_fallback((uint64_t)a5, a1);
  v7 = v10(v14, v11, 20480, &v8);
  if (v7)
    return v7;
  else
    return large_in_use_enumerator(v14, v13, v12, *(_QWORD *)(v8 + 18832), *(_DWORD *)(v8 + 18824), (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v10, v9);
}

uint64_t purgeable_good_size(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x3C00)
    return szone_good_size(a1, a2);
  else
    return szone_good_size(*(_QWORD *)(a1 + 20456), a2);
}

uint64_t purgeable_check()
{
  return 1;
}

uint64_t purgeable_print_self(uint64_t a1, int a2)
{
  int v2;

  if (a2)
    v2 = 2;
  else
    v2 = 0;
  return purgeable_print(mach_task_self_, v2, a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))_malloc_default_reader, (uint64_t (*)(const char *, ...))malloc_report_simple);
}

uint64_t purgeable_log(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16400) = a2;
  return result;
}

uint64_t purgeable_force_lock(uint64_t a1)
{
  return os_unfair_lock_lock_with_options(a1 + 18816, 327680);
}

void purgeable_force_unlock(os_unfair_lock_s *a1)
{
  os_unfair_lock_unlock(a1 + 4704);
}

uint64_t purgeable_statistics(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = *(_DWORD *)(result + 18820);
  v2 = *(_QWORD *)(result + 18840);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 16) = v2;
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

uint64_t purgeable_locked(os_unfair_lock_s *a1)
{
  if (os_unfair_lock_trylock(a1 + 4704))
  {
    os_unfair_lock_unlock(a1 + 4704);
    return 0;
  }
  else
  {
    return 1;
  }
}

uint64_t purgeable_reinit_lock(uint64_t result)
{
  *(_DWORD *)(result + 18816) = 0;
  return result;
}

uint64_t purgeable_print_task(unsigned int a1, int a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t (*a5)(const char *, ...))
{
  return purgeable_print(a1, a2, a3, a4, a5);
}

uint64_t (*reader_or_in_memory_fallback(uint64_t a1, unsigned int a2))(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v3;

  if (a1)
    return (uint64_t (*)(unsigned int, uint64_t, uint64_t, _QWORD *))a1;
  v3 = 1;
  if (a2)
    v3 = mach_task_is_self(a2) != 0;
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x122D4);
  }
  return _malloc_default_reader;
}

uint64_t _malloc_default_reader(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v5;

  v5 = 1;
  if (a1)
    v5 = mach_task_is_self(a1) != 0;
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x12374);
  }
  *a4 = a2;
  return 0;
}

uint64_t purgeable_print(unsigned int a1, int a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t (*a5)(const char *, ...))
{
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(const char *, ...);
  uint64_t (*v8)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v9;
  int v10;
  unsigned int v11;

  v11 = a1;
  v10 = a2;
  v9 = a3;
  v8 = a4;
  v7 = a5;
  v6 = 0;
  result = a4(a1, a3, 20480, &v6);
  if ((_DWORD)result)
    return v7("Purgeable zone %p: inUse=%u(%y) flags=%d\n", v9, *(unsigned int *)(v6 + 18820), *(_QWORD *)(v6 + 18840), *(unsigned int *)(v6 + 16392));
  return result;
}

uint64_t sanitizer_diagnose_fault_from_crash_reporter(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4, uint64_t (*a5)(_QWORD, unint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v41;
  int v42;
  _QWORD *v43;
  unsigned int i;
  void *v45;
  void *v46;
  unint64_t *v47;

  os_unfair_lock_lock_with_options(&crash_reporter_lock, 327680);
  v47 = (unint64_t *)a5(a3, a4, 16680);
  v46 = (void *)a5(a3, v47[31], 0x1000000);
  v45 = (void *)a5(a3, v47[30], 37748744);
  qword_A6080 = 0;
  qword_A6088 = 0;
  enumeration_context = a1;
  g_crm_reader = a5;
  num_read_memory = 0;
  szone_ptr_in_use_enumerator(a3, 0, 1, v47[25], memory_reader_adapter, (void (*)(_QWORD, uint64_t, uint64_t, __int128 *, uint64_t))pointer_recorder);
  for (i = 0; i < num_read_memory; ++i)
    _free((void *)read_memory[i], v5, v6, v7, v8, v9, v10, v11);
  g_crm_reader = 0;
  _platform_memset(a2, 0, 1096);
  *(_QWORD *)a2 = a1;
  if (qword_A6080)
  {
    *(_QWORD *)(a2 + 8) = qword_A6080;
    *(_QWORD *)(a2 + 16) = qword_A6088;
    v43 = (_QWORD *)a5(a3, qword_A6080, 16);
    v42 = v43[1];
    v41 = HIDWORD(v43[1]);
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 40) = stacktrace_depo_find((uint64_t)v45, v42, a2 + 48, 0x40uLL);
    *(_QWORD *)(a2 + 560) = 0;
    *(_DWORD *)(a2 + 576) = stacktrace_depo_find((uint64_t)v45, v41, a2 + 584, 0x40uLL);
    _free(v43, v19, v20, v21, v22, v23, v24, v25);
  }
  _free(v45, v12, v13, v14, v15, v16, v17, v18);
  _free(v46, v26, v27, v28, v29, v30, v31, v32);
  _free(v47, v33, v34, v35, v36, v37, v38, v39);
  os_unfair_lock_unlock((os_unfair_lock_t)&crash_reporter_lock);
  return 0;
}

uint64_t memory_reader_adapter(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;

  if (num_read_memory >= 0x400)
  {
    __break(1u);
    JUMPOUT(0x12734);
  }
  v4 = g_crm_reader(a1, a2, a3);
  *a4 = v4;
  v5 = num_read_memory++;
  read_memory[v5] = v4;
  if (v4)
    return 0;
  else
    return 5;
}

__n128 pointer_recorder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  __n128 result;
  unsigned int i;

  for (i = 0; i < a5; ++i)
  {
    if (*(_QWORD *)(a4 + 16 * (int)i) <= (unint64_t)enumeration_context
      && (unint64_t)enumeration_context < *(_QWORD *)(a4 + 16 * (int)i) + *(_QWORD *)(a4 + 16 * (int)i + 8))
    {
      result = *(__n128 *)(a4 + 16 * (int)i);
      *(__n128 *)&qword_A6080 = result;
      return result;
    }
  }
  return result;
}

unint64_t stacktrace_depo_find(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  int v6;
  int i;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v16 = a1;
  v15 = a2;
  v14 = a3;
  v13 = a4;
  v11 = 0x80000;
  v12 = a2 & 0x7FFFF;
  v10 = 0;
  v10 = *(_QWORD *)(a1 + 8 * (a2 & 0x7FFFF));
  if ((_DWORD)v10 != a2)
    return 0;
  v9 = 0x400000;
  if ((HIDWORD(v10) & 0xFFFFFFu) > 0x400000uLL)
    return 0;
  v8 = murmur2_init();
  for (i = 0; i < SHIBYTE(HIDWORD(v10)); ++i)
  {
    if (i < v13)
      *(_QWORD *)(v14 + 8 * i) = *(_QWORD *)(v16 + 0x400000 + 8 * (((HIDWORD(v10) & 0xFFFFFF) + i) & 0x3FFFFF));
    murmur2_add_uintptr(&v8, *(_QWORD *)(v14 + 8 * i));
  }
  v6 = v15;
  if (v6 != murmur2_finalize(&v8))
    return 0;
  if (v13 >= HIBYTE(HIDWORD(v10)))
    return HIBYTE(HIDWORD(v10));
  else
    return v13;
}

BOOL sanitizer_should_enable()
{
  BOOL v1;

  v1 = 1;
  if (!env_BOOL((uint64_t)"MallocSanitizerZone"))
    return env_BOOL((uint64_t)"MallocQuarantineZone");
  return v1;
}

BOOL env_BOOL(uint64_t a1)
{
  _BYTE *v2;

  v2 = (_BYTE *)env_var(a1);
  return v2 && *v2 == 49;
}

uint64_t sanitizer_reset_environment()
{
  unsetenv("MallocSanitizerZone");
  return unsetenv("MallocQuarantineZone");
}

void *sanitizer_create_zone(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__dst;

  __dst = (void *)sanitizer_vm_map(16680, 3, 1);
  memcpy(__dst, &malloc_zone_template, 0xC8uLL);
  if (*(uint64_t (***)())(a1 + 96) != szone_introspect)
  {
    __break(1u);
    JUMPOUT(0x12BDCLL);
  }
  *((_QWORD *)__dst + 25) = a1;
  if (*(_DWORD *)(a1 + 104) < 0xDu)
    malloc_report(64, (uint64_t)"Unsupported wrapped zone version: %u\n", v1, v2, v3, v4, v5, v6, *(unsigned int *)(a1 + 104));
  *((_BYTE *)__dst + 208) = env_BOOL((uint64_t)"MallocSanitizerZoneDebug");
  *((_BYTE *)__dst + 209) = !env_BOOL((uint64_t)"MallocSanitizerNoPoisoning");
  *((_QWORD *)__dst + 27) = env_uint((uint64_t)"MallocSanitizerRedzoneSize", 0x10u);
  if (*((_QWORD *)__dst + 27) % 8uLL)
  {
    __break(1u);
    JUMPOUT(0x12CC0);
  }
  *((_QWORD *)__dst + 28) = env_uint((uint64_t)"MallocQuarantineMaxItems", 0);
  *((_QWORD *)__dst + 29) = (unint64_t)env_uint((uint64_t)"MallocQuarantineMaxSizeInMB", 0x100u) << 20;
  *((_QWORD *)__dst + 30) = stacktrace_depo_create();
  *((_QWORD *)__dst + 31) = pointer_map_create();
  init_lock((uint64_t)__dst);
  sanitizer_vm_protect((mach_vm_address_t)__dst, 0x4000, 1);
  return __dst;
}

mach_vm_address_t sanitizer_vm_map(uint64_t a1, vm_prot_t cur_protection, int a3)
{
  mach_vm_address_t address;
  mach_port_t v5;
  int v6;
  vm_prot_t v7;
  uint64_t v8;

  v8 = a1;
  v7 = cur_protection;
  v6 = a3;
  v5 = mach_task_self_;
  address = 0;
  if (mach_vm_map(mach_task_self_, &address, (a1 + vm_page_size - 1) & ~(vm_page_size - 1), 0, (a3 << 24) | 1, 0, 0, 0, cur_protection, 3, 1u))
  {
    __break(1u);
    JUMPOUT(0x12E64);
  }
  return address;
}

uint64_t env_uint(uint64_t a1, unsigned int a2)
{
  char *__str;

  __str = (char *)env_var(a1);
  if (__str)
    return strtoul(__str, 0, 0);
  else
    return a2;
}

uint64_t init_lock(uint64_t result)
{
  *(_DWORD *)(result + 16640) = 0;
  return result;
}

uint64_t sanitizer_vm_protect(mach_vm_address_t a1, uint64_t a2, vm_prot_t a3)
{
  uint64_t result;

  result = mach_vm_protect(mach_task_self_, a1, (a2 + vm_page_size - 1) & ~(vm_page_size - 1), 0, a3);
  if ((_DWORD)result)
  {
    __break(1u);
    JUMPOUT(0x12FCCLL);
  }
  return result;
}

_DWORD *murmur2_add_uintptr(_DWORD *a1, uint64_t a2)
{
  int v3;

  v3 = HIDWORD(a2);
  murmur2_add_uint32(a1, a2);
  return murmur2_add_uint32(a1, v3);
}

uint64_t murmur2_finalize(_DWORD *a1)
{
  unsigned int v2;

  v2 = 1540483477 * (*a1 ^ (*a1 >> 13));
  return v2 ^ (v2 >> 15);
}

uint64_t murmur2_init()
{
  return 3820918481;
}

_DWORD *murmur2_add_uint32(_DWORD *result, int a2)
{
  *result *= 1540483477;
  *result ^= 1540483477 * ((1540483477 * a2) ^ ((1540483477 * a2) >> 24));
  return result;
}

uint64_t env_var(uint64_t a1)
{
  char **v2;

  v2 = *_NSGetEnviron();
  return _simple_getenv(v2, a1);
}

unint64_t sanitizer_size(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t redzone_size;
  unint64_t v16;

  v16 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 200) + 16))(*(_QWORD *)(a1 + 200), a2);
  if (!v16)
    return 0;
  if ((*(_BYTE *)(a1 + 209) & 1) != 0)
  {
    redzone_size = get_redzone_size(a1, a2, v16);
    if ((*(_BYTE *)(a1 + 208) & 1) != 0)
      malloc_report(6, (uint64_t)"size(%p) = 0x%lx - redzone 0x%lx\n", v8, v9, v10, v11, v12, v13, a2);
    if (v16 <= redzone_size)
    {
      __break(1u);
      JUMPOUT(0x13208);
    }
    v16 -= redzone_size;
  }
  else if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    malloc_report(6, (uint64_t)"size(%p) = 0x%lx\n", v2, v3, v4, v5, v6, v7, a2);
  }
  return v16;
}

uint64_t sanitizer_malloc(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[18];
  _QWORD v15[3];
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v26;
  vm_size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;

  v24 = a1;
  v23 = a2;
  if (!a2)
    v23 = 1;
  v22 = 0;
  v22 = *(_QWORD *)(v24 + 216);
  v21 = v23;
  if ((*(_BYTE *)(v24 + 209) & 1) != 0 && (v20 = 7, v22 += (8 - (v21 & 7)) & 7, v23 = v21 + v22, v21 + v22 < v21))
  {
    malloc_set_errno_fast(1, 12);
    return 0;
  }
  else
  {
    v19 = 0;
    v19 = (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)(v24 + 200) + 24))(*(_QWORD *)(v24 + 200), v23);
    v8 = *(_QWORD *)(v24 + 248);
    v30 = *(_QWORD *)(v24 + 240);
    v29 = v8;
    v28 = v19;
    v27 = v21;
    if (v19 && v27 < vm_page_size)
    {
      v26 = 0;
      v15[2] = v15;
      v38 = v30;
      v37 = 1;
      v16 = 17;
      v36 = v15;
      v17 = v14;
      v35 = 17;
      bzero(v14, 0x88uLL);
      v34 = 0;
      v33 = v16;
      thread_stack_pcs(v17, v16, &v34);
      if (v34 > v37)
      {
        v31 = v34 - (unint64_t)v37;
        v39 = stacktrace_depo_insert(v38, (uint64_t)&v17[v37], v31);
      }
      else
      {
        v39 = 0;
      }
      v32 = 1;
      v26 = v39;
      pointer_map_insert(v29, v28, v39);
    }
    if ((*(_BYTE *)(v24 + 208) & 1) != 0)
    {
      v14[17] = v19;
      malloc_report(6, (uint64_t)"malloc(0x%lx) = %p\n", v2, v3, v4, v5, v6, v7, v23);
    }
    if (v19 && (*(_BYTE *)(v24 + 209) & 1) != 0)
    {
      v18 = 0;
      v18 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v24 + 200) + 16))(*(_QWORD *)(v24 + 200), v19);
      if (v18 < v23)
      {
        __break(1u);
        JUMPOUT(0x135B0);
      }
      v22 += v18 - v23;
      poison_alloc(v24, v19, v21, v22, v9, v10, v11, v12);
    }
    return v19;
  }
}

uint64_t sanitizer_calloc(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[18];
  _QWORD v16[3];
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;
  vm_size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  BOOL v47;

  v25 = a1;
  v24 = a2;
  v23 = a3;
  v22 = 0;
  if (a3 && v24)
  {
    v45 = v24;
    v44 = v23;
    v43 = 0;
    v42 = &v22;
    v41 = v23;
    if (v24 == 1
      || (v41 = v45 * v44, v47 = (v45 * (unsigned __int128)v44) >> 64 != 0, is_mul_ok(v45, v44))
      && v41 <= malloc_absolute_max_size)
    {
      *v42 = v41;
      v46 = 0;
    }
    else
    {
      malloc_set_errno_fast(1, 12);
      v46 = -1;
    }
    if (v46)
      goto LABEL_10;
  }
  else
  {
    v22 = 1;
  }
  v21 = 0;
  v21 = *(_QWORD *)(v25 + 216);
  if ((*(_BYTE *)(v25 + 209) & 1) != 0)
  {
    v21 += 8 - (v22 & 7);
    v24 = 1;
    v23 = v22 + v21;
    if (v22 + v21 < v22)
    {
LABEL_10:
      malloc_set_errno_fast(1, 12);
      return 0;
    }
  }
  v20 = 0;
  v20 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)(v25 + 200) + 32))(*(_QWORD *)(v25 + 200), v24, v23);
  if ((*(_BYTE *)(v25 + 208) & 1) != 0)
  {
    v15[15] = v23;
    v15[16] = v20;
    malloc_report(6, (uint64_t)"calloc(0x%lx, 0x%lx) = %p\n", v3, v4, v5, v6, v7, v8, v24);
  }
  v9 = *(_QWORD *)(v25 + 248);
  v31 = *(_QWORD *)(v25 + 240);
  v30 = v9;
  v29 = v20;
  v28 = v22;
  if (v20 && v28 < vm_page_size)
  {
    v27 = 0;
    v16[2] = v16;
    v39 = v31;
    v38 = 1;
    v17 = 17;
    v37 = v16;
    v18 = v15;
    v36 = 17;
    bzero(v15, 0x88uLL);
    v35 = 0;
    v34 = v17;
    thread_stack_pcs(v18, v17, &v35);
    if (v35 > v38)
    {
      v32 = v35 - (unint64_t)v38;
      v40 = stacktrace_depo_insert(v39, (uint64_t)&v18[v38], v32);
    }
    else
    {
      v40 = 0;
    }
    v33 = 1;
    v27 = v40;
    pointer_map_insert(v30, v29, v40);
  }
  if (v20 && (*(_BYTE *)(v25 + 209) & 1) != 0)
  {
    v19 = 0;
    v19 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v25 + 200) + 16))(*(_QWORD *)(v25 + 200), v20);
    if (v19 < v23)
    {
      __break(1u);
      JUMPOUT(0x13AF4);
    }
    v21 += v19 - v23;
    poison_alloc(v25, v20, v22, v21, v10, v11, v12, v13);
  }
  return v20;
}

uint64_t sanitizer_valloc(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[18];
  _QWORD v15[2];
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v25;
  vm_size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;

  v23 = a1;
  v22 = a2;
  if (!a2)
    v22 = 1;
  v21 = 0;
  v21 = *(_QWORD *)(v23 + 216);
  v20 = v22;
  if ((*(_BYTE *)(v23 + 209) & 1) != 0)
  {
    v21 += 8 - (v20 & 7);
    v22 = v20 + v21;
    if (v20 + v21 < v20)
      return 0;
  }
  v19 = 0;
  v19 = (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)(v23 + 200) + 40))(*(_QWORD *)(v23 + 200), v22);
  v8 = *(_QWORD *)(v23 + 248);
  v29 = *(_QWORD *)(v23 + 240);
  v28 = v8;
  v27 = v19;
  v26 = v20;
  if (v19 && v26 < vm_page_size)
  {
    v25 = 0;
    v15[1] = v15;
    v37 = v29;
    v36 = 1;
    v16 = 17;
    v35 = v15;
    v17 = v14;
    v34 = 17;
    bzero(v14, 0x88uLL);
    v33 = 0;
    v32 = v16;
    thread_stack_pcs(v17, v16, &v33);
    if (v33 > v36)
    {
      v30 = v33 - (unint64_t)v36;
      v38 = stacktrace_depo_insert(v37, (uint64_t)&v17[v36], v30);
    }
    else
    {
      v38 = 0;
    }
    v31 = 1;
    v25 = v38;
    pointer_map_insert(v28, v27, v38);
  }
  if ((*(_BYTE *)(v23 + 208) & 1) != 0)
  {
    v14[17] = v19;
    malloc_report(6, (uint64_t)"valloc(0x%lx) = %p\n", v2, v3, v4, v5, v6, v7, v22);
  }
  if (v19 && (*(_BYTE *)(v23 + 209) & 1) != 0)
  {
    v18 = 0;
    v18 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v23 + 200) + 16))(*(_QWORD *)(v23 + 200), v19);
    if (v18 < v22)
    {
      __break(1u);
      JUMPOUT(0x13EA0);
    }
    v21 += v18 - v22;
    poison_alloc(v23, v19, v20, v21, v9, v10, v11, v12);
  }
  return v19;
}

void sanitizer_free(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = 0;
  if ((*(_BYTE *)(a1 + 209) & 1) != 0)
  {
    v13 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 200) + 16))(*(_QWORD *)(a1 + 200), a2);
    poison_free(a1, a2, v13, v8, v9, v10, v11, v12);
  }
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
    malloc_report(6, (uint64_t)"free(%p)\n", a3, a4, a5, a6, a7, a8, a2);
  place_into_quarantine((os_unfair_lock_s *)a1, a2, v13, a4, a5, a6, a7, a8);
}

uint64_t sanitizer_realloc(os_unfair_lock_s *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[15];
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t redzone_size;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  os_unfair_lock_s *v46;
  unsigned int v48;
  vm_size_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;

  v46 = a1;
  v45 = a2;
  v44 = a3;
  if (!a3)
    v44 = 1;
  v43 = 0;
  v43 = *(_QWORD *)&v46[54]._os_unfair_lock_opaque;
  v42 = v44;
  if ((v46[52]._os_unfair_lock_opaque & 0x100) != 0)
  {
    v43 += 8 - (v44 & 7);
    v44 = v42 + v43;
    if (v42 + v43 < v42)
      return 0;
  }
  v41 = 0;
  v41 = (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)&v46[50]._os_unfair_lock_opaque + 24))(*(_QWORD *)&v46[50]._os_unfair_lock_opaque, v44);
  v9 = *(_QWORD *)&v46[62]._os_unfair_lock_opaque;
  v52 = *(_QWORD *)&v46[60]._os_unfair_lock_opaque;
  v51 = v9;
  v50 = v41;
  v49 = v42;
  if (v41 && v49 < vm_page_size)
  {
    v48 = 0;
    v33 = &v29;
    v60 = v52;
    v59 = 1;
    v34 = 17;
    v58 = &v29;
    v35 = v26;
    v57 = 17;
    bzero(v26, 0x88uLL);
    v56 = 0;
    v55 = v34;
    thread_stack_pcs(v35, v34, &v56);
    if (v56 > v59)
    {
      v53 = v56 - (unint64_t)v59;
      v61 = stacktrace_depo_insert(v60, (uint64_t)&v35[v59], v53);
    }
    else
    {
      v61 = 0;
    }
    v54 = 1;
    v48 = v61;
    pointer_map_insert(v51, v50, v61);
  }
  if ((v46[52]._os_unfair_lock_opaque & 1) != 0)
  {
    v27 = v44;
    v28 = v41;
    malloc_report(6, (uint64_t)"realloc(%p, 0x%lx) = %p\n", v3, v4, v5, v6, v7, v8, v45);
  }
  if (v45)
  {
    redzone_size = 0;
    v39 = 0;
    v39 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)&v46[50]._os_unfair_lock_opaque + 16))(*(_QWORD *)&v46[50]._os_unfair_lock_opaque, v45);
    v38 = v45;
    if ((v46[52]._os_unfair_lock_opaque & 0x100) != 0)
    {
      redzone_size = get_redzone_size((uint64_t)v46, v38, v39);
      if (v39 <= redzone_size)
      {
        __break(1u);
        JUMPOUT(0x14324);
      }
    }
    if ((v46[52]._os_unfair_lock_opaque & 1) != 0)
    {
      v26[13] = v44;
      v26[14] = v38;
      v27 = v39;
      v28 = redzone_size;
      malloc_report(6, (uint64_t)"realloc(%p, 0x%lx): size(%p) = 0x%lx - redzone 0x%lx)\n", v10, v11, v12, v13, v14, v15, v45);
    }
    if (!v41)
      return 0;
    v37 = v39 - redzone_size;
    v31 = v41;
    v32 = v38;
    if (v39 - redzone_size >= v42)
      v30 = v42;
    else
      v30 = v37;
    _platform_memmove(v31, v32, v30);
    if ((v46[52]._os_unfair_lock_opaque & 0x100) != 0)
      poison_free((uint64_t)v46, v38, v39, v16, v17, v18, v19, v20);
    place_into_quarantine(v46, v45, v39, v16, v17, v18, v19, v20);
  }
  if (v41 && (v46[52]._os_unfair_lock_opaque & 0x100) != 0)
  {
    v36 = 0;
    v36 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)&v46[50]._os_unfair_lock_opaque + 16))(*(_QWORD *)&v46[50]._os_unfair_lock_opaque, v41);
    if (v36 < v44)
    {
      __break(1u);
      JUMPOUT(0x144C8);
    }
    v43 += v36 - v44;
    poison_alloc((uint64_t)v46, v41, v42, v43, v21, v22, v23, v24);
  }
  return v41;
}

uint64_t sanitizer_destroy(mach_vm_address_t a1)
{
  stacktrace_depo_destroy(*(_QWORD *)(a1 + 240));
  pointer_map_destroy(*(_QWORD *)(a1 + 248));
  malloc_destroy_zone(*(malloc_zone_t **)(a1 + 200));
  return sanitizer_vm_deallocate(a1, 16680);
}

uint64_t sanitizer_memalign(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[18];
  _QWORD v16[3];
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;
  vm_size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;

  v25 = a1;
  v24 = a2;
  v23 = a3;
  if (!a3)
    v23 = 1;
  v22 = 0;
  v22 = *(_QWORD *)(v25 + 216);
  v21 = v23;
  if ((*(_BYTE *)(v25 + 209) & 1) != 0)
  {
    v23 = v21 + v22;
    if (v21 + v22 < v21)
      return 0;
  }
  v20 = 0;
  v20 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)(v25 + 200) + 112))(*(_QWORD *)(v25 + 200), v24, v23);
  v9 = *(_QWORD *)(v25 + 248);
  v31 = *(_QWORD *)(v25 + 240);
  v30 = v9;
  v29 = v20;
  v28 = v21;
  if (v20 && v28 < vm_page_size)
  {
    v27 = 0;
    v16[2] = v16;
    v39 = v31;
    v38 = 1;
    v17 = 17;
    v37 = v16;
    v18 = v15;
    v36 = 17;
    bzero(v15, 0x88uLL);
    v35 = 0;
    v34 = v17;
    thread_stack_pcs(v18, v17, &v35);
    if (v35 > v38)
    {
      v32 = v35 - (unint64_t)v38;
      v40 = stacktrace_depo_insert(v39, (uint64_t)&v18[v38], v32);
    }
    else
    {
      v40 = 0;
    }
    v33 = 1;
    v27 = v40;
    pointer_map_insert(v30, v29, v40);
  }
  if ((*(_BYTE *)(v25 + 208) & 1) != 0)
  {
    v15[17] = v23;
    malloc_report(6, (uint64_t)"memalign(0x%lx, 0x%lx)\n", v3, v4, v5, v6, v7, v8, v24);
  }
  if (v20 && (*(_BYTE *)(v25 + 209) & 1) != 0)
  {
    v19 = 0;
    v19 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v25 + 200) + 16))(*(_QWORD *)(v25 + 200), v20);
    if (v19 < v23)
    {
      __break(1u);
      JUMPOUT(0x148ACLL);
    }
    v22 += v19 - v23;
    poison_alloc(v25, v20, v21, v22, v10, v11, v12, v13);
  }
  return v20;
}

void sanitizer_free_definite_size(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a3;
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
    malloc_report(6, (uint64_t)"free_definite_size(%p, 0x%lx)\n", a3, a4, a5, a6, a7, a8, a2);
  if ((*(_BYTE *)(a1 + 209) & 1) != 0)
  {
    v13 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 200) + 16))(*(_QWORD *)(a1 + 200), a2);
    poison_free(a1, a2, v13, v8, v9, v10, v11, v12);
  }
  place_into_quarantine((os_unfair_lock_s *)a1, a2, v13, a4, a5, a6, a7, a8);
}

BOOL sanitizer_claimed_address(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 200) + 136))(*(_QWORD *)(a1 + 200), a2) != 0;
}

unint64_t get_redzone_size(uint64_t a1, uint64_t a2, unint64_t a3)
{
  BOOL v4;
  unint64_t uint64_via_rsp;

  if (((*(_BYTE *)(a1 + 209) ^ 1) & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x14A78);
  }
  uint64_via_rsp = _malloc_read_uint64_via_rsp(a2 + a3 - (a3 % 8 + 8));
  v4 = 0;
  if (uint64_via_rsp >= *(_QWORD *)(a1 + 216))
    v4 = uint64_via_rsp < a3;
  if (!v4)
  {
    __break(1u);
    JUMPOUT(0x14B24);
  }
  return uint64_via_rsp;
}

uint64_t _malloc_read_uint64_via_rsp(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void poison_alloc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (**functions)(uint64_t, _QWORD, uint64_t, uint64_t);

  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
    malloc_report(6, (uint64_t)"poison_alloc(%p, 0x%lx, 0x%lx)\n", a3, a4, a5, a6, a7, a8, a2);
  if (!a2)
  {
    __break(1u);
    JUMPOUT(0x14BDCLL);
  }
  set_redzone_size(a1, a2, a3, a4);
  functions = (void (**)(uint64_t, _QWORD, uint64_t, uint64_t))malloc_sanitizer_get_functions();
  if (functions && *functions)
  {
    (*functions)(a2, 0, a3, a4);
  }
  else if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    malloc_report(4, (uint64_t)"MallocSanitizerZone: Not poisoning allocation %p of size %lu with redzone size %lu due to missing pointers!\n", v8, v9, v10, v11, v12, v13, a2);
  }
}

__n128 pointer_map_insert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int128 v5;
  int v6;
  unsigned __int128 *v8;
  unsigned __int128 v9;
  unsigned __int128 v10;

  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a3;
  v8 = (unsigned __int128 *)(a1 + 16 * (murmur2_hash_pointer(a2) & 0xFFFFF));
  v9 = *v8;
  do
  {
    v3 = *((_QWORD *)&v9 + 1);
    v4 = v9;
    do
    {
      while (1)
      {
        v5 = __ldxp(v8);
        v6 = (_QWORD)v5 != (_QWORD)v9;
        if (*((_QWORD *)&v5 + 1) != *((_QWORD *)&v9 + 1))
          ++v6;
        if (v6)
          break;
        if (!__stxp(v10, v8))
          goto LABEL_9;
      }
    }
    while (__stxp(v5, v8));
LABEL_9:
    v9 = v5;
  }
  while ((unint64_t)v5 ^ v4 | *((_QWORD *)&v5 + 1) ^ v3);
  return (__n128)v10;
}

uint64_t stacktrace_depo_insert(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t *v6;
  uint64_t v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  if (a3 >= 0x100)
  {
    __break(1u);
    JUMPOUT(0x14E28);
  }
  v11 = murmur2_hash_backtrace(a2, a3);
  v9 = *(_QWORD *)(a1 + 8 * (v11 & 0x7FFFF));
  if (HIBYTE(HIDWORD(v9)) == a3 && (_DWORD)v9 == v11)
  {
    return v11;
  }
  else
  {
    v6 = (unint64_t *)(a1 + 37748736);
    v7 = *(_QWORD *)(a1 + 37748736);
    do
    {
      v3 = v7;
      do
        v4 = __ldaxr(v6);
      while (v4 == v7 && __stlxr(v7 + a3, v6));
      v7 = v4;
    }
    while (v4 != v3);
    LODWORD(v10) = v11;
    HIDWORD(v10) = v4 & 0x3FFFFF | (a3 << 24);
    *(_QWORD *)(a1 + 8 * (v11 & 0x7FFFF)) = v10;
    for (i = 0; i < a3; ++i)
      *(_QWORD *)(a1 + 0x400000 + 8 * (((v4 & 0x3FFFFF) + i) & 0x3FFFFF)) = *(_QWORD *)(a2 + 8 * i);
    return v11;
  }
}

uint64_t murmur2_hash_backtrace(uint64_t a1, unint64_t a2)
{
  int i;
  int v4;
  unint64_t v5;
  uint64_t v6;

  v6 = a1;
  v5 = a2;
  v4 = murmur2_init();
  for (i = 0; i < v5; ++i)
    murmur2_add_uintptr(&v4, *(_QWORD *)(v6 + 8 * i));
  return murmur2_finalize(&v4);
}

uint64_t murmur2_hash_pointer(uint64_t a1)
{
  int v2;
  uint64_t v3;

  v3 = a1;
  v2 = 0;
  v2 = murmur2_init();
  murmur2_add_uintptr(&v2, v3);
  return murmur2_finalize(&v2);
}

_QWORD *set_redzone_size(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (((*(_BYTE *)(a1 + 209) ^ 1) & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x151C0);
  }
  return _malloc_write_uint64_via_rsp((_QWORD *)(a2 + a3 + a4 - ((a3 + a4) % 8uLL + 8)), a4);
}

_QWORD *_malloc_write_uint64_via_rsp(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

void poison_free(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t functions;

  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
    malloc_report(6, (uint64_t)"poison_free(%p, 0x%lx)\n", a3, a4, a5, a6, a7, a8, a2);
  if (!a2)
  {
    __break(1u);
    JUMPOUT(0x152C4);
  }
  functions = malloc_sanitizer_get_functions();
  if (functions && *(_QWORD *)(functions + 8))
  {
    (*(void (**)(uint64_t, uint64_t))(functions + 8))(a2, a3);
  }
  else if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    malloc_report(4, (uint64_t)"MallocSanitizerZone: Not poisoning deallocation %p of size %lu due to missing pointers!\n", v8, v9, v10, v11, v12, v13, a2);
  }
}

void place_into_quarantine(os_unfair_lock_s *a1, uint64_t a2, vm_size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t uint64_via_rsp;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[18];
  _BYTE v18[12];
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t j;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  vm_size_t v45;
  uint64_t v46;
  os_unfair_lock_s *v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  _BYTE *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;

  v47 = a1;
  v46 = a2;
  v45 = a3;
  if (a2)
  {
    if (!v45)
      v45 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)&v47[50]._os_unfair_lock_opaque + 16))(*(_QWORD *)&v47[50]._os_unfair_lock_opaque, v46);
    v44 = v46;
    if (v45 <= vm_page_size)
    {
      v43 = 0;
      v8 = *(_QWORD *)&v47[60]._os_unfair_lock_opaque;
      v22 = v18;
      v55 = v8;
      v54 = 2;
      v23 = 18;
      v53 = v18;
      v24 = v17;
      v52 = 18;
      bzero(v17, 0x90uLL);
      v51 = 0;
      v50 = v23;
      thread_stack_pcs(v24, v23, &v51);
      if (v51 > v54)
      {
        v48 = v51 - (unint64_t)v54;
        v56 = stacktrace_depo_insert(v55, (uint64_t)&v24[v54], v48);
      }
      else
      {
        v56 = 0;
      }
      v49 = 1;
      v43 = v56;
      v42 = 0;
      pointer_map_find(*(_QWORD *)&v47[62]._os_unfair_lock_opaque, v44, &v42);
      v41 = v42;
      v40 = v42 | ((unint64_t)v43 << 32);
      lock((uint64_t)v47);
      if (*(_QWORD *)&v47[4166]._os_unfair_lock_opaque)
      {
        v39 = 0;
        uint64_via_rsp = _malloc_read_uint64_via_rsp(*(_QWORD *)&v47[4164]._os_unfair_lock_opaque);
        v39 = uint64_via_rsp & 0xFFFF000000000000 | v44 & 0xFFFFFFFFFFFFLL;
        _malloc_write_uint64_via_rsp(*(_QWORD **)&v47[4164]._os_unfair_lock_opaque, v39);
        *(_QWORD *)&v47[4164]._os_unfair_lock_opaque = v44;
      }
      else
      {
        v9 = v44;
        *(_QWORD *)&v47[4162]._os_unfair_lock_opaque = v44;
        *(_QWORD *)&v47[4164]._os_unfair_lock_opaque = v9;
      }
      v38 = (unint64_t)(unsigned __int16)v45 << 48;
      _malloc_write_uint64_via_rsp(*(_QWORD **)&v47[4164]._os_unfair_lock_opaque, v38);
      _malloc_write_uint64_via_rsp((_QWORD *)(*(_QWORD *)&v47[4164]._os_unfair_lock_opaque + 8), v40);
      ++*(_QWORD *)&v47[4166]._os_unfair_lock_opaque;
      *(_QWORD *)&v47[4168]._os_unfair_lock_opaque += v45;
      v37 = 0;
      if (*(_QWORD *)&v47[56]._os_unfair_lock_opaque
        && *(_QWORD *)&v47[4166]._os_unfair_lock_opaque > *(_QWORD *)&v47[56]._os_unfair_lock_opaque)
      {
        v21 = *(_QWORD *)&v47[4166]._os_unfair_lock_opaque - *(_QWORD *)&v47[56]._os_unfair_lock_opaque;
      }
      else
      {
        v21 = 0;
      }
      v37 = v21;
      v36 = 0;
      if (*(_QWORD *)&v47[58]._os_unfair_lock_opaque
        && *(_QWORD *)&v47[4168]._os_unfair_lock_opaque > *(_QWORD *)&v47[58]._os_unfair_lock_opaque)
      {
        v20 = *(_QWORD *)&v47[4168]._os_unfair_lock_opaque - *(_QWORD *)&v47[58]._os_unfair_lock_opaque;
      }
      else
      {
        v20 = 0;
      }
      v36 = v20;
      v35 = 0;
      v35 = *(_QWORD *)&v47[4162]._os_unfair_lock_opaque;
      v34 = 0;
      v33 = 0;
      i = 0;
      for (i = *(_QWORD *)&v47[4162]._os_unfair_lock_opaque; ; i = v31 & 0xFFFFFFFFFFFFLL)
      {
        v19 = 1;
        if (v37 <= 0)
          v19 = v36 > 0;
        if (!v19)
          break;
        v31 = 0;
        v31 = _malloc_read_uint64_via_rsp(i);
        v30 = v31 & 0xFFFFFFFFFFFFLL;
        v29 = HIWORD(v31);
        ++v34;
        v33 += HIWORD(v31);
        --v37;
        v36 -= HIWORD(v31);
      }
      *(_QWORD *)&v47[4162]._os_unfair_lock_opaque = i;
      *(_QWORD *)&v47[4166]._os_unfair_lock_opaque -= v34;
      *(_QWORD *)&v47[4168]._os_unfair_lock_opaque -= v33;
      unlock(v47);
      i = v35;
      for (j = 0; j < v34; ++j)
      {
        v27 = 0;
        v27 = _malloc_read_uint64_via_rsp(i);
        v26 = v27 & 0xFFFFFFFFFFFFLL;
        v25 = HIWORD(v27);
        if ((v47[52]._os_unfair_lock_opaque & 1) != 0)
        {
          v17[17] = v25;
          malloc_report(6, (uint64_t)"evicting %p from quarantine, size = 0x%lx\n", v11, v12, v13, v14, v15, v16, i);
        }
        if ((v47[52]._os_unfair_lock_opaque & 0x100) != 0)
          unpoison((uint64_t)v47, i, v25, v12, v13, v14, v15, v16);
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)&v47[50]._os_unfair_lock_opaque + 120))(*(_QWORD *)&v47[50]._os_unfair_lock_opaque, i, v25);
        i = v26;
      }
    }
    else
    {
      if ((v47[52]._os_unfair_lock_opaque & 0x100) != 0)
        unpoison((uint64_t)v47, v44, v45, a4, a5, a6, a7, a8);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)&v47[50]._os_unfair_lock_opaque + 48))(*(_QWORD *)&v47[50]._os_unfair_lock_opaque, v44);
    }
  }
}

void unpoison(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (**functions)(uint64_t, _QWORD, uint64_t);

  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
    malloc_report(6, (uint64_t)"unpoison(%p, 0x%lx)\n", a3, a4, a5, a6, a7, a8, a2);
  if (!a2)
  {
    __break(1u);
    JUMPOUT(0x15A34);
  }
  functions = (void (**)(uint64_t, _QWORD, uint64_t))malloc_sanitizer_get_functions();
  if (functions && *functions)
  {
    (*functions)(a2, 0, a3);
  }
  else if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    malloc_report(4, (uint64_t)"MallocSanitizerZone: Not unpoisoning %p of size %lu due to missing pointers!\n", v8, v9, v10, v11, v12, v13, a2);
  }
}

uint64_t pointer_map_find(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned __int128 *v3;
  unsigned __int128 v4;
  int v5;
  char v9;

  v3 = (unsigned __int128 *)(a1 + 16 * (murmur2_hash_pointer(a2) & 0xFFFFF));
  do
  {
    while (1)
    {
      v4 = __ldxp(v3);
      v5 = (_QWORD)v4 != 0;
      if (*((_QWORD *)&v4 + 1))
        ++v5;
      if (v5)
        break;
      if (!__stxp(0, v3))
        goto LABEL_8;
    }
  }
  while (__stxp(v4, v3));
LABEL_8:
  if ((_QWORD)v4 == a2)
  {
    *a3 = *((_QWORD *)&v4 + 1);
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

uint64_t lock(uint64_t a1)
{
  return os_unfair_lock_lock_with_options(a1 + 16640, 327680);
}

void unlock(os_unfair_lock_s *a1)
{
  os_unfair_lock_unlock(a1 + 4160);
}

void stacktrace_depo_destroy(mach_vm_address_t a1)
{
  mvm_deallocate_pages(a1, 0x2400008uLL, 0);
}

void pointer_map_destroy(mach_vm_address_t a1)
{
  mvm_deallocate_pages(a1, 0x1000000uLL, 0);
}

uint64_t sanitizer_vm_deallocate(mach_vm_address_t a1, uint64_t a2)
{
  uint64_t result;

  result = mach_vm_deallocate(mach_task_self_, a1, (a2 + vm_page_size - 1) & ~(vm_page_size - 1));
  if ((_DWORD)result)
  {
    __break(1u);
    JUMPOUT(0x15D58);
  }
  return result;
}

uint64_t sanitizer_enumerator()
{
  return 46;
}

uint64_t sanitizer_good_size(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 96) + 8))(*(_QWORD *)(a1 + 200), a2);
}

uint64_t sanitizer_check()
{
  return 1;
}

uint64_t sanitizer_force_lock(uint64_t a1)
{
  return lock(a1);
}

void sanitizer_force_unlock(os_unfair_lock_s *a1)
{
  unlock(a1);
}

BOOL sanitizer_zone_locked(os_unfair_lock_s *a1)
{
  BOOL v2;

  v2 = trylock(a1);
  if (v2)
    unlock(a1);
  return !v2;
}

uint64_t sanitizer_reinit_lock(uint64_t a1)
{
  return init_lock(a1);
}

uint64_t sanitizer_statistics_task()
{
  return 46;
}

BOOL trylock(os_unfair_lock_s *a1)
{
  return os_unfair_lock_trylock(a1 + 4160);
}

mach_vm_address_t stacktrace_depo_create()
{
  return mvm_allocate_pages(0x2400008uLL, vm_page_shift, 0, 10);
}

mach_vm_address_t pointer_map_create()
{
  return mvm_allocate_pages(0x1000000uLL, vm_page_shift, 0, 10);
}

uint64_t large_debug_print(unsigned int a1, int a2, uint64_t a3, unsigned int (*a4)(_QWORD, _QWORD, uint64_t, _QWORD **), void (*a5)(const char *, ...))
{
  uint64_t result;
  const char *v6;
  const char *v7;
  const char *v8;
  void (*v9)(const char *, ...);
  char v10;
  vm_size_t v11;
  uint64_t v12;
  char is_available;
  vm_size_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  uint64_t v20;
  void (*v21)(const char *, ...);
  unsigned int (*v22)(_QWORD, _QWORD, uint64_t, _QWORD **);
  uint64_t v23;
  int v24;
  unsigned int v25;

  v25 = a1;
  v24 = a2;
  v23 = a3;
  v22 = a4;
  v21 = a5;
  v20 = 0;
  if (a4(a1, a3, 20480, (_QWORD **)&v20))
    return ((uint64_t (*)(const char *))v21)("Failed to read szone structure\n");
  v19 = 0;
  v18 = 0;
  result = _simple_salloc();
  v17 = result;
  if (result)
  {
    v16 = 0;
    if (v22(v25, *(_QWORD *)(v20 + 18832), 24 * *(unsigned int *)(v20 + 18824), &v16))
    {
      return ((uint64_t (*)(const char *))v21)("Failed to read large entries\n");
    }
    else
    {
      _simple_sprintf(v17, "Large allocator active blocks - total %y:\n", *(_QWORD *)(v20 + 18840));
      v19 = 0;
      v18 = v16;
      while (v19 < *(_DWORD *)(v20 + 18824))
      {
        if (*v18)
        {
          _simple_sprintf(v17, "   Slot %5d: %p, size %y", v19, *v18, v18[1]);
          v15 = v17;
          if (vm_kernel_page_size <= vm_page_size)
            v14 = vm_page_size;
          else
            v14 = vm_kernel_page_size;
          is_available = 0;
          if (v18[1] + 2 * v14 <= 0xFFFFFFFF)
            is_available = mvm_reclaim_is_available(v18[2]);
          v6 = (const char *)&unk_8AA75;
          if ((is_available & 1) == 0)
            v6 = ", kernel reclaimed";
          _simple_sprintf(v15, "%s\n", v6);
        }
        ++v19;
        v18 += 3;
      }
      if ((large_cache_enabled & 1) != 0)
      {
        _simple_sprintf(v17, "\nLarge allocator death row cache, %d entries\n\tMax cached size:\t%y\n", *(unsigned int *)(v20 + 20392), *(_QWORD *)(v20 + 20400));
        _simple_sprintf(v17, "\tCurrent size:\t\t%y\n\tReserve size:\t\t%y\n\tReserve limit:\t\t%y\n", *(_QWORD *)(v20 + 20432), *(_QWORD *)(v20 + 20416), *(_QWORD *)(v20 + 20424));
        v19 = 0;
        v18 = (_QWORD *)(v20 + 18856);
        while (v19 < *(_DWORD *)(v20 + 20392))
        {
          _simple_sprintf(v17, "   Slot %5d: %p, size %y", v19, *v18, v18[1]);
          v12 = v17;
          if (vm_kernel_page_size <= vm_page_size)
            v11 = vm_page_size;
          else
            v11 = vm_kernel_page_size;
          v10 = 0;
          if (v18[1] + 2 * v11 <= 0xFFFFFFFF)
            v10 = mvm_reclaim_is_available(v18[2]);
          v7 = (const char *)&unk_8AA75;
          if ((v10 & 1) == 0)
            v7 = ", kernel reclaimed";
          _simple_sprintf(v12, "%s\n", v7);
          ++v19;
          v18 += 3;
        }
        _simple_sprintf(v17, "\n");
      }
      else
      {
        _simple_sprintf(v17, "Large allocator death row cache not configured\n");
      }
      v9 = v21;
      v8 = (const char *)_simple_string(v17);
      v9("%s\n", v8);
      return _simple_sfree(v17);
    }
  }
  return result;
}

uint64_t large_entry_for_pointer_no_lock(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  unsigned int v4;
  unsigned int v5;

  v5 = *(_DWORD *)(a1 + 18824);
  if (!v5)
    return 0;
  v4 = (a2 >> vm_page_shift) % v5;
  do
  {
    v3 = (_QWORD *)(*(_QWORD *)(a1 + 18832) + 24 * v4);
    if (*v3 == a2)
      return *(_QWORD *)(a1 + 18832) + 24 * v4;
    if (!*v3)
      break;
    if (++v4 == v5)
      v4 = 0;
  }
  while (v4 != (a2 >> vm_page_shift) % v5);
  return 0;
}

void large_entries_free_no_lock(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  vm_size_t v4;
  vm_size_t v5;

  *a4 = a2;
  if (vm_kernel_page_mask <= vm_page_mask)
    v5 = vm_page_mask;
  else
    v5 = vm_kernel_page_mask;
  if (vm_kernel_page_mask <= vm_page_mask)
    v4 = vm_page_mask;
  else
    v4 = vm_kernel_page_mask;
  a4[1] = (24 * a3 + v5) & ~v4;
}

uint64_t large_in_use_enumerator(unsigned int a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, uint64_t (*a6)(_QWORD, _QWORD, _QWORD, _QWORD), void (*a7)(_QWORD, uint64_t, uint64_t, __int128 *, uint64_t))
{
  uint64_t v8;
  vm_size_t v10;
  vm_size_t v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  void (*v18)(_QWORD, uint64_t, uint64_t, __int128 *, uint64_t);
  uint64_t (*v19)(_QWORD, _QWORD, _QWORD, _QWORD);
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  _OWORD v26[256];

  v24 = a1;
  v23 = a2;
  v22 = a3;
  v21 = a4;
  v20 = a5;
  v19 = a6;
  v18 = a7;
  v17 = 0;
  v16 = 0;
  v15 = 0;
  v13 = 0uLL;
  v14 = a6(a1, a4, 24 * a5, &v15);
  if (v14)
  {
    return v14;
  }
  else
  {
    v17 = v20;
    if ((v22 & 4) != 0)
    {
      *(_QWORD *)&v13 = v21;
      if (vm_kernel_page_mask <= vm_page_mask)
        v11 = vm_page_mask;
      else
        v11 = vm_kernel_page_mask;
      if (vm_kernel_page_mask <= vm_page_mask)
        v10 = vm_page_mask;
      else
        v10 = vm_kernel_page_mask;
      *((_QWORD *)&v13 + 1) = (24 * v20 + v11) & ~v10;
      v18(v24, v23, 4, &v13, 1);
    }
    if ((v22 & 3) != 0)
    {
      while (v17--)
      {
        v12 = *(_OWORD *)(v15 + 24 * v17);
        if ((_QWORD)v12)
        {
          v13 = *(_OWORD *)(v15 + 24 * v17);
          v8 = v16++;
          v26[v8] = v12;
          if (v16 >= 0x100)
          {
            v18(v24, v23, 3, v26, v16);
            v16 = 0;
          }
        }
      }
    }
    if (v16)
      v18(v24, v23, 3, v26, v16);
    return 0;
  }
}

uint64_t large_malloc(os_unfair_lock_s *a1, uint64_t a2, unsigned __int8 a3, int a4)
{
  mach_vm_address_t pages;
  char v6;
  char v7;
  unint64_t v8;
  mach_vm_address_t v9;
  mach_vm_size_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  os_unfair_lock_s *v17;
  os_unfair_lock_s *v18;
  os_unfair_lock_s *v19;
  os_unfair_lock_s *v20;

  v15 = a1;
  v14 = a2;
  v13 = a3;
  v12 = a4;
  v11 = 0;
  v9 = 0;
  v10 = 0;
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855769104, v15, v14, v13);
  if (!v14)
    v14 = 1;
  if (vm_kernel_page_shift <= vm_page_shift)
    v6 = vm_page_shift;
  else
    v6 = vm_kernel_page_shift;
  v8 = v14 << v6;
  v10 = 0;
  v9 = 0;
  if ((large_cache_enabled & 1) != 0 && v8 <= *(_QWORD *)&v15[5100]._os_unfair_lock_opaque)
  {
    v11 = large_malloc_from_cache(v15, v8, v13, v12);
    if (v11)
      return v11;
  }
  if ((v15[4098]._os_unfair_lock_opaque & 0x20000000) != 0)
    pages = mvm_allocate_pages(v8, v13, v15[4098]._os_unfair_lock_opaque | 0x40000000, 3);
  else
    pages = mvm_allocate_pages(v8, v13, v15[4098]._os_unfair_lock_opaque, 3);
  v11 = pages;
  if (!pages)
    return 0;
  v17 = v15;
  v19 = v15 + 4704;
  os_unfair_lock_lock_with_options(&v15[4704], 327680);
  v7 = large_entry_grow_and_insert_no_lock((uint64_t)v15, v11, v8, &v9) & 1;
  v18 = v15;
  v20 = v15 + 4704;
  os_unfair_lock_unlock(v15 + 4704);
  if ((v7 & 1) == 0)
    return 0;
  if (v10)
    mvm_deallocate_pages(v9, v10, 0);
  return v11;
}

uint64_t large_malloc_from_cache(os_unfair_lock_s *a1, unint64_t a2, char a3, int a4)
{
  vm_size_t v5;
  mach_vm_address_t v6;
  mach_vm_size_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  int v13;
  char v14;
  unint64_t v15;
  os_unfair_lock_s *v16;
  os_unfair_lock_s *v18;
  os_unfair_lock_s *v19;
  os_unfair_lock_s *v20;
  os_unfair_lock_s *v21;
  os_unfair_lock_s *v22;
  os_unfair_lock_s *v23;
  os_unfair_lock_s *v24;
  os_unfair_lock_s *v25;

  v16 = a1;
  v15 = a2;
  v14 = a3;
  v13 = a4;
  v18 = a1;
  v22 = a1 + 4704;
  os_unfair_lock_lock_with_options(&a1[4704], 327680);
  v12 = 0;
  v10 = 0uLL;
  v11 = 0;
  do
  {
    large_malloc_best_fit_in_cache(v16, v15, v14, &v8);
    v10 = v8;
    v11 = v9;
    if (!(_QWORD)v8)
    {
      v21 = v16;
      v23 = v16 + 4704;
      os_unfair_lock_unlock(v16 + 4704);
      return 0;
    }
    if (vm_kernel_page_size <= vm_page_size)
      v5 = vm_page_size;
    else
      v5 = vm_kernel_page_size;
  }
  while (*((_QWORD *)&v10 + 1) + 2 * v5 <= 0xFFFFFFFF
       && (mvm_reclaim_mark_used(v11, v10, DWORD2(v10), v16[4098]._os_unfair_lock_opaque) & 1) == 0);
  v7 = 0;
  v6 = 0;
  if ((large_entry_grow_and_insert_no_lock((uint64_t)v16, v10, *((uint64_t *)&v10 + 1), &v6) & 1) != 0)
  {
    v12 = 1;
    *(_QWORD *)&v16[5108]._os_unfair_lock_opaque -= *((_QWORD *)&v10 + 1);
    if (v16[5116]._os_unfair_lock_opaque && *(_QWORD *)&v16[5108]._os_unfair_lock_opaque < 0x80000uLL)
      v16[5116]._os_unfair_lock_opaque = 0;
    v19 = v16;
    v25 = v16 + 4704;
    os_unfair_lock_unlock(v16 + 4704);
    if (v7)
      mvm_deallocate_pages(v6, v7, 0);
    if (v13)
      _platform_memset(v10, 0, v15);
    return v10;
  }
  else
  {
    v20 = v16;
    v24 = v16 + 4704;
    os_unfair_lock_unlock(v16 + 4704);
    return 0;
  }
}

uint64_t large_entry_grow_and_insert_no_lock(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  mach_vm_address_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v14 = a1;
  v13 = a2;
  v12 = a3;
  v11 = a4;
  v10 = 0;
  v10 = *(_DWORD *)(a1 + 18824) < (4 * (*(_DWORD *)(a1 + 18820) + 1));
  if (!v10 || (v9 = large_entries_grow_no_lock(v14, v11)) != 0)
  {
    *(_QWORD *)&v7 = v13;
    *((_QWORD *)&v7 + 1) = v12;
    v8 = -1;
    v5 = v7;
    v6 = -1;
    large_entry_insert_no_lock(v14, &v5);
    ++*(_DWORD *)(v14 + 18820);
    *(_QWORD *)(v14 + 18840) += v12;
    v15 = 1;
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t free_large(_DWORD *a1, unint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  vm_size_t v24;
  vm_size_t v25;
  vm_size_t v26;
  vm_size_t v27;
  __int128 v28;
  uint64_t v29;
  mach_vm_size_t v30;
  mach_vm_address_t v31;
  int v32;
  int state;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  vm_size_t v37;
  int v38;
  vm_address_t address[2];
  uint64_t v40;
  int v41;
  signed int v42;
  __int128 v43;
  uint64_t *v44;
  char v45;
  unint64_t v46;
  _DWORD *v47;
  char v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;

  v47 = a1;
  v46 = a2;
  v45 = a3 & 1;
  v43 = 0uLL;
  v50 = a1;
  v57 = a1 + 4704;
  os_unfair_lock_lock_with_options(a1 + 4704, 327680);
  v44 = (uint64_t *)large_entry_for_pointer_no_lock((uint64_t)v47, v46);
  if (v44)
  {
    if ((large_cache_enabled & 1) == 0 || (unint64_t)v44[1] > *((_QWORD *)v47 + 2550))
      goto LABEL_64;
    v42 = 0;
    v42 = v47[4713];
    v41 = 0;
    v41 = v47[4712];
    address[0] = 0;
    address[1] = 0;
    v40 = 0;
    *(_OWORD *)address = *(_OWORD *)v44;
    v40 = v44[2];
    v38 = 1;
    while (1)
    {
      while (1)
      {
        v37 = 0;
        v37 = *(_QWORD *)&v47[6 * v42 + 4714];
        v36 = 0;
        v36 = *(_QWORD *)&v47[6 * v42 + 4716];
        v35 = 0;
        v35 = *(_QWORD *)&v47[6 * v42 + 4718];
        v27 = vm_kernel_page_size <= vm_page_size ? vm_page_size : vm_kernel_page_size;
        if (v36 + 2 * v27 > 0xFFFFFFFF || (mvm_reclaim_is_available(v35) & 1) != 0)
          break;
        v42 = remove_from_death_row_no_lock(v47, v42, 0, v3, v4, v5, v6, v7);
        v41 = v47[4712];
        if (v42 == -1)
          goto LABEL_24;
      }
      if (v37 == *v44)
        break;
      if (v42 == v41)
        goto LABEL_24;
      if (v42)
        --v42;
      else
        v42 = v47[5098] - 1;
    }
    if (vm_kernel_page_size <= vm_page_size)
      v26 = vm_page_size;
    else
      v26 = vm_kernel_page_size;
    if (v36 + 2 * v26 > 0xFFFFFFFF)
    {
LABEL_19:
      malloc_zone_error(v47[4098], 1, (uint64_t)"pointer %p being freed already on death-row\n", v3, v4, v5, v6, v7, v46);
      v56 = v47;
      v59 = v47 + 4704;
      os_unfair_lock_unlock((os_unfair_lock_t)v47 + 4704);
      v48 = 1;
      return v48 & 1;
    }
    if ((mvm_reclaim_mark_used(v35, v37, v36, v47[4098]) & 1) != 0)
    {
      *(_QWORD *)&v47[6 * v42 + 4718] = mvm_reclaim_mark_free(v37, v36, v47[4098]);
      v35 = *(_QWORD *)&v47[6 * v42 + 4718];
      goto LABEL_19;
    }
LABEL_24:
    *(_QWORD *)&v34 = large_entry_free_no_lock((uint64_t)v47, v44);
    *((_QWORD *)&v34 + 1) = v8;
    v43 = v34;
    v44 = 0;
    v55 = v47;
    v60 = v47 + 4704;
    os_unfair_lock_unlock((os_unfair_lock_t)v47 + 4704);
    if ((v47[4098] & 0x80) != 0)
    {
      state = 0;
      if (vm_purgable_control(mach_task_self_, address[0], 0, &state))
      {
        malloc_report(3, (uint64_t)"*** can't vm_purgable_control(..., VM_PURGABLE_SET_STATE) for large freed block at %p\n", v9, v10, v11, v12, v13, v14, address[0]);
        v38 = 0;
      }
    }
    if (v47[5102] && mprotect((void *)address[0], address[1], 3))
    {
      malloc_report(3, (uint64_t)"*** can't reset protection for large freed block at %p\n", v15, v16, v17, v18, v19, v20, address[0]);
      v38 = 0;
    }
    if (v38)
    {
      if ((v47[4098] & 0x20) != 0)
        _platform_memset(address[0], 221, address[1]);
      if (vm_kernel_page_size <= vm_page_size)
        v25 = vm_page_size;
      else
        v25 = vm_kernel_page_size;
      if (address[1] + 2 * v25 > 0xFFFFFFFF)
        v38 = 0;
      v40 = mvm_reclaim_mark_free(address[0], address[1], v47[4098]);
    }
    v49 = v47;
    v58 = v47 + 4704;
    os_unfair_lock_lock_with_options(v47 + 4704, 327680);
    --v47[4705];
    *((_QWORD *)v47 + 2355) -= address[1];
    if (v38)
    {
      v32 = v47[4713];
      v29 = 0;
      if (v32 != v47[4712] || *(_QWORD *)&v47[6 * v32 + 4714])
      {
        if (v32 == v47[5098] - 1)
          v32 = 0;
        else
          ++v32;
        if (v32 == v47[4712])
        {
          v31 = *(_QWORD *)&v47[6 * v32 + 4714];
          v30 = *(_QWORD *)&v47[6 * v32 + 4716];
          *((_QWORD *)v47 + 2554) -= v30;
          v29 = *(_QWORD *)&v47[6 * v32 + 4718];
        }
        else
        {
          v31 = 0;
          v30 = 0;
        }
      }
      else
      {
        v31 = 0;
        v30 = 0;
      }
      *((_QWORD *)v47 + 2554) += address[1];
      if (!v47[5116] && *((_QWORD *)v47 + 2554) > 0x100000uLL)
        v47[5116] = 1;
      v21 = &v47[6 * v32 + 4714];
      *(_OWORD *)v21 = *(_OWORD *)address;
      *((_QWORD *)v21 + 2) = v40;
      v47[4713] = v32;
      if (v31)
      {
        if (v47[4712] == v47[5098] - 1)
          v47[4712] = 0;
        else
          ++v47[4712];
        v53 = v47;
        v62 = v47 + 4704;
        os_unfair_lock_unlock((os_unfair_lock_t)v47 + 4704);
        if (vm_kernel_page_size <= vm_page_size)
          v24 = vm_page_size;
        else
          v24 = vm_kernel_page_size;
        if (v30 + 2 * v24 <= 0xFFFFFFFF && (mvm_reclaim_mark_used(v29, v31, v30, v47[4098]) & 1) != 0)
          mvm_deallocate_pages(v31, v30, v47[4098]);
        v48 = 1;
      }
      else
      {
        v54 = v47;
        v61 = v47 + 4704;
        os_unfair_lock_unlock((os_unfair_lock_t)v47 + 4704);
        v48 = 1;
      }
    }
    else
    {
LABEL_64:
      if (!(_QWORD)v43)
      {
        --v47[4705];
        *((_QWORD *)v47 + 2355) -= v44[1];
        *(_QWORD *)&v28 = large_entry_free_no_lock((uint64_t)v47, v44);
        *((_QWORD *)&v28 + 1) = v22;
        v43 = v28;
      }
      v51 = v47;
      v64 = v47 + 4704;
      os_unfair_lock_unlock((os_unfair_lock_t)v47 + 4704);
      if ((_QWORD)v43)
        mvm_deallocate_pages(v43, *((mach_vm_size_t *)&v43 + 1), 0);
      v48 = 1;
    }
  }
  else
  {
    if ((v45 & 1) == 0)
      malloc_zone_error(v47[4098], 1, (uint64_t)"pointer %p being freed was not allocated\n", v3, v4, v5, v6, v7, v46);
    v52 = v47;
    v63 = v47 + 4704;
    os_unfair_lock_unlock((os_unfair_lock_t)v47 + 4704);
    v48 = 0;
  }
  return v48 & 1;
}

uint64_t remove_from_death_row_no_lock(_DWORD *a1, signed int a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  signed int k;
  signed int j;
  signed int i;

  if (a1[4712] >= a1[4713])
  {
    if (a1[4713] >= a1[4712])
    {
      if (a3 && *a3 != -1)
        malloc_zone_error(a1[4098], 1, (uint64_t)"Invalid best: %d\n", a4, a5, a6, a7, a8, *a3);
      *(_QWORD *)&a1[6 * a2 + 4714] = 0;
      *(_QWORD *)&a1[6 * a2 + 4716] = 0;
      *(_QWORD *)&a1[6 * a2 + 4718] = -1;
      return -1;
    }
    else if (a2 > a1[4713])
    {
      for (i = a2; i > a1[4712]; --i)
      {
        v12 = (uint64_t)&a1[6 * i + 4714];
        v13 = (uint64_t)&a1[6 * i + 4708];
        *(_OWORD *)v12 = *(_OWORD *)v13;
        *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
      }
      if (a2 == a1[4712])
        v15 = -1;
      else
        v15 = a2;
      if (a1[4712] >= a1[5098] - 1)
        a1[4712] = 0;
      else
        ++a1[4712];
    }
    else
    {
      for (j = a2; j < a1[4713]; ++j)
      {
        v10 = (uint64_t)&a1[6 * j + 4714];
        v11 = (uint64_t)&a1[6 * j + 4720];
        *(_OWORD *)v10 = *(_OWORD *)v11;
        *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
      }
      if (a3 && *a3 != -1)
        --*a3;
      if ((int)a1[4713] <= 0)
        a1[4713] = a1[5098] - 1;
      else
        --a1[4713];
      if (a2)
        return (a2 - 1);
      else
        return (a1[5098] - 1);
    }
  }
  else
  {
    for (k = a2; k < a1[4713]; ++k)
    {
      v8 = (uint64_t)&a1[6 * k + 4714];
      v9 = (uint64_t)&a1[6 * k + 4720];
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
    }
    if (a3 && *a3 != -1)
      --*a3;
    if (a2 == a1[4712])
      v15 = -1;
    else
      v15 = a2 - 1;
    --a1[4713];
  }
  return v15;
}

uint64_t large_entry_free_no_lock(uint64_t a1, uint64_t *a2)
{
  vm_size_t v3;
  uint64_t v6;

  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855769120, a1, *a2, a2[1]);
  v6 = *a2;
  if ((*(_DWORD *)(a1 + 16392) & 3) != 0)
  {
    mvm_protect(v6, a2[1], 3u, *(_DWORD *)(a1 + 16392));
    if (vm_kernel_page_size <= vm_page_size)
      v3 = vm_page_size;
    else
      v3 = vm_kernel_page_size;
    v6 -= v3;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = -1;
  large_entries_rehash_after_entry_no_lock(a1, (uint64_t)a2);
  return v6;
}

unint64_t large_try_shrink_in_place(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  vm_size_t v17;
  vm_size_t v18;
  void *v19;
  int v20;
  _QWORD *v21;
  mach_vm_size_t v22;
  uint64_t v23;

  v23 = a4;
  v22 = a3 - a4;
  if (a3 == a4)
    return a2;
  os_unfair_lock_lock_with_options(a1 + 18816, 327680);
  v21 = (_QWORD *)large_entry_for_pointer_no_lock(a1, a2);
  if (v21)
  {
    *v21 = a2;
    v21[1] = v23;
    *(_QWORD *)(a1 + 18840) -= v22;
    v20 = *(_DWORD *)(a1 + 16392) & 3;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 18816));
    if (v20)
    {
      v19 = (void *)(a2 + v23);
      if (vm_kernel_page_size <= vm_page_size)
        v9 = mprotect(v19, vm_page_size, 0);
      else
        v9 = mprotect(v19, vm_kernel_page_size, 0);
      if (v9)
        malloc_report(3, (uint64_t)"*** can't mvm_protect(0x0) region for new postlude guard page at %p\n", v10, v11, v12, v13, v14, v15, a2 + v23);
      if (vm_kernel_page_size <= vm_page_size)
        v18 = vm_page_size;
      else
        v18 = vm_kernel_page_size;
      v23 += v18;
      if (vm_kernel_page_size <= vm_page_size)
        v17 = vm_page_size;
      else
        v17 = vm_kernel_page_size;
      v22 -= v17;
    }
    mvm_deallocate_pages(a2 + v23, v22, 0);
    return a2;
  }
  malloc_zone_error(*(_DWORD *)(a1 + 16392), 1, (uint64_t)"large entry %p reallocated is not properly in table\n", v4, v5, v6, v7, v8, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 18816));
  return a2;
}

uint64_t large_try_realloc_in_place(uint64_t a1, unint64_t a2, uint64_t a3, vm_size_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  vm_size_t v10;
  vm_size_t v11;
  uint64_t v12;
  _QWORD *v13;
  vm_address_t address;
  vm_size_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v18 = a1;
  v17 = a2;
  v16 = a3;
  v15 = a4;
  address = a2 + a3;
  v21 = a1;
  v25 = a1 + 18816;
  os_unfair_lock_lock_with_options(a1 + 18816, 327680);
  v12 = large_entry_for_pointer_no_lock(v18, address);
  v24 = v18;
  v27 = v18 + 18816;
  os_unfair_lock_unlock((os_unfair_lock_t)(v18 + 18816));
  if (v12)
  {
    return 0;
  }
  else
  {
    if (vm_kernel_page_mask <= vm_page_mask)
      v11 = vm_page_mask;
    else
      v11 = vm_kernel_page_mask;
    if (vm_kernel_page_mask <= vm_page_mask)
      v10 = vm_page_mask;
    else
      v10 = vm_kernel_page_mask;
    v15 = (v15 + v11) & ~v10;
    if (vm_allocate(mach_task_self_, &address, v15 - v16, 100663296))
    {
      return 0;
    }
    else
    {
      v20 = v18;
      v26 = v18 + 18816;
      os_unfair_lock_lock_with_options(v18 + 18816, 327680);
      v13 = (_QWORD *)large_entry_for_pointer_no_lock(v18, v17);
      if (v13)
      {
        *v13 = v17;
        v13[1] = v15;
        *(_QWORD *)(v18 + 18840) += v15 - v16;
        v22 = v18;
        v29 = v18 + 18816;
        os_unfair_lock_unlock((os_unfair_lock_t)(v18 + 18816));
        return 1;
      }
      else
      {
        malloc_zone_error(*(_DWORD *)(v18 + 16392), 1, (uint64_t)"large entry %p reallocated is not properly in table\n", v4, v5, v6, v7, v8, v17);
        v23 = v18;
        v28 = v18 + 18816;
        os_unfair_lock_unlock((os_unfair_lock_t)(v18 + 18816));
        return 0;
      }
    }
  }
}

BOOL large_claimed_address(os_unfair_lock_s *a1, uint64_t a2)
{
  _BOOL4 v3;

  os_unfair_lock_lock_with_options(&a1[4704], 327680);
  v3 = large_entry_containing_pointer_no_lock((uint64_t)a1, a2 & ~(vm_page_size - 1)) != 0;
  os_unfair_lock_unlock(a1 + 4704);
  return v3;
}

uint64_t large_entry_containing_pointer_no_lock(uint64_t a1, unint64_t a2)
{
  unsigned int v3;
  unint64_t *v4;
  unsigned int v5;
  unsigned int v6;

  v6 = *(_DWORD *)(a1 + 18824);
  if (!v6)
    return 0;
  v5 = (a2 >> vm_page_shift) % v6;
  do
  {
    v4 = (unint64_t *)(*(_QWORD *)(a1 + 18832) + 24 * v5);
    if (*v4 == a2)
      return *(_QWORD *)(a1 + 18832) + 24 * v5;
    if (a2 >= *v4 && a2 < *v4 + v4[1])
      return *(_QWORD *)(a1 + 18832) + 24 * v5;
    if (v5)
      v3 = v5 - 1;
    else
      v3 = v6 - 1;
    v5 = v3;
  }
  while (v3 != (a2 >> vm_page_shift) % v6);
  return 0;
}

void large_destroy_cache(os_unfair_lock_s *a1)
{
  uint32_t v1;
  uint32_t os_unfair_lock_opaque;
  _QWORD v4[192];

  os_unfair_lock_lock_with_options(&a1[4704], 327680);
  a1[5116]._os_unfair_lock_opaque = 0;
  os_unfair_lock_opaque = a1[4712]._os_unfair_lock_opaque;
  v1 = a1[4713]._os_unfair_lock_opaque;
  _platform_memmove(v4, &a1[4714], 1536);
  large_clear_cache_locked((uint64_t)a1);
  os_unfair_lock_unlock(a1 + 4704);
  while (os_unfair_lock_opaque != v1)
  {
    large_deallocate_cache_entry((uint64_t)a1, (uint64_t)&v4[3 * (int)os_unfair_lock_opaque++]);
    if (os_unfair_lock_opaque == a1[5098]._os_unfair_lock_opaque)
      os_unfair_lock_opaque = 0;
  }
  if (v4[3 * (int)os_unfair_lock_opaque] && v4[3 * (int)os_unfair_lock_opaque + 1])
    large_deallocate_cache_entry((uint64_t)a1, (uint64_t)&v4[3 * (int)os_unfair_lock_opaque]);
}

uint64_t large_clear_cache_locked(uint64_t result)
{
  *(_DWORD *)(result + 18852) = 0;
  *(_DWORD *)(result + 18848) = 0;
  *(_QWORD *)(result + 18856) = 0;
  *(_QWORD *)(result + 18864) = 0;
  *(_QWORD *)(result + 20432) = 0;
  *(_QWORD *)(result + 20416) = 0;
  return result;
}

void large_deallocate_cache_entry(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 8) > 0xFFFFFFFFuLL
    || (mvm_reclaim_mark_used(*(_QWORD *)(a2 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_DWORD *)(a1 + 16392)) & 1) != 0)
  {
    mvm_deallocate_pages(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_DWORD *)(a1 + 16392));
  }
}

uint64_t large_malloc_best_fit_in_cache@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  vm_size_t v11;
  unint64_t v13;
  unint64_t v14;
  int v15;
  signed int v16;
  signed int v17;
  char v18;
  unint64_t v19;
  _DWORD *v20;

  v20 = a1;
  v19 = a2;
  v18 = a3;
  v17 = -1;
  v16 = a1[4713];
  v15 = a1[4712];
  v14 = -1;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = _platform_memset(a4, 0, 24);
  while (1)
  {
    while (1)
    {
      v13 = *(_QWORD *)&v20[6 * v16 + 4716];
      if (v18 && (*(_QWORD *)&v20[6 * v16 + 4714] & ((1 << v18) - 1)) != 0
        || v19 != v13 && (v19 >= v13 || v13 >= v14))
      {
        goto LABEL_15;
      }
      v11 = vm_kernel_page_size <= vm_page_size ? vm_page_size : vm_kernel_page_size;
      if (v14 + 2 * v11 > 0xFFFFFFFF)
        break;
      result = mvm_reclaim_is_available(*(_QWORD *)&v20[6 * v16 + 4718]);
      if ((result & 1) != 0)
        break;
      result = remove_from_death_row_no_lock(v20, v16, &v17, v5, v6, v7, v8, v9);
      v16 = result;
      v15 = v20[4712];
      if ((_DWORD)result == -1)
        goto LABEL_19;
    }
    v17 = v16;
    v14 = v13;
    if (v19 == v13)
      break;
LABEL_15:
    if (v16 == v15)
      break;
    if (v16)
      --v16;
    else
      v16 = v20[5098] - 1;
  }
LABEL_19:
  if (v17 != -1 && v14 - v19 < v19)
  {
    v10 = &v20[6 * v17 + 4714];
    *(_OWORD *)a4 = *(_OWORD *)v10;
    a4[2] = *((_QWORD *)v10 + 2);
    return remove_from_death_row_no_lock(v20, v17, 0, v5, v6, v7, v8, v9);
  }
  return result;
}

mach_vm_address_t large_entries_grow_no_lock(uint64_t a1, _QWORD *a2)
{
  __int128 *v3;
  vm_size_t v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unsigned int v11;
  mach_vm_address_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;

  v17 = a1;
  v16 = a2;
  v15 = 0;
  v15 = *(_DWORD *)(a1 + 18824);
  v14 = 0;
  v14 = *(_QWORD *)(a1 + 18832);
  v13 = 0;
  if (v15)
  {
    v6 = 2 * v15 + 1;
  }
  else
  {
    if (vm_kernel_page_size <= vm_page_size)
      v5 = vm_page_size;
    else
      v5 = vm_kernel_page_size;
    v6 = v5 / 0x18 - 1;
  }
  v13 = v6;
  v12 = large_entries_alloc_no_lock(v17, v6);
  v11 = v15;
  v9 = 0uLL;
  v10 = 0;
  if (!v12)
    return 0;
  *(_DWORD *)(v17 + 18824) = v13;
  *(_QWORD *)(v17 + 18832) = v12;
  while (v11--)
  {
    v3 = (__int128 *)(v14 + 24 * v11);
    v9 = *v3;
    v10 = *((_QWORD *)v3 + 2);
    if ((_QWORD)v9)
    {
      v7 = v9;
      v8 = v10;
      large_entry_insert_no_lock(v17, &v7);
    }
  }
  if (v14)
  {
    large_entries_free_no_lock(v17, v14, v15, v16);
  }
  else
  {
    *v16 = 0;
    v16[1] = 0;
  }
  return v12;
}

uint64_t large_entry_insert_no_lock(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  unsigned int v3;
  unsigned int v4;

  v4 = *(_DWORD *)(result + 18824);
  v3 = (*a2 >> vm_page_shift) % (unint64_t)v4;
  while (1)
  {
    v2 = (_QWORD *)(*(_QWORD *)(result + 18832) + 24 * v3);
    if (!*v2)
      break;
    if (++v3 == v4)
      v3 = 0;
    if (v3 == (*a2 >> vm_page_shift) % (unint64_t)v4)
      return result;
  }
  *(_OWORD *)v2 = *(_OWORD *)a2;
  v2[2] = a2[2];
  return result;
}

mach_vm_address_t large_entries_alloc_no_lock(uint64_t a1, unsigned int a2)
{
  vm_size_t v3;
  vm_size_t v4;
  int v5;

  if ((*(_DWORD *)(a1 + 16392) & 0x20000000) != 0)
    v5 = *(_DWORD *)(a1 + 16392) & 0x20000000 | 0x40000000;
  else
    v5 = *(_DWORD *)(a1 + 16392) & 0x60000000;
  if (vm_kernel_page_mask <= vm_page_mask)
    v4 = vm_page_mask;
  else
    v4 = vm_kernel_page_mask;
  if (vm_kernel_page_mask <= vm_page_mask)
    v3 = vm_page_mask;
  else
    v3 = vm_kernel_page_mask;
  return mvm_allocate_pages((24 * a2 + v4) & ~v3, 0, v5, 3);
}

uint64_t large_entries_rehash_after_entry_no_lock(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = result;
  v10 = a2;
  v9 = 0;
  v9 = *(_DWORD *)(result + 18824);
  v8 = 0;
  v8 = (a2 - *(_QWORD *)(result + 18832)) / 24;
  v7 = v8;
  v5 = 0uLL;
  v6 = 0;
  do
  {
    if (++v7 == v9)
      v7 = 0;
    v2 = *(_QWORD *)(v11 + 18832) + 24 * v7;
    v5 = *(_OWORD *)v2;
    v6 = *(_QWORD *)(v2 + 16);
    if (!(_QWORD)v5)
      break;
    *(_QWORD *)(*(_QWORD *)(v11 + 18832) + 24 * v7) = 0;
    *(_QWORD *)(*(_QWORD *)(v11 + 18832) + 24 * v7 + 8) = 0;
    *(_QWORD *)(*(_QWORD *)(v11 + 18832) + 24 * v7 + 16) = -1;
    v3 = v5;
    v4 = v6;
    result = large_entry_insert_no_lock(v11, &v3);
  }
  while (v7 != v8);
  return result;
}

void szone_free(_DWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _szone_free(a1, a2, 0, a4, a5, a6, a7, a8);
}

void _szone_free(_DWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v11 = a3 & 1;
  if (a2)
  {
    if ((a2 & 0xF) != 0)
    {
      if ((a3 & 1) == 0)
      {
        malloc_zone_error(a1[4098], 1, (uint64_t)"Non-aligned pointer %p being freed\n", a4, a5, a6, a7, a8, a2);
        return;
      }
      goto LABEL_25;
    }
    v10 = tiny_region_for_ptr_no_lock((uint64_t)(a1 + 4128), a2);
    if (v10)
    {
      if ((unsigned __int16)((a2 - ((a2 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) < 0xFBF8uLL)
        free_tiny((uint64_t)(a1 + 4128), a2, v10, 0, 0);
      else
        malloc_zone_error(a1[4098], 1, (uint64_t)"Pointer %p to metadata being freed\n", a4, a5, a6, a7, a8, a2);
    }
    else
    {
      if ((a2 & 0x1FF) != 0)
      {
        if ((v11 & 1) == 0)
        {
          malloc_zone_error(a1[4098], 1, (uint64_t)"Non-aligned pointer %p being freed (2)\n", a4, a5, a6, a7, a8, a2);
          return;
        }
        goto LABEL_25;
      }
      v9 = small_region_for_ptr_no_lock((uint64_t)(a1 + 4320), a2);
      if (v9)
      {
        if ((((a2 - ((a2 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF) < 0x3FBF)
          free_small((uint64_t)(a1 + 4320), a2, v9, 0, a5, a6, a7, a8);
        else
          malloc_zone_error(a1[4098], 1, (uint64_t)"Pointer %p to metadata being freed (2)\n", a4, a5, a6, a7, a8, a2);
      }
      else
      {
        if ((a2 & (vm_page_size - 1)) != 0)
        {
          if ((v11 & 1) == 0)
          {
            malloc_zone_error(a1[4098], 1, (uint64_t)"non-page-aligned, non-allocated pointer %p being freed\n", a4, a5, a6, a7, a8, a2);
            return;
          }
          goto LABEL_25;
        }
        v8 = free_large(a1, a2, v11 & 1) & 1;
        if ((v11 & 1) != 0 && (v8 & 1) == 0)
LABEL_25:
          find_zone_and_free((void *)a2, 1, a3, a4, a5, a6, a7, a8);
      }
    }
  }
}

void szone_free_definite_size(_DWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    if ((a2 & 0xF) != 0)
    {
      malloc_zone_error(a1[4098], 1, (uint64_t)"Non-aligned pointer %p being freed\n", a4, a5, a6, a7, a8, a2);
    }
    else if (a3 > 0x3F0)
    {
      if ((a2 & 0x1FF) != 0)
      {
        malloc_zone_error(a1[4098], 1, (uint64_t)"Non-aligned pointer %p being freed (2)\n", a4, a5, a6, a7, a8, a2);
      }
      else if (a3 > 0x3C00)
      {
        if ((a2 & (vm_page_size - 1)) != 0)
          malloc_zone_error(a1[4098], 1, (uint64_t)"non-page-aligned, non-allocated pointer %p being freed\n", a4, a5, a6, a7, a8, a2);
        else
          free_large(a1, a2, 0);
      }
      else if ((((a2 - ((a2 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF) < 0x3FBF)
      {
        free_small((uint64_t)(a1 + 4320), a2, a2 & 0xFFFFFFFFFF800000, a3, a5, a6, a7, a8);
      }
      else
      {
        malloc_zone_error(a1[4098], 1, (uint64_t)"Pointer %p to metadata being freed (2)\n", a4, a5, a6, a7, a8, a2);
      }
    }
    else if ((unsigned __int16)((a2 - ((a2 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) < 0xFBF8uLL)
    {
      free_tiny((uint64_t)(a1 + 4128), a2, a2 & 0xFFFFFFFFFFF00000, a3, 0);
    }
    else
    {
      malloc_zone_error(a1[4098], 1, (uint64_t)"Pointer %p to metadata being freed\n", a4, a5, a6, a7, a8, a2);
    }
  }
}

unint64_t szone_malloc_should_clear(os_unfair_lock_s *a1, unint64_t a2, int a3)
{
  uint64_t v3;
  char v5;
  unint64_t v6;
  vm_size_t v7;
  vm_size_t v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  unint64_t should_clear;

  if (a2 > 0x3F0)
  {
    if (a2 > 0x3C00)
    {
      if (vm_kernel_page_mask <= vm_page_mask)
        v8 = vm_page_mask;
      else
        v8 = vm_kernel_page_mask;
      if (vm_kernel_page_mask <= vm_page_mask)
        v7 = vm_page_mask;
      else
        v7 = vm_kernel_page_mask;
      v6 = (a2 + v8) & ~v7;
      if (vm_kernel_page_shift <= vm_page_shift)
        v5 = vm_page_shift;
      else
        v5 = vm_kernel_page_shift;
      if (v6 >> v5)
        should_clear = large_malloc(a1, v6 >> v5, 0, a3);
      else
        should_clear = 0;
    }
    else
    {
      v10 = (a2 + 511) >> 9;
      if (!v10)
        v10 = 1;
      should_clear = small_malloc_should_clear((uint64_t)&a1[4320], v10, a3);
    }
  }
  else
  {
    v9 = (a2 + 15) >> 4;
    if (!v9)
      v9 = 1;
    should_clear = tiny_malloc_should_clear((uint64_t)&a1[4128], v9, a3);
  }
  if ((a1[4098]._os_unfair_lock_opaque & 0x20) != 0 && should_clear && !a3 && a2)
  {
    v3 = szone_size(a1, should_clear);
    _platform_memset(should_clear, 170, v3);
  }
  if (!should_clear)
    malloc_set_errno_fast(1, 12);
  return should_clear;
}

uint64_t szone_size(os_unfair_lock_s *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (!a2)
    return 0;
  if ((a2 & 0xF) != 0)
    return 0;
  v3 = tiny_size((uint64_t)&a1[4128], a2);
  if (v3)
    return v3;
  if ((a2 & 0x1FF) != 0)
    return 0;
  v4 = small_size((uint64_t)&a1[4320], a2);
  if (v4)
    return v4;
  if ((a2 & (vm_page_size - 1)) != 0)
    return 0;
  return szone_size_try_large(a1, a2);
}

unint64_t szone_malloc(os_unfair_lock_s *a1, unint64_t a2)
{
  return szone_malloc_should_clear(a1, a2, 0);
}

unint64_t szone_calloc(os_unfair_lock_s *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4[3];
  os_unfair_lock_s *v5;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  BOOL v13;

  v5 = a1;
  v4[2] = a2;
  v4[1] = a3;
  v4[0] = 0;
  v11 = a2;
  v10 = a3;
  v9 = 0;
  v8 = v4;
  v7 = a3;
  if (a2 == 1
    || (v7 = v11 * v10, v13 = (v11 * (unsigned __int128)v10) >> 64 != 0, is_mul_ok(v11, v10))
    && v7 <= malloc_absolute_max_size)
  {
    *v8 = v7;
    v12 = 0;
  }
  else
  {
    malloc_set_errno_fast(1, 12);
    v12 = -1;
  }
  if (v12)
    return 0;
  else
    return szone_malloc_should_clear(v5, v4[0], 1);
}

uint64_t szone_valloc(os_unfair_lock_s *a1, unint64_t a2)
{
  char v3;
  vm_size_t v4;
  vm_size_t v5;

  if (a2 <= 0x800000)
    return szone_memalign(a1, vm_page_size, a2);
  if (vm_kernel_page_mask <= vm_page_mask)
    v5 = vm_page_mask;
  else
    v5 = vm_kernel_page_mask;
  if (vm_kernel_page_mask <= vm_page_mask)
    v4 = vm_page_mask;
  else
    v4 = vm_kernel_page_mask;
  if (vm_kernel_page_shift <= vm_page_shift)
    v3 = vm_page_shift;
  else
    v3 = vm_kernel_page_shift;
  return large_malloc(a1, ((a2 + v5) & ~v4) >> v3, 0, 0);
}

uint64_t szone_memalign(os_unfair_lock_s *a1, vm_size_t a2, unint64_t a3)
{
  char v5;
  vm_size_t v6;
  vm_size_t v7;
  vm_size_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v12 = a3;
  if (!a3)
    v12 = 1;
  if (v12 + a2 < v12)
    return 0;
  v11 = v12 + a2 - 1;
  if (a2 <= 0x10)
    return szone_malloc(a1, v12);
  if (v11 <= 0x3F0)
    return tiny_memalign((uint64_t)a1, a2, v12, v11);
  if (v12 > 0x3F0 && a2 <= 0x200)
    return szone_malloc(a1, v12);
  if (v12 <= 0x3F0)
  {
    v12 = 1024;
    v11 = a2 + 1023;
  }
  if (v11 <= 0x3C00)
    return small_memalign((uint64_t)a1, a2, v12, v11);
  if (v12 > 0x3C00 && a2 <= vm_page_size)
    return szone_malloc(a1, v12);
  if (v12 >= 0x3C01)
    v9 = v12;
  else
    v9 = 15361;
  if (vm_kernel_page_mask <= vm_page_mask)
    v8 = vm_page_mask;
  else
    v8 = vm_kernel_page_mask;
  if (vm_kernel_page_mask <= vm_page_mask)
    v7 = vm_page_mask;
  else
    v7 = vm_kernel_page_mask;
  v6 = (v9 + v8) & ~v7;
  if (vm_kernel_page_shift <= vm_page_shift)
    v5 = vm_page_shift;
  else
    v5 = vm_kernel_page_shift;
  v10 = v6 >> v5;
  if (!(v6 >> v5))
    return 0;
  if (vm_page_shift <= (int)__clz(__rbit64(a2)))
    return large_malloc(a1, v10, __clz(__rbit64(a2)), 0);
  else
    return large_malloc(a1, v10, vm_page_shift, 0);
}

uint64_t szone_size_try_large(os_unfair_lock_s *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v4 = 0;
  os_unfair_lock_lock_with_options(&a1[4704], 327680);
  v3 = large_entry_for_pointer_no_lock((uint64_t)a1, a2);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  os_unfair_lock_unlock(a1 + 4704);
  return v4;
}

uint64_t szone_realloc(os_unfair_lock_s *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  if (!a2)
    return szone_malloc(a1, a3);
  if (!a3)
  {
    szone_free(a1, a2, 0, a4, a5, a6, a7, a8);
    return szone_malloc(a1, 1uLL);
  }
  v23 = szone_size(a1, a2);
  if (!v23)
  {
    malloc_zone_error(a1[4098]._os_unfair_lock_opaque, 1, (uint64_t)"pointer %p being reallocated was not allocated\n", v8, v9, v10, v11, v12, a2);
    return 0;
  }
  v22 = szone_good_size((uint64_t)a1, a3);
  if (v22 == v23)
    return a2;
  if (v22 <= 0x3F0)
  {
    if (v23 <= 0x3F0)
    {
      if (v22 <= v23 >> 1)
        return tiny_try_shrink_in_place((uint64_t)&a1[4128], a2, v23, v22);
      if (v22 <= v23)
      {
        if ((a1[4098]._os_unfair_lock_opaque & 0x20) != 0)
          _platform_memset(a2 + a3, 170, v23 - a3);
        return a2;
      }
      if (tiny_try_realloc_in_place((uint64_t)&a1[4128], a2, v23, v22))
      {
        if ((a1[4098]._os_unfair_lock_opaque & 0x20) != 0)
          _platform_memset(a2 + v23, 170, v22 - v23);
        return a2;
      }
    }
    goto LABEL_48;
  }
  if (v22 <= 0x3C00)
  {
    if (v23 > 0x3F0 && v23 <= 0x3C00)
    {
      if (v22 <= v23 >> 1)
        return small_try_shrink_in_place((uint64_t)&a1[4320], a2, v23, v22);
      if (v22 <= v23)
      {
        if ((a1[4098]._os_unfair_lock_opaque & 0x20) != 0)
          _platform_memset(a2 + a3, 170, v23 - a3);
        return a2;
      }
      if (small_try_realloc_in_place((uint64_t)&a1[4320], a2, v23, v22))
      {
        if ((a1[4098]._os_unfair_lock_opaque & 0x20) != 0)
          _platform_memset(a2 + v23, 170, v22 - v23);
        return a2;
      }
    }
LABEL_48:
    if (v22 <= v23 >> 1 || v22 > v23)
    {
      v21 = szone_malloc(a1, a3);
      if (v21)
      {
        if (v23 >= a3)
          v20 = a3;
        else
          v20 = v23;
        _platform_memmove(v21, a2, v20);
        szone_free(a1, a2, v13, v14, v15, v16, v17, v18);
        return v21;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      if ((a1[4098]._os_unfair_lock_opaque & 0x20) != 0)
        _platform_memset(a2 + a3, 170, v23 - a3);
      return a2;
    }
  }
  if ((a1[4098]._os_unfair_lock_opaque & 0x80) != 0 || v23 <= 0x3C00)
    goto LABEL_48;
  if (v22 <= v23 >> 1)
    return large_try_shrink_in_place((uint64_t)a1, a2, v23, v22);
  if (v22 > v23)
  {
    if (!large_try_realloc_in_place((uint64_t)a1, a2, v23, v22))
      goto LABEL_48;
    if ((a1[4098]._os_unfair_lock_opaque & 0x20) != 0)
      _platform_memset(a2 + v23, 170, v22 - v23);
    return a2;
  }
  else
  {
    if ((a1[4098]._os_unfair_lock_opaque & 0x20) != 0)
      _platform_memset(a2 + a3, 170, v23 - a3);
    return a2;
  }
}

uint64_t szone_good_size(uint64_t a1, unint64_t a2)
{
  vm_size_t v3;
  vm_size_t v4;
  vm_size_t v5;
  vm_size_t v6;
  unsigned __int16 v7;
  unsigned __int16 v8;

  if (a2 > 0x3F0)
  {
    if (a2 > 0x3C00)
    {
      if (vm_kernel_page_mask <= vm_page_mask)
        v6 = vm_page_mask;
      else
        v6 = vm_kernel_page_mask;
      if (vm_kernel_page_mask <= vm_page_mask)
        v5 = vm_page_mask;
      else
        v5 = vm_kernel_page_mask;
      if (a2 <= ((a2 + v6) & ~v5))
      {
        if (vm_kernel_page_mask <= vm_page_mask)
          v4 = vm_page_mask;
        else
          v4 = vm_kernel_page_mask;
        if (vm_kernel_page_mask <= vm_page_mask)
          v3 = vm_page_mask;
        else
          v3 = vm_kernel_page_mask;
        return (a2 + v4) & ~v3;
      }
      else
      {
        return -1;
      }
    }
    else
    {
      v8 = (a2 + 511) >> 9;
      if (!v8)
        v8 = 1;
      return v8 << 9;
    }
  }
  else
  {
    v7 = (a2 + 15) >> 4;
    if (!v7)
      v7 = 1;
    return 16 * v7;
  }
}

uint64_t szone_batch_malloc(uint64_t a1, unint64_t a2, uint64_t *a3, unsigned int a4)
{
  if (a2 > 0x3F0)
    return 0;
  else
    return tiny_batch_malloc(a1, a2, a3, a4);
}

void szone_batch_free(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unsigned int v11;

  v11 = a3;
  if (a3)
  {
    tiny_batch_free((uint64_t)a1, a2, a3);
    while (v11--)
    {
      v10 = *(_QWORD *)(a2 + 8 * v11);
      if (v10)
        szone_free(a1, v10, v3, v4, v5, v6, v7, v8);
    }
  }
}

BOOL szone_claimed_address(os_unfair_lock_s *a1, unint64_t a2)
{
  BOOL v3;

  v3 = 1;
  if (!tiny_claimed_address((uint64_t)&a1[4128], a2))
  {
    v3 = 1;
    if (!small_claimed_address((uint64_t)&a1[4320], a2))
      return large_claimed_address(a1, a2);
  }
  return v3;
}

uint64_t scalable_zone_info(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return scalable_zone_info_task(mach_task_self_, (unsigned int (*)(_QWORD, _QWORD, uint64_t, uint64_t *))_malloc_default_reader_0, a1, a2, a3);
}

uint64_t scalable_zone_info_task(unsigned int a1, unsigned int (*a2)(_QWORD, _QWORD, uint64_t, uint64_t *), uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v6;
  int i;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(_QWORD, _QWORD, uint64_t, uint64_t *);
  unsigned int v16;
  _DWORD v18[3];
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;

  v16 = a1;
  v15 = a2;
  v14 = a3;
  v13 = a4;
  v12 = a5;
  v11 = a3;
  v10 = 0;
  v9 = 0;
  v8 = 0;
  i = 0;
  v6 = 0;
  if (a2(a1, *(_QWORD *)(a3 + 17136), 2560, &v6))
  {
    return 0;
  }
  else
  {
    for (i = -1; i < *(_DWORD *)(v11 + 17120); ++i)
    {
      v10 += *(_QWORD *)(v6 + 2560 * i + 2136);
      v10 += *(_QWORD *)(v6 + 2560 * i + 2128);
      v9 += *(_DWORD *)(v6 + 2560 * i + 2168);
      v8 += *(_QWORD *)(v6 + 2560 * i + 2152);
    }
    v20 = v9;
    v21 = v8;
    if (v15(v16, *(_QWORD *)(v11 + 17904), 2560, &v6))
    {
      return 0;
    }
    else
    {
      v9 = 0;
      v8 = 0;
      for (i = -1; i < *(_DWORD *)(v11 + 17888); ++i)
      {
        v10 += *(_QWORD *)(v6 + 2560 * i + 2136);
        v10 += *(_QWORD *)(v6 + 2560 * i + 2128);
        v9 += *(_DWORD *)(v6 + 2560 * i + 2168);
        v8 += *(_QWORD *)(v6 + 2560 * i + 2152);
      }
      v22 = v9;
      v23 = v8;
      v24 = *(_DWORD *)(v11 + 18820);
      v25 = *(_QWORD *)(v11 + 18840);
      v26 = 0;
      v27 = *(_DWORD *)(v11 + 16392);
      v18[0] = v20 + v9 + v24 + HIDWORD(v25);
      v18[1] = v21 + v8 + v25;
      v19 = ((*(_QWORD *)(v11 + 17288) - *(_QWORD *)(v11 + 17296)) << 23)
          + ((*(_QWORD *)(v11 + 16520) - *(_QWORD *)(v11 + 16528)) << 20)
          + v25;
      v18[2] = v19 - v10;
      _platform_memmove(v13, v18, 4 * v12);
      return 1;
    }
  }
}

uint64_t _malloc_default_reader_0(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v5;

  v5 = 1;
  if (a1)
    v5 = mach_task_is_self(a1) != 0;
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x1B8C0);
  }
  *a4 = a2;
  return 0;
}

uint64_t szone_pressure_relief(uint64_t a1, uint64_t a2)
{
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855769125, a1, a2, 0);
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855769126, a1, a2, 0);
  return 0;
}

uint64_t scalable_zone_statistics(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 4uLL)
    __asm { BR              X8 }
  return 0;
}

uint64_t szone_ptr_in_use_enumerator(unsigned int a1, uint64_t a2, int a3, unint64_t a4, uint64_t (*a5)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t *a4), void (*a6)(_QWORD, uint64_t, uint64_t, __int128 *, uint64_t))
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  void (*v11)(_QWORD, uint64_t, uint64_t, __int128 *, uint64_t);
  uint64_t (*v12)(unsigned int, uint64_t, uint64_t, uint64_t *);
  unint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;

  v16 = a1;
  v15 = a2;
  v14 = a3;
  v13 = a4;
  v12 = a5;
  v11 = a6;
  v10 = 0;
  v12 = reader_or_in_memory_fallback_0((uint64_t)a5, a1);
  v7 = v12(v16, v13, 20480, &v10);
  if (v7)
  {
    return v7;
  }
  else
  {
    v8 = tiny_in_use_enumerator(v16, v15, v14, v10, (uint64_t (*)(_QWORD, unint64_t, unint64_t, uint64_t *))v12, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t *, uint64_t))v11);
    if (v8)
    {
      return v8;
    }
    else
    {
      v9 = small_in_use_enumerator(v16, v15, v14, v10, (uint64_t (*)(_QWORD, unint64_t, unint64_t, uint64_t *))v12, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t *, uint64_t))v11);
      if (v9)
        return v9;
      else
        return large_in_use_enumerator(v16, v15, v14, *(_QWORD *)(v10 + 18832), *(_DWORD *)(v10 + 18824), (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v12, v11);
    }
  }
}

uint64_t szone_check(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!(++szone_check_counter % 0x2710u))
    malloc_report(5, (uint64_t)"at szone_check counter=%d\n", a3, a4, a5, a6, a7, a8, szone_check_counter);
  if (szone_check_counter >= szone_check_start)
  {
    if (szone_check_counter % szone_check_modulo)
      return 1;
    else
      return szone_check_all(a1);
  }
  else
  {
    return 1;
  }
}

uint64_t szone_print_self(char *a1, int a2)
{
  int v2;

  if (a2)
    v2 = 2;
  else
    v2 = 0;
  return szone_print(mach_task_self_, v2, a1, (unsigned int (*)(_QWORD, uint64_t, uint64_t, uint64_t *))_malloc_default_reader_0, (void (*)(const char *, ...))malloc_report_simple);
}

uint64_t szone_log(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16400) = a2;
  return result;
}

uint64_t szone_force_lock(uint64_t a1)
{
  int i;
  int j;

  for (i = 0; i < *(_DWORD *)(a1 + 17120); ++i)
    szone_force_lock_magazine(a1, (os_unfair_lock_s *)(*(_QWORD *)(a1 + 17136) + 2560 * i));
  szone_force_lock_magazine(a1, (os_unfair_lock_s *)(*(_QWORD *)(a1 + 17136) - 2560));
  for (j = 0; j < *(_DWORD *)(a1 + 17888); ++j)
    szone_force_lock_magazine(a1, (os_unfair_lock_s *)(*(_QWORD *)(a1 + 17904) + 2560 * j));
  szone_force_lock_magazine(a1, (os_unfair_lock_s *)(*(_QWORD *)(a1 + 17904) - 2560));
  return os_unfair_lock_lock_with_options(a1 + 18816, 327680);
}

void szone_force_unlock(uint64_t a1)
{
  int i;
  int j;

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 18816));
  for (i = -1; i < *(_DWORD *)(a1 + 17888); ++i)
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 17904) + 2560 * i));
  for (j = -1; j < *(_DWORD *)(a1 + 17120); ++j)
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 17136) + 2560 * j));
}

uint64_t szone_statistics(uint64_t a1, uint64_t a2)
{
  return szone_statistics_task(mach_task_self_, a1, 0, a2);
}

uint64_t szone_locked(uint64_t a1)
{
  int i;
  int j;

  if (os_unfair_lock_trylock((os_unfair_lock_t)(a1 + 18816)))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 18816));
    for (i = -1; i < *(_DWORD *)(a1 + 17888); ++i)
    {
      if (!os_unfair_lock_trylock((os_unfair_lock_t)(*(_QWORD *)(a1 + 17904) + 2560 * i)))
        return 1;
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 17904) + 2560 * i));
    }
    for (j = -1; j < *(_DWORD *)(a1 + 17120); ++j)
    {
      if (!os_unfair_lock_trylock((os_unfair_lock_t)(*(_QWORD *)(a1 + 17136) + 2560 * j)))
        return 1;
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 17136) + 2560 * j));
    }
    return 0;
  }
  else
  {
    return 1;
  }
}

uint64_t szone_reinit_lock(uint64_t result)
{
  int i;
  int j;

  *(_DWORD *)(result + 18816) = 0;
  for (i = -1; i < *(_DWORD *)(result + 17888); ++i)
    *(_DWORD *)(*(_QWORD *)(result + 17904) + 2560 * i) = 0;
  for (j = -1; j < *(_DWORD *)(result + 17120); ++j)
    *(_DWORD *)(*(_QWORD *)(result + 17136) + 2560 * j) = 0;
  return result;
}

uint64_t szone_print_task(unsigned int a1, int a2, char *a3, unsigned int (*a4)(_QWORD, uint64_t, uint64_t, uint64_t *), void (*a5)(const char *, ...))
{
  return szone_print(a1, a2, a3, a4, a5);
}

uint64_t szone_statistics_task(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  int i;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(unsigned int, uint64_t, uint64_t, uint64_t *);
  uint64_t v16;
  unsigned int v17;

  v17 = a1;
  v16 = a2;
  v14 = a4;
  v15 = reader_or_in_memory_fallback_0(a3, a1);
  v13 = 0;
  v12 = v15(v17, v16, 20480, &v13);
  if (v12)
  {
    return v12;
  }
  else
  {
    v11 = 0;
    v10 = 0;
    v9 = 0;
    v8 = 0;
    i = 0;
    v6 = 0;
    v12 = v15(v17, *(_QWORD *)(v13 + 17136), 2560 * *(int *)(v13 + 17120), &v6);
    if (v12)
    {
      return v12;
    }
    else
    {
      for (i = -1; i < *(_DWORD *)(v13 + 17120); ++i)
      {
        v10 += *(_QWORD *)(v6 + 2560 * i + 2136);
        v10 += *(_QWORD *)(v6 + 2560 * i + 2128);
        v9 += *(_DWORD *)(v6 + 2560 * i + 2168);
        v8 += *(_QWORD *)(v6 + 2560 * i + 2152);
      }
      v12 = v15(v17, *(_QWORD *)(v13 + 17904), 2560 * *(int *)(v13 + 17888), &v6);
      if (v12)
      {
        return v12;
      }
      else
      {
        for (i = -1; i < *(_DWORD *)(v13 + 17888); ++i)
        {
          v10 += *(_QWORD *)(v6 + 2560 * i + 2136);
          v10 += *(_QWORD *)(v6 + 2560 * i + 2128);
          v9 += *(_DWORD *)(v6 + 2560 * i + 2168);
          v8 += *(_QWORD *)(v6 + 2560 * i + 2152);
        }
        v11 = *(_QWORD *)(v13 + 18840);
        *(_DWORD *)v14 = v9 + *(_DWORD *)(v13 + 18820);
        *(_QWORD *)(v14 + 8) = v8 + v11;
        v4 = ((*(_QWORD *)(v13 + 17288) - *(_QWORD *)(v13 + 17296)) << 23)
           + ((*(_QWORD *)(v13 + 16520) - *(_QWORD *)(v13 + 16528)) << 20)
           + v11;
        *(_QWORD *)(v14 + 24) = v4;
        *(_QWORD *)(v14 + 16) = v4;
        *(_QWORD *)(v14 + 16) -= v10;
        return 0;
      }
    }
  }
}

_QWORD *create_scalable_szone(uint64_t a1, int a2)
{
  int v3;
  int v4;
  int32_t v5;
  unint64_t v6;
  _QWORD *pages;
  int v9;

  pages = (_QWORD *)mvm_allocate_pages((vm_page_size + 20479) & ~(vm_page_size - 1), 0, 0x40000000, 1);
  if (!pages)
    return 0;
  if (mvm_aslr_enabled())
    v9 = a2 & 0xBFFFFFFF;
  else
    v9 = a2 | 0x40000000;
  v6 = MEMORY[0xFFFFFC038];
  if (max_magazines <= 1)
  {
    v3 = 1;
  }
  else
  {
    if (max_magazines >= 0x40)
      v4 = 64;
    else
      v4 = max_magazines;
    v3 = v4;
  }
  rack_init((uint64_t)(pages + 2064), 1, v3, v9);
  rack_init((uint64_t)(pages + 2160), 2, v3, v9);
  if ((large_cache_enabled & 1) != 0)
  {
    pages[2553] = v6 >> 10;
    if (v6 < magazine_large_expanded_cache_threshold)
    {
      *((_DWORD *)pages + 5098) = 16;
      pages[2550] = 0x8000000;
    }
    else
    {
      *((_DWORD *)pages + 5098) = 64;
      pages[2550] = 0x20000000;
    }
    v5 = NSVersionOfLinkTimeLibrary("System");
    *((_DWORD *)pages + 5102) = v5 != -1 && v5 >> 16 < 112;
  }
  pages[2556] = malloc_entropy[0];
  *((_DWORD *)pages + 26) = 16;
  pages[2] = szone_size;
  pages[3] = szone_malloc;
  pages[4] = szone_calloc;
  pages[5] = szone_valloc;
  pages[6] = szone_free;
  pages[7] = szone_realloc;
  pages[8] = szone_destroy;
  pages[10] = szone_batch_malloc;
  pages[11] = szone_batch_free;
  pages[12] = szone_introspect;
  pages[14] = szone_memalign;
  pages[15] = szone_free_definite_size;
  pages[16] = szone_pressure_relief;
  pages[17] = szone_claimed_address;
  pages[18] = szone_try_free_default;
  pages[20] = szone_malloc_type_malloc;
  pages[21] = szone_malloc_type_calloc;
  pages[22] = szone_malloc_type_realloc;
  pages[23] = szone_malloc_type_memalign;
  *pages = 0;
  pages[1] = 0;
  mprotect(pages, 0xC8uLL, 1);
  *((_DWORD *)pages + 4098) = v9;
  *((_DWORD *)pages + 4704) = 0;
  pages[2048] = -1;
  return pages;
}

BOOL mvm_aslr_enabled()
{
  return _dyld_get_image_slide(&dword_0) != 0;
}

void szone_destroy(os_unfair_lock_s *a1)
{
  mach_vm_address_t v2;
  mach_vm_size_t v3;
  mach_vm_address_t *v4;
  uint64_t os_unfair_lock_opaque;
  os_unfair_lock_s *v6;

  v6 = a1;
  os_unfair_lock_opaque = 0;
  v4 = 0;
  v2 = 0;
  v3 = 0;
  if ((large_cache_enabled & 1) != 0)
    large_destroy_cache(v6);
  os_unfair_lock_opaque = v6[4706]._os_unfair_lock_opaque;
  while (os_unfair_lock_opaque--)
  {
    v4 = (mach_vm_address_t *)(*(_QWORD *)&v6[4708]._os_unfair_lock_opaque + 24 * os_unfair_lock_opaque);
    if (*v4)
      mvm_deallocate_pages(*v4, v4[1], v6[4098]._os_unfair_lock_opaque);
  }
  large_entries_free_no_lock((uint64_t)v6, *(_QWORD *)&v6[4708]._os_unfair_lock_opaque, v6[4706]._os_unfair_lock_opaque, &v2);
  if (v3)
    mvm_deallocate_pages(v2, v3, v6[4098]._os_unfair_lock_opaque);
  rack_destroy_regions((uint64_t)&v6[4128], 0x100000uLL);
  rack_destroy_regions((uint64_t)&v6[4320], 0x800000uLL);
  rack_destroy((uint64_t)&v6[4128]);
  rack_destroy((uint64_t)&v6[4320]);
  mvm_deallocate_pages((mach_vm_address_t)v6, (vm_page_size + 20479) & ~(vm_page_size - 1), 0);
}

void szone_try_free_default(_DWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _szone_free(a1, a2, 1, a4, a5, a6, a7, a8);
}

unint64_t szone_malloc_type_malloc(os_unfair_lock_s *a1, unint64_t a2)
{
  return szone_malloc(a1, a2);
}

unint64_t szone_malloc_type_calloc(os_unfair_lock_s *a1, unint64_t a2, unint64_t a3)
{
  return szone_calloc(a1, a2, a3);
}

uint64_t szone_malloc_type_realloc(os_unfair_lock_s *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return szone_realloc(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t szone_malloc_type_memalign(os_unfair_lock_s *a1, vm_size_t a2, unint64_t a3)
{
  return szone_memalign(a1, a2, a3);
}

_QWORD *create_scalable_zone(uint64_t a1, int a2)
{
  return create_scalable_szone(a1, a2);
}

uint64_t tiny_region_for_ptr_no_lock(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = hash_lookup_region_no_lock(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2 & 0xFFFFFFFFFFF00000);
  if (v4)
    return *(_QWORD *)v4;
  else
    return 0;
}

uint64_t small_region_for_ptr_no_lock(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = hash_lookup_region_no_lock(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2 & 0xFFFFFFFFFF800000);
  if (v4)
    return *(_QWORD *)v4;
  else
    return 0;
}

uint64_t hash_lookup_region_no_lock(uint64_t a1, uint64_t a2, char a3, unint64_t a4)
{
  unint64_t v5;

  if (!a2)
    return 0;
  v5 = (0x9E3779B97F4A7C55 * (a4 >> 20)) >> (64 - a3);
  do
  {
    if (!*(_QWORD *)(a1 + 8 * v5))
      return 0;
    if (*(_QWORD *)(a1 + 8 * v5) == a4)
      return a1 + 8 * v5;
    if (++v5 == a2)
      v5 = 0;
  }
  while (v5 != (0x9E3779B97F4A7C55 * (a4 >> 20)) >> (64 - a3));
  return 0;
}

uint64_t (*reader_or_in_memory_fallback_0(uint64_t a1, unsigned int a2))(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v3;

  if (a1)
    return (uint64_t (*)(unsigned int, uint64_t, uint64_t, _QWORD *))a1;
  v3 = 1;
  if (a2)
    v3 = mach_task_is_self(a2) != 0;
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x1D3A8);
  }
  return _malloc_default_reader_0;
}

uint64_t szone_check_all(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v6;
  uint64_t v7;
  unint64_t i;
  unint64_t j;

  if (tiny_check(a1 + 16512, szone_check_counter))
  {
    for (i = 0; i < **(_QWORD **)(a1 + 17304); ++i)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 17304) + 16) + 8 * i);
      if (v7 != -1 && v7)
      {
        v6 = mag_lock_zine_for_region_trailer(*(_QWORD *)(a1 + 17904), v7, *(_DWORD *)(v7 + 24));
        if (!small_check_region(a1 + 17280, v7, i, szone_check_counter, v1, v2, v3, v4))
        {
          os_unfair_lock_unlock(v6);
          *(_DWORD *)(a1 + 16392) &= ~0x80000000;
          return 0;
        }
        os_unfair_lock_unlock(v6);
      }
    }
    for (j = 0; j < 0x1F; ++j)
    {
      if (!small_free_list_check(a1 + 17280, j))
      {
        *(_DWORD *)(a1 + 16392) &= ~0x80000000;
        return 0;
      }
    }
    return 1;
  }
  else
  {
    *(_DWORD *)(a1 + 16392) &= ~0x80000000;
    return 0;
  }
}

os_unfair_lock_s *mag_lock_zine_for_region_trailer(uint64_t a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v4;
  int v5;
  int v6;

  v6 = a3;
  v4 = (os_unfair_lock_s *)(a1 + 2560 * a3);
  os_unfair_lock_lock_with_options(v4, 327680);
  while (1)
  {
    v5 = *(_DWORD *)(a2 + 24);
    if (v6 == v5)
      break;
    os_unfair_lock_unlock(v4);
    v6 = v5;
    v4 = (os_unfair_lock_s *)(a1 + 2560 * v5);
    os_unfair_lock_lock_with_options(v4, 327680);
  }
  return v4;
}

uint64_t szone_print(unsigned int a1, int a2, char *a3, unsigned int (*a4)(_QWORD, uint64_t, uint64_t, uint64_t *), void (*a5)(const char *, ...))
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  const void *v18;
  unint64_t i;
  void (*v20)(const char *, ...);
  unsigned int (*v21)(_QWORD, uint64_t, uint64_t, uint64_t *);
  const void *v22;
  int v23;
  unsigned int v24;
  _DWORD v25[13];

  v24 = a1;
  v23 = a2;
  v22 = a3;
  v21 = a4;
  v20 = a5;
  i = 0;
  v18 = 0;
  v17 = 0;
  v16 = a3;
  v15 = 0;
  if (a4(a1, (uint64_t)a3, 20480, &v15))
    return ((uint64_t (*)(const char *))v20)("Failed to read szone structure\n");
  if (!scalable_zone_info_task(v24, v21, v15, (uint64_t)v25, 0xDu))
    return ((uint64_t (*)(const char *))v20)("Failed to get scalable zone info\n");
  v20("Scalable zone %p: inUse=%u(%u) touched=%u allocated=%u flags=0x%x\n", v22, v25[0], v25[1], v25[2], v25[3], v25[12]);
  v20("\ttiny=%u(%u) small=%u(%u) large=%u(%u)\n", v25[4], v25[5], v25[6], v25[7], v25[8], v25[9]);
  if (!mach_task_is_self(v24))
    return ((uint64_t (*)(const char *))v20)("(unable to safely further examine remote process)\n");
  v20("%lu tiny regions:\n", *(_QWORD *)(v15 + 16520));
  if (*(_QWORD *)(v15 + 16528))
    v20("[%lu tiny regions have been vm_deallocate'd]\n", *(_QWORD *)(v15 + 16528));
  v14 = 0;
  v13 = 0;
  v12 = 0;
  if (v21(v24, *(_QWORD *)(v15 + 16536), 32, (uint64_t *)&v14))
    return ((uint64_t (*)(const char *))v20)("Failed to map tiny rack region_generation\n");
  if (v21(v24, v14[2], 8, &v13))
    return ((uint64_t (*)(const char *))v20)("Failed to map tiny rack hashed_regions\n");
  if (v21(v24, *(_QWORD *)(v15 + 17136), 2560 * *(int *)(v15 + 17120), &v12))
    return ((uint64_t (*)(const char *))v20)("Failed to map tiny rack magazines\n");
  v10 = 0;
  for (i = 0; i < *v14; ++i)
  {
    v18 = *(const void **)(v13 + 8 * i);
    if (v18 && v18 != (const void *)-1)
    {
      if (v21(v24, (uint64_t)v18, 0x100000, &v17))
        return ((uint64_t (*)(const char *, ...))v20)("Failed to map region %p\n", v18);
      v9 = *(_DWORD *)(v17 + 24);
      if (v9 == -1)
        ++v10;
      if (v18 == *(const void **)(v12 + 2560 * v9 + 2144))
        v7 = *(_QWORD *)(v12 + 2560 * v9 + 2136);
      else
        v7 = 0;
      if (v18 == *(const void **)(v12 + 2560 * v9 + 2144))
        print_tiny_region(v24, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v21, (uint64_t (*)(const char *, ...))v20, v23, (uint64_t)v18, v7, *(_QWORD *)(v12 + 2560 * v9 + 2128));
      else
        print_tiny_region(v24, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v21, (uint64_t (*)(const char *, ...))v20, v23, (uint64_t)v18, v7, 0);
    }
  }
  if (*(_QWORD *)(v12 - 408))
    v20("Tiny recirc depot: total bytes: %llu, in-use bytes: %llu, allocations: %llu, regions: %d (min # retained regions: %d)\n", *(_QWORD *)(v12 - 400), *(_QWORD *)(v12 - 408), *(unsigned int *)(v12 - 392), v10, recirc_retained_regions);
  else
    v20("Tiny recirc depot is empty\n");
  if (v23)
    print_tiny_free_list(v24, (unsigned int (*)(_QWORD, const void *, uint64_t, uint64_t *))v21, v20, v16 + 16512);
  v20("%lu small regions:\n", *(_QWORD *)(v15 + 17288));
  if (*(_QWORD *)(v15 + 17296))
    v20("[%lu small regions have been vm_deallocate'd]\n", *(_QWORD *)(v15 + 17296));
  if (v21(v24, *(_QWORD *)(v15 + 17304), 32, (uint64_t *)&v14))
    return ((uint64_t (*)(const char *))v20)("Failed to map small rack region_generation\n");
  if (v21(v24, v14[2], 8, &v13))
    return ((uint64_t (*)(const char *))v20)("Failed to map small rack hashed_regions\n");
  if (v21(v24, *(_QWORD *)(v15 + 17904), 2560 * *(int *)(v15 + 17888), &v12))
    return ((uint64_t (*)(const char *))v20)("Failed to map small rack magazines\n");
  v11 = 0;
  for (i = 0; i < *v14; ++i)
  {
    v18 = *(const void **)(v13 + 8 * i);
    if (v18 && v18 != (const void *)-1)
    {
      if (v21(v24, (uint64_t)v18, 0x800000, &v17))
        return ((uint64_t (*)(const char *, ...))v20)("Failed to map region %p\n", v18);
      v8 = *(_DWORD *)(v17 + 24);
      if (v8 == -1)
        ++v11;
      if (v18 == *(const void **)(v12 + 2560 * v8 + 2144))
        v6 = *(_QWORD *)(v12 + 2560 * v8 + 2136);
      else
        v6 = 0;
      if (v18 == *(const void **)(v12 + 2560 * v8 + 2144))
        print_small_region(v24, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v21, (uint64_t (*)(const char *, ...))v20, v15, v23, (uint64_t)v18, v6, *(_QWORD *)(v12 + 2560 * v8 + 2128));
      else
        print_small_region(v24, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v21, (uint64_t (*)(const char *, ...))v20, v15, v23, (uint64_t)v18, v6, 0);
    }
  }
  if (*(_QWORD *)(v12 - 408))
    v20("Small recirc depot: total bytes: %llu, in-use bytes: %llu, allocations: %llu, regions: %d (min # retained regions: %d)\n", *(_QWORD *)(v12 - 400), *(_QWORD *)(v12 - 408), *(unsigned int *)(v12 - 392), v11, recirc_retained_regions);
  else
    v20("Small recirc depot is empty\n");
  if (v23)
    print_small_free_list(v24, v21, (void (*)(const char *))v20, (uint64_t)(v16 + 17280));
  return large_debug_print(v24, v23, (uint64_t)v22, (unsigned int (*)(_QWORD, _QWORD, uint64_t, _QWORD **))v21, v20);
}

uint64_t szone_force_lock_magazine(uint64_t a1, os_unfair_lock_s *a2)
{
  uint64_t result;

  while (1)
  {
    result = os_unfair_lock_lock_with_options(a2, 327680);
    if (!a2[1]._os_unfair_lock_opaque)
      break;
    os_unfair_lock_unlock(a2);
    yield();
  }
  return result;
}

uint64_t yield()
{
  return thread_switch(0, 1, 1u);
}

_QWORD *small_finalize_region(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = (uint64_t)result;
  if (*(_QWORD *)(a2 + 2128))
  {
    v13 = *(_QWORD *)(a2 + 2144) + 0x800000 - *(_QWORD *)(a2 + 2128);
    v11 = *(_QWORD *)(a2 + 2128) >> 9;
    v9 = ((v13 - ((v13 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
    v10 = *(_WORD *)&stru_20.segname[2 * (((v13 - 1 - (((v13 - 1) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                   + ((v13 - 1) & 0xFFFFFFFFFF800000)] & 0x7FFF;
    if (v9)
    {
      if (v10 <= (int)v9)
      {
        v12 = v13 - (v10 << 9);
        if (*(__int16 *)&stru_20.segname[2 * (((v12 - ((v12 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                        + (v12 & 0xFFFFFFFFFF800000)] < 0)
        {
          v8 = small_free_list_find_by_ptr((uint64_t)result, a2, v12, v10, a5, a6, a7, a8);
          small_free_list_remove_ptr(v15, a2, v8, v10);
          v13 -= v10 << 9;
          v11 += v10;
        }
      }
    }
    result = small_free_list_add_ptr(v15, a2, v13, v11);
    *(_QWORD *)(a2 + 2128) = 0;
  }
  *(_QWORD *)(a2 + 2144) = 0;
  return result;
}

uint64_t small_free_list_find_by_ptr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int i;
  unint64_t v10;

  if (*(unsigned __int16 *)&stru_20.segname[2 * (((a3 - ((a3 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                           + (a3 & 0xFFFFFFFFFF800000)] != ((unsigned __int16)a4 | 0x8000))
  {
    malloc_zone_error(*(_DWORD *)(a1 + 620), 1, (uint64_t)"small_free_list_find_by_ptr: ptr is not free (ptr metadata !SMALL_IS_FREE), ptr=%p msize=%d metadata=0x%x\n", a4, a5, a6, a7, a8, a3);
    __break(1u);
    JUMPOUT(0x1E53CLL);
  }
  if (small_needs_oob_free_entry(a3, a4))
  {
    v10 = a3 & 0xFFFFFFFFFF800000;
    for (i = 0; (unint64_t)i < 0x21; ++i)
    {
      if (*(_WORD *)((char *)&loc_7FA4 + 18 * i + (a3 & 0xFFFFFFFFFF800000) + 18)
        && small_oob_free_entry_get_ptr(v10 + 32678 + 18 * i) == a3)
      {
        return v10 + 32678 + 18 * i;
      }
    }
  }
  return a3;
}

uint64_t small_free_list_remove_ptr(uint64_t a1, uint64_t a2, unint64_t a3, unsigned __int16 a4)
{
  small_free_mark_middle(a1, a3, a4);
  return small_free_list_remove_ptr_no_clear(a1, a2, a3, a4);
}

_QWORD *small_free_list_add_ptr(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  _DWORD *v4;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v11;

  if (a4 > 0x1Fu)
    v6 = 30;
  else
    v6 = a4 - 1;
  v7 = *(_QWORD **)(a2 + 32 + 8 * v6);
  v11 = (_QWORD *)small_free_list_from_ptr(a1, a3, a4);
  small_free_list_set_previous(a1, v11, 0);
  small_free_list_set_next(a1, (unint64_t)v11, (uint64_t)v7);
  small_free_mark_free(a1, (unint64_t)v11, a4);
  if (small_free_list_get_ptr((unint64_t)v7))
  {
    small_free_list_set_previous(a1, v7, (uint64_t)v11);
  }
  else
  {
    v4 = (_DWORD *)(a2 + 2088 + 4 * (v6 >> 5));
    *v4 |= 1 << (v6 & 0x1F);
  }
  *(_QWORD *)(a2 + 32 + 8 * v6) = v11;
  return v11;
}

uint64_t small_free_detach_region(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned __int16 v10;
  __int16 v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;

  v15 = a3 + 33280;
  v14 = a3 + 0x800000;
  v13 = 0;
  v12 = ((a3 + 33280) & 0xFFFFFFFFFF800000) + 40;
  while (v15 < v14)
  {
    v11 = *(_WORD *)(v12 + 2 * (((v15 - ((v15 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF));
    v10 = v11 & 0x7FFF;
    if ((v11 & 0x7FFF) == 0)
      break;
    if (v11 < 0)
    {
      v8 = small_free_list_find_by_ptr(a1, a2, v15, v10, a5, a6, a7, a8);
      small_free_list_remove_ptr_no_clear(a1, a2, v8, v10);
    }
    else
    {
      ++v13;
    }
    v15 += v10 << 9;
  }
  return v13;
}

uint64_t small_free_list_remove_ptr_no_clear(uint64_t a1, uint64_t a2, unint64_t a3, unsigned __int16 a4)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t ptr;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t previous;
  _QWORD *next;

  if (a4 > 0x1Fu)
    v22 = 30;
  else
    v22 = a4 - 1;
  previous = small_free_list_get_previous(a1, a3);
  next = (_QWORD *)small_free_list_get_next(a1, a3);
  if (small_free_list_get_ptr(previous))
  {
    v24 = small_free_list_get_next(a1, previous);
    ptr = small_free_list_get_ptr(v24);
    if (ptr != small_free_list_get_ptr(a3))
    {
      v20 = *(_DWORD *)(a1 + 620);
      v19 = small_free_list_get_ptr(a3);
      small_free_list_get_ptr(v24);
      malloc_zone_error(v20, 1, (uint64_t)"small_free_list_remove_ptr_no_clear: Internal invariant broken (next ptr of prev) for %p, prev_next=%p\n", v5, v6, v7, v8, v9, v19);
      __break(1u);
    }
    small_free_list_set_next(a1, previous, (uint64_t)next);
  }
  else
  {
    *(_QWORD *)(a2 + 32 + 8 * v22) = next;
    if (!small_free_list_get_ptr((unint64_t)next))
    {
      v4 = (_DWORD *)(a2 + 2088 + 4 * (v22 >> 5));
      *v4 &= ~(1 << (v22 & 0x1F));
    }
  }
  if (small_free_list_get_ptr((unint64_t)next))
  {
    v23 = small_free_list_get_previous(a1, (unint64_t)next);
    v18 = small_free_list_get_ptr(v23);
    if (v18 != small_free_list_get_ptr(a3))
    {
      v17 = *(_DWORD *)(a1 + 620);
      v16 = small_free_list_get_ptr(a3);
      small_free_list_get_ptr(v23);
      malloc_zone_error(v17, 1, (uint64_t)"small_free_list_remove_ptr_no_clear: Internal invariant broken (prev ptr of next) for %p, next_prev=%p\n", v10, v11, v12, v13, v14, v16);
      __break(1u);
    }
    small_free_list_set_previous(a1, next, previous);
  }
  result = small_is_oob_free_entry(a3);
  if ((_DWORD)result)
    return small_oob_free_entry_set_free(a3);
  return result;
}

uint64_t small_free_reattach_region(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 v4;
  __int16 v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v9 = a3 + 33280;
  v8 = a3 + 0x800000;
  v7 = 0;
  v6 = ((a3 + 33280) & 0xFFFFFFFFFF800000) + 40;
  while (v9 < v8)
  {
    v5 = *(_WORD *)(v6 + 2 * (((v9 - ((v9 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF));
    v4 = v5 & 0x7FFF;
    if ((v5 & 0x7FFF) == 0)
      break;
    if (v5 < 0)
      small_free_list_add_ptr(a1, a2, v9, v4);
    else
      v7 += v4 << 9;
    v9 += v4 << 9;
  }
  return v7;
}

uint64_t small_free_scan_madvise_free(uint64_t result, os_unfair_lock_s *a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  int i;
  vm_size_t v10;
  vm_size_t v11;
  vm_size_t v12;
  vm_size_t v13;
  unsigned __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  int v18;
  vm_size_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_t v26;
  uint64_t v27;
  os_unfair_lock_t v28;
  os_unfair_lock_t v29;
  os_unfair_lock_t v30;
  os_unfair_lock_t v31;

  v27 = result;
  v26 = a2;
  v25 = a3;
  v24 = a3 + 33280;
  v23 = a3 + 33280;
  v22 = a3 + 0x800000;
  v21 = ((a3 + 33280) & 0xFFFFFFFFFF800000) + 40;
  v20 = &v5;
  v6 = (char *)&v5 - ((4 * ((vm_kernel_page_size + 8355327) >> vm_kernel_page_shift >> 1) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (vm_kernel_page_size + 8355327) >> vm_kernel_page_shift >> 1;
  v18 = 0;
  while (v23 < v22)
  {
    v17 = ((v23 - ((v23 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
    v16 = 0;
    v16 = *(_WORD *)(v21 + 2 * (((v23 - ((v23 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF));
    v15 = v16 & 0x8000;
    v14 = v16 & 0x7FFF;
    if (v16 < 0 && !v14 && v23 == v24)
    {
      v13 = (v24 + 10 + vm_kernel_page_mask) & ~vm_kernel_page_mask;
      v12 = (v24 + 8388606) & ~vm_kernel_page_mask;
      if (v13 < v12)
      {
        v3 = v6;
        *(_WORD *)&v6[4 * v18] = (v13 - v24) >> vm_kernel_page_shift;
        *(_WORD *)&v3[4 * v18++ + 2] = (v12 - v13) >> vm_kernel_page_shift;
      }
      break;
    }
    if (!v14)
      break;
    if (v15)
    {
      v11 = (v23 + 10 + vm_kernel_page_mask) & ~vm_kernel_page_mask;
      v10 = (v23 + (v14 << 9) - 2) & ~vm_kernel_page_mask;
      if (v11 < v10)
      {
        v4 = v6;
        *(_WORD *)&v6[4 * v18] = (v11 - v25) >> vm_kernel_page_shift;
        *(_WORD *)&v4[4 * v18++ + 2] = (v10 - v11) >> vm_kernel_page_shift;
      }
    }
    v23 += v14 << 9;
  }
  if (v18 > 0)
  {
    i = 0;
    OSAtomicIncrement32Barrier((int32_t *)(v25 + 28));
    v28 = v26;
    v30 = v26;
    os_unfair_lock_unlock(v26);
    for (i = 0; i < v18; ++i)
    {
      v8 = 0;
      v8 = (void *)(v25 + (*(unsigned __int16 *)&v6[4 * i] << vm_kernel_page_shift));
      v7 = 0;
      v7 = *(unsigned __int16 *)&v6[4 * i + 2] << vm_kernel_page_shift;
      mvm_madvise_free(v27, v25, v8, (unint64_t)v8 + v7, 0, *(_DWORD *)(v27 + 620) & 0x20);
    }
    v29 = v26;
    v31 = v26;
    os_unfair_lock_lock_with_options(v26, 327680);
    return OSAtomicDecrement32Barrier((int32_t *)(v25 + 28));
  }
  return result;
}

unint64_t small_memalign(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  uint64_t v20;
  unint64_t should_clear;
  unsigned __int16 v22;

  v22 = (unint64_t)(a4 + 511) >> 9;
  should_clear = small_malloc_should_clear(a1 + 17280, v22, 0);
  if (!should_clear)
    return 0;
  v20 = should_clear & (a2 - 1);
  if (v20)
    v13 = a2 - v20;
  else
    v13 = 0;
  v19 = (unint64_t)(a3 + 511) >> 9;
  v18 = (unint64_t)(v13 + 511) >> 9;
  v17 = v22 - v19 - v18;
  if (v18)
  {
    v16 = mag_lock_zine_for_region_trailer_0(*(_QWORD *)(a1 + 17904), should_clear & 0xFFFFFFFFFF800000, *(int *)((char *)&dword_18 + (should_clear & 0xFFFFFFFFFF800000)));
    small_meta_header_set_in_use((should_clear & 0xFFFFFFFFFF800000) + 40, ((should_clear - ((should_clear & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF, v18);
    small_meta_header_set_in_use(((should_clear + v13) & 0xFFFFFFFFFF800000) + 40, ((should_clear + v13 - (((should_clear + v13) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF, v22 - v18);
    ++v16[542]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v16);
    free_small(a1 + 17280, should_clear, should_clear & 0xFFFFFFFFFF800000, v18 << 9, v4, v5, v6, v7);
    should_clear += v13;
  }
  if (v17)
  {
    v15 = should_clear + (v19 << 9);
    v14 = mag_lock_zine_for_region_trailer_0(*(_QWORD *)(a1 + 17904), should_clear & 0xFFFFFFFFFF800000, *(int *)((char *)&dword_18 + (should_clear & 0xFFFFFFFFFF800000)));
    small_meta_header_set_in_use((should_clear & 0xFFFFFFFFFF800000) + 40, ((should_clear - ((should_clear & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF, v19);
    small_meta_header_set_in_use((v15 & 0xFFFFFFFFFF800000) + 40, ((v15 - ((v15 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF, v17);
    ++v14[542]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v14);
    free_small(a1 + 17280, v15, v15 & 0xFFFFFFFFFF800000, v17 << 9, v8, v9, v10, v11);
  }
  return should_clear;
}

unint64_t small_malloc_should_clear(uint64_t a1, unsigned __int16 a2, int a3)
{
  mach_vm_address_t pages;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v10 = rack_get_thread_index(a1) % *(_DWORD *)(a1 + 608);
  v9 = *(_QWORD *)(a1 + 624) + 2560 * (int)v10;
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855769100, a1, a2 << 9, v9);
  os_unfair_lock_lock_with_options(v9, 327680);
  v11 = *(_QWORD *)(v9 + 8);
  if (*(unsigned __int16 *)(v9 + 16) == a2)
  {
    *(_QWORD *)(v9 + 8) = 0;
    *(_WORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)v9);
    if (a3)
      _platform_memset(v11, 0, a2 << 9);
    return v11;
  }
  else
  {
    while (1)
    {
      v12 = small_malloc_from_free_list(a1, v9, v10, a2);
      if (v12)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)v9);
        if (a3)
          _platform_memset(v12, 0, a2 << 9);
        return v12;
      }
      if (small_get_region_from_depot(a1, v9, v10, a2))
      {
        v13 = small_malloc_from_free_list(a1, v9, v10, a2);
        if (v13)
          break;
      }
      if (!*(_DWORD *)(v9 + 4))
      {
        *(_DWORD *)(v9 + 4) = 1;
        OSMemoryBarrier();
        os_unfair_lock_unlock((os_unfair_lock_t)v9);
        if ((*(_DWORD *)(a1 + 620) & 4) != 0)
          pages = mvm_allocate_pages(0x800000uLL, 0x17u, *(_DWORD *)(a1 + 620) & 0xFFFFFFFE, 2);
        else
          pages = mvm_allocate_pages(0x800000uLL, 0x17u, *(_DWORD *)(a1 + 620) & 0xFFFFFFFC, 2);
        v8 = pages;
        os_unfair_lock_lock_with_options(v9, 327680);
        if (v8)
        {
          region_set_cookie((_DWORD *)(v8 + 33276));
          v14 = small_malloc_from_region_no_lock((os_unfair_lock_s *)a1, v9, v10, a2, v8, v4, v5, v6);
          *(_DWORD *)(v9 + 4) = 0;
          OSMemoryBarrier();
          os_unfair_lock_unlock((os_unfair_lock_t)v9);
          return v14;
        }
        else
        {
          *(_DWORD *)(v9 + 4) = 0;
          OSMemoryBarrier();
          os_unfair_lock_unlock((os_unfair_lock_t)v9);
          return 0;
        }
      }
      os_unfair_lock_unlock((os_unfair_lock_t)v9);
      yield();
      os_unfair_lock_lock_with_options(v9, 327680);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)v9);
    if (a3)
      _platform_memset(v13, 0, a2 << 9);
    return v13;
  }
}

os_unfair_lock_s *mag_lock_zine_for_region_trailer_0(uint64_t a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v4;
  int v5;
  int v6;

  v6 = a3;
  v4 = (os_unfair_lock_s *)(a1 + 2560 * a3);
  os_unfair_lock_lock_with_options(v4, 327680);
  while (1)
  {
    v5 = *(_DWORD *)(a2 + 24);
    if (v6 == v5)
      break;
    os_unfair_lock_unlock(v4);
    v6 = v5;
    v4 = (os_unfair_lock_s *)(a1 + 2560 * v5);
    os_unfair_lock_lock_with_options(v4, 327680);
  }
  return v4;
}

uint64_t small_meta_header_set_in_use(uint64_t result, unsigned __int16 a2, __int16 a3)
{
  *(_WORD *)(result + 2 * a2) = a3;
  return result;
}

void free_small(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  signed int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  signed int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a2;
  v21 = a3;
  v19 = *(int *)((char *)&dword_18 + (a2 & 0xFFFFFFFFFF800000));
  v18 = *(_QWORD *)(a1 + 624) + 2560 * v19;
  if (a4)
  {
    LOWORD(v20) = (unint64_t)(a4 + 511) >> 9;
  }
  else
  {
    v20 = *(_WORD *)&stru_20.segname[2 * (((a2 - ((a2 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                   + (a2 & 0xFFFFFFFFFF800000)] & 0x7FFF;
    if (*(__int16 *)&stru_20.segname[2 * (((a2 - ((a2 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                    + (a2 & 0xFFFFFFFFFF800000)] < 0)
    {
      free_small_botch(a1, a2, a3, 0, a5, a6, a7, a8);
      return;
    }
  }
  os_unfair_lock_lock_with_options(v18, 327680);
  if (v19 != -1)
  {
    v17 = *(_QWORD *)(v18 + 8);
    v16 = *(_WORD *)(v18 + 16);
    v15 = *(_QWORD *)(v18 + 24);
    if (v22 == v17)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)v18);
      free_small_botch(a1, v22, v8, v9, v10, v11, v12, v13);
      return;
    }
    if ((*(_DWORD *)(a1 + 620) & 0x20) != 0 && (_WORD)v20)
      _platform_memset(v22, 85, (unsigned __int16)v20 << 9);
    *(_QWORD *)(v18 + 8) = v22;
    *(_WORD *)(v18 + 16) = v20;
    *(_QWORD *)(v18 + 24) = v21;
    if (!v17)
      goto LABEL_16;
    LOWORD(v20) = v16;
    v22 = v17;
    v21 = v15;
  }
  while (1)
  {
    v14 = *(_DWORD *)(v21 + 24);
    if (v19 == v14)
      break;
    os_unfair_lock_unlock((os_unfair_lock_t)v18);
    v19 = v14;
    v18 = *(_QWORD *)(a1 + 624) + 2560 * v14;
    os_unfair_lock_lock_with_options(v18, 327680);
  }
  if (small_free_no_lock(a1, v18, v19, v21, v22, v20))
LABEL_16:
    os_unfair_lock_unlock((os_unfair_lock_t)v18);
}

BOOL small_claimed_address(uint64_t a1, unint64_t a2)
{
  BOOL v3;
  uint64_t v4;

  v4 = small_region_for_ptr_no_lock(a1, a2);
  v3 = 0;
  if (v4)
  {
    v3 = 0;
    if (a2 >= v4 + 33280)
      return a2 < v4 + 0x800000;
  }
  return v3;
}

uint64_t small_try_shrink_in_place(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v9;
  uint64_t v10;
  __int16 v11;
  unsigned __int16 v12;

  v12 = a4 >> 9;
  v11 = (a3 >> 9) - v12;
  if ((unsigned __int16)(a3 >> 9) != v12)
  {
    v10 = a2 + (v12 << 9);
    v9 = mag_lock_zine_for_region_trailer_0(*(_QWORD *)(a1 + 624), a2 & 0xFFFFFFFFFF800000, *(int *)((char *)&dword_18 + (a2 & 0xFFFFFFFFFF800000)));
    small_meta_header_set_in_use((a2 & 0xFFFFFFFFFF800000) + 40, ((a2 - ((a2 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF, v12);
    small_meta_header_set_in_use((v10 & 0xFFFFFFFFFF800000) + 40, ((v10 - ((v10 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF, v11);
    ++v9[542]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v9);
    free_small(a1, v10, v10 & 0xFFFFFFFFFF800000, 0, v4, v5, v6, v7);
  }
  return a2;
}

uint64_t small_try_realloc_in_place(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unsigned __int16 os_unfair_lock_opaque;
  unsigned __int16 v12;
  os_unfair_lock_s *v13;
  unsigned __int16 v14;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  int v20;
  uint64_t v21;

  v21 = (a2 & 0xFFFFFFFFFF800000) + 40;
  v20 = ((a2 - ((a2 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
  v19 = a3 >> 9;
  v18 = (unint64_t)(a4 + 511) >> 9;
  v17 = v20 + v19;
  if (v17 >= 0x3FBF)
    return 0;
  v16 = a2 + a3;
  v13 = mag_lock_zine_for_region_trailer_0(*(_QWORD *)(a1 + 624), a2 & 0xFFFFFFFFFF800000, *(int *)((char *)&dword_18 + (a2 & 0xFFFFFFFFFF800000)));
  if (*(int *)((char *)&dword_18 + (a2 & 0xFFFFFFFFFF800000)) == -1)
  {
LABEL_17:
    os_unfair_lock_unlock(v13);
    return 0;
  }
  v12 = v18 - v19;
  os_unfair_lock_opaque = v13[4]._os_unfair_lock_opaque;
  if (*(_QWORD *)&v13[2]._os_unfair_lock_opaque == v16 && v19 + os_unfair_lock_opaque >= v18)
  {
    if (os_unfair_lock_opaque == v12)
    {
      *(_QWORD *)&v13[2]._os_unfair_lock_opaque = 0;
      LOWORD(v13[4]._os_unfair_lock_opaque) = 0;
      *(_QWORD *)&v13[6]._os_unfair_lock_opaque = 0;
    }
    else
    {
      LOWORD(v13[4]._os_unfair_lock_opaque) -= v12;
      *(_QWORD *)&v13[2]._os_unfair_lock_opaque += a4 - a3;
      small_meta_header_set_in_use(v21, v20 + v18, os_unfair_lock_opaque - v12);
    }
    small_meta_header_set_in_use(v21, v20, v18);
    small_meta_header_set_middle(v21, v17);
  }
  else if (*(_QWORD *)&v13[536]._os_unfair_lock_opaque == (a2 & 0xFFFFFFFFFF800000)
         && v12 < (int)(unsigned __int16)(*(_QWORD *)&v13[532]._os_unfair_lock_opaque >> 9)
         && (a2 & 0xFFFFFFFFFF800000) + 0x800000 - *(_QWORD *)&v13[532]._os_unfair_lock_opaque == a2 + a3)
  {
    small_meta_header_set_in_use(v21, v20, v18);
    small_meta_header_set_middle(v21, v17);
    *(_QWORD *)&v13[532]._os_unfair_lock_opaque -= v12 << 9;
    small_meta_header_set_in_use(v21, v20 + v18, *(_QWORD *)&v13[532]._os_unfair_lock_opaque >> 9);
  }
  else
  {
    v15 = *(_WORD *)(v21 + 2 * v17);
    if (v15 >= 0)
      goto LABEL_17;
    v14 = v15 & 0x7FFF;
    if (v19 + (v15 & 0x7FFF) < v18)
      goto LABEL_17;
    v10 = small_free_list_find_by_ptr(a1, (uint64_t)v13, v16, v14, v4, v5, v6, v7);
    small_free_list_remove_ptr(a1, (uint64_t)v13, v10, v14);
    small_meta_header_set_middle(v21, v17);
    if (v19 + v14 != v18)
      small_free_list_add_ptr(a1, (uint64_t)v13, a2 + (v18 << 9), v19 + v14 - v18);
    small_meta_header_set_in_use(v21, v20, v18);
  }
  *(_QWORD *)&v13[538]._os_unfair_lock_opaque += (v18 - v19) << 9;
  v9 = *(int *)((char *)dword_10 + (a2 & 0xFFFFFFFFFF800000)) + ((v18 - v19) << 9);
  *(int *)((char *)dword_10 + (a2 & 0xFFFFFFFFFF800000)) = v9;
  if (v9 >= 0x5F9E80)
    *((_BYTE *)&stru_20.cmd + (a2 & 0xFFFFFFFFFF800000)) = 0;
  os_unfair_lock_unlock(v13);
  return 1;
}

uint64_t small_meta_header_set_middle(uint64_t result, unsigned __int16 a2)
{
  *(_WORD *)(result + 2 * a2) = 0;
  return result;
}

uint64_t small_check_region(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  const char *v33;
  unint64_t v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t next;
  uint64_t previous;
  uint64_t ptr;
  unint64_t v42;
  _QWORD *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 v49;
  __int16 v50;
  int v51;
  __int16 v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = a1;
  v58 = a2;
  v57 = a3;
  v56 = a4;
  v55 = a2 + 33280;
  v54 = ((a2 + 33280) & 0xFFFFFFFFFF800000) + 40;
  v53 = a2 + 0x800000;
  v52 = 0;
  v51 = 0;
  v50 = 0;
  v49 = 0;
  v48 = 0;
  v47 = 0;
  v46 = 0;
  v45 = 0;
  v44 = 0;
  v44 = *(int *)((char *)&dword_18 + ((a2 + 33280) & 0xFFFFFFFFFF800000));
  v43 = 0;
  v43 = (_QWORD *)(*(_QWORD *)(a1 + 624) + 2560 * v44);
  if (a2 == v43[268])
  {
    v55 += v43[267];
    v53 -= v43[266];
  }
  while (v55 < v53)
  {
    v8 = (v55 & 0xFFFFFFFFFF800000) + 33280;
    v51 = ((v55 - v8) >> 9) & 0x3FFF;
    v50 = *(_WORD *)(v54 + 2 * (((v55 - v8) >> 9) & 0x3FFF));
    if (v50 < 0)
    {
      v49 = v50 & 0x7FFF;
      v42 = v55;
      v48 = v55;
      v45 = v55 + ((unsigned __int16)(v50 & 0x7FFF) << 9);
      if ((v50 & 0x7FFF) == 0)
      {
        v25 = v56;
        v26 = v55;
        v27 = 0;
        malloc_zone_check_fail(small_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for free block %p this msize=%d\n", a3, a4, a5, a6, a7, a8, v57);
        return 0;
      }
      if (small_needs_oob_free_entry(v55, v49))
      {
        ptr = small_oob_free_find_ptr(v55);
        if (ptr)
          v48 = ptr;
      }
      previous = small_free_list_get_previous(v59, v48);
      v47 = previous;
      next = small_free_list_get_next(v59, v48);
      v46 = next;
      if (previous)
      {
        v37 = (small_free_list_get_ptr(v47) & 0xFFFFFFFFFF800000) + 40;
        v38 = small_free_list_get_ptr(v47);
        if (*(__int16 *)(v37
                        + 2 * (((v38 - ((small_free_list_get_ptr(v47) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)) >= 0)
        {
          v36 = small_check_fail_msg[0];
          v25 = v56;
          v26 = v55;
          v27 = small_free_list_get_ptr(v47);
          malloc_zone_check_fail(v36, (uint64_t)"%ld, counter=%d\n*** invariant broken for %p (previous %p is not a free pointer)\n", v10, v11, v12, v13, v14, v15, v57);
          return 0;
        }
      }
      if (v46)
      {
        v34 = (small_free_list_get_ptr(v46) & 0xFFFFFFFFFF800000) + 40;
        v35 = small_free_list_get_ptr(v46);
        if (*(__int16 *)(v34
                        + 2 * (((v35 - ((small_free_list_get_ptr(v46) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)) >= 0)
        {
          v33 = small_check_fail_msg[0];
          v25 = v56;
          v26 = v55;
          v27 = small_free_list_get_ptr(v46);
          malloc_zone_check_fail(v33, (uint64_t)"%ld, counter=%d\n*** invariant broken for %p (next %p is not a free pointer)\n", v16, v17, v18, v19, v20, v21, v57);
          return 0;
        }
      }
      if ((*(_WORD *)&stru_20.segname[2 * (((v45 - 2 - (((v45 - 2) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                     + ((v45 - 2) & 0xFFFFFFFFFF800000)] & 0x7FFF) != v49)
      {
        v22 = *(_WORD *)&stru_20.segname[2 * (((v45 - 2 - (((v45 - 2) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                       + ((v45 - 2) & 0xFFFFFFFFFF800000)] & 0x7FFF;
        v32 = &v24;
        v25 = v56;
        v26 = v55;
        v27 = v45;
        v28 = v58 + 33280;
        v29 = v53;
        v30 = v49;
        v31 = v22;
        malloc_zone_check_fail(small_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for small free %p followed by %p in region [%p-%p] (end marker incorrect) should be %d; in fact %d\n",
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v57);
        return 0;
      }
      v55 = v45;
      v52 = 0x8000;
    }
    else
    {
      v49 = v50;
      if (!v50)
      {
        v9 = *(_QWORD *)(v59 + 8);
        v25 = v56;
        v26 = v55;
        v27 = v9;
        v28 = v53;
        malloc_zone_check_fail(small_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken: null msize ptr=%p num_small_regions=%d end=%p\n", a3, a4, a5, a6, a7, a8, v57);
        return 0;
      }
      v55 += v49 << 9;
      v52 = 0;
    }
  }
  return 1;
}

BOOL small_needs_oob_free_entry(uint64_t a1, unsigned __int16 a2)
{
  BOOL v3;

  v3 = 0;
  if ((a1 & ~(vm_page_size - 1)) == a1)
    return a2 << 9 >= vm_kernel_page_size;
  return v3;
}

uint64_t small_oob_free_find_ptr(uint64_t a1)
{
  int i;
  unint64_t v3;

  v3 = a1 & 0xFFFFFFFFFF800000;
  for (i = 0; (unint64_t)i < 0x21; ++i)
  {
    if (small_oob_free_entry_get_ptr(v3 + 32678 + 18 * i) == a1 && *(__int16 *)(v3 + 32678 + 18 * i + 16) < 0)
      return v3 + 32678 + 18 * i;
  }
  return 0;
}

uint64_t small_free_list_get_previous(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!a2)
  {
    __break(1u);
    JUMPOUT(0x20D1CLL);
  }
  if (small_is_oob_free_entry(a2))
    return small_oob_free_entry_get_previous(a2);
  else
    return small_inplace_free_entry_get_previous(a1, a2, v2, v3, v4, v5, v6, v7);
}

uint64_t small_free_list_get_next(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!a2)
  {
    __break(1u);
    JUMPOUT(0x20DA4);
  }
  if (small_is_oob_free_entry(a2))
    return small_oob_free_entry_get_next(a2);
  else
    return small_inplace_free_entry_get_next(a1, a2, v2, v3, v4, v5, v6, v7);
}

unint64_t small_free_list_get_ptr(unint64_t a1)
{
  if (!a1)
    return 0;
  if (small_is_oob_free_entry(a1))
    return small_oob_free_entry_get_ptr(a1);
  return a1;
}

uint64_t small_in_use_enumerator(unsigned int a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD, unint64_t, unint64_t, uint64_t *), void (*a6)(_QWORD, uint64_t, uint64_t, uint64_t *, uint64_t))
{
  int v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  int j;
  int k;
  unint64_t *v13;
  uint64_t v14;
  unsigned __int16 v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t i;
  unint64_t v32;
  void (*v33)(_QWORD, uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t (*v34)(_QWORD, unint64_t, unint64_t, uint64_t *);
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  _QWORD v40[512];

  v38 = a1;
  v37 = a2;
  v36 = a3;
  v35 = a4;
  v34 = a5;
  v33 = a6;
  v32 = 0;
  i = 0;
  v30 = 0;
  v29 = 0;
  v28 = 0;
  v27 = 0;
  v25 = 0;
  v26 = 0;
  v23 = 0;
  v24 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  v19 = 0;
  v18 = 0;
  v17 = 0;
  v16 = 0;
  v15 = 0;
  v14 = 0;
  v13 = 0;
  v28 = a5(a1, *(_QWORD *)(a4 + 17304), 32uLL, (uint64_t *)&v13);
  if (v28)
  {
    return v28;
  }
  else
  {
    v32 = *v13;
    v28 = v34(v38, v13[2], 8 * v32, &v30);
    if (v28)
    {
      return v28;
    }
    else if ((v36 & 1) != 0 && (v28 = v34(v38, *(_QWORD *)(v35 + 17904), 2560 * *(int *)(v35 + 17888), &v14)) != 0)
    {
      return v28;
    }
    else
    {
      for (i = 0; i < v32; ++i)
      {
        v27 = *(_QWORD *)(v30 + 8 * i);
        if (v27 && v27 != -1)
        {
          v25 = v27 + 33280;
          v26 = 8355328;
          if ((v36 & 4) != 0)
          {
            v23 = v27;
            v24 = 32678;
            v33(v38, v37, 4, (uint64_t *)&v23, 1);
          }
          if ((v36 & 6) != 0)
          {
            v21 = v25;
            v22 = 8355328;
            v33(v38, v37, 2, (uint64_t *)&v21, 1);
          }
          if ((v36 & 1) != 0)
          {
            v28 = v34(v38, v27, 0x800000uLL, &v20);
            if (v28)
              return v28;
            v10 = (_QWORD *)(v14 + 2560 * *(int *)(v20 + 24));
            v9 = 0;
            for (j = 0; j < *(_DWORD *)(v35 + 17888); ++j)
            {
              if (v27 == *(_QWORD *)(v14 + 2560 * j + 24))
                ++v9;
            }
            v19 = v20 + 40;
            v18 = 0;
            v17 = 16319;
            if (v27 == v10[268])
            {
              v18 += v10[267] >> 9;
              v17 -= v10[266] >> 9;
            }
            while (v18 < v17)
            {
              v16 = *(_WORD *)(v19 + 2 * v18);
              v15 = v16 & 0x7FFF;
              if ((v16 & 0x7FFF) == 0)
                return 5;
              if (v16 >= 0)
              {
                v8 = v27 + 33280 + (v18 << 9);
                v7 = 0;
                if (v9)
                {
                  for (k = 0; k < *(_DWORD *)(v35 + 17888); ++k)
                  {
                    if (v8 == *(_QWORD *)(v14 + 2560 * k + 8))
                    {
                      v7 = 1;
                      --v9;
                      break;
                    }
                  }
                }
                if (!v7)
                {
                  v40[2 * v29] = v8;
                  v40[2 * v29++ + 1] = v15 << 9;
                  if (v29 >= 0x100)
                  {
                    v33(v38, v37, 1, v40, v29);
                    v29 = 0;
                  }
                }
              }
              v18 += v15;
            }
            if (v29)
            {
              v33(v38, v37, 1, v40, v29);
              v29 = 0;
            }
          }
        }
      }
      return 0;
    }
  }
}

unint64_t small_malloc_from_free_list(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  unsigned int v5;
  unint64_t v6;
  int i;
  int v8;
  unint64_t ptr;
  unsigned int v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unsigned __int16 v14;

  if (a4 > 0x1Fu)
    v5 = 30;
  else
    v5 = a4 - 1;
  v12 = a2 + 32;
  v11 = (unint64_t *)(a2 + 32 + 8 * v5);
  if (small_free_list_get_ptr(*v11))
  {
    ptr = small_free_list_get_ptr(*v11);
    v14 = a4;
    small_free_list_remove_ptr(a1, a2, *v11, a4);
  }
  else
  {
    v8 = v5 >> 5;
    v10 = 0;
    for (i = ~((1 << (v5 & 0x1F)) - 1); !v8; i = -1)
    {
      v10 = *(_DWORD *)(a2 + 2088) & i;
      if (v10)
        break;
      v8 = 1;
    }
    if ((v10 || v8 != 1)
      && (v13 = (unint64_t *)(v12 + 8 * (__clz(__rbit32(v10)) + 32 * v8)),
          (ptr = small_free_list_get_ptr(*v13)) != 0))
    {
      v14 = *(_WORD *)&stru_20.segname[2 * (((ptr - ((ptr & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                     + (ptr & 0xFFFFFFFFFF800000)] & 0x7FFF;
      small_free_list_remove_ptr(a1, a2, *v13, v14);
      if (v14 > (int)a4)
      {
        small_free_list_add_ptr(a1, a2, ptr + (a4 << 9), v14 - a4);
        v14 = a4;
      }
    }
    else
    {
      if (*(_QWORD *)(a2 + 2128) < (unint64_t)(a4 << 9))
        return 0;
      ptr = *(_QWORD *)(a2 + 2144) + 0x800000 - *(_QWORD *)(a2 + 2128);
      *(_QWORD *)(a2 + 2128) -= a4 << 9;
      if (*(_QWORD *)(a2 + 2128))
        small_meta_header_set_in_use((ptr & 0xFFFFFFFFFF800000) + 40, ((ptr + (a4 << 9) - (((ptr + (a4 << 9)) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF, *(_QWORD *)(a2 + 2128) >> 9);
      v14 = a4;
    }
  }
  ++*(_DWORD *)(a2 + 2168);
  *(_QWORD *)(a2 + 2152) += v14 << 9;
  region_check_cookie(ptr & 0xFFFFFFFFFF800000, (int *)((ptr & 0xFFFFFFFFFF800000) + 33276));
  v6 = *(int *)((char *)dword_10 + (ptr & 0xFFFFFFFFFF800000)) + (v14 << 9);
  *(int *)((char *)dword_10 + (ptr & 0xFFFFFFFFFF800000)) = v6;
  if (v6 >= 0x5F9E80)
    *((_BYTE *)&stru_20.cmd + (ptr & 0xFFFFFFFFFF800000)) = 0;
  small_meta_header_set_in_use((ptr & 0xFFFFFFFFFF800000) + 40, ((ptr - ((ptr & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF, v14);
  return ptr;
}

uint64_t small_get_region_from_depot(uint64_t a1, uint64_t a2, int a3, unsigned __int16 a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  unsigned __int16 v12;
  unint64_t msize_region;
  uint64_t v14;

  v14 = *(_QWORD *)(a1 + 624) - 2560;
  os_unfair_lock_lock_with_options(v14, 327680);
  v12 = a4;
  while (1)
  {
    msize_region = small_find_msize_region(a1, v14, 0xFFFFFFFFLL, v12);
    if (!msize_region)
    {
LABEL_3:
      os_unfair_lock_unlock((os_unfair_lock_t)v14);
      return 0;
    }
    if (!*(_DWORD *)(msize_region + 28))
      break;
    if (++v12 > 0x1Eu)
      goto LABEL_3;
  }
  if (*(_QWORD *)msize_region)
    *(_QWORD *)(*(_QWORD *)msize_region + 8) = *(_QWORD *)(msize_region + 8);
  else
    *(_QWORD *)(v14 + 2176) = *(_QWORD *)(msize_region + 8);
  if (*(_QWORD *)(msize_region + 8))
    **(_QWORD **)(msize_region + 8) = *(_QWORD *)msize_region;
  else
    *(_QWORD *)(v14 + 2184) = *(_QWORD *)msize_region;
  *(_QWORD *)msize_region = 0;
  *(_QWORD *)(msize_region + 8) = 0;
  --*(_DWORD *)(v14 + 2172);
  v11 = small_free_detach_region(a1, v14, msize_region, v4, v5, v6, v7, v8);
  *(_DWORD *)(msize_region + 24) = a3;
  if (*(_DWORD *)(msize_region + 28))
  {
    __break(1u);
    JUMPOUT(0x21C18);
  }
  v10 = small_free_reattach_region(a1, a2, msize_region);
  *(_QWORD *)(v14 + 2152) -= v10;
  *(_QWORD *)(v14 + 2160) -= 8355328;
  *(_DWORD *)(v14 + 2168) -= v11;
  *(_QWORD *)(a2 + 2152) += v10;
  *(_QWORD *)(a2 + 2160) += 8355328;
  *(_DWORD *)(a2 + 2168) += v11;
  if (*(_QWORD *)(a2 + 2184))
  {
    *(_QWORD *)msize_region = *(_QWORD *)(a2 + 2184);
    *(_QWORD *)(*(_QWORD *)(a2 + 2184) + 8) = msize_region;
  }
  else
  {
    *(_QWORD *)(a2 + 2176) = msize_region;
    *(_QWORD *)msize_region = 0;
  }
  *(_QWORD *)(a2 + 2184) = msize_region;
  *(_QWORD *)(msize_region + 8) = 0;
  *(_BYTE *)(msize_region + 32) = 0;
  ++*(_DWORD *)(a2 + 2172);
  os_unfair_lock_unlock((os_unfair_lock_t)v14);
  return 1;
}

uint64_t region_set_cookie(_DWORD *a1)
{
  uint64_t result;

  result = region_cookie();
  *a1 = result;
  return result;
}

unint64_t small_malloc_from_region_no_lock(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v10;
  int v11;

  v11 = a3;
  v10 = a4;
  if (*(_QWORD *)(a2 + 2128) || *(_QWORD *)(a2 + 2136))
    small_finalize_region(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a5 + 24) = v11;
  rack_region_insert(a1, a5);
  *(_QWORD *)(a2 + 2144) = a5;
  *(_DWORD *)(a5 + 16) = v10 << 9;
  small_meta_header_set_in_use(((a5 + 33280) & 0xFFFFFFFFFF800000) + 40, 0, v10);
  ++*(_DWORD *)(a2 + 2168);
  *(_QWORD *)(a2 + 2152) += v10 << 9;
  *(_QWORD *)(a2 + 2160) += 8355328;
  small_meta_header_set_in_use(((a5 + 33280) & 0xFFFFFFFFFF800000) + 40, v10, 16319 - v10);
  *(_QWORD *)(a2 + 2128) = (16319 - v10) << 9;
  *(_QWORD *)(a2 + 2136) = 0;
  if (*(_QWORD *)(a2 + 2184))
  {
    *(_QWORD *)a5 = *(_QWORD *)(a2 + 2184);
    *(_QWORD *)(*(_QWORD *)(a2 + 2184) + 8) = a5;
  }
  else
  {
    *(_QWORD *)(a2 + 2176) = a5;
    *(_QWORD *)a5 = 0;
  }
  *(_QWORD *)(a2 + 2184) = a5;
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 32) = 0;
  ++*(_DWORD *)(a2 + 2172);
  return a5 + 33280;
}

uint64_t small_size(uint64_t a1, uint64_t a2)
{
  int v3;
  int i;
  __int16 v5;

  if (!small_region_for_ptr_no_lock(a1, a2))
    return 0;
  if ((((a2 - ((a2 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF) >= 0x3FBF)
    return 0;
  v5 = *(_WORD *)&stru_20.segname[2 * (((a2 - ((a2 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                + (a2 & 0xFFFFFFFFFF800000)];
  if (v5 >= 0)
  {
    v3 = *(int *)((char *)&dword_18 + (a2 & 0xFFFFFFFFFF800000));
    if (v3 == -1)
    {
      for (i = 0; i < *(_DWORD *)(a1 + 608); ++i)
      {
        if (a2 == *(_QWORD *)(*(_QWORD *)(a1 + 624) + 2560 * i + 8))
          return 0;
      }
    }
    else if (a2 == *(_QWORD *)(*(_QWORD *)(a1 + 624) + 2560 * v3 + 8))
    {
      return 0;
    }
    return (unsigned __int16)v5 << 9;
  }
  return 0;
}

void free_small_botch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  malloc_zone_error(*(_DWORD *)(a1 + 620), 1, (uint64_t)"double free for ptr %p\n", a4, a5, a6, a7, a8, a2);
}

uint64_t small_free_no_lock(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned __int16 a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  unsigned __int16 v15;
  unint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned __int16 v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned __int16 v24;
  uint64_t v25;

  v25 = a5;
  v24 = a6;
  v23 = a5 & 0xFFFFFFFFFF800000 | 0x28;
  v22 = ((a5 - 33280) >> 9) & 0x3FFF;
  v21 = a6 << 9;
  v20 = a5 + v21;
  v19 = v22 + a6;
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855769116, a1, a2, a5);
  v18 = v25;
  region_check_cookie(a4, (int *)(a4 + 33276));
  if (v22 && (*(_WORD *)(v23 + 2 * (v22 - 1)) & 0x8000) != 0)
  {
    v17 = *(_WORD *)(v23 + 2 * (v22 - 1)) & 0x7FFF;
    if (*(unsigned __int16 *)(v23 + 2 * (v22 - v17)) != (v17 | 0x8000))
    {
      qword_A4008 = (uint64_t)"small free list metadata inconsistency (headers[previous] != previous size)";
      __break(1u);
      JUMPOUT(0x22470);
    }
    v16 = small_free_list_find_by_ptr(a1, a2, v25 - (v17 << 9), v17, v7, v8, v9, v10);
    small_free_list_remove_ptr(a1, a2, v16, v17);
    v25 -= v17 << 9;
    small_meta_header_set_middle(v23, v22);
    v24 += v17;
  }
  if (v20 < a4 + 0x800000 && (*(_WORD *)(v23 + 2 * v19) & 0x8000) != 0)
  {
    v15 = *(_WORD *)(v23 + 2 * v19) & 0x7FFF;
    v14 = small_free_list_find_by_ptr(a1, a2, v20, v15, v7, v8, v9, v10);
    small_free_list_remove_ptr(a1, a2, v14, v15);
    v24 += v15;
  }
  if ((*(_BYTE *)(a1 + 620) & 0x20) != 0)
  {
    if (v24)
      _platform_memset(v25, 85, v24 << 9);
    else
      malloc_zone_error(*(_DWORD *)(a1 + 620), 1, (uint64_t)"incorrect size information for %p - block header was damaged\n", v6, v7, v8, v9, v10, v25);
  }
  v11 = small_free_list_add_ptr(a1, a2, v25, v24);
  v13 = (unint64_t)v11;
  *(_QWORD *)(a2 + 2152) -= v21;
  *(_DWORD *)(a4 + 16) -= v21;
  if ((aggressive_madvise_enabled & 1) != 0)
    small_madvise_free_range_no_lock(a1, (os_unfair_lock_s *)a2, a4, (unint64_t)v11, v24, v18, v21);
  return small_free_try_recirc_to_depot(a1, (os_unfair_lock_s *)a2, a3, a4, v13, v24, v18, v21);
}

uint64_t print_small_free_list(unsigned int a1, unsigned int (*a2)(_QWORD, uint64_t, uint64_t, uint64_t *), void (*a3)(const char *), uint64_t a4)
{
  uint64_t result;
  const char *v5;
  uint64_t v6;
  const char *v7;
  void (*v8)(const char *, ...);
  const char *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int i;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(const char *);
  unsigned int (*v19)(_QWORD, uint64_t, uint64_t, uint64_t *);
  unsigned int v20;

  v20 = a1;
  v19 = a2;
  v18 = a3;
  v17 = a4;
  v16 = 0;
  result = _simple_salloc();
  v15 = result;
  i = 0;
  if (result)
  {
    v13 = 0;
    v12 = 0;
    if (v19(v20, v17, 768, &v13))
    {
      return ((uint64_t (*)(const char *))v18)("Failed to map small rack\n");
    }
    else if (v19(v20, *(_QWORD *)(v13 + 624), 2560 * *(int *)(v13 + 608), &v12))
    {
      return ((uint64_t (*)(const char *))v18)("Failed to map small rack magazines\n");
    }
    else
    {
      _simple_sappend(v15, "small free sizes:\n");
      for (i = -1; i < *(_DWORD *)(v13 + 608); ++i)
      {
        v11 = 0;
        if (i == -1)
          _simple_sprintf(v15, "\tRecirc depot: ");
        else
          _simple_sprintf(v15, "\tMagazine %d: ", i);
        while (v11 < 0x1F)
        {
          v16 = *(_QWORD *)(v12 + 2560 * i + 32 + 8 * v11);
          if (small_free_list_get_ptr_task(v20, (unsigned int (*)(_QWORD, _QWORD, _QWORD, _QWORD))v19, v18, v16))
          {
            v10 = v15;
            v5 = ">=";
            if (v11 != 30)
              v5 = (const char *)&unk_8AA75;
            v9 = v5;
            v6 = small_free_list_count(v20, v19, v18, v17, v16);
            _simple_sprintf(v10, "%s%y[%d]; ", v9, (v11 + 1) << 9, v6);
          }
          ++v11;
        }
        _simple_sappend(v15, "\n");
      }
      v8 = (void (*)(const char *, ...))v18;
      v7 = (const char *)_simple_string(v15);
      v8("%s\n", v7);
      return _simple_sfree(v15);
    }
  }
  return result;
}

unint64_t small_free_list_get_ptr_task(unsigned int a1, unsigned int (*a2)(_QWORD, _QWORD, _QWORD, _QWORD), void (*a3)(const char *), unint64_t a4)
{
  if (!a4)
    return 0;
  if (small_is_oob_free_entry(a4))
    return small_oob_free_entry_get_ptr_task(a1, a2, a3, a4);
  return a4;
}

uint64_t small_free_list_count(unsigned int a1, unsigned int (*a2)(_QWORD, uint64_t, uint64_t, uint64_t *), void (*a3)(const char *), uint64_t a4, unint64_t next_task)
{
  unsigned int v6;

  v6 = 0;
  while (next_task)
  {
    ++v6;
    next_task = small_free_list_get_next_task(a1, a2, a3, a4, next_task);
  }
  return v6;
}

uint64_t print_small_region(unsigned int a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t (*a3)(const char *, ...), uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  const char *v12;
  void (*v13)(const char *, ...);
  void (*v14)(const char *, ...);
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int i;
  unsigned __int16 v22;
  __int16 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  const void *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t (*v34)(const char *, ...);
  uint64_t (*v35)(_QWORD, _QWORD, _QWORD, _QWORD);
  unsigned int v36;
  _DWORD v37[1024];

  v36 = a1;
  v35 = a2;
  v34 = a3;
  v33 = a4;
  v32 = a5;
  v31 = a6;
  v30 = a7;
  v29 = a8;
  v28 = 0;
  v27 = (const void *)(a6 + 33280);
  v26 = a6 + 33280 + a7;
  v25 = a6 + 0x800000 - a8;
  v24 = 0;
  v18 = 0;
  v8 = a2(a1, a6 + 33280, 0x800000, &v24);
  if ((_DWORD)v8)
    return v34("Failed to map small region at %p\n", v27);
  v17 = v24 - (_QWORD)v27;
  v16 = v24;
  if (v31 == -1)
  {
    result = _simple_salloc(v8);
    v19 = result;
    if (result)
    {
      _simple_sprintf(result, "Small region [unknown address] was returned to the OS\n");
      v14 = (void (*)(const char *, ...))v34;
      v10 = (const char *)_simple_string(v19);
      v14("%s\n", v10);
      return _simple_sfree(v19);
    }
  }
  else
  {
    v11 = _platform_memset(v37, 0, 4096);
    while (v26 < v25)
    {
      v23 = *(_QWORD *)((v26 & 0xFFFFFFFFFF800000)
                      + 40
                      + 2 * (((v26 - ((v26 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                      + v17);
      v22 = v23 & 0x7FFF;
      if ((v23 & 0x7FFF) == 0)
      {
        v11 = v34("*** error with %p: msize=%d, free: %x\n", (const void *)v26, 0, (unsigned __int16)v23 & 0x8000);
        break;
      }
      if (v23 < 0)
      {
        if (((v26 + 10 + vm_page_size - 1) & ~(vm_page_size - 1)) < ((v26 + (v22 << 9) - 2) & ~(vm_page_size - 1)))
          v18 += ((v26 + (v22 << 9) - 2) & ~(vm_page_size - 1)) - ((v26 + 10 + vm_page_size - 1) & ~(vm_page_size - 1));
      }
      else
      {
        if (v22 < 0x400u)
          ++v37[v22];
        ++v28;
      }
      v26 += v22 << 9;
    }
    result = _simple_salloc(v11);
    v20 = result;
    if (result)
    {
      v15 = *(_DWORD *)(v16 + 24);
      _simple_sprintf(result, "Small region %p [%p-%p, %y] \t", v31, v27, v31 + 0x800000, 0x800000);
      if (v15 == -1)
        _simple_sprintf(v20, "Recirc depot \t");
      else
        _simple_sprintf(v20, "Magazine=%d \t", v15);
      _simple_sprintf(v20, "Allocations in use=%d \t Bytes in use=%ly (%d%%) \t", v28, *(unsigned int *)(v16 + 16), (int)(float)(100.0 * (float)*(unsigned int *)(v16 + 16)) / 0x800000uLL);
      if (v29 || v30)
        _simple_sprintf(v20, "Untouched=%ly ", v29 + v30);
      if (v15 == -1)
      {
        _simple_sprintf(v20, "Advised MADV_FREE=%ly", v18);
      }
      else
      {
        _simple_sprintf(v20, "Fragments subject to reclamation=%ly", v18);
        if (small_region_below_recirc_threshold(v16))
          _simple_sprintf(v20, "\tEmpty enough to be moved to recirc depot");
        else
          _simple_sprintf(v20, "\tNot empty enough to be moved to recirc depot");
      }
      if (v32 >= 2 && v28)
      {
        _simple_sappend(v20, "\n\tSizes in use: ");
        for (i = 0; i < 0x400; ++i)
        {
          if (v37[i])
            _simple_sprintf(v20, "%y[%d] ", i << 9, v37[i]);
        }
      }
      v13 = (void (*)(const char *, ...))v34;
      v12 = (const char *)_simple_string(v20);
      v13("%s\n", v12);
      return _simple_sfree(v20);
    }
  }
  return result;
}

BOOL small_region_below_recirc_threshold(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) < 0x5F9E80u;
}

uint64_t small_free_list_check(uint64_t a1, unsigned int a2)
{
  unint64_t j;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  unint64_t next;
  int v24;
  os_unfair_lock_s *v25;
  int i;

  for (i = -1; i < *(_DWORD *)(a1 + 608); ++i)
  {
    v25 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 624) + 2560 * i);
    os_unfair_lock_lock_with_options(v25, 327680);
    v24 = 0;
    next = *(_QWORD *)(*(_QWORD *)(a1 + 624) + 2560 * i + 32 + 8 * a2);
    v22 = 0;
    for (j = small_free_list_get_ptr(next); j; j = small_free_list_get_ptr(next))
    {
      if (*(__int16 *)&stru_20.segname[2 * (((j - ((j & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                      + (j & 0xFFFFFFFFFF800000)] >= 0)
      {
        malloc_zone_check_fail(small_freelist_fail_msg, (uint64_t)" (slot=%u), counter=%d\n*** in-use ptr in free list slot=%u count=%d ptr=%p\n", v3, v4, v5, v6, v7, v8, a2);
        os_unfair_lock_unlock(v25);
        return 0;
      }
      if ((j & 0x1FF) != 0)
      {
        malloc_zone_check_fail(small_freelist_fail_msg, (uint64_t)" (slot=%u), counter=%d\n*** unaligned ptr in free list slot=%u count=%d ptr=%p\n", v3, v4, v5, v6, v7, v8, a2);
        os_unfair_lock_unlock(v25);
        return 0;
      }
      if (!small_region_for_ptr_no_lock(a1, j))
      {
        malloc_zone_check_fail(small_freelist_fail_msg, (uint64_t)" (slot=%u), counter=%d\n*** ptr not in szone slot=%d count=%d ptr=%p\n", v9, v10, v11, v12, v13, v14, a2);
        os_unfair_lock_unlock(v25);
        return 0;
      }
      if (small_free_list_get_previous(a1, next) != v22)
      {
        malloc_zone_check_fail(small_freelist_fail_msg, (uint64_t)" (slot=%u), counter=%d\n*** previous incorrectly set slot=%u count=%d ptr=%p\n", v15, v16, v17, v18, v19, v20, a2);
        os_unfair_lock_unlock(v25);
        return 0;
      }
      v22 = next;
      next = small_free_list_get_next(a1, next);
      ++v24;
    }
    os_unfair_lock_unlock(v25);
  }
  return 1;
}

unint64_t small_oob_free_entry_get_ptr(uint64_t a1)
{
  if (*(__int16 *)(a1 + 16) < 0)
    return (a1 & 0xFFFFFFFFFF800000) + ((unsigned __int16)(*(_WORD *)(a1 + 16) & 0x7FFF) << 9);
  else
    return 0;
}

uint64_t small_free_mark_middle(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t ptr;

  ptr = small_free_list_get_ptr(a2);
  v6 = (ptr & 0xFFFFFFFFFF800000) + 40;
  v5 = ((ptr - ((ptr & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
  v4 = ((ptr + (a3 << 9) - 1 - (((ptr + (a3 << 9) - 1) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
  if (v5 > v4)
  {
    __break(1u);
    JUMPOUT(0x23658);
  }
  if ((*(_WORD *)&stru_20.segname[2 * v5 + (ptr & 0xFFFFFFFFFF800000)] & 0x7FFF) != a3)
  {
    __break(1u);
    JUMPOUT(0x23690);
  }
  small_meta_header_set_middle(v6, v5);
  return small_meta_header_set_middle(v6, v4);
}

unint64_t small_free_list_from_ptr(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  unint64_t empty;
  uint64_t v6;

  if (!a3)
  {
    __break(1u);
    JUMPOUT(0x236FCLL);
  }
  v6 = a2;
  if (small_needs_oob_free_entry(a2, a3))
  {
    empty = small_oob_free_find_empty(a2);
    if (empty)
    {
      small_oob_free_entry_set_ptr(empty, a2);
      return empty;
    }
  }
  return v6;
}

_QWORD *small_free_list_set_previous(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  if (small_is_oob_free_entry((unint64_t)a2))
    return small_oob_free_entry_set_previous(a2, a3);
  else
    return (_QWORD *)small_inplace_free_entry_set_previous(a1, (uint64_t)a2, a3);
}

uint64_t small_free_list_set_next(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (small_is_oob_free_entry(a2))
    return small_oob_free_entry_set_next(a2, a3);
  else
    return small_inplace_free_entry_set_next(a1, a2, a3);
}

uint64_t small_free_mark_free(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t ptr;

  ptr = small_free_list_get_ptr(a2);
  v6 = (ptr & 0xFFFFFFFFFF800000) + 40;
  v5 = ((ptr - ((ptr & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
  v4 = ((ptr + (a3 << 9) - 1 - (((ptr + (a3 << 9) - 1) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
  if (v5 > v4)
  {
    __break(1u);
    JUMPOUT(0x23914);
  }
  small_meta_header_set_is_free(v6, v5, a3);
  return small_meta_header_set_is_free(v6, v4, a3);
}

unint64_t small_oob_free_find_empty(uint64_t a1)
{
  int i;

  for (i = 0; (unint64_t)i < 0x21; ++i)
  {
    if (!*(_WORD *)((char *)&loc_7FA4 + 18 * i + (a1 & 0xFFFFFFFFFF800000) + 18))
      return (a1 & 0xFFFFFFFFFF800000) + 32678 + 18 * i;
  }
  return 0;
}

uint64_t small_oob_free_entry_set_ptr(uint64_t result, int a2)
{
  *(_WORD *)(result + 16) = ((unint64_t)(a2 & 0x7FFFFF) >> 9) | 0x8000;
  return result;
}

BOOL small_is_oob_free_entry(unint64_t a1)
{
  BOOL v2;

  v2 = 0;
  if (a1 >= (a1 & 0xFFFFFFFFFF800000) + 32678)
    return a1 < (a1 & 0xFFFFFFFFFF800000) + 33272;
  return v2;
}

_QWORD *small_oob_free_entry_set_previous(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t small_inplace_free_entry_set_previous(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return small_inplace_checksum_ptr(a1, a2, a3);
}

uint64_t small_inplace_checksum_ptr(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a3 ^ *(_QWORD *)(result + 632) ^ result;
  *(_BYTE *)(a2 + 8) = ((unsigned __int16)(((v3 + HIDWORD(v3)) >> 16) + v3 + WORD2(v3)) >> 8)
                     + ((v3 + HIDWORD(v3)) >> 16)
                     + v3
                     + BYTE4(v3);
  *(_QWORD *)a2 = a3;
  return result;
}

uint64_t small_oob_free_entry_set_next(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t small_inplace_free_entry_set_next(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return small_inplace_checksum_ptr(a1, a2 + 16, a3);
}

uint64_t small_meta_header_set_is_free(uint64_t result, unsigned __int16 a2, __int16 a3)
{
  *(_WORD *)(result + 2 * a2) = a3 | 0x8000;
  return result;
}

uint64_t small_oob_free_entry_set_free(uint64_t result)
{
  *(_QWORD *)result = -1;
  *(_QWORD *)(result + 8) = -1;
  *(_WORD *)(result + 16) = 0;
  return result;
}

uint64_t small_oob_free_entry_get_previous(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t small_inplace_free_entry_get_previous(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return small_inplace_unchecksum_ptr(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t small_inplace_unchecksum_ptr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *(_QWORD *)a2 ^ *(_QWORD *)(a1 + 632) ^ a1;
  if (*(unsigned __int8 *)(a2 + 8) != (((unsigned __int16)(((v9 + HIDWORD(v9)) >> 16)
                                                                           + v9
                                                                           + WORD2(v9)) >> 8)
                                                       + ((v9 + HIDWORD(v9)) >> 16)
                                                       + v9
                                                       + BYTE4(v9)))
  {
    free_list_checksum_botch(a1, a2, *(_QWORD *)a2, a4, a5, a6, a7, a8);
    __break(1u);
    JUMPOUT(0x23D58);
  }
  return *(_QWORD *)a2;
}

void free_list_checksum_botch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  malloc_zone_error(*(_DWORD *)(a1 + 620), 1, (uint64_t)"Incorrect checksum for freed object %p: probably modified after being freed.\nCorrupt value: %p\n", a4, a5, a6, a7, a8, a2);
}

uint64_t small_oob_free_entry_get_next(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t small_inplace_free_entry_get_next(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return small_inplace_unchecksum_ptr(a1, a2 + 16, a3, a4, a5, a6, a7, a8);
}

void region_check_cookie(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v7 = *a2;
  if (v7 != region_cookie())
  {
    malloc_zone_error(64, 1, (uint64_t)"Region cookie corrupted for region %p (value is %x)[%p]\n", v2, v3, v4, v5, v6, a1);
    __break(1u);
  }
}

uint64_t region_cookie()
{
  return (unsigned __int16)(malloc_entropy >> 8);
}

unint64_t small_find_msize_region(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  unsigned int v5;
  int i;
  int v7;
  unsigned int v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t ptr;
  unint64_t v13;
  unint64_t v14;

  if (a4 > 0x1Fu)
    v5 = 30;
  else
    v5 = a4 - 1;
  v10 = a2 + 32;
  ptr = small_free_list_get_ptr(*(_QWORD *)(a2 + 32 + 8 * v5));
  if (ptr)
    return ptr & 0xFFFFFFFFFF800000;
  v7 = v5 >> 5;
  v8 = 0;
  for (i = ~((1 << (v5 & 0x1F)) - 1); !v7; i = -1)
  {
    v8 = *(_DWORD *)(a2 + 2088) & i;
    if (v8)
      break;
    v7 = 1;
  }
  if (!v8 && v7 == 1)
    return 0;
  v9 = (unint64_t *)(v10 + 240);
  v11 = (unint64_t *)(v10 + 8 * (__clz(__rbit32(v8)) + 32 * v7));
  if (v11 < v9)
  {
    v13 = small_free_list_get_ptr(*v11);
    if (v13)
      return v13 & 0xFFFFFFFFFF800000;
  }
  v14 = small_free_list_get_ptr(*v9);
  if (v14)
    return v14 & 0xFFFFFFFFFF800000;
  else
    return 0;
}

_QWORD *small_madvise_free_range_no_lock(uint64_t a1, os_unfair_lock_s *a2, uint64_t a3, unint64_t a4, unsigned __int16 a5, uint64_t a6, uint64_t a7)
{
  _QWORD *result;
  vm_size_t v8;
  void *v9;
  uint64_t v10;
  unint64_t ptr;

  ptr = small_free_list_get_ptr(a4);
  v10 = 10;
  result = (_QWORD *)small_is_oob_free_entry(a4);
  if ((_DWORD)result)
    v10 = 0;
  if (((ptr + v10 + vm_kernel_page_mask) & ~vm_kernel_page_mask) < ((ptr + (a5 << 9)) & ~vm_kernel_page_mask))
  {
    if (((ptr + v10 + vm_kernel_page_mask) & ~vm_kernel_page_mask) <= (a6 & ~vm_kernel_page_mask))
      v9 = (void *)(a6 & ~vm_kernel_page_mask);
    else
      v9 = (void *)((ptr + v10 + vm_kernel_page_mask) & ~vm_kernel_page_mask);
    if (((ptr + (a5 << 9)) & ~vm_kernel_page_mask) >= ((a6 + a7 + v10 + vm_kernel_page_mask) & ~vm_kernel_page_mask))
      v8 = (a6 + a7 + v10 + vm_kernel_page_mask) & ~vm_kernel_page_mask;
    else
      v8 = (ptr + (a5 << 9)) & ~vm_kernel_page_mask;
    if ((unint64_t)v9 < v8)
    {
      small_free_mark_unfree(a1, a4, a5);
      small_free_list_remove_ptr_no_clear(a1, (uint64_t)a2, a4, a5);
      OSAtomicIncrement32Barrier((int32_t *)(a3 + 28));
      os_unfair_lock_unlock(a2);
      mvm_madvise_free(a1, a3, v9, v8, (void **)(a1 + 640), *(_DWORD *)(a1 + 620) & 0x20);
      os_unfair_lock_lock_with_options(a2, 327680);
      OSAtomicDecrement32Barrier((int32_t *)(a3 + 28));
      return small_free_list_add_ptr(a1, (uint64_t)a2, ptr, a5);
    }
  }
  return result;
}

uint64_t small_free_try_recirc_to_depot(uint64_t a1, os_unfair_lock_s *a2, unsigned int a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  mach_vm_address_t v14;
  uint64_t v15;

  v15 = *(unsigned int *)(a4 + 16);
  if (a3 != -1)
  {
    if (small_region_below_recirc_threshold(a4))
      *(_BYTE *)(a4 + 32) = 1;
    if (small_magazine_below_recirc_threshold((uint64_t)a2))
      return small_free_do_recirc_to_depot(a1, (uint64_t)a2, a3, v8, v9, v10, v11, v12);
    return 1;
  }
  if ((aggressive_madvise_enabled & 1) == 0)
    small_madvise_free_range_no_lock(a1, a2, a4, a5, a6, a7, a8);
  if (v15 || *(int *)(a4 + 28) > 0)
    return 1;
  v14 = small_free_try_depot_unmap_no_lock(a1, (uint64_t)a2, a4, a4, a5, a6, a7, a8);
  os_unfair_lock_unlock(a2);
  if (v14)
  {
    if ((*(_DWORD *)(a1 + 620) & 4) != 0)
      mvm_deallocate_pages(v14, 0x800000uLL, *(_WORD *)(a1 + 620) & 0xFFFE);
    else
      mvm_deallocate_pages(v14, 0x800000uLL, *(_WORD *)(a1 + 620) & 0xFFFC);
  }
  return 0;
}

uint64_t small_free_mark_unfree(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t ptr;

  ptr = small_free_list_get_ptr(a2);
  v6 = (ptr & 0xFFFFFFFFFF800000) + 40;
  v5 = ((ptr - ((ptr & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
  v4 = ((ptr + (a3 << 9) - 1 - (((ptr + (a3 << 9) - 1) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
  if (v5 > v4)
  {
    __break(1u);
    JUMPOUT(0x24678);
  }
  small_meta_header_set_not_free(v6, v5);
  return small_meta_header_set_not_free(v6, v4);
}

uint64_t small_meta_header_set_not_free(uint64_t result, unsigned __int16 a2)
{
  *(_WORD *)(result + 2 * a2) &= ~0x8000u;
  return result;
}

BOOL small_magazine_below_recirc_threshold(uint64_t a1)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;

  v4 = *(_QWORD *)(a1 + 2160);
  v3 = *(_QWORD *)(a1 + 2152);
  v2 = 0;
  if (v4 - v3 > 0xBF3D00)
    return v3 < v4 - (v4 >> 2);
  return v2;
}

uint64_t small_free_do_recirc_to_depot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;
  BOOL v15;
  mach_vm_address_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t i;

  for (i = *(_QWORD *)(a2 + 2176); ; i = *(_QWORD *)(i + 8))
  {
    v15 = 0;
    if (i)
    {
      v14 = 1;
      if ((*(_BYTE *)(i + 32) & 1) != 0)
        v14 = *(_DWORD *)(i + 28) != 0;
      v15 = v14;
    }
    if (!v15)
      break;
  }
  if (i)
  {
    v20 = i & 0xFFFFFFFFFF800000;
    if ((i & 0xFFFFFFFFFF800000) == *(_QWORD *)(a2 + 2144) && (*(_QWORD *)(a2 + 2128) || *(_QWORD *)(a2 + 2136)))
      small_finalize_region((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)i)
      *(_QWORD *)(*(_QWORD *)i + 8) = *(_QWORD *)(i + 8);
    else
      *(_QWORD *)(a2 + 2176) = *(_QWORD *)(i + 8);
    if (*(_QWORD *)(i + 8))
      **(_QWORD **)(i + 8) = *(_QWORD *)i;
    else
      *(_QWORD *)(a2 + 2184) = *(_QWORD *)i;
    *(_QWORD *)i = 0;
    *(_QWORD *)(i + 8) = 0;
    --*(_DWORD *)(a2 + 2172);
    v19 = small_free_detach_region(a1, a2, v20, a4, a5, a6, a7, a8);
    v18 = *(_QWORD *)(a1 + 624) - 2560;
    os_unfair_lock_lock_with_options(v18, 327680);
    *(int *)((char *)&dword_18 + (i & 0xFFFFFFFFFF800000)) = -1;
    *(_DWORD *)(i + 28) = 0;
    v17 = small_free_reattach_region(a1, v18, v20);
    *(_QWORD *)(a2 + 2152) -= v17;
    *(_QWORD *)(a2 + 2160) -= 8355328;
    *(_DWORD *)(a2 + 2168) -= v19;
    os_unfair_lock_unlock((os_unfair_lock_t)a2);
    *(_QWORD *)(v18 + 2152) += v17;
    *(_QWORD *)(v18 + 2160) += 8355328;
    *(_DWORD *)(v18 + 2168) += v19;
    if (*(_QWORD *)(v18 + 2184))
    {
      *(_QWORD *)i = *(_QWORD *)(v18 + 2184);
      *(_QWORD *)(*(_QWORD *)(v18 + 2184) + 8) = i;
    }
    else
    {
      *(_QWORD *)(v18 + 2176) = i;
      *(_QWORD *)i = 0;
    }
    *(_QWORD *)(v18 + 2184) = i;
    *(_QWORD *)(i + 8) = 0;
    *(_BYTE *)(i + 32) = 0;
    ++*(_DWORD *)(v18 + 2172);
    v11 = *(unsigned int *)((char *)dword_10 + (i & 0xFFFFFFFFFF800000));
    v12 = 0x800000;
    if ((aggressive_madvise_enabled & 1) == 0)
      small_free_scan_madvise_free(a1, (os_unfair_lock_s *)v18, v20);
    v16 = small_free_try_depot_unmap_no_lock(a1, v18, i, v12, v11, v8, v9, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)v18);
    if (v16)
    {
      if ((*(_DWORD *)(a1 + 620) & 4) != 0)
        mvm_deallocate_pages(v16, 0x800000uLL, *(_WORD *)(a1 + 620) & 0xFFFE);
      else
        mvm_deallocate_pages(v16, 0x800000uLL, *(_WORD *)(a1 + 620) & 0xFFFC);
    }
    return 0;
  }
  else
  {
    return 1;
  }
}

unint64_t small_free_try_depot_unmap_no_lock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  unint64_t v15;

  if (*(_DWORD *)(a3 + 16) || *(int *)(a3 + 28) > 0 || *(_DWORD *)(a2 + 2172) < recirc_retained_regions)
    return 0;
  if (*(_QWORD *)a3)
    *(_QWORD *)(*(_QWORD *)a3 + 8) = *(_QWORD *)(a3 + 8);
  else
    *(_QWORD *)(a2 + 2176) = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)(a3 + 8))
    **(_QWORD **)(a3 + 8) = *(_QWORD *)a3;
  else
    *(_QWORD *)(a2 + 2184) = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  --*(_DWORD *)(a2 + 2172);
  v15 = a3 & 0xFFFFFFFFFF800000;
  v14 = small_free_detach_region(a1, a2, a3 & 0xFFFFFFFFFF800000, a4, a5, a6, a7, a8);
  if (v14)
  {
    malloc_zone_error(*(_DWORD *)(a1 + 620), 1, (uint64_t)"small_free_try_depot_unmap_no_lock objects_in_use not zero: %d\n", v8, v9, v10, v11, v12, v14);
    return 0;
  }
  else if ((rack_region_remove(a1, v15, a3) & 1) != 0)
  {
    *(_QWORD *)(a2 + 2160) -= 8355328;
    return v15;
  }
  else
  {
    return 0;
  }
}

unint64_t small_oob_free_entry_get_ptr_task(unsigned int a1, unsigned int (*a2)(_QWORD, _QWORD, _QWORD, _QWORD), void (*a3)(const char *), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(const char *);
  unsigned int (*v8)(_QWORD, _QWORD, _QWORD, _QWORD);
  unsigned int v9;

  v9 = a1;
  v8 = a2;
  v7 = a3;
  v6 = a4;
  v5 = 0;
  if (a2(a1, a4, 18, &v5))
  {
    v7("Failed to map small oobe pointer\n");
    return 0;
  }
  else if (*(__int16 *)(v5 + 16) < 0)
  {
    return (v6 & 0xFFFFFFFFFF800000) + ((unsigned __int16)(*(_WORD *)(v5 + 16) & 0x7FFF) << 9);
  }
  else
  {
    return 0;
  }
}

uint64_t small_free_list_get_next_task(unsigned int a1, unsigned int (*a2)(_QWORD, uint64_t, uint64_t, uint64_t *), void (*a3)(const char *), uint64_t a4, unint64_t a5)
{
  if (!a5)
  {
    __break(1u);
    JUMPOUT(0x24F50);
  }
  if (small_is_oob_free_entry(a5))
    return small_oob_free_entry_get_next_task(a1, (unsigned int (*)(_QWORD, _QWORD, _QWORD, _QWORD))a2, a3, a5);
  else
    return small_inplace_free_entry_get_next_task(a1, a2, (void (*)(const char *, ...))a3, a4, a5);
}

uint64_t small_oob_free_entry_get_next_task(unsigned int a1, unsigned int (*a2)(_QWORD, _QWORD, _QWORD, _QWORD), void (*a3)(const char *), uint64_t a4)
{
  _QWORD v5[2];
  void (*v6)(const char *);
  unsigned int (*v7)(_QWORD, _QWORD, _QWORD, _QWORD);
  unsigned int v8;

  v8 = a1;
  v7 = a2;
  v6 = a3;
  v5[1] = a4;
  v5[0] = 0;
  if (!a2(a1, a4, 18, v5))
    return *(_QWORD *)(v5[0] + 8);
  v6("Failed to map small oobe pointer\n");
  return 0;
}

uint64_t small_inplace_free_entry_get_next_task(unsigned int a1, unsigned int (*a2)(_QWORD, uint64_t, uint64_t, uint64_t *), void (*a3)(const char *, ...), uint64_t a4, uint64_t a5)
{
  return small_inplace_unchecksum_ptr_task(a1, a2, a3, a4, (const void *)(a5 + 16));
}

uint64_t small_inplace_unchecksum_ptr_task(unsigned int a1, unsigned int (*a2)(_QWORD, uint64_t, uint64_t, uint64_t *), void (*a3)(const char *, ...), uint64_t a4, const void *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  void (*v16)(const char *, ...);
  unsigned int (*v17)(_QWORD, uint64_t, uint64_t, uint64_t *);
  unsigned int v18;
  char v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v18 = a1;
  v17 = a2;
  v16 = a3;
  v15 = a4;
  v14 = a5;
  v13 = 0;
  v12 = 0;
  if (a2(a1, (uint64_t)a5, 16, &v13))
  {
    v16("Unable to map small linkage pointer %p\n", v14);
    return 0;
  }
  else if (v17(v18, v15, 768, &v12))
  {
    v16("Failed to map small rack\n");
    return 0;
  }
  else
  {
    v10 = *(unsigned __int8 *)(v13 + 8);
    v23 = *(_QWORD *)v13 ^ *(_QWORD *)(v12 + 632) ^ v15;
    v22 = v23 + HIDWORD(v23);
    v21 = HIWORD(v22) + v22;
    v20 = HIBYTE(v21) + v21;
    if (v10 != (HIBYTE(v21) + v21))
    {
      free_list_checksum_botch(v15, (uint64_t)v14, *(_QWORD *)v13, v5, v6, v7, v8, v9);
      __break(1u);
      JUMPOUT(0x251E0);
    }
    return *(_QWORD *)v13;
  }
}

uint64_t trace_decode(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int i;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = a1;
  v13 = a2;
  v12 = a3;
  v11 = a4;
  v10 = 0;
  for (i = 0; i < v11; ++i)
  {
    v8 = 0;
    v7 = varint_decode(v14 + v10, v13 - v10, &v8);
    if (!v7)
      break;
    v10 += v7;
    v6 = codeoffset_decode(v8);
    if (i)
      v5 = *(_QWORD *)(v12 + 8 * (i - 1));
    else
      v5 = 0;
    *(_QWORD *)(v12 + 8 * i) = v6 + v5;
  }
  return i;
}

uint64_t varint_decode(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
  v4 = 0;
  do
  {
    if (v4 == a2)
      return 0;
    v5 |= (unint64_t)(*(_BYTE *)(a1 + v4) & 0x7F) << (7 * v4);
    ++v4;
  }
  while (*(char *)(a1 + v4 - 1) >= 0);
  *a3 = v5;
  return v4;
}

unint64_t codeoffset_decode(unint64_t a1)
{
  return 4 * zigzag_decode(a1);
}

uint64_t trace_collect(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  void *v7;
  uint64_t v8;

  v3 = backtrace(&v7, 65);
  if (v3 > 1)
    return trace_encode(a1, a2, (uint64_t)&v8, v3 - 1);
  else
    return 0;
}

uint64_t trace_encode(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int i;
  uint64_t v9;

  v9 = 0;
  for (i = 0; i < a4; ++i)
  {
    v6 = i ? *(_QWORD *)(a3 + 8 * (i - 1)) : 0;
    v4 = codeoffset_encode(*(_QWORD *)(a3 + 8 * i) - v6);
    v7 = varint_encode(a1 + v9, a2 - v9, v4);
    if (!v7)
      break;
    v9 += v7;
  }
  return v9;
}

unint64_t zigzag_decode(unint64_t a1)
{
  if ((a1 & 1) != 0)
    return ~(a1 >> 1);
  else
    return a1 >> 1;
}

uint64_t codeoffset_encode(uint64_t a1)
{
  return zigzag_encode(a1 / 4);
}

uint64_t varint_encode(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;

  v4 = 0;
  do
  {
    if (v4 == a2)
      return 0;
    *(_BYTE *)(a1 + v4) = a3 & 0x7F;
    a3 >>= 7;
    ++v4;
  }
  while (a3);
  *(_BYTE *)(a1 + v4 - 1) |= 0x80u;
  return v4;
}

uint64_t zigzag_encode(uint64_t a1)
{
  if (a1 >= 0)
    return 2 * a1;
  else
    return ~(2 * a1);
}

__n128 xzm_metapool_init(__n128 *a1, unsigned __int8 a2, unsigned int a3, unsigned int a4, unsigned int a5, unint64_t a6)
{
  __n128 result;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  __n128 v10;
  unint64_t v11;
  __n128 v12;

  if (a3 % a5)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slab_size % block_size == 0\" failed (/Library/Caches/co"
                           "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_metapool.c:12)";
    __break(1u);
    JUMPOUT(0x25848);
  }
  if ((a3 & 0x3FFF) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slab_size % PAGE_MAX_SIZE == 0\" failed (/Library/Caches"
                           "/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_metapool.c:13)";
    __break(1u);
    JUMPOUT(0x2587CLL);
  }
  if (((a5 - 1) & a5) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"powerof2(block_size)\" failed (/Library/Caches/com.apple"
                           ".xbs/Sources/libmalloc_driverkit/src/xzone/xzone_metapool.c:14)";
    __break(1u);
    JUMPOUT(0x258B4);
  }
  if (((a4 - 1) & a4) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"powerof2(block_align)\" failed (/Library/Caches/com.appl"
                           "e.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_metapool.c:15)";
    __break(1u);
    JUMPOUT(0x258ECLL);
  }
  if (a5 < a4)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"block_size >= block_align\" failed (/Library/Caches/com."
                           "apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_metapool.c:16)";
    __break(1u);
    JUMPOUT(0x25924);
  }
  v9 = 1;
  if (!a6)
    v9 = a5 > 0xF;
  if (!v9)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"metadata_pool || block_size >= sizeof(struct xzm_metapoo"
                           "l_slab_s)\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_metapool.c:20)";
    __break(1u);
    JUMPOUT(0x2597CLL);
  }
  v8 = 1;
  if (a6)
    v8 = *(_DWORD *)(a6 + 16) > 0xFu;
  if (!v8)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!metadata_pool || metadata_pool->xzmp_block_size >= size"
                           "of(struct xzm_metapool_slab_s)\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driv"
                           "erkit/src/xzone/xzone_metapool.c:25)";
    __break(1u);
    JUMPOUT(0x259D8);
  }
  v7 = 1;
  if (a6)
    v7 = *(_DWORD *)(a6 + 16) > 0xFu;
  if (!v7)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!metadata_pool || metadata_pool->xzmp_block_size >= size"
                           "of(struct xzm_metapool_block_s)\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_dri"
                           "verkit/src/xzone/xzone_metapool.c:27)";
    __break(1u);
    JUMPOUT(0x25A34);
  }
  v10.n128_u32[0] = 0;
  v10.n128_u8[4] = a2;
  v10.n128_u64[1] = __PAIR64__(a4, a3);
  LODWORD(v11) = a5;
  v12.n128_u32[0] = 0;
  v12.n128_u64[1] = a6;
  result = v10;
  a1[3] = v12;
  a1[2] = 0uLL;
  a1[1] = (__n128)v11;
  *a1 = v10;
  return result;
}

uint64_t xzm_metapool_alloc(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  _OWORD *v4;
  mach_vm_address_t plat;
  uint64_t v6;
  uint64_t v7;

  os_unfair_lock_lock_with_options(a1, 327680);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = **(_QWORD **)(a1 + 32);
    v6 = *(_QWORD *)(v7 + 8);
    if (*(_QWORD *)(a1 + 56))
      xzm_metapool_free(*(_QWORD *)(a1 + 56), v7);
    else
      *(_OWORD *)v7 = 0u;
  }
  else
  {
    if (!*(_QWORD *)(a1 + 40) || *(_DWORD *)(a1 + 48) == *(_DWORD *)(a1 + 8))
    {
      plat = mvm_allocate_plat(0, *(unsigned int *)(a1 + 8), __clz(__rbit32(*(_DWORD *)(a1 + 12))), 1, 0, 1, 0, v1);
      if (!plat)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Failed to allocate malloc metadata";
        __break(1u);
        JUMPOUT(0x25C18);
      }
      if (*(_QWORD *)(a1 + 56))
      {
        v4 = (_OWORD *)xzm_metapool_alloc(*(_QWORD *)(a1 + 56));
        *(_DWORD *)(a1 + 48) = 0;
      }
      else
      {
        v4 = (_OWORD *)plat;
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 16);
      }
      *(_QWORD *)&v3 = 0;
      *((_QWORD *)&v3 + 1) = plat;
      *v4 = v3;
      *(_QWORD *)(a1 + 40) = v4;
      *(_QWORD *)v4 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v4;
    }
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + *(unsigned int *)(a1 + 48);
    *(_DWORD *)(a1 + 48) += *(_DWORD *)(a1 + 16);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  if (!v6)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"block\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                           "bmalloc_driverkit/src/xzone/xzone_metapool.c:161)";
    __break(1u);
    JUMPOUT(0x25D3CLL);
  }
  return v6;
}

void xzm_metapool_free(uint64_t a1, void *a2)
{
  _QWORD *v2;

  os_unfair_lock_lock_with_options(a1, 327680);
  if (!_xzm_metapool_block_is_allocated(a1, (unint64_t)a2))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_metapool_block_is_allocated(mp, blockp)\" failed (/"
                           "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_metapool.c:195)";
    __break(1u);
    JUMPOUT(0x25DACLL);
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v2 = (_QWORD *)xzm_metapool_alloc(*(_QWORD *)(a1 + 56));
    if (_xzm_metapool_should_madvise(a1))
      mvm_madvise_plat(a2, *(unsigned int *)(a1 + 16), 7);
  }
  else
  {
    v2 = a2;
  }
  v2[1] = a2;
  *v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v2;
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

uint64_t _xzm_metapool_block_is_allocated(uint64_t a1, unint64_t a2)
{
  _QWORD *i;

  if (a2 % *(unsigned int *)(a1 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"block_ptr % mp->xzmp_block_size == 0\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_metapool.c:170)";
    __break(1u);
    JUMPOUT(0x25EDCLL);
  }
  if (_xzm_metapool_slab_for_block(a1, a2))
  {
    for (i = *(_QWORD **)(a1 + 32); i; i = (_QWORD *)*i)
    {
      if (i[1] == a2)
        return 0;
    }
    return 1;
  }
  else
  {
    return 0;
  }
}

BOOL _xzm_metapool_should_madvise(uint64_t a1)
{
  BOOL v2;

  v2 = 0;
  if (*(_QWORD *)(a1 + 56))
    return *(unsigned int *)(a1 + 16) >= vm_page_size;
  return v2;
}

_QWORD *_xzm_metapool_slab_for_block(uint64_t a1, unint64_t a2)
{
  _QWORD *i;

  for (i = *(_QWORD **)(a1 + 24); i; i = (_QWORD *)*i)
  {
    if (a2 >= i[1] && a2 < i[1] + (unint64_t)*(unsigned int *)(a1 + 8))
      return i;
  }
  return 0;
}

mach_vm_address_t rack_init(uint64_t a1, int a2, int a3, int a4)
{
  mach_vm_address_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int j;
  unsigned int i;

  *(_DWORD *)(a1 + 4) = a2;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = a1 + 32;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) = a1 + 96;
  **(_QWORD **)(a1 + 24) = 64;
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) = 6;
  result = _platform_memset(a1 + 96, 0, 512);
  *(_QWORD *)(a1 + 632) = malloc_entropy[0];
  if (a2 == 2)
    *(_QWORD *)(a1 + 632) = ~*(_QWORD *)(a1 + 632);
  *(_DWORD *)(a1 + 620) = a4;
  *(_DWORD *)(a1 + 608) = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  if (a3)
  {
    result = mvm_allocate_pages((vm_page_size + 2560 * (a3 + 1) - 1) & -(uint64_t)vm_page_size, 0, 1073741827, 1);
    if (!result)
    {
      malloc_report(3, (uint64_t)"*** FATAL ERROR - unable to allocate magazine array.\n", v5, v6, v7, v8, v9, v10, v11);
      qword_A4008 = (uint64_t)"FATAL ERROR - unable to allocate magazine array";
      __break(1u);
      JUMPOUT(0x26258);
    }
    *(_QWORD *)(a1 + 624) = result + 2560;
    *(_DWORD *)(a1 + 616) = 0;
    for (i = 1; i <= a3 - 1; i *= 2)
      ++*(_DWORD *)(a1 + 616);
    *(_DWORD *)(a1 + 612) = i - 1;
    *(_QWORD *)(a1 + 640) = 0;
    *(_DWORD *)a1 = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 624) - 2560) = 0;
    for (j = 0; j < *(_DWORD *)(a1 + 608); ++j)
    {
      result = 2560;
      *(_DWORD *)(*(_QWORD *)(a1 + 624) + 2560 * j) = 0;
    }
  }
  return result;
}

void rack_destroy_regions(uint64_t a1, mach_vm_size_t a2)
{
  mach_vm_address_t v2;
  int i;

  for (i = 0; (unint64_t)i < **(_QWORD **)(a1 + 24); ++i)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 8 * i)
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 8 * i) != -1)
    {
      v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 8 * i);
      if ((*(_DWORD *)(a1 + 620) & 4) != 0)
        mvm_deallocate_pages(v2, a2, *(_WORD *)(a1 + 620) & 0xFFFE);
      else
        mvm_deallocate_pages(v2, a2, *(_WORD *)(a1 + 620) & 0xFFFC);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 8 * i) = -1;
    }
  }
}

void rack_destroy(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) != a1 + 96)
    mvm_deallocate_pages(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), (vm_page_size - 1 + 8 * **(_QWORD **)(a1 + 24)) & ~(vm_page_size - 1), 0);
  if (*(int *)(a1 + 608) > 0)
  {
    mvm_deallocate_pages(*(_QWORD *)(a1 + 624) - 2560, (2560 * (*(_DWORD *)(a1 + 608) + 1) + vm_page_size - 1) & ~(vm_page_size - 1), 3);
    *(_QWORD *)(a1 + 624) = 0;
  }
}

void rack_region_insert(os_unfair_lock_s *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  mach_vm_address_t v4;
  unint64_t v5;
  os_unfair_lock_t v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_t v8;

  v6 = a1;
  v5 = a2;
  v7 = a1;
  os_unfair_lock_lock_with_options(a1, 327680);
  if (**(_QWORD **)&v6[6]._os_unfair_lock_opaque < (unint64_t)(2 * *(_QWORD *)&v6[2]._os_unfair_lock_opaque))
  {
    v4 = 0;
    v3 = 0;
    v2 = 0;
    v2 = *(_QWORD *)(*(_QWORD *)&v6[6]._os_unfair_lock_opaque + 8);
    v4 = hash_regions_grow_no_lock(*(_QWORD *)(*(_QWORD *)&v6[6]._os_unfair_lock_opaque + 16), **(_QWORD **)&v6[6]._os_unfair_lock_opaque, &v2, &v3);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v6[6]._os_unfair_lock_opaque + 24) + 16) = v4;
    **(_QWORD **)(*(_QWORD *)&v6[6]._os_unfair_lock_opaque + 24) = v3;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v6[6]._os_unfair_lock_opaque + 24) + 8) = v2;
    OSMemoryBarrier();
    *(_QWORD *)&v6[6]._os_unfair_lock_opaque = *(_QWORD *)(*(_QWORD *)&v6[6]._os_unfair_lock_opaque + 24);
  }
  hash_region_insert_no_lock(*(_QWORD *)(*(_QWORD *)&v6[6]._os_unfair_lock_opaque + 16), **(_QWORD **)&v6[6]._os_unfair_lock_opaque, *(_QWORD *)(*(_QWORD *)&v6[6]._os_unfair_lock_opaque + 8), v5);
  ++*(_QWORD *)&v6[2]._os_unfair_lock_opaque;
  v8 = v6;
  os_unfair_lock_unlock(v6);
}

mach_vm_address_t hash_regions_grow_no_lock(uint64_t a1, unint64_t a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v5;
  unint64_t i;
  mach_vm_address_t v7;

  *a4 = 2 * a2;
  ++*a3;
  v7 = hash_regions_alloc_no_lock(*a4);
  for (i = 0; i < a2; ++i)
  {
    v5 = *(_QWORD *)(a1 + 8 * i);
    if (v5)
    {
      if (v5 != -1)
        hash_region_insert_no_lock(v7, *a4, *a3, v5);
    }
  }
  return v7;
}

uint64_t hash_region_insert_no_lock(uint64_t result, uint64_t a2, char a3, unint64_t a4)
{
  unint64_t *v4;
  unint64_t v5;

  v5 = (0x9E3779B97F4A7C55 * (a4 >> 20)) >> (64 - a3);
  while (1)
  {
    v4 = (unint64_t *)(result + 8 * v5);
    if (!*v4 || *v4 == -1)
      break;
    if (++v5 == a2)
      v5 = 0;
    if (v5 == (0x9E3779B97F4A7C55 * (a4 >> 20)) >> (64 - a3))
      return result;
  }
  *v4 = a4;
  return result;
}

uint64_t rack_region_remove(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  char v10;

  v10 = 1;
  os_unfair_lock_lock_with_options(a1, 327680);
  v9 = (_QWORD *)hash_lookup_region_no_lock(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
  if ((*(_DWORD *)(a3 + 36) & 1) != 0)
  {
    *(_DWORD *)(a3 + 36) |= 2u;
    v10 = 0;
  }
  if (v9)
  {
    *v9 = -1;
    OSAtomicIncrement64((OSAtomic_int64_aligned64_t *)(a1 + 16));
  }
  else
  {
    malloc_zone_error(*(_DWORD *)(a1 + 620), 1, (uint64_t)"tiny_free_try_depot_unmap_no_lock hash lookup failed: %p\n", v3, v4, v5, v6, v7, a2);
    v10 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  return v10 & 1;
}

uint64_t rack_region_maybe_dispose(uint64_t a1, mach_vm_address_t a2, mach_vm_size_t a3, uint64_t a4)
{
  char v5;

  v5 = 0;
  os_unfair_lock_lock_with_options(a1, 327680);
  if ((*(_DWORD *)(a4 + 36) & 2) != 0)
  {
    if ((*(_DWORD *)(a1 + 620) & 4) != 0)
      mvm_deallocate_pages(a2, a3, *(_WORD *)(a1 + 620) & 0xFFFE);
    else
      mvm_deallocate_pages(a2, a3, *(_WORD *)(a1 + 620) & 0xFFFC);
    v5 = 1;
  }
  else
  {
    *(_DWORD *)(a4 + 36) &= ~1u;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  return v5 & 1;
}

uint64_t rack_get_thread_index(uint64_t a1)
{
  unsigned int v2;

  if (_os_cpu_number_override == -1)
  {
    v2 = _malloc_cpu_number();
    if (*(_DWORD *)(a1 + 608) == ncpuclusters)
      return _malloc_cpu_cluster_number();
  }
  else
  {
    v2 = _os_cpu_number_override;
    if (*(_DWORD *)(a1 + 608) == ncpuclusters)
      return _malloc_get_cluster_from_cpu(_os_cpu_number_override);
  }
  return v2;
}

unint64_t _malloc_cpu_number()
{
  return _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) & 0xFFF;
}

unint64_t _malloc_cpu_cluster_number()
{
  return (_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) & 0xFF000) >> 12;
}

uint64_t _malloc_get_cluster_from_cpu(unsigned int a1)
{
  return *(unsigned __int8 *)(a1 + 0xFFFFFC200);
}

mach_vm_address_t hash_regions_alloc_no_lock(uint64_t a1)
{
  return mvm_allocate_pages((8 * a1 + vm_page_size - 1) & ~(vm_page_size - 1), 0, 0x40000000, 1);
}

_QWORD *create_legacy_scalable_zone(uint64_t a1, int a2)
{
  _QWORD *scalable_zone;

  scalable_zone = create_scalable_zone(a1, a2);
  if (!scalable_zone)
    return 0;
  mprotect(scalable_zone, 0xC8uLL, 3);
  scalable_zone[5] = legacy_valloc;
  scalable_zone[15] = 0;
  mprotect(scalable_zone, 0xC8uLL, 1);
  return scalable_zone;
}

uint64_t legacy_valloc(os_unfair_lock_s *a1, uint64_t a2)
{
  char v3;
  vm_size_t v4;
  vm_size_t v5;

  if (vm_kernel_page_mask <= vm_page_mask)
    v5 = vm_page_mask;
  else
    v5 = vm_kernel_page_mask;
  if (vm_kernel_page_mask <= vm_page_mask)
    v4 = vm_page_mask;
  else
    v4 = vm_kernel_page_mask;
  if (vm_kernel_page_shift <= vm_page_shift)
    v3 = vm_page_shift;
  else
    v3 = vm_kernel_page_shift;
  return large_malloc(a1, ((a2 + v5) & ~v4) >> v3, 0, 1);
}

BOOL mvm_aslr_init()
{
  _BOOL8 result;
  mach_vm_address_t address;
  uint64_t __newValue;
  int v3;
  mach_vm_address_t v4;

  v4 = 0x16FE00000;
  v3 = 7;
  result = mvm_aslr_enabled();
  if (result)
  {
    if (!entropic_address)
    {
      __newValue = v4 - 0x100000 - ((qword_A8220 & ((1 << v3) - 1)) << 25);
      address = 0;
      if (!mach_vm_allocate(mach_task_self_, &address, vm_page_size, 117440513))
      {
        if (address > v4)
        {
          __newValue = (address + 0x200000000) & 0xFFFFFFFFFE000000;
          OSAtomicCompareAndSwapLong(0, address, &entropic_base);
        }
        mach_vm_deallocate(mach_task_self_, address, vm_page_size);
      }
      OSAtomicCompareAndSwapLong(0, __newValue, &entropic_limit);
      return OSAtomicCompareAndSwapLong(0, __newValue - 0x10000000, &entropic_address);
    }
  }
  else
  {
    malloc_entropy[0] = 0;
    qword_A8220 = 0;
  }
  return result;
}

mach_vm_address_t mvm_allocate_plat(uint64_t a1, mach_vm_size_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  mach_vm_address_t address[2];
  int v10;
  int v11;
  int v12;
  char v13;
  mach_vm_size_t v14;
  mach_vm_address_t v15;

  v15 = a1;
  v14 = a2;
  v13 = a3;
  v12 = a4;
  v11 = a5;
  v10 = a6;
  address[1] = a7;
  if (a1 && (v12 & 1) != 0)
    malloc_zone_error(v11 | 0x40, 0, (uint64_t)"Unsupported anywhere allocation at address 0x%lx of size 0x%lx with flags %d\n", a4, a5, a6, a7, a8, v15);
  if ((v11 & 0x200) != 0)
    malloc_zone_error(v11 | 0x40, 0, (uint64_t)"Unsupported unpopulated allocation at address 0x%lx of size 0x%lx with flags %d\n", a4, a5, a6, a7, a8, v15);
  address[0] = v15;
  if (mach_vm_map(mach_task_self_, address, v14, (1 << v13) - 1, v12 | (v10 << 24), 0, 0, 0, 3, 7, 1u))
    return 0;
  else
    return address[0];
}

mach_vm_address_t mvm_allocate_pages(unint64_t a1, unsigned __int8 a2, int a3, int a4)
{
  return mvm_allocate_pages_plat(a1, a2, a3, a4, 0);
}

mach_vm_address_t mvm_allocate_pages_plat(unint64_t a1, unsigned __int8 a2, int a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  vm_size_t v21;
  vm_size_t v22;
  vm_size_t v23;
  vm_size_t v24;
  vm_size_t v25;
  vm_size_t v26;
  uint64_t v27;
  vm_size_t v28;
  vm_size_t v29;
  mach_vm_size_t v30;
  mach_vm_size_t size;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  kern_return_t v36;
  int v37;
  mach_vm_offset_t v38;
  vm_size_t v39;
  mach_vm_address_t v40;
  mach_vm_address_t address;
  _BOOL4 v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned __int8 v49;
  unint64_t v50;

  v50 = a1;
  v49 = a2;
  v48 = a3;
  v47 = a4;
  v46 = a5;
  v45 = a3 & 1;
  v44 = a3 & 2;
  v43 = a3 & 0x80;
  v42 = (a3 & 0x40000000) == 0;
  address = 0;
  v39 = (a1 + vm_page_size - 1) & ~(vm_page_size - 1);
  v38 = (1 << a2) - 1;
  v37 = (a4 << 24) | 1;
  if (!v39)
    v39 = vm_page_size;
  if (v44 || v45)
  {
    if (v45 && v49 > vm_page_shift)
    {
      if (vm_kernel_page_size <= vm_page_size)
        v29 = vm_page_size;
      else
        v29 = vm_kernel_page_size;
      v39 += v29 + (1 << v49);
    }
    else
    {
      if (v45 && v44)
      {
        if (vm_kernel_page_size <= vm_page_size)
          v28 = vm_page_size;
        else
          v28 = vm_kernel_page_size;
        v27 = 2 * v28;
      }
      else
      {
        if (vm_kernel_page_size <= vm_page_size)
          v26 = vm_page_size;
        else
          v26 = vm_kernel_page_size;
        v27 = v26;
      }
      v39 += v27;
    }
  }
  if (v43)
    v37 = (a4 << 24) | 3;
  if (v39 < v50)
    return 0;
  while (1)
  {
    if (v42)
      v25 = entropic_address;
    else
      v25 = vm_page_size;
    address = v25;
    v36 = mach_vm_map(mach_task_self_, &address, v39, v38, v37, 0, 0, 0, 3, 7, 1u);
    if (v36 == 3 && v42)
    {
      address = vm_page_size;
      v36 = mach_vm_map(mach_task_self_, &address, v39, v38, v37, 0, 0, 0, 3, 7, 1u);
    }
    if (v36)
    {
      if (v36 != 3)
        malloc_zone_error(v48, 0, (uint64_t)"can't allocate region\n:*** mach_vm_map(size=%lu, flags: %x) failed (error code=%d)\n", v5, v6, v7, v8, v9, v50);
      return 0;
    }
    v40 = address;
    if (!v42)
      break;
    if (address + v39 <= entropic_limit
      || (v35 = entropic_address, v34 = entropic_address - 0x10000000, (unint64_t)entropic_address < 0x10000000)
      || v34 < entropic_base)
    {
      if (address < entropic_address)
      {
        v33 = entropic_address - 0x10000000;
        if ((unint64_t)entropic_address >= 0x10000000 && v33 >= entropic_base)
          OSAtomicCompareAndSwapLong(entropic_address, v33, &entropic_address);
      }
      break;
    }
    mach_vm_deallocate(mach_task_self_, address, v39);
    OSAtomicCompareAndSwapLong(v35, v34, &entropic_address);
  }
  if (v44 || v45)
  {
    if (v45 && v49 > vm_page_shift)
    {
      if (vm_kernel_page_size <= vm_page_size)
        v24 = vm_page_size;
      else
        v24 = vm_kernel_page_size;
      v32 = (v40 + v24 + (1 << v49) - 1) & ~((1 << v49) - 1);
      if (vm_kernel_page_size <= vm_page_size)
        v23 = vm_page_size;
      else
        v23 = vm_kernel_page_size;
      size = v32 - v40 - v23;
      if (vm_kernel_page_size <= vm_page_size)
        v22 = vm_page_size;
      else
        v22 = vm_kernel_page_size;
      v30 = (1 << v49) - v22 - size;
      if (mach_vm_deallocate(mach_task_self_, v40, size))
      {
        malloc_zone_error(v48, 0, (uint64_t)"can't unmap excess guard region\n*** mach_vm_deallocate(addr=%p, size=%lu) failed (code=%d)\n", v10, v11, v12, v13, v14, v40);
        return 0;
      }
      if (v30 && mach_vm_deallocate(mach_task_self_, v40 + v39 - v30, v30))
      {
        malloc_zone_error(v48, 0, (uint64_t)"can't unmap excess trailing guard region\n*** mach_vm_deallocate(addr=%p, size=%lu) failed (code=%d)\n", v15, v16, v17, v18, v19, v40 + v39 - v30);
        return 0;
      }
      v40 = v32;
      mvm_protect_plat(v32, v50, 0, v48);
    }
    else
    {
      if (v45)
      {
        if (vm_kernel_page_size <= vm_page_size)
          v21 = vm_page_size;
        else
          v21 = vm_kernel_page_size;
        v40 += v21;
      }
      mvm_protect_plat(v40, v50, 0, v48);
    }
  }
  return v40;
}

void mvm_protect_plat(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  vm_size_t v20;

  if ((a4 & 1) != 0 && (a4 & 8) == 0)
  {
    v20 = vm_kernel_page_size <= vm_page_size ? vm_page_size : vm_kernel_page_size;
    v19 = (void *)(a1 - v20);
    if (vm_kernel_page_size <= vm_page_size ? mprotect(v19, vm_page_size, a3) : mprotect(v19, vm_kernel_page_size, a3))
      malloc_report(3, (uint64_t)"*** can't mvm_protect(%u) region for prelude guard page at %p\n", v5, v6, v7, v8, v9, v10, a3);
  }
  if ((a4 & 2) != 0 && (a4 & 0x10) == 0)
  {
    v18 = (void *)((a1 + a2 + vm_page_size - 1) & ~(vm_page_size - 1));
    if (vm_kernel_page_size <= vm_page_size)
      v11 = mprotect(v18, vm_page_size, a3);
    else
      v11 = mprotect(v18, vm_kernel_page_size, a3);
    if (v11)
      malloc_report(3, (uint64_t)"*** can't mvm_protect(%u) region for postlude guard page at %p\n", v12, v13, v14, v15, v16, v17, a3);
  }
}

void mvm_deallocate_plat(mach_vm_address_t a1, mach_vm_size_t a2, __int16 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (mach_vm_deallocate(mach_task_self_, a1, a2))
    malloc_zone_error(a3, 0, (uint64_t)"Failed to deallocate at address %p of size 0x%lx\n", v3, v4, v5, v6, v7, a1);
}

void mvm_deallocate_pages(mach_vm_address_t a1, mach_vm_size_t a2, __int16 a3)
{
  mvm_deallocate_pages_plat(a1, a2, a3);
}

void mvm_deallocate_pages_plat(mach_vm_address_t a1, mach_vm_size_t a2, __int16 a3)
{
  vm_size_t v3;
  vm_size_t v4;
  vm_size_t v5;
  mach_vm_size_t v6;
  mach_vm_address_t v7;

  v7 = a1;
  v6 = a2;
  if ((a3 & 1) != 0)
  {
    if (vm_kernel_page_size <= vm_page_size)
      v5 = vm_page_size;
    else
      v5 = vm_kernel_page_size;
    v7 = a1 - v5;
    if (vm_kernel_page_size <= vm_page_size)
      v4 = vm_page_size;
    else
      v4 = vm_kernel_page_size;
    v6 = a2 + v4;
  }
  if ((a3 & 2) != 0)
  {
    if (vm_kernel_page_size <= vm_page_size)
      v3 = vm_page_size;
    else
      v3 = vm_kernel_page_size;
    v6 += v3;
  }
  mvm_deallocate_plat(v7, v6, a3);
}

void mvm_protect(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  mvm_protect_plat(a1, a2, a3, a4);
}

BOOL mvm_madvise(void *a1, size_t a2, int a3)
{
  return mvm_madvise_plat(a1, a2, a3);
}

BOOL mvm_madvise_plat(void *a1, size_t a2, int a3)
{
  return madvise(a1, a2, a3) == -1;
}

uint64_t mvm_madvise_free(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, void **a5, int a6)
{
  return mvm_madvise_free_plat(a1, a2, a3, a4, a5, a6);
}

uint64_t mvm_madvise_free_plat(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, void **a5, int a6)
{
  size_t v7;

  if (a4 <= (unint64_t)a3)
    return 0;
  v7 = a4 - (_QWORD)a3;
  if (a6 && malloc_zero_policy)
    _platform_memset(a3, 221, v7);
  if (!a5)
  {
LABEL_9:
    if (mvm_madvise(a3, v7, 7))
      return 1;
    if ((malloc_tracing_enabled & 1) != 0)
      kdebug_trace(855769132, a2, a3, v7);
    return 0;
  }
  if (*a5 != a3)
  {
    *a5 = a3;
    goto LABEL_9;
  }
  return 0;
}

uint64_t mvm_deferred_reclaim_init()
{
  return mach_vm_reclaim_ringbuffer_init(&reclaim_buffer);
}

uint64_t mvm_reclaim_mark_used(uint64_t a1, vm_size_t a2, unsigned int a3, char a4)
{
  BOOL v4;
  vm_size_t v6;
  vm_size_t v7;
  char v8;
  unsigned int v9;
  vm_size_t v10;
  char v12;

  v10 = a2;
  v9 = a3;
  if ((a4 & 3) == 0)
  {
LABEL_14:
    os_unfair_lock_lock_with_options(&reclaim_buffer_lock, 327680);
    v8 = mach_vm_reclaim_mark_used(&reclaim_buffer, a1, v10, v9) & 1;
    os_unfair_lock_unlock((os_unfair_lock_t)&reclaim_buffer_lock);
    v12 = v8 & 1;
    return v12 & 1;
  }
  if (vm_kernel_page_size <= vm_page_size)
    v7 = vm_page_size;
  else
    v7 = vm_kernel_page_size;
  v4 = __CFADD__(a3, 2 * v7);
  v9 = a3 + 2 * v7;
  if (!v4 && a3 + 2 * v7 == v9)
  {
    if (vm_kernel_page_size <= vm_page_size)
      v6 = vm_page_size;
    else
      v6 = vm_kernel_page_size;
    v10 = a2 - v6;
    goto LABEL_14;
  }
  v12 = 0;
  return v12 & 1;
}

uint64_t mvm_reclaim_mark_free(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  BOOL v4;
  vm_size_t v6;
  vm_size_t v7;
  char v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  void *v15;
  void *v16;

  v12 = a1;
  v11 = a2;
  v10 = a3;
  v9 = 0;
  v8 = 0;
  if ((a3 & 3) != 0)
  {
    if (vm_kernel_page_size <= vm_page_size)
      v7 = vm_page_size;
    else
      v7 = vm_kernel_page_size;
    v3 = v11 + 2 * v7;
    v4 = __CFADD__(v11, 2 * v7);
    v11 += 2 * v7;
    if (v4 || v3 != v3)
      return -1;
    if (vm_kernel_page_size <= vm_page_size)
      v6 = vm_page_size;
    else
      v6 = vm_kernel_page_size;
    v12 -= v6;
  }
  v15 = &reclaim_buffer_lock;
  os_unfair_lock_lock_with_options(&reclaim_buffer_lock, 327680);
  v9 = mach_vm_reclaim_mark_free(&reclaim_buffer, v12, v11, 0, &v8);
  v16 = &reclaim_buffer_lock;
  os_unfair_lock_unlock((os_unfair_lock_t)&reclaim_buffer_lock);
  if ((v8 & 1) != 0)
    mach_vm_reclaim_update_kernel_accounting(&reclaim_buffer);
  return v9;
}

uint64_t mvm_reclaim_is_available(uint64_t a1)
{
  return mach_vm_reclaim_is_available(&reclaim_buffer, a1) & 1;
}

BOOL _malloc_detect_interposition()
{
  _BOOL8 result;
  BOOL v1;
  char v2;
  BOOL v3;

  v3 = 1;
  if (!_malloc_symbol_interposed((unint64_t)malloc))
  {
    v3 = 1;
    if (!_malloc_symbol_interposed((unint64_t)calloc))
    {
      v3 = 1;
      if (!_malloc_symbol_interposed((unint64_t)free))
      {
        v3 = 1;
        if (!_malloc_symbol_interposed((unint64_t)realloc))
        {
          v3 = 1;
          if (!_malloc_symbol_interposed((unint64_t)valloc))
          {
            v3 = 1;
            if (!_malloc_symbol_interposed((unint64_t)aligned_alloc))
            {
              v3 = 1;
              if (!_malloc_symbol_interposed((unint64_t)posix_memalign))
              {
                v3 = 1;
                if (!_malloc_symbol_interposed((unint64_t)malloc_zone_malloc))
                {
                  v3 = 1;
                  if (!_malloc_symbol_interposed((unint64_t)malloc_zone_calloc))
                  {
                    v3 = 1;
                    if (!_malloc_symbol_interposed((unint64_t)malloc_zone_free))
                    {
                      v3 = 1;
                      if (!_malloc_symbol_interposed((unint64_t)malloc_zone_realloc))
                      {
                        v3 = 1;
                        if (!_malloc_symbol_interposed((unint64_t)malloc_zone_valloc))
                          v3 = _malloc_symbol_interposed((unint64_t)malloc_zone_memalign);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  result = _malloc_symbol_interposed((unint64_t)malloc_type_malloc);
  v2 = 1;
  if (!result)
  {
    result = _malloc_symbol_interposed((unint64_t)malloc_type_calloc);
    v2 = 1;
    if (!result)
    {
      result = _malloc_symbol_interposed((unint64_t)malloc_type_free);
      v2 = 1;
      if (!result)
      {
        result = _malloc_symbol_interposed((unint64_t)malloc_type_realloc);
        v2 = 1;
        if (!result)
        {
          result = _malloc_symbol_interposed((unint64_t)malloc_type_valloc);
          v2 = 1;
          if (!result)
          {
            result = _malloc_symbol_interposed((unint64_t)malloc_type_aligned_alloc);
            v2 = 1;
            if (!result)
            {
              result = _malloc_symbol_interposed((unint64_t)malloc_type_posix_memalign);
              v2 = 1;
              if (!result)
              {
                result = _malloc_symbol_interposed((unint64_t)malloc_type_zone_malloc);
                v2 = 1;
                if (!result)
                {
                  result = _malloc_symbol_interposed((unint64_t)malloc_type_zone_calloc);
                  v2 = 1;
                  if (!result)
                  {
                    result = _malloc_symbol_interposed((unint64_t)malloc_type_zone_free);
                    v2 = 1;
                    if (!result)
                    {
                      result = _malloc_symbol_interposed((unint64_t)malloc_type_zone_realloc);
                      v2 = 1;
                      if (!result)
                      {
                        result = _malloc_symbol_interposed((unint64_t)malloc_type_zone_valloc);
                        v2 = 1;
                        if (!result)
                        {
                          result = _malloc_symbol_interposed((unint64_t)malloc_type_zone_memalign);
                          v2 = result;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v1 = 0;
  if (v3)
    v1 = !(v2 & 1);
  if ((malloc_interposition_compat & 1) != v1)
    malloc_interposition_compat = v1;
  return result;
}

BOOL _malloc_symbol_interposed(unint64_t a1)
{
  BOOL v2;

  v2 = 1;
  if (a1 >= (unint64_t)&dword_0)
    return a1 >= (unint64_t)&NSVersionOfLinkTimeLibrary_ptr;
  return v2;
}

uint64_t malloc_type_malloc(size_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v5;

  v3 = 1;
  if (!malloc_logger)
  {
    v3 = 1;
    if ((malloc_slowpath & 1) == 0)
      v3 = a1 > malloc_absolute_max_size;
  }
  if (v3)
    return _malloc_type_malloc_outlined(a1, a2, 1);
  v5 = *(_QWORD *)malloc_zones;
  if (*(_DWORD *)(*(_QWORD *)malloc_zones + 104) >= 0x10u)
    return (*(uint64_t (**)(uint64_t, size_t, uint64_t))(v5 + 160))(v5, a1, a2);
  if (*(_DWORD *)(v5 + 104) >= 0xDu)
    return (*(uint64_t (**)(uint64_t, size_t))(v5 + 24))(v5, a1);
  return _malloc_type_malloc_outlined(a1, a2, 1);
}

uint64_t malloc_type_calloc(size_t a1, size_t a2, uint64_t a3)
{
  char v4;
  uint64_t v5;

  v4 = 1;
  if (!malloc_logger)
    v4 = malloc_slowpath;
  if ((v4 & 1) == 0)
  {
    v5 = *(_QWORD *)malloc_zones;
    if (*(_DWORD *)(*(_QWORD *)malloc_zones + 104) >= 0x10u)
      return (*(uint64_t (**)(uint64_t, size_t, size_t, uint64_t))(v5 + 168))(v5, a1, a2, a3);
    if (*(_DWORD *)(v5 + 104) >= 0xDu)
      return (*(uint64_t (**)(uint64_t, size_t, size_t))(v5 + 32))(v5, a1, a2);
  }
  return _malloc_type_calloc_outlined(a1, a2, a3);
}

void malloc_type_free(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _free(a1, a2, a3, a4, a5, a6, a7, a8);
}

id malloc_type_realloc(void *a1, size_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;
  uint64_t (**registered_zone)(void *, void *, size_t);
  uint64_t v13;
  uint64_t v18;
  uint64_t v19;

  v11 = 1;
  if (!malloc_logger)
  {
    v11 = 1;
    if ((malloc_slowpath & 1) == 0)
      v11 = a2 > malloc_absolute_max_size;
  }
  if (v11)
    return _malloc_type_realloc_outlined(a1, a2, a3);
  if (a1 && a2)
  {
    registered_zone = (uint64_t (**)(void *, void *, size_t))find_registered_zone((uint64_t)a1, 0, 0);
    if (!registered_zone)
      return _realloc(a1, a2);
    if (registered_zone == (uint64_t (**)(void *, void *, size_t))default_zone)
      registered_zone = *(uint64_t (***)(void *, void *, size_t))malloc_zones;
    if (*((_DWORD *)registered_zone + 26) < 0x10u)
      v13 = registered_zone[7](registered_zone, a1, a2);
    else
      v13 = ((uint64_t (*)(uint64_t (**)(void *, void *, size_t), void *, size_t, uint64_t))registered_zone[22])(registered_zone, a1, a2, a3);
  }
  else
  {
    v18 = *(_QWORD *)malloc_zones;
    if (*(_DWORD *)(*(_QWORD *)malloc_zones + 104) < 0x10u)
    {
      if (*(_DWORD *)(v18 + 104) >= 0xDu)
        v19 = (*(uint64_t (**)(uint64_t, size_t))(v18 + 24))(v18, a2);
      else
        v19 = _malloc_type_malloc_outlined(a2, a3, 0);
    }
    else
    {
      v19 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(v18 + 160))(v18, a2, a3);
    }
    v13 = v19;
  }
  if (v13)
  {
    if (!a2)
      _free(a1, v3, v4, v5, v6, v7, v8, v9);
  }
  else
  {
    malloc_set_errno_fast(1, 12);
  }
  return (id)v13;
}

uint64_t malloc_type_valloc(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a2)
    v4 = 1;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v4;
  if ((malloc_interposition_compat & 1) == 0 || v5)
    v3 = _malloc_zone_valloc((uint64_t)default_zone, a1, 1u);
  else
    v3 = (uint64_t)j__valloc(a1);
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v5;
  return v3;
}

uint64_t malloc_type_aligned_alloc(unint64_t a1, unint64_t a2, uint64_t a3)
{
  BOOL v4;
  uint64_t v5;

  v4 = 1;
  if (!malloc_logger)
  {
    v4 = 1;
    if ((malloc_slowpath & 1) == 0)
      v4 = a2 > malloc_absolute_max_size;
  }
  if (v4
    || *(_DWORD *)(*(_QWORD *)malloc_zones + 104) < 0x10u
    || a1 < 8
    || ((a1 - 1) & a1) != 0
    || (a2 & (a1 - 1)) != 0)
  {
    return _malloc_type_aligned_alloc_outlined(a1, a2, a3);
  }
  v5 = (*(uint64_t (**)(_QWORD, unint64_t, unint64_t, uint64_t))(*(_QWORD *)malloc_zones + 184))(*(_QWORD *)malloc_zones, a1, a2, a3);
  if (!v5)
    malloc_set_errno_fast(1, 12);
  return v5;
}

uint64_t malloc_type_posix_memalign(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  BOOL v5;
  uint64_t v6;

  v5 = 1;
  if (!malloc_logger)
  {
    v5 = 1;
    if ((malloc_slowpath & 1) == 0)
      v5 = a3 > malloc_absolute_max_size;
  }
  if (v5 || *(_DWORD *)(*(_QWORD *)malloc_zones + 104) < 0x10u || a2 < 8 || ((a2 - 1) & a2) != 0)
  {
    return _malloc_type_posix_memalign_outlined(a1, a2, a3, a4);
  }
  else
  {
    v6 = (*(uint64_t (**)(_QWORD, unint64_t, unint64_t, uint64_t))(*(_QWORD *)malloc_zones + 184))(*(_QWORD *)malloc_zones, a2, a3, a4);
    if (v6)
    {
      *a1 = v6;
      return 0;
    }
    else
    {
      return 12;
    }
  }
}

uint64_t malloc_type_zone_malloc(uint64_t (**a1)(void *, unint64_t, uint64_t), unint64_t a2, uint64_t a3)
{
  BOOL v4;
  uint64_t (**v5)(void *, unint64_t, uint64_t);

  v5 = a1;
  v4 = 1;
  if (!malloc_logger)
  {
    v4 = 1;
    if ((malloc_slowpath & 1) == 0)
      v4 = a2 > malloc_absolute_max_size;
  }
  if (!v4)
  {
    if (a1 == (uint64_t (**)(void *, unint64_t, uint64_t))default_zone)
      v5 = *(uint64_t (***)(void *, unint64_t, uint64_t))malloc_zones;
    if (*((_DWORD *)v5 + 26) >= 0x10u)
      return v5[20](v5, a2, a3);
    if (*((_DWORD *)v5 + 26) >= 0xDu)
      return ((uint64_t (*)(uint64_t (**)(void *, unint64_t, uint64_t), unint64_t))v5[3])(v5, a2);
  }
  return _malloc_type_zone_malloc_outlined((malloc_zone_t *)v5, a2, a3);
}

uint64_t malloc_type_zone_calloc(uint64_t (**a1)(void *, size_t, size_t, uint64_t), size_t a2, size_t a3, uint64_t a4)
{
  char v5;
  uint64_t (**v6)(void *, size_t, size_t, uint64_t);

  v6 = a1;
  v5 = 1;
  if (!malloc_logger)
    v5 = malloc_slowpath;
  if ((v5 & 1) == 0)
  {
    if (a1 == (uint64_t (**)(void *, size_t, size_t, uint64_t))default_zone)
      v6 = *(uint64_t (***)(void *, size_t, size_t, uint64_t))malloc_zones;
    if (*((_DWORD *)v6 + 26) >= 0x10u)
      return v6[21](v6, a2, a3, a4);
    if (*((_DWORD *)v6 + 26) >= 0xDu)
      return ((uint64_t (*)(uint64_t (**)(void *, size_t, size_t, uint64_t), size_t, size_t))v6[4])(v6, a2, a3);
  }
  return _malloc_type_zone_calloc_outlined((malloc_zone_t *)v6, a2, a3, a4);
}

void malloc_type_zone_free(malloc_zone_t *a1, void *a2)
{
  malloc_zone_free(a1, a2);
}

uint64_t malloc_type_zone_realloc(malloc_zone_t *a1, void *a2, unint64_t a3, uint64_t a4)
{
  BOOL v5;
  uint64_t v6;

  v6 = (uint64_t)a1;
  v5 = 1;
  if (!malloc_logger)
  {
    v5 = 1;
    if ((malloc_slowpath & 1) == 0)
      v5 = a3 > malloc_absolute_max_size;
  }
  if (v5)
    return _malloc_type_zone_realloc_outlined(a1, a2, a3, a4);
  if (a1 == (malloc_zone_t *)default_zone)
    v6 = *(_QWORD *)malloc_zones;
  if (*(_DWORD *)(v6 + 104) < 0x10u)
    return _malloc_zone_realloc(v6, (uint64_t)a2, a3, a4);
  else
    return (*(uint64_t (**)(uint64_t, void *, unint64_t, uint64_t))(v6 + 176))(v6, a2, a3, a4);
}

uint64_t malloc_type_zone_valloc(malloc_zone_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a3)
    v5 = 1;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v5;
  if ((malloc_interposition_compat & 1) == 0 || v6)
    v4 = _malloc_zone_valloc((uint64_t)a1, a2, 0);
  else
    v4 = (uint64_t)j__malloc_zone_valloc(a1, a2);
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  return v4;
}

uint64_t malloc_type_zone_memalign(malloc_zone_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  BOOL v5;
  malloc_zone_t *v6;

  v6 = a1;
  v5 = 1;
  if (!malloc_logger)
  {
    v5 = 1;
    if ((malloc_slowpath & 1) == 0)
      v5 = a3 > malloc_absolute_max_size;
  }
  if (v5)
    return _malloc_type_zone_memalign_outlined(v6, a2, a3, a4);
  if (a1 == (malloc_zone_t *)default_zone)
    v6 = *(malloc_zone_t **)malloc_zones;
  if (v6->version < 0x10 || a2 < 8 || ((a2 - 1) & a2) != 0)
    return _malloc_type_zone_memalign_outlined(v6, a2, a3, a4);
  else
    return ((uint64_t (*)(malloc_zone_t *, unint64_t, unint64_t, uint64_t))v6[1].valloc)(v6, a2, a3, a4);
}

uint64_t _malloc_type_malloc_outlined(size_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a2)
    v5 = 1;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v5;
  if ((malloc_interposition_compat & 1) != 0 && !v6 && (a3 & 1) != 0)
    v4 = (uint64_t)j__malloc(a1);
  else
    v4 = _malloc_zone_malloc(default_zone, a1, 1u);
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  return v4;
}

uint64_t _malloc_type_calloc_outlined(size_t a1, size_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a3)
    v5 = 1;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v5;
  if ((malloc_interposition_compat & 1) == 0 || v6)
    v4 = _malloc_zone_calloc(default_zone, a1, a2, 1u);
  else
    v4 = (uint64_t)j__calloc(a1, a2);
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  return v4;
}

id _malloc_type_realloc_outlined(void *a1, size_t a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a3)
    v5 = 1;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v5;
  if ((malloc_interposition_compat & 1) == 0 || v6)
    v4 = _realloc(a1, a2);
  else
    v4 = j__realloc(a1, a2);
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  return v4;
}

uint64_t _malloc_type_aligned_alloc_outlined(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a3)
    v5 = 1;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v5;
  if ((malloc_interposition_compat & 1) == 0 || v6)
    v4 = _malloc_zone_memalign((uint64_t)default_zone, a1, a2, 3u, 0);
  else
    v4 = (uint64_t)j__aligned_alloc(a1, a2);
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  return v4;
}

uint64_t _malloc_type_posix_memalign_outlined(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v6 = a4;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a4)
    v6 = 1;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  if ((malloc_interposition_compat & 1) == 0 || v7)
    v5 = _posix_memalign(a1, a2, a3);
  else
    v5 = j__posix_memalign((void **)a1, a2, a3);
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v7;
  return v5;
}

uint64_t _malloc_type_zone_malloc_outlined(malloc_zone_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a3)
    v5 = 1;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v5;
  if ((malloc_interposition_compat & 1) == 0 || v6)
    v4 = _malloc_zone_malloc(a1, a2, 0);
  else
    v4 = (uint64_t)j__malloc_zone_malloc(a1, a2);
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  return v4;
}

uint64_t _malloc_type_zone_calloc_outlined(malloc_zone_t *a1, size_t a2, size_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = a4;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a4)
    v6 = 1;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  if ((malloc_interposition_compat & 1) == 0 || v7)
    v5 = _malloc_zone_calloc(a1, a2, a3, 0);
  else
    v5 = (uint64_t)j__malloc_zone_calloc(a1, a2, a3);
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v7;
  return v5;
}

uint64_t _malloc_type_zone_realloc_outlined(malloc_zone_t *a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = a4;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a4)
    v6 = 1;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  if ((malloc_interposition_compat & 1) == 0 || v7)
    v5 = _malloc_zone_realloc((uint64_t)a1, (uint64_t)a2, a3, 0);
  else
    v5 = (uint64_t)j__malloc_zone_realloc(a1, a2, a3);
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v7;
  return v5;
}

uint64_t _malloc_type_zone_memalign_outlined(malloc_zone_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = a4;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a4)
    v6 = 1;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  if ((malloc_interposition_compat & 1) == 0 || v7)
    v5 = _malloc_zone_memalign((uint64_t)a1, a2, a3, 0, 0);
  else
    v5 = (uint64_t)j__malloc_zone_memalign(a1, a2, a3);
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v7;
  return v5;
}

void *malloc_type_zone_malloc_with_options_np(malloc_zone_t *a1, size_t a2, size_t a3, uint64_t a4, uint64_t a5)
{
  return malloc_type_zone_malloc_with_options_internal(a1, a2, a3, a5, a4);
}

void *malloc_type_zone_malloc_with_options_internal(malloc_zone_t *a1, size_t a2, size_t a3, uint64_t a4, uint64_t a5)
{
  char v6;
  BOOL v7;
  BOOL v8;
  malloc_zone_t *v9;

  v9 = a1;
  v8 = 0;
  if (a2)
  {
    v7 = 1;
    if (((a2 - 1) & a2) == 0)
      v7 = (a3 & (a2 - 1)) != 0;
    v8 = v7;
  }
  if (v8)
    return 0;
  v6 = 1;
  if (!malloc_logger)
    v6 = malloc_slowpath;
  if ((v6 & 1) != 0)
    return _malloc_type_zone_malloc_with_options_np_outlined(v9, a2, a3, a5, a4);
  if (a1 == (malloc_zone_t *)default_zone)
    v9 = *(malloc_zone_t **)malloc_zones;
  if (!v9)
    v9 = *(malloc_zone_t **)malloc_zones;
  if (v9->version < 0x10 || !v9[1].free)
    return _malloc_type_zone_malloc_with_options_np_outlined(v9, a2, a3, a5, a4);
  else
    return (void *)((uint64_t (*)(malloc_zone_t *, size_t, size_t, uint64_t, uint64_t))v9[1].free)(v9, a2, a3, a5, a4);
}

void *_malloc_type_zone_malloc_with_options_np_outlined(malloc_zone_t *a1, size_t a2, size_t a3, uint64_t a4, uint64_t a5)
{
  void *result;
  uint64_t v6;
  uint64_t v7;

  v6 = a5;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a5)
    v6 = 1;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  result = _malloc_zone_malloc_with_options_np_outlined(a1, a2, a3, a4);
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v7;
  return result;
}

uint64_t set_msl_lite_hooks(uint64_t (*a1)(uint64_t (**)(), uint64_t))
{
  return a1(malloc_msl_lite_hooks, 24);
}

void insert_msl_lite_zone(uint64_t a1)
{
  lite_zone = a1;
  malloc_slowpath_update();
}

uint64_t get_global_helper_zone()
{
  return *(_QWORD *)malloc_zones;
}

uint64_t mfm_lock()
{
  uint64_t result;

  if (mfm_arena)
    return __mfm_lock(mfm_arena);
  return result;
}

uint64_t __mfm_lock(uint64_t a1)
{
  return os_unfair_lock_lock_with_options(a1, 327680);
}

void mfm_unlock()
{
  if (mfm_arena)
    __mfm_unlock((os_unfair_lock_s *)mfm_arena);
}

void __mfm_unlock(os_unfair_lock_s *a1)
{
  os_unfair_lock_unlock(a1);
}

void mfm_reinit_lock()
{
  if (mfm_arena)
    *(_DWORD *)mfm_arena = 0;
}

uint64_t mfm_initialize()
{
  uint64_t result;
  uint64_t v1;
  _QWORD *v2;
  unsigned int i;
  kern_return_t v4;
  mach_vm_address_t address;
  mach_vm_address_t pages_plat;

  pages_plat = mvm_allocate_pages_plat(0x800000uLL, 0, 1073741827, 1, 0);
  if (!pages_plat)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to allocate memory";
    qword_A4038 = 0;
    __break(1u);
    JUMPOUT(0x2B208);
  }
  address = pages_plat;
  v4 = mach_vm_map(mach_task_self_, &address, 0x800000uLL, 0, 117456896, 0, 0, 0, 3, 7, 1u);
  if (v4)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to overwrite mfm arena";
    qword_A4038 = v4;
    __break(1u);
    JUMPOUT(0x2B2C8);
  }
  *(_DWORD *)pages_plat = 0;
  *(_QWORD *)(pages_plat + 216) = 0x8000000000000000;
  for (i = 0; i <= 0xA; ++i)
  {
    v2 = (_QWORD *)(pages_plat + 16 * i + 32);
    v1 = __mfm_block_offset(pages_plat, (uint64_t)v2);
    __mfm_block_set_next(v2, v1);
    v2[1] = v1;
  }
  result = __mfm_block_mark_start(pages_plat, 0);
  atomic_store(pages_plat, (unint64_t *)&mfm_arena);
  return result;
}

uint64_t __mfm_block_offset(uint64_t a1, uint64_t a2)
{
  return (a2 - a1) / 16;
}

_QWORD *__mfm_block_set_next(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t __mfm_block_mark_start(uint64_t result, unint64_t a2)
{
  *(_QWORD *)(result + 224 + 16 * (a2 >> 6)) |= 1 << (a2 & 0x3F);
  return result;
}

uint64_t mfm_alloc_size(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = mfm_arena;
  if (!__mfm_address_owned(mfm_arena, a1))
    return 0;
  if (a1 % 0x10)
    return 0;
  v2 = __mfm_block_index(v3, a1);
  if (__mfm_block_is_allocated(v3, v2))
    return 16 * __mfm_block_size(v3, v2);
  else
    return 0;
}

BOOL __mfm_address_owned(uint64_t a1, unint64_t a2)
{
  BOOL v3;

  v3 = 0;
  if (a1)
  {
    v3 = 0;
    if (a2 >= a1 + 0x20000)
      return a2 < a1 + 0x800000;
  }
  return v3;
}

uint64_t __mfm_block_index(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xF) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: invalid address";
    qword_A4038 = a2;
    __break(1u);
    JUMPOUT(0x2B614);
  }
  return (a2 - a1 - 0x20000) >> 4;
}

BOOL __mfm_block_is_allocated(uint64_t a1, unint64_t a2)
{
  return (*(_QWORD *)(a1 + 224 + 16 * (a2 >> 6)) & *(_QWORD *)(a1 + 224 + 8 * (2 * (a2 >> 6) + 1)) & (1 << (a2 & 0x3F))) != 0;
}

uint64_t __mfm_block_size(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  unint64_t v3;
  int v4;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;

  v10 = (unint64_t)(a2 + 1) >> 6;
  v9 = ((_BYTE)a2 + 1) & 0x3F;
  v6 = *(_QWORD *)(a1 + 224 + 16 * v10) >> ((a2 + 1) & 0x3F);
  if (v6)
    return (int)(__clz(__rbit64(v6)) + 1);
  v7 = *(_QWORD *)(a1 + 224 + 8 * (2 * v10 + 2));
  if (v7)
    return (int)(__clz(__rbit64(v7)) + 65) - v9;
  v8 = *(unint64_t *)(a1 + 224 + 8 * (2 * v10 + 1));
  if (v9 + 19 > 0x40)
  {
    *(_QWORD *)&v2 = *(_QWORD *)(a1 + 224 + 8 * (2 * v10 + 1));
    *((_QWORD *)&v2 + 1) = *(_QWORD *)(a1 + 224 + 8 * (2 * v10 + 3));
    v8 = v2;
  }
  v3 = ((unint64_t)v8 >> v9) | (*((_QWORD *)&v8 + 1) << (64 - v9));
  if (v9 >= 0x40)
    v3 = *((_QWORD *)&v8 + 1) >> (v9 - 64);
  v4 = v8;
  if ((((_BYTE)a2 + 1) & 0x3F) != 0)
    v4 = v3;
  return (v4 & 0x7FFFF) + 1;
}

uint64_t mfm_alloc(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unsigned int i;
  uint64_t v9;
  uint64_t v10;

  v10 = mfm_arena;
  v9 = 0;
  if (a1 > 0x4000)
    return 0;
  if (a1)
  {
    if (a1 % 0x10)
      v3 = a1 / 0x10 + 1;
    else
      v3 = a1 / 0x10;
    v2 = v3;
  }
  else
  {
    v2 = 1;
  }
  __mfm_lock(mfm_arena);
  for (i = __mfm_size_class_up(v2); i < 0xB; ++i)
  {
    v7 = (_QWORD *)(v10 + 16 * __mfm_block_next(v10 + 32 + 16 * i));
    if ((_QWORD *)(v10 + 32 + 16 * i) != v7)
    {
      __mfm_block_remove(v10, v7);
      v5 = ((uint64_t)v7 - v10 - 0x20000) / 16;
      v6 = __mfm_block_size(v10, v5);
      if (v6 > v2)
      {
        __mfm_block_mark_start(v10, v5 + v2);
        __mfm_free_block(v10, v5 + v2, v6 - v2);
      }
      __mfm_block_mark_allocated(v10, v5, v2);
      v9 = (uint64_t)v7;
      *(_DWORD *)(v10 + 4) += v2;
      ++*(_QWORD *)(v10 + 24);
      goto LABEL_19;
    }
  }
  if (v2 < 516096 - *(_QWORD *)(mfm_arena + 8))
  {
    v4 = *(_QWORD *)(mfm_arena + 8);
    __mfm_block_mark_start(v10, v4 + v2);
    __mfm_block_mark_allocated(v10, v4, v2);
    *(_QWORD *)(mfm_arena + 8) += v2;
    *(_DWORD *)(v10 + 4) += v2;
    ++*(_QWORD *)(v10 + 24);
    v9 = v10 + 0x20000 + 16 * v4;
    if (*(_QWORD *)(mfm_arena + 16) < *(_QWORD *)(mfm_arena + 8))
      *(_QWORD *)(mfm_arena + 16) = *(_QWORD *)(mfm_arena + 8);
  }
LABEL_19:
  __mfm_unlock((os_unfair_lock_s *)v10);
  return v9;
}

uint64_t __mfm_size_class_up(unint64_t a1)
{
  unsigned int v3;

  if (a1 <= 1)
  {
    return 0;
  }
  else
  {
    v3 = 64 - __clz(a1 - 1);
    if (v3 >= 0xA)
      return 10;
    else
      return v3;
  }
}

uint64_t __mfm_block_next(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *__mfm_block_remove(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = __mfm_block_next((uint64_t)a2);
  v4 = a2[1];
  *(_QWORD *)(a1 + 16 * v2 + 8) = v4;
  result = __mfm_block_set_next((_QWORD *)(a1 + 16 * v4), v2);
  *a2 = 0;
  a2[1] = 0;
  return result;
}

_QWORD *__mfm_free_block(uint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v4;

  v4 = (_QWORD *)(a1 + 32 + 16 * __mfm_size_class_down(a3));
  __mfm_block_mark_free(a1, a2, a3);
  return __mfm_block_insert_head(a1, v4, (_QWORD *)(a1 + 0x20000 + 16 * a2));
}

double __mfm_block_mark_allocated(uint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  double result;

  if (a3 >= 0x40)
    return __mfm_block_set_sizes(a1, 1, a2, a3);
  v3 = (_QWORD *)(a1 + 224 + 8 * (2 * (a2 >> 6) + 1));
  *v3 |= 1 << (a2 & 0x3F);
  v4 = (_QWORD *)(a1 + 224 + 8 * (2 * ((a2 + a3 - 1) >> 6) + 1));
  *v4 |= 1 << ((a2 + a3 - 1) & 0x3F);
  return result;
}

void mfm_free(uint64_t a1)
{
  uint64_t v1;
  uint64_t block_size;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = mfm_arena;
  if (!__mfm_address_owned(mfm_arena, a1))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: not MFM owned";
    qword_A4038 = a1;
    __break(1u);
    JUMPOUT(0x2BFCCLL);
  }
  v5 = __mfm_block_index(v6, a1);
  if (!__mfm_block_is_allocated(v6, v5))
  {
    qword_A4008 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: not an allocated block";
    qword_A4038 = a1;
    __break(1u);
    JUMPOUT(0x2C02CLL);
  }
  v4 = __mfm_block_size(v6, v5);
  _platform_bzero(a1, 16 * v4);
  __mfm_lock(v6);
  if (!__mfm_block_is_allocated(v6, v5) || v4 != __mfm_block_size(v6, v5))
  {
    qword_A4008 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: double free detected";
    qword_A4038 = a1;
    __break(1u);
    JUMPOUT(0x2C0C8);
  }
  *(_DWORD *)(v6 + 4) -= v4;
  --*(_QWORD *)(v6 + 24);
  if (!__mfm_prev_block_is_allocated(v6, v5))
  {
    block_size = __mfm_prev_block_size(v6, v5);
    __mfm_block_clear_start(v6, v5);
    __mfm_block_remove(v6, (_QWORD *)(v6 + 16 * (v5 - block_size) + 0x20000));
    v5 -= block_size;
    v4 += block_size;
  }
  if (v5 + v4 < *(_QWORD *)(v6 + 8) && !__mfm_block_is_allocated(v6, v5 + v4))
  {
    v1 = __mfm_block_size(v6, v5 + v4);
    __mfm_block_clear_start(v6, v5 + v4);
    __mfm_block_remove(v6, (_QWORD *)(v6 + 16 * (v5 + v4) + 0x20000));
    v4 += v1;
  }
  if (v5 + v4 == *(_QWORD *)(v6 + 8))
  {
    __mfm_block_clear_start(v6, v5 + v4);
    __mfm_block_mark_free(v6, v5, v4);
    *(_QWORD *)(v6 + 8) = v5;
  }
  else
  {
    __mfm_free_block(v6, v5, v4);
  }
  __mfm_unlock((os_unfair_lock_s *)v6);
}

BOOL __mfm_prev_block_is_allocated(uint64_t a1, uint64_t a2)
{
  return (*(_QWORD *)(a1 + 224 + 8 * (2 * ((a2 - 1) >> 6) + 1)) & (1 << ((a2 - 1) & 0x3F))) != 0;
}

uint64_t __mfm_prev_block_size(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;

  v9 = (a2 - 1) >> 6;
  v8 = ((_BYTE)a2 - 1) & 0x3F;
  v5 = *(_QWORD *)(a1 + 224 + 16 * v9) << (63 - ((a2 - 1) & 0x3F));
  if (v5)
    return (int)(__clz(v5) + 1);
  v6 = *(_QWORD *)(a1 + 224 + 8 * (2 * v9 - 2));
  if (v6)
    return v8 + (int)__clz(v6) + 2;
  *(_QWORD *)&v2 = 0;
  *((_QWORD *)&v2 + 1) = *(_QWORD *)(a1 + 224 + 8 * (2 * v9 + 1));
  v7 = v2;
  if (v8 < 0x13)
    v7 = v2 | *(unint64_t *)(a1 + 224 + 8 * (2 * v9 - 1));
  v3 = ((unint64_t)v7 >> (v8 + 45)) | (*((_QWORD *)&v7 + 1) << (19 - v8));
  if (v8 + 45 >= 0x40)
    v3 = *((_QWORD *)&v7 + 1) >> (v8 - 19);
  return (v3 & 0x7FFFF) + 1;
}

uint64_t __mfm_block_clear_start(uint64_t result, unint64_t a2)
{
  *(_QWORD *)(result + 224 + 16 * (a2 >> 6)) &= ~(1 << (a2 & 0x3F));
  return result;
}

double __mfm_block_mark_free(uint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  double result;

  if (a3 >= 0x40)
    return __mfm_block_set_sizes(a1, 0, a2, a3);
  v3 = (_QWORD *)(a1 + 224 + 8 * (2 * (a2 >> 6) + 1));
  *v3 &= ~(1 << (a2 & 0x3F));
  v4 = (_QWORD *)(a1 + 224 + 8 * (2 * ((a2 + a3 - 1) >> 6) + 1));
  *v4 &= ~(1 << ((a2 + a3 - 1) & 0x3F));
  return result;
}

BOOL mfm_claimed_address(unint64_t a1)
{
  return __mfm_address_owned(mfm_arena, a1);
}

uint64_t mfm_zone_address()
{
  return mfm_arena;
}

uint64_t mfmi_enumerator(unsigned int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD, uint64_t, uint64_t, _QWORD *, uint64_t))
{
  unint64_t i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[2];
  unsigned int v13;
  uint64_t v14;
  void (*v15)(_QWORD, uint64_t, uint64_t, _QWORD *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD v22[64];

  v20 = a1;
  v19 = a2;
  v18 = a3;
  v17 = a4;
  v16 = a5;
  v15 = a6;
  v14 = 0;
  v13 = mfmi_read_zone(a1, a4, a5, &v14);
  if (v13)
  {
    return v13;
  }
  else
  {
    if ((v18 & 4) != 0)
    {
      v12[0] = v17;
      v12[1] = 0x20000;
      v15(v20, v19, 4, v12, 1);
    }
    if ((v18 & 2) != 0)
    {
      v11[0] = v17 + 0x20000;
      v11[1] = 8257536;
      v15(v20, v19, 2, v11, 1);
    }
    if ((v18 & 1) != 0)
    {
      v9 = 0;
      for (i = 0; i < *(_QWORD *)(v14 + 8); i += v8)
      {
        v10 = v14 + 0x20000 + 16 * i;
        v8 = __mfm_block_size(v14, i);
        if (__mfm_block_is_allocated(v14, i))
        {
          if (v9 == 32)
          {
            v15(v20, v19, 1, v22, v9);
            v9 = 0;
          }
          v22[2 * v9] = v17 + v10 - v14;
          v22[2 * v9++ + 1] = 16 * v8;
        }
      }
      if (v9)
        v15(v20, v19, 1, v22, v9);
    }
    return 0;
  }
}

unint64_t mfmi_good_size(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x4000)
    return 0;
  if (a2 % 0x10)
    return a2 + 16 - a2 % 0x10;
  else
    return a2;
}

uint64_t mfmi_check()
{
  return 1;
}

uint64_t mfmi_print_self(uint64_t a1, int a2)
{
  uint64_t result;

  if (mfm_arena)
    return print_mfm_arena(mfm_arena, a2 != 0, (void (*)(const char *, ...))malloc_report_simple);
  return result;
}

uint64_t mfmi_force_lock()
{
  return mfm_lock();
}

void mfmi_force_unlock()
{
  mfm_unlock();
}

uint64_t mfmi_statistics_self(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  v3 = mfm_arena;
  result = _platform_bzero(a2, 32);
  if (v3)
    return mfmi_statistics(v3, a2);
  return result;
}

uint64_t mfmi_locked()
{
  os_unfair_lock_s *v1;

  v1 = (os_unfair_lock_s *)mfm_arena;
  if (mfm_arena && os_unfair_lock_trylock((os_unfair_lock_t)mfm_arena))
  {
    os_unfair_lock_unlock(v1);
    return 1;
  }
  else
  {
    return 0;
  }
}

void mfmi_reinit_lock()
{
  mfm_reinit_lock();
}

uint64_t mfmi_print_task(unsigned int a1, unsigned int a2, const void *a3, uint64_t a4, void (*a5)(const char *, ...))
{
  uint64_t v6;
  uint64_t (*v7)(const char *, ...);
  uint64_t v8;
  const void *v9;
  unsigned int v10;
  unsigned int v11;

  v11 = a1;
  v10 = a2;
  v9 = a3;
  v8 = a4;
  v7 = (uint64_t (*)(const char *, ...))a5;
  v6 = 0;
  if (mfmi_read_zone(a1, (uint64_t)a3, a4, &v6))
    return v7("Failed to read ProbGuard zone at %p\n", v9);
  else
    return mfmi_print(v6, v10 >= 2, (void (*)(const char *, ...))v7);
}

uint64_t mfmi_statistics_task(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v10 = a1;
  v9 = a2;
  v8 = a3;
  v7 = a4;
  v6 = 0;
  v5 = mfmi_read_zone(a1, a2, a3, &v6);
  result = _platform_bzero(v7, 32);
  if (!v5)
    return mfmi_statistics(v6, v7);
  return result;
}

uint64_t __mfm_size_class_down(unint64_t a1)
{
  unsigned int v3;

  v3 = 63 - __clz(a1);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

_QWORD *__mfm_block_insert_head(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = __mfm_block_offset(a1, (uint64_t)a2);
  v4 = __mfm_block_next((uint64_t)a2);
  v5 = __mfm_block_offset(a1, (uint64_t)a3);
  a3[1] = v6;
  __mfm_block_set_next(a3, v4);
  result = __mfm_block_set_next(a2, v5);
  *(_QWORD *)(a1 + 16 * v4 + 8) = v5;
  return result;
}

double __mfm_block_set_sizes(uint64_t a1, char a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  _QWORD *v22;
  _QWORD *v23;
  double result;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v27 = a3 >> 6;
  v25 = a3 & 0x3F;
  v29 = 2 * (a4 - 1) + (unint64_t)(a2 & 1);
  v4 = 0xFFFFFLL << v25;
  v5 = 0xFFFFFuLL >> (64 - v25);
  if (v25 >= 0x40)
  {
    v4 = 0;
    v5 = 0xFFFFFLL << (v25 - 64);
  }
  v6 = 0;
  if ((a3 & 0x3F) != 0)
    v6 = v5;
  *(_QWORD *)&v7 = v4;
  *((_QWORD *)&v7 + 1) = v6;
  v31 = v7;
  v8 = (_QWORD)v29 << v25;
  v9 = ((unint64_t)v29 >> (64 - v25)) | (*((_QWORD *)&v29 + 1) << v25);
  if (v25 >= 0x40)
  {
    v8 = 0;
    v9 = (_QWORD)v29 << (v25 - 64);
  }
  v10 = 0;
  if ((a3 & 0x3F) != 0)
    v10 = v9;
  v11 = v8;
  v12 = (_QWORD *)(a1 + 224 + 8 * (2 * v27 + 1));
  *v12 &= ~(_QWORD)v31;
  *v12 |= v11;
  if (v25 + 19 >= 0x40)
  {
    v13 = (_QWORD *)(a1 + 224 + 8 * (2 * v27 + 3));
    *v13 &= ~*((_QWORD *)&v31 + 1);
    *v13 |= v10;
  }
  v28 = (a3 + a4 - 1) >> 6;
  v26 = ((_BYTE)a3 + (_BYTE)a4 - 1) & 0x3F;
  v30 = a4 - 1 + ((unint64_t)(a2 & 1) << 19);
  v14 = 0xFFFFFLL << (v26 + 45);
  v15 = 0xFFFFFuLL >> (19 - ((a3 + a4 - 1) & 0x3F));
  if ((unint64_t)(v26 + 45) >= 0x40)
  {
    v14 = 0;
    v15 = 0xFFFFFLL << (((a3 + a4 - 1) & 0x3F) - 19);
  }
  v16 = 0;
  if ((((_BYTE)a3 + (_BYTE)a4 - 1) & 0x3F) != 0xFFFFFFFFFFFFFFD3)
    v16 = v15;
  v17 = v14;
  v18 = v16;
  v19 = (_QWORD)v30 << (v26 + 45);
  v20 = ((unint64_t)v30 >> (19 - v26)) | (*((_QWORD *)&v30 + 1) << (v26 + 45));
  if ((unint64_t)(v26 + 45) >= 0x40)
  {
    v19 = 0;
    v20 = (_QWORD)v30 << (v26 - 19);
  }
  v21 = *(double *)&v20;
  if ((unint64_t)(v26 + 46) <= 0x40)
  {
    v22 = (_QWORD *)(a1 + 224 + 8 * (2 * v28 - 1));
    *v22 &= ~v17;
    *v22 |= v19;
  }
  v23 = (_QWORD *)(a1 + 224 + 8 * (2 * v28 + 1));
  *v23 &= ~v18;
  result = v21;
  *v23 |= *(_QWORD *)&v21;
  return result;
}

uint64_t mfmi_read_zone(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t (*v6)(unsigned int, uint64_t, uint64_t, _QWORD *);

  v6 = reader_or_in_memory_fallback_1(a3, a1);
  return v6(a1, a2, 0x800000, a4);
}

uint64_t (*reader_or_in_memory_fallback_1(uint64_t a1, unsigned int a2))(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v3;

  if (a1)
    return (uint64_t (*)(unsigned int, uint64_t, uint64_t, _QWORD *))a1;
  v3 = 1;
  if (a2)
    v3 = mach_task_is_self(a2) != 0;
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x2D4A4);
  }
  return _malloc_default_reader_1;
}

uint64_t _malloc_default_reader_1(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v5;

  v5 = 1;
  if (a1)
    v5 = mach_task_is_self(a1) != 0;
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x2D544);
  }
  *a4 = a2;
  return 0;
}

uint64_t print_mfm_arena(uint64_t a1, char a2, void (*a3)(const char *, ...))
{
  uint64_t result;
  BOOL is_allocated;
  unint64_t k;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *j;
  uint64_t v10;
  unsigned int i;
  char v13;

  v13 = a2 & 1;
  a3("mfm_arena info\n");
  a3(" address      : %p\n", (const void *)a1);
  a3(" size         : %zd\n", 16 * *(unsigned int *)(a1 + 4));
  a3(" high water   : %zd\n", 16 * *(_QWORD *)(a1 + 8));
  a3(" arena        : [%p, %p)\n", (const void *)(a1 + 0x20000), (const void *)(a1 + 0x800000));
  a3("\n");
  a3("freelists\n");
  for (i = 0; i < 0xB; ++i)
  {
    v10 = a1 + 32 + 16 * i;
    a3(" size %-8zd:\n", 16 << i);
    for (j = (char *)(a1 + 16 * __mfm_block_next(v10));
          j != (char *)v10;
          j = (char *)(a1 + 16 * __mfm_block_next((uint64_t)j)))
    {
      v8 = __mfm_block_size(a1, (uint64_t)&j[-a1 - 0x20000] / 16);
      a3("  [%p, %p) size=%zd\n", j, &j[16 * v8], 16 * v8);
    }
  }
  result = ((uint64_t (*)(const char *))a3)("\n");
  if ((v13 & 1) != 0)
  {
    a3("blocks\n");
    for (k = 0; k < *(_QWORD *)(a1 + 8); k += v6)
    {
      is_allocated = __mfm_block_is_allocated(a1, k);
      v6 = __mfm_block_size(a1, k);
      a3(" %c[%p, %p) size=%zd\n", asc_8C5D5[is_allocated], (const void *)(a1 + 0x20000 + 16 * k), (const void *)(a1 + 0x20000 + 16 * k + 16 * v6), 16 * v6);
    }
    v7 = (char *)(a1 + 0x20000 + 16 * *(_QWORD *)(a1 + 8));
    a3("  [%p, %p) size=%zd (bump)\n", v7, &v7[16 * (516096 - *(_QWORD *)(a1 + 8))], 16 * (516096 - *(_QWORD *)(a1 + 8)));
    return ((uint64_t (*)(const char *))a3)("\n");
  }
  return result;
}

uint64_t mfmi_statistics(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  *(_DWORD *)a2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 8) = 16 * *(unsigned int *)(result + 4);
  *(_QWORD *)(a2 + 24) = 0x800000;
  *(_QWORD *)(a2 + 16) += (8 * (2 * v2 / 0x40uLL) + 224 + vm_page_size - 1) & ~(vm_page_size - 1);
  *(_QWORD *)(a2 + 16) += (vm_page_size - 1 + 16 * v2) & ~(vm_page_size - 1);
  return result;
}

uint64_t mfmi_print(uint64_t a1, char a2, void (*a3)(const char *, ...))
{
  return print_mfm_arena(a1, a2 & 1, a3);
}

uint64_t xzm_segment_group_segment_foreach_span(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v14;
  BOOL v15;

  v11 = a1 + 2136 + 48 * *(unsigned int *)(a1 + 16);
  v10 = a1 + 2136;
  if (*(_BYTE *)(a1 + 20) == 1)
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a2 + 16))(a2, a1 + 2136, *(unsigned int *)(a1 + 2176));
  }
  else
  {
    while (v10 < v11)
    {
      v7 = *(_BYTE *)(v10 + 32) & 0xF;
      v15 = v7 == 2 || v7 - 5 <= 2;
      if (v15 || v7 == 8)
      {
        if (v7 == 2)
          v6 = 1;
        else
          v6 = *(_DWORD *)(v10 + 40);
        v8 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(a2 + 16))(a2, v10, v6);
        if (v8)
          return v8;
        v10 += 48 * v6;
      }
      else
      {
        v5 = v10;
        do
        {
          v10 += 48;
          v4 = *(_BYTE *)(v10 + 32) & 0xF;
          v14 = v4 == 2 || (v4 - 5) <= 2;
          v3 = 0;
          if (!v14)
          {
            v3 = 0;
            if ((*(_BYTE *)(v10 + 32) & 0xF) != 8)
              v3 = v10 < v11;
          }
        }
        while (v3);
        v9 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(a2 + 16))(a2, v5, (uint64_t)(v10 - v5) / 48);
        if (v9)
          return v9;
      }
    }
    return 0;
  }
}

uint64_t xzm_segment_table_foreach(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4)
{
  unsigned int v5;
  unint64_t v6;
  unint64_t i;
  unint64_t v8;

  v8 = 0;
  if (a4)
    v8 = *a4;
  for (i = 0; i < a2; ++i)
  {
    v6 = (unint64_t)*(unsigned int *)(a1 + 4 * i) << 14;
    if (v6)
    {
      if (v6 != v8)
      {
        v8 = (unint64_t)*(unsigned int *)(a1 + 4 * i) << 14;
        v5 = (*(uint64_t (**)(uint64_t, unint64_t))(a3 + 16))(a3, v6);
        if (v5)
          return v5;
      }
    }
  }
  if (a4)
    *a4 = v8;
  return 0;
}

uint64_t xzm_ptr_in_use_enumerator(unsigned int a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, uint64_t **), void (*a6)(_QWORD, uint64_t, uint64_t, _QWORD *, uint64_t))
{
  void **v8;
  int v9;
  int v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int, uint64_t);
  void *v12;
  void (*v13)(_QWORD, uint64_t, uint64_t, _QWORD *, uint64_t);
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  void **v17;
  int v18;
  int v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v21;
  void (*v22)(_QWORD, uint64_t, uint64_t, _QWORD *, uint64_t);
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  void **v28;
  int v29;
  int v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t, char);
  void *v32;
  void (*v33)(_QWORD, uint64_t, uint64_t, _QWORD *, uint64_t);
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_QWORD, uint64_t, uint64_t, _QWORD *, uint64_t);
  uint64_t (*v48)(_QWORD, uint64_t, uint64_t, uint64_t **);
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int v52;

  v52 = a1;
  v51 = a2;
  v50 = a3;
  v49 = a4;
  v48 = a5;
  v47 = a6;
  v46 = 0;
  v45 = 0;
  v44 = 0;
  v43 = 0;
  v48 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t **))reader_or_in_memory_fallback_2((uint64_t)a5, a1);
  v42 = (v50 & 4) != 0;
  v41 = (v50 & 2) != 0;
  v40 = (v50 & 1) != 0;
  v39 = _xzm_introspect_map_zone_and_main(v52, v49, (uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD **))v48, &v46, &v45, &v44);
  if (v39)
  {
    return v39;
  }
  else
  {
    v43 = v49 == v44;
    if (v49 == v44
      && (v38 = 0, v38 = *(_QWORD *)(v45 + 336), (v39 = mfmi_enumerator(v52, v51, v50, v38, (uint64_t)v48, v47)) != 0))
    {
      return v39;
    }
    else
    {
      v28 = _NSConcreteStackBlock;
      v29 = 0x40000000;
      v30 = 0;
      v31 = __xzm_ptr_in_use_enumerator_block_invoke;
      v32 = &__block_descriptor_tmp;
      v36 = v42;
      v37 = v43;
      v33 = v47;
      v35 = v52;
      v34 = v51;
      v17 = _NSConcreteStackBlock;
      v18 = 0x40000000;
      v19 = 0;
      v20 = __xzm_ptr_in_use_enumerator_block_invoke_3;
      v21 = &__block_descriptor_tmp_4;
      v25 = v42;
      v22 = v47;
      v24 = v52;
      v23 = v51;
      v26 = v41;
      v27 = v40;
      if (v43)
      {
        v8 = _NSConcreteStackBlock;
        v9 = 0x40000000;
        v10 = 0;
        v11 = __xzm_ptr_in_use_enumerator_block_invoke_4;
        v12 = &__block_descriptor_tmp_6;
        v16 = v41;
        v13 = v47;
        v15 = v52;
        v14 = v51;
        return _xzm_introspect_enumerate(v52, v48, v49, v46, v44, v45, v40, (uint64_t)&v28, (uint64_t)&__block_literal_global, (uint64_t)&v17, (uint64_t)&v8);
      }
      else
      {
        return _xzm_introspect_enumerate(v52, v48, v49, v46, v44, v45, v40, (uint64_t)&v28, (uint64_t)&__block_literal_global, (uint64_t)&v17, 0);
      }
    }
  }
}

void xzm_print_self(_BYTE *a1, int a2)
{
  int v2;

  if (a2)
    v2 = 2;
  else
    v2 = 0;
  xzm_print(mach_task_self_, v2, a1, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t **))_malloc_default_reader_2, (void (*)(const char *, ...))malloc_report_simple);
}

void xzm_statistics_self(uint64_t a1, _OWORD *a2)
{
  if (!*(_QWORD *)(a1 + 232))
    mfm_lock();
  xzm_force_lock(a1);
  xzm_statistics(mach_task_self_, a1, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t **))_malloc_default_reader_2, (uint64_t)malloc_report_simple, a2);
  xzm_force_unlock(a1);
  if (!*(_QWORD *)(a1 + 232))
    mfm_unlock();
}

void xzm_print_task(unsigned int a1, int a2, _BYTE *a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t, uint64_t **), void (*a5)(const char *, ...))
{
  xzm_print(a1, a2, a3, a4, a5);
}

uint64_t xzm_statistics_task(unsigned int a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, uint64_t, uint64_t **), _OWORD *a4)
{
  return xzm_statistics(a1, a2, a3, 0, a4);
}

uint64_t (*reader_or_in_memory_fallback_2(uint64_t a1, unsigned int a2))(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v3;

  if (a1)
    return (uint64_t (*)(unsigned int, uint64_t, uint64_t, _QWORD *))a1;
  v3 = 1;
  if (a2)
    v3 = mach_task_is_self(a2) != 0;
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x2E3F4);
  }
  return _malloc_default_reader_2;
}

uint64_t _xzm_introspect_map_zone_and_main(unsigned int a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, unint64_t, _QWORD **), _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t (*v16)(_QWORD, uint64_t, unint64_t, _QWORD **);
  uint64_t v17;
  unsigned int v18;

  v18 = a1;
  v17 = a2;
  v16 = a3;
  v15 = a4;
  v14 = a5;
  v13 = a6;
  v12 = 0;
  v11 = a3(a1, a2, 304uLL, &v12);
  if (v11)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to map zone";
    __break(1u);
    JUMPOUT(0x2E4A8);
  }
  v10 = 0;
  v10 = v12[25];
  if (v10 <= 0x12F)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: inconsistent zone region info";
    __break(1u);
    JUMPOUT(0x2E4F8);
  }
  v11 = v16(v18, v17, v10, &v12);
  if (v11)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to map full zone";
    __break(1u);
    JUMPOUT(0x2E54CLL);
  }
  v9 = 0;
  if (v12[29])
  {
    v7 = v12[29];
    v11 = v16(v18, v7, 472uLL, &v9);
    if (v11)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to map main zone";
      __break(1u);
      JUMPOUT(0x2E5D8);
    }
    v8 = v9[38];
    if (v8 <= 0x1D7)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: inconsistent main zone info";
      __break(1u);
      JUMPOUT(0x2E620);
    }
    v11 = v16(v18, v7, v8, &v9);
    if (v11)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to map full main zone";
      __break(1u);
      JUMPOUT(0x2E674);
    }
  }
  else
  {
    v9 = v12;
    if (v12[38] != v10)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: inconsistent main zone size";
      __break(1u);
      JUMPOUT(0x2E6C4);
    }
    v7 = v17;
    v8 = v10;
  }
  if (v8 < v9[38])
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: inconsistent main region size";
    __break(1u);
    JUMPOUT(0x2E71CLL);
  }
  if (!v12)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"zone\" failed (/Library/Caches/com.apple.xbs/Sources/lib"
                           "malloc_driverkit/src/xzone/xzone_introspect.c:557)";
    __break(1u);
    JUMPOUT(0x2E754);
  }
  if (!v9)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"main\" failed (/Library/Caches/com.apple.xbs/Sources/lib"
                           "malloc_driverkit/src/xzone/xzone_introspect.c:558)";
    __break(1u);
    JUMPOUT(0x2E784);
  }
  if (!v7)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"main_address\" failed (/Library/Caches/com.apple.xbs/Sou"
                           "rces/libmalloc_driverkit/src/xzone/xzone_introspect.c:559)";
    __break(1u);
    JUMPOUT(0x2E7B4);
  }
  *v15 = v12;
  *v14 = v9;
  *v13 = v7;
  return 0;
}

uint64_t _xzm_introspect_enumerate(unsigned int a1, uint64_t (*a2)(_QWORD, uint64_t, uint64_t, uint64_t **), uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t k;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  void **v31;
  int v32;
  int v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  BOOL v45;
  void ***v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t j;
  uint64_t v52;
  int i;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(_QWORD, uint64_t, uint64_t, uint64_t **);
  unsigned int v65;
  BOOL v67;
  char v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  BOOL v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  BOOL v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  BOOL v96;

  v65 = a1;
  v64 = a2;
  v63 = a3;
  v62 = a4;
  v61 = a5;
  v60 = a6;
  v59 = a7;
  v58 = a8;
  v57 = a3 == a5;
  v23 = 1;
  if (a11)
    v23 = v57;
  if ((v23 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!span_enumerator || zone_is_main\" failed (/Library/Cach"
                           "es/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_introspect.c:267)";
    __break(1u);
    JUMPOUT(0x2E898);
  }
  v56 = 0;
  if (v57)
    v22 = *(_QWORD *)(v60 + 304);
  else
    v22 = *(_QWORD *)(v62 + 200);
  v56 = v22;
  if (v57)
  {
    v55 = 0;
    v55 = (unint64_t)*(unsigned __int8 *)(v60 + 330) << 6;
    v69 = 0;
    v54 = 0;
    v11 = *(_QWORD *)(v60 + 304);
    v12 = *(_QWORD *)(v60 + 400);
    v94 = v61;
    v93 = v60;
    v92 = v11;
    v91 = v12;
    v90 = v55;
    if (v12 >= v61)
    {
      v89 = v91 - v94;
      v88 = 0;
      v13 = __CFADD__(v91 - v94, v90);
      v88 = v91 - v94 + v90;
      v96 = v13;
      if (v13)
      {
        v95 = 0;
      }
      else if (v88 > v92)
      {
        v95 = 0;
      }
      else
      {
        v95 = v93 + v89;
      }
    }
    else
    {
      v95 = 0;
    }
    v54 = v95;
    if (!v95)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Failed to rebase metapools";
      __break(1u);
      JUMPOUT(0x2EA74);
    }
    for (i = 0; i < *(unsigned __int8 *)(v60 + 330); ++i)
    {
      v52 = v54 + ((uint64_t)i << 6);
      j = 0;
      for (j = *(_QWORD *)(v52 + 24); j; j = *v50)
      {
        v50 = 0;
        v49 = v64(v65, j, 16, &v50);
        if (v49)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Failed to map metapool slab";
          __break(1u);
          JUMPOUT(0x2EB50);
        }
        v49 = (*(uint64_t (**)(void))(v58 + 16))();
        if (v49)
          return v49;
      }
    }
  }
  v48 = 0x10000;
  v68 = 0;
  v47 = 0;
  v14 = *(_QWORD *)(v60 + 304);
  v15 = *(_QWORD *)(v60 + 408);
  v85 = v61;
  v84 = v60;
  v83 = v14;
  v82 = v15;
  v81 = 0x10000;
  if (v15 >= v61)
  {
    v80 = v82 - v85;
    v79 = 0;
    v16 = __CFADD__(v82 - v85, v81);
    v79 = v82 - v85 + v81;
    v87 = v16;
    if (v16)
    {
      v86 = 0;
    }
    else if (v79 > v83)
    {
      v86 = 0;
    }
    else
    {
      v86 = v84 + v80;
    }
  }
  else
  {
    v86 = 0;
  }
  v47 = v86;
  if (!v86)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to rebase segment table";
    __break(1u);
    JUMPOUT(0x2ED44);
  }
  v31 = _NSConcreteStackBlock;
  v32 = 1107296256;
  v33 = 0;
  v34 = ___xzm_introspect_enumerate_block_invoke;
  v35 = &__block_descriptor_tmp_31;
  v39 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v64;
  v43 = v65;
  v36 = a9;
  v40 = v62;
  v41 = v63;
  v42 = v56;
  v44 = v59 & 1;
  v37 = a10;
  v45 = v57;
  v38 = a11;
  v46 = &v31;
  v30 = 0;
  v29 = xzm_segment_table_foreach(v47, 0x4000uLL, (uint64_t)&v31, &v30);
  if (v29)
  {
    return v29;
  }
  else
  {
    v28 = 0;
    v17 = *(_QWORD *)(v60 + 416);
    v28 = 4 * v17;
    v67 = v17 >> 62 != 0;
    if (v17 >> 62)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to compute extended segment table size";
      __break(1u);
      JUMPOUT(0x2EE84);
    }
    v27 = 0;
    v18 = *(_QWORD *)(v60 + 304);
    v19 = *(_QWORD *)(v60 + 424);
    v76 = v61;
    v75 = v60;
    v74 = v18;
    v73 = v19;
    v72 = v28;
    if (v19 >= v61)
    {
      v71 = v73 - v76;
      v70 = 0;
      v20 = __CFADD__(v73 - v76, v72);
      v70 = v73 - v76 + v72;
      v78 = v20;
      if (v20)
      {
        v77 = 0;
      }
      else if (v70 > v74)
      {
        v77 = 0;
      }
      else
      {
        v77 = v75 + v71;
      }
    }
    else
    {
      v77 = 0;
    }
    v27 = v77;
    if (v77)
    {
      for (k = 0; k < *(_QWORD *)(v60 + 416); ++k)
      {
        if (*(_DWORD *)(v27 + 4 * k))
        {
          v25 = 0;
          if (v64(v65, (unint64_t)*(unsigned int *)(v27 + 4 * k) << 16, 0x10000, (uint64_t **)&v25))
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Failed to map segment table";
            __break(1u);
            JUMPOUT(0x2F04CLL);
          }
          v24 = xzm_segment_table_foreach(v25, 0x4000uLL, (uint64_t)v46, &v30);
          if (v24)
            return v24;
        }
      }
    }
    return 0;
  }
}

uint64_t __xzm_ptr_in_use_enumerator_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD v5[3];
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a1;
  v8 = a2;
  v7 = a3;
  v6 = a4;
  v5[2] = a1;
  if ((*(_BYTE *)(a1 + 52) & 1) != 0 && (*(_BYTE *)(a1 + 53) & 1) != 0)
  {
    v5[0] = v8;
    v5[1] = v7;
    (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD *, uint64_t))(a1 + 32))(*(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40), 4, v5, 1);
  }
  return 0;
}

int __xzm_ptr_in_use_enumerator_block_invoke_2(id a1, unint64_t a2, xzm_segment_s *a3, const char *a4)
{
  return 0;
}

uint64_t __xzm_ptr_in_use_enumerator_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD v11[2];
  _QWORD v12[2];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;

  v23 = a1;
  v22 = a2;
  v21 = a3;
  v20 = a4;
  v19 = a5;
  v18 = a6;
  v17 = a7;
  v16 = a8;
  v15 = a9;
  v14 = a1;
  v13 = 0;
  v13 = *(_BYTE *)(a4 + 32) & 0xF;
  if ((*(_BYTE *)(a1 + 52) & 1) != 0 && v13 == 7)
  {
    v12[0] = v22;
    v12[1] = 0x4000;
    (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD *, uint64_t))(a1 + 32))(*(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40), 4, v12, 1);
  }
  if ((*(_BYTE *)(a1 + 53) & 1) != 0 || (*(_BYTE *)(a1 + 54) & 1) != 0)
  {
    v11[0] = v18;
    v11[1] = (unint64_t)v19 << 14;
    v25 = v13;
    if (v13 == 2 || v13 == 5)
    {
      if ((*(_BYTE *)(a1 + 53) & 1) != 0)
        (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD *, uint64_t))(a1 + 32))(*(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40), 2, v11, 1);
      if ((*(_BYTE *)(a1 + 54) & 1) != 0)
        (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(a1 + 32))(*(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40), 1, v16, v15);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD *, uint64_t))(a1 + 32))(*(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40), 3, v11, 1);
    }
    return 0;
  }
  else
  {
    return 0;
  }
}

uint64_t __xzm_ptr_in_use_enumerator_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  _QWORD v7[2];
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = a1;
  v14 = a2;
  v13 = a3;
  v12 = a4;
  v11 = a5;
  v10 = a6;
  v9 = a1;
  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
    v8 = 1;
    if (*(_BYTE *)(v13 + 20) == 1)
      v8 = (*(_BYTE *)(v12 + 32) & 0xF) != 7;
    if (v8)
    {
      v7[0] = v10;
      v7[1] = (unint64_t)v11 << 14;
      (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD *, uint64_t))(a1 + 32))(*(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40), 2, v7, 1);
    }
  }
  return 0;
}

uint64_t _malloc_default_reader_2(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v5;

  v5 = 1;
  if (a1)
    v5 = mach_task_is_self(a1) != 0;
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x2F4F0);
  }
  *a4 = a2;
  return 0;
}

uint64_t ___xzm_introspect_enumerate_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, _QWORD, unint64_t, uint64_t *);
  uint64_t v3;
  void **v6;
  int v7;
  int v8;
  uint64_t (*v9)(uint64_t, uint64_t, unsigned int);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v25 = a1;
  v24 = a2;
  v23[1] = a1;
  v23[0] = 0;
  v22 = 0;
  v22 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(a1 + 56))(*(unsigned int *)(a1 + 88), a2, 14424, v23);
  if (v22)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to map segment header";
    __break(1u);
    JUMPOUT(0x2F590);
  }
  v21 = 0;
  v2 = *(uint64_t (**)(uint64_t, _QWORD, unint64_t, uint64_t *))(a1 + 56);
  v3 = *(unsigned int *)(a1 + 88);
  v27 = v23[0];
  v29 = v23[0];
  v28 = 0;
  v22 = v2(v3, *(_QWORD *)(v23[0] + 80), (unint64_t)*(unsigned int *)(v23[0] + 12) << 14, &v21);
  if (v22)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to map segment";
    __break(1u);
    JUMPOUT(0x2F61CLL);
  }
  v22 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (v22)
  {
    return v22;
  }
  else
  {
    v6 = _NSConcreteStackBlock;
    v7 = 1107296256;
    v8 = 0;
    v9 = ___xzm_introspect_enumerate_block_invoke_2;
    v10 = &__block_descriptor_tmp_29;
    v13 = v23[0];
    v14 = v21;
    v15 = *(_QWORD *)(a1 + 64);
    v16 = *(_QWORD *)(a1 + 72);
    v17 = *(_QWORD *)(a1 + 80);
    v19 = *(_BYTE *)(a1 + 92) & 1;
    v18 = v24;
    v11 = *(_QWORD *)(a1 + 40);
    v20 = *(_BYTE *)(a1 + 93) & 1;
    v12 = *(_QWORD *)(a1 + 48);
    return xzm_segment_group_segment_foreach_span(v23[0], (uint64_t)&v6);
  }
}

uint64_t ___xzm_introspect_enumerate_block_invoke_2(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  unsigned __int8 v5;
  BOOL v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *(_BYTE *)(a2 + 32) & 0xF;
  v7 = v5 == 2 || v5 - 5 <= 2;
  if (v7 && *(unsigned __int16 *)(a2 + 34) == *(unsigned __int16 *)(*(_QWORD *)(a1 + 64) + 208))
  {
    v4 = 0;
    if (v5 == 2 || v5 == 5)
    {
      v10 = *(_QWORD *)(a1 + 72);
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 216) + 88 * *(unsigned __int8 *)(a2 + 33);
      if (v9 >= v10)
      {
        if (v9 - v10 < 0xFFFFFFFFFFFFFFA8)
        {
          if (v9 - v10 + 88 > *(_QWORD *)(a1 + 80))
            v11 = 0;
          else
            v11 = *(_QWORD *)(a1 + 64) + v9 - v10;
        }
        else
        {
          v11 = 0;
        }
      }
      else
      {
        v11 = 0;
      }
      v4 = v11;
      if (!v11)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to rebase xzone";
        __break(1u);
        JUMPOUT(0x2F9D8);
      }
    }
    if ((*(_BYTE *)(a1 + 96) & 1) != 0)
      return _xzm_introspect_chunk_blocks(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 48), (uint64_t *)a2, a3, *(_QWORD *)(a1 + 56) - 0x5555555555554000 * ((a2 - *(_QWORD *)(a1 + 48) - 2136) >> 4), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 80)+ ((unint64_t)(-1431655765 * ((a2 - *(_QWORD *)(a1 + 48) - 2136) >> 4)) << 14), v4, *(_QWORD *)(a1 + 32));
    else
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  }
  else if ((*(_BYTE *)(a1 + 97) & 1) == 0 || *(_WORD *)(a2 + 34))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

uint64_t _xzm_introspect_chunk_blocks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BOOL v10;
  BOOL v11;
  __int128 v12;
  unint64_t k;
  unint64_t v14;
  unint64_t j;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unsigned int i;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char v24;
  _OWORD v35[1024];

  v24 = a4[4] & 0xF;
  if (v24 != 2 && v24 != 5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, uint64_t))(a9 + 16))(a9, a2, a3, a4, a5, a7);
  bzero(v35, 0x4000uLL);
  v23 = *(_QWORD *)(a8 + 48);
  v22 = *(unsigned int *)(a8 + 68);
  if (((unint64_t)a5 << 14) / v23 != v22 || v22 >= 0x401)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: inconsistent xzone info";
    __break(1u);
    JUMPOUT(0x2FC7CLL);
  }
  v21 = 0;
  if (v24 == 5)
  {
    for (i = 0; i < v22; ++i)
    {
      if ((a4[4] & 0xF) != 5)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CH"
                               "UNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzon"
                               "e/xzone_inline_internal.h:921)";
        __break(1u);
        JUMPOUT(0x2FD10);
      }
      if (((*(_DWORD *)a4 >> i) & 1) == 0)
      {
        *(_QWORD *)&v19 = a7 + i * v23;
        *((_QWORD *)&v19 + 1) = v23;
        v35[v21++] = v19;
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, uint64_t, uint64_t, _OWORD *, _QWORD))(a9 + 16))(a9, a2, a3, a4, a5, a7, a8, v35, v21);
  }
  v18 = *a4;
  v17 = v23 >> 4;
  v16 = *a4 & 0x7FF;
  if (v16 != 2047 && v16 != 2046)
  {
    if (((v18 >> 11) & 0x7FF) > v22)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"meta.xca_free_count <= capacity\" failed (/Library/Cac"
                             "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_introspect.c:183)";
      __break(1u);
      JUMPOUT(0x2FE8CLL);
    }
    for (j = 0; ; ++j)
    {
      v11 = 0;
      if (v16 <= 0x3FF)
        v11 = v16 % v17 == 0;
      if (!v11)
        break;
      if ((v35[v16 / v17] & 1) != 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: loop in freelist";
        __break(1u);
        JUMPOUT(0x2FF38);
      }
      LOBYTE(v35[v16 / v17]) = 1;
      v16 = *(_QWORD *)(a6 + 16 * v16 + 8) & 0x7FFLL;
    }
    v10 = 1;
    if (v16 != 2045)
      v10 = v16 == 2044;
    if (!v10)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"block_offset == XZM_FREE_NULL || block_offset == XZM_F"
                             "REE_BUMP\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzon"
                             "e_introspect.c:233)";
      __break(1u);
      JUMPOUT(0x2FFE0);
    }
    v14 = v22;
    if (j < ((v18 >> 11) & 0x7FF) && ((v18 >> 11) & 0x7FF) <= v22)
      v14 = v22 + j - ((v18 >> 11) & 0x7FF);
    for (k = 0; k < v14; ++k)
    {
      if ((v35[k] & 1) == 0)
      {
        *(_QWORD *)&v12 = a7 + k * v23;
        *((_QWORD *)&v12 + 1) = v23;
        v35[v21++] = v12;
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, uint64_t, uint64_t, _OWORD *, _QWORD))(a9 + 16))(a9, a2, a3, a4, a5, a7, a8, v35, v21);
  }
  if (((v18 >> 11) & 0x7FF) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"meta.xca_free_count == 0\" failed (/Library/Caches/com.a"
                           "pple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_introspect.c:177)";
    __break(1u);
    JUMPOUT(0x2FE18);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, uint64_t, uint64_t))(a9 + 16))(a9, a2, a3, a4, a5, a7, a8);
}

void __copy_helper_block_8_32b40b(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 7);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 7);
}

void __destroy_helper_block_8_32b40b(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 7);
  _Block_object_dispose(*(const void **)(a1 + 32), 7);
}

void __copy_helper_block_8_32b40b48b(uint64_t a1, const void **a2)
{
  _Block_object_assign((void *)(a1 + 32), a2[4], 7);
  _Block_object_assign((void *)(a1 + 40), a2[5], 7);
  _Block_object_assign((void *)(a1 + 48), a2[6], 7);
}

void __destroy_helper_block_8_32b40b48b(const void **a1)
{
  _Block_object_dispose(a1[6], 7);
  _Block_object_dispose(a1[5], 7);
  _Block_object_dispose(a1[4], 7);
}

void xzm_print(unsigned int a1, int a2, _BYTE *a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t, uint64_t **), void (*a5)(const char *, ...))
{
  const char *v5;
  const char *v6;
  unint64_t v7;
  _BYTE *v8;
  BOOL v9;
  unint64_t v10;
  _BYTE *v11;
  BOOL v12;
  unint64_t v13;
  _BYTE *v14;
  BOOL v15;
  unint64_t v16;
  _BYTE *v17;
  BOOL v18;
  int v19;
  void **v20;
  int v21;
  int v22;
  uint64_t (*v23)(uint64_t, char *, _QWORD *, uint64_t, int, const void *);
  void *v24;
  void ***v25;
  uint64_t *v26;
  void (*v27)(const char *, ...);
  uint64_t v28;
  void **v29;
  int v30;
  int v31;
  uint64_t (*v32)(uint64_t, char *, char *, char *, int, const void *, uint64_t);
  void *v33;
  void ***v34;
  uint64_t *v35;
  void (*v36)(const char *, ...);
  uint64_t v37;
  void **v38;
  int v39;
  int v40;
  uint64_t (*v41)(uint64_t, const void *, int, unsigned __int8);
  void *v42;
  void ***v43;
  uint64_t *v44;
  void (*v45)(const char *, ...);
  const char *v46;
  uint64_t v47;
  unsigned __int8 ii;
  uint64_t v49;
  unsigned __int8 n;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  BOOL v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t m;
  unsigned __int8 *v64;
  unsigned __int8 k;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned __int8 j;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int i;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  int v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  void **v88;
  int v89;
  int v90;
  uint64_t (*v91)(uint64_t, const void *, uint64_t, const char *);
  void *v92;
  void ***v93;
  uint64_t *v94;
  uint64_t *v95;
  void (*v96)(const char *, ...);
  uint64_t v97;
  void ***v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  int v102;
  char v103;
  uint64_t v104;
  uint64_t *v105;
  int v106;
  int v107;
  char v108;
  void **v109;
  int v110;
  int v111;
  uint64_t (*v112)(uint64_t, mach_vm_offset_t, mach_vm_size_t, const char *);
  void *v113;
  _QWORD *v114;
  uint64_t *v115;
  uint64_t *v116;
  void (*v117)(const char *, ...);
  unsigned int v118;
  void ***v119;
  _QWORD v120[2];
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  int v131;
  int v132;
  uint64_t v133;
  int v134;
  BOOL v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(const char *, ...);
  uint64_t (*v140)(_QWORD, uint64_t, uint64_t, uint64_t **);
  _BYTE *v141;
  int v142;
  unsigned int v143;
  BOOL v144;
  BOOL v145;
  char v146;
  char v147;
  char v148;
  char v149;
  unint64_t v150;
  int64_t v151;
  uint64_t v152;
  _BYTE *v153;
  unint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  uint64_t v157;
  BOOL v158;
  unint64_t v159;
  int64_t v160;
  uint64_t v161;
  _BYTE *v162;
  unint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  uint64_t v166;
  BOOL v167;
  unint64_t v168;
  int64_t v169;
  uint64_t v170;
  _BYTE *v171;
  unint64_t v172;
  uint64_t v173;
  _BYTE *v174;
  uint64_t v175;
  BOOL v176;
  unint64_t v177;
  int64_t v178;
  uint64_t v179;
  _BYTE *v180;
  unint64_t v181;
  uint64_t v182;
  _BYTE *v183;
  uint64_t v184;
  BOOL v185;
  unsigned __int8 v186;
  const char *v187;
  char v188;
  const char *v189;
  char v190;
  const char *v191;

  v143 = a1;
  v142 = a2;
  v141 = a3;
  v140 = a4;
  v139 = a5;
  v138 = 0;
  v137 = 0;
  v136 = 0;
  v135 = 0;
  v134 = _xzm_introspect_map_zone_and_main(a1, (uint64_t)a3, (uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD **))a4, &v138, &v137, &v136);
  if (!v134)
  {
    v135 = v141 == v136;
    v139("Begin xzone malloc JSON:\n");
    v139("{\n");
    v139("\"desc\": \"xzone malloc\", \n");
    v139("\"addr\": \"%p\", \n", v141);
    v139("\"segment_size\": %zu, \n", 0x400000uLL);
    v139("\"slice_size\": %zu, \n", 0x4000uLL);
    v139("\"mzone\": %d, \n", *(unsigned __int16 *)(v138 + 208));
    v139("\"is_main\": %d, \n", v135);
    v139("\"max_slot_config\": %d, \n", *(_BYTE *)(v138 + 240) & 3);
    v129 = 0;
    v130 = &v129;
    v131 = 0;
    v132 = 32;
    v133 = 0;
    v124 = 0;
    v125 = &v124;
    v126 = 0;
    v127 = 32;
    v128 = 0;
    v120[0] = 0;
    v120[1] = v120;
    v121 = 0;
    v122 = 32;
    v123 = 0;
    v109 = _NSConcreteStackBlock;
    v110 = 1107296256;
    v111 = 0;
    v112 = __xzm_print_block_invoke;
    v113 = &__block_descriptor_tmp_60;
    v118 = v143;
    v114 = v120;
    v115 = &v129;
    v116 = &v124;
    v117 = v139;
    v119 = &v109;
    v104 = 0;
    v105 = &v104;
    v106 = 0;
    v107 = 32;
    v108 = 1;
    v99 = 0;
    v100 = &v99;
    v101 = 0;
    v102 = 32;
    v103 = 1;
    v88 = _NSConcreteStackBlock;
    v89 = 1107296256;
    v90 = 0;
    v91 = __xzm_print_block_invoke_61;
    v92 = &__block_descriptor_tmp_74;
    v94 = &v104;
    v96 = v139;
    v97 = v137;
    v95 = &v99;
    v93 = &v109;
    v98 = &v88;
    if (v135)
    {
      v139("\"bucketing_key\": \"%016llx%016llx\", \n", *(_QWORD *)(v137 + 312), *(_QWORD *)(v137 + 320));
      v139("\"guard_config\": {\n");
      v139("    \"guards_enabled\": %d, \n", *(_BYTE *)(v137 + 452) & 1);
      v139("    \"data_guards_enabled\": %d, \n", *(_BYTE *)(v137 + 453) & 1);
      v139("    \"tiny_run_size\": %d, \n", *(unsigned __int8 *)(v137 + 454));
      v139("    \"tiny_guard_density\": %d, \n", *(unsigned __int8 *)(v137 + 455));
      v139("    \"small_run_size\": %d, \n", *(unsigned __int8 *)(v137 + 456));
      v139("    \"small_guard_density\": %d \n", *(unsigned __int8 *)(v137 + 457));
      v139("}, \n");
      v5 = "true";
      if (((*(unsigned __int8 *)(v137 + 328) >> 3) & 1) == 0)
        v5 = "false";
      v139("\"defer_large\": %s, \n", v5);
      v6 = "true";
      if (((*(unsigned __int8 *)(v137 + 328) >> 2) & 1) == 0)
        v6 = "false";
      v139("\"defer_xzones\": %s, \n", v6);
      if (*(_QWORD *)(v137 + 464))
      {
        v87 = 0;
        v87 = *(_QWORD *)(v137 + 464);
        v86 = 0;
        v85 = 0;
        v134 = _xzm_introspect_map_reclaim_buffer(v143, (uint64_t (*)(_QWORD, uint64_t, unint64_t, uint64_t *))v140, v87, &v86, &v85);
        if (v134)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to map reclaim buffer";
          __break(1u);
          JUMPOUT(0x30788);
        }
        v83 = v86;
        v139("\"reclaim_buffer\": { \n");
        v139("    \"va_in_buffer\": %llu, \n", v83[2]);
        v139("    \"last_accounting_given_to_kernel\": %llu, \n", v83[3]);
        v139("    \"buffer\": \"%p\", \n", (const void *)*v83);
        v139("    \"buffer_len\": %llu, \n", v83[1]);
        if (*v83 && v83[1])
        {
          v139("    \"indices\": { \n");
          v82 = 0;
          v81 = *v85;
          v82 = v81;
          v80 = v81;
          v139("        \"head\": %llu, \n", v81);
          v79 = 0;
          v78 = v85[2];
          v79 = v78;
          v77 = v78;
          v139("        \"busy\": %llu, \n", v78);
          v76 = 0;
          v75 = v85[1];
          v76 = v75;
          v74 = v75;
          v139("        \"tail\": %llu \n", v75);
          v139("    }, \n");
          v139("    \"entries\": [ \n");
          for (i = 0; i < (unint64_t)v83[1]; ++i)
          {
            v72 = (uint64_t)&v85[2 * i + 4];
            v139("        { \n");
            v139("            \"index\": %u, \n", i);
            v139("            \"address\": \"%p\", \n", *(const void **)v72);
            v139("            \"size\": %u, \n", *(_DWORD *)(v72 + 8));
            v139("            \"behavior\": %u, \n", *(unsigned __int16 *)(v72 + 12));
            v139("            \"flags\": \"0x%x\" \n", *(unsigned __int16 *)(v72 + 14));
            v139("        }");
            if (i < (unint64_t)(v83[1] - 1))
              v139(",");
            v139(" \n");
          }
          v139("    ] \n");
        }
        v139("}, \n");
      }
      v139("\"range_groups\": {\n");
      v71 = 0;
      v71 = 56 * *(unsigned __int8 *)(v137 + 329);
      v149 = 0;
      v70 = 0;
      v7 = *(_QWORD *)(v137 + 304);
      v8 = *(_BYTE **)(v137 + 384);
      v183 = v136;
      v182 = v137;
      v181 = v7;
      v180 = v8;
      v179 = v71;
      if (v8 >= v136)
      {
        v178 = v180 - v183;
        v177 = 0;
        v9 = __CFADD__(v180 - v183, v179);
        v177 = v180 - v183 + v179;
        v185 = v9;
        if (v9)
        {
          v184 = 0;
        }
        else if (v177 > v181)
        {
          v184 = 0;
        }
        else
        {
          v184 = v182 + v178;
        }
      }
      else
      {
        v184 = 0;
      }
      v70 = v184;
      if (!v184)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to map range_groups";
        __break(1u);
        JUMPOUT(0x30C38);
      }
      for (j = 0; j < (int)*(unsigned __int8 *)(v137 + 329); ++j)
      {
        v139("    ");
        if (j)
          v139(", ");
        v68 = (unsigned __int8 *)(v70 + 56 * j);
        v139("\"%d\": {\n", *v68);
        v139("        \"id\": %d, \n", *v68);
        v139("        \"lock\": %u, \n", *((_DWORD *)v68 + 4));
        v139("        \"base\": \"%p\", \n", *((const void **)v68 + 3));
        v139("        \"size\": %zu, \n", *((_QWORD *)v68 + 4));
        v139("        \"next\": \"%p\", \n", *((const void **)v68 + 5));
        v139("        \"remaining\": %zu\n", *((_QWORD *)v68 + 6));
        v139("    }\n");
      }
      v139("}, \n");
      v139("\"segment_groups\": {\n");
      v67 = 0;
      v67 = 528 * *(unsigned __int8 *)(v137 + 344);
      v148 = 0;
      v66 = 0;
      v10 = *(_QWORD *)(v137 + 304);
      v11 = *(_BYTE **)(v137 + 392);
      v174 = v136;
      v173 = v137;
      v172 = v10;
      v171 = v11;
      v170 = v67;
      if (v11 >= v136)
      {
        v169 = v171 - v174;
        v168 = 0;
        v12 = __CFADD__(v171 - v174, v170);
        v168 = v171 - v174 + v170;
        v176 = v12;
        if (v12)
        {
          v175 = 0;
        }
        else if (v168 > v172)
        {
          v175 = 0;
        }
        else
        {
          v175 = v173 + v169;
        }
      }
      else
      {
        v175 = 0;
      }
      v66 = v175;
      if (!v175)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to map segment_groups";
        __break(1u);
        JUMPOUT(0x30F4CLL);
      }
      for (k = 0; k < (int)*(unsigned __int8 *)(v137 + 344); ++k)
      {
        v139("    ");
        if (k)
          v139(", ");
        v64 = (unsigned __int8 *)(v66 + 528 * k);
        v139("\"%d\": {\n", *v64);
        v186 = *v64;
        switch(v186)
        {
          case 0u:
            v187 = "data";
            break;
          case 1u:
            v187 = "data_large";
            break;
          case 2u:
            v187 = "pointer_xzones";
            break;
          case 3u:
            v187 = "pointer_large";
            break;
          default:
            v187 = "unknown";
            break;
        }
        v139("        \"id\": \"%s\", \n", v187);
        v139("        \"segment_cache\": { \n");
        v139("            \"max_count\": %u, \n", *((unsigned __int16 *)v64 + 256));
        v139("            \"count\": %u, \n", *((unsigned __int16 *)v64 + 257));
        v139("            \"max_entry_slices\": %u, \n", *((_DWORD *)v64 + 129));
        v139("            \"segments\": { \n");
        if (*((_WORD *)v64 + 257))
        {
          m = 0;
          for (m = *((_QWORD *)v64 + 58); m; m = *(_QWORD *)(v62 + 24))
          {
            v62 = 0;
            v61 = v140(v143, m, 14424, (uint64_t **)&v62);
            if (v61)
            {
              qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Failed to map cached segment";
              __break(1u);
              JUMPOUT(0x311B8);
            }
            v61 = ((uint64_t (*)(void ***, uint64_t, uint64_t, const char *))v98[2])(v98, m, v62, "                    ");
            if (v61)
            {
              qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Failed to enumerate segment";
              __break(1u);
              JUMPOUT(0x31210);
            }
          }
        }
        v139("            } \n");
        v139("        } \n");
        v139("    }\n");
      }
      v139("}, \n");
      v139("\"xzones\": {\n");
      v60 = 0;
      v60 = 88 * *(unsigned __int8 *)(v137 + 210);
      v147 = 0;
      v59 = 0;
      v13 = *(_QWORD *)(v137 + 304);
      v14 = *(_BYTE **)(v137 + 216);
      v165 = v136;
      v164 = v137;
      v163 = v13;
      v162 = v14;
      v161 = v60;
      if (v14 >= v136)
      {
        v160 = v162 - v165;
        v159 = 0;
        v15 = __CFADD__(v162 - v165, v161);
        v159 = v162 - v165 + v161;
        v167 = v15;
        if (v15)
        {
          v166 = 0;
        }
        else if (v159 <= v163)
        {
          v166 = v164 + v160;
        }
        else
        {
          v166 = 0;
        }
      }
      else
      {
        v166 = 0;
      }
      v59 = v166;
      v58 = v166;
      if (!v166)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to map main xzones";
        __break(1u);
        JUMPOUT(0x31414);
      }
      v57 = 0;
      v56 = 0;
      v55 = 0;
      v54 = 0;
      v56 = *(unsigned __int8 *)(v137 + 210) * (unint64_t)*(unsigned __int8 *)(v137 + 211);
      v146 = 0;
      v55 = 0;
      v57 = 32 * v56;
      v145 = v56 >> 59 != 0;
      v54 = v145;
      v53 = v145;
      v144 = v145;
      if (v56 >> 59)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to compute allocation slots size";
        __break(1u);
        JUMPOUT(0x314E0);
      }
      v52 = 0;
      v16 = *(_QWORD *)(v137 + 304);
      v17 = *(_BYTE **)(v137 + 224);
      v156 = v136;
      v155 = v137;
      v154 = v16;
      v153 = v17;
      v152 = v57;
      if (v17 >= v136)
      {
        v151 = v153 - v156;
        v150 = 0;
        v18 = __CFADD__(v153 - v156, v152);
        v150 = v153 - v156 + v152;
        v158 = v18;
        if (v18)
        {
          v157 = 0;
        }
        else if (v150 <= v154)
        {
          v157 = v155 + v151;
        }
        else
        {
          v157 = 0;
        }
      }
      else
      {
        v157 = 0;
      }
      v52 = v157;
      v51 = v157;
      if (!v157)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to map main allocation slots";
        __break(1u);
        JUMPOUT(0x31600);
      }
      for (n = 1; n < (int)*(unsigned __int8 *)(v138 + 210); ++n)
      {
        v49 = v58 + 88 * n;
        v139("    \"%d\": {\n", n);
        v139("        \"id\": %d, \n", *(unsigned __int8 *)(v49 + 72));
        v139("        \"bucket\": %d, \n", *(unsigned __int8 *)(v49 + 76));
        v139("        \"segment_group\": %zu, \n", 0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(v49 + 40) - *(_QWORD *)(v137 + 392)) >> 4));
        v139("        \"block_size\": %llu, \n", *(_QWORD *)(v49 + 48));
        v139("        \"chunk_capacity\": %u, \n", *(_DWORD *)(v49 + 68));
        v139("        \"sequestered\": %d,\n", *(_BYTE *)(v49 + 78) & 1);
        v190 = *(_BYTE *)(v49 + 77);
        switch(v190)
        {
          case 0:
            v191 = "SINGLE";
            break;
          case 1:
            v191 = "CLUSTER";
            break;
          case 2:
            v191 = "CPU";
            break;
          default:
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unexpected slot config";
            __break(1u);
            JUMPOUT(0x317FCLL);
        }
        v139("        \"slot_config\": \"%s\",\n", v191);
        v139("        \"allocation_slots\": [\n");
        for (ii = 0; ii < (int)*(unsigned __int8 *)(v138 + 211); ++ii)
        {
          v47 = 0;
          v47 = v51 + 32 * (ii * *(unsigned __int8 *)(v138 + 210) + n);
          v139("            {\n");
          if (*(_QWORD *)(v49 + 48) > 0x1000uLL)
          {
            v139("                \"chunk\": \"%p\",\n", *(const void **)v47);
            v139("                \"allocations\": %lu,\n", *(unsigned int *)(v47 + 16));
            v139("                \"contentions\": %lu,\n", *(unsigned int *)(v47 + 20));
          }
          else
          {
            v139("                \"atomic_value\": \"0x%llx\",\n", *(_QWORD *)v47);
            v139("                \"xsg_locked\": \"0x%llx\",\n", *(_QWORD *)v47 & 1);
            v139("                \"xsg_waiters\": \"0x%llx\",\n", (*(_QWORD *)v47 >> 1) & 1);
            v139("                \"xsc_ptr\": \"0x%llx\",\n", (*(_QWORD *)v47 >> 2) & 0x7FFFFFFFFFFFLL);
            v139("                \"allocations\": %lu,\n", *(unsigned int *)(v47 + 16));
            v139("                \"contentions\": %lu,\n", *(_DWORD *)(v47 + 20) & 0xFFFFFF);
            v46 = 0;
            v188 = *(_BYTE *)(v47 + 23);
            switch(v188)
            {
              case 0:
                v189 = "SINGLE";
                break;
              case 1:
                v189 = "CLUSTER";
                break;
              case 2:
                v189 = "CPU";
                break;
              default:
                qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unexpected slot config";
                __break(1u);
                JUMPOUT(0x31A1CLL);
            }
            v46 = v189;
            v139("                \"slot_config\": \"%s\",\n", v189);
          }
          v139("                \"last_chunk_empty_ts\": %llu\n", *(_QWORD *)(v47 + 24));
          v139("            }");
          if (ii < *(unsigned __int8 *)(v138 + 211) - 1)
            v139(",");
          v139("\n");
        }
        v139("        ]\n");
        v139("    }");
        if (n < *(unsigned __int8 *)(v138 + 210) - 1)
          v139(",");
        v139("\n");
      }
      v139("}, \n");
    }
    v139("\"spans\": {\n");
    *((_BYTE *)v105 + 24) = 1;
    *((_BYTE *)v100 + 24) = 0;
    v38 = _NSConcreteStackBlock;
    v39 = 1107296256;
    v40 = 0;
    v41 = __xzm_print_block_invoke_163;
    v42 = &__block_descriptor_tmp_168;
    v45 = v139;
    v44 = &v104;
    v43 = v119;
    v29 = _NSConcreteStackBlock;
    v30 = 1107296256;
    v31 = 0;
    v32 = __xzm_print_block_invoke_169;
    v33 = &__block_descriptor_tmp_194;
    v36 = v139;
    v35 = &v104;
    v37 = v137;
    v34 = v119;
    if (v135)
    {
      v20 = _NSConcreteStackBlock;
      v21 = 1107296256;
      v22 = 0;
      v23 = __xzm_print_block_invoke_195;
      v24 = &__block_descriptor_tmp_197;
      v27 = v139;
      v26 = &v104;
      v28 = v137;
      v25 = v119;
      v19 = _xzm_introspect_enumerate(v143, v140, (uint64_t)v141, v138, (unint64_t)v136, v137, 0, (uint64_t)&v38, (uint64_t)v98, (uint64_t)&v29, (uint64_t)&v20);
    }
    else
    {
      v19 = _xzm_introspect_enumerate(v143, v140, (uint64_t)v141, v138, (unint64_t)v136, v137, 0, (uint64_t)&v38, (uint64_t)v98, (uint64_t)&v29, 0);
    }
    v134 = v19;
    if (v125[3])
      mach_vm_deallocate(mach_task_self_, v125[3], 4 * v130[3]);
    if (v134)
    {
      v84 = 1;
    }
    else
    {
      ((void (*)(void))v139)();
      v139("}\n");
      v139("End xzone malloc JSON\n");
      v84 = 0;
    }
    _Block_object_dispose(&v99, 8);
    _Block_object_dispose(&v104, 8);
    _Block_object_dispose(v120, 8);
    _Block_object_dispose(&v124, 8);
    _Block_object_dispose(&v129, 8);
  }
}

uint64_t __xzm_print_block_invoke(uint64_t a1, mach_vm_offset_t a2, mach_vm_size_t a3, const char *a4)
{
  kern_return_t v4;
  vm_map_read_t target_map;
  vm_size_t v7;
  int v9;
  mach_vm_size_t i;
  mach_vm_offset_t v11;
  uint64_t v12;
  uint64_t v13;
  mach_vm_size_t dispositions_count;
  vm_size_t v15;
  vm_size_t v16;
  vm_size_t v17;
  unsigned int v18;
  uint64_t v19;
  const char *v20;
  mach_vm_size_t v21;
  mach_vm_offset_t v22;
  uint64_t v23;

  v23 = a1;
  v22 = a2;
  v21 = a3;
  v20 = a4;
  v19 = a1;
  v18 = 0;
  if (*(_DWORD *)(a1 + 64))
  {
    v17 = v22 + v21;
    v16 = 0;
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)
        + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) * vm_page_size;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) > v22 || v16 < v17)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v22;
      v15 = 0;
      if (v21 % vm_page_size)
        v7 = v21 / vm_page_size + 1;
      else
        v7 = v21 / vm_page_size;
      v15 = v7;
      if (v7 < 0x400000 / vm_page_size)
        v15 = 0x400000 / vm_page_size;
      if (v15 > *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      {
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
        {
          mach_vm_deallocate(mach_task_self_, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), 4 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
        }
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v15;
        v18 = mach_vm_allocate(mach_task_self_, (mach_vm_address_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), 4 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), 1);
        if (v18)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to allocate memory for vm stats";
          __break(1u);
          JUMPOUT(0x320F8);
        }
      }
      dispositions_count = v15;
      target_map = *(_DWORD *)(a1 + 64);
      if (v21 > 0x400000)
        v4 = mach_vm_page_range_query(target_map, v22, v21, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), &dispositions_count);
      else
        v4 = mach_vm_page_range_query(target_map, v22, 0x400000uLL, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), &dispositions_count);
      v18 = v4;
      if (v4)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Failed to query vm stats";
        __break(1u);
        JUMPOUT(0x321ACLL);
      }
    }
    (*(void (**)(const char *, ...))(a1 + 56))("%s    \"dispositions\": \"", v20);
    v13 = 0;
    v12 = 0;
    v11 = (v22 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)) / vm_page_size;
    for (i = 0; i < v21 / vm_page_size; ++i)
    {
      if (v11 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: inconsistent slice counts";
        __break(1u);
        JUMPOUT(0x32290);
      }
      v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) + 4 * v11);
      if ((v9 & 8) != 0)
      {
        ++v13;
        (*(void (**)(const char *))(a1 + 56))("d");
      }
      else if ((v9 & 0x10) != 0)
      {
        ++v12;
        (*(void (**)(const char *))(a1 + 56))("s");
      }
      else
      {
        (*(void (**)(const char *))(a1 + 56))("c");
      }
      ++v11;
    }
    (*(void (**)(const char *))(a1 + 56))("\", \n");
    (*(void (**)(const char *, ...))(a1 + 56))("%s    \"dirty_count\": %zu, \n", v20, v13);
    (*(void (**)(const char *, ...))(a1 + 56))("%s    \"swapped_count\": %zu, \n", v20, v12);
    return 0;
  }
  else
  {
    return v18;
  }
}

void __copy_helper_block_8_32r40r48r(uint64_t a1, const void **a2)
{
  _Block_object_assign((void *)(a1 + 32), a2[4], 8);
  _Block_object_assign((void *)(a1 + 40), a2[5], 8);
  _Block_object_assign((void *)(a1 + 48), a2[6], 8);
}

void __destroy_helper_block_8_32r40r48r(const void **a1)
{
  _Block_object_dispose(a1[6], 8);
  _Block_object_dispose(a1[5], 8);
  _Block_object_dispose(a1[4], 8);
}

uint64_t __xzm_print_block_invoke_61(uint64_t a1, const void *a2, uint64_t a3, const char *a4)
{
  void (*v5)(const char *, ...);
  unint64_t v6;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) & 1) == 0)
    (*(void (**)(const char *))(a1 + 56))(", ");
  (*(void (**)(const char *, ...))(a1 + 56))("%s\"%p\": {\n", a4, a2);
  (*(void (**)(const char *, ...))(a1 + 56))("%s    \"addr\": \"%p\", \n", a4, a2);
  v6 = ((*(_QWORD *)a3 - *(_QWORD *)(*(_QWORD *)(a1 + 64) + 392)) / 528);
  if (v6 <= 3)
    __asm { BR              X8 }
  (*(void (**)(const char *, ...))(a1 + 56))("%s    \"segment_group\": \"%s\", \n", a4, "unknown");
  (*(void (**)(const char *, ...))(a1 + 56))("%s    \"body_addr\": \"%p\", \n", a4, *(const void **)(a3 + 80));
  (*(void (**)(const char *, ...))(a1 + 56))("%s    \"used\": %u, \n", a4, *(_DWORD *)(a3 + 8));
  v5 = *(void (**)(const char *, ...))(a1 + 56);
  if (*(_BYTE *)(a3 + 20))
  {
    if (*(_BYTE *)(a3 + 20) == 1)
      v5("%s    \"kind\": \"%s\", \n", a4, "huge_segment");
    else
      v5("%s    \"kind\": \"%s\", \n", a4, "unknown");
  }
  else
  {
    v5("%s    \"kind\": \"%s\", \n", a4, "normal_segment");
  }
  if (*(_QWORD *)(a3 + 72) == -1)
    (*(void (**)(const char *, ...))(a1 + 56))("%s    \"reclaim_id\": -1, \n", a4);
  else
    (*(void (**)(const char *, ...))(a1 + 56))("%s    \"reclaim_id\": %llu, \n", a4, *(_QWORD *)(a3 + 72));
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  (*(void (**)(const char *, ...))(a1 + 56))("%s    \"slice_count\": %u, \n", a4, *(_DWORD *)(a3 + 12));
  (*(void (**)(const char *, ...))(a1 + 56))("%s    \"slice_entry_count\": %u \n", a4, *(_DWORD *)(a3 + 16));
  (*(void (**)(const char *, ...))(a1 + 56))("%s}\n", a4);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  return 0;
}

void __copy_helper_block_8_32b40r48r(uint64_t a1, const void **a2)
{
  _Block_object_assign((void *)(a1 + 32), a2[4], 7);
  _Block_object_assign((void *)(a1 + 40), a2[5], 8);
  _Block_object_assign((void *)(a1 + 48), a2[6], 8);
}

void __destroy_helper_block_8_32b40r48r(const void **a1)
{
  _Block_object_dispose(a1[6], 8);
  _Block_object_dispose(a1[5], 8);
  _Block_object_dispose(a1[4], 7);
}

uint64_t _xzm_introspect_map_reclaim_buffer(unsigned int a1, uint64_t (*a2)(_QWORD, uint64_t, unint64_t, uint64_t *), uint64_t a3, uint64_t **a4, _QWORD *a5)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD, uint64_t, unint64_t, uint64_t *);
  unsigned int v15;

  v15 = a1;
  v14 = (uint64_t (*)(_QWORD, uint64_t, unint64_t, uint64_t *))a2;
  v13 = a3;
  v12 = a4;
  v11 = a5;
  v10 = 0;
  v9 = a2(a1, a3, 8240, &v10);
  if (v9)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to map reclaim buffer metadata";
    __break(1u);
    JUMPOUT(0x329DCLL);
  }
  *v12 = v10;
  v8 = 0;
  v7 = *v10;
  v6 = 16 * v10[1] + 32;
  if (v6 % vm_page_size)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"buffer_size % vm_page_size == 0\" failed (/Library/Cache"
                           "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_introspect.c:477)";
    __break(1u);
    JUMPOUT(0x32A6CLL);
  }
  if (v7)
  {
    v9 = v14(v15, v7, v6, &v8);
    if (v9)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: failed to map reclaim buffer";
      __break(1u);
      JUMPOUT(0x32AC4);
    }
  }
  *v11 = v8;
  return 0;
}

uint64_t __xzm_print_block_invoke_163(uint64_t a1, const void *a2, int a3, unsigned __int8 a4)
{
  (*(void (**)(const char *))(a1 + 48))("    ");
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) & 1) == 0)
    (*(void (**)(const char *))(a1 + 48))(", ");
  (*(void (**)(const char *, ...))(a1 + 48))("\"%p\": {\n", a2);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"addr\": \"%p\", \n", a2);
  if (a4 <= 3uLL)
    __asm { BR              X8 }
  (*(void (**)(const char *, ...))(a1 + 48))("        \"kind\": \"%s\", \n", "unknown slab");
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  (*(void (**)(const char *, ...))(a1 + 48))("        \"size\": %u \n", a3);
  (*(void (**)(const char *))(a1 + 48))("    }\n");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  return 0;
}

void __copy_helper_block_8_32b40r(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 7);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
}

void __destroy_helper_block_8_32b40r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 8);
  _Block_object_dispose(*(const void **)(a1 + 32), 7);
}

uint64_t __xzm_print_block_invoke_169(uint64_t a1, char *a2, char *a3, char *a4, int a5, const void *a6, uint64_t a7)
{
  void (*v8)(const char *, ...);
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;

  (*(void (**)(const char *))(a1 + 48))("    ");
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) & 1) == 0)
    (*(void (**)(const char *))(a1 + 48))(", ");
  (*(void (**)(const char *, ...))(a1 + 48))("\"%p\": {\n", a6);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"addr\": \"%p\", \n", a6);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"metadata_addr\": \"%p\", \n", &a2[a4 - a3]);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"mzone\": %d, \n", *((unsigned __int16 *)a4 + 17));
  (*(void (**)(const char *, ...))(a1 + 48))("        \"xzone\": %d, \n", a4[33]);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"segment\": \"%p\", \n", a2);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"segment_group\": %zu, \n", (*(_QWORD *)a3 - *(_QWORD *)(*(_QWORD *)(a1 + 56) + 392)) / 528);
  v12 = a4[32] & 0xF;
  if (v12 <= 8uLL)
    __asm { BR              X8 }
  (*(void (**)(const char *, ...))(a1 + 48))("        \"kind\": \"%s\", \n", "unknown");
  (*(void (**)(const char *, ...))(a1 + 48))("        \"slice_count\": %u, \n", a5);
  v8 = *(void (**)(const char *, ...))(a1 + 48);
  if (a7)
    v8("        \"block_size\": %u, \n", *(_QWORD *)(a7 + 48));
  else
    v8("        \"block_size\": %u, \n", 0);
  (*(void (**)(const char *))(a1 + 48))("        \"in_use\": 1, \n");
  v11 = *(_QWORD *)&a3[8 * ((a4 - (a3 + 2136)) / 48) + 88];
  if (v11 == -1)
    (*(void (**)(const char *))(a1 + 48))("        \"reclaim_id\": -1, \n");
  else
    (*(void (**)(const char *, ...))(a1 + 48))("        \"reclaim_id\": %llu, \n", v11);
  v10 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (v10)
  {
    return v10;
  }
  else
  {
    if (v12 == 2 || v12 == 5)
      (*(void (**)(const char *, ...))(a1 + 48))("        \"bucket\": %u,\n", *(unsigned __int8 *)(a7 + 76));
    if (v12 == 2)
    {
      (*(void (**)(const char *, ...))(a1 + 48))("        \"meta\": \"0x%llx\",\n", *(_QWORD *)a4);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"xca_alloc_head\": \"0x%llx\",\n", *(_QWORD *)a4 & 0x7FFLL);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"xca_free_count\": \"0x%llx\",\n", (*(_QWORD *)a4 >> 11) & 0x7FFLL);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"xca_alloc_idx\": \"0x%llx\",\n", (*(_QWORD *)a4 >> 22) & 0x3FLL);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"xca_on_partial_list\": \"0x%llx\",\n", (*(_QWORD *)a4 >> 28) & 1);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"xca_on_empty_list\": \"0x%llx\",\n", (*(_QWORD *)a4 >> 29) & 1);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"xca_walk_locked\": \"0x%llx\",\n", (*(_QWORD *)a4 >> 30) & 1);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"xca_head_seqno\": \"0x%llx\",\n", (*(_QWORD *)a4 >> 38) & 0x1FFFLL);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"xca_seqno\": \"0x%llx\",\n", *(_QWORD *)a4 >> 51);
    }
    else if (v12 == 5)
    {
      (*(void (**)(const char *, ...))(a1 + 48))("        \"free\": \"0x%x\",\n", *(_DWORD *)a4);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"used\": %u,\n", *((_DWORD *)a4 + 1));
      (*(void (**)(const char *, ...))(a1 + 48))("        \"alloc_idx\": %u,\n", a4[12]);
    }
    (*(void (**)(const char *, ...))(a1 + 48))("        \"is_preallocated\": %d,\n", (a4[32] & 0x40) != 0);
    (*(void (**)(const char *, ...))(a1 + 48))("        \"is_pristine\": %d\n", (a4[32] & 0x10) != 0);
    (*(void (**)(const char *))(a1 + 48))("    }\n");
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    return 0;
  }
}

uint64_t __xzm_print_block_invoke_195(uint64_t a1, char *a2, _QWORD *a3, uint64_t a4, int a5, const void *a6)
{
  unint64_t v7;
  unsigned int v9;
  uint64_t v10;

  (*(void (**)(const char *))(a1 + 48))("    ");
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) & 1) == 0)
    (*(void (**)(const char *))(a1 + 48))(", ");
  (*(void (**)(const char *, ...))(a1 + 48))("\"%p\": {\n", a6);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"addr\": \"%p\", \n", a6);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"metadata_addr\": \"%p\", \n", &a2[a4 - (_QWORD)a3]);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"mzone\": %d, \n", *(unsigned __int16 *)(a4 + 34));
  (*(void (**)(const char *, ...))(a1 + 48))("        \"xzone\": %d, \n", *(unsigned __int8 *)(a4 + 33));
  (*(void (**)(const char *, ...))(a1 + 48))("        \"segment\": \"%p\", \n", a2);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"segment_group\": %zu, \n", (*a3 - *(_QWORD *)(*(_QWORD *)(a1 + 56) + 392)) / 528);
  v7 = *(_BYTE *)(a4 + 32) & 0xF;
  if (v7 <= 8)
    __asm { BR              X8 }
  (*(void (**)(const char *, ...))(a1 + 48))("        \"kind\": \"%s\", \n", "unknown");
  (*(void (**)(const char *, ...))(a1 + 48))("        \"slice_count\": %u, \n", a5);
  v10 = a3[((a4 - (uint64_t)(a3 + 267)) / 48) + 11];
  if (v10 == -1)
    (*(void (**)(const char *))(a1 + 48))("        \"reclaim_id\": -1, \n");
  else
    (*(void (**)(const char *, ...))(a1 + 48))("        \"reclaim_id\": %llu, \n", v10);
  v9 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (v9)
  {
    return v9;
  }
  else
  {
    (*(void (**)(const char *, ...))(a1 + 48))("        \"is_preallocated\": %d,\n", (*(_BYTE *)(a4 + 32) & 0x40) != 0);
    (*(void (**)(const char *))(a1 + 48))("        \"in_use\": 0 \n");
    (*(void (**)(const char *))(a1 + 48))("    }\n");
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    return 0;
  }
}

uint64_t xzm_statistics(unsigned int a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, uint64_t, uint64_t **), uint64_t a4, _OWORD *a5)
{
  void **v7;
  int v8;
  int v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int);
  void *v11;
  uint64_t v12;
  void **v13;
  int v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, unint64_t *, unsigned int, uint64_t, uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD, uint64_t, uint64_t, uint64_t **);
  uint64_t v30;
  unsigned int v31;

  v31 = a1;
  v30 = a2;
  v29 = a3;
  v28 = a4;
  v27 = a5;
  v25 = 0u;
  v26 = 0u;
  *a5 = 0u;
  a5[1] = v26;
  v29 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t **))reader_or_in_memory_fallback_2((uint64_t)v29, v31);
  v24 = 0;
  v23 = 0;
  v22 = 0;
  v21 = 0;
  v20 = _xzm_introspect_map_zone_and_main(v31, v30, (uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD **))v29, &v24, &v23, &v22);
  if (v20)
  {
    return v20;
  }
  else
  {
    v21 = v30 == v22;
    if (v30 == v22)
    {
      v19 = 0;
      v19 = *(_QWORD *)(v23 + 336);
      mfmi_statistics_task(v31, v19, (uint64_t)v29, (uint64_t)v27);
      *((_QWORD *)v27 + 2) = 0;
    }
    v13 = _NSConcreteStackBlock;
    v14 = 0x40000000;
    v15 = 0;
    v16 = __xzm_statistics_block_invoke_3;
    v17 = &__block_descriptor_tmp_232;
    v18 = (uint64_t)v27;
    if (v21)
    {
      v7 = _NSConcreteStackBlock;
      v8 = 0x40000000;
      v9 = 0;
      v10 = __xzm_statistics_block_invoke_4;
      v11 = &__block_descriptor_tmp_233;
      v12 = (uint64_t)v27;
      return _xzm_introspect_enumerate(v31, v29, v30, v24, v22, v23, 0, (uint64_t)&__block_literal_global_229, (uint64_t)&__block_literal_global_231, (uint64_t)&v13, (uint64_t)&v7);
    }
    else
    {
      return _xzm_introspect_enumerate(v31, v29, v30, v24, v22, v23, 0, (uint64_t)&__block_literal_global_229, (uint64_t)&__block_literal_global_231, (uint64_t)&v13, 0);
    }
  }
}

int __xzm_statistics_block_invoke(id a1, unint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  return 0;
}

int __xzm_statistics_block_invoke_2(id a1, unint64_t a2, xzm_segment_s *a3, const char *a4)
{
  return 0;
}

uint64_t __xzm_statistics_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v8;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;

  v13 = (unint64_t)a5 << 14;
  v10 = a4[4] & 0xF;
  if (v10 == 2)
  {
    v12 = *a4;
    v11 = *(_DWORD *)(a7 + 68);
    if ((*a4 & 0x7FF) != 0x7FF && (v12 & 0x7FF) != 0x7FE)
    {
      v7 = (v12 >> 11) & 0x7FF;
      **(_DWORD **)(a1 + 32) += v11 - v7;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) += (v11 - v7) * *(_QWORD *)(a7 + 48);
    }
  }
  else if (v10 == 5)
  {
    v8 = *((unsigned int *)a4 + 1);
    **(_DWORD **)(a1 + 32) += v8;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) += v8 * *(_QWORD *)(a7 + 48);
  }
  else
  {
    ++**(_DWORD **)(a1 + 32);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) += v13;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) += v13;
  return 0;
}

uint64_t __xzm_statistics_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) += (unint64_t)a5 << 14;
  return 0;
}

BOOL main_image_has_section(uint64_t a1, uint64_t a2)
{
  mach_header *image_header;

  image_header = (mach_header *)_dyld_get_image_header(0);
  return my_getsectbynamefromheader_64(image_header, a1, a2) != 0;
}

_DWORD *my_getsectbynamefromheader_64(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int j;
  unsigned int i;
  _DWORD *v6;
  _DWORD *v7;

  v7 = a1 + 8;
  for (i = 0; i < a1[4]; ++i)
  {
    if (*v7 == 25 && (!_platform_strncmp(v7 + 2, a2, 16) || a1[3] == 1))
    {
      v6 = v7 + 18;
      for (j = 0; j < v7[16]; ++j)
      {
        if (!_platform_strncmp(v6, a3, 16) && !_platform_strncmp(v6 + 4, a2, 16))
          return v6;
        v6 += 20;
      }
    }
    v7 = (_DWORD *)((char *)v7 + v7[1]);
  }
  return 0;
}

uint64_t pgm_thread_set_disabled(uint64_t result)
{
  if ((result & 1) != 0)
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = 0xFFFFFFFFLL;
  else
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = 0;
  return result;
}

char *pgm_init_config(char a1)
{
  char *result;

  if ((a1 & 1) != 0)
    g_env = a1 & 1;
  result = env_var_0("MallocProbGuard");
  if (result)
  {
    byte_A80E9 = 1;
    result = (char *)env_BOOL_0("MallocProbGuard");
    byte_A80EA = (_DWORD)result != 0;
  }
  return result;
}

char *env_var_0(const char *a1)
{
  return getenv(a1);
}

BOOL env_BOOL_0(const char *a1)
{
  char *v2;

  v2 = env_var_0(a1);
  return v2 && *v2 == 49;
}

uint64_t pgm_should_enable()
{
  char v1;
  char v2;

  if ((byte_A80E9 & 1) != 0)
  {
    v2 = byte_A80EA & 1;
  }
  else
  {
    v1 = g_env & 1;
    v2 = should_activate(g_env & 1) && (v1 & 1) != 0;
  }
  return v2 & 1;
}

BOOL should_activate(char a1)
{
  uint32_t v1;
  char v3;

  v3 = a1 & 1;
  if ((a1 & 1) != 0 || is_platform_binary())
  {
    if ((v3 & 1) != 0)
      v1 = 250;
    else
      v1 = 1000;
    return !rand_uniform(v1) && !main_image_has_section((uint64_t)"__DATA", (uint64_t)"__pgm_opt_out");
  }
  else
  {
    return 0;
  }
}

mach_vm_address_t pgm_create_zone(uint64_t a1)
{
  mach_vm_address_t v2;

  if (*(_DWORD *)(a1 + 104) < 0xDu)
  {
    __break(1u);
    JUMPOUT(0x343A4);
  }
  v2 = my_vm_map(16720, 3, 1);
  setup_zone(v2, (_QWORD *)a1);
  my_vm_protect(v2, 0x4000, 1);
  return v2;
}

mach_vm_address_t my_vm_map(uint64_t a1, vm_prot_t a2, int a3)
{
  return my_vm_map_common(0, a1, a2, 1, a3);
}

uint64_t setup_zone(uint64_t a1, _QWORD *a2)
{
  BOOL v3;

  memcpy((void *)a1, &malloc_zone_template_0, 0xC8uLL);
  *(_QWORD *)(a1 + 200) = a2;
  disable_unsupported_apis((_QWORD *)a1, a2);
  configure_zone(a1);
  *(_QWORD *)(a1 + 240) = quarantine_size(*(_DWORD *)(a1 + 208));
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a1 + 240) + 0x4000000;
  *(_QWORD *)(a1 + 272) = my_vm_map(*(_QWORD *)(a1 + 264), 0, 1);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a1 + 272) + 0x2000000;
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a1 + 248) + *(_QWORD *)(a1 + 240);
  my_vm_map_fixed(*(_QWORD *)(a1 + 248), *(_QWORD *)(a1 + 240), 0, 13);
  *(_QWORD *)(a1 + 280) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 200) + 32))(*(_QWORD *)(a1 + 200), *(unsigned int *)(a1 + 208), 8);
  *(_QWORD *)(a1 + 288) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 200) + 32))(*(_QWORD *)(a1 + 200), *(unsigned int *)(a1 + 216), 256);
  v3 = 0;
  if (*(_QWORD *)(a1 + 280))
    v3 = *(_QWORD *)(a1 + 288) != 0;
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x345C8);
  }
  return init_lock_0(a1);
}

uint64_t my_vm_protect(mach_vm_address_t a1, uint64_t a2, vm_prot_t a3)
{
  uint64_t result;

  result = mach_vm_protect(mach_task_self_, a1, (a2 + vm_page_size - 1) & ~(vm_page_size - 1), 0, a3);
  if ((_DWORD)result)
  {
    __break(1u);
    JUMPOUT(0x34690);
  }
  return result;
}

uint64_t pgm_extract_report_from_corpse(unint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t (*a6)(_QWORD, _QWORD, _QWORD))
{
  unsigned int report_select_zone;
  uint64_t (*v8)(unsigned int, uint64_t, uint64_t, uint64_t *);

  os_unfair_lock_lock_with_options(&crash_reporter_lock_0, 327680);
  v8 = setup_memory_reader(a6);
  report_select_zone = extract_report_select_zone(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t *))v8);
  os_unfair_lock_unlock(&crash_reporter_lock_0);
  return report_select_zone;
}

uint64_t (*setup_memory_reader(uint64_t (*a1)(_QWORD, _QWORD, _QWORD)))(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!a1)
  {
    __break(1u);
    JUMPOUT(0x34760);
  }
  g_crm_reader_0 = a1;
  num_read_memory_0 = 0;
  return memory_reader_adapter_0;
}

uint64_t extract_report_select_zone(unint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v23;
  unsigned int v24;
  unsigned int i;

  for (i = 0; i < a5; ++i)
  {
    v6 = is_pgm_zone(*(_QWORD *)(a4 + 8 * i), a3, a6);
    v23 = v6;
    free_read_memory(v6, v7, v8, v9, v10, v11, v12, v13);
    if (v23 != 257)
    {
      if (v23)
        return v23;
      v14 = diagnose_fault_from_external_process(a1, a2, a3, *(_QWORD *)(a4 + 8 * i), (uint64_t)a6);
      v24 = v14;
      free_read_memory(v14, v15, v16, v17, v18, v19, v20, v21);
      if (v24 != 257)
        return v24;
    }
  }
  return 5;
}

BOOL is_platform_binary()
{
  return _malloc_is_platform_binary();
}

uint64_t rand_uniform(uint32_t a1)
{
  if (!a1)
  {
    __break(1u);
    JUMPOUT(0x348F0);
  }
  return arc4random_uniform(a1);
}

_QWORD *disable_unsupported_apis(_QWORD *result, _QWORD *a2)
{
  if (!a2[14])
    result[14] = 0;
  if (!a2[15])
    result[15] = 0;
  if (!a2[17])
    result[17] = 0;
  return result;
}

BOOL configure_zone(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;

  v1 = choose_memory_budget_in_kb();
  v29 = env_uint_0("MallocProbGuardMemoryBudgetInKB", v1);
  v9 = compute_max_allocations(v29, v2, v3, v4, v5, v6, v7, v8);
  *(_DWORD *)(a1 + 212) = env_uint_0("MallocProbGuardAllocations", v9);
  LODWORD(v10) = *(_DWORD *)(a1 + 212);
  *(_DWORD *)(a1 + 208) = env_uint_0("MallocProbGuardSlots", ((double)v10 * 10.0));
  LODWORD(v11) = *(_DWORD *)(a1 + 212);
  *(_DWORD *)(a1 + 216) = env_uint_0("MallocProbGuardMetadata", ((double)v11 * 3.0));
  v12 = choose_sample_rate();
  v28 = env_uint_0("MallocProbGuardSampleRate", v12);
  if (v28 == 1)
    v27 = 1;
  else
    v27 = 2 * v28;
  *(_DWORD *)(a1 + 220) = v27;
  *(_BYTE *)(a1 + 224) = env_BOOL_0("MallocProbGuardDebug");
  *(_QWORD *)(a1 + 232) = env_uint_0("MallocProbGuardDebugLogThrottleInMillis", 0x3E8u);
  if ((*(_BYTE *)(a1 + 224) & 1) != 0)
    malloc_report(6, (uint64_t)"ProbGuard configuration: %u kB budget, 1/%u sample rate, %u/%u/%u allocations/metadata/slots\n", v13, v14, v15, v16, v17, v18, v29);
  result = check_configuration((_DWORD *)a1);
  if (!result)
  {
    malloc_report(3, (uint64_t)"*** FATAL ERROR - ProbGuard: bad configuration.\n", v20, v21, v22, v23, v24, v25, v26);
    qword_A4008 = (uint64_t)"FATAL ERROR - ProbGuard: bad configuration";
    __break(1u);
    JUMPOUT(0x34B68);
  }
  return result;
}

vm_size_t quarantine_size(int a1)
{
  return (2 * a1 + 1) * vm_page_size;
}

mach_vm_address_t my_vm_map_fixed(mach_vm_address_t a1, uint64_t a2, vm_prot_t a3, int a4)
{
  mach_vm_address_t result;

  result = my_vm_map_common(a1, a2, a3, 0x4000, a4);
  if (result != a1)
  {
    __break(1u);
    JUMPOUT(0x34C44);
  }
  return result;
}

uint64_t init_lock_0(uint64_t result)
{
  *(_DWORD *)(result + 16680) = 0;
  return result;
}

uint64_t pgm_size(os_unfair_lock_s *a1, unint64_t a2)
{
  BOOL v3;
  uint64_t v4;

  v3 = 0;
  if (*(_QWORD *)&a1[62]._os_unfair_lock_opaque <= a2)
    v3 = a2 < *(_QWORD *)&a1[64]._os_unfair_lock_opaque;
  if (!v3)
    return (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)&a1[50]._os_unfair_lock_opaque + 16))(*(_QWORD *)&a1[50]._os_unfair_lock_opaque, a2);
  lock_0((uint64_t)a1);
  v4 = lookup_size(a1, a2);
  unlock_0(a1);
  return v4;
}

uint64_t pgm_malloc(uint64_t a1, vm_size_t a2)
{
  double v2;
  float v3;
  BOOL v5;
  vm_size_t v6;
  int v10;
  unsigned int v11;
  uint32_t v12;
  _BOOL4 v13;

  v5 = 0;
  if (a2 <= vm_page_size)
  {
    v5 = 0;
    if (*(_DWORD *)(a1 + 16684) != *(_DWORD *)(a1 + 212))
    {
      v12 = *(_DWORD *)(a1 + 220);
      v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880);
      if (v10 == -1)
      {
        v13 = 0;
      }
      else
      {
        if (v10)
          v11 = v10 - 1;
        else
          v11 = rand_uniform(v12);
        *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = v11;
        v13 = v11 == 0;
      }
      v5 = v13;
    }
  }
  if (v5 && (lock_0(a1), v6 = allocate(a1, a2, 0x10uLL, v2, v3), unlock_0((os_unfair_lock_s *)a1), v6))
    return v6;
  else
    return (*(uint64_t (**)(_QWORD, vm_size_t))(*(_QWORD *)(a1 + 200) + 24))(*(_QWORD *)(a1 + 200), a2);
}

uint64_t pgm_calloc(uint64_t a1, unint64_t a2, unint64_t a3)
{
  double v3;
  float v4;
  BOOL v6;
  vm_size_t v7;
  vm_size_t v8;
  int v13;
  unsigned int v14;
  uint32_t v15;
  _BOOL4 v16;

  v8 = a2 * a3;
  if (!is_mul_ok(a2, a3))
    return (*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(*(_QWORD *)(a1 + 200) + 32))(*(_QWORD *)(a1 + 200), a2, a3);
  v6 = 0;
  if (v8 <= vm_page_size)
  {
    v6 = 0;
    if (*(_DWORD *)(a1 + 16684) != *(_DWORD *)(a1 + 212))
    {
      v15 = *(_DWORD *)(a1 + 220);
      v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880);
      if (v13 == -1)
      {
        v16 = 0;
      }
      else
      {
        if (v13)
          v14 = v13 - 1;
        else
          v14 = rand_uniform(v15);
        *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = v14;
        v16 = v14 == 0;
      }
      v6 = v16;
    }
  }
  if (!v6)
    return (*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(*(_QWORD *)(a1 + 200) + 32))(*(_QWORD *)(a1 + 200), a2, a3);
  lock_0(a1);
  v7 = allocate(a1, v8, 0x10uLL, v3, v4);
  unlock_0((os_unfair_lock_s *)a1);
  if (!v7)
    return (*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(*(_QWORD *)(a1 + 200) + 32))(*(_QWORD *)(a1 + 200), a2, a3);
  _platform_memset(v7, 0, v8);
  return v7;
}

uint64_t pgm_valloc(uint64_t a1, vm_size_t a2)
{
  double v2;
  float v3;
  BOOL v5;
  vm_size_t v6;
  int v10;
  unsigned int v11;
  uint32_t v12;
  _BOOL4 v13;

  v5 = 0;
  if (a2 <= vm_page_size)
  {
    v5 = 0;
    if (*(_DWORD *)(a1 + 16684) != *(_DWORD *)(a1 + 212))
    {
      v12 = *(_DWORD *)(a1 + 220);
      v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880);
      if (v10 == -1)
      {
        v13 = 0;
      }
      else
      {
        if (v10)
          v11 = v10 - 1;
        else
          v11 = rand_uniform(v12);
        *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = v11;
        v13 = v11 == 0;
      }
      v5 = v13;
    }
  }
  if (v5 && (lock_0(a1), v6 = allocate(a1, a2, vm_page_size, v2, v3), unlock_0((os_unfair_lock_s *)a1), v6))
    return v6;
  else
    return (*(uint64_t (**)(_QWORD, vm_size_t))(*(_QWORD *)(a1 + 200) + 40))(*(_QWORD *)(a1 + 200), a2);
}

void pgm_free(uint64_t a1, unint64_t a2)
{
  BOOL v2;

  v2 = 0;
  if (*(_QWORD *)(a1 + 248) <= a2)
    v2 = a2 < *(_QWORD *)(a1 + 256);
  if (v2)
  {
    lock_0(a1);
    deallocate(a1, a2);
    unlock_0((os_unfair_lock_s *)a1);
  }
  else
  {
    (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)(a1 + 200) + 48))(*(_QWORD *)(a1 + 200), a2);
  }
}

uint64_t pgm_realloc(uint64_t a1, unint64_t a2, vm_size_t a3)
{
  BOOL v4;
  BOOL v5;
  vm_size_t v6;
  int v11;
  unsigned int v12;
  uint32_t v13;
  _BOOL4 v14;

  if (!a2)
    return pgm_malloc(a1, a3);
  v5 = 0;
  if (a3 <= vm_page_size)
  {
    v5 = 0;
    if (*(_DWORD *)(a1 + 16684) != *(_DWORD *)(a1 + 212))
    {
      v13 = *(_DWORD *)(a1 + 220);
      v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880);
      if (v11 == -1)
      {
        v14 = 0;
      }
      else
      {
        if (v11)
          v12 = v11 - 1;
        else
          v12 = rand_uniform(v13);
        *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = v12;
        v14 = v12 == 0;
      }
      v5 = v14;
    }
  }
  if (v5)
    goto LABEL_17;
  v4 = 0;
  if (*(_QWORD *)(a1 + 248) <= a2)
    v4 = a2 < *(_QWORD *)(a1 + 256);
  if (!v4)
    return (*(uint64_t (**)(_QWORD, unint64_t, vm_size_t))(*(_QWORD *)(a1 + 200) + 56))(*(_QWORD *)(a1 + 200), a2, a3);
LABEL_17:
  lock_0(a1);
  v6 = reallocate(a1, a2, a3, v5);
  unlock_0((os_unfair_lock_s *)a1);
  return v6;
}

uint64_t pgm_destroy(mach_vm_address_t a1)
{
  malloc_destroy_zone(*(malloc_zone_t **)(a1 + 200));
  sanitizer_vm_deallocate(*(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 264));
  return sanitizer_vm_deallocate(a1, 16720);
}

uint64_t pgm_memalign(uint64_t a1, vm_size_t a2, vm_size_t a3, double a4, float a5)
{
  double v5;
  float v6;
  BOOL v8;
  vm_size_t v9;
  vm_size_t v10;
  int v15;
  unsigned int v16;
  uint32_t v17;
  _BOOL4 v18;

  if (a2 > vm_page_size || !is_power_of_2(a2, a4, a5) || a2 < 8)
    return (*(uint64_t (**)(_QWORD, vm_size_t, vm_size_t))(*(_QWORD *)(a1 + 200) + 112))(*(_QWORD *)(a1 + 200), a2, a3);
  if (a2 <= 0x10)
    v9 = 16;
  else
    v9 = a2;
  v8 = 0;
  if (a3 <= vm_page_size)
  {
    v8 = 0;
    if (*(_DWORD *)(a1 + 16684) != *(_DWORD *)(a1 + 212))
    {
      v17 = *(_DWORD *)(a1 + 220);
      v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880);
      if (v15 == -1)
      {
        v18 = 0;
      }
      else
      {
        if (v15)
          v16 = v15 - 1;
        else
          v16 = rand_uniform(v17);
        *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = v16;
        v18 = v16 == 0;
      }
      v8 = v18;
    }
  }
  if (v8 && (lock_0(a1), v10 = allocate(a1, a3, v9, v5, v6), unlock_0((os_unfair_lock_s *)a1), v10))
    return v10;
  else
    return (*(uint64_t (**)(_QWORD, vm_size_t, vm_size_t))(*(_QWORD *)(a1 + 200) + 112))(*(_QWORD *)(a1 + 200), a2, a3);
}

void pgm_free_definite_size(uint64_t a1, unint64_t a2, uint64_t a3)
{
  BOOL v3;

  v3 = 0;
  if (*(_QWORD *)(a1 + 248) <= a2)
    v3 = a2 < *(_QWORD *)(a1 + 256);
  if (v3)
  {
    lock_0(a1);
    deallocate(a1, a2);
    unlock_0((os_unfair_lock_s *)a1);
  }
  else
  {
    (*(void (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)(a1 + 200) + 120))(*(_QWORD *)(a1 + 200), a2, a3);
  }
}

uint64_t pgm_claimed_address(_QWORD *a1, unint64_t a2)
{
  BOOL v3;

  v3 = 0;
  if (a1[31] <= a2)
    v3 = a2 < a1[32];
  if (v3)
    return 1;
  else
    return (*(uint64_t (**)(_QWORD, unint64_t))(a1[25] + 136))(a1[25], a2);
}

uint64_t pgm_malloc_with_options(uint64_t a1, unint64_t a2, vm_size_t a3, uint64_t a4)
{
  double v4;
  float v5;
  vm_size_t v7;
  BOOL v8;
  uint64_t v9;
  vm_size_t v10;
  int v16;
  unsigned int v17;
  uint32_t v18;
  _BOOL4 v19;

  v8 = 0;
  if (a3 <= vm_page_size)
  {
    v8 = 0;
    if (*(_DWORD *)(a1 + 16684) != *(_DWORD *)(a1 + 212))
    {
      v18 = *(_DWORD *)(a1 + 220);
      v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880);
      if (v16 == -1)
      {
        v19 = 0;
      }
      else
      {
        if (v16)
          v17 = v16 - 1;
        else
          v17 = rand_uniform(v18);
        *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = v17;
        v19 = v17 == 0;
      }
      v8 = v19;
    }
  }
  if (v8
    && (a2 <= 0x10 ? (v7 = 16) : (v7 = a2),
        lock_0(a1),
        v10 = allocate(a1, a3, v7, v4, v5),
        unlock_0((os_unfair_lock_s *)a1),
        v10))
  {
    if ((a4 & 1) != 0)
      _platform_bzero(v10, a3);
    return v10;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 200) + 104) >= 0xFu && *(_QWORD *)(*(_QWORD *)(a1 + 200) + 152))
  {
    return (*(uint64_t (**)(_QWORD, unint64_t, vm_size_t, uint64_t))(*(_QWORD *)(a1 + 200) + 152))(*(_QWORD *)(a1 + 200), a2, a3, a4);
  }
  else if (a2)
  {
    v9 = (*(uint64_t (**)(_QWORD, unint64_t, vm_size_t))(*(_QWORD *)(a1 + 200) + 112))(*(_QWORD *)(a1 + 200), a2, a3);
    if (v9 && (a4 & 1) != 0)
      _platform_bzero(v9, a3);
    return v9;
  }
  else if ((a4 & 1) != 0)
  {
    return (*(uint64_t (**)(_QWORD, uint64_t, vm_size_t))(*(_QWORD *)(a1 + 200) + 32))(*(_QWORD *)(a1 + 200), 1, a3);
  }
  else
  {
    return (*(uint64_t (**)(_QWORD, vm_size_t))(*(_QWORD *)(a1 + 200) + 24))(*(_QWORD *)(a1 + 200), a3);
  }
}

uint64_t lock_0(uint64_t a1)
{
  return os_unfair_lock_lock_with_options(a1 + 16680, 327680);
}

uint64_t lookup_size(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;

  v3 = lookup_slot(a1, a2);
  if (v3 < 0)
    return *(unsigned __int16 *)(a1[35] + 8 * v3 + 4);
  else
    return 0;
}

void unlock_0(os_unfair_lock_s *a1)
{
  os_unfair_lock_unlock(a1 + 4170);
}

uint64_t lookup_slot(_QWORD *a1, unint64_t a2)
{
  BOOL v3;
  BOOL v4;
  int v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  unsigned int v9;
  uint64_t v12;
  int v13;

  v4 = 0;
  if (a1[31] <= a2)
    v4 = a2 < a1[32];
  if (!v4)
  {
    __break(1u);
    JUMPOUT(0x36348);
  }
  if (a1[31] % vm_page_size)
  {
    __break(1u);
    JUMPOUT(0x3638CLL);
  }
  v9 = nearest_slot((uint64_t)a1, a2);
  v8 = a2 % vm_page_size;
  v7 = *(_WORD *)(a1[35] + 8 * v9 + 6);
  v6 = v7 + *(_WORD *)(a1[35] + 8 * v9 + 4);
  if (is_guard_page((uint64_t)a1, a2))
  {
    v5 = 3;
  }
  else if (v8 == v7)
  {
    v5 = 0;
  }
  else if (v7 >= (int)v8 || v8 >= (int)v6)
  {
    v5 = 2;
  }
  else
  {
    v5 = 1;
  }
  LODWORD(v12) = v9;
  HIDWORD(v12) = v13 & 0x80000000 | v5 & 0x7FFFFFFF;
  v3 = 0;
  if ((*(_DWORD *)(a1[35] + 8 * v9) & 3) == 1)
    v3 = v5 == 0;
  HIDWORD(v12) = HIDWORD(v12) & 0x7FFFFFFF | (v3 << 31);
  return v12;
}

uint64_t nearest_slot(uint64_t a1, unint64_t a2)
{
  unsigned int v3;

  if (a2 >= *(_QWORD *)(a1 + 248) + vm_page_size)
  {
    if (a2 < *(_QWORD *)(a1 + 256) - vm_page_size)
    {
      v3 = (page_idx(a1, a2) - 1) / 2;
      if (is_guard_page(a1, a2) && a2 % vm_page_size >= vm_page_size / 2)
        ++v3;
      return v3;
    }
    else
    {
      return (*(_DWORD *)(a1 + 208) - 1);
    }
  }
  else
  {
    return 0;
  }
}

BOOL is_guard_page(uint64_t a1, unint64_t a2)
{
  return page_idx(a1, a2) % 2 == 0;
}

vm_size_t page_idx(uint64_t a1, unint64_t a2)
{
  BOOL v3;

  v3 = 0;
  if (*(_QWORD *)(a1 + 248) <= a2)
    v3 = a2 < *(_QWORD *)(a1 + 256);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x36768);
  }
  return (a2 - *(_QWORD *)(a1 + 248)) / vm_page_size;
}

vm_size_t allocate(uint64_t a1, vm_size_t a2, vm_size_t a3, double a4, float a5)
{
  double v5;
  float v6;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  vm_size_t v11;
  unsigned __int16 v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v17;
  unint64_t v20;

  if (a2 > vm_page_size)
  {
    __break(1u);
    JUMPOUT(0x367ECLL);
  }
  v9 = 0;
  if (a3 >= 0x10)
    v9 = a3 <= vm_page_size;
  if (!v9)
  {
    __break(1u);
    JUMPOUT(0x36850);
  }
  if (!is_power_of_2(a3, a4, a5))
  {
    __break(1u);
    JUMPOUT(0x36878);
  }
  if (*(_DWORD *)(a1 + 16684) == *(_DWORD *)(a1 + 212))
    return 0;
  v17 = block_size(a2);
  v14 = choose_available_slot(a1);
  v13 = choose_metadata(a1, v14);
  v12 = choose_offset_on_page(v17, a3, vm_page_size, v5, v6);
  v11 = page_addr(a1, v14);
  mark_read_write(v11);
  LODWORD(v10) = (4 * v13) | 1;
  WORD2(v10) = v17;
  HIWORD(v10) = v12;
  *(_QWORD *)(*(_QWORD *)(a1 + 280) + 8 * v14) = v10;
  *(_DWORD *)(*(_QWORD *)(a1 + 288) + ((unint64_t)v13 << 8)) = v14;
  v20 = *(_QWORD *)(a1 + 288) + ((unint64_t)v13 << 8);
  *(_QWORD *)(v20 + 4) = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) - 8);
  *(_QWORD *)(v20 + 12) = mach_absolute_time();
  *(_OWORD *)(v20 + 22) = 0u;
  *(_WORD *)(v20 + 38) = 0;
  *(_WORD *)(v20 + 20) = trace_collect(v20 + 40, 216);
  ++*(_DWORD *)(a1 + 16684);
  *(_QWORD *)(a1 + 16696) += v17;
  if (*(_QWORD *)(a1 + 16696) <= *(_QWORD *)(a1 + 16704))
    v8 = *(_QWORD *)(a1 + 16704);
  else
    v8 = *(_QWORD *)(a1 + 16696);
  *(_QWORD *)(a1 + 16704) = v8;
  debug_zone(a1, (uint64_t)"allocated", v11 + v12);
  return v11 + v12;
}

BOOL is_power_of_2(uint64_t a1, double a2, float a3)
{
  LOWORD(a3) = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)a1));
  return LODWORD(a3) == 1;
}

unint64_t block_size(uint64_t a1)
{
  if (a1)
    return (a1 + 15) & 0xFFFFFFFFFFFFFFF0;
  else
    return 16;
}

uint64_t choose_available_slot(uint64_t a1)
{
  unsigned int i;

  for (i = *(_DWORD *)(a1 + 16692);
        (*(_DWORD *)(*(_QWORD *)(a1 + 280) + 8 * i) & 3) == 1;
  *(_DWORD *)(a1 + 16692) = (i + 1) % *(_DWORD *)(a1 + 208);
  return i;
}

uint64_t choose_metadata(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v4;

  if (*(_DWORD *)(a1 + 16688) >= *(_DWORD *)(a1 + 216))
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 288)
                   + ((unint64_t)(*(_DWORD *)(*(_QWORD *)(a1 + 280) + 8 * a2) >> 2) << 8)) == a2)
    {
      return *(_DWORD *)(*(_QWORD *)(a1 + 280) + 8 * a2) >> 2;
    }
    else
    {
      do
        v4 = rand_uniform(*(_DWORD *)(a1 + 216));
      while ((*(_DWORD *)(*(_QWORD *)(a1 + 280)
                         + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 288) + ((unint64_t)v4 << 8))) & 3) != 2);
      return v4;
    }
  }
  else
  {
    v2 = *(_DWORD *)(a1 + 16688);
    *(_DWORD *)(a1 + 16688) = v2 + 1;
    return v2;
  }
}

uint64_t choose_offset_on_page(unint64_t a1, unint64_t a2, unsigned __int16 a3, double a4, float a5)
{
  BOOL v6;
  __int16 v8;
  __int16 v9;

  v9 = a1;
  v8 = a2;
  if (a1 > a3)
  {
    __break(1u);
    JUMPOUT(0x36E30);
  }
  v6 = 0;
  if (a2 <= a3)
    v6 = is_power_of_2(a2, a4, a5);
  if (!v6)
  {
    __break(1u);
    JUMPOUT(0x36E84);
  }
  if (!is_power_of_2(a3, a4, a5))
  {
    __break(1u);
    JUMPOUT(0x36EB0);
  }
  if (rand_uniform(2u))
    return 0;
  else
    return (unsigned __int16)((a3 - v9) & ~(v8 - 1));
}

vm_size_t page_addr(uint64_t a1, unsigned int a2)
{
  if (a2 >= *(_DWORD *)(a1 + 208))
  {
    __break(1u);
    JUMPOUT(0x36F58);
  }
  return *(_QWORD *)(a1 + 248) + (2 * a2 + 1) * vm_page_size;
}

uint64_t mark_read_write(mach_vm_address_t a1)
{
  return my_vm_protect(a1, vm_page_size, 3);
}

uint64_t debug_zone(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;

  v18 = result;
  if ((*(_BYTE *)(result + 224) & 1) != 0)
  {
    if (should_log(result))
      malloc_report(6, (uint64_t)"ProbGuard: %9s 0x%llx, fill state: %3u/%u\n", v3, v4, v5, v6, v7, v8, a2);
    result = pgm_check(v18);
    if (!(_DWORD)result)
    {
      malloc_report(3, (uint64_t)"*** FATAL ERROR - ProbGuard: zone integrity check failed.\n", v9, v10, v11, v12, v13, v14, v15);
      qword_A4008 = (uint64_t)"FATAL ERROR - ProbGuard: zone integrity check failed";
      qword_A4038 = a3;
      __break(1u);
      JUMPOUT(0x370B4);
    }
  }
  return result;
}

BOOL should_log(uint64_t a1)
{
  _BOOL4 v2;
  uint64_t v3;

  v3 = mach_absolute_time();
  v2 = to_millis(v3 - *(_QWORD *)(a1 + 16712)) >= *(_QWORD *)(a1 + 232);
  if (v2)
    *(_QWORD *)(a1 + 16712) = v3;
  return v2;
}

uint64_t pgm_check(uint64_t a1)
{
  char v2;

  v2 = 0;
  if (check_zone(a1))
  {
    v2 = 0;
    if (check_slots(a1))
      v2 = check_metadata(a1);
  }
  return v2 & 1;
}

unint64_t to_millis(uint64_t a1)
{
  mach_timebase_info info;
  uint64_t v3;

  v3 = a1;
  info = 0;
  mach_timebase_info(&info);
  return v3 * (unint64_t)info.numer / info.denom / 0xF4240;
}

BOOL check_zone(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;

  v3 = 0;
  if (check_configuration((_DWORD *)a1))
  {
    v2 = *(_QWORD *)(a1 + 240);
    v3 = 0;
    if (v2 == quarantine_size(*(_DWORD *)(a1 + 208)))
    {
      v3 = 0;
      if (!(*(_QWORD *)(a1 + 248) % vm_page_size))
      {
        v3 = 0;
        if (!(*(_QWORD *)(a1 + 240) % vm_page_size))
        {
          v3 = 0;
          if (*(_QWORD *)(a1 + 248) + *(_QWORD *)(a1 + 240) == *(_QWORD *)(a1 + 256))
          {
            v3 = 0;
            if (*(_QWORD *)(a1 + 248) < *(_QWORD *)(a1 + 256))
            {
              v3 = 0;
              if (*(_QWORD *)(a1 + 264) == *(_QWORD *)(a1 + 240) + 0x4000000)
              {
                v3 = 0;
                if (*(_QWORD *)(a1 + 272) == *(_QWORD *)(a1 + 248) - 0x2000000)
                {
                  v3 = 0;
                  if (*(_QWORD *)(a1 + 272) < *(_QWORD *)(a1 + 248))
                  {
                    v3 = 0;
                    if (*(_DWORD *)(a1 + 16684) <= *(_DWORD *)(a1 + 212))
                    {
                      v3 = 0;
                      if (*(_DWORD *)(a1 + 16688) <= *(_DWORD *)(a1 + 216))
                      {
                        v3 = 0;
                        if (*(_DWORD *)(a1 + 16684) <= *(_DWORD *)(a1 + 16688))
                        {
                          v3 = 0;
                          if (*(_DWORD *)(a1 + 16692) < *(_DWORD *)(a1 + 208))
                          {
                            v3 = 0;
                            if (*(_QWORD *)(a1 + 280))
                            {
                              v3 = 0;
                              if (*(_QWORD *)(a1 + 288))
                                return *(_QWORD *)(a1 + 16696) <= *(_QWORD *)(a1 + 16704);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v3;
}

BOOL check_slots(uint64_t a1)
{
  BOOL v2;
  _DWORD *v3;
  unsigned int i;
  uint64_t v5;
  int v6;

  v6 = 0;
  v5 = 0;
  for (i = 0; i < *(_DWORD *)(a1 + 208); ++i)
  {
    v3 = (_DWORD *)(*(_QWORD *)(a1 + 280) + 8 * i);
    if ((check_slot(a1, (uint64_t)v3) & 1) == 0)
      return 0;
    if ((*v3 & 3) == 1)
    {
      ++v6;
      v5 += *(unsigned __int16 *)(*(_QWORD *)(a1 + 280) + 8 * i + 4);
    }
  }
  v2 = 0;
  if (v6 == *(_DWORD *)(a1 + 16684))
    return v5 == *(_QWORD *)(a1 + 16696);
  return v2;
}

uint64_t check_metadata(uint64_t a1)
{
  unsigned int i;
  char v4;

  for (i = 0; i < *(_DWORD *)(a1 + 16688); ++i)
  {
    if (!check_md(a1, (unsigned int *)(*(_QWORD *)(a1 + 288) + ((unint64_t)i << 8))))
    {
      v4 = 0;
      return v4 & 1;
    }
  }
  v4 = 1;
  return v4 & 1;
}

BOOL check_configuration(_DWORD *a1)
{
  BOOL v2;

  v2 = 0;
  if (a1[53])
  {
    v2 = 0;
    if (a1[53] <= a1[54] / 2u)
    {
      v2 = 0;
      if (a1[54] <= a1[52])
        return a1[55] != 0;
    }
  }
  return v2;
}

uint64_t check_slot(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  char v6;

  if ((*(_DWORD *)a2 & 3) != 0)
  {
    v4 = 0;
    if ((*(_DWORD *)a2 & 3) != 3)
    {
      v4 = 0;
      if (*(_DWORD *)(a1 + 16688) > *(_DWORD *)a2 >> 2)
      {
        v4 = 0;
        if (*(unsigned __int16 *)(a2 + 4) <= vm_page_size)
        {
          v3 = *(unsigned __int16 *)(a2 + 4);
          v4 = 0;
          if (v3 == block_size(v3))
          {
            v4 = 0;
            if (*(unsigned __int16 *)(a2 + 6) <= vm_page_size)
            {
              v4 = 0;
              if (!(*(unsigned __int16 *)(a2 + 6) % 0x10uLL))
                v4 = *(unsigned __int16 *)(a2 + 6) + (unint64_t)*(unsigned __int16 *)(a2 + 4) <= vm_page_size;
            }
          }
        }
      }
    }
    v6 = v4;
  }
  else
  {
    v6 = 1;
  }
  return v6 & 1;
}

BOOL check_md(uint64_t a1, unsigned int *a2)
{
  BOOL v3;

  v3 = 0;
  if (*a2 < *(_DWORD *)(a1 + 208))
  {
    v3 = 0;
    if (*(_DWORD *)(*(_QWORD *)(a1 + 280) + 8 * *a2) >> 2 == ((uint64_t)a2 - *(_QWORD *)(a1 + 288)) / 256)
      return *((unsigned __int16 *)a2 + 10) + (unint64_t)*((unsigned __int16 *)a2 + 19) <= 0xD8;
  }
  return v3;
}

uint64_t deallocate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v16;

  v13 = lookup_slot((_QWORD *)a1, a2);
  if (v13 >= 0)
  {
    malloc_report(3, (uint64_t)"*** FATAL ERROR - ProbGuard: invalid pointer passed to free.\n", v2, v3, v4, v5, v6, v7, v9);
    qword_A4008 = (uint64_t)"FATAL ERROR - ProbGuard: invalid pointer passed to free";
    qword_A4038 = a2;
    __break(1u);
    JUMPOUT(0x37AB4);
  }
  v12 = *(_DWORD *)(*(_QWORD *)(a1 + 280) + 8 * v13) >> 2;
  *(_DWORD *)(*(_QWORD *)(a1 + 280) + 8 * v13) = *(_DWORD *)(*(_QWORD *)(a1 + 280)
                                                                           + 8 * v13) & 0xFFFFFFFC | 2;
  v16 = *(_QWORD *)(a1 + 288) + ((unint64_t)v12 << 8);
  *(_QWORD *)(v16 + 22) = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) - 8);
  *(_QWORD *)(v16 + 30) = mach_absolute_time();
  if (*(unsigned __int16 *)(v16 + 20) > 0x6Bu)
    v10 = 108;
  else
    v10 = *(unsigned __int16 *)(v16 + 20);
  *(_WORD *)(v16 + 20) = v10;
  *(_WORD *)(v16 + 38) = trace_collect(v16 + v10 + 40, 216 - v10);
  --*(_DWORD *)(a1 + 16684);
  *(_QWORD *)(a1 + 16696) -= *(unsigned __int16 *)(*(_QWORD *)(a1 + 280) + 8 * v13 + 4);
  v11 = (void *)page_addr(a1, v13);
  mark_inaccessible(v11);
  return debug_zone(a1, (uint64_t)"freed", a2);
}

uint64_t mark_inaccessible(void *a1)
{
  if (madvise(a1, vm_page_size, 7))
  {
    __break(1u);
    JUMPOUT(0x37D44);
  }
  return my_vm_protect((mach_vm_address_t)a1, vm_page_size, 0);
}

vm_size_t reallocate(uint64_t a1, unint64_t a2, vm_size_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  vm_size_t v16;
  unint64_t v17;

  v15 = 0;
  if (*(_QWORD *)(a1 + 248) <= a2)
    v15 = a2 < *(_QWORD *)(a1 + 256);
  v14 = 1;
  if (!v15)
    v14 = a4 != 0;
  if (!v14)
  {
    __break(1u);
    JUMPOUT(0x37E1CLL);
  }
  if (v15)
    v17 = lookup_size((_QWORD *)a1, a2);
  else
    v17 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 200) + 16))();
  if (!v17)
  {
    malloc_report(3, (uint64_t)"*** FATAL ERROR - ProbGuard: invalid pointer passed to realloc.\n", v4, v5, v6, v7, v8, v9, v13);
    qword_A4008 = (uint64_t)"FATAL ERROR - ProbGuard: invalid pointer passed to realloc";
    qword_A4038 = a2;
    __break(1u);
    JUMPOUT(0x37EB8);
  }
  if (!a4 || *(_DWORD *)(a1 + 16684) == *(_DWORD *)(a1 + 212))
  {
    v16 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 200) + 24))();
    if (!v16)
      return 0;
  }
  else
  {
    v16 = allocate(a1, a3, 0x10uLL, v10, v11);
    if (!v16)
    {
      __break(1u);
      JUMPOUT(0x37F1CLL);
    }
  }
  if (v17 >= a3)
    _platform_memmove(v16, a2, a3);
  else
    _platform_memmove(v16, a2, v17);
  if (v15)
    deallocate(a1, a2);
  else
    (*(void (**)(void))(*(_QWORD *)(a1 + 200) + 48))();
  return v16;
}

uint64_t pgm_enumerator(unsigned int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD, uint64_t, uint64_t, vm_size_t *))
{
  vm_size_t v7;
  uint64_t v8;
  vm_size_t v9;
  _QWORD v10[2];
  vm_size_t v11;
  unsigned int i;
  _BYTE *v13;
  unsigned int zone;
  int v15;
  int v16;
  void (*v17)(_QWORD, uint64_t, uint64_t, vm_size_t *);
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  _BYTE v24[16720];

  v22 = a1;
  v21 = a2;
  v20 = a3;
  v19 = a4;
  v18 = a5;
  v17 = a6;
  v16 = a3 & 1;
  v15 = a3 & 2;
  if ((a3 & 1) != 0 || v15)
  {
    bzero(v24, 0x200uLL);
    zone = read_zone(v22, v19, v18, v24, 2);
    if (zone)
    {
      return zone;
    }
    else
    {
      v13 = v24;
      for (i = 0; i < *((_DWORD *)v13 + 52); ++i)
      {
        if ((*(_DWORD *)(*((_QWORD *)v13 + 35) + 8 * i) & 3) == 1)
        {
          if (v15)
          {
            v11 = 0;
            v11 = page_addr((uint64_t)v13, i);
            v10[0] = v11;
            v10[1] = vm_page_size;
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD *, uint64_t))v17)(v22, v21, 2, v10, 1);
          }
          if (v16)
          {
            v9 = 0;
            v9 = block_addr((uint64_t)v13, i);
            v8 = 0;
            v7 = v9;
            v8 = *(unsigned __int16 *)(*((_QWORD *)v13 + 35) + 8 * i + 4);
            v17(v22, v21, 1, &v7);
          }
        }
      }
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t pgm_good_size(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 96) + 8))(*(_QWORD *)(a1 + 200), a2);
}

uint64_t pgm_print(uint64_t a1, int a2)
{
  return print_zone(a1, a2, (void (*)(const char *, ...))malloc_report_simple);
}

uint64_t pgm_force_lock(uint64_t a1)
{
  return lock_0(a1);
}

void pgm_force_unlock(os_unfair_lock_s *a1)
{
  unlock_0(a1);
}

__n128 pgm_statistics(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;
  __n128 v4;

  LODWORD(v3) = *(_DWORD *)(a1 + 16684);
  *((_QWORD *)&v3 + 1) = *(_QWORD *)(a1 + 16696);
  v4.n128_u64[0] = *(_QWORD *)(a1 + 16704);
  v4.n128_u64[1] = v3 * vm_page_size;
  *a2 = v3;
  result = v4;
  a2[1] = v4;
  return result;
}

BOOL pgm_zone_locked(os_unfair_lock_s *a1)
{
  _BOOL4 v2;

  v2 = trylock_0(a1);
  if (v2)
    unlock_0(a1);
  return !v2;
}

uint64_t pgm_reinit_lock(uint64_t a1)
{
  return init_lock_0(a1);
}

uint64_t pgm_print_task(unsigned int a1, unsigned int a2, const void *a3, uint64_t a4, uint64_t (*a5)(const char *, ...))
{
  _BYTE v11[16720];

  bzero(v11, 0x200uLL);
  if (read_zone(a1, (uint64_t)a3, a4, v11, 2))
    return a5("Failed to read ProbGuard zone at %p\n", a3);
  else
    return print_zone((uint64_t)v11, a2 >= 2, (void (*)(const char *, ...))a5);
}

uint64_t pgm_statistics_task(unsigned int a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unsigned int zone;
  _BYTE v11[16720];

  bzero(v11, 0x200uLL);
  zone = read_zone(a1, a2, a3, v11, 1);
  if (zone)
  {
    return zone;
  }
  else
  {
    pgm_statistics((uint64_t)v11, a4);
    return 0;
  }
}

uint64_t read_zone(unsigned int a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  void *__src;
  int v10;
  void *__dst;
  uint64_t (*v12)(unsigned int, uint64_t, uint64_t, void **);
  uint64_t v13;
  unsigned int v14;

  v14 = a1;
  v13 = a2;
  __dst = a4;
  v10 = a5;
  v12 = (uint64_t (*)(unsigned int, uint64_t, uint64_t, void **))reader_or_in_memory_fallback_3(a3, a1);
  __src = 0;
  v8 = v12(v14, v13, 16720, &__src);
  if (v8)
  {
    return v8;
  }
  else
  {
    if (check_zone((uint64_t)__src))
    {
      memcpy(__dst, __src, 0x4150uLL);
      if ((v10 & 2) != 0)
      {
        v7 = v12(v14, *((_QWORD *)__dst + 35), 8 * *((unsigned int *)__dst + 52), (void **)__dst + 35);
        if (v7)
          return v7;
        if (!check_slots((uint64_t)__dst))
          return 5;
      }
      if ((v10 & 4) != 0)
      {
        v6 = v12(v14, *((_QWORD *)__dst + 36), (unint64_t)*((unsigned int *)__dst + 54) << 8, (void **)__dst + 36);
        if (v6)
          return v6;
        if ((check_metadata((uint64_t)__dst) & 1) == 0)
          return 5;
      }
      return 0;
    }
    return 5;
  }
}

vm_size_t block_addr(uint64_t a1, unsigned int a2)
{
  return page_addr(a1, a2) + *(unsigned __int16 *)(*(_QWORD *)(a1 + 280) + 8 * a2 + 6);
}

uint64_t (*reader_or_in_memory_fallback_3(uint64_t a1, unsigned int a2))(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v3;

  if (a1)
    return (uint64_t (*)(unsigned int, uint64_t, uint64_t, _QWORD *))a1;
  v3 = 1;
  if (a2)
    v3 = mach_task_is_self(a2) != 0;
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x388A4);
  }
  return _malloc_default_reader_3;
}

uint64_t _malloc_default_reader_3(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v5;

  v5 = 1;
  if (a1)
    v5 = mach_task_is_self(a1) != 0;
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x38944);
  }
  *a4 = a2;
  return 0;
}

uint64_t print_zone(uint64_t a1, int a2, void (*a3)(const char *, ...))
{
  __n128 v3;
  uint64_t result;
  const void *v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  const char *v8;
  int v9;
  unsigned int i;
  _OWORD v11[2];
  void (*v12)(const char *, ...);
  int v13;
  uint64_t v14;

  v14 = a1;
  v13 = a2;
  v12 = a3;
  memset(v11, 0, sizeof(v11));
  v3 = pgm_statistics(a1, v11);
  v12("ProbGuard zone: slots: %u, slots in use: %u, size in use: %llu, max size in use: %llu, allocated size: %llu\n", v3);
  v12("Quarantine: size: %llu, address range: [%p - %p)\n", *(_QWORD *)(v14 + 240), *(const void **)(v14 + 248), *(const void **)(v14 + 256));
  result = ((uint64_t (*)(const char *))v12)("Slots (#, state, offset, size, block address):\n");
  for (i = 0; i < *(_DWORD *)(v14 + 208); ++i)
  {
    v9 = *(_DWORD *)(*(_QWORD *)(v14 + 280) + 8 * i) & 3;
    if (v9 == 1 || v13)
    {
      v8 = slot_state_labels[v9];
      v7 = *(_WORD *)(*(_QWORD *)(v14 + 280) + 8 * i + 6);
      v6 = *(_WORD *)(*(_QWORD *)(v14 + 280) + 8 * i + 4);
      v5 = (const void *)block_addr(v14, i);
      result = ((uint64_t (*)(const char *, ...))v12)("%4u, %9s, %4u, %4u, %p\n", i, v8, v7, v6, v5);
    }
  }
  return result;
}

BOOL trylock_0(os_unfair_lock_s *a1)
{
  return os_unfair_lock_trylock(a1 + 4170);
}

uint64_t env_uint_0(const char *a1, unsigned int a2)
{
  const char *__str;

  __str = env_var_0(a1);
  if (__str)
    return strtoul(__str, 0, 0);
  else
    return a2;
}

uint64_t choose_memory_budget_in_kb()
{
  return 2048;
}

uint64_t compute_max_allocations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  HIDWORD(v9) = ((a1 << 10) - ((vm_page_size + 16719) & -(uint64_t)vm_page_size))
              / (unint64_t)((double)vm_page_size + (double)0x50uLL * 20.0 + 80.0 + 768.0);
  if (a1 << 10 < ((vm_page_size + 16719) & -(uint64_t)vm_page_size) || !HIDWORD(v9))
  {
    malloc_report(3, (uint64_t)"*** FATAL ERROR - ProbGuard: memory budget too small.\n", a3, a4, a5, a6, a7, a8, v9);
    qword_A4008 = (uint64_t)"FATAL ERROR - ProbGuard: memory budget too small";
    __break(1u);
    JUMPOUT(0x38D20);
  }
  return HIDWORD(v9);
}

uint64_t choose_sample_rate()
{
  return rand_uniform(0x1194u) + 500;
}

mach_vm_address_t my_vm_map_common(mach_vm_address_t a1, uint64_t a2, vm_prot_t cur_protection, int a4, int a5)
{
  mach_vm_address_t address;
  mach_port_t v7;
  int v8;
  int v9;
  vm_prot_t v10;
  uint64_t v11;
  mach_vm_address_t v12;

  v12 = a1;
  v11 = a2;
  v10 = cur_protection;
  v9 = a4;
  v8 = a5;
  v7 = mach_task_self_;
  address = a1;
  if (mach_vm_map(mach_task_self_, &address, (a2 + vm_page_size - 1) & ~(vm_page_size - 1), 0, a4 | (a5 << 24), 0, 0, 0, cur_protection, 3, 1u))
  {
    __break(1u);
    JUMPOUT(0x38EACLL);
  }
  return address;
}

uint64_t memory_reader_adapter_0(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;

  if (num_read_memory_0 >= 3)
  {
    __break(1u);
    JUMPOUT(0x38F04);
  }
  v6 = g_crm_reader_0(a1, a2, a3);
  *a4 = v6;
  if (v6)
  {
    v4 = num_read_memory_0++;
    read_memory_0[v4] = v6;
    return 0;
  }
  else
  {
    return 5;
  }
}

uint64_t is_pgm_zone(uint64_t a1, unsigned int a2, uint64_t (*a3)(_QWORD, uint64_t, uint64_t, uint64_t *))
{
  unsigned int zone_type;
  int v6;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t, uint64_t *);
  unsigned int v8;
  uint64_t v9;

  v9 = a1;
  v8 = a2;
  v7 = a3;
  v6 = 0;
  zone_type = get_zone_type(a2, a3, a1, &v6);
  if (zone_type)
  {
    return zone_type;
  }
  else if (v6 == 2)
  {
    return 0;
  }
  else
  {
    return 257;
  }
}

uint64_t diagnose_fault_from_external_process(unint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unsigned int zone;
  _BYTE v13[16720];

  bzero(v13, 0x200uLL);
  zone = read_zone(a3, a4, a5, v13, 6);
  if (zone)
    return zone;
  else
    return diagnose_page_fault((uint64_t)v13, a1, a2);
}

void free_read_memory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int i;

  for (i = 0; i < num_read_memory_0; ++i)
    _free((void *)read_memory_0[i], a2, a3, a4, a5, a6, a7, a8);
  num_read_memory_0 = 0;
}

uint64_t diagnose_page_fault(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  BOOL v11;
  int v12;
  uint64_t v13;

  v11 = 0;
  if (*(_QWORD *)(a1 + 248) <= a2)
    v11 = a2 < *(_QWORD *)(a1 + 256);
  if (v11)
  {
    v13 = lookup_slot((_QWORD *)a1, a2);
    if (v13 >= *(_DWORD *)(a1 + 208))
    {
      __break(1u);
      JUMPOUT(0x39250);
    }
    if (*(_DWORD *)(a1 + 216) <= *(_DWORD *)(*(_QWORD *)(a1 + 280) + 8 * v13) >> 2)
    {
      __break(1u);
      JUMPOUT(0x39290);
    }
    v12 = *(_DWORD *)(*(_QWORD *)(a1 + 280) + 8 * v13) & 3;
    if (v12 != 1 || (HIDWORD(v13) & 0x7FFFFFFF) == 3)
    {
      if (v12)
      {
        if (v12 == 1)
        {
          if ((HIDWORD(v13) & 0x7FFFFFFF) != 3)
          {
            __break(1u);
            JUMPOUT(0x39394);
          }
          *a3 = "out-of-bounds";
          a3[1] = "high";
        }
        else if ((HIDWORD(v13) & 0x7FFFFFFFu) > 1)
        {
          v10 = 1;
          if ((HIDWORD(v13) & 0x7FFFFFFF) != 2)
            v10 = (HIDWORD(v13) & 0x7FFFFFFF) == 3;
          if (!v10)
          {
            __break(1u);
            JUMPOUT(0x39464);
          }
          *a3 = "OOB + UAF";
          a3[1] = "low";
        }
        else
        {
          *a3 = "use-after-free";
          a3[1] = "high";
        }
      }
      else
      {
        *a3 = "long-range OOB";
        a3[1] = "low";
      }
      a3[2] = a2;
      fill_in_report(a1, v13, (uint64_t)a3);
      return 0;
    }
    else
    {
      malloc_report(547, (uint64_t)"Failed to generate PGM report for fault address %p: slot is unexpectedly allocated with bounds %d\n", v3, v4, v5, v6, v7, v8, a2);
      return 5;
    }
  }
  else
  {
    return 257;
  }
}

uint64_t fill_in_report(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 280) + 8 * a2;
  v4 = *(_QWORD *)(a1 + 288) + ((unint64_t)(*(_DWORD *)v5 >> 2) << 8);
  result = block_addr(a1, a2);
  *(_QWORD *)(a3 + 24) = result;
  *(_QWORD *)(a3 + 32) = *(unsigned __int16 *)(v5 + 4);
  *(_QWORD *)(a3 + 40) = slot_state_labels[*(_DWORD *)v5 & 3];
  *(_DWORD *)(a3 + 48) = 0;
  if (*(_DWORD *)v4 == a2)
  {
    ++*(_DWORD *)(a3 + 48);
    result = fill_in_trace(v4 + 4, v4 + 40, a3 + 56);
    if ((*(_DWORD *)v5 & 3) == 2)
    {
      ++*(_DWORD *)(a3 + 48);
      return fill_in_trace(v4 + 22, v4 + 40 + *(unsigned __int16 *)(v4 + 20), a3 + 592);
    }
  }
  return result;
}

uint64_t fill_in_trace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1 + 8);
  result = trace_decode(a2, *(unsigned __int16 *)(a1 + 16), a3 + 24, 0x40u);
  *(_DWORD *)(a3 + 16) = result;
  return result;
}

void nanov2_init(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  char *v28;
  _BYTE v31[256];

  v25 = (_BYTE *)_simple_getenv(a1, "MallocNanoMadvisePolicy");
  v21 = "MallocNanoMadvisePolicy";
  if (!v25)
  {
    v25 = malloc_common_value_for_key(a3, (uint64_t)"nanov2_madvise_policy");
    if (v25)
      v21 = "nanov2_madvise_policy";
  }
  nanov2_set_madvise_policy((uint64_t)v21, (uint64_t)v25);
  v22 = "MallocNanoSingleArena";
  v26 = (char *)_simple_getenv(a1, "MallocNanoSingleArena");
  if (!v26)
  {
    v26 = malloc_common_value_for_key_copy(a3, (uint64_t)"nanov2_single_arena", v31, 0x100uLL);
    if (v26)
      v22 = "nanov2_single_arena";
  }
  nanov2_set_single_arena_size_classes((uint64_t)v22, v26, v3, v4, v5, v6, v7, v8);
  v23 = "MallocNanoScanPolicy";
  v27 = (char *)_simple_getenv(a1, "MallocNanoScanPolicy");
  if (!v27)
  {
    v27 = malloc_common_value_for_key_copy(a3, (uint64_t)"nanov2_scan_policy", v31, 0x100uLL);
    if (v27)
      v23 = "nanov2_scan_policy";
  }
  nanov2_set_block_scan_policy((uint64_t)v23, v27, v9, v10, v11, v12, v13, v14);
  v24 = "MallocNanoSizeClassBlocks";
  v28 = (char *)_simple_getenv(a1, "MallocNanoSizeClassBlocks");
  if (!v28)
  {
    v28 = malloc_common_value_for_key_copy(a3, (uint64_t)"nanov2_size_class_blocks", v31, 0x100uLL);
    if (v28)
      v24 = "nanov2_size_class_blocks";
  }
  if (v28)
    nanov2_set_blocks_by_size_class((uint64_t)v24, v28, v15, v16, v17, v18, v19, v20);
}

void nanov2_set_madvise_policy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v8 = 0;
  if (a2)
  {
    if (_platform_strncmp(a2, "immediate", 9))
    {
      if (_platform_strncmp(a2, "warning", 7))
      {
        if (_platform_strncmp(a2, "critical", 8))
          malloc_report(3, (uint64_t)"%s value (%s) invalid - ignored.\n", v2, v3, v4, v5, v6, v7, a1);
        else
          v8 = 2;
      }
      else
      {
        v8 = 1;
      }
    }
    else
    {
      v8 = 0;
    }
  }
  nanov2_madvise_policy = v8;
}

void nanov2_set_single_arena_size_classes(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  _QWORD v10[2];
  __int16 v11;
  char *v12;
  uint64_t v13;

  v13 = a1;
  v12 = a2;
  v11 = 0;
  if (a2)
  {
    v10[1] = v12;
    v10[0] = 0;
    v9 = 0;
    while (*v12)
    {
      v8 = malloc_common_convert_to_long(v12, v10);
      if ((char *)v10[0] == v12)
      {
        v9 = 1;
        break;
      }
      if (*(_BYTE *)v10[0] && *(_BYTE *)v10[0] != 58)
      {
        v9 = 1;
        break;
      }
      if (v8 > 256 || v8 < 16 || v8 % 16)
      {
        v9 = 1;
        break;
      }
      v11 |= 1 << (v8 / 16 - 1);
      if (!*(_BYTE *)v10[0])
        break;
      v12 = (char *)(v10[0] + 1);
    }
    if (v9)
    {
      malloc_report(3, (uint64_t)"%s value (%s) invalid - ignored.\n", a3, a4, a5, a6, a7, a8, v13);
      v11 = 0;
    }
  }
  word_9C0E0 = v11;
}

void nanov2_set_block_scan_policy(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  _BOOL4 v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  uint64_t v22;

  v22 = a1;
  v21 = a2;
  v20 = 1;
  v19 = 20;
  v18 = 80;
  v17 = 10;
  v16 = 0;
  v15 = 0;
  v14 = 0;
  v13 = 0;
  v12 = 0;
  if (a2)
  {
    if (_platform_strcmp(v21, nanov2_set_block_scan_policy_first_fit_key))
    {
      while (1)
      {
        v8 = 0;
        if (!v15)
        {
          v8 = 0;
          if (v21)
            v8 = *v21 != 0;
        }
        if (!v8)
          break;
        if (_platform_strncmp(v21, nanov2_set_block_scan_policy_min_key, 3) || v14)
        {
          if (_platform_strncmp(v21, nanov2_set_block_scan_policy_max_key, 3) || v13)
          {
            if (_platform_strncmp(v21, nanov2_set_block_scan_policy_lim_key, 3) || v12)
            {
              v15 = 1;
            }
            else
            {
              v12 = 1;
              v21 += 3;
              v9 = malloc_common_convert_to_long(v21, &v16);
              if (v21 == v16 || v9 < 0)
              {
                v15 = 1;
              }
              else
              {
                v17 = v9;
                v21 = v16;
              }
            }
          }
          else
          {
            v13 = 1;
            v21 += 3;
            v10 = malloc_common_convert_to_long(v21, &v16);
            if (v21 == v16 || v10 > 0x64)
            {
              v15 = 1;
            }
            else
            {
              v18 = v10;
              v21 = v16;
            }
          }
        }
        else
        {
          v14 = 1;
          v21 += 3;
          v11 = malloc_common_convert_to_long(v21, &v16);
          if (v21 == v16 || v11 > 0x64)
          {
            v15 = 1;
          }
          else
          {
            v19 = v11;
            v21 = v16;
          }
        }
        if (*v21)
        {
          if (*v21 == 58)
            ++v21;
          else
            v15 = 1;
        }
      }
      if (!v15)
        v15 = v19 > v18;
    }
    else
    {
      v20 = 0;
    }
  }
  if (v15)
  {
    malloc_report(3, (uint64_t)"%s value (%s) invalid - ignored.\n", a3, a4, a5, a6, a7, a8, v22);
  }
  else
  {
    nanov2_policy_config = v20;
    dword_9C0D4 = v19;
    dword_9C0D8 = v18;
    dword_9C0DC = v17;
  }
}

void nanov2_set_blocks_by_size_class(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int i;
  char *v11;
  int v12;
  char *v13;
  uint64_t v14;
  _DWORD v15[16];

  v14 = a1;
  v13 = a2;
  v12 = 0;
  v11 = 0;
  for (i = 0; i < 16; ++i)
  {
    v8 = malloc_common_convert_to_long(v13, &v11);
    v9 = 0;
    if (i != 15)
      v9 = 44;
    if (v11 == v13 || *v11 != v9 || v8 > 64)
    {
      malloc_report(3, (uint64_t)"%s value invalid: [%s] - ignored.\n", a3, a4, a5, a6, a7, a8, v14);
      return;
    }
    v15[i] = v8;
    v12 += v8;
    v13 = v11 + 1;
  }
  if (v12 == 64)
    _platform_memmove(block_units_by_size_class, v15, 64);
  else
    malloc_report(3, (uint64_t)"%s value invalid - values must sum to %d, not %d - ignored.\n", a3, a4, a5, a6, a7, a8, v14);
}

uint64_t nanov2_configure()
{
  uint64_t result;

  if (nanov2_config_predicate != -1)
    return _os_once(&nanov2_config_predicate, 0, nanov2_configure_once);
  return result;
}

void nanov2_configure_once()
{
  uint64_t v0;
  int m;
  int v2;
  int k;
  int v4;
  int j;
  int v6;
  int i;
  int v8;

  v8 = 0;
  for (i = 0; i < 16; ++i)
    v8 += block_units_by_size_class[i] << 6;
  if (v8 != 4096)
  {
    __break(1u);
    JUMPOUT(0x3A338);
  }
  first_block_offset_by_size_class[0] = 1;
  v6 = block_units_by_size_class[0] << 6;
  last_block_offset_by_size_class[0] = (block_units_by_size_class[0] << 6) - 1;
  for (j = 1; j < 16; ++j)
  {
    first_block_offset_by_size_class[j] = v6;
    v6 += block_units_by_size_class[j] << 6;
    last_block_offset_by_size_class[j] = v6 - 1;
  }
  if (v6 != 4096)
  {
    __break(1u);
    JUMPOUT(0x3A414);
  }
  v4 = 0;
  for (k = 0; k < 16; ++k)
  {
    v2 = block_units_by_size_class[k];
    for (m = 0; m < v2; ++m)
    {
      v0 = v4++;
      ptr_offset_to_size_class[v0] = k;
    }
  }
  if (v4 != 64)
  {
    __break(1u);
    JUMPOUT(0x3A4E8);
  }
}

uint64_t nanov2_size(_QWORD *a1, unint64_t a2)
{
  BOOL v4;
  unsigned int v5;
  int v6;
  uint64_t v7;

  if (a2 >> 29 == 24)
  {
    if ((a2 & 0xF) != 0)
    {
      v7 = 0;
    }
    else if (a2 >= a1[3590] && a2 <= a1[3591])
    {
      v6 = ptr_offset_to_size_class[((a2 >> 14) & 0xFFF ^ a1[3585]) >> 6];
      v5 = *(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                     + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF));
      v4 = 0;
      if ((v5 & 0x7FF) != 0)
      {
        v4 = 0;
        if ((*(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                        + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF)) & 0x7FF) != 0x7FE)
        {
          v4 = 0;
          if ((*(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                          + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF)) & 0x7FF) != 0x7FF)
            v4 = (*(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                            + 4
                            * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF)) & 0x7FF) != 2042;
        }
      }
      if (v4
        && ((*(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                       + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF)) & 0x7FF) == 0x7FC
         || ((v5 >> 11) & 0x3FF) != slots_by_size_class[v6] - 1))
      {
        if ((a2 & 0x3FFF) % (16 * (v6 + 1)))
        {
          v7 = 0;
        }
        else if ((*(_QWORD *)a2 ^ a1[3587]) == a2)
        {
          v7 = 0;
        }
        else
        {
          v7 = 16 * (v6 + 1);
        }
      }
      else
      {
        v7 = 0;
      }
    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    v7 = 0;
  }
  if (v7)
    return v7;
  else
    return (*(uint64_t (**)(_QWORD, unint64_t))(a1[3588] + 16))(a1[3588], a2);
}

_QWORD *nanov2_malloc(uint64_t a1, unint64_t a2)
{
  int v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  __int16 v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v15;
  char v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int **v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  char v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _BOOL4 v41;
  BOOL v42;
  unsigned int v43;
  unsigned int v44;
  _BOOL4 v45;
  unsigned int v46;
  _QWORD *v47;
  _BOOL4 v48;
  unsigned int v49;
  int v50;
  _QWORD *v51;
  int v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  char *v57;
  unsigned int **v58;
  unsigned int v59;
  unsigned int *v60;
  uint64_t v61;
  _QWORD *v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  unsigned int *v70;
  int v71;
  unsigned int v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  unsigned int *v77;
  int v78;
  unsigned int v79;
  unint64_t v80;
  int v81;
  unsigned int v82;
  unint64_t v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;

  v11 = _nano_common_good_size(a2);
  if (v11 > 0x100)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)(a1 + 28704) + 24))(*(_QWORD *)(a1 + 28704), a2);
  v29 = a1;
  v28 = v11;
  v27 = 0;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v23 = 0;
  v31 = v11;
  if (v11 % 0x10)
    v10 = v31 / 0x10 + 1;
  else
    v10 = v31 / 0x10;
  v23 = v10 - 1;
  v22 = 0;
  if ((nano_common_max_magazines_is_ncpu & 1) != 0)
  {
    v35 = _malloc_cpu_number() & 0x3F;
  }
  else
  {
    v34 = 0;
    if (_os_cpu_number_override == -1)
      v35 = ((_malloc_cpu_number() >> v34) % nano_common_max_magazines) & 0x3F;
    else
      v35 = ((_os_cpu_number_override >> v34) % nano_common_max_magazines) & 0x3F;
  }
  v22 = v35;
  v21 = (unsigned int **)(v29 + 0x4000 + ((unint64_t)v23 << 9) + 8 * (int)v35);
  v20 = 0;
  v19 = 0;
  v18 = *v21;
  v19 = v18;
  v17 = v18;
  v20 = v18;
  v16 = 0;
  v15 = 0;
  if (!v18)
    return nanov2_allocate_outlined(v29, v21, v28, v23, v22, v24, v15, v27 & 1, v26 & 1, v25);
  v61 = v29;
  v60 = v20;
  v59 = v23;
  v58 = &v24;
  v57 = &v16;
  v56 = 0;
  v55 = 0;
  v54 = *v20;
  v55 = v54;
  v56 = v54;
  v53 = 0;
  while (1)
  {
    v63 = v56;
    v9 = 0;
    if ((v56 & 0x80000000) != 0)
      v9 = (v63 & 0x7FF) != 2044;
    if (!v9)
    {
      v62 = 0;
      goto LABEL_47;
    }
    v52 = 0;
    v51 = 0;
    v50 = 0;
    v49 = (((((v56 >> 11) & 0x3FF) - 1) & 0x3FF) << 11) & 0x1FFFFF | (((((v56 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFFFFF | 0x80000000;
    v48 = ((v56 >> 11) & 0x3FF) == 0;
    if ((v56 & 0x7FF) == 0x7FB || (v56 & 0x7FF) == 0x7FD)
    {
      v2 = v48 ? 2044 : 2043;
      v49 = v49 & 0xFFFFF800 | v2;
      v52 = slots_by_size_class[v59] - ((v56 >> 11) & 0x3FF) - 1;
    }
    else
    {
      v50 = 1;
      if (!v53)
      {
        v76 = v61;
        v75 = v60;
        v84 = v60;
        v74 = (unint64_t)v60 & 0xFFFFFFFFFFFFC000;
        v77 = v60;
        v73 = (unint64_t)v60 & 0xFFFFFFFFFC000000;
        v72 = (uint64_t)((uint64_t)v60 - ((unint64_t)v60 & 0xFFFFFFFFFFFFC000)) / 4;
        v86 = v72;
        v71 = ((unsigned __int16)((_WORD)v86 << 6) | (unsigned __int16)(v86 >> 6)) & 0xFFF;
        v53 = ((unint64_t)v60 & 0xFFFFFFFFFC000000)
            + ((unint64_t)(((unsigned __int16)((_WORD)v86 << 6) | (unsigned __int16)(v86 >> 6)) & 0xFFF) << 14);
      }
      v52 = (v56 & 0x7FF) - 1;
      v83 = v53;
      v82 = v59;
      v81 = v52;
      v88 = v59;
      v51 = (_QWORD *)(v53 + (int)(16 * (v59 + 1) * v52));
      v47 = v51;
      v8 = v48 ? 2044 : v47[1];
      v49 = v49 & 0xFFFFF800 | v8 & 0x7FF;
    }
    v46 = v56;
    v45 = 0;
    v3 = v60;
    v43 = v49;
    v44 = v49;
    v4 = v56;
    v5 = v49;
    do
      v6 = __ldaxr(v3);
    while (v6 == v4 && __stlxr(v5, v3));
    if (v6 != v4)
      v46 = v6;
    v42 = v6 == v4;
    v45 = v6 == v4;
    v56 = v46;
    v41 = v45;
    if (v6 == v4)
      break;
    if ((v56 & 0x7FF) == 0x7FD || (v56 & 0x7FF) == 0x7FE || (v56 & 0x7FF) == 0x7FF)
    {
      *v58 = v60;
      v62 = 0;
      goto LABEL_47;
    }
  }
  if (!v51)
  {
    if (!v53)
    {
      v69 = v61;
      v68 = v60;
      v85 = v60;
      v67 = (unint64_t)v60 & 0xFFFFFFFFFFFFC000;
      v70 = v60;
      v66 = (unint64_t)v60 & 0xFFFFFFFFFC000000;
      v65 = (uint64_t)((uint64_t)v60 - ((unint64_t)v60 & 0xFFFFFFFFFFFFC000)) / 4;
      v87 = v65;
      v64 = ((unsigned __int16)((_WORD)v87 << 6) | (unsigned __int16)(v87 >> 6)) & 0xFFF;
      v53 = ((unint64_t)v60 & 0xFFFFFFFFFC000000)
          + ((unint64_t)(((unsigned __int16)((_WORD)v87 << 6) | (unsigned __int16)(v87 >> 6)) & 0xFFF) << 14);
    }
    v80 = v53;
    v79 = v59;
    v78 = v52;
    v89 = v59;
    v51 = (_QWORD *)(v53 + (int)(16 * (v59 + 1) * v52));
  }
  if (v50)
  {
    v40 = v51;
    v39 = 0;
    v38 = 0;
    v37 = *v51;
    v38 = v37;
    v36 = v37;
    v39 = v37;
    if ((_QWORD *)(v37 ^ *(_QWORD *)(v61 + 28696)) != v51)
      *v57 = 1;
  }
  v62 = v51;
LABEL_47:
  v15 = (uint64_t)v62;
  if (!v62 || (v16 & 1) != 0)
    return nanov2_allocate_outlined(v29, v21, v28, v23, v22, v24, v15, v27 & 1, v26 & 1, v25);
  if ((v27 & 1) != 0 && malloc_zero_policy)
  {
    v33 = v62;
    v32 = v28;
    _platform_bzero(v62, v28);
  }
  else
  {
    *v62 = 0;
    *(_QWORD *)(v15 + 8) = 0;
  }
  return (_QWORD *)v15;
}

unint64_t _nano_common_good_size(unint64_t a1)
{
  if (a1 > 0x10)
    return 16 * ((a1 + 15) >> 4);
  else
    return 16;
}

_QWORD *nanov2_malloc_type(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  __int16 v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v17;
  char v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int **v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  uint64_t v27;
  char v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _BOOL4 v43;
  BOOL v44;
  unsigned int v45;
  unsigned int v46;
  _BOOL4 v47;
  unsigned int v48;
  _QWORD *v49;
  _BOOL4 v50;
  unsigned int v51;
  int v52;
  _QWORD *v53;
  int v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  char *v59;
  unsigned int **v60;
  unsigned int v61;
  unsigned int *v62;
  uint64_t v63;
  _QWORD *v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int *v77;
  uint64_t v78;
  unsigned int *v79;
  int v80;
  unsigned int v81;
  unint64_t v82;
  int v83;
  unsigned int v84;
  unint64_t v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;

  v12 = _nano_common_good_size(a2);
  if (v12 > 0x100)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)(a1 + 28704) + 160))(*(_QWORD *)(a1 + 28704), a2, a3);
  v31 = a1;
  v30 = v12;
  v29 = 0;
  v28 = 1;
  v27 = a3;
  v26 = 0;
  v25 = 0;
  v33 = v12;
  if (v12 % 0x10)
    v11 = v33 / 0x10 + 1;
  else
    v11 = v33 / 0x10;
  v25 = v11 - 1;
  v24 = 0;
  if ((nano_common_max_magazines_is_ncpu & 1) != 0)
  {
    v37 = _malloc_cpu_number() & 0x3F;
  }
  else
  {
    v36 = 0;
    if (_os_cpu_number_override == -1)
      v37 = ((_malloc_cpu_number() >> v36) % nano_common_max_magazines) & 0x3F;
    else
      v37 = ((_os_cpu_number_override >> v36) % nano_common_max_magazines) & 0x3F;
  }
  v24 = v37;
  v23 = (unsigned int **)(v31 + 0x4000 + ((unint64_t)v25 << 9) + 8 * (int)v37);
  v22 = 0;
  v21 = 0;
  v20 = *v23;
  v21 = v20;
  v19 = v20;
  v22 = v20;
  v18 = 0;
  v17 = 0;
  if (!v20)
    return nanov2_allocate_outlined(v31, v23, v30, v25, v24, v26, v17, v29 & 1, v28 & 1, v27);
  v63 = v31;
  v62 = v22;
  v61 = v25;
  v60 = &v26;
  v59 = &v18;
  v58 = 0;
  v57 = 0;
  v56 = *v22;
  v57 = v56;
  v58 = v56;
  v55 = 0;
  while (1)
  {
    v65 = v58;
    v10 = 0;
    if ((v58 & 0x80000000) != 0)
      v10 = (v65 & 0x7FF) != 2044;
    if (!v10)
    {
      v64 = 0;
      goto LABEL_47;
    }
    v54 = 0;
    v53 = 0;
    v52 = 0;
    v51 = (((((v58 >> 11) & 0x3FF) - 1) & 0x3FF) << 11) & 0x1FFFFF | (((((v58 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFFFFF | 0x80000000;
    v50 = ((v58 >> 11) & 0x3FF) == 0;
    if ((v58 & 0x7FF) == 0x7FB || (v58 & 0x7FF) == 0x7FD)
    {
      v3 = v50 ? 2044 : 2043;
      v51 = v51 & 0xFFFFF800 | v3;
      v54 = slots_by_size_class[v61] - ((v58 >> 11) & 0x3FF) - 1;
    }
    else
    {
      v52 = 1;
      if (!v55)
      {
        v78 = v63;
        v77 = v62;
        v86 = v62;
        v76 = (unint64_t)v62 & 0xFFFFFFFFFFFFC000;
        v79 = v62;
        v75 = (unint64_t)v62 & 0xFFFFFFFFFC000000;
        v74 = (uint64_t)((uint64_t)v62 - ((unint64_t)v62 & 0xFFFFFFFFFFFFC000)) / 4;
        v88 = v74;
        v73 = ((unsigned __int16)((_WORD)v88 << 6) | (unsigned __int16)(v88 >> 6)) & 0xFFF;
        v55 = ((unint64_t)v62 & 0xFFFFFFFFFC000000)
            + ((unint64_t)(((unsigned __int16)((_WORD)v88 << 6) | (unsigned __int16)(v88 >> 6)) & 0xFFF) << 14);
      }
      v54 = (v58 & 0x7FF) - 1;
      v85 = v55;
      v84 = v61;
      v83 = v54;
      v90 = v61;
      v53 = (_QWORD *)(v55 + (int)(16 * (v61 + 1) * v54));
      v49 = v53;
      v9 = v50 ? 2044 : v49[1];
      v51 = v51 & 0xFFFFF800 | v9 & 0x7FF;
    }
    v48 = v58;
    v47 = 0;
    v4 = v62;
    v45 = v51;
    v46 = v51;
    v5 = v58;
    v6 = v51;
    do
      v7 = __ldaxr(v4);
    while (v7 == v5 && __stlxr(v6, v4));
    if (v7 != v5)
      v48 = v7;
    v44 = v7 == v5;
    v47 = v7 == v5;
    v58 = v48;
    v43 = v47;
    if (v7 == v5)
      break;
    if ((v58 & 0x7FF) == 0x7FD || (v58 & 0x7FF) == 0x7FE || (v58 & 0x7FF) == 0x7FF)
    {
      *v60 = v62;
      v64 = 0;
      goto LABEL_47;
    }
  }
  if (!v53)
  {
    if (!v55)
    {
      v71 = v63;
      v70 = v62;
      v87 = v62;
      v69 = (unint64_t)v62 & 0xFFFFFFFFFFFFC000;
      v72 = v62;
      v68 = (unint64_t)v62 & 0xFFFFFFFFFC000000;
      v67 = (uint64_t)((uint64_t)v62 - ((unint64_t)v62 & 0xFFFFFFFFFFFFC000)) / 4;
      v89 = v67;
      v66 = ((unsigned __int16)((_WORD)v89 << 6) | (unsigned __int16)(v89 >> 6)) & 0xFFF;
      v55 = ((unint64_t)v62 & 0xFFFFFFFFFC000000)
          + ((unint64_t)(((unsigned __int16)((_WORD)v89 << 6) | (unsigned __int16)(v89 >> 6)) & 0xFFF) << 14);
    }
    v82 = v55;
    v81 = v61;
    v80 = v54;
    v91 = v61;
    v53 = (_QWORD *)(v55 + (int)(16 * (v61 + 1) * v54));
  }
  if (v52)
  {
    v42 = v53;
    v41 = 0;
    v40 = 0;
    v39 = *v53;
    v40 = v39;
    v38 = v39;
    v41 = v39;
    if ((_QWORD *)(v39 ^ *(_QWORD *)(v63 + 28696)) != v53)
      *v59 = 1;
  }
  v64 = v53;
LABEL_47:
  v17 = (uint64_t)v64;
  if (!v64 || (v18 & 1) != 0)
    return nanov2_allocate_outlined(v31, v23, v30, v25, v24, v26, v17, v29 & 1, v28 & 1, v27);
  if ((v29 & 1) != 0 && malloc_zero_policy)
  {
    v35 = v64;
    v34 = v30;
    _platform_bzero(v64, v30);
  }
  else
  {
    *v64 = 0;
    *(_QWORD *)(v17 + 8) = 0;
  }
  return (_QWORD *)v17;
}

void nanov2_free_definite_size(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int16 v6;
  int v7;
  unsigned __int16 *v8;
  unsigned __int16 v9;
  BOOL v10;
  int v11;
  BOOL v12;
  BOOL v13;
  unint64_t v14;
  int v15;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int *v24;
  unsigned int *v25;

  if (a2 && (unint64_t)a2 >> 29 == 24)
  {
    if (a3 % 0x10)
      v14 = a3 / 0x10 + 1;
    else
      v14 = a3 / 0x10;
    v15 = v14 - 1;
    if (!malloc_zero_policy && (_DWORD)v14 != 1)
      _platform_bzero(a2 + 2, a3 - 16);
    v24 = (unsigned int *)(((unint64_t)a2 & 0xFFFFFFFFFC000000 ^ *(_QWORD *)(a1 + 28688))
                         + 4
                         * (((unsigned __int16)((((unint64_t)a2 >> 14) & 0xFFF) << 6) | ((((unint64_t)a2 >> 14) & 0xFFF) >> 6)) & 0xFFF));
    v23 = *v24;
    v22 = slots_by_size_class[v15];
    LOWORD(v20) = 0;
    *a2 = *(_QWORD *)(a1 + 28696) ^ (unint64_t)a2;
    do
    {
      while (1)
      {
        v21 = v20 & 0x7FF | (((((v23 >> 11) & 0x3FF) + 1) & 0x3FF) << 11) & 0x1FFFFF | ((v23 < 0) << 31) | (((((v23 >> 21) & 0x3FF) + 1) & 0x3FF) << 21);
        v13 = 0;
        if ((v23 & 0x7FF) != 0x7FC)
          v13 = ((v21 >> 11) & 0x3FF) == slots_by_size_class[v15] - 1;
        if (v13)
          break;
        v20 = v21 & 0xFFFFF800 | ((unsigned __int16)((int)((_DWORD)a2 - (a2 & 0xFFFFC000))
                                                   / (16
                                                    * (int)v14))
                                + 1) & 0x7FF;
        if ((v23 & 0x7FF) == 0x7FC)
          v11 = 2043;
        else
          v11 = v23 & 0x7FF;
        a2[1] = v11;
        v18 = v23;
        do
          v5 = __ldaxr(v24);
        while (v5 == v23 && __stlxr(v20, v24));
        v10 = v5 == v23;
        if (v5 != v23)
          v18 = v5;
        v23 = v18;
        if (v10)
          goto LABEL_35;
      }
      a2[1] = 0;
      if (v21 >= 0)
        v3 = 2045;
      else
        v3 = 2043;
      v20 = v21 & 0xFFFFF800 | v3;
      v19 = v23;
      do
        v4 = __ldaxr(v24);
      while (v4 == v23 && __stlxr(v20, v24));
      v12 = v4 == v23;
      if (v4 != v23)
        v19 = v4;
      v23 = v19;
    }
    while (!v12);
    if ((v20 & 0x7FF) == 0x7FD && !nanov2_madvise_policy)
    {
      v25 = v24;
      goto LABEL_44;
    }
LABEL_35:
    if (v20 >= 0
      && (*(_WORD *)(a1 + 28672) & (unsigned __int16)(1 << v15)) != 0
      && (double)((v20 >> 11) & 0x3FF) >= 0.75 * (double)v22)
    {
      v8 = (unsigned __int16 *)(a1 + 28672);
      v9 = *(_WORD *)(a1 + 28672);
      do
      {
        v6 = v9;
        do
          v7 = __ldaxr(v8);
        while (v7 == v9 && __stlxr(v9 & ~(unsigned __int16)(1 << v15), v8));
        v9 = v7;
      }
      while (v6 != (unsigned __int16)v7);
    }
    v25 = 0;
LABEL_44:
    if (v25)
      nanov2_madvise_block((os_unfair_lock_s *)a1, v25, v15, 2045);
  }
  else
  {
    (*(void (**)(_QWORD, unint64_t *, unint64_t))(*(_QWORD *)(a1 + 28704) + 120))(*(_QWORD *)(a1 + 28704), a2, a3);
  }
}

void nanov2_madvise_block(os_unfair_lock_s *a1, unsigned int *a2, int a3, int a4)
{
  uint64_t v4;

  v4 = ((unint64_t)a2 & 0xFFFFFFFFFC000000)
     + ((unint64_t)(((unsigned __int16)((unsigned __int16)((uint64_t)((uint64_t)a2
                                                                          - ((unint64_t)a2 & 0xFFFFFFFFFFFFC000))
                                                                / 4) << 6) | (unsigned __int16)(((uint64_t)((uint64_t)a2 - ((unint64_t)a2 & 0xFFFFFFFFFFFFC000)) / 4) >> 6)) & 0xFFF) << 14);
  os_unfair_lock_lock_with_options(&a1[7184], 327680);
  nanov2_madvise_block_locked(a1, a2, v4, a3, a4);
  os_unfair_lock_unlock(a1 + 7184);
}

void nanov2_free(os_unfair_lock_s *a1, _QWORD *a2)
{
  _nanov2_free(a1, a2, 0);
}

void _nanov2_free(os_unfair_lock_s *a1, _QWORD *a2, char a3)
{
  int v3;
  unsigned int *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int16 v12;
  int v13;
  unsigned __int16 *v14;
  __int16 v15;
  unsigned __int16 os_unfair_lock_opaque;
  int v17;
  BOOL v18;
  BOOL v19;
  unsigned int *v20;
  int v21;
  char v22;
  unint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int **v41;
  int *v42;
  int v43;
  unint64_t v44;
  os_unfair_lock_s *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  int v56;
  __int16 v57;
  __int16 v58;
  __int16 v59;
  unsigned __int16 v60;
  _BOOL4 v61;
  BOOL v62;
  int v63;
  int v64;
  _BOOL4 v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  _BOOL4 v71;
  BOOL v72;
  int v73;
  int v74;
  _BOOL4 v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _BOOL4 v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unint64_t v91;
  unsigned int *v92;
  int v93;
  unint64_t v94;
  os_unfair_lock_s *v95;
  unsigned int *v96;
  unsigned int v97;
  unint64_t v98;
  os_unfair_lock_s *v99;
  unint64_t v100;
  int v101;
  unint64_t v102;
  int v103;
  unsigned int v104;
  unint64_t v105;
  unint64_t v106;
  os_unfair_lock_s *v107;
  unint64_t v108;
  os_unfair_lock_s *v109;
  unint64_t v110;
  unsigned int v111;
  unint64_t v112;
  os_unfair_lock_s *v113;
  unint64_t v114;
  int v115;
  unsigned int v116;
  unint64_t v117;
  unint64_t v118;
  os_unfair_lock_s *v119;
  unint64_t v120;
  os_unfair_lock_s *v121;
  unint64_t v122;
  unsigned int v123;
  unint64_t v124;
  os_unfair_lock_s *v125;
  unint64_t v126;
  int v127;
  unint64_t v128;
  int v129;
  unint64_t v130;
  int v131;

  v24 = a1;
  v23 = (unint64_t)a2;
  v22 = a3 & 1;
  if (!a2)
    goto LABEL_71;
  v21 = 0;
  v20 = 0;
  v45 = v24;
  v44 = v23;
  v43 = 0;
  v42 = &v21;
  v41 = &v20;
  v47 = v23;
  if (v23 >> 29 == 24)
  {
    if ((v44 & 0xF) != 0)
    {
      v46 = 0;
    }
    else
    {
      v40 = 0;
      v39 = 0;
      v38 = *(_QWORD *)&v45[7182]._os_unfair_lock_opaque;
      v39 = v38;
      v37 = v38;
      v40 = v38;
      if (v44 >= *(_QWORD *)&v45[7180]._os_unfair_lock_opaque && v44 <= v40)
      {
        v36 = 0;
        v99 = v45;
        v98 = v44;
        v97 = 0;
        v102 = v44;
        v97 = (v44 >> 14) & 0xFFF ^ *(_QWORD *)&v45[7170]._os_unfair_lock_opaque;
        v36 = ptr_offset_to_size_class[v97 >> 6];
        v35 = 0;
        v119 = v45;
        v118 = v44;
        v117 = 0;
        v121 = v45;
        v120 = v44;
        v122 = v44;
        v125 = v45;
        v124 = v44 & 0xFFFFFFFFFC000000;
        v117 = v44 & 0xFFFFFFFFFC000000 ^ *(_QWORD *)&v45[7172]._os_unfair_lock_opaque;
        v126 = v44;
        v116 = (v44 >> 14) & 0xFFF;
        v123 = v116;
        v115 = ((unsigned __int16)((_WORD)v123 << 6) | (unsigned __int16)(v123 >> 6)) & 0xFFF;
        v35 = (unsigned int *)(v117
                             + 4 * (((unsigned __int16)((_WORD)v123 << 6) | (unsigned __int16)(v123 >> 6)) & 0xFFF));
        v34 = 0;
        v33 = 0;
        v32 = *v35;
        v33 = v32;
        v34 = v32;
        v127 = v32;
        v19 = 0;
        if ((v32 & 0x7FF) != 0)
        {
          v19 = 0;
          if ((v127 & 0x7FF) != 0x7FE)
          {
            v19 = 0;
            if ((v127 & 0x7FF) != 0x7FF)
              v19 = (v127 & 0x7FF) != 2042;
          }
        }
        if (v19 && ((v34 & 0x7FF) == 0x7FC || ((v34 >> 11) & 0x3FF) != slots_by_size_class[v36] - 1))
        {
          v101 = v36;
          v31 = 16 * (v36 + 1);
          v30 = v44;
          if ((v44 & 0x3FFF) % v31)
          {
            v46 = 0;
          }
          else
          {
            v29 = v44;
            v28 = 0;
            v27 = 0;
            v26 = *(_QWORD *)v44;
            v27 = v26;
            v25 = v26;
            v28 = v26;
            if ((v26 ^ *(_QWORD *)&v45[7174]._os_unfair_lock_opaque) == v44)
            {
              v46 = 0;
            }
            else
            {
              if (v42)
                *v42 = v36;
              if (v41)
                *v41 = v35;
              v46 = v31;
            }
          }
        }
        else
        {
          v46 = 0;
        }
      }
      else
      {
        v46 = 0;
      }
    }
  }
  else
  {
    v46 = 0;
  }
  if (v46)
  {
    if (!malloc_zero_policy && v46 > 0x10)
    {
      v49 = (_QWORD *)(v23 + 16);
      v48 = v46 - 16;
      _platform_bzero(v23 + 16, v46 - 16);
    }
    v95 = v24;
    v94 = v23;
    v93 = v21;
    v92 = v20;
    v100 = v23;
    v91 = v23 & 0xFFFFFFFFFFFFC000;
    if (!v20)
    {
      v107 = v95;
      v106 = v94;
      v105 = 0;
      v109 = v95;
      v108 = v94;
      v110 = v94;
      v113 = v95;
      v112 = v94 & 0xFFFFFFFFFC000000;
      v105 = v94 & 0xFFFFFFFFFC000000 ^ *(_QWORD *)&v95[7172]._os_unfair_lock_opaque;
      v114 = v94;
      v104 = (v94 >> 14) & 0xFFF;
      v111 = v104;
      v103 = ((unsigned __int16)((_WORD)v111 << 6) | (unsigned __int16)(v111 >> 6)) & 0xFFF;
      v92 = (unsigned int *)(v105
                           + 4 * (((unsigned __int16)((_WORD)v111 << 6) | (unsigned __int16)(v111 >> 6)) & 0xFFF));
    }
    v90 = 0;
    v89 = 0;
    v88 = *v92;
    v89 = v88;
    v90 = v88;
    v87 = 0;
    v87 = slots_by_size_class[v93];
    v86 = 0;
    v85 = 0;
    v84 = v94;
    v83 = 0;
    v83 = *(_QWORD *)&v95[7174]._os_unfair_lock_opaque ^ v94;
    v82 = v83;
    *(_QWORD *)v94 = v83;
    v81 = v83;
    do
    {
      while (1)
      {
        v85 = (v90 & 0x7FF) == 2044;
        v86 = v86 & 0xFFE007FF | (((((v90 >> 11) & 0x3FF) + 1) & 0x3FF) << 11);
        v86 = v86 & 0x7FFFFFFF | ((v90 < 0) << 31);
        v86 = v86 & 0x801FFFFF | (((((v90 >> 21) & 0x3FF) + 1) & 0x3FF) << 21);
        v80 = 0;
        v18 = 0;
        if ((v90 & 0x7FF) != 0x7FC)
          v18 = ((v86 >> 11) & 0x3FF) == slots_by_size_class[v93] - 1;
        v80 = v18;
        if (v18)
          break;
        v130 = v91;
        v129 = v93;
        v128 = v94;
        v131 = v93;
        v70 = ((int)v94 - (int)v91) / (16 * (v93 + 1));
        v86 = v86 & 0xFFFFF800 | ((_WORD)v70 + 1) & 0x7FF;
        v69 = 0;
        if (v85)
          v17 = 2043;
        else
          v17 = v90 & 0x7FF;
        v69 = v17;
        v68 = v17;
        *(_QWORD *)(v84 + 8) = v17;
        v67 = v69;
        v66 = v90;
        v65 = 0;
        v8 = v92;
        v63 = v86;
        v64 = v86;
        v9 = v90;
        v10 = v86;
        do
          v11 = __ldaxr(v8);
        while (v11 == v9 && __stlxr(v10, v8));
        if (v11 != v9)
          v66 = v11;
        v62 = v11 == v9;
        v65 = v11 == v9;
        v90 = v66;
        v61 = v65;
        if (v11 == v9)
          goto LABEL_58;
      }
      v79 = 0;
      v78 = 0;
      *(_QWORD *)(v84 + 8) = 0;
      v77 = v79;
      if (v86 >= 0)
        v3 = 2045;
      else
        v3 = 2043;
      v86 = v86 & 0xFFFFF800 | v3;
      v76 = v90;
      v75 = 0;
      v4 = v92;
      v73 = v86;
      v74 = v86;
      v5 = v90;
      v6 = v86;
      do
        v7 = __ldaxr(v4);
      while (v7 == v5 && __stlxr(v6, v4));
      if (v7 != v5)
        v76 = v7;
      v72 = v7 == v5;
      v75 = v7 == v5;
      v90 = v76;
      v71 = v75;
    }
    while (v7 != v5);
    if ((v86 & 0x7FF) == 0x7FD && !nanov2_madvise_policy)
    {
      v96 = v92;
      goto LABEL_68;
    }
LABEL_58:
    v60 = 1 << v93;
    if (v86 >= 0
      && (v95[7168]._os_unfair_lock_opaque & v60) != 0
      && (double)((v86 >> 11) & 0x3FF) >= 0.75 * (double)v87)
    {
      v58 = ~v60;
      v57 = ~v60;
      v59 = ~v60;
      v55 = 0;
      v14 = (unsigned __int16 *)&v95[7168];
      v53 = ~v60;
      v52 = ~v60;
      v54 = ~v60;
      v15 = ~v60;
      os_unfair_lock_opaque = v95[7168]._os_unfair_lock_opaque;
      do
      {
        v12 = os_unfair_lock_opaque;
        do
          v13 = __ldaxr(v14);
        while (v13 == os_unfair_lock_opaque && __stlxr(os_unfair_lock_opaque & v15, v14));
        os_unfair_lock_opaque = v13;
      }
      while (v12 != (unsigned __int16)v13);
      v51 = v13;
      v55 = v13;
      v50 = v13;
      v56 = (unsigned __int16)(v13 & v59);
    }
    v96 = 0;
LABEL_68:
    if (v96)
      nanov2_madvise_block(v24, v96, v21, 2045);
  }
  else
  {
LABEL_71:
    if ((v22 & 1) != 0)
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)&v24[7176]._os_unfair_lock_opaque + 144))(*(_QWORD *)&v24[7176]._os_unfair_lock_opaque, v23);
    else
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)&v24[7176]._os_unfair_lock_opaque + 48))(*(_QWORD *)&v24[7176]._os_unfair_lock_opaque, v23);
  }
}

void nanov2_try_free_default(os_unfair_lock_s *a1, _QWORD *a2)
{
  _nanov2_free(a1, a2, 1);
}

_QWORD *nanov2_calloc(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  __int16 v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13[3];
  uint64_t v14;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  char v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int **v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  uint64_t v33;
  char v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  signed int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _BOOL4 v55;
  BOOL v56;
  unsigned int v57;
  unsigned int v58;
  _BOOL4 v59;
  unsigned int v60;
  _QWORD *v61;
  _BOOL4 v62;
  unsigned int v63;
  int v64;
  _QWORD *v65;
  int v66;
  unint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  char *v71;
  unsigned int **v72;
  unsigned int v73;
  unsigned int *v74;
  uint64_t v75;
  _QWORD *v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int *v84;
  int v85;
  unsigned int v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  unsigned int *v91;
  int v92;
  unsigned int v93;
  unint64_t v94;
  int v95;
  unsigned int v96;
  unint64_t v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  BOOL v104;

  v14 = a1;
  v13[2] = a2;
  v13[1] = a3;
  v13[0] = 0;
  v46 = a2;
  v45 = a3;
  v44 = 0;
  v43 = v13;
  v42 = a3;
  if (a2 == 1 || (v42 = v46 * v45, !(v104 = !is_mul_ok(v46, v45))) && v42 <= malloc_absolute_max_size)
  {
    *v43 = v42;
    v47 = 0;
  }
  else
  {
    malloc_set_errno_fast(1, 12);
    v47 = -1;
  }
  if (v47)
    return 0;
  v12 = _nano_common_good_size(v13[0]);
  if (v13[0] > 0x100)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)(v14 + 28704) + 32))(*(_QWORD *)(v14 + 28704), 1, v13[0]);
  v37 = v14;
  v36 = v12;
  v35 = 1;
  v34 = 0;
  v33 = 0;
  v32 = 0;
  v31 = 0;
  v39 = v12;
  if (v12 % 0x10)
    v11 = v39 / 0x10 + 1;
  else
    v11 = v39 / 0x10;
  v31 = v11 - 1;
  v30 = 0;
  if ((nano_common_max_magazines_is_ncpu & 1) != 0)
  {
    LOBYTE(v49) = _malloc_cpu_number() & 0x3F;
    v49 = v49;
  }
  else
  {
    v48 = 0;
    if (_os_cpu_number_override == -1)
      v49 = ((_malloc_cpu_number() >> v48) % nano_common_max_magazines) & 0x3F;
    else
      v49 = ((_os_cpu_number_override >> v48) % nano_common_max_magazines) & 0x3F;
  }
  v30 = v49;
  v29 = (unsigned int **)(v37 + 0x4000 + ((unint64_t)v31 << 9) + 8 * v49);
  v28 = 0;
  v27 = 0;
  v26 = *v29;
  v27 = v26;
  v25 = v26;
  v28 = v26;
  v24 = 0;
  v23 = 0;
  if (!v26)
    return nanov2_allocate_outlined(v37, v29, v36, v31, v30, v32, (uint64_t)v23, v35 & 1, v34 & 1, v33);
  v75 = v37;
  v74 = v28;
  v73 = v31;
  v72 = &v32;
  v71 = &v24;
  v70 = 0;
  v69 = 0;
  v68 = *v28;
  v69 = v68;
  v70 = v68;
  v67 = 0;
  while (1)
  {
    v77 = v70;
    v10 = 0;
    if ((v70 & 0x80000000) != 0)
      v10 = (v77 & 0x7FF) != 2044;
    if (!v10)
    {
      v76 = 0;
      goto LABEL_54;
    }
    v66 = 0;
    v65 = 0;
    v64 = 0;
    v63 = (((((v70 >> 11) & 0x3FF) - 1) & 0x3FF) << 11) & 0x1FFFFF | (((((v70 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFFFFF | 0x80000000;
    v62 = ((v70 >> 11) & 0x3FF) == 0;
    if ((v70 & 0x7FF) == 0x7FB || (v70 & 0x7FF) == 0x7FD)
    {
      v3 = v62 ? 2044 : 2043;
      v63 = v63 & 0xFFFFF800 | v3;
      v66 = slots_by_size_class[v73] - ((v70 >> 11) & 0x3FF) - 1;
    }
    else
    {
      v64 = 1;
      if (!v67)
      {
        v90 = v75;
        v89 = v74;
        v98 = v74;
        v88 = (unint64_t)v74 & 0xFFFFFFFFFFFFC000;
        v91 = v74;
        v87 = (unint64_t)v74 & 0xFFFFFFFFFC000000;
        v86 = (uint64_t)((uint64_t)v74 - ((unint64_t)v74 & 0xFFFFFFFFFFFFC000)) / 4;
        v100 = v86;
        v85 = ((unsigned __int16)((_WORD)v100 << 6) | (unsigned __int16)(v100 >> 6)) & 0xFFF;
        v67 = ((unint64_t)v74 & 0xFFFFFFFFFC000000)
            + ((unint64_t)(((unsigned __int16)((_WORD)v100 << 6) | (unsigned __int16)(v100 >> 6)) & 0xFFF) << 14);
      }
      v66 = (v70 & 0x7FF) - 1;
      v97 = v67;
      v96 = v73;
      v95 = v66;
      v102 = v73;
      v65 = (_QWORD *)(v67 + (int)(16 * (v73 + 1) * v66));
      v61 = v65;
      v9 = v62 ? 2044 : v61[1];
      v63 = v63 & 0xFFFFF800 | v9 & 0x7FF;
    }
    v60 = v70;
    v59 = 0;
    v4 = v74;
    v57 = v63;
    v58 = v63;
    v5 = v70;
    v6 = v63;
    do
      v7 = __ldaxr(v4);
    while (v7 == v5 && __stlxr(v6, v4));
    if (v7 != v5)
      v60 = v7;
    v56 = v7 == v5;
    v59 = v7 == v5;
    v70 = v60;
    v55 = v59;
    if (v7 == v5)
      break;
    if ((v70 & 0x7FF) == 0x7FD || (v70 & 0x7FF) == 0x7FE || (v70 & 0x7FF) == 0x7FF)
    {
      *v72 = v74;
      v76 = 0;
      goto LABEL_54;
    }
  }
  if (!v65)
  {
    if (!v67)
    {
      v83 = v75;
      v82 = v74;
      v99 = v74;
      v81 = (unint64_t)v74 & 0xFFFFFFFFFFFFC000;
      v84 = v74;
      v80 = (unint64_t)v74 & 0xFFFFFFFFFC000000;
      v79 = (uint64_t)((uint64_t)v74 - ((unint64_t)v74 & 0xFFFFFFFFFFFFC000)) / 4;
      v101 = v79;
      v78 = ((unsigned __int16)((_WORD)v101 << 6) | (unsigned __int16)(v101 >> 6)) & 0xFFF;
      v67 = ((unint64_t)v74 & 0xFFFFFFFFFC000000)
          + ((unint64_t)(((unsigned __int16)((_WORD)v101 << 6) | (unsigned __int16)(v101 >> 6)) & 0xFFF) << 14);
    }
    v94 = v67;
    v93 = v73;
    v92 = v66;
    v103 = v73;
    v65 = (_QWORD *)(v67 + (int)(16 * (v73 + 1) * v66));
  }
  if (v64)
  {
    v54 = v65;
    v53 = 0;
    v52 = 0;
    v51 = *v65;
    v52 = v51;
    v50 = v51;
    v53 = v51;
    if ((_QWORD *)(v51 ^ *(_QWORD *)(v75 + 28696)) != v65)
      *v71 = 1;
  }
  v76 = v65;
LABEL_54:
  v23 = v76;
  if (!v76 || (v24 & 1) != 0)
    return nanov2_allocate_outlined(v37, v29, v36, v31, v30, v32, (uint64_t)v23, v35 & 1, v34 & 1, v33);
  if ((v35 & 1) != 0 && malloc_zero_policy)
  {
    v41 = v23;
    v40 = v36;
    _platform_bzero(v23, v36);
  }
  else
  {
    v22 = v23;
    v21 = 0;
    v20 = 0;
    *v23 = 0;
    v19 = v21;
    v18 = 0;
    v17 = 0;
    v22[1] = 0;
    v16 = v18;
  }
  return v23;
}

_QWORD *nanov2_calloc_type(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  __int16 v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  char v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int **v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  uint64_t v37;
  char v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  signed int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _BOOL4 v59;
  BOOL v60;
  unsigned int v61;
  unsigned int v62;
  _BOOL4 v63;
  unsigned int v64;
  _QWORD *v65;
  _BOOL4 v66;
  unsigned int v67;
  int v68;
  _QWORD *v69;
  int v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  char *v75;
  unsigned int **v76;
  unsigned int v77;
  unsigned int *v78;
  uint64_t v79;
  _QWORD *v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  unsigned int *v88;
  int v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  unsigned int *v95;
  int v96;
  unsigned int v97;
  unint64_t v98;
  int v99;
  unsigned int v100;
  unint64_t v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  BOOL v108;

  v18 = a1;
  v17 = a2;
  v16 = a3;
  v15 = a4;
  v14 = 0;
  v50 = a2;
  v49 = a3;
  v48 = 0;
  v47 = &v14;
  v46 = a3;
  if (a2 == 1 || (v46 = v50 * v49, !(v108 = !is_mul_ok(v50, v49))) && v46 <= malloc_absolute_max_size)
  {
    *v47 = v46;
    v51 = 0;
  }
  else
  {
    malloc_set_errno_fast(1, 12);
    v51 = -1;
  }
  if (v51)
    return 0;
  v13 = _nano_common_good_size(v14);
  if (v14 > 0x100)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v18 + 28704)
                                                                                           + 168))(*(_QWORD *)(v18 + 28704), 1, v14, v15);
  v41 = v18;
  v40 = v13;
  v39 = 1;
  v38 = 1;
  v37 = v15;
  v36 = 0;
  v35 = 0;
  v43 = v13;
  if (v13 % 0x10)
    v12 = v43 / 0x10 + 1;
  else
    v12 = v43 / 0x10;
  v35 = v12 - 1;
  v34 = 0;
  if ((nano_common_max_magazines_is_ncpu & 1) != 0)
  {
    LOBYTE(v53) = _malloc_cpu_number() & 0x3F;
    v53 = v53;
  }
  else
  {
    v52 = 0;
    if (_os_cpu_number_override == -1)
      v53 = ((_malloc_cpu_number() >> v52) % nano_common_max_magazines) & 0x3F;
    else
      v53 = ((_os_cpu_number_override >> v52) % nano_common_max_magazines) & 0x3F;
  }
  v34 = v53;
  v33 = (unsigned int **)(v41 + 0x4000 + ((unint64_t)v35 << 9) + 8 * v53);
  v32 = 0;
  v31 = 0;
  v30 = *v33;
  v31 = v30;
  v29 = v30;
  v32 = v30;
  v28 = 0;
  v27 = 0;
  if (!v30)
    return nanov2_allocate_outlined(v41, v33, v40, v35, v34, v36, (uint64_t)v27, v39 & 1, v38 & 1, v37);
  v79 = v41;
  v78 = v32;
  v77 = v35;
  v76 = &v36;
  v75 = &v28;
  v74 = 0;
  v73 = 0;
  v72 = *v32;
  v73 = v72;
  v74 = v72;
  v71 = 0;
  while (1)
  {
    v81 = v74;
    v11 = 0;
    if ((v74 & 0x80000000) != 0)
      v11 = (v81 & 0x7FF) != 2044;
    if (!v11)
    {
      v80 = 0;
      goto LABEL_54;
    }
    v70 = 0;
    v69 = 0;
    v68 = 0;
    v67 = (((((v74 >> 11) & 0x3FF) - 1) & 0x3FF) << 11) & 0x1FFFFF | (((((v74 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFFFFF | 0x80000000;
    v66 = ((v74 >> 11) & 0x3FF) == 0;
    if ((v74 & 0x7FF) == 0x7FB || (v74 & 0x7FF) == 0x7FD)
    {
      v4 = v66 ? 2044 : 2043;
      v67 = v67 & 0xFFFFF800 | v4;
      v70 = slots_by_size_class[v77] - ((v74 >> 11) & 0x3FF) - 1;
    }
    else
    {
      v68 = 1;
      if (!v71)
      {
        v94 = v79;
        v93 = v78;
        v102 = v78;
        v92 = (unint64_t)v78 & 0xFFFFFFFFFFFFC000;
        v95 = v78;
        v91 = (unint64_t)v78 & 0xFFFFFFFFFC000000;
        v90 = (uint64_t)((uint64_t)v78 - ((unint64_t)v78 & 0xFFFFFFFFFFFFC000)) / 4;
        v104 = v90;
        v89 = ((unsigned __int16)((_WORD)v104 << 6) | (unsigned __int16)(v104 >> 6)) & 0xFFF;
        v71 = ((unint64_t)v78 & 0xFFFFFFFFFC000000)
            + ((unint64_t)(((unsigned __int16)((_WORD)v104 << 6) | (unsigned __int16)(v104 >> 6)) & 0xFFF) << 14);
      }
      v70 = (v74 & 0x7FF) - 1;
      v101 = v71;
      v100 = v77;
      v99 = v70;
      v106 = v77;
      v69 = (_QWORD *)(v71 + (int)(16 * (v77 + 1) * v70));
      v65 = v69;
      v10 = v66 ? 2044 : v65[1];
      v67 = v67 & 0xFFFFF800 | v10 & 0x7FF;
    }
    v64 = v74;
    v63 = 0;
    v5 = v78;
    v61 = v67;
    v62 = v67;
    v6 = v74;
    v7 = v67;
    do
      v8 = __ldaxr(v5);
    while (v8 == v6 && __stlxr(v7, v5));
    if (v8 != v6)
      v64 = v8;
    v60 = v8 == v6;
    v63 = v8 == v6;
    v74 = v64;
    v59 = v63;
    if (v8 == v6)
      break;
    if ((v74 & 0x7FF) == 0x7FD || (v74 & 0x7FF) == 0x7FE || (v74 & 0x7FF) == 0x7FF)
    {
      *v76 = v78;
      v80 = 0;
      goto LABEL_54;
    }
  }
  if (!v69)
  {
    if (!v71)
    {
      v87 = v79;
      v86 = v78;
      v103 = v78;
      v85 = (unint64_t)v78 & 0xFFFFFFFFFFFFC000;
      v88 = v78;
      v84 = (unint64_t)v78 & 0xFFFFFFFFFC000000;
      v83 = (uint64_t)((uint64_t)v78 - ((unint64_t)v78 & 0xFFFFFFFFFFFFC000)) / 4;
      v105 = v83;
      v82 = ((unsigned __int16)((_WORD)v105 << 6) | (unsigned __int16)(v105 >> 6)) & 0xFFF;
      v71 = ((unint64_t)v78 & 0xFFFFFFFFFC000000)
          + ((unint64_t)(((unsigned __int16)((_WORD)v105 << 6) | (unsigned __int16)(v105 >> 6)) & 0xFFF) << 14);
    }
    v98 = v71;
    v97 = v77;
    v96 = v70;
    v107 = v77;
    v69 = (_QWORD *)(v71 + (int)(16 * (v77 + 1) * v70));
  }
  if (v68)
  {
    v58 = v69;
    v57 = 0;
    v56 = 0;
    v55 = *v69;
    v56 = v55;
    v54 = v55;
    v57 = v55;
    if ((_QWORD *)(v55 ^ *(_QWORD *)(v79 + 28696)) != v69)
      *v75 = 1;
  }
  v80 = v69;
LABEL_54:
  v27 = v80;
  if (!v80 || (v28 & 1) != 0)
    return nanov2_allocate_outlined(v41, v33, v40, v35, v34, v36, (uint64_t)v27, v39 & 1, v38 & 1, v37);
  if ((v39 & 1) != 0 && malloc_zero_policy)
  {
    v45 = v27;
    v44 = v40;
    _platform_bzero(v27, v40);
  }
  else
  {
    v26 = v27;
    v25 = 0;
    v24 = 0;
    *v27 = 0;
    v23 = v25;
    v22 = 0;
    v21 = 0;
    v26[1] = 0;
    v20 = v22;
  }
  return v27;
}

_QWORD *nanov2_malloc_zero_on_alloc(uint64_t a1, unint64_t a2)
{
  int v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  __int16 v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v15;
  char v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int **v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  char v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _BOOL4 v41;
  BOOL v42;
  unsigned int v43;
  unsigned int v44;
  _BOOL4 v45;
  unsigned int v46;
  _QWORD *v47;
  _BOOL4 v48;
  unsigned int v49;
  int v50;
  _QWORD *v51;
  int v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  char *v57;
  unsigned int **v58;
  unsigned int v59;
  unsigned int *v60;
  uint64_t v61;
  _QWORD *v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  unsigned int *v70;
  int v71;
  unsigned int v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  unsigned int *v77;
  int v78;
  unsigned int v79;
  unint64_t v80;
  int v81;
  unsigned int v82;
  unint64_t v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;

  v11 = _nano_common_good_size(a2);
  if (v11 > 0x100)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)(a1 + 28704) + 24))(*(_QWORD *)(a1 + 28704), a2);
  v29 = a1;
  v28 = v11;
  v27 = 1;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v23 = 0;
  v31 = v11;
  if (v11 % 0x10)
    v10 = v31 / 0x10 + 1;
  else
    v10 = v31 / 0x10;
  v23 = v10 - 1;
  v22 = 0;
  if ((nano_common_max_magazines_is_ncpu & 1) != 0)
  {
    v35 = _malloc_cpu_number() & 0x3F;
  }
  else
  {
    v34 = 0;
    if (_os_cpu_number_override == -1)
      v35 = ((_malloc_cpu_number() >> v34) % nano_common_max_magazines) & 0x3F;
    else
      v35 = ((_os_cpu_number_override >> v34) % nano_common_max_magazines) & 0x3F;
  }
  v22 = v35;
  v21 = (unsigned int **)(v29 + 0x4000 + ((unint64_t)v23 << 9) + 8 * (int)v35);
  v20 = 0;
  v19 = 0;
  v18 = *v21;
  v19 = v18;
  v17 = v18;
  v20 = v18;
  v16 = 0;
  v15 = 0;
  if (!v18)
    return nanov2_allocate_outlined(v29, v21, v28, v23, v22, v24, v15, v27 & 1, v26 & 1, v25);
  v61 = v29;
  v60 = v20;
  v59 = v23;
  v58 = &v24;
  v57 = &v16;
  v56 = 0;
  v55 = 0;
  v54 = *v20;
  v55 = v54;
  v56 = v54;
  v53 = 0;
  while (1)
  {
    v63 = v56;
    v9 = 0;
    if ((v56 & 0x80000000) != 0)
      v9 = (v63 & 0x7FF) != 2044;
    if (!v9)
    {
      v62 = 0;
      goto LABEL_47;
    }
    v52 = 0;
    v51 = 0;
    v50 = 0;
    v49 = (((((v56 >> 11) & 0x3FF) - 1) & 0x3FF) << 11) & 0x1FFFFF | (((((v56 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFFFFF | 0x80000000;
    v48 = ((v56 >> 11) & 0x3FF) == 0;
    if ((v56 & 0x7FF) == 0x7FB || (v56 & 0x7FF) == 0x7FD)
    {
      v2 = v48 ? 2044 : 2043;
      v49 = v49 & 0xFFFFF800 | v2;
      v52 = slots_by_size_class[v59] - ((v56 >> 11) & 0x3FF) - 1;
    }
    else
    {
      v50 = 1;
      if (!v53)
      {
        v76 = v61;
        v75 = v60;
        v84 = v60;
        v74 = (unint64_t)v60 & 0xFFFFFFFFFFFFC000;
        v77 = v60;
        v73 = (unint64_t)v60 & 0xFFFFFFFFFC000000;
        v72 = (uint64_t)((uint64_t)v60 - ((unint64_t)v60 & 0xFFFFFFFFFFFFC000)) / 4;
        v86 = v72;
        v71 = ((unsigned __int16)((_WORD)v86 << 6) | (unsigned __int16)(v86 >> 6)) & 0xFFF;
        v53 = ((unint64_t)v60 & 0xFFFFFFFFFC000000)
            + ((unint64_t)(((unsigned __int16)((_WORD)v86 << 6) | (unsigned __int16)(v86 >> 6)) & 0xFFF) << 14);
      }
      v52 = (v56 & 0x7FF) - 1;
      v83 = v53;
      v82 = v59;
      v81 = v52;
      v88 = v59;
      v51 = (_QWORD *)(v53 + (int)(16 * (v59 + 1) * v52));
      v47 = v51;
      v8 = v48 ? 2044 : v47[1];
      v49 = v49 & 0xFFFFF800 | v8 & 0x7FF;
    }
    v46 = v56;
    v45 = 0;
    v3 = v60;
    v43 = v49;
    v44 = v49;
    v4 = v56;
    v5 = v49;
    do
      v6 = __ldaxr(v3);
    while (v6 == v4 && __stlxr(v5, v3));
    if (v6 != v4)
      v46 = v6;
    v42 = v6 == v4;
    v45 = v6 == v4;
    v56 = v46;
    v41 = v45;
    if (v6 == v4)
      break;
    if ((v56 & 0x7FF) == 0x7FD || (v56 & 0x7FF) == 0x7FE || (v56 & 0x7FF) == 0x7FF)
    {
      *v58 = v60;
      v62 = 0;
      goto LABEL_47;
    }
  }
  if (!v51)
  {
    if (!v53)
    {
      v69 = v61;
      v68 = v60;
      v85 = v60;
      v67 = (unint64_t)v60 & 0xFFFFFFFFFFFFC000;
      v70 = v60;
      v66 = (unint64_t)v60 & 0xFFFFFFFFFC000000;
      v65 = (uint64_t)((uint64_t)v60 - ((unint64_t)v60 & 0xFFFFFFFFFFFFC000)) / 4;
      v87 = v65;
      v64 = ((unsigned __int16)((_WORD)v87 << 6) | (unsigned __int16)(v87 >> 6)) & 0xFFF;
      v53 = ((unint64_t)v60 & 0xFFFFFFFFFC000000)
          + ((unint64_t)(((unsigned __int16)((_WORD)v87 << 6) | (unsigned __int16)(v87 >> 6)) & 0xFFF) << 14);
    }
    v80 = v53;
    v79 = v59;
    v78 = v52;
    v89 = v59;
    v51 = (_QWORD *)(v53 + (int)(16 * (v59 + 1) * v52));
  }
  if (v50)
  {
    v40 = v51;
    v39 = 0;
    v38 = 0;
    v37 = *v51;
    v38 = v37;
    v36 = v37;
    v39 = v37;
    if ((_QWORD *)(v37 ^ *(_QWORD *)(v61 + 28696)) != v51)
      *v57 = 1;
  }
  v62 = v51;
LABEL_47:
  v15 = (uint64_t)v62;
  if (!v62 || (v16 & 1) != 0)
    return nanov2_allocate_outlined(v29, v21, v28, v23, v22, v24, v15, v27 & 1, v26 & 1, v25);
  if ((v27 & 1) != 0 && malloc_zero_policy)
  {
    v33 = v62;
    v32 = v28;
    _platform_bzero(v62, v28);
  }
  else
  {
    *v62 = 0;
    *(_QWORD *)(v15 + 8) = 0;
  }
  return (_QWORD *)v15;
}

_QWORD *nanov2_malloc_type_zero_on_alloc(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  __int16 v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v17;
  char v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int **v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  uint64_t v27;
  char v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _BOOL4 v43;
  BOOL v44;
  unsigned int v45;
  unsigned int v46;
  _BOOL4 v47;
  unsigned int v48;
  _QWORD *v49;
  _BOOL4 v50;
  unsigned int v51;
  int v52;
  _QWORD *v53;
  int v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  char *v59;
  unsigned int **v60;
  unsigned int v61;
  unsigned int *v62;
  uint64_t v63;
  _QWORD *v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int *v77;
  uint64_t v78;
  unsigned int *v79;
  int v80;
  unsigned int v81;
  unint64_t v82;
  int v83;
  unsigned int v84;
  unint64_t v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;

  v12 = _nano_common_good_size(a2);
  if (v12 > 0x100)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)(a1 + 28704) + 160))(*(_QWORD *)(a1 + 28704), a2, a3);
  v31 = a1;
  v30 = v12;
  v29 = 1;
  v28 = 1;
  v27 = a3;
  v26 = 0;
  v25 = 0;
  v33 = v12;
  if (v12 % 0x10)
    v11 = v33 / 0x10 + 1;
  else
    v11 = v33 / 0x10;
  v25 = v11 - 1;
  v24 = 0;
  if ((nano_common_max_magazines_is_ncpu & 1) != 0)
  {
    v37 = _malloc_cpu_number() & 0x3F;
  }
  else
  {
    v36 = 0;
    if (_os_cpu_number_override == -1)
      v37 = ((_malloc_cpu_number() >> v36) % nano_common_max_magazines) & 0x3F;
    else
      v37 = ((_os_cpu_number_override >> v36) % nano_common_max_magazines) & 0x3F;
  }
  v24 = v37;
  v23 = (unsigned int **)(v31 + 0x4000 + ((unint64_t)v25 << 9) + 8 * (int)v37);
  v22 = 0;
  v21 = 0;
  v20 = *v23;
  v21 = v20;
  v19 = v20;
  v22 = v20;
  v18 = 0;
  v17 = 0;
  if (!v20)
    return nanov2_allocate_outlined(v31, v23, v30, v25, v24, v26, v17, v29 & 1, v28 & 1, v27);
  v63 = v31;
  v62 = v22;
  v61 = v25;
  v60 = &v26;
  v59 = &v18;
  v58 = 0;
  v57 = 0;
  v56 = *v22;
  v57 = v56;
  v58 = v56;
  v55 = 0;
  while (1)
  {
    v65 = v58;
    v10 = 0;
    if ((v58 & 0x80000000) != 0)
      v10 = (v65 & 0x7FF) != 2044;
    if (!v10)
    {
      v64 = 0;
      goto LABEL_47;
    }
    v54 = 0;
    v53 = 0;
    v52 = 0;
    v51 = (((((v58 >> 11) & 0x3FF) - 1) & 0x3FF) << 11) & 0x1FFFFF | (((((v58 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFFFFF | 0x80000000;
    v50 = ((v58 >> 11) & 0x3FF) == 0;
    if ((v58 & 0x7FF) == 0x7FB || (v58 & 0x7FF) == 0x7FD)
    {
      v3 = v50 ? 2044 : 2043;
      v51 = v51 & 0xFFFFF800 | v3;
      v54 = slots_by_size_class[v61] - ((v58 >> 11) & 0x3FF) - 1;
    }
    else
    {
      v52 = 1;
      if (!v55)
      {
        v78 = v63;
        v77 = v62;
        v86 = v62;
        v76 = (unint64_t)v62 & 0xFFFFFFFFFFFFC000;
        v79 = v62;
        v75 = (unint64_t)v62 & 0xFFFFFFFFFC000000;
        v74 = (uint64_t)((uint64_t)v62 - ((unint64_t)v62 & 0xFFFFFFFFFFFFC000)) / 4;
        v88 = v74;
        v73 = ((unsigned __int16)((_WORD)v88 << 6) | (unsigned __int16)(v88 >> 6)) & 0xFFF;
        v55 = ((unint64_t)v62 & 0xFFFFFFFFFC000000)
            + ((unint64_t)(((unsigned __int16)((_WORD)v88 << 6) | (unsigned __int16)(v88 >> 6)) & 0xFFF) << 14);
      }
      v54 = (v58 & 0x7FF) - 1;
      v85 = v55;
      v84 = v61;
      v83 = v54;
      v90 = v61;
      v53 = (_QWORD *)(v55 + (int)(16 * (v61 + 1) * v54));
      v49 = v53;
      v9 = v50 ? 2044 : v49[1];
      v51 = v51 & 0xFFFFF800 | v9 & 0x7FF;
    }
    v48 = v58;
    v47 = 0;
    v4 = v62;
    v45 = v51;
    v46 = v51;
    v5 = v58;
    v6 = v51;
    do
      v7 = __ldaxr(v4);
    while (v7 == v5 && __stlxr(v6, v4));
    if (v7 != v5)
      v48 = v7;
    v44 = v7 == v5;
    v47 = v7 == v5;
    v58 = v48;
    v43 = v47;
    if (v7 == v5)
      break;
    if ((v58 & 0x7FF) == 0x7FD || (v58 & 0x7FF) == 0x7FE || (v58 & 0x7FF) == 0x7FF)
    {
      *v60 = v62;
      v64 = 0;
      goto LABEL_47;
    }
  }
  if (!v53)
  {
    if (!v55)
    {
      v71 = v63;
      v70 = v62;
      v87 = v62;
      v69 = (unint64_t)v62 & 0xFFFFFFFFFFFFC000;
      v72 = v62;
      v68 = (unint64_t)v62 & 0xFFFFFFFFFC000000;
      v67 = (uint64_t)((uint64_t)v62 - ((unint64_t)v62 & 0xFFFFFFFFFFFFC000)) / 4;
      v89 = v67;
      v66 = ((unsigned __int16)((_WORD)v89 << 6) | (unsigned __int16)(v89 >> 6)) & 0xFFF;
      v55 = ((unint64_t)v62 & 0xFFFFFFFFFC000000)
          + ((unint64_t)(((unsigned __int16)((_WORD)v89 << 6) | (unsigned __int16)(v89 >> 6)) & 0xFFF) << 14);
    }
    v82 = v55;
    v81 = v61;
    v80 = v54;
    v91 = v61;
    v53 = (_QWORD *)(v55 + (int)(16 * (v61 + 1) * v54));
  }
  if (v52)
  {
    v42 = v53;
    v41 = 0;
    v40 = 0;
    v39 = *v53;
    v40 = v39;
    v38 = v39;
    v41 = v39;
    if ((_QWORD *)(v39 ^ *(_QWORD *)(v63 + 28696)) != v53)
      *v59 = 1;
  }
  v64 = v53;
LABEL_47:
  v17 = (uint64_t)v64;
  if (!v64 || (v18 & 1) != 0)
    return nanov2_allocate_outlined(v31, v23, v30, v25, v24, v26, v17, v29 & 1, v28 & 1, v27);
  if ((v29 & 1) != 0 && malloc_zero_policy)
  {
    v35 = v64;
    v34 = v30;
    _platform_bzero(v64, v30);
  }
  else
  {
    *v64 = 0;
    *(_QWORD *)(v17 + 8) = 0;
  }
  return (_QWORD *)v17;
}

_QWORD *nanov2_realloc(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;

  if (!a2)
    return nanov2_malloc(a1, a3);
  v7 = *(_QWORD *)(a1 + 28704);
  v6 = nanov2_pointer_size((_QWORD *)a1, (unint64_t)a2, 0);
  if (!v6)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, unint64_t))(v7 + 56))(v7, a2, a3);
  if (a3 > 0x100)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(v7 + 24))(v7, a3);
    if (!v5)
      return 0;
    goto LABEL_22;
  }
  if (!a3)
  {
    nanov2_free((os_unfair_lock_s *)a1, a2);
    return nanov2_malloc(a1, 0);
  }
  v4 = _nano_common_good_size(a3);
  if (v4 > v6 || v4 <= v6 / 2)
  {
    v5 = nanov2_malloc(a1, v4);
    if (!v5)
      return 0;
LABEL_22:
    if (v6 >= a3)
      _platform_memmove(v5, a2, a3);
    else
      _platform_memmove(v5, a2, v6);
    nanov2_free((os_unfair_lock_s *)a1, a2);
    return v5;
  }
  if (a3 != v6)
  {
    if (a3 >= v6)
    {
      __break(1u);
      JUMPOUT(0x3FB70);
    }
    if ((*(_DWORD *)(a1 + 28676) & 0x20) != 0)
      _platform_memset((char *)a2 + a3, 85, v6 - a3);
  }
  return a2;
}

_QWORD *nanov2_realloc_type(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;

  if (!a2)
    return nanov2_malloc_type(a1, a3, a4);
  v8 = *(_QWORD *)(a1 + 28704);
  v7 = nanov2_pointer_size((_QWORD *)a1, (unint64_t)a2, 0);
  if (!v7)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, unint64_t, uint64_t))(v8 + 176))(v8, a2, a3, a4);
  if (a3 > 0x100)
  {
    v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v8 + 160))(v8, a3, a4);
    if (!v6)
      return 0;
    goto LABEL_22;
  }
  if (!a3)
  {
    nanov2_free((os_unfair_lock_s *)a1, a2);
    return nanov2_malloc(a1, 0);
  }
  v5 = _nano_common_good_size(a3);
  if (v5 > v7 || v5 <= v7 / 2)
  {
    v6 = nanov2_malloc_type(a1, v5, a4);
    if (!v6)
      return 0;
LABEL_22:
    if (v7 >= a3)
      _platform_memmove(v6, a2, a3);
    else
      _platform_memmove(v6, a2, v7);
    nanov2_free((os_unfair_lock_s *)a1, a2);
    return v6;
  }
  if (a3 != v7)
  {
    if (a3 >= v7)
    {
      __break(1u);
      JUMPOUT(0x3FEFCLL);
    }
    if ((*(_DWORD *)(a1 + 28676) & 0x20) != 0)
      _platform_memset((char *)a2 + a3, 85, v7 - a3);
  }
  return a2;
}

BOOL nanov2_claimed_address(_QWORD *a1, unint64_t a2)
{
  BOOL v3;

  v3 = 1;
  if (!nanov2_pointer_size(a1, a2, 1))
    return malloc_zone_claimed_address(a1[3588], a2) != 0;
  return v3;
}

uint64_t nanov2_pointer_size(_QWORD *a1, unint64_t a2, int a3)
{
  BOOL v4;
  unsigned int v5;
  int v6;

  if (a2 >> 29 != 24)
    return 0;
  if (!a3 && (a2 & 0xF) != 0)
    return 0;
  if (a2 < a1[3590] || a2 > a1[3591])
    return 0;
  v6 = ptr_offset_to_size_class[((a2 >> 14) & 0xFFF ^ a1[3585]) >> 6];
  v5 = *(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                 + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF));
  v4 = 0;
  if ((v5 & 0x7FF) != 0)
  {
    v4 = 0;
    if ((*(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                    + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF)) & 0x7FF) != 0x7FE)
    {
      v4 = 0;
      if ((*(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                      + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF)) & 0x7FF) != 0x7FF)
        v4 = (*(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                        + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF)) & 0x7FF) != 2042;
    }
  }
  if (!v4
    || (*(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                  + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF)) & 0x7FF) != 0x7FC
    && ((v5 >> 11) & 0x3FF) == slots_by_size_class[v6] - 1)
  {
    return 0;
  }
  if (!a3 && (a2 & 0x3FFF) % (16 * (v6 + 1)))
    return 0;
  if ((*(_QWORD *)a2 ^ a1[3587]) == a2)
    return 0;
  return 16 * (v6 + 1);
}

uint64_t nanov2_batch_malloc(uint64_t a1, unint64_t a2, _QWORD *a3, unsigned int a4)
{
  _QWORD *v4;
  _QWORD *v6;
  unint64_t v7;
  unsigned int v8;

  v8 = 0;
  v7 = _nano_common_good_size(a2);
  if (v7 > 0x100)
    return (v8
                        + (*(uint64_t (**)(_QWORD, unint64_t, _QWORD *, _QWORD))(*(_QWORD *)(a1 + 28704)
                                                                                                + 80))(*(_QWORD *)(a1 + 28704), a2, a3, a4 - v8));
  while (v8 < a4)
  {
    v6 = nanov2_malloc(a1, v7);
    if (!v6)
      break;
    v4 = a3++;
    *v4 = v6;
    ++v8;
  }
  if (v8 == a4)
    return v8;
  else
    return (v8
                        + (*(uint64_t (**)(_QWORD, unint64_t, _QWORD *, _QWORD))(*(_QWORD *)(a1 + 28704)
                                                                                                + 80))(*(_QWORD *)(a1 + 28704), a2, a3, a4 - v8));
}

void nanov2_batch_free(os_unfair_lock_s *a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v4;
  unsigned int v5;

  v5 = a3;
  if (a3)
  {
    while (v5--)
    {
      v4 = *(_QWORD **)(a2 + 8 * v5);
      if (v4)
        nanov2_free(a1, v4);
    }
  }
}

_QWORD *nanov2_memalign(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 > 0x10)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(*(_QWORD *)(a1 + 28704)
                                                                                           + 112))(*(_QWORD *)(a1 + 28704), a2, a3);
  else
    return nanov2_malloc(a1, a3);
}

_QWORD *nanov2_memalign_type(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 > 0x10)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, unint64_t, uint64_t))(*(_QWORD *)(a1 + 28704) + 184))(*(_QWORD *)(a1 + 28704), a2, a3, a4);
  else
    return nanov2_malloc_type(a1, a3, a4);
}

unint64_t nanov2_pressure_relief(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unsigned int i;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v15;
  unint64_t v16;

  if (nanov2_madvise_policy != 1 && nanov2_madvise_policy != 2)
    return 0;
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855769129, a1, a2, 0);
  v11 = 0;
  v10 = *(_QWORD *)(a1 + 28720);
  v9 = ((unsigned __int16)((unsigned __int16)*(_QWORD *)(a1 + 28680) << 6) | (unsigned __int16)(*(_QWORD *)(a1 + 28680) >> 6)) & 0xFFF;
  v2 = atomic_load((unint64_t *)(a1 + 28728));
  v8 = v2;
  while (v10)
  {
    v7 = v10;
    if (v10 == ((v8 - 1) & 0xFFFFFFFFE0000000))
      v15 = v8;
    else
      v15 = v10 + 0x20000000;
    while (v7 < v15)
    {
      v6 = (unsigned int *)(v7 & 0xFFFFFFFFFC000000 ^ *(_QWORD *)(a1 + 28688));
      os_unfair_lock_lock_with_options(a1 + 28736, 327680);
      for (i = 0; i < 0x1000; ++i)
      {
        if (i != v9
          && (*v6 & 0x7FF) == 0x7FD
          && nanov2_madvise_block_locked((os_unfair_lock_s *)a1, v6, v7+ ((unint64_t)(((unsigned __int16)((_WORD)i << 6) | (unsigned __int16)(i >> 6)) & 0xFFF) << 14), ptr_offset_to_size_class[(((v7+ ((unint64_t)(((unsigned __int16)((_WORD)i << 6) | (unsigned __int16)(i >> 6)) & 0xFFF) << 14)) >> 14) & 0xFFF ^ *(_QWORD *)(a1 + 28680)) >> 6], 2045))
        {
          v11 += 0x4000;
        }
        ++v6;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 28736));
      if (a2 && v11 >= a2)
        goto LABEL_29;
      v7 += 0x4000000;
    }
    if (*(_WORD *)((v10 & 0xFFFFFFFFFC000000 ^ *(_QWORD *)(a1 + 28688))
                  + 4
                  * (((unsigned __int16)((unsigned __int16)*(_QWORD *)(a1 + 28680) << 6) | (unsigned __int16)(*(_QWORD *)(a1 + 28680) >> 6)) & 0xFFF)))
    {
      if (v10
         + ((unint64_t)*(unsigned __int16 *)((v10 & 0xFFFFFFFFFC000000 ^ *(_QWORD *)(a1 + 28688))
                                                  + 4
                                                  * (((unsigned __int16)((unsigned __int16)*(_QWORD *)(a1 + 28680) << 6) | (unsigned __int16)(*(_QWORD *)(a1 + 28680) >> 6)) & 0xFFF)) << 29) >= v8)
        v4 = 0;
      else
        v4 = v10
           + ((unint64_t)*(unsigned __int16 *)((v10 & 0xFFFFFFFFFC000000 ^ *(_QWORD *)(a1 + 28688))
                                                    + 4
                                                    * (((unsigned __int16)((unsigned __int16)*(_QWORD *)(a1 + 28680) << 6) | (unsigned __int16)(*(_QWORD *)(a1 + 28680) >> 6)) & 0xFFF)) << 29);
      v16 = v4;
    }
    else
    {
      v16 = 0;
    }
    v10 = v16;
  }
LABEL_29:
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855769130, a1, a2, v11);
  return v11;
}

uint64_t nanov2_madvise_block_locked(os_unfair_lock_s *a1, unsigned int *a2, uint64_t a3, int a4, int a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  os_unfair_lock_assert_owner(a1 + 7184);
  v20 = 0;
  v19 = *a2;
  if ((*a2 & 0x7FF) != a5)
    return v20;
  v18 = (((((v19 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFF801 | 0x7FE;
  do
    v5 = __ldaxr(a2);
  while (v5 == v19 && __stlxr((((((v19 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFF801 | 0x7FE, a2));
  if (v5 == v19)
  {
    if (mvm_madvise_free((uint64_t)a1, a3 & 0xFFFFFFFFE0000000, (void *)a3, a3 + 0x4000, 0, 0))
    {
      __error();
      malloc_zone_error(0, 0, (uint64_t)"Failed to madvise block at blockp: %p, error: %d\n", v11, v12, v13, v14, v15, a3);
    }
    else
    {
      ++*(_QWORD *)&a1[8 * a4 + 7192]._os_unfair_lock_opaque;
      v20 = 1;
    }
    do
      v16 = __ldaxr(a2);
    while (v16 == v18 && __stlxr((((((v18 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFF800 | 0x7FF, a2));
    if (v16 != v18)
      malloc_zone_error(a1[7169]._os_unfair_lock_opaque, 0, (uint64_t)"Failed when changing state from MADVISING to MADVISED, block_metap = %p, blockp = %p\n", v6, v7, v8, v9, v10, (uint64_t)a2);
    return v20;
  }
  ++*(_QWORD *)&a1[8 * a4 + 7194]._os_unfair_lock_opaque;
  return 0;
}

uint64_t nanov2_allocate_new_region()
{
  return 0;
}

uint64_t nanov2_find_block_and_allocate(uint64_t a1, unsigned int a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  __int16 v37;
  BOOL v38;
  int v39;
  int v40;
  BOOL v41;
  unint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  unsigned int *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  unint64_t new_region;
  unint64_t v58;
  unint64_t v59;
  unsigned __int16 v60;
  unint64_t v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int *v72;
  int64_t v73;
  unsigned int v74;
  int v75;
  int v76;
  unint64_t v77;
  int v78;
  unsigned int *v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unsigned int *v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unsigned int v118;
  unsigned int v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  unint64_t v128;
  int v129;
  unint64_t v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int v136;
  unint64_t v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  unint64_t v142;
  int *v143;
  int64_t v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  int v150;
  unsigned int v151;
  unint64_t v152;
  uint64_t v153;
  int64_t v154;
  unsigned int v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  void *v160;
  unint64_t v161;
  int v162;
  unsigned int v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unsigned int v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  void *v173;
  unint64_t v174;
  int v175;
  _BOOL4 v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unsigned int v182;
  unint64_t v183;
  uint64_t v184;

  v52 = *a3;
  v51 = *a3;
  if (*a3)
    new_region = (unint64_t)v52 & 0xFFFFFFFFFC000000;
  else
    new_region = *(_QWORD *)(a1 + 28720) & 0xFFFFFFFFFC000000;
LABEL_4:
  while (2)
  {
    v50 = new_region & 0xFFFFFFFFE0000000;
    v49 = new_region;
    v48 = new_region & 0xFFFFFFFFE0000000;
    v8 = atomic_load((unint64_t *)(a1 + 28728));
    v47 = v8;
    v120 = v8;
    v121 = v8 - 1;
    if (v50 == ((v8 - 1) & 0xFFFFFFFFE0000000))
      v59 = v8;
    else
      v59 = v50 + 0x20000000;
    v46 = v59;
    while (1)
    {
      v82 = a1;
      v81 = new_region;
      v80 = a2;
      v79 = v52;
      v78 = 0;
      v41 = 1;
      if (v52)
        v41 = nanov2_policy_config == 0;
      v78 = v41;
      v77 = 0;
      v132 = v82;
      v131 = v80;
      v130 = v81;
      v129 = 0;
      v129 = first_block_offset_by_size_class[v80];
      v128 = 0;
      v134 = v82;
      v133 = v81;
      v135 = v81;
      v138 = v82;
      v137 = v81 & 0xFFFFFFFFFC000000;
      v128 = v81 & 0xFFFFFFFFFC000000 ^ *(_QWORD *)(v82 + 28688);
      v127 = 0;
      v127 = v129 ^ *(_QWORD *)(v82 + 28680);
      v136 = v127;
      v126 = ((unsigned __int16)((_WORD)v127 << 6) | (unsigned __int16)(v127 >> 6)) & 0xFFF;
      v77 = v128 + 4 * (((unsigned __int16)((_WORD)v127 << 6) | (unsigned __int16)(v127 >> 6)) & 0xFFF);
      v76 = 0;
      if (!v79)
        v79 = (unsigned int *)v77;
      v75 = 0;
      v75 = slots_by_size_class[v80];
      v74 = 0;
      v73 = 0;
      v72 = 0;
      v71 = 0;
      v70 = 0;
      v69 = 0;
      v68 = 0;
      v67 = 0;
      while (1)
      {
        v73 = (int64_t)v79;
        v72 = 0;
        v71 = 0;
        v70 = 0;
        v69 = 0;
        v68 = 0;
        v67 = dword_9C0DC;
        v76 = 1;
        do
        {
          v66 = 0;
          v65 = *(_DWORD *)v73;
          v66 = v65;
          v74 = v65;
          if (v65 >= 0 && (v74 & 0x7FF) != 0x7FC && (v74 & 0x7FF) != 0x7FE)
          {
            if ((v74 & 0x7FF) == 0x7FD)
            {
              if (!v71)
                v71 = (unsigned int *)v73;
            }
            else if ((v74 & 0x7FF) != 0 && (v74 & 0x7FF) != 0x7FF)
            {
              if (v78)
              {
                v72 = (unsigned int *)v73;
              }
              else
              {
                if (nanov2_policy_config != 1)
                {
                  __break(1u);
                  JUMPOUT(0x415E4);
                }
                v64 = (int)(100 * ((v74 >> 11) & 0x3FF)) / v75;
                if (v64 < dword_9C0D4 || v64 > dword_9C0D8)
                {
                  if (v64 < dword_9C0D4)
                  {
                    if (v69 || v64 >= dword_9C0D4)
                    {
                      if (!v70)
                        v70 = (unsigned int *)v73;
                    }
                    else
                    {
                      v69 = (unsigned int *)v73;
                      v68 = 1;
                    }
                  }
                  else if (!v69 || v68)
                  {
                    v69 = (unsigned int *)v73;
                  }
                }
                else
                {
                  v72 = (unsigned int *)v73;
                }
              }
            }
            else if (!v70)
            {
              v70 = (unsigned int *)v73;
            }
            if (v78 && (v72 || v69 || v70))
              break;
          }
          if (v67 > 0 && (v69 || v70) && !--v67)
            break;
          if (v76)
          {
            v63 = 0;
            v146 = v82;
            v145 = v80;
            v144 = v73;
            v143 = &v63;
            v142 = v73 & 0xFFFFFFFFFFFFC000;
            v141 = (uint64_t)(v73 - (v73 & 0xFFFFFFFFFFFFC000)) / 4;
            v147 = v141;
            v140 = ((unsigned __int16)((unsigned __int16)((uint64_t)(v73 - (v73 & 0xFFFFFFFFFFFFC000)) / 4) << 6) | (unsigned __int16)(v141 >> 6)) & 0xFFF;
            v140 ^= *(_QWORD *)(v82 + 28680);
            v139 = 0;
            v139 = first_block_offset_by_size_class[v80];
            if (&v63)
              *v143 = v140 == v139;
            if (v140 == v139)
              v40 = last_block_offset_by_size_class[v145];
            else
              v40 = v140 - 1;
            v140 = v40;
            v140 = v40 ^ *(_QWORD *)(v146 + 28680);
            v148 = v140;
            v141 = ((unsigned __int16)((_WORD)v140 << 6) | (unsigned __int16)(v140 >> 6)) & 0xFFF;
            if (v63)
            {
              v67 = dword_9C0DC;
              v76 = 0;
              v73 = (int64_t)v79;
            }
            else
            {
              v73 = v142 + 4 * (((unsigned __int16)((_WORD)v140 << 6) | (unsigned __int16)(v140 >> 6)) & 0xFFF);
            }
          }
          else
          {
            v156 = v82;
            v155 = v80;
            v154 = v73;
            v153 = 0;
            v152 = v73 & 0xFFFFFFFFFFFFC000;
            v151 = (uint64_t)(v73 - (v73 & 0xFFFFFFFFFFFFC000)) / 4;
            v157 = v151;
            v150 = ((unsigned __int16)((_WORD)v157 << 6) | (unsigned __int16)(v157 >> 6)) & 0xFFF;
            v150 ^= *(_QWORD *)(v82 + 28680);
            v149 = 0;
            v149 = last_block_offset_by_size_class[v80];
            if (v150 == v149)
              v39 = first_block_offset_by_size_class[v155];
            else
              v39 = v150 + 1;
            v150 = v39;
            v150 = v39 ^ *(_QWORD *)(v156 + 28680);
            v158 = v150;
            v151 = ((unsigned __int16)((_WORD)v158 << 6) | (unsigned __int16)(v158 >> 6)) & 0xFFF;
            v73 = v152 + 4 * (((unsigned __int16)((_WORD)v158 << 6) | (unsigned __int16)(v158 >> 6)) & 0xFFF);
            if ((unsigned int *)v73 == v79)
              break;
          }
        }
        while (!v72);
        if (!v72)
        {
          if (v69)
          {
            v72 = v69;
          }
          else if (v70)
          {
            v72 = v70;
          }
          else if (v71)
          {
            v72 = v71;
          }
        }
        if (!v72)
          break;
        v74 = *v72;
        if ((v74 & 0x7FF) != 0x7FE)
        {
          v38 = 1;
          if ((v74 & 0x7FF) != 0)
          {
            v38 = 1;
            if ((v74 & 0x7FF) != 0x7FD)
              v38 = (v74 & 0x7FF) == 2047;
          }
          if (v38)
            v37 = 2043;
          else
            v37 = v74 & 0x7FF;
          if (v38)
            LOWORD(v36) = v75 - 1;
          else
            v36 = (v74 >> 11) & 0x3FF;
          if (v38)
            LOWORD(v35) = 0;
          else
            v35 = ((v74 >> 21) & 0x3FF) + 1;
          v62 = v74;
          v9 = v72;
          v10 = v74;
          do
            v11 = __ldaxr(v9);
          while (v11 == v10
               && __stlxr(v37 & 0x7FF | ((v36 & 0x3FF) << 11) & 0x1FFFFF | ((v35 & 0x3FF) << 21) & 0x7FFFFFFF | 0x80000000, v9));
          if (v11 != v10)
            v62 = v11;
          v74 = v62;
          if (v11 == v10)
            break;
        }
      }
      v45 = v72;
      if (v72)
        break;
      v52 = 0;
      new_region += 0x4000000;
      if (new_region >= v46)
      {
        v113 = a1;
        v112 = v48;
        v111 = 0;
        v116 = a1;
        v115 = v48;
        v117 = v48;
        v125 = a1;
        v124 = v48 & 0xFFFFFFFFFC000000;
        v111 = v48 & 0xFFFFFFFFFC000000 ^ *(_QWORD *)(a1 + 28688);
        v114 = a1;
        v118 = *(_QWORD *)(a1 + 28680);
        v60 = *(_WORD *)(v111 + 4 * (((unsigned __int16)((_WORD)v118 << 6) | (unsigned __int16)(v118 >> 6)) & 0xFFF));
        if (v60)
        {
          if (v48 + ((unint64_t)v60 << 29) >= v47)
            v30 = 0;
          else
            v30 = v48 + ((unint64_t)v60 << 29);
          v61 = v30;
        }
        else
        {
          v61 = 0;
        }
        v48 = v61;
        if (!v61)
          v48 = *(_QWORD *)(a1 + 28720);
        new_region = v48;
        v122 = v47;
        v123 = v47 - 1;
        if (v48 == ((v47 - 1) & 0xFFFFFFFFE0000000))
          v58 = v47;
        else
          v58 = v48 + 0x20000000;
        v46 = v58;
      }
      if (new_region == v49)
      {
        if (((unsigned __int16)word_9C0E0 & (1 << a2)) != 0)
          return 0;
        v43 = 0;
        os_unfair_lock_lock_with_options(a1 + 28716, 327680);
        v42 = *(_QWORD *)(a1 + 28728);
        if (v42 == v47)
        {
          v105 = *(_QWORD *)(a1 + 28728);
          v106 = v42;
          if (v42 == (v42 & 0xFFFFFFFFE0000000))
          {
            new_region = nanov2_allocate_new_region();
            v43 = new_region == 0;
          }
          else
          {
            new_region = v42;
            *(_QWORD *)(a1 + 28728) = v42 + 0x4000000;
          }
          if (!v43)
          {
            v109 = a1;
            v108 = new_region;
            if ((*(_DWORD *)(a1 + 28676) & 7) != 0)
            {
              v107 = 0;
              v110 = v109;
              v119 = *(_QWORD *)(v109 + 28680);
              v107 = ((unsigned __int16)((_WORD)v119 << 6) | (unsigned __int16)(v119 >> 6)) & 0xFFF;
              v178 = v109;
              v177 = v108;
              v176 = (((unsigned __int16)((_WORD)v119 << 6) | (unsigned __int16)(v119 >> 6)) & 0xFFF) == 0;
              v182 = v176;
              v175 = ((unsigned __int16)((_WORD)v182 << 6) | (unsigned __int16)(v182 >> 6)) & 0xFFF;
              v174 = 0;
              v180 = v109;
              v179 = v108;
              v181 = v108;
              v184 = v109;
              v183 = v108 & 0xFFFFFFFFFC000000;
              v174 = v108 & 0xFFFFFFFFFC000000 ^ *(_QWORD *)(v109 + 28688);
              *(_DWORD *)(v174 + 4 * (((v176 << 6) | (v176 >> 6)) & 0xFFF)) = nanov2_create_guard_block_in_use_block;
              v173 = (void *)(v177 + ((unint64_t)v176 << 14));
              v172 = 0;
              v172 = mprotect(v173, 0x4000uLL, 1);
              if (v172)
                malloc_report(3, (uint64_t)"Failed to create guard block at %p (%d)\n", v16, v17, v18, v19, v20, v21, (uint64_t)v173);
              if (v107 == 4095)
                v22 = 4094;
              else
                v22 = 4095;
              v165 = v109;
              v164 = v108;
              v163 = v22;
              v169 = v22;
              v162 = ((unsigned __int16)((_WORD)v169 << 6) | (unsigned __int16)(v169 >> 6)) & 0xFFF;
              v161 = 0;
              v167 = v109;
              v166 = v108;
              v168 = v108;
              v171 = v109;
              v170 = v108 & 0xFFFFFFFFFC000000;
              v161 = v108 & 0xFFFFFFFFFC000000 ^ *(_QWORD *)(v109 + 28688);
              *(_DWORD *)(v161 + 4 * (((unsigned __int16)((_WORD)v22 << 6) | (unsigned __int16)(v22 >> 6)) & 0xFFF)) = nanov2_create_guard_block_in_use_block;
              v160 = (void *)(v164 + ((unint64_t)v163 << 14));
              v159 = 0;
              v159 = mprotect(v160, 0x4000uLL, 1);
              if (v159)
                malloc_report(3, (uint64_t)"Failed to create guard block at %p (%d)\n", v23, v24, v25, v26, v27, v28, (uint64_t)v160);
            }
          }
        }
        else
        {
          new_region = v42 - 0x4000000;
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 28716));
        if (!v43)
        {
          v52 = 0;
          goto LABEL_4;
        }
        return 0;
      }
    }
    v44 = nanov2_allocate_from_block((os_unfair_lock_s *)a1, v72, a2, a4, a5, a6, a7, a8);
    if (!v44)
    {
      v93 = v45;
      v91 = nanov2_turn_off_in_use_mask;
      v90 = nanov2_turn_off_in_use_mask;
      v92 = nanov2_turn_off_in_use_mask;
      v88 = 0;
      v86 = nanov2_turn_off_in_use_mask;
      v85 = nanov2_turn_off_in_use_mask;
      v87 = nanov2_turn_off_in_use_mask;
      v31 = nanov2_turn_off_in_use_mask;
      v32 = *v45;
      do
      {
        v14 = v32;
        do
          v15 = __ldaxr(v45);
        while (v15 == v32 && __stlxr(v32 & v31, v45));
        v32 = v15;
      }
      while (v15 != v14);
      v84 = v15;
      v88 = v15;
      v83 = v15;
      v89 = v15 & v92;
      v52 = v45;
      continue;
    }
    break;
  }
  *a3 = v45;
  if (v51)
  {
    v104 = v51;
    v102 = nanov2_turn_off_in_use_mask;
    v101 = nanov2_turn_off_in_use_mask;
    v103 = nanov2_turn_off_in_use_mask;
    v99 = 0;
    v97 = nanov2_turn_off_in_use_mask;
    v96 = nanov2_turn_off_in_use_mask;
    v98 = nanov2_turn_off_in_use_mask;
    v33 = nanov2_turn_off_in_use_mask;
    v34 = *v51;
    do
    {
      v12 = v34;
      do
        v13 = __ldaxr(v51);
      while (v13 == v34 && __stlxr(v34 & v33, v51));
      v34 = v13;
    }
    while (v13 != v12);
    v95 = v13;
    v99 = v13;
    v94 = v13;
    v100 = v13 & v103;
  }
  return v44;
}

uint64_t nanov2_allocate_from_block(os_unfair_lock_s *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int16 v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  unsigned int *v18;
  int v19;
  unsigned int *v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _BOOL4 v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  _BOOL4 v31;
  unsigned int v32;
  _QWORD *v33;
  _BOOL4 v34;
  unsigned int v35;
  int v36;
  _QWORD *v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  char *v43;
  unsigned int **v44;
  int v45;
  unsigned int *v46;
  os_unfair_lock_s *v47;
  _QWORD *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int *v54;
  os_unfair_lock_s *v55;
  unsigned int *v56;
  int v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int *v61;
  os_unfair_lock_s *v62;
  unsigned int *v63;
  int v64;
  int v65;
  unint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  int v75;

  v21 = a1;
  v20 = a2;
  v19 = a3;
  v18 = 0;
  v17 = 0;
  v47 = a1;
  v46 = a2;
  v45 = a3;
  v44 = &v18;
  v43 = &v17;
  v42 = 0;
  v41 = 0;
  v40 = *a2;
  v41 = v40;
  v42 = v40;
  v39 = 0;
  while (1)
  {
    v49 = v42;
    v15 = 0;
    if ((v42 & 0x80000000) != 0)
      v15 = (v49 & 0x7FF) != 2044;
    if (!v15)
    {
      v48 = 0;
      goto LABEL_37;
    }
    v38 = 0;
    v37 = 0;
    v36 = 0;
    v35 = (((((v42 >> 11) & 0x3FF) - 1) & 0x3FF) << 11) & 0x1FFFFF | (((((v42 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFFFFF | 0x80000000;
    v34 = ((v42 >> 11) & 0x3FF) == 0;
    if ((v42 & 0x7FF) == 0x7FB || (v42 & 0x7FF) == 0x7FD)
    {
      v8 = v34 ? 2044 : 2043;
      v35 = v35 & 0xFFFFF800 | v8;
      v38 = slots_by_size_class[v45] - ((v42 >> 11) & 0x3FF) - 1;
    }
    else
    {
      v36 = 1;
      if (!v39)
      {
        v62 = v47;
        v61 = v46;
        v70 = v46;
        v60 = (unint64_t)v46 & 0xFFFFFFFFFFFFC000;
        v63 = v46;
        v59 = (unint64_t)v46 & 0xFFFFFFFFFC000000;
        v58 = (uint64_t)((uint64_t)v46 - ((unint64_t)v46 & 0xFFFFFFFFFFFFC000)) / 4;
        v72 = v58;
        v57 = ((unsigned __int16)((_WORD)v72 << 6) | (unsigned __int16)(v72 >> 6)) & 0xFFF;
        v39 = ((unint64_t)v46 & 0xFFFFFFFFFC000000)
            + ((unint64_t)(((unsigned __int16)((_WORD)v72 << 6) | (unsigned __int16)(v72 >> 6)) & 0xFFF) << 14);
      }
      v38 = (v42 & 0x7FF) - 1;
      v69 = v39;
      v68 = v45;
      v67 = v38;
      v74 = v45;
      v37 = (_QWORD *)(v39 + 16 * (v45 + 1) * v38);
      v33 = v37;
      v14 = v34 ? 2044 : v33[1];
      v35 = v35 & 0xFFFFF800 | v14 & 0x7FF;
    }
    v32 = v42;
    v31 = 0;
    v9 = v46;
    v29 = v35;
    v30 = v35;
    v10 = v42;
    v11 = v35;
    do
      v12 = __ldaxr(v9);
    while (v12 == v10 && __stlxr(v11, v9));
    if (v12 != v10)
      v32 = v12;
    v28 = v12 == v10;
    v31 = v12 == v10;
    v42 = v32;
    v27 = v31;
    if (v12 == v10)
      break;
    if ((v42 & 0x7FF) == 0x7FD || (v42 & 0x7FF) == 0x7FE || (v42 & 0x7FF) == 0x7FF)
    {
      *v44 = v46;
      v48 = 0;
      goto LABEL_37;
    }
  }
  if (!v37)
  {
    if (!v39)
    {
      v55 = v47;
      v54 = v46;
      v71 = v46;
      v53 = (unint64_t)v46 & 0xFFFFFFFFFFFFC000;
      v56 = v46;
      v52 = (unint64_t)v46 & 0xFFFFFFFFFC000000;
      v51 = (uint64_t)((uint64_t)v46 - ((unint64_t)v46 & 0xFFFFFFFFFFFFC000)) / 4;
      v73 = v51;
      v50 = ((unsigned __int16)((_WORD)v73 << 6) | (unsigned __int16)(v73 >> 6)) & 0xFFF;
      v39 = ((unint64_t)v46 & 0xFFFFFFFFFC000000)
          + ((unint64_t)(((unsigned __int16)((_WORD)v73 << 6) | (unsigned __int16)(v73 >> 6)) & 0xFFF) << 14);
    }
    v66 = v39;
    v65 = v45;
    v64 = v38;
    v75 = v45;
    v37 = (_QWORD *)(v39 + 16 * (v45 + 1) * v38);
  }
  if (v36)
  {
    v26 = v37;
    v25 = 0;
    v24 = 0;
    v23 = *v37;
    v24 = v23;
    v22 = v23;
    v25 = v23;
    if ((_QWORD *)(v23 ^ *(_QWORD *)&v47[7174]._os_unfair_lock_opaque) != v37)
      *v43 = 1;
  }
  v48 = v37;
LABEL_37:
  v16 = (uint64_t)v48;
  if ((v17 & 1) != 0)
    nanov2_guard_corruption_detected((uint64_t)v48, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v18)
    nanov2_madvise_block(v21, v18, v19, 2047);
  return v16;
}

void *nanov2_create_zone(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  void *based_pages;
  int v29;
  void *v30;
  void *v31;

  if (_malloc_engaged_nano != 2)
  {
    __break(1u);
    JUMPOUT(0x42DA8);
  }
  based_pages = (void *)nano_common_allocate_based_pages((vm_page_mask + 29264) & ~(_DWORD)vm_page_mask, 0, 0, 1, 0);
  if (based_pages)
  {
    *((_DWORD *)based_pages + 26) = 16;
    *((_QWORD *)based_pages + 2) = nanov2_size;
    if (malloc_zero_policy == 2)
    {
      *((_QWORD *)based_pages + 3) = nanov2_malloc_zero_on_alloc;
      *((_QWORD *)based_pages + 20) = nanov2_malloc_type_zero_on_alloc;
    }
    else
    {
      *((_QWORD *)based_pages + 3) = nanov2_malloc;
      *((_QWORD *)based_pages + 20) = nanov2_malloc_type;
    }
    *((_QWORD *)based_pages + 4) = nanov2_calloc;
    *((_QWORD *)based_pages + 5) = nanov2_valloc;
    *((_QWORD *)based_pages + 6) = nanov2_free;
    *((_QWORD *)based_pages + 7) = nanov2_realloc;
    *((_QWORD *)based_pages + 8) = nanov2_destroy;
    *((_QWORD *)based_pages + 10) = nanov2_batch_malloc;
    *((_QWORD *)based_pages + 11) = nanov2_batch_free;
    *((_QWORD *)based_pages + 12) = nanov2_introspect;
    *((_QWORD *)based_pages + 14) = nanov2_memalign;
    *((_QWORD *)based_pages + 15) = nanov2_free_definite_size;
    *((_QWORD *)based_pages + 16) = nanov2_pressure_relief;
    *((_QWORD *)based_pages + 17) = nanov2_claimed_address;
    *((_QWORD *)based_pages + 18) = nanov2_try_free_default;
    *((_QWORD *)based_pages + 21) = nanov2_calloc_type;
    *((_QWORD *)based_pages + 22) = nanov2_realloc_type;
    *((_QWORD *)based_pages + 23) = nanov2_memalign_type;
    *(_QWORD *)based_pages = 0;
    *((_QWORD *)based_pages + 1) = 0;
    mprotect(based_pages, 0xC8uLL, 1);
    *((_DWORD *)based_pages + 7169) = a2;
    *((_QWORD *)based_pages + 3588) = a1;
    v24 = malloc_entropy[0] & 0xFFFFFFFF0000;
    if ((malloc_entropy[0] & 0xFFFFFFFF0000) == 0)
    {
      v24 = qword_A8220 & 0xFFFFFFFF0000;
      if ((qword_A8220 & 0xFFFFFFFF0000) == 0)
        v24 = 0xDEADDEAD0000;
    }
    *((_QWORD *)based_pages + 3587) = v24;
    *((_QWORD *)based_pages + 3585) = (unint64_t)qword_A8220 >> 52;
    *((_QWORD *)based_pages + 3586) = *((_QWORD *)based_pages + 3585) << 14;
    *((_DWORD *)based_pages + 7178) = 0;
    *((_DWORD *)based_pages + 7179) = 0;
    *((_DWORD *)based_pages + 7184) = 0;
    if (nanov2_allocate_region(0x300000000uLL))
    {
      *(_WORD *)((*((_QWORD *)based_pages + 3586) ^ 0x300000000)
               + 4
               * (((unsigned __int16)((unsigned __int16)*((_QWORD *)based_pages + 3585) << 6) | (unsigned __int16)(*((_QWORD *)based_pages + 3585) >> 6)) & 0xFFF)) = 0;
      *((_QWORD *)based_pages + 3590) = 0x300000000;
      atomic_store(0x304000000uLL, (unint64_t *)based_pages + 3591);
      *((_DWORD *)based_pages + 7186) = 1;
      if ((*((_DWORD *)based_pages + 7169) & 7) != 0)
      {
        v29 = ((unsigned __int16)((unsigned __int16)*((_QWORD *)based_pages + 3585) << 6) | (unsigned __int16)(*((_QWORD *)based_pages + 3585) >> 6)) & 0xFFF;
        v8 = (((unsigned __int16)((unsigned __int16)*((_QWORD *)based_pages + 3585) << 6) | (unsigned __int16)(*((_QWORD *)based_pages + 3585) >> 6)) & 0xFFF) == 0;
        *(_DWORD *)((*((_QWORD *)based_pages + 3586) ^ 0x300000000)
                  + 4 * (((v8 << 6) | (v8 >> 6)) & 0xFFF)) = nanov2_create_guard_block_in_use_block;
        v31 = (void *)(((unint64_t)v8 << 14) + 0x300000000);
        if (mprotect(v31, 0x4000uLL, 1))
          malloc_report(3, (uint64_t)"Failed to create guard block at %p (%d)\n", v9, v10, v11, v12, v13, v14, (uint64_t)v31);
        if (v29 == 4095)
          v15 = 4094;
        else
          v15 = 4095;
        *(_DWORD *)((*((_QWORD *)based_pages + 3586) ^ 0x300000000)
                  + 4 * (((unsigned __int16)((_WORD)v15 << 6) | (unsigned __int16)(v15 >> 6)) & 0xFFF)) = nanov2_create_guard_block_in_use_block;
        v30 = (void *)(((unint64_t)v15 << 14) + 0x300000000);
        if (mprotect(v30, 0x4000uLL, 1))
          malloc_report(3, (uint64_t)"Failed to create guard block at %p (%d)\n", v16, v17, v18, v19, v20, v21, (uint64_t)v30);
      }
      return based_pages;
    }
    else
    {
      nano_common_deallocate_pages((mach_vm_address_t)based_pages, (vm_page_mask + 29264) & ~(_DWORD)vm_page_mask, 0);
      _malloc_engaged_nano = 0;
      malloc_report(5, (uint64_t)"nano zone abandoned due to inability to reserve vm space.\n", v2, v3, v4, v5, v6, v7, v23);
      return 0;
    }
  }
  else
  {
    _malloc_engaged_nano = 0;
    return 0;
  }
}

uint64_t nanov2_valloc(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 28704) + 40))(*(_QWORD *)(a1 + 28704), a2);
}

void nanov2_destroy(mach_vm_address_t a1)
{
  (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 28704) + 64))(*(_QWORD *)(a1 + 28704));
  nano_common_deallocate_pages(a1, (vm_page_mask + 29264) & ~(_DWORD)vm_page_mask, *(_DWORD *)(a1 + 28676));
}

BOOL nanov2_allocate_region(mach_vm_address_t a1)
{
  BOOL vm_space;

  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855769153, a1, 0, 0);
  vm_space = nano_common_allocate_vm_space(a1, 0x20000000uLL);
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855769154, a1, vm_space, 0);
  return vm_space;
}

uint64_t nanov2_forked_malloc(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 28704) + 24))(*(_QWORD *)(a1 + 28704), a2);
}

uint64_t nanov2_forked_malloc_type(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 28704) + 160))(*(_QWORD *)(a1 + 28704), a2, a3);
}

_QWORD *nanov2_forked_free(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;

  v3 = result;
  if (a2)
  {
    result = (_QWORD *)nanov2_pointer_size(result, a2, 0);
    if (!result && a2 >> 29 != 24)
      return (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t))(v3[3588] + 48))(v3[3588], a2);
  }
  return result;
}

_QWORD *nanov2_forked_free_definite_size(_QWORD *a1, unint64_t a2)
{
  return nanov2_forked_free(a1, a2);
}

uint64_t nanov2_forked_realloc(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (!a2)
    return nanov2_forked_malloc((uint64_t)a1, a3);
  v6 = nanov2_pointer_size(a1, a2, 0);
  if (!v6)
    return (*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(a1[3588] + 56))(a1[3588], a2, a3);
  if (!a3)
    return nanov2_forked_malloc((uint64_t)a1, 1);
  v5 = (*(uint64_t (**)(_QWORD, unint64_t))(a1[3588] + 24))(a1[3588], a3);
  if (!v5)
    return 0;
  if (v6 >= a3)
    v4 = a3;
  else
    v4 = v6;
  _platform_memmove(v5, a2, v4);
  return v5;
}

uint64_t nanov2_forked_realloc_type(_QWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (!a2)
    return nanov2_forked_malloc_type((uint64_t)a1, a3, a4);
  v7 = nanov2_pointer_size(a1, a2, 0);
  if (!v7)
    return (*(uint64_t (**)(_QWORD, unint64_t, unint64_t, uint64_t))(a1[3588] + 176))(a1[3588], a2, a3, a4);
  if (!a3)
    return nanov2_forked_malloc((uint64_t)a1, 1);
  v6 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(a1[3588] + 160))(a1[3588], a3, a4);
  if (!v6)
    return 0;
  if (v7 >= a3)
    v5 = a3;
  else
    v5 = v7;
  _platform_memmove(v6, a2, v5);
  return v6;
}

_QWORD *nanov2_forked_batch_free(_QWORD *result, uint64_t a2, unsigned int a3)
{
  unint64_t v4;
  unsigned int v5;
  _QWORD *v7;

  v7 = result;
  v5 = a3;
  if (a3)
  {
    while (v5--)
    {
      v4 = *(_QWORD *)(a2 + 8 * v5);
      if (v4)
        result = nanov2_forked_free(v7, v4);
    }
  }
  return result;
}

uint64_t nanov2_forked_zone(_QWORD *a1)
{
  mprotect(a1, 0xC8uLL, 3);
  a1[2] = nanov2_size;
  a1[3] = nanov2_forked_malloc;
  a1[4] = nanov2_forked_calloc;
  a1[5] = nanov2_valloc;
  a1[6] = nanov2_forked_free;
  a1[7] = nanov2_forked_realloc;
  a1[8] = nanov2_destroy;
  a1[10] = nanov2_forked_batch_malloc;
  a1[11] = nanov2_forked_batch_free;
  a1[12] = nanov2_introspect;
  a1[14] = nanov2_forked_memalign;
  a1[15] = nanov2_forked_free_definite_size;
  a1[17] = nanov2_forked_claimed_address;
  a1[18] = 0;
  a1[20] = nanov2_forked_malloc_type;
  a1[21] = nanov2_forked_calloc_type;
  a1[22] = nanov2_forked_realloc_type;
  a1[23] = nanov2_forked_memalign_type;
  return mprotect(a1, 0xC8uLL, 1);
}

uint64_t nanov2_forked_calloc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 28704) + 32))(*(_QWORD *)(a1 + 28704), a2, a3);
}

uint64_t nanov2_forked_batch_malloc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 28704) + 80))(*(_QWORD *)(a1 + 28704), a2, a3, a4);
}

uint64_t nanov2_forked_memalign(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 28704) + 112))(*(_QWORD *)(a1 + 28704), a2, a3);
}

uint64_t nanov2_forked_claimed_address()
{
  return 1;
}

uint64_t nanov2_forked_calloc_type(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 28704) + 168))(*(_QWORD *)(a1 + 28704), a2, a3, a4);
}

uint64_t nanov2_forked_memalign_type(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 28704) + 184))(*(_QWORD *)(a1 + 28704), a2, a3, a4);
}

_QWORD *nanov2_allocate_outlined(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  int v17;
  uint64_t v18;
  unsigned __int16 *v20;
  unsigned __int16 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  int v26;
  unsigned int v27;

  v27 = a4;
  v26 = a5;
  v25 = a8 & 1;
  if (a7)
    nanov2_guard_corruption_detected(a7, (uint64_t)a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  if (a6)
    nanov2_madvise_block((os_unfair_lock_s *)a1, a6, a4, 2047);
  if ((*(unsigned __int16 *)(a1 + 28672) & (1 << v27)) != 0)
  {
    v23 = *(_QWORD *)(a1 + 28704);
    if ((a9 & 1) != 0)
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 160))(v23, a3, a10);
    else
      v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 24))(v23, a3);
    v24 = (_QWORD *)v10;
  }
  else
  {
    os_unfair_lock_lock_with_options(a1 + 24576 + ((unint64_t)v27 << 8) + 4 * v26, 327680);
    if (!*a2
      || (v24 = (_QWORD *)nanov2_allocate_from_block((os_unfair_lock_s *)a1, *a2, v27, v11, v12, v13, v14, v15)) == 0)
    {
      v24 = (_QWORD *)nanov2_find_block_and_allocate(a1, v27, a2, v11, v12, v13, v14, v15);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24576 + ((unint64_t)v27 << 8) + 4 * v26));
    if (!v24)
    {
      v20 = (unsigned __int16 *)(a1 + 28672);
      v21 = *(_WORD *)(a1 + 28672);
      do
      {
        v16 = v21;
        do
          v17 = __ldaxr(v20);
        while (v17 == v21 && __stlxr(v21 | (1 << v27), v20));
        v21 = v17;
      }
      while (v16 != (unsigned __int16)v17);
      v22 = *(_QWORD *)(a1 + 28704);
      if ((a9 & 1) != 0)
        v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 160))(v22, a3, a10);
      else
        v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 24))(v22, a3);
      v24 = (_QWORD *)v18;
    }
  }
  if (!v24)
  {
    malloc_set_errno_fast(1, 12);
    return v24;
  }
  if (malloc_zero_policy)
  {
    if (malloc_zero_policy != 1)
    {
      if (malloc_zero_policy != 2)
        return v24;
      goto LABEL_31;
    }
    if ((v25 & 1) != 0)
    {
LABEL_31:
      _platform_memset(v24, 0, a3);
      return v24;
    }
    *v24 = 0;
  }
  else
  {
    *v24 = 0;
    v24[1] = 0;
  }
  return v24;
}

void nanov2_guard_corruption_detected(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  malloc_zone_error(256, 1, (uint64_t)"Heap corruption detected, free list is damaged at %p\n*** Incorrect guard value: %llu\n", a4, a5, a6, a7, a8, a1);
  __break(1u);
}

uint64_t nanov2_ptr_in_use_enumerator(unsigned int a1, uint64_t a2, int a3, _QWORD *a4, uint64_t (*a5)(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4), void (*a6)(_QWORD, uint64_t, uint64_t, unint64_t *, uint64_t))
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  int v20;
  BOOL v21;
  BOOL v22;
  unsigned __int16 v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int k;
  signed int v31;
  signed int j;
  unsigned int v33;
  int i;
  int v35;
  signed int v36;
  int v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  _QWORD v52[4];
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  void *v57;
  unsigned int v58;
  _QWORD *v59;
  void (*v60)(_QWORD, uint64_t, uint64_t, unint64_t *, uint64_t);
  uint64_t (*v61)(unsigned int, uint64_t, uint64_t, _QWORD *);
  _QWORD *v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  _DWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  int v76;
  unsigned int v77;
  unint64_t v78;
  _QWORD *v79;
  unsigned int v80;
  unint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  unint64_t v93;
  signed int v94;
  int v95;
  unint64_t v96;
  int v97;
  int v98;
  unint64_t v99;
  unsigned int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  unsigned int v114;
  _QWORD v115[2048];
  _DWORD v116[7180];
  uint64_t v117;
  unint64_t v118[67];

  v65 = a1;
  v64 = a2;
  v63 = a3;
  v62 = a4;
  v61 = a5;
  v60 = a6;
  nanov2_configure();
  if ((v63 & 3) != 0)
  {
    v59 = 0;
    bzero(v116, 0x200uLL);
    v57 = 0;
    v61 = reader_or_in_memory_fallback_4((uint64_t)v61, v65);
    v58 = v61(v65, (uint64_t)v62, 29264, &v59);
    if (v58)
    {
      return v58;
    }
    else
    {
      v56 = 0;
      v22 = 0;
      if (mach_task_is_self(v65))
        v22 = v62 == v59;
      v56 = v22;
      _platform_memmove(v116, v59, 29264);
      v59 = v116;
      v67 = v116;
      v106 = v116[7170];
      v55 = ((unsigned __int16)((_WORD)v106 << 6) | (unsigned __int16)(v106 >> 6)) & 0xFFF;
      v54 = v117;
      v6 = atomic_load(v118);
      v52[2] = v6;
      v52[3] = v6;
      v52[1] = v6;
      v53 = v6;
      while (v54)
      {
        v52[0] = 0;
        v51 = 0;
        v51 = v61(v65, v54, 0x20000000, v52);
        if (v51)
          return v51;
        v50 = v54 - v52[0];
        v68 = v54;
        v49 = v54;
        v48 = 0;
        v72 = v59;
        v71 = v54;
        v70 = v53;
        v69 = 0;
        v107 = v53;
        v108 = v53 - 1;
        if (v54 == ((v53 - 1) & 0xFFFFFFFFE0000000))
        {
          v69 = v70;
        }
        else
        {
          v73 = v71 + 0x20000000;
          v69 = v71 + 0x20000000;
        }
        v48 = v69;
        v46 = 0;
        v47 = 0;
        while (v49 < v48)
        {
          v45 = 0;
          v75 = v59;
          v74 = v49;
          v83 = v49;
          v112 = v59;
          v111 = v49 & 0xFFFFFFFFFC000000;
          v45 = (unsigned int *)((v49 & 0xFFFFFFFFFC000000 ^ v59[3586]) - v50);
          v44 = v45;
          v43 = 0;
          while (v43 < 0x1000)
          {
            if (v43 != v55)
            {
              v42 = 0;
              v41 = 0;
              v40 = *v44;
              v41 = v40;
              v42 = v40;
              v114 = v40;
              v21 = 0;
              if ((v40 & 0x7FF) != 0)
              {
                v21 = 0;
                if ((v114 & 0x7FF) != 0x7FE)
                {
                  v21 = 0;
                  if ((v114 & 0x7FF) != 0x7FF)
                    v21 = (v114 & 0x7FF) != 2042;
                }
              }
              if (v21)
              {
                v79 = v59;
                v78 = v49;
                v77 = v43;
                v100 = v43;
                v76 = ((unsigned __int16)((_WORD)v100 << 6) | (unsigned __int16)(v100 >> 6)) & 0xFFF;
                v39 = v49
                    + ((unint64_t)(((unsigned __int16)((_WORD)v100 << 6) | (unsigned __int16)(v100 >> 6)) & 0xFFF) << 14);
                if ((v63 & 2) != 0)
                {
                  v46 = v39;
                  v47 = 0x4000;
                  v60(v65, v64, 2, &v46, 1);
                }
                if ((v63 & 1) != 0)
                {
                  v38 = 0;
                  v82 = v59;
                  v81 = v39;
                  v80 = 0;
                  v113 = v39;
                  v80 = (v39 >> 14) & 0xFFF ^ v59[3585];
                  v38 = ptr_offset_to_size_class[v80 >> 6];
                  v104 = v38;
                  v37 = 16 * (v38 + 1);
                  v36 = 0;
                  v36 = slots_by_size_class[v38];
                  v35 = 0;
                  if ((v42 & 0x7FF) == 0x7FB || (v42 & 0x7FF) == 0x7FC)
                  {
                    if ((v42 & 0x7FF) == 0x7FB)
                      v20 = v36 - ((v42 >> 11) & 0x3FF) - 1;
                    else
                      v20 = v36;
                    v35 = v20;
                    for (i = 0; i < v35; ++i)
                    {
                      v99 = v39;
                      v98 = v38;
                      v97 = i;
                      v101 = v38;
                      v115[2 * i] = v39 + 16 * (v38 + 1) * i;
                      v115[2 * i + 1] = v37;
                    }
                  }
                  else
                  {
                    v33 = 64 - __clz(v36);
                    if (v56)
                    {
                      v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59[3588] + 32);
                      v19 = v59[3588];
                      v7 = bitarray_size(v33);
                      v8 = (void *)v18(v19, 1, v7);
                    }
                    else
                    {
                      v8 = bitarray_create(v33);
                    }
                    v57 = v8;
                    for (j = 0; j < v36; ++j)
                      bitarray_set((uint64_t)v57, v33, j);
                    v31 = v42 & 0x7FF;
                    for (k = 0; v31 != 2043; ++k)
                    {
                      if (--v31 < 0 || v31 >= v36 || !bitarray_get((uint64_t)v57, v33, v31))
                        break;
                      bitarray_zap((uint64_t)v57, v33, v31);
                      v96 = v39;
                      v95 = v38;
                      v94 = v31;
                      v102 = v38;
                      v29 = v39 + 16 * (v38 + 1) * v31;
                      v28 = v29 - v50;
                      v31 = (unsigned __int16)*(_QWORD *)(v29 - v50 + 8);
                    }
                    v27 = ((v42 >> 11) & 0x3FF) + 1;
                    v26 = v36 - v27;
                    v25 = v36 - v27 + k;
                    v24 = 0;
                    while ((bitarray_zap_first_set((uint64_t)v57, v33, &v24) & 1) != 0 && v24 < v25)
                    {
                      v93 = v39;
                      v92 = v38;
                      v91 = v24;
                      v103 = v38;
                      v115[2 * v35] = v39 + (int)(16 * (v38 + 1) * v24);
                      v115[2 * v35++ + 1] = v37;
                    }
                    _free(v57, v9, v10, v11, v12, v13, v14, v15);
                  }
                  if (v35)
                    v60(v65, v64, 1, v115, v35);
                }
              }
            }
            ++v43;
            ++v44;
          }
          v49 += 0x4000000;
        }
        v86 = v59;
        v85 = v54;
        v84 = 0;
        v89 = v59;
        v88 = v54;
        v90 = v54;
        v110 = v59;
        v109 = v54 & 0xFFFFFFFFFC000000;
        v84 = v54 & 0xFFFFFFFFFC000000 ^ v59[3586];
        v87 = v59;
        v105 = v59[3585];
        v23 = *(_WORD *)(v84
                       + 4 * (((unsigned __int16)((_WORD)v105 << 6) | (unsigned __int16)(v105 >> 6)) & 0xFFF)
                       - v50);
        if (v23)
          v17 = v54 + ((unint64_t)v23 << 29);
        else
          v17 = 0;
        v54 = v17;
      }
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

unint64_t nanov2_good_size(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x100)
    return (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 28704) + 96) + 8))(*(_QWORD *)(a1 + 28704), a2);
  else
    return _nano_common_good_size(a2);
}

uint64_t nanov2_check()
{
  return 1;
}

uint64_t nanov2_print_self(const void *a1, int a2)
{
  unsigned int v2;

  if (a2)
    v2 = 2;
  else
    v2 = 0;
  return nanov2_print(mach_task_self_, v2, a1, _malloc_default_reader_4, (void (*)(const char *, ...))malloc_report_simple);
}

uint64_t nanov2_statistics_self(const void *a1, uint64_t a2)
{
  return nanov2_statistics(mach_task_self_, a1, _malloc_default_reader_4, (void (*)(const char *, ...))malloc_report_simple, a2);
}

uint64_t nanov2_locked()
{
  return 0;
}

uint64_t nanov2_print_task(unsigned int a1, unsigned int a2, const void *a3, uint64_t (*a4)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t *a4), void (*a5)(const char *, ...))
{
  return nanov2_print(a1, a2, a3, a4, a5);
}

uint64_t nanov2_statistics_task(unsigned int a1, const void *a2, uint64_t (*a3)(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4), uint64_t a4)
{
  return nanov2_statistics(a1, a2, a3, 0, a4);
}

uint64_t (*reader_or_in_memory_fallback_4(uint64_t a1, unsigned int a2))(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v3;

  if (a1)
    return (uint64_t (*)(unsigned int, uint64_t, uint64_t, _QWORD *))a1;
  v3 = 1;
  if (a2)
    v3 = mach_task_is_self(a2) != 0;
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x45330);
  }
  return _malloc_default_reader_4;
}

uint64_t _malloc_default_reader_4(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v5;

  v5 = 1;
  if (a1)
    v5 = mach_task_is_self(a1) != 0;
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x453D0);
  }
  *a4 = a2;
  return 0;
}

uint64_t nanov2_print(unsigned int a1, unsigned int a2, const void *a3, uint64_t (*a4)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t *a4), void (*a5)(const char *, ...))
{
  uint64_t result;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  uint64_t v13;
  const char *v14;
  int v15;
  unsigned int v16;
  unsigned int jj;
  int ii;
  int v19;
  int v20;
  unsigned int n;
  int m;
  unsigned int k;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  int j;
  int i;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t (*v49)(const char *, ...);
  uint64_t (*v50)(unsigned int, uint64_t, uint64_t, uint64_t *);
  const void *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unsigned __int16 v87;
  unsigned __int16 v88;
  unsigned __int16 v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unint64_t v106;
  uint64_t v107;
  _DWORD v108[16];

  v53 = a1;
  v52 = a2;
  v51 = a3;
  v50 = a4;
  v49 = (uint64_t (*)(const char *, ...))a5;
  nanov2_configure();
  v48 = 0;
  if (v50(v53, (uint64_t)v51, 29264, &v48))
    return v49("Failed to map nanozonev2_s at %p\n", v51);
  v46 = 0u;
  v47 = 0u;
  nanov2_statistics_task_printer(v53, v51, v50, (void (*)(const char *, ...))v49, (uint64_t)&v46);
  v45 = v48 + 28744;
  v49("Nanozonev2 %p: blocks in use: %llu, size in use: %llu allocated size: %llu, allocated regions: %d, region holes: %d\n", v51, v46, *((_QWORD *)&v46 + 1), *((_QWORD *)&v47 + 1), *(_DWORD *)(v48 + 28744), *(_DWORD *)(v48 + 28748));
  result = v49("Current Allocation Blocks By Size Class/Context [CPU]\n");
  for (i = 0; i < 16; ++i)
  {
    v49("  Class %d: ", i);
    for (j = 0; j < 64; ++j)
    {
      if (*(_QWORD *)(v48 + 0x4000 + ((uint64_t)i << 9) + 8 * j))
        v49("%d: %p; ", j, *(const void **)(v48 + 0x4000 + ((uint64_t)i << 9) + 8 * j));
    }
    result = v49("\n");
  }
  v42 = 0;
  v54 = v48;
  v70 = *(_QWORD *)(v48 + 28680);
  v42 = ((unsigned __int16)((_WORD)v70 << 6) | (unsigned __int16)(v70 >> 6)) & 0xFFF;
  v41 = 0;
  v41 = *(_QWORD *)(v48 + 28720);
  v6 = atomic_load((unint64_t *)(v48 + 28728));
  v38 = v6;
  v39 = v6;
  v37 = v6;
  v40 = v6;
  v36 = 0;
  while (v41)
  {
    v49("\nRegion %d: base address %p\n", v36, (const void *)v41);
    v35 = 0;
    result = v50(v53, v41, 0x20000000, &v35);
    if ((_DWORD)result)
      return v49("Failed to map nanov2 region at %p\n", (const void *)v41);
    v34 = v35 - v41;
    v55 = v41;
    v33 = v41;
    v59 = v48;
    v58 = v41;
    v57 = v40;
    v56 = 0;
    v71 = v40;
    v72 = v40 - 1;
    if (v41 == ((v40 - 1) & 0xFFFFFFFFE0000000))
    {
      v56 = v57;
    }
    else
    {
      v60 = v58 + 0x20000000;
      v56 = v58 + 0x20000000;
    }
    v32 = v56;
    v31 = 0;
    while (v33 < v32)
    {
      v62 = v48;
      v61 = v33;
      v67 = v33;
      v74 = v48;
      v73 = v33 & 0xFFFFFFFFFC000000;
      v30 = v33 & 0xFFFFFFFFFC000000 ^ *(_QWORD *)(v48 + 28688);
      v29 = v30 + v34;
      v28 = 0;
      v27 = 0;
      v26 = 0;
      v25 = 0;
      v24 = 0;
      for (k = 0; k < 0x1000; ++k)
      {
        if (k != v42)
        {
          v12 = *(_DWORD *)(v29 + 4 * k) & 0x7FF;
          if ((*(_DWORD *)(v29 + 4 * k) & 0x7FF) != 0)
          {
            switch(v12)
            {
              case 2045:
                ++v27;
                break;
              case 2046:
                ++v24;
                break;
              case 2047:
                ++v25;
                break;
              default:
                ++v28;
                break;
            }
          }
          else
          {
            ++v26;
          }
        }
      }
      v49("Arena #%d: base address %p. Blocks - active: %d, madvisable: %d, madvising: %d, madvised: %d, unused: %d\n", v31, (const void *)v33, v28, v27, v24, v25, v26);
      for (m = 0; m < 16; ++m)
        v108[m] = 0;
      for (n = 0; n < 0x1000; ++n)
      {
        if (n != v42)
        {
          v20 = *(_DWORD *)(v29 + 4 * n);
          v84 = v48;
          v83 = n;
          v85 = n;
          v82 = ((unsigned __int16)((_WORD)v85 << 6) | (unsigned __int16)(v85 >> 6)) & 0xFFF;
          v81 = 0;
          v81 = v82 ^ *(_QWORD *)(v48 + 28680);
          v11 = v20 & 0x7FF;
          if ((v20 & 0x7FF) != 0)
          {
            v7 = v11 == 2044 || v11 == 2043;
            if (v7 || (v11 - 2045) > 2)
            {
              v19 = ptr_offset_to_size_class[v81 >> 6];
              ++v108[v19];
            }
          }
        }
      }
      v49("Size classes with allocated blocks: ");
      for (ii = 0; ii < 16; ++ii)
      {
        if (v108[ii])
          v49("%d ", ii);
      }
      result = v49("\n");
      if (v52 >= 2)
      {
        for (jj = 0; jj < 0x1000; ++jj)
        {
          if (jj != v42)
          {
            v16 = *(_DWORD *)(v29 + 4 * jj);
            v75 = v16;
            v10 = 0;
            if ((v16 & 0x7FF) != 0)
            {
              v10 = 0;
              if ((v75 & 0x7FF) != 0x7FE)
              {
                v10 = 0;
                if ((v75 & 0x7FF) != 0x7FF)
                  v10 = (v75 & 0x7FF) != 2042;
              }
            }
            if (v10)
            {
              v79 = v48;
              v78 = jj;
              v80 = jj;
              v77 = ((unsigned __int16)((_WORD)v78 << 6) | (unsigned __int16)(v78 >> 6)) & 0xFFF;
              v76 = 0;
              v76 = v77 ^ *(_QWORD *)(v48 + 28680);
              v15 = ptr_offset_to_size_class[v76 >> 6];
              v9 = v16 & 0x7FF;
              if ((v16 & 0x7FF) != 0)
              {
                switch(v9)
                {
                  case 2044:
                    v14 = "FULL";
                    break;
                  case 2045:
                    v14 = "CAN MADVISE";
                    break;
                  case 2046:
                    v14 = "MADVISING";
                    break;
                  case 2047:
                    v14 = "MADVISED";
                    break;
                  default:
                    v14 = 0;
                    break;
                }
              }
              else
              {
                v14 = "NOT USED";
              }
              v66 = v48;
              v65 = v33;
              v64 = jj;
              v68 = jj;
              v63 = ((unsigned __int16)((_WORD)v64 << 6) | (unsigned __int16)(v64 >> 6)) & 0xFFF;
              v69 = v15;
              v49("    Block %d: base %p; metadata: %p, size %d (class %d) in-use: %d ",
                jj,
                (const void *)(v33
                             + ((unint64_t)(((unsigned __int16)((_WORD)v64 << 6) | (unsigned __int16)(v64 >> 6)) & 0xFFF) << 14)),
                (const void *)(v30 + 4 * jj),
                16 * (v15 + 1),
                v15,
                v16 >> 31);
              if (v14)
              {
                result = v49("%s\n", v14);
              }
              else
              {
                v13 = slots_by_size_class[v15] - ((v16 >> 11) & 0x3FF) - 1;
                if ((v16 & 0x7FF) == 0x7FB)
                  v49("BUMP (free list empty)");
                else
                  v49("next_slot (1-based) = %d", v16 & 0x7FF);
                result = v49(", allocated slots: %d, free slots = %d, occupancy: %d%%\n", v13, ((v16 >> 11) & 0x3FF) + 1, 100 * (int)v13 / slots_by_size_class[v15]);
              }
            }
          }
        }
      }
      v33 += 0x4000000;
      ++v31;
    }
    v96 = v48;
    v95 = v41;
    v94 = v34;
    v93 = v40;
    v92 = 0;
    v100 = v48;
    v99 = v41;
    v98 = 0;
    v103 = v48;
    v102 = v41;
    v104 = v41;
    v107 = v48;
    v106 = v41 & 0xFFFFFFFFFC000000;
    v98 = v41 & 0xFFFFFFFFFC000000 ^ *(_QWORD *)(v48 + 28688);
    v101 = v48;
    v105 = *(_QWORD *)(v48 + 28680);
    v92 = v98 + 4 * (((unsigned __int16)((_WORD)v105 << 6) | (unsigned __int16)(v105 >> 6)) & 0xFFF);
    v91 = v92 + v34;
    v90 = 0;
    v89 = 0;
    v88 = *(_WORD *)(v92 + v34);
    v89 = v88;
    v87 = v88;
    v90 = v88;
    if (v88)
    {
      v86 = v95 + ((uint64_t)v90 << 29);
      if (v86 >= v93)
        v8 = 0;
      else
        v8 = v86;
      v97 = v8;
    }
    else
    {
      v97 = 0;
    }
    v41 = v97;
    ++v36;
  }
  return result;
}

uint64_t nanov2_statistics_task_printer(unsigned int a1, const void *a2, uint64_t (*a3)(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4), void (*a4)(const char *, ...), uint64_t a5)
{
  return nanov2_statistics(a1, a2, a3, a4, a5);
}

uint64_t nanov2_statistics(unsigned int a1, const void *a2, uint64_t (*a3)(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4), void (*a4)(const char *, ...), uint64_t a5)
{
  unint64_t v5;
  unint64_t v7;
  int v8;
  void (*v9)();
  int v10;
  unsigned int v11;
  int v12;
  unsigned int j;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[4];
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t i;
  _QWORD *v21;
  unsigned int v22;
  uint64_t v23;
  void (*v24)(const char *, ...);
  uint64_t (*v25)(unsigned int, uint64_t, uint64_t, _QWORD *);
  const void *v26;
  unsigned int v27;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  int v45;
  int v46;
  unsigned int v47;
  _QWORD *v48;
  unsigned int v49;
  unint64_t v50;
  unsigned __int16 v51;
  unsigned __int16 v52;
  unsigned __int16 v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  unsigned int v69;
  unint64_t v70;
  _QWORD *v71;

  v27 = a1;
  v26 = a2;
  v25 = a3;
  v24 = a4;
  v23 = a5;
  if (a4)
    v9 = (void (*)())v24;
  else
    v9 = nanov2_null_printer;
  v24 = (void (*)(const char *, ...))v9;
  v25 = reader_or_in_memory_fallback_4((uint64_t)v25, v27);
  v22 = 0;
  nanov2_configure();
  _platform_memset(v23, 0, 32);
  v21 = 0;
  v22 = v25(v27, (uint64_t)v26, 29264, &v21);
  if (!v22)
  {
    i = 0;
    v19 = 0;
    v18 = 0;
    v29 = v21;
    v40 = v21[3585];
    v18 = ((unsigned __int16)((_WORD)v40 << 6) | (unsigned __int16)(v40 >> 6)) & 0xFFF;
    v5 = atomic_load(v21 + 3591);
    v16[2] = v5;
    v16[3] = v5;
    v16[1] = v5;
    v17 = v5;
    for (i = v21[3590]; ; i = v61)
    {
      if (!i)
        return 0;
      v16[0] = 0;
      v22 = v25(v27, i, 0x20000000, v16);
      if (v22)
      {
        v24("Failed to map nanov2 region at %p\n", (const void *)i);
        return v22;
      }
      v15 = v16[0] - i;
      v30 = i;
      v19 = i;
LABEL_11:
      v34 = v21;
      v33 = i;
      v32 = v17;
      v31 = 0;
      v41 = v17;
      v42 = v17 - 1;
      if (i == ((v17 - 1) & 0xFFFFFFFFE0000000))
      {
        v31 = v32;
      }
      else
      {
        v35 = v33 + 0x20000000;
        v31 = v33 + 0x20000000;
      }
      if (v19 < v31)
        break;
      v60 = v21;
      v59 = i;
      v58 = v15;
      v57 = v17;
      v56 = 0;
      v64 = v21;
      v63 = i;
      v62 = 0;
      v67 = v21;
      v66 = i;
      v68 = i;
      v71 = v21;
      v70 = i & 0xFFFFFFFFFC000000;
      v62 = i & 0xFFFFFFFFFC000000 ^ v21[3586];
      v65 = v21;
      v69 = v21[3585];
      v56 = v62 + 4 * (((unsigned __int16)((_WORD)v69 << 6) | (unsigned __int16)(v69 >> 6)) & 0xFFF);
      v55 = v56 + v15;
      v54 = 0;
      v53 = 0;
      v52 = *(_WORD *)(v56 + v15);
      v53 = v52;
      v51 = v52;
      v54 = v52;
      if (v52)
      {
        v50 = v59 + ((uint64_t)v54 << 29);
        if (v50 >= v57)
          v7 = 0;
        else
          v7 = v50;
        v61 = v7;
      }
      else
      {
        v61 = 0;
      }
    }
    v37 = v21;
    v36 = v19;
    v38 = v19;
    v44 = v21;
    v43 = v19 & 0xFFFFFFFFFC000000;
    v14 = (v19 & 0xFFFFFFFFFC000000 ^ v21[3586]) + v15;
    for (j = 0; ; ++j)
    {
      if (j >= 0x1000)
      {
        v19 += 0x4000000;
        goto LABEL_11;
      }
      if (j != v18)
        break;
LABEL_28:
      ;
    }
    v48 = v21;
    v47 = j;
    v49 = j;
    v46 = ((unsigned __int16)((_WORD)v49 << 6) | (unsigned __int16)(v49 >> 6)) & 0xFFF;
    v45 = 0;
    v45 = v46 ^ v21[3585];
    v12 = ptr_offset_to_size_class[v45 >> 6];
    v39 = v12;
    v11 = *(_DWORD *)(v14 + 4 * j);
    v10 = 0;
    v8 = v11 & 0x7FF;
    if ((v11 & 0x7FF) != 0 && v8 != 2042)
    {
      if (v8 == 2043)
        goto LABEL_25;
      if (v8 == 2044)
      {
        v10 = slots_by_size_class[v12];
        goto LABEL_26;
      }
      if ((v8 - 2045) > 2)
LABEL_25:
        v10 = slots_by_size_class[v12] - ((v11 >> 11) & 0x3FF) - 1;
    }
LABEL_26:
    if (v10)
    {
      *(_DWORD *)v23 += v10;
      *(_QWORD *)(v23 + 8) += v10 * 16 * (v12 + 1);
      *(_QWORD *)(v23 + 24) += 0x4000;
    }
    goto LABEL_28;
  }
  v24("Failed to map nanozonev2_s at %p\n", v26);
  return v22;
}

uint64_t get_zone_type(unsigned int a1, uint64_t (*a2)(_QWORD, uint64_t, uint64_t, uint64_t *), uint64_t a3, _DWORD *a4)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD, uint64_t, uint64_t, uint64_t *);
  unsigned int v12;

  v12 = a1;
  v11 = a2;
  v10 = a3;
  v9 = a4;
  if (!a2)
  {
    __break(1u);
    JUMPOUT(0x469C4);
  }
  v8 = 0;
  *v9 = 0;
  v7 = 0;
  v8 = v11(v12, v10, 200, &v7);
  if (v8)
  {
    return v8;
  }
  else if (*(_DWORD *)(v7 + 104) >= 0xEu)
  {
    v6 = get_introspection_addr(v7) + 128;
    v5 = 0;
    v8 = v11(v12, v6, 4, (uint64_t *)&v5);
    if (v8)
    {
      return v8;
    }
    else
    {
      *v9 = *v5;
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t get_introspection_addr(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t malloc_get_wrapped_zone(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD v5[2];
  int v6;
  unsigned int zone_type;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)(unsigned int, uint64_t, uint64_t, _QWORD *);
  unsigned int v11;

  v11 = a1;
  v9 = a3;
  v8 = a4;
  v10 = reader_or_in_memory_fallback_5(a2, a1);
  zone_type = 0;
  *v8 = 0;
  v6 = 0;
  zone_type = get_zone_type(v11, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t *))v10, v9, &v6);
  if (zone_type)
  {
    return zone_type;
  }
  else if (v6 == 2 || v6 == 3)
  {
    v5[1] = v9 + 200;
    v5[0] = 0;
    zone_type = v10(v11, v9 + 200, 8, v5);
    if (zone_type)
    {
      return zone_type;
    }
    else
    {
      *v8 = *(_QWORD *)v5[0];
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t (*reader_or_in_memory_fallback_5(uint64_t a1, unsigned int a2))(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v3;

  if (a1)
    return (uint64_t (*)(unsigned int, uint64_t, uint64_t, _QWORD *))a1;
  v3 = 1;
  if (a2)
    v3 = mach_task_is_self(a2) != 0;
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x46C84);
  }
  return _malloc_default_reader_5;
}

uint64_t get_wrapped_zone(uint64_t a1)
{
  _QWORD v2[2];

  v2[1] = a1;
  v2[0] = 0;
  if (malloc_get_wrapped_zone(mach_task_self_, 0, a1, v2))
  {
    __break(1u);
    JUMPOUT(0x46D10);
  }
  return v2[0];
}

uint64_t _malloc_default_reader_5(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v5;

  v5 = 1;
  if (a1)
    v5 = mach_task_is_self(a1) != 0;
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x46D94);
  }
  *a4 = a2;
  return 0;
}

uint64_t _nano_common_init_pick_mode(uint64_t a1, uint64_t a2, _BYTE *a3, char a4)
{
  int v4;
  int v6;
  unsigned int v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  char v11;

  v11 = a4 & 1;
  v7 = 0;
  v6 = 0;
  v10 = malloc_common_value_for_key(a3, (uint64_t)"nanov2_mode");
  if (v10)
  {
    if (_platform_strncmp(v10, "enabled", 7))
    {
      if (_platform_strncmp(v10, "forced", 6))
      {
        if (!_platform_strncmp(v10, "conditional", 11))
          v6 = 2;
      }
      else
      {
        v6 = 1;
      }
    }
    else
    {
      v6 = 0;
    }
  }
  if (v6 == 1)
  {
    return 2;
  }
  else
  {
    if (v6 == 2)
    {
      if ((v11 & 1) != 0)
        v4 = 0;
      else
        v4 = 2;
      v7 = v4;
    }
    else
    {
      v8 = (_BYTE *)_simple_getenv(a2, "MallocNanoZone");
      if (v8 && *v8 == 49)
        v7 = 2;
    }
    v9 = (_BYTE *)_simple_getenv(a1, "MallocNanoZone");
    if (v9)
    {
      if (*v9 == 49)
      {
        return 2;
      }
      else if (*v9 == 48)
      {
        return 0;
      }
      else if ((*v9 == 86 || *v9 == 118) && (v9[1] == 49 || v9[1] == 50))
      {
        return 2;
      }
    }
  }
  return v7;
}

void nano_common_init(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[256];

  v15 = a1;
  v14 = a2;
  v13 = a3;
  _malloc_engaged_nano = _nano_common_init_pick_mode(a1, a2, a3, malloc_space_efficient_enabled & 1);
  if (_malloc_engaged_nano)
  {
    v12 = malloc_common_value_for_key_copy(v13, (uint64_t)"malloc_nano_max_magazines", v16, 0x100uLL);
    if (v12)
    {
      v11 = 0;
      v10 = malloc_common_convert_to_long(v12, &v11);
      if (*v11 || v10 < 0)
        malloc_report(3, (uint64_t)"malloc_nano_max_magazines must be positive - ignored.\n", v3, v4, v5, v6, v7, v8, v9);
      else
        nano_common_max_magazines = v10;
    }
  }
  if (_malloc_engaged_nano == 2)
    nanov2_init(v15, v14, v13);
}

void nano_common_configure()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  const char *__str;
  unsigned int v10;

  if (nano_common_max_magazines)
    v7 = nano_common_max_magazines;
  else
    v7 = phys_ncpus;
  v10 = v7;
  __str = getenv("MallocNanoMaxMagazines");
  if (!__str)
    __str = getenv("_MallocNanoMaxMagazines");
  if (__str)
  {
    v8 = strtol(__str, 0, 0);
    if (v8 >= 0)
      v10 = v8;
    else
      malloc_report(3, (uint64_t)"MallocNanoMaxMagazines must be positive - ignored.\n", v0, v1, v2, v3, v4, v5, v6);
  }
  if (v10)
  {
    if (v10 > phys_ncpus)
    {
      v10 = phys_ncpus;
      malloc_report(3, (uint64_t)"Nano maximum magazines limited to number of physical CPUs [%d]\n", v0, v1, v2, v3, v4, v5, phys_ncpus);
    }
  }
  else
  {
    v10 = phys_ncpus;
  }
  nano_common_max_magazines = v10;
  if (__str)
    malloc_report(6, (uint64_t)"Nano maximum magazines set to %d\n", v0, v1, v2, v3, v4, v5, nano_common_max_magazines);
  nano_common_cpu_number_override_set();
  if (_malloc_engaged_nano == 2)
    nanov2_configure();
}

void nano_common_cpu_number_override_set()
{
  BOOL v0;

  v0 = 0;
  if (_os_cpu_number_override == -1)
    v0 = nano_common_max_magazines == phys_ncpus;
  if (!v0)
    nano_common_max_magazines_is_ncpu = v0;
}

mach_vm_address_t nano_common_allocate_based_pages(unint64_t a1, char a2, int a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  kern_return_t v11;
  vm_size_t size;
  mach_vm_address_t address;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  unint64_t v18;

  v18 = a1;
  v17 = a2;
  v16 = a3;
  v15 = a4;
  v14 = a5;
  address = 0;
  size = (a1 + vm_page_size - 1) & ~(vm_page_size - 1);
  if (!size)
    size = vm_page_size;
  if (size < v18)
    return 0;
  address = (v14 + vm_page_size - 1) & ~(vm_page_size - 1);
  if (!address)
    address = vm_page_size;
  v11 = mach_vm_map(mach_task_self_, &address, size, (1 << a2) - 1, (a4 << 24) | 1, 0, 0, 0, 3, 7, 1u);
  if (!v11)
    return address;
  if (v11 != 3)
    malloc_zone_error(v16, 0, (uint64_t)"*** can't allocate pages: mach_vm_map(size=%lu) failed (error code=%d)\n", v5, v6, v7, v8, v9, v18);
  return 0;
}

BOOL nano_common_allocate_vm_space(mach_vm_address_t a1, mach_vm_size_t a2)
{
  return _nano_common_map_vm_space(a1, a2, 3) != 0;
}

uint64_t _nano_common_map_vm_space(mach_vm_address_t a1, mach_vm_size_t a2, vm_prot_t cur_protection)
{
  mach_vm_address_t address;
  vm_prot_t v5;
  mach_vm_size_t v6;
  mach_vm_address_t v7;

  v7 = a1;
  v6 = a2;
  v5 = cur_protection;
  address = a1;
  if (mach_vm_map(mach_task_self_, &address, a2, 0, 184549376, 0, 0, 0, cur_protection, 7, 1u))
  {
    return 0;
  }
  else if (address == v7)
  {
    return 1;
  }
  else
  {
    mach_vm_deallocate(mach_task_self_, address, v6);
    return 0;
  }
}

BOOL nano_common_reserve_vm_space(mach_vm_address_t a1, mach_vm_size_t a2)
{
  return _nano_common_map_vm_space(a1, a2, 0) != 0;
}

uint64_t nano_common_unprotect_vm_space(mach_vm_address_t a1, mach_vm_size_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  char v10;

  v9 = mach_vm_protect(mach_task_self_, a1, a2, 0, 3);
  if (v9)
  {
    malloc_report(3, (uint64_t)"mach_vm_protect ret: %d\n", v2, v3, v4, v5, v6, v7, v9);
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  return v10 & 1;
}

void nano_common_deallocate_pages(mach_vm_address_t a1, mach_vm_size_t a2, __int16 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (mach_vm_deallocate(mach_task_self_, a1, a2))
    malloc_zone_error(a3, 0, (uint64_t)"Can't deallocate_pages at %p\n", v3, v4, v5, v6, v7, a1);
}

uint64_t nano_common_default_reader(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 = a2;
  return 0;
}

void _xzm_type_choose_ptr_bucket(uint64_t a1, unsigned __int8 a2)
{
  if (a2 >= 5u)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
    __break(1u);
    JUMPOUT(0x47954);
  }
  __asm { BR              X8 }
}

uint64_t sub_4799C()
{
  return 0;
}

uint64_t xzm_malloc_inline(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v10;
  unsigned __int8 v11;
  char v12;
  unsigned __int8 v13;

  if (a2 <= 0x8000)
  {
    if ((*(_BYTE *)(a1 + 296) & 0x80) != 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed (/L"
                             "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
      __break(1u);
      JUMPOUT(0x47B48);
    }
    if (*(_QWORD *)(a1 + 232))
      v6 = *(_QWORD *)(a1 + 232);
    else
      v6 = a1;
    if (a2)
    {
      if (a2 > 0x80)
      {
        v12 = 63 - __clz(a2 - 1);
        v13 = (((a2 - 1) >> (v12 - 2)) & 3 | (4 * v12)) - 20;
      }
      else
      {
        if ((a2 & 0xF) != 0)
          v5 = (a2 >> 4) + 1;
        else
          v5 = a2 >> 4;
        v13 = v5 - 1;
      }
    }
    else
    {
      v13 = 0;
    }
    v11 = *(_BYTE *)(*(_QWORD *)(v6 + 360) + v13);
    if (HIWORD(a3) == 256)
    {
      v10 = 0;
    }
    else
    {
      if (((WORD2(a3) >> 10) & 3) != 1)
      {
        if ((v11 - 2) >= 5u)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" fail"
                                 "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
          __break(1u);
          JUMPOUT(0x47E24);
        }
        __asm { BR              X8 }
      }
      v10 = 1;
    }
    if (v10 >= (int)v11)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/co"
                             "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
      __break(1u);
      JUMPOUT(0x47FCCLL);
    }
    v7 = (uint64_t)_xzm_xzone_malloc(a1, a2, *(_BYTE *)(*(_QWORD *)(v6 + 368) + v13) + v10, a4);
  }
  else
  {
    v7 = _xzm_malloc_large_huge(a1, a2, 0, a3, a4);
  }
  if (!v7)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                           "alloc_driverkit/src/xzone/xzone_malloc.c:2272)";
    __break(1u);
    JUMPOUT(0x48028);
  }
  if ((a4 & 1) != 0 && !_xzm_mem_is_zero(v7, a2))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_mem_is_zero(ptr, size)\" failed (/Library/Caches/co"
                           "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2274)";
    __break(1u);
    JUMPOUT(0x4806CLL);
  }
  return v7;
}

uint64_t _xzm_malloc_large_huge(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  BOOL v7;
  char v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  char v16;
  unint64_t v18;

  v16 = a5 & 1;
  v15 = 0;
  if (*(_QWORD *)(a1 + 232))
    v11 = *(_QWORD *)(a1 + 232);
  else
    v11 = a1;
  if ((a2 & 0x3FFF) != 0)
    v10 = (a2 & 0xFFFFFFFFFFFFC000) + 0x4000;
  else
    v10 = a2;
  if (v10 <= 0x200000 && a3 <= 0x100000)
    v14 = 6;
  else
    v14 = 7;
  if (((v10 >> 14) & 0x3FFFF00000000) == 0)
  {
    if (HIWORD(a4) == 256 || v14 == 7 || *(_BYTE *)(v11 + 344) == 2)
      v13 = (*(_BYTE *)(v11 + 328) & 8) != 0;
    else
      v13 = 3;
    if (v13 >= (int)*(unsigned __int8 *)(v11 + 344))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"sg_id < main->xzmz_segment_group_count\" failed (/Libr"
                             "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:290)";
      __break(1u);
      JUMPOUT(0x48278);
    }
    v12 = xzm_segment_group_alloc_chunk((unsigned __int8 *)(*(_QWORD *)(v11 + 392) + 528 * v13), v14, 0, v10 >> 14, 0, a3, a5 & 1, (*(_DWORD *)(a1 + 296) & 0x80) != 0);
    if (v12)
    {
      LOBYTE(v9) = 1;
      if ((v16 & 1) != 0)
        v9 = (*(unsigned __int8 *)(v12 + 32) >> 4) & 1;
      if ((v9 & 1) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!clear || chunk->xzc_bits.xzcb_is_pristine\" failed "
                               "(/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:300)";
        __break(1u);
        JUMPOUT(0x48358);
      }
      *(_WORD *)(v12 + 34) = *(_WORD *)(a1 + 208);
      os_unfair_lock_lock_with_options(a1 + 280, 327680);
      v5 = *(_QWORD *)(a1 + 288);
      *(_QWORD *)(v12 + 16) = v5;
      if (v5)
        *(_QWORD *)(*(_QWORD *)(a1 + 288) + 24) = v12 + 16;
      *(_QWORD *)(a1 + 288) = v12;
      *(_QWORD *)(v12 + 24) = a1 + 288;
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 280));
      v18 = v12 & 0xFFFFFFFFFFFFC000;
      v8 = 1;
      if ((v12 & 0xFFFFFFFFFFFFC000) != 0)
      {
        v7 = 0;
        if (v12 >= v18 + 2136)
          v7 = v12 < (v12 & 0xFFFFFFFFFFFFC000)
                   + 48 * *(unsigned int *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFC000))
                   + 2136;
        v8 = v7;
      }
      if ((v8 & 1) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x485ACLL);
      }
      if (v12 < v18 + 2136)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x48610);
      }
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (v12 & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFC000)))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x48678);
      }
      v15 = *(uint64_t *)((char *)&stru_20.filesize + (v12 & 0xFFFFFFFFFFFFC000))
          + ((unint64_t)(-1431655765 * ((uint64_t)(v12 - v18 - 2136) >> 4)) << 14);
    }
  }
  if (!v15)
    malloc_set_errno_fast(1, 12);
  return v15;
}

_OWORD *_xzm_xzone_malloc(uint64_t a1, unint64_t a2, unsigned __int8 a3, char a4)
{
  unsigned __int16 *v4;
  int v5;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v11;
  unsigned __int16 v12;
  char v13;

  v8 = *(_QWORD *)(a1 + 216) + 88 * a3;
  if ((a4 & 2) != 0 || *(_QWORD *)(a1 + 232))
    goto LABEL_17;
  v12 = *(_WORD *)(v8 + 32);
  do
  {
    if (!v12)
    {
      v13 = 0;
      goto LABEL_13;
    }
    v11 = v12;
    v4 = (unsigned __int16 *)(v8 + 32);
    do
      v5 = __ldaxr(v4);
    while (v5 == v12 && __stlxr(v12 - 1, v4));
    v7 = v5 == v12;
    if (v5 != v12)
      v11 = v5;
    v12 = v11;
  }
  while (!v7);
  v13 = 1;
LABEL_13:
  if (v13 != 1)
  {
LABEL_17:
    if (a2 > 0x1000)
    {
      if (a2 > 0x8000)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"size <= XZM_SMALL_BLOCK_SIZE_MAX\" failed (/Library/"
                               "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2241)";
        __break(1u);
        JUMPOUT(0x48928);
      }
      return (_OWORD *)_xzm_xzone_malloc_small(a1, v8, a4);
    }
    else
    {
      return _xzm_xzone_malloc_tiny((os_unfair_lock_s *)a1, v8, a4);
    }
  }
  else
  {
    v9 = mfm_alloc(*(_QWORD *)(v8 + 48));
    if (!v9)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                             "bmalloc_driverkit/src/xzone/xzone_malloc.c:2233)";
      __break(1u);
      JUMPOUT(0x488C0);
    }
    return (_OWORD *)v9;
  }
}

BOOL _xzm_mem_is_zero(uint64_t a1, uint64_t a2)
{
  return _platform_memcmp_zero_aligned8(a1, a2) == 0;
}

uint64_t xzm_malloc(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v10;
  unsigned __int8 v11;
  char v12;
  unsigned __int8 v13;

  if (a2 <= 0x8000)
  {
    if ((*(_BYTE *)(a1 + 296) & 0x80) != 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed (/L"
                             "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
      __break(1u);
      JUMPOUT(0x48A3CLL);
    }
    if (*(_QWORD *)(a1 + 232))
      v6 = *(_QWORD *)(a1 + 232);
    else
      v6 = a1;
    if (a2)
    {
      if (a2 > 0x80)
      {
        v12 = 63 - __clz(a2 - 1);
        v13 = (((a2 - 1) >> (v12 - 2)) & 3 | (4 * v12)) - 20;
      }
      else
      {
        if ((a2 & 0xF) != 0)
          v5 = (a2 >> 4) + 1;
        else
          v5 = a2 >> 4;
        v13 = v5 - 1;
      }
    }
    else
    {
      v13 = 0;
    }
    v11 = *(_BYTE *)(*(_QWORD *)(v6 + 360) + v13);
    if (HIWORD(a3) == 256)
    {
      v10 = 0;
    }
    else
    {
      if (((WORD2(a3) >> 10) & 3) != 1)
      {
        if ((v11 - 2) >= 5u)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" fail"
                                 "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
          __break(1u);
          JUMPOUT(0x48D18);
        }
        __asm { BR              X8 }
      }
      v10 = 1;
    }
    if (v10 >= (int)v11)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/co"
                             "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
      __break(1u);
      JUMPOUT(0x48EBCLL);
    }
    v7 = (uint64_t)_xzm_xzone_malloc(a1, a2, *(_BYTE *)(*(_QWORD *)(v6 + 368) + v13) + v10, a4);
  }
  else
  {
    v7 = _xzm_malloc_large_huge(a1, a2, 0, a3, a4);
  }
  if (!v7)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                           "alloc_driverkit/src/xzone/xzone_malloc.c:2272)";
    __break(1u);
    JUMPOUT(0x48F18);
  }
  if ((a4 & 1) != 0 && !_xzm_mem_is_zero(v7, a2))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_mem_is_zero(ptr, size)\" failed (/Library/Caches/co"
                           "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2274)";
    __break(1u);
    JUMPOUT(0x48F5CLL);
  }
  return v7;
}

uint64_t xzm_memalign(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  return _xzm_memalign(a1, a2, a3, a4, a5);
}

uint64_t _xzm_memalign(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  char v9;

  if (((a2 - 1) & a2) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"powerof2(alignment)\" failed (/Library/Caches/com.apple."
                           "xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2322)";
    __break(1u);
    JUMPOUT(0x49020);
  }
  v9 = a5 | 2;
  if (a3 <= 0x8000 && a2 <= 0x4000)
  {
    if (a3 > a2)
    {
      if (a3 > 2 * a2)
      {
        if (a3 >= 4 * a2)
        {
          v8 = xzm_malloc(a1, a3, a4, v9);
        }
        else
        {
          if (a3 % (4 * a2))
            v7 = 4 * a2 + a3 / (4 * a2) * 4 * a2;
          else
            v7 = a3;
          if (v7 > 0x8000)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"roundup(size, 4 * alignment) <= XZM_SMALL_BLOCK_"
                                   "SIZE_MAX\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzon"
                                   "e/xzone_malloc.c:2339)";
            __break(1u);
            JUMPOUT(0x491E0);
          }
          if (a3 % (4 * a2))
            v5 = xzm_malloc(a1, 4 * a2 + a3 / (4 * a2) * 4 * a2, a4, v9);
          else
            v5 = xzm_malloc(a1, a3, a4, v9);
          v8 = v5;
        }
      }
      else
      {
        if (2 * a2 > 0x8000)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"2 * alignment <= XZM_SMALL_BLOCK_SIZE_MAX\" failed"
                                 " (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2335)";
          __break(1u);
          JUMPOUT(0x49124);
        }
        v8 = xzm_malloc(a1, 2 * a2, a4, v9);
      }
    }
    else
    {
      v8 = xzm_malloc(a1, a2, a4, v9);
    }
  }
  else
  {
    v8 = _xzm_malloc_large_huge(a1, a3, a2, a4, v9);
  }
  if (!v8)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                           "alloc_driverkit/src/xzone/xzone_malloc.c:2346)";
    __break(1u);
    JUMPOUT(0x492E4);
  }
  if (v8 % a2)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)ptr % alignment == 0\" failed (/Library/Cache"
                           "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2347)";
    __break(1u);
    JUMPOUT(0x49324);
  }
  return v8;
}

uint64_t xzm_realloc(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9;
  char v10;
  unint64_t v11;
  BOOL v12;
  BOOL v13;
  char v14;
  unint64_t v15;
  int v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  BOOL v66;
  char v67;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  int64_t v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  BOOL v102;
  int64_t v103;
  unint64_t v104;
  unint64_t v105;
  int64_t v106;
  int64_t v107;
  unint64_t v108;
  unint64_t v109;
  int64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  unsigned int v115;
  unint64_t v116;
  int v117;
  unint64_t v118;
  unsigned int v119;
  unint64_t v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char is_free_slow;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char v137;
  unint64_t *v138;
  uint64_t v139;
  char v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unsigned __int8 v153;
  char v154;
  int v155;
  unint64_t *v156;

  if (!a2)
    return xzm_malloc(a1, a3, a4, 0);
  if (!a3)
  {
    _xzm_free(a1, a2, 0, a4, a5, a6, a7, a8);
    return xzm_malloc(a1, 0, a4, 0);
  }
  v34 = a4;
  v33 = a1;
  v32 = (uint64_t)a2;
  v31 = a3;
  v30 = 0;
  v45 = a1;
  v44 = a2;
  v43 = &v30;
  v42 = 0;
  v41 = 0;
  v40 = 0;
  v62 = a1;
  v61 = (unint64_t)a2;
  v60 = 0;
  v59 = (uint64_t *)&v42;
  v58 = &v41;
  v57 = 0;
  v64 = a1;
  if (*(_QWORD *)(a1 + 232))
    v19 = *(_QWORD *)(v33 + 232);
  else
    v19 = v64;
  v57 = v19;
  v56 = 0;
  v86 = v19;
  v85 = v61;
  v84 = 0;
  v144 = v61;
  v143 = v19;
  v142 = 0;
  v141 = 0;
  v150 = v61;
  v149 = &v142;
  v148 = v61;
  if (v61 >> 36)
  {
    *v149 = 0;
    v151 = 0x4000;
  }
  else
  {
    v147 = v148 >> 22;
    *v149 = 0;
    if (v147 >= 0x4000)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x495A8);
    }
    v151 = v147;
  }
  v141 = v151;
  if (v151 >= 0x4000)
    v145 = 0;
  else
    v145 = *(_QWORD *)(v143 + 408) + 4 * v141;
  v84 = (unsigned int *)v145;
  if (v145)
  {
    v146 = *v84;
    v87 = (unint64_t)v146 << 14;
  }
  else
  {
    v87 = 0;
  }
  v56 = v87;
  if (!v87)
  {
    v63 = 0;
    goto LABEL_111;
  }
  v55 = 0;
  v91 = v56;
  v90 = v61;
  v89 = 0;
  v95 = v56;
  v94 = v61;
  v93 = 0;
  v105 = v56;
  v104 = v61;
  v103 = 0;
  v109 = v56;
  v108 = v61;
  v107 = 0;
  v112 = v56;
  v114 = v56;
  v113 = 0;
  v107 = v61 - *(_QWORD *)(v56 + 80);
  v106 = 0;
  v122 = v56;
  v121 = 0;
  v123 = v56;
  v121 = *(_DWORD *)(v56 + 12);
  if ((unint64_t)v121 << 14)
  {
    v120 = v109;
    v119 = 0;
    v124 = v109;
    v119 = *(_DWORD *)(v109 + 12);
    v118 = v109;
    v117 = 0;
    v125 = v109;
    v117 = *(_DWORD *)(v109 + 12);
    v18 = ((unint64_t)v119 << 14) - ((unint64_t)v117 << 14) + 0x400000;
  }
  else
  {
    v116 = v109;
    v115 = 0;
    v126 = v109;
    v115 = *(_DWORD *)(v109 + 12);
    v18 = (unint64_t)v115 << 14;
  }
  v106 = v18;
  v17 = 0;
  if ((v107 & 0x8000000000000000) == 0)
    v17 = v107 < v106;
  if (!v17)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:438)";
    __break(1u);
    JUMPOUT(0x49810);
  }
  v103 = v107;
  v111 = v105;
  v110 = v107;
  v93 = (unint64_t)v107 >> 14;
  if (v93 >= *(_DWORD *)(v95 + 16))
    v96 = 0;
  else
    v96 = v95 + 48 * v93 + 2136;
  v89 = v96;
  if (!v96)
  {
    v92 = 0;
    goto LABEL_59;
  }
  v88 = 0;
  v98 = v89;
  if ((*(_BYTE *)(v89 + 32) & 0xF) == 4)
  {
    v97 = 0;
    v97 = v98 - *(unsigned int *)(v98 + 36);
    if (v97 < (v98 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:584)";
      __break(1u);
      JUMPOUT(0x49930);
    }
    v101 = v97;
    v100 = v98;
    v16 = *(_BYTE *)(v97 + 32) & 0xF;
    if ((v16 - 1) < 2)
    {
      v102 = v101 == v100;
    }
    else if (v16 == 3 || (v16 - 5) < 4)
    {
      if (v100 < v101)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:562)";
        __break(1u);
        JUMPOUT(0x499D4);
      }
      v102 = v100 < v101 + 48 * *(unsigned int *)(v101 + 40);
    }
    else
    {
      v102 = 0;
    }
    if (v102)
      v99 = v97;
    else
      v99 = v98;
  }
  else
  {
    v99 = v98;
  }
  v88 = v99;
  v153 = *(_BYTE *)(v99 + 32) & 0xF;
  if (v153 >= 2u)
  {
    if (v153 == 2)
    {
LABEL_54:
      v154 = 1;
      goto LABEL_55;
    }
    if (v153 - 3 >= 2)
    {
      if (v153 - 5 >= 3)
      {
        v152 = v153;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v153;
        __break(1u);
        JUMPOUT(0x49AF8);
      }
      goto LABEL_54;
    }
  }
  v154 = 0;
LABEL_55:
  if (v154 == 1)
    v15 = v88;
  else
    v15 = 0;
  v92 = v15;
LABEL_59:
  v55 = v92;
  if (v92)
  {
    if (*(unsigned __int16 *)(v55 + 34) == *(unsigned __int16 *)(v62 + 208))
    {
      v54 = v61;
      v53 = 0;
      v71 = v62;
      v70 = v55;
      v69 = 0;
      v73 = v62;
      v72 = v55;
      v76 = v62;
      v75 = v55;
      v74 = v55 & 0xFFFFFFFFFFFFC000;
      v14 = 1;
      if ((v55 & 0xFFFFFFFFFFFFC000) != 0)
      {
        v13 = 0;
        if (v75 >= v74 + 2136)
          v13 = v75 < v74 + 48 * *(unsigned int *)(v74 + 16) + 2136;
        v14 = v13;
      }
      if ((v14 & 1) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x49D48);
      }
      v78 = v74;
      v77 = v72;
      v83 = v74;
      v82 = v72;
      if (v72 < v74 + 2136)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x49DACLL);
      }
      v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - v83 - 2136) >> 4);
      if (v81 >= *(unsigned int *)(v83 + 16))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x49E14);
      }
      v80 = v74;
      v79 = v81;
      v53 = *(_QWORD *)(v74 + 80) + ((unint64_t)v81 << 14);
      v52 = v54 - v53;
      v51 = 0;
      v51 = *(_BYTE *)(v55 + 32) & 0xF;
      v50 = 0;
      v49 = 0;
      v67 = v51;
      if (v51 == 2 || v51 == 5)
      {
        v50 = *(_QWORD *)(v62 + 216) + 88 * *(unsigned __int8 *)(v55 + 33);
        v49 = *(_QWORD *)(v50 + 48);
        if (!XZM_FAST_ALIGNED(v52, v49, *(_DWORD *)(v50 + 64)))
        {
          v63 = 0;
          goto LABEL_111;
        }
      }
      else
      {
        v49 = (unint64_t)*(unsigned int *)(v55 + 40) << 14;
        v48 = v52 % v49;
        if (v52 % v49)
        {
          v63 = 0;
          goto LABEL_111;
        }
      }
      v47 = v52 / v49;
      v65 = *(_BYTE *)(v55 + 32) & 0xF;
      v66 = v65 == 2 || v65 == 5;
      v12 = 1;
      if (v66)
        v12 = v47 < *(unsigned int *)(v50 + 68);
      if (!v12)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_ki"
                               "nd) || block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Source"
                               "s/libmalloc_driverkit/src/xzone/xzone_malloc.c:2924)";
        __break(1u);
        JUMPOUT(0x4A04CLL);
      }
      v139 = v62;
      v138 = (unint64_t *)v55;
      v137 = v51;
      v136 = v52;
      v135 = v49;
      v134 = v54;
      if ((*(_BYTE *)(v55 + 32) & 0xF) != v51)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library"
                               "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
        __break(1u);
        JUMPOUT(0x4A0BCLL);
      }
      if (v137 == 2)
      {
        v133 = 0;
        v132 = 0;
        v131 = *(_QWORD *)v134;
        v132 = v131;
        v130 = v131;
        v133 = v131;
        v129 = 0;
        v129 = *(_QWORD *)(v139 + 272) ^ v134;
        if (v131 == v129)
        {
          is_free_slow = 0;
          is_free_slow = _xzm_xzone_tiny_chunk_block_is_free_slow(v139, v138, v134);
          v140 = is_free_slow & 1;
        }
        else
        {
          v140 = 0;
        }
      }
      else if (v137 == 5)
      {
        v127 = v136 / v135;
        v156 = v138;
        v155 = v136 / v135;
        if ((v138[4] & 0xF) != 5)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_"
                                 "CHUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../"
                                 "xzone/xzone_inline_internal.h:921)";
          __break(1u);
          JUMPOUT(0x4A1DCLL);
        }
        v140 = (*(_DWORD *)v156 >> v155) & 1;
      }
      else
      {
        v140 = 0;
      }
      if (v140 == 1)
      {
        v63 = 0;
      }
      else
      {
        if (v60)
          *v60 = v50;
        if (v59)
          *v59 = v54;
        if (v58)
          *v58 = v49;
        v63 = v55;
      }
      goto LABEL_111;
    }
    v63 = 0;
  }
  else
  {
    v63 = 0;
  }
LABEL_111:
  v40 = v63;
  if (v43)
    *v43 = v40;
  if (v40)
  {
    if (v42 == v44)
    {
      v46 = v41;
    }
    else
    {
      v39 = (char *)(v44 - v42);
      v46 = v41 - (v44 - v42);
    }
  }
  else
  {
    v46 = _xzm_ptr_size_outlined(v45, (unint64_t)v44);
  }
  v29 = v46;
  v28 = v32;
  if (v30 && *(unsigned __int16 *)(v30 + 34) != *(unsigned __int16 *)(v33 + 208))
  {
    qword_A4008 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: pointer being reallocated with wrong zone";
    qword_A4038 = v32;
    __break(1u);
    JUMPOUT(0x4A394);
  }
  if (!v30 || v46 <= 0x8000 || v31 <= 0x8000)
    goto LABEL_146;
  if ((v31 & 0x3FFF) != 0)
    v11 = (v31 & 0xFFFFFFFFFFFFC000) + 0x4000;
  else
    v11 = v31;
  v27 = v11 >> 14;
  v38 = v33;
  v37 = v30;
  v36 = v30 & 0xFFFFFFFFFFFFC000;
  v10 = 1;
  if ((v30 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v9 = 0;
    if (v37 >= v36 + 2136)
      v9 = v37 < v36 + 48 * *(unsigned int *)(v36 + 16) + 2136;
    v10 = v9;
  }
  if ((v10 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x4A4D4);
  }
  if (!v36)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment != NULL\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3066)";
    __break(1u);
    JUMPOUT(0x4A50CLL);
  }
  v26 = 0;
  if (v46 <= 0x200000 || v31 <= 0x200000 || (*(_BYTE *)(v33 + 296) & 0x80) != 0)
  {
    if (v46 <= 0x200000 && v31 <= 0x200000 && (*(_BYTE *)(v33 + 296) & 0x80) == 0)
      v26 = xzm_segment_group_try_realloc_large_chunk(*(os_unfair_lock_s **)v36, v36, v30, v27);
  }
  else
  {
    v26 = xzm_segment_group_try_realloc_huge_chunk(*(_QWORD *)v36, v33, v36, v30, v27, a6, a7, a8);
  }
  if ((v26 & 1) != 0)
  {
    v35 = (char *)v28;
  }
  else
  {
LABEL_146:
    if (v31 > v29 || v31 < v29 >> 1)
    {
      v25 = xzm_malloc(v33, v31, v34, 0);
      if (v25)
      {
        if (v29 >= v31)
          _platform_memmove(v25, v28, v31);
        else
          _platform_memmove(v25, v28, v29);
        v35 = (char *)v25;
      }
      else
      {
        v35 = 0;
      }
    }
    else
    {
      v35 = (char *)v28;
    }
  }
  v20 = v35;
  if (v35 && v35 != a2)
    _xzm_free(a1, a2, 0, a4, a5, a6, a7, a8);
  return (uint64_t)v20;
}

void _xzm_free(uint64_t a1, void *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  BOOL v9;
  char v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  char v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t **v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  BOOL v41;
  char v42;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  BOOL v77;
  int64_t v78;
  unint64_t v79;
  unint64_t v80;
  int64_t v81;
  int64_t v82;
  unint64_t v83;
  unint64_t v84;
  int64_t v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  unint64_t v89;
  unsigned int v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  unsigned int v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char is_free_slow;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char v112;
  unint64_t *v113;
  uint64_t v114;
  char v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unsigned __int8 v128;
  char v129;
  int v130;
  unint64_t *v131;

  v21 = a1;
  v20 = a2;
  v19 = a3;
  if (!a2)
    return;
  v18 = 0;
  v17 = 0;
  v16 = 0;
  v37 = v21;
  v36 = (unint64_t)v20;
  v35 = &v16;
  v34 = &v18;
  v33 = &v17;
  v32 = 0;
  v39 = v21;
  if (*(_QWORD *)(v21 + 232))
    v15 = *(_QWORD *)(v21 + 232);
  else
    v15 = v39;
  v32 = v15;
  v31 = 0;
  v61 = v15;
  v60 = v36;
  v59 = 0;
  v119 = v36;
  v118 = v15;
  v117 = 0;
  v116 = 0;
  v125 = v36;
  v124 = &v117;
  v123 = v36;
  if (v36 >> 36)
  {
    *v124 = 0;
    v126 = 0x4000;
  }
  else
  {
    v122 = v123 >> 22;
    *v124 = 0;
    if (v122 >= 0x4000)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x4A870);
    }
    v126 = v122;
  }
  v116 = v126;
  if (v126 >= 0x4000)
    v120 = 0;
  else
    v120 = *(_QWORD *)(v118 + 408) + 4 * v116;
  v59 = (unsigned int *)v120;
  if (v120)
  {
    v121 = *v59;
    v62 = (unint64_t)v121 << 14;
  }
  else
  {
    v62 = 0;
  }
  v31 = v62;
  if (!v62)
  {
    v38 = 0;
    goto LABEL_108;
  }
  v30 = 0;
  v66 = v31;
  v65 = v36;
  v64 = 0;
  v70 = v31;
  v69 = v36;
  v68 = 0;
  v80 = v31;
  v79 = v36;
  v78 = 0;
  v84 = v31;
  v83 = v36;
  v82 = 0;
  v87 = v31;
  v89 = v31;
  v88 = 0;
  v82 = v36 - *(_QWORD *)(v31 + 80);
  v81 = 0;
  v97 = v31;
  v96 = 0;
  v98 = v31;
  v96 = *(_DWORD *)(v31 + 12);
  if ((unint64_t)v96 << 14)
  {
    v95 = v84;
    v94 = 0;
    v99 = v84;
    v94 = *(_DWORD *)(v84 + 12);
    v93 = v84;
    v92 = 0;
    v100 = v84;
    v92 = *(_DWORD *)(v84 + 12);
    v14 = ((unint64_t)v94 << 14) - ((unint64_t)v92 << 14) + 0x400000;
  }
  else
  {
    v91 = v84;
    v90 = 0;
    v101 = v84;
    v90 = *(_DWORD *)(v84 + 12);
    v14 = (unint64_t)v90 << 14;
  }
  v81 = v14;
  v13 = 0;
  if ((v82 & 0x8000000000000000) == 0)
    v13 = v82 < v81;
  if (!v13)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:438)";
    __break(1u);
    JUMPOUT(0x4AAD8);
  }
  v78 = v82;
  v86 = v80;
  v85 = v82;
  v68 = (unint64_t)v82 >> 14;
  if (v68 >= *(_DWORD *)(v70 + 16))
    v71 = 0;
  else
    v71 = v70 + 48 * v68 + 2136;
  v64 = v71;
  if (!v71)
  {
    v67 = 0;
    goto LABEL_56;
  }
  v63 = 0;
  v73 = v64;
  if ((*(_BYTE *)(v64 + 32) & 0xF) == 4)
  {
    v72 = 0;
    v72 = v73 - *(unsigned int *)(v73 + 36);
    if (v72 < (v73 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:584)";
      __break(1u);
      JUMPOUT(0x4ABF8);
    }
    v76 = v72;
    v75 = v73;
    v12 = *(_BYTE *)(v72 + 32) & 0xF;
    if ((v12 - 1) < 2)
    {
      v77 = v76 == v75;
    }
    else if (v12 == 3 || (v12 - 5) < 4)
    {
      if (v75 < v76)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:562)";
        __break(1u);
        JUMPOUT(0x4AC9CLL);
      }
      v77 = v75 < v76 + 48 * *(unsigned int *)(v76 + 40);
    }
    else
    {
      v77 = 0;
    }
    if (v77)
      v74 = v72;
    else
      v74 = v73;
  }
  else
  {
    v74 = v73;
  }
  v63 = v74;
  v128 = *(_BYTE *)(v74 + 32) & 0xF;
  if (v128 >= 2u)
  {
    if (v128 == 2)
    {
LABEL_51:
      v129 = 1;
      goto LABEL_52;
    }
    if (v128 - 3 >= 2)
    {
      if (v128 - 5 >= 3)
      {
        v127 = v128;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v128;
        __break(1u);
        JUMPOUT(0x4ADC0);
      }
      goto LABEL_51;
    }
  }
  v129 = 0;
LABEL_52:
  if (v129 == 1)
    v11 = v63;
  else
    v11 = 0;
  v67 = v11;
LABEL_56:
  v30 = v67;
  if (!v67)
  {
    v38 = 0;
    goto LABEL_108;
  }
  if (*(unsigned __int16 *)(v30 + 34) != *(unsigned __int16 *)(v37 + 208))
  {
    v38 = 0;
    goto LABEL_108;
  }
  v29 = v36;
  v28 = 0;
  v46 = v37;
  v45 = v30;
  v44 = 0;
  v48 = v37;
  v47 = v30;
  v51 = v37;
  v50 = v30;
  v49 = v30 & 0xFFFFFFFFFFFFC000;
  v10 = 1;
  if ((v30 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v9 = 0;
    if (v50 >= v49 + 2136)
      v9 = v50 < v49 + 48 * *(unsigned int *)(v49 + 16) + 2136;
    v10 = v9;
  }
  if ((v10 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x4B010);
  }
  v53 = v49;
  v52 = v47;
  v58 = v49;
  v57 = v47;
  if (v47 < v49 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x4B074);
  }
  v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - v58 - 2136) >> 4);
  if (v56 >= *(unsigned int *)(v58 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x4B0DCLL);
  }
  v55 = v49;
  v54 = v56;
  v28 = *(_QWORD *)(v49 + 80) + ((unint64_t)v56 << 14);
  v27 = v29 - v28;
  v26 = 0;
  v26 = *(_BYTE *)(v30 + 32) & 0xF;
  v25 = 0;
  v24 = 0;
  v42 = v26;
  if (v26 == 2 || v26 == 5)
  {
    v25 = *(_QWORD *)(v37 + 216) + 88 * *(unsigned __int8 *)(v30 + 33);
    v24 = *(_QWORD *)(v25 + 48);
    if (!XZM_FAST_ALIGNED(v27, v24, *(_DWORD *)(v25 + 64)))
    {
      v38 = 0;
      goto LABEL_108;
    }
LABEL_80:
    v22 = v27 / v24;
    v40 = *(_BYTE *)(v30 + 32) & 0xF;
    v41 = v40 == 2 || v40 == 5;
    v8 = 1;
    if (v41)
      v8 = v22 < *(unsigned int *)(v25 + 68);
    if (!v8)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_kind"
                             ") || block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                             "bmalloc_driverkit/src/xzone/xzone_malloc.c:2924)";
      __break(1u);
      JUMPOUT(0x4B314);
    }
    v114 = v37;
    v113 = (unint64_t *)v30;
    v112 = v26;
    v111 = v27;
    v110 = v24;
    v109 = v29;
    if ((*(_BYTE *)(v30 + 32) & 0xF) != v26)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library/C"
                             "aches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
      __break(1u);
      JUMPOUT(0x4B384);
    }
    if (v112 == 2)
    {
      v108 = 0;
      v107 = 0;
      v106 = *(_QWORD *)v109;
      v107 = v106;
      v105 = v106;
      v108 = v106;
      v104 = 0;
      v104 = *(_QWORD *)(v114 + 272) ^ v109;
      if (v106 == v104)
      {
        is_free_slow = 0;
        is_free_slow = _xzm_xzone_tiny_chunk_block_is_free_slow(v114, v113, v109);
        v115 = is_free_slow & 1;
      }
      else
      {
        v115 = 0;
      }
    }
    else if (v112 == 5)
    {
      v102 = v111 / v110;
      v131 = v113;
      v130 = v111 / v110;
      if ((v113[4] & 0xF) != 5)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CH"
                               "UNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzon"
                               "e/xzone_inline_internal.h:921)";
        __break(1u);
        JUMPOUT(0x4B4A4);
      }
      v115 = (*(_DWORD *)v131 >> v130) & 1;
    }
    else
    {
      v115 = 0;
    }
    if (v115 == 1)
    {
      v38 = 0;
    }
    else
    {
      if (v35)
        *v35 = v25;
      if (v34)
        *v34 = (unint64_t *)v29;
      if (v33)
        *v33 = v24;
      v38 = v30;
    }
    goto LABEL_108;
  }
  v24 = (unint64_t)*(unsigned int *)(v30 + 40) << 14;
  v23 = v27 % v24;
  if (!(v27 % v24))
    goto LABEL_80;
  v38 = 0;
LABEL_108:
  if (v38)
  {
    if ((*(_BYTE *)(v38 + 32) & 0xF) == 2)
    {
      _xzm_xzone_free_tiny(v21, v16, v38, v18);
    }
    else if ((*(_BYTE *)(v38 + 32) & 0xF) == 5)
    {
      _xzm_xzone_free_block_to_small_chunk(v21, v16, v38, (uint64_t)v18);
    }
    else
    {
      if (v16)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!xz\" failed (/Library/Caches/com.apple.xbs/Sources/"
                               "libmalloc_driverkit/src/xzone/xzone_malloc.c:2998)";
        __break(1u);
        JUMPOUT(0x4B60CLL);
      }
      _xzm_free_large_huge(v21, v38);
    }
  }
  else
  {
    _xzm_free_outlined(v21, v20, v19 & 1, a4, a5, a6, a7, a8);
  }
}

unint64_t xzm_good_size(uint64_t a1, unint64_t a2)
{
  char v2;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v10;

  if (a2 > 0x8000)
  {
    if ((a2 & 0x3FFF) != 0)
      v6 = (a2 & 0xFFFFFFFFFFFFC000) + 0x4000;
    else
      v6 = a2;
    if (v6 <= a2)
      return a2;
    if ((a2 & 0x3FFF) != 0)
      return (a2 & 0xFFFFFFFFFFFFC000) + 0x4000;
    else
      return a2;
  }
  else
  {
    if (*(_QWORD *)(a1 + 232))
      v8 = *(_QWORD *)(a1 + 232);
    else
      v8 = a1;
    if (a2)
    {
      if (a2 > 0x80)
      {
        v2 = __clz(a2 - 1);
        v10 = (((a2 - 1) >> (61 - v2)) & 3 | (4 * (63 - v2))) - 20;
      }
      else
      {
        if ((a2 & 0xF) != 0)
          v7 = (a2 >> 4) + 1;
        else
          v7 = a2 >> 4;
        v10 = v7 - 1;
      }
    }
    else
    {
      v10 = 0;
    }
    return *(_QWORD *)(*(_QWORD *)(v8 + 352) + 8 * v10);
  }
}

uint64_t xzm_check()
{
  return 1;
}

void xzm_force_lock(uint64_t a1)
{
  _xzm_foreach_lock(a1, 0);
}

void _xzm_foreach_lock(uint64_t a1, int a2)
{
  char v2;
  unint64_t j;
  uint64_t k;
  uint64_t v5;
  unsigned __int8 i;

  if (!a2)
  {
    _xzm_do_lock_action((os_unfair_lock_s *)(a1 + 284), 0);
    _xzm_do_lock_action((os_unfair_lock_s *)(a1 + 280), 0);
    _xzm_allocation_slots_do_lock_action(a1, 0);
  }
  for (i = 1; i < (int)*(unsigned __int8 *)(a1 + 210); ++i)
  {
    v5 = *(_QWORD *)(a1 + 216) + 88 * i;
    if (*(_QWORD *)(v5 + 48) > 0x1000uLL)
      v2 = 5;
    else
      v2 = 2;
    if (v2 == 2)
    {
      _xzm_tiny_xzone_do_lock_action((unint64_t *)v5, a2);
    }
    else if (v2 == 5)
    {
      if (a2)
      {
        for (j = *(_QWORD *)v5; j; j = *(_QWORD *)(j + 16))
          _xzm_do_lock_action((os_unfair_lock_s *)(j + 8), a2);
        for (k = *(_QWORD *)(v5 + 8); k; k = *(_QWORD *)(k + 16))
          _xzm_do_lock_action((os_unfair_lock_s *)(k + 8), a2);
        _xzm_do_lock_action((os_unfair_lock_s *)(v5 + 24), a2);
      }
      else
      {
        _xzm_small_xzone_lock_all((os_unfair_lock_s *)v5);
      }
    }
  }
  if (a2)
  {
    _xzm_allocation_slots_do_lock_action(a1, a2);
    _xzm_do_lock_action((os_unfair_lock_s *)(a1 + 280), a2);
    _xzm_do_lock_action((os_unfair_lock_s *)(a1 + 284), a2);
  }
}

void xzm_force_unlock(uint64_t a1)
{
  _xzm_foreach_lock(a1, 1);
}

void xzm_reinit_lock(uint64_t a1)
{
  _xzm_foreach_lock(a1, 2);
}

void xzm_locked()
{
  qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: xzm_locked not implemented";
  __break(1u);
}

uint64_t sub_4BB70()
{
  return 1;
}

void xzm_force_lock_global_state(uint64_t a1)
{
  BOOL v1;

  v1 = 0;
  if (*(_DWORD *)(a1 + 104) >= 0xEu)
    v1 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 128) == 1;
  if (!v1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_malloc_zone_is_xzm(main_zone)\" failed (/Library/Ca"
                           "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3936)";
    __break(1u);
    JUMPOUT(0x4BBF8);
  }
  if (*(_QWORD *)(a1 + 232))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_malloc_zone_is_main((xzm_malloc_zone_t)main_zone)\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3937)";
    __break(1u);
    JUMPOUT(0x4BC34);
  }
  _xzm_global_state_lock(a1, 0);
}

void _xzm_global_state_lock(uint64_t a1, int a2)
{
  int m;
  unsigned __int8 k;
  uint64_t v4;
  unsigned __int8 j;
  unsigned __int8 i;

  for (i = 1; i < (int)*(unsigned __int8 *)(a1 + 210); ++i)
    _xzm_do_lock_action((os_unfair_lock_s *)(*(_QWORD *)(a1 + 376) + 16 * i + 8), a2);
  for (j = 0; j < (int)*(unsigned __int8 *)(a1 + 344); ++j)
  {
    v4 = *(_QWORD *)(a1 + 392) + 528 * j;
    _xzm_do_lock_action((os_unfair_lock_s *)(v4 + 8), a2);
    _xzm_do_lock_action((os_unfair_lock_s *)(v4 + 4), a2);
    if (*(_BYTE *)v4 == 1)
      _xzm_do_lock_action((os_unfair_lock_s *)(v4 + 520), a2);
  }
  for (k = 0; k < (int)*(unsigned __int8 *)(a1 + 329); ++k)
    _xzm_do_lock_action((os_unfair_lock_s *)(*(_QWORD *)(a1 + 384) + 56 * k + 16), a2);
  _xzm_do_lock_action((os_unfair_lock_s *)(a1 + 432), a2);
  for (m = 0; m < *(unsigned __int8 *)(a1 + 330); ++m)
    _xzm_do_lock_action((os_unfair_lock_s *)(*(_QWORD *)(a1 + 400) + ((uint64_t)m << 6)), a2);
  _xzm_do_lock_action((os_unfair_lock_s *)(a1 + 448), a2);
}

void xzm_force_unlock_global_state(uint64_t a1)
{
  BOOL v1;

  v1 = 0;
  if (*(_DWORD *)(a1 + 104) >= 0xEu)
    v1 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 128) == 1;
  if (!v1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_malloc_zone_is_xzm(main_zone)\" failed (/Library/Ca"
                           "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3945)";
    __break(1u);
    JUMPOUT(0x4BEF8);
  }
  if (*(_QWORD *)(a1 + 232))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_malloc_zone_is_main((xzm_malloc_zone_t)main_zone)\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3946)";
    __break(1u);
    JUMPOUT(0x4BF34);
  }
  _xzm_global_state_lock(a1, 1);
}

void xzm_force_reinit_lock_global_state(uint64_t a1)
{
  BOOL v1;

  v1 = 0;
  if (*(_DWORD *)(a1 + 104) >= 0xEu)
    v1 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 128) == 1;
  if (!v1)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_malloc_zone_is_xzm(main_zone)\" failed (/Library/Ca"
                           "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3954)";
    __break(1u);
    JUMPOUT(0x4BFDCLL);
  }
  if (*(_QWORD *)(a1 + 232))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_malloc_zone_is_main((xzm_malloc_zone_t)main_zone)\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3955)";
    __break(1u);
    JUMPOUT(0x4C018);
  }
  _xzm_global_state_lock(a1, 2);
}

uint64_t xzm_ptr_lookup_4test(uint64_t a1, unint64_t a2, _BYTE *a3, _BYTE *a4, _BYTE *a5)
{
  BOOL v6;
  char v7;
  BOOL v8;
  BOOL v9;
  char v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  BOOL v47;
  char v48;
  char v50;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  int64_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  BOOL v85;
  int64_t v86;
  unint64_t v87;
  unint64_t v88;
  int64_t v89;
  int64_t v90;
  unint64_t v91;
  unint64_t v92;
  int64_t v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  unsigned int v98;
  unint64_t v99;
  int v100;
  unint64_t v101;
  unsigned int v102;
  unint64_t v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char is_free_slow;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char v120;
  unint64_t *v121;
  uint64_t v122;
  char v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unsigned __int8 v136;
  char v137;
  int v138;
  unint64_t *v139;

  v23 = a1;
  v22 = a2;
  v21 = a3;
  v20 = a4;
  v19 = a5;
  v18 = 0;
  v40 = a1;
  v39 = a2;
  v38 = &v18;
  v37 = 0;
  v36 = 0;
  v35 = 0;
  v42 = a1;
  if (*(_QWORD *)(a1 + 232))
    v15 = *(_QWORD *)(a1 + 232);
  else
    v15 = v42;
  v35 = v15;
  v34 = 0;
  v69 = v15;
  v68 = v39;
  v67 = 0;
  v127 = v39;
  v126 = v15;
  v125 = 0;
  v124 = 0;
  v133 = v39;
  v132 = &v125;
  v131 = v39;
  if (v39 >> 36)
  {
    *v132 = 0;
    v134 = 0x4000;
  }
  else
  {
    v130 = v131 >> 22;
    *v132 = 0;
    if (v130 >= 0x4000)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x4C1A4);
    }
    v134 = v130;
  }
  v124 = v134;
  if (v134 >= 0x4000)
    v128 = 0;
  else
    v128 = *(_QWORD *)(v126 + 408) + 4 * v124;
  v67 = (unsigned int *)v128;
  if (v128)
  {
    v129 = *v67;
    v70 = (unint64_t)v129 << 14;
  }
  else
  {
    v70 = 0;
  }
  v34 = v70;
  if (!v70)
  {
    v41 = 0;
    goto LABEL_107;
  }
  v33 = 0;
  v74 = v34;
  v73 = v39;
  v72 = 0;
  v78 = v34;
  v77 = v39;
  v76 = 0;
  v88 = v34;
  v87 = v39;
  v86 = 0;
  v92 = v34;
  v91 = v39;
  v90 = 0;
  v95 = v34;
  v97 = v34;
  v96 = 0;
  v90 = v39 - *(_QWORD *)(v34 + 80);
  v89 = 0;
  v105 = v34;
  v104 = 0;
  v106 = v34;
  v104 = *(_DWORD *)(v34 + 12);
  if ((unint64_t)v104 << 14)
  {
    v103 = v92;
    v102 = 0;
    v107 = v92;
    v102 = *(_DWORD *)(v92 + 12);
    v101 = v92;
    v100 = 0;
    v108 = v92;
    v100 = *(_DWORD *)(v92 + 12);
    v14 = ((unint64_t)v102 << 14) - ((unint64_t)v100 << 14) + 0x400000;
  }
  else
  {
    v99 = v92;
    v98 = 0;
    v109 = v92;
    v98 = *(_DWORD *)(v92 + 12);
    v14 = (unint64_t)v98 << 14;
  }
  v89 = v14;
  v13 = 0;
  if ((v90 & 0x8000000000000000) == 0)
    v13 = v90 < v89;
  if (!v13)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:438)";
    __break(1u);
    JUMPOUT(0x4C40CLL);
  }
  v86 = v90;
  v94 = v88;
  v93 = v90;
  v76 = (unint64_t)v90 >> 14;
  if (v76 >= *(_DWORD *)(v78 + 16))
    v79 = 0;
  else
    v79 = v78 + 48 * v76 + 2136;
  v72 = v79;
  if (!v79)
  {
    v75 = 0;
    goto LABEL_55;
  }
  v71 = 0;
  v81 = v72;
  if ((*(_BYTE *)(v72 + 32) & 0xF) == 4)
  {
    v80 = 0;
    v80 = v81 - *(unsigned int *)(v81 + 36);
    if (v80 < (v81 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:584)";
      __break(1u);
      JUMPOUT(0x4C52CLL);
    }
    v84 = v80;
    v83 = v81;
    v12 = *(_BYTE *)(v80 + 32) & 0xF;
    if ((v12 - 1) < 2)
    {
      v85 = v84 == v83;
    }
    else if (v12 == 3 || (v12 - 5) < 4)
    {
      if (v83 < v84)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:562)";
        __break(1u);
        JUMPOUT(0x4C5D0);
      }
      v85 = v83 < v84 + 48 * *(unsigned int *)(v84 + 40);
    }
    else
    {
      v85 = 0;
    }
    if (v85)
      v82 = v80;
    else
      v82 = v81;
  }
  else
  {
    v82 = v81;
  }
  v71 = v82;
  v136 = *(_BYTE *)(v82 + 32) & 0xF;
  if (v136 >= 2u)
  {
    if (v136 == 2)
    {
LABEL_50:
      v137 = 1;
      goto LABEL_51;
    }
    if (v136 - 3 >= 2)
    {
      if (v136 - 5 >= 3)
      {
        v135 = v136;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v136;
        __break(1u);
        JUMPOUT(0x4C6F4);
      }
      goto LABEL_50;
    }
  }
  v137 = 0;
LABEL_51:
  if (v137 == 1)
    v11 = v71;
  else
    v11 = 0;
  v75 = v11;
LABEL_55:
  v33 = v75;
  if (!v75)
  {
    v41 = 0;
    goto LABEL_107;
  }
  if (*(unsigned __int16 *)(v33 + 34) != *(unsigned __int16 *)(v40 + 208))
  {
    v41 = 0;
    goto LABEL_107;
  }
  v32 = v39;
  v31 = 0;
  v54 = v40;
  v53 = v33;
  v52 = 0;
  v56 = v40;
  v55 = v33;
  v59 = v40;
  v58 = v33;
  v57 = v33 & 0xFFFFFFFFFFFFC000;
  v10 = 1;
  if ((v33 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v9 = 0;
    if (v58 >= v57 + 2136)
      v9 = v58 < v57 + 48 * *(unsigned int *)(v57 + 16) + 2136;
    v10 = v9;
  }
  if ((v10 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x4C944);
  }
  v61 = v57;
  v60 = v55;
  v66 = v57;
  v65 = v55;
  if (v55 < v57 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x4C9A8);
  }
  v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - v66 - 2136) >> 4);
  if (v64 >= *(unsigned int *)(v66 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x4CA10);
  }
  v63 = v57;
  v62 = v64;
  v31 = *(_QWORD *)(v57 + 80) + ((unint64_t)v64 << 14);
  v30 = v32 - v31;
  v29 = 0;
  v29 = *(_BYTE *)(v33 + 32) & 0xF;
  v28 = 0;
  v27 = 0;
  v48 = v29;
  if (v29 == 2 || v29 == 5)
  {
    v28 = *(_QWORD *)(v40 + 216) + 88 * *(unsigned __int8 *)(v33 + 33);
    v27 = *(_QWORD *)(v28 + 48);
    if (!XZM_FAST_ALIGNED(v30, v27, *(_DWORD *)(v28 + 64)))
    {
      v41 = 0;
      goto LABEL_107;
    }
  }
  else
  {
    v27 = (unint64_t)*(unsigned int *)(v33 + 40) << 14;
    v26 = v30 % v27;
    if (v30 % v27)
    {
      v41 = 0;
      goto LABEL_107;
    }
  }
  v25 = v30 / v27;
  v46 = *(_BYTE *)(v33 + 32) & 0xF;
  v47 = v46 == 2 || v46 == 5;
  v8 = 1;
  if (v47)
    v8 = v25 < *(unsigned int *)(v28 + 68);
  if (!v8)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_kind) "
                           "|| block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Sources/libmal"
                           "loc_driverkit/src/xzone/xzone_malloc.c:2924)";
    __break(1u);
    JUMPOUT(0x4CC48);
  }
  v122 = v40;
  v121 = (unint64_t *)v33;
  v120 = v29;
  v119 = v30;
  v118 = v27;
  v117 = v32;
  if ((*(_BYTE *)(v33 + 32) & 0xF) != v29)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library/Cac"
                           "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
    __break(1u);
    JUMPOUT(0x4CCB8);
  }
  if (v120 == 2)
  {
    v116 = 0;
    v115 = 0;
    v114 = *(_QWORD *)v117;
    v115 = v114;
    v113 = v114;
    v116 = v114;
    v112 = 0;
    v112 = *(_QWORD *)(v122 + 272) ^ v117;
    if (v114 == v112)
    {
      is_free_slow = 0;
      is_free_slow = _xzm_xzone_tiny_chunk_block_is_free_slow(v122, v121, v117);
      v123 = is_free_slow & 1;
    }
    else
    {
      v123 = 0;
    }
  }
  else if (v120 == 5)
  {
    v110 = v119 / v118;
    v139 = v121;
    v138 = v119 / v118;
    if ((v121[4] & 0xF) != 5)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CHUN"
                             "K\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xz"
                             "one_inline_internal.h:921)";
      __break(1u);
      JUMPOUT(0x4CDD8);
    }
    v123 = (*(_DWORD *)v139 >> v138) & 1;
  }
  else
  {
    v123 = 0;
  }
  if (v123 == 1)
  {
    v41 = 0;
  }
  else
  {
    if (v38)
      *v38 = v28;
    if (v37)
      *v37 = v32;
    if (v36)
      *v36 = v27;
    v41 = v33;
  }
LABEL_107:
  v17 = v41;
  if (v41)
  {
    v16 = *(_BYTE *)(v41 + 32) & 0xF;
    *v21 = v16;
    v45 = v23;
    v44 = v17;
    v43 = v17 & 0xFFFFFFFFFFFFC000;
    v7 = 1;
    if ((v17 & 0xFFFFFFFFFFFFC000) != 0)
    {
      v6 = 0;
      if (v44 >= v43 + 2136)
        v6 = v44 < v43 + 48 * *(unsigned int *)(v43 + 16) + 2136;
      v7 = v6;
    }
    if ((v7 & 1) == 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0x4CF98);
    }
    *v20 = **(_BYTE **)v43;
    v50 = v16;
    if (v16 == 2 || v16 == 5)
    {
      if (!v18)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"xz\" failed (/Library/Caches/com.apple.xbs/Sources/l"
                               "ibmalloc_driverkit/src/xzone/xzone_malloc.c:4172)";
        __break(1u);
        JUMPOUT(0x4D03CLL);
      }
      *v19 = *(_BYTE *)(v18 + 76);
    }
    return 1;
  }
  else
  {
    return 0;
  }
}

void xzm_type_choose_ptr_bucket_4test(uint64_t a1, unsigned __int8 a2)
{
  if (a2 >= 5u)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
    __break(1u);
    JUMPOUT(0x4D0CCLL);
  }
  __asm { BR              X8 }
}

uint64_t sub_4D114()
{
  return 0;
}

uint64_t xzm_main_malloc_zone_create(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  _QWORD *v15;
  _BYTE *v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  _OWORD *v28;
  const char **v29;
  uint64_t v30;
  _OWORD *v31;
  _QWORD *v32;
  _OWORD *v33;
  const char **v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _OWORD *v40;
  _OWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  _OWORD *v44;
  const char **v45;
  uint64_t v46;
  _OWORD *v47;
  _BYTE *v48;
  _OWORD *v49;
  const char **v50;
  uint64_t v51;
  _OWORD *v52;
  _QWORD *v53;
  _OWORD *v54;
  const char **v55;
  uint64_t v56;
  _OWORD *v57;
  _QWORD *v58;
  _OWORD *v59;
  const char **v60;
  uint64_t v61;
  _OWORD *v62;
  _QWORD *v63;
  _OWORD *v64;
  const char **v65;
  uint64_t v66;
  _OWORD *v67;
  _QWORD *v68;
  _OWORD *v69;
  const char **v70;
  uint64_t v71;
  _OWORD *v72;
  _QWORD *v73;
  _OWORD *v74;
  const char **v75;
  uint64_t v76;
  _OWORD *v77;
  _QWORD *v78;
  _OWORD *v79;
  const char **v80;
  uint64_t v81;
  _OWORD *v82;
  _QWORD *v83;
  _OWORD *v84;
  _OWORD *v85;
  const char **v86;
  uint64_t v87;
  _OWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  _OWORD *v98;
  _OWORD *v99;
  const char **v100;
  uint64_t v101;
  _OWORD *v102;
  _QWORD *v103;
  _OWORD *v104;
  const char **v105;
  uint64_t v106;
  _OWORD *v107;
  _QWORD *v108;
  _OWORD *v109;
  const char **v110;
  uint64_t v111;
  _OWORD *v112;
  _QWORD *v113;
  _OWORD *v114;
  const char **v115;
  uint64_t v116;
  _OWORD *v117;
  _QWORD *v118;
  _OWORD *v119;
  const char **v120;
  uint64_t v121;
  _OWORD *v122;
  _BYTE *v123;
  uint64_t v124;
  _OWORD *v125;
  const char **v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _OWORD *v133;
  _QWORD *v134;
  _OWORD *v135;
  const char **v136;
  uint64_t v137;
  _OWORD *v138;
  _QWORD *v139;
  _OWORD *v140;
  const char **v141;
  uint64_t v142;
  uint64_t *v143;
  _QWORD *v144;
  _OWORD *v145;
  const char **v146;
  uint64_t v147;
  uint64_t *v148;
  _QWORD *v149;
  _OWORD *v150;
  const char **v151;
  uint64_t v152;
  uint64_t *v153;
  _QWORD *v154;
  _OWORD *v155;
  const char **v156;
  uint64_t v157;
  uint64_t *v158;
  _QWORD *v159;
  _QWORD *v160;
  _OWORD *v161;
  const char **v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _OWORD *v169;
  _QWORD *v170;
  mach_vm_address_t plat;
  _OWORD *v172;
  _OWORD *v173;
  _OWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  void *v178;
  _OWORD *v179;
  _OWORD *v180;
  _OWORD *v181;
  _QWORD *v182;
  _OWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _DWORD *v186;
  _OWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  _DWORD *v190;
  _OWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _DWORD *v194;
  _DWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  _OWORD *v198;
  _OWORD *v199;
  _OWORD *v200;
  _OWORD *v201;
  _OWORD *v202;
  _QWORD *v203;
  _DWORD *v204;
  _QWORD *v205;
  _OWORD *v206;
  const char *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v215[21];
  uint64_t v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  int v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  int v232;
  __int128 v233;
  void *__src;
  void *__dst;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int __base;
  char *__str;
  _QWORD *v264;
  _OWORD *v265;
  int v266;
  size_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  BOOL v271;
  __n128 *v272;
  __n128 *v273;
  __n128 *v274;
  int v275;
  int v276;
  __n128 *v277;
  unint64_t i;
  _OWORD v279[3];
  unsigned __int16 v280;
  int v281;
  BOOL v282;
  _QWORD v283[60];
  __int16 v284;
  unsigned int v285;
  unsigned int v286;
  char v287;
  char v288;
  char v289;
  char v290;
  BOOL v291;
  BOOL v292;
  BOOL v293;
  BOOL v294;
  unsigned __int16 v295;
  kern_return_t v296;
  mach_timebase_info info;
  unsigned __int8 v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned __int8 v302;
  BOOL v303;
  BOOL v304;
  BOOL v305;
  char v306;
  uint64_t v307[3];
  unsigned __int8 v308;
  BOOL v309;
  uint64_t v310;
  _QWORD __buf[5];
  unsigned int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  unsigned __int8 v318;
  char v319;
  unsigned __int8 v320;
  unsigned __int8 v321;
  _BYTE v322[256];
  char v323[17];

  v264 = __buf;
  v265 = v279;
  v312 = a1;
  __buf[4] = a2;
  __buf[3] = a3;
  __buf[2] = a4;
  __buf[1] = 0;
  __buf[0] = 0;
  v310 = 0;
  v310 = _simple_getenv(a3, "executable_boothash");
  if (v310)
  {
    v4 = v265;
    *((_QWORD *)v265 + 157) = 0;
    v5 = _platform_strlen(*((_QWORD *)v4 + 158));
    v6 = v265;
    *((_QWORD *)v265 + 157) = v5;
    if (*((_QWORD *)v6 + 157) <= 0x1FuLL)
    {
      v7 = v265;
      *((_QWORD *)v265 + 156) = 0;
      *((_QWORD *)v7 + 156) = *((_QWORD *)v7 + 157);
      v8 = *((_QWORD *)v7 + 156);
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: invalid executable_boothash length";
      qword_A4038 = v8;
      __break(1u);
      JUMPOUT(0x4D320);
    }
    v9 = v265;
    *((_QWORD *)v265 + 155) = 0;
    v9[155] = 16;
    v9[154] = 0;
    v9[153] = 0;
    v9[153] = 2;
    v9[152] = 0;
    v9[152] = 0;
    while (*((_QWORD *)v265 + 152) <= 1uLL)
    {
      v10 = *((_QWORD *)v265 + 158) + 16 * *((_QWORD *)v265 + 152);
      __base = 16;
      __str = v323;
      _platform_memmove(v323, v10, 16);
      v323[16] = 0;
      v11 = strtoull(v323, 0, 16);
      v12 = v265;
      *((_QWORD *)v265 + 154) = v11;
      if (!*((_QWORD *)v12 + 154) && *__error() == 22 || *((_QWORD *)v265 + 154) == -1 && *__error() == 34)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: invalid executable_boothash string";
        __break(1u);
        JUMPOUT(0x4D418);
      }
      __buf[(*((_QWORD *)v265 + 152))++] = *((_QWORD *)v265 + 154);
    }
  }
  else
  {
    arc4random_buf(__buf, 0x10uLL);
  }
  v13 = v265;
  *((_QWORD *)v265 + 151) = 0;
  *((_QWORD *)v13 + 151) = 0;
  v309 = (v312 & 0x20) != 0;
  v14 = v265;
  v15 = v264;
  v308 = 2;
  *((_QWORD *)v265 + 149) = 0;
  *((_QWORD *)v14 + 149) = 0;
  *((_QWORD *)v14 + 148) = 0;
  v16 = malloc_common_value_for_key_copy((_BYTE *)v15[2], (uint64_t)"xzone_ptr_buckets", v322, 0x100uLL);
  v17 = v265;
  *((_QWORD *)v265 + 148) = v16;
  if (*((_QWORD *)v17 + 148))
  {
    v18 = v265;
    *((_QWORD *)v265 + 147) = 0;
    *((_QWORD *)v18 + 146) = 0;
    v19 = malloc_common_convert_to_long(*((char **)v18 + 148), v307);
    v26 = v265;
    *((_QWORD *)v265 + 146) = v19;
    if (**((_BYTE **)v26 + 147) || *((uint64_t *)v265 + 146) < 1 || *((uint64_t *)v265 + 146) > 4)
      malloc_report(3, (uint64_t)"Invalid xzone_ptr_buckets value %ld - ignored.\n", v20, v21, v22, v23, v24, v25, *((_QWORD *)v265 + 146));
    else
      *((_QWORD *)v265 + 149) = *((_QWORD *)v265 + 146);
  }
  v306 = 1;
  v27 = _simple_getenv(v264[4], "MallocMaxMagazines");
  v28 = v265;
  *((_QWORD *)v265 + 148) = v27;
  if (*((_QWORD *)v28 + 148))
  {
    v29 = (const char **)v265;
    *((_QWORD *)v265 + 144) = 0;
    v30 = strtol(v29[148], 0, 10);
    v31 = v265;
    *((_QWORD *)v265 + 144) = v30;
    if (*((_QWORD *)v31 + 144) == 1)
    {
      v308 = 0;
      *((_QWORD *)v265 + 149) = 1;
    }
    else if (*((_QWORD *)v265 + 144) == 2 || *((_QWORD *)v265 + 144) == 0xFFFFLL)
    {
      v308 = 1;
      *((_QWORD *)v265 + 149) = 1;
    }
  }
  v32 = v264;
  v264[47] = v264[4];
  v32[46] = "MallocXzonePtrBucketCount";
  if ((malloc_internal_security_policy & 1) != 0)
    v261 = _simple_getenv(v264[47], v264[46]);
  else
    v261 = 0;
  v33 = v265;
  *((_QWORD *)v265 + 148) = v261;
  if (*((_QWORD *)v33 + 148))
  {
    v34 = (const char **)v265;
    *((_QWORD *)v265 + 143) = 0;
    v35 = strtol(v34[148], 0, 10);
    v36 = v265;
    *((_QWORD *)v265 + 143) = v35;
    if ((*((_QWORD *)v36 + 143) & 0x8000000000000000) == 0 && *((uint64_t *)v265 + 143) <= 4)
      *((_QWORD *)v265 + 149) = *((_QWORD *)v265 + 143);
  }
  v37 = v265;
  *((_QWORD *)v265 + 142) = 0;
  v260 = *((_QWORD *)v37 + 149);
  if (v260)
    v259 = v260;
  else
    v259 = 3;
  v38 = v265;
  *((_QWORD *)v265 + 142) = v259;
  v38[141] = 0;
  v38[140] = 40;
  v38[141] = v38[140];
  v38[139] = 0;
  v38[139] = 1;
  if (v38[149])
  {
    v39 = v265;
    *((_QWORD *)v265 + 138) = 0;
    v39[138] = v39[149] + 2;
    v39[139] += v39[141] * v39[138];
  }
  else
  {
    v40 = v265;
    *((_QWORD *)v265 + 137) = 0;
    *((_QWORD *)v40 + 137) = 0;
    while (1)
    {
      v41 = v265;
      v42 = *((_QWORD *)v265 + 137);
      *((_QWORD *)v265 + 136) = 40;
      if (v42 >= *((_QWORD *)v41 + 136))
        break;
      *((_QWORD *)v265 + 139) += _xzm_bin_bucket_defaults[(*((_QWORD *)v265 + 137))++];
    }
  }
  if (*((_QWORD *)v265 + 139) >= 0x100uLL)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"xzone_count <= UINT8_MAX\" failed (/Library/Caches/com.a"
                           "pple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4732)";
    __break(1u);
    JUMPOUT(0x4D84CLL);
  }
  v305 = 0;
  if (*((_QWORD *)v265 + 151))
    v305 = (*(_BYTE *)(*((_QWORD *)v265 + 151) + 1) & 1) != 0;
  v43 = v264;
  v264[45] = v264[4];
  v43[44] = "MallocXzoneMadviseWorkaround";
  if ((malloc_internal_security_policy & 1) != 0)
    v258 = _simple_getenv(v264[45], v264[44]);
  else
    v258 = 0;
  v44 = v265;
  *((_QWORD *)v265 + 148) = v258;
  if (*((_QWORD *)v44 + 148))
  {
    v45 = (const char **)v265;
    *((_QWORD *)v265 + 134) = 0;
    v46 = strtol(v45[148], 0, 10);
    v47 = v265;
    *((_QWORD *)v265 + 134) = v46;
    if (!*((_QWORD *)v47 + 134) || *((_QWORD *)v265 + 134) == 1)
      v305 = *((_QWORD *)v265 + 134) != 0;
  }
  v304 = 1;
  if (*((_QWORD *)v265 + 151))
    v304 = (*(_BYTE *)(*((_QWORD *)v265 + 151) + 2) & 1) == 0;
  v303 = _malloc_engaged_nano == 2;
  if (_malloc_engaged_nano == 2)
    v308 = 2;
  if (*((_QWORD *)v265 + 151) && **((_BYTE **)v265 + 151) != 3)
    v308 = **((_BYTE **)v265 + 151);
  v48 = malloc_common_value_for_key_copy((_BYTE *)v264[2], (uint64_t)"malloc_xzone_slot_config", v322, 0x100uLL);
  v49 = v265;
  *((_QWORD *)v265 + 148) = v48;
  if (*((_QWORD *)v49 + 148))
  {
    v50 = (const char **)v265;
    *((_QWORD *)v265 + 132) = 0;
    v51 = strtol(v50[148], 0, 10);
    v52 = v265;
    *((_QWORD *)v265 + 132) = v51;
    if ((v52[66] & 0x8000000000000000) == 0 && *((uint64_t *)v265 + 132) <= 2)
      v308 = *((_QWORD *)v265 + 132);
  }
  v53 = v264;
  v264[43] = v264[4];
  v53[42] = "MallocXzoneSlotConfig";
  if ((malloc_internal_security_policy & 1) != 0)
    v257 = _simple_getenv(v264[43], v264[42]);
  else
    v257 = 0;
  v54 = v265;
  *((_QWORD *)v265 + 148) = v257;
  if (*((_QWORD *)v54 + 148))
  {
    v55 = (const char **)v265;
    *((_QWORD *)v265 + 131) = 0;
    v56 = strtol(v55[148], 0, 10);
    v57 = v265;
    *((_QWORD *)v265 + 131) = v56;
    if ((*((_QWORD *)v57 + 131) & 0x8000000000000000) == 0 && *((uint64_t *)v265 + 131) <= 2)
      v308 = *((_QWORD *)v265 + 131);
  }
  v58 = v264;
  v302 = 0;
  v264[41] = v264[4];
  v58[40] = "MallocXzoneInitialSlotConfig";
  if ((malloc_internal_security_policy & 1) != 0)
    v256 = _simple_getenv(v264[41], v264[40]);
  else
    v256 = 0;
  v59 = v265;
  *((_QWORD *)v265 + 148) = v256;
  if (*((_QWORD *)v59 + 148))
  {
    v60 = (const char **)v265;
    *((_QWORD *)v265 + 129) = 0;
    v61 = strtol(v60[148], 0, 10);
    v62 = v265;
    *((_QWORD *)v265 + 129) = v61;
    if ((*((_QWORD *)v62 + 129) & 0x8000000000000000) == 0 && *((uint64_t *)v265 + 129) <= 2)
      v302 = *((_QWORD *)v265 + 129);
  }
  v63 = v264;
  v301 = 64;
  v300 = 256;
  v264[39] = v264[4];
  v63[38] = "MallocXzoneSlotUpgradeThreshold";
  if ((malloc_internal_security_policy & 1) != 0)
    v255 = _simple_getenv(v264[39], v264[38]);
  else
    v255 = 0;
  v64 = v265;
  *((_QWORD *)v265 + 148) = v255;
  if (*((_QWORD *)v64 + 148))
  {
    v65 = (const char **)v265;
    *((_QWORD *)v265 + 127) = 0;
    v66 = strtol(v65[148], 0, 10);
    v67 = v265;
    *((_QWORD *)v265 + 127) = v66;
    if ((*((_QWORD *)v67 + 127) & 0x8000000000000000) == 0 && *((uint64_t *)v265 + 127) <= 4294967294)
    {
      v301 = *((_QWORD *)v265 + 127);
      v300 = *((_QWORD *)v265 + 127);
    }
  }
  v68 = v264;
  v264[37] = v264[4];
  v68[36] = "MallocXzoneSlotUpgradeThresholdSingle";
  if ((malloc_internal_security_policy & 1) != 0)
    v254 = _simple_getenv(v264[37], v264[36]);
  else
    v254 = 0;
  v69 = v265;
  *((_QWORD *)v265 + 148) = v254;
  if (*((_QWORD *)v69 + 148))
  {
    v70 = (const char **)v265;
    *((_QWORD *)v265 + 126) = 0;
    v71 = strtol(v70[148], 0, 10);
    v72 = v265;
    *((_QWORD *)v265 + 126) = v71;
    if ((v72[63] & 0x8000000000000000) == 0 && *((uint64_t *)v265 + 126) <= 4294967294)
      v301 = *((_QWORD *)v265 + 126);
  }
  v73 = v264;
  v264[35] = v264[4];
  v73[34] = "MallocXzoneSlotUpgradeThresholdCluster";
  if ((malloc_internal_security_policy & 1) != 0)
    v253 = _simple_getenv(v264[35], v264[34]);
  else
    v253 = 0;
  v74 = v265;
  *((_QWORD *)v265 + 148) = v253;
  if (*((_QWORD *)v74 + 148))
  {
    v75 = (const char **)v265;
    *((_QWORD *)v265 + 125) = 0;
    v76 = strtol(v75[148], 0, 10);
    v77 = v265;
    *((_QWORD *)v265 + 125) = v76;
    if ((*((_QWORD *)v77 + 125) & 0x8000000000000000) == 0 && *((uint64_t *)v265 + 125) <= 4294967294)
      v300 = *((_QWORD *)v265 + 125);
  }
  v78 = v264;
  v299 = 1024;
  v264[33] = v264[4];
  v78[32] = "MallocXzoneSlotUpgradePeriod";
  if ((malloc_internal_security_policy & 1) != 0)
    v252 = _simple_getenv(v264[33], v264[32]);
  else
    v252 = 0;
  v79 = v265;
  *((_QWORD *)v265 + 148) = v252;
  if (*((_QWORD *)v79 + 148))
  {
    v80 = (const char **)v265;
    *((_QWORD *)v265 + 123) = 0;
    v81 = strtol(v80[148], 0, 10);
    v82 = v265;
    *((_QWORD *)v265 + 123) = v81;
    if ((*((_QWORD *)v82 + 123) & 0x8000000000000000) == 0 && *((uint64_t *)v265 + 123) <= 4294967294)
      v299 = *((_QWORD *)v265 + 123);
  }
  v298 = 0;
  v251 = v308;
  if (!v308)
  {
    v298 = 1;
    goto LABEL_112;
  }
  if (v251 == 1)
  {
    if (ncpuclusters >= 2)
    {
      v298 = ncpuclusters;
      goto LABEL_112;
    }
  }
  else if (v251 != 2)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Invalid xzone slot config";
    __break(1u);
    JUMPOUT(0x4DFF8);
  }
  v308 = 2;
  v298 = logical_ncpus;
LABEL_112:
  v83 = v264;
  v84 = v265;
  *((_QWORD *)v265 + 121) = 0;
  *((_QWORD *)v84 + 121) = 1000000;
  *((_QWORD *)v84 + 120) = 0;
  *((_QWORD *)v84 + 120) = 1000000;
  v83[31] = v83[4];
  v83[30] = "MallocXzoneTinyThrashThreshold";
  if ((malloc_internal_security_policy & 1) != 0)
    v250 = _simple_getenv(v264[31], v264[30]);
  else
    v250 = 0;
  v85 = v265;
  *((_QWORD *)v265 + 148) = v250;
  if (*((_QWORD *)v85 + 148))
  {
    v86 = (const char **)v265;
    *((_QWORD *)v265 + 119) = 0;
    v87 = strtol(v86[148], 0, 10);
    v88 = v265;
    *((_QWORD *)v265 + 119) = v87;
    if ((*((_QWORD *)v88 + 119) & 0x8000000000000000) == 0 && *((uint64_t *)v265 + 119) <= 4294967294)
      *((_QWORD *)v265 + 120) = 1000000 * *((_QWORD *)v265 + 119);
  }
  *((_QWORD *)v265 + 118) = 0;
  v296 = 0;
  v296 = mach_timebase_info(&info);
  if (v296)
  {
    v95 = v265;
    *((_QWORD *)v265 + 116) = 0;
    *((_QWORD *)v95 + 116) = v296;
    v96 = *((_QWORD *)v95 + 116);
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: mach_timebase_info failed";
    qword_A4038 = v96;
    __break(1u);
    JUMPOUT(0x4E150);
  }
  v97 = v264;
  v98 = v265;
  *((_QWORD *)v265 + 115) = 0;
  *((_QWORD *)v98 + 115) = *((_QWORD *)v98 + 120) * (unint64_t)info.denom / info.numer;
  v295 = 0;
  v294 = 0;
  v293 = 0;
  v97[29] = v97[4];
  v97[28] = "MallocLargeCache";
  if ((malloc_internal_security_policy & 1) != 0)
    v249 = _simple_getenv(v264[29], v264[28]);
  else
    v249 = 0;
  v99 = v265;
  *((_QWORD *)v265 + 148) = v249;
  if (*((_QWORD *)v99 + 148))
  {
    v100 = (const char **)v265;
    *((_QWORD *)v265 + 113) = 0;
    v101 = strtol(v100[148], 0, 10);
    v102 = v265;
    *((_QWORD *)v265 + 113) = v101;
    if (*((_QWORD *)v102 + 113) && *((_QWORD *)v265 + 113) != 1)
    {
      malloc_report(3, (uint64_t)"MallocLargeCache must be 0 or 1.\n", v89, v90, v91, v92, v93, v94, v215[0]);
    }
    else
    {
      v295 = 16 * (*((_QWORD *)v265 + 113) == 1);
      v293 = *((_QWORD *)v265 + 113) == 1;
    }
  }
  if (_malloc_engaged_nano != 2)
  {
    v293 = 0;
    v295 = 0;
  }
  v103 = v264;
  v264[27] = v264[4];
  v103[26] = "MallocXzoneHugeCacheSize";
  if ((malloc_internal_security_policy & 1) != 0)
    v248 = _simple_getenv(v264[27], v264[26]);
  else
    v248 = 0;
  v104 = v265;
  *((_QWORD *)v265 + 148) = v248;
  if (*((_QWORD *)v104 + 148))
  {
    v105 = (const char **)v265;
    *((_QWORD *)v265 + 112) = 0;
    v106 = strtol(v105[148], 0, 10);
    v107 = v265;
    *((_QWORD *)v265 + 112) = v106;
    if ((v107[56] & 0x8000000000000000) != 0 || *((uint64_t *)v265 + 112) >= 0x10000)
      malloc_report(3, (uint64_t)"xzm: unsupported value for MallocXzoneHugeCacheSize (%ld)", v89, v90, v91, v92, v93, v94, *((_QWORD *)v265 + 112));
    else
      v295 = *((_QWORD *)v265 + 112);
  }
  v108 = v264;
  v264[25] = v264[4];
  v108[24] = "MallocDeferredReclaim";
  if ((malloc_internal_security_policy & 1) != 0)
    v247 = _simple_getenv(v264[25], v264[24]);
  else
    v247 = 0;
  v109 = v265;
  *((_QWORD *)v265 + 148) = v247;
  if (*((_QWORD *)v109 + 148))
  {
    v110 = (const char **)v265;
    *((_QWORD *)v265 + 111) = 0;
    v111 = strtol(v110[148], 0, 10);
    v112 = v265;
    *((_QWORD *)v265 + 111) = v111;
    if (*((_QWORD *)v112 + 111) && *((_QWORD *)v265 + 111) != 1)
    {
      malloc_report(3, (uint64_t)"MallocDeferredReclaim must be one of 0,1 - got %ld\n", v89, v90, v91, v92, v93, v94, *((_QWORD *)v265 + 111));
    }
    else
    {
      v294 = *((_QWORD *)v265 + 111) == 1;
      v293 = *((_QWORD *)v265 + 111) == 1;
    }
  }
  v113 = v264;
  v264[23] = v264[4];
  v113[22] = "MallocXzoneDeferLarge";
  if ((malloc_internal_security_policy & 1) != 0)
    v246 = _simple_getenv(v264[23], v264[22]);
  else
    v246 = 0;
  v114 = v265;
  *((_QWORD *)v265 + 148) = v246;
  if (*((_QWORD *)v114 + 148))
  {
    v115 = (const char **)v265;
    *((_QWORD *)v265 + 110) = 0;
    v116 = strtol(v115[148], 0, 10);
    v117 = v265;
    *((_QWORD *)v265 + 110) = v116;
    if (*((_QWORD *)v117 + 110) && *((_QWORD *)v265 + 110) != 1)
      malloc_report(3, (uint64_t)"MallocDeferredReclaim must be one of 0,1 - got %ld\n", v89, v90, v91, v92, v93, v94, *((_QWORD *)v265 + 110));
    else
      v293 = *((_QWORD *)v265 + 110) == 1;
  }
  if (v295 && !v293)
  {
    malloc_report(3, (uint64_t)"Huge cache requires deferred reclamation for large.\n", v89, v90, v91, v92, v93, v94, v215[0]);
    v293 = 1;
  }
  if (v294 && !v293)
  {
    malloc_report(3, (uint64_t)"Deferred reclamation cannot be used for xzones without large\n", v89, v90, v91, v92, v93, v94, v215[0]);
    v293 = 1;
  }
  v118 = v264;
  v245 = 0;
  v292 = 0;
  v291 = 0;
  v290 = 0;
  v289 = 0;
  v288 = 0;
  v287 = 0;
  v264[21] = v264[4];
  v118[20] = "MallocXzoneGuarded";
  if ((malloc_internal_security_policy & 1) != 0)
    v244 = _simple_getenv(v264[21], v264[20]);
  else
    v244 = 0;
  v119 = v265;
  *((_QWORD *)v265 + 148) = v244;
  if (*((_QWORD *)v119 + 148))
  {
    v120 = (const char **)v265;
    *((_QWORD *)v265 + 108) = 0;
    v121 = strtol(v120[148], 0, 10);
    v122 = v265;
    *((_QWORD *)v265 + 108) = v121;
    if (!*((_QWORD *)v122 + 108) || *((_QWORD *)v265 + 108) == 1)
      v292 = *((_QWORD *)v265 + 108) != 0;
  }
  v123 = malloc_common_value_for_key_copy((_BYTE *)v264[2], (uint64_t)"xzone_guard_pages", v322, 0x100uLL);
  v125 = v265;
  *((_QWORD *)v265 + 148) = v123;
  if (*((_QWORD *)v125 + 148))
  {
    v126 = (const char **)v265;
    *((_QWORD *)v265 + 107) = 0;
    v127 = strtol(v126[148], 0, 10);
    v133 = v265;
    *((_QWORD *)v265 + 107) = v127;
    if (*((_QWORD *)v133 + 107) && *((_QWORD *)v265 + 107) != 1)
      malloc_report(3, (uint64_t)"%s must be 0 or 1.\n", v128, v129, v130, v131, v132, v124, (uint64_t)"xzone_guard_pages");
    else
      v292 = *((_QWORD *)v265 + 107) != 0;
  }
  if (v292)
  {
    v134 = v264;
    v291 = 1;
    v264[19] = v264[4];
    v134[18] = "MallocXzoneGuardedData";
    if ((malloc_internal_security_policy & 1) != 0)
      v243 = _simple_getenv(v264[19], v264[18]);
    else
      v243 = 0;
    v135 = v265;
    *((_QWORD *)v265 + 148) = v243;
    if (*((_QWORD *)v135 + 148))
    {
      v136 = (const char **)v265;
      *((_QWORD *)v265 + 106) = 0;
      v137 = strtol(v136[148], 0, 10);
      v138 = v265;
      *((_QWORD *)v265 + 106) = v137;
      if (!*((_QWORD *)v138 + 106) || *((_QWORD *)v265 + 106) == 1)
        v291 = *((_QWORD *)v265 + 106) != 0;
    }
    v139 = v264;
    v290 = 8;
    v264[17] = v264[4];
    v139[16] = "MallocXzoneGuardTinyRun";
    if ((malloc_internal_security_policy & 1) != 0)
      v242 = _simple_getenv(v264[17], v264[16]);
    else
      v242 = 0;
    v140 = v265;
    *((_QWORD *)v265 + 148) = v242;
    if (*((_QWORD *)v140 + 148))
    {
      v141 = (const char **)v265;
      *((_QWORD *)v265 + 105) = 0;
      v142 = strtol(v141[148], 0, 10);
      v143 = (uint64_t *)v265;
      *((_QWORD *)v265 + 105) = v142;
      if (v143[105] >= 1)
        v290 = *((_QWORD *)v265 + 105);
    }
    v144 = v264;
    v289 = 64;
    v264[15] = v264[4];
    v144[14] = "MallocXzoneGuardTinyDensity";
    if ((malloc_internal_security_policy & 1) != 0)
      v241 = _simple_getenv(v264[15], v264[14]);
    else
      v241 = 0;
    v145 = v265;
    *((_QWORD *)v265 + 148) = v241;
    if (*((_QWORD *)v145 + 148))
    {
      v146 = (const char **)v265;
      *((_QWORD *)v265 + 104) = 0;
      v147 = strtol(v146[148], 0, 10);
      v148 = (uint64_t *)v265;
      *((_QWORD *)v265 + 104) = v147;
      if (v148[104] >= 1)
        v289 = *((_QWORD *)v265 + 104);
    }
    v149 = v264;
    v288 = 3;
    v264[13] = v264[4];
    v149[12] = "MallocXzoneGuardSmallRun";
    if ((malloc_internal_security_policy & 1) != 0)
      v240 = _simple_getenv(v264[13], v264[12]);
    else
      v240 = 0;
    v150 = v265;
    *((_QWORD *)v265 + 148) = v240;
    if (*((_QWORD *)v150 + 148))
    {
      v151 = (const char **)v265;
      *((_QWORD *)v265 + 103) = 0;
      v152 = strtol(v151[148], 0, 10);
      v153 = (uint64_t *)v265;
      *((_QWORD *)v265 + 103) = v152;
      if (v153[103] >= 1)
        v288 = *((_QWORD *)v265 + 103);
    }
    v154 = v264;
    v287 = 32;
    v264[11] = v264[4];
    v154[10] = "MallocXzoneGuardSmallDensity";
    if ((malloc_internal_security_policy & 1) != 0)
      v239 = _simple_getenv(v264[11], v264[10]);
    else
      v239 = 0;
    v155 = v265;
    *((_QWORD *)v265 + 148) = v239;
    if (*((_QWORD *)v155 + 148))
    {
      v156 = (const char **)v265;
      *((_QWORD *)v265 + 102) = 0;
      v157 = strtol(v156[148], 0, 10);
      v158 = (uint64_t *)v265;
      *((_QWORD *)v265 + 102) = v157;
      if (v158[102] >= 1)
        v287 = *((_QWORD *)v265 + 102);
    }
  }
  v159 = v264;
  v160 = v265;
  *((_QWORD *)v265 + 101) = 0;
  v160[101] = 2;
  v160[100] = 0;
  v160[100] = 4;
  v160[99] = 0;
  v160[99] = 4;
  v159[9] = v159[4];
  v159[8] = "MallocXzoneDataOnly";
  if ((malloc_internal_security_policy & 1) != 0)
    v238 = _simple_getenv(v264[9], v264[8]);
  else
    v238 = 0;
  v161 = v265;
  *((_QWORD *)v265 + 148) = v238;
  if (*((_QWORD *)v161 + 148))
  {
    v162 = (const char **)v265;
    *((_QWORD *)v265 + 98) = 0;
    v163 = strtol(v162[148], 0, 10);
    v169 = v265;
    *((_QWORD *)v265 + 98) = v163;
    if (*((_QWORD *)v169 + 98) == 1)
    {
      *((_QWORD *)v265 + 100) = 2;
    }
    else if (*((_QWORD *)v265 + 98))
    {
      malloc_report(3, (uint64_t)"MallocXzoneDataOnly must be 0 or 1.\n", v164, v165, v166, v167, v168, v124, v215[0]);
    }
  }
  v170 = v265;
  v237 = 0;
  *((_QWORD *)v265 + 97) = 0;
  v170[97] = 472;
  v170[96] = 0;
  v170[96] = v170[97];
  v170[97] += 88 * v170[139];
  v170[95] = 0;
  v170[95] = v170[97];
  v170[94] = 0;
  v170[94] = v170[139] * v298;
  v170[97] += 32 * v170[94];
  v170[93] = 0;
  v170[93] = v170[97];
  v170[97] += 8 * v170[141];
  v170[92] = 0;
  v170[92] = v170[97];
  v170[97] += v170[141];
  v170[91] = 0;
  v170[91] = v170[97];
  v170[97] += v170[141];
  v170[90] = 0;
  v170[90] = v170[97];
  v170[97] += 16 * v170[139];
  v170[89] = 0;
  v170[89] = v170[97];
  v170[97] += 56 * v170[101];
  v170[88] = 0;
  v170[88] = v170[97];
  v170[97] += 528 * v170[100];
  v170[87] = 0;
  v170[87] = v170[97];
  v170[97] += v170[99] << 6;
  v170[86] = 0;
  v170[86] = v170[97];
  v170[97] += 0x10000;
  v170[85] = 0;
  v170[85] = v170[97];
  v286 = 1;
  v170[83] = 0;
  v170[83] = 0;
  v285 = 1;
  v170[82] = 0;
  plat = mvm_allocate_plat(0, v170[85], 0, v286, 0, v285, v170[83], v124);
  v172 = v265;
  *((_QWORD *)v265 + 82) = plat;
  if (!*((_QWORD *)v172 + 82))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Failed to allocate xzm zone";
    __break(1u);
    JUMPOUT(0x4EDFCLL);
  }
  v173 = v265;
  v174 = v264;
  v236 = 0;
  *((_QWORD *)v265 + 81) = 0;
  *((_QWORD *)v173 + 81) = *((_QWORD *)v173 + 82);
  *((_QWORD *)v173 + 80) = 0;
  *((_QWORD *)v173 + 80) = *((_QWORD *)v173 + 81) + *((_QWORD *)v173 + 96);
  *((_QWORD *)v173 + 79) = 0;
  *((_QWORD *)v173 + 79) = *((_QWORD *)v173 + 81) + *((_QWORD *)v173 + 95);
  v284 = 1;
  __dst = (void *)*((_QWORD *)v173 + 81);
  *((_QWORD *)v173 + 76) = 0;
  v233 = 0u;
  v173[37] = 0u;
  v173[36] = 0u;
  v173[35] = 0u;
  v173[34] = 0u;
  v173[33] = 0u;
  v173[32] = 0u;
  v173[31] = 0u;
  v173[30] = 0u;
  v173[29] = 0u;
  v173[28] = 0u;
  v173[27] = 0u;
  v173[26] = 0u;
  v173[25] = 0u;
  v173[24] = 0u;
  v173[23] = 0u;
  v173[22] = 0u;
  v173[21] = 0u;
  v173[20] = 0u;
  v173[19] = 0u;
  v173[18] = 0u;
  v173[17] = 0u;
  v173[16] = 0u;
  v173[15] = 0u;
  v173[14] = 0u;
  v173[13] = 0u;
  v173[12] = 0u;
  v173[11] = 0u;
  v173[10] = 0u;
  v173[9] = 0u;
  *((_QWORD *)v173 + 56) = *((_QWORD *)v173 + 85);
  __src = v283;
  *(_OWORD *)&v283[39] = *v174;
  LOBYTE(v283[41]) = v283[41] & 0xFD | (2 * v305);
  LOBYTE(v283[41]) = v283[41] & 0xFB | (4 * v294);
  LOBYTE(v283[41]) = v283[41] & 0xF7 | (8 * v293);
  BYTE1(v283[41]) = *((_QWORD *)v173 + 101);
  BYTE2(v283[41]) = *((_QWORD *)v173 + 99);
  v175 = mfm_zone_address();
  v176 = v265;
  v177 = v175;
  v178 = __dst;
  *((_QWORD *)v265 + 60) = v177;
  LOBYTE(v283[43]) = v176[100];
  BYTE1(v283[43]) = v176[141];
  v176[62] = v176[81] + v176[93];
  v176[63] = v176[81] + v176[92];
  v176[64] = v176[81] + v176[91];
  v176[65] = v176[81] + v176[90];
  v176[66] = v176[81] + v176[89];
  v176[67] = v176[81] + v176[88];
  v176[68] = v176[81] + v176[87];
  v176[69] = v176[81] + v176[86];
  WORD2(v283[54]) = v284;
  BYTE4(v283[56]) = v292;
  BYTE5(v283[56]) = v291;
  BYTE6(v283[56]) = v290;
  HIBYTE(v283[56]) = v289;
  LOBYTE(v283[57]) = v288;
  BYTE1(v283[57]) = v287;
  memcpy(v178, v283, 0x1D8uLL);
  _xzm_initialize_const_zone_data(*((_QWORD **)v265 + 81), *((_QWORD *)v265 + 85), v284, *((_QWORD *)v265 + 139), v298, *((_QWORD *)v265 + 80), *((_QWORD *)v265 + 79), v236, v308, v301, v300, v299, *((_QWORD *)v265 + 115), v312);
  if (v294 || v293 || v295)
  {
    v282 = 0;
    v282 = xzm_reclaim_init(*((_QWORD *)v265 + 81));
    if (!v282)
    {
      v179 = v265;
      v295 = 0;
      v294 = 0;
      *(_BYTE *)(*((_QWORD *)v265 + 81) + 328) &= ~4u;
      v293 = 0;
      *(_BYTE *)(*((_QWORD *)v179 + 81) + 328) &= ~8u;
    }
  }
  v180 = v265;
  *((_QWORD *)v265 + 16) = 0;
  *((_QWORD *)v180 + 16) = 0;
  while (*((_QWORD *)v265 + 16) < *((_QWORD *)v265 + 141))
  {
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v265 + 81) + 352) + 8 * *((_QWORD *)v265 + 16)) = _xzm_bin_sizes[*((_QWORD *)v265 + 16)];
    ++*((_QWORD *)v265 + 16);
  }
  v181 = v265;
  *((_QWORD *)v265 + 15) = 0;
  *((_QWORD *)v181 + 15) = 0;
  while (*((_QWORD *)v265 + 15) < *((_QWORD *)v265 + 141))
  {
    if (*((_QWORD *)v265 + 149))
    {
      v182 = v265;
      *((_QWORD *)v265 + 14) = 0;
      v182[14] = v182[149] + 2;
      *(_BYTE *)(*(_QWORD *)(v182[81] + 360) + v182[15]) = v182[14];
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v265 + 81) + 360) + *((_QWORD *)v265 + 15)) = _xzm_bin_bucket_defaults[*((_QWORD *)v265 + 15)];
    }
    ++*((_QWORD *)v265 + 15);
  }
  v183 = v265;
  *((_QWORD *)v265 + 13) = 0;
  *((_QWORD *)v183 + 13) = 0;
  while (*((_QWORD *)v265 + 13) < *((_QWORD *)v265 + 139))
  {
    v184 = v264;
    v185 = v265;
    *((_QWORD *)v265 + 12) = 0;
    v185[12] = *(_QWORD *)(v185[81] + 376) + 16 * v185[13];
    v184[57] = v185[12] + 8;
    v186 = (_DWORD *)v184[57];
    v317 = 0;
    *v186 = 0;
    ++*((_QWORD *)v265 + 13);
  }
  v187 = v265;
  *((_QWORD *)v265 + 11) = 0;
  *((_QWORD *)v187 + 11) = 0;
  while (*((_QWORD *)v265 + 11) < *((_QWORD *)v265 + 101))
  {
    v188 = v264;
    v189 = v265;
    *((_QWORD *)v265 + 10) = 0;
    v189[10] = *(_QWORD *)(v189[81] + 384) + 56 * v189[11];
    *(_BYTE *)v189[10] = v189[11];
    *(_QWORD *)(v189[10] + 8) = v189[81];
    v188[55] = v189[10] + 16;
    v190 = (_DWORD *)v188[55];
    v316 = 0;
    *v190 = 0;
    ++*((_QWORD *)v265 + 11);
  }
  if (v304)
    xzm_main_malloc_zone_init_range_groups(*((_QWORD *)v265 + 81));
  v191 = v265;
  *((_QWORD *)v265 + 9) = 0;
  *((_QWORD *)v191 + 9) = 0;
  while (*((_QWORD *)v265 + 9) < *((_QWORD *)v265 + 100))
  {
    v192 = v265;
    v193 = v264;
    *((_QWORD *)v265 + 8) = 0;
    v192[8] = *(_QWORD *)(v192[81] + 392) + 528 * v192[9];
    *(_BYTE *)v192[8] = v192[9];
    v193[53] = v192[8] + 4;
    v194 = (_DWORD *)v193[53];
    v315 = 0;
    *v194 = 0;
    v193[51] = v192[8] + 8;
    v195 = (_DWORD *)v193[51];
    v314 = 0;
    *v195 = 0;
    v318 = *(_BYTE *)v192[8];
    v232 = v318;
    if (v318 < 2u)
    {
      v319 = 1;
    }
    else
    {
      if ((v232 - 2) >= 2)
      {
        v196 = v264;
        v264[58] = 0;
        v196[58] = v318;
        v197 = v196[58];
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
        qword_A4038 = v197;
        __break(1u);
        JUMPOUT(0x4F4B4);
      }
      v319 = 0;
    }
    if (v319 == 1)
      v231 = *(_QWORD *)(*((_QWORD *)v265 + 81) + 384);
    else
      v231 = *(_QWORD *)(*((_QWORD *)v265 + 81) + 384) + 56;
    v198 = v265;
    *(_QWORD *)(*((_QWORD *)v265 + 8) + 16) = v231;
    *(_QWORD *)(*((_QWORD *)v198 + 8) + 24) = *((_QWORD *)v198 + 81);
    if (**((_BYTE **)v198 + 8) == 1)
    {
      v199 = v265;
      v200 = (_OWORD *)*((_QWORD *)v265 + 8);
      v265[3] = 0u;
      memset(v279, 0, sizeof(v279));
      v280 = v295;
      v281 = 0x3FFFF;
      v200[32] = v199[3];
      v200[31] = 0u;
      v200[30] = 0u;
      v200[29] = 0u;
      v201 = v265;
      *(_QWORD *)(*((_QWORD *)v265 + 8) + 464) = 0;
      *(_QWORD *)(*((_QWORD *)v201 + 8) + 472) = *((_QWORD *)v201 + 8) + 464;
      v202 = v265;
      *(_DWORD *)(*((_QWORD *)v265 + 8) + 504) = *(_DWORD *)(*((_QWORD *)v265 + 8) + 488);
      *(_QWORD *)(*((_QWORD *)v202 + 8) + 496) = *(_QWORD *)(*((_QWORD *)v202 + 8) + 480);
      *(_DWORD *)(*((_QWORD *)v202 + 8) + 488) = 5317;
      *(_QWORD *)(*((_QWORD *)v202 + 8) + 480) = "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c";
      v203 = v264;
      v264[49] = *((_QWORD *)v265 + 8) + 520;
      v204 = (_DWORD *)v203[49];
      v313 = 0;
      *v204 = 0;
    }
    for (i = 0; i <= 0x1A; ++i)
      *(_DWORD *)(*((_QWORD *)v265 + 8) + 16 * i + 40) = _xzm_span_queue_slice_counts[i];
    ++*((_QWORD *)v265 + 9);
  }
  v229 = 0;
  v277 = 0;
  v277 = (__n128 *)(*(_QWORD *)(*((_QWORD *)v265 + 81) + 400) + 192);
  v230 = 0;
  v228 = 16;
  v276 = 16;
  v227 = 0x4000;
  v275 = 0x4000;
  xzm_metapool_init(v277, 3u, 0x4000u, 0x10u, 0x10u, 0);
  v274 = 0;
  v274 = *(__n128 **)(*((_QWORD *)v265 + 81) + 400);
  xzm_metapool_init(v274, 0, 0x80000u, 0x4000u, 0x4000u, (unint64_t)v277);
  v273 = 0;
  v273 = (__n128 *)(*(_QWORD *)(*((_QWORD *)v265 + 81) + 400) + 64);
  xzm_metapool_init(v273, 1u, 0x40000u, 0x10000u, 0x10000u, (unint64_t)v277);
  v272 = 0;
  v272 = (__n128 *)(*(_QWORD *)(*((_QWORD *)v265 + 81) + 400) + 128);
  xzm_metapool_init(v272, 2u, 0x4000u, 0x10u, 0x10u, 0);
  v271 = 0;
  v271 = *(_BYTE *)(*((_QWORD *)v265 + 81) + 344) == 2;
  _xzm_initialize_xzone_data(*((_QWORD **)v265 + 81), v302, (_BYTE *)(*((_QWORD *)v265 + 81) + 452), v271);
  v205 = v264;
  v264[7] = v264[4];
  v205[6] = "MallocReportConfig";
  if ((malloc_internal_security_policy & 1) != 0)
    v226 = _simple_getenv(v264[7], v264[6]);
  else
    v226 = 0;
  v206 = v265;
  *((_QWORD *)v265 + 148) = v226;
  if (*((_QWORD *)v206 + 148))
  {
    v270 = 0;
    v321 = v302;
    v225 = v302;
    switch(v302)
    {
      case 0u:
        v264[62] = "SINGLE";
        break;
      case 1u:
        v264[62] = "CLUSTER";
        break;
      case 2u:
        v264[62] = "CPU";
        break;
      default:
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unexpected slot config";
        __break(1u);
        JUMPOUT(0x4F8ACLL);
    }
    v270 = v264[62];
    v269 = 0;
    v320 = v308;
    v224 = v308;
    switch(v308)
    {
      case 0u:
        v264[60] = "SINGLE";
        break;
      case 1u:
        v264[60] = "CLUSTER";
        break;
      case 2u:
        v264[60] = "CPU";
        break;
      default:
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unexpected slot config";
        __break(1u);
        JUMPOUT(0x4F968);
    }
    v269 = v264[60];
    v268 = 0;
    v267 = 8;
    v266 = sysctlbyname("vm.reclaim_max_threshold", &v268, &v267, 0, 0);
    v217 = v271;
    v218 = v292;
    v219 = (v312 >> 5) & 1;
    v220 = v293;
    v221 = v294;
    v222 = v295;
    v223 = v266;
    if (v266)
      v216 = v223;
    else
      v216 = v268;
    v207 = " (ERROR)";
    if (!v266)
      v207 = (const char *)&unk_8AA75;
    v208 = *(_QWORD **)(*((_QWORD *)v265 + 81) + 384);
    v209 = v208[10];
    v210 = v208[11];
    v211 = v208[3];
    v212 = v208[4];
    v213 = *((_QWORD *)v265 + 142);
    v215[20] = (uint64_t)v215;
    v215[18] = v213;
    v215[17] = v299;
    v215[16] = v300;
    v215[15] = v299;
    v215[14] = v301;
    v215[13] = v269;
    v215[12] = v270;
    v215[11] = v212;
    v215[10] = v211;
    v215[9] = v210;
    v215[8] = v209;
    v215[7] = (uint64_t)v207;
    v215[6] = v216;
    v215[5] = v222;
    v215[4] = v221;
    v215[3] = v220;
    v215[2] = v219;
    v215[1] = v218;
    malloc_report(6, (uint64_t)"XZM Config:\n\tData Only: %d\n\tGuards Enabled: %d\n\tScribble: %d\n\tDefer Large: %d\n\tDefer Xzones: %d\n\tHuge cache size: %d\n\tReclaim Max Threshold: %lli%s\n\tRanges (ptr addr/size/data addr/size): 0x%llx/%lu/0x%llx/%lu\n\tInitial Slot Config: %s\n\tMax Slot Config: %s\n\tSlot Upgrade Thresholds: %d/%d, %d/%d\n\tPointer Bucket Count: %lu\n", v219, v220, v221, v222, v299,
      v300,
      v217);
  }
  return *((_QWORD *)v265 + 81);
}

void *_xzm_initialize_const_zone_data(_QWORD *a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, char a9, int a10, int a11, int a12, uint64_t a13, uint64_t a14)
{
  void *result;
  void *__dst;
  _DWORD *v17;
  char v18;
  _QWORD __src[38];
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  _QWORD *v27;

  v27 = a1;
  v26 = a2;
  v25 = a3;
  v24 = a4;
  v23 = a5;
  v22 = a6;
  v21 = a7;
  v20 = a8;
  if ((unint64_t)a1 + a2 < a7 + 32 * a4 * a5)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)zone + size >= (uintptr_t)slots + sizeof(stru"
                           "ct xzm_xzone_allocation_slot_s) * xzone_count * slot_count\" failed (/Library/Caches/com.appl"
                           "e.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4365)";
    __break(1u);
    JUMPOUT(0x4FC10);
  }
  if (v21 < v22 + 88 * v24)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slots >= (uintptr_t)xzones + sizeof(struct xz"
                           "m_xzone_s) * xzone_count\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/"
                           "src/xzone/xzone_malloc.c:4367)";
    __break(1u);
    JUMPOUT(0x4FC5CLL);
  }
  __dst = v27;
  __src[0] = 0;
  __src[1] = 0;
  __src[2] = xzm_malloc_zone_size;
  __src[3] = xzm_malloc_zone_malloc;
  __src[4] = xzm_malloc_zone_calloc;
  __src[5] = xzm_malloc_zone_valloc;
  __src[6] = xzm_malloc_zone_free;
  __src[7] = xzm_malloc_zone_realloc;
  __src[8] = xzm_malloc_zone_destroy;
  __src[9] = 0;
  __src[10] = malloc_zone_batch_malloc_fallback;
  __src[11] = malloc_zone_batch_free_fallback;
  __src[12] = xzm_malloc_zone_introspect;
  LODWORD(__src[13]) = 16;
  __src[14] = xzm_malloc_zone_memalign;
  __src[15] = xzm_malloc_zone_free_definite_size;
  __src[16] = malloc_zone_pressure_relief_fallback;
  __src[17] = xzm_malloc_zone_claimed_address;
  __src[18] = xzm_malloc_zone_try_free_default;
  __src[19] = xzm_malloc_zone_malloc_with_options;
  __src[20] = xzm_malloc_zone_malloc_type_malloc;
  __src[21] = xzm_malloc_zone_malloc_type_calloc;
  __src[22] = xzm_malloc_zone_malloc_type_realloc;
  __src[23] = xzm_malloc_zone_malloc_type_memalign;
  __src[24] = xzm_malloc_zone_malloc_type_malloc_with_options;
  __src[25] = v26;
  LOWORD(__src[26]) = v25;
  BYTE2(__src[26]) = v24;
  BYTE3(__src[26]) = v23;
  __src[27] = v22;
  __src[28] = v21;
  __src[29] = v20;
  LOBYTE(__src[30]) = __src[30] & 0xFC | a9 & 3;
  HIDWORD(__src[30]) = a10;
  LODWORD(__src[31]) = a11;
  v17 = (_DWORD *)&__src[31] + 1;
  do
    *v17 = 0;
  while ((char *)++v17 - (char *)&__src[32]);
  LODWORD(__src[32]) = a12;
  __src[33] = a13;
  memset(&__src[34], 0, 24);
  __src[37] = a14;
  result = memcpy(__dst, __src, 0x130uLL);
  v18 = 0;
  if ((a14 & 0x20) != 0 || (a14 & 0x80) != 0)
    v18 = 1;
  if ((v18 & 1) != 0)
  {
    v27[3] = xzm_malloc_zone_malloc_slow;
    v27[4] = xzm_malloc_zone_calloc_slow;
    v27[5] = xzm_malloc_zone_valloc_slow;
    v27[6] = xzm_malloc_zone_free_slow;
    v27[7] = xzm_malloc_zone_realloc_slow;
    v27[14] = xzm_malloc_zone_memalign_slow;
    v27[15] = xzm_malloc_zone_free_definite_size_slow;
    v27[18] = xzm_malloc_zone_try_free_default_slow;
    v27[19] = xzm_malloc_zone_malloc_with_options_slow;
    v27[20] = xzm_malloc_zone_malloc_type_malloc_slow;
    v27[21] = xzm_malloc_zone_malloc_type_calloc_slow;
    v27[22] = xzm_malloc_zone_malloc_type_realloc_slow;
    v27[23] = xzm_malloc_zone_malloc_type_memalign_slow;
    v27[24] = xzm_malloc_zone_malloc_type_malloc_with_options_slow;
  }
  return result;
}

void _xzm_initialize_xzone_data(_QWORD *a1, char a2, _BYTE *a3, char a4)
{
  unint64_t v4;
  _QWORD *v5;
  _BYTE __src[88];
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  int j;
  unint64_t v17;
  uint64_t v18;
  unint64_t i;
  uint64_t v20;
  unint64_t __buf;
  BOOL v22;
  _QWORD *v23;
  char v24;
  _BYTE *v25;
  char v26;
  _WORD *v27;
  _QWORD *v28;
  _QWORD *v29;

  v27 = a1;
  v26 = a2;
  v25 = a3;
  v24 = a4 & 1;
  v23 = 0;
  v28 = a1;
  if (a1[29])
    v5 = (_QWORD *)a1[29];
  else
    v5 = v28;
  v23 = v5;
  v22 = 0;
  v29 = v27;
  v22 = *((_QWORD *)v27 + 29) == 0;
  __buf = 0;
  arc4random_buf(&__buf, 8uLL);
  if (!__buf)
    __buf = 0xDEADDEADDEADDEADLL;
  *((_QWORD *)v27 + 34) = __buf;
  v20 = 1;
  for (i = 0; ; ++i)
  {
    v18 = 40;
    if (i >= 0x28)
      break;
    if (v22)
      *(_BYTE *)(v23[46] + i) = v20;
    v17 = 0;
    v17 = *(unsigned __int8 *)(v23[45] + i);
    for (j = 0; j < v17; ++j)
    {
      v15 = 0;
      v15 = (void *)(*((_QWORD *)v27 + 27) + 88 * v20);
      v14 = 0;
      v14 = *(_QWORD *)(v23[44] + 8 * i);
      v13 = 0;
      v4 = 0x4000;
      if (v14 > 0x1000)
        v4 = 0x10000;
      v13 = v4;
      v12 = v4 / v14;
      v11 = 0;
      if (v22)
      {
        if (v14 > 0x100)
        {
          if (v14 > 0x200)
          {
            if (v14 > 0x800)
              v11 = v14 <= 0x2000;
            else
              v11 = 0x2000 / v14;
          }
          else
          {
            v11 = 0x1000 / v14;
          }
        }
        else
        {
          v11 = 0x800 / v14;
        }
      }
      v10 = 0;
      v9 = 0;
      if (j && (v24 & 1) == 0)
      {
        v10 = v23[49] + 1056;
        v9 = 1;
      }
      else
      {
        v10 = v23[49];
        v9 = 0;
      }
      v8 = 0;
      v7 = 0;
      if ((*v25 & 1) != 0)
      {
        if ((v25[1] & 1) != 0)
          v9 = 1;
        if ((v9 & 1) != 0)
        {
          if (v14 > 0x1000)
          {
            v8 = v25[4];
            v7 = v25[5];
          }
          else
          {
            v8 = v25[2];
            v7 = v25[3];
          }
        }
      }
      memset(__src, 0, 32);
      *(_WORD *)&__src[32] = v11;
      *(_QWORD *)&__src[40] = v10;
      *(_QWORD *)&__src[48] = v14;
      *(_QWORD *)&__src[56] = 0xFFFFFFFF / v14 + 1;
      *(_DWORD *)&__src[64] = 0xFFFFFFFF / v14 + 1;
      *(_DWORD *)&__src[68] = v12;
      __src[72] = v20;
      *(_WORD *)&__src[74] = v27[104];
      __src[76] = j;
      __src[77] = v26;
      __src[78] = __src[78] & 0xFE | v9 & 1;
      __src[79] = v8;
      __src[80] = v7;
      memcpy(v15, __src, 0x58uLL);
      ++v20;
    }
  }
}

_QWORD *xzm_malloc_zone_create(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *plat;
  __int16 *v5;
  __int16 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;

  v8 = *(_BYTE *)(a2 + 210);
  v7 = *(_BYTE *)(a2 + 211);
  v9 = 88 * v8 + 304 + 32 * v8 * v7;
  os_unfair_lock_lock_with_options(a2 + 448, 327680);
  v5 = *(__int16 **)(a2 + 440);
  if (v5)
  {
    *(_QWORD *)(a2 + 440) = *(_QWORD *)(*(_QWORD *)(a2 + 440) + 8);
    v6 = *v5;
    xzm_metapool_free(*(_QWORD *)(a2 + 400) + 128, v5);
  }
  else if (*(__int16 *)(a2 + 436) == -1)
  {
    v6 = 0;
  }
  else
  {
    v6 = ++*(_WORD *)(a2 + 436);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 448));
  if (!v6)
    return 0;
  plat = (_QWORD *)mvm_allocate_plat(0, v9, 0, 1, 0, 1, 0, v2);
  if (!plat)
    return 0;
  _xzm_initialize_const_zone_data(plat, v9, v6, v8, v7, (uint64_t)(plat + 38), (unint64_t)&plat[11 * v8 + 38], a2, *(_BYTE *)(a2 + 240) & 3, *(_DWORD *)(a2 + 244), *(_DWORD *)(a2 + 248), *(_DWORD *)(a2 + 256), *(_QWORD *)(a2 + 264), a1);
  _xzm_initialize_xzone_data(plat, 0, (_BYTE *)(a2 + 452), *(_BYTE *)(a2 + 344) == 2);
  plat[36] = 0;
  return plat;
}

_OWORD *_xzm_xzone_malloc_tiny(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  char v25;
  BOOL v26;
  _BYTE v27[2];
  uint64_t v28;
  BOOL v29;
  _OWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  char v36;
  unint64_t *v37;
  unsigned __int8 v38;
  char v39;
  char v40;
  int v41;
  unint64_t *v42;
  os_unfair_lock_s *v43;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  char *v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unint64_t *v55;
  os_unfair_lock_s *v56;
  _OWORD *v57;
  uint64_t v58;
  char *v59;
  _BYTE *v60;
  char v61;
  uint64_t v62;
  unsigned __int8 v63;
  unint64_t *v64;
  os_unfair_lock_s *v65;
  _BOOL4 v66;
  unint64_t *v67;
  _BOOL4 v68;
  unint64_t v69;
  unint64_t v70;
  _BOOL4 v71;
  unint64_t *v72;
  _BOOL4 v73;
  uint64_t v74;
  unsigned __int8 i;
  unsigned __int8 v76;
  unint64_t v77;
  _BOOL4 v78;
  unsigned __int8 *v79;
  _BOOL4 v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char v100;
  char v101;
  unint64_t *v102;
  unint64_t *v103;
  os_unfair_lock_s *v104;
  uint64_t v105;
  unsigned __int8 v106;
  unsigned __int8 v107;
  unint64_t *v108;
  os_unfair_lock_s *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _BOOL4 v115;
  BOOL v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  _BOOL4 v120;
  unint64_t v121;
  BOOL v122;
  uint64_t v123;
  _BOOL4 v124;
  BOOL v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  _BOOL4 v129;
  unint64_t v130;
  BOOL v131;
  _BOOL4 v132;
  BOOL v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  _BOOL4 v137;
  unint64_t v138;
  BOOL v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  int v148;
  __int128 v149;
  char v150;
  unint64_t v151;
  unint64_t v152;
  char v153;
  _BYTE *v154;
  char *v155;
  _BYTE *v156;
  char v157;
  uint64_t v158;
  unsigned __int8 v159;
  unint64_t *v160;
  os_unfair_lock_s *v161;
  _OWORD *v162;
  uint64_t v163;
  uint64_t v164;
  os_unfair_lock_s *v165;
  unint64_t v166;
  os_unfair_lock_s *v167;
  uint64_t v168;
  unint64_t v169;
  os_unfair_lock_s *v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int64_t v175;
  unint64_t v176;
  uint64_t v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  char v181;

  v43 = a1;
  v42 = (unint64_t *)a2;
  v41 = a3;
  v40 = a3 & 1;
  v39 = 0;
  v38 = 0;
  v50 = a2;
  v49 = &v39;
  v48 = 0;
  v47 = 0;
  v46 = *(_BYTE *)(a2 + 77);
  v47 = v46;
  v45 = v46;
  v48 = v46;
  if (v46 >= 3u)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slot_config < XZM_SLOT_LAST\" failed (/Library/Caches/co"
                           "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:191)";
    __break(1u);
    JUMPOUT(0x50800);
  }
  if (v49)
    *v49 = v48;
  if (!v48)
    goto LABEL_10;
  if (v48 == 1)
  {
    v51 = _malloc_cpu_cluster_number();
    goto LABEL_11;
  }
  if (v48 != 2)
  {
LABEL_10:
    v51 = 0;
    goto LABEL_11;
  }
  v51 = _malloc_cpu_number();
LABEL_11:
  v38 = v51;
  v37 = 0;
  v56 = v43;
  v55 = v42;
  v54 = v51;
  v53 = 0;
  v53 = *((_BYTE *)v42 + 72);
  v52 = 0;
  v52 = v51 * BYTE2(v43[52]._os_unfair_lock_opaque);
  v37 = (unint64_t *)(*(_QWORD *)&v43[56]._os_unfair_lock_opaque + 32 * (v52 + v53));
  v36 = 0;
  v35 = v37;
  v34 = 0;
  v33 = 0;
  v32 = *v37;
  v33 = v32;
  v31 = v32;
  v34 = v32;
  v30 = 0;
  v29 = 0;
  v26 = 0;
  if ((v32 & 1) == 0)
    v26 = ((v34 >> 2) & 0x7FFFFFFFFFFFLL) != 0;
  v29 = v26;
  if (!v26)
    return _xzm_xzone_malloc_tiny_outlined(v43, v42, v38, v37, (uint64_t)v30, v41);
  v28 = (v34 >> 2) & 0x7FFFFFFFFFFFLL;
  v27[1] = 0;
  v27[0] = 0;
  v65 = v43;
  v64 = v42;
  v63 = v38;
  v62 = v28;
  v61 = 0;
  v60 = v27;
  v59 = &v36;
  v58 = 0;
  v57 = 0;
  v161 = v43;
  v160 = v42;
  v159 = v38;
  v158 = v28;
  v157 = 0;
  v156 = v27;
  v155 = &v36;
  v154 = 0;
  v153 = 0;
  v152 = 0;
  v165 = v43;
  v164 = v28;
  v163 = 0;
  v167 = v43;
  v166 = v28;
  v170 = v43;
  v169 = v28;
  v168 = (v34 >> 2) & 0x7FFFFFFFC000;
  v25 = 1;
  if (v168)
  {
    v24 = 0;
    if (v169 >= v168 + 2136)
      v24 = v169 < v168 + 48 * (unint64_t)*(unsigned int *)(v168 + 16) + 2136;
    v25 = v24;
  }
  if ((v25 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x50BF8);
  }
  v172 = v168;
  v171 = v166;
  v177 = v168;
  v176 = v166;
  if (v166 < v168 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x50C5CLL);
  }
  v175 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v176 - v177 - 2136) >> 4);
  if (v175 >= *(unsigned int *)(v177 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x50CC4);
  }
  v174 = v168;
  v173 = v175;
  v152 = *(_QWORD *)(v168 + 80) + ((unint64_t)v175 << 14);
  if ((*(_BYTE *)(v158 + 32) & 0xF) != 2)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_TINY_CHUNK\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:484)";
    __break(1u);
    JUMPOUT(0x50D24);
  }
  v151 = 0;
  v150 = 0;
  v149 = 0uLL;
  v148 = 0;
  v147 = 0;
  v146 = 0;
  v145 = *(_QWORD *)v158;
  v146 = v145;
  v144 = v145;
  v147 = v145;
  do
  {
    while (1)
    {
      while (1)
      {
        while ((v147 & 0x40000000) != 0)
        {
          if ((v157 & 1) == 0)
          {
            v162 = 0;
            goto LABEL_93;
          }
          _xzm_walk_lock_wait(v161);
          v143 = 0;
          v142 = *(_QWORD *)v158;
          v143 = v142;
          v141 = v142;
          v147 = v142;
        }
        v140 = v147;
        if ((v153 & 1) == 0)
          break;
        if (((v147 >> 22) & 0x3F) != 0)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_idx == XZM_SLOT_INDEX_EMPTY\" f"
                                 "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:517)";
          __break(1u);
          JUMPOUT(0x50E28);
        }
        if ((v147 & 0x10000000) == 0)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_on_partial_list\" failed (/Library/Ca"
                                 "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:518)";
          __break(1u);
          JUMPOUT(0x50E58);
        }
        if ((v147 & 0x20000000) != 0)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_empty_list\" failed (/Library/Cac"
                                 "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:519)";
          __break(1u);
          JUMPOUT(0x50E88);
        }
        v140 &= ~0x10000000uLL;
        if (((v147 >> 11) & 0x7FF) != 0)
        {
          v140 = v140 & 0xFFFFFFFFF03FFFFFLL | (((v159 + 1) & 0x3FLL) << 22);
          goto LABEL_71;
        }
        if ((v147 & 0x7FF) == 0x7FE)
        {
          v140 |= 0x20000000uLL;
          *v154 = 1;
        }
        else if ((~(_DWORD)v147 & 0x7FF) != 0)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_head == XZM_FREE_MADVISING\" fa"
                                 "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:538)";
          __break(1u);
          JUMPOUT(0x50F0CLL);
        }
        v139 = 0;
        v138 = v147;
        v137 = 0;
        v3 = (unint64_t *)v158;
        v135 = v140;
        v134 = v140;
        v136 = v140;
        v4 = v147;
        v5 = v140;
        do
          v6 = __ldaxr(v3);
        while (v6 == v4 && __stlxr(v5, v3));
        if (v6 != v4)
          v138 = v6;
        v133 = v6 == v4;
        v137 = v6 == v4;
        v147 = v138;
        v132 = v137;
        v139 = v6 == v4;
        if (v6 == v4)
        {
          if ((malloc_tracing_enabled & 1) != 0)
            kdebug_trace(855770112, v158, v147, v140);
          v162 = 0;
          goto LABEL_93;
        }
      }
      if (((v147 >> 22) & 0x3F) != v159 + 1)
      {
        v162 = 0;
        goto LABEL_93;
      }
      if (((v147 >> 11) & 0x7FF) == 0)
        break;
LABEL_71:
      v150 = 0;
      v140 = v140 & 0xFFFFFFFFFFC007FFLL | ((((v140 >> 11) - 1) & 0x7FFLL) << 11);
      if ((v147 & 0x7FF) > 0x3FF)
      {
        if ((v147 & 0x7FF) != 0x7FC)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_head == XZM_FREE_BUMP\" failed "
                                 "(/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:628)";
          __break(1u);
          JUMPOUT(0x512DCLL);
        }
        if (((v140 >> 11) & 0x7FF) == 0)
          v140 = v140 & 0xFFFFFFFFFFFFF800 | 0x7FD;
        v123 = 0;
        v123 = *((unsigned int *)v160 + 17);
        v151 = v152 + (v123 - ((v147 >> 11) & 0x7FF)) * v160[6];
      }
      else
      {
        v151 = v152 + 16 * (v147 & 0x7FF);
        v149 = *(_OWORD *)v151;
        v140 = v140 & 0xFFFFFFFFFFFFF800 | WORD4(v149) & 0x7FF;
        v140 = v140 & 0xFFF8003FFFFFFFFFLL | (((DWORD2(v149) >> 11) & 0x1FFFLL) << 38);
        v150 = 1;
      }
      v122 = 0;
      v121 = v147;
      v120 = 0;
      v11 = (unint64_t *)v158;
      v118 = v140;
      v117 = v140;
      v119 = v140;
      v12 = v147;
      v13 = v140;
      do
        v14 = __ldaxr(v11);
      while (v14 == v12 && __stlxr(v13, v11));
      if (v14 != v12)
        v121 = v14;
      v116 = v14 == v12;
      v120 = v14 == v12;
      v147 = v121;
      v115 = v120;
      v122 = v14 == v12;
      if (v14 == v12)
      {
        if ((malloc_tracing_enabled & 1) != 0)
          kdebug_trace(855772160, v158, v147, v140);
        if ((v150 & 1) != 0)
        {
          v114 = 0;
          v114 = v151 ^ *(_QWORD *)&v161[68]._os_unfair_lock_opaque;
          if (v114 == (_QWORD)v149)
          {
            v112 = 0;
            v111 = 0;
            v110 = WORD4(v149) & 0x7FF | (((*((_QWORD *)&v149 + 1) >> 11) & 0x1FFFLL) << 11) & 0xFFFFFF | (((v147 >> 38) & 0x1FFF) << 24) & 0x1FFFFFFFFFLL;
            v113 = WORD4(v149) & 0x7FF | (((*((_QWORD *)&v149 + 1) >> 11) & 0x1FFFLL) << 11) & 0xFFFFFF;
            if (*((_QWORD *)&v149 + 1) != v113)
              *v156 = 1;
          }
          else
          {
            *v156 = 1;
          }
        }
        v162 = (_OWORD *)v151;
        goto LABEL_93;
      }
      *v155 = 1;
      ++v148;
    }
    v140 &= 0xFFFFFFFFF03FFFFFLL;
    if ((v147 & 0x7FF) != 0x7FD)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_head == XZM_FREE_NULL\" failed (/Li"
                             "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:593)";
      __break(1u);
      JUMPOUT(0x510ACLL);
    }
    if ((v147 & 0x10000000) != 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_partial_list\" failed (/Library/Cache"
                             "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:599)";
      __break(1u);
      JUMPOUT(0x510DCLL);
    }
    if ((v147 & 0x20000000) != 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_empty_list\" failed (/Library/Caches/"
                             "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:600)";
      __break(1u);
      JUMPOUT(0x5110CLL);
    }
    v131 = 0;
    v130 = v147;
    v129 = 0;
    v7 = (unint64_t *)v158;
    v127 = v140;
    v126 = v140;
    v128 = v140;
    v8 = v147;
    v9 = v140;
    do
      v10 = __ldaxr(v7);
    while (v10 == v8 && __stlxr(v9, v7));
    if (v10 != v8)
      v130 = v10;
    v125 = v10 == v8;
    v129 = v10 == v8;
    v147 = v130;
    v124 = v129;
    v131 = v10 == v8;
  }
  while (v10 != v8);
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855771136, v158, v147, v140);
  v162 = 0;
LABEL_93:
  v57 = v162;
  v30 = v162;
  if (!v162 || (v27[0] & 1) != 0)
    return _xzm_xzone_malloc_tiny_outlined(v43, v42, v38, v37, (uint64_t)v30, v41);
  v104 = v43;
  v103 = v42;
  v102 = v37;
  v101 = v39;
  v100 = v36 & 1;
  if (v39 != (v43[60]._os_unfair_lock_opaque & 3))
  {
    v99 = 0;
    v98 = 0;
    v97 = v102[2];
    v98 = v97;
    v96 = v97;
    v99 = v97;
    if ((v100 & 1) != 0 || (v99 & 0xFFFFFF00000000) != 0)
    {
      v95 = 1;
      if ((v100 & 1) != 0)
        v95 |= 0x100000000uLL;
      v94 = 0;
      v92 = v95;
      v91 = v95;
      v93 = v95;
      v89 = 0;
      v87 = v95;
      v86 = v95;
      v88 = v95;
      v21 = v102 + 2;
      v22 = v95;
      v23 = v102[2];
      do
      {
        v15 = v23;
        do
          v16 = __ldaxr(v21);
        while (v16 == v23 && __stlxr(v23 + v22, v21));
        v23 = v16;
      }
      while (v16 != v15);
      v85 = v16;
      v89 = v16;
      v84 = v16;
      v90 = v16 + v93;
      v94 = v16 + v93;
      v83 = (v16 + v93) >> 56;
      if (v83 != (v104[60]._os_unfair_lock_opaque & 3))
      {
        if ((HIDWORD(v94) & 0xFFFFFFu) <= v104[v83 + 61]._os_unfair_lock_opaque)
        {
          if (v94 > v104[64]._os_unfair_lock_opaque)
          {
            v70 = v94;
            LODWORD(v69) = 0;
            HIDWORD(v69) = HIBYTE(v69) << 24;
            HIBYTE(v69) = v83;
            v94 = v69;
            v68 = 0;
            v67 = v102 + 2;
            while (1)
            {
              v19 = _os_atomic_mo_has_acquire(0) ? __ldaxr(v67) : __ldxr(v67);
              v99 = v19;
              if (v19 < v70 || HIBYTE(v99) > (int)HIBYTE(v70))
                break;
              if (_os_atomic_mo_has_release(0))
                v68 = __stlxr(v94, v67) == 0;
              else
                v68 = __stxr(v94, v67) == 0;
              if (v68)
                goto LABEL_162;
            }
            __clrex();
LABEL_162:
            v66 = v68;
          }
        }
        else
        {
          v82 = 0;
          v178 = v83;
          if (v83)
          {
            if (v83 != 1)
            {
              if (v83 != 2)
              {
                qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Invalid xzone slot config";
                __break(1u);
                JUMPOUT(0x51830);
              }
              qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Can't upgrade from XZM_SLOT_CPU";
              __break(1u);
              JUMPOUT(0x51804);
            }
            v179 = 2;
          }
          else if (ncpuclusters < 2)
          {
            v179 = 2;
          }
          else
          {
            v179 = 1;
          }
          v82 = v179;
          if (v83 >= (int)v179)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"current_slot_config < next_slot_config\" failed "
                                   "(/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:955)";
            __break(1u);
            JUMPOUT(0x51878);
          }
          if ((malloc_tracing_enabled & 1) != 0)
            kdebug_trace(855777280, *((unsigned __int8 *)v103 + 72), v102, v82);
          v81 = 0;
          v80 = 0;
          v79 = (unsigned __int8 *)v103 + 77;
          while (1)
          {
            v17 = _os_atomic_mo_has_acquire(0) ? __ldaxr(v79) : __ldxr(v79);
            v81 = v17;
            if (v17 >= (int)v82)
              break;
            if (_os_atomic_mo_has_release(0))
              v80 = __stlxr(v82, v79) == 0;
            else
              v80 = __stxr(v82, v79) == 0;
            if (v80)
              goto LABEL_130;
          }
          __clrex();
LABEL_130:
          v78 = v80;
          LODWORD(v77) = 0;
          HIDWORD(v77) = HIBYTE(v77) << 24;
          HIBYTE(v77) = v82;
          v94 = v77;
          v76 = 0;
          v180 = v82;
          if (!v82)
            goto LABEL_135;
          if (v82 == 1)
          {
            v181 = ncpuclusters;
            goto LABEL_136;
          }
          if (v82 != 2)
          {
LABEL_135:
            v181 = 1;
            goto LABEL_136;
          }
          v181 = logical_ncpus;
LABEL_136:
          v76 = v181;
          for (i = 0; i < (int)v76; ++i)
          {
            v74 = 0;
            v109 = v104;
            v108 = v103;
            v107 = i;
            v106 = 0;
            v106 = *((_BYTE *)v103 + 72);
            v105 = 0;
            v105 = i * BYTE2(v104[52]._os_unfair_lock_opaque);
            v74 = *(_QWORD *)&v104[56]._os_unfair_lock_opaque + 32 * (v105 + v106);
            v73 = 0;
            v72 = (unint64_t *)(v74 + 16);
            while (1)
            {
              v18 = _os_atomic_mo_has_acquire(0) ? __ldaxr(v72) : __ldxr(v72);
              v99 = v18;
              if (HIBYTE(v18) >= (int)v82)
                break;
              if (_os_atomic_mo_has_release(0))
                v73 = __stlxr(v94, v72) == 0;
              else
                v73 = __stxr(v94, v72) == 0;
              if (v73)
                goto LABEL_148;
            }
            __clrex();
LABEL_148:
            v71 = v73;
          }
        }
      }
    }
  }
  *v30 = 0uLL;
  if ((v40 & 1) != 0 && v42[6] >= 0x401)
    return (_OWORD *)_platform_memset(v30, 0, v42[6]);
  else
    return v30;
}

unint64_t _xzm_xzone_malloc_small(uint64_t a1, uint64_t a2, int a3)
{
  double v3;
  float v4;
  uint64_t v5;
  BOOL v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t chunk_from_isolation;
  os_unfair_lock_s *v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  char v20;
  unint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  os_unfair_lock_s *v30;
  os_unfair_lock_t v31;
  os_unfair_lock_t v32;
  os_unfair_lock_t v33;
  os_unfair_lock_t lock;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  os_unfair_lock_s *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;

  v25 = a1;
  v24 = a2;
  v23 = a3;
  v22 = a3 & 1;
  v21 = 0;
  v20 = 0;
  v19 = 0;
  v40 = a2;
  v39 = &v19;
  v38 = 0;
  v37 = 0;
  v36 = *(_BYTE *)(a2 + 77);
  v37 = v36;
  v35 = v36;
  v38 = v36;
  if (v36 >= 3u)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slot_config < XZM_SLOT_LAST\" failed (/Library/Caches/co"
                           "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:191)";
    __break(1u);
    JUMPOUT(0x51E44);
  }
  if (v39)
    *v39 = v38;
  if (!v38)
    goto LABEL_10;
  if (v38 == 1)
  {
    v41 = _malloc_cpu_cluster_number();
    goto LABEL_11;
  }
  if (v38 != 2)
  {
LABEL_10:
    v41 = 0;
    goto LABEL_11;
  }
  v41 = _malloc_cpu_number();
LABEL_11:
  v18 = v41;
  v46 = v25;
  v45 = v24;
  v44 = v41;
  v43 = 0;
  v43 = *(_BYTE *)(v24 + 72);
  v42 = 0;
  v42 = v41 * *(unsigned __int8 *)(v25 + 210);
  v17 = (os_unfair_lock_s *)(*(_QWORD *)(v25 + 224) + 32 * (v42 + v43));
  if (v19 >= (*(_BYTE *)(v25 + 240) & 3))
  {
    v29 = v17 + 2;
    os_unfair_lock_lock_with_options(&v17[2], 327680);
    ++v17[4]._os_unfair_lock_opaque;
  }
  else
  {
    v47 = v17 + 2;
    if (!os_unfair_lock_trylock(v17 + 2))
    {
      v30 = v17 + 2;
      os_unfair_lock_lock_with_options(&v17[2], 327680);
      if (++v17[5]._os_unfair_lock_opaque > *(_DWORD *)(v25 + 4 * v19 + 244))
        _xzm_xzone_upgrade_small_slot_config(v25, v24, v17, v19);
    }
    if (!(++v17[4]._os_unfair_lock_opaque % *(_DWORD *)(v25 + 256)))
      v17[5]._os_unfair_lock_opaque = 0;
  }
  chunk_from_isolation = *(_QWORD *)&v17->_os_unfair_lock_opaque;
  if (!*(_QWORD *)&v17->_os_unfair_lock_opaque)
    goto LABEL_58;
  v66 = v25;
  v65 = v24;
  v64 = chunk_from_isolation;
  v15 = *(_BYTE *)(chunk_from_isolation + 32) & 0xF;
  if (v15 == 2)
  {
    v14 = 0;
    if (((*(_DWORD *)v64 >> 11) & 0x7FF) == 0)
    {
      v14 = 0;
      if ((~*(_DWORD *)v64 & 0x7FF) != 0)
        v14 = (*(_DWORD *)v64 & 0x7FF) != 2046;
    }
    v67 = v14;
  }
  else
  {
    if (v15 != 5)
    {
      v63 = 0;
      v63 = *(_BYTE *)(v64 + 32) & 0xF;
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
      qword_A4038 = v63;
      __break(1u);
      JUMPOUT(0x52178);
    }
    v67 = *(_DWORD *)(v64 + 4) == *(_DWORD *)(v65 + 68);
  }
  if (v67)
  {
LABEL_58:
    v28 = v24 + 24;
    os_unfair_lock_lock_with_options(v24 + 24, 327680);
    if (chunk_from_isolation)
    {
      v5 = *(_QWORD *)(v24 + 8);
      *(_QWORD *)(chunk_from_isolation + 16) = v5;
      if (v5)
        *(_QWORD *)(*(_QWORD *)(v24 + 8) + 24) = chunk_from_isolation + 16;
      *(_QWORD *)(v24 + 8) = chunk_from_isolation;
      *(_QWORD *)(chunk_from_isolation + 24) = v24 + 8;
      atomic_store(0, (unsigned __int8 *)(chunk_from_isolation + 12));
    }
    while (1)
    {
      chunk_from_isolation = *(_QWORD *)v24;
      if (!*(_QWORD *)v24)
        break;
      v27 = chunk_from_isolation + 8;
      os_unfair_lock_lock_with_options(chunk_from_isolation + 8, 327680);
      if ((*(_BYTE *)(chunk_from_isolation + 32) & 0x20) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_enqueued\" failed (/Library/Cac"
                               "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2099)";
        __break(1u);
        JUMPOUT(0x52294);
      }
      if (*(_QWORD *)(chunk_from_isolation + 16))
        *(_QWORD *)(*(_QWORD *)(chunk_from_isolation + 16) + 24) = *(_QWORD *)(chunk_from_isolation + 24);
      **(_QWORD **)(chunk_from_isolation + 24) = *(_QWORD *)(chunk_from_isolation + 16);
      *(_QWORD *)(chunk_from_isolation + 16) = -1;
      *(_QWORD *)(chunk_from_isolation + 24) = -1;
      *(_BYTE *)(chunk_from_isolation + 32) &= ~0x20u;
      if (*(_DWORD *)(chunk_from_isolation + 4))
      {
        v61 = v25;
        v60 = v24;
        v59 = chunk_from_isolation;
        v13 = *(_BYTE *)(chunk_from_isolation + 32) & 0xF;
        if (v13 == 2)
        {
          v12 = 0;
          if (((*(_DWORD *)v59 >> 11) & 0x7FF) == 0)
          {
            v12 = 0;
            if ((~*(_DWORD *)v59 & 0x7FF) != 0)
              v12 = (*(_DWORD *)v59 & 0x7FF) != 2046;
          }
          v62 = v12;
        }
        else
        {
          if (v13 != 5)
          {
            v58 = 0;
            v58 = *(_BYTE *)(v59 + 32) & 0xF;
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
            qword_A4038 = v58;
            __break(1u);
            JUMPOUT(0x5242CLL);
          }
          v62 = *(_DWORD *)(v59 + 4) == *(_DWORD *)(v60 + 68);
        }
        if (v62)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_chunk_is_full(zone, xz, chunk)\" failed (/Li"
                                 "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2103)";
          __break(1u);
          JUMPOUT(0x5245CLL);
        }
        *(_QWORD *)&v17->_os_unfair_lock_opaque = chunk_from_isolation;
        *(_BYTE *)(chunk_from_isolation + 12) = v18 + 1;
        lock = (os_unfair_lock_t)(chunk_from_isolation + 8);
        os_unfair_lock_unlock((os_unfair_lock_t)(chunk_from_isolation + 8));
        break;
      }
      v33 = (os_unfair_lock_t)(chunk_from_isolation + 8);
      os_unfair_lock_unlock((os_unfair_lock_t)(chunk_from_isolation + 8));
    }
    v32 = (os_unfair_lock_t)(v24 + 24);
    os_unfair_lock_unlock((os_unfair_lock_t)(v24 + 24));
    if (!chunk_from_isolation && (*(_BYTE *)(v24 + 78) & 1) != 0)
    {
      v26 = v25;
      v11 = *(_QWORD *)(v25 + 232) ? *(_QWORD *)(v25 + 232) : v26;
      chunk_from_isolation = _xzm_xzone_allocate_chunk_from_isolation(v11, v24);
      if (chunk_from_isolation)
      {
        *(_QWORD *)&v17->_os_unfair_lock_opaque = chunk_from_isolation;
        *(_BYTE *)(chunk_from_isolation + 12) = v18 + 1;
      }
    }
    if (!chunk_from_isolation)
    {
      chunk_from_isolation = _xzm_xzone_small_chunk_alloc(v25, v24);
      if (!chunk_from_isolation)
      {
        *(_QWORD *)&v17->_os_unfair_lock_opaque = 0;
        goto LABEL_86;
      }
      v56 = v25;
      v55 = v24;
      v54 = chunk_from_isolation;
      v10 = *(_BYTE *)(chunk_from_isolation + 32) & 0xF;
      if (v10 == 2)
      {
        v9 = 0;
        if (((*(_DWORD *)v54 >> 11) & 0x7FF) == 0)
        {
          v9 = 0;
          if ((~*(_DWORD *)v54 & 0x7FF) != 0)
            v9 = (*(_DWORD *)v54 & 0x7FF) != 2046;
        }
        v57 = v9;
      }
      else
      {
        if (v10 != 5)
        {
          v53 = 0;
          v53 = *(_BYTE *)(v54 + 32) & 0xF;
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
          qword_A4038 = v53;
          __break(1u);
          JUMPOUT(0x526E0);
        }
        v57 = *(_DWORD *)(v54 + 4) == *(_DWORD *)(v55 + 68);
      }
      if (v57)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_chunk_is_full(zone, xz, chunk)\" failed (/Libr"
                               "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2142)";
        __break(1u);
        JUMPOUT(0x52710);
      }
      *(_QWORD *)&v17->_os_unfair_lock_opaque = chunk_from_isolation;
      *(_BYTE *)(chunk_from_isolation + 12) = v18 + 1;
    }
  }
  if (*(_QWORD *)&v17->_os_unfair_lock_opaque != chunk_from_isolation)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"xas->xas_chunk == chunk\" failed (/Library/Caches/com.ap"
                           "ple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2155)";
    __break(1u);
    JUMPOUT(0x527A4);
  }
  v51 = v25;
  v50 = v24;
  v49 = chunk_from_isolation;
  v8 = *(_BYTE *)(chunk_from_isolation + 32) & 0xF;
  if (v8 == 2)
  {
    v7 = 0;
    if (((*(_DWORD *)v49 >> 11) & 0x7FF) == 0)
    {
      v7 = 0;
      if ((~*(_DWORD *)v49 & 0x7FF) != 0)
        v7 = (*(_DWORD *)v49 & 0x7FF) != 2046;
    }
    v52 = v7;
  }
  else
  {
    if (v8 != 5)
    {
      v48 = 0;
      v48 = *(_BYTE *)(v49 + 32) & 0xF;
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
      qword_A4038 = v48;
      __break(1u);
      JUMPOUT(0x528B8);
    }
    v52 = *(_DWORD *)(v49 + 4) == *(_DWORD *)(v50 + 68);
  }
  if (v52)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_chunk_is_full(zone, xz, chunk)\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2156)";
    __break(1u);
    JUMPOUT(0x528E8);
  }
  v21 = _xzm_xzone_alloc_from_chunk(v25, v24, chunk_from_isolation, &v20, v3, v4);
  if (!v21)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                           "alloc_driverkit/src/xzone/xzone_malloc.c:2159)";
    __break(1u);
    JUMPOUT(0x52930);
  }
LABEL_86:
  v31 = v17 + 2;
  os_unfair_lock_unlock(v17 + 2);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 0;
    if ((v20 & 1) == 0 && (v22 & 1) != 0 && *(_QWORD *)(v24 + 48) >= 0x401uLL)
      _platform_bzero(v21, *(_QWORD *)(v24 + 48));
  }
  else
  {
    malloc_set_errno_fast(1, 12);
  }
  return v21;
}

_OWORD *_xzm_xzone_malloc_tiny_outlined(os_unfair_lock_s *a1, unint64_t *a2, unsigned __int8 a3, unint64_t *a4, uint64_t a5, int a6)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  char v28;
  BOOL v29;
  char v30;
  int v31;
  char v32;
  BOOL v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t k;
  uint64_t *v42;
  uint64_t v43;
  char v44;
  BOOL v45;
  uint64_t v46;
  unint64_t j;
  unint64_t i;
  char v49;
  _BOOL4 v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _BOOL4 v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t chunk_from_isolation;
  _OWORD *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  int v72;
  BOOL v73;
  char v74;
  int v75;
  uint64_t v76;
  unint64_t *v77;
  unsigned __int8 v78;
  unint64_t *v79;
  os_unfair_lock_s *v80;
  os_unfair_lock_s *v81;
  _BOOL4 v82;
  unint64_t *v83;
  _BOOL4 v84;
  unint64_t v85;
  unint64_t v86;
  _BOOL4 v87;
  unint64_t *v88;
  _BOOL4 v89;
  uint64_t v90;
  unsigned __int8 m;
  unsigned __int8 v92;
  unint64_t v93;
  _BOOL4 v94;
  unsigned __int8 *v95;
  _BOOL4 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char v116;
  char v117;
  unint64_t *v118;
  unint64_t *v119;
  os_unfair_lock_s *v120;
  uint64_t v121;
  unsigned __int8 v122;
  unsigned __int8 v123;
  unint64_t *v124;
  os_unfair_lock_s *v125;
  unsigned __int8 v126;
  unsigned __int8 v127;
  unsigned __int8 v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  _BOOL4 v137;
  BOOL v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BOOL4 v142;
  unint64_t v143;
  BOOL v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t *v152;
  os_unfair_lock_s *v153;
  BOOL v154;
  unint64_t v155;
  uint64_t *v156;
  unint64_t v157;
  os_unfair_lock_s *v158;
  uint64_t v159;
  uint64_t *v160;
  unint64_t v161;
  os_unfair_lock_s *v162;
  unint64_t v163;
  os_unfair_lock_s *v164;
  unint64_t v165;
  unint64_t v166;
  os_unfair_lock_s *v167;
  unint64_t v168;
  unint64_t v169;
  int v170;
  unint64_t v171;
  int64_t v172;
  unint64_t v173;
  unint64_t v174;

  v80 = a1;
  v79 = a2;
  v78 = a3;
  v77 = a4;
  v76 = a5;
  v75 = a6;
  if (a5)
    _xzm_corruption_detected(v76);
  v74 = v75 & 1;
  v73 = 0;
  v73 = v79[6] < 0x401;
  v72 = 0;
  v71 = v77;
  v70 = 0;
  v69 = 0;
  v68 = *v77;
  v69 = v68;
  v67 = v68;
  v70 = v68;
  v66 = 0;
  chunk_from_isolation = 0;
  v64 = 0;
  do
  {
    while (1)
    {
      while ((v70 & 1) != 0)
      {
        v148 = v70;
        v147 = v77;
        v146 = v77;
        if ((v70 & 2) == 0)
        {
          v145 = v148 | 2;
          v144 = 0;
          v143 = v148;
          v142 = 0;
          v6 = v146;
          v140 = v148 | 2;
          v139 = v148 | 2;
          v141 = v148 | 2;
          v7 = v148;
          v8 = v148 | 2;
          do
            v9 = __ldaxr(v6);
          while (v9 == v7 && __stlxr(v8, v6));
          if (v9 != v7)
            v143 = v9;
          v138 = v9 == v7;
          v142 = v9 == v7;
          v148 = v143;
          v137 = v142;
          v144 = v9 == v7;
          if (v9 != v7)
          {
            v149 = v148;
            goto LABEL_20;
          }
          v148 |= 2uLL;
        }
        v136 = 17104898;
        v135 = 0;
        v135 = __ulock_wait(17104898, v146, v148);
        if (v135 < 0 && v135 != -4 && -v135 != 14)
        {
          v134 = -v135;
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: ulock_wait failure";
          qword_A4038 = v134;
          __break(1u);
          JUMPOUT(0x52CB8);
        }
        v132 = 0;
        v131 = *v146;
        v132 = v131;
        v130 = v131;
        v133 = v131;
        v148 = v131;
        v149 = v131;
LABEL_20:
        v63 = v149;
        v70 = v149;
      }
      if ((v70 & 2) == 0)
        break;
      _xzm_fork_lock_wait(v80);
      v61 = 0;
      v60 = *v71;
      v61 = v60;
      v59 = v60;
      v62 = v60;
      v70 = v60;
    }
    chunk_from_isolation = (v70 >> 2) & 0x7FFFFFFFFFFFLL;
    if (chunk_from_isolation)
    {
      v66 = (_OWORD *)_xzm_xzone_malloc_from_tiny_chunk(v80, (uint64_t)v79, v78, chunk_from_isolation, &v64, 0);
      if (v66)
        goto LABEL_133;
    }
    if (!v72)
      v72 = _malloc_ulock_self_owner_value();
    v58 = v70 & 0xFFFE000000000000 | (4 * v72) | 1;
    v57 = 0;
    v56 = v70;
    v55 = 0;
    v10 = v71;
    v53 = v58;
    v52 = v58;
    v54 = v58;
    v11 = v70;
    do
      v12 = __ldaxr(v10);
    while (v12 == v11 && __stlxr(v58, v10));
    if (v12 != v11)
      v56 = v12;
    v51 = v12 == v11;
    v55 = v12 == v11;
    v70 = v56;
    v50 = v55;
    v57 = v12 == v11;
  }
  while (v12 != v11);
  if (!v72)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"self_owner_value\" failed (/Library/Caches/com.apple.xbs"
                           "/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1284)";
    __break(1u);
    JUMPOUT(0x52F10);
  }
  if (v66)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!ptr\" failed (/Library/Caches/com.apple.xbs/Sources/lib"
                           "malloc_driverkit/src/xzone/xzone_malloc.c:1289)";
    __break(1u);
    JUMPOUT(0x52F40);
  }
  while (1)
  {
    chunk_from_isolation = _xzm_chunk_list_pop(v80, v79, 0);
    if (!chunk_from_isolation)
      break;
    v49 = 0;
    v66 = (_OWORD *)_xzm_xzone_malloc_from_tiny_chunk(v80, (uint64_t)v79, v78, chunk_from_isolation, &v64, &v49);
    if (v66)
      goto LABEL_109;
    if ((v49 & 1) != 0)
      _xzm_chunk_list_push(v80, v79 + 1, chunk_from_isolation, 0);
  }
  for (i = 0; ; i = chunk_from_isolation)
  {
    chunk_from_isolation = _xzm_chunk_list_pop(v80, v79 + 1, 0);
    if (!chunk_from_isolation)
      break;
    v66 = (_OWORD *)_xzm_xzone_malloc_from_empty_tiny_chunk((uint64_t)v80, (uint64_t)v79, v78, chunk_from_isolation);
    if (v66)
      goto LABEL_109;
    *(_QWORD *)(chunk_from_isolation + 16) = i;
  }
  for (j = 0; ; _xzm_chunk_list_push(v80, v79 + 1, j, 0))
  {
    j = i;
    if (!i)
      break;
    i = *(_QWORD *)(i + 16);
  }
  if ((*((_BYTE *)v79 + 78) & 1) != 0)
  {
    v46 = 0;
    v81 = v80;
    v36 = *(_QWORD *)&v80[58]._os_unfair_lock_opaque ? *(_QWORD *)&v80[58]._os_unfair_lock_opaque : (uint64_t)v81;
    v46 = v36;
    chunk_from_isolation = _xzm_xzone_allocate_chunk_from_isolation(v36, (uint64_t)v79);
    if (chunk_from_isolation)
    {
      v153 = v80;
      v152 = v79;
      v151 = chunk_from_isolation;
      v35 = *(_BYTE *)(chunk_from_isolation + 32) & 0xF;
      if (v35 == 2)
      {
        v34 = 1;
        if (((*(_DWORD *)v151 >> 11) & 0x7FF) != *((_DWORD *)v152 + 17))
        {
          v34 = 1;
          if ((~*(_DWORD *)v151 & 0x7FF) != 0)
            v34 = (*(_DWORD *)v151 & 0x7FF) == 2046;
        }
        v154 = v34;
      }
      else
      {
        if (v35 != 5)
        {
          v150 = 0;
          v150 = *(_BYTE *)(v151 + 32) & 0xF;
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
          qword_A4038 = v150;
          __break(1u);
          JUMPOUT(0x5324CLL);
        }
        v154 = *(_DWORD *)(v151 + 4) == 0;
      }
      if (!v154)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_chunk_is_empty(zone, xz, chunk)\" failed (/Libr"
                               "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1344)";
        __break(1u);
        JUMPOUT(0x5327CLL);
      }
      v66 = (_OWORD *)_xzm_xzone_malloc_from_empty_tiny_chunk((uint64_t)v80, (uint64_t)v79, v78, chunk_from_isolation);
      if (!v66)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/"
                               "libmalloc_driverkit/src/xzone/xzone_malloc.c:1347)";
        __break(1u);
        JUMPOUT(0x532C4);
      }
      goto LABEL_108;
    }
  }
  chunk_from_isolation = _xzm_chunk_list_pop(v80, v79 + 3, 0);
  if (chunk_from_isolation)
  {
    if (v73 && (*(_BYTE *)(chunk_from_isolation + 32) & 0x10) == 0)
    {
      v39 = 0;
      v158 = v80;
      v157 = chunk_from_isolation;
      v156 = &v39;
      if (!&v39)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.x"
                               "bs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
        __break(1u);
        JUMPOUT(0x5350CLL);
      }
      v155 = 0;
      v162 = v158;
      v161 = v157;
      v160 = v156;
      v31 = *(_BYTE *)(v157 + 32) & 0xF;
      if (v31 == 2)
      {
        *v160 = 0x4000;
      }
      else if (v31 == 5)
      {
        *v160 = 0x10000;
      }
      else
      {
        if ((v31 - 6) >= 2)
        {
          v159 = 0;
          v159 = *(_BYTE *)(v161 + 32) & 0xF;
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
          qword_A4038 = v159;
          __break(1u);
          JUMPOUT(0x535F8);
        }
        *v160 = (unint64_t)*(unsigned int *)(v161 + 40) << 14;
      }
      v164 = v162;
      v163 = v161;
      v167 = v162;
      v166 = v161;
      v165 = v161 & 0xFFFFFFFFFFFFC000;
      v30 = 1;
      if ((v161 & 0xFFFFFFFFFFFFC000) != 0)
      {
        v29 = 0;
        if (v166 >= v165 + 2136)
          v29 = v166 < v165 + 48 * *(unsigned int *)(v165 + 16) + 2136;
        v30 = v29;
      }
      if ((v30 & 1) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x536D8);
      }
      v169 = v165;
      v168 = v163;
      v174 = v165;
      v173 = v163;
      if (v163 < v165 + 2136)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x5373CLL);
      }
      v172 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v173 - v174 - 2136) >> 4);
      if (v172 >= *(unsigned int *)(v174 + 16))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x537A4);
      }
      v171 = v165;
      v170 = v172;
      v155 = *(_QWORD *)(v165 + 80) + ((unint64_t)v172 << 14);
      if (!v155)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/"
                               "libmalloc_driverkit/src/xzone/xzone_malloc.c:1392)";
        __break(1u);
        JUMPOUT(0x53800);
      }
      if (v39 != 0x4000)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size == XZM_SEGMENT_SLICE_SIZE\" failed (/Libr"
                               "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1393)";
        __break(1u);
        JUMPOUT(0x53834);
      }
      _platform_bzero(v155, 0x4000);
    }
  }
  else
  {
    v45 = v73;
    v44 = 0;
    v43 = 0;
    v42 = &v43;
    chunk_from_isolation = xzm_segment_group_alloc_chunk((unsigned __int8 *)v79[5], 2u, (unsigned __int8 *)v79 + 79, 1u, &v43, 0, v73, 0);
    if (!chunk_from_isolation)
    {
      v33 = 1;
      if (v42)
        v33 = *v42 == 0;
      if (!v33)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!list || !SLIST_FIRST(list)\" failed (/Library/Cache"
                               "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1371)";
        __break(1u);
        JUMPOUT(0x533C8);
      }
      goto LABEL_109;
    }
    *(_BYTE *)(chunk_from_isolation + 33) = *((_BYTE *)v79 + 72);
    k = 0;
    v40 = 0;
    for (k = *v42; ; k = v40)
    {
      v32 = 0;
      if (k)
      {
        v40 = *(_QWORD *)(k + 16);
        v32 = 1;
      }
      if ((v32 & 1) == 0)
        break;
      *v42 = *(_QWORD *)(*v42 + 16);
      *(_BYTE *)(k + 33) = *((_BYTE *)v79 + 72);
      *(_BYTE *)(k + 32) |= 0x40u;
      _xzm_chunk_list_push(v80, v79 + 3, k, 0);
    }
  }
  v66 = (_OWORD *)_xzm_xzone_malloc_from_fresh_tiny_chunk((uint64_t)v80, (uint64_t)v79, v78, chunk_from_isolation);
  if (!v66)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                           "alloc_driverkit/src/xzone/xzone_malloc.c:1399)";
    __break(1u);
    JUMPOUT(0x53890);
  }
LABEL_108:
  _xzm_chunk_list_push(v80, v79 + 2, chunk_from_isolation, 1u);
LABEL_109:
  if (!v66 || (v28 = 1, !chunk_from_isolation))
  {
    v27 = 0;
    if (!v66)
      v27 = chunk_from_isolation == 0;
    v28 = v27;
  }
  if ((v28 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(ptr && chunk) || (!ptr && !chunk)\" failed (/Library/Ca"
                           "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1407)";
    __break(1u);
    JUMPOUT(0x53934);
  }
  v24 = v71;
  v25 = (4 * (chunk_from_isolation & 0x7FFFFFFFFFFFLL)) & 0x1FFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)((v70 >> 49) + 1) << 49);
  v26 = *v71;
  do
  {
    v13 = v26;
    do
      v14 = __ldaxr(v24);
    while (v14 == v26 && __stlxr(v25, v24));
    v26 = v14;
  }
  while (v14 != v13);
  if ((v14 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"prev_slot_meta.xasa_gate.xsg_locked\" failed (/Library/C"
                           "aches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1426)";
    __break(1u);
    JUMPOUT(0x53A60);
  }
  if (v72 != v14 >> 2)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"prev_slot_meta.xasa_gate.xsg_owner == self_owner_value\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1427)";
    __break(1u);
    JUMPOUT(0x53A98);
  }
  if ((v14 & 0x1FFFF00000000) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"prev_slot_meta.xasa_gate.xsg_unused == 0\" failed (/Libr"
                           "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1428)";
    __break(1u);
    JUMPOUT(0x53ACCLL);
  }
  if (v14 >> 49 != v70 >> 49)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"prev_slot_meta.xasa_gate.xsg_gen == slot_meta.xasa_gate."
                           "xsg_gen\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1430)";
    __break(1u);
    JUMPOUT(0x53B0CLL);
  }
  if ((v14 & 2) != 0)
  {
    v38 = __ulock_wake(16777474, v71, 0);
    if (v38)
    {
      if (v38 != -2)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: ulock_wake failure";
        qword_A4038 = -v38;
        __break(1u);
        JUMPOUT(0x53BACLL);
      }
    }
  }
LABEL_133:
  if (v66)
  {
    v37 = *((_BYTE *)v79 + 77);
    v120 = v80;
    v119 = v79;
    v118 = v77;
    v117 = v37;
    v116 = v64 & 1;
    if (v37 != (v80[60]._os_unfair_lock_opaque & 3))
    {
      v115 = 0;
      v114 = 0;
      v113 = v118[2];
      v114 = v113;
      v112 = v113;
      v115 = v113;
      if ((v116 & 1) != 0 || (v115 & 0xFFFFFF00000000) != 0)
      {
        v111 = 1;
        if ((v116 & 1) != 0)
          v111 |= 0x100000000uLL;
        v110 = 0;
        v108 = v111;
        v107 = v111;
        v109 = v111;
        v105 = 0;
        v103 = v111;
        v102 = v111;
        v104 = v111;
        v21 = v118 + 2;
        v22 = v111;
        v23 = v118[2];
        do
        {
          v15 = v23;
          do
            v16 = __ldaxr(v21);
          while (v16 == v23 && __stlxr(v23 + v22, v21));
          v23 = v16;
        }
        while (v16 != v15);
        v101 = v16;
        v105 = v16;
        v100 = v16;
        v106 = v16 + v109;
        v110 = v16 + v109;
        v99 = (v16 + v109) >> 56;
        if (v99 != (v120[60]._os_unfair_lock_opaque & 3))
        {
          if ((HIDWORD(v110) & 0xFFFFFFu) <= v120[v99 + 61]._os_unfair_lock_opaque)
          {
            if (v110 > v120[64]._os_unfair_lock_opaque)
            {
              v86 = v110;
              LODWORD(v85) = 0;
              HIDWORD(v85) = HIBYTE(v85) << 24;
              HIBYTE(v85) = v99;
              v110 = v85;
              v84 = 0;
              v83 = v118 + 2;
              while (1)
              {
                v19 = _os_atomic_mo_has_acquire(0) ? __ldaxr(v83) : __ldxr(v83);
                v115 = v19;
                if (v19 < v86 || HIBYTE(v115) > (int)HIBYTE(v86))
                  break;
                if (_os_atomic_mo_has_release(0))
                  v84 = __stlxr(v110, v83) == 0;
                else
                  v84 = __stxr(v110, v83) == 0;
                if (v84)
                  goto LABEL_201;
              }
              __clrex();
LABEL_201:
              v82 = v84;
            }
          }
          else
          {
            v98 = 0;
            v126 = v99;
            if (v99)
            {
              if (v99 != 1)
              {
                if (v99 != 2)
                {
                  qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Invalid xzone slot config";
                  __break(1u);
                  JUMPOUT(0x53EACLL);
                }
                qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Can't upgrade from XZM_SLOT_CPU";
                __break(1u);
                JUMPOUT(0x53E80);
              }
              v127 = 2;
            }
            else if (ncpuclusters < 2)
            {
              v127 = 2;
            }
            else
            {
              v127 = 1;
            }
            v98 = v127;
            if (v99 >= (int)v127)
            {
              qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"current_slot_config < next_slot_config\" faile"
                                     "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:955)";
              __break(1u);
              JUMPOUT(0x53EF4);
            }
            if ((malloc_tracing_enabled & 1) != 0)
              kdebug_trace(855777280, *((unsigned __int8 *)v119 + 72), v118, v98);
            v97 = 0;
            v96 = 0;
            v95 = (unsigned __int8 *)v119 + 77;
            while (1)
            {
              v17 = _os_atomic_mo_has_acquire(0) ? __ldaxr(v95) : __ldxr(v95);
              v97 = v17;
              if (v17 >= (int)v98)
                break;
              if (_os_atomic_mo_has_release(0))
                v96 = __stlxr(v98, v95) == 0;
              else
                v96 = __stxr(v98, v95) == 0;
              if (v96)
                goto LABEL_169;
            }
            __clrex();
LABEL_169:
            v94 = v96;
            LODWORD(v93) = 0;
            HIDWORD(v93) = HIBYTE(v93) << 24;
            HIBYTE(v93) = v98;
            v110 = v93;
            v92 = 0;
            v128 = v98;
            if (!v98)
              goto LABEL_174;
            if (v98 == 1)
            {
              v129 = ncpuclusters;
              goto LABEL_175;
            }
            if (v98 != 2)
            {
LABEL_174:
              v129 = 1;
              goto LABEL_175;
            }
            v129 = logical_ncpus;
LABEL_175:
            v92 = v129;
            for (m = 0; m < (int)v92; ++m)
            {
              v90 = 0;
              v125 = v120;
              v124 = v119;
              v123 = m;
              v122 = 0;
              v122 = *((_BYTE *)v119 + 72);
              v121 = 0;
              v121 = m * BYTE2(v120[52]._os_unfair_lock_opaque);
              v90 = *(_QWORD *)&v120[56]._os_unfair_lock_opaque + 32 * (v121 + v122);
              v89 = 0;
              v88 = (unint64_t *)(v90 + 16);
              while (1)
              {
                v18 = _os_atomic_mo_has_acquire(0) ? __ldaxr(v88) : __ldxr(v88);
                v115 = v18;
                if (HIBYTE(v18) >= (int)v98)
                  break;
                if (_os_atomic_mo_has_release(0))
                  v89 = __stlxr(v110, v88) == 0;
                else
                  v89 = __stxr(v110, v88) == 0;
                if (v89)
                  goto LABEL_187;
              }
              __clrex();
LABEL_187:
              v87 = v89;
            }
          }
        }
      }
    }
    *v66 = 0uLL;
    if ((v74 & 1) != 0 && !v73)
      _platform_bzero(v66, v79[6]);
  }
  return v66;
}

void _xzm_walk_lock_wait(os_unfair_lock_s *a1)
{
  os_unfair_lock_lock_with_options(&a1[70], 327680);
  os_unfair_lock_unlock(a1 + 70);
}

BOOL _os_atomic_mo_has_acquire(int a1)
{
  BOOL v1;
  _BOOL4 v4;

  v1 = a1 == 2 || a1 == 1;
  v4 = 1;
  if (!v1 && a1 != 5 && a1 != 4)
    return 0;
  return v4;
}

BOOL _os_atomic_mo_has_release(int a1)
{
  return (a1 - 3) <= 2;
}

void _xzm_corruption_detected(uint64_t a1)
{
  qword_A4008 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: memory corruption of free block";
  qword_A4038 = a1;
  __break(1u);
}

void _xzm_fork_lock_wait(os_unfair_lock_s *a1)
{
  os_unfair_lock_lock_with_options(&a1[71], 327680);
  os_unfair_lock_unlock(a1 + 71);
}

uint64_t _xzm_xzone_malloc_from_tiny_chunk(os_unfair_lock_s *a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, _BYTE *a5, _BYTE *a6)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v19;
  char v20;
  _BYTE v21[2];
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  char v32;
  unint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _BOOL4 v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  _BOOL4 v51;
  BOOL v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _BOOL4 v56;
  unint64_t v57;
  BOOL v58;
  _BOOL4 v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _BOOL4 v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  __int128 v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  BOOL v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  char v84;
  unint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  os_unfair_lock_s *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  os_unfair_lock_s *v92;
  unint64_t v93;
  os_unfair_lock_s *v94;
  unint64_t v95;
  unint64_t v96;
  os_unfair_lock_s *v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  unint64_t v101;
  int64_t v102;
  unint64_t v103;
  unint64_t v104;

  v27 = a1;
  v26 = a2;
  v25 = a3;
  v24 = a4;
  v23 = a5;
  v22 = a6;
  v21[1] = 1;
  v21[0] = 0;
  v36 = a1;
  v35 = a2;
  v34 = a3;
  v33 = a4;
  v32 = 1;
  v31 = v21;
  v30 = a5;
  v29 = a6;
  v28 = 0;
  v88 = a1;
  v87 = a2;
  v86 = a3;
  v85 = a4;
  v84 = 1;
  v83 = v21;
  v82 = a5;
  v81 = a6;
  v80 = a6 != 0;
  v79 = 0;
  v92 = a1;
  v91 = a4;
  v90 = 0;
  v94 = a1;
  v93 = a4;
  v97 = a1;
  v96 = a4;
  v95 = a4 & 0xFFFFFFFFFFFFC000;
  v20 = 1;
  if ((a4 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v19 = 0;
    if (v96 >= v95 + 2136)
      v19 = v96 < v95 + 48 * *(unsigned int *)(v95 + 16) + 2136;
    v20 = v19;
  }
  if ((v20 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x547FCLL);
  }
  v99 = v95;
  v98 = v93;
  v104 = v95;
  v103 = v93;
  if (v93 < v95 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x54860);
  }
  v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - v104 - 2136) >> 4);
  if (v102 >= *(unsigned int *)(v104 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x548C8);
  }
  v101 = v95;
  v100 = v102;
  v79 = *(_QWORD *)(v95 + 80) + ((unint64_t)v102 << 14);
  if ((*(_BYTE *)(v85 + 32) & 0xF) != 2)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_TINY_CHUNK\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:484)";
    __break(1u);
    JUMPOUT(0x54928);
  }
  v78 = 0;
  v77 = 0;
  v76 = 0uLL;
  v75 = 0;
  v74 = 0;
  v73 = 0;
  v72 = *(_QWORD *)v85;
  v73 = v72;
  v71 = v72;
  v74 = v72;
  do
  {
    while (1)
    {
      while (1)
      {
        while ((v74 & 0x40000000) != 0)
        {
          if ((v84 & 1) == 0)
          {
            v89 = 0;
            goto LABEL_80;
          }
          _xzm_walk_lock_wait(v88);
          v70 = 0;
          v69 = *(_QWORD *)v85;
          v70 = v69;
          v68 = v69;
          v74 = v69;
        }
        v67 = v74;
        if (!v80)
          break;
        if (((v74 >> 22) & 0x3F) != 0)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_idx == XZM_SLOT_INDEX_EMPTY\" f"
                                 "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:517)";
          __break(1u);
          JUMPOUT(0x54A2CLL);
        }
        if ((v74 & 0x10000000) == 0)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_on_partial_list\" failed (/Library/Ca"
                                 "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:518)";
          __break(1u);
          JUMPOUT(0x54A5CLL);
        }
        if ((v74 & 0x20000000) != 0)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_empty_list\" failed (/Library/Cac"
                                 "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:519)";
          __break(1u);
          JUMPOUT(0x54A8CLL);
        }
        v67 &= ~0x10000000uLL;
        if (((v74 >> 11) & 0x7FF) != 0)
        {
          v67 = v67 & 0xFFFFFFFFF03FFFFFLL | (((v86 + 1) & 0x3FLL) << 22);
          goto LABEL_58;
        }
        if ((v74 & 0x7FF) == 0x7FE)
        {
          v67 |= 0x20000000uLL;
          *v81 = 1;
        }
        else if ((~(_DWORD)v74 & 0x7FF) != 0)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_head == XZM_FREE_MADVISING\" fa"
                                 "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:538)";
          __break(1u);
          JUMPOUT(0x54B10);
        }
        v66 = 0;
        v65 = v74;
        v64 = 0;
        v6 = (unint64_t *)v85;
        v62 = v67;
        v61 = v67;
        v63 = v67;
        v7 = v74;
        v8 = v67;
        do
          v9 = __ldaxr(v6);
        while (v9 == v7 && __stlxr(v8, v6));
        if (v9 != v7)
          v65 = v9;
        v60 = v9 == v7;
        v64 = v9 == v7;
        v74 = v65;
        v59 = v64;
        v66 = v9 == v7;
        if (v9 == v7)
        {
          if ((malloc_tracing_enabled & 1) != 0)
            kdebug_trace(855770112, v85, v74, v67);
          v89 = 0;
          goto LABEL_80;
        }
      }
      if (((v74 >> 22) & 0x3F) != v86 + 1)
      {
        v89 = 0;
        goto LABEL_80;
      }
      if (((v74 >> 11) & 0x7FF) == 0)
        break;
LABEL_58:
      v77 = 0;
      v67 = v67 & 0xFFFFFFFFFFC007FFLL | ((((v67 >> 11) - 1) & 0x7FFLL) << 11);
      if ((v74 & 0x7FF) > 0x3FF)
      {
        if ((v74 & 0x7FF) != 0x7FC)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_head == XZM_FREE_BUMP\" failed "
                                 "(/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:628)";
          __break(1u);
          JUMPOUT(0x54EE0);
        }
        if (((v67 >> 11) & 0x7FF) == 0)
          v67 = v67 & 0xFFFFFFFFFFFFF800 | 0x7FD;
        v50 = 0;
        v50 = *(unsigned int *)(v87 + 68);
        v78 = v79 + (v50 - ((v74 >> 11) & 0x7FF)) * *(_QWORD *)(v87 + 48);
      }
      else
      {
        v78 = v79 + 16 * (v74 & 0x7FF);
        v76 = *(_OWORD *)v78;
        v67 = v67 & 0xFFFFFFFFFFFFF800 | WORD4(v76) & 0x7FF;
        v67 = v67 & 0xFFF8003FFFFFFFFFLL | (((DWORD2(v76) >> 11) & 0x1FFFLL) << 38);
        v77 = 1;
      }
      v49 = 0;
      v48 = v74;
      v47 = 0;
      v14 = (unint64_t *)v85;
      v45 = v67;
      v44 = v67;
      v46 = v67;
      v15 = v74;
      v16 = v67;
      do
        v17 = __ldaxr(v14);
      while (v17 == v15 && __stlxr(v16, v14));
      if (v17 != v15)
        v48 = v17;
      v43 = v17 == v15;
      v47 = v17 == v15;
      v74 = v48;
      v42 = v47;
      v49 = v17 == v15;
      if (v17 == v15)
      {
        if ((malloc_tracing_enabled & 1) != 0)
          kdebug_trace(855772160, v85, v74, v67);
        if ((v77 & 1) != 0)
        {
          v41 = 0;
          v41 = v78 ^ *(_QWORD *)&v88[68]._os_unfair_lock_opaque;
          if (v41 == (_QWORD)v76)
          {
            v39 = 0;
            v38 = 0;
            v37 = WORD4(v76) & 0x7FF | (((*((_QWORD *)&v76 + 1) >> 11) & 0x1FFFLL) << 11) & 0xFFFFFF | (((v74 >> 38) & 0x1FFF) << 24) & 0x1FFFFFFFFFLL;
            v40 = WORD4(v76) & 0x7FF | (((*((_QWORD *)&v76 + 1) >> 11) & 0x1FFFLL) << 11) & 0xFFFFFF;
            if (*((_QWORD *)&v76 + 1) != v40)
              *v83 = 1;
          }
          else
          {
            *v83 = 1;
          }
        }
        v89 = v78;
        goto LABEL_80;
      }
      *v82 = 1;
      ++v75;
    }
    v67 &= 0xFFFFFFFFF03FFFFFLL;
    if ((v74 & 0x7FF) != 0x7FD)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_head == XZM_FREE_NULL\" failed (/Li"
                             "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:593)";
      __break(1u);
      JUMPOUT(0x54CB0);
    }
    if ((v74 & 0x10000000) != 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_partial_list\" failed (/Library/Cache"
                             "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:599)";
      __break(1u);
      JUMPOUT(0x54CE0);
    }
    if ((v74 & 0x20000000) != 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_empty_list\" failed (/Library/Caches/"
                             "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:600)";
      __break(1u);
      JUMPOUT(0x54D10);
    }
    v58 = 0;
    v57 = v74;
    v56 = 0;
    v10 = (unint64_t *)v85;
    v54 = v67;
    v53 = v67;
    v55 = v67;
    v11 = v74;
    v12 = v67;
    do
      v13 = __ldaxr(v10);
    while (v13 == v11 && __stlxr(v12, v10));
    if (v13 != v11)
      v57 = v13;
    v52 = v13 == v11;
    v56 = v13 == v11;
    v74 = v57;
    v51 = v56;
    v58 = v13 == v11;
  }
  while (v13 != v11);
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855771136, v85, v74, v67);
  v89 = 0;
LABEL_80:
  v28 = v89;
  if ((v21[0] & 1) != 0)
    _xzm_corruption_detected(v89);
  return v89;
}

uint64_t _malloc_ulock_self_owner_value()
{
  return *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) >> 2;
}

uint64_t _xzm_chunk_list_pop(os_unfair_lock_s *a1, unint64_t *a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *a2;
  do
  {
    while (v9 < 0)
    {
      _xzm_fork_lock_wait(a1);
      v9 = *a2;
    }
    v8 = v9 & 0x7FFFFFFFFFFFLL;
    if ((v9 & 0x7FFFFFFFFFFFLL) == 0)
      return 0;
    v7 = v9;
    v3 = *(_QWORD *)((_BYTE *)&dword_10[2 * a3] + (v9 & 0x7FFFFFFFFFFFLL)) & 0x7FFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)(((unint64_t)v9 >> 47) + 1) << 47) & 0x7FFFFFFFFFFFFFFFLL;
    do
      v4 = __ldaxr(a2);
    while (v4 == v9 && __stlxr(v3, a2));
    v6 = v4 == v9;
    if (v4 != v9)
      v7 = v4;
    v9 = v7;
  }
  while (!v6);
  return v8;
}

void _xzm_chunk_list_push(os_unfair_lock_s *a1, unint64_t *a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *a2;
  do
  {
    while (v7 < 0)
    {
      _xzm_fork_lock_wait(a1);
      v7 = *a2;
    }
    *(_QWORD *)(a3 + 16 + 8 * a4) = v7 & 0x7FFFFFFFFFFFLL;
    v6 = v7;
    do
      v4 = __ldaxr(a2);
    while (v4 == v7
         && __stlxr(a3 & 0x7FFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)(((unint64_t)v7 >> 47) + 1) << 47) & 0x7FFFFFFFFFFFFFFFLL, a2));
    v5 = v4 == v7;
    if (v4 != v7)
      v6 = v4;
    v7 = v6;
  }
  while (!v5);
}

uint64_t _xzm_xzone_malloc_from_empty_tiny_chunk(uint64_t a1, uint64_t a2, char a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  BOOL v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v16;

  if ((*(_BYTE *)(a4 + 32) & 0xF) != 2)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_TINY_CHUNK\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:747)";
    __break(1u);
    JUMPOUT(0x5563CLL);
  }
  v4 = atomic_load((unint64_t *)a4);
  v11 = v4;
  if ((v4 & 0x7FF) != 0x7FE)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_head == XZM_FREE_MADVISED\" failed (/"
                           "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:756)";
    __break(1u);
    JUMPOUT(0x556A4);
  }
  if (*(_QWORD *)(a1 + 232))
    v9 = *(_QWORD *)(a1 + 232);
  else
    v9 = a1;
  if ((*(_BYTE *)(v9 + 328) & 4) != 0 && (xzm_chunk_mark_used(a1, a4) & 1) == 0)
    return 0;
  if ((v11 & 0x20000000) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_on_empty_list\" failed (/Library/Caches/com"
                           ".apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:786)";
    __break(1u);
    JUMPOUT(0x55760);
  }
  if ((v11 & 0x10000000) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_partial_list\" failed (/Library/Caches/"
                           "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:787)";
    __break(1u);
    JUMPOUT(0x55790);
  }
  if (((v11 >> 22) & 0x3F) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_idx == XZM_SLOT_INDEX_EMPTY\" failed "
                           "(/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:788)";
    __break(1u);
    JUMPOUT(0x557C4);
  }
  v10 = v11 & 0xFFFFFFFFD0000000 | ((unint64_t)((a3 + 1) & 0x3F) << 22) | 0x7FC | ((unint64_t)(((unsigned __int16)*(_DWORD *)(a2 + 68) - 1) & 0x7FF) << 11);
  do
    v5 = __ldaxr((unint64_t *)a4);
  while (v5 == v11 && __stlxr(v10, (unint64_t *)a4));
  if (v5 != v11)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"success\" failed (/Library/Caches/com.apple.xbs/Sources/"
                           "libmalloc_driverkit/src/xzone/xzone_malloc.c:805)";
    __break(1u);
    JUMPOUT(0x558FCLL);
  }
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855773184, a4, v11, v10);
  v16 = a4 & 0xFFFFFFFFFFFFC000;
  v8 = 1;
  if ((a4 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v7 = 0;
    if (a4 >= v16 + 2136)
      v7 = a4 < (a4 & 0xFFFFFFFFFFFFC000)
              + 48 * *(unsigned int *)((char *)dword_10 + (a4 & 0xFFFFFFFFFFFFC000))
              + 2136;
    v8 = v7;
  }
  if ((v8 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x55AF4);
  }
  if (a4 < v16 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x55B58);
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4 - (a4 & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)dword_10 + (a4 & 0xFFFFFFFFFFFFC000)))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x55BC0);
  }
  return *(uint64_t *)((char *)&stru_20.filesize + (a4 & 0xFFFFFFFFFFFFC000))
       + ((unint64_t)(-1431655765 * ((uint64_t)(a4 - v16 - 2136) >> 4)) << 14);
}

unint64_t _xzm_xzone_allocate_chunk_from_isolation(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;
  BOOL v6;
  int v7;
  unint64_t v8;
  unint64_t j;
  unint64_t v10;
  unint64_t i;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;

  v14 = a1;
  v13 = a2;
  if ((*(_BYTE *)(a2 + 78) & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"xz->xz_sequestered\" failed (/Library/Caches/com.apple.x"
                           "bs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1122)";
    __break(1u);
    JUMPOUT(0x55C4CLL);
  }
  v12 = 0;
  v12 = (os_unfair_lock_s *)(*(_QWORD *)(v14 + 376) + 16 * *(unsigned __int8 *)(v13 + 72));
  i = 0;
  if (*(_QWORD *)&v12->_os_unfair_lock_opaque)
  {
    v10 = 0;
    v15 = v12 + 2;
    os_unfair_lock_lock_with_options(&v12[2], 327680);
    for (i = *(_QWORD *)&v12->_os_unfair_lock_opaque; i; i = *(_QWORD *)&v12->_os_unfair_lock_opaque)
    {
      v20 = v14;
      v19 = v13;
      v18 = i;
      v7 = *(_BYTE *)(i + 32) & 0xF;
      if (v7 == 2)
      {
        v6 = 1;
        if (((*(_DWORD *)v18 >> 11) & 0x7FF) != *(_DWORD *)(v19 + 68))
        {
          v6 = 1;
          if ((~*(_DWORD *)v18 & 0x7FF) != 0)
            v6 = (*(_DWORD *)v18 & 0x7FF) == 2046;
        }
        v21 = v6;
      }
      else
      {
        if (v7 != 5)
        {
          v17 = 0;
          v17 = *(_BYTE *)(v18 + 32) & 0xF;
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
          qword_A4038 = v17;
          __break(1u);
          JUMPOUT(0x55DD8);
        }
        v21 = *(_DWORD *)(v18 + 4) == 0;
      }
      if (!v21)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_chunk_is_empty(&main->xzmz_base, xz, chunk)\" f"
                               "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1143)";
        __break(1u);
        JUMPOUT(0x55E08);
      }
      if (*(_QWORD *)(i + 16))
        *(_QWORD *)(*(_QWORD *)(i + 16) + 24) = *(_QWORD *)(i + 24);
      **(_QWORD **)(i + 24) = *(_QWORD *)(i + 16);
      *(_QWORD *)(i + 16) = -1;
      *(_QWORD *)(i + 24) = -1;
      if (*(_QWORD *)(v13 + 48) <= 0x1000uLL
        || (*(_BYTE *)(v14 + 328) & 4) == 0
        || (xzm_chunk_mark_used(v14, i) & 1) != 0)
      {
        *(_WORD *)(i + 34) = *(_WORD *)(v13 + 74);
        break;
      }
      v2 = v10;
      *(_QWORD *)(i + 16) = v10;
      if (v2)
        *(_QWORD *)(v10 + 24) = i + 16;
      v10 = i;
      *(_QWORD *)(i + 24) = &v10;
    }
    if (v10)
    {
      v8 = 0;
      for (j = v10; ; j = v8)
      {
        v5 = 0;
        if (j)
        {
          v8 = *(_QWORD *)(j + 16);
          v5 = 1;
        }
        if ((v5 & 1) == 0)
          break;
        if (*(_QWORD *)(j + 16))
          *(_QWORD *)(*(_QWORD *)(j + 16) + 24) = *(_QWORD *)(j + 24);
        **(_QWORD **)(j + 24) = *(_QWORD *)(j + 16);
        *(_QWORD *)(j + 16) = -1;
        *(_QWORD *)(j + 24) = -1;
        v3 = *(_QWORD *)&v12->_os_unfair_lock_opaque;
        *(_QWORD *)(j + 16) = *(_QWORD *)&v12->_os_unfair_lock_opaque;
        if (v3)
          *(_QWORD *)(*(_QWORD *)&v12->_os_unfair_lock_opaque + 24) = j + 16;
        *(_QWORD *)&v12->_os_unfair_lock_opaque = j;
        *(_QWORD *)(j + 24) = v12;
      }
    }
    v16 = v12 + 2;
    os_unfair_lock_unlock(v12 + 2);
  }
  return i;
}

uint64_t _xzm_xzone_malloc_from_fresh_tiny_chunk(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4)
{
  BOOL v5;
  char v6;
  unint64_t v7;
  unint64_t v11;

  if ((*(_BYTE *)(a4 + 32) & 0xF) != 2)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_TINY_CHUNK\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:847)";
    __break(1u);
    JUMPOUT(0x560B4);
  }
  _xzm_xzone_fresh_chunk_init(a2, a4, 2);
  v7 = ((unint64_t)(((unsigned __int16)*(_DWORD *)(a2 + 68) - 1) & 0x7FF) << 11) & 0x3FF803 | 0x7FC | (((a3 + 1) & 0x3F) << 22) & 0xFFFFFFF;
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855774208, a4, *(unsigned __int8 *)(a2 + 72), v7);
  *(_QWORD *)a4 = v7;
  *(_WORD *)(a4 + 34) = *(_WORD *)(a2 + 74);
  v11 = a4 & 0xFFFFFFFFFFFFC000;
  v6 = 1;
  if ((a4 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v5 = 0;
    if (a4 >= v11 + 2136)
      v5 = a4 < (a4 & 0xFFFFFFFFFFFFC000)
              + 48 * *(unsigned int *)((char *)dword_10 + (a4 & 0xFFFFFFFFFFFFC000))
              + 2136;
    v6 = v5;
  }
  if ((v6 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x5638CLL);
  }
  if (a4 < v11 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x563F0);
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4 - (a4 & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)dword_10 + (a4 & 0xFFFFFFFFFFFFC000)))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x56458);
  }
  return *(uint64_t *)((char *)&stru_20.filesize + (a4 & 0xFFFFFFFFFFFFC000))
       + ((unint64_t)(-1431655765 * ((uint64_t)(a4 - v11 - 2136) >> 4)) << 14);
}

uint64_t _xzm_xzone_fresh_chunk_init(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  int v4;

  if (*(unsigned __int8 *)(a2 + 33) != *(unsigned __int8 *)(result + 72))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_xzone_idx == xz->xz_idx\" failed (/Library/Ca"
                           "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:828)";
    __break(1u);
    JUMPOUT(0x564D4);
  }
  *(_BYTE *)(a2 + 32) &= ~0x40u;
  if (a3 != 2)
  {
    if (a3 != 5)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Unexpected chunk kind";
      __break(1u);
      JUMPOUT(0x5671CLL);
    }
    v4 = *(_BYTE *)(a2 + 32) & 0xF;
    if (v4 == 2)
    {
      if ((*(_DWORD *)a2 & 0x7FF) != 0x7FE)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_atomic_meta.xca_alloc_head == XZM_FREE_MA"
                               "DVISED\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                               "zone/xzone_inline_internal.h:811)";
        __break(1u);
        JUMPOUT(0x56590);
      }
      if (((*(_DWORD *)a2 >> 11) & 0x7FF) != 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_atomic_meta.xca_free_count == 0\" failed "
                               "(/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                               "e_internal.h:812)";
        __break(1u);
        JUMPOUT(0x565C8);
      }
    }
    else
    {
      if (v4 != 5)
      {
        v3 = *(_BYTE *)(a2 + 32) & 0xF;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v3;
        __break(1u);
        JUMPOUT(0x566F0);
      }
      *(_DWORD *)a2 |= (1 << *(_DWORD *)(result + 68)) - 1;
      *(_DWORD *)(a2 + 4) = 0;
    }
  }
  return result;
}

void _xzm_xzone_upgrade_small_slot_config(uint64_t a1, uint64_t a2, os_unfair_lock_s *a3, unsigned __int8 a4)
{
  int v4;
  os_unfair_lock_s *v5;
  unsigned __int8 i;
  unsigned __int8 v11;

  a3[5]._os_unfair_lock_opaque = 0;
  if (a4)
  {
    if (a4 == 1)
    {
      v11 = ncpuclusters;
      goto LABEL_7;
    }
    if (a4 == 2)
    {
      v11 = logical_ncpus;
      goto LABEL_7;
    }
  }
  v11 = 1;
LABEL_7:
  if (v11 >= 2u)
  {
    os_unfair_lock_unlock(a3 + 2);
    for (i = 0; i < (int)v11; ++i)
    {
      v5 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 224)
                              + 32
                              * (i * *(unsigned __int8 *)(a1 + 210)
                               + (unint64_t)*(unsigned __int8 *)(a2 + 72)));
      if (v5 != a3)
      {
        os_unfair_lock_lock_with_options(&v5[2], 327680);
        v5[5]._os_unfair_lock_opaque = 0;
        os_unfair_lock_unlock(v5 + 2);
      }
    }
    os_unfair_lock_lock_with_options(&a3[2], 327680);
  }
  os_unfair_lock_lock_with_options(a2 + 24, 327680);
  if (*(unsigned __int8 *)(a2 + 77) == a4)
  {
    v4 = *(unsigned __int8 *)(a2 + 77);
    if (*(_BYTE *)(a2 + 77))
    {
      if (v4 != 1)
      {
        if (v4 != 2)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Invalid xzone slot config";
          __break(1u);
          JUMPOUT(0x569FCLL);
        }
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Can't upgrade from XZM_SLOT_CPU";
        __break(1u);
        JUMPOUT(0x569D8);
      }
      *(_BYTE *)(a2 + 77) = 2;
    }
    else if (ncpuclusters < 2)
    {
      *(_BYTE *)(a2 + 77) = 2;
    }
    else
    {
      *(_BYTE *)(a2 + 77) = 1;
    }
    if (*(unsigned __int8 *)(a2 + 77) > (*(_BYTE *)(a1 + 240) & 3))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"xz->xz_slot_config <= zone->xzz_max_slot_config\" fail"
                             "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2030)";
      __break(1u);
      JUMPOUT(0x56A40);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 24));
}

unint64_t _xzm_xzone_small_chunk_alloc(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  BOOL v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  char v9;
  char v10;
  int v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v16 = a1;
  v15 = a2;
  v14 = 0;
  if (*(_QWORD *)(a2 + 16))
  {
    v19 = v15 + 24;
    os_unfair_lock_lock_with_options(v15 + 24, 327680);
    v14 = *(_QWORD *)(v15 + 16);
    if (v14)
    {
      if (*(_QWORD *)(v14 + 16))
        *(_QWORD *)(*(_QWORD *)(v14 + 16) + 24) = *(_QWORD *)(v14 + 24);
      **(_QWORD **)(v14 + 24) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v14 + 16) = -1;
      *(_QWORD *)(v14 + 24) = -1;
    }
    v21 = v15 + 24;
    os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 24));
  }
  if (!v14)
  {
    v13 = 5;
    v12 = 0x10000;
    v11 = 4;
    v10 = 0;
    v9 = 0;
    v8 = 0;
    v14 = xzm_segment_group_alloc_chunk(*(unsigned __int8 **)(v15 + 40), 5u, (unsigned __int8 *)(v15 + 79), 4u, &v8, 0, 0, 0);
    if (!v14)
    {
      v5 = 1;
      if (&v8)
        v5 = v8 == 0;
      if (!v5)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!list || !SLIST_FIRST(list)\" failed (/Library/Cache"
                               "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1829)";
        __break(1u);
        JUMPOUT(0x56C48);
      }
      return 0;
    }
    *(_BYTE *)(v14 + 33) = *(_BYTE *)(v15 + 72);
    if (v8)
    {
      v6 = 0;
      v18 = v15 + 24;
      os_unfair_lock_lock_with_options(v15 + 24, 327680);
      for (i = v8; ; i = v6)
      {
        v4 = 0;
        if (i)
        {
          v6 = *(_QWORD *)(i + 16);
          v4 = 1;
        }
        if ((v4 & 1) == 0)
          break;
        v8 = *(_QWORD *)(v8 + 16);
        *(_BYTE *)(i + 33) = *(_BYTE *)(v15 + 72);
        *(_BYTE *)(i + 32) |= 0x40u;
        v2 = *(_QWORD *)(v15 + 16);
        *(_QWORD *)(i + 16) = v2;
        if (v2)
          *(_QWORD *)(*(_QWORD *)(v15 + 16) + 24) = i + 16;
        *(_QWORD *)(v15 + 16) = i;
        *(_QWORD *)(i + 24) = v15 + 16;
      }
      v20 = v15 + 24;
      os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 24));
    }
  }
  if (!v14)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                           "bmalloc_driverkit/src/xzone/xzone_malloc.c:1850)";
    __break(1u);
    JUMPOUT(0x56DC8);
  }
  _xzm_xzone_small_chunk_init(v15, v14);
  return v14;
}

unint64_t _xzm_xzone_alloc_from_chunk(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, double a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  BOOL v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  BOOL v25;
  char v26;
  BOOL v27;
  char v28;
  BOOL v29;
  int v30;
  unint64_t dirtiest_slice;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int64_t v78;
  unint64_t v79;
  unint64_t v80;
  int64_t v81;
  int64_t v82;
  unint64_t v83;
  unint64_t v84;
  int64_t v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  unint64_t v89;
  unsigned int v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  unsigned int v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;

  v41 = a1;
  v40 = a2;
  v39 = a3;
  v38 = a4;
  v68 = a1;
  v67 = a2;
  v66 = a3;
  v30 = *(_BYTE *)(a3 + 32) & 0xF;
  if (v30 == 2)
  {
    v29 = 0;
    if (((*(_DWORD *)v66 >> 11) & 0x7FF) == 0)
    {
      v29 = 0;
      if ((~*(_DWORD *)v66 & 0x7FF) != 0)
        v29 = (*(_DWORD *)v66 & 0x7FF) != 2046;
    }
    v69 = v29;
  }
  else
  {
    if (v30 != 5)
    {
      v65 = 0;
      v6 = *(_BYTE *)(v66 + 32) & 0xF;
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
      qword_A4038 = v6;
      __break(1u);
      JUMPOUT(0x56F24);
    }
    v69 = *(_DWORD *)(v66 + 4) == *(_DWORD *)(v67 + 68);
  }
  if (v69)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_chunk_is_full(zone, xz, chunk)\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1896)";
    __break(1u);
    JUMPOUT(0x56F54);
  }
  *v38 = 0;
  v37 = 0;
  v36 = -1;
  v35 = 0;
  v47 = v41;
  v46 = v39;
  v45 = 0;
  v49 = v41;
  v48 = v39;
  v52 = v41;
  v51 = v39;
  v50 = v39 & 0xFFFFFFFFFFFFC000;
  v28 = 1;
  if ((v39 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v27 = 0;
    if (v51 >= v50 + 2136)
      v27 = v51 < v50 + 48 * *(unsigned int *)(v50 + 16) + 2136;
    v28 = v27;
  }
  if ((v28 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x57138);
  }
  v54 = v50;
  v53 = v48;
  v59 = v50;
  v58 = v48;
  if (v48 < v50 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x5719CLL);
  }
  v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - v59 - 2136) >> 4);
  if (v57 >= *(unsigned int *)(v59 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x57204);
  }
  v56 = v50;
  v55 = v57;
  v35 = *(_QWORD *)(v50 + 80) + ((unint64_t)v57 << 14);
  v34 = 0;
  v44 = v41;
  v43 = v39;
  v42 = v39 & 0xFFFFFFFFFFFFC000;
  v26 = 1;
  if ((v39 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v25 = 0;
    if (v43 >= v42 + 2136)
      v25 = v43 < v42 + 48 * *(unsigned int *)(v42 + 16) + 2136;
    v26 = v25;
  }
  if ((v26 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x572F8);
  }
  v34 = v42;
  v33 = 0;
  v72 = v41;
  v71 = v39;
  v24 = *(_BYTE *)(v39 + 32) & 0xF;
  if (v24 == 2 || v24 == 5)
  {
    v73 = *(_QWORD *)(*(_QWORD *)(v72 + 216) + 88 * *(unsigned __int8 *)(v71 + 33) + 48);
  }
  else
  {
    if ((v24 - 6) >= 2)
    {
      v70 = 0;
      v7 = *(_BYTE *)(v71 + 32) & 0xF;
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: asking for size of chunk with invalid kind";
      qword_A4038 = v7;
      __break(1u);
      JUMPOUT(0x573E8);
    }
    v73 = (unint64_t)*(unsigned int *)(v71 + 40) << 14;
  }
  v33 = v73;
  if ((*(_BYTE *)(v39 + 32) & 0xF) != 5)
  {
    v18 = *(_BYTE *)(v39 + 32) & 0xF;
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: attempting to allocate from chunk of bad kind";
    qword_A4038 = v18;
    __break(1u);
    JUMPOUT(0x57964);
  }
  v63 = v41;
  v62 = v40;
  v61 = v39;
  v23 = *(_BYTE *)(v39 + 32) & 0xF;
  if (v23 == 2)
  {
    v22 = 1;
    if (((*(_DWORD *)v61 >> 11) & 0x7FF) != *(_DWORD *)(v62 + 68))
    {
      v22 = 1;
      if ((~*(_DWORD *)v61 & 0x7FF) != 0)
        v22 = (*(_DWORD *)v61 & 0x7FF) == 2046;
    }
    v64 = v22;
  }
  else
  {
    if (v23 != 5)
    {
      v60 = 0;
      v8 = *(_BYTE *)(v61 + 32) & 0xF;
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
      qword_A4038 = v8;
      __break(1u);
      JUMPOUT(0x57520);
    }
    v64 = *(_DWORD *)(v61 + 4) == 0;
  }
  if (!v64 && (v33 & 0x3FFF) != 0)
  {
    v32 = 0;
    dirtiest_slice = _xzm_chunk_find_dirtiest_slice(v41, v39, &v32, a5, a6);
    if (dirtiest_slice)
    {
      v11 = __clz(__rbit32(v32));
      if (v32)
        v12 = v11 + 1;
      else
        v12 = 0;
      v36 = v12 - 1;
      if (v32 && ((v32 - 1) & v32) != 0)
      {
        v13 = v35 + v36 + *(_QWORD *)(v40 + 48);
        v76 = v34;
        v75 = v13;
        v74 = 0;
        v80 = v34;
        v79 = v13;
        v78 = 0;
        v84 = v34;
        v83 = v13;
        v82 = 0;
        v87 = v34;
        v89 = v34;
        v88 = 0;
        v82 = v13 - *(_QWORD *)(v34 + 80);
        v81 = 0;
        v97 = v34;
        v96 = 0;
        v98 = v34;
        v96 = *(_DWORD *)(v34 + 12);
        if ((unint64_t)v96 << 14)
        {
          v95 = v84;
          v94 = 0;
          v99 = v84;
          v94 = *(_DWORD *)(v84 + 12);
          v93 = v84;
          v92 = 0;
          v100 = v84;
          v92 = *(_DWORD *)(v84 + 12);
          v21 = ((unint64_t)v94 << 14) - ((unint64_t)v92 << 14) + 0x400000;
        }
        else
        {
          v91 = v84;
          v90 = 0;
          v101 = v84;
          v90 = *(_DWORD *)(v84 + 12);
          v21 = (unint64_t)v90 << 14;
        }
        v81 = v21;
        v20 = 0;
        if ((v82 & 0x8000000000000000) == 0)
          v20 = v82 < v81;
        if (!v20)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" fail"
                                 "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_"
                                 "inline_internal.h:438)";
          __break(1u);
          JUMPOUT(0x577A4);
        }
        v78 = v82;
        v86 = v80;
        v85 = v82;
        v74 = (unint64_t)v82 >> 14;
        if (v74 >= *(_DWORD *)(v76 + 16))
          v77 = 0;
        else
          v77 = v76 + 48 * v74 + 2136;
        if (v77 < dirtiest_slice)
        {
          v14 = __clz(__rbit32(v32 & ~(1 << v36)));
          if ((v32 & ~(1 << v36)) != 0)
            v15 = v14 + 1;
          else
            v15 = 0;
          v36 = v15 - 1;
        }
      }
    }
    else
    {
      v16 = __clz(__rbit32(*(_DWORD *)v39));
      if (*(_DWORD *)v39)
        v17 = v16 + 1;
      else
        v17 = 0;
      v36 = v17 - 1;
    }
  }
  else
  {
    v9 = __clz(__rbit32(*(_DWORD *)v39));
    if (*(_DWORD *)v39)
      v10 = v9 + 1;
    else
      v10 = 0;
    v36 = v10 - 1;
  }
  if (v36 > *(_DWORD *)(v40 + 68))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"block_index <= xz->xz_chunk_capacity\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1947)";
    __break(1u);
    JUMPOUT(0x578DCLL);
  }
  v37 = v35 + v36 * *(_QWORD *)(v40 + 48);
  *(_DWORD *)v39 &= ~(1 << v36);
  ++*(_DWORD *)(v39 + 4);
  return v37;
}

uint64_t _xzm_xzone_small_chunk_init(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)a2)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_free == 0\" failed (/Library/Caches/com.apple"
                           ".xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1785)";
    __break(1u);
    JUMPOUT(0x579D0);
  }
  if (*(_DWORD *)(a2 + 4))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_used == 0\" failed (/Library/Caches/com.apple"
                           ".xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1786)";
    __break(1u);
    JUMPOUT(0x57A04);
  }
  if (*(_WORD *)(a2 + 34))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_mzone_idx == XZM_MZONE_INDEX_INVALID\" failed"
                           " (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1787)";
    __break(1u);
    JUMPOUT(0x57A38);
  }
  result = _xzm_xzone_fresh_chunk_init(a1, a2, 5);
  *(_WORD *)(a2 + 34) = *(_WORD *)(a1 + 74);
  return result;
}

uint64_t _xzm_chunk_find_dirtiest_slice(uint64_t a1, uint64_t a2, unsigned int *a3, double a4, float a5)
{
  int v6;
  BOOL v7;
  char v8;
  int v9;
  BOOL v10;
  char v11;
  BOOL v12;
  char v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int i;
  uint64_t v18;
  float v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;

  if ((*(_BYTE *)(a2 + 32) & 0xF) == 2)
    v15 = 1;
  else
    v15 = *(_DWORD *)(a2 + 40);
  v19 = NAN;
  v18 = 0;
  for (i = 0; i < v15; ++i)
  {
    v23 = a2 + 48 * i;
    if ((*(_BYTE *)(v23 + 32) & 0xF) == 4)
    {
      v26 = v23 - *(unsigned int *)(v23 + 36);
      if (v26 < (v23 & 0xFFFFFFFFFFFFC000 | 0x858))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(X"
                               "ZM_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs"
                               "/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:584)";
        __break(1u);
        JUMPOUT(0x57BFCLL);
      }
      v14 = *(_BYTE *)(v26 + 32) & 0xF;
      if ((v14 - 1) < 2)
      {
        v32 = v26 == v23;
      }
      else if (v14 == 3 || (v14 - 5) < 4)
      {
        if (v23 < v26)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple."
                                 "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:562)";
          __break(1u);
          JUMPOUT(0x57CACLL);
        }
        v32 = v23 < v26 + 48 * *(unsigned int *)(v26 + 40);
      }
      else
      {
        v32 = 0;
      }
      if (v32)
        v27 = v23 - *(unsigned int *)(v23 + 36);
      else
        v27 = a2 + 48 * i;
    }
    else
    {
      v27 = a2 + 48 * i;
    }
    if ((*(_BYTE *)(v27 + 32) & 0xF) != 5)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CHUN"
                             "K\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xz"
                             "one_inline_internal.h:1107)";
      __break(1u);
      JUMPOUT(0x57D68);
    }
    v22 = *(_QWORD *)(a1 + 216) + 88 * *(unsigned __int8 *)(v27 + 33);
    v25 = v23 & 0xFFFFFFFFFFFFC000;
    v13 = 1;
    if ((v23 & 0xFFFFFFFFFFFFC000) != 0)
    {
      v12 = 0;
      if (v23 >= v25 + 2136)
        v12 = v23 < (v23 & 0xFFFFFFFFFFFFC000)
                  + 48 * *(unsigned int *)((char *)&dword_10 + (v23 & 0xFFFFFFFFFFFFC000))
                  + 2136;
      v13 = v12;
    }
    if ((v13 & 1) == 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0x57E84);
    }
    if (v23 < v25 + 2136)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0x57EECLL);
    }
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v25 - 2136) >> 4)) >= *(unsigned int *)((char *)&dword_10
                                                                                                 + (v23 & 0xFFFFFFFFFFFFC000)))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0x57F58);
    }
    v33 = v27 & 0xFFFFFFFFFFFFC000;
    v11 = 1;
    if ((v27 & 0xFFFFFFFFFFFFC000) != 0)
    {
      v10 = 0;
      if (v27 >= v33 + 2136)
        v10 = v27 < (v27 & 0xFFFFFFFFFFFFC000)
                  + 48 * *(unsigned int *)((char *)&dword_10 + (v27 & 0xFFFFFFFFFFFFC000))
                  + 2136;
      v11 = v10;
    }
    if ((v11 & 1) == 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0x581B4);
    }
    if (v27 < v33 + 2136)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0x5821CLL);
    }
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - v33 - 2136) >> 4)) >= *(unsigned int *)((char *)&dword_10
                                                                                                 + (v27 & 0xFFFFFFFFFFFFC000)))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0x58288);
    }
    v9 = *(_BYTE *)(v27 + 32) & 0xF;
    if (v9 == 2 || v9 == 5)
    {
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 88 * *(unsigned __int8 *)(v27 + 33) + 48);
    }
    else
    {
      if ((v9 - 6) >= 2)
      {
        v30 = *(_BYTE *)(v27 + 32) & 0xF;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: asking for size of chunk with invalid kind";
        qword_A4038 = v30;
        __break(1u);
        JUMPOUT(0x583BCLL);
      }
      v31 = (unint64_t)*(unsigned int *)(v27 + 40) << 14;
    }
    v21 = (*(_DWORD *)((char *)&stru_20.filesize + (v23 & 0xFFFFFFFFFFFFC000))
         - 1431650304 * ((uint64_t)(v23 - v25 - 2136) >> 4)
         - (*(_DWORD *)((char *)&stru_20.filesize + (v27 & 0xFFFFFFFFFFFFC000))
          - 1431650304 * ((uint64_t)(v27 - v33 - 2136) >> 4)))
        / v31;
    if (v21 == *(_DWORD *)(v22 + 68))
    {
      v24 = 0;
    }
    else
    {
      v34 = v27 & 0xFFFFFFFFFFFFC000;
      v8 = 1;
      if ((v27 & 0xFFFFFFFFFFFFC000) != 0)
      {
        v7 = 0;
        if (v27 >= v34 + 2136)
          v7 = v27 < (v27 & 0xFFFFFFFFFFFFC000)
                   + 48 * *(unsigned int *)((char *)&dword_10 + (v27 & 0xFFFFFFFFFFFFC000))
                   + 2136;
        v8 = v7;
      }
      if ((v8 & 1) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x58618);
      }
      if (v27 < v34 + 2136)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x58680);
      }
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - v34 - 2136) >> 4)) >= *(unsigned int *)((char *)&dword_10 + (v27 & 0xFFFFFFFFFFFFC000)))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x586ECLL);
      }
      v6 = *(_BYTE *)(v27 + 32) & 0xF;
      if (v6 == 2 || v6 == 5)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 88 * *(unsigned __int8 *)(v27 + 33) + 48);
      }
      else
      {
        if ((v6 - 6) >= 2)
        {
          v28 = *(_BYTE *)(v27 + 32) & 0xF;
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: asking for size of chunk with invalid kind";
          qword_A4038 = v28;
          __break(1u);
          JUMPOUT(0x58820);
        }
        v29 = (unint64_t)*(unsigned int *)(v27 + 40) << 14;
      }
      v20 = (*(_DWORD *)((char *)&stru_20.filesize + (v23 & 0xFFFFFFFFFFFFC000))
           - 1431650304 * ((uint64_t)(v23 - v25 - 2136) >> 4)
           + 0x3FFF
           - (*(_DWORD *)((char *)&stru_20.filesize + (v27 & 0xFFFFFFFFFFFFC000))
            - 1431650304 * ((uint64_t)(v27 - v34 - 2136) >> 4)))
          / v29;
      if (v20 == *(_DWORD *)(v22 + 68))
        --v20;
      if (v21 > v20)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"first <= last\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:1131)";
        __break(1u);
        JUMPOUT(0x588B0);
      }
      v24 = (unint64_t)((1 << (v20 - v21 + 1)) - 1) << v21;
    }
    v16 = *(_DWORD *)a2 & v24;
    if (v16)
    {
      if (v16 != v24)
      {
        LOWORD(a5) = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)v16));
        if (LODWORD(a5) < LODWORD(v19))
        {
          v19 = a5;
          v18 = a2 + 48 * i;
          *a3 = v16;
        }
      }
    }
  }
  return v18;
}

void _xzm_free_outlined(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a3;
  if (*(_QWORD *)(a1 + 232) || !mfm_claimed_address((unint64_t)a2))
  {
    if ((v8 & 1) == 0)
    {
      qword_A4008 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: pointer being freed was not allocated";
      qword_A4038 = (uint64_t)a2;
      __break(1u);
      JUMPOUT(0x58A34);
    }
    find_zone_and_free(a2, 1, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    mfm_free((uint64_t)a2);
  }
}

void _xzm_xzone_free_tiny(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  char v8;
  unint64_t v9;
  char i;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  char v16;
  char v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v26;

  if (*(_QWORD *)(a2 + 48) <= 0x400uLL)
    _platform_bzero(a4, *(_QWORD *)(a2 + 48));
  v21 = *(unsigned int *)(a2 + 68);
  v26 = a3 & 0xFFFFFFFFFFFFC000;
  v8 = 1;
  if ((a3 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v7 = 0;
    if (a3 >= v26 + 2136)
      v7 = a3 < (a3 & 0xFFFFFFFFFFFFC000)
              + 48 * *(unsigned int *)((char *)dword_10 + (a3 & 0xFFFFFFFFFFFFC000))
              + 2136;
    v8 = v7;
  }
  if ((v8 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x58C7CLL);
  }
  if (a3 < v26 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x58CE0);
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3 - (a3 & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)dword_10 + (a3 & 0xFFFFFFFFFFFFC000)))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x58D48);
  }
  v20 = *(uint64_t *)((char *)&stru_20.filesize + (a3 & 0xFFFFFFFFFFFFC000))
      + ((unint64_t)(-1431655765 * ((uint64_t)(a3 - v26 - 2136) >> 4)) << 14);
  v4 = (unint64_t)a4 - v20 + 15;
  if ((uint64_t)((uint64_t)a4 - v20) >= 0)
    v4 = (unint64_t)a4 - v20;
  v19 = v4 >> 4;
  *a4 = (unint64_t)a4 ^ *(_QWORD *)(a1 + 272);
  v18 = 0;
  v17 = 1;
  v16 = 0;
  v15 = 0;
  v14 = 0;
  v13 = *(_QWORD *)a3;
  for (i = 0; ; i = 0)
  {
    while ((v13 & 0x40000000) != 0)
    {
      _xzm_walk_lock_wait((os_unfair_lock_s *)a1);
      v13 = *(_QWORD *)a3;
    }
    if (((v13 >> 11) & 0x7FF) + 1 != v21)
      goto LABEL_27;
    if ((v16 & 1) == 0)
    {
      if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFLL) == 0 && ((v13 >> 22) & 0x3F) != 0)
      {
        v18 = mach_absolute_time();
        v14 = *(_QWORD *)(a1 + 224)
            + 32
            * ((((v13 >> 22) & 0x3F) - 1) * *(unsigned __int8 *)(a1 + 210)
             + (unint64_t)*(unsigned __int8 *)(a2 + 72));
        if (v18 - *(_QWORD *)(v14 + 24) < *(_QWORD *)(a1 + 264))
          v17 = 0;
      }
      v16 = 1;
    }
    if ((v17 & 1) != 0)
    {
      v12 = v13 & 0x7FFFFF0000000 | ((unint64_t)(unsigned __int16)((v13 >> 51) + 1) << 51) | 0x7FF;
    }
    else
    {
LABEL_27:
      a4[1] = v13 & 0x7FF | (((v13 >> 38) & 0x1FFF) << 11) & 0xFFFFFF;
      v11 = v13 & 0x7FFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)((v13 >> 51) + 1) << 51);
      v12 = v11 & 0xFFF8003FFFC00000 | v19 & 0x7FF | ((unint64_t)(((unsigned __int16)((v11 & 0xFFFFF800 | v19 & 0x7FF) >> 11)
                                                                          + 1) & 0x7FF) << 11) & 0xFFF8003FFFFFFFFFLL | (v13 >> 51 << 38);
      if (((v13 >> 11) & 0x7FF) == 0)
      {
        if (((v13 >> 22) & 0x3F) != 0)
        {
          if ((v13 & 0x10000000) != 0)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_partial_list\" failed (/Library"
                                   "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1726)";
            __break(1u);
            JUMPOUT(0x591A8);
          }
        }
        else
        {
          v12 |= 0x10000000uLL;
          i = 1;
        }
      }
    }
    v9 = v13;
    do
      v5 = __ldaxr((unint64_t *)a3);
    while (v5 == v13 && __stlxr(v12, (unint64_t *)a3));
    v6 = v5 == v13;
    if (v5 != v13)
      v9 = v5;
    v13 = v9;
    if (v6)
      break;
    ++v15;
  }
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855775232, a3, v9, v12);
  if (v18)
  {
    if (!v14)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"xas\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                             "bmalloc_driverkit/src/xzone/xzone_malloc.c:1752)";
      __break(1u);
      JUMPOUT(0x59308);
    }
    *(_QWORD *)(v14 + 24) = v18;
  }
  if ((~(_DWORD)v12 & 0x7FF) != 0)
  {
    if ((i & 1) != 0)
      _xzm_chunk_list_push((os_unfair_lock_s *)a1, (unint64_t *)a2, a3, 0);
  }
  else
  {
    _xzm_xzone_madvise_tiny_chunk(a1, a2, (unint64_t *)a3);
  }
}

void _xzm_xzone_free_block_to_small_chunk(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  int v16;
  char v17;
  unint64_t v18;
  char v19;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;

  v19 = *(_BYTE *)(a3 + 12);
  while (1)
  {
    while (!v19)
    {
      os_unfair_lock_lock_with_options(a3 + 8, 327680);
      v19 = *(_BYTE *)(a3 + 12);
      if (!v19)
      {
        v16 = *(_BYTE *)(a3 + 32) & 0xF;
        if (v16 == 2)
        {
          v15 = 0;
          if (((*(_DWORD *)a3 >> 11) & 0x7FF) == 0)
          {
            v15 = 0;
            if ((~*(_DWORD *)a3 & 0x7FF) != 0)
              v15 = (*(_DWORD *)a3 & 0x7FF) != 2046;
          }
          v27 = v15;
        }
        else
        {
          if (v16 != 5)
          {
            v4 = *(_BYTE *)(a3 + 32) & 0xF;
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
            qword_A4038 = v4;
            __break(1u);
            JUMPOUT(0x5957CLL);
          }
          v27 = *(_DWORD *)(a3 + 4) == *(_DWORD *)(a2 + 68);
        }
        _xzm_xzone_free_to_chunk(a1, a3, a4);
        _xzm_xzone_chunk_madvise_free_slices(a1, a2, a3, a4);
        v14 = *(_BYTE *)(a3 + 32) & 0xF;
        if (v14 == 2)
        {
          v13 = 1;
          if (((*(_DWORD *)a3 >> 11) & 0x7FF) != *(_DWORD *)(a2 + 68))
          {
            v13 = 1;
            if ((~*(_DWORD *)a3 & 0x7FF) != 0)
              v13 = (*(_DWORD *)a3 & 0x7FF) == 2046;
          }
          v25 = v13;
        }
        else
        {
          if (v14 != 5)
          {
            v5 = *(_BYTE *)(a3 + 32) & 0xF;
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
            qword_A4038 = v5;
            __break(1u);
            JUMPOUT(0x596C0);
          }
          v25 = *(_DWORD *)(a3 + 4) == 0;
        }
        if (v25)
        {
          if ((*(_BYTE *)(a3 + 32) & 0x20) == 0)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_enqueued\" failed (/Library"
                                   "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2575)";
            __break(1u);
            JUMPOUT(0x59704);
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(a3 + 8));
          os_unfair_lock_lock_with_options(a2 + 24, 327680);
          if ((*(_BYTE *)(a3 + 32) & 0x20) != 0)
          {
            if (*(_QWORD *)(a3 + 16))
              *(_QWORD *)(*(_QWORD *)(a3 + 16) + 24) = *(_QWORD *)(a3 + 24);
            **(_QWORD **)(a3 + 24) = *(_QWORD *)(a3 + 16);
            *(_QWORD *)(a3 + 16) = -1;
            *(_QWORD *)(a3 + 24) = -1;
            *(_BYTE *)(a3 + 32) &= ~0x20u;
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 24));
          _xzm_xzone_chunk_free(a1, a2, a3);
        }
        else if (v27)
        {
          os_unfair_lock_lock_with_options(a2 + 24, 327680);
          if (*(_QWORD *)(a3 + 16))
            *(_QWORD *)(*(_QWORD *)(a3 + 16) + 24) = *(_QWORD *)(a3 + 24);
          **(_QWORD **)(a3 + 24) = *(_QWORD *)(a3 + 16);
          *(_QWORD *)(a3 + 16) = -1;
          *(_QWORD *)(a3 + 24) = -1;
          v6 = *(_QWORD *)a2;
          *(_QWORD *)(a3 + 16) = *(_QWORD *)a2;
          if (v6)
            *(_QWORD *)(*(_QWORD *)a2 + 24) = a3 + 16;
          *(_QWORD *)a2 = a3;
          *(_QWORD *)(a3 + 24) = a2;
          *(_BYTE *)(a3 + 32) |= 0x20u;
          v12 = *(_BYTE *)(a3 + 32) & 0xF;
          if (v12 == 2)
          {
            v11 = 0;
            if (((*(_DWORD *)a3 >> 11) & 0x7FF) == 0)
            {
              v11 = 0;
              if ((~*(_DWORD *)a3 & 0x7FF) != 0)
                v11 = (*(_DWORD *)a3 & 0x7FF) != 2046;
            }
            v26 = v11;
          }
          else
          {
            if (v12 != 5)
            {
              v7 = *(_BYTE *)(a3 + 32) & 0xF;
              qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
              qword_A4038 = v7;
              __break(1u);
              JUMPOUT(0x599DCLL);
            }
            v26 = *(_DWORD *)(a3 + 4) == *(_DWORD *)(a2 + 68);
          }
          if (v26)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_chunk_is_full(zone, xz, chunk)\" failed (/"
                                   "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2613)";
            __break(1u);
            JUMPOUT(0x59A0CLL);
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 24));
          os_unfair_lock_unlock((os_unfair_lock_t)(a3 + 8));
        }
        else
        {
          os_unfair_lock_unlock((os_unfair_lock_t)(a3 + 8));
        }
        return;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a3 + 8));
    }
    v18 = *(_QWORD *)(a1 + 224)
        + 32
        * ((v19 - 1) * *(unsigned __int8 *)(a1 + 210)
         + (unint64_t)*(unsigned __int8 *)(a2 + 72));
    os_unfair_lock_lock_with_options(v18 + 8, 327680);
    v17 = v19;
    v19 = *(_BYTE *)(a3 + 12);
    if (v19 == v17)
      break;
    os_unfair_lock_unlock((os_unfair_lock_t)(v18 + 8));
  }
  _xzm_xzone_free_to_chunk(a1, a3, a4);
  _xzm_xzone_chunk_madvise_free_slices(a1, a2, a3, a4);
  v10 = *(_BYTE *)(a3 + 32) & 0xF;
  if (v10 == 2)
  {
    v9 = 1;
    if (((*(_DWORD *)a3 >> 11) & 0x7FF) != *(_DWORD *)(a2 + 68))
    {
      v9 = 1;
      if ((~*(_DWORD *)a3 & 0x7FF) != 0)
        v9 = (*(_DWORD *)a3 & 0x7FF) == 2046;
    }
    v24 = v9;
  }
  else
  {
    if (v10 != 5)
    {
      v8 = *(_BYTE *)(a3 + 32) & 0xF;
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
      qword_A4038 = v8;
      __break(1u);
      JUMPOUT(0x59C84);
    }
    v24 = *(_DWORD *)(a3 + 4) == 0;
  }
  if (v24)
  {
    *(_QWORD *)v18 = 0;
    *(_BYTE *)(a3 + 12) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v18 + 8));
    _xzm_xzone_chunk_free(a1, a2, a3);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v18 + 8));
  }
}

void _xzm_free_large_huge(uint64_t a1, unint64_t a2)
{
  BOOL v2;
  char v3;
  unsigned __int8 **v6;

  os_unfair_lock_lock_with_options(a1 + 280, 327680);
  *(_WORD *)(a2 + 34) = 0;
  if (*(_QWORD *)(a2 + 16))
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 24) = *(_QWORD *)(a2 + 24);
  **(_QWORD **)(a2 + 24) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = -1;
  *(_QWORD *)(a2 + 24) = -1;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 280));
  v6 = (unsigned __int8 **)(a2 & 0xFFFFFFFFFFFFC000);
  v3 = 1;
  if ((a2 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v2 = 0;
    if (a2 >= (unint64_t)(v6 + 267))
      v2 = a2 < (a2 & 0xFFFFFFFFFFFFC000)
              + 48 * *(unsigned int *)((char *)dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
              + 2136;
    v3 = v2;
  }
  if ((v3 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x59EB0);
  }
  xzm_segment_group_free_chunk(*v6, a2, (*(_QWORD *)(a1 + 296) & 0x80) != 0);
}

void _xzm_xzone_madvise_tiny_chunk(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (*(_QWORD *)(a1 + 232))
    v5 = *(_QWORD *)(a1 + 232);
  else
    v5 = a1;
  if ((*(_BYTE *)(v5 + 328) & 4) != 0)
    xzm_chunk_mark_free(a1, (unint64_t)a3);
  else
    xzm_segment_group_segment_madvise_chunk(*(_QWORD *)(a2 + 40), (unint64_t)a3);
  v8 = *a3;
  do
  {
    if ((~(_DWORD)v8 & 0x7FF) != 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_head == XZM_FREE_MADVISING\" failed"
                             " (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1584)";
      __break(1u);
      JUMPOUT(0x5A00CLL);
    }
    v7 = v8 & 0xFFFFFFFFFFFFF800 | 0x7FE;
    if ((v8 & 0x10000000) == 0)
      v7 = v8 & 0xFFFFFFFFDFFFF800 | 0x200007FE;
    v6 = v8;
    do
      v3 = __ldaxr(a3);
    while (v3 == v8 && __stlxr(v7, a3));
    v4 = v3 == v8;
    if (v3 != v8)
      v6 = v3;
    v8 = v6;
  }
  while (!v4);
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855776256, a3, v6, v7);
  if ((v6 & 0x20000000) != 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_empty_list\" failed (/Library/Caches/co"
                           "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1602)";
    __break(1u);
    JUMPOUT(0x5A164);
  }
  if ((v6 & 0x10000000) == 0)
    _xzm_chunk_list_push((os_unfair_lock_s *)a1, (unint64_t *)(a2 + 8), (uint64_t)a3, 0);
}

uint64_t _xzm_xzone_free_to_chunk(uint64_t result, unint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  if ((*(_BYTE *)(a2 + 32) & 0xF) != 5)
  {
    v4 = *(_BYTE *)(a2 + 32) & 0xF;
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Attempting to free to non-chunk slice";
    qword_A4038 = v4;
    __break(1u);
    JUMPOUT(0x5A634);
  }
  v8 = result;
  v10 = a2 & 0xFFFFFFFFFFFFC000;
  v7 = 1;
  if ((a2 & 0xFFFFFFFFFFFFC000) != 0)
  {
    result = 0;
    v6 = 0;
    if (a2 >= v10 + 2136)
    {
      result = a2 < (a2 & 0xFFFFFFFFFFFFC000)
                  + 48 * *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
                  + 2136;
      v6 = a2 < (a2 & 0xFFFFFFFFFFFFC000)
              + 48 * *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
              + 2136;
    }
    v7 = v6;
  }
  if ((v7 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x5A3D4);
  }
  if (a2 < v10 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x5A438);
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - (a2 & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000)))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x5A4A0);
  }
  v5 = *(_BYTE *)(a2 + 32) & 0xF;
  if (v5 == 2 || v5 == 5)
  {
    result = *(unsigned __int8 *)(a2 + 33);
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 216) + 88 * result + 48);
  }
  else
  {
    if ((v5 - 6) >= 2)
    {
      v3 = *(_BYTE *)(a2 + 32) & 0xF;
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: asking for size of chunk with invalid kind";
      qword_A4038 = v3;
      __break(1u);
      JUMPOUT(0x5A5C4);
    }
    v9 = (unint64_t)*(unsigned int *)(a2 + 40) << 14;
  }
  *(_DWORD *)a2 |= 1 << ((a3
                        - (*(_DWORD *)((char *)&stru_20.filesize + (a2 & 0xFFFFFFFFFFFFC000))
                         - 1431650304 * ((uint64_t)(a2 - v10 - 2136) >> 4)))
                       / v9);
  --*(_DWORD *)(a2 + 4);
  return result;
}

void _xzm_xzone_chunk_madvise_free_slices(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  BOOL v12;
  char v13;
  BOOL v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  int64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  BOOL v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int *v88;
  unint64_t v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  _DWORD *v118;
  uint64_t v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  _DWORD *v124;
  uint64_t v125;

  v26 = a1;
  v25 = a2;
  v24 = a3;
  v23 = a4;
  if ((*(_BYTE *)(a3 + 32) & 0xF) != 5)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CHUNK\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2494)";
    __break(1u);
    JUMPOUT(0x5A6ACLL);
  }
  v22 = 0;
  v72 = v26;
  v71 = v24;
  v70 = 0;
  v75 = v26;
  v74 = v24;
  v73 = v24 & 0xFFFFFFFFFFFFC000;
  v17 = 1;
  if ((v24 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v16 = 0;
    if (v74 >= v73 + 2136)
      v16 = v74 < v73 + 48 * *(unsigned int *)(v73 + 16) + 2136;
    v17 = v16;
  }
  if ((v17 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x5A790);
  }
  v70 = v73;
  v22 = *(unsigned __int8 **)v73;
  if ((*(_BYTE *)(v24 + 32) & 0xF) == 5)
  {
    v77 = v22;
    switch(*v22)
    {
      case 0u:
      case 2u:
        v78 = (*(_BYTE *)(*((_QWORD *)v77 + 3) + 328) & 4) != 0;
        break;
      case 1u:
      case 3u:
        v78 = (*(_BYTE *)(*((_QWORD *)v77 + 3) + 328) & 8) != 0;
        break;
      default:
        v76 = 0;
        v4 = *v77;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
        qword_A4038 = v4;
        __break(1u);
        JUMPOUT(0x5A864);
    }
    if (!v78)
    {
      v21 = 0;
      v20 = 0;
      v29 = v26;
      v28 = v24;
      v27 = v24 & 0xFFFFFFFFFFFFC000;
      v15 = 1;
      if ((v24 & 0xFFFFFFFFFFFFC000) != 0)
      {
        v14 = 0;
        if (v28 >= v27 + 2136)
          v14 = v28 < v27 + 48 * *(unsigned int *)(v27 + 16) + 2136;
        v15 = v14;
      }
      if ((v15 & 1) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x5A954);
      }
      v19 = v27;
      v32 = v27;
      v31 = v24;
      if (v24 < v27 + 2136)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x5A9B0);
      }
      v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v32 - 2136) >> 4);
      if (v30 >= *(unsigned int *)(v32 + 16))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x5AA18);
      }
      v18 = v30;
      v42 = v26;
      v41 = v24;
      v40 = v23;
      v49 = v26;
      v48 = v24;
      v47 = v23;
      v54 = v26;
      v53 = v24;
      v52 = v23;
      v51 = 0;
      v57 = v26;
      v56 = v24;
      v55 = 0;
      v59 = v26;
      v58 = v24;
      v62 = v26;
      v61 = v24;
      v60 = v24 & 0xFFFFFFFFFFFFC000;
      v13 = 1;
      if ((v24 & 0xFFFFFFFFFFFFC000) != 0)
      {
        v12 = 0;
        if (v61 >= v60 + 2136)
          v12 = v61 < v60 + 48 * *(unsigned int *)(v60 + 16) + 2136;
        v13 = v12;
      }
      if ((v13 & 1) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x5AC38);
      }
      v64 = v60;
      v63 = v58;
      v69 = v60;
      v68 = v58;
      if (v58 < v60 + 2136)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x5AC9CLL);
      }
      v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - v69 - 2136) >> 4);
      if (v67 >= *(unsigned int *)(v69 + 16))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x5AD04);
      }
      v66 = v60;
      v65 = v67;
      v51 = *(_QWORD *)(v60 + 80) + ((unint64_t)v67 << 14);
      v50 = v52 - v51;
      v45 = v42;
      v44 = v41;
      v11 = *(_BYTE *)(v41 + 32) & 0xF;
      if (v11 == 2 || v11 == 5)
      {
        v46 = *(_QWORD *)(*(_QWORD *)(v45 + 216) + 88 * *(unsigned __int8 *)(v44 + 33) + 48);
      }
      else
      {
        if ((v11 - 6) >= 2)
        {
          v43 = 0;
          v5 = *(_BYTE *)(v44 + 32) & 0xF;
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: asking for size of chunk with invalid kind";
          qword_A4038 = v5;
          __break(1u);
          JUMPOUT(0x5AE28);
        }
        v46 = (unint64_t)*(unsigned int *)(v44 + 40) << 14;
      }
      v35 = v26;
      v34 = v24;
      v10 = *(_BYTE *)(v24 + 32) & 0xF;
      if (v10 == 2 || v10 == 5)
      {
        v36 = *(_QWORD *)(*(_QWORD *)(v35 + 216) + 88 * *(unsigned __int8 *)(v34 + 33) + 48);
      }
      else
      {
        if ((v10 - 6) >= 2)
        {
          v33 = 0;
          v6 = *(_BYTE *)(v34 + 32) & 0xF;
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: asking for size of chunk with invalid kind";
          qword_A4038 = v6;
          __break(1u);
          JUMPOUT(0x5AF20);
        }
        v36 = (unint64_t)*(unsigned int *)(v34 + 40) << 14;
      }
      v7 = *(_DWORD *)(v25 + 68);
      v93 = v24;
      v92 = v30;
      v91 = v7;
      v90 = (v52 - v51) / v46;
      v89 = v36;
      v88 = &v21;
      v87 = &v20;
      v9 = 0;
      if (v24)
        v9 = (*(_BYTE *)(v93 + 32) & 0xF) == 5;
      if (!v9)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk && chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND"
                               "_SMALL_CHUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzon"
                               "e/../xzone/xzone_inline_internal.h:1005)";
        __break(1u);
        JUMPOUT(0x5AFC4);
      }
      v86 = 0;
      v85 = 0;
      v105 = 0;
      v104 = v92;
      v103 = v90;
      v102 = v89;
      v84 = v90 * v89 + ((unint64_t)v92 << 14);
      v83 = v84 + v89 - 1;
      v101 = 0;
      v100 = v84;
      v82 = v84 >> 14;
      v99 = 0;
      v98 = v83;
      v81 = (v83 >> 14) + 1;
      v80 = 0;
      v113 = 0;
      v112 = v92;
      v111 = v89;
      v110 = (unint64_t)v82 << 14;
      if (v110 < (unint64_t)v92 << 14)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"offset >= chunk_idx * XZM_SEGMENT_SLICE_SIZE\" faile"
                               "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inl"
                               "ine_internal.h:718)";
        __break(1u);
        JUMPOUT(0x5B0C0);
      }
      v80 = (v110 - (v112 << 14)) / v111;
      v79 = 0;
      v109 = 0;
      v108 = v92;
      v107 = v89;
      v106 = ((unint64_t)v81 << 14) - 1;
      if (v106 < (unint64_t)v92 << 14)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"offset >= chunk_idx * XZM_SEGMENT_SLICE_SIZE\" faile"
                               "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inl"
                               "ine_internal.h:718)";
        __break(1u);
        JUMPOUT(0x5B144);
      }
      v79 = (v106 - (v108 << 14)) / v107;
      if (v79 == v91)
        --v79;
      v125 = 0;
      v124 = (_DWORD *)v93;
      v123 = v80;
      v122 = v90;
      if ((*(_BYTE *)(v93 + 32) & 0xF) != 5)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CH"
                               "UNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzon"
                               "e/xzone_inline_internal.h:931)";
        __break(1u);
        JUMPOUT(0x5B1E0);
      }
      if (v122 < v123)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"end >= start\" failed (/Library/Caches/com.apple.xbs"
                               "/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:932)";
        __break(1u);
        JUMPOUT(0x5B218);
      }
      v121 = v122 - v123 + 1;
      if (v121 >= 0x21)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"span <= 32\" failed (/Library/Caches/com.apple.xbs/S"
                               "ources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:936)";
        __break(1u);
        JUMPOUT(0x5B268);
      }
      v120 = (unint64_t)((1 << v121) - 1) << v123;
      if ((v120 & ~*v124) != 0)
      {
        v97 = 0;
        v96 = v84;
        v86 = (v84 >> 14) + 1;
      }
      else
      {
        v86 = v82;
      }
      if (v86 < v92)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"left >= chunk_idx\" failed (/Library/Caches/com.appl"
                               "e.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:1044)";
        __break(1u);
        JUMPOUT(0x5B314);
      }
      v119 = 0;
      v118 = (_DWORD *)v93;
      v117 = v90;
      v116 = v79;
      if ((*(_BYTE *)(v93 + 32) & 0xF) != 5)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CH"
                               "UNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzon"
                               "e/xzone_inline_internal.h:931)";
        __break(1u);
        JUMPOUT(0x5B370);
      }
      if (v116 < v117)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"end >= start\" failed (/Library/Caches/com.apple.xbs"
                               "/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:932)";
        __break(1u);
        JUMPOUT(0x5B3A8);
      }
      v115 = v116 - v117 + 1;
      if (v115 >= 0x21)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"span <= 32\" failed (/Library/Caches/com.apple.xbs/S"
                               "ources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:936)";
        __break(1u);
        JUMPOUT(0x5B3F8);
      }
      v114 = (unint64_t)((1 << v115) - 1) << v117;
      if ((v114 & ~*v118) != 0)
      {
        v95 = 0;
        v94 = v83;
        v85 = v83 >> 14;
      }
      else
      {
        v85 = v81;
      }
      if (v85 > v92 + *(_DWORD *)(v93 + 40))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"right <= chunk_idx + chunk->xzcs_slice_count\" faile"
                               "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inl"
                               "ine_internal.h:1053)";
        __break(1u);
        JUMPOUT(0x5B4ACLL);
      }
      *v88 = v86;
      if (v86 > v85)
        v8 = 0;
      else
        v8 = v85 - v86;
      *v87 = v8;
      if (v20)
      {
        if (v21 < v18)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_idx >= chunk_idx\" failed (/Library/Caches/c"
                                 "om.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2518)";
          __break(1u);
          JUMPOUT(0x5B53CLL);
        }
        v37 = v19;
        v39 = v19;
        v38 = 0;
        xzm_segment_group_segment_madvise_span((uint64_t)v22, (void *)(*(_QWORD *)(v19 + 80) + ((unint64_t)v21 << 14)), v20);
      }
    }
  }
}

void _xzm_xzone_chunk_free(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  char v13;
  uint64_t v14;
  unint64_t v17;

  v14 = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a3 + 34) = 0;
  if ((*(_BYTE *)(a2 + 78) & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 232))
      v11 = *(_QWORD *)(a1 + 232);
    else
      v11 = a1;
    if ((*(_BYTE *)(v11 + 328) & 4) != 0)
    {
      v17 = a3 & 0xFFFFFFFFFFFFC000;
      v10 = 1;
      if ((a3 & 0xFFFFFFFFFFFFC000) != 0)
      {
        v9 = 0;
        if (a3 >= v17 + 2136)
          v9 = a3 < (a3 & 0xFFFFFFFFFFFFC000)
                  + 48 * *(unsigned int *)((char *)dword_10 + (a3 & 0xFFFFFFFFFFFFC000))
                  + 2136;
        v10 = v9;
      }
      if ((v10 & 1) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x5B70CLL);
      }
      if (a3 < v17 + 2136)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x5B788);
      }
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3 - (a3 & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)dword_10 + (a3 & 0xFFFFFFFFFFFFC000)))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x5B7F0);
      }
      if (*(_QWORD *)((char *)&stru_20.maxprot
                     + (a3 & 0xFFFFFFFFFFFFC000)
                     + 0xFFFFFFFD55555558 * ((uint64_t)(a3 - v17 - 2136) >> 4)) == -1)
      {
        xzm_chunk_mark_free(a1, a3);
      }
      else
      {
        if ((*(_BYTE *)(a3 + 32) & 0xF) != 2)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_TINY_C"
                                 "HUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzon"
                                 "e_malloc.c:2402)";
          __break(1u);
          JUMPOUT(0x5B850);
        }
        if ((*(_DWORD *)a3 & 0x7FF) != 0x7FE)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_atomic_meta.xca_alloc_head == XZM_FREE_"
                                 "MADVISED\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/"
                                 "xzone_malloc.c:2404)";
          __break(1u);
          JUMPOUT(0x5B88CLL);
        }
      }
    }
    else
    {
      v13 = 1;
      if ((*(_BYTE *)(a3 + 32) & 0xF) == 2)
      {
        if ((*(_DWORD *)a3 & 0x7FF) == 0x7FE)
        {
          v13 = 0;
        }
        else
        {
          *(_QWORD *)a3 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFF800 | 0x7FE;
          *(_QWORD *)a3 &= 0xFFFFFFFFFFC007FFLL;
        }
      }
      else
      {
        if ((*(_BYTE *)(a3 + 32) & 0xF) != 5)
        {
          v3 = *(_BYTE *)(a3 + 32) & 0xF;
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Unexpected chunk kind";
          qword_A4038 = v3;
          __break(1u);
          JUMPOUT(0x5B984);
        }
        v13 = 0;
      }
      if ((v13 & 1) != 0)
        xzm_segment_group_segment_madvise_chunk(v14, a3);
    }
    v8 = *(_BYTE *)(a3 + 32) & 0xF;
    if (v8 == 2)
    {
      if ((*(_DWORD *)a3 & 0x7FF) != 0x7FE)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_atomic_meta.xca_alloc_head == XZM_FREE_MA"
                               "DVISED\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                               "zone/xzone_inline_internal.h:811)";
        __break(1u);
        JUMPOUT(0x5BA2CLL);
      }
      if (((*(_DWORD *)a3 >> 11) & 0x7FF) != 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_atomic_meta.xca_free_count == 0\" failed "
                               "(/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                               "e_internal.h:812)";
        __break(1u);
        JUMPOUT(0x5BA64);
      }
    }
    else
    {
      if (v8 != 5)
      {
        v4 = *(_BYTE *)(a3 + 32) & 0xF;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v4;
        __break(1u);
        JUMPOUT(0x5BB8CLL);
      }
      *(_DWORD *)a3 |= (1 << *(_DWORD *)(a2 + 68)) - 1;
      *(_DWORD *)(a3 + 4) = 0;
    }
    *(_BYTE *)(a3 + 32) &= ~0x10u;
    if ((*(_BYTE *)(a3 + 32) & 0xF) == 2)
    {
      *(_QWORD *)a3 &= ~0x10000000uLL;
      *(_QWORD *)a3 |= 0x20000000uLL;
      *(_QWORD *)a3 &= 0xFFFFFFFFF03FFFFFLL;
    }
    v12 = (os_unfair_lock_s *)(*(_QWORD *)(v11 + 376) + 16 * *(unsigned __int8 *)(a2 + 72));
    os_unfair_lock_lock_with_options(&v12[2], 327680);
    v5 = *(_QWORD *)&v12->_os_unfair_lock_opaque;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&v12->_os_unfair_lock_opaque;
    if (v5)
      *(_QWORD *)(*(_QWORD *)&v12->_os_unfair_lock_opaque + 24) = a3 + 16;
    *(_QWORD *)&v12->_os_unfair_lock_opaque = a3;
    *(_QWORD *)(a3 + 24) = v12;
    os_unfair_lock_unlock(v12 + 2);
  }
  else
  {
    v7 = *(_BYTE *)(a3 + 32) & 0xF;
    if (v7 == 2)
    {
      if ((*(_DWORD *)a3 & 0x7FF) != 0x7FE)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_atomic_meta.xca_alloc_head == XZM_FREE_MA"
                               "DVISED\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                               "zone/xzone_inline_internal.h:811)";
        __break(1u);
        JUMPOUT(0x5BD0CLL);
      }
      if (((*(_DWORD *)a3 >> 11) & 0x7FF) != 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_atomic_meta.xca_free_count == 0\" failed "
                               "(/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                               "e_internal.h:812)";
        __break(1u);
        JUMPOUT(0x5BD44);
      }
      *(_QWORD *)a3 &= 0xFFFFFFFFFFFFF800;
    }
    else
    {
      if (v7 != 5)
      {
        v6 = *(_BYTE *)(a3 + 32) & 0xF;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v6;
        __break(1u);
        JUMPOUT(0x5BE6CLL);
      }
      *(_DWORD *)a3 = 0;
    }
    *(_DWORD *)(a3 + 4) = 0;
    *(_BYTE *)(a3 + 33) = 0;
    xzm_segment_group_free_chunk(*(unsigned __int8 **)(a2 + 40), a3, 0);
  }
}

uint64_t _xzm_ptr_size_outlined(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 232) || !mfm_claimed_address(a2))
    return 0;
  else
    return mfm_alloc_size(a2);
}

void _xzm_do_lock_action(os_unfair_lock_s *a1, int a2)
{
  if (a2)
  {
    if (a2 == 1)
    {
      os_unfair_lock_unlock(a1);
    }
    else
    {
      if (a2 != 2)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: invalid xzm lock action";
        __break(1u);
        JUMPOUT(0x5BFC8);
      }
      a1->_os_unfair_lock_opaque = 0;
    }
  }
  else
  {
    os_unfair_lock_lock_with_options(a1, 327680);
  }
}

void _xzm_allocation_slots_do_lock_action(uint64_t a1, int a2)
{
  char v2;
  uint64_t v3;
  unsigned __int8 j;
  char v5;
  unsigned __int8 i;

  for (i = 1; i < (int)*(unsigned __int8 *)(a1 + 210); ++i)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 216) + 88 * i + 48) > 0x1000uLL)
      v2 = 5;
    else
      v2 = 2;
    v5 = v2;
    for (j = 0; j < (int)*(unsigned __int8 *)(a1 + 211); ++j)
    {
      v3 = *(_QWORD *)(a1 + 224) + 32 * (*(unsigned __int8 *)(a1 + 210) * j + i);
      if (v5 == 2)
      {
        if (a2)
          _xzm_xzone_allocation_slot_fork_unlock((unint64_t *)v3);
        else
          _xzm_xzone_allocation_slot_fork_lock(v3);
      }
      else
      {
        _xzm_do_lock_action((os_unfair_lock_s *)(v3 + 8), a2);
      }
    }
  }
}

uint64_t _xzm_tiny_xzone_do_lock_action(unint64_t *a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  unint64_t *i;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t *v10;

  v10 = a1;
  v9 = a2;
  if (a2)
  {
    _xzm_chunk_list_fork_unlock(v10);
    _xzm_chunk_list_fork_unlock(v10 + 1);
    result = (uint64_t)_xzm_chunk_list_fork_unlock(v10 + 2);
  }
  else
  {
    _xzm_chunk_list_fork_lock(v10);
    _xzm_chunk_list_fork_lock(v10 + 1);
    result = (uint64_t)_xzm_chunk_list_fork_lock(v10 + 2);
  }
  v8 = 0;
  v7 = 0;
  v6 = v10[2];
  v7 = v6;
  v5 = v6;
  v8 = v6;
  for (i = (unint64_t *)(v6 & 0x7FFFFFFFFFFFLL); i; i = (unint64_t *)i[3])
  {
    v3 = 0;
    if (v9)
    {
      v3 = *i;
      if ((v3 & 0x7FF) != 0x7FF && (v3 & 0x7FF) != 0x7FE)
        result = (uint64_t)_xzm_xzone_tiny_chunk_unlock(i, v3);
    }
    else
    {
      result = _xzm_xzone_tiny_chunk_lock(i, (unint64_t *)&v3);
    }
  }
  return result;
}

void _xzm_small_xzone_lock_all(os_unfair_lock_s *a1)
{
  uint64_t k;
  uint64_t m;
  uint64_t i;
  uint64_t j;

  if (*(_QWORD *)&a1[12]._os_unfair_lock_opaque <= 0x1000uLL)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"xz->xz_block_size > XZM_TINY_BLOCK_SIZE_MAX\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3689)";
    __break(1u);
    JUMPOUT(0x5C314);
  }
  while (2)
  {
    os_unfair_lock_lock_with_options(&a1[6], 327680);
    for (i = *(_QWORD *)&a1->_os_unfair_lock_opaque; i; i = *(_QWORD *)(i + 16))
      os_unfair_lock_lock_with_options(i + 8, 327680);
    for (j = *(_QWORD *)&a1[2]._os_unfair_lock_opaque; j; j = *(_QWORD *)(j + 16))
    {
      if (!os_unfair_lock_trylock((os_unfair_lock_t)(j + 8)))
      {
        for (k = *(_QWORD *)&a1->_os_unfair_lock_opaque; k; k = *(_QWORD *)(k + 16))
          os_unfair_lock_unlock((os_unfair_lock_t)(k + 8));
        for (m = *(_QWORD *)&a1[2]._os_unfair_lock_opaque; m && m != j; m = *(_QWORD *)(m + 16))
          os_unfair_lock_unlock((os_unfair_lock_t)(m + 8));
        break;
      }
    }
    if (j)
    {
      os_unfair_lock_unlock(a1 + 6);
      yield();
      continue;
    }
    break;
  }
}

uint64_t _xzm_xzone_allocation_slot_fork_lock(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unsigned int v8;
  unint64_t v9;

  v7 = (unint64_t *)result;
  v6 = (unint64_t *)result;
  v5 = *(_QWORD *)result;
  do
  {
    while ((v5 & 1) != 0)
    {
      v8 = v5;
      if ((v5 & 2) == 0)
      {
        do
          v1 = __ldaxr(v7);
        while (v1 == v5 && __stlxr(v5 | 2, v7));
        if (v1 != v5)
        {
          v9 = v1;
          goto LABEL_15;
        }
        v8 = v5 | 2;
      }
      result = __ulock_wait(17104898, v7, v8);
      if ((result & 0x80000000) != 0 && (_DWORD)result != -4 && -(int)result != 14)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: ulock_wait failure";
        qword_A4038 = -(int)result;
        __break(1u);
        JUMPOUT(0x5C730);
      }
      v9 = *v7;
LABEL_15:
      v5 = v9;
    }
    v4 = v5;
    do
      v2 = __ldaxr(v6);
    while (v2 == v5 && __stlxr(v5 | 2, v6));
    v3 = v2 == v5;
    if (v2 != v5)
      v4 = v2;
    v5 = v4;
  }
  while (!v3);
  return result;
}

unint64_t *_xzm_xzone_allocation_slot_fork_unlock(unint64_t *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v4 = *result;
  if ((*result & 2) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slot_meta.xasa_chunk.xsc_fork_locked\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1107)";
    __break(1u);
    JUMPOUT(0x5C8F4);
  }
  v3 = *result;
  do
  {
    v1 = v3;
    do
      v2 = __ldaxr(result);
    while (v2 == v3 && __stlxr(v4 & 0xFFFFFFFFFFFFFFFDLL, result));
    v3 = v2;
  }
  while (v2 != v1);
  if (v2 != v4)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"prev_slot_value == slot_meta.xasa_value\" failed (/Libra"
                           "ry/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1114)";
    __break(1u);
    JUMPOUT(0x5C9E8);
  }
  return result;
}

unint64_t *_xzm_chunk_list_fork_lock(unint64_t *result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v3 = *result;
  do
  {
    v1 = v3;
    do
      v2 = __ldaxr(result);
    while (v2 == v3 && __stlxr(v3 | 0x8000000000000000, result));
    v3 = v2;
  }
  while (v2 != v1);
  if (v2 < 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_head.xzch_fork_locked\" failed (/Library/Caches/com"
                           ".apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:377)";
    __break(1u);
    JUMPOUT(0x5CADCLL);
  }
  return result;
}

unint64_t *_xzm_chunk_list_fork_unlock(unint64_t *result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v3 = *result;
  do
  {
    v1 = v3;
    do
      v2 = __ldaxr(result);
    while (v2 == v3 && __stlxr(v3 & 0x7FFFFFFFFFFFFFFFLL, result));
    v3 = v2;
  }
  while (v2 != v1);
  if (v2 >= 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_head.xzch_fork_locked\" failed (/Library/Caches/com."
                           "apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:391)";
    __break(1u);
    JUMPOUT(0x5CBE0);
  }
  return result;
}

uint64_t _xzm_xzone_tiny_chunk_lock(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v7 = *a1;
  do
  {
    if ((v7 & 0x40000000) != 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_walk_locked\" failed (/Library/Caches/co"
                             "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2691)";
      __break(1u);
      JUMPOUT(0x5CC64);
    }
    if ((~(_DWORD)v7 & 0x7FF) == 0 || (v7 & 0x7FF) == 0x7FE)
      return 0;
    v6 = v7 | 0x40000000;
    v5 = v7;
    do
      v2 = __ldaxr(a1);
    while (v2 == v7 && __stlxr(v7 | 0x40000000, a1));
    v4 = v2 == v7;
    if (v2 != v7)
      v5 = v2;
    v7 = v5;
  }
  while (!v4);
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855778304, a1, v5, v6);
  *a2 = v5;
  return 1;
}

unint64_t *_xzm_xzone_tiny_chunk_unlock(unint64_t *result, uint64_t a2)
{
  unint64_t v2;

  do
    v2 = __ldaxr(result);
  while (v2 == a2 && __stlxr(a2 & 0xFFFFFFFFBFFFFFFFLL, result));
  if (v2 != a2)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"success\" failed (/Library/Caches/com.apple.xbs/Sources/"
                           "libmalloc_driverkit/src/xzone/xzone_malloc.c:2724)";
    __break(1u);
    JUMPOUT(0x5CEE4);
  }
  if ((malloc_tracing_enabled & 1) != 0)
    return (unint64_t *)kdebug_trace(855779328, result, a2, a2 & 0xFFFFFFFFBFFFFFFFLL);
  return result;
}

BOOL XZM_FAST_ALIGNED(unint64_t a1, unint64_t a2, unsigned int a3)
{
  if (a1 * a3 < a3 != (a1 % a2 == 0))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"aligned == ((offs % size) == 0)\" failed (/Library/Cache"
                           "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:142)";
    __break(1u);
    JUMPOUT(0x5CFA4);
  }
  return a1 * a3 < a3;
}

uint64_t _xzm_xzone_tiny_chunk_block_is_free_slow(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v5;
  char v6;
  BOOL v7;
  BOOL v8;
  char v9;
  unint64_t i;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  int64_t v34;
  unint64_t *v35;
  unint64_t v36;

  v19 = a1;
  v18 = a2;
  v17 = a3;
  v16 = 0;
  v20 = a1 + 280;
  os_unfair_lock_lock_with_options(a1 + 280, 327680);
  v15 = 0;
  if ((_xzm_xzone_tiny_chunk_lock(v18, &v15) & 1) != 0)
  {
    v14 = *(_QWORD *)(v19 + 216) + 88 * *((unsigned __int8 *)v18 + 33);
    v24 = v19;
    v23 = v18;
    v22 = 0;
    v26 = v19;
    v25 = v18;
    v29 = v19;
    v28 = v18;
    v27 = (unint64_t)v18 & 0xFFFFFFFFFFFFC000;
    v9 = 1;
    if (((unint64_t)v18 & 0xFFFFFFFFFFFFC000) != 0)
    {
      v8 = 0;
      if ((unint64_t)v28 >= v27 + 2136)
        v8 = (unint64_t)v28 < v27 + 48 * *(unsigned int *)(v27 + 16) + 2136;
      v9 = v8;
    }
    if ((v9 & 1) == 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0x5D228);
    }
    v31 = v27;
    v30 = v25;
    v36 = v27;
    v35 = v25;
    if ((unint64_t)v25 < v27 + 2136)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0x5D28CLL);
    }
    v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v35 - v36 - 2136) >> 4);
    if (v34 >= *(unsigned int *)(v36 + 16))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0x5D2F4);
    }
    v33 = v27;
    v32 = v34;
    v13 = *(_QWORD *)(v27 + 80) + ((unint64_t)v34 << 14);
    v12 = *(_QWORD *)(v14 + 48) >> 4;
    v3 = v17 - v13 + 15;
    if ((uint64_t)(v17 - v13) >= 0)
      v3 = v17 - v13;
    v11 = v15 & 0x7FF;
    for (i = 0; ; ++i)
    {
      v7 = 0;
      if (v11 != 2044)
      {
        v7 = 0;
        if (v11 != 2045)
        {
          v7 = 0;
          if (!(v11 % v12))
          {
            v7 = 0;
            if (v11 <= (*(_DWORD *)(v14 + 68) - 1) * v12)
              v7 = i < 0x400;
          }
        }
      }
      if (!v7)
        break;
      if (v11 == v3 >> 4)
      {
        v16 = 1;
        goto LABEL_32;
      }
      v11 = *(_QWORD *)(v13 + 16 * v11 + 8) & 0x7FFLL;
    }
    if (i != ((v15 >> 11) & 0x7FF) || (v6 = 1, v11 != 2045))
    {
      v5 = 0;
      if (i < ((v15 >> 11) & 0x7FF))
        v5 = v11 == 2044;
      v6 = v5;
    }
    if ((v6 & 1) == 0)
    {
      qword_A4008 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: corrupt tiny freelist";
      qword_A4038 = i;
      __break(1u);
      JUMPOUT(0x5D544);
    }
LABEL_32:
    v15 |= 0x40000000uLL;
    _xzm_xzone_tiny_chunk_unlock(v18, v15);
  }
  else
  {
    v16 = 1;
  }
  v21 = v19 + 280;
  os_unfair_lock_unlock((os_unfair_lock_t)(v19 + 280));
  return v16 & 1;
}

uint64_t xzm_malloc_zone_size(uint64_t a1, unint64_t a2)
{
  BOOL v3;
  BOOL v4;
  char v5;
  unint64_t v6;
  int v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  BOOL v37;
  char v38;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  BOOL v73;
  int64_t v74;
  unint64_t v75;
  unint64_t v76;
  int64_t v77;
  int64_t v78;
  unint64_t v79;
  unint64_t v80;
  int64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  unint64_t v85;
  unsigned int v86;
  unint64_t v87;
  int v88;
  unint64_t v89;
  unsigned int v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char is_free_slow;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t *v109;
  uint64_t v110;
  char v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unsigned __int8 v124;
  char v125;
  int v126;
  unint64_t *v127;

  v16 = a1;
  v15 = a2;
  v14 = 0;
  v13 = 0;
  v12 = 0;
  v33 = a1;
  v32 = a2;
  v31 = 0;
  v30 = &v13;
  v29 = &v12;
  v28 = 0;
  v35 = a1;
  if (*(_QWORD *)(a1 + 232))
    v10 = *(_QWORD *)(a1 + 232);
  else
    v10 = v35;
  v28 = v10;
  v27 = 0;
  v57 = v10;
  v56 = v32;
  v55 = 0;
  v115 = v32;
  v114 = v10;
  v113 = 0;
  v112 = 0;
  v121 = v32;
  v120 = &v113;
  v119 = v32;
  if (v32 >> 36)
  {
    *v120 = 0;
    v122 = 0x4000;
  }
  else
  {
    v118 = v119 >> 22;
    *v120 = 0;
    if (v118 >= 0x4000)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x5D700);
    }
    v122 = v118;
  }
  v112 = v122;
  if (v122 >= 0x4000)
    v116 = 0;
  else
    v116 = *(_QWORD *)(v114 + 408) + 4 * v112;
  v55 = (unsigned int *)v116;
  if (v116)
  {
    v117 = *v55;
    v58 = (unint64_t)v117 << 14;
  }
  else
  {
    v58 = 0;
  }
  v27 = v58;
  if (!v58)
  {
    v34 = 0;
    goto LABEL_107;
  }
  v26 = 0;
  v62 = v27;
  v61 = v32;
  v60 = 0;
  v66 = v27;
  v65 = v32;
  v64 = 0;
  v76 = v27;
  v75 = v32;
  v74 = 0;
  v80 = v27;
  v79 = v32;
  v78 = 0;
  v83 = v27;
  v85 = v27;
  v84 = 0;
  v78 = v32 - *(_QWORD *)(v27 + 80);
  v77 = 0;
  v93 = v27;
  v92 = 0;
  v94 = v27;
  v92 = *(_DWORD *)(v27 + 12);
  if ((unint64_t)v92 << 14)
  {
    v91 = v80;
    v90 = 0;
    v95 = v80;
    v90 = *(_DWORD *)(v80 + 12);
    v89 = v80;
    v88 = 0;
    v96 = v80;
    v88 = *(_DWORD *)(v80 + 12);
    v9 = ((unint64_t)v90 << 14) - ((unint64_t)v88 << 14) + 0x400000;
  }
  else
  {
    v87 = v80;
    v86 = 0;
    v97 = v80;
    v86 = *(_DWORD *)(v80 + 12);
    v9 = (unint64_t)v86 << 14;
  }
  v77 = v9;
  v8 = 0;
  if ((v78 & 0x8000000000000000) == 0)
    v8 = v78 < v77;
  if (!v8)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:438)";
    __break(1u);
    JUMPOUT(0x5D968);
  }
  v74 = v78;
  v82 = v76;
  v81 = v78;
  v64 = (unint64_t)v78 >> 14;
  if (v64 >= *(_DWORD *)(v66 + 16))
    v67 = 0;
  else
    v67 = v66 + 48 * v64 + 2136;
  v60 = v67;
  if (!v67)
  {
    v63 = 0;
    goto LABEL_55;
  }
  v59 = 0;
  v69 = v60;
  if ((*(_BYTE *)(v60 + 32) & 0xF) == 4)
  {
    v68 = 0;
    v68 = v69 - *(unsigned int *)(v69 + 36);
    if (v68 < (v69 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:584)";
      __break(1u);
      JUMPOUT(0x5DA88);
    }
    v72 = v68;
    v71 = v69;
    v7 = *(_BYTE *)(v68 + 32) & 0xF;
    if ((v7 - 1) < 2)
    {
      v73 = v72 == v71;
    }
    else if (v7 == 3 || (v7 - 5) < 4)
    {
      if (v71 < v72)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:562)";
        __break(1u);
        JUMPOUT(0x5DB2CLL);
      }
      v73 = v71 < v72 + 48 * *(unsigned int *)(v72 + 40);
    }
    else
    {
      v73 = 0;
    }
    if (v73)
      v70 = v68;
    else
      v70 = v69;
  }
  else
  {
    v70 = v69;
  }
  v59 = v70;
  v124 = *(_BYTE *)(v70 + 32) & 0xF;
  if (v124 >= 2u)
  {
    if (v124 == 2)
    {
LABEL_50:
      v125 = 1;
      goto LABEL_51;
    }
    if (v124 - 3 >= 2)
    {
      if (v124 - 5 >= 3)
      {
        v123 = v124;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v124;
        __break(1u);
        JUMPOUT(0x5DC50);
      }
      goto LABEL_50;
    }
  }
  v125 = 0;
LABEL_51:
  if (v125 == 1)
    v6 = v59;
  else
    v6 = 0;
  v63 = v6;
LABEL_55:
  v26 = v63;
  if (!v63)
  {
    v34 = 0;
    goto LABEL_107;
  }
  if (*(unsigned __int16 *)(v26 + 34) != *(unsigned __int16 *)(v33 + 208))
  {
    v34 = 0;
    goto LABEL_107;
  }
  v25 = v32;
  v24 = 0;
  v42 = v33;
  v41 = v26;
  v40 = 0;
  v44 = v33;
  v43 = v26;
  v47 = v33;
  v46 = v26;
  v45 = v26 & 0xFFFFFFFFFFFFC000;
  v5 = 1;
  if ((v26 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v4 = 0;
    if (v46 >= v45 + 2136)
      v4 = v46 < v45 + 48 * *(unsigned int *)(v45 + 16) + 2136;
    v5 = v4;
  }
  if ((v5 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x5DEA0);
  }
  v49 = v45;
  v48 = v43;
  v54 = v45;
  v53 = v43;
  if (v43 < v45 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x5DF04);
  }
  v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - v54 - 2136) >> 4);
  if (v52 >= *(unsigned int *)(v54 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x5DF6CLL);
  }
  v51 = v45;
  v50 = v52;
  v24 = *(_QWORD *)(v45 + 80) + ((unint64_t)v52 << 14);
  v23 = v25 - v24;
  v22 = 0;
  v22 = *(_BYTE *)(v26 + 32) & 0xF;
  v21 = 0;
  v20 = 0;
  v38 = v22;
  if (v22 == 2 || v22 == 5)
  {
    v21 = *(_QWORD *)(v33 + 216) + 88 * *(unsigned __int8 *)(v26 + 33);
    v20 = *(_QWORD *)(v21 + 48);
    if (!XZM_FAST_ALIGNED(v23, v20, *(_DWORD *)(v21 + 64)))
    {
      v34 = 0;
      goto LABEL_107;
    }
  }
  else
  {
    v20 = (unint64_t)*(unsigned int *)(v26 + 40) << 14;
    v19 = v23 % v20;
    if (v23 % v20)
    {
      v34 = 0;
      goto LABEL_107;
    }
  }
  v18 = v23 / v20;
  v36 = *(_BYTE *)(v26 + 32) & 0xF;
  v37 = v36 == 2 || v36 == 5;
  v3 = 1;
  if (v37)
    v3 = v18 < *(unsigned int *)(v21 + 68);
  if (!v3)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_kind) "
                           "|| block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Sources/libmal"
                           "loc_driverkit/src/xzone/xzone_malloc.c:2924)";
    __break(1u);
    JUMPOUT(0x5E1A4);
  }
  v110 = v33;
  v109 = (unint64_t *)v26;
  v108 = v22;
  v107 = v23;
  v106 = v20;
  v105 = v25;
  if ((*(_BYTE *)(v26 + 32) & 0xF) != v22)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library/Cac"
                           "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
    __break(1u);
    JUMPOUT(0x5E214);
  }
  if (v108 == 2)
  {
    v104 = 0;
    v103 = 0;
    v102 = *(_QWORD *)v105;
    v103 = v102;
    v101 = v102;
    v104 = v102;
    v100 = 0;
    v100 = *(_QWORD *)(v110 + 272) ^ v105;
    if (v102 == v100)
    {
      is_free_slow = 0;
      is_free_slow = _xzm_xzone_tiny_chunk_block_is_free_slow(v110, v109, v105);
      v111 = is_free_slow & 1;
    }
    else
    {
      v111 = 0;
    }
  }
  else if (v108 == 5)
  {
    v98 = v107 / v106;
    v127 = v109;
    v126 = v107 / v106;
    if ((v109[4] & 0xF) != 5)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CHUN"
                             "K\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xz"
                             "one_inline_internal.h:921)";
      __break(1u);
      JUMPOUT(0x5E334);
    }
    v111 = (*(_DWORD *)v127 >> v126) & 1;
  }
  else
  {
    v111 = 0;
  }
  if (v111 == 1)
  {
    v34 = 0;
  }
  else
  {
    if (v31)
      *v31 = v21;
    if (v30)
      *v30 = v25;
    if (v29)
      *v29 = v20;
    v34 = v26;
  }
LABEL_107:
  v11 = v34;
  if (v14)
    *v14 = v34;
  if (!v11)
    return _xzm_ptr_size_outlined(v16, v15);
  if (v13 == v15)
    return v12;
  return v12 - (v15 - v13);
}

uint64_t xzm_malloc_zone_malloc(uint64_t a1, unint64_t a2)
{
  return xzm_malloc_zone_malloc_type_malloc(a1, a2, *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904));
}

uint64_t xzm_malloc_zone_calloc(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return xzm_malloc_zone_malloc_type_calloc(a1, a2, a3, *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904));
}

uint64_t xzm_malloc_zone_valloc(uint64_t a1, unint64_t a2)
{
  return _xzm_memalign(a1, vm_page_size, a2, *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904), 0);
}

void xzm_malloc_zone_free(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _xzm_free(a1, a2, 0, a4, a5, a6, a7, a8);
}

uint64_t xzm_malloc_zone_realloc(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return xzm_malloc_zone_malloc_type_realloc(a1, a2, a3, *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904), a5, a6, a7, a8);
}

void xzm_malloc_zone_destroy(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v12;
  unint64_t v13;
  _BOOL4 v14;
  int v15;
  int v16;
  unint64_t v17;
  _BOOL4 v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int ii;
  uint64_t v32;
  unint64_t v33;
  unint64_t n;
  uint64_t v35;
  uint64_t m;
  uint64_t *v37;
  unsigned __int8 k;
  uint64_t v39;
  uint64_t j;
  uint64_t v41;
  int i;
  uint64_t v43;
  os_unfair_lock_s *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  os_unfair_lock_s *v48;
  uint64_t v49;
  os_unfair_lock_s *v50;
  os_unfair_lock_t v51;
  os_unfair_lock_t lock;
  uint64_t v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  uint64_t v56;
  os_unfair_lock_s *v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  os_unfair_lock_s *v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  os_unfair_lock_s *v65;
  unint64_t v66;
  os_unfair_lock_s *v67;
  unint64_t v68;
  unint64_t v69;
  os_unfair_lock_s *v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  unint64_t v74;
  int64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  os_unfair_lock_s *v80;
  unint64_t v81;
  unint64_t v82;
  os_unfair_lock_s *v83;
  unint64_t v84;
  unint64_t v85;
  os_unfair_lock_s *v86;
  unint64_t v87;
  unint64_t v88;
  os_unfair_lock_s *v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  int64_t v95;
  unint64_t v96;
  unint64_t v97;

  v44 = (os_unfair_lock_s *)a1;
  v45 = a1;
  if (*(_QWORD *)(a1 + 232))
  {
    v50 = v44 + 70;
    os_unfair_lock_lock_with_options(&v44[70], 327680);
    v43 = 0;
    for (i = 1; i < BYTE2(v44[52]._os_unfair_lock_opaque); ++i)
    {
      v41 = 0;
      v41 = *(_QWORD *)&v44[54]._os_unfair_lock_opaque + 88 * i;
      if (*(_QWORD *)(v41 + 48) > 0x1000uLL)
      {
        j = 0;
        v39 = 0;
        for (j = *(_QWORD *)v41; ; j = v39)
        {
          v23 = 0;
          if (j)
          {
            v39 = *(_QWORD *)(j + 16);
            v23 = 1;
          }
          if ((v23 & 1) == 0)
            break;
          if ((*(_BYTE *)(j + 32) & 0x40) != 0)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!chunk->xzc_bits.xzcb_preallocated\" failed (/Li"
                                   "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4000)";
            __break(1u);
            JUMPOUT(0x5E7C0);
          }
          if (*(_QWORD *)(j + 16))
            *(_QWORD *)(*(_QWORD *)(j + 16) + 24) = *(_QWORD *)(j + 24);
          **(_QWORD **)(j + 24) = *(_QWORD *)(j + 16);
          *(_QWORD *)(j + 16) = -1;
          *(_QWORD *)(j + 24) = -1;
          v1 = v43;
          *(_QWORD *)(j + 16) = v43;
          if (v1)
            *(_QWORD *)(v43 + 24) = j + 16;
          v43 = j;
          *(_QWORD *)(j + 24) = &v43;
        }
        for (j = *(_QWORD *)(v41 + 8); ; j = v39)
        {
          v22 = 0;
          if (j)
          {
            v39 = *(_QWORD *)(j + 16);
            v22 = 1;
          }
          if ((v22 & 1) == 0)
            break;
          if ((*(_BYTE *)(j + 32) & 0x40) != 0)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!chunk->xzc_bits.xzcb_preallocated\" failed (/Li"
                                   "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4006)";
            __break(1u);
            JUMPOUT(0x5E8F4);
          }
          if (*(_QWORD *)(j + 16))
            *(_QWORD *)(*(_QWORD *)(j + 16) + 24) = *(_QWORD *)(j + 24);
          **(_QWORD **)(j + 24) = *(_QWORD *)(j + 16);
          *(_QWORD *)(j + 16) = -1;
          *(_QWORD *)(j + 24) = -1;
          v2 = v43;
          *(_QWORD *)(j + 16) = v43;
          if (v2)
            *(_QWORD *)(v43 + 24) = j + 16;
          v43 = j;
          *(_QWORD *)(j + 24) = &v43;
        }
        for (k = 0; k < (int)HIBYTE(v44[52]._os_unfair_lock_opaque); ++k)
        {
          v37 = 0;
          v57 = v44;
          v56 = v41;
          v55 = k;
          v54 = 0;
          v54 = *(_BYTE *)(v41 + 72);
          v53 = 0;
          v53 = k * BYTE2(v44[52]._os_unfair_lock_opaque);
          v37 = (uint64_t *)(*(_QWORD *)&v44[56]._os_unfair_lock_opaque + 32 * (v53 + v54));
          j = *v37;
          if (j)
          {
            if ((*(_BYTE *)(j + 32) & 0x40) != 0)
            {
              qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!chunk->xzc_bits.xzcb_preallocated\" failed (/"
                                     "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4016)";
              __break(1u);
              JUMPOUT(0x5EA8CLL);
            }
            if (*(unsigned __int8 *)(j + 12) != k + 1)
            {
              qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_alloc_idx == j+1\" failed (/Library"
                                     "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4017)";
              __break(1u);
              JUMPOUT(0x5EACCLL);
            }
            if ((*(_BYTE *)(j + 32) & 0x20) != 0)
            {
              qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!chunk->xzc_bits.xzcb_enqueued\" failed (/Libr"
                                     "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4018)";
              __break(1u);
              JUMPOUT(0x5EB00);
            }
            *v37 = 0;
            v3 = v43;
            *(_QWORD *)(j + 16) = v43;
            if (v3)
              *(_QWORD *)(v43 + 24) = j + 16;
            v43 = j;
            *(_QWORD *)(j + 24) = &v43;
          }
        }
        for (j = *(_QWORD *)(v41 + 16); ; j = v39)
        {
          v21 = 0;
          if (j)
          {
            v39 = *(_QWORD *)(j + 16);
            v21 = 1;
          }
          if ((v21 & 1) == 0)
            break;
          if (*(_QWORD *)(j + 16))
            *(_QWORD *)(*(_QWORD *)(j + 16) + 24) = *(_QWORD *)(j + 24);
          **(_QWORD **)(j + 24) = *(_QWORD *)(j + 16);
          *(_QWORD *)(j + 16) = -1;
          *(_QWORD *)(j + 24) = -1;
          _xzm_xzone_fresh_chunk_init(v41, j, 5);
          v4 = v43;
          *(_QWORD *)(j + 16) = v43;
          if (v4)
            *(_QWORD *)(v43 + 24) = j + 16;
          v43 = j;
          *(_QWORD *)(j + 24) = &v43;
        }
      }
      else
      {
        for (m = 0; ; *(_QWORD *)(m + 24) = &v43)
        {
          m = _xzm_chunk_list_pop(v44, (unint64_t *)(v41 + 16), 1);
          if (!m)
            break;
          if ((*(_BYTE *)(m + 32) & 0x40) != 0)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!chunk->xzc_bits.xzcb_preallocated\" failed (/Li"
                                   "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4039)";
            __break(1u);
            JUMPOUT(0x5ECE0);
          }
          *(_QWORD *)m &= ~0x10000000uLL;
          *(_QWORD *)m &= ~0x20000000uLL;
          *(_QWORD *)m &= 0xFFFFFFFFF03FFFFFLL;
          v5 = v43;
          *(_QWORD *)(m + 16) = v43;
          if (v5)
            *(_QWORD *)(v43 + 24) = m + 16;
          v43 = m;
        }
        while (1)
        {
          m = _xzm_chunk_list_pop(v44, (unint64_t *)(v41 + 24), 0);
          if (!m)
            break;
          _xzm_xzone_fresh_chunk_init(v41, m, 2);
          if ((*(_DWORD *)m & 0x7FF) == 0x7FE)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_atomic_meta.xca_alloc_head != XZM_FRE"
                                   "E_MADVISED\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xz"
                                   "one/xzone_malloc.c:4052)";
            __break(1u);
            JUMPOUT(0x5EDC8);
          }
          v6 = v43;
          *(_QWORD *)(m + 16) = v43;
          if (v6)
            *(_QWORD *)(v43 + 24) = m + 16;
          v43 = m;
          *(_QWORD *)(m + 24) = &v43;
        }
      }
    }
    lock = v44 + 70;
    os_unfair_lock_unlock(v44 + 70);
    v35 = 0;
    v35 = *(_QWORD *)&v44[58]._os_unfair_lock_opaque;
    v33 = 0;
    for (n = v43; ; n = v33)
    {
      v20 = 0;
      if (n)
      {
        v33 = *(_QWORD *)(n + 16);
        v20 = 1;
      }
      if ((v20 & 1) == 0)
        break;
      v32 = 0;
      v32 = *(_QWORD *)&v44[54]._os_unfair_lock_opaque + 88 * *(unsigned __int8 *)(n + 33);
      if ((*(_BYTE *)(v32 + 78) & 1) == 0 && (*(_BYTE *)(v35 + 328) & 4) != 0)
      {
        for (ii = 0; ; ++ii)
        {
          v48 = v44;
          v47 = n;
          v46 = n & 0xFFFFFFFFFFFFC000;
          v19 = 1;
          if ((n & 0xFFFFFFFFFFFFC000) != 0)
          {
            v18 = 0;
            if (v47 >= v46 + 2136)
              v18 = v47 < v46 + 48 * *(unsigned int *)(v46 + 16) + 2136;
            v19 = v18;
          }
          if ((v19 & 1) == 0)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && sli"
                                   "ce < (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Cache"
                                   "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
            __break(1u);
            JUMPOUT(0x5EFD4);
          }
          v92 = v46;
          v91 = n;
          v90 = 0;
          v94 = v46;
          v93 = n;
          v17 = v46 + 88;
          v97 = v46;
          v96 = n;
          if (n < v46 + 2136)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slic"
                                   "es\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                                   "zone/xzone_inline_internal.h:278)";
            __break(1u);
            JUMPOUT(0x5F050);
          }
          v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - v97 - 2136) >> 4);
          if (v95 >= *(unsigned int *)(v97 + 16))
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_coun"
                                   "t\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xz"
                                   "one/xzone_inline_internal.h:280)";
            __break(1u);
            JUMPOUT(0x5F0B8);
          }
          v90 = (_QWORD *)(v17 + 8 * v95);
          if (*v90 == -1)
            break;
          if ((*(_BYTE *)(n + 32) & 0xF) != 2)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"span->xzc_bits.xzcb_kind == XZM_SLICE_KIND_TINY_"
                                   "CHUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/x"
                                   "zone_malloc.c:4076)";
            __break(1u);
            JUMPOUT(0x5F118);
          }
          if (xzm_chunk_mark_used((uint64_t)v44, n))
          {
            *(_QWORD *)n = *(_QWORD *)n & 0xFFFFFFFFFFFFF800 | 0x7FD;
            break;
          }
          xzm_reclaim_force_sync(*(_QWORD *)(v35 + 464));
          if (ii >= 10)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"retries < 10\" failed (/Library/Caches/com.apple"
                                   ".xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4085)";
            __break(1u);
            JUMPOUT(0x5F184);
          }
        }
      }
      if ((*(_BYTE *)(n + 32) & 0xF) == 2)
      {
        if ((*(_DWORD *)n & 0x7FF) != 0x7FE)
        {
          v30 = 0;
          v29 = 0;
          v61 = v44;
          v60 = n;
          v59 = &v30;
          if (&v7 == (uint64_t *)-136)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.app"
                                   "le.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
            __break(1u);
            JUMPOUT(0x5F220);
          }
          v58 = 0;
          v65 = v61;
          v64 = v60;
          v63 = v59;
          if (v59)
          {
            v16 = *(_BYTE *)(v64 + 32) & 0xF;
            if (v16 == 2)
            {
              *v63 = 0x4000;
            }
            else if (v16 == 5)
            {
              *v63 = 0x10000;
            }
            else
            {
              if ((v16 - 6) >= 2)
              {
                v62 = 0;
                v62 = *(_BYTE *)(v64 + 32) & 0xF;
                qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
                qword_A4038 = v62;
                __break(1u);
                JUMPOUT(0x5F30CLL);
              }
              *v63 = (unint64_t)*(unsigned int *)(v64 + 40) << 14;
            }
          }
          v67 = v65;
          v66 = v64;
          v70 = v65;
          v69 = v64;
          v68 = v64 & 0xFFFFFFFFFFFFC000;
          v15 = 1;
          if ((v64 & 0xFFFFFFFFFFFFC000) != 0)
          {
            v14 = 0;
            if (v69 >= v68 + 2136)
              v14 = v69 < v68 + 48 * *(unsigned int *)(v68 + 16) + 2136;
            v15 = v14;
          }
          if ((v15 & 1) == 0)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && sli"
                                   "ce < (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Cache"
                                   "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
            __break(1u);
            JUMPOUT(0x5F3ECLL);
          }
          v72 = v68;
          v71 = v66;
          v13 = v68;
          v77 = v68;
          v76 = v66;
          if (v66 < v68 + 2136)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slic"
                                   "es\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                                   "zone/xzone_inline_internal.h:278)";
            __break(1u);
            JUMPOUT(0x5F450);
          }
          v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - v77 - 2136) >> 4);
          if (v75 >= *(unsigned int *)(v77 + 16))
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_coun"
                                   "t\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xz"
                                   "one/xzone_inline_internal.h:280)";
            __break(1u);
            JUMPOUT(0x5F4B8);
          }
          v74 = v13;
          v73 = v75;
          v58 = *(_QWORD *)(v13 + 80) + ((unint64_t)v75 << 14);
          v29 = v58;
          if (v30 != 0x4000)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"size == XZM_TINY_CHUNK_SIZE\" failed (/Library/C"
                                   "aches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4096)";
            __break(1u);
            JUMPOUT(0x5F518);
          }
          if (*(_QWORD *)(v32 + 48) <= 0x400uLL)
            _platform_bzero(v29, v30);
          v28 = 0;
          v86 = v44;
          v85 = n;
          v84 = 0;
          v89 = v44;
          v88 = n;
          v87 = n & 0xFFFFFFFFFFFFC000;
          v12 = 1;
          if ((n & 0xFFFFFFFFFFFFC000) != 0)
          {
            v11 = 0;
            if (v88 >= v87 + 2136)
              v11 = v88 < v87 + 48 * *(unsigned int *)(v87 + 16) + 2136;
            v12 = v11;
          }
          if ((v12 & 1) == 0)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && sli"
                                   "ce < (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Cache"
                                   "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
            __break(1u);
            JUMPOUT(0x5F620);
          }
          v84 = v87;
          v28 = *(_QWORD *)v87;
          xzm_segment_group_segment_madvise_chunk(v28, n);
          *(_QWORD *)n &= 0xFFFFFFFFFFC007FFLL;
          *(_QWORD *)n = *(_QWORD *)n & 0xFFFFFFFFFFFFF800 | 0x7FE;
        }
        *(_BYTE *)(n + 32) &= ~0x20u;
        _xzm_xzone_chunk_free((uint64_t)v44, *(_QWORD *)&v44[54]._os_unfair_lock_opaque + 88 * *(unsigned __int8 *)(n + 33), n);
      }
      else
      {
        if ((*(_BYTE *)(n + 32) & 0xF) != 5)
        {
          v26 = 0;
          v26 = *(_BYTE *)(n + 32) & 0xF;
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: Unexpected chunk kind";
          qword_A4038 = v26;
          __break(1u);
          JUMPOUT(0x5F848);
        }
        v27 = 0;
        v80 = v44;
        v79 = n;
        v78 = 0;
        v83 = v44;
        v82 = n;
        v81 = n & 0xFFFFFFFFFFFFC000;
        v10 = 1;
        if ((n & 0xFFFFFFFFFFFFC000) != 0)
        {
          v9 = 0;
          if (v82 >= v81 + 2136)
            v9 = v82 < v81 + 48 * *(unsigned int *)(v81 + 16) + 2136;
          v10 = v9;
        }
        if ((v10 & 1) == 0)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice"
                                 " < (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/co"
                                 "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
          __break(1u);
          JUMPOUT(0x5F7A4);
        }
        v78 = v81;
        v27 = *(_QWORD *)v81;
        xzm_segment_group_segment_madvise_chunk(v27, n);
        *(_BYTE *)(n + 32) &= ~0x20u;
        _xzm_xzone_chunk_free((uint64_t)v44, *(_QWORD *)&v44[54]._os_unfair_lock_opaque + 88 * *(unsigned __int8 *)(n + 33), n);
      }
    }
    for (n = *(_QWORD *)&v44[72]._os_unfair_lock_opaque; ; n = v33)
    {
      v8 = 0;
      if (n)
      {
        v33 = *(_QWORD *)(n + 16);
        v8 = 1;
      }
      if ((v8 & 1) == 0)
        break;
      _xzm_free_large_huge((uint64_t)v44, n);
    }
    v25 = 0;
    v25 = *(_QWORD *)(v35 + 400) + 128;
    v24 = 0;
    v24 = xzm_metapool_alloc(v25);
    *(_WORD *)v24 = v44[52]._os_unfair_lock_opaque;
    v49 = v35 + 448;
    os_unfair_lock_lock_with_options(v35 + 448, 327680);
    *(_QWORD *)(v24 + 8) = *(_QWORD *)(v35 + 440);
    *(_QWORD *)(v35 + 440) = v24;
    v51 = (os_unfair_lock_t)(v35 + 448);
    os_unfair_lock_unlock((os_unfair_lock_t)(v35 + 448));
    mvm_deallocate_plat((mach_vm_address_t)v44, *(_QWORD *)&v44[50]._os_unfair_lock_opaque, 0);
  }
}

uint64_t xzm_malloc_zone_memalign(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return xzm_malloc_zone_malloc_type_memalign(a1, a2, a3, *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904));
}

void xzm_malloc_zone_free_definite_size(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _xzm_free(a1, a2, 0, a4, a5, a6, a7, a8);
}

BOOL xzm_malloc_zone_claimed_address(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  if (mfm_claimed_address(a2))
  {
    return 1;
  }
  else
  {
    if (*(_QWORD *)(a1 + 232))
      v3 = *(_QWORD *)(a1 + 232);
    else
      v3 = a1;
    v10 = a2;
    v9 = v3;
    v8 = 0;
    v16 = a2;
    v15 = &v8;
    v14 = a2;
    if (a2 >> 36)
    {
      *v15 = 0;
      v17 = 0x4000;
    }
    else
    {
      v13 = v14 >> 22;
      *v15 = 0;
      if (v13 >= 0x4000)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Libr"
                               "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
        __break(1u);
        JUMPOUT(0x5FB54);
      }
      v17 = v13;
    }
    if (v17 < 0x4000)
      v11 = (unsigned int *)(*(_QWORD *)(v9 + 408) + 4 * v17);
    else
      v11 = 0;
    if (v11)
    {
      v12 = *v11;
      v7 = (unint64_t)v12 << 14;
    }
    else
    {
      v7 = 0;
    }
    return v7 != 0;
  }
}

void xzm_malloc_zone_try_free_default(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _xzm_free(a1, a2, 1, a4, a5, a6, a7, a8);
}

uint64_t xzm_malloc_zone_malloc_with_options(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  return xzm_malloc_zone_malloc_type_malloc_with_options(a1, a2, a3, a4, *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904));
}

uint64_t xzm_malloc_zone_malloc_type_malloc(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  char v9;
  unsigned __int8 v10;

  if (a2 <= 0x8000)
  {
    if ((*(_BYTE *)(a1 + 296) & 0x80) != 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed (/L"
                             "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
      __break(1u);
      JUMPOUT(0x5FD54);
    }
    if (*(_QWORD *)(a1 + 232))
      v5 = *(_QWORD *)(a1 + 232);
    else
      v5 = a1;
    if (a2)
    {
      if (a2 > 0x80)
      {
        v9 = 63 - __clz(a2 - 1);
        v10 = (((a2 - 1) >> (v9 - 2)) & 3 | (4 * v9)) - 20;
      }
      else
      {
        if ((a2 & 0xF) != 0)
          v4 = (a2 >> 4) + 1;
        else
          v4 = a2 >> 4;
        v10 = v4 - 1;
      }
    }
    else
    {
      v10 = 0;
    }
    v8 = *(_BYTE *)(*(_QWORD *)(v5 + 360) + v10);
    if (HIWORD(a3) == 256)
    {
      v7 = 0;
    }
    else
    {
      if (((WORD2(a3) >> 10) & 3) != 1)
      {
        if ((v8 - 2) >= 5u)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" fail"
                                 "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
          __break(1u);
          JUMPOUT(0x60008);
        }
        __asm { BR              X8 }
      }
      v7 = 1;
    }
    if (v7 >= (int)v8)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/co"
                             "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
      __break(1u);
      JUMPOUT(0x601A0);
    }
    v6 = (uint64_t)_xzm_xzone_malloc(a1, a2, *(_BYTE *)(*(_QWORD *)(v5 + 368) + v10) + v7, 0);
  }
  else
  {
    v6 = _xzm_malloc_large_huge(a1, a2, 0, a3, 0);
  }
  if (!v6)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                           "alloc_driverkit/src/xzone/xzone_malloc.c:2272)";
    __break(1u);
    JUMPOUT(0x601FCLL);
  }
  return v6;
}

uint64_t xzm_malloc_zone_malloc_type_calloc(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v20;
  BOOL v21;
  unsigned __int8 v22;
  char v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unsigned __int8 v38;
  __int16 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  BOOL v47;

  v11 = a1;
  v10 = a2;
  v9 = a3;
  v8 = a4;
  v7 = 0;
  v45 = a2;
  v44 = a3;
  v43 = 0;
  v42 = &v7;
  v41 = a3;
  if (a2 == 1 || (v41 = v45 * v44, !(v47 = !is_mul_ok(v45, v44))) && v41 <= malloc_absolute_max_size)
  {
    *v42 = v41;
    v46 = 0;
  }
  else
  {
    malloc_set_errno_fast(1, 12);
    v46 = -1;
  }
  if (v46)
  {
    malloc_set_errno_fast(1, 12);
    return 0;
  }
  else
  {
    v18 = v8;
    v17 = v11;
    v16 = v7;
    v15 = 1;
    v14 = 0;
    if (v7 <= 0x8000)
    {
      if ((*(_BYTE *)(v17 + 296) & 0x80) != 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed ("
                               "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
        __break(1u);
        JUMPOUT(0x60470);
      }
      v13 = 0;
      v29 = v18;
      v28 = v17;
      v27 = v16;
      v26 = 0;
      v35 = v17;
      if (*(_QWORD *)(v17 + 232))
        v6 = *(_QWORD *)(v17 + 232);
      else
        v6 = v35;
      v26 = v6;
      v25 = 0;
      v37 = v27;
      if (v27)
      {
        if (v37 > 0x80)
        {
          if (v37 > 0x8000)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"size <= XZM_SMALL_BLOCK_SIZE_MAX\" failed (/Libr"
                                   "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:36)";
            __break(1u);
            JUMPOUT(0x60594);
          }
          v36 = 63 - __clz(--v37);
          v38 = ((v37 >> (v36 - 2)) & 3 | (4 * v36)) - 20;
        }
        else
        {
          if ((v37 & 0xF) != 0)
            v5 = (v37 >> 4) + 1;
          else
            v5 = v37 >> 4;
          v38 = v5 - 1;
        }
      }
      else
      {
        v38 = 0;
      }
      v25 = v38;
      v24 = 0;
      v24 = *(_BYTE *)(*(_QWORD *)(v26 + 360) + v38);
      v23 = 0;
      v23 = *(_BYTE *)(*(_QWORD *)(v26 + 368) + v38);
      v22 = 0;
      v40 = v29;
      v39 = HIWORD(v29);
      v21 = HIWORD(v29) == 256;
      if (HIWORD(v29) == 256)
      {
        v22 = 0;
      }
      else
      {
        if (((WORD2(v29) >> 10) & 3) != 1)
        {
          v20 = v29 == 0;
          if (!v29)
            LODWORD(v29) = HIDWORD(malloc_entropy[0]);
          v19 = 0;
          v34 = v29;
          v33 = v26 + 312;
          v32 = v24 - 2;
          if ((v24 - 2) >= 5u)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" fa"
                                   "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
            __break(1u);
            JUMPOUT(0x60724);
          }
          v31 = v34;
          v30 = 0;
          __asm { BR              X8 }
        }
        v22 = 1;
      }
      if (v22 >= (int)v24)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/"
                               "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
        __break(1u);
        JUMPOUT(0x608BCLL);
      }
      v13 = v23 + v22;
      v14 = (uint64_t)_xzm_xzone_malloc(v17, v16, v23 + v22, v15);
    }
    else
    {
      v14 = _xzm_malloc_large_huge(v17, v16, 0, v18, v15);
    }
    if (!v14)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                             "bmalloc_driverkit/src/xzone/xzone_malloc.c:2272)";
      __break(1u);
      JUMPOUT(0x60918);
    }
    if ((v15 & 1) != 0 && !_xzm_mem_is_zero(v14, v16))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_mem_is_zero(ptr, size)\" failed (/Library/Caches/"
                             "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2274)";
      __break(1u);
      JUMPOUT(0x6095CLL);
    }
    return v14;
  }
}

uint64_t xzm_malloc_zone_malloc_type_realloc(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return xzm_realloc(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t xzm_malloc_zone_malloc_type_memalign(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  return _xzm_memalign(a1, a2, a3, a4, 0);
}

uint64_t xzm_malloc_zone_malloc_type_malloc_with_options(uint64_t a1, unint64_t a2, unint64_t a3, char a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  char v14;
  unsigned __int8 v15;

  v8 = (a4 & 1) != 0;
  if (a2)
    return _xzm_memalign(a1, a2, a3, a5, v8);
  if (a3 <= 0x8000)
  {
    if ((*(_BYTE *)(a1 + 296) & 0x80) != 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed (/L"
                             "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
      __break(1u);
      JUMPOUT(0x60B4CLL);
    }
    if (*(_QWORD *)(a1 + 232))
      v7 = *(_QWORD *)(a1 + 232);
    else
      v7 = a1;
    if (a3)
    {
      if (a3 > 0x80)
      {
        v14 = 63 - __clz(a3 - 1);
        v15 = (((a3 - 1) >> (v14 - 2)) & 3 | (4 * v14)) - 20;
      }
      else
      {
        if ((a3 & 0xF) != 0)
          v6 = (a3 >> 4) + 1;
        else
          v6 = a3 >> 4;
        v15 = v6 - 1;
      }
    }
    else
    {
      v15 = 0;
    }
    v13 = *(_BYTE *)(*(_QWORD *)(v7 + 360) + v15);
    if (HIWORD(a5) == 256)
    {
      v12 = 0;
    }
    else
    {
      if (((WORD2(a5) >> 10) & 3) != 1)
      {
        if ((v13 - 2) >= 5u)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" fail"
                                 "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
          __break(1u);
          JUMPOUT(0x60E00);
        }
        __asm { BR              X8 }
      }
      v12 = 1;
    }
    if (v12 >= (int)v13)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/co"
                             "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
      __break(1u);
      JUMPOUT(0x60F98);
    }
    v11 = (uint64_t)_xzm_xzone_malloc(a1, a3, *(_BYTE *)(*(_QWORD *)(v7 + 368) + v15) + v12, v8);
  }
  else
  {
    v11 = _xzm_malloc_large_huge(a1, a3, 0, a5, v8);
  }
  if (!v11)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                           "alloc_driverkit/src/xzone/xzone_malloc.c:2272)";
    __break(1u);
    JUMPOUT(0x60FF4);
  }
  if ((v8 & 1) != 0 && !_xzm_mem_is_zero(v11, a3))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_mem_is_zero(ptr, size)\" failed (/Library/Caches/co"
                           "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2274)";
    __break(1u);
    JUMPOUT(0x61038);
  }
  return v11;
}

_OWORD *xzm_malloc_zone_malloc_slow(uint64_t a1, unint64_t a2)
{
  return xzm_malloc_zone_malloc_type_malloc_slow(a1, a2, *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904));
}

_OWORD *xzm_malloc_zone_calloc_slow(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return xzm_malloc_zone_malloc_type_calloc_slow(a1, a2, a3, *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904));
}

uint64_t xzm_malloc_zone_valloc_slow(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if ((*(_QWORD *)(a1 + 296) & 0x80) != 0 && a2 <= 0x8000)
  {
    if (*(_QWORD *)(a1 + 232))
      v3 = *(_QWORD *)(a1 + 232);
    else
      v3 = a1;
    v4 = xzm_malloc_zone_valloc(v3, a2);
  }
  else
  {
    v4 = xzm_malloc_zone_valloc(a1, a2);
  }
  if (v4 && (*(_QWORD *)(a1 + 296) & 0x20) != 0)
    _platform_memset(v4, 170, a2);
  return v4;
}

void xzm_malloc_zone_free_slow(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  BOOL v9;
  char v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  char v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  BOOL v55;
  char v56;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  int64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  BOOL v100;
  char v101;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  int64_t v115;
  unint64_t v116;
  unint64_t v117;
  unsigned int *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unsigned int *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unsigned int v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  BOOL v140;
  int64_t v141;
  unint64_t v142;
  unint64_t v143;
  int64_t v144;
  int64_t v145;
  unint64_t v146;
  unint64_t v147;
  int64_t v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  unint64_t v152;
  unsigned int v153;
  unint64_t v154;
  int v155;
  unint64_t v156;
  unsigned int v157;
  unint64_t v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unsigned int v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  BOOL v179;
  int64_t v180;
  unint64_t v181;
  unint64_t v182;
  int64_t v183;
  int64_t v184;
  unint64_t v185;
  unint64_t v186;
  int64_t v187;
  unint64_t v188;
  unint64_t v189;
  int v190;
  unint64_t v191;
  unsigned int v192;
  unint64_t v193;
  int v194;
  unint64_t v195;
  unsigned int v196;
  unint64_t v197;
  int v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char is_free_slow;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  char v214;
  unint64_t *v215;
  uint64_t v216;
  char v217;
  unint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  char v228;
  unint64_t *v229;
  uint64_t v230;
  char v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unsigned int v242;
  unsigned int v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t *v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unsigned __int8 v255;
  char v256;
  uint64_t v257;
  unsigned __int8 v258;
  char v259;
  int v260;
  unint64_t *v261;
  int v262;
  unint64_t *v263;

  if (!a2)
    return;
  v79 = a1;
  v78 = a2;
  v77 = 0;
  v76 = 0;
  v75 = 0;
  v74 = 0;
  v96 = a1;
  v95 = (unint64_t)a2;
  v94 = 0;
  v93 = (uint64_t *)&v76;
  v92 = &v75;
  v91 = 0;
  v98 = a1;
  if (*(_QWORD *)(a1 + 232))
    v24 = *(_QWORD *)(a1 + 232);
  else
    v24 = v98;
  v91 = v24;
  v90 = 0;
  v120 = v24;
  v119 = v95;
  v118 = 0;
  v240 = v95;
  v239 = v24;
  v238 = 0;
  v237 = 0;
  v247 = v95;
  v246 = &v238;
  v245 = v95;
  if (v95 >> 36)
  {
    *v246 = 0;
    v248 = 0x4000;
  }
  else
  {
    v244 = v245 >> 22;
    *v246 = 0;
    if (v244 >= 0x4000)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x613C8);
    }
    v248 = v244;
  }
  v237 = v248;
  if (v248 >= 0x4000)
    v241 = 0;
  else
    v241 = *(_QWORD *)(v239 + 408) + 4 * v237;
  v118 = (unsigned int *)v241;
  if (v241)
  {
    v243 = *v118;
    v121 = (unint64_t)v243 << 14;
  }
  else
  {
    v121 = 0;
  }
  v90 = v121;
  if (!v121)
  {
    v97 = 0;
    goto LABEL_108;
  }
  v89 = 0;
  v129 = v90;
  v128 = v95;
  v127 = 0;
  v133 = v90;
  v132 = v95;
  v131 = 0;
  v143 = v90;
  v142 = v95;
  v141 = 0;
  v147 = v90;
  v146 = v95;
  v145 = 0;
  v150 = v90;
  v152 = v90;
  v151 = 0;
  v145 = v95 - *(_QWORD *)(v90 + 80);
  v144 = 0;
  v160 = v90;
  v159 = 0;
  v161 = v90;
  v159 = *(_DWORD *)(v90 + 12);
  if ((unint64_t)v159 << 14)
  {
    v158 = v147;
    v157 = 0;
    v162 = v147;
    v157 = *(_DWORD *)(v147 + 12);
    v156 = v147;
    v155 = 0;
    v163 = v147;
    v155 = *(_DWORD *)(v147 + 12);
    v23 = ((unint64_t)v157 << 14) - ((unint64_t)v155 << 14) + 0x400000;
  }
  else
  {
    v154 = v147;
    v153 = 0;
    v164 = v147;
    v153 = *(_DWORD *)(v147 + 12);
    v23 = (unint64_t)v153 << 14;
  }
  v144 = v23;
  v22 = 0;
  if ((v145 & 0x8000000000000000) == 0)
    v22 = v145 < v144;
  if (!v22)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:438)";
    __break(1u);
    JUMPOUT(0x61630);
  }
  v141 = v145;
  v149 = v143;
  v148 = v145;
  v131 = (unint64_t)v145 >> 14;
  if (v131 >= *(_DWORD *)(v133 + 16))
    v134 = 0;
  else
    v134 = v133 + 48 * v131 + 2136;
  v127 = v134;
  if (!v134)
  {
    v130 = 0;
    goto LABEL_56;
  }
  v126 = 0;
  v136 = v127;
  if ((*(_BYTE *)(v127 + 32) & 0xF) == 4)
  {
    v135 = 0;
    v135 = v136 - *(unsigned int *)(v136 + 36);
    if (v135 < (v136 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:584)";
      __break(1u);
      JUMPOUT(0x61750);
    }
    v139 = v135;
    v138 = v136;
    v21 = *(_BYTE *)(v135 + 32) & 0xF;
    if ((v21 - 1) < 2)
    {
      v140 = v139 == v138;
    }
    else if (v21 == 3 || (v21 - 5) < 4)
    {
      if (v138 < v139)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:562)";
        __break(1u);
        JUMPOUT(0x617F4);
      }
      v140 = v138 < v139 + 48 * *(unsigned int *)(v139 + 40);
    }
    else
    {
      v140 = 0;
    }
    if (v140)
      v137 = v135;
    else
      v137 = v136;
  }
  else
  {
    v137 = v136;
  }
  v126 = v137;
  v258 = *(_BYTE *)(v137 + 32) & 0xF;
  if (v258 >= 2u)
  {
    if (v258 == 2)
    {
LABEL_51:
      v259 = 1;
      goto LABEL_52;
    }
    if (v258 - 3 >= 2)
    {
      if (v258 - 5 >= 3)
      {
        v257 = v258;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v258;
        __break(1u);
        JUMPOUT(0x61918);
      }
      goto LABEL_51;
    }
  }
  v259 = 0;
LABEL_52:
  if (v259 == 1)
    v20 = v126;
  else
    v20 = 0;
  v130 = v20;
LABEL_56:
  v89 = v130;
  if (!v130)
  {
    v97 = 0;
    goto LABEL_108;
  }
  if (*(unsigned __int16 *)(v89 + 34) != *(unsigned __int16 *)(v96 + 208))
  {
    v97 = 0;
    goto LABEL_108;
  }
  v88 = v95;
  v87 = 0;
  v105 = v96;
  v104 = v89;
  v103 = 0;
  v107 = v96;
  v106 = v89;
  v110 = v96;
  v109 = v89;
  v108 = v89 & 0xFFFFFFFFFFFFC000;
  v19 = 1;
  if ((v89 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v18 = 0;
    if (v109 >= v108 + 2136)
      v18 = v109 < v108 + 48 * *(unsigned int *)(v108 + 16) + 2136;
    v19 = v18;
  }
  if ((v19 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x61B68);
  }
  v112 = v108;
  v111 = v106;
  v117 = v108;
  v116 = v106;
  if (v106 < v108 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x61BCCLL);
  }
  v115 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v116 - v117 - 2136) >> 4);
  if (v115 >= *(unsigned int *)(v117 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x61C34);
  }
  v114 = v108;
  v113 = v115;
  v87 = *(_QWORD *)(v108 + 80) + ((unint64_t)v115 << 14);
  v86 = v88 - v87;
  v85 = 0;
  v85 = *(_BYTE *)(v89 + 32) & 0xF;
  v84 = 0;
  v83 = 0;
  v101 = v85;
  if (v85 == 2 || v85 == 5)
  {
    v84 = *(_QWORD *)(v96 + 216) + 88 * *(unsigned __int8 *)(v89 + 33);
    v83 = *(_QWORD *)(v84 + 48);
    if (!XZM_FAST_ALIGNED(v86, v83, *(_DWORD *)(v84 + 64)))
    {
      v97 = 0;
      goto LABEL_108;
    }
  }
  else
  {
    v83 = (unint64_t)*(unsigned int *)(v89 + 40) << 14;
    v82 = v86 % v83;
    if (v86 % v83)
    {
      v97 = 0;
      goto LABEL_108;
    }
  }
  v81 = v86 / v83;
  v99 = *(_BYTE *)(v89 + 32) & 0xF;
  v100 = v99 == 2 || v99 == 5;
  v17 = 1;
  if (v100)
    v17 = v81 < *(unsigned int *)(v84 + 68);
  if (!v17)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_kind) "
                           "|| block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Sources/libmal"
                           "loc_driverkit/src/xzone/xzone_malloc.c:2924)";
    __break(1u);
    JUMPOUT(0x61E6CLL);
  }
  v216 = v96;
  v215 = (unint64_t *)v89;
  v214 = v85;
  v213 = v86;
  v212 = v83;
  v211 = v88;
  if ((*(_BYTE *)(v89 + 32) & 0xF) != v85)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library/Cac"
                           "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
    __break(1u);
    JUMPOUT(0x61EDCLL);
  }
  if (v214 == 2)
  {
    v210 = 0;
    v209 = 0;
    v208 = *(_QWORD *)v211;
    v209 = v208;
    v207 = v208;
    v210 = v208;
    v206 = 0;
    v206 = *(_QWORD *)(v216 + 272) ^ v211;
    if (v208 == v206)
    {
      is_free_slow = 0;
      is_free_slow = _xzm_xzone_tiny_chunk_block_is_free_slow(v216, v215, v211);
      v217 = is_free_slow & 1;
    }
    else
    {
      v217 = 0;
    }
  }
  else if (v214 == 5)
  {
    v204 = v213 / v212;
    v263 = v215;
    v262 = v213 / v212;
    if ((v215[4] & 0xF) != 5)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CHUN"
                             "K\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xz"
                             "one_inline_internal.h:921)";
      __break(1u);
      JUMPOUT(0x61FFCLL);
    }
    v217 = (*(_DWORD *)v263 >> v262) & 1;
  }
  else
  {
    v217 = 0;
  }
  if (v217 == 1)
  {
    v97 = 0;
  }
  else
  {
    if (v94)
      *v94 = v84;
    if (v93)
      *v93 = v88;
    if (v92)
      *v92 = v83;
    v97 = v89;
  }
LABEL_108:
  v74 = v97;
  if (v77)
    *v77 = v74;
  if (v74)
  {
    if (v76 == v78)
    {
      v80 = v75;
    }
    else
    {
      v73 = (char *)(v78 - v76);
      v80 = v75 - (v78 - v76);
    }
  }
  else
  {
    v80 = _xzm_ptr_size_outlined(v79, (unint64_t)v78);
  }
  v26 = v80;
  v25 = 0;
  if (v80 || (*(_BYTE *)(a1 + 296) & 0x80) == 0)
    goto LABEL_234;
  if (*(_QWORD *)(a1 + 232))
    v16 = *(_QWORD *)(a1 + 232);
  else
    v16 = a1;
  v25 = v16;
  v34 = v16;
  v33 = a2;
  v32 = 0;
  v31 = 0;
  v30 = 0;
  v51 = v16;
  v50 = (unint64_t)a2;
  v49 = 0;
  v48 = (uint64_t *)&v31;
  v47 = &v30;
  v46 = 0;
  v53 = v16;
  if (*(_QWORD *)(v16 + 232))
    v15 = *(_QWORD *)(v16 + 232);
  else
    v15 = v53;
  v46 = v15;
  v45 = 0;
  v124 = v15;
  v123 = v50;
  v122 = 0;
  v235 = v50;
  v234 = v15;
  v233 = 0;
  v232 = 0;
  v252 = v50;
  v251 = &v233;
  v250 = v50;
  if (v50 >> 36)
  {
    *v251 = 0;
    v253 = 0x4000;
  }
  else
  {
    v249 = v250 >> 22;
    *v251 = 0;
    if (v249 >= 0x4000)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x62300);
    }
    v253 = v249;
  }
  v232 = v253;
  if (v253 >= 0x4000)
    v236 = 0;
  else
    v236 = *(_QWORD *)(v234 + 408) + 4 * v232;
  v122 = (unsigned int *)v236;
  if (v236)
  {
    v242 = *v122;
    v125 = (unint64_t)v242 << 14;
  }
  else
  {
    v125 = 0;
  }
  v45 = v125;
  if (!v125)
  {
    v52 = 0;
    goto LABEL_226;
  }
  v44 = 0;
  v168 = v45;
  v167 = v50;
  v166 = 0;
  v172 = v45;
  v171 = v50;
  v170 = 0;
  v182 = v45;
  v181 = v50;
  v180 = 0;
  v186 = v45;
  v185 = v50;
  v184 = 0;
  v189 = v45;
  v191 = v45;
  v190 = 0;
  v184 = v50 - *(_QWORD *)(v45 + 80);
  v183 = 0;
  v199 = v45;
  v198 = 0;
  v200 = v45;
  v198 = *(_DWORD *)(v45 + 12);
  if ((unint64_t)v198 << 14)
  {
    v197 = v186;
    v196 = 0;
    v201 = v186;
    v196 = *(_DWORD *)(v186 + 12);
    v195 = v186;
    v194 = 0;
    v202 = v186;
    v194 = *(_DWORD *)(v186 + 12);
    v14 = ((unint64_t)v196 << 14) - ((unint64_t)v194 << 14) + 0x400000;
  }
  else
  {
    v193 = v186;
    v192 = 0;
    v203 = v186;
    v192 = *(_DWORD *)(v186 + 12);
    v14 = (unint64_t)v192 << 14;
  }
  v183 = v14;
  v13 = 0;
  if ((v184 & 0x8000000000000000) == 0)
    v13 = v184 < v183;
  if (!v13)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:438)";
    __break(1u);
    JUMPOUT(0x62568);
  }
  v180 = v184;
  v188 = v182;
  v187 = v184;
  v170 = (unint64_t)v184 >> 14;
  if (v170 >= *(_DWORD *)(v172 + 16))
    v173 = 0;
  else
    v173 = v172 + 48 * v170 + 2136;
  v166 = v173;
  if (!v173)
  {
    v169 = 0;
    goto LABEL_174;
  }
  v165 = 0;
  v175 = v166;
  if ((*(_BYTE *)(v166 + 32) & 0xF) == 4)
  {
    v174 = 0;
    v174 = v175 - *(unsigned int *)(v175 + 36);
    if (v174 < (v175 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:584)";
      __break(1u);
      JUMPOUT(0x62688);
    }
    v178 = v174;
    v177 = v175;
    v12 = *(_BYTE *)(v174 + 32) & 0xF;
    if ((v12 - 1) < 2)
    {
      v179 = v178 == v177;
    }
    else if (v12 == 3 || (v12 - 5) < 4)
    {
      if (v177 < v178)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:562)";
        __break(1u);
        JUMPOUT(0x6272CLL);
      }
      v179 = v177 < v178 + 48 * *(unsigned int *)(v178 + 40);
    }
    else
    {
      v179 = 0;
    }
    if (v179)
      v176 = v174;
    else
      v176 = v175;
  }
  else
  {
    v176 = v175;
  }
  v165 = v176;
  v255 = *(_BYTE *)(v176 + 32) & 0xF;
  if (v255 >= 2u)
  {
    if (v255 == 2)
    {
LABEL_169:
      v256 = 1;
      goto LABEL_170;
    }
    if (v255 - 3 >= 2)
    {
      if (v255 - 5 >= 3)
      {
        v254 = v255;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v255;
        __break(1u);
        JUMPOUT(0x62850);
      }
      goto LABEL_169;
    }
  }
  v256 = 0;
LABEL_170:
  if (v256 == 1)
    v11 = v165;
  else
    v11 = 0;
  v169 = v11;
LABEL_174:
  v44 = v169;
  if (v169)
  {
    if (*(unsigned __int16 *)(v44 + 34) == *(unsigned __int16 *)(v51 + 208))
    {
      v43 = v50;
      v42 = 0;
      v60 = v51;
      v59 = v44;
      v58 = 0;
      v62 = v51;
      v61 = v44;
      v65 = v51;
      v64 = v44;
      v63 = v44 & 0xFFFFFFFFFFFFC000;
      v10 = 1;
      if ((v44 & 0xFFFFFFFFFFFFC000) != 0)
      {
        v9 = 0;
        if (v64 >= v63 + 2136)
          v9 = v64 < v63 + 48 * *(unsigned int *)(v63 + 16) + 2136;
        v10 = v9;
      }
      if ((v10 & 1) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x62AA0);
      }
      v67 = v63;
      v66 = v61;
      v72 = v63;
      v71 = v61;
      if (v61 < v63 + 2136)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x62B04);
      }
      v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v72 - 2136) >> 4);
      if (v70 >= *(unsigned int *)(v72 + 16))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x62B6CLL);
      }
      v69 = v63;
      v68 = v70;
      v42 = *(_QWORD *)(v63 + 80) + ((unint64_t)v70 << 14);
      v41 = v43 - v42;
      v40 = 0;
      v40 = *(_BYTE *)(v44 + 32) & 0xF;
      v39 = 0;
      v38 = 0;
      v56 = v40;
      if (v40 == 2 || v40 == 5)
      {
        v39 = *(_QWORD *)(v51 + 216) + 88 * *(unsigned __int8 *)(v44 + 33);
        v38 = *(_QWORD *)(v39 + 48);
        if (!XZM_FAST_ALIGNED(v41, v38, *(_DWORD *)(v39 + 64)))
        {
          v52 = 0;
          goto LABEL_226;
        }
      }
      else
      {
        v38 = (unint64_t)*(unsigned int *)(v44 + 40) << 14;
        v37 = v41 % v38;
        if (v41 % v38)
        {
          v52 = 0;
          goto LABEL_226;
        }
      }
      v36 = v41 / v38;
      v54 = *(_BYTE *)(v44 + 32) & 0xF;
      v55 = v54 == 2 || v54 == 5;
      v8 = 1;
      if (v55)
        v8 = v36 < *(unsigned int *)(v39 + 68);
      if (!v8)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_ki"
                               "nd) || block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Source"
                               "s/libmalloc_driverkit/src/xzone/xzone_malloc.c:2924)";
        __break(1u);
        JUMPOUT(0x62DA4);
      }
      v230 = v51;
      v229 = (unint64_t *)v44;
      v228 = v40;
      v227 = v41;
      v226 = v38;
      v225 = v43;
      if ((*(_BYTE *)(v44 + 32) & 0xF) != v40)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library"
                               "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
        __break(1u);
        JUMPOUT(0x62E14);
      }
      if (v228 == 2)
      {
        v224 = 0;
        v223 = 0;
        v222 = *(_QWORD *)v225;
        v223 = v222;
        v221 = v222;
        v224 = v222;
        v220 = 0;
        v220 = *(_QWORD *)(v230 + 272) ^ v225;
        if (v222 == v220)
        {
          v219 = 0;
          v219 = _xzm_xzone_tiny_chunk_block_is_free_slow(v230, v229, v225);
          v231 = v219 & 1;
        }
        else
        {
          v231 = 0;
        }
      }
      else if (v228 == 5)
      {
        v218 = v227 / v226;
        v261 = v229;
        v260 = v227 / v226;
        if ((v229[4] & 0xF) != 5)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_"
                                 "CHUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../"
                                 "xzone/xzone_inline_internal.h:921)";
          __break(1u);
          JUMPOUT(0x62F34);
        }
        v231 = (*(_DWORD *)v261 >> v260) & 1;
      }
      else
      {
        v231 = 0;
      }
      if (v231 == 1)
      {
        v52 = 0;
      }
      else
      {
        if (v49)
          *v49 = v39;
        if (v48)
          *v48 = v43;
        if (v47)
          *v47 = v38;
        v52 = v44;
      }
      goto LABEL_226;
    }
    v52 = 0;
  }
  else
  {
    v52 = 0;
  }
LABEL_226:
  v29 = v52;
  if (v32)
    *v32 = v52;
  if (v29)
  {
    if (v31 == v33)
      v35 = v30;
    else
      v35 = v30 - (v33 - v31);
  }
  else
  {
    v35 = _xzm_ptr_size_outlined(v34, (unint64_t)v33);
  }
  v26 = v35;
LABEL_234:
  if (!v26)
  {
    qword_A4008 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: pointer being freed was not allocated";
    qword_A4038 = (uint64_t)a2;
    __break(1u);
    JUMPOUT(0x630C4);
  }
  if ((*(_BYTE *)(a1 + 296) & 0x20) != 0 && v26 >= 0x401)
    _platform_memset(a2, 85, v26);
  if (v25)
    xzm_malloc_zone_free(v25, a2, a3, a4, a5, a6, a7, a8);
  else
    xzm_malloc_zone_free(a1, a2, a3, a4, a5, a6, a7, a8);
}

char *xzm_malloc_zone_realloc_slow(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return xzm_malloc_zone_malloc_type_realloc_slow(a1, a2, a3, *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904), a5, a6, a7, a8);
}

uint64_t xzm_malloc_zone_memalign_slow(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return xzm_malloc_zone_malloc_type_memalign_slow(a1, a2, a3, *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904));
}

void xzm_malloc_zone_free_definite_size_slow(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  BOOL v9;
  char v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  char v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  BOOL v55;
  char v56;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  int64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  BOOL v100;
  char v101;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  int64_t v115;
  unint64_t v116;
  unint64_t v117;
  unsigned int *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unsigned int *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unsigned int v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  BOOL v140;
  int64_t v141;
  unint64_t v142;
  unint64_t v143;
  int64_t v144;
  int64_t v145;
  unint64_t v146;
  unint64_t v147;
  int64_t v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  unint64_t v152;
  unsigned int v153;
  unint64_t v154;
  int v155;
  unint64_t v156;
  unsigned int v157;
  unint64_t v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unsigned int v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  BOOL v179;
  int64_t v180;
  unint64_t v181;
  unint64_t v182;
  int64_t v183;
  int64_t v184;
  unint64_t v185;
  unint64_t v186;
  int64_t v187;
  unint64_t v188;
  unint64_t v189;
  int v190;
  unint64_t v191;
  unsigned int v192;
  unint64_t v193;
  int v194;
  unint64_t v195;
  unsigned int v196;
  unint64_t v197;
  int v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char is_free_slow;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  char v214;
  unint64_t *v215;
  uint64_t v216;
  char v217;
  unint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  char v228;
  unint64_t *v229;
  uint64_t v230;
  char v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unsigned int v242;
  unsigned int v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t *v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unsigned __int8 v255;
  char v256;
  uint64_t v257;
  unsigned __int8 v258;
  char v259;
  int v260;
  unint64_t *v261;
  int v262;
  unint64_t *v263;

  if (!a2)
    return;
  v79 = a1;
  v78 = a2;
  v77 = 0;
  v76 = 0;
  v75 = 0;
  v74 = 0;
  v96 = a1;
  v95 = (unint64_t)a2;
  v94 = 0;
  v93 = (uint64_t *)&v76;
  v92 = &v75;
  v91 = 0;
  v98 = a1;
  if (*(_QWORD *)(a1 + 232))
    v24 = *(_QWORD *)(a1 + 232);
  else
    v24 = v98;
  v91 = v24;
  v90 = 0;
  v120 = v24;
  v119 = v95;
  v118 = 0;
  v240 = v95;
  v239 = v24;
  v238 = 0;
  v237 = 0;
  v247 = v95;
  v246 = &v238;
  v245 = v95;
  if (v95 >> 36)
  {
    *v246 = 0;
    v248 = 0x4000;
  }
  else
  {
    v244 = v245 >> 22;
    *v246 = 0;
    if (v244 >= 0x4000)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x63394);
    }
    v248 = v244;
  }
  v237 = v248;
  if (v248 >= 0x4000)
    v241 = 0;
  else
    v241 = *(_QWORD *)(v239 + 408) + 4 * v237;
  v118 = (unsigned int *)v241;
  if (v241)
  {
    v243 = *v118;
    v121 = (unint64_t)v243 << 14;
  }
  else
  {
    v121 = 0;
  }
  v90 = v121;
  if (!v121)
  {
    v97 = 0;
    goto LABEL_108;
  }
  v89 = 0;
  v129 = v90;
  v128 = v95;
  v127 = 0;
  v133 = v90;
  v132 = v95;
  v131 = 0;
  v143 = v90;
  v142 = v95;
  v141 = 0;
  v147 = v90;
  v146 = v95;
  v145 = 0;
  v150 = v90;
  v152 = v90;
  v151 = 0;
  v145 = v95 - *(_QWORD *)(v90 + 80);
  v144 = 0;
  v160 = v90;
  v159 = 0;
  v161 = v90;
  v159 = *(_DWORD *)(v90 + 12);
  if ((unint64_t)v159 << 14)
  {
    v158 = v147;
    v157 = 0;
    v162 = v147;
    v157 = *(_DWORD *)(v147 + 12);
    v156 = v147;
    v155 = 0;
    v163 = v147;
    v155 = *(_DWORD *)(v147 + 12);
    v23 = ((unint64_t)v157 << 14) - ((unint64_t)v155 << 14) + 0x400000;
  }
  else
  {
    v154 = v147;
    v153 = 0;
    v164 = v147;
    v153 = *(_DWORD *)(v147 + 12);
    v23 = (unint64_t)v153 << 14;
  }
  v144 = v23;
  v22 = 0;
  if ((v145 & 0x8000000000000000) == 0)
    v22 = v145 < v144;
  if (!v22)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:438)";
    __break(1u);
    JUMPOUT(0x635FCLL);
  }
  v141 = v145;
  v149 = v143;
  v148 = v145;
  v131 = (unint64_t)v145 >> 14;
  if (v131 >= *(_DWORD *)(v133 + 16))
    v134 = 0;
  else
    v134 = v133 + 48 * v131 + 2136;
  v127 = v134;
  if (!v134)
  {
    v130 = 0;
    goto LABEL_56;
  }
  v126 = 0;
  v136 = v127;
  if ((*(_BYTE *)(v127 + 32) & 0xF) == 4)
  {
    v135 = 0;
    v135 = v136 - *(unsigned int *)(v136 + 36);
    if (v135 < (v136 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:584)";
      __break(1u);
      JUMPOUT(0x6371CLL);
    }
    v139 = v135;
    v138 = v136;
    v21 = *(_BYTE *)(v135 + 32) & 0xF;
    if ((v21 - 1) < 2)
    {
      v140 = v139 == v138;
    }
    else if (v21 == 3 || (v21 - 5) < 4)
    {
      if (v138 < v139)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:562)";
        __break(1u);
        JUMPOUT(0x637C0);
      }
      v140 = v138 < v139 + 48 * *(unsigned int *)(v139 + 40);
    }
    else
    {
      v140 = 0;
    }
    if (v140)
      v137 = v135;
    else
      v137 = v136;
  }
  else
  {
    v137 = v136;
  }
  v126 = v137;
  v258 = *(_BYTE *)(v137 + 32) & 0xF;
  if (v258 >= 2u)
  {
    if (v258 == 2)
    {
LABEL_51:
      v259 = 1;
      goto LABEL_52;
    }
    if (v258 - 3 >= 2)
    {
      if (v258 - 5 >= 3)
      {
        v257 = v258;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v258;
        __break(1u);
        JUMPOUT(0x638E4);
      }
      goto LABEL_51;
    }
  }
  v259 = 0;
LABEL_52:
  if (v259 == 1)
    v20 = v126;
  else
    v20 = 0;
  v130 = v20;
LABEL_56:
  v89 = v130;
  if (!v130)
  {
    v97 = 0;
    goto LABEL_108;
  }
  if (*(unsigned __int16 *)(v89 + 34) != *(unsigned __int16 *)(v96 + 208))
  {
    v97 = 0;
    goto LABEL_108;
  }
  v88 = v95;
  v87 = 0;
  v105 = v96;
  v104 = v89;
  v103 = 0;
  v107 = v96;
  v106 = v89;
  v110 = v96;
  v109 = v89;
  v108 = v89 & 0xFFFFFFFFFFFFC000;
  v19 = 1;
  if ((v89 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v18 = 0;
    if (v109 >= v108 + 2136)
      v18 = v109 < v108 + 48 * *(unsigned int *)(v108 + 16) + 2136;
    v19 = v18;
  }
  if ((v19 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x63B34);
  }
  v112 = v108;
  v111 = v106;
  v117 = v108;
  v116 = v106;
  if (v106 < v108 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x63B98);
  }
  v115 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v116 - v117 - 2136) >> 4);
  if (v115 >= *(unsigned int *)(v117 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x63C00);
  }
  v114 = v108;
  v113 = v115;
  v87 = *(_QWORD *)(v108 + 80) + ((unint64_t)v115 << 14);
  v86 = v88 - v87;
  v85 = 0;
  v85 = *(_BYTE *)(v89 + 32) & 0xF;
  v84 = 0;
  v83 = 0;
  v101 = v85;
  if (v85 == 2 || v85 == 5)
  {
    v84 = *(_QWORD *)(v96 + 216) + 88 * *(unsigned __int8 *)(v89 + 33);
    v83 = *(_QWORD *)(v84 + 48);
    if (!XZM_FAST_ALIGNED(v86, v83, *(_DWORD *)(v84 + 64)))
    {
      v97 = 0;
      goto LABEL_108;
    }
  }
  else
  {
    v83 = (unint64_t)*(unsigned int *)(v89 + 40) << 14;
    v82 = v86 % v83;
    if (v86 % v83)
    {
      v97 = 0;
      goto LABEL_108;
    }
  }
  v81 = v86 / v83;
  v99 = *(_BYTE *)(v89 + 32) & 0xF;
  v100 = v99 == 2 || v99 == 5;
  v17 = 1;
  if (v100)
    v17 = v81 < *(unsigned int *)(v84 + 68);
  if (!v17)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_kind) "
                           "|| block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Sources/libmal"
                           "loc_driverkit/src/xzone/xzone_malloc.c:2924)";
    __break(1u);
    JUMPOUT(0x63E38);
  }
  v216 = v96;
  v215 = (unint64_t *)v89;
  v214 = v85;
  v213 = v86;
  v212 = v83;
  v211 = v88;
  if ((*(_BYTE *)(v89 + 32) & 0xF) != v85)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library/Cac"
                           "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
    __break(1u);
    JUMPOUT(0x63EA8);
  }
  if (v214 == 2)
  {
    v210 = 0;
    v209 = 0;
    v208 = *(_QWORD *)v211;
    v209 = v208;
    v207 = v208;
    v210 = v208;
    v206 = 0;
    v206 = *(_QWORD *)(v216 + 272) ^ v211;
    if (v208 == v206)
    {
      is_free_slow = 0;
      is_free_slow = _xzm_xzone_tiny_chunk_block_is_free_slow(v216, v215, v211);
      v217 = is_free_slow & 1;
    }
    else
    {
      v217 = 0;
    }
  }
  else if (v214 == 5)
  {
    v204 = v213 / v212;
    v263 = v215;
    v262 = v213 / v212;
    if ((v215[4] & 0xF) != 5)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CHUN"
                             "K\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xz"
                             "one_inline_internal.h:921)";
      __break(1u);
      JUMPOUT(0x63FC8);
    }
    v217 = (*(_DWORD *)v263 >> v262) & 1;
  }
  else
  {
    v217 = 0;
  }
  if (v217 == 1)
  {
    v97 = 0;
  }
  else
  {
    if (v94)
      *v94 = v84;
    if (v93)
      *v93 = v88;
    if (v92)
      *v92 = v83;
    v97 = v89;
  }
LABEL_108:
  v74 = v97;
  if (v77)
    *v77 = v74;
  if (v74)
  {
    if (v76 == v78)
    {
      v80 = v75;
    }
    else
    {
      v73 = (char *)(v78 - v76);
      v80 = v75 - (v78 - v76);
    }
  }
  else
  {
    v80 = _xzm_ptr_size_outlined(v79, (unint64_t)v78);
  }
  v25 = 0;
  if (v80 || (*(_BYTE *)(a1 + 296) & 0x80) == 0)
    goto LABEL_235;
  if (*(_QWORD *)(a1 + 232))
    v16 = *(_QWORD *)(a1 + 232);
  else
    v16 = a1;
  v25 = v16;
  v34 = v16;
  v33 = a2;
  v32 = 0;
  v31 = 0;
  v30 = 0;
  v51 = v16;
  v50 = (unint64_t)a2;
  v49 = 0;
  v48 = (uint64_t *)&v31;
  v47 = &v30;
  v46 = 0;
  v53 = v16;
  if (*(_QWORD *)(v16 + 232))
    v15 = *(_QWORD *)(v16 + 232);
  else
    v15 = v53;
  v46 = v15;
  v45 = 0;
  v124 = v15;
  v123 = v50;
  v122 = 0;
  v235 = v50;
  v234 = v15;
  v233 = 0;
  v232 = 0;
  v252 = v50;
  v251 = &v233;
  v250 = v50;
  if (v50 >> 36)
  {
    *v251 = 0;
    v253 = 0x4000;
  }
  else
  {
    v249 = v250 >> 22;
    *v251 = 0;
    if (v249 >= 0x4000)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x642CCLL);
    }
    v253 = v249;
  }
  v232 = v253;
  if (v253 >= 0x4000)
    v236 = 0;
  else
    v236 = *(_QWORD *)(v234 + 408) + 4 * v232;
  v122 = (unsigned int *)v236;
  if (v236)
  {
    v242 = *v122;
    v125 = (unint64_t)v242 << 14;
  }
  else
  {
    v125 = 0;
  }
  v45 = v125;
  if (!v125)
  {
    v52 = 0;
    goto LABEL_226;
  }
  v44 = 0;
  v168 = v45;
  v167 = v50;
  v166 = 0;
  v172 = v45;
  v171 = v50;
  v170 = 0;
  v182 = v45;
  v181 = v50;
  v180 = 0;
  v186 = v45;
  v185 = v50;
  v184 = 0;
  v189 = v45;
  v191 = v45;
  v190 = 0;
  v184 = v50 - *(_QWORD *)(v45 + 80);
  v183 = 0;
  v199 = v45;
  v198 = 0;
  v200 = v45;
  v198 = *(_DWORD *)(v45 + 12);
  if ((unint64_t)v198 << 14)
  {
    v197 = v186;
    v196 = 0;
    v201 = v186;
    v196 = *(_DWORD *)(v186 + 12);
    v195 = v186;
    v194 = 0;
    v202 = v186;
    v194 = *(_DWORD *)(v186 + 12);
    v14 = ((unint64_t)v196 << 14) - ((unint64_t)v194 << 14) + 0x400000;
  }
  else
  {
    v193 = v186;
    v192 = 0;
    v203 = v186;
    v192 = *(_DWORD *)(v186 + 12);
    v14 = (unint64_t)v192 << 14;
  }
  v183 = v14;
  v13 = 0;
  if ((v184 & 0x8000000000000000) == 0)
    v13 = v184 < v183;
  if (!v13)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:438)";
    __break(1u);
    JUMPOUT(0x64534);
  }
  v180 = v184;
  v188 = v182;
  v187 = v184;
  v170 = (unint64_t)v184 >> 14;
  if (v170 >= *(_DWORD *)(v172 + 16))
    v173 = 0;
  else
    v173 = v172 + 48 * v170 + 2136;
  v166 = v173;
  if (!v173)
  {
    v169 = 0;
    goto LABEL_174;
  }
  v165 = 0;
  v175 = v166;
  if ((*(_BYTE *)(v166 + 32) & 0xF) == 4)
  {
    v174 = 0;
    v174 = v175 - *(unsigned int *)(v175 + 36);
    if (v174 < (v175 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:584)";
      __break(1u);
      JUMPOUT(0x64654);
    }
    v178 = v174;
    v177 = v175;
    v12 = *(_BYTE *)(v174 + 32) & 0xF;
    if ((v12 - 1) < 2)
    {
      v179 = v178 == v177;
    }
    else if (v12 == 3 || (v12 - 5) < 4)
    {
      if (v177 < v178)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:562)";
        __break(1u);
        JUMPOUT(0x646F8);
      }
      v179 = v177 < v178 + 48 * *(unsigned int *)(v178 + 40);
    }
    else
    {
      v179 = 0;
    }
    if (v179)
      v176 = v174;
    else
      v176 = v175;
  }
  else
  {
    v176 = v175;
  }
  v165 = v176;
  v255 = *(_BYTE *)(v176 + 32) & 0xF;
  if (v255 >= 2u)
  {
    if (v255 == 2)
    {
LABEL_169:
      v256 = 1;
      goto LABEL_170;
    }
    if (v255 - 3 >= 2)
    {
      if (v255 - 5 >= 3)
      {
        v254 = v255;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v255;
        __break(1u);
        JUMPOUT(0x6481CLL);
      }
      goto LABEL_169;
    }
  }
  v256 = 0;
LABEL_170:
  if (v256 == 1)
    v11 = v165;
  else
    v11 = 0;
  v169 = v11;
LABEL_174:
  v44 = v169;
  if (v169)
  {
    if (*(unsigned __int16 *)(v44 + 34) == *(unsigned __int16 *)(v51 + 208))
    {
      v43 = v50;
      v42 = 0;
      v60 = v51;
      v59 = v44;
      v58 = 0;
      v62 = v51;
      v61 = v44;
      v65 = v51;
      v64 = v44;
      v63 = v44 & 0xFFFFFFFFFFFFC000;
      v10 = 1;
      if ((v44 & 0xFFFFFFFFFFFFC000) != 0)
      {
        v9 = 0;
        if (v64 >= v63 + 2136)
          v9 = v64 < v63 + 48 * *(unsigned int *)(v63 + 16) + 2136;
        v10 = v9;
      }
      if ((v10 & 1) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x64A6CLL);
      }
      v67 = v63;
      v66 = v61;
      v72 = v63;
      v71 = v61;
      if (v61 < v63 + 2136)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x64AD0);
      }
      v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v72 - 2136) >> 4);
      if (v70 >= *(unsigned int *)(v72 + 16))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x64B38);
      }
      v69 = v63;
      v68 = v70;
      v42 = *(_QWORD *)(v63 + 80) + ((unint64_t)v70 << 14);
      v41 = v43 - v42;
      v40 = 0;
      v40 = *(_BYTE *)(v44 + 32) & 0xF;
      v39 = 0;
      v38 = 0;
      v56 = v40;
      if (v40 == 2 || v40 == 5)
      {
        v39 = *(_QWORD *)(v51 + 216) + 88 * *(unsigned __int8 *)(v44 + 33);
        v38 = *(_QWORD *)(v39 + 48);
        if (!XZM_FAST_ALIGNED(v41, v38, *(_DWORD *)(v39 + 64)))
        {
          v52 = 0;
          goto LABEL_226;
        }
      }
      else
      {
        v38 = (unint64_t)*(unsigned int *)(v44 + 40) << 14;
        v37 = v41 % v38;
        if (v41 % v38)
        {
          v52 = 0;
          goto LABEL_226;
        }
      }
      v36 = v41 / v38;
      v54 = *(_BYTE *)(v44 + 32) & 0xF;
      v55 = v54 == 2 || v54 == 5;
      v8 = 1;
      if (v55)
        v8 = v36 < *(unsigned int *)(v39 + 68);
      if (!v8)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_ki"
                               "nd) || block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Source"
                               "s/libmalloc_driverkit/src/xzone/xzone_malloc.c:2924)";
        __break(1u);
        JUMPOUT(0x64D70);
      }
      v230 = v51;
      v229 = (unint64_t *)v44;
      v228 = v40;
      v227 = v41;
      v226 = v38;
      v225 = v43;
      if ((*(_BYTE *)(v44 + 32) & 0xF) != v40)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library"
                               "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
        __break(1u);
        JUMPOUT(0x64DE0);
      }
      if (v228 == 2)
      {
        v224 = 0;
        v223 = 0;
        v222 = *(_QWORD *)v225;
        v223 = v222;
        v221 = v222;
        v224 = v222;
        v220 = 0;
        v220 = *(_QWORD *)(v230 + 272) ^ v225;
        if (v222 == v220)
        {
          v219 = 0;
          v219 = _xzm_xzone_tiny_chunk_block_is_free_slow(v230, v229, v225);
          v231 = v219 & 1;
        }
        else
        {
          v231 = 0;
        }
      }
      else if (v228 == 5)
      {
        v218 = v227 / v226;
        v261 = v229;
        v260 = v227 / v226;
        if ((v229[4] & 0xF) != 5)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_"
                                 "CHUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../"
                                 "xzone/xzone_inline_internal.h:921)";
          __break(1u);
          JUMPOUT(0x64F00);
        }
        v231 = (*(_DWORD *)v261 >> v260) & 1;
      }
      else
      {
        v231 = 0;
      }
      if (v231 == 1)
      {
        v52 = 0;
      }
      else
      {
        if (v49)
          *v49 = v39;
        if (v48)
          *v48 = v43;
        if (v47)
          *v47 = v38;
        v52 = v44;
      }
      goto LABEL_226;
    }
    v52 = 0;
  }
  else
  {
    v52 = 0;
  }
LABEL_226:
  v29 = v52;
  if (v32)
    *v32 = v52;
  if (v29)
  {
    if (v31 == v33)
      v35 = v30;
    else
      v35 = v30 - (v33 - v31);
  }
  else
  {
    v35 = _xzm_ptr_size_outlined(v34, (unint64_t)v33);
  }
  if (!v35)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"our_size != 0\" failed (/Library/Caches/com.apple.xbs/So"
                           "urces/libmalloc_driverkit/src/xzone/xzone_malloc.c:3433)";
    __break(1u);
    JUMPOUT(0x65074);
  }
LABEL_235:
  if ((*(_BYTE *)(a1 + 296) & 0x20) != 0 && a3 >= 0x401)
    _platform_memset(a2, 85, a3);
  if (v25)
    xzm_malloc_zone_free_definite_size(v25, a2, a3, a4, a5, a6, a7, a8);
  else
    xzm_malloc_zone_free_definite_size(a1, a2, a3, a4, a5, a6, a7, a8);
}

void xzm_malloc_zone_try_free_default_slow(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  BOOL v9;
  char v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  char v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  BOOL v55;
  char v56;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  int64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  BOOL v100;
  char v101;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  int64_t v115;
  unint64_t v116;
  unint64_t v117;
  unsigned int *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unsigned int *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unsigned int v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  BOOL v140;
  int64_t v141;
  unint64_t v142;
  unint64_t v143;
  int64_t v144;
  int64_t v145;
  unint64_t v146;
  unint64_t v147;
  int64_t v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  unint64_t v152;
  unsigned int v153;
  unint64_t v154;
  int v155;
  unint64_t v156;
  unsigned int v157;
  unint64_t v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unsigned int v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  BOOL v179;
  int64_t v180;
  unint64_t v181;
  unint64_t v182;
  int64_t v183;
  int64_t v184;
  unint64_t v185;
  unint64_t v186;
  int64_t v187;
  unint64_t v188;
  unint64_t v189;
  int v190;
  unint64_t v191;
  unsigned int v192;
  unint64_t v193;
  int v194;
  unint64_t v195;
  unsigned int v196;
  unint64_t v197;
  int v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char is_free_slow;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  char v214;
  unint64_t *v215;
  uint64_t v216;
  char v217;
  unint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  char v228;
  unint64_t *v229;
  uint64_t v230;
  char v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unsigned int v242;
  unsigned int v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t *v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unsigned __int8 v255;
  char v256;
  uint64_t v257;
  unsigned __int8 v258;
  char v259;
  int v260;
  unint64_t *v261;
  int v262;
  unint64_t *v263;

  if (!a2)
    return;
  v79 = a1;
  v78 = a2;
  v77 = 0;
  v76 = 0;
  v75 = 0;
  v74 = 0;
  v96 = a1;
  v95 = (unint64_t)a2;
  v94 = 0;
  v93 = (uint64_t *)&v76;
  v92 = &v75;
  v91 = 0;
  v98 = a1;
  if (*(_QWORD *)(a1 + 232))
    v24 = *(_QWORD *)(a1 + 232);
  else
    v24 = v98;
  v91 = v24;
  v90 = 0;
  v120 = v24;
  v119 = v95;
  v118 = 0;
  v240 = v95;
  v239 = v24;
  v238 = 0;
  v237 = 0;
  v247 = v95;
  v246 = &v238;
  v245 = v95;
  if (v95 >> 36)
  {
    *v246 = 0;
    v248 = 0x4000;
  }
  else
  {
    v244 = v245 >> 22;
    *v246 = 0;
    if (v244 >= 0x4000)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x65274);
    }
    v248 = v244;
  }
  v237 = v248;
  if (v248 >= 0x4000)
    v241 = 0;
  else
    v241 = *(_QWORD *)(v239 + 408) + 4 * v237;
  v118 = (unsigned int *)v241;
  if (v241)
  {
    v243 = *v118;
    v121 = (unint64_t)v243 << 14;
  }
  else
  {
    v121 = 0;
  }
  v90 = v121;
  if (!v121)
  {
    v97 = 0;
    goto LABEL_108;
  }
  v89 = 0;
  v129 = v90;
  v128 = v95;
  v127 = 0;
  v133 = v90;
  v132 = v95;
  v131 = 0;
  v143 = v90;
  v142 = v95;
  v141 = 0;
  v147 = v90;
  v146 = v95;
  v145 = 0;
  v150 = v90;
  v152 = v90;
  v151 = 0;
  v145 = v95 - *(_QWORD *)(v90 + 80);
  v144 = 0;
  v160 = v90;
  v159 = 0;
  v161 = v90;
  v159 = *(_DWORD *)(v90 + 12);
  if ((unint64_t)v159 << 14)
  {
    v158 = v147;
    v157 = 0;
    v162 = v147;
    v157 = *(_DWORD *)(v147 + 12);
    v156 = v147;
    v155 = 0;
    v163 = v147;
    v155 = *(_DWORD *)(v147 + 12);
    v23 = ((unint64_t)v157 << 14) - ((unint64_t)v155 << 14) + 0x400000;
  }
  else
  {
    v154 = v147;
    v153 = 0;
    v164 = v147;
    v153 = *(_DWORD *)(v147 + 12);
    v23 = (unint64_t)v153 << 14;
  }
  v144 = v23;
  v22 = 0;
  if ((v145 & 0x8000000000000000) == 0)
    v22 = v145 < v144;
  if (!v22)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:438)";
    __break(1u);
    JUMPOUT(0x654DCLL);
  }
  v141 = v145;
  v149 = v143;
  v148 = v145;
  v131 = (unint64_t)v145 >> 14;
  if (v131 >= *(_DWORD *)(v133 + 16))
    v134 = 0;
  else
    v134 = v133 + 48 * v131 + 2136;
  v127 = v134;
  if (!v134)
  {
    v130 = 0;
    goto LABEL_56;
  }
  v126 = 0;
  v136 = v127;
  if ((*(_BYTE *)(v127 + 32) & 0xF) == 4)
  {
    v135 = 0;
    v135 = v136 - *(unsigned int *)(v136 + 36);
    if (v135 < (v136 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:584)";
      __break(1u);
      JUMPOUT(0x655FCLL);
    }
    v139 = v135;
    v138 = v136;
    v21 = *(_BYTE *)(v135 + 32) & 0xF;
    if ((v21 - 1) < 2)
    {
      v140 = v139 == v138;
    }
    else if (v21 == 3 || (v21 - 5) < 4)
    {
      if (v138 < v139)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:562)";
        __break(1u);
        JUMPOUT(0x656A0);
      }
      v140 = v138 < v139 + 48 * *(unsigned int *)(v139 + 40);
    }
    else
    {
      v140 = 0;
    }
    if (v140)
      v137 = v135;
    else
      v137 = v136;
  }
  else
  {
    v137 = v136;
  }
  v126 = v137;
  v258 = *(_BYTE *)(v137 + 32) & 0xF;
  if (v258 >= 2u)
  {
    if (v258 == 2)
    {
LABEL_51:
      v259 = 1;
      goto LABEL_52;
    }
    if (v258 - 3 >= 2)
    {
      if (v258 - 5 >= 3)
      {
        v257 = v258;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v258;
        __break(1u);
        JUMPOUT(0x657C4);
      }
      goto LABEL_51;
    }
  }
  v259 = 0;
LABEL_52:
  if (v259 == 1)
    v20 = v126;
  else
    v20 = 0;
  v130 = v20;
LABEL_56:
  v89 = v130;
  if (!v130)
  {
    v97 = 0;
    goto LABEL_108;
  }
  if (*(unsigned __int16 *)(v89 + 34) != *(unsigned __int16 *)(v96 + 208))
  {
    v97 = 0;
    goto LABEL_108;
  }
  v88 = v95;
  v87 = 0;
  v105 = v96;
  v104 = v89;
  v103 = 0;
  v107 = v96;
  v106 = v89;
  v110 = v96;
  v109 = v89;
  v108 = v89 & 0xFFFFFFFFFFFFC000;
  v19 = 1;
  if ((v89 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v18 = 0;
    if (v109 >= v108 + 2136)
      v18 = v109 < v108 + 48 * *(unsigned int *)(v108 + 16) + 2136;
    v19 = v18;
  }
  if ((v19 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x65A14);
  }
  v112 = v108;
  v111 = v106;
  v117 = v108;
  v116 = v106;
  if (v106 < v108 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x65A78);
  }
  v115 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v116 - v117 - 2136) >> 4);
  if (v115 >= *(unsigned int *)(v117 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x65AE0);
  }
  v114 = v108;
  v113 = v115;
  v87 = *(_QWORD *)(v108 + 80) + ((unint64_t)v115 << 14);
  v86 = v88 - v87;
  v85 = 0;
  v85 = *(_BYTE *)(v89 + 32) & 0xF;
  v84 = 0;
  v83 = 0;
  v101 = v85;
  if (v85 == 2 || v85 == 5)
  {
    v84 = *(_QWORD *)(v96 + 216) + 88 * *(unsigned __int8 *)(v89 + 33);
    v83 = *(_QWORD *)(v84 + 48);
    if (!XZM_FAST_ALIGNED(v86, v83, *(_DWORD *)(v84 + 64)))
    {
      v97 = 0;
      goto LABEL_108;
    }
  }
  else
  {
    v83 = (unint64_t)*(unsigned int *)(v89 + 40) << 14;
    v82 = v86 % v83;
    if (v86 % v83)
    {
      v97 = 0;
      goto LABEL_108;
    }
  }
  v81 = v86 / v83;
  v99 = *(_BYTE *)(v89 + 32) & 0xF;
  v100 = v99 == 2 || v99 == 5;
  v17 = 1;
  if (v100)
    v17 = v81 < *(unsigned int *)(v84 + 68);
  if (!v17)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_kind) "
                           "|| block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Sources/libmal"
                           "loc_driverkit/src/xzone/xzone_malloc.c:2924)";
    __break(1u);
    JUMPOUT(0x65D18);
  }
  v216 = v96;
  v215 = (unint64_t *)v89;
  v214 = v85;
  v213 = v86;
  v212 = v83;
  v211 = v88;
  if ((*(_BYTE *)(v89 + 32) & 0xF) != v85)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library/Cac"
                           "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
    __break(1u);
    JUMPOUT(0x65D88);
  }
  if (v214 == 2)
  {
    v210 = 0;
    v209 = 0;
    v208 = *(_QWORD *)v211;
    v209 = v208;
    v207 = v208;
    v210 = v208;
    v206 = 0;
    v206 = *(_QWORD *)(v216 + 272) ^ v211;
    if (v208 == v206)
    {
      is_free_slow = 0;
      is_free_slow = _xzm_xzone_tiny_chunk_block_is_free_slow(v216, v215, v211);
      v217 = is_free_slow & 1;
    }
    else
    {
      v217 = 0;
    }
  }
  else if (v214 == 5)
  {
    v204 = v213 / v212;
    v263 = v215;
    v262 = v213 / v212;
    if ((v215[4] & 0xF) != 5)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CHUN"
                             "K\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xz"
                             "one_inline_internal.h:921)";
      __break(1u);
      JUMPOUT(0x65EA8);
    }
    v217 = (*(_DWORD *)v263 >> v262) & 1;
  }
  else
  {
    v217 = 0;
  }
  if (v217 == 1)
  {
    v97 = 0;
  }
  else
  {
    if (v94)
      *v94 = v84;
    if (v93)
      *v93 = v88;
    if (v92)
      *v92 = v83;
    v97 = v89;
  }
LABEL_108:
  v74 = v97;
  if (v77)
    *v77 = v74;
  if (v74)
  {
    if (v76 == v78)
    {
      v80 = v75;
    }
    else
    {
      v73 = (char *)(v78 - v76);
      v80 = v75 - (v78 - v76);
    }
  }
  else
  {
    v80 = _xzm_ptr_size_outlined(v79, (unint64_t)v78);
  }
  v26 = v80;
  v25 = 0;
  if (v80 || (*(_BYTE *)(a1 + 296) & 0x80) == 0)
    goto LABEL_234;
  if (*(_QWORD *)(a1 + 232))
    v16 = *(_QWORD *)(a1 + 232);
  else
    v16 = a1;
  v25 = v16;
  v34 = v16;
  v33 = a2;
  v32 = 0;
  v31 = 0;
  v30 = 0;
  v51 = v16;
  v50 = (unint64_t)a2;
  v49 = 0;
  v48 = (uint64_t *)&v31;
  v47 = &v30;
  v46 = 0;
  v53 = v16;
  if (*(_QWORD *)(v16 + 232))
    v15 = *(_QWORD *)(v16 + 232);
  else
    v15 = v53;
  v46 = v15;
  v45 = 0;
  v124 = v15;
  v123 = v50;
  v122 = 0;
  v235 = v50;
  v234 = v15;
  v233 = 0;
  v232 = 0;
  v252 = v50;
  v251 = &v233;
  v250 = v50;
  if (v50 >> 36)
  {
    *v251 = 0;
    v253 = 0x4000;
  }
  else
  {
    v249 = v250 >> 22;
    *v251 = 0;
    if (v249 >= 0x4000)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x661ACLL);
    }
    v253 = v249;
  }
  v232 = v253;
  if (v253 >= 0x4000)
    v236 = 0;
  else
    v236 = *(_QWORD *)(v234 + 408) + 4 * v232;
  v122 = (unsigned int *)v236;
  if (v236)
  {
    v242 = *v122;
    v125 = (unint64_t)v242 << 14;
  }
  else
  {
    v125 = 0;
  }
  v45 = v125;
  if (!v125)
  {
    v52 = 0;
    goto LABEL_226;
  }
  v44 = 0;
  v168 = v45;
  v167 = v50;
  v166 = 0;
  v172 = v45;
  v171 = v50;
  v170 = 0;
  v182 = v45;
  v181 = v50;
  v180 = 0;
  v186 = v45;
  v185 = v50;
  v184 = 0;
  v189 = v45;
  v191 = v45;
  v190 = 0;
  v184 = v50 - *(_QWORD *)(v45 + 80);
  v183 = 0;
  v199 = v45;
  v198 = 0;
  v200 = v45;
  v198 = *(_DWORD *)(v45 + 12);
  if ((unint64_t)v198 << 14)
  {
    v197 = v186;
    v196 = 0;
    v201 = v186;
    v196 = *(_DWORD *)(v186 + 12);
    v195 = v186;
    v194 = 0;
    v202 = v186;
    v194 = *(_DWORD *)(v186 + 12);
    v14 = ((unint64_t)v196 << 14) - ((unint64_t)v194 << 14) + 0x400000;
  }
  else
  {
    v193 = v186;
    v192 = 0;
    v203 = v186;
    v192 = *(_DWORD *)(v186 + 12);
    v14 = (unint64_t)v192 << 14;
  }
  v183 = v14;
  v13 = 0;
  if ((v184 & 0x8000000000000000) == 0)
    v13 = v184 < v183;
  if (!v13)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:438)";
    __break(1u);
    JUMPOUT(0x66414);
  }
  v180 = v184;
  v188 = v182;
  v187 = v184;
  v170 = (unint64_t)v184 >> 14;
  if (v170 >= *(_DWORD *)(v172 + 16))
    v173 = 0;
  else
    v173 = v172 + 48 * v170 + 2136;
  v166 = v173;
  if (!v173)
  {
    v169 = 0;
    goto LABEL_174;
  }
  v165 = 0;
  v175 = v166;
  if ((*(_BYTE *)(v166 + 32) & 0xF) == 4)
  {
    v174 = 0;
    v174 = v175 - *(unsigned int *)(v175 + 36);
    if (v174 < (v175 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:584)";
      __break(1u);
      JUMPOUT(0x66534);
    }
    v178 = v174;
    v177 = v175;
    v12 = *(_BYTE *)(v174 + 32) & 0xF;
    if ((v12 - 1) < 2)
    {
      v179 = v178 == v177;
    }
    else if (v12 == 3 || (v12 - 5) < 4)
    {
      if (v177 < v178)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:562)";
        __break(1u);
        JUMPOUT(0x665D8);
      }
      v179 = v177 < v178 + 48 * *(unsigned int *)(v178 + 40);
    }
    else
    {
      v179 = 0;
    }
    if (v179)
      v176 = v174;
    else
      v176 = v175;
  }
  else
  {
    v176 = v175;
  }
  v165 = v176;
  v255 = *(_BYTE *)(v176 + 32) & 0xF;
  if (v255 >= 2u)
  {
    if (v255 == 2)
    {
LABEL_169:
      v256 = 1;
      goto LABEL_170;
    }
    if (v255 - 3 >= 2)
    {
      if (v255 - 5 >= 3)
      {
        v254 = v255;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v255;
        __break(1u);
        JUMPOUT(0x666FCLL);
      }
      goto LABEL_169;
    }
  }
  v256 = 0;
LABEL_170:
  if (v256 == 1)
    v11 = v165;
  else
    v11 = 0;
  v169 = v11;
LABEL_174:
  v44 = v169;
  if (v169)
  {
    if (*(unsigned __int16 *)(v44 + 34) == *(unsigned __int16 *)(v51 + 208))
    {
      v43 = v50;
      v42 = 0;
      v60 = v51;
      v59 = v44;
      v58 = 0;
      v62 = v51;
      v61 = v44;
      v65 = v51;
      v64 = v44;
      v63 = v44 & 0xFFFFFFFFFFFFC000;
      v10 = 1;
      if ((v44 & 0xFFFFFFFFFFFFC000) != 0)
      {
        v9 = 0;
        if (v64 >= v63 + 2136)
          v9 = v64 < v63 + 48 * *(unsigned int *)(v63 + 16) + 2136;
        v10 = v9;
      }
      if ((v10 & 1) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x6694CLL);
      }
      v67 = v63;
      v66 = v61;
      v72 = v63;
      v71 = v61;
      if (v61 < v63 + 2136)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x669B0);
      }
      v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v72 - 2136) >> 4);
      if (v70 >= *(unsigned int *)(v72 + 16))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x66A18);
      }
      v69 = v63;
      v68 = v70;
      v42 = *(_QWORD *)(v63 + 80) + ((unint64_t)v70 << 14);
      v41 = v43 - v42;
      v40 = 0;
      v40 = *(_BYTE *)(v44 + 32) & 0xF;
      v39 = 0;
      v38 = 0;
      v56 = v40;
      if (v40 == 2 || v40 == 5)
      {
        v39 = *(_QWORD *)(v51 + 216) + 88 * *(unsigned __int8 *)(v44 + 33);
        v38 = *(_QWORD *)(v39 + 48);
        if (!XZM_FAST_ALIGNED(v41, v38, *(_DWORD *)(v39 + 64)))
        {
          v52 = 0;
          goto LABEL_226;
        }
      }
      else
      {
        v38 = (unint64_t)*(unsigned int *)(v44 + 40) << 14;
        v37 = v41 % v38;
        if (v41 % v38)
        {
          v52 = 0;
          goto LABEL_226;
        }
      }
      v36 = v41 / v38;
      v54 = *(_BYTE *)(v44 + 32) & 0xF;
      v55 = v54 == 2 || v54 == 5;
      v8 = 1;
      if (v55)
        v8 = v36 < *(unsigned int *)(v39 + 68);
      if (!v8)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_ki"
                               "nd) || block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Source"
                               "s/libmalloc_driverkit/src/xzone/xzone_malloc.c:2924)";
        __break(1u);
        JUMPOUT(0x66C50);
      }
      v230 = v51;
      v229 = (unint64_t *)v44;
      v228 = v40;
      v227 = v41;
      v226 = v38;
      v225 = v43;
      if ((*(_BYTE *)(v44 + 32) & 0xF) != v40)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library"
                               "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
        __break(1u);
        JUMPOUT(0x66CC0);
      }
      if (v228 == 2)
      {
        v224 = 0;
        v223 = 0;
        v222 = *(_QWORD *)v225;
        v223 = v222;
        v221 = v222;
        v224 = v222;
        v220 = 0;
        v220 = *(_QWORD *)(v230 + 272) ^ v225;
        if (v222 == v220)
        {
          v219 = 0;
          v219 = _xzm_xzone_tiny_chunk_block_is_free_slow(v230, v229, v225);
          v231 = v219 & 1;
        }
        else
        {
          v231 = 0;
        }
      }
      else if (v228 == 5)
      {
        v218 = v227 / v226;
        v261 = v229;
        v260 = v227 / v226;
        if ((v229[4] & 0xF) != 5)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_"
                                 "CHUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../"
                                 "xzone/xzone_inline_internal.h:921)";
          __break(1u);
          JUMPOUT(0x66DE0);
        }
        v231 = (*(_DWORD *)v261 >> v260) & 1;
      }
      else
      {
        v231 = 0;
      }
      if (v231 == 1)
      {
        v52 = 0;
      }
      else
      {
        if (v49)
          *v49 = v39;
        if (v48)
          *v48 = v43;
        if (v47)
          *v47 = v38;
        v52 = v44;
      }
      goto LABEL_226;
    }
    v52 = 0;
  }
  else
  {
    v52 = 0;
  }
LABEL_226:
  v29 = v52;
  if (v32)
    *v32 = v52;
  if (v29)
  {
    if (v31 == v33)
      v35 = v30;
    else
      v35 = v30 - (v33 - v31);
  }
  else
  {
    v35 = _xzm_ptr_size_outlined(v34, (unint64_t)v33);
  }
  v26 = v35;
LABEL_234:
  if (v26)
  {
    if (v26 >= 0x401 && (*(_BYTE *)(a1 + 296) & 0x20) != 0)
      _platform_memset(a2, 85, v26);
    if (v25)
      xzm_malloc_zone_try_free_default(v25, a2, a3, a4, a5, a6, a7, a8);
    else
      xzm_malloc_zone_try_free_default(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    find_zone_and_free(a2, 1, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t xzm_malloc_zone_malloc_with_options_slow(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  return xzm_malloc_zone_malloc_type_malloc_with_options_slow(a1, a2, a3, a4, *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904));
}

_OWORD *xzm_malloc_zone_malloc_type_malloc_slow(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v12;
  _OWORD *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  char v18;
  unsigned __int8 v19;
  char v20;
  unsigned __int8 v21;

  if ((*(_BYTE *)(a1 + 296) & 0x80) != 0 && a2 <= 0x8000)
  {
    if (*(_QWORD *)(a1 + 232))
      v8 = *(_QWORD *)(a1 + 232);
    else
      v8 = a1;
    if ((*(_BYTE *)(v8 + 296) & 0x80) != 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed (/L"
                             "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
      __break(1u);
      JUMPOUT(0x6715CLL);
    }
    if (*(_QWORD *)(v8 + 232))
      v7 = *(_QWORD *)(v8 + 232);
    else
      v7 = v8;
    if (a2)
    {
      if (a2 > 0x80)
      {
        v20 = 63 - __clz(a2 - 1);
        v21 = (((a2 - 1) >> (v20 - 2)) & 3 | (4 * v20)) - 20;
      }
      else
      {
        if ((a2 & 0xF) != 0)
          v6 = (a2 >> 4) + 1;
        else
          v6 = a2 >> 4;
        v21 = v6 - 1;
      }
    }
    else
    {
      v21 = 0;
    }
    v15 = *(_BYTE *)(*(_QWORD *)(v7 + 360) + v21);
    if (HIWORD(a3) == 256)
    {
      v14 = 0;
    }
    else
    {
      if (((WORD2(a3) >> 10) & 3) != 1)
      {
        if ((v15 - 2) >= 5u)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" fail"
                                 "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
          __break(1u);
          JUMPOUT(0x67410);
        }
        __asm { BR              X8 }
      }
      v14 = 1;
    }
    if (v14 >= (int)v15)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/co"
                             "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
      __break(1u);
      JUMPOUT(0x675A8);
    }
    v13 = _xzm_xzone_malloc(v8, a2, *(_BYTE *)(*(_QWORD *)(v7 + 368) + v21) + v14, 0);
    if (!v13)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                             "bmalloc_driverkit/src/xzone/xzone_malloc.c:2272)";
      __break(1u);
      JUMPOUT(0x67604);
    }
    v9 = v13;
  }
  else
  {
    if (a2 <= 0x8000)
    {
      if ((*(_BYTE *)(a1 + 296) & 0x80) != 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed ("
                               "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
        __break(1u);
        JUMPOUT(0x676E4);
      }
      if (*(_QWORD *)(a1 + 232))
        v5 = *(_QWORD *)(a1 + 232);
      else
        v5 = a1;
      if (a2)
      {
        if (a2 > 0x80)
        {
          v18 = 63 - __clz(a2 - 1);
          v19 = (((a2 - 1) >> (v18 - 2)) & 3 | (4 * v18)) - 20;
        }
        else
        {
          if ((a2 & 0xF) != 0)
            v4 = (a2 >> 4) + 1;
          else
            v4 = a2 >> 4;
          v19 = v4 - 1;
        }
      }
      else
      {
        v19 = 0;
      }
      v17 = *(_BYTE *)(*(_QWORD *)(v5 + 360) + v19);
      if (HIWORD(a3) == 256)
      {
        v16 = 0;
      }
      else
      {
        if (((WORD2(a3) >> 10) & 3) != 1)
        {
          if ((v17 - 2) >= 5u)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" fa"
                                   "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
            __break(1u);
            JUMPOUT(0x67998);
          }
          __asm { BR              X8 }
        }
        v16 = 1;
      }
      if (v16 >= (int)v17)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/"
                               "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
        __break(1u);
        JUMPOUT(0x67B30);
      }
      v12 = (uint64_t)_xzm_xzone_malloc(a1, a2, *(_BYTE *)(*(_QWORD *)(v5 + 368) + v19) + v16, 0);
    }
    else
    {
      v12 = _xzm_malloc_large_huge(a1, a2, 0, a3, 0);
    }
    if (!v12)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                             "bmalloc_driverkit/src/xzone/xzone_malloc.c:2272)";
      __break(1u);
      JUMPOUT(0x67B8CLL);
    }
    v9 = (_OWORD *)v12;
  }
  if ((*(_BYTE *)(a1 + 296) & 0x20) != 0)
    _platform_memset(v9, 170, a2);
  return v9;
}

_OWORD *xzm_malloc_zone_malloc_type_calloc_slow(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v16;
  _OWORD *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  BOOL v29;
  BOOL v30;
  unsigned __int8 v31;
  char v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  BOOL v45;
  BOOL v46;
  unsigned __int8 v47;
  char v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  int v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  unsigned __int8 v65;
  int v66;
  unint64_t v67;
  unsigned __int8 v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  BOOL v79;

  v14 = a1;
  v13 = a2;
  v12 = a3;
  v11 = a4;
  v10 = 0;
  v77 = a2;
  v76 = a3;
  v75 = 0;
  v74 = &v10;
  v73 = a3;
  if (a2 == 1 || (v73 = v77 * v76, !(v79 = !is_mul_ok(v77, v76))) && v73 <= malloc_absolute_max_size)
  {
    *v74 = v73;
    v78 = 0;
  }
  else
  {
    malloc_set_errno_fast(1, 12);
    v78 = -1;
  }
  if (v78)
    return 0;
  if ((*(_BYTE *)(v14 + 296) & 0x80) != 0 && v10 <= 0x8000)
  {
    v62 = v14;
    if (*(_QWORD *)(v14 + 232))
      v7 = *(_QWORD *)(v14 + 232);
    else
      v7 = v62;
    v21 = v11;
    v20 = v7;
    v19 = v10;
    v18 = 1;
    v17 = 0;
    if ((*(_BYTE *)(v7 + 296) & 0x80) != 0)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed (/L"
                             "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
      __break(1u);
      JUMPOUT(0x68428);
    }
    v16 = 0;
    v54 = v21;
    v53 = v20;
    v52 = v19;
    v51 = 0;
    v60 = v20;
    if (*(_QWORD *)(v20 + 232))
      v6 = *(_QWORD *)(v20 + 232);
    else
      v6 = v60;
    v51 = v6;
    v50 = 0;
    v64 = v52;
    if (v52)
    {
      if (v64 > 0x80)
      {
        v63 = 63 - __clz(--v64);
        v65 = ((v64 >> (v63 - 2)) & 3 | (4 * v63)) - 20;
      }
      else
      {
        if ((v64 & 0xF) != 0)
          v5 = (v64 >> 4) + 1;
        else
          v5 = v64 >> 4;
        v65 = v5 - 1;
      }
    }
    else
    {
      v65 = 0;
    }
    v50 = v65;
    v49 = 0;
    v49 = *(_BYTE *)(*(_QWORD *)(v51 + 360) + v65);
    v48 = 0;
    v48 = *(_BYTE *)(*(_QWORD *)(v51 + 368) + v65);
    v47 = 0;
    v70 = v54;
    v69 = HIWORD(v54);
    v46 = HIWORD(v54) == 256;
    if (HIWORD(v54) == 256)
    {
      v47 = 0;
    }
    else
    {
      if (((WORD2(v54) >> 10) & 3) != 1)
      {
        v45 = v54 == 0;
        if (!v54)
          LODWORD(v54) = HIDWORD(malloc_entropy[0]);
        v44 = 0;
        v59 = v54;
        v58 = v51 + 312;
        v57 = v49 - 2;
        if ((v49 - 2) >= 5u)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" fail"
                                 "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
          __break(1u);
          JUMPOUT(0x686DCLL);
        }
        v56 = v59;
        v55 = 0;
        __asm { BR              X8 }
      }
      v47 = 1;
    }
    if (v47 >= (int)v49)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/co"
                             "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
      __break(1u);
      JUMPOUT(0x68874);
    }
    v16 = v48 + v47;
    v17 = _xzm_xzone_malloc(v20, v19, v48 + v47, v18);
    if (!v17)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                             "bmalloc_driverkit/src/xzone/xzone_malloc.c:2272)";
      __break(1u);
      JUMPOUT(0x688D0);
    }
    if ((v18 & 1) != 0 && !_xzm_mem_is_zero((uint64_t)v17, v19))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_mem_is_zero(ptr, size)\" failed (/Library/Caches/"
                             "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2274)";
      __break(1u);
      JUMPOUT(0x68914);
    }
    return v17;
  }
  else
  {
    v27 = v11;
    v26 = v14;
    v25 = v10;
    v24 = 1;
    v23 = 0;
    if (v10 <= 0x8000)
    {
      if ((*(_BYTE *)(v26 + 296) & 0x80) != 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed ("
                               "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
        __break(1u);
        JUMPOUT(0x67E58);
      }
      v22 = 0;
      v38 = v27;
      v37 = v26;
      v36 = v25;
      v35 = 0;
      v61 = v26;
      if (*(_QWORD *)(v26 + 232))
        v9 = *(_QWORD *)(v26 + 232);
      else
        v9 = v61;
      v35 = v9;
      v34 = 0;
      v67 = v36;
      if (v36)
      {
        if (v67 > 0x80)
        {
          if (v67 > 0x8000)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"size <= XZM_SMALL_BLOCK_SIZE_MAX\" failed (/Libr"
                                   "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:36)";
            __break(1u);
            JUMPOUT(0x67F7CLL);
          }
          v66 = 63 - __clz(--v67);
          v68 = ((v67 >> (v66 - 2)) & 3 | (4 * v66)) - 20;
        }
        else
        {
          if ((v67 & 0xF) != 0)
            v8 = (v67 >> 4) + 1;
          else
            v8 = v67 >> 4;
          v68 = v8 - 1;
        }
      }
      else
      {
        v68 = 0;
      }
      v34 = v68;
      v33 = 0;
      v33 = *(_BYTE *)(*(_QWORD *)(v35 + 360) + v68);
      v32 = 0;
      v32 = *(_BYTE *)(*(_QWORD *)(v35 + 368) + v68);
      v31 = 0;
      v72 = v38;
      v71 = HIWORD(v38);
      v30 = HIWORD(v38) == 256;
      if (HIWORD(v38) == 256)
      {
        v31 = 0;
      }
      else
      {
        if (((WORD2(v38) >> 10) & 3) != 1)
        {
          v29 = v38 == 0;
          if (!v38)
            LODWORD(v38) = HIDWORD(malloc_entropy[0]);
          v28 = 0;
          v43 = v38;
          v42 = v35 + 312;
          v41 = v33 - 2;
          if ((v33 - 2) >= 5u)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" fa"
                                   "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
            __break(1u);
            JUMPOUT(0x6810CLL);
          }
          v40 = v43;
          v39 = 0;
          __asm { BR              X8 }
        }
        v31 = 1;
      }
      if (v31 >= (int)v33)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/"
                               "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
        __break(1u);
        JUMPOUT(0x682A4);
      }
      v22 = v32 + v31;
      v23 = (uint64_t)_xzm_xzone_malloc(v26, v25, v32 + v31, v24);
    }
    else
    {
      v23 = _xzm_malloc_large_huge(v26, v25, 0, v27, v24);
    }
    if (!v23)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                             "bmalloc_driverkit/src/xzone/xzone_malloc.c:2272)";
      __break(1u);
      JUMPOUT(0x68300);
    }
    if ((v24 & 1) != 0 && !_xzm_mem_is_zero(v23, v25))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_mem_is_zero(ptr, size)\" failed (/Library/Caches/"
                             "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2274)";
      __break(1u);
      JUMPOUT(0x68344);
    }
    return (_OWORD *)v23;
  }
}

char *xzm_malloc_zone_malloc_type_realloc_slow(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  unint64_t v15;
  BOOL v16;
  BOOL v17;
  char v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  char v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  char v35;
  unint64_t v36;
  int v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  BOOL v45;
  uint64_t v51;
  char *v52;
  unsigned __int8 v53;
  char v54;
  unsigned __int8 v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  unsigned __int8 v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  unint64_t *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  BOOL v105;
  char v106;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  unint64_t v119;
  int64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;
  BOOL v150;
  char v151;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  int v163;
  unint64_t v164;
  int64_t v165;
  unint64_t v166;
  unint64_t v167;
  char *v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  unint64_t *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  char v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  char v194;
  BOOL v195;
  char v196;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  int v208;
  unint64_t v209;
  int64_t v210;
  unint64_t v211;
  unint64_t v212;
  unsigned int *v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unsigned int *v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unsigned int *v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unsigned int v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  BOOL v239;
  int64_t v240;
  unint64_t v241;
  unint64_t v242;
  int64_t v243;
  int64_t v244;
  unint64_t v245;
  unint64_t v246;
  int64_t v247;
  unint64_t v248;
  unint64_t v249;
  int v250;
  unint64_t v251;
  unsigned int v252;
  unint64_t v253;
  int v254;
  unint64_t v255;
  unsigned int v256;
  unint64_t v257;
  int v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unsigned int v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  BOOL v278;
  int64_t v279;
  unint64_t v280;
  unint64_t v281;
  int64_t v282;
  int64_t v283;
  unint64_t v284;
  unint64_t v285;
  int64_t v286;
  unint64_t v287;
  unint64_t v288;
  int v289;
  unint64_t v290;
  unsigned int v291;
  unint64_t v292;
  int v293;
  unint64_t v294;
  unsigned int v295;
  unint64_t v296;
  int v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unsigned int v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  BOOL v317;
  int64_t v318;
  unint64_t v319;
  unint64_t v320;
  int64_t v321;
  int64_t v322;
  unint64_t v323;
  unint64_t v324;
  int64_t v325;
  unint64_t v326;
  unint64_t v327;
  int v328;
  unint64_t v329;
  unsigned int v330;
  unint64_t v331;
  int v332;
  unint64_t v333;
  unsigned int v334;
  unint64_t v335;
  int v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  char is_free_slow;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  char v352;
  unint64_t *v353;
  uint64_t v354;
  char v355;
  unint64_t v356;
  char v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unint64_t v365;
  char v366;
  unint64_t *v367;
  uint64_t v368;
  char v369;
  unint64_t v370;
  char v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  unint64_t v379;
  char v380;
  unint64_t *v381;
  uint64_t v382;
  char v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t *v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  uint64_t *v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  uint64_t *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  unsigned __int8 v418;
  char v419;
  uint64_t v420;
  unsigned __int8 v421;
  char v422;
  uint64_t v423;
  unsigned __int8 v424;
  char v425;
  int v426;
  unint64_t *v427;
  int v428;
  unint64_t *v429;
  int v430;
  unint64_t *v431;

  v45 = (*(_DWORD *)(a1 + 296) & 0x80) != 0;
  v44 = (*(_DWORD *)(a1 + 296) & 0x20) != 0;
  if ((*(_DWORD *)(a1 + 296) & 0x80) == 0 && (*(_DWORD *)(a1 + 296) & 0x20) == 0)
    return (char *)xzm_malloc_zone_malloc_type_realloc(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!a2)
    return (char *)xzm_malloc_zone_malloc_type_malloc_slow(a1, a3, a4);
  if (!a3)
  {
    xzm_malloc_zone_free_slow(a1, a2, 0, a4, a5, a6, a7, a8);
    return (char *)xzm_malloc_zone_malloc_type_malloc_slow(a1, 0, a4);
  }
  v174 = a1;
  v173 = a2;
  v172 = 0;
  v171 = 0;
  v170 = 0;
  v169 = 0;
  v191 = a1;
  v190 = (unint64_t)a2;
  v189 = 0;
  v188 = (uint64_t *)&v171;
  v187 = &v170;
  v186 = 0;
  v193 = a1;
  if (*(_QWORD *)(a1 + 232))
    v40 = *(_QWORD *)(a1 + 232);
  else
    v40 = v193;
  v186 = v40;
  v185 = 0;
  v215 = v40;
  v214 = v190;
  v213 = 0;
  v397 = v190;
  v396 = v40;
  v395 = 0;
  v394 = 0;
  v405 = v190;
  v404 = &v395;
  v403 = v190;
  if (v190 >> 36)
  {
    *v404 = 0;
    v406 = 0x4000;
  }
  else
  {
    v402 = v403 >> 22;
    *v404 = 0;
    if (v402 >= 0x4000)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x68B9CLL);
    }
    v406 = v402;
  }
  v394 = v406;
  if (v406 < 0x4000)
    v398 = *(_QWORD *)(v396 + 408) + 4 * v394;
  else
    v398 = 0;
  v213 = (unsigned int *)v398;
  if (v398)
  {
    v401 = *v213;
    v216 = (unint64_t)v401 << 14;
  }
  else
  {
    v216 = 0;
  }
  v185 = v216;
  if (!v216)
  {
    v192 = 0;
    goto LABEL_114;
  }
  v184 = 0;
  v228 = v185;
  v227 = v190;
  v226 = 0;
  v232 = v185;
  v231 = v190;
  v230 = 0;
  v242 = v185;
  v241 = v190;
  v240 = 0;
  v246 = v185;
  v245 = v190;
  v244 = 0;
  v249 = v185;
  v251 = v185;
  v250 = 0;
  v244 = v190 - *(_QWORD *)(v185 + 80);
  v243 = 0;
  v259 = v185;
  v258 = 0;
  v260 = v185;
  v258 = *(_DWORD *)(v185 + 12);
  if ((unint64_t)v258 << 14)
  {
    v257 = v246;
    v256 = 0;
    v261 = v246;
    v256 = *(_DWORD *)(v246 + 12);
    v255 = v246;
    v254 = 0;
    v262 = v246;
    v254 = *(_DWORD *)(v246 + 12);
    v39 = ((unint64_t)v256 << 14) - ((unint64_t)v254 << 14) + 0x400000;
  }
  else
  {
    v253 = v246;
    v252 = 0;
    v263 = v246;
    v252 = *(_DWORD *)(v246 + 12);
    v39 = (unint64_t)v252 << 14;
  }
  v243 = v39;
  v38 = 0;
  if ((v244 & 0x8000000000000000) == 0)
    v38 = v244 < v243;
  if (!v38)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:438)";
    __break(1u);
    JUMPOUT(0x68E04);
  }
  v240 = v244;
  v248 = v242;
  v247 = v244;
  v230 = (unint64_t)v244 >> 14;
  if (v230 >= *(_DWORD *)(v232 + 16))
    v233 = 0;
  else
    v233 = v232 + 48 * v230 + 2136;
  v226 = v233;
  if (!v233)
  {
    v229 = 0;
    goto LABEL_62;
  }
  v225 = 0;
  v235 = v226;
  if ((*(_BYTE *)(v226 + 32) & 0xF) == 4)
  {
    v234 = 0;
    v234 = v235 - *(unsigned int *)(v235 + 36);
    if (v234 < (v235 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:584)";
      __break(1u);
      JUMPOUT(0x68F24);
    }
    v238 = v234;
    v237 = v235;
    v37 = *(_BYTE *)(v234 + 32) & 0xF;
    if ((v37 - 1) < 2)
    {
      v239 = v238 == v237;
    }
    else if (v37 == 3 || (v37 - 5) < 4)
    {
      if (v237 < v238)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:562)";
        __break(1u);
        JUMPOUT(0x68FC8);
      }
      v239 = v237 < v238 + 48 * *(unsigned int *)(v238 + 40);
    }
    else
    {
      v239 = 0;
    }
    if (v239)
      v236 = v234;
    else
      v236 = v235;
  }
  else
  {
    v236 = v235;
  }
  v225 = v236;
  v424 = *(_BYTE *)(v236 + 32) & 0xF;
  if (v424 >= 2u)
  {
    if (v424 == 2)
    {
LABEL_57:
      v425 = 1;
      goto LABEL_58;
    }
    if (v424 - 3 >= 2)
    {
      if (v424 - 5 >= 3)
      {
        v423 = v424;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v424;
        __break(1u);
        JUMPOUT(0x690ECLL);
      }
      goto LABEL_57;
    }
  }
  v425 = 0;
LABEL_58:
  if (v425 == 1)
    v36 = v225;
  else
    v36 = 0;
  v229 = v36;
LABEL_62:
  v184 = v229;
  if (!v229)
  {
    v192 = 0;
    goto LABEL_114;
  }
  if (*(unsigned __int16 *)(v184 + 34) != *(unsigned __int16 *)(v191 + 208))
  {
    v192 = 0;
    goto LABEL_114;
  }
  v183 = v190;
  v182 = 0;
  v200 = v191;
  v199 = v184;
  v198 = 0;
  v202 = v191;
  v201 = v184;
  v205 = v191;
  v204 = v184;
  v203 = v184 & 0xFFFFFFFFFFFFC000;
  v35 = 1;
  if ((v184 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v34 = 0;
    if (v204 >= v203 + 2136)
      v34 = v204 < v203 + 48 * *(unsigned int *)(v203 + 16) + 2136;
    v35 = v34;
  }
  if ((v35 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x6933CLL);
  }
  v207 = v203;
  v206 = v201;
  v212 = v203;
  v211 = v201;
  if (v201 < v203 + 2136)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x693A0);
  }
  v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v211 - v212 - 2136) >> 4);
  if (v210 >= *(unsigned int *)(v212 + 16))
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x69408);
  }
  v209 = v203;
  v208 = v210;
  v182 = *(_QWORD *)(v203 + 80) + ((unint64_t)v210 << 14);
  v181 = v183 - v182;
  v180 = 0;
  v180 = *(_BYTE *)(v184 + 32) & 0xF;
  v179 = 0;
  v178 = 0;
  v196 = v180;
  if (v180 == 2 || v180 == 5)
  {
    v179 = *(_QWORD *)(v191 + 216) + 88 * *(unsigned __int8 *)(v184 + 33);
    v178 = *(_QWORD *)(v179 + 48);
    if (!XZM_FAST_ALIGNED(v181, v178, *(_DWORD *)(v179 + 64)))
    {
      v192 = 0;
      goto LABEL_114;
    }
  }
  else
  {
    v178 = (unint64_t)*(unsigned int *)(v184 + 40) << 14;
    v177 = v181 % v178;
    if (v181 % v178)
    {
      v192 = 0;
      goto LABEL_114;
    }
  }
  v176 = v181 / v178;
  v194 = *(_BYTE *)(v184 + 32) & 0xF;
  v195 = v194 == 2 || v194 == 5;
  v33 = 1;
  if (v195)
    v33 = v176 < *(unsigned int *)(v179 + 68);
  if (!v33)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_kind) "
                           "|| block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Sources/libmal"
                           "loc_driverkit/src/xzone/xzone_malloc.c:2924)";
    __break(1u);
    JUMPOUT(0x69640);
  }
  v354 = v191;
  v353 = (unint64_t *)v184;
  v352 = v180;
  v351 = v181;
  v350 = v178;
  v349 = v183;
  if ((*(_BYTE *)(v184 + 32) & 0xF) != v180)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library/Cac"
                           "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
    __break(1u);
    JUMPOUT(0x696B0);
  }
  if (v352 == 2)
  {
    v348 = 0;
    v347 = 0;
    v346 = *(_QWORD *)v349;
    v347 = v346;
    v345 = v346;
    v348 = v346;
    v344 = 0;
    v344 = *(_QWORD *)(v354 + 272) ^ v349;
    if (v346 == v344)
    {
      is_free_slow = 0;
      is_free_slow = _xzm_xzone_tiny_chunk_block_is_free_slow(v354, v353, v349);
      v355 = is_free_slow & 1;
    }
    else
    {
      v355 = 0;
    }
  }
  else if (v352 == 5)
  {
    v342 = v351 / v350;
    v431 = v353;
    v430 = v351 / v350;
    if ((v353[4] & 0xF) != 5)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CHUN"
                             "K\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xz"
                             "one_inline_internal.h:921)";
      __break(1u);
      JUMPOUT(0x697D0);
    }
    v355 = (*(_DWORD *)v431 >> v430) & 1;
  }
  else
  {
    v355 = 0;
  }
  if (v355 == 1)
  {
    v192 = 0;
  }
  else
  {
    if (v189)
      *v189 = v179;
    if (v188)
      *v188 = v183;
    if (v187)
      *v187 = v178;
    v192 = v184;
  }
LABEL_114:
  v169 = v192;
  if (v172)
    *v172 = v169;
  if (v169)
  {
    if (v171 == v173)
    {
      v175 = v170;
    }
    else
    {
      v168 = (char *)(v173 - v171);
      v175 = v170 - (v173 - v171);
    }
  }
  else
  {
    v175 = _xzm_ptr_size_outlined(v174, (unint64_t)v173);
  }
  v43 = v175;
  v42 = 0;
  if (!v175 && v45)
  {
    v69 = a1;
    if (*(_QWORD *)(a1 + 232))
      v32 = *(_QWORD *)(a1 + 232);
    else
      v32 = v69;
    v42 = v32;
    v129 = v32;
    v128 = a2;
    v127 = 0;
    v126 = 0;
    v125 = 0;
    v124 = 0;
    v146 = v32;
    v145 = (unint64_t)a2;
    v144 = 0;
    v143 = (uint64_t *)&v126;
    v142 = &v125;
    v141 = 0;
    v148 = v32;
    if (*(_QWORD *)(v32 + 232))
      v31 = *(_QWORD *)(v32 + 232);
    else
      v31 = v148;
    v141 = v31;
    v140 = 0;
    v219 = v31;
    v218 = v145;
    v217 = 0;
    v392 = v145;
    v391 = v31;
    v390 = 0;
    v389 = 0;
    v410 = v145;
    v409 = &v390;
    v408 = v145;
    if (v145 >> 36)
    {
      *v409 = 0;
      v411 = 0x4000;
    }
    else
    {
      v407 = v408 >> 22;
      *v409 = 0;
      if (v407 >= 0x4000)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Libr"
                               "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
        __break(1u);
        JUMPOUT(0x69AD0);
      }
      v411 = v407;
    }
    v389 = v411;
    if (v411 < 0x4000)
      v393 = *(_QWORD *)(v391 + 408) + 4 * v389;
    else
      v393 = 0;
    v217 = (unsigned int *)v393;
    if (v393)
    {
      v400 = *v217;
      v220 = (unint64_t)v400 << 14;
    }
    else
    {
      v220 = 0;
    }
    v140 = v220;
    if (!v220)
    {
      v147 = 0;
      goto LABEL_232;
    }
    v139 = 0;
    v267 = v140;
    v266 = v145;
    v265 = 0;
    v271 = v140;
    v270 = v145;
    v269 = 0;
    v281 = v140;
    v280 = v145;
    v279 = 0;
    v285 = v140;
    v284 = v145;
    v283 = 0;
    v288 = v140;
    v290 = v140;
    v289 = 0;
    v283 = v145 - *(_QWORD *)(v140 + 80);
    v282 = 0;
    v298 = v140;
    v297 = 0;
    v299 = v140;
    v297 = *(_DWORD *)(v140 + 12);
    if ((unint64_t)v297 << 14)
    {
      v296 = v285;
      v295 = 0;
      v300 = v285;
      v295 = *(_DWORD *)(v285 + 12);
      v294 = v285;
      v293 = 0;
      v301 = v285;
      v293 = *(_DWORD *)(v285 + 12);
      v30 = ((unint64_t)v295 << 14) - ((unint64_t)v293 << 14) + 0x400000;
    }
    else
    {
      v292 = v285;
      v291 = 0;
      v302 = v285;
      v291 = *(_DWORD *)(v285 + 12);
      v30 = (unint64_t)v291 << 14;
    }
    v282 = v30;
    v29 = 0;
    if ((v283 & 0x8000000000000000) == 0)
      v29 = v283 < v282;
    if (!v29)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed ("
                             "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:438)";
      __break(1u);
      JUMPOUT(0x69D38);
    }
    v279 = v283;
    v287 = v281;
    v286 = v283;
    v269 = (unint64_t)v283 >> 14;
    if (v269 >= *(_DWORD *)(v271 + 16))
      v272 = 0;
    else
      v272 = v271 + 48 * v269 + 2136;
    v265 = v272;
    if (!v272)
    {
      v268 = 0;
      goto LABEL_180;
    }
    v264 = 0;
    v274 = v265;
    if ((*(_BYTE *)(v265 + 32) & 0xF) == 4)
    {
      v273 = 0;
      v273 = v274 - *(unsigned int *)(v274 + 36);
      if (v273 < (v274 & 0xFFFFFFFFFFFFC000 | 0x858))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(X"
                               "ZM_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs"
                               "/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:584)";
        __break(1u);
        JUMPOUT(0x69E58);
      }
      v277 = v273;
      v276 = v274;
      v28 = *(_BYTE *)(v273 + 32) & 0xF;
      if ((v28 - 1) < 2)
      {
        v278 = v277 == v276;
      }
      else if (v28 == 3 || (v28 - 5) < 4)
      {
        if (v276 < v277)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple."
                                 "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:562)";
          __break(1u);
          JUMPOUT(0x69EFCLL);
        }
        v278 = v276 < v277 + 48 * *(unsigned int *)(v277 + 40);
      }
      else
      {
        v278 = 0;
      }
      if (v278)
        v275 = v273;
      else
        v275 = v274;
    }
    else
    {
      v275 = v274;
    }
    v264 = v275;
    v421 = *(_BYTE *)(v275 + 32) & 0xF;
    if (v421 >= 2u)
    {
      if (v421 == 2)
      {
LABEL_175:
        v422 = 1;
        goto LABEL_176;
      }
      if (v421 - 3 >= 2)
      {
        if (v421 - 5 >= 3)
        {
          v420 = v421;
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
          qword_A4038 = v421;
          __break(1u);
          JUMPOUT(0x6A020);
        }
        goto LABEL_175;
      }
    }
    v422 = 0;
LABEL_176:
    if (v422 == 1)
      v27 = v264;
    else
      v27 = 0;
    v268 = v27;
LABEL_180:
    v139 = v268;
    if (v268)
    {
      if (*(unsigned __int16 *)(v139 + 34) == *(unsigned __int16 *)(v146 + 208))
      {
        v138 = v145;
        v137 = 0;
        v155 = v146;
        v154 = v139;
        v153 = 0;
        v157 = v146;
        v156 = v139;
        v160 = v146;
        v159 = v139;
        v158 = v139 & 0xFFFFFFFFFFFFC000;
        v26 = 1;
        if ((v139 & 0xFFFFFFFFFFFFC000) != 0)
        {
          v25 = 0;
          if (v159 >= v158 + 2136)
            v25 = v159 < v158 + 48 * *(unsigned int *)(v158 + 16) + 2136;
          v26 = v25;
        }
        if ((v26 & 1) == 0)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice"
                                 " < (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/co"
                                 "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
          __break(1u);
          JUMPOUT(0x6A270);
        }
        v162 = v158;
        v161 = v156;
        v167 = v158;
        v166 = v156;
        if (v156 < v158 + 2136)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices"
                                 "\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone"
                                 "/xzone_inline_internal.h:278)";
          __break(1u);
          JUMPOUT(0x6A2D4);
        }
        v165 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v166 - v167 - 2136) >> 4);
        if (v165 >= *(unsigned int *)(v167 + 16))
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\""
                                 " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/x"
                                 "zone_inline_internal.h:280)";
          __break(1u);
          JUMPOUT(0x6A33CLL);
        }
        v164 = v158;
        v163 = v165;
        v137 = *(_QWORD *)(v158 + 80) + ((unint64_t)v165 << 14);
        v136 = v138 - v137;
        v135 = 0;
        v135 = *(_BYTE *)(v139 + 32) & 0xF;
        v134 = 0;
        v133 = 0;
        v151 = v135;
        if (v135 == 2 || v135 == 5)
        {
          v134 = *(_QWORD *)(v146 + 216) + 88 * *(unsigned __int8 *)(v139 + 33);
          v133 = *(_QWORD *)(v134 + 48);
          if (!XZM_FAST_ALIGNED(v136, v133, *(_DWORD *)(v134 + 64)))
          {
            v147 = 0;
            goto LABEL_232;
          }
        }
        else
        {
          v133 = (unint64_t)*(unsigned int *)(v139 + 40) << 14;
          v132 = v136 % v133;
          if (v136 % v133)
          {
            v147 = 0;
            goto LABEL_232;
          }
        }
        v131 = v136 / v133;
        v149 = *(_BYTE *)(v139 + 32) & 0xF;
        v150 = v149 == 2 || v149 == 5;
        v24 = 1;
        if (v150)
          v24 = v131 < *(unsigned int *)(v134 + 68);
        if (!v24)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_"
                                 "kind) || block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/So"
                                 "urces/libmalloc_driverkit/src/xzone/xzone_malloc.c:2924)";
          __break(1u);
          JUMPOUT(0x6A574);
        }
        v368 = v146;
        v367 = (unint64_t *)v139;
        v366 = v135;
        v365 = v136;
        v364 = v133;
        v363 = v138;
        if ((*(_BYTE *)(v139 + 32) & 0xF) != v135)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Libra"
                                 "ry/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
          __break(1u);
          JUMPOUT(0x6A5E4);
        }
        if (v366 == 2)
        {
          v362 = 0;
          v361 = 0;
          v360 = *(_QWORD *)v363;
          v361 = v360;
          v359 = v360;
          v362 = v360;
          v358 = 0;
          v358 = *(_QWORD *)(v368 + 272) ^ v363;
          if (v360 == v358)
          {
            v357 = 0;
            v357 = _xzm_xzone_tiny_chunk_block_is_free_slow(v368, v367, v363);
            v369 = v357 & 1;
          }
          else
          {
            v369 = 0;
          }
        }
        else if (v366 == 5)
        {
          v356 = v365 / v364;
          v429 = v367;
          v428 = v365 / v364;
          if ((v367[4] & 0xF) != 5)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMAL"
                                   "L_CHUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone"
                                   "/../xzone/xzone_inline_internal.h:921)";
            __break(1u);
            JUMPOUT(0x6A704);
          }
          v369 = (*(_DWORD *)v429 >> v428) & 1;
        }
        else
        {
          v369 = 0;
        }
        if (v369 == 1)
        {
          v147 = 0;
        }
        else
        {
          if (v144)
            *v144 = v134;
          if (v143)
            *v143 = v138;
          if (v142)
            *v142 = v133;
          v147 = v139;
        }
        goto LABEL_232;
      }
      v147 = 0;
    }
    else
    {
      v147 = 0;
    }
LABEL_232:
    v124 = v147;
    if (v127)
      *v127 = v124;
    if (v124)
    {
      if (v126 == v128)
      {
        v130 = v125;
      }
      else
      {
        v123 = (char *)(v128 - v126);
        v130 = v125 - (v128 - v126);
      }
    }
    else
    {
      v130 = _xzm_ptr_size_outlined(v129, (unint64_t)v128);
    }
    v43 = v130;
  }
  if (!v43)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_size\" failed (/Library/Caches/com.apple.xbs/Sources"
                           "/libmalloc_driverkit/src/xzone/xzone_malloc.c:3472)";
    __break(1u);
    JUMPOUT(0x6A87CLL);
  }
  if (v43 > a3 && v44)
    _platform_memset(&a2[a3], 85, v43 - a3);
  if (v45 && (v42 || a3 <= 0x8000) && (!v42 || a3 > 0x8000))
  {
    if (a3 > 0x8000)
    {
      v51 = _xzm_malloc_large_huge(a1, a3, 0, a4, 0);
      if (!v51)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/"
                               "libmalloc_driverkit/src/xzone/xzone_malloc.c:2272)";
        __break(1u);
        JUMPOUT(0x6C6ECLL);
      }
      v41 = (char *)v51;
    }
    else
    {
      v68 = a1;
      if (*(_QWORD *)(a1 + 232))
        v12 = *(_QWORD *)(a1 + 232);
      else
        v12 = v68;
      if ((*(_BYTE *)(v12 + 296) & 0x80) != 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed ("
                               "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
        __break(1u);
        JUMPOUT(0x6BCBCLL);
      }
      v67 = v12;
      if (*(_QWORD *)(v12 + 232))
        v11 = *(_QWORD *)(v12 + 232);
      else
        v11 = v67;
      v71 = a3;
      if (a3 > 0x80)
      {
        v8 = __clz(--v71);
        v70 = 63 - v8;
        v72 = ((v71 >> (61 - v8)) & 3 | (4 * (63 - v8))) - 20;
      }
      else
      {
        if ((v71 & 0xF) != 0)
          v10 = (v71 >> 4) + 1;
        else
          v10 = v71 >> 4;
        v72 = v10 - 1;
      }
      v55 = *(_BYTE *)(*(_QWORD *)(v11 + 360) + v72);
      v54 = *(_BYTE *)(*(_QWORD *)(v11 + 368) + v72);
      v77 = a4;
      v76 = HIWORD(a4);
      if (HIWORD(a4) == 256)
      {
        v53 = 0;
      }
      else
      {
        if (((WORD2(a4) >> 10) & 3) != 1)
        {
          if ((v55 - 2) >= 5u)
          {
            qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" fa"
                                   "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
            __break(1u);
            JUMPOUT(0x6BF70);
          }
          __asm { BR              X8 }
        }
        v53 = 1;
      }
      if (v53 >= (int)v55)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/"
                               "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
        __break(1u);
        JUMPOUT(0x6C108);
      }
      v52 = (char *)_xzm_xzone_malloc(v12, a3, v54 + v53, 0);
      if (!v52)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/"
                               "libmalloc_driverkit/src/xzone/xzone_malloc.c:2272)";
        __break(1u);
        JUMPOUT(0x6C164);
      }
      v41 = v52;
    }
    if (v43 >= a3)
      _platform_memmove(v41, a2, a3);
    else
      _platform_memmove(v41, a2, v43);
    goto LABEL_433;
  }
  v65 = a4;
  v64 = a1;
  v63 = (uint64_t)a2;
  v62 = a3;
  v61 = 0;
  v84 = a1;
  v83 = a2;
  v82 = &v61;
  v81 = 0;
  v80 = 0;
  v79 = 0;
  v101 = a1;
  v100 = (unint64_t)a2;
  v99 = 0;
  v98 = (uint64_t *)&v81;
  v97 = &v80;
  v96 = 0;
  v103 = a1;
  if (*(_QWORD *)(a1 + 232))
    v23 = *(_QWORD *)(v64 + 232);
  else
    v23 = v103;
  v96 = v23;
  v95 = 0;
  v223 = v23;
  v222 = v100;
  v221 = 0;
  v387 = v100;
  v386 = v23;
  v385 = 0;
  v384 = 0;
  v415 = v100;
  v414 = &v385;
  v413 = v100;
  if (v100 >> 36)
  {
    *v414 = 0;
    v416 = 0x4000;
  }
  else
  {
    v412 = v413 >> 22;
    *v414 = 0;
    if (v412 >= 0x4000)
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x6AAECLL);
    }
    v416 = v412;
  }
  v384 = v416;
  if (v416 < 0x4000)
    v388 = *(_QWORD *)(v386 + 408) + 4 * v384;
  else
    v388 = 0;
  v221 = (unsigned int *)v388;
  if (v388)
  {
    v399 = *v221;
    v224 = (unint64_t)v399 << 14;
  }
  else
  {
    v224 = 0;
  }
  v95 = v224;
  if (!v224)
  {
    v102 = 0;
    goto LABEL_356;
  }
  v94 = 0;
  v306 = v95;
  v305 = v100;
  v304 = 0;
  v310 = v95;
  v309 = v100;
  v308 = 0;
  v320 = v95;
  v319 = v100;
  v318 = 0;
  v324 = v95;
  v323 = v100;
  v322 = 0;
  v327 = v95;
  v329 = v95;
  v328 = 0;
  v322 = v100 - *(_QWORD *)(v95 + 80);
  v321 = 0;
  v337 = v95;
  v336 = 0;
  v338 = v95;
  v336 = *(_DWORD *)(v95 + 12);
  if ((unint64_t)v336 << 14)
  {
    v335 = v324;
    v334 = 0;
    v339 = v324;
    v334 = *(_DWORD *)(v324 + 12);
    v333 = v324;
    v332 = 0;
    v340 = v324;
    v332 = *(_DWORD *)(v324 + 12);
    v22 = ((unint64_t)v334 << 14) - ((unint64_t)v332 << 14) + 0x400000;
  }
  else
  {
    v331 = v324;
    v330 = 0;
    v341 = v324;
    v330 = *(_DWORD *)(v324 + 12);
    v22 = (unint64_t)v330 << 14;
  }
  v321 = v22;
  v21 = 0;
  if ((v322 & 0x8000000000000000) == 0)
    v21 = v322 < v321;
  if (!v21)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:438)";
    __break(1u);
    JUMPOUT(0x6AD54);
  }
  v318 = v322;
  v326 = v320;
  v325 = v322;
  v308 = (unint64_t)v322 >> 14;
  if (v308 >= *(_DWORD *)(v310 + 16))
    v311 = 0;
  else
    v311 = v310 + 48 * v308 + 2136;
  v304 = v311;
  if (!v311)
  {
    v307 = 0;
    goto LABEL_304;
  }
  v303 = 0;
  v313 = v304;
  if ((*(_BYTE *)(v304 + 32) & 0xF) == 4)
  {
    v312 = 0;
    v312 = v313 - *(unsigned int *)(v313 + 36);
    if (v312 < (v313 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:584)";
      __break(1u);
      JUMPOUT(0x6AE74);
    }
    v316 = v312;
    v315 = v313;
    v20 = *(_BYTE *)(v312 + 32) & 0xF;
    if ((v20 - 1) < 2)
    {
      v317 = v316 == v315;
    }
    else if (v20 == 3 || (v20 - 5) < 4)
    {
      if (v315 < v316)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:562)";
        __break(1u);
        JUMPOUT(0x6AF18);
      }
      v317 = v315 < v316 + 48 * *(unsigned int *)(v316 + 40);
    }
    else
    {
      v317 = 0;
    }
    if (v317)
      v314 = v312;
    else
      v314 = v313;
  }
  else
  {
    v314 = v313;
  }
  v303 = v314;
  v418 = *(_BYTE *)(v314 + 32) & 0xF;
  if (v418 >= 2u)
  {
    if (v418 == 2)
    {
LABEL_299:
      v419 = 1;
      goto LABEL_300;
    }
    if (v418 - 3 >= 2)
    {
      if (v418 - 5 >= 3)
      {
        v417 = v418;
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_A4038 = v418;
        __break(1u);
        JUMPOUT(0x6B03CLL);
      }
      goto LABEL_299;
    }
  }
  v419 = 0;
LABEL_300:
  if (v419 == 1)
    v19 = v303;
  else
    v19 = 0;
  v307 = v19;
LABEL_304:
  v94 = v307;
  if (v307)
  {
    if (*(unsigned __int16 *)(v94 + 34) == *(unsigned __int16 *)(v101 + 208))
    {
      v93 = v100;
      v92 = 0;
      v110 = v101;
      v109 = v94;
      v108 = 0;
      v112 = v101;
      v111 = v94;
      v115 = v101;
      v114 = v94;
      v113 = v94 & 0xFFFFFFFFFFFFC000;
      v18 = 1;
      if ((v94 & 0xFFFFFFFFFFFFC000) != 0)
      {
        v17 = 0;
        if (v114 >= v113 + 2136)
          v17 = v114 < v113 + 48 * *(unsigned int *)(v113 + 16) + 2136;
        v18 = v17;
      }
      if ((v18 & 1) == 0)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x6B28CLL);
      }
      v117 = v113;
      v116 = v111;
      v122 = v113;
      v121 = v111;
      if (v111 < v113 + 2136)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x6B2F0);
      }
      v120 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v121 - v122 - 2136) >> 4);
      if (v120 >= *(unsigned int *)(v122 + 16))
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x6B358);
      }
      v119 = v113;
      v118 = v120;
      v92 = *(_QWORD *)(v113 + 80) + ((unint64_t)v120 << 14);
      v91 = v93 - v92;
      v90 = 0;
      v90 = *(_BYTE *)(v94 + 32) & 0xF;
      v89 = 0;
      v88 = 0;
      v106 = v90;
      if (v90 == 2 || v90 == 5)
      {
        v89 = *(_QWORD *)(v101 + 216) + 88 * *(unsigned __int8 *)(v94 + 33);
        v88 = *(_QWORD *)(v89 + 48);
        if (!XZM_FAST_ALIGNED(v91, v88, *(_DWORD *)(v89 + 64)))
        {
          v102 = 0;
          goto LABEL_356;
        }
      }
      else
      {
        v88 = (unint64_t)*(unsigned int *)(v94 + 40) << 14;
        v87 = v91 % v88;
        if (v91 % v88)
        {
          v102 = 0;
          goto LABEL_356;
        }
      }
      v86 = v91 / v88;
      v104 = *(_BYTE *)(v94 + 32) & 0xF;
      v105 = v104 == 2 || v104 == 5;
      v16 = 1;
      if (v105)
        v16 = v86 < *(unsigned int *)(v89 + 68);
      if (!v16)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_ki"
                               "nd) || block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Source"
                               "s/libmalloc_driverkit/src/xzone/xzone_malloc.c:2924)";
        __break(1u);
        JUMPOUT(0x6B590);
      }
      v382 = v101;
      v381 = (unint64_t *)v94;
      v380 = v90;
      v379 = v91;
      v378 = v88;
      v377 = v93;
      if ((*(_BYTE *)(v94 + 32) & 0xF) != v90)
      {
        qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library"
                               "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
        __break(1u);
        JUMPOUT(0x6B600);
      }
      if (v380 == 2)
      {
        v376 = 0;
        v375 = 0;
        v374 = *(_QWORD *)v377;
        v375 = v374;
        v373 = v374;
        v376 = v374;
        v372 = 0;
        v372 = *(_QWORD *)(v382 + 272) ^ v377;
        if (v374 == v372)
        {
          v371 = 0;
          v371 = _xzm_xzone_tiny_chunk_block_is_free_slow(v382, v381, v377);
          v383 = v371 & 1;
        }
        else
        {
          v383 = 0;
        }
      }
      else if (v380 == 5)
      {
        v370 = v379 / v378;
        v427 = v381;
        v426 = v379 / v378;
        if ((v381[4] & 0xF) != 5)
        {
          qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_"
                                 "CHUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../"
                                 "xzone/xzone_inline_internal.h:921)";
          __break(1u);
          JUMPOUT(0x6B720);
        }
        v383 = (*(_DWORD *)v427 >> v426) & 1;
      }
      else
      {
        v383 = 0;
      }
      if (v383 == 1)
      {
        v102 = 0;
      }
      else
      {
        if (v99)
          *v99 = v89;
        if (v98)
          *v98 = v93;
        if (v97)
          *v97 = v88;
        v102 = v94;
      }
      goto LABEL_356;
    }
    v102 = 0;
  }
  else
  {
    v102 = 0;
  }
LABEL_356:
  v79 = v102;
  if (v82)
    *v82 = v79;
  if (v79)
  {
    if (v81 == v83)
    {
      v85 = v80;
    }
    else
    {
      v78 = (char *)(v83 - v81);
      v85 = v80 - (v83 - v81);
    }
  }
  else
  {
    v85 = _xzm_ptr_size_outlined(v84, (unint64_t)v83);
  }
  v60 = v85;
  v59 = v63;
  if (v61 && *(unsigned __int16 *)(v61 + 34) != *(unsigned __int16 *)(v64 + 208))
  {
    qword_A4008 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: pointer being reallocated with wrong zone";
    qword_A4038 = v63;
    __break(1u);
    JUMPOUT(0x6B8D8);
  }
  if (!v61 || v85 <= 0x8000 || v62 <= 0x8000)
    goto LABEL_391;
  if ((v62 & 0x3FFF) != 0)
    v15 = (v62 & 0xFFFFFFFFFFFFC000) + 0x4000;
  else
    v15 = v62;
  v58 = v15 >> 14;
  v75 = v64;
  v74 = v61;
  v73 = v61 & 0xFFFFFFFFFFFFC000;
  v14 = 1;
  if ((v61 & 0xFFFFFFFFFFFFC000) != 0)
  {
    v13 = 0;
    if (v74 >= v73 + 2136)
      v13 = v74 < v73 + 48 * *(unsigned int *)(v73 + 16) + 2136;
    v14 = v13;
  }
  if ((v14 & 1) == 0)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x6BA18);
  }
  if (!v73)
  {
    qword_A4008 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment != NULL\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3066)";
    __break(1u);
    JUMPOUT(0x6BA50);
  }
  v57 = 0;
  if (v85 <= 0x200000 || v62 <= 0x200000 || (*(_BYTE *)(v64 + 296) & 0x80) != 0)
  {
    if (v85 <= 0x200000 && v62 <= 0x200000 && (*(_BYTE *)(v64 + 296) & 0x80) == 0)
      v57 = xzm_segment_group_try_realloc_large_chunk(*(os_unfair_lock_s **)v73, v73, v61, v58);
  }
  else
  {
    v57 = xzm_segment_group_try_realloc_huge_chunk(*(_QWORD *)v73, v64, v73, v61, v58, a6, a7, a8);
  }
  if ((v57 & 1) != 0)
  {
    v66 = v59;
  }
  else
  {
LABEL_391:
    if (v62 > v60 || v62 < v60 >> 1)
    {
      v56 = xzm_malloc(v64, v62, v65, 0);
      if (v56)
      {
        if (v60 >= v62)
          _platform_memmove(v56, v59, v62);
        else
          _platform_memmove(v56, v59, v60);
        v66 = v56;
      }
      else
      {
        v66 = 0;
      }
    }
    else
    {
      v66 = v59;
    }
  }
  v41 = (char *)v66;
LABEL_433:
  if (v41)
  {
    if (a3 > v43 && v44)
      _platform_memset(&v41[v43], 170, a3 - v43);
    if (v41 != a2)
    {
      if (v43 > a3 && v44)
      {
        _platform_memset(a2, 85, a3);
      }
      else if (v44)
      {
        _platform_memset(a2, 85, v43);
      }
      if (v42)
        _xzm_free(v42, a2, 0, a4, a5, a6, a7, a8);
      else
        _xzm_free(a1, a2, 0, a4, a5, a6, a7, a8);
    }
  }
  return v41;
}

uint64_t xzm_malloc_zone_malloc_type_memalign_slow(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  if ((*(_QWORD *)(a1 + 296) & 0x80) != 0 && a3 <= 0x8000)
  {
    if (*(_QWORD *)(a1 + 232))
      v5 = *(_QWORD *)(a1 + 232);
    else
      v5 = a1;
    v6 = xzm_malloc_zone_malloc_type_memalign(v5, a2, a3, a4);
  }
  else
  {
    v6 = xzm_malloc_zone_malloc_type_memalign(a1, a2, a3, a4);
  }
  if (v6 && (*(_QWORD *)(a1 + 296) & 0x20) != 0)
    _platform_memset(v6, 170, a3);
  return v6;
}

uint64_t xzm_malloc_zone_malloc_type_malloc_with_options_slow(uint64_t a1, unint64_t a2, unint64_t a3, char a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  if ((*(_QWORD *)(a1 + 296) & 0x80) != 0 && a3 <= 0x8000)
  {
    if (*(_QWORD *)(a1 + 232))
      v6 = *(_QWORD *)(a1 + 232);
    else
      v6 = a1;
    v7 = xzm_malloc_zone_malloc_type_malloc_with_options(v6, a2, a3, a4, a5);
  }
  else
  {
    v7 = xzm_malloc_zone_malloc_type_malloc_with_options(a1, a2, a3, a4, a5);
  }
  if (v7 && (a4 & 1) == 0 && (*(_QWORD *)(a1 + 296) & 0x20) != 0)
    _platform_memset(v7, 170, a3);
  return v7;
}

void malloc_slowpath_update()
{
  char v0;

  v0 = 1;
  if ((has_injected_zone0 & 1) == 0)
  {
    v0 = 1;
    if (malloc_num_zones)
    {
      v0 = 1;
      if (!malloc_check_start)
      {
        v0 = 1;
        if (!lite_zone)
        {
          v0 = 1;
          if ((malloc_tracing_enabled & 1) == 0)
          {
            v0 = 1;
            if ((malloc_simple_stack_logging & 1) == 0)
            {
              v0 = 1;
              if ((malloc_debug_flags & 0x20) == 0)
                v0 = malloc_interposition_compat;
            }
          }
        }
      }
    }
  }
  if ((malloc_slowpath & 1) != (v0 & 1))
    malloc_slowpath = v0 & 1;
}

void __malloc_init(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  vm_size_t v10;
  int v11;
  uint64_t v12;
  uint64_t *i;
  BOOL v14;
  size_t v15;
  BOOL v16;
  uint64_t *v17;
  _BYTE v18[1024];

  v17 = (uint64_t *)a1;
  bzero(v18, 0x400uLL);
  v16 = MEMORY[0xFFFFF4084] != 0;
  v15 = 1023;
  if (MEMORY[0xFFFFF4084] && !sysctlbyname("kern.bootargs", v18, &v15, 0, 0) && v15)
    v18[v15 + 1] = 0;
  if (vm_kernel_page_size <= vm_page_size)
    v10 = vm_page_size;
  else
    v10 = vm_kernel_page_size;
  malloc_absolute_max_size = -1 - 2 * v10;
  v14 = _malloc_allow_internal_security_policy();
  if (v14 != (malloc_internal_security_policy & 1))
    malloc_internal_security_policy = v14;
  _malloc_init_featureflags();
  v12 = 0;
  for (i = v17; ; ++i)
  {
    v9 = 0;
    if (i)
      v9 = *i != 0;
    if (!v9)
      break;
    if (_platform_strstr(*i, "malloc_entropy") == *i)
    {
      v11 = __entropy_from_kernel(*i);
      v8 = *i;
      v1 = _platform_strlen(*i);
      _platform_bzero(v8, v1);
      if (v11 == 2)
        _malloc_entropy_initialized = 1;
    }
    if (_platform_strstr(*i, "MallocExperiment=") == *i)
      v12 = *i;
    if (_platform_strstr(*i, "MallocDeferredReclaim=1") == *i)
      large_cache_enabled = 1;
  }
  if ((_malloc_entropy_initialized & 1) == 0)
  {
    getentropy(malloc_entropy, 0x10uLL);
    _malloc_entropy_initialized = 1;
  }
  if (v12)
    __malloc_init_experiments(v12);
  __malloc_init_from_bootargs(v18);
  mvm_aslr_init();
  j__malloc_default_zone();
  _malloc_initialize((uint64_t)v17, v18, v2, v3, v4, v5, v6, v7);
}

uint64_t __entropy_from_kernel(uint64_t a1)
{
  BOOL v2;
  unsigned int v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v8[20];

  v3 = 0;
  v5 = _platform_strchr(a1, 61);
  if (v5)
  {
    v6 = v5 + 1;
    while (1)
    {
      v2 = 0;
      if (v6)
        v2 = (unint64_t)(int)v3 < 2;
      if (!v2)
        break;
      _platform_strlcpy();
      v4 = (_BYTE *)_platform_strchr(v8, 44);
      if (v4)
        *v4 = 0;
      malloc_entropy[v3++] = strtoull_l(v8, 0, 0, 0);
      v6 = _platform_strchr(v6, 44);
      if (v6)
        ++v6;
    }
    return v3;
  }
  else
  {
    return 0;
  }
}

unint64_t __malloc_init_experiments(uint64_t a1)
{
  unint64_t result;
  unint64_t v2;

  v2 = 0;
  result = _platform_strchr(a1, 61);
  if (result)
  {
    result = strtoull_l((const char *)(result + 1), 0, 16, 0);
    v2 = result;
  }
  if (v2 == 1)
    magazine_medium_enabled = 0;
  return result;
}

void __malloc_init_from_bootargs(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  char *v42;
  _BYTE *v43;
  _BYTE v44[256];

  v43 = a1;
  v42 = malloc_common_value_for_key_copy(a1, (uint64_t)"malloc_max_magazines", v44, 0x100uLL);
  if (v42)
  {
    v41 = 0;
    v40 = malloc_common_convert_to_long(v42, &v41);
    if (*v41 || v40 < 0)
      malloc_report(3, (uint64_t)"malloc_max_magazines must be positive - ignored.\n", v1, v2, v3, v4, v5, v6, v31);
    else
      max_magazines = v40;
  }
  v42 = malloc_common_value_for_key_copy(v43, (uint64_t)"malloc_large_expanded_cache_threshold", v44, 0x100uLL);
  if (v42)
  {
    v39 = 0;
    v38 = malloc_common_convert_to_long(v42, &v39);
    if (*v39 || v38 < 0)
      malloc_report(3, (uint64_t)"malloc_large_expanded_cache_threshold must be positive - ignored.\n", v7, v8, v9, v10, v11, v12, v31);
    else
      magazine_large_expanded_cache_threshold = v38;
  }
  v42 = malloc_common_value_for_key_copy(v43, (uint64_t)"malloc_zero_on_free_enabled", v44, 0x100uLL);
  if (v42)
  {
    v37 = 0;
    v36 = malloc_common_convert_to_long(v42, &v37);
    if (*v37 || v36 > 1)
      malloc_report(3, (uint64_t)"malloc_zero_on_free_enabled must be 0 or 1 - ignored.\n", v13, v14, v15, v16, v17, v18, v31);
    else
      malloc_zero_policy = v36 == 0;
  }
  v42 = malloc_common_value_for_key_copy(v43, (uint64_t)"malloc_zero_on_free_sample_period", v44, 0x100uLL);
  if (v42)
  {
    v35 = 0;
    v34 = malloc_common_convert_to_long(v42, &v35);
    if (*v35 || v34 < 0)
      malloc_report(3, (uint64_t)"malloc_zero_on_free_sample_period must be positive - ignored.\n", v19, v20, v21, v22, v23, v24, v31);
    else
      malloc_zero_on_free_sample_period = v34;
  }
  v42 = malloc_common_value_for_key_copy(v43, (uint64_t)"malloc_secure_allocator", v44, 0x100uLL);
  if (v42)
  {
    v33 = 0;
    v32 = malloc_common_convert_to_long(v42, &v33);
    if (*v33 || v32 > 1)
      malloc_report(3, (uint64_t)"malloc_secure_allocator must be 0 or 1 - ignored.\n", v25, v26, v27, v28, v29, v30, v31);
    else
      malloc_xzone_enabled = v32 != 0;
  }
}

void _malloc_initialize(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  malloc_zone_t *v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  void *zone;
  char v52;
  char v53;
  char **v54;

  phys_ncpus = MEMORY[0xFFFFFC035];
  logical_ncpus = MEMORY[0xFFFFFC036];
  ncpuclusters = MEMORY[0xFFFFFC02F];
  if (MEMORY[0xFFFFFC036] % MEMORY[0xFFFFFC035])
  {
    malloc_report(3, (uint64_t)"*** FATAL ERROR - logical_ncpus %% phys_ncpus != 0\n.\n", a3, a4, a5, a6, a7, a8, v44);
    qword_A4008 = (uint64_t)"FATAL ERROR - logical_ncpus %% phys_ncpus != 0\n";
    qword_A4038 = logical_ncpus % phys_ncpus;
    __break(1u);
    JUMPOUT(0x6D6D4);
  }
  v49 = logical_ncpus / phys_ncpus;
  if (logical_ncpus / phys_ncpus == 1)
  {
    hyper_shift = 0;
  }
  else if (v49 == 2)
  {
    hyper_shift = 1;
  }
  else
  {
    if (v49 != 4)
    {
      malloc_report(3, (uint64_t)"*** FATAL ERROR - logical_ncpus / phys_ncpus not 1, 2, or 4.\n", a3, a4, a5, a6, a7, a8, v44);
      qword_A4008 = (uint64_t)"FATAL ERROR - logical_ncpus / phys_ncpus not 1, 2, or 4";
      qword_A4038 = logical_ncpus / phys_ncpus;
      __break(1u);
      JUMPOUT(0x6D7ACLL);
    }
    hyper_shift = 2;
  }
  if (max_magazines)
  {
    if (max_magazines >= logical_ncpus)
      v48 = logical_ncpus;
    else
      v48 = max_magazines;
    max_magazines = v48;
  }
  else
  {
    max_magazines = logical_ncpus;
  }
  if (max_medium_magazines)
  {
    if (max_medium_magazines >= logical_ncpus)
      v47 = logical_ncpus;
    else
      v47 = max_medium_magazines;
    max_medium_magazines = v47;
  }
  else
  {
    max_medium_magazines = max_magazines;
  }
  if (ncpuclusters == 1 && (malloc_xzone_enabled & 1) != 0)
    malloc_xzone_enabled = 0;
  _malloc_detect_interposition();
  set_flags_from_environment();
  malloc_sanitizer_enabled = sanitizer_should_enable();
  v54 = *_NSGetEnviron();
  if ((malloc_sanitizer_enabled & 1) == 0 && (malloc_debug_flags & 0x20) == 0 && !malloc_zero_on_free_sample_period)
    nano_common_init((uint64_t)v54, a1, a2);
  v53 = 0;
  v52 = 0;
  if (malloc_xzone_nano_override == 1)
  {
    v52 = 0;
  }
  else if (malloc_xzone_nano_override == 2)
  {
    v52 = 1;
  }
  if (malloc_nano_on_xzone_override == 2)
    v52 = 0;
  if ((malloc_xzone_enabled & 1) != 0 && _malloc_engaged_nano == 2 && (v52 & 1) == 0)
  {
    if (malloc_nano_on_xzone_override == 1)
    {
      v53 = 0;
    }
    else if (malloc_nano_on_xzone_override == 2)
    {
      v53 = 1;
    }
    if ((malloc_nano_on_xzone & 1) != (v53 & 1))
      malloc_nano_on_xzone = v53;
    if ((v53 & 1) == 0)
      malloc_xzone_enabled = 0;
  }
  if ((malloc_xzone_enabled & 1) != 0)
  {
    mfm_initialize();
    initial_xzone_zone = xzm_main_malloc_zone_create(malloc_debug_flags, (uint64_t)v54, a1, (uint64_t)a2);
    malloc_set_zone_name((malloc_zone_t *)initial_xzone_zone, "DefaultMallocZone");
    malloc_zone_register_while_locked(initial_xzone_zone, 1, v8, v9, v10, v11, v12, v13);
  }
  if (!initial_xzone_zone || (v53 & 1) != 0)
  {
    if (!initial_xzone_zone)
    {
      initial_scalable_zone = (uint64_t)create_scalable_zone(0, malloc_debug_flags);
      malloc_set_zone_name((malloc_zone_t *)initial_scalable_zone, "DefaultMallocZone");
      malloc_zone_register_while_locked(initial_scalable_zone, 1, v14, v15, v16, v17, v18, v19);
    }
    nano_common_configure();
    if (initial_xzone_zone)
      v46 = (malloc_zone_t *)initial_xzone_zone;
    else
      v46 = (malloc_zone_t *)initial_scalable_zone;
    if (_malloc_engaged_nano == 2)
    {
      if ((malloc_report_config & 1) != 0)
        malloc_report(5, (uint64_t)"NanoV2 Config:\n\tNano On Xzone: %d\n", v20, v21, v22, v23, v24, v25, v46 == (malloc_zone_t *)initial_xzone_zone);
      initial_nano_zone = (uint64_t)nanov2_create_zone((uint64_t)v46, malloc_debug_flags);
    }
    if (initial_nano_zone)
    {
      malloc_set_zone_name((malloc_zone_t *)initial_nano_zone, "DefaultMallocZone");
      malloc_set_zone_name(v46, "MallocHelperZone");
      malloc_zone_register_while_locked(initial_nano_zone, 1, v26, v27, v28, v29, v30, v31);
    }
  }
  if ((malloc_sanitizer_enabled & 1) != 0)
  {
    zone = sanitizer_create_zone(*(_QWORD *)malloc_zones);
    malloc_zone_register_while_locked((uint64_t)zone, 1, v32, v33, v34, v35, v36, v37);
  }
  malloc_slowpath_update();
  initial_num_zones = malloc_num_zones;
  v50 = 0;
  if ((large_cache_enabled & 1) != 0)
  {
    if (initial_xzone_zone)
    {
      large_cache_enabled = 0;
    }
    else
    {
      v50 = mvm_deferred_reclaim_init();
      if (v50)
      {
        large_cache_enabled = 0;
        malloc_report(3, (uint64_t)"Unable to set up reclaim buffer (%d) - disabling large cache\n", v42, v43, v38, v39, v40, v41, v50);
      }
    }
  }
  if ((malloc_report_config & 1) != 0 && initial_scalable_zone)
  {
    if (v50)
      v45 = v50;
    else
      v45 = large_cache_enabled & 1;
    malloc_report(5, (uint64_t)"Magazine Config:\n\tMax Magazines: %d\n\tMedium Enabled: %d\n\tAggressive Madvise: %d\n\tLarge Cache: %d%s\n\tScribble: %d\n", aggressive_madvise_enabled & 1, v45, v38, v39, v40, v41, max_magazines);
  }
}

_QWORD *__malloc_late_init(uint64_t a1)
{
  _QWORD *result;

  register_pgm_zone(*(_BYTE *)(a1 + 24) & 1);
  result = stack_logging_early_finished(a1);
  initial_num_zones = malloc_num_zones;
  if ((malloc_sanitizer_enabled & 1) != 0)
    return (_QWORD *)sanitizer_reset_environment();
  return result;
}

void register_pgm_zone(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  mach_vm_address_t zone;

  pgm_init_config(a1 & 1);
  if ((enable_pgm(0) & 1) != 0)
  {
    zone = pgm_create_zone(*(_QWORD *)malloc_zones);
    malloc_zone_register_while_locked(zone, 1, v1, v2, v3, v4, v5, v6);
  }
}

_QWORD *stack_logging_early_finished(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char ***v9;
  uint64_t (*v10)(char **);
  _QWORD *i;

  if (*(_QWORD *)a1 >= 2uLL && *(_QWORD *)(a1 + 32))
    memcpy(&msl, *(const void **)(a1 + 32), 0x58uLL);
  result = _NSGetEnviron();
  for (i = (_QWORD *)*result; *i; ++i)
  {
    result = (_QWORD *)_platform_strncmp(*i, "MallocStackLogging", 18);
    if (!(_DWORD)result)
    {
      result = (_QWORD *)_malloc_register_stack_logger(1, v2, v3, v4, v5, v6, v7, v8);
      if (off_A8158)
      {
        v10 = (uint64_t (*)(char **))off_A8158;
        v9 = _NSGetEnviron();
        result = (_QWORD *)v10(*v9);
      }
      break;
    }
  }
  if (off_A8160)
    return (_QWORD *)off_A8160();
  return result;
}

uint64_t has_default_zone0()
{
  return (has_injected_zone0 ^ 1) & 1;
}

void *find_registered_zone(uint64_t a1, uint64_t *a2, char a3)
{
  unsigned int i;
  unsigned int v5;
  int32_t *__theValue;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v13 = a3 & 1;
  if (malloc_num_zones)
  {
    if (lite_zone && (v12 = (*(uint64_t (**)(uint64_t, uint64_t))(lite_zone + 16))(lite_zone, a1)) != 0)
    {
      if (a2)
        *a2 = v12;
      return default_zone;
    }
    else
    {
      LODWORD(v7) = (v13 & 1) != 0;
      while (v7 < initial_num_zones)
      {
        v10 = *((_QWORD *)malloc_zones + v7);
        v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(v10, a1);
        if (v8)
        {
          if (a2)
            *a2 = v8;
          if ((_DWORD)v7 || !has_default_zone0())
            return (void *)v10;
          else
            return default_zone;
        }
        v7 = (v7 + 1);
      }
      __theValue = (int32_t *)pFRZCounterLive;
      OSAtomicIncrement32Barrier((int32_t *)pFRZCounterLive);
      v5 = malloc_num_zones;
      for (i = initial_num_zones; i < v5; ++i)
      {
        v11 = *((_QWORD *)malloc_zones + i);
        v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v11, a1);
        if (v9)
          goto LABEL_25;
      }
      v11 = 0;
      v9 = 0;
LABEL_25:
      if (a2)
        *a2 = v9;
      OSAtomicDecrement32Barrier(__theValue);
      return (void *)v11;
    }
  }
  else
  {
    if (a2)
      *a2 = 0;
    return 0;
  }
}

uint64_t malloc_gdb_po_unsafe()
{
  uint64_t v1;
  int v2;
  int i;
  _QWORD *v4;

  if (off_A8138 && off_A8138())
  {
    return 1;
  }
  else
  {
    v4 = malloc_zones;
    v2 = malloc_num_zones;
    for (i = 0; i != v2; ++i)
    {
      v1 = v4[i];
      if (*(_DWORD *)(v1 + 104) >= 5u
        && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 64)
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v1 + 96) + 64))(v1))
      {
        return 1;
      }
    }
    return 0;
  }
}

void malloc_zone_register_while_locked(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  mach_vm_address_t address;
  mach_vm_size_t v17;
  uint64_t v18;
  unsigned int i;
  size_t v20;
  char v21;
  uint64_t v22;

  v22 = a1;
  v21 = a2 & 1;
  v20 = 0;
  for (i = 0; i != malloc_num_zones; ++i)
  {
    if (v22 == *((_QWORD *)malloc_zones + i))
    {
      malloc_report(3, (uint64_t)"Attempted to register zone more than once: %p\n", a3, a4, a5, a6, a7, a8, v22);
      return;
    }
  }
  if (malloc_num_zones == malloc_num_zones_allocated)
  {
    v18 = 8 * malloc_num_zones;
    v17 = (v18 + vm_page_size + vm_page_size - 1) & ~(vm_page_size - 1);
    address = vm_page_size;
    v15 = mach_vm_allocate(mach_task_self_, &address, v17, 16777217);
    if (v15)
    {
      malloc_report(3, (uint64_t)"malloc_zone_register allocation failed: %d\n", v8, v9, v10, v11, v12, v13, v15);
      return;
    }
    v14 = (void *)address;
    if (malloc_zones)
    {
      _platform_memmove(address, malloc_zones, v18);
      address = (mach_vm_address_t)malloc_zones;
      mach_vm_deallocate(mach_task_self_, (mach_vm_address_t)malloc_zones, (v18 + vm_page_size - 1) & ~(vm_page_size - 1));
    }
    v20 = v17;
    malloc_zones = v14;
    malloc_num_zones_allocated = v17 / 8;
  }
  else
  {
    v20 = 8 * malloc_num_zones_allocated;
    mprotect(malloc_zones, v20, 3);
  }
  if ((v21 & 1) != 0)
  {
    _platform_memmove((char *)malloc_zones + 8, malloc_zones, 8 * malloc_num_zones);
    *(_QWORD *)malloc_zones = v22;
  }
  else
  {
    *((_QWORD *)malloc_zones + malloc_num_zones) = v22;
  }
  OSAtomicIncrement32Barrier(&malloc_num_zones);
  mprotect(malloc_zones, v20, 1);
  if ((v21 & 1) != 0 && *(_QWORD *)malloc_zones != v22)
  {
    has_injected_zone0 = 1;
    malloc_slowpath_update();
  }
}

malloc_zone_t *malloc_default_zone(void)
{
  return (malloc_zone_t *)default_zone;
}

uint64_t zeroify_scalable_zone(uint64_t result)
{
  if ((_UNKNOWN *)result == default_zone)
  {
    *(_QWORD *)(result + 24) = legacy_zeroing_large_malloc;
    *(_QWORD *)(result + 40) = legacy_zeroing_large_valloc;
  }
  return result;
}

uint64_t legacy_zeroing_large_malloc(uint64_t a1, unint64_t a2)
{
  if (a2 <= 0x1FC00)
    return default_zone_malloc(a1, a2);
  else
    return default_zone_calloc(a1, 1, a2);
}

uint64_t legacy_zeroing_large_valloc(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = default_zone_valloc(a1, a2);
  _platform_memset(v3, 0, a2);
  return v3;
}

uint64_t malloc_engaged_nano()
{
  if (initial_nano_zone || initial_xzone_zone)
    return _malloc_engaged_nano;
  else
    return 0;
}

BOOL malloc_engaged_secure_allocator()
{
  return initial_xzone_zone != 0;
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  malloc_zone_t *v15;
  malloc_zone_t *zone;

  zone = 0;
  if (start_size > malloc_absolute_max_size)
    return 0;
  if (initial_xzone_zone && (xzm_create_mzones & 1) != 0)
    zone = (malloc_zone_t *)xzm_malloc_zone_create(flags | malloc_debug_flags, initial_xzone_zone);
  if (!zone)
    zone = (malloc_zone_t *)create_scalable_zone(start_size, flags | malloc_debug_flags);
  if ((enable_pgm(flags) & 1) != 0)
  {
    v15 = (malloc_zone_t *)pgm_create_zone((uint64_t)zone);
    os_unfair_lock_lock_with_options(&_malloc_lock, 327680);
    malloc_zone_register_while_locked((uint64_t)v15, 0, v2, v3, v4, v5, v6, v7);
    malloc_zone_register_while_locked((uint64_t)zone, 0, v8, v9, v10, v11, v12, v13);
    os_unfair_lock_unlock((os_unfair_lock_t)&_malloc_lock);
    return v15;
  }
  else
  {
    malloc_zone_register(zone);
    return zone;
  }
}

uint64_t enable_pgm(__int16 a1)
{
  char should_enable;
  char v3;

  v3 = 1;
  if ((has_injected_zone0 & 1) == 0)
    v3 = malloc_sanitizer_enabled;
  should_enable = 0;
  if ((v3 & 1) == 0)
  {
    should_enable = 0;
    if ((a1 & 0x400) == 0)
      should_enable = pgm_should_enable();
  }
  return should_enable & 1;
}

void malloc_zone_register(malloc_zone_t *zone)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  os_unfair_lock_lock_with_options(&_malloc_lock, 327680);
  malloc_zone_register_while_locked((uint64_t)zone, 0, v1, v2, v3, v4, v5, v6);
  os_unfair_lock_unlock((os_unfair_lock_t)&_malloc_lock);
}

void malloc_create_legacy_default_zone()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  malloc_zone_t *zone;
  malloc_zone_t *legacy_scalable_zone;

  legacy_scalable_zone = (malloc_zone_t *)create_legacy_scalable_zone(0, malloc_debug_flags);
  os_unfair_lock_lock_with_options(&_malloc_lock, 327680);
  zone = *(malloc_zone_t **)malloc_zones;
  if (*(_QWORD *)(*(_QWORD *)malloc_zones + 72)
    && !_platform_strcmp(zone->zone_name, "DefaultMallocZone"))
  {
    malloc_set_zone_name(zone, 0);
  }
  malloc_set_zone_name(legacy_scalable_zone, "DefaultMallocZone");
  malloc_zone_register_while_locked((uint64_t)legacy_scalable_zone, 1, v0, v1, v2, v3, v4, v5);
  os_unfair_lock_unlock((os_unfair_lock_t)&_malloc_lock);
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  char *__s1;
  unint64_t v6;
  char *__s2;
  malloc_zone_t *wrapped_zone;
  const char *v9;
  unint64_t v10;
  char v11;
  unsigned int i;
  unsigned int v15;
  int32_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *zone_name;
  malloc_zone_t *v21;

  v11 = 1;
  v4 = 0;
  if (zone->version >= 0xE)
    v4 = LODWORD(zone->introspect[1].enumerator) == 1;
  if (v4)
    v11 = 0;
  if ((v11 & 1) != 0)
    mprotect(zone, 0xC8uLL, 3);
  if (zone->zone_name)
  {
    zone_name = zone->zone_name;
    if (malloc_num_zones)
    {
      if (lite_zone && (*(uint64_t (**)(uint64_t, const char *))(lite_zone + 16))(lite_zone, zone_name))
      {
        v21 = (malloc_zone_t *)default_zone;
      }
      else
      {
        LODWORD(v17) = 0;
        while (v17 < initial_num_zones)
        {
          v18 = *((_QWORD *)malloc_zones + v17);
          if ((*(uint64_t (**)(uint64_t, const char *))(v18 + 16))(v18, zone_name))
          {
            if ((_DWORD)v17 || !has_default_zone0())
              v21 = (malloc_zone_t *)v18;
            else
              v21 = (malloc_zone_t *)default_zone;
            goto LABEL_27;
          }
          v17 = (v17 + 1);
        }
        v16 = (int32_t *)pFRZCounterLive;
        OSAtomicIncrement32Barrier((int32_t *)pFRZCounterLive);
        v15 = malloc_num_zones;
        for (i = initial_num_zones; i < v15; ++i)
        {
          v19 = *((_QWORD *)malloc_zones + i);
          if ((*(uint64_t (**)(uint64_t, const char *))(v19 + 16))(v19, zone_name))
            goto LABEL_26;
        }
        v19 = 0;
LABEL_26:
        OSAtomicDecrement32Barrier(v16);
        v21 = (malloc_zone_t *)v19;
      }
    }
    else
    {
      v21 = 0;
    }
LABEL_27:
    if (v21)
      malloc_zone_free(v21, (void *)zone->zone_name);
    zone->zone_name = 0;
  }
  if (name)
  {
    v10 = _platform_strlen(name) + 1;
    if ((_dyld_is_memory_immutable(name, v10) & 1) != 0)
    {
      zone->zone_name = name;
    }
    else
    {
      v9 = (const char *)_malloc_zone_malloc(zone, v10, 0);
      if (v9)
      {
        _platform_strcpy(v9, name);
        zone->zone_name = v9;
      }
    }
    wrapped_zone = (malloc_zone_t *)get_wrapped_zone((uint64_t)zone);
    if (wrapped_zone)
    {
      __s2 = (char *)get_wrapper_zone_label((uint64_t)zone);
      v2 = _platform_strlen(name);
      v3 = v2 + _platform_strlen(__s2);
      v6 = v3 + _platform_strlen("Wrapped") + 3;
      __s1 = (char *)_malloc_zone_malloc(wrapped_zone, v6, 0);
      if (__s1)
      {
        _platform_strcpy(__s1, name);
        strcat(__s1, "-");
        strcat(__s1, __s2);
        strcat(__s1, "-");
        strcat(__s1, "Wrapped");
        malloc_set_zone_name(wrapped_zone, __s1);
        malloc_zone_free(wrapped_zone, __s1);
      }
    }
  }
  if ((v11 & 1) != 0)
    mprotect(zone, 0xC8uLL, 1);
}

void malloc_destroy_zone(malloc_zone_t *zone)
{
  malloc_set_zone_name(zone, 0);
  malloc_zone_unregister(zone);
  ((void (*)(malloc_zone_t *))zone->destroy)(zone);
}

void malloc_zone_unregister(malloc_zone_t *zone)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int *v10;
  uint64_t v11;
  unsigned int i;

  if (malloc_num_zones)
  {
    os_unfair_lock_lock_with_options(&_malloc_lock, 327680);
    for (i = 0; ; ++i)
    {
      if (i >= malloc_num_zones)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)&_malloc_lock);
        malloc_report(3, (uint64_t)"*** malloc_zone_unregister() failed for %p\n", v1, v2, v3, v4, v5, v6, (uint64_t)zone);
        return;
      }
      if (zone == *((malloc_zone_t **)malloc_zones + i))
        break;
    }
    v11 = 8 * malloc_num_zones_allocated;
    mprotect(malloc_zones, v11, 3);
    *((_QWORD *)malloc_zones + i) = *((_QWORD *)malloc_zones + --malloc_num_zones);
    mprotect(malloc_zones, v11, 1);
    if (malloc_num_zones >= initial_num_zones)
      v9 = initial_num_zones;
    else
      v9 = malloc_num_zones;
    if (v9 <= 1)
    {
      v7 = 1;
    }
    else
    {
      if (malloc_num_zones >= initial_num_zones)
        v8 = initial_num_zones;
      else
        v8 = malloc_num_zones;
      v7 = v8;
    }
    initial_num_zones = v7;
    v10 = (int *)pFRZCounterLive;
    pFRZCounterLive = pFRZCounterDrain;
    pFRZCounterDrain = v10;
    OSMemoryBarrier();
    while (*pFRZCounterDrain)
      yield();
    os_unfair_lock_unlock((os_unfair_lock_t)&_malloc_lock);
  }
}

void malloc_zone_check_fail(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;

  v41 = _simple_salloc();
  if (v41)
    _simple_sprintf(v41, "*** MallocCheckHeap: FAILED check at operation #%d\n", malloc_check_counter - 1);
  else
    malloc_report(16, (uint64_t)"*** MallocCheckHeap: FAILED check at operation #%d\n", v9, v10, v11, v12, v13, v14, (malloc_check_counter - 1));
  if (frames)
  {
    v40 = 1;
    if (v41)
    {
      _simple_sappend(v41, "Stack for last operation where the malloc check succeeded: ");
      while (v40 < num_frames)
      {
        v21 = v40++;
        _simple_sprintf(v41, "%p ", *(const void **)(frames + 8 * v21));
      }
      v22 = _simple_string(v41);
      malloc_report(16, (uint64_t)"%s\n(Use 'atos' for a symbolic stack)\n", v23, v24, v25, v26, v27, v28, v22);
    }
    else
    {
      malloc_report(16, (uint64_t)"Stack for last operation where the malloc check succeeded: ", v15, v16, v17, v18, v19, v20, v36);
      while (v40 < num_frames)
      {
        v35 = v40++;
        malloc_report(16, (uint64_t)"%p ", v29, v30, v31, v32, v33, v34, *(_QWORD *)(frames + 8 * v35));
      }
      malloc_report(16, (uint64_t)"\n(Use 'atos' for a symbolic stack)\n", v29, v30, v31, v32, v33, v34, v37);
    }
  }
  if (malloc_check_each > 1)
  {
    if (malloc_check_counter <= (malloc_check_each + 1))
      v38 = 1;
    else
      v38 = malloc_check_counter - 1 - malloc_check_each;
    malloc_report(16, (uint64_t)"*** Recommend using 'setenv MallocCheckHeapStart %d; setenv MallocCheckHeapEach %d' to narrow down failure\n",
      v15,
      v16,
      v17,
      v18,
      v19,
      v20,
      v38);
  }
  if (v41)
    _simple_sfree(v41);
  v39 = 0;
  if (malloc_check_abort)
  {
    malloc_vreport(211, 0, a1, 0, a2, (uint64_t)&a9);
  }
  else if (malloc_check_sleep <= 0)
  {
    if (malloc_check_sleep < 0)
    {
      malloc_report(5, (uint64_t)"*** Will sleep once for %d seconds to leave time to attach\n", v15, v16, v17, v18, v19, v20, -malloc_check_sleep);
      v39 = -malloc_check_sleep;
      malloc_check_sleep = 0;
    }
    malloc_vreport(147, v39, a1, 0, a2, (uint64_t)&a9);
  }
  else
  {
    malloc_report(5, (uint64_t)"*** Will sleep for %d seconds to leave time to attach\n", v15, v16, v17, v18, v19, v20, malloc_check_sleep);
    malloc_vreport(147, malloc_check_sleep, a1, 0, a2, (uint64_t)&a9);
  }
}

uint64_t _malloc_zone_malloc(void *a1, unint64_t a2, unsigned int a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;

  v6 = (uint64_t)a1;
  if (a1 == default_zone && !lite_zone)
    v6 = *(_QWORD *)malloc_zones;
  v4 = 1;
  if ((malloc_slowpath & 1) == 0)
  {
    v4 = 1;
    if (!malloc_logger)
      v4 = *(_DWORD *)(v6 + 104) < 0xDu;
  }
  if (v4)
    return _malloc_zone_malloc_instrumented_or_legacy(v6, a2, a3);
  if (a2 <= malloc_absolute_max_size)
  {
    if (*(_DWORD *)(v6 + 104) < 0x10u)
      return (*(uint64_t (**)(uint64_t, unint64_t))(v6 + 24))(v6, a2);
    else
      return (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(v6 + 160))(v6, a2, (v5 >> 2));
  }
  else
  {
    malloc_set_errno_fast(a3, 12);
    return 0;
  }
}

uint64_t _malloc_zone_malloc_instrumented_or_legacy(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  v12 = 0;
  if (!v13)
  {
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = (v10 >> 2);
    v13 = (v10 >> 2);
    v12 = 1;
  }
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855703557, a1, a2, v13);
  v11 = 0;
  if (malloc_check_start)
    internal_check();
  if (a2 <= malloc_absolute_max_size)
  {
    v11 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, a2);
    if (malloc_logger)
      malloc_logger(10, a1, a2, 0, v11, 0);
    if ((malloc_simple_stack_logging & 1) != 0)
      malloc_report(805, (uint64_t)"malloc (%p/%llu): ", v3, v4, v5, v6, v7, v8, v11);
    if ((malloc_tracing_enabled & 1) != 0)
      kdebug_trace(855703558, a1, a2, v11);
  }
  if ((v12 & 1) != 0)
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = 0;
  if (!v11)
    malloc_set_errno_fast(a3, 12);
  return v11;
}

void *__cdecl malloc_zone_malloc(malloc_zone_t *zone, size_t size)
{
  return (void *)_malloc_zone_malloc(zone, size, 0);
}

uint64_t _malloc_zone_calloc(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v7 = (uint64_t)a1;
  if (a1 == default_zone && !lite_zone)
    v7 = *(_QWORD *)malloc_zones;
  v5 = 1;
  if ((malloc_slowpath & 1) == 0)
  {
    v5 = 1;
    if (!malloc_logger)
      v5 = *(_DWORD *)(v7 + 104) < 0xDu;
  }
  if (v5)
    return _malloc_zone_calloc_instrumented_or_legacy(v7, a2, a3, a4);
  if (*(_DWORD *)(v7 + 104) < 0x10u)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v7, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v7 + 168))(v7, a2, a3, (v6 >> 2));
}

uint64_t _malloc_zone_calloc_instrumented_or_legacy(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  char v13;

  v13 = 0;
  if (!*(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904))
  {
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = (v11 >> 2);
    v13 = 1;
  }
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855703573, a1, a2, a3);
  if (malloc_check_start)
    internal_check();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32))(a1, a2, a3);
  if (malloc_logger)
    malloc_logger(74, a1, a2 * a3, 0, v12, 0);
  if ((malloc_simple_stack_logging & 1) != 0)
    malloc_report(805, (uint64_t)"calloc (%p/%llu*%llu): ", v4, v5, v6, v7, v8, v9, v12);
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855703574, a1, a2, a3);
  if ((v13 & 1) != 0)
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = 0;
  if (!v12)
    malloc_set_errno_fast(a4, 12);
  return v12;
}

void *__cdecl malloc_zone_calloc(malloc_zone_t *zone, size_t num_items, size_t size)
{
  return (void *)_malloc_zone_calloc(zone, num_items, size, 0);
}

uint64_t _malloc_zone_valloc(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  v12 = 0;
  if (!v13)
  {
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = (v10 >> 2);
    v13 = (v10 >> 2);
    v12 = 1;
  }
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855703577, a1, a2, v13);
  v11 = 0;
  if (malloc_check_start)
    internal_check();
  if (a2 <= malloc_absolute_max_size)
  {
    v11 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 40))(a1, a2);
    if (malloc_logger)
      malloc_logger(10, a1, a2, 0, v11, 0);
    if ((malloc_simple_stack_logging & 1) != 0)
      malloc_report(805, (uint64_t)"valloc (%p/%llu): ", v3, v4, v5, v6, v7, v8, v11);
    if ((malloc_tracing_enabled & 1) != 0)
      kdebug_trace(855703578, a1, a2, v11);
  }
  if ((v12 & 1) != 0)
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = 0;
  if (!v11)
    malloc_set_errno_fast(a3, 12);
  return v11;
}

void *__cdecl malloc_zone_valloc(malloc_zone_t *zone, size_t size)
{
  return (void *)_malloc_zone_valloc((uint64_t)zone, size, 0);
}

uint64_t _malloc_zone_realloc(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;

  v12 = 0;
  if (!*(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904))
  {
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = a4;
    v12 = 1;
  }
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855703565, a1, a2, a3);
  v11 = 0;
  if (malloc_check_start)
    internal_check();
  if (a3 <= malloc_absolute_max_size)
  {
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(a1 + 56))(a1, a2, a3);
    if (malloc_logger)
      malloc_logger(14, a1, a2, a3, v11, 0);
    if ((malloc_simple_stack_logging & 1) != 0)
      malloc_report(805, (uint64_t)"realloc (%p->%p/%llu): ", v4, v5, v6, v7, v8, v9, a2);
    if ((malloc_tracing_enabled & 1) != 0)
      kdebug_trace(855703566, a1, a2, a3);
  }
  if ((v12 & 1) != 0)
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = 0;
  return v11;
}

void *__cdecl malloc_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size)
{
  unint64_t v3;

  return (void *)_malloc_zone_realloc((uint64_t)zone, (uint64_t)ptr, size, (v3 >> 2));
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((malloc_tracing_enabled & 1) != 0)
  {
    if (ptr)
      kdebug_trace(855703560, zone, ptr, *(_QWORD *)ptr);
    else
      kdebug_trace(855703560, zone, 0, 0);
  }
  if (malloc_logger)
    malloc_logger(12, zone, ptr, 0, 0, 0);
  if ((malloc_simple_stack_logging & 1) != 0)
    malloc_report(805, (uint64_t)"malloc_zone_free (%p): ", v2, v3, v4, v5, v6, v7, (uint64_t)ptr);
  if (malloc_check_start)
    internal_check();
  ((void (*)(malloc_zone_t *, void *))zone->free)(zone, ptr);
}

malloc_zone_t *__cdecl malloc_zone_from_ptr(const void *ptr)
{
  unsigned int i;
  unsigned int v5;
  int32_t *__theValue;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!ptr)
    return 0;
  if (!malloc_num_zones)
    return 0;
  if (lite_zone && (*(uint64_t (**)(uint64_t, const void *))(lite_zone + 16))(lite_zone, ptr))
    return (malloc_zone_t *)default_zone;
  LODWORD(v7) = 0;
  while (v7 < initial_num_zones)
  {
    v8 = *((_QWORD *)malloc_zones + v7);
    if ((*(uint64_t (**)(uint64_t, const void *))(v8 + 16))(v8, ptr))
    {
      if ((_DWORD)v7 || !has_default_zone0())
        return (malloc_zone_t *)v8;
      else
        return (malloc_zone_t *)default_zone;
    }
    v7 = (v7 + 1);
  }
  __theValue = (int32_t *)pFRZCounterLive;
  OSAtomicIncrement32Barrier((int32_t *)pFRZCounterLive);
  v5 = malloc_num_zones;
  for (i = initial_num_zones; i < v5; ++i)
  {
    v9 = *((_QWORD *)malloc_zones + i);
    if ((*(uint64_t (**)(uint64_t, const void *))(v9 + 16))(v9, ptr))
      goto LABEL_21;
  }
  v9 = 0;
LABEL_21:
  OSAtomicDecrement32Barrier(__theValue);
  return (malloc_zone_t *)v9;
}

uint64_t _malloc_zone_memalign(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  char v14;

  v14 = 0;
  if (!*(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904))
  {
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = a5;
    v14 = 1;
  }
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855703569, a1, a2, a3);
  v13 = 0;
  v12 = 12;
  if (*(_DWORD *)(a1 + 104) >= 5u)
  {
    if (malloc_check_start)
      internal_check();
    if (a3 <= malloc_absolute_max_size)
    {
      if (a2 < 8 || (a2 & (a2 - 1)) != 0)
      {
        v12 = 22;
      }
      else if ((a4 & 2) != 0 && (a3 & (a2 - 1)) != 0)
      {
        v12 = 22;
      }
      else if (*(_QWORD *)(a1 + 112))
      {
        v13 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(a1 + 112))(a1, a2, a3);
        if (malloc_logger)
          malloc_logger(10, a1, a3, 0, v13, 0);
        if ((malloc_simple_stack_logging & 1) != 0)
          malloc_report(805, (uint64_t)"memalign (%p/%llu,%llu): ", v5, v6, v7, v8, v9, v10, v13);
        if ((malloc_tracing_enabled & 1) != 0)
          kdebug_trace(855703570, a1, a2, a3);
      }
    }
  }
  if ((v14 & 1) != 0)
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = 0;
  if (!v13 && (a4 & 1) != 0)
    malloc_set_errno_fast(a4, v12);
  return v13;
}

void *__cdecl malloc_zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size)
{
  unint64_t v3;

  return (void *)_malloc_zone_memalign((uint64_t)zone, alignment, size, 0, (v3 >> 2));
}

uint64_t malloc_zone_claimed_address(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (malloc_check_start)
      internal_check();
    if (*(_DWORD *)(a1 + 104) >= 0xAu && *(_QWORD *)(a1 + 136))
      return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 136))(a1, a2);
    else
      return 1;
  }
  else
  {
    return 0;
  }
}

const char *get_wrapper_zone_label(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 104) < 0xEu)
  {
    __break(1u);
    JUMPOUT(0x712BCLL);
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 96) + 128) == 2)
    return "PGM";
  else
    return "Sanitizer";
}

const char *__cdecl malloc_get_zone_name(malloc_zone_t *zone)
{
  return zone->zone_name;
}

void find_zone_and_free(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;
  uint64_t v9;
  malloc_zone_t *zone;
  char v11;
  void *ptr;
  unsigned int i;
  unsigned int v14;
  int32_t *__theValue;
  _BYTE v16[12];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  void *v22;
  malloc_zone_t *v23;

  ptr = a1;
  v11 = a2 & 1;
  zone = 0;
  v9 = 0;
  if (a1)
  {
    v22 = ptr;
    v21 = &v9;
    v20 = v11 & 1;
    if (malloc_num_zones)
    {
      if (lite_zone
        && (v19 = lite_zone,
            v18 = 0,
            (v18 = (*(uint64_t (**)(uint64_t, void *))(lite_zone + 16))(lite_zone, v22)) != 0))
      {
        if (v21)
          *v21 = v18;
        v23 = (malloc_zone_t *)default_zone;
      }
      else
      {
        v17 = 0;
        *(_DWORD *)&v16[8] = 0;
        *(_QWORD *)v16 = (v20 & 1) != 0;
        while (*(_DWORD *)v16 < initial_num_zones)
        {
          v17 = *((_QWORD *)malloc_zones + *(unsigned int *)v16);
          *(_QWORD *)&v16[4] = (*(uint64_t (**)(uint64_t, void *))(v17 + 16))(v17, v22);
          if (*(_QWORD *)&v16[4])
          {
            if (v21)
              *v21 = *(_QWORD *)&v16[4];
            if (*(_DWORD *)v16 || !has_default_zone0())
              v23 = (malloc_zone_t *)v17;
            else
              v23 = (malloc_zone_t *)default_zone;
            goto LABEL_29;
          }
          *(_QWORD *)v16 = (*(_DWORD *)v16 + 1);
        }
        __theValue = (int32_t *)pFRZCounterLive;
        OSAtomicIncrement32Barrier((int32_t *)pFRZCounterLive);
        v14 = malloc_num_zones;
        for (i = initial_num_zones; i < v14; ++i)
        {
          v17 = *((_QWORD *)malloc_zones + i);
          *(_QWORD *)&v16[4] = (*(uint64_t (**)(uint64_t, void *))(v17 + 16))(v17, v22);
          if (*(_QWORD *)&v16[4])
            goto LABEL_26;
        }
        v17 = 0;
        *(_QWORD *)&v16[4] = 0;
LABEL_26:
        if (v21)
          *v21 = *(_QWORD *)&v16[4];
        OSAtomicDecrement32Barrier(__theValue);
        v23 = (malloc_zone_t *)v17;
      }
    }
    else
    {
      if (v21)
        *v21 = 0;
      v23 = 0;
    }
LABEL_29:
    zone = v23;
    if (v23)
    {
      if (zone->version >= 6 && zone->free_definite_size)
        malloc_zone_free_definite_size((uint64_t)zone, (uint64_t)ptr, v9, a4, a5, a6, a7, a8);
      else
        malloc_zone_free(zone, ptr);
    }
    else
    {
      v8 = 144;
      if ((malloc_debug_flags & 0x140) != 0)
        v8 = 80;
      malloc_report(v8, (uint64_t)"*** error for object %p: pointer being freed was not allocated\n", a3, a4, a5, a6, a7, a8, (uint64_t)ptr);
    }
  }
}

uint64_t malloc_zone_free_definite_size(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855703560, a1, a2, a3);
  if (malloc_logger)
    malloc_logger(12, a1, a2, 0, 0, 0);
  if ((malloc_simple_stack_logging & 1) != 0)
    malloc_report(805, (uint64_t)"free (%p/%llu): ", a3, a4, a5, a6, a7, a8, a2);
  if (malloc_check_start)
    internal_check();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 120))(a1, a2, a3);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)_malloc_zone_malloc(default_zone, __size, 1u);
}

void *__cdecl aligned_alloc(size_t __alignment, size_t __size)
{
  unint64_t v2;

  return (void *)_malloc_zone_memalign((uint64_t)default_zone, __alignment, __size, 3u, (v2 >> 2));
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)_malloc_zone_calloc(default_zone, __count, __size, 1u);
}

void _free(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  uint64_t v9;

  if (a1)
  {
    v9 = *(_QWORD *)malloc_zones;
    v8 = 1;
    if ((malloc_slowpath & 1) == 0)
    {
      v8 = 1;
      if (!malloc_logger)
        v8 = *(_DWORD *)(v9 + 104) < 0xDu;
    }
    if (v8 || !*(_QWORD *)(v9 + 144))
      find_zone_and_free(a1, 0, a3, a4, a5, a6, a7, a8);
    else
      (*(void (**)(uint64_t, void *))(v9 + 144))(v9, a1);
  }
}

void free(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  _free(a1, v1, v2, v3, v4, v5, v6, v7);
}

void *__cdecl realloc(void *__ptr, size_t __size)
{
  return _realloc(__ptr, __size);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  void *v3;

  v3 = j__realloc(__ptr, __size);
  if (!v3 && __ptr && __size)
    j__free(__ptr);
  return v3;
}

void *__cdecl valloc(size_t a1)
{
  return (void *)_malloc_zone_valloc((uint64_t)default_zone, a1, 1u);
}

void vfree(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _free(a1, a2, a3, a4, a5, a6, a7, a8);
}

size_t malloc_size(const void *ptr)
{
  size_t v2;
  const void *v3;
  unsigned int i;
  unsigned int v6;
  int32_t *__theValue;
  _BYTE v8[12];
  uint64_t (**v9)(_QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  char v12;
  size_t *v13;
  const void *v14;
  void *v15;

  v3 = ptr;
  v2 = 0;
  if (!ptr)
    return v2;
  v14 = v3;
  v13 = &v2;
  v12 = 0;
  if (malloc_num_zones)
  {
    if (lite_zone
      && (v11 = lite_zone,
          v10 = 0,
          (v10 = (*(uint64_t (**)(uint64_t, const void *))(lite_zone + 16))(lite_zone, v14)) != 0))
    {
      if (v13)
        *v13 = v10;
      v15 = default_zone;
    }
    else
    {
      v9 = 0;
      *(_DWORD *)&v8[8] = 0;
      *(_QWORD *)v8 = (v12 & 1) != 0;
      while (*(_DWORD *)v8 < initial_num_zones)
      {
        v9 = (uint64_t (**)(_QWORD, _QWORD))*((_QWORD *)malloc_zones + *(unsigned int *)v8);
        *(_QWORD *)&v8[4] = ((uint64_t (**)(_QWORD, const void *))v9)[2](v9, v14);
        if (*(_QWORD *)&v8[4])
        {
          if (v13)
            *v13 = *(_QWORD *)&v8[4];
          if (*(_DWORD *)v8 || !has_default_zone0())
            v15 = v9;
          else
            v15 = default_zone;
          return v2;
        }
        *(_QWORD *)v8 = (*(_DWORD *)v8 + 1);
      }
      __theValue = (int32_t *)pFRZCounterLive;
      OSAtomicIncrement32Barrier((int32_t *)pFRZCounterLive);
      v6 = malloc_num_zones;
      for (i = initial_num_zones; i < v6; ++i)
      {
        v9 = (uint64_t (**)(_QWORD, _QWORD))*((_QWORD *)malloc_zones + i);
        *(_QWORD *)&v8[4] = ((uint64_t (**)(_QWORD, const void *))v9)[2](v9, v14);
        if (*(_QWORD *)&v8[4])
          goto LABEL_27;
      }
      v9 = 0;
      *(_QWORD *)&v8[4] = 0;
LABEL_27:
      if (v13)
        *v13 = *(_QWORD *)&v8[4];
      OSAtomicDecrement32Barrier(__theValue);
      v15 = v9;
    }
  }
  else
  {
    if (v13)
      *v13 = 0;
    v15 = 0;
  }
  return v2;
}

size_t malloc_good_size(size_t size)
{
  return (*(uint64_t (**)(void *, size_t))(*((_QWORD *)default_zone + 12) + 8))(default_zone, size);
}

uint64_t _posix_memalign(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;

  v5 = _malloc_zone_memalign((uint64_t)default_zone, a2, a3, 0, (v3 >> 2));
  if (v5)
  {
    *a1 = v5;
    return 0;
  }
  else if (a2 < 8 || (a2 & (a2 - 1)) != 0)
  {
    return 22;
  }
  else
  {
    return 12;
  }
}

int posix_memalign(void **__memptr, size_t __alignment, size_t __size)
{
  return _posix_memalign((uint64_t *)__memptr, __alignment, __size);
}

uint64_t malloc_claimed_address(uint64_t a1)
{
  unsigned int j;
  unsigned int v3;
  unsigned int v4;
  int32_t *__theValue;
  unsigned int i;

  if (malloc_num_zones)
  {
    if (lite_zone && malloc_zone_claimed_address(lite_zone, a1))
    {
      return 1;
    }
    else
    {
      for (i = 0; i < initial_num_zones; ++i)
      {
        if (malloc_zone_claimed_address(*((_QWORD *)malloc_zones + i), a1))
          return 1;
      }
      __theValue = (int32_t *)pFRZCounterLive;
      OSAtomicIncrement32Barrier((int32_t *)pFRZCounterLive);
      v4 = malloc_num_zones;
      v3 = 0;
      for (j = initial_num_zones; j < v4; ++j)
      {
        if (malloc_zone_claimed_address(*((_QWORD *)malloc_zones + j), a1))
        {
          v3 = 1;
          break;
        }
      }
      OSAtomicDecrement32Barrier(__theValue);
      return v3;
    }
  }
  else
  {
    return 0;
  }
}

void *reallocarray_DARWIN_EXTSN(void *a1, unint64_t a2, unint64_t a3)
{
  if (is_mul_ok(a2, a3))
    return j__realloc(a1, a2 * a3);
  malloc_set_errno_fast(1, 12);
  return 0;
}

void *reallocarrayf_DARWIN_EXTSN(void *a1, unint64_t a2, unint64_t a3)
{
  if (is_mul_ok(a2, a3))
    return reallocf(a1, a2 * a3);
  malloc_set_errno_fast(1, 12);
  return 0;
}

void *_malloc_zone_malloc_with_options_np_outlined(malloc_zone_t *a1, size_t a2, size_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  char v14;
  void *v15;
  malloc_zone_t *zone;

  zone = a1;
  if (!a1 || a1 == (malloc_zone_t *)default_zone)
  {
    if (lite_zone)
      v11 = lite_zone;
    else
      v11 = *(_QWORD *)malloc_zones;
    zone = (malloc_zone_t *)v11;
  }
  v14 = 0;
  if (!*(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904))
  {
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = (v12 >> 2);
    v14 = 1;
  }
  if ((malloc_interposition_compat & 1) == 0 && zone->version >= 0xF && zone[1].reserved2)
  {
    if ((malloc_tracing_enabled & 1) != 0)
      kdebug_trace(855703581, zone, a2, a3);
    v15 = (void *)((uint64_t (*)(malloc_zone_t *, size_t, size_t, uint64_t))zone[1].reserved2)(zone, a2, a3, a4);
    if (malloc_logger)
    {
      v13 = 10;
      if ((a4 & 1) != 0)
        v13 = 74;
      malloc_logger(v13, zone, a3, 0, v15, 0);
    }
    if ((malloc_simple_stack_logging & 1) != 0)
      malloc_report(805, (uint64_t)"malloc_with_options (%p/%llu,%llu): ", v4, v5, v6, v7, v8, v9, (uint64_t)v15);
    if ((malloc_tracing_enabled & 1) != 0)
      kdebug_trace(855703582, zone, a2, a3);
  }
  else if (a2)
  {
    v15 = j__malloc_zone_memalign(zone, a2, a3);
    if (v15 && (a4 & 1) != 0)
      _platform_memset(v15, 0, a3);
  }
  else if ((a4 & 1) != 0)
  {
    v15 = j__malloc_zone_calloc(zone, 1uLL, a3);
  }
  else
  {
    v15 = j__malloc_zone_malloc(zone, a3);
  }
  if ((v14 & 1) != 0)
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = 0;
  return v15;
}

void *malloc_zone_malloc_with_options_np(malloc_zone_t *a1, size_t a2, size_t a3, uint64_t a4)
{
  char v5;
  BOOL v6;
  unint64_t v7;
  BOOL v8;
  malloc_zone_t *v9;

  v9 = a1;
  v8 = 0;
  if (a2)
  {
    v6 = 1;
    if (((a2 - 1) & a2) == 0)
      v6 = (a3 & (a2 - 1)) != 0;
    v8 = v6;
  }
  if (v8)
    return 0;
  v5 = 1;
  if (!malloc_logger)
    v5 = malloc_slowpath;
  if ((v5 & 1) != 0)
    return _malloc_zone_malloc_with_options_np_outlined(v9, a2, a3, a4);
  if (!a1 || a1 == (malloc_zone_t *)default_zone)
    v9 = *(malloc_zone_t **)malloc_zones;
  if (v9->version < 0x10 || !v9[1].free)
    return _malloc_zone_malloc_with_options_np_outlined(v9, a2, a3, a4);
  else
    return (void *)((uint64_t (*)(malloc_zone_t *, size_t, size_t, uint64_t, _QWORD))v9[1].free)(v9, a2, a3, a4, (v7 >> 2));
}

malloc_zone_t *malloc_default_purgeable_zone(void)
{
  if (malloc_default_purgeable_zone_pred != -1)
    _os_once(&malloc_default_purgeable_zone_pred, 0, _malloc_create_purgeable_zone);
  return (malloc_zone_t *)default_purgeable_zone;
}

void _malloc_create_purgeable_zone()
{
  if (initial_xzone_zone && (purgeable_zone_use_xzm & 1) != 0)
  {
    default_purgeable_zone = (uint64_t)xzm_malloc_zone_create(malloc_debug_flags | 0x80u, initial_xzone_zone);
    malloc_zone_register((malloc_zone_t *)default_purgeable_zone);
    malloc_set_zone_name((malloc_zone_t *)default_purgeable_zone, "DefaultPurgeableMallocZone");
  }
  else
  {
    if (!initial_scalable_zone)
    {
      initial_scalable_zone = (uint64_t)create_scalable_zone(0, malloc_debug_flags);
      malloc_set_zone_name((malloc_zone_t *)initial_scalable_zone, "DefaultScalableMallocZone");
      malloc_zone_register((malloc_zone_t *)initial_scalable_zone);
    }
    default_purgeable_zone = (uint64_t)create_purgeable_zone(0, initial_scalable_zone, malloc_debug_flags);
    malloc_zone_register((malloc_zone_t *)default_purgeable_zone);
    malloc_set_zone_name((malloc_zone_t *)default_purgeable_zone, "DefaultPurgeableMallocZone");
  }
}

void malloc_make_purgeable(void *ptr)
{
  int state;
  vm_address_t v3;

  v3 = (vm_address_t)ptr;
  if (find_registered_purgeable_zone((uint64_t)ptr))
  {
    state = 1;
    vm_purgable_control(mach_task_self_, v3, 0, &state);
  }
}

void *find_registered_purgeable_zone(uint64_t a1)
{
  vm_size_t v2;
  uint64_t v3;
  unsigned int i;
  unsigned int v6;
  int32_t *__theValue;
  _BYTE v8[12];
  uint64_t (**v9)(_QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  char v12;
  vm_size_t *v13;
  uint64_t v14;
  void *v15;

  v3 = a1;
  if (!a1)
    return 0;
  v2 = 0;
  v14 = v3;
  v13 = &v2;
  v12 = 0;
  if (malloc_num_zones)
  {
    if (lite_zone
      && (v11 = lite_zone,
          v10 = 0,
          (v10 = (*(uint64_t (**)(uint64_t, uint64_t))(lite_zone + 16))(lite_zone, v14)) != 0))
    {
      if (v13)
        *v13 = v10;
      v15 = default_zone;
    }
    else
    {
      v9 = 0;
      *(_DWORD *)&v8[8] = 0;
      *(_QWORD *)v8 = (v12 & 1) != 0;
      while (*(_DWORD *)v8 < initial_num_zones)
      {
        v9 = (uint64_t (**)(_QWORD, _QWORD))*((_QWORD *)malloc_zones + *(unsigned int *)v8);
        *(_QWORD *)&v8[4] = v9[2](v9, v14);
        if (*(_QWORD *)&v8[4])
        {
          if (v13)
            *v13 = *(_QWORD *)&v8[4];
          if (*(_DWORD *)v8 || !has_default_zone0())
            v15 = v9;
          else
            v15 = default_zone;
          goto LABEL_30;
        }
        *(_QWORD *)v8 = (*(_DWORD *)v8 + 1);
      }
      __theValue = (int32_t *)pFRZCounterLive;
      OSAtomicIncrement32Barrier((int32_t *)pFRZCounterLive);
      v6 = malloc_num_zones;
      for (i = initial_num_zones; i < v6; ++i)
      {
        v9 = (uint64_t (**)(_QWORD, _QWORD))*((_QWORD *)malloc_zones + i);
        *(_QWORD *)&v8[4] = v9[2](v9, v14);
        if (*(_QWORD *)&v8[4])
          goto LABEL_27;
      }
      v9 = 0;
      *(_QWORD *)&v8[4] = 0;
LABEL_27:
      if (v13)
        *v13 = *(_QWORD *)&v8[4];
      OSAtomicDecrement32Barrier(__theValue);
      v15 = v9;
    }
  }
  else
  {
    if (v13)
      *v13 = 0;
    v15 = 0;
  }
LABEL_30:
  if (!v15)
    return 0;
  if (v2 < vm_page_size || v2 % vm_page_size)
    return 0;
  return v15;
}

int malloc_make_nonpurgeable(void *ptr)
{
  int state;
  vm_address_t address;

  address = (vm_address_t)ptr;
  if (!find_registered_purgeable_zone((uint64_t)ptr))
    return 0;
  state = 0;
  vm_purgable_control(mach_task_self_, address, 0, &state);
  if (state == 2)
    return 14;
  else
    return 0;
}

uint64_t malloc_memory_event_handler(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = result;
  if ((result & 0xF0000000) != 0 && (result & 0xFFFFFFF) == 0)
    result = malloc_register_stack_logger(result, a2, a3, a4, a5, a6, a7, a8);
  if (off_A8130)
    return off_A8130(v8);
  return result;
}

uint64_t malloc_register_stack_logger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _malloc_register_stack_logger(0, a2, a3, a4, a5, a6, a7, a8) & 1;
}

size_t malloc_zone_pressure_relief(malloc_zone_t *zone, size_t goal)
{
  uint64_t v2;
  size_t v4;
  unsigned int v5;
  uint64_t v7;

  if (zone)
  {
    if (zone->version >= 8)
    {
      if (zone->pressure_relief)
        return ((uint64_t (*)(malloc_zone_t *, size_t))zone->pressure_relief)(zone, goal);
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v5 = 0;
    v4 = 0;
    os_unfair_lock_lock_with_options(&_malloc_lock, 327680);
    while (v5 < malloc_num_zones)
    {
      v2 = v5++;
      v7 = *((_QWORD *)malloc_zones + v2);
      if (*(_DWORD *)(v7 + 104) >= 8u && *(_QWORD *)(v7 + 128))
      {
        if (goal)
        {
          if (goal <= v4)
            break;
          v4 += (*(uint64_t (**)(uint64_t, size_t))(v7 + 128))(v7, goal - v4);
        }
        else
        {
          v4 += (*(uint64_t (**)(uint64_t, _QWORD))(v7 + 128))(v7, 0);
        }
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&_malloc_lock);
    return v4;
  }
}

unsigned int malloc_zone_batch_malloc(malloc_zone_t *zone, size_t size, void **results, unsigned int num_requested)
{
  unsigned int i;
  unsigned int v6;

  if (!zone->batch_malloc)
    return 0;
  if (malloc_check_start)
    internal_check();
  v6 = ((uint64_t (*)(malloc_zone_t *, size_t, void **, _QWORD))zone->batch_malloc)(zone, size, results, num_requested);
  if (malloc_logger)
  {
    for (i = 0; i < v6; ++i)
      malloc_logger(10, zone, size, 0, results[i], 0);
  }
  return v6;
}

void malloc_zone_batch_free(malloc_zone_t *zone, void **to_be_freed, unsigned int num)
{
  void **v4;
  void (__cdecl *j)(_malloc_zone_t *, void *);
  unsigned int i;

  if (malloc_check_start)
    internal_check();
  if (malloc_logger)
  {
    for (i = 0; i < num; ++i)
      malloc_logger(12, zone, to_be_freed[i], 0, 0, 0);
  }
  if (zone->batch_free)
  {
    ((void (*)(malloc_zone_t *, void **, _QWORD))zone->batch_free)(zone, to_be_freed, num);
  }
  else
  {
    for (j = zone->free; num--; ((void (*)(malloc_zone_t *, void *))j)(zone, *v4))
      v4 = to_be_freed++;
  }
}

uint64_t malloc_sanitizer_is_enabled()
{
  return malloc_sanitizer_enabled & 1;
}

uint64_t malloc_sanitizer_get_functions()
{
  return sanitizer;
}

uint64_t malloc_sanitizer_set_functions(uint64_t result)
{
  sanitizer = result;
  return result;
}

uint64_t malloc_get_all_zones(unsigned int a1, uint64_t a2, uint64_t **a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  int *v28;
  _UNKNOWN **v29;
  unsigned int *v30;
  uint64_t **v31;
  uint64_t (*v32)(unsigned int, uint64_t, uint64_t, uint64_t **);
  unsigned int v33;

  v33 = a1;
  v32 = (uint64_t (*)(unsigned int, uint64_t, uint64_t, uint64_t **))a2;
  v31 = (uint64_t **)a3;
  v30 = a4;
  v29 = &malloc_zones;
  v28 = &malloc_num_zones;
  v27 = 0;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v23 = 0;
  v32 = (uint64_t (*)(unsigned int, uint64_t, uint64_t, uint64_t **))reader_or_in_memory_fallback_6(a2, a1);
  v27 = v32(v33, (uint64_t)v29, 8, &v25);
  if (v27)
  {
    malloc_report(3, (uint64_t)"*** malloc_get_all_zones: error reading zones_address at %p\n", v4, v5, v6, v7, v8, v9, (uint64_t)v29);
    return v27;
  }
  else
  {
    v26 = *v25;
    v27 = v32(v33, (uint64_t)v28, 4, (uint64_t **)&v23);
    if (v27)
    {
      malloc_report(3, (uint64_t)"*** malloc_get_all_zones: error reading num_zones at %p\n", v10, v11, v12, v13, v14, v15, (uint64_t)v28);
      return v27;
    }
    else
    {
      v24 = *v23;
      *v30 = v24;
      v27 = v32(v33, v26, 8 * v24, v31);
      if (v27)
      {
        malloc_report(3, (uint64_t)"*** malloc_get_all_zones: error reading zones at %p\n", v16, v17, v18, v19, v20, v21, (uint64_t)&v26);
        return v27;
      }
      else
      {
        return 0;
      }
    }
  }
}

uint64_t (*reader_or_in_memory_fallback_6(uint64_t a1, unsigned int a2))(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v3;

  if (a1)
    return (uint64_t (*)(unsigned int, uint64_t, uint64_t, _QWORD *))a1;
  v3 = 1;
  if (a2)
    v3 = mach_task_is_self(a2) != 0;
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x73B5CLL);
  }
  return _malloc_default_reader_6;
}

void malloc_zone_print_ptr_info(void *ptr)
{
  malloc_zone_t *v1;

  if (ptr)
  {
    v1 = malloc_zone_from_ptr(ptr);
    if (v1)
      printf("ptr %p in registered zone %p\n", ptr, v1);
    else
      printf("ptr %p not in heap\n", ptr);
  }
}

BOOLean_t malloc_zone_check(malloc_zone_t *zone)
{
  uint64_t v1;
  unsigned int i;
  BOOLean_t v4;

  v4 = 1;
  if (zone)
    return ((uint64_t (*)(malloc_zone_t *))zone->introspect->check)(zone);
  for (i = 0; i < malloc_num_zones; ++i)
  {
    v1 = i;
    if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)malloc_zones + v1) + 96) + 16))(*((_QWORD *)malloc_zones + v1)))
      v4 = 0;
  }
  return v4;
}

void malloc_zone_print(malloc_zone_t *zone, BOOLean_t verbose)
{
  uint64_t v2;
  unsigned int i;

  if (zone)
  {
    ((void (*)(malloc_zone_t *, _QWORD))zone->introspect->print)(zone, verbose);
  }
  else
  {
    for (i = 0; i < malloc_num_zones; ++i)
    {
      v2 = i;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*((_QWORD *)malloc_zones + v2) + 96) + 24))(*((_QWORD *)malloc_zones + v2), verbose);
    }
  }
}

void malloc_zone_statistics(malloc_zone_t *zone, malloc_statistics_t *stats)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  unsigned int v5;
  malloc_statistics_t *v6;
  malloc_zone_t *v7;

  v7 = zone;
  v6 = stats;
  if (zone)
  {
    ((void (*)(malloc_zone_t *, malloc_statistics_t *))v7->introspect->statistics)(v7, v6);
  }
  else
  {
    _platform_memset(v6, 0, 32);
    v5 = 0;
    while (v5 < malloc_num_zones)
    {
      v2 = v5++;
      v7 = (malloc_zone_t *)*((_QWORD *)malloc_zones + v2);
      v3 = 0u;
      v4 = 0u;
      ((void (*)(malloc_zone_t *, __int128 *))v7->introspect->statistics)(v7, &v3);
      v6->blocks_in_use += v3;
      v6->size_in_use += *((_QWORD *)&v3 + 1);
      v6->max_size_in_use += v4;
      v6->size_allocated += *((_QWORD *)&v4 + 1);
    }
  }
}

void malloc_zone_log(malloc_zone_t *zone, void *address)
{
  uint64_t v2;
  unsigned int i;

  if (zone)
  {
    ((void (*)(malloc_zone_t *, void *))zone->introspect->log)(zone, address);
  }
  else
  {
    for (i = 0; i < malloc_num_zones; ++i)
    {
      v2 = i;
      (*(void (**)(_QWORD, void *))(*(_QWORD *)(*((_QWORD *)malloc_zones + v2) + 96) + 32))(*((_QWORD *)malloc_zones + v2), address);
    }
  }
}

void mag_set_thread_index(int a1)
{
  _os_cpu_number_override = a1;
  nano_common_cpu_number_override_set();
}

void (*malloc_error())(uint64_t a1)
{
  return DefaultMallocError;
}

void DefaultMallocError(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v15 = a1;
  v14 = _simple_salloc(a1);
  if (v14)
  {
    _simple_sprintf(v14, "*** error %d", v15);
    v7 = _simple_string(v14);
    malloc_report(16, (uint64_t)"%s\n", v8, v9, v10, v11, v12, v13, v7);
    qword_A4008 = _simple_string(v14);
  }
  else
  {
    malloc_report(16, (uint64_t)"*** error %d\n", v1, v2, v3, v4, v5, v6, v15);
    qword_A4008 = (uint64_t)"*** DefaultMallocError called";
  }
  abort();
}

void _malloc_fork_prepare()
{
  _malloc_lock_all((void (*)(uint64_t))qword_A8140);
}

void _malloc_lock_all(void (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;

  v3 = 0;
  os_unfair_lock_lock_with_options(&_malloc_lock, 327680);
  v1 = mfm_lock();
  while (v3 < malloc_num_zones)
  {
    v2 = v3++;
    v1 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)malloc_zones + v2) + 96) + 40))(*((_QWORD *)malloc_zones + v2));
  }
  if (initial_xzone_zone)
    xzm_force_lock_global_state(initial_xzone_zone);
  if (a1)
    a1(v1);
}

void _malloc_fork_parent()
{
  _malloc_unlock_all((void (*)(void))qword_A8148);
}

void _malloc_unlock_all(void (*a1)(void))
{
  uint64_t v1;
  unsigned int v2;

  if (initial_xzone_zone)
    xzm_force_unlock_global_state(initial_xzone_zone);
  v2 = 0;
  if (a1)
    a1();
  while (v2 < malloc_num_zones)
  {
    v1 = v2++;
    (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)malloc_zones + v1) + 96) + 48))(*((_QWORD *)malloc_zones
                                                                                                 + v1));
  }
  mfm_unlock();
  os_unfair_lock_unlock((os_unfair_lock_t)&_malloc_lock);
}

void _malloc_fork_child()
{
  if ((_malloc_entropy_initialized & 1) != 0 && initial_nano_zone)
    nanov2_forked_zone((_QWORD *)initial_nano_zone);
  _malloc_reinit_lock_all((void (*)(void))qword_A8150);
}

void _malloc_reinit_lock_all(void (*a1)(void))
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;

  if (initial_xzone_zone)
    xzm_force_reinit_lock_global_state(initial_xzone_zone);
  v3 = 0;
  if (a1)
    a1();
  while (v3 < malloc_num_zones)
  {
    v1 = v3++;
    v2 = *((_QWORD *)malloc_zones + v1);
    if (*(_DWORD *)(v2 + 104) >= 9u)
      (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 96) + 104))(v2);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 96) + 48))(v2);
  }
  mfm_reinit_lock();
  _malloc_lock = 0;
}

mstats *mstats(mstats *__return_ptr retstr)
{
  mstats *result;
  malloc_statistics_t v3;

  memset(&v3, 0, sizeof(v3));
  memset(retstr, 0, sizeof(mstats));
  malloc_zone_statistics(0, &v3);
  retstr->bytes_total = v3.size_allocated;
  retstr->chunks_used = v3.blocks_in_use;
  retstr->bytes_used = v3.size_in_use;
  retstr->chunks_free = 0;
  retstr->bytes_free = retstr->bytes_total - retstr->bytes_used;
  return result;
}

BOOLean_t malloc_zone_enable_discharge_checking(malloc_zone_t *zone)
{
  if (zone->version < 7)
    return 0;
  if (zone->introspect->enable_discharge_checking)
    return ((uint64_t (*)(malloc_zone_t *))zone->introspect->enable_discharge_checking)(zone);
  return 0;
}

void malloc_zone_disable_discharge_checking(malloc_zone_t *zone)
{
  if (zone->version >= 7)
  {
    if (zone->introspect->disable_discharge_checking)
      ((void (*)(malloc_zone_t *))zone->introspect->disable_discharge_checking)(zone);
  }
}

void malloc_zone_discharge(malloc_zone_t *zone, void *memory)
{
  malloc_zone_t *v3;

  v3 = zone;
  if (!zone)
    v3 = malloc_zone_from_ptr(memory);
  if (v3 && v3->version >= 7)
  {
    if (v3->introspect->discharge)
      ((void (*)(malloc_zone_t *, void *))v3->introspect->discharge)(v3, memory);
  }
}

void malloc_zone_enumerate_discharged_pointers(malloc_zone_t *zone, void *report_discharged)
{
  uint64_t v2;
  unsigned int i;
  uint64_t v5;

  if (zone)
  {
    if (zone->version >= 7 && zone->introspect->enumerate_discharged_pointers)
      ((void (*)(malloc_zone_t *, void *))zone->introspect->enumerate_discharged_pointers)(zone, report_discharged);
  }
  else
  {
    for (i = 0; i < malloc_num_zones; ++i)
    {
      v2 = i;
      v5 = *((_QWORD *)malloc_zones + v2);
      if (*(_DWORD *)(v5 + 104) >= 7u)
      {
        if (*(_QWORD *)(*(_QWORD *)(v5 + 96) + 96))
          (*(void (**)(uint64_t, void *))(*(_QWORD *)(v5 + 96) + 96))(v5, report_discharged);
      }
    }
  }
}

void malloc_zero_on_free_disable()
{
  malloc_zero_policy = 1;
}

uint64_t malloc_variant_is_debug_4test()
{
  return 1;
}

void set_malloc_singlethreaded()
{
  if (!set_malloc_singlethreaded_warned)
    set_malloc_singlethreaded_warned = 1;
}

void malloc_singlethreaded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  if (!malloc_singlethreaded_warned)
  {
    malloc_report(3, (uint64_t)"*** OBSOLETE: malloc_singlethreaded()\n", a3, a4, a5, a6, a7, a8, vars0);
    malloc_singlethreaded_warned = 1;
  }
}

uint64_t malloc_debug(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  malloc_report(3, (uint64_t)"*** OBSOLETE: malloc_debug()\n", a3, a4, a5, a6, a7, a8, v9);
  return 0;
}

uint64_t malloc_get_thread_options()
{
  return *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 896);
}

uint64_t malloc_set_thread_options(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  v2 = a1;
  if ((a1 & 1) != 0)
    LOBYTE(v2) = a1 & 0xF9 | 6;
  result = pgm_thread_set_disabled((v2 & 2) != 0);
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 896) = v2;
  return result;
}

uint64_t _malloc_register_stack_logger(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char v10;

  if ((malloc_sanitizer_enabled & 1) == 0 || (a1 & 1) != 0)
  {
    if (_register_msl_dylib_pred != -1)
      _os_once(&_register_msl_dylib_pred, 0, register_msl_dylib);
    if (off_A8130)
    {
      v10 = 1;
    }
    else
    {
      malloc_report(4, (uint64_t)"failed to load MallocStackLogging.framework\n", a3, a4, a5, a6, a7, a8, v9);
      v10 = 0;
    }
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t turn_on_stack_logging(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  v9 = a1;
  malloc_register_stack_logger(a1, a2, a3, a4, a5, a6, a7, a8);
  if (off_A8168)
    return off_A8168(v9);
  else
    return 0;
}

uint64_t turn_off_stack_logging(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = malloc_register_stack_logger(a1, a2, a3, a4, a5, a6, a7, a8);
  if (off_A8170)
    return off_A8170(result);
  return result;
}

uint64_t default_zone_size(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (lite_zone)
    v3 = lite_zone;
  else
    v3 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v3, a2);
}

uint64_t default_zone_malloc(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (lite_zone)
    v3 = lite_zone;
  else
    v3 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v3, a2);
}

uint64_t default_zone_calloc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (lite_zone)
    v4 = lite_zone;
  else
    v4 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v4, a2, a3);
}

uint64_t default_zone_valloc(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (lite_zone)
    v3 = lite_zone;
  else
    v3 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(v3, a2);
}

uint64_t default_zone_free(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (lite_zone)
    v3 = lite_zone;
  else
    v3 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v3, a2);
}

uint64_t default_zone_realloc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (lite_zone)
    v4 = lite_zone;
  else
    v4 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 56))(v4, a2, a3);
}

uint64_t default_zone_destroy()
{
  uint64_t v1;

  if (lite_zone)
    v1 = lite_zone;
  else
    v1 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t))(v1 + 64))(v1);
}

uint64_t default_zone_batch_malloc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;

  if (lite_zone)
    v5 = lite_zone;
  else
    v5 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v5 + 80))(v5, a2, a3, a4);
}

uint64_t default_zone_batch_free(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  if (lite_zone)
    v4 = lite_zone;
  else
    v4 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v4 + 88))(v4, a2, a3);
}

uint64_t default_zone_memalign(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (lite_zone)
    v4 = lite_zone;
  else
    v4 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 112))(v4, a2, a3);
}

uint64_t default_zone_free_definite_size(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (lite_zone)
    v4 = lite_zone;
  else
    v4 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 120))(v4, a2, a3);
}

uint64_t default_zone_pressure_relief(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (lite_zone)
    v3 = lite_zone;
  else
    v3 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 128))(v3, a2);
}

uint64_t default_zone_malloc_claimed_address(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (lite_zone)
    v3 = lite_zone;
  else
    v3 = *(_QWORD *)malloc_zones;
  return malloc_zone_claimed_address(v3, a2);
}

uint64_t default_zone_ptr_in_use_enumerator(unsigned int a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  if (lite_zone)
    v7 = lite_zone;
  else
    v7 = *(_QWORD *)malloc_zones;
  return (**(uint64_t (***)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v7 + 96))(a1, a2, a3, v7, a5, a6);
}

uint64_t default_zone_good_size(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (lite_zone)
    v3 = lite_zone;
  else
    v3 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 96) + 8))(v3, a2);
}

uint64_t default_zone_check()
{
  uint64_t v1;

  if (lite_zone)
    v1 = lite_zone;
  else
    v1 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 96) + 16))(v1);
}

uint64_t default_zone_print(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  if (lite_zone)
    v3 = lite_zone;
  else
    v3 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 96) + 24))(v3, a2);
}

uint64_t default_zone_log(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (lite_zone)
    v3 = lite_zone;
  else
    v3 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 96) + 32))(v3, a2);
}

uint64_t default_zone_force_lock()
{
  uint64_t v1;

  if (lite_zone)
    v1 = lite_zone;
  else
    v1 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 96) + 40))(v1);
}

uint64_t default_zone_force_unlock()
{
  uint64_t v1;

  if (lite_zone)
    v1 = lite_zone;
  else
    v1 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 96) + 48))(v1);
}

uint64_t default_zone_statistics(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (lite_zone)
    v3 = lite_zone;
  else
    v3 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 96) + 56))(v3, a2);
}

uint64_t default_zone_locked()
{
  uint64_t v1;

  if (lite_zone)
    v1 = lite_zone;
  else
    v1 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 96) + 64))(v1);
}

uint64_t default_zone_reinit_lock()
{
  uint64_t v1;

  if (lite_zone)
    v1 = lite_zone;
  else
    v1 = *(_QWORD *)malloc_zones;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 96) + 104))(v1);
}

void set_flags_from_environment()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  char *v155;
  unint64_t v156;
  char *v157;
  unint64_t v158;
  char *v159;
  int v160;
  unint64_t v161;
  char *v162;
  unint64_t v163;
  char *v164;
  int v165;
  unint64_t v166;
  char *v167;
  unint64_t v168;
  char *v169;
  unint64_t v170;
  char *v171;
  unint64_t v173;
  int v174;
  char v175;
  char *v176;
  char **i;
  char **v178;
  char *v179;

  v179 = 0;
  v178 = 0;
  v178 = *_NSGetEnviron();
  v176 = 0;
  malloc_debug_flags = 256;
  for (i = v178; ; ++i)
  {
    v176 = *i;
    if (!v176)
      break;
    if (!_platform_strncmp(v176, "Malloc", 6) || !_platform_strncmp(v176, "_Malloc", 6))
    {
      if (issetugid())
        return;
      break;
    }
  }
  v175 = dyld_process_is_restricted() & 1;
  malloc_print_configure();
  if (v176)
  {
    v179 = getenv("MallocGuardEdges");
    if (v179)
    {
      if (_platform_strcmp(v179, "all"))
      {
        malloc_debug_flags |= 3u;
        malloc_debug_flags &= ~4u;
        malloc_report(5, (uint64_t)"adding guard pages for large allocator blocks\n", v0, v1, v2, v3, v4, v5, v148);
        if (getenv("MallocDoNotProtectPrelude"))
        {
          malloc_debug_flags |= 8u;
          malloc_report(5, (uint64_t)"... but not protecting prelude guard page\n", v6, v7, v8, v9, v10, v11, v148);
        }
        if (getenv("MallocDoNotProtectPostlude"))
        {
          malloc_debug_flags |= 0x10u;
          malloc_report(5, (uint64_t)"... but not protecting postlude guard page\n", v12, v13, v14, v15, v16, v17, v148);
        }
      }
      else
      {
        malloc_debug_flags |= 7u;
        malloc_debug_flags &= 0xFFFFFFE7;
        malloc_report(5, (uint64_t)"adding guard pages to all regions\n", v0, v1, v2, v3, v4, v5, v148);
      }
    }
    if (getenv("MallocScribble"))
    {
      malloc_debug_flags |= 0x20u;
      malloc_report(5, (uint64_t)"enabling scribbling to detect mods to free blocks\n", v18, v19, v20, v21, v22, v23, v148);
    }
    if (getenv("MallocErrorAbort"))
    {
      malloc_debug_flags |= 0x40u;
      malloc_report(5, (uint64_t)"enabling abort() on bad malloc or free\n", v24, v25, v26, v27, v28, v29, v148);
    }
    if (getenv("MallocTracing"))
      malloc_tracing_enabled = 1;
    if (getenv("MallocSimpleStackLogging"))
      malloc_simple_stack_logging = 1;
    if (getenv("MallocReportConfig"))
      malloc_report_config = 1;
    v179 = getenv("MallocCheckHeapStart");
    if (v179)
    {
      malloc_check_start = strtoul(v179, 0, 0);
      if (!malloc_check_start)
        malloc_check_start = 1;
      if (malloc_check_start == -1)
        malloc_check_start = 1;
      v179 = getenv("MallocCheckHeapEach");
      if (v179)
      {
        malloc_check_each = strtoul(v179, 0, 0);
        if (!malloc_check_each)
          malloc_check_each = 1;
        if (malloc_check_each == -1)
          malloc_check_each = 1;
      }
      malloc_report(5, (uint64_t)"checks heap after operation #%d and each %d operations\n", v30, v31, v32, v33, v34, v35, malloc_check_start);
      v179 = getenv("MallocCheckHeapAbort");
      if (v179)
        malloc_check_abort = strtol(v179, 0, 0);
      if (malloc_check_abort)
      {
        malloc_report(5, (uint64_t)"will abort on heap corruption\n", v36, v37, v38, v39, v40, v41, v149);
      }
      else
      {
        v179 = getenv("MallocCheckHeapSleep");
        if (v179)
          malloc_check_sleep = strtol(v179, 0, 0);
        if (malloc_check_sleep <= 0)
        {
          if (malloc_check_sleep >= 0)
            malloc_report(5, (uint64_t)"no sleep on heap corruption\n", v42, v43, v44, v45, v46, v47, v149);
          else
            malloc_report(5, (uint64_t)"will sleep once for %d seconds on heap corruption\n", v42, v43, v44, v45, v46, v47, -malloc_check_sleep);
        }
        else
        {
          malloc_report(5, (uint64_t)"will sleep for %d seconds on heap corruption\n", v42, v43, v44, v45, v46, v47, malloc_check_sleep);
        }
      }
    }
    v179 = getenv("MallocMaxMagazines");
    if (!v179)
      v179 = getenv("_MallocMaxMagazines");
    if (v179)
    {
      v174 = strtol(v179, 0, 0);
      if (v174)
      {
        if (v174 == 0xFFFF)
        {
          max_magazines = ncpuclusters;
          malloc_report(5, (uint64_t)"Maximum magazines limited to ncpuclusters (%d)\n", v48, v49, v50, v51, v52, v53, ncpuclusters);
        }
        else if (v174 >= 0)
        {
          if (v174 <= logical_ncpus)
          {
            max_magazines = v174;
            malloc_report(5, (uint64_t)"Maximum magazines set to %d\n", v48, v49, v50, v51, v52, v53, v174);
          }
          else
          {
            max_magazines = logical_ncpus;
            malloc_report(5, (uint64_t)"Maximum magazines limited to number of logical CPUs (%d)\n", v48, v49, v50, v51, v52, v53, logical_ncpus);
          }
        }
        else
        {
          malloc_report(3, (uint64_t)"Maximum magazines must be positive - ignored.\n", v48, v49, v50, v51, v52, v53, v148);
        }
      }
      else
      {
        malloc_report(5, (uint64_t)"Maximum magazines defaulted to %d\n", v48, v49, v50, v51, v52, v53, max_magazines);
      }
    }
    v179 = getenv("MallocLargeExpandedCacheThreshold");
    if (v179)
    {
      v173 = strtoull(v179, 0, 0);
      if (v173)
      {
        magazine_large_expanded_cache_threshold = v173;
        malloc_report(5, (uint64_t)"Large expanded cache threshold set to %lly\n", v54, v55, v56, v57, v58, v59, v173);
      }
      else
      {
        malloc_report(5, (uint64_t)"Large expanded cache threshold defaulted to %lly\n", v54, v55, v56, v57, v58, v59, magazine_large_expanded_cache_threshold);
      }
    }
    v179 = getenv("MallocLargeDisableASLR");
    if (v179)
    {
      if (strtoull(v179, 0, 0))
      {
        malloc_report(5, (uint64_t)"Disabling ASLR slide on large allocations\n", v60, v61, v62, v63, v64, v65, v148);
        malloc_debug_flags |= 0x20000000u;
      }
      else
      {
        malloc_report(5, (uint64_t)"Enabling ASLR slide on large allocations\n", v60, v61, v62, v63, v64, v65, v148);
        malloc_debug_flags &= ~0x20000000u;
      }
    }
    v179 = getenv("MallocSpaceEfficient");
    if (v179)
    {
      v171 = 0;
      v170 = malloc_common_convert_to_long(v179, &v171);
      if (*v171 || v171 == v179 || v170 > 1)
      {
        malloc_report(3, (uint64_t)"MallocSpaceEfficient must be 0 or 1.\n", v66, v67, v68, v69, v70, v71, v148);
      }
      else
      {
        aggressive_madvise_enabled = v170 == 1;
        if (v170)
          large_cache_enabled = 0;
        malloc_space_efficient_enabled = v170 == 1;
      }
    }
    v179 = getenv("MallocAggressiveMadvise");
    if (v179)
    {
      v169 = 0;
      v168 = malloc_common_convert_to_long(v179, &v169);
      if (*v169 || v169 == v179 || v168 > 1)
        malloc_report(3, (uint64_t)"MallocAggressiveMadvise must be 0 or 1.\n", v72, v73, v74, v75, v76, v77, v148);
      else
        aggressive_madvise_enabled = v168 == 1;
    }
    v179 = getenv("MallocLargeCache");
    if (v179)
    {
      v167 = 0;
      v166 = malloc_common_convert_to_long(v179, &v167);
      if (*v167 || v167 == v179 || v166 > 1)
        malloc_report(3, (uint64_t)"MallocLargeCache must be 0 or 1.\n", v78, v79, v80, v81, v82, v83, v148);
      else
        large_cache_enabled = v166 == 1;
    }
    v179 = getenv("MallocRecircRetainedRegions");
    if (v179)
    {
      v165 = strtol(v179, 0, 0);
      if (v165 <= 0)
        malloc_report(3, (uint64_t)"MallocRecircRetainedRegions must be positive - ignored.\n", v84, v85, v86, v87, v88, v89, v148);
      else
        recirc_retained_regions = v165;
    }
    v179 = getenv("MallocZeroOnFree");
    if (v179)
    {
      v164 = 0;
      v163 = malloc_common_convert_to_long(v179, &v164);
      if (*v164 || v164 == v179 || v163 > 1)
        malloc_report(3, (uint64_t)"MallocZeroOnFree must be 0 or 1.\n", v90, v91, v92, v93, v94, v95, v148);
      else
        malloc_zero_policy = v163 == 0;
    }
    v179 = getenv("MallocZeroOnAlloc");
    if (v179)
    {
      v162 = 0;
      v161 = malloc_common_convert_to_long(v179, &v162);
      if (*v162 || v162 == v179 || v161 > 1)
      {
        malloc_report(3, (uint64_t)"MallocZeroOnAlloc must be 0 or 1.\n", v96, v97, v98, v99, v100, v101, v148);
      }
      else
      {
        if (v161)
          v102 = 2;
        else
          v102 = 1;
        malloc_zero_policy = v102;
      }
    }
    v179 = getenv("MallocCheckZeroOnFreeCorruption");
    if (v179)
    {
      v160 = strtol(v179, 0, 0);
      if (v160 <= 0)
        malloc_report(3, (uint64_t)"malloc_zero_on_free_sample_period must be positive - ignored.\n", v103, v104, v105, v106, v107, v108, v148);
      else
        malloc_zero_on_free_sample_period = v160;
    }
    v179 = getenv("MallocSecureAllocator");
    if (v179 && (malloc_internal_security_policy & 1) != 0)
    {
      v159 = 0;
      v158 = malloc_common_convert_to_long(v179, &v159);
      if (*v159 || v159 == v179 || v158 > 1)
      {
        malloc_report(3, (uint64_t)"MallocSecureAllocator must be 0 or 1.\n", v109, v110, v111, v112, v113, v114, v148);
      }
      else
      {
        malloc_xzone_enabled = v158 != 0;
        if (v158)
          v115 = 2;
        else
          v115 = 1;
        malloc_xzone_enabled_override = v115;
      }
    }
    v179 = getenv("MallocSecureAllocatorNano");
    if (v179)
    {
      v157 = 0;
      v156 = malloc_common_convert_to_long(v179, &v157);
      if (*v157 || v157 == v179 || v156 > 1)
      {
        malloc_report(3, (uint64_t)"MallocSecureAllocatorNano must be 0 or 1.\n", v116, v117, v118, v119, v120, v121, v148);
      }
      else
      {
        if (v156)
          v122 = 2;
        else
          v122 = 1;
        malloc_xzone_nano_override = v122;
      }
    }
    v179 = getenv("MallocNanoOnXzone");
    if (v179)
    {
      v155 = 0;
      v154 = malloc_common_convert_to_long(v179, &v155);
      if (*v155 || v155 == v179 || v154 > 1)
      {
        malloc_report(3, (uint64_t)"MallocNanoOnXzone must be 0 or 1.\n", v123, v124, v125, v126, v127, v128, v148);
      }
      else
      {
        if (v154)
          v129 = 2;
        else
          v129 = 1;
        malloc_nano_on_xzone_override = v129;
      }
    }
    v179 = getenv("MallocSecureAllocatorCreateMzones");
    if (v179 && (malloc_internal_security_policy & 1) != 0)
    {
      v153 = 0;
      v152 = malloc_common_convert_to_long(v179, &v153);
      if (*v153 || v153 == v179 || v152 > 1)
        malloc_report(3, (uint64_t)"MallocSecureAllocatorCreateMzones must be 0 or 1.\n", v130, v131, v132, v133, v134, v135, v148);
      else
        xzm_create_mzones = v152 != 0;
    }
    v179 = getenv("MallocSecureAllocatorPurgeableZone");
    if (v179 && (malloc_internal_security_policy & 1) != 0)
    {
      v151 = 0;
      v150 = malloc_common_convert_to_long(v179, &v151);
      if (*v151 || v151 == v179 || v150 > 1)
        malloc_report(3, (uint64_t)"MallocSecureAllocatorPurgeableZone must be 0 or 1.\n", v136, v137, v138, v139, v140, v141, v148);
      else
        purgeable_zone_use_xzm = v150 != 0;
    }
    if (getenv("MallocHelp"))
      malloc_report(5, (uint64_t)"environment variables that can be set for debug:\n- MallocLogFile <f> to create/append messages to file <f> instead of stderr\n- MallocGuardEdges to add 2 guard pages for each large block\n- MallocDoNotProtectPrelude to disable protection (when previous flag set)\n- MallocDoNotProtectPostlude to disable protection (when previous flag set)\n- MallocStackLogging to record all stacks.  Tools like leaks can then be applied\n- MallocStackLoggingNoCompact to record all stacks.  Needed for malloc_history\n- MallocStackLoggingDirectory to set location of stack logs, which can grow large; default is /tmp\n"
                 "- MallocScribble to detect writing on free blocks and missing initializers:\n"
                 "  0x55 is written upon free and 0xaa is written on allocation\n"
                 "- MallocCheckHeapStart <n> to start checking the heap after <n> operations\n"
                 "- MallocCheckHeapEach <s> to repeat the checking of the heap after <s> operations\n"
                 "- MallocCheckHeapSleep <t> to sleep <t> seconds on heap corruption\n"
                 "- MallocCheckHeapAbort <b> to abort on heap corruption if <b> is non-zero\n"
                 "- MallocCorruptionAbort to abort on malloc errors, but not on out of memory for 32-bit processes\n"
                 "  MallocCorruptionAbort is always set on 64-bit processes\n"
                 "- MallocErrorAbort to abort on any malloc error, including out of memory\n"
                 "- MallocTracing to emit kdebug trace points on malloc entry points\n"
                 "- MallocZeroOnFree to enable or disable zero-on-free behavior (for debugging only)\n"
                 "- MallocCheckZeroOnFreeCorruption to enable zero-on-free corruption detection\n"
                 "- MallocHelp - this help!\n",
        v142,
        v143,
        v144,
        v145,
        v146,
        v147,
        v148);
  }
}

uint64_t _malloc_default_reader_6(unsigned int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v5;

  v5 = 1;
  if (a1)
    v5 = mach_task_is_self(a1) != 0;
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x76964);
  }
  *a4 = a2;
  return 0;
}

uint64_t register_msl_dylib()
{
  return set_msl_lite_hooks((uint64_t (*)(uint64_t (**)(), uint64_t))qword_A8178);
}

_QWORD *malloc_freezedry()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int i;
  _QWORD *v16;

  v16 = j__malloc(0x10uLL);
  *(_DWORD *)v16 = 6;
  *((_DWORD *)v16 + 1) = malloc_num_zones;
  v16[1] = j__calloc(malloc_num_zones, 0x5000uLL);
  for (i = 0; i < malloc_num_zones; ++i)
  {
    if (_platform_strcmp(*(_QWORD *)(*((_QWORD *)malloc_zones + i) + 72), "DefaultMallocZone"))
    {
      _free((void *)v16[1], v0, v1, v2, v3, v4, v5, v6);
      _free(v16, v7, v8, v9, v10, v11, v12, v13);
      return 0;
    }
    _platform_memmove(v16[1] + 20480 * i, *((_QWORD *)malloc_zones + i), 20480);
  }
  return v16;
}

uint64_t malloc_jumpstart(uint64_t a1)
{
  unsigned int i;

  if (*(_DWORD *)a1 == 6)
  {
    for (i = 0; i < *(_DWORD *)(a1 + 4); ++i)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 20480 * i + 16) = szone_size;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 20480 * i + 24) = frozen_malloc;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 20480 * i + 32) = frozen_calloc;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 20480 * i + 40) = frozen_valloc;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 20480 * i + 48) = frozen_free;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 20480 * i + 56) = frozen_realloc;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 20480 * i + 64) = frozen_destroy;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 20480 * i + 96) = szone_introspect;
      malloc_zone_register((malloc_zone_t *)(*(_QWORD *)(a1 + 8) + 20480 * i));
    }
    return 0;
  }
  else
  {
    return 1;
  }
}

void *frozen_malloc(uint64_t a1, size_t a2)
{
  return j__malloc(a2);
}

void *frozen_calloc(uint64_t a1, size_t a2, size_t a3)
{
  return j__calloc(a2, a3);
}

void *frozen_valloc(uint64_t a1, size_t a2)
{
  return j__valloc(a2);
}

void *frozen_realloc(os_unfair_lock_s *a1, unint64_t a2, size_t a3)
{
  void *v4;
  unint64_t v5;

  v5 = szone_size(a1, a2);
  if (a3 <= v5)
    return (void *)a2;
  v4 = j__malloc(a3);
  if (v5)
    _platform_memmove(v4, a2, v5);
  return v4;
}

void tiny_print_region_free_list(uint64_t a1, unsigned int a2)
{
  int v2;
  const void *v3;
  const void *v4;
  int v5;
  unint64_t v6;

  v6 = a1 & 0xFFFFFFFFFFF00000;
  v4 = (const void *)(a1 & 0xFFFFFFFFFFF00000);
  v5 = *(unsigned __int16 *)((char *)&locret_3F28 + 4 * a2 + (a1 & 0xFFFFFFFFFFF00000));
  if (*(_WORD *)((char *)&locret_3F28 + 4 * a2 + (a1 & 0xFFFFFFFFFFF00000)))
    v3 = (const void *)(v6
                      + 16512
                      + 16 * (*(unsigned __int16 *)((char *)&locret_3F28 + 4 * a2 + (a1 & 0xFFFFFFFFFFF00000)) - 1));
  else
    v3 = 0;
  v2 = *(unsigned __int16 *)((char *)&locret_3F28 + 4 * a2 + (a1 & 0xFFFFFFFFFFF00000) + 2);
  if (*(_WORD *)((char *)&locret_3F28 + 4 * a2 + (a1 & 0xFFFFFFFFFFF00000) + 2))
    malloc_printf("For region %p, first block: %d (%p), last block: %d (%p)\n", v4, v5, v3, v2, (const void *)(v6+ 16512+ 16 * (*(unsigned __int16 *)((char *)&locret_3F28 + 4 * a2 + (a1 & 0xFFFFFFFFFFF00000) + 2) - 1)));
  else
    malloc_printf("For region %p, first block: %d (%p), last block: %d (%p)\n", v4, v5, v3, v2, 0);
}

unint64_t tiny_finalize_region(unint64_t result, uint64_t a2)
{
  _DWORD *v2;
  unsigned __int16 v3;
  unsigned __int16 v4;
  unsigned __int16 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;

  v10 = result;
  v9 = a2;
  v8 = 0;
  v7 = 0;
  v6 = 0;
  v5 = 0;
  v4 = 0;
  if (*(_QWORD *)(a2 + 2128))
  {
    v8 = *(_QWORD *)(v9 + 2144) + 0x100000 - *(_QWORD *)(v9 + 2128);
    v5 = *(_QWORD *)(v9 + 2128) >> 4;
    v6 = (v8 & 0xFFFFFFFFFFF00000) + 40;
    v3 = (v8 - ((v8 & 0xFFFFFFFFFFF00000) + 16512)) >> 4;
    if (v3 != 64503)
    {
      v12 = v6;
      v11 = v3 + 1;
      v2 = (_DWORD *)(v6 + 8 * ((int)(unsigned __int16)(v3 + 1) >> 5));
      *v2 &= ~(1 << ((v3 + 1) & 0x1F));
    }
    v7 = tiny_previous_preceding_free(v8, &v4);
    if (v7)
    {
      set_tiny_meta_header_middle(v8);
      tiny_free_list_remove_ptr(v10, v9, v7, v4);
      zero_tiny_free_inline_meta_following(v7, v4);
      v8 = v7;
      v5 += v4;
    }
    result = tiny_free_list_add_ptr(v10, v9, v8, v5);
    *(_QWORD *)(v9 + 2128) = 0;
  }
  *(_QWORD *)(v9 + 2144) = 0;
  return result;
}

unint64_t tiny_previous_preceding_free(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 tiny_previous_free_msize;
  unsigned __int16 v4;
  unint64_t v5;
  unint64_t v6;

  v6 = (a1 & 0xFFFFFFFFFFF00000) + 40;
  v5 = (a1 & 0xFFFFFFFFFFF00000) + 44;
  v4 = (a1 - ((a1 & 0xFFFFFFFFFFF00000) + 16512)) >> 4;
  if (!v4)
    return 0;
  tiny_previous_free_msize = get_tiny_previous_free_msize(a1);
  if (v4 < (int)tiny_previous_free_msize)
    return 0;
  if (((*(_DWORD *)(v6 + 8 * ((int)(unsigned __int16)(v4 - tiny_previous_free_msize) >> 5)) >> ((v4
                                                                                                  - tiny_previous_free_msize) & 0x1F)) & 1) == 0)
    return 0;
  if (((*(_DWORD *)(v5 + 8 * ((int)(unsigned __int16)(v4 - tiny_previous_free_msize) >> 5)) >> ((v4
                                                                                                  - tiny_previous_free_msize) & 0x1F)) & 1) != 0)
    return 0;
  if (tiny_previous_free_msize != (unsigned __int16)get_tiny_free_size((a1 & 0xFFFFFFFFFFF00000)+ 16512+ 16 * (unsigned __int16)(v4 - tiny_previous_free_msize)))return 0;
  *a2 = tiny_previous_free_msize;
  return (a1 & 0xFFFFFFFFFFF00000) + 16512 + 16 * (unsigned __int16)(v4 - tiny_previous_free_msize);
}

uint64_t set_tiny_meta_header_middle(uint64_t result)
{
  unint64_t v1;

  v1 = (result & 0xFFFFFFFFFFF00000) + 16512;
  *(_DWORD *)&stru_20.segname[8 * ((int)(unsigned __int16)((result - v1) >> 4) >> 5) + (result & 0xFFFFFFFFFFF00000)] &= ~(1 << (((result - v1) >> 4) & 0x1F));
  *(_DWORD *)&stru_20.segname[8 * ((int)(unsigned __int16)((result - v1) >> 4) >> 5)
                            + 4
                            + (result & 0xFFFFFFFFFFF00000)] &= ~(1 << (((result - v1) >> 4) & 0x1F));
  return result;
}

void tiny_free_list_remove_ptr(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned __int16 v10;
  unsigned int v11;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v11 = tiny_slot_from_msize(a4);
  v16 = (*(_QWORD *)(a3 + 8) >> 60) & 0xFFFFFFFFFFFFFFF0 | (16 * *(_QWORD *)(a3 + 8));
  v17 = v16 ^ *(_QWORD *)(a1 + 632);
  if (((((*(_QWORD *)(a3 + 8) >> 60) | (16 * *(_BYTE *)(a3 + 8))) ^ (((unsigned __int16)(((v17 + HIDWORD(v17)) >> 16) + v17 + WORD2(v17)) >> 8) + ((v17 + HIDWORD(v17)) >> 16) + v17 + BYTE4(v17))) & 0xF) != 0)
  {
    free_list_checksum_botch(a1, a3 + 8, *(_QWORD *)(a3 + 8), v4, v5, v6, v7, v8);
    __break(1u);
    JUMPOUT(0x7749CLL);
  }
  v15 = (*(_QWORD *)a3 >> 60) & 0xFFFFFFFFFFFFFFF0 | (16 * *(_QWORD *)a3);
  v18 = v15 ^ *(_QWORD *)(a1 + 632);
  if (((((*(_QWORD *)a3 >> 60) | (16 * *(_BYTE *)a3)) ^ (((unsigned __int16)(((v18 + HIDWORD(v18)) >> 16) + v18 + WORD2(v18)) >> 8)
                                                                                          + ((v18 + HIDWORD(v18)) >> 16)
                                                                                          + v18
                                                                                          + BYTE4(v18))) & 0xF) != 0)
  {
    free_list_checksum_botch(a1, a3, *(_QWORD *)a3, v4, v5, v6, v7, v8);
    __break(1u);
    JUMPOUT(0x7758CLL);
  }
  if (v15)
  {
    v19 = ((*(_QWORD *)(v15 + 8) >> 60) & 0xFFFFFFFFFFFFFFF0 | (16 * *(_QWORD *)(v15 + 8))) ^ *(_QWORD *)(a1 + 632);
    if (((((*(_QWORD *)(v15 + 8) >> 60) | (16 * *(_BYTE *)(v15 + 8))) ^ (((unsigned __int16)(((v19 + HIDWORD(v19)) >> 16) + v19 + WORD2(v19)) >> 8) + ((v19 + HIDWORD(v19)) >> 16) + v19 + BYTE4(v19))) & 0xF) != 0)
    {
      free_list_checksum_botch(a1, v15 + 8, *(_QWORD *)(v15 + 8), v4, v5, v6, v7, v8);
      __break(1u);
      JUMPOUT(0x776FCLL);
    }
    if (((*(_QWORD *)(v15 + 8) >> 60) & 0xFFFFFFFFFFFFFFF0 | (16 * *(_QWORD *)(v15 + 8))) != a3)
    {
      malloc_zone_error(*(_DWORD *)(a1 + 620), 1, (uint64_t)"tiny_free_list_remove_ptr: Internal invariant broken (next ptr of prev): ptr=%p, prev_next=%p\n", v4, v5, v6, v7, v8, a3);
      __break(1u);
    }
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(a3 + 8);
  }
  else
  {
    *(_QWORD *)(a2 + 32 + 8 * v11) = v16;
    if (!v16)
    {
      v9 = (_DWORD *)(a2 + 2088 + 4 * (v11 >> 5));
      *v9 &= ~(1 << (v11 & 0x1F));
    }
  }
  if (v16)
  {
    v20 = ((*(_QWORD *)v16 >> 60) & 0xFFFFFFFFFFFFFFF0 | (16 * *(_QWORD *)v16)) ^ *(_QWORD *)(a1 + 632);
    if (((((*(_QWORD *)v16 >> 60) | (16 * *(_BYTE *)v16)) ^ (((unsigned __int16)(((v20 + HIDWORD(v20)) >> 16) + v20 + WORD2(v20)) >> 8)
                                                                                              + ((v20 + HIDWORD(v20)) >> 16)
                                                                                              + v20
                                                                                              + BYTE4(v20))) & 0xF) != 0)
    {
      free_list_checksum_botch(a1, v16, *(_QWORD *)v16, v4, v5, v6, v7, v8);
      __break(1u);
      JUMPOUT(0x77864);
    }
    if (((*(_QWORD *)v16 >> 60) & 0xFFFFFFFFFFFFFFF0 | (16 * *(_QWORD *)v16)) != a3)
    {
      malloc_zone_error(*(_DWORD *)(a1 + 620), 1, (uint64_t)"tiny_free_list_remove_ptr: Internal invariant broken (prev ptr of next): ptr=%p, next_prev=%p\n", v4, v5, v6, v7, v8, a3);
      __break(1u);
    }
    *(_QWORD *)v16 = *(_QWORD *)a3;
  }
  v10 = (a3 - ((a3 & 0xFFFFFFFFFFF00000) + 16512)) >> 4;
  if (*(unsigned __int16 *)((char *)&locret_3F28 + 4 * v11 + (a3 & 0xFFFFFFFFFFF00000)) == v10 + 1
    && *(unsigned __int16 *)((char *)&locret_3F28 + 4 * v11 + (a3 & 0xFFFFFFFFFFF00000) + 2) == v10 + 1)
  {
    *(_WORD *)((char *)&locret_3F28 + 4 * v11 + (a3 & 0xFFFFFFFFFFF00000) + 2) = 0;
    *(_WORD *)((char *)&locret_3F28 + 4 * v11 + (a3 & 0xFFFFFFFFFFF00000)) = 0;
  }
  else if (*(unsigned __int16 *)((char *)&locret_3F28 + 4 * v11 + (a3 & 0xFFFFFFFFFFF00000)) == v10 + 1)
  {
    if (!v16)
    {
      __break(1u);
      JUMPOUT(0x779E0);
    }
    *(_WORD *)((char *)&locret_3F28 + 4 * v11 + (a3 & 0xFFFFFFFFFFF00000)) = ((v16
                                                                               - ((v16 & 0xFFFFFFFFFFF00000)
                                                                                + 16512)) >> 4)
                                                                             + 1;
  }
  else if (*(unsigned __int16 *)((char *)&locret_3F28 + 4 * v11 + (a3 & 0xFFFFFFFFFFF00000) + 2) == v10 + 1)
  {
    if (!v15)
    {
      __break(1u);
      JUMPOUT(0x77A4CLL);
    }
    *(_WORD *)((char *)&locret_3F28 + 4 * v11 + (a3 & 0xFFFFFFFFFFF00000) + 2) = ((v15
                                                                                   - ((v15 & 0xFFFFFFFFFFF00000)
                                                                                    + 16512)) >> 4)
                                                                                 + 1;
  }
}

uint64_t zero_tiny_free_inline_meta_following(uint64_t result, unsigned __int16 a2)
{
  if (!malloc_zero_policy && a2 > 1u)
    *(_WORD *)(result + 16 * a2 - 2) = 0;
  return result;
}

unint64_t tiny_free_list_add_ptr(uint64_t a1, uint64_t a2, unint64_t a3, unsigned __int16 a4)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 v15;
  unsigned __int16 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;

  if (a4 && a4 <= 0x3Fu)
    v11 = a4 - 1;
  else
    v11 = 63;
  v18 = *(_QWORD *)(a2 + 32 + 8 * v11);
  result = set_tiny_meta_header_free(a3, a4);
  if (!v18)
  {
    v10 = (_DWORD *)(a2 + 2088 + 4 * (v11 >> 5));
    *v10 |= 1 << (v11 & 0x1F);
  }
  v17 = a3 & 0xFFFFFFFFFFF00000;
  v16 = *(_WORD *)((char *)&locret_3F28 + 4 * v11 + (a3 & 0xFFFFFFFFFFF00000));
  v15 = (a3 - ((a3 & 0xFFFFFFFFFFF00000) + 16512)) >> 4;
  if (v16)
  {
    v14 = v17 + 16512 + 16 * (v16 - 1);
    v22 = *(_QWORD *)((char *)&loc_4080 + 16 * v16 + (a3 & 0xFFFFFFFFFFF00000) - 16);
    v23 = (v22 >> 60) | (16 * v22);
    v32 = (v23 & 0xFFFFFFF0 ^ *(_DWORD *)(a1 + 632)) + ((v23 & 0xFFFFFFFFFFFFFFF0 ^ *(_QWORD *)(a1 + 632)) >> 32);
    if (((v23 ^ (((unsigned __int16)(HIWORD(v32) + v32) >> 8) + BYTE2(v32) + v32)) & 0xF) != 0)
    {
      v24 = (uint64_t *)(v17 + 16512 + 16 * (v16 - 1));
      free_list_checksum_botch(a1, (uint64_t)v24, *v24, v5, v6, v7, v8, v9);
      __break(1u);
      JUMPOUT(0x77D6CLL);
    }
    if ((v23 & 0xFFFFFFFFFFFFFFF0) != 0)
    {
      v25 = (a3 ^ *(_DWORD *)(a1 + 632)) + ((a3 ^ *(_QWORD *)(a1 + 632)) >> 32);
      *(_QWORD *)((char *)&dword_8 + (v23 & 0xFFFFFFFFFFFFFFF0)) = ((unint64_t)((((unsigned __int16)(HIWORD(v25) + v25) >> 8)
                                                                                        + BYTE2(v25)
                                                                                        + (_BYTE)v25) & 0xF) << 60) | (a3 >> 4);
    }
    else
    {
      *(_QWORD *)(a2 + 32 + 8 * v11) = a3;
    }
    *(_QWORD *)a3 = *(_QWORD *)v14;
    v26 = (v14 ^ *(_DWORD *)(a1 + 632)) + ((v14 ^ *(_QWORD *)(a1 + 632)) >> 32);
    *(_QWORD *)(a3 + 8) = ((unint64_t)((((unsigned __int16)(HIWORD(v26) + v26) >> 8) + BYTE2(v26) + (_BYTE)v26) & 0xF) << 60) | (v14 >> 4);
    v27 = (a3 ^ *(_DWORD *)(a1 + 632)) + ((a3 ^ *(_QWORD *)(a1 + 632)) >> 32);
    *(_QWORD *)v14 = ((unint64_t)((((unsigned __int16)(HIWORD(v27) + v27) >> 8) + BYTE2(v27) + (_BYTE)v27) & 0xF) << 60) | (a3 >> 4);
    *(_WORD *)((char *)&locret_3F28 + 4 * v11 + (a3 & 0xFFFFFFFFFFF00000)) = v15 + 1;
  }
  else
  {
    v13 = 0;
    if (*(int *)((char *)&dword_18 + (a3 & 0xFFFFFFFFFFF00000)) != -1 && *(_QWORD *)(a2 + 32 + 8 * v11))
    {
      result = tiny_earlier_region_last_free(a2, v17, v11);
      v13 = result;
    }
    if (v13)
    {
      v33 = ((*(_QWORD *)(v13 + 8) >> 60) & 0xFFFFFFFFFFFFFFF0 | (16 * *(_QWORD *)(v13 + 8))) ^ *(_QWORD *)(a1 + 632);
      if (((((*(_QWORD *)(v13 + 8) >> 60) | (16 * *(_BYTE *)(v13 + 8))) ^ (((unsigned __int16)(((v33 + HIDWORD(v33)) >> 16) + v33 + WORD2(v33)) >> 8) + ((v33 + HIDWORD(v33)) >> 16) + v33 + BYTE4(v33))) & 0xF) != 0)
      {
        free_list_checksum_botch(a1, v13 + 8, *(_QWORD *)(v13 + 8), v5, v6, v7, v8, v9);
        __break(1u);
        JUMPOUT(0x78134);
      }
      v12 = (*(_QWORD *)(v13 + 8) >> 60) & 0xFFFFFFFFFFFFFFF0 | (16 * *(_QWORD *)(v13 + 8));
      v28 = (a3 ^ *(_DWORD *)(a1 + 632)) + ((a3 ^ *(_QWORD *)(a1 + 632)) >> 32);
      *(_QWORD *)(v13 + 8) = ((unint64_t)((((unsigned __int16)(HIWORD(v28) + v28) >> 8) + BYTE2(v28) + (_BYTE)v28) & 0xF) << 60) | (a3 >> 4);
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 32 + 8 * v11);
      *(_QWORD *)(a2 + 32 + 8 * v11) = a3;
    }
    v29 = (v13 ^ *(_DWORD *)(a1 + 632)) + ((v13 ^ *(_QWORD *)(a1 + 632)) >> 32);
    *(_QWORD *)a3 = ((unint64_t)((((unsigned __int16)(HIWORD(v29) + v29) >> 8) + BYTE2(v29) + (_BYTE)v29) & 0xF) << 60) | (v13 >> 4);
    if (v12)
    {
      v30 = (a3 ^ *(_DWORD *)(a1 + 632)) + ((a3 ^ *(_QWORD *)(a1 + 632)) >> 32);
      *(_QWORD *)v12 = ((unint64_t)((((unsigned __int16)(HIWORD(v30) + v30) >> 8) + BYTE2(v30) + (_BYTE)v30) & 0xF) << 60) | (a3 >> 4);
    }
    v31 = (v12 ^ *(_DWORD *)(a1 + 632)) + ((v12 ^ *(_QWORD *)(a1 + 632)) >> 32);
    *(_QWORD *)(a3 + 8) = ((unint64_t)((((unsigned __int16)(HIWORD(v31) + v31) >> 8) + BYTE2(v31) + (_BYTE)v31) & 0xF) << 60) | (v12 >> 4);
    *(_WORD *)((char *)&locret_3F28 + 4 * v11 + (a3 & 0xFFFFFFFFFFF00000) + 2) = v15 + 1;
    *(_WORD *)((char *)&locret_3F28 + 4 * v11 + (a3 & 0xFFFFFFFFFFF00000)) = v15 + 1;
  }
  return result;
}

uint64_t tiny_free_detach_region(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 tiny_meta_header;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v11 = a2;
  v10 = a3;
  v9 = a3 + 16512;
  v8 = a3 + 16512;
  v7 = a3 + 0x100000;
  v6 = 0;
  while (v8 < v7)
  {
    tiny_meta_header = get_tiny_meta_header(v8, &v6);
    if (v6)
    {
      if (!tiny_meta_header && v8 == v9)
        break;
    }
    if (!tiny_meta_header)
      break;
    if (v6)
      tiny_free_list_remove_ptr(v12, v11, v8, tiny_meta_header);
    v8 += 16 * tiny_meta_header;
  }
  return *(unsigned int *)(a3 + 20);
}

uint64_t get_tiny_meta_header(uint64_t a1, _DWORD *a2)
{
  return (unsigned __int16)get_tiny_meta_header_offset(a1, 0, a2);
}

uint64_t tiny_free_reattach_region(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int16 tiny_meta_header;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v11 = a2;
  v10 = a3;
  v9 = a3 + 16512;
  v8 = a3 + 16512;
  v7 = a3 + 0x100000;
  v6 = 0;
  v4 = *(unsigned int *)(a3 + 16);
  while (v8 < v7)
  {
    tiny_meta_header = get_tiny_meta_header(v8, &v6);
    if (v6)
    {
      if (!tiny_meta_header && v8 == v9)
        break;
    }
    if (!tiny_meta_header)
      break;
    if (v6)
      tiny_free_list_add_ptr(v12, v11, v8, tiny_meta_header);
    v8 += 16 * tiny_meta_header;
  }
  return v4;
}

uint64_t tiny_free_scan_madvise_free(uint64_t result, os_unfair_lock_s *a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  int i;
  vm_size_t v10;
  vm_size_t v11;
  vm_size_t v12;
  vm_size_t v13;
  int v14;
  vm_size_t v15;
  uint64_t *v16;
  unsigned __int16 v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_t v23;
  uint64_t v24;
  os_unfair_lock_t v25;
  os_unfair_lock_t v26;
  os_unfair_lock_t v27;
  os_unfair_lock_t v28;

  v24 = result;
  v23 = a2;
  v22 = a3;
  v21 = a3 + 16512;
  v20 = a3 + 16512;
  v19 = a3 + 0x100000;
  v18 = 0;
  v17 = 0;
  v16 = &v5;
  v6 = (char *)&v5 - ((2 * ((vm_kernel_page_size + 1032063) >> vm_kernel_page_shift >> 1) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (vm_kernel_page_size + 1032063) >> vm_kernel_page_shift >> 1;
  v14 = 0;
  while (v20 < v19)
  {
    result = get_tiny_meta_header(v20, &v18);
    v17 = result;
    if (v18 && !v17 && v20 == v21)
    {
      v13 = (v21 + 18 + vm_kernel_page_mask) & ~vm_kernel_page_mask;
      v12 = (v21 + 1048574) & ~vm_kernel_page_mask;
      if (v13 < v12)
      {
        v3 = v6;
        v6[2 * v14] = (v13 - v21) >> vm_kernel_page_shift;
        v3[2 * v14++ + 1] = (v12 - v13) >> vm_kernel_page_shift;
      }
      break;
    }
    if (!v17)
      break;
    if (v18)
    {
      v11 = (v20 + 18 + vm_kernel_page_mask) & ~vm_kernel_page_mask;
      v10 = (v20 + 16 * v17 - 2) & ~vm_kernel_page_mask;
      if (v11 < v10)
      {
        v4 = v6;
        v6[2 * v14] = (v11 - v22) >> vm_kernel_page_shift;
        v4[2 * v14++ + 1] = (v10 - v11) >> vm_kernel_page_shift;
      }
    }
    v20 += 16 * v17;
  }
  if (v14 > 0)
  {
    i = 0;
    OSAtomicIncrement32Barrier((int32_t *)(v22 + 28));
    v25 = v23;
    v27 = v23;
    os_unfair_lock_unlock(v23);
    for (i = 0; i < v14; ++i)
    {
      v8 = 0;
      v8 = (void *)(v22 + (v6[2 * i] << vm_kernel_page_shift));
      v7 = 0;
      v7 = v6[2 * i + 1] << vm_kernel_page_shift;
      mvm_madvise_free(v24, v22, v8, (unint64_t)v8 + v7, 0, *(_DWORD *)(v24 + 620) & 0x20);
    }
    v26 = v23;
    v28 = v23;
    os_unfair_lock_lock_with_options(v23, 327680);
    return OSAtomicDecrement32Barrier((int32_t *)(v22 + 28));
  }
  return result;
}

uint64_t tiny_free_no_lock(uint64_t a1, os_unfair_lock_s *a2, int a3, uint64_t a4, unint64_t a5, unsigned __int16 a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _WORD *v14;
  __int16 v15;
  unsigned __int16 v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int16 tiny_free_size;
  unsigned __int16 v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unsigned __int16 v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  __int16 v47;
  int v48;
  uint64_t v49;
  char v50;
  __int16 v51;
  int v52;
  uint64_t v53;
  char v54;
  __int16 v55;
  int v56;
  unint64_t v57;
  char v58;
  __int16 v59;
  int v60;
  unint64_t v61;

  v31 = a1;
  v30 = a2;
  v29 = a3;
  v28 = a4;
  v27 = a5;
  v26 = a6;
  v25 = a7;
  v24 = a5;
  v23 = 16 * a6;
  v22 = (uint64_t *)(a5 + v23);
  v21 = 0;
  region_check_cookie(a4, (int *)(a4 + 16508));
  v19 = tiny_previous_preceding_free(v27, &v21);
  if (v19)
  {
    set_tiny_meta_header_middle(v27);
    tiny_free_list_remove_ptr(v31, (uint64_t)v30, v19, v21);
    zero_tiny_free_inline_meta_following(v19, v21);
    v27 = v19;
    v26 += v21;
  }
  if ((unint64_t)v22 < v28 + 0x100000 && tiny_meta_header_is_free((uint64_t)v22))
  {
    tiny_free_size = get_tiny_free_size((uint64_t)v22);
    if (tiny_free_size > 0x3Fu)
    {
      v26 += tiny_free_size;
      v18 = (uint64_t)v22;
      v39 = v31;
      v38 = v22 + 1;
      v37 = 0;
      v36 = 0;
      v36 = v22[1];
      v36 = (v36 >> 60) | (16 * v36);
      v37 = v36 & 0xFFFFFFFFFFFFFFF0;
      v57 = v36 & 0xFFFFFFFFFFFFFFF0 ^ *(_QWORD *)(v31 + 632);
      v56 = v57 + HIDWORD(v57);
      v55 = HIWORD(v56) + v56;
      v54 = HIBYTE(v55) + v55;
      if (((v36 ^ (HIBYTE(v55) + v55)) & 0xF) != 0)
      {
        free_list_checksum_botch(v39, (uint64_t)v38, *v38, v7, v8, v9, v10, v11);
        __break(1u);
        JUMPOUT(0x78D58);
      }
      v17 = (_QWORD *)v37;
      v35 = v31;
      v34 = v22;
      v33 = 0;
      v32 = 0;
      v32 = *v22;
      v32 = (v32 >> 60) | (16 * v32);
      v33 = v32 & 0xFFFFFFFFFFFFFFF0;
      v61 = v32 & 0xFFFFFFFFFFFFFFF0 ^ *(_QWORD *)(v31 + 632);
      v60 = v61 + HIDWORD(v61);
      v59 = HIWORD(v60) + v60;
      v58 = HIBYTE(v59) + v59;
      if (((v32 ^ (HIBYTE(v59) + v59)) & 0xF) != 0)
      {
        free_list_checksum_botch(v35, (uint64_t)v34, *v34, v7, v8, v9, v10, v11);
        __break(1u);
        JUMPOUT(0x78E48);
      }
      if (v33)
      {
        v45 = v31;
        v44 = v27;
        v43 = v27;
        v49 = v27 ^ *(_QWORD *)(v31 + 632);
        v48 = v49 + HIDWORD(v49);
        v47 = HIWORD(v48) + v48;
        v46 = ((unsigned __int16)(HIWORD(v48) + v48) >> 8) + BYTE2(v48) + v48;
        *(_QWORD *)(v33 + 8) = ((unint64_t)(v46 & 0xF) << 60) | (v27 >> 4);
      }
      else
      {
        *(_QWORD *)&v30[134]._os_unfair_lock_opaque = v27;
      }
      if (v17)
      {
        v42 = v31;
        v41 = v27;
        v40 = v27;
        v53 = v27 ^ *(_QWORD *)(v31 + 632);
        v52 = v53 + HIDWORD(v53);
        v51 = HIWORD(v52) + v52;
        v50 = ((unsigned __int16)(HIWORD(v52) + v52) >> 8) + BYTE2(v52) + v52;
        *v17 = ((unint64_t)(v50 & 0xF) << 60) | (v27 >> 4);
      }
      *(_QWORD *)v27 = *(_QWORD *)v18;
      *(_QWORD *)(v27 + 8) = *(_QWORD *)(v18 + 8);
      set_tiny_meta_header_middle(v18);
      zero_tiny_free_inline_meta(v18, tiny_free_size);
      set_tiny_meta_header_free(v27, v26);
      v16 = ((v18 - ((v18 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) + 1;
      v15 = ((v27 - ((v27 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) + 1;
      v14 = (_WORD *)(v28 + 16420);
      if (*(unsigned __int16 *)(v28 + 16420) == v16)
        *v14 = v15;
      if ((unsigned __int16)v14[1] == v16)
        v14[1] = v15;
      goto LABEL_26;
    }
    tiny_free_list_remove_ptr(v31, (uint64_t)v30, (uint64_t)v22, tiny_free_size);
    set_tiny_meta_header_middle((uint64_t)v22);
    zero_tiny_free_inline_meta((uint64_t)v22, tiny_free_size);
    v26 += tiny_free_size;
  }
  if (malloc_zero_policy && (*(_DWORD *)(v31 + 620) & 0x20) != 0 && (v25 & 2) == 0)
    _platform_memset(v27, 85, 16 * v26);
  tiny_free_list_add_ptr(v31, (uint64_t)v30, v27, v26);
LABEL_26:
  *(_QWORD *)&v30[538]._os_unfair_lock_opaque -= v23;
  v13 = v28;
  *(_DWORD *)(v28 + 16) -= v23;
  if ((v25 & 1) == 0)
  {
    --*(_DWORD *)(v13 + 20);
    --v30[542]._os_unfair_lock_opaque;
  }
  if ((aggressive_madvise_enabled & 1) != 0)
    tiny_madvise_free_range_no_lock(v31, v30, v28, v24, v23, v27, v26);
  return tiny_free_try_recirc_to_depot(v31, v30, v29, v28, v24, v23, v27, v26);
}

BOOL tiny_meta_header_is_free(uint64_t a1)
{
  unint64_t v1;

  v1 = (a1 & 0xFFFFFFFFFFF00000) + 16512;
  return ((*(_DWORD *)&stru_20.segname[8 * ((int)(unsigned __int16)((a1 - v1) >> 4) >> 5) + (a1 & 0xFFFFFFFFFFF00000)] >> (((a1 - v1) >> 4) & 0x1F)) & 1) != 0
      && ((*(_DWORD *)&stru_20.segname[8 * ((int)(unsigned __int16)((a1 - v1) >> 4) >> 5)
                                     + 4
                                     + (a1 & 0xFFFFFFFFFFF00000)] >> (((a1 - v1) >> 4) & 0x1F)) & 1) == 0;
}

uint64_t get_tiny_free_size(uint64_t a1)
{
  return (unsigned __int16)get_tiny_free_size_offset(a1, 0);
}

uint64_t zero_tiny_free_inline_meta(uint64_t result, unsigned __int16 a2)
{
  if (!malloc_zero_policy)
  {
    *(_OWORD *)result = 0uLL;
    if (a2 <= 1u)
    {
      if (!a2)
        *(_WORD *)(result + 16) = 0;
    }
    else
    {
      *(_WORD *)(result + 16) = 0;
      *(_WORD *)(result + 16 * a2 - 2) = 0;
    }
  }
  return result;
}

uint64_t set_tiny_meta_header_free(uint64_t result, unsigned __int16 a2)
{
  _DWORD *v2;
  unsigned __int16 v3;

  v3 = 2 * ((int)(unsigned __int16)((result - ((result & 0xFFFFFFFFFFF00000) + 16512)) >> 4) >> 5);
  *(_DWORD *)&stru_20.segname[4 * v3 + (result & 0xFFFFFFFFFFF00000)] |= 1 << (((result
                                                                                 - ((result & 0xFFFFFFFFFFF00000)
                                                                                  + 16512)) >> 4) & 0x1F);
  v2 = (_DWORD *)((result & 0xFFFFFFFFFFF00000) + 40 + 4 * (v3 + 1));
  *v2 &= ~(1 << (((result - ((result & 0xFFFFFFFFFFF00000) + 16512)) >> 4) & 0x1F));
  if (a2 > 1u)
  {
    *(_WORD *)(result + 16 * a2 - 2) = a2;
    *(_WORD *)(result + 16) = a2;
  }
  if (!a2)
    *(_WORD *)(result + 16) = 0;
  return result;
}

unint64_t tiny_madvise_free_range_no_lock(unint64_t result, os_unfair_lock_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned __int16 a7)
{
  vm_size_t v7;
  void *v8;
  uint64_t v14;

  v14 = result;
  if (((a6 + 18 + vm_kernel_page_mask) & ~vm_kernel_page_mask) < ((a6 + 16 * a7 - 2) & ~vm_kernel_page_mask))
  {
    if (((a6 + 18 + vm_kernel_page_mask) & ~vm_kernel_page_mask) <= ((a4 - 2) & ~vm_kernel_page_mask))
      v8 = (void *)((a4 - 2) & ~vm_kernel_page_mask);
    else
      v8 = (void *)((a6 + 18 + vm_kernel_page_mask) & ~vm_kernel_page_mask);
    if (((a6 + 16 * a7 - 2) & ~vm_kernel_page_mask) >= ((a4 + a5 + 18 + vm_kernel_page_mask) & ~vm_kernel_page_mask))
      v7 = (a4 + a5 + 18 + vm_kernel_page_mask) & ~vm_kernel_page_mask;
    else
      v7 = (a6 + 16 * a7 - 2) & ~vm_kernel_page_mask;
    if ((unint64_t)v8 < v7)
    {
      tiny_free_list_remove_ptr(result, (uint64_t)a2, a6, a7);
      set_tiny_meta_header_in_use(a6, a7);
      OSAtomicIncrement32Barrier((int32_t *)(a3 + 28));
      os_unfair_lock_unlock(a2);
      mvm_madvise_free(v14, a3, v8, v7, (void **)(v14 + 640), *(_DWORD *)(v14 + 620) & 0x20);
      os_unfair_lock_lock_with_options(a2, 327680);
      OSAtomicDecrement32Barrier((int32_t *)(a3 + 28));
      set_tiny_meta_header_free(a6, a7);
      return tiny_free_list_add_ptr(v14, (uint64_t)a2, a6, a7);
    }
  }
  return result;
}

uint64_t tiny_free_try_recirc_to_depot(unint64_t a1, os_unfair_lock_s *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unsigned __int16 a8)
{
  mach_vm_address_t v9;
  uint64_t v10;

  v10 = *(unsigned int *)(a4 + 16);
  if (a3 != -1)
  {
    if (tiny_region_below_recirc_threshold(a4))
      *(_BYTE *)(a4 + 32) = 1;
    if (tiny_magazine_below_recirc_threshold((uint64_t)a2))
      return tiny_free_do_recirc_to_depot(a1, (uint64_t)a2);
    return 1;
  }
  if ((aggressive_madvise_enabled & 1) == 0)
    tiny_madvise_free_range_no_lock(a1, a2, a4, a5, a6, a7, a8);
  if (v10 || *(int *)(a4 + 28) > 0)
    return 1;
  v9 = tiny_free_try_depot_unmap_no_lock(a1, (uint64_t)a2, a4);
  os_unfair_lock_unlock(a2);
  if (v9)
  {
    if ((*(_DWORD *)(a1 + 620) & 4) != 0)
      mvm_deallocate_pages(v9, 0x100000uLL, *(_WORD *)(a1 + 620) & 0xFFFE);
    else
      mvm_deallocate_pages(v9, 0x100000uLL, *(_WORD *)(a1 + 620) & 0xFFFC);
  }
  return 0;
}

unint64_t tiny_memalign(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v4;
  uint64_t v6;
  os_unfair_lock_s *v7;
  unint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  uint64_t v14;
  unint64_t should_clear;
  unsigned __int16 v16;
  unsigned __int16 v21;

  v16 = (unint64_t)(a4 + 15) >> 4;
  should_clear = tiny_malloc_should_clear(a1 + 16512, v16, 0);
  if (!should_clear)
    return 0;
  v14 = should_clear & (a2 - 1);
  if (v14)
    v6 = a2 - v14;
  else
    v6 = 0;
  v13 = (unint64_t)(a3 + 15) >> 4;
  v12 = (unint64_t)(v6 + 15) >> 4;
  v11 = v16 - v13 - v12;
  if (v12)
  {
    v10 = should_clear + v6;
    v9 = mag_lock_zine_for_region_trailer_0(*(_QWORD *)(a1 + 17136), should_clear & 0xFFFFFFFFFFF00000, *(int *)((char *)&dword_18 + (should_clear & 0xFFFFFFFFFFF00000)));
    set_tiny_meta_header_in_use(should_clear + v6, v13);
    ++v9[542]._os_unfair_lock_opaque;
    if (v11)
    {
      v21 = v13 + ((v10 - ((v10 & 0xFFFFFFFFFFF00000) + 16512)) >> 4);
      v4 = (_DWORD *)((v10 & 0xFFFFFFFFFFF00000) + 44 + 8 * ((int)v21 >> 5));
      *v4 |= 1 << (v21 & 0x1F);
    }
    os_unfair_lock_unlock(v9);
    free_tiny(a1 + 16512, should_clear, should_clear & 0xFFFFFFFFFFF00000, 16 * v12, 1);
    should_clear += v6;
  }
  if (v11)
  {
    v8 = should_clear + 16 * v13;
    v7 = mag_lock_zine_for_region_trailer_0(*(_QWORD *)(a1 + 17136), should_clear & 0xFFFFFFFFFFF00000, *(int *)((char *)&dword_18 + (should_clear & 0xFFFFFFFFFFF00000)));
    set_tiny_meta_header_in_use(v8, v11);
    ++v7[542]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v7);
    free_tiny(a1 + 16512, v8, v8 & 0xFFFFFFFFFFF00000, 16 * v11, 1);
  }
  return should_clear;
}

unint64_t tiny_malloc_should_clear(uint64_t a1, unsigned __int16 a2, int a3)
{
  mach_vm_address_t pages;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = rack_get_thread_index(a1) % *(_DWORD *)(a1 + 608);
  v6 = *(_QWORD *)(a1 + 624) + 2560 * (int)v7;
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855769096, a1, 16 * a2, v6);
  os_unfair_lock_lock_with_options(v6, 327680);
  v8 = *(_QWORD *)(v6 + 8);
  if (*(unsigned __int16 *)(v6 + 16) == a2)
  {
    *(_QWORD *)(v6 + 8) = 0;
    *(_WORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)v6);
    tiny_check_zero_or_clear(v8, a2, a3);
    return v8;
  }
  else
  {
    while (1)
    {
      v9 = tiny_malloc_from_free_list(a1, v6, v7, a2);
      if (v9
        || tiny_get_region_from_depot(a1, v6, v7, a2)
        && (v9 = tiny_malloc_from_free_list(a1, v6, v7, a2)) != 0)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)v6);
        tiny_check_zero_or_clear(v9, a2, a3);
        return v9;
      }
      if (!*(_DWORD *)(v6 + 4))
        break;
      os_unfair_lock_unlock((os_unfair_lock_t)v6);
      yield();
      os_unfair_lock_lock_with_options(v6, 327680);
    }
    *(_DWORD *)(v6 + 4) = 1;
    OSMemoryBarrier();
    os_unfair_lock_unlock((os_unfair_lock_t)v6);
    if ((*(_DWORD *)(a1 + 620) & 4) != 0)
      pages = mvm_allocate_pages(0x100000uLL, 0x14u, *(_DWORD *)(a1 + 620) & 0xFFFFFFFE, 7);
    else
      pages = mvm_allocate_pages(0x100000uLL, 0x14u, *(_DWORD *)(a1 + 620) & 0xFFFFFFFC, 7);
    v5 = pages;
    os_unfair_lock_lock_with_options(v6, 327680);
    if (v5)
    {
      region_set_cookie((_DWORD *)(v5 + 16508));
      v10 = tiny_malloc_from_region_no_lock((os_unfair_lock_s *)a1, v6, v7, a2, v5);
      *(_DWORD *)(v6 + 4) = 0;
      OSMemoryBarrier();
      os_unfair_lock_unlock((os_unfair_lock_t)v6);
      return v10;
    }
    else
    {
      *(_DWORD *)(v6 + 4) = 0;
      OSMemoryBarrier();
      os_unfair_lock_unlock((os_unfair_lock_t)v6);
      return 0;
    }
  }
}

uint64_t set_tiny_meta_header_in_use(uint64_t result, __int16 a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  int v12;
  unsigned int v13;
  char v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  unint64_t v20;

  v20 = (result & 0xFFFFFFFFFFF00000) + 40;
  v17 = (result - ((result & 0xFFFFFFFFFFF00000) + 16512)) >> 4;
  v15 = 2 * ((int)v17 >> 5);
  *(_DWORD *)&stru_20.segname[4 * v15 + (result & 0xFFFFFFFFFFF00000)] |= 1 << (((result
                                                                                  - ((result & 0xFFFFFFFFFFF00000)
                                                                                   + 16512)) >> 4) & 0x1F);
  v2 = (_DWORD *)(v20 + 4 * (v15 + 1));
  *v2 |= 1 << (((result - ((result & 0xFFFFFFFFFFF00000) + 16512)) >> 4) & 0x1F);
  v18 = v17 + 1;
  v16 = 2 * ((int)v18 >> 5);
  v14 = v18 & 0x1F;
  v13 = (v18 & 0x1F) + (unsigned __int16)(a2 - 1);
  if (v13 <= 0x3F)
  {
    if (v13 <= 0x1F)
    {
      *(_DWORD *)&stru_20.segname[4 * v16 + (result & 0xFFFFFFFFFFF00000)] &= (0xFFFFFFFF >> (31 - v14) >> 1) | (-1 << v13);
      v9 = (_DWORD *)(v20 + 4 * (v16 + 1));
      *v9 &= (0xFFFFFFFF >> (31 - v14) >> 1) | (-1 << v13);
    }
    else
    {
      v11 = -1 << (v13 - 32);
      *(_DWORD *)&stru_20.segname[4 * v16 + (result & 0xFFFFFFFFFFF00000)] &= 0xFFFFFFFF >> (31 - v14) >> 1;
      v6 = (_DWORD *)(v20 + 4 * (v16 + 1));
      *v6 &= 0xFFFFFFFF >> (31 - v14) >> 1;
      v7 = (_DWORD *)(v20 + 4 * (v16 + 2));
      *v7 &= v11;
      v8 = (_DWORD *)(v20 + 4 * (v16 + 3));
      *v8 &= v11;
    }
  }
  else
  {
    v12 = -1 << (v13 - 64);
    *(_DWORD *)&stru_20.segname[4 * v16 + (result & 0xFFFFFFFFFFF00000)] &= 0xFFFFFFFF >> (31 - v14) >> 1;
    v3 = (_DWORD *)(v20 + 4 * (v16 + 1));
    *v3 &= 0xFFFFFFFF >> (31 - v14) >> 1;
    *(_DWORD *)&stru_20.segname[4 * v16 + 8 + (result & 0xFFFFFFFFFFF00000)] = 0;
    *(_DWORD *)&stru_20.segname[4 * v16 + 12 + (result & 0xFFFFFFFFFFF00000)] = 0;
    v4 = (_DWORD *)(v20 + 4 * (v16 + 4));
    *v4 &= v12;
    v5 = (_DWORD *)(v20 + 4 * (v16 + 5));
    *v5 &= v12;
  }
  v19 = v18 + a2 - 1;
  v10 = (_DWORD *)(v20 + 4 * (unsigned __int16)(2 * ((int)v19 >> 5)));
  *v10 |= 1 << (v19 & 0x1F);
  return result;
}

void free_tiny(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int16 tiny_meta_header;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v31 = a1;
  v30 = a2;
  v29 = a3;
  v28 = a4;
  v27 = a5;
  tiny_meta_header = 0;
  v25 = 0;
  v24 = *(_DWORD *)(a3 + 24);
  v23 = *(_QWORD *)(a1 + 624) + 2560 * v24;
  v22 = 0;
  if ((malloc_tracing_enabled & 1) != 0)
    kdebug_trace(855769112, v31, v30, v23);
  if (v28)
  {
    tiny_meta_header = (unint64_t)(v28 + 15) >> 4;
  }
  else
  {
    tiny_meta_header = get_tiny_meta_header(v30, &v25);
    if (v25)
    {
      free_tiny_botch(v31, v30, v5, v6, v7, v8, v9, v10);
      return;
    }
  }
  if (!malloc_zero_policy)
    _platform_memset(v30, 0, 16 * tiny_meta_header);
  v37 = v23;
  v40 = v23;
  os_unfair_lock_lock_with_options(v23, 327680);
  if (v24 != -1 && !v27 && tiny_meta_header < 0x10u)
  {
    v21 = *(_QWORD *)(v23 + 8);
    v20 = *(_WORD *)(v23 + 16);
    v19 = *(_QWORD *)(v23 + 24);
    if (v30 == v21)
    {
      v35 = v23;
      v38 = v23;
      os_unfair_lock_unlock((os_unfair_lock_t)v23);
      free_tiny_botch(v31, v30, v11, v12, v13, v14, v15, v16);
      return;
    }
    if (malloc_zero_policy && (*(_DWORD *)(v31 + 620) & 0x20) != 0 && tiny_meta_header)
      _platform_memset(v30, 85, 16 * tiny_meta_header);
    *(_QWORD *)(v23 + 8) = v30;
    *(_WORD *)(v23 + 16) = tiny_meta_header;
    *(_QWORD *)(v23 + 24) = v29;
    if (!v21)
    {
      v34 = v23;
      os_unfair_lock_unlock((os_unfair_lock_t)v23);
      return;
    }
    tiny_meta_header = v20;
    v30 = v21;
    v29 = v19;
    v22 = 2;
  }
  v18 = v29;
  while (1)
  {
    v17 = *(_DWORD *)(v18 + 24);
    if (v24 == v17)
      break;
    v33 = v23;
    v39 = v23;
    os_unfair_lock_unlock((os_unfair_lock_t)v23);
    v24 = v17;
    v23 = *(_QWORD *)(v31 + 624) + 2560 * v17;
    v36 = v23;
    v41 = v23;
    os_unfair_lock_lock_with_options(v23, 327680);
  }
  if (v27)
    v22 |= 1u;
  if (tiny_free_no_lock(v31, (os_unfair_lock_s *)v23, v24, v29, v30, tiny_meta_header, v22))
  {
    v32 = v23;
    os_unfair_lock_unlock((os_unfair_lock_t)v23);
  }
}

BOOL tiny_claimed_address(uint64_t a1, unint64_t a2)
{
  BOOL v3;
  uint64_t v4;

  v4 = tiny_region_for_ptr_no_lock(a1, a2);
  v3 = 0;
  if (v4)
  {
    v3 = 0;
    if (a2 >= v4 + 16512)
      return a2 < v4 + 0x100000;
  }
  return v3;
}

uint64_t tiny_try_shrink_in_place(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  os_unfair_lock_s *v5;
  unint64_t v6;
  __int16 v7;
  unsigned __int16 v8;

  v8 = a4 >> 4;
  v7 = (a3 >> 4) - v8;
  if ((unsigned __int16)(a3 >> 4) != v8)
  {
    v6 = a2 + 16 * v8;
    v5 = mag_lock_zine_for_region_trailer_0(*(_QWORD *)(a1 + 624), a2 & 0xFFFFFFFFFFF00000, *(int *)((char *)&dword_18 + (a2 & 0xFFFFFFFFFFF00000)));
    set_tiny_meta_header_in_use(v6, v7);
    ++v5[542]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v5);
    free_tiny(a1, v6, v6 & 0xFFFFFFFFFFF00000, 0, 1);
  }
  return a2;
}

uint64_t tiny_try_realloc_in_place(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 os_unfair_lock_opaque;
  uint64_t v13;
  os_unfair_lock_s *v14;
  unint64_t v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 tiny_free_size;
  uint64_t v19;
  unsigned __int16 v20;

  v15 = a2 & 0xFFFFFFFFFFF00000;
  v20 = a3 >> 4;
  v16 = (unint64_t)(a4 + 15) >> 4;
  if ((unsigned __int16)((a2 - ((a2 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) + v20 >= 0xFBF8)
    return 0;
  v19 = a2 + a3;
  v14 = mag_lock_zine_for_region_trailer_0(*(_QWORD *)(a1 + 624), v15, *(int *)((char *)&dword_18 + (a2 & 0xFFFFFFFFFFF00000)));
  if (*(int *)((char *)&dword_18 + (a2 & 0xFFFFFFFFFFF00000)) == -1)
  {
LABEL_21:
    os_unfair_lock_unlock(v14);
    return 0;
  }
  v17 = v16 - v20;
  v13 = *(_QWORD *)&v14[2]._os_unfair_lock_opaque;
  os_unfair_lock_opaque = v14[4]._os_unfair_lock_opaque;
  if (v13 == v19 && v20 + os_unfair_lock_opaque >= v16)
  {
    if (os_unfair_lock_opaque == v17)
    {
      *(_QWORD *)&v14[2]._os_unfair_lock_opaque = 0;
      LOWORD(v14[4]._os_unfair_lock_opaque) = 0;
      *(_QWORD *)&v14[6]._os_unfair_lock_opaque = 0;
      --*(_DWORD *)(v15 + 20);
    }
    else
    {
      LOWORD(v14[4]._os_unfair_lock_opaque) -= v17;
      *(_QWORD *)&v14[2]._os_unfair_lock_opaque += a4 - a3;
      set_tiny_meta_header_in_use(v19 + 16 * v17, os_unfair_lock_opaque - v17);
    }
    set_tiny_meta_header_middle(v19);
    tiny_check_zero_or_clear(v13, v17, 0);
    v17 = 0;
  }
  else
  {
    v11 = (a2 & 0xFFFFFFFFFFF00000) + 0x100000 - *(_QWORD *)&v14[532]._os_unfair_lock_opaque;
    if (*(_QWORD *)&v14[536]._os_unfair_lock_opaque == (a2 & 0xFFFFFFFFFFF00000)
      && v17 < (int)(unsigned __int16)(*(_QWORD *)&v14[532]._os_unfair_lock_opaque >> 4)
      && v11 == a2 + a3)
    {
      set_tiny_meta_header_middle(v11);
      if (v17 > 1u)
        set_tiny_meta_header_middle(v11 + 16);
      *(_QWORD *)&v14[532]._os_unfair_lock_opaque -= 16 * v17;
      if (*(_QWORD *)&v14[532]._os_unfair_lock_opaque)
        set_tiny_meta_header_in_use_1(a2 + 16 * v16);
      tiny_check_zero_or_clear(v11, v17, 0);
    }
    else
    {
      if (!tiny_meta_header_is_free(v19))
        goto LABEL_21;
      tiny_free_size = get_tiny_free_size(v19);
      if (v20 + tiny_free_size < v16)
        goto LABEL_21;
      tiny_free_list_remove_ptr(a1, (uint64_t)v14, v19, tiny_free_size);
      set_tiny_meta_header_middle(v19);
      if (!malloc_zero_policy)
        _tiny_check_and_zero_inline_meta_from_freelist(a1, v19, tiny_free_size, v4, v5, v6, v7, v8);
      tiny_check_zero_or_clear(v19, v17, 0);
      if (tiny_free_size != v17)
        tiny_free_list_add_ptr(a1, (uint64_t)v14, v19 + 16 * v17, tiny_free_size - v17);
      set_tiny_meta_header_in_use(a2, v16);
    }
  }
  *(_QWORD *)&v14[538]._os_unfair_lock_opaque += 16 * v17;
  v10 = *(int *)((char *)dword_10 + (a2 & 0xFFFFFFFFFFF00000)) + 16 * v17;
  *(int *)((char *)dword_10 + (a2 & 0xFFFFFFFFFFF00000)) = v10;
  if (v10 >= 0xBCFA0)
    *((_BYTE *)&stru_20.cmd + (a2 & 0xFFFFFFFFFFF00000)) = 0;
  os_unfair_lock_unlock(v14);
  return 1;
}

void tiny_check_zero_or_clear(uint64_t a1, unsigned __int16 a2, int a3)
{
  if (malloc_zero_policy)
  {
    if (malloc_zero_policy == 1)
    {
      if (!a3)
        return;
    }
    else if (malloc_zero_policy != 2)
    {
      return;
    }
    _platform_memset(a1, 0, 16 * a2);
    return;
  }
  if ((zero_on_free_should_sample() & 1) != 0)
  {
    if (_platform_memcmp_zero_aligned8(a1, 16 * a2))
      tiny_zero_corruption_abort(a1, a2);
  }
}

uint64_t set_tiny_meta_header_in_use_1(uint64_t result)
{
  unint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  unsigned __int16 v4;
  unsigned __int16 v5;
  unint64_t v6;

  v6 = (result & 0xFFFFFFFFFFF00000) + 40;
  v1 = (result & 0xFFFFFFFFFFF00000) + 16512;
  v5 = (result - v1) >> 4;
  v4 = 2 * ((int)v5 >> 5);
  *(_DWORD *)&stru_20.segname[4 * v4 + (result & 0xFFFFFFFFFFF00000)] |= 1 << (((result - v1) >> 4) & 0x1F);
  v2 = (_DWORD *)(v6 + 4 * (v4 + 1));
  *v2 |= 1 << (((result - v1) >> 4) & 0x1F);
  v3 = (_DWORD *)(v6 + 4 * (unsigned __int16)(2 * ((int)++v5 >> 5)));
  *v3 |= 1 << (v5 & 0x1F);
  return result;
}

uint64_t tiny_check_region(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t tiny_previous_free_msize;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  const char *v38;
  uint64_t *v39;
  _QWORD *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  unsigned __int16 tiny_meta_header;
  unsigned int v47;
  int v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  char v65;
  __int16 v66;
  int v67;
  unint64_t v68;
  char v69;
  __int16 v70;
  int v71;
  unint64_t v72;

  v55 = a1;
  v54 = a2;
  v53 = a3;
  v52 = a4;
  v51 = 0;
  v50 = 0;
  v49 = 0;
  v48 = 0;
  v47 = 0;
  tiny_meta_header = 0;
  v45 = 0;
  v44 = 0;
  v43 = 0;
  v42 = 0;
  v41 = 0;
  v41 = *(_DWORD *)(a2 + 24);
  v40 = 0;
  v40 = (_QWORD *)(*(_QWORD *)(a1 + 624) + 2560 * v41);
  if (*(_DWORD *)(a2 + 28))
  {
    v51 = (uint64_t *)(v54 + 16512);
    v50 = (uint64_t *)(v54 + 16512);
    if (v54 == v40[268]
      && (v50 = (uint64_t *)((char *)v50 + v40[267])) != 0
      && ((tiny_meta_header = get_tiny_meta_header((uint64_t)(v50 - 2), &v47), v47) || tiny_meta_header != 1))
    {
      v22 = v52;
      v23 = v50 - 2;
      v24 = tiny_meta_header;
      v25 = v47;
      malloc_zone_check_fail(tiny_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for leader block %p - %d %d\n", a3, a4, a5, a6, a7, a8, v53);
      return 0;
    }
    else
    {
      v49 = v54 + 0x100000;
      if (v54 == v40[268])
        v49 -= v40[266];
      while ((unint64_t)v50 < v49)
      {
        tiny_meta_header = get_tiny_meta_header((uint64_t)v50, &v47);
        if (v47 && !tiny_meta_header && v50 == v51)
          return 1;
        if (!tiny_meta_header)
        {
          v22 = v52;
          v23 = v50;
          v24 = 0;
          malloc_zone_check_fail(tiny_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for tiny block %p this msize=%d - size is too small\n", a3, a4, a5, a6, a7, a8, v53);
          return 0;
        }
        if (v47)
        {
          v48 = 1;
          v45 = v50;
          v64 = v55;
          v63 = v50;
          v62 = 0;
          v61 = 0;
          v61 = *v50;
          v61 = (v61 >> 60) | (16 * v61);
          v62 = v61 & 0xFFFFFFFFFFFFFFF0;
          v68 = v61 & 0xFFFFFFFFFFFFFFF0 ^ *(_QWORD *)(v55 + 632);
          v67 = v68 + HIDWORD(v68);
          v66 = HIWORD(v67) + v67;
          v65 = HIBYTE(v66) + v66;
          if (((v61 ^ (HIBYTE(v66) + v66)) & 0xF) != 0)
          {
            free_list_checksum_botch(v64, (uint64_t)v63, *v63, a4, a5, a6, a7, a8);
            __break(1u);
            JUMPOUT(0x7B674);
          }
          v43 = v62;
          v60 = v55;
          v59 = v45 + 1;
          v58 = 0;
          v57 = 0;
          v57 = v45[1];
          v57 = (v57 >> 60) | (16 * v57);
          v58 = v57 & 0xFFFFFFFFFFFFFFF0;
          v72 = v57 & 0xFFFFFFFFFFFFFFF0 ^ *(_QWORD *)(v55 + 632);
          v71 = v72 + HIDWORD(v72);
          v70 = HIWORD(v71) + v71;
          v69 = HIBYTE(v70) + v70;
          if (((v57 ^ (HIBYTE(v70) + v70)) & 0xF) != 0)
          {
            free_list_checksum_botch(v60, (uint64_t)v59, *v59, a4, a5, a6, a7, a8);
            __break(1u);
            JUMPOUT(0x7B760);
          }
          v42 = v58;
          if (v43 && !tiny_meta_header_is_free(v43))
          {
            v22 = v52;
            v23 = v50;
            v24 = v43;
            malloc_zone_check_fail(tiny_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for %p (previous %p is not a free pointer)\n", a3, a4, a5, a6, a7, a8, v53);
            return 0;
          }
          if (v42 && !tiny_meta_header_is_free(v42))
          {
            v22 = v52;
            v23 = v50;
            v24 = v42;
            malloc_zone_check_fail(tiny_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for %p (next in free list %p is not a free pointer)\n", a3, a4, a5, a6, a7, a8, v53);
            return 0;
          }
          v44 = &v50[2 * tiny_meta_header];
          if (v44 != (uint64_t *)v49 && tiny_meta_header != (unsigned __int16)get_tiny_previous_free_msize((uint64_t)v44))
          {
            v38 = tiny_check_fail_msg[0];
            v30 = v53;
            v31 = v52;
            v32 = v50;
            v33 = v44;
            v34 = v54;
            v35 = v54 + 16512;
            v36 = v49;
            v37 = tiny_meta_header;
            v39 = &v21;
            v22 = v52;
            v23 = v50;
            v24 = (uint64_t)v44;
            v25 = v54;
            v26 = v54 + 16512;
            v27 = v49;
            v28 = tiny_meta_header;
            tiny_previous_free_msize = (unsigned __int16)get_tiny_previous_free_msize((uint64_t)v44);
            malloc_zone_check_fail(v38, (uint64_t)"%ld, counter=%d\n*** invariant broken for tiny free %p followed by %p in region %p [%p-%p] (end marker incorrect) should be %d; in fact %d\n",
              v8,
              v9,
              v10,
              v11,
              v12,
              v13,
              v30);
            return 0;
          }
          v50 = v44;
        }
        else
        {
          v48 = 0;
          if (tiny_meta_header > 0x3Fu)
          {
            v22 = v52;
            v23 = v50;
            v24 = tiny_meta_header;
            malloc_zone_check_fail(tiny_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for %p this tiny msize=%d - size is too large\n", a3, a4, a5, a6, a7, a8, v53);
            return 0;
          }
          v50 += 2 * tiny_meta_header;
        }
      }
      if (v50 == (uint64_t *)v49)
      {
        if (v54 == v40[268]
          && v40[266]
          && ((tiny_meta_header = get_tiny_meta_header((uint64_t)v50, &v47), v47) || tiny_meta_header != 1))
        {
          v22 = v52;
          v23 = v50;
          v24 = tiny_meta_header;
          v25 = v47;
          malloc_zone_check_fail(tiny_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for blocker block %p - %d %d\n", v14, v15, v16, v17, v18, v19, v53);
          return 0;
        }
        else
        {
          return 1;
        }
      }
      else
      {
        v22 = v52;
        v23 = v50;
        v24 = v49;
        malloc_zone_check_fail(tiny_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for region end %p - %p\n", a3, a4, a5, a6, a7, a8, v53);
        return 0;
      }
    }
  }
  else
  {
    return 1;
  }
}

uint64_t get_tiny_previous_free_msize(uint64_t a1)
{
  unsigned __int16 v3;

  if (a1 == (a1 & 0xFFFFFFFFFFF00000) + 16512)
  {
    return 0;
  }
  else
  {
    v3 = (a1 - 16 - (((a1 - 16) & 0xFFFFFFFFFFF00000) + 16512)) >> 4;
    if (((*(_DWORD *)&stru_20.segname[8 * ((int)v3 >> 5) + ((a1 - 16) & 0xFFFFFFFFFFF00000)] >> (v3 & 0x1F)) & 1) != 0)
      return 1;
    else
      return (unsigned __int16)_malloc_read_uint16_via_rsp((unsigned __int16 *)(a1 - 2));
  }
}

uint64_t tiny_in_use_enumerator(unsigned int a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD, unint64_t, unint64_t, uint64_t *), void (*a6)(_QWORD, uint64_t, uint64_t, uint64_t *, uint64_t))
{
  int v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  int j;
  int k;
  unint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int16 v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t i;
  unint64_t v35;
  void (*v36)(_QWORD, uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t (*v37)(_QWORD, unint64_t, unint64_t, uint64_t *);
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned __int16 v43;
  uint64_t v44;
  unsigned __int16 v45;
  uint64_t v46;
  unsigned __int16 v47;
  uint64_t v48;
  _QWORD v49[512];

  v41 = a1;
  v40 = a2;
  v39 = a3;
  v38 = a4;
  v37 = a5;
  v36 = a6;
  v35 = 0;
  i = 0;
  v33 = 0;
  v32 = 0;
  v31 = 0;
  v30 = 0;
  v28 = 0;
  v29 = 0;
  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v22 = 0;
  v21 = 0;
  v20 = 0;
  v19 = 0;
  v18 = 0;
  v17 = 0;
  v16 = 0;
  v15 = 0;
  v14 = 0;
  v13 = 0;
  v31 = a5(a1, *(_QWORD *)(a4 + 16536), 32uLL, (uint64_t *)&v13);
  if (!v31)
  {
    v35 = *v13;
    v31 = v37(v41, v13[2], 8 * v35, &v33);
    if (v31)
      return v31;
    if ((v39 & 1) != 0)
    {
      v31 = v37(v41, *(_QWORD *)(v38 + 17136), 2560 * *(int *)(v38 + 17120), &v14);
      if (v31)
        return v31;
    }
    for (i = 0; ; ++i)
    {
      if (i >= v35)
        return 0;
      v30 = *(_QWORD *)(v33 + 8 * i);
      if (v30 && v30 != -1)
      {
        v28 = v30 + 16512;
        v29 = 1032064;
        if ((v39 & 4) != 0)
        {
          v26 = v30;
          v27 = 16420;
          v36(v41, v40, 4, (uint64_t *)&v26, 1);
        }
        if ((v39 & 6) != 0)
        {
          v24 = v28;
          v25 = 1032064;
          v36(v41, v40, 2, (uint64_t *)&v24, 1);
        }
        if ((v39 & 1) != 0)
          break;
      }
LABEL_51:
      ;
    }
    v31 = v37(v41, v30, 0x100000uLL, &v23);
    if (v31)
      return v31;
    v10 = (_QWORD *)(v14 + 2560 * *(int *)(v23 + 24));
    v9 = 0;
    for (j = 0; j < *(_DWORD *)(v38 + 17120); ++j)
    {
      if (v30 == *(_QWORD *)(v14 + 2560 * j + 24))
        ++v9;
    }
    v22 = v23 + 40;
    v21 = v23 + 44;
    v20 = 0;
    v19 = 64504;
    if (v30 == v10[268])
    {
      v20 += v10[267] >> 4;
      v19 -= v10[266] >> 4;
    }
    while (1)
    {
      if (v20 >= v19)
      {
        if (v32)
        {
          v36(v41, v40, 1, v49, v32);
          v32 = 0;
        }
        goto LABEL_51;
      }
      v8 = 16 * v20;
      v48 = v21;
      v47 = v20;
      LOBYTE(v18) = ((*(_DWORD *)(v21 + 8 * ((int)v47 >> 5)) >> (v47 & 0x1F)) & 1) == 0;
      v18 = v18;
      if ((_BYTE)v18)
      {
        v16 = v23 + 16512 + v8;
        v46 = v22;
        v45 = v20 + 1;
        if (((*(_DWORD *)(v22 + 8 * ((int)v45 >> 5)) >> (v45 & 0x1F)) & 1) != 0)
          v17 = 1;
        else
          v17 = *(_WORD *)(v16 + 16);
      }
      else
      {
        v7 = 0;
        if (v9)
        {
          for (k = 0; k < *(_DWORD *)(v38 + 17120); ++k)
          {
            if (v30 + 16512 + v8 == *(_QWORD *)(v14 + 2560 * k + 8))
            {
              v7 = 1;
              --v9;
              v17 = *(_WORD *)(v14 + 2560 * k + 16);
              break;
            }
          }
        }
        if (v7)
        {
          if (!v17)
            return 5;
          goto LABEL_48;
        }
        v17 = 1;
        v15 = v20 + 1;
        while (1)
        {
          v44 = v22;
          v43 = v15;
          if (((*(_DWORD *)(v22 + 8 * ((int)v43 >> 5)) >> (v43 & 0x1F)) & 1) != 0)
            break;
          ++v15;
          ++v17;
        }
        v49[2 * v32] = v30 + 16512 + v8;
        v49[2 * v32++ + 1] = 16 * v17;
        if (v32 >= 0x100)
        {
          v36(v41, v40, 1, v49, v32);
          v32 = 0;
        }
      }
      if (!v17)
        return 5;
LABEL_48:
      v20 += v17;
    }
  }
  return v31;
}

uint64_t tiny_malloc_from_free_list(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned __int16 tiny_free_size;
  uint64_t v42;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t v53;

  v39 = tiny_slot_from_msize(a4);
  v42 = *(_QWORD *)(a2 + 32 + 8 * v39);
  if (v42)
  {
    v49 = (*(_QWORD *)(v42 + 8) >> 60) & 0xFFFFFFFFFFFFFFF0 | (16 * *(_QWORD *)(v42 + 8));
    v51 = (v49 ^ *(_DWORD *)(a1 + 632)) + ((v49 ^ *(_QWORD *)(a1 + 632)) >> 32);
    if (((((*(_QWORD *)(v42 + 8) >> 60) | (16 * *(_BYTE *)(v42 + 8))) ^ (((unsigned __int16)(HIWORD(v51) + v51) >> 8) + BYTE2(v51) + v51)) & 0xF) != 0)
    {
      free_list_checksum_botch(a1, v42 + 8, *(_QWORD *)(v42 + 8), v4, v5, v6, v7, v8);
      __break(1u);
      JUMPOUT(0x7C580);
    }
    if (v49)
    {
      *(_QWORD *)v49 = *(_QWORD *)v42;
    }
    else
    {
      v9 = (_DWORD *)(a2 + 2088 + 4 * (v39 >> 5));
      *v9 &= ~(1 << (v39 & 0x1F));
    }
    *(_QWORD *)(a2 + 32 + 8 * v39) = v49;
    tiny_free_size = a4;
    tiny_update_region_free_list_for_remove(v39, v42, v49);
    if (!malloc_zero_policy)
      _tiny_check_and_zero_inline_meta_from_freelist(a1, v42, a4, v10, v11, v12, v13, v14);
    goto LABEL_44;
  }
  v36 = *(_QWORD *)(a2 + 2088) & ~((1 << v39) - 1);
  if (v36)
  {
    v40 = __clz(__rbit64(v36));
    v37 = (uint64_t *)(a2 + 536);
    v38 = (uint64_t *)(a2 + 32 + 8 * v40);
    if ((unint64_t)v38 < a2 + 536)
    {
      v42 = *v38;
      if (*v38)
      {
        v48 = (*(_QWORD *)(v42 + 8) >> 60) & 0xFFFFFFFFFFFFFFF0 | (16 * *(_QWORD *)(v42 + 8));
        v52 = v48 ^ *(_QWORD *)(a1 + 632);
        if (((((*(_QWORD *)(v42 + 8) >> 60) | (16 * *(_BYTE *)(v42 + 8))) ^ (((unsigned __int16)(((v52 + HIDWORD(v52)) >> 16) + v52 + WORD2(v52)) >> 8) + ((v52 + HIDWORD(v52)) >> 16) + v52 + BYTE4(v52))) & 0xF) != 0)
        {
          free_list_checksum_botch(a1, v42 + 8, *(_QWORD *)(v42 + 8), v4, v5, v6, v7, v8);
          __break(1u);
          JUMPOUT(0x7C7DCLL);
        }
        *v38 = v48;
        if (v48)
        {
          *(_QWORD *)v48 = *(_QWORD *)v42;
        }
        else
        {
          v15 = (_DWORD *)(a2 + 2088 + 4 * (v40 >> 5));
          *v15 &= ~(1 << (v40 & 0x1F));
        }
        tiny_free_size = get_tiny_free_size(v42);
        if (tiny_free_size < (int)a4)
          malloc_zone_error(256, 1, (uint64_t)"Corruption of tiny freelist %p: size too small (%u/%u)\n", v16, v17, v18, v19, v20, v42);
        tiny_update_region_free_list_for_remove(v40, v42, v48);
        if (malloc_zero_policy)
          goto LABEL_41;
        goto LABEL_20;
      }
    }
    v42 = *v37;
    if (*v37)
    {
      tiny_free_size = get_tiny_free_size(v42);
      if (tiny_free_size < (int)a4)
        malloc_zone_error(256, 1, (uint64_t)"Corruption of tiny freelist %p: size too small (%u/%u)\n", v26, v27, v28, v29, v30, v42);
      v47 = (*(_QWORD *)(v42 + 8) >> 60) & 0xFFFFFFFFFFFFFFF0 | (16 * *(_QWORD *)(v42 + 8));
      v53 = v47 ^ *(_QWORD *)(a1 + 632);
      if (((((*(_QWORD *)(v42 + 8) >> 60) | (16 * *(_BYTE *)(v42 + 8))) ^ (((unsigned __int16)(((v53 + HIDWORD(v53)) >> 16) + v53 + WORD2(v53)) >> 8) + ((v53 + HIDWORD(v53)) >> 16) + v53 + BYTE4(v53))) & 0xF) != 0)
      {
        free_list_checksum_botch(a1, v42 + 8, *(_QWORD *)(v42 + 8), v26, v27, v28, v29, v30);
        __break(1u);
        JUMPOUT(0x7CA90);
      }
      if (tiny_free_size - a4 > 63)
      {
        v35 = v42 + 16 * a4;
        v34 = *(_OWORD *)v42;
        if (!malloc_zero_policy)
          _tiny_check_and_zero_inline_meta_from_freelist(a1, v42, tiny_free_size, v26, v27, v28, v29, v30);
        *v37 = v35;
        if (v47)
        {
          v50 = (v35 ^ *(_DWORD *)(a1 + 632)) + ((v35 ^ *(_QWORD *)(a1 + 632)) >> 32);
          *(_QWORD *)v47 = ((unint64_t)((((unsigned __int16)(HIWORD(v50) + v50) >> 8) + BYTE2(v50) + (_BYTE)v50) & 0xF) << 60) | (v35 >> 4);
        }
        *(_OWORD *)v35 = v34;
        set_tiny_meta_header_free(v35, tiny_free_size - a4);
        tiny_free_size = a4;
        tiny_update_region_free_list_for_remove(63, v42, v35);
        goto LABEL_44;
      }
      if (v47)
        *(_QWORD *)v47 = *(_QWORD *)v42;
      *v37 = v47;
      tiny_update_region_free_list_for_remove(v40, v42, v47);
      if (malloc_zero_policy)
        goto LABEL_41;
LABEL_20:
      _tiny_check_and_zero_inline_meta_from_freelist(a1, v42, tiny_free_size, v21, v22, v23, v24, v25);
LABEL_41:
      if (!tiny_free_size || tiny_free_size > (int)a4)
      {
        tiny_free_list_add_ptr(a1, a2, v42 + 16 * a4, tiny_free_size - a4);
        tiny_free_size = a4;
      }
      goto LABEL_44;
    }
  }
  if (*(_QWORD *)(a2 + 2128) < (unint64_t)(16 * a4))
    return 0;
  v42 = *(_QWORD *)(a2 + 2144) + 0x100000 - *(_QWORD *)(a2 + 2128);
  *(_QWORD *)(a2 + 2128) -= 16 * a4;
  if (*(_QWORD *)(a2 + 2128))
    set_tiny_meta_header_in_use_1(v42 + 16 * a4);
  tiny_free_size = a4;
LABEL_44:
  ++*(_DWORD *)(a2 + 2168);
  *(_QWORD *)(a2 + 2152) += 16 * tiny_free_size;
  region_check_cookie(v42 & 0xFFFFFFFFFFF00000, (int *)((v42 & 0xFFFFFFFFFFF00000) + 16508));
  v33 = v42 & 0xFFFFFFFFFFF00000;
  v32 = *(int *)((char *)dword_10 + (v42 & 0xFFFFFFFFFFF00000)) + 16 * tiny_free_size;
  *(_DWORD *)(v33 + 16) = v32;
  ++*(_DWORD *)(v33 + 20);
  if (v32 >= 0xBCFA0)
    *((_BYTE *)&stru_20.cmd + (v42 & 0xFFFFFFFFFFF00000)) = 0;
  if (tiny_free_size <= 1u)
    set_tiny_meta_header_in_use_1(v42);
  else
    set_tiny_meta_header_in_use(v42, tiny_free_size);
  return v42;
}

uint64_t tiny_slot_from_msize(unsigned __int16 a1)
{
  if (a1 && a1 <= 0x3Fu)
    return (a1 - 1);
  else
    return 63;
}

uint64_t tiny_update_region_free_list_for_remove(uint64_t result, uint64_t a2, uint64_t a3)
{
  __int16 v3;
  unsigned __int16 *v4;

  if ((unsigned __int16)((a2 - ((a2 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) != *(unsigned __int16 *)((char *)&locret_3F28 + 4 * result + (a2 & 0xFFFFFFFFFFF00000))
                                                                              - 1)
  {
    __break(1u);
    JUMPOUT(0x7CFD0);
  }
  if (a3 && (a3 & 0xFFFFFFFFFFF00000) == (a2 & 0xFFFFFFFFFFF00000))
  {
    v3 = ((a3 - ((a3 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) + 1;
    v4 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFF00000) + 16168 + 4 * result);
    if (*v4 == v4[1])
      *(_WORD *)((char *)&locret_3F28 + 4 * result + (a2 & 0xFFFFFFFFFFF00000) + 2) = v3;
    *(_WORD *)((char *)&locret_3F28 + 4 * result + (a2 & 0xFFFFFFFFFFF00000)) = v3;
  }
  else
  {
    *(_WORD *)((char *)&locret_3F28 + 4 * result + (a2 & 0xFFFFFFFFFFF00000) + 2) = 0;
    *(_WORD *)((char *)&locret_3F28 + 4 * result + (a2 & 0xFFFFFFFFFFF00000)) = 0;
  }
  return result;
}

uint64_t tiny_get_region_from_depot(uint64_t a1, uint64_t a2, int a3, unsigned __int16 a4)
{
  uint64_t v5;
  int v6;
  unsigned __int16 v7;
  unint64_t msize_region;
  uint64_t v9;

  v9 = *(_QWORD *)(a1 + 624) - 2560;
  os_unfair_lock_lock_with_options(v9, 327680);
  v7 = a4;
  while (1)
  {
    msize_region = tiny_find_msize_region(a1, v9, 0xFFFFFFFFLL, v7);
    if (!msize_region)
    {
LABEL_3:
      os_unfair_lock_unlock((os_unfair_lock_t)v9);
      return 0;
    }
    if (!*(_DWORD *)(msize_region + 28))
      break;
    if (++v7 > 0x3Fu)
      goto LABEL_3;
  }
  if (*(_QWORD *)msize_region)
    *(_QWORD *)(*(_QWORD *)msize_region + 8) = *(_QWORD *)(msize_region + 8);
  else
    *(_QWORD *)(v9 + 2176) = *(_QWORD *)(msize_region + 8);
  if (*(_QWORD *)(msize_region + 8))
    **(_QWORD **)(msize_region + 8) = *(_QWORD *)msize_region;
  else
    *(_QWORD *)(v9 + 2184) = *(_QWORD *)msize_region;
  *(_QWORD *)msize_region = 0;
  *(_QWORD *)(msize_region + 8) = 0;
  --*(_DWORD *)(v9 + 2172);
  v6 = tiny_free_detach_region(a1, v9, msize_region);
  *(_DWORD *)(msize_region + 24) = a3;
  if (*(_DWORD *)(msize_region + 28))
  {
    __break(1u);
    JUMPOUT(0x7D2C4);
  }
  v5 = tiny_free_reattach_region(a1, a2, msize_region);
  *(_QWORD *)(v9 + 2152) -= v5;
  *(_QWORD *)(v9 + 2160) -= 1032064;
  *(_DWORD *)(v9 + 2168) -= v6;
  *(_QWORD *)(a2 + 2152) += v5;
  *(_QWORD *)(a2 + 2160) += 1032064;
  *(_DWORD *)(a2 + 2168) += v6;
  if (*(_QWORD *)(a2 + 2184))
  {
    *(_QWORD *)msize_region = *(_QWORD *)(a2 + 2184);
    *(_QWORD *)(*(_QWORD *)(a2 + 2184) + 8) = msize_region;
  }
  else
  {
    *(_QWORD *)(a2 + 2176) = msize_region;
    *(_QWORD *)msize_region = 0;
  }
  *(_QWORD *)(a2 + 2184) = msize_region;
  *(_QWORD *)(msize_region + 8) = 0;
  *(_BYTE *)(msize_region + 32) = 0;
  ++*(_DWORD *)(a2 + 2172);
  os_unfair_lock_unlock((os_unfair_lock_t)v9);
  return 1;
}

unint64_t tiny_malloc_from_region_no_lock(os_unfair_lock_s *a1, uint64_t a2, int a3, unsigned __int16 a4, unint64_t a5)
{
  if (*(_QWORD *)(a2 + 2128) || *(_QWORD *)(a2 + 2136))
    tiny_finalize_region((unint64_t)a1, a2);
  *(_DWORD *)(a5 + 16160) = -16777216;
  *(_DWORD *)(a5 + 16164) = 0;
  *(_DWORD *)(a5 + 24) = a3;
  rack_region_insert(a1, a5);
  *(_QWORD *)(a2 + 2144) = a5;
  *(_DWORD *)(a5 + 16) = 16 * a4;
  *(_DWORD *)(a5 + 20) = 1;
  set_tiny_meta_header_in_use(a5 + 16512, a4);
  ++*(_DWORD *)(a2 + 2168);
  *(_QWORD *)(a2 + 2152) += 16 * a4;
  *(_QWORD *)(a2 + 2160) += 1032064;
  set_tiny_meta_header_in_use_1(a5 + 16512 + 16 * a4);
  *(_QWORD *)(a2 + 2128) = 16 * (64504 - a4);
  *(_QWORD *)(a2 + 2136) = 0;
  if (*(_QWORD *)(a2 + 2184))
  {
    *(_QWORD *)a5 = *(_QWORD *)(a2 + 2184);
    *(_QWORD *)(*(_QWORD *)(a2 + 2184) + 8) = a5;
  }
  else
  {
    *(_QWORD *)(a2 + 2176) = a5;
    *(_QWORD *)a5 = 0;
  }
  *(_QWORD *)(a2 + 2184) = a5;
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 32) = 0;
  ++*(_DWORD *)(a2 + 2172);
  return a5 + 16512;
}

uint64_t tiny_size(uint64_t a1, uint64_t a2)
{
  int v3;
  int i;
  unsigned __int16 tiny_meta_header;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a1;
  v7 = a2;
  if (!tiny_region_for_ptr_no_lock(a1, a2))
    return 0;
  if ((unsigned __int16)((v7 - ((v7 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) < 0xFBF8uLL)
  {
    v6 = 0;
    tiny_meta_header = get_tiny_meta_header(v7, &v6);
    if (!v6)
    {
      v3 = *(int *)((char *)&dword_18 + (v7 & 0xFFFFFFFFFFF00000));
      if (v3 == -1)
      {
        for (i = 0; i < *(_DWORD *)(v8 + 608); ++i)
        {
          if (tiny_meta_header < 0x10u && v7 == *(_QWORD *)(*(_QWORD *)(v8 + 624) + 2560 * i + 8))
            return 0;
        }
      }
      else if (tiny_meta_header < 0x10u && v7 == *(_QWORD *)(*(_QWORD *)(v8 + 624) + 2560 * v3 + 8))
      {
        return 0;
      }
      return 16 * tiny_meta_header;
    }
    return 0;
  }
  else
  {
    malloc_printf("NO ZONE for ptr %p\n", (const void *)v7);
    return 0;
  }
}

void free_tiny_botch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  malloc_zone_error(*(_DWORD *)(a1 + 620), 1, (uint64_t)"Double free of object %p\n", a4, a5, a6, a7, a8, a2);
}

uint64_t tiny_batch_malloc(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  uint64_t *v4;
  uint64_t v6;
  os_unfair_lock_s *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int16 v10;

  v10 = (unint64_t)(a2 + 15) >> 4;
  v9 = 0;
  v8 = rack_get_thread_index(a1 + 16512) % *(_DWORD *)(a1 + 17120);
  v7 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 17136) + 2560 * (int)v8);
  if (!v10)
    v10 = 1;
  os_unfair_lock_lock_with_options(v7, 327680);
  while (v9 < a4)
  {
    v6 = tiny_malloc_from_free_list(a1 + 16512, (uint64_t)v7, v8, v10);
    if (!v6)
      break;
    v4 = a3++;
    *v4 = v6;
    ++v9;
  }
  os_unfair_lock_unlock(v7);
  return v9;
}

void tiny_batch_free(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;
  os_unfair_lock_s *v4;
  unsigned __int16 tiny_meta_header;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  os_unfair_lock_s *v15;
  os_unfair_lock_s *v16;

  v12 = a1;
  v11 = a2;
  v10 = a3;
  v9 = 0;
  v8 = 0;
  v7 = 0;
  v6 = 0;
  v4 = 0;
  v3 = -1;
  if (a3)
  {
    while (v9 < v10)
    {
      v8 = *(_QWORD *)(v11 + 8 * v9);
      if (v8)
      {
        if (!v7 || v7 != (v8 & 0xFFFFFFFFFFF00000))
        {
          if (v4)
          {
            v14 = v4;
            v15 = v4;
            os_unfair_lock_unlock(v4);
            v4 = 0;
          }
          v7 = tiny_region_for_ptr_no_lock(v12 + 16512, v8);
          if (v7)
          {
            v4 = mag_lock_zine_for_region_trailer_0(*(_QWORD *)(v12 + 17136), v7, *(_DWORD *)(v7 + 24));
            v3 = *(_DWORD *)(v7 + 24);
          }
        }
        if (!v7)
          break;
        if ((unsigned __int16)((v8 - ((v8 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) >= 0xFBF8uLL)
          break;
        tiny_meta_header = get_tiny_meta_header(v8, &v6);
        if (v6)
          break;
        if (!malloc_zero_policy)
          _platform_memset(v8, 0, 16 * tiny_meta_header);
        if (!tiny_free_no_lock(v12 + 16512, v4, v3, v7, v8, tiny_meta_header, 0))
        {
          v4 = 0;
          v7 = 0;
        }
        *(_QWORD *)(v11 + 8 * v9) = 0;
      }
      ++v9;
    }
    if (v4)
    {
      v13 = v4;
      v16 = v4;
      os_unfair_lock_unlock(v4);
    }
  }
}

uint64_t print_tiny_free_list(uint64_t a1, unsigned int (*a2)(_QWORD, const void *, uint64_t, uint64_t *), void (*a3)(const char *, ...), const void *a4)
{
  uint64_t result;
  const char *v5;
  uint64_t v6;
  const char *v7;
  void (*v8)(const char *, ...);
  const char *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int i;
  uint64_t v15;
  const void *v16;
  const void *v17;
  void (*v18)(const char *, ...);
  unsigned int (*v19)(_QWORD, const void *, uint64_t, uint64_t *);
  unsigned int v20;

  v20 = a1;
  v19 = a2;
  v18 = a3;
  v17 = a4;
  v16 = 0;
  result = _simple_salloc(a1);
  v15 = result;
  i = 0;
  if (result)
  {
    v13 = 0;
    v12 = 0;
    if (v19(v20, v17, 768, &v13))
    {
      return ((uint64_t (*)(const char *))v18)("Failed to map tiny rack\n");
    }
    else
    {
      _simple_sappend(v15, "Tiny free sizes:\n");
      if (v19(v20, *(const void **)(v13 + 624), 2560 * *(int *)(v13 + 608), &v12))
      {
        return ((uint64_t (*)(const char *))v18)("Failed to map tiny rack magazines\n");
      }
      else
      {
        for (i = -1; i < *(_DWORD *)(v13 + 608); ++i)
        {
          v11 = 0;
          if (i == -1)
            _simple_sprintf(v15, "\tRecirc depot: ");
          else
            _simple_sprintf(v15, "\tMagazine %d: ", i);
          while (v11 <= 0x3F)
          {
            v16 = *(const void **)(v12 + 2560 * i + 32 + 8 * v11);
            if (v16)
            {
              v10 = v15;
              v5 = ">=";
              if (v11 != 63)
                v5 = (const char *)&unk_8AA75;
              v9 = v5;
              v6 = free_list_count(v20, v19, v18, v13, v16);
              _simple_sprintf(v10, "%s%y[%d]; ", v9, 16 * (v11 + 1), v6);
            }
            ++v11;
          }
          _simple_sappend(v15, "\n");
        }
        v8 = v18;
        v7 = (const char *)_simple_string(v15);
        v8("%s\n", v7);
        return _simple_sfree(v15);
      }
    }
  }
  return result;
}

uint64_t free_list_count(unsigned int a1, unsigned int (*a2)(_QWORD, const void *, uint64_t, uint64_t *), void (*a3)(const char *, ...), uint64_t a4, const void *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  void (*v14)(const char *, ...);
  unsigned int (*v15)(_QWORD, const void *, uint64_t, uint64_t *);
  unsigned int v16;
  const void *v17;
  unint64_t v18;
  const void *v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  __int16 v23;
  int v24;
  unint64_t v25;

  v17 = a5;
  v16 = a1;
  v15 = a2;
  v14 = a3;
  v13 = a4;
  v12 = 0;
  v11 = 0;
  while (v17)
  {
    ++v12;
    if (v15(v16, v17, 16, &v11))
    {
      v14("** invalid pointer in free list: %p\n", v17);
      return v12;
    }
    v21 = v13;
    v20 = (uint64_t *)(v11 + 8);
    v19 = 0;
    v18 = 0;
    v18 = *(_QWORD *)(v11 + 8);
    v18 = (v18 >> 60) | (16 * v18);
    v19 = (const void *)(v18 & 0xFFFFFFFFFFFFFFF0);
    v25 = v18 & 0xFFFFFFFFFFFFFFF0 ^ *(_QWORD *)(v13 + 632);
    v24 = v25 + HIDWORD(v25);
    v23 = HIWORD(v24) + v24;
    v22 = HIBYTE(v23) + v23;
    if (((v18 ^ (HIBYTE(v23) + v23)) & 0xF) != 0)
    {
      free_list_checksum_botch(v21, (uint64_t)v20, *v20, v5, v6, v7, v8, v9);
      __break(1u);
      JUMPOUT(0x7E14CLL);
    }
    v17 = v19;
  }
  return v12;
}

uint64_t print_tiny_region(unsigned int a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t (*a3)(const char *, ...), int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  const char *v9;
  uint64_t tiny_meta_header_offset;
  const char *v11;
  void (*v12)(const char *, ...);
  void (*v13)(const char *, ...);
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int i;
  unsigned __int16 v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t (*v32)(const char *, ...);
  uint64_t (*v33)(_QWORD, _QWORD, _QWORD, _QWORD);
  unsigned int v34;
  _DWORD v35[1024];

  v34 = a1;
  v33 = a2;
  v32 = a3;
  v31 = a4;
  v30 = a5;
  v29 = a6;
  v28 = a7;
  v27 = 0;
  v26 = (char *)(a5 + 16512);
  v25 = (char *)(a5 + 16512 + a6);
  v24 = a5 + 0x100000 - a7;
  v23 = 0;
  v22 = 0;
  v17 = 0;
  v7 = a2(a1, a5 + 16512, 0x100000, &v23);
  if ((_DWORD)v7)
    return v32("Failed to map tiny region at %p\n", v26);
  v16 = v23 - (_QWORD)v26;
  v15 = v23;
  if (v30 == -1)
  {
    result = _simple_salloc(v7);
    v18 = result;
    if (result)
    {
      _simple_sprintf(result, "Tiny region [unknown address] was returned to the OS\n");
      v13 = (void (*)(const char *, ...))v32;
      v9 = (const char *)_simple_string(v18);
      v13("%s\n", v9);
      return _simple_sfree(v18);
    }
  }
  else
  {
    tiny_meta_header_offset = _platform_memset(v35, 0, 4096);
    while ((unint64_t)v25 < v24)
    {
      tiny_meta_header_offset = get_tiny_meta_header_offset((uint64_t)v25, v16, &v22);
      v21 = tiny_meta_header_offset;
      if (v22 && !(_WORD)tiny_meta_header_offset && v25 == v26)
      {
        if (((unint64_t)&v26[vm_page_size + 17] & ~(vm_page_size - 1)) < ((unint64_t)(v26 + 1048574) & ~(vm_page_size - 1)))
          v17 += ((unint64_t)(v26 + 1048574) & ~(vm_page_size - 1))
               - ((unint64_t)&v26[vm_page_size + 17] & ~(vm_page_size - 1));
        break;
      }
      if (!(_WORD)tiny_meta_header_offset)
      {
        tiny_meta_header_offset = v32("*** error with %p: msize=%d\n", v25, 0);
        break;
      }
      if (v22)
      {
        if (((unint64_t)&v25[vm_page_size + 17] & ~(vm_page_size - 1)) < ((unint64_t)&v25[16 * (unsigned __int16)tiny_meta_header_offset - 2] & ~(vm_page_size - 1)))
          v17 += ((unint64_t)&v25[16 * (unsigned __int16)tiny_meta_header_offset - 2] & ~(vm_page_size - 1))
               - ((unint64_t)&v25[vm_page_size + 17] & ~(vm_page_size - 1));
      }
      else
      {
        if ((unsigned __int16)tiny_meta_header_offset > 0x3Fu)
          tiny_meta_header_offset = v32("*** error at %p msize for in_use is %d\n", v25, (unsigned __int16)tiny_meta_header_offset);
        if (v21 < 0x400u)
          ++v35[v21];
        ++v27;
      }
      v25 += 16 * v21;
    }
    result = _simple_salloc(tiny_meta_header_offset);
    v19 = result;
    if (result)
    {
      v14 = *(_DWORD *)(v15 + 24);
      _simple_sprintf(result, "Tiny region [%p-%p, %y] \t", v26, v30 + 0x100000, 0x100000);
      if (v14 == -1)
        _simple_sprintf(v19, "Recirc depot \t");
      else
        _simple_sprintf(v19, "Magazine=%d \t", v14);
      _simple_sprintf(v19, "Allocations in use=%d \t Bytes in use=%ly (%d%%) \t", v27, *(unsigned int *)(v15 + 16), (int)(float)(100.0 * (float)*(unsigned int *)(v15 + 16)) / 0x100000uLL);
      if (v28 || v29)
        _simple_sprintf(v19, "Untouched=%ly ", v28 + v29);
      if (v14 == -1)
      {
        _simple_sprintf(v19, "Advised MADV_FREE=%ly", v17);
      }
      else
      {
        _simple_sprintf(v19, "Fragments subject to reclamation=%ly", v17);
        if (tiny_region_below_recirc_threshold(v15))
          _simple_sprintf(v19, "\tEmpty enough to be moved to recirc depot");
        else
          _simple_sprintf(v19, "\tNot empty enough to be moved to recirc depot");
      }
      if (v31 >= 2 && v27)
      {
        _simple_sappend(v19, "\n\tSizes in use: ");
        for (i = 0; i < 0x400; ++i)
        {
          if (v35[i])
            _simple_sprintf(v19, "%y[%d] ", 16 * i, v35[i]);
        }
      }
      v12 = (void (*)(const char *, ...))v32;
      v11 = (const char *)_simple_string(v19);
      v12("%s\n", v11);
      return _simple_sfree(v19);
    }
  }
  return result;
}

uint64_t get_tiny_meta_header_offset(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  __int16 v3;
  unsigned __int16 v4;
  unint64_t v6;
  unsigned int *v7;
  int v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  unint64_t v11;

  v11 = (a1 & 0xFFFFFFFFFFF00000) + 40 + a2;
  v10 = (a1 - ((a1 & 0xFFFFFFFFFFF00000) + 16512)) >> 4;
  v9 = 2 * ((int)v10 >> 5);
  v8 = 1 << (v10 & 0x1F);
  *a3 = 0;
  if ((*(_DWORD *)(v11 + 4 * v9) & v8) != 0)
  {
    if ((*(_DWORD *)(v11 + 4 * (v9 + 1)) & v8) != 0)
    {
      v7 = (unsigned int *)(v11 + 8 * ((int)v10 >> 5));
      if ((v10 & 0x1F) != 0)
        v6 = ((unint64_t)*v7 >> (v10 & 0x1F)) | ((unint64_t)v7[2] << (32 - (v10 & 0x1Fu))) | ((unint64_t)v7[4] << (64 - (v10 & 0x1Fu)));
      else
        v6 = ((unint64_t)*v7 >> (v10 & 0x1F)) | ((unint64_t)v7[2] << (32 - (v10 & 0x1Fu)));
      v3 = __clz(__rbit64(v6 >> 1));
      v4 = 0;
      if (v6 >> 1)
        return (unsigned __int16)(v3 + 1);
      return v4;
    }
    else
    {
      *a3 = 1;
      return (unsigned __int16)get_tiny_free_size_offset(a1, a2);
    }
  }
  else
  {
    return 0;
  }
}

BOOL tiny_region_below_recirc_threshold(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) < 0xBCFA0u;
}

uint64_t tiny_free_list_check(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  os_unfair_lock_s *v18;
  int i;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int v26;

  for (i = -1; i < *(_DWORD *)(a1 + 608); ++i)
  {
    v18 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 624) + 2560 * i);
    os_unfair_lock_lock_with_options(v18, 327680);
    v17 = 0;
    v16 = *(uint64_t **)(*(_QWORD *)(a1 + 624) + 2560 * i + 32 + 8 * a2);
    v15 = 0;
    while (v16)
    {
      if (!tiny_meta_header_is_free((uint64_t)v16))
      {
        malloc_zone_check_fail(tiny_freelist_fail_msg, (uint64_t)" (slot=%u), counter=%d\n*** in-use ptr in free list slot=%u count=%d ptr=%p\n", v2, v3, v4, v5, v6, v7, a2);
        os_unfair_lock_unlock(v18);
        return 0;
      }
      if ((v16 & 0xF) != 0)
      {
        malloc_zone_check_fail(tiny_freelist_fail_msg, (uint64_t)" (slot=%u), counter=%d\n*** unaligned ptr in free list slot=%u count=%d ptr=%p\n", v2, v3, v4, v5, v6, v7, a2);
        os_unfair_lock_unlock(v18);
        return 0;
      }
      if (!tiny_region_for_ptr_no_lock(a1, (uint64_t)v16))
      {
        malloc_zone_check_fail(tiny_freelist_fail_msg, (uint64_t)" (slot=%u), counter=%d\n*** ptr not in szone slot=%d  count=%u ptr=%p\n", v8, v9, v10, v11, v12, v13, a2);
        os_unfair_lock_unlock(v18);
        return 0;
      }
      v24 = ((unint64_t)*v16 >> 60) & 0xFFFFFFFFFFFFFFF0 | (16 * *v16);
      v25 = (v24 ^ *(_DWORD *)(a1 + 632)) + ((v24 ^ *(_QWORD *)(a1 + 632)) >> 32);
      if ((((((unint64_t)*v16 >> 60) | (16 * *(_BYTE *)v16)) ^ (((unsigned __int16)(HIWORD(v25) + v25) >> 8) + BYTE2(v25) + v25)) & 0xF) != 0)
      {
        free_list_checksum_botch(a1, (uint64_t)v16, *v16, v9, v10, v11, v12, v13);
        __break(1u);
        JUMPOUT(0x7EE94);
      }
      if ((uint64_t *)v24 != v15)
      {
        malloc_zone_check_fail(tiny_freelist_fail_msg, (uint64_t)" (slot=%u), counter=%d\n*** previous incorrectly set slot=%u count=%d ptr=%p\n", v8, v9, v10, v11, v12, v13, a2);
        os_unfair_lock_unlock(v18);
        return 0;
      }
      v15 = v16;
      v23 = ((unint64_t)v16[1] >> 60) & 0xFFFFFFFFFFFFFFF0 | (16 * v16[1]);
      v26 = (v23 ^ *(_DWORD *)(a1 + 632)) + ((v23 ^ *(_QWORD *)(a1 + 632)) >> 32);
      if ((((((unint64_t)v16[1] >> 60) | (16 * *((_BYTE *)v16 + 8))) ^ (((unsigned __int16)(HIWORD(v26) + v26) >> 8) + BYTE2(v26) + v26)) & 0xF) != 0)
      {
        free_list_checksum_botch(a1, (uint64_t)(v16 + 1), v16[1], v9, v10, v11, v12, v13);
        __break(1u);
        JUMPOUT(0x7F008);
      }
      v16 = (uint64_t *)(((unint64_t)v16[1] >> 60) & 0xFFFFFFFFFFFFFFF0 | (16 * v16[1]));
      ++v17;
    }
    os_unfair_lock_unlock(v18);
  }
  return 1;
}

uint64_t tiny_check(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v7;
  uint64_t v8;
  unint64_t i;
  unint64_t j;

  for (i = 0; i < **(_QWORD **)(a1 + 24); ++i)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 8 * i);
    if (v8 != -1 && v8)
    {
      v7 = mag_lock_zine_for_region_trailer_0(*(_QWORD *)(a1 + 624), v8, *(_DWORD *)(v8 + 24));
      if (!tiny_check_region(a1, v8, i, a2, v2, v3, v4, v5))
      {
        os_unfair_lock_unlock(v7);
        return 0;
      }
      os_unfair_lock_unlock(v7);
    }
  }
  for (j = 0; j < 0x3F; ++j)
  {
    if (!tiny_free_list_check(a1, j))
      return 0;
  }
  return 1;
}

unint64_t tiny_earlier_region_last_free(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;
  BOOL v6;
  uint64_t i;
  uint64_t v8;
  unsigned __int16 v9;
  int v10;

  v10 = 0;
  v9 = 0;
  v8 = 0;
  for (i = *(_QWORD *)(a1 + 2176); ; i = *(_QWORD *)(i + 8))
  {
    v6 = 0;
    if (i)
    {
      v6 = 0;
      if (i != a2)
      {
        v3 = v10++;
        v6 = v3 < 5;
      }
    }
    if (!v6)
      break;
    if (*(_WORD *)((char *)&locret_3F28 + 4 * a3 + (i & 0xFFFFFFFFFFF00000) + 2))
    {
      v9 = *(_WORD *)((char *)&locret_3F28 + 4 * a3 + (i & 0xFFFFFFFFFFF00000) + 2);
      v8 = i;
    }
  }
  if (v9)
    return (v8 & 0xFFFFFFFFFFF00000) + 16512 + 16 * (v9 - 1);
  else
    return 0;
}

uint64_t get_tiny_free_size_offset(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (a1 + 16 >= (a1 & 0xFFFFFFFFFFF00000) + 0x100000)
    return 1;
  v3 = a1 + 16;
  if (((*(_DWORD *)((v3 & 0xFFFFFFFFFFF00000)
                   + 40
                   + a2
                   + 8 * ((int)(unsigned __int16)((v3 - ((v3 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) >> 5)) >> (((v3 - ((v3 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) & 0x1F)) & 1) != 0)
    return 1;
  else
    return *(unsigned __int16 *)(a1 + a2 + 16);
}

BOOL tiny_magazine_below_recirc_threshold(uint64_t a1)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;

  v4 = *(_QWORD *)(a1 + 2160);
  v3 = *(_QWORD *)(a1 + 2152);
  v2 = 0;
  if (v4 - v3 > 0x179F40)
    return v3 < v4 - (v4 >> 2);
  return v2;
}

uint64_t tiny_free_do_recirc_to_depot(unint64_t a1, uint64_t a2)
{
  BOOL v3;
  BOOL v4;
  mach_vm_address_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t i;

  for (i = *(_QWORD *)(a2 + 2184); ; i = *(_QWORD *)i)
  {
    v4 = 0;
    if (i)
    {
      v3 = 1;
      if ((*(_BYTE *)(i + 32) & 1) != 0)
        v3 = *(_DWORD *)(i + 28) != 0;
      v4 = v3;
    }
    if (!v4)
      break;
  }
  if (i)
  {
    v9 = i & 0xFFFFFFFFFFF00000;
    if ((i & 0xFFFFFFFFFFF00000) == *(_QWORD *)(a2 + 2144) && (*(_QWORD *)(a2 + 2128) || *(_QWORD *)(a2 + 2136)))
      tiny_finalize_region(a1, a2);
    if (*(_QWORD *)i)
      *(_QWORD *)(*(_QWORD *)i + 8) = *(_QWORD *)(i + 8);
    else
      *(_QWORD *)(a2 + 2176) = *(_QWORD *)(i + 8);
    if (*(_QWORD *)(i + 8))
      **(_QWORD **)(i + 8) = *(_QWORD *)i;
    else
      *(_QWORD *)(a2 + 2184) = *(_QWORD *)i;
    *(_QWORD *)i = 0;
    *(_QWORD *)(i + 8) = 0;
    --*(_DWORD *)(a2 + 2172);
    v8 = tiny_free_detach_region(a1, a2, v9);
    v7 = *(_QWORD *)(a1 + 624) - 2560;
    os_unfair_lock_lock_with_options(v7, 327680);
    *(int *)((char *)&dword_18 + (i & 0xFFFFFFFFFFF00000)) = -1;
    *(_DWORD *)(i + 28) = 0;
    v6 = tiny_free_reattach_region(a1, v7, v9);
    *(_QWORD *)(a2 + 2152) -= v6;
    *(_QWORD *)(a2 + 2160) -= 1032064;
    *(_DWORD *)(a2 + 2168) -= v8;
    os_unfair_lock_unlock((os_unfair_lock_t)a2);
    *(_QWORD *)(v7 + 2152) += v6;
    *(_QWORD *)(v7 + 2160) += 1032064;
    *(_DWORD *)(v7 + 2168) += v8;
    if (*(_QWORD *)(v7 + 2184))
    {
      *(_QWORD *)i = *(_QWORD *)(v7 + 2184);
      *(_QWORD *)(*(_QWORD *)(v7 + 2184) + 8) = i;
    }
    else
    {
      *(_QWORD *)(v7 + 2176) = i;
      *(_QWORD *)i = 0;
    }
    *(_QWORD *)(v7 + 2184) = i;
    *(_QWORD *)(i + 8) = 0;
    *(_BYTE *)(i + 32) = 0;
    ++*(_DWORD *)(v7 + 2172);
    if ((aggressive_madvise_enabled & 1) == 0)
      tiny_free_scan_madvise_free(a1, (os_unfair_lock_s *)v7, v9);
    v5 = tiny_free_try_depot_unmap_no_lock(a1, v7, i);
    os_unfair_lock_unlock((os_unfair_lock_t)v7);
    if (v5)
    {
      if ((*(_DWORD *)(a1 + 620) & 4) != 0)
        mvm_deallocate_pages(v5, 0x100000uLL, *(_WORD *)(a1 + 620) & 0xFFFE);
      else
        mvm_deallocate_pages(v5, 0x100000uLL, *(_WORD *)(a1 + 620) & 0xFFFC);
    }
    return 0;
  }
  else
  {
    return 1;
  }
}

unint64_t tiny_free_try_depot_unmap_no_lock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  unint64_t v10;

  if (*(_DWORD *)(a3 + 16) || *(int *)(a3 + 28) > 0 || *(_DWORD *)(a2 + 2172) < recirc_retained_regions)
    return 0;
  if (*(_QWORD *)a3)
    *(_QWORD *)(*(_QWORD *)a3 + 8) = *(_QWORD *)(a3 + 8);
  else
    *(_QWORD *)(a2 + 2176) = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)(a3 + 8))
    **(_QWORD **)(a3 + 8) = *(_QWORD *)a3;
  else
    *(_QWORD *)(a2 + 2184) = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  --*(_DWORD *)(a2 + 2172);
  v10 = a3 & 0xFFFFFFFFFFF00000;
  v9 = tiny_free_detach_region(a1, a2, a3 & 0xFFFFFFFFFFF00000);
  if (v9)
  {
    malloc_zone_error(*(_DWORD *)(a1 + 620), 1, (uint64_t)"tiny_free_try_depot_unmap_no_lock objects_in_use not zero: %d\n", v3, v4, v5, v6, v7, v9);
    return 0;
  }
  else if ((rack_region_remove(a1, v10, a3) & 1) != 0)
  {
    *(_QWORD *)(a2 + 2160) -= 1032064;
    return v10;
  }
  else
  {
    return 0;
  }
}

uint64_t zero_on_free_should_sample()
{
  uint64_t v1;
  char v2;

  v2 = 0;
  if (malloc_zero_on_free_sample_period)
  {
    v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 888) + 1;
    if (v1 == malloc_zero_on_free_sample_period)
    {
      v2 = 1;
      v1 = 0;
    }
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 888) = v1;
  }
  return v2 & 1;
}

void _tiny_check_and_zero_inline_meta_from_freelist(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int16 v9;
  unint64_t v11;

  v11 = ((*(_QWORD *)a2 >> 60) & 0xFFFFFFFFFFFFFFF0 | (16 * *(_QWORD *)a2)) ^ *(_QWORD *)(a1 + 632);
  if (((((*(_QWORD *)a2 >> 60) | (16 * *(_BYTE *)a2)) ^ (((unsigned __int16)(((v11 + HIDWORD(v11)) >> 16) + v11 + WORD2(v11)) >> 8)
                                                                                          + ((v11 + HIDWORD(v11)) >> 16)
                                                                                          + v11
                                                                                          + BYTE4(v11))) & 0xF) != 0)
  {
    free_list_checksum_botch(a1, a2, *(_QWORD *)a2, a4, a5, a6, a7, a8);
    __break(1u);
    JUMPOUT(0x7FDA8);
  }
  *(_OWORD *)a2 = 0uLL;
  if (a3 <= 1u)
  {
    if (!a3 && *(_WORD *)(a2 + 16))
      malloc_zone_error(256, 1, (uint64_t)"Corruption at %p: unexpected nonzero msize %u\n", a4, a5, a6, a7, a8, a2);
  }
  else
  {
    v9 = *(_WORD *)(a2 + 16);
    v8 = a2 + 16 * a3;
    if (v9 == *(unsigned __int16 *)(v8 - 2))
    {
      if (v9 != a3)
        malloc_zone_error(256, 1, (uint64_t)"Corruption at %p: unexpected msizes %u/%u\n", a4, a5, a6, a7, a8, a2);
    }
    else
    {
      malloc_zone_error(256, 1, (uint64_t)"Corruption of free object %p: msizes %u/%u disagree\n", a4, a5, a6, a7, a8, a2);
    }
    *(_WORD *)(a2 + 16) = 0;
    *(_WORD *)(v8 - 2) = 0;
  }
}

uint64_t _malloc_read_uint16_via_rsp(unsigned __int16 *a1)
{
  return *a1;
}

unint64_t tiny_find_msize_region(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;

  v8 = tiny_slot_from_msize(a4);
  v9 = *(_QWORD *)(a2 + 32 + 8 * v8);
  if (v9)
    return v9 & 0xFFFFFFFFFFF00000;
  v5 = *(_QWORD *)(a2 + 2088) & ~((1 << v8) - 1);
  if (!v5)
    return 0;
  v6 = (_QWORD *)(a2 + 536);
  v7 = (_QWORD *)(a2 + 32 + 8 * __clz(__rbit64(v5)));
  if ((unint64_t)v7 < a2 + 536 && *v7)
    return *v7 & 0xFFFFFFFFFFF00000;
  if (*v6)
    return *v6 & 0xFFFFFFFFFFF00000;
  return 0;
}

uint64_t _malloc_default_debug_sleep_time()
{
  if (malloc_error_sleep)
    return 3600;
  else
    return 0;
}

char *malloc_print_configure()
{
  char *result;
  char *v1;

  v1 = getenv("MallocDebugReport");
  if (v1)
  {
    if (_platform_strcmp(v1, "stderr"))
    {
      if (_platform_strcmp(v1, "crash"))
      {
        if (_platform_strcmp(v1, "none"))
        {
          debug_mode = 2;
          malloc_printf("Unrecognized value for MallocDebugReport (%s) - using 'stderr'\n", v1);
        }
        else
        {
          debug_mode = 0;
        }
      }
      else
      {
        debug_mode = 1;
      }
    }
    else
    {
      debug_mode = 2;
    }
  }
  else if (isatty(2))
  {
    debug_mode = 2;
  }
  if (getenv("MallocErrorStop"))
    malloc_error_stop = 1;
  result = getenv("MallocErrorSleep");
  if (result)
    malloc_error_sleep = 1;
  return result;
}

void malloc_printf(const char *format, ...)
{
  va_list va;

  va_start(va, format);
  malloc_vreport(3, 0, 0, 0, (uint64_t)format, (uint64_t)va);
}

void malloc_vreport(__int16 a1, unsigned int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  pid_t v6;
  pid_t v7;
  uint64_t v8;
  pid_t v9;
  const char *v10;
  const char *v11;
  unsigned int v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = 0;
  v15 = _simple_salloc();
  if (v15)
  {
    if ((a1 & 0x20) == 0)
    {
      v13 = (const void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) - 224);
      v10 = getprogname();
      v7 = getpid();
      _simple_sprintf(v15, "%s(%d,%p) malloc: ", v10, v7, v13);
    }
    if (a3)
      _simple_sprintf(v15, a3, a4);
    _simple_vsprintf(v15, a5, a6);
    if ((a1 & 0x100) != 0)
      _malloc_append_backtrace(v15);
    if ((a1 & 0x200) == 0 && (debug_mode == 2 || debug_mode == 1 && (a1 & 0x40) != 0))
      _simple_put(v15, malloc_debug_file);
    if (!_malloc_no_asl_log && (a1 & 0x10) == 0)
    {
      v8 = _simple_string(v15);
      _simple_asl_log(a1 & 0xF, "com.apple.Libsystem.malloc", v8);
    }
    if ((a1 & 0x40) != 0)
      v16 = _simple_string(v15);
    else
      _simple_sfree(v15);
  }
  else
  {
    if ((a1 & 0x200) == 0 && (debug_mode == 2 || debug_mode == 1 && (a1 & 0x40) != 0))
    {
      if ((a1 & 0x20) == 0)
      {
        v14 = (const void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) - 224);
        v12 = malloc_debug_file;
        v11 = getprogname();
        v6 = getpid();
        _simple_dprintf(v12, "%s(%d,%p) malloc: ", v11, v6, v14);
      }
      if (a3)
        _simple_dprintf(malloc_debug_file, a3, a4);
      _simple_vdprintf(malloc_debug_file, a5, a6);
    }
    if ((a1 & 0x40) != 0)
      v16 = a5;
  }
  if ((a1 & 0xC0) != 0)
  {
    _malloc_put(a1, "*** set a breakpoint in malloc_error_break to debug\n");
    malloc_error_break();
    if (malloc_error_stop)
    {
      _malloc_put(5, "*** sending SIGSTOP to help debug\n");
      v9 = getpid();
      kill(v9, 17);
    }
    else if (a2)
    {
      _malloc_put(5, "*** sleeping to help debug\n");
      sleep(a2);
    }
  }
  if ((a1 & 0x40) != 0)
  {
    qword_A4008 = v16;
    abort();
  }
}

void _malloc_append_backtrace(uint64_t a1)
{
  int v1;
  uint64_t i;
  int size[2];
  char __b[37];
  unsigned __int8 uu1[8];
  uint64_t v7;
  image_offset image_offsets[50];
  void *array[50];

  bzero(array, 0x190uLL);
  v1 = backtrace(array, 50);
  *(_QWORD *)size = v1;
  if (v1)
  {
    backtrace_image_offsets(array, image_offsets, v1);
    for (i = 0; i < *(uint64_t *)size; ++i)
    {
      *(_QWORD *)uu1 = 0;
      v7 = 0;
      if (i && !uuid_compare(uu1, image_offsets[i].uuid))
      {
        _simple_sappend(a1, "last");
      }
      else
      {
        uuid_copy(uu1, image_offsets[i].uuid);
        memset(__b, 0, sizeof(__b));
        uuid_unparse(image_offsets[i].uuid, __b);
        _simple_sappend(a1, __b);
      }
      _simple_sprintf(a1, "+%u,", image_offsets[i].offset);
    }
  }
}

ssize_t _malloc_put(__int16 a1, const char *a2)
{
  ssize_t result;
  pid_t v3;
  size_t v4;
  pid_t v5;
  uint64_t v6;
  const char *v7;
  int __fd;
  const char *v9;
  unsigned int v10;
  const void *v11;
  const void *v12;
  ssize_t v13;

  result = _simple_salloc();
  v13 = result;
  if (result)
  {
    if ((a1 & 0x20) == 0)
    {
      v11 = (const void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) - 224);
      v7 = getprogname();
      v5 = getpid();
      _simple_sprintf(v13, "%s(%d,%p) malloc: ", v7, v5, v11);
    }
    _simple_sprintf(v13, "%s", a2);
    if ((a1 & 0x200) == 0 && (debug_mode == 2 || debug_mode == 1 && (a1 & 0x40) != 0))
      _simple_put(v13, malloc_debug_file);
    if ((_malloc_no_asl_log & ((a1 & 0x10) == 0)) != 0)
    {
      v6 = _simple_string(v13);
      _simple_asl_log(a1 & 0xF, "com.apple.Libsystem.malloc", v6);
    }
    return _simple_sfree(v13);
  }
  else if ((a1 & 0x200) == 0 && (debug_mode == 2 || debug_mode == 1 && (a1 & 0x40) != 0))
  {
    if ((a1 & 0x20) == 0)
    {
      v12 = (const void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) - 224);
      v10 = malloc_debug_file;
      v9 = getprogname();
      v3 = getpid();
      _simple_dprintf(v10, "%s(%d,%p) malloc: ", v9, v3, v12);
    }
    __fd = malloc_debug_file;
    v4 = _platform_strlen(a2);
    return write(__fd, a2, v4);
  }
  return result;
}

void malloc_report(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v9;

  v9 = _malloc_default_debug_sleep_time();
  malloc_vreport(a1, v9, 0, 0, a2, (uint64_t)&a9);
}

void malloc_report_simple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v9;

  v9 = _malloc_default_debug_sleep_time();
  malloc_vreport(48, v9, 0, 0, a1, (uint64_t)&a9);
}

void malloc_zone_error(__int16 a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v9;
  __int16 v10;

  v10 = 144;
  if ((a2 & 1) != 0 && (a1 & 0x100) != 0 || (a1 & 0x40) != 0)
    v10 = 64;
  v9 = _malloc_default_debug_sleep_time();
  malloc_vreport(v10 | 3, v9, 0, 0, a3, (uint64_t)&a9);
}

void internal_check()
{
  unsigned int v0;

  v0 = malloc_check_counter++;
  if (v0 >= malloc_check_start)
  {
    if (malloc_zone_check(0))
    {
      if (!frames)
        vm_allocate(mach_task_self_, (vm_address_t *)&frames, vm_page_size, 1);
      thread_stack_pcs(frames, vm_page_size / 8 - 1, &num_frames);
    }
    malloc_check_start += malloc_check_each;
  }
}

void tiny_zero_corruption_abort(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  _BYTE *v8;

  v8 = (_BYTE *)a1;
  v7 = a1 + 16 * a2;
  while (!*v8)
    ++v8;
  if ((unint64_t)(v8 + 16) >= v7)
    v6 = 0;
  else
    v6 = v8[16];
  if ((unint64_t)(v8 + 17) >= v7)
    v5 = 0;
  else
    v5 = v8[17];
  if ((unint64_t)(v8 + 18) >= v7)
    v4 = 0;
  else
    v4 = v8[18];
  if ((unint64_t)(v8 + 19) >= v7)
    v3 = 0;
  else
    v3 = v8[19];
  if ((unint64_t)(v8 + 20) >= v7)
    v2 = 0;
  else
    v2 = v8[20];
  malloc_zone_error(256, 1, (uint64_t)"Corruption detected in block %p of size %u at offset %u, first 32 bytes at that offset are %02X %02X %02X %02X %02X %02X %02X %02X | %02X %02X %02X %02X %02X %02X %02X %02X | %02X %02X %02X %02X %02X %02X %02X %02X | %02X %02X %02X %02X %02X %02X %02X %02X\n", v2, v3, v4, v5, v6, a1);
}

void *__cdecl j__aligned_alloc(size_t __alignment, size_t __size)
{
  return aligned_alloc(__alignment, __size);
}

void *__cdecl j__calloc(size_t __count, size_t __size)
{
  return calloc(__count, __size);
}

void j__free(void *a1)
{
  free(a1);
}

void *__cdecl j__malloc(size_t __size)
{
  return malloc(__size);
}

malloc_zone_t *j__malloc_default_zone(void)
{
  return malloc_default_zone();
}

void *__cdecl j__malloc_zone_calloc(malloc_zone_t *zone, size_t num_items, size_t size)
{
  return malloc_zone_calloc(zone, num_items, size);
}

void *__cdecl j__malloc_zone_malloc(malloc_zone_t *zone, size_t size)
{
  return malloc_zone_malloc(zone, size);
}

void *__cdecl j__malloc_zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size)
{
  return malloc_zone_memalign(zone, alignment, size);
}

void *__cdecl j__malloc_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size)
{
  return malloc_zone_realloc(zone, ptr, size);
}

void *__cdecl j__malloc_zone_valloc(malloc_zone_t *zone, size_t size)
{
  return malloc_zone_valloc(zone, size);
}

int j__posix_memalign(void **__memptr, size_t __alignment, size_t __size)
{
  return posix_memalign(__memptr, __alignment, __size);
}

void *__cdecl j__realloc(void *__ptr, size_t __size)
{
  return realloc(__ptr, __size);
}

void *__cdecl j__valloc(size_t a1)
{
  return valloc(a1);
}
