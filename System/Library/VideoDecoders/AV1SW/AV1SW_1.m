uint64_t sub_218B8A50C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  char *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  char v43;
  int v44;
  int v45;
  char v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char **v51;
  uint64_t v52;
  int v53;
  _QWORD *v54;
  unint64_t v55;
  char v56;
  int v57;
  BOOL v58;
  _DWORD *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  int v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  int v82;
  char v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  int v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  unsigned int v95;
  unint64_t v96;

  v2 = *(_QWORD *)(a1 + 3256);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 438))
  {
    v3 = *(_QWORD *)(a1 + 3096);
    if (*(_QWORD *)(a1 + 3064))
    {
      memcpy(*(void **)(a1 + 3096), *(const void **)(a1 + 3072), 0x3600uLL);
    }
    else
    {
      memcpy(*(void **)(a1 + 3096), &unk_218BC0240, 0x1860uLL);
      memcpy((void *)(v3 + 6240), &unk_218BBFEA0, 0x320uLL);
      memcpy((void *)(v3 + 7040), (char *)&unk_218BC1AA0 + 6208 * *(unsigned int *)(a1 + 3072), 0x1840uLL);
      *(_QWORD *)(v3 + 13504) = 0x348054007000;
      *(_QWORD *)(v3 + 13792) = 0x348054007000;
      *(_OWORD *)(v3 + 13728) = xmmword_218BC0200;
      *(_OWORD *)(v3 + 13744) = unk_218BC0210;
      *(_OWORD *)(v3 + 13760) = xmmword_218BC0220;
      *(_OWORD *)(v3 + 13776) = unk_218BC0230;
      *(_OWORD *)(v3 + 13664) = xmmword_218BC01C0;
      *(_OWORD *)(v3 + 13680) = unk_218BC01D0;
      *(_OWORD *)(v3 + 13696) = xmmword_218BC01E0;
      *(_OWORD *)(v3 + 13712) = unk_218BC01F0;
      *(_OWORD *)(v3 + 13648) = unk_218BC0230;
      *(_OWORD *)(v3 + 13632) = xmmword_218BC0220;
      *(_OWORD *)(v3 + 13616) = unk_218BC0210;
      *(_OWORD *)(v3 + 13600) = xmmword_218BC0200;
      *(_OWORD *)(v3 + 13584) = unk_218BC01F0;
      *(_OWORD *)(v3 + 13568) = xmmword_218BC01E0;
      *(_OWORD *)(v3 + 13552) = unk_218BC01D0;
      *(_OWORD *)(v3 + 13536) = xmmword_218BC01C0;
      *(_OWORD *)(v3 + 13376) = xmmword_218BC01C0;
      *(_OWORD *)(v3 + 13392) = unk_218BC01D0;
      *(_OWORD *)(v3 + 13408) = xmmword_218BC01E0;
      *(_OWORD *)(v3 + 13424) = unk_218BC01F0;
      *(_OWORD *)(v3 + 13440) = xmmword_218BC0200;
      *(_OWORD *)(v3 + 13456) = unk_218BC0210;
      *(_OWORD *)(v3 + 13472) = xmmword_218BC0220;
      *(_OWORD *)(v3 + 13488) = unk_218BC0230;
      *(_OWORD *)(v3 + 13296) = unk_218BC01F0;
      *(_OWORD *)(v3 + 13280) = xmmword_218BC01E0;
      *(_OWORD *)(v3 + 13264) = unk_218BC01D0;
      *(_OWORD *)(v3 + 13248) = xmmword_218BC01C0;
      *(_OWORD *)(v3 + 13360) = unk_218BC0230;
      *(_OWORD *)(v3 + 13344) = xmmword_218BC0220;
      *(_OWORD *)(v3 + 13328) = unk_218BC0210;
      *(_OWORD *)(v3 + 13312) = xmmword_218BC0200;
    }
  }
  *(_DWORD *)(a1 + 5560) = 0;
  v4 = *(_DWORD *)(a1 + 3124);
  if (v4 < 1)
    goto LABEL_79;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = *(_QWORD *)(a1 + 3112);
  v88 = v2;
  do
  {
    v9 = v8 + 80 * v5;
    LODWORD(v10) = *(_DWORD *)(v9 + 72);
    LODWORD(v9) = *(_DWORD *)(v9 + 76);
    v10 = (int)v10;
    if ((int)v10 > (int)v9)
      goto LABEL_78;
    v11 = *(char **)(v8 + 80 * v5);
    v12 = *(_QWORD *)(v8 + 80 * v5 + 8);
    v13 = 14624 * (int)v10 + 14584;
    v89 = v5;
    do
    {
      if ((_DWORD)v9 == (_DWORD)v10)
      {
        v14 = v11;
        v96 = v12;
      }
      else
      {
        v15 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 441);
        v16 = v12 >= v15;
        v12 -= v15;
        if (!v16)
          return 4294967274;
        if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 441))
        {
          v17 = 0;
          v18 = 0;
          v19 = v15 - 1;
          v20 = 8 * v15;
          v21 = v11;
          do
          {
            v22 = *v21++;
            v18 |= (v22 << v17);
            v17 += 8;
          }
          while (v20 != v17);
          v11 += v19 + 1;
        }
        else
        {
          v18 = 0;
        }
        v96 = v18 + 1;
        if (v18 + 1 > v12)
          return 4294967274;
        v14 = v11;
      }
      if (*(_DWORD *)(v2 + 8) < 2u)
        v23 = 0;
      else
        v23 = *(_DWORD *)(*(_QWORD *)(a1 + 4424) + 4 * v10);
      v24 = *(_QWORD *)(a1 + 8);
      v25 = (unsigned __int8 *)&unk_218BBE038 + 2 * *(unsigned int *)(a1 + 2168);
      v26 = *(_QWORD *)(a1 + 4384);
      v93 = v13;
      v94 = v12;
      v90 = *(_BYTE *)(v24 + 392) == 0;
      if (v26)
        v27 = v26 + ((v25[1] * (unint64_t)v23) >> 3);
      else
        v27 = 0;
      v28 = *(_QWORD *)(a1 + 24);
      v29 = *(unsigned __int16 *)(v28 + 450 + 2 * v6);
      v30 = *(unsigned __int16 *)(v28 + 450 + 2 * (v6 + 1));
      v28 += 580;
      v95 = *(unsigned __int16 *)(v28 + 2 * v7);
      v31 = *(unsigned __int16 *)(v28 + 2 * (v7 + 1));
      v32 = *(_QWORD *)(a1 + 3264);
      v33 = *(_DWORD *)(a1 + 3468);
      v34 = *(_QWORD *)(a1 + 4368);
      v35 = *(_QWORD *)(a1 + 4392);
      *(_QWORD *)(v32 + 14624 * v10 + 13896) = v27;
      if (v34)
        v36 = v34 + (((*v25 * (unint64_t)v23) >> 5) & 0x7FFFFFFFELL);
      else
        v36 = 0;
      *(_QWORD *)(v32 + 14624 * v10 + 13904) = v36;
      if (v35)
        v37 = v35 + ((*v25 * (unint64_t)v23) >> (*(_BYTE *)(v24 + 32) == 0));
      else
        v37 = 0;
      *(_QWORD *)(v32 + 14624 * v10 + 13912) = v37;
      if (v26)
        v26 += (v25[1] * (unint64_t)v23) >> 3;
      *(_QWORD *)(v32 + 14624 * v10 + 13920) = v26;
      if (v34)
        v38 = v34 + (((*v25 * (unint64_t)v23) >> 5) & 0x7FFFFFFFELL);
      else
        v38 = 0;
      *(_QWORD *)(v32 + 14624 * v10 + 13928) = v38;
      if (v35)
        v39 = v35 + ((*v25 * (unint64_t)v23) >> (*(_BYTE *)(v24 + 32) == 0));
      else
        v39 = 0;
      v40 = v32 + 14624 * v10;
      *(_QWORD *)(v40 + 13936) = v39;
      v91 = v7 + 1;
      v92 = v6 + 1;
      if (*(_QWORD *)(a1 + 3064))
      {
        v41 = v31;
        v42 = v30;
        v43 = v33;
        v44 = v7;
        v45 = v6;
        memcpy((void *)(v32 + 14624 * v10), *(const void **)(a1 + 3072), 0x3600uLL);
        v46 = v43;
        v47 = v42;
        v48 = v41;
        v7 = v44;
        v5 = v89;
      }
      else
      {
        v85 = v30;
        v86 = v31;
        v84 = v33;
        v87 = v7;
        v45 = v6;
        memcpy((void *)(v32 + 14624 * v10), &unk_218BC0240, 0x1860uLL);
        memcpy((void *)(v40 + 6240), &unk_218BBFEA0, 0x320uLL);
        memcpy((void *)(v40 + 7040), (char *)&unk_218BC1AA0 + 6208 * *(unsigned int *)(a1 + 3072), 0x1840uLL);
        v46 = v84;
        v47 = v85;
        v48 = v86;
        v7 = v87;
        v5 = v89;
        *(_QWORD *)(v40 + 13504) = 0x348054007000;
        *(_QWORD *)(v40 + 13792) = 0x348054007000;
        *(_OWORD *)(v40 + 13728) = xmmword_218BC0200;
        *(_OWORD *)(v40 + 13744) = unk_218BC0210;
        *(_OWORD *)(v40 + 13760) = xmmword_218BC0220;
        *(_OWORD *)(v40 + 13776) = unk_218BC0230;
        *(_OWORD *)(v40 + 13664) = xmmword_218BC01C0;
        *(_OWORD *)(v40 + 13680) = unk_218BC01D0;
        *(_OWORD *)(v40 + 13696) = xmmword_218BC01E0;
        *(_OWORD *)(v40 + 13712) = unk_218BC01F0;
        *(_OWORD *)(v40 + 13648) = unk_218BC0230;
        *(_OWORD *)(v40 + 13632) = xmmword_218BC0220;
        *(_OWORD *)(v40 + 13616) = unk_218BC0210;
        *(_OWORD *)(v40 + 13600) = xmmword_218BC0200;
        *(_OWORD *)(v40 + 13584) = unk_218BC01F0;
        *(_OWORD *)(v40 + 13568) = xmmword_218BC01E0;
        *(_OWORD *)(v40 + 13552) = unk_218BC01D0;
        *(_OWORD *)(v40 + 13536) = xmmword_218BC01C0;
        *(_OWORD *)(v40 + 13376) = xmmword_218BC01C0;
        *(_OWORD *)(v40 + 13392) = unk_218BC01D0;
        *(_OWORD *)(v40 + 13408) = xmmword_218BC01E0;
        *(_OWORD *)(v40 + 13424) = unk_218BC01F0;
        *(_OWORD *)(v40 + 13440) = xmmword_218BC0200;
        *(_OWORD *)(v40 + 13456) = unk_218BC0210;
        *(_OWORD *)(v40 + 13472) = xmmword_218BC0220;
        *(_OWORD *)(v40 + 13488) = unk_218BC0230;
        *(_OWORD *)(v40 + 13296) = unk_218BC01F0;
        *(_OWORD *)(v40 + 13280) = xmmword_218BC01E0;
        *(_OWORD *)(v40 + 13264) = unk_218BC01D0;
        *(_OWORD *)(v40 + 13248) = xmmword_218BC01C0;
        *(_OWORD *)(v40 + 13360) = unk_218BC0230;
        *(_OWORD *)(v40 + 13344) = xmmword_218BC0220;
        *(_OWORD *)(v40 + 13328) = unk_218BC0210;
        *(_OWORD *)(v40 + 13312) = xmmword_218BC0200;
      }
      v2 = v88;
      v49 = 0;
      v50 = v32 + 14624 * v10;
      *(_DWORD *)(v50 + 14056) = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 712);
      *(_DWORD *)(v50 + 14060) = 0;
      v51 = (char **)(v50 + 13824);
      v52 = *(_QWORD *)(a1 + 24);
      v53 = *(unsigned __int8 *)(v52 + 267);
      *(_QWORD *)(v50 + 13824) = v14;
      v11 = &v14[v96];
      *(_QWORD *)(v50 + 13832) = &v14[v96];
      *(_DWORD *)(v50 + 13856) = v53 == 0;
      v54 = (_QWORD *)(v50 + 13840);
      *(_QWORD *)(v50 + 13840) = 0;
      *(_QWORD *)(v50 + 13848) = 0xFFFFFFF100008000;
      v55 = 55;
      while (v14 < v11)
      {
        v56 = *v14++;
        v49 |= (unint64_t)~v56 << v55;
        v57 = v55 - 8;
        v58 = v55 > 7;
        v55 -= 8;
        if (!v58)
          goto LABEL_48;
      }
      v49 |= ~(-256 << v55);
      v57 = v55;
LABEL_48:
      v59 = (_DWORD *)(v32 + 14624 * v10);
      *v54 = v49;
      v59[3463] = 40 - v57;
      *v51 = v14;
      v59[3471] = v7;
      v59[3470] = v45;
      v59[3466] = v29 << v46;
      v60 = v47 << v46;
      if (v47 << v46 >= *(_DWORD *)(a1 + 3448))
        v60 = *(_DWORD *)(a1 + 3448);
      v59[3467] = v60;
      v61 = v95 << v46;
      v59[3468] = v95 << v46;
      v62 = v48 << v46;
      if (v48 << v46 >= *(_DWORD *)(a1 + 3452))
        v62 = *(_DWORD *)(a1 + 3452);
      v59[3469] = v62;
      if (*(_DWORD *)(v52 + 236) == *(_DWORD *)(v52 + 240))
      {
        v63 = (v29 >> v90) + *(_DWORD *)(a1 + 3456) * (v61 >> 5);
        v64 = (v61 >> 3) & 2 | (v29 << v46 >> 4) & 1;
      }
      else
      {
        v63 = *(_DWORD *)(a1 + 3476) * (v61 >> 5);
        v64 = (v61 >> 3) & 2;
      }
      v65 = 0;
      v66 = v59 + 3466;
      v67 = v32 + v93;
      v68 = (v64 | (8 * v64)) + 108 * v63;
      do
      {
        if (((*(_DWORD *)(a1 + 5352) >> v65) & 1) == 0)
          goto LABEL_67;
        v69 = *(_QWORD *)(a1 + 24);
        if (*(_DWORD *)(v69 + 236) == *(_DWORD *)(v69 + 240))
        {
          v70 = *(_QWORD *)(a1 + 4448) + v68;
LABEL_66:
          *(_QWORD *)(v67 + 8 * v65) = v70;
          *(_BYTE *)(v70 + 4) = 3;
          *(_BYTE *)(*(_QWORD *)(v67 + 8 * v65) + 5) = -7;
          *(_BYTE *)(*(_QWORD *)(v67 + 8 * v65) + 6) = 15;
          *(_BYTE *)(*(_QWORD *)(v67 + 8 * v65) + 1) = 3;
          *(_BYTE *)(*(_QWORD *)(v67 + 8 * v65) + 2) = -7;
          *(_BYTE *)(*(_QWORD *)(v67 + 8 * v65) + 3) = 15;
          *(_BYTE *)(*(_QWORD *)(v67 + 8 * v65) + 7) = -32;
          *(_BYTE *)(*(_QWORD *)(v67 + 8 * v65) + 8) = 31;
          goto LABEL_67;
        }
        if (v65)
          v71 = *(_DWORD *)(a1 + 2168) != 3;
        else
          v71 = 0;
        v72 = *(unsigned __int8 *)(v69 + 416);
        if (v65)
          ++v69;
        v73 = ((8 << *(_BYTE *)(v69 + 880)) + ((4 * v72 * *v66) >> v71) - 1) >> (*(_BYTE *)(v69 + 880) + 3) << (*(_BYTE *)(v69 + 880) + v71);
        if (v73 >> 7 < *(_DWORD *)(a1 + 3476))
        {
          v70 = *(_QWORD *)(a1 + 4448)
              + 108 * ((v73 >> 7) + v63)
              + 36 * v65
              + ((((v73 >> 6) & 1) + v64) | (8 * (((v73 >> 6) & 1) + v64)));
          goto LABEL_66;
        }
LABEL_67:
        ++v65;
        v68 += 36;
      }
      while (v65 != 3);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 3256) + 24) >= 2u)
        *(int32x2_t *)(v32 + 14624 * v10 + 13888) = vdup_n_s32(v95);
      v74 = *(_QWORD *)(a1 + 24);
      if (v92 == *(unsigned __int8 *)(v74 + 445))
      {
        v7 = v91;
        v6 = 0;
      }
      else
      {
        v6 = v92;
      }
      if ((_DWORD)v10 == *(unsigned __int16 *)(v74 + 710) && *(_BYTE *)(v74 + 438))
        *(_DWORD *)(a1 + 5560) = 1;
      v12 = v94 - v96;
      v8 = *(_QWORD *)(a1 + 3112);
      v9 = *(int *)(v8 + 80 * v5 + 76);
      v13 = v93 + 14624;
      v58 = v10++ < v9;
    }
    while (v58);
    v4 = *(_DWORD *)(a1 + 3124);
LABEL_78:
    ++v5;
  }
  while (v5 < v4);
LABEL_79:
  if (*(_DWORD *)(v2 + 24) >= 2u)
  {
    v75 = *(_DWORD *)(v2 + 8);
    v76 = *(_QWORD *)(a1 + 24);
    v77 = *(_DWORD *)(a1 + 3456) * *(unsigned __int8 *)(v76 + 449);
    if (v77 << (v75 > 1) >= 1)
    {
      v78 = 0;
      v79 = 0;
      do
      {
        v80 = (*(_DWORD *)(v76 + 232) & 1) == 0;
        if (v79 < v77)
          v81 = 1;
        else
          v81 = 2;
        if (v75 <= 1)
          v82 = 0;
        else
          v82 = v81;
        sub_218B7E360((_OWORD *)(*(_QWORD *)(a1 + 4032) + v78), v80, v82);
        ++v79;
        v76 = *(_QWORD *)(a1 + 24);
        v77 = *(_DWORD *)(a1 + 3456) * *(unsigned __int8 *)(v76 + 449);
        v78 += 624;
      }
      while (v79 < v77 << (v75 > 1));
    }
  }
  return 0;
}

void sub_218B8ADFC(uint64_t a1, int a2)
{
  int v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 3256);
  if (*(_QWORD *)(a1 + 2392))
    *(_DWORD *)(a1 + 5564) = 0;
  if (a2)
  {
    if (*(_DWORD *)(v4 + 8) >= 2u)
    {
      v5 = *(void **)(a1 + 4392);
      if (v5)
        bzero(v5, (*(int *)(a1 + 4416) & 0x3FFFFFFFFFFFFLL) << 13);
    }
  }
  v6 = 2744;
  v7 = a1;
  do
  {
    if (*(_QWORD *)(v7 + 40))
    {
      if (!v2)
      {
        if (*(_DWORD *)(v4 + 8) >= 2u
          && *(_DWORD *)(v4 + 63072)
          && (v8 = atomic_load((unsigned int *)(*(_QWORD *)(v7 + 320) + 4)), v8 == -2))
        {
          atomic_store(1u, (unsigned int *)(a1 + 5564));
          atomic_store(0xFFFFFFFE, (unsigned int *)(*(_QWORD *)(a1 + 2664) + 4));
          v2 = -22;
        }
        else
        {
          v2 = 0;
        }
      }
      sub_218BA2EB0(v7 + 32);
      *(_QWORD *)(v7 + 320) = 0;
    }
    sub_218B9F368((uint64_t *)(a1 + v6));
    v7 += 296;
    v6 += 8;
  }
  while (v6 != 2800);
  sub_218BA2EB0(a1 + 2104);
  sub_218BA2EB0(a1 + 2376);
  *(_QWORD *)(a1 + 2664) = 0;
  *(_QWORD *)(a1 + 3080) = 0;
  *(_QWORD *)(a1 + 3072) = 0;
  sub_218B9F368((uint64_t *)(a1 + 3064));
  v9 = *(_QWORD *)(a1 + 24);
  if (v9 && *(_BYTE *)(v9 + 438))
  {
    v10 = *(unsigned int **)(a1 + 3104);
    if (v10)
    {
      if (v2)
        v11 = 2147483646;
      else
        v11 = 1;
      atomic_store(v11, v10);
    }
    *(_QWORD *)(a1 + 3104) = 0;
    *(_QWORD *)(a1 + 3096) = 0;
    sub_218B9F368((uint64_t *)(a1 + 3088));
  }
  sub_218B9F368((uint64_t *)(a1 + 2800));
  sub_218B9F368((uint64_t *)(a1 + 2808));
  sub_218B9F368((uint64_t *)(a1 + 2672));
  sub_218B9F368((uint64_t *)a1);
  sub_218B9F368((uint64_t *)(a1 + 16));
  if (*(int *)(a1 + 3124) >= 1)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      sub_218B70C54(*(_QWORD *)(a1 + 3112) + v12);
      ++v13;
      v12 += 80;
    }
    while (v13 < *(int *)(a1 + 3124));
  }
  *(_DWORD *)(a1 + 5556) = v2;
}

uint64_t sub_218B8AFC4(uint64_t a1)
{
  return sub_218BA46C0(*(_QWORD *)(a1 + 32));
}

uint64_t sub_218B8AFCC(uint64_t a1)
{
  return sub_218BA46C0(*(_QWORD *)(a1 + 32));
}

char *sub_218B8AFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return sub_218B8D71C(a1, a2, a3, a4, a5, a6, a7, a8, 0, a9);
}

uint64_t sub_218B8AFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return sub_218B8D370(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0, a11);
}

uint64_t sub_218B8B024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return sub_218B8CF30(a1, a2, a3, a4, a5, a6, a7, 0, a8);
}

uint64_t sub_218B8B048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return sub_218B8CBDC(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0, a10);
}

char *sub_218B8B070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return sub_218B8D71C(a1, a2, a3, a4, a5, a6, a7, a8, 4u, a9);
}

uint64_t sub_218B8B098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return sub_218B8D370(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 4u, a11);
}

uint64_t sub_218B8B0C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return sub_218B8CF30(a1, a2, a3, a4, a5, a6, a7, 4, a8);
}

uint64_t sub_218B8B0EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return sub_218B8CBDC(a1, a2, a3, a4, a5, a6, a7, a8, a9, 4u, a10);
}

char *sub_218B8B118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return sub_218B8D71C(a1, a2, a3, a4, a5, a6, a7, a8, 8u, a9);
}

uint64_t sub_218B8B140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return sub_218B8D370(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 8u, a11);
}

uint64_t sub_218B8B170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return sub_218B8CF30(a1, a2, a3, a4, a5, a6, a7, 8, a8);
}

uint64_t sub_218B8B194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return sub_218B8CBDC(a1, a2, a3, a4, a5, a6, a7, a8, a9, 8u, a10);
}

char *sub_218B8B1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return sub_218B8D71C(a1, a2, a3, a4, a5, a6, a7, a8, 2u, a9);
}

uint64_t sub_218B8B1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return sub_218B8D370(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 2u, a11);
}

uint64_t sub_218B8B218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return sub_218B8CF30(a1, a2, a3, a4, a5, a6, a7, 2, a8);
}

uint64_t sub_218B8B23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return sub_218B8CBDC(a1, a2, a3, a4, a5, a6, a7, a8, a9, 2u, a10);
}

char *sub_218B8B268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return sub_218B8D71C(a1, a2, a3, a4, a5, a6, a7, a8, 6u, a9);
}

uint64_t sub_218B8B290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return sub_218B8D370(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 6u, a11);
}

uint64_t sub_218B8B2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return sub_218B8CF30(a1, a2, a3, a4, a5, a6, a7, 6, a8);
}

uint64_t sub_218B8B2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return sub_218B8CBDC(a1, a2, a3, a4, a5, a6, a7, a8, a9, 6u, a10);
}

char *sub_218B8B310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return sub_218B8D71C(a1, a2, a3, a4, a5, a6, a7, a8, 0xAu, a9);
}

uint64_t sub_218B8B338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return sub_218B8D370(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0xAu, a11);
}

uint64_t sub_218B8B368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return sub_218B8CF30(a1, a2, a3, a4, a5, a6, a7, 10, a8);
}

uint64_t sub_218B8B38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return sub_218B8CBDC(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0xAu, a10);
}

char *sub_218B8B3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return sub_218B8D71C(a1, a2, a3, a4, a5, a6, a7, a8, 1u, a9);
}

uint64_t sub_218B8B3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return sub_218B8D370(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 1u, a11);
}

uint64_t sub_218B8B410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return sub_218B8CF30(a1, a2, a3, a4, a5, a6, a7, 1, a8);
}

uint64_t sub_218B8B434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return sub_218B8CBDC(a1, a2, a3, a4, a5, a6, a7, a8, a9, 1u, a10);
}

char *sub_218B8B460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return sub_218B8D71C(a1, a2, a3, a4, a5, a6, a7, a8, 5u, a9);
}

uint64_t sub_218B8B488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return sub_218B8D370(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 5u, a11);
}

uint64_t sub_218B8B4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return sub_218B8CF30(a1, a2, a3, a4, a5, a6, a7, 5, a8);
}

uint64_t sub_218B8B4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return sub_218B8CBDC(a1, a2, a3, a4, a5, a6, a7, a8, a9, 5u, a10);
}

char *sub_218B8B508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  return sub_218B8D71C(a1, a2, a3, a4, a5, a6, a7, a8, 9u, a9);
}

uint64_t sub_218B8B530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  return sub_218B8D370(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 9u, a11);
}

uint64_t sub_218B8B560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return sub_218B8CF30(a1, a2, a3, a4, a5, a6, a7, 9, a8);
}

uint64_t sub_218B8B584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return sub_218B8CBDC(a1, a2, a3, a4, a5, a6, a7, a8, a9, 9u, a10);
}

char *sub_218B8B5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  char *result;
  char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  _BYTE *v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  __int16 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int v35;
  int v36;
  __int16 v37;
  char v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  __int16 v44;
  __int16 v45;
  _BYTE v46[33024];
  uint64_t v47;

  result = (char *)MEMORY[0x24BDAC7A8]();
  v47 = *MEMORY[0x24BDAC8D0];
  v16 = v15 >> 1;
  v18 = v17 >> 1;
  if (v13)
  {
    v19 = __clz(a9);
    if (v14)
    {
      v20 = v12 + 1;
      v21 = 2 * v18;
      v22 = v46;
      do
      {
        if (v11 >= 1)
        {
          v23 = 0;
          v24 = *(unsigned __int16 *)v10;
          do
          {
            v25 = *(unsigned __int16 *)&v10[v23 + 2];
            *(_WORD *)&v22[v23] = (int)(((1 << (22 - v19)) >> 1) + 16 * v24 + (v25 - v24) * v13) >> (22 - v19);
            v23 += 2;
            v24 = v25;
          }
          while (2 * v11 != v23);
        }
        v22 += 256;
        v10 += v21;
        --v20;
      }
      while (v20);
      v26 = v19 - 14;
      v27 = v46;
      do
      {
        if (v11 >= 1)
        {
          v28 = 0;
          do
          {
            v29 = (int)(((1 << v26) >> 1)
                      + 16 * *(__int16 *)&v27[v28]
                      + (*(__int16 *)&v27[v28 + 256] - *(__int16 *)&v27[v28]) * v14) >> v26;
            if (v29 >= a9)
              v30 = a9;
            else
              v30 = (int)(((1 << v26) >> 1)
                        + 16 * *(__int16 *)&v27[v28]
                        + (*(__int16 *)&v27[v28 + 256] - *(__int16 *)&v27[v28]) * v14) >> v26;
            if (v29 >= 0)
              v31 = v30;
            else
              v31 = 0;
            *(_WORD *)&result[v28] = v31;
            v28 += 2;
          }
          while (2 * v11 != v28);
        }
        v27 += 256;
        result += 2 * v16;
        --v12;
      }
      while (v12);
    }
    else
    {
      v38 = v19 - 18;
      v39 = (1 << (v19 - 18)) >> 1;
      v40 = 22 - v19;
      v41 = 2 * v16;
      do
      {
        if (v11 >= 1)
        {
          v42 = 0;
          do
          {
            v43 = (int)(((int)(((1 << v40) >> 1)
                             + 16 * *(unsigned __int16 *)&v10[v42]
                             + (*(unsigned __int16 *)&v10[v42 + 2] - *(unsigned __int16 *)&v10[v42]) * v13) >> v40)
                      + v39) >> v38;
            if (v43 >= a9)
              v44 = a9;
            else
              v44 = (int)(((int)(((1 << v40) >> 1)
                               + 16 * *(unsigned __int16 *)&v10[v42]
                               + (*(unsigned __int16 *)&v10[v42 + 2] - *(unsigned __int16 *)&v10[v42]) * v13) >> v40)
                        + v39) >> v38;
            if (v43 >= 0)
              v45 = v44;
            else
              v45 = 0;
            *(_WORD *)&result[v42] = v45;
            v42 += 2;
          }
          while (2 * v11 != v42);
        }
        result += v41;
        v10 += 2 * v18;
        --v12;
      }
      while (v12);
    }
  }
  else if (v14)
  {
    v32 = 2 * v18;
    v33 = &v10[2 * v18];
    do
    {
      if (v11 >= 1)
      {
        v34 = 0;
        do
        {
          v35 = (*(unsigned __int16 *)&v33[v34] - *(unsigned __int16 *)&v10[v34]) * v14
              + 16 * *(unsigned __int16 *)&v10[v34];
          v36 = (v35 + 8) >> 4;
          if (v36 >= a9)
            LOWORD(v36) = a9;
          if (v35 >= -8)
            v37 = v36;
          else
            v37 = 0;
          *(_WORD *)&result[v34] = v37;
          v34 += 2;
        }
        while (2 * v11 != v34);
      }
      result += 2 * v16;
      v33 += v32;
      v10 += v32;
      --v12;
    }
    while (v12);
  }
  else
  {
    return (char *)sub_218B8CB78(result, v16, v10, v18, v11, v12);
  }
  return result;
}

uint64_t sub_218B8B850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, signed int a11)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  int v32;
  __int16 v33;
  __int16 v34;
  _BYTE v35[65792];
  uint64_t v36;

  result = MEMORY[0x24BDAC7A8]();
  v18 = __clz(a11);
  v20 = v19 >> 1;
  v36 = *MEMORY[0x24BDAC8D0];
  v21 = ((v17 + (v15 - 1) * a10) >> 10) + 2;
  v22 = v35;
  do
  {
    if (v14 >= 1)
    {
      v23 = 0;
      v24 = 0;
      v25 = v16;
      do
      {
        *(_WORD *)&v22[v23] = (int)(((1 << (22 - v18)) >> 1)
                                  + 16 * *(unsigned __int16 *)(v13 + 2 * v24)
                                  + (*(unsigned __int16 *)(v13 + 2 * v24 + 2) - *(unsigned __int16 *)(v13 + 2 * v24))
                                  * (v25 >> 6)) >> (22 - v18);
        v26 = v25 + a9;
        v24 += v26 >> 10;
        v25 = v26 & 0x3FF;
        v23 += 2;
      }
      while (2 * v14 != v23);
    }
    v22 += 256;
    v13 += 2 * v20;
    --v21;
  }
  while (v21);
  v27 = v18 - 14;
  v28 = (1 << (v18 - 14)) >> 1;
  v29 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v30 = v35;
  do
  {
    if (v14 >= 1)
    {
      v31 = 0;
      do
      {
        v32 = (int)(v28 + 16 * *(__int16 *)&v30[v31] + (*(__int16 *)&v30[v31 + 256] - *(__int16 *)&v30[v31])
                                                     * (v17 >> 6)) >> v27;
        if (v32 >= a11)
          v33 = a11;
        else
          v33 = (int)(v28
                    + 16 * *(__int16 *)&v30[v31]
                    + (*(__int16 *)&v30[v31 + 256] - *(__int16 *)&v30[v31]) * (v17 >> 6)) >> v27;
        if (v32 >= 0)
          v34 = v33;
        else
          v34 = 0;
        *(_WORD *)(result + v31) = v34;
        v31 += 2;
      }
      while (2 * v14 != v31);
    }
    v30 += 2 * (int)(((v17 + a10) >> 3) & 0xFFFFFF80);
    v17 = (v17 + a10) & 0x3FF;
    result += v29;
    --v15;
  }
  while (v15);
  return result;
}

uint64_t sub_218B8B9F8()
{
  uint64_t result;
  unsigned __int16 *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t j;
  unsigned int v23;
  uint64_t i;
  _BYTE v25[33024];
  uint64_t v26;

  result = MEMORY[0x24BDAC7A8]();
  v26 = *MEMORY[0x24BDAC8D0];
  v7 = __clz(v6);
  v9 = v8 >> 1;
  if (v4)
  {
    v10 = 22 - v7;
    v11 = 1 << v10;
    if (v5)
    {
      v12 = v3 + 1;
      v13 = v25;
      do
      {
        if (v2 >= 1)
        {
          v14 = 0;
          v15 = *v1;
          do
          {
            v16 = v1[v14 + 1];
            *(_WORD *)&v13[v14 * 2] = (int)((v11 >> 1) + 16 * v15 + (v16 - v15) * v4) >> v10;
            ++v14;
            v15 = v16;
          }
          while (v2 != v14);
        }
        v13 += 256;
        v1 += v9;
        --v12;
      }
      while (v12);
      v17 = v25;
      do
      {
        if (v2 >= 1)
        {
          v18 = 0;
          do
          {
            *(_WORD *)(result + v18) = (((*(__int16 *)&v17[v18 + 256] - *(__int16 *)&v17[v18]) * v5
                                                     + 16 * *(__int16 *)&v17[v18]
                                                     + 8) >> 4)
                                     - 0x2000;
            v18 += 2;
          }
          while (2 * v2 != v18);
        }
        v17 += 256;
        result += 2 * v2;
        --v3;
      }
      while (v3);
    }
    else
    {
      v23 = v11 >> 1;
      do
      {
        if (v2 >= 1)
        {
          for (i = 0; i != v2; ++i)
            *(_WORD *)(result + i * 2) = ((int)(v23 + 16 * v1[i] + (v1[i + 1] - v1[i]) * v4) >> v10) - 0x2000;
        }
        result += 2 * v2;
        v1 += v9;
        --v3;
      }
      while (v3);
    }
  }
  else if (v5)
  {
    v19 = 22 - v7;
    v20 = 2 * v9;
    v21 = &v1[v9];
    do
    {
      if (v2 >= 1)
      {
        for (j = 0; j != v2; ++j)
          *(_WORD *)(result + j * 2) = ((int)(((1 << v19) >> 1) + 16 * v1[j] + (v21[j] - v1[j]) * v5) >> v19)
                                     - 0x2000;
      }
      result += 2 * v2;
      v21 = (unsigned __int16 *)((char *)v21 + v20);
      v1 = (unsigned __int16 *)((char *)v1 + v20);
      --v3;
    }
    while (v3);
  }
  else
  {
    return sub_218B8CB28(result, (uint64_t)v1, v9, v2, v3, v6);
  }
  return result;
}

uint64_t sub_218B8BC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  uint64_t result;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE v28[65792];
  uint64_t v29;

  result = MEMORY[0x24BDAC7A8]();
  v18 = v17 >> 1;
  v19 = 22 - __clz(a10);
  v29 = *MEMORY[0x24BDAC8D0];
  v20 = ((int)(v15 + (v13 - 1) * a9) >> 10) + 2;
  v21 = v28;
  do
  {
    if (v12 >= 1)
    {
      v22 = 0;
      v23 = 0;
      v24 = v14;
      do
      {
        *(_WORD *)&v21[v22] = (int)(((1 << v19) >> 1)
                                  + 16 * *(unsigned __int16 *)(v11 + 2 * v23)
                                  + (*(unsigned __int16 *)(v11 + 2 * v23 + 2) - *(unsigned __int16 *)(v11 + 2 * v23))
                                  * (v24 >> 6)) >> v19;
        v25 = v24 + v16;
        v23 += v25 >> 10;
        v24 = v25 & 0x3FF;
        v22 += 2;
      }
      while (2 * v12 != v22);
    }
    v21 += 256;
    v11 += 2 * v18;
    --v20;
  }
  while (v20);
  v26 = v28;
  do
  {
    if (v12 >= 1)
    {
      v27 = 0;
      do
      {
        *(_WORD *)(result + v27) = (((*(__int16 *)&v26[v27 + 256] - *(__int16 *)&v26[v27]) * (v15 >> 6)
                                   + 16 * *(__int16 *)&v26[v27]
                                   + 8) >> 4)
                                 - 0x2000;
        v27 += 2;
      }
      while (2 * v12 != v27);
    }
    v26 += 2 * (int)(((int)(v15 + a9) >> 3) & 0xFFFFFF80);
    v15 = (v15 + a9) & 0x3FF;
    result += 2 * v12;
    --v13;
  }
  while (v13);
  return result;
}

uint64_t sub_218B8BDD0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, signed int a7)
{
  char v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 v15;

  v7 = __clz(a7);
  v8 = 1 << (v7 - 18);
  v9 = v7 - 17;
  v10 = v8 + 0x4000;
  v11 = 2 * a5;
  do
  {
    if (a5 >= 1)
    {
      v12 = 0;
      do
      {
        v13 = (v10 + *(__int16 *)(a3 + v12) + *(__int16 *)(a4 + v12)) >> v9;
        if (v13 >= a7)
          LOWORD(v14) = a7;
        else
          v14 = (v10 + *(__int16 *)(a3 + v12) + *(__int16 *)(a4 + v12)) >> v9;
        if (v13 >= 0)
          v15 = v14;
        else
          v15 = 0;
        *(_WORD *)(result + v12) = v15;
        v12 += 2;
      }
      while (2 * a5 != v12);
    }
    result += a2 & 0xFFFFFFFFFFFFFFFELL;
    a4 += v11;
    a3 += v11;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t sub_218B8BE4C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, signed int a8)
{
  char v8;
  char v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;

  v8 = __clz(a8);
  v9 = v8 - 18;
  v10 = v8 - 14;
  v11 = (8 << v9) + 0x20000;
  v12 = 2 * a5;
  do
  {
    if (a5 >= 1)
    {
      v13 = 0;
      do
      {
        v14 = (v11 + *(__int16 *)(a3 + v13) * a7 + (16 - a7) * *(__int16 *)(a4 + v13)) >> v10;
        if (v14 >= a8)
          LOWORD(v15) = a8;
        else
          v15 = (v11 + *(__int16 *)(a3 + v13) * a7 + (16 - a7) * *(__int16 *)(a4 + v13)) >> v10;
        if (v14 >= 0)
          v16 = v15;
        else
          v16 = 0;
        *(_WORD *)(result + v13) = v16;
        v13 += 2;
      }
      while (2 * a5 != v13);
    }
    result += a2 & 0xFFFFFFFFFFFFFFFELL;
    a4 += v12;
    a3 += v12;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t sub_218B8BED0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, signed int a8)
{
  char v8;
  int v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  int v15;
  __int16 v16;

  v8 = __clz(a8);
  v9 = 32 << (v8 - 18);
  v10 = v8 - 12;
  v11 = v9 + 0x80000;
  v12 = 2 * a5;
  do
  {
    if (a5 >= 1)
    {
      for (i = 0; i != a5; *(_WORD *)(result + 2 * i++) = v16)
      {
        v14 = (v11
             + *(unsigned __int8 *)(a7 + i) * *(__int16 *)(a3 + 2 * i)
             + (64 - *(unsigned __int8 *)(a7 + i)) * *(__int16 *)(a4 + 2 * i)) >> v10;
        if (v14 >= a8)
          LOWORD(v15) = a8;
        else
          v15 = (v11
               + *(unsigned __int8 *)(a7 + i) * *(__int16 *)(a3 + 2 * i)
               + (64 - *(unsigned __int8 *)(a7 + i)) * *(__int16 *)(a4 + 2 * i)) >> v10;
        if (v14 >= 0)
          v16 = v15;
        else
          v16 = 0;
      }
    }
    a7 += a5;
    result += a2 & 0xFFFFFFFFFFFFFFFELL;
    a4 += v12;
    a3 += v12;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t sub_218B8BF68(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  uint64_t i;

  do
  {
    if (a4 >= 1)
    {
      for (i = 0; i != a4; ++i)
        *(_WORD *)(result + 2 * i) = ((64 - *(unsigned __int8 *)(a6 + i)) * *(unsigned __int16 *)(result + 2 * i)
                                    + *(unsigned __int16 *)(a3 + 2 * i) * *(unsigned __int8 *)(a6 + i)
                                    + 32) >> 6;
    }
    a6 += a4;
    a3 += 2 * a4;
    result += a2 & 0xFFFFFFFFFFFFFFFELL;
    --a5;
  }
  while (a5);
  return result;
}

uint64_t sub_218B8BFD0(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t i;

  LODWORD(v5) = (3 * a4) >> 2;
  if ((int)v5 <= 1)
    v5 = 1;
  else
    v5 = v5;
  do
  {
    if (a4 >= 2)
    {
      for (i = 0; i != v5; ++i)
        *(_WORD *)(result + 2 * i) = ((64 - byte_218BBF0A0[a4 + i]) * *(unsigned __int16 *)(result + 2 * i)
                                    + *(unsigned __int16 *)(a3 + 2 * i) * byte_218BBF0A0[a4 + i]
                                    + 32) >> 6;
    }
    a3 += 2 * a4;
    result += a2 & 0xFFFFFFFFFFFFFFFELL;
    --a5;
  }
  while (a5);
  return result;
}

uint64_t sub_218B8C048(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  v5 = &byte_218BBF0A0[a5];
  v6 = (3 * a5) >> 2;
  do
  {
    v8 = *v5++;
    v7 = v8;
    if (a4 >= 1)
    {
      v9 = 0;
      do
      {
        *(_WORD *)(result + v9) = (*(unsigned __int16 *)(a3 + v9) * v7
                                 + (64 - v7) * *(unsigned __int16 *)(result + v9)
                                 + 32) >> 6;
        v9 += 2;
      }
      while (2 * a4 != v9);
    }
    a3 += 2 * a4;
    result += a2 & 0xFFFFFFFFFFFFFFFELL;
    --v6;
  }
  while (v6);
  return result;
}

uint64_t sub_218B8C0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, int a8, signed int a9)
{
  return sub_218B8C9AC(a1, a2, a3, a4, a5, a6, a7, a8, 0, 0, a9);
}

uint64_t sub_218B8C0E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, int a8, signed int a9)
{
  return sub_218B8C9AC(a1, a2, a3, a4, a5, a6, a7, a8, 1, 0, a9);
}

uint64_t sub_218B8C110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, int a8, signed int a9)
{
  return sub_218B8C9AC(a1, a2, a3, a4, a5, a6, a7, a8, 1, 1, a9);
}

uint64_t sub_218B8C13C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, __int16 *a5, int a6, int a7, signed int a8, double a9, double a10, int32x4_t a11)
{
  int v11;
  char v12;
  _WORD *v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  int8x8_t v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  int v23;
  int v24;
  int32x4_t v25;
  int v26;
  int v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  int v40;
  char *v41;
  int v42;
  int v43;
  __int16 v44;
  _BYTE v45[240];
  uint64_t v46;

  v11 = 0;
  v46 = *MEMORY[0x24BDAC8D0];
  v12 = __clz(a8);
  v13 = (_WORD *)(a3 - 6 * (a4 >> 1));
  v14 = *a5;
  v15 = a5[1];
  v16 = a4 & 0xFFFFFFFFFFFFFFFELL;
  v17 = a6 + 512;
  v18 = v45;
  do
  {
    v19 = 0;
    v20 = *(int8x8_t *)(v13 - 3);
    v21 = v13[1];
    v22 = v13[2];
    v23 = v17;
    LOWORD(v24) = v13[3];
    do
    {
      v25 = (int32x4_t)vmovl_u16((uint16x4_t)v20);
      v26 = v21;
      v20 = vext_s8(v20, v20, 2uLL);
      v20.i16[3] = v21;
      v27 = v22;
      v21 = v22;
      v22 = v24;
      v28 = (char *)&unk_218BBF0E0 + 8 * (v23 >> 10);
      a11.i32[0] = *((_DWORD *)v28 + 128);
      a11 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a11.i8));
      v29 = v28[516];
      v30 = v28[517];
      v31 = v22 * v28[518];
      v32 = v28[519];
      v24 = (unsigned __int16)v13[v19 + 4];
      *(_WORD *)&v18[v19 * 2] = (int)(vaddvq_s32(vmulq_s32(v25, a11))
                                    + v26 * v29
                                    + v31
                                    + v27 * v30
                                    + ((1 << (25 - v12)) >> 1)
                                    + v24 * v32) >> (25 - v12);
      ++v19;
      v23 += v14;
    }
    while (v19 != 8);
    v13 = (_WORD *)((char *)v13 + v16);
    v18 += 16;
    ++v11;
    v17 += v15;
  }
  while (v11 != 15);
  v33 = 0;
  v34 = v12 - 11;
  v36 = a2 & 0xFFFFFFFFFFFFFFFELL;
  v37 = 64;
  do
  {
    v38 = 0;
    v40 = a7;
    do
    {
      v41 = (char *)&unk_218BBF0E0 + 8 * ((v40 + 512) >> 10);
      v35 = (1 << v34) >> 1;
      v39 = &v45[v37];
      v42 = (int)(v35
                + *(__int16 *)&v39[v38 - 64] * v41[512]
                + *(__int16 *)&v39[v38 - 48] * v41[513]
                + *(__int16 *)&v39[v38 - 32] * v41[514]
                + *(__int16 *)&v39[v38 - 16] * v41[515]
                + *(__int16 *)&v39[v38] * v41[516]
                + *(__int16 *)&v39[v38 + 16] * v41[517]
                + *(__int16 *)&v39[v38 + 32] * v41[518]
                + *(__int16 *)&v39[v38 + 48] * v41[519]) >> v34;
      if (v42 >= a8)
        LOWORD(v43) = a8;
      else
        v43 = (int)(v35
                  + *(__int16 *)&v39[v38 - 64] * v41[512]
                  + *(__int16 *)&v39[v38 - 48] * v41[513]
                  + *(__int16 *)&v39[v38 - 32] * v41[514]
                  + *(__int16 *)&v39[v38 - 16] * v41[515]
                  + *(__int16 *)&v39[v38] * v41[516]
                  + *(__int16 *)&v39[v38 + 16] * v41[517]
                  + *(__int16 *)&v39[v38 + 32] * v41[518]
                  + *(__int16 *)&v39[v38 + 48] * v41[519]) >> v34;
      if (v42 >= 0)
        v44 = v43;
      else
        v44 = 0;
      *(_WORD *)(result + v38) = v44;
      v40 += a5[2];
      v38 += 2;
    }
    while (v38 != 16);
    ++v33;
    a7 += a5[3];
    result += v36;
    v37 += 16;
  }
  while (v33 != 8);
  return result;
}

uint64_t sub_218B8C388(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, __int16 *a5, int a6, int a7, unsigned int a8, double a9, double a10, int32x4_t a11)
{
  int v11;
  _WORD *v12;
  char v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  int8x8_t v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  int v23;
  int v24;
  int32x4_t v25;
  int v26;
  int v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  int v37;
  char *v38;
  _BYTE v39[240];
  uint64_t v40;

  v11 = 0;
  v40 = *MEMORY[0x24BDAC8D0];
  v12 = (_WORD *)(a3 - 6 * (a4 >> 1));
  v13 = 25 - __clz(a8);
  v14 = *a5;
  v15 = a5[1];
  v16 = a4 & 0xFFFFFFFFFFFFFFFELL;
  v17 = a6 + 512;
  v18 = v39;
  do
  {
    v19 = 0;
    v20 = *(int8x8_t *)(v12 - 3);
    v21 = v12[1];
    v22 = v12[2];
    v23 = v17;
    LOWORD(v24) = v12[3];
    do
    {
      v25 = (int32x4_t)vmovl_u16((uint16x4_t)v20);
      v26 = v21;
      v20 = vext_s8(v20, v20, 2uLL);
      v20.i16[3] = v21;
      v27 = v22;
      v21 = v22;
      v22 = v24;
      v28 = (char *)&unk_218BBF0E0 + 8 * (v23 >> 10);
      a11.i32[0] = *((_DWORD *)v28 + 128);
      a11 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a11.i8));
      v29 = v28[516];
      v30 = v28[517];
      v31 = v22 * v28[518];
      v32 = v28[519];
      v24 = (unsigned __int16)v12[v19 + 4];
      *(_WORD *)&v18[v19 * 2] = (int)(vaddvq_s32(vmulq_s32(v25, a11))
                                    + v26 * v29
                                    + v31
                                    + v27 * v30
                                    + ((1 << v13) >> 1)
                                    + v24 * v32) >> v13;
      ++v19;
      v23 += v14;
    }
    while (v19 != 8);
    v12 = (_WORD *)((char *)v12 + v16);
    v18 += 16;
    ++v11;
    v17 += v15;
  }
  while (v11 != 15);
  v33 = 0;
  v34 = 64;
  do
  {
    v35 = 0;
    v37 = a7;
    do
    {
      v38 = (char *)&unk_218BBF0E0 + 8 * ((v37 + 512) >> 10);
      v36 = &v39[v34];
      *(_WORD *)(result + v35) = ((*(__int16 *)&v36[v35 - 48] * v38[513]
                                               + *(__int16 *)&v36[v35 - 64] * v38[512]
                                               + *(__int16 *)&v36[v35 - 32] * v38[514]
                                               + *(__int16 *)&v36[v35 - 16] * v38[515]
                                               + *(__int16 *)&v36[v35] * v38[516]
                                               + *(__int16 *)&v36[v35 + 16] * v38[517]
                                               + *(__int16 *)&v36[v35 + 32] * v38[518]
                                               + *(__int16 *)&v36[v35 + 48] * v38[519]
                                               + 64) >> 7)
                               - 0x2000;
      v37 += a5[2];
      v35 += 2;
    }
    while (v35 != 16);
    ++v33;
    a7 += a5[3];
    result += 2 * a2;
    v34 += 16;
  }
  while (v33 != 8);
  return result;
}

void *sub_218B8C5BC(void *result, int a2, int a3, int a4, int a5, int a6, char *__dst, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  char *__src;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  size_t __n;
  uint64_t v44;
  int v45;
  int v46;

  v10 = __dst;
  v11 = (_DWORD)result - 1;
  if (-a5 < (int)result - 1)
    v12 = -a5;
  else
    v12 = (_DWORD)result - 1;
  if (a5 <= 0)
    v13 = v12;
  else
    v13 = 0;
  v40 = result;
  v14 = (_DWORD)result - a3 + a5;
  if (v14 < v11)
    v11 = (_DWORD)result - a3 + a5;
  if (v14 >= 0)
    v15 = v11;
  else
    v15 = 0;
  v16 = a2 - 1;
  if (-a6 < a2 - 1)
    v17 = -a6;
  else
    v17 = a2 - 1;
  if (a6 <= 0)
    v18 = v17;
  else
    v18 = 0;
  v19 = a2 - a4 + a6;
  if (v19 < v16)
    v16 = a2 - a4 + a6;
  if (v19 >= 0)
    v20 = v16;
  else
    v20 = 0;
  v38 = a8 >> 1;
  __src = &__dst[2 * (a8 >> 1) * v18];
  v21 = 2 * (a8 >> 1);
  v45 = a2 - (v20 + v18);
  if (v45 >= 1)
  {
    v22 = 0;
    v23 = v13;
    v24 = a4 - 1;
    if (a6 < a4 - 1)
      v24 = a6;
    if (a6 < 0)
      v24 = 0;
    v25 = (a10 >> 1) * v24;
    v26 = a3 - 1;
    if (a5 < a3 - 1)
      v26 = a5;
    if (a5 < 0)
      v26 = 0;
    v27 = &__dst[2 * (a8 >> 1) * v18];
    v28 = (char *)(a9 + 2 * (v25 + v26));
    v29 = (_DWORD)result - v23 - v15;
    __n = 2 * v29;
    v44 = 2 * (a8 >> 1);
    v30 = 2 * v23;
    v46 = v23;
    v41 = 2 * v23 + 2 * v29;
    v42 = (int)result - (int)v15 - 1;
    v31 = v23;
    do
    {
      result = memcpy(&v27[2 * v31], v28, __n);
      if ((_DWORD)v31 && v46 >= 1)
      {
        v32 = 0;
        v33 = *(_WORD *)&v27[2 * v31];
        do
        {
          *(_WORD *)&v27[v32] = v33;
          v32 += 2;
        }
        while (v30 != v32);
      }
      if ((int)v15 > 0)
      {
        v34 = v41;
        v35 = *(_WORD *)&v27[2 * v42];
        v36 = v15;
        do
        {
          *(_WORD *)&v27[v34] = v35;
          v34 += 2;
          --v36;
        }
        while (v36);
      }
      v21 = v44;
      v28 += 2 * (a10 >> 1);
      v27 += v44;
      ++v22;
    }
    while (v22 != v45);
  }
  v37 = 2 * (_QWORD)v40;
  if (v18 >= 1)
  {
    do
    {
      result = memcpy(v10, __src, v37);
      v10 += v21;
      --v18;
    }
    while (v18);
  }
  if (v20 >= 1)
  {
    do
    {
      result = memcpy(&v10[2 * v38 * v45], &v10[v38 * (2 * v45 - 2)], v37);
      v10 += v21;
      --v20;
    }
    while (v20);
  }
  return result;
}

uint64_t sub_218B8C810(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  signed int v10;
  int32x2_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  signed int v15;
  int v16;
  char *v17;
  int32x2_t v18;
  int8x8_t v19;
  int v20;
  int v21;
  int v22;
  signed int v23;
  int v24;
  int8x8_t v25;
  int8x8_t v26;
  int v27;
  int v28;
  __int16 v29;
  int v30;

  v10 = a7 - 1;
  v11 = vdup_n_s32(a7 - 1);
  v12 = a4 >> 1;
  v13 = a2 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    if (a5 >= 1)
    {
      v14 = 0;
      v15 = -1;
      v16 = a9;
      do
      {
        v17 = (char *)&unk_218BBF6E8 + 8 * (v16 >> 8);
        v18 = vdup_n_s32(v15);
        v19 = vbic_s8((int8x8_t)vmin_s32(vadd_s32(v18, (int32x2_t)0xFFFFFFFEFFFFFFFDLL), v11), (int8x8_t)vcgt_s32((int32x2_t)0x200000003, v18));
        v20 = *(unsigned __int16 *)(a3 + 2 * v19.i32[1]);
        v21 = *(unsigned __int16 *)(a3 + 2 * v19.i32[0]) * *v17;
        if (v15 - 1 >= v10)
          v22 = v10;
        else
          v22 = v15 - 1;
        if (v15 >= v10)
          v23 = v10;
        else
          v23 = v15;
        if (v15 <= 0)
          v22 = 0;
        v24 = *(unsigned __int16 *)(a3 + 2 * v22);
        if (v15 < 0)
          v23 = 0;
        v25 = vbic_s8((int8x8_t)vmin_s32(vadd_s32(v18, (int32x2_t)0x200000001), v11), (int8x8_t)vcgt_s32((int32x2_t)0xFFFFFFFEFFFFFFFFLL, v18));
        v26 = vbic_s8((int8x8_t)vmin_s32(vadd_s32(v18, (int32x2_t)0x400000003), v11), (int8x8_t)vcgt_s32((int32x2_t)0xFFFFFFFCFFFFFFFDLL, v18));
        v27 = v21
            + v20 * v17[1]
            + v24 * v17[2]
            + *(unsigned __int16 *)(a3 + 2 * v23) * v17[3]
            + *(unsigned __int16 *)(a3 + 2 * v25.i32[0]) * v17[4]
            + *(unsigned __int16 *)(a3 + 2 * v25.i32[1]) * v17[5]
            + *(unsigned __int16 *)(a3 + 2 * v26.i32[0]) * v17[6]
            + *(unsigned __int16 *)(a3 + 2 * v26.i32[1]) * v17[7];
        v28 = (64 - v27) >> 7;
        if (v28 >= a10)
          LOWORD(v28) = a10;
        if (v27 <= 64)
          v29 = v28;
        else
          v29 = 0;
        *(_WORD *)(result + v14) = v29;
        v30 = v16 + a8;
        v15 += v30 >> 14;
        v16 = v30 & 0x3FFF;
        v14 += 2;
      }
      while (2 * a5 != v14);
    }
    a3 += 2 * v12;
    result += v13;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t sub_218B8C9AC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, int a8, int a9, int a10, signed int a11)
{
  char v11;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  char v22;
  int v23;
  __int16 v24;
  __int16 v25;
  int v26;
  int v27;
  int v28;
  signed int v29;
  int v30;
  int v31;
  int v32;
  __int16 v33;
  __int16 v34;
  int v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;

  v11 = __clz(a11);
  v12 = 32 << (v11 - 18);
  v13 = v11 - 12;
  v14 = v12 + 0x80000;
  v15 = a2 >> 1;
  do
  {
    if (a5 >= 1)
    {
      LODWORD(v16) = 0;
      do
      {
        v17 = *(__int16 *)(a3 + 2 * (int)v16);
        v18 = *(__int16 *)(a4 + 2 * (int)v16);
        v19 = (int)v16;
        v20 = v17 - v18;
        if (v17 - v18 < 0)
          v20 = v18 - v17;
        v21 = (v20 + 32) >> 10;
        if (v21 >= 26)
          v21 = 26;
        v22 = v21 + 38;
        v23 = (v14 + (26 - v21) * v18 + (v21 + 38) * v17) >> v13;
        if (v23 >= a11)
          v24 = a11;
        else
          v24 = v23;
        if (v23 >= 0)
          v25 = v24;
        else
          v25 = 0;
        *(_WORD *)(result + 2 * (int)v16) = v25;
        if (a9)
        {
          v16 = (int)v16 + 1;
          v26 = *(__int16 *)(a3 + 2 * (v19 + 1));
          v27 = *(__int16 *)(a4 + 2 * (v19 + 1));
          v28 = v26 - v27;
          if (v26 - v27 < 0)
            v28 = v27 - v26;
          v29 = (v28 + 32) >> 10;
          if (v29 >= 26)
            v30 = 26;
          else
            v30 = v29;
          v31 = v30 + 38;
          v32 = (v14 + (26 - v30) * v27 + (v30 + 38) * v26) >> v13;
          if (v32 >= a11)
            v33 = a11;
          else
            v33 = v32;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          *(_WORD *)(result + 2 * v16) = v34;
          if ((a6 & a10) != 0)
          {
            v35 = (int)v16 >> 1;
            v36 = (v21 - a8 + *(unsigned __int8 *)(a7 + ((int)v16 >> 1)) + v31 + 40) >> 2;
          }
          else
          {
            if (a10)
              LOBYTE(v36) = v31 + v22;
            else
              v36 = (v21 - a8 + v31 + 39) >> 1;
            v35 = (int)v16 >> 1;
          }
          *(_BYTE *)(a7 + v35) = v36;
        }
        else
        {
          *(_BYTE *)(a7 + (int)v16) = v22;
        }
        LODWORD(v16) = v16 + 1;
      }
      while ((int)v16 < a5);
    }
    a3 += 2 * a5;
    v37 = (a6 & 1) != 0 || a10 == 0;
    a4 += 2 * a5;
    result += 2 * v15;
    if (v37)
      v38 = a5 >> a9;
    else
      v38 = 0;
    a7 += v38;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t sub_218B8CB28(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6)
{
  unsigned int v6;
  uint64_t v7;

  v6 = __clz(a6) - 18;
  do
  {
    if (a4 >= 1)
    {
      v7 = 0;
      do
      {
        *(_WORD *)(result + v7) = (*(_WORD *)(a2 + v7) << v6) - 0x2000;
        v7 += 2;
      }
      while (2 * a4 != v7);
    }
    result += 2 * a4;
    a2 += 2 * a3;
    --a5;
  }
  while (a5);
  return result;
}

void *sub_218B8CB78(char *__dst, uint64_t a2, char *__src, uint64_t a4, int a5, int a6)
{
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;

  v9 = 2 * a5;
  v10 = 2 * a4;
  v11 = 2 * a2;
  do
  {
    result = memcpy(__dst, __src, v9);
    __src += v10;
    __dst += v11;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t sub_218B8CBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, unsigned int a11)
{
  uint64_t result;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unsigned __int16 *v30;
  int v31;
  int v32;
  _QWORD *v33;
  int v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  int v43;
  char v44;
  _QWORD v45[8322];

  result = MEMORY[0x24BDAC7A8]();
  v45[8320] = *MEMORY[0x24BDAC8D0];
  v17 = __clz(a11);
  v18 = ((v15 + (v13 - 1) * a9) >> 10) + 8;
  v42 = v19 >> 1;
  v21 = v20 - 6 * (v19 >> 1);
  v22 = &v44;
  do
  {
    v43 = v18;
    if (v12 >= 1)
    {
      v23 = 0;
      v24 = 0;
      v25 = v14;
      do
      {
        if (v25 >= 0x40)
        {
          v27 = 8 * (v25 >> 6) - 8;
          v28 = (char *)&unk_218BBEDD0 + 120 * (a10 & 1) + v27 + 360;
          v29 = (char *)&unk_218BBEDD0 + 120 * (a10 & 3) + v27;
          if (v12 <= 4)
            v29 = v28;
          v30 = (unsigned __int16 *)(v21 + 2 * v24);
          v26 = (int)(((1 << (24 - v17)) >> 1)
                    + *(v30 - 3) * *v29
                    + *(v30 - 2) * v29[1]
                    + *(v30 - 1) * v29[2]
                    + *v30 * v29[3]
                    + v30[1] * v29[4]
                    + v30[2] * v29[5]
                    + v30[3] * v29[6]
                    + v30[4] * v29[7]) >> (24 - v17);
        }
        else
        {
          v26 = *(unsigned __int16 *)(v21 + 2 * v24) << (v17 - 18);
        }
        *(_WORD *)&v22[v23] = v26;
        v24 += (v25 + v16) >> 10;
        v25 = (v25 + v16) & 0x3FF;
        v23 += 2;
      }
      while (2 * v12 != v23);
    }
    v22 += 256;
    v21 += 2 * v42;
    --v18;
  }
  while (v43 != 1);
  v31 = v15;
  if (v13 >= 1)
  {
    v32 = 0;
    v33 = v45;
    do
    {
      if (v31 >= 0x40)
      {
        v34 = v31;
        v36 = ((uint64_t)v31 >> 6) - 1;
        v37 = (char *)&unk_218BBEDD0 + 120 * ((a10 >> 2) & 1) + 8 * v36 + 360;
        v38 = (char *)&unk_218BBEDD0 + 120 * (a10 >> 2) + 8 * v36;
        if (v13 >= 5)
          v35 = v38;
        else
          v35 = v37;
      }
      else
      {
        v34 = v31;
        v35 = 0;
      }
      if (v12 >= 1)
      {
        v39 = 0;
        do
        {
          if (v35)
          {
            v40 = v33 - 96;
            v41 = (*(__int16 *)((char *)v40 + v39 + 256) * v35[1]
                 + *(__int16 *)((char *)v40 + v39) * *v35
                 + *(__int16 *)((char *)v40 + v39 + 512) * v35[2]
                 + *(__int16 *)((char *)v33 + v39) * v35[3]
                 + *(__int16 *)((char *)v40 + v39 + 1024) * v35[4]
                 + *(__int16 *)((char *)v40 + v39 + 1280) * v35[5]
                 + *(__int16 *)((char *)v40 + v39 + 1536) * v35[6]
                 + *(__int16 *)((char *)v40 + v39 + 1792) * v35[7]
                 + 32) >> 6;
          }
          else
          {
            LOWORD(v41) = *(_WORD *)((char *)v33 + v39);
          }
          *(_WORD *)(result + v39) = v41 - 0x2000;
          v39 += 2;
        }
        while (2 * v12 != v39);
      }
      v33 = (_QWORD *)((char *)v33 + 2 * (int)(((v34 + a9) >> 3) & 0xFFFFFF80));
      v31 = (v34 + a9) & 0x3FF;
      ++v32;
      result += 2 * v12;
    }
    while (v32 != v13);
  }
  return result;
}

uint64_t sub_218B8CF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int32x4_t v17;
  char v18;
  unsigned int v19;
  int8x8_t *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int32x4_t v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  int8x8_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  _BYTE v78[34560];
  uint64_t v79;

  result = MEMORY[0x24BDAC7A8]();
  v79 = *MEMORY[0x24BDAC8D0];
  v18 = __clz(a9);
  if (v14)
  {
    v19 = v16 & 3;
    if (v12 <= 4)
      v19 = (v16 & 1) + 3;
    v20 = (int8x8_t *)((char *)&unk_218BBEDD0 + 120 * v19 + 8 * v14 - 8);
    if (!v15)
    {
      v21 = 24 - v18;
      v22 = (1 << (24 - v18)) >> 1;
      do
      {
        if (v12 >= 1)
        {
          v23 = 0;
          v24 = vmovl_s8(*v20);
          v25 = vmovl_high_s16(v24);
          v26 = vmovl_s16(*(int16x4_t *)v24.i8);
          do
          {
            *(_WORD *)(result + v23) = ((int)(vaddvq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vmovl_high_u16(*(uint16x8_t *)(v10 + v23 - 6)), v25), (int32x4_t)vmovl_u16(*(uint16x4_t *)(v10 + v23 - 6)), v26))+ v22) >> v21)- 0x2000;
            v23 += 2;
          }
          while (2 * v12 != v23);
        }
        result += 2 * v12;
        v10 += v11 & 0xFFFFFFFFFFFFFFFELL;
        --v13;
      }
      while (v13);
      return result;
    }
  }
  else
  {
    if (!v15)
      return sub_218B8CB28(result, v10, v11 >> 1, v12, v13, a9);
    v20 = 0;
  }
  v27 = v16 >> 2;
  if (v13 <= 4)
    v27 = ((v16 >> 2) & 1) + 3;
  v28 = (char *)&unk_218BBEDD0 + 120 * v27 + 8 * v15 - 8;
  v29 = v11 >> 1;
  v30 = 24 - v18;
  v31 = (1 << v30) >> 1;
  if (v20)
  {
    v32 = v13 + 7;
    v33 = v10 - 6 * v29;
    v34 = 2 * v29;
    v35 = 2 * v12;
    v36 = v78;
    do
    {
      if (v12 >= 1)
      {
        v37 = 0;
        v38 = *(int8x8_t *)(v33 - 6);
        v39 = *(unsigned __int16 *)(v33 + 4);
        v40 = *(unsigned __int16 *)(v33 + 6);
        v17.i32[0] = v20->i32[0];
        v17 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v17.i8));
        v41 = v20->i8[4];
        v42 = v20->i8[5];
        v43 = v20->i8[6];
        v44 = v20->i8[7];
        do
        {
          v45 = v40;
          v46 = *(unsigned __int16 *)(v33 + v37 + 2);
          v40 = *(unsigned __int16 *)(v33 + v37 + 8);
          *(_WORD *)&v36[v37] = (int)(vaddvq_s32(vmulq_s32((int32x4_t)vmovl_u16((uint16x4_t)v38), v17))
                                    + v46 * v41
                                    + v45 * v43
                                    + v39 * v42
                                    + v31
                                    + v40 * v44) >> v30;
          v39 = v45;
          v38 = vext_s8(v38, v38, 2uLL);
          v38.i16[3] = v46;
          v37 += 2;
        }
        while (v35 != v37);
      }
      v36 += 256;
      v33 += v34;
      --v32;
    }
    while (v32);
    v47 = v78;
    do
    {
      if (v12 >= 1)
      {
        v48 = 0;
        v49 = *v28;
        v50 = v28[1];
        v51 = v28[2];
        v52 = v28[3];
        v53 = v28[4];
        v54 = v28[5];
        v55 = v28[6];
        v56 = v28[7];
        do
        {
          *(_WORD *)(result + v48) = ((*(__int16 *)&v47[v48] * v49
                                                   + *(__int16 *)&v47[v48 + 256] * v50
                                                   + *(__int16 *)&v47[v48 + 512] * v51
                                                   + *(__int16 *)&v47[v48 + 768] * v52
                                                   + *(__int16 *)&v47[v48 + 1024] * v53
                                                   + *(__int16 *)&v47[v48 + 1280] * v54
                                                   + *(__int16 *)&v47[v48 + 1536] * v55
                                                   + *(__int16 *)&v47[v48 + 1792] * v56
                                                   + 32) >> 6)
                                   - 0x2000;
          v48 += 2;
        }
        while (v35 != v48);
      }
      result += 2 * v12;
      v47 += 256;
      --v13;
    }
    while (v13);
  }
  else
  {
    v57 = 2 * v12;
    v75 = 2 * v12;
    v76 = v12;
    v58 = v10 + 4 * v11;
    v74 = 2 * v29;
    v59 = v10 + 6 * v29;
    v60 = v10 + 2 * v11;
    v61 = v10 + 2 * v29;
    v62 = v10 - 2 * v29;
    v63 = v10 - 6 * v29;
    v64 = v10 - 2 * v11;
    do
    {
      v77 = v13;
      if (v12 >= 1)
      {
        v65 = 0;
        v66 = *v28;
        v67 = v28[1];
        v68 = v28[2];
        v69 = v28[3];
        v70 = v28[4];
        v71 = v28[5];
        v72 = v28[6];
        v73 = v28[7];
        do
        {
          *(_WORD *)(result + v65) = ((int)(v31
                                          + *(unsigned __int16 *)(v63 + v65) * v66
                                          + *(unsigned __int16 *)(v64 + v65) * v67
                                          + *(unsigned __int16 *)(v62 + v65) * v68
                                          + *(unsigned __int16 *)(v10 + v65) * v69
                                          + *(unsigned __int16 *)(v61 + v65) * v70
                                          + *(unsigned __int16 *)(v60 + v65) * v71
                                          + *(unsigned __int16 *)(v59 + v65) * v72
                                          + *(unsigned __int16 *)(v58 + v65) * v73) >> v30)
                                   - 0x2000;
          v65 += 2;
        }
        while (v57 != v65);
      }
      v12 = v76;
      result += v75;
      v58 += v74;
      v59 += v74;
      v60 += v74;
      v61 += v74;
      v10 += v74;
      v62 += v74;
      v64 += v74;
      v63 += v74;
      --v13;
    }
    while (v77 != 1);
  }
  return result;
}

uint64_t sub_218B8D370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, unsigned int a11, signed int a12)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unsigned __int16 *v31;
  int v32;
  int v33;
  _QWORD *v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  __int16 v46;
  int v47;
  char v48;
  char v49;
  _QWORD v50[8322];

  result = MEMORY[0x24BDAC7A8]();
  v50[8320] = *MEMORY[0x24BDAC8D0];
  v19 = __clz(a12);
  v48 = v19 - 18;
  v20 = ((v18 + (v16 - 1) * a10) >> 10) + 8;
  v22 = v21 - 6 * (v14 >> 1);
  v23 = &v49;
  do
  {
    v47 = v20;
    if (v15 >= 1)
    {
      v24 = 0;
      v25 = 0;
      v26 = v17;
      do
      {
        if (v26 >= 0x40)
        {
          v28 = 8 * (v26 >> 6) - 8;
          v29 = (char *)&unk_218BBEDD0 + 120 * (a11 & 1) + v28 + 360;
          v30 = (char *)&unk_218BBEDD0 + 120 * (a11 & 3) + v28;
          if (v15 <= 4)
            v30 = v29;
          v31 = (unsigned __int16 *)(v22 + 2 * v25);
          v27 = (int)(((1 << (24 - v19)) >> 1)
                    + *(v31 - 3) * *v30
                    + *(v31 - 2) * v30[1]
                    + *(v31 - 1) * v30[2]
                    + *v31 * v30[3]
                    + v31[1] * v30[4]
                    + v31[2] * v30[5]
                    + v31[3] * v30[6]
                    + v31[4] * v30[7]) >> (24 - v19);
        }
        else
        {
          v27 = *(unsigned __int16 *)(v22 + 2 * v25) << v48;
        }
        *(_WORD *)&v23[v24] = v27;
        v25 += (v26 + a9) >> 10;
        v26 = (v26 + a9) & 0x3FF;
        v24 += 2;
      }
      while (2 * v15 != v24);
    }
    v23 += 256;
    v22 += 2 * (v14 >> 1);
    --v20;
  }
  while (v47 != 1);
  v32 = v18;
  if (v16 >= 1)
  {
    v33 = 0;
    v34 = v50;
    v35 = v19 - 12;
    v36 = (1 << (v19 - 12)) >> 1;
    v37 = v13 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if (v32 >= 0x40)
      {
        v38 = v32;
        v40 = ((uint64_t)v32 >> 6) - 1;
        v41 = (char *)&unk_218BBEDD0 + 120 * ((a11 >> 2) & 1) + 8 * v40 + 360;
        v42 = (char *)&unk_218BBEDD0 + 120 * (a11 >> 2) + 8 * v40;
        if (v16 >= 5)
          v39 = v42;
        else
          v39 = v41;
      }
      else
      {
        v38 = v32;
        v39 = 0;
      }
      if (v15 >= 1)
      {
        v43 = 0;
        do
        {
          if (v39)
          {
            v44 = v34 - 96;
            v45 = (int)(v36
                      + *(__int16 *)((char *)v44 + v43) * *v39
                      + *(__int16 *)((char *)v44 + v43 + 256) * v39[1]
                      + *(__int16 *)((char *)v44 + v43 + 512) * v39[2]
                      + *(__int16 *)((char *)v34 + v43) * v39[3]
                      + *(__int16 *)((char *)v44 + v43 + 1024) * v39[4]
                      + *(__int16 *)((char *)v44 + v43 + 1280) * v39[5]
                      + *(__int16 *)((char *)v44 + v43 + 1536) * v39[6]
                      + *(__int16 *)((char *)v44 + v43 + 1792) * v39[7]) >> v35;
          }
          else
          {
            v45 = (int)(((1 << v48) >> 1) + *(__int16 *)((char *)v34 + v43)) >> v48;
          }
          if (v45 >= a12)
            v46 = a12;
          else
            v46 = v45;
          if (v45 < 0)
            v46 = 0;
          *(_WORD *)(result + v43) = v46;
          v43 += 2;
        }
        while (2 * v15 != v43);
      }
      v34 = (_QWORD *)((char *)v34 + 2 * (int)(((v38 + a10) >> 3) & 0xFFFFFF80));
      v32 = (v38 + a10) & 0x3FF;
      ++v33;
      result += v37;
    }
    while (v33 != v16);
  }
  return result;
}

char *sub_218B8D71C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, signed int a10)
{
  char *result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int32x4_t v18;
  unsigned int v19;
  int8x8_t *v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  int v27;
  char *v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int8x8_t v35;
  int v36;
  int v37;
  int32x4_t v38;
  int v39;
  int v40;
  char v41;
  unsigned int v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  __int16 v46;
  __int16 v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;
  int v59;
  __int16 v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  int16x8_t v64;
  int v65;
  int v66;
  __int16 v67;
  _BYTE v68[34560];
  uint64_t v69;

  result = (char *)MEMORY[0x24BDAC7A8]();
  v69 = *MEMORY[0x24BDAC8D0];
  if (v16)
  {
    if (v14 < 5)
      v19 = (a9 & 1) + 3;
    else
      v19 = a9 & 3;
    v20 = (int8x8_t *)((char *)&unk_218BBEDD0 + 120 * v19 + 8 * v16 - 8);
    if (v17)
      goto LABEL_8;
LABEL_5:
    v21 = 0;
    goto LABEL_12;
  }
  v20 = 0;
  if (!v17)
    goto LABEL_5;
LABEL_8:
  if (v15 < 5)
    v22 = ((a9 >> 2) & 1) + 3;
  else
    v22 = a9 >> 2;
  v21 = (char *)&unk_218BBEDD0 + 120 * v22 + 8 * v17 - 8;
LABEL_12:
  v23 = v11 >> 1;
  v24 = v13 >> 1;
  if (v20)
  {
    v25 = __clz(a10);
    v26 = (1 << (24 - v25)) >> 1;
    if (v21)
    {
      v27 = v15 + 7;
      v28 = &v12[-6 * v24];
      v29 = v68;
      do
      {
        if (v14 >= 1)
        {
          v30 = 0;
          v31 = v20->i8[4];
          v32 = v20->i8[5];
          v33 = v20->i8[6];
          v34 = v20->i8[7];
          v18.i32[0] = v20->i32[0];
          v18 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v18.i8));
          v35 = *(int8x8_t *)(v28 - 6);
          LOWORD(v36) = *((_WORD *)v28 + 1);
          v37 = *((unsigned __int16 *)v28 + 3);
          do
          {
            v38 = vmulq_s32((int32x4_t)vmovl_u16((uint16x4_t)v35), v18);
            v39 = (unsigned __int16)v36;
            v35 = vext_s8(v35, *(int8x8_t *)v18.i8, 2uLL);
            v35.i16[3] = v36;
            v36 = *(unsigned __int16 *)&v28[v30 + 4];
            v40 = v37 * v33;
            v37 = *(unsigned __int16 *)&v28[v30 + 8];
            *(_WORD *)&v29[v30] = (int)(vaddvq_s32(v38) + v39 * v31 + v40 + v36 * v32 + v26 + v37 * v34) >> (24 - v25);
            v30 += 2;
          }
          while (2 * v14 != v30);
        }
        v29 += 256;
        v28 += 2 * v24;
        --v27;
      }
      while (v27);
      v41 = v25 - 12;
      v42 = (1 << (v25 - 12)) >> 1;
      v43 = v68;
      do
      {
        if (v14 >= 1)
        {
          v44 = 0;
          do
          {
            v45 = (int)(v42
                      + *(__int16 *)&v43[v44] * *v21
                      + *(__int16 *)&v43[v44 + 256] * v21[1]
                      + *(__int16 *)&v43[v44 + 512] * v21[2]
                      + *(__int16 *)&v43[v44 + 768] * v21[3]
                      + *(__int16 *)&v43[v44 + 1024] * v21[4]
                      + *(__int16 *)&v43[v44 + 1280] * v21[5]
                      + *(__int16 *)&v43[v44 + 1536] * v21[6]
                      + *(__int16 *)&v43[v44 + 1792] * v21[7]) >> v41;
            if (v45 >= a10)
              v46 = a10;
            else
              v46 = (int)(v42
                        + *(__int16 *)&v43[v44] * *v21
                        + *(__int16 *)&v43[v44 + 256] * v21[1]
                        + *(__int16 *)&v43[v44 + 512] * v21[2]
                        + *(__int16 *)&v43[v44 + 768] * v21[3]
                        + *(__int16 *)&v43[v44 + 1024] * v21[4]
                        + *(__int16 *)&v43[v44 + 1280] * v21[5]
                        + *(__int16 *)&v43[v44 + 1536] * v21[6]
                        + *(__int16 *)&v43[v44 + 1792] * v21[7]) >> v41;
            if (v45 >= 0)
              v47 = v46;
            else
              v47 = 0;
            *(_WORD *)&result[v44] = v47;
            v44 += 2;
          }
          while (2 * v14 != v44);
        }
        result += 2 * v23;
        v43 += 256;
        --v15;
      }
      while (v15);
    }
    else
    {
      v61 = v26 + 32;
      v62 = 2 * v24;
      do
      {
        if (v14 >= 1)
        {
          v63 = 0;
          do
          {
            v64 = vmovl_s8(*v20);
            v65 = vaddvq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vmovl_high_u16(*(uint16x8_t *)&v12[v63 - 6]), vmovl_high_s16(v64)), (int32x4_t)vmovl_u16(*(uint16x4_t *)&v12[v63 - 6]), vmovl_s16(*(int16x4_t *)v64.i8)))+ v61;
            v66 = v65 >> 6;
            if (v65 >> 6 >= a10)
              LOWORD(v66) = a10;
            if (v65 >= 0)
              v67 = v66;
            else
              v67 = 0;
            *(_WORD *)&result[v63] = v67;
            v63 += 2;
          }
          while (2 * v14 != v63);
        }
        result += 2 * v23;
        v12 += v62;
        --v15;
      }
      while (v15);
    }
  }
  else if (v21)
  {
    v48 = 2 * v23;
    v49 = &v12[4 * v13];
    v50 = 2 * v24;
    v51 = &v12[6 * v24];
    v52 = &v12[2 * v13];
    v53 = &v12[2 * v24];
    v54 = &v12[-2 * v24];
    v55 = &v12[-6 * v24];
    v56 = &v12[-2 * v13];
    do
    {
      if (v14 >= 1)
      {
        v57 = 0;
        do
        {
          v58 = *(unsigned __int16 *)&v55[v57] * *v21
              + *(unsigned __int16 *)&v56[v57] * v21[1]
              + *(unsigned __int16 *)&v54[v57] * v21[2]
              + *(unsigned __int16 *)&v12[v57] * v21[3]
              + *(unsigned __int16 *)&v53[v57] * v21[4]
              + *(unsigned __int16 *)&v52[v57] * v21[5]
              + *(unsigned __int16 *)&v51[v57] * v21[6]
              + *(unsigned __int16 *)&v49[v57] * v21[7];
          v59 = (v58 + 32) >> 6;
          if (v59 >= a10)
            LOWORD(v59) = a10;
          if (v58 >= -32)
            v60 = v59;
          else
            v60 = 0;
          *(_WORD *)&result[v57] = v60;
          v57 += 2;
        }
        while (2 * v14 != v57);
      }
      result += v48;
      v49 += v50;
      v51 += v50;
      v52 += v50;
      v53 += v50;
      v12 += v50;
      v54 += v50;
      v56 += v50;
      v55 += v50;
      --v15;
    }
    while (v15);
  }
  else
  {
    return (char *)sub_218B8CB78(result, v23, v12, v13 >> 1, v14, v15);
  }
  return result;
}

void sub_218B8DB80(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v4 = *(_DWORD *)(a1 + 76);
  v5 = *(_DWORD *)(a1 + 72) - 1;
  *(_DWORD *)(a1 + 72) = v5;
  if (v4)
  {
    pthread_mutex_unlock((pthread_mutex_t *)a1);
    free(*(void **)a2);
    if (!v5)
    {
      pthread_mutex_destroy((pthread_mutex_t *)a1);
      free((void *)a1);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = a2;
    pthread_mutex_unlock((pthread_mutex_t *)a1);
  }
}

char *sub_218B8DC0C(uint64_t a1, char *a2)
{
  char *v4;
  int v5;
  void *memptr;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v4 = *(char **)(a1 + 64);
  ++*(_DWORD *)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 64) = *((_QWORD *)v4 + 1);
    pthread_mutex_unlock((pthread_mutex_t *)a1);
    if (&v4[-*(_QWORD *)v4] == a2)
      return v4;
    free(*(void **)v4);
  }
  else
  {
    pthread_mutex_unlock((pthread_mutex_t *)a1);
  }
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x40uLL, (size_t)(a2 + 16), 0xE584FBEuLL) || !memptr)
  {
    pthread_mutex_lock((pthread_mutex_t *)a1);
    v5 = *(_DWORD *)(a1 + 72) - 1;
    *(_DWORD *)(a1 + 72) = v5;
    pthread_mutex_unlock((pthread_mutex_t *)a1);
    if (!v5)
    {
      pthread_mutex_destroy((pthread_mutex_t *)a1);
      free((void *)a1);
    }
    return 0;
  }
  else
  {
    v4 = &a2[(_QWORD)memptr];
    *(_QWORD *)&a2[(_QWORD)memptr] = memptr;
  }
  return v4;
}

uint64_t sub_218B8DCF0(int a1, int a2, int a3, int a4, int a5, int a6, char a7, _WORD *a8, unint64_t a9, uint64_t a10, unsigned int a11, int *a12, int a13, int a14, int a15, _WORD *a16, unsigned int a17)
{
  int v17;
  uint64_t v18;
  int v19;
  char v22;
  char v23;
  _WORD *v24;
  _WORD *v25;
  _WORD *v26;
  char v27;
  uint64_t v28;
  __int16 *v29;
  int v30;
  uint64_t v31;
  int v32;
  __int16 *v33;
  uint64_t v34;
  unsigned int v35;
  __int16 v36;
  uint64_t v37;
  _WORD *v38;
  int v39;
  _WORD *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  _WORD *v45;
  _WORD *v46;
  uint64_t v47;
  __int16 *v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  int v54;
  uint64_t v55;
  _WORD *v56;
  int v57;
  int v58;
  int v60;
  char v61;
  _WORD *v62;
  __int16 v63;
  uint64_t v64;
  unsigned int v65;
  _WORD *v66;
  uint64_t v67;
  int v68;
  int v69;
  _WORD *v70;
  _WORD *v71;
  _WORD *v72;
  int v73;
  _WORD *v74;
  __int16 v75;
  uint64_t v76;
  _WORD *v77;
  __int16 v78;
  unsigned int v79;
  int v81;
  char v82;
  char v83;
  int v84;
  int v85;
  int v86;
  int v87;
  _WORD *__src;

  v17 = a4;
  v18 = a11;
  if (a11 - 1 >= 8)
  {
    if (!a11 || a11 == 12)
      v18 = byte_218BBF8F0[4 * a11 + 2 * a2 + a4];
  }
  else
  {
    v19 = 3 * *a12 + byte_218BBF8E8[a11 - 1];
    *a12 = v19;
    if (v19 > 90)
    {
      if (v19 >= 0xB4)
      {
        if (v19 == 180 || a2 == 0)
          v18 = 2;
        else
          v18 = 8;
      }
      else
      {
        v18 = 7u;
      }
    }
    else if (v19 == 90 || a4 == 0)
    {
      v18 = 1;
    }
    else
    {
      v18 = 6;
    }
  }
  v22 = __clz(a17);
  v23 = byte_218BBF924[v18];
  if (!a4)
  {
    v24 = 0;
    __src = a8;
    goto LABEL_31;
  }
  if ((byte_218BBF924[v18] & 6) == 0)
  {
    __src = 0;
    if (a2)
    {
      v24 = 0;
      goto LABEL_31;
    }
    v24 = 0;
    if ((byte_218BBF924[v18] & 1) == 0)
      goto LABEL_31;
  }
  if (a10)
    v25 = (_WORD *)(a10 + 8 * a1);
  else
    v25 = (_WORD *)((char *)a8 - a9);
  __src = v25;
  if (a10)
    v24 = (_WORD *)(a10 + 8 * a1);
  else
    v24 = (_WORD *)((char *)a8 - a9);
LABEL_31:
  v26 = a16;
  v27 = 32 - v22;
  if ((byte_218BBF924[v18] & 1) != 0)
  {
    v28 = (4 * a14);
    v29 = &a16[-4 * a14];
    if (a2)
    {
      v30 = 4 * (a6 - a3);
      if ((int)v28 >= v30)
        v31 = v30;
      else
        v31 = v28;
      if ((int)v31 >= 1)
      {
        v32 = v28 - 1;
        v33 = a8 - 1;
        v34 = v31;
        do
        {
          v29[v32--] = *v33;
          v33 = (__int16 *)((char *)v33 + a9);
          --v34;
        }
        while (v34);
      }
      if ((int)v28 > v30)
      {
        v35 = v28 - v31;
        if ((int)v28 - (int)v31 >= 1)
        {
          v36 = v29[v35];
          v37 = 2 * v35;
          v38 = &a16[-4 * a14];
          do
          {
            *v38++ = v36;
            v37 -= 2;
          }
          while (v37);
        }
      }
    }
    else
    {
      if (a4)
        LOWORD(v39) = *v24;
      else
        v39 = (1 << v27 >> 1) + 1;
      if (a14)
      {
        v40 = &a16[-4 * a14];
        v41 = (4 * a14);
        do
        {
          *v40++ = v39;
          --v41;
        }
        while (v41);
      }
    }
    if ((v23 & 0x10) != 0)
    {
      if (a2 && (a7 & 8) != 0 && (v42 = a6 - (a14 + a3), a6 > a14 + a3))
      {
        v43 = 4 * v42;
        if ((int)v28 >= 4 * v42)
          v44 = v43;
        else
          v44 = v28;
        if ((int)v44 >= 1)
        {
          v45 = &a16[-(int)v28 - 1];
          v46 = &a8[(a9 >> 1) * v28 - 1];
          v47 = v44;
          do
          {
            *v45-- = *v46;
            v46 = (_WORD *)((char *)v46 + a9);
            --v47;
          }
          while (v47);
        }
        if ((int)v28 > v43 && (int)v28 - (int)v44 >= 1)
        {
          v48 = &v29[-v28];
          v49 = v29[-(int)v44];
          v50 = 2 * (v28 - v44);
          do
          {
            *v48++ = v49;
            v50 -= 2;
          }
          while (v50);
        }
      }
      else if (a14)
      {
        v51 = -(uint64_t)v28;
        v52 = *v29;
        do
          v29[v51] = v52;
        while (!__CFADD__(v51++, 1));
      }
    }
  }
  v54 = a13;
  if ((v23 & 2) != 0)
  {
    v55 = (4 * a13);
    v56 = a16 + 1;
    if (a4)
    {
      v57 = a5 - a1;
      v58 = 4 * (a5 - a1);
      if ((int)v55 < v58)
        v58 = 4 * a13;
      v81 = v58;
      v82 = v27;
      v84 = a1;
      v86 = a2;
      v83 = v23;
      v60 = a5;
      v61 = a7;
      memcpy(a16 + 1, v24, 2 * v58);
      v54 = a13;
      a1 = v84;
      a2 = v86;
      a7 = v61;
      a5 = v60;
      v17 = a4;
      v27 = v82;
      v23 = v83;
      v26 = a16;
      if ((int)v55 > 4 * v57 && (int)v55 - v81 >= 1)
      {
        v62 = &v56[v81];
        v63 = *(v62 - 1);
        v64 = 2 * (v55 - v81);
        do
        {
          *v62++ = v63;
          v64 -= 2;
        }
        while (v64);
      }
      goto LABEL_84;
    }
    if (a2)
    {
      LOWORD(v65) = *(a8 - 1);
      if (!a13)
        goto LABEL_84;
    }
    else
    {
      v65 = ((1 << v27) >> 1) - 1;
      if (!a13)
        goto LABEL_84;
    }
    v66 = a16 + 1;
    v67 = (4 * a13);
    do
    {
      *v66++ = v65;
      --v67;
    }
    while (v67);
LABEL_84:
    if ((v23 & 8) != 0)
    {
      if (v17 && (a7 & 1) != 0 && (v68 = a5 - (v54 + a1), a5 > v54 + a1))
      {
        v69 = 4 * v68;
        if ((int)v55 < 4 * v68)
          v69 = 4 * a13;
        v85 = v69;
        v87 = a2;
        v70 = &v24[v55];
        v71 = v26;
        v72 = v24;
        v73 = v54;
        memcpy(&v56[v55], v70, 2 * v69);
        v54 = v73;
        v24 = v72;
        v26 = v71;
        a2 = v87;
        if ((int)v55 > 4 * v68 && (int)v55 - v85 >= 1)
        {
          v74 = &v56[v55 + v85];
          v75 = v56[(int)v55 - 1 + v85];
          v76 = 2 * (v55 - v85);
          do
          {
            *v74++ = v75;
            v76 -= 2;
          }
          while (v76);
        }
      }
      else if (v54)
      {
        v77 = &v56[v55];
        v78 = v56[(int)v55 - 1];
        do
        {
          *v77++ = v78;
          --v55;
        }
        while (v55);
      }
    }
  }
  if ((v23 & 4) != 0)
  {
    if (a2)
    {
      LOWORD(v79) = *(__src - 1);
    }
    else if (v17)
    {
      LOWORD(v79) = *v24;
    }
    else
    {
      v79 = (1 << v27) >> 1;
    }
    *v26 = v79;
    if ((_DWORD)v18 == 7 && a14 + v54 >= 6 && a15)
      *v26 = (5 * ((unsigned __int16)v26[1] + (unsigned __int16)*(v26 - 1)) + 6 * (unsigned __int16)v79 + 8) >> 4;
  }
  return v18;
}

_DWORD *sub_218B8E1D0(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v9;

  v9 = sub_218B8F7A4(a3, a4, a5);
  return sub_218B8FC34(a1, a2, a4, a5, v9);
}

_DWORD *sub_218B8E224(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return sub_218B8FC34(a1, a2, a4, a5, 128);
}

_DWORD *sub_218B8E234(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;

  v5 = a4 >> 1;
  if (a4 >= 1)
  {
    v6 = a4;
    v7 = (unsigned __int8 *)(a3 + 1);
    do
    {
      v8 = *v7++;
      v5 += v8;
      --v6;
    }
    while (v6);
  }
  return sub_218B8FC34(a1, a2, a4, a5, v5 >> __clz(__rbit32(a4)));
}

_DWORD *sub_218B8E274(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;

  v5 = a5 >> 1;
  if (a5 >= 1)
  {
    v6 = a5;
    v7 = (unsigned __int8 *)(a3 - 1);
    do
    {
      v8 = *v7--;
      v5 += v8;
      --v6;
    }
    while (v6);
  }
  return sub_218B8FC34(a1, a2, a4, a5, v5 >> __clz(__rbit32(a5)));
}

char *sub_218B8E2B4(char *__b, uint64_t a2, uint64_t a3, int a4, int a5)
{
  char *v6;
  size_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;

  if (a5 >= 1)
  {
    v6 = __b;
    v7 = a4;
    v8 = (unsigned __int8 *)(a3 - 1);
    v9 = a5;
    do
    {
      v10 = *v8--;
      __b = (char *)memset(v6, v10, v7);
      v6 += a2;
      --v9;
    }
    while (v9);
  }
  return __b;
}

char *sub_218B8E314(char *__dst, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  char *v7;
  const void *v8;
  size_t v9;

  if (a5 >= 1)
  {
    v5 = a5;
    v7 = __dst;
    v8 = (const void *)(a3 + 1);
    v9 = a4;
    do
    {
      __dst = (char *)memcpy(v7, v8, v9);
      v7 += a2;
      --v5;
    }
    while (v5);
  }
  return __dst;
}

uint64_t sub_218B8E374(uint64_t result, uint64_t a2, unsigned __int8 *a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = *a3;
    v7 = a5;
    do
    {
      if (a4 >= 1)
      {
        v8 = 0;
        v9 = a3[~v5];
        v10 = v9 - v6;
        if (v9 - v6 >= 0)
          v11 = v9 - v6;
        else
          v11 = v6 - v9;
        do
        {
          v12 = a3[v8 + 1];
          v13 = v6 - v12;
          if (v6 - v12 < 0)
            v13 = v12 - v6;
          v14 = v6 - (v10 + v12);
          if (v14 < 0)
            v14 = v10 + v12 - v6;
          if (v11 > v14)
            LOBYTE(v12) = v6;
          if (v13 <= v14 && v13 <= v11)
            LOBYTE(v12) = v9;
          *(_BYTE *)(result + v8++) = v12;
        }
        while (a4 != v8);
      }
      ++v5;
      result += a2;
    }
    while (v5 != v7);
  }
  return result;
}

uint64_t sub_218B8E400(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = &byte_218BBF940[a5];
    v7 = *(unsigned __int8 *)(a3 + a4);
    v8 = *(unsigned __int8 *)(a3 - a5);
    v9 = a5;
    do
    {
      if (a4 >= 1)
      {
        v10 = 0;
        v11 = v6[v5];
        do
        {
          *(_BYTE *)(result + v10) = ((256 - v11) * v8
                                    + 256
                                    + *(unsigned __int8 *)(a3 + 1 + v10) * v11
                                    + *(unsigned __int8 *)(a3 + ~v5) * byte_218BBF940[a4 + v10]
                                    + (256 - byte_218BBF940[a4 + v10]) * v7) >> 9;
          ++v10;
        }
        while (a4 != v10);
      }
      result += a2;
      ++v5;
    }
    while (v5 != v9);
  }
  return result;
}

uint64_t sub_218B8E4B0(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = *(unsigned __int8 *)(a3 - a5);
    do
    {
      if (a4 >= 1)
      {
        v7 = 0;
        v8 = byte_218BBF940[a5 + v5];
        do
        {
          *(_BYTE *)(result + v7) = (unsigned __int16)((256 - v8) * v6 + 128 + *(unsigned __int8 *)(a3 + 1 + v7) * v8) >> 8;
          ++v7;
        }
        while (a4 != v7);
      }
      result += a2;
      ++v5;
    }
    while (v5 != a5);
  }
  return result;
}

uint64_t sub_218B8E530(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  __int16 v6;
  uint64_t i;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = *(unsigned __int8 *)(a3 + a4);
    do
    {
      if (a4 >= 1)
      {
        for (i = 0; i != a4; ++i)
          *(_BYTE *)(result + i) = (unsigned __int16)(*(unsigned __int8 *)(a3 + ~v5) * byte_218BBF940[a4 + i]
                                                    + (256 - byte_218BBF940[a4 + i]) * v6
                                                    + 128) >> 8;
      }
      result += a2;
      ++v5;
    }
    while (v5 != a5);
  }
  return result;
}

uint64_t sub_218B8E5A8(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6)
{
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  int v12;
  signed int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  _BYTE v26[128];
  uint64_t v27;

  v9 = result;
  v27 = *MEMORY[0x24BDAC8D0];
  LODWORD(v10) = *(unsigned __int16 *)((char *)&unk_218BBF9C0 + (a6 & 0x1FE));
  v25 = a2;
  if (a6 < 0x400)
    goto LABEL_2;
  v13 = a5 + a4;
  if ((a6 & 0x1FF) < 0x33 || (int)(0x10u >> ((a6 & 0x200) != 0)) < v13)
  {
    result = sub_218B8F658(a5 + a4, 90 - (a6 & 0x1FF), (a6 >> 9) & 1);
    a2 = v25;
    if ((_DWORD)result)
    {
      v18 = a3 + 1;
      if (a4 >= a5)
        v19 = a5;
      else
        v19 = a4;
      v11 = v26;
      result = sub_218B8FB28((uint64_t)v26, a5 + a4, 0, a5 + a4, v18, -1, v19 + a4, result);
      a2 = v25;
      goto LABEL_17;
    }
LABEL_2:
    v11 = (_BYTE *)(a3 + 1);
    if (a4 >= a5)
      v12 = a5;
    else
      v12 = a4;
    v13 = v12 + a4;
LABEL_17:
    v16 = v13 - 1;
    v17 = 1;
    goto LABEL_18;
  }
  v14 = a3 + 1;
  if (a4 >= a5)
    v15 = a5;
  else
    v15 = a4;
  v11 = v26;
  result = sub_218B8FA60((uint64_t)v26, a5 + a4, v14, -1, v15 + a4);
  v16 = 2 * v13 - 2;
  LODWORD(v10) = 2 * v10;
  v17 = 2;
  a2 = v25;
LABEL_18:
  if (a5 >= 1)
  {
    v20 = 0;
    v21 = v16;
    v22 = v10;
    v10 = v10;
    do
    {
      if (a4 >= 1)
      {
        v23 = 0;
        v24 = v10 >> 6;
        while (v24 < v21)
        {
          *(_BYTE *)(v9 + v23++) = ((v10 & 0x3E) * v11[v24 + 1]
                                  + (64 - (v10 & 0x3E)) * v11[v24]
                                  + 32) >> 6;
          v24 += v17;
          if (a4 == v23)
            goto LABEL_26;
        }
        result = (uint64_t)memset((void *)(v9 + v23), v11[v21], a4 - (int)v23);
        a2 = v25;
      }
LABEL_26:
      ++v20;
      v9 += a2;
      v10 += v22;
    }
    while (v20 != a5);
  }
  return result;
}

uint64_t sub_218B8E7AC(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, int a5, unsigned int a6, int a7, int a8)
{
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  signed int v18;
  signed int v19;
  _BOOL4 v21;
  int v22;
  int v23;
  uint64_t result;
  int v25;
  int v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  int v33;
  int v36;
  int v37;
  int v38;
  _BYTE v39[65];
  _QWORD v40[10];

  v40[8] = *MEMORY[0x24BDAC8D0];
  v14 = (a6 >> 9) & 1;
  v15 = (a6 & 0x1FF) - 90;
  v16 = *(unsigned __int16 *)((char *)&unk_218BBF9C0 + (v15 & 0xFFFFFFFE));
  v36 = 180 - (a6 & 0x1FF);
  v17 = *(unsigned __int16 *)((char *)&unk_218BBF9C0 + (v36 & 0xFFFFFFFE));
  v37 = v14;
  if (a6 > 0x3FF)
  {
    v18 = a5 + a4;
    v19 = 0x10u >> v14;
    v21 = (a6 & 0x1FF) > 0x8C && v19 >= v18;
    v38 = v21;
    if (v15 <= 0x27 && v19 >= v18)
    {
      sub_218B8FA60((uint64_t)v39, a4 + 1, (uint64_t)a3, 0, a4 + 1);
      v17 *= 2;
      v22 = 2;
      goto LABEL_16;
    }
    v23 = sub_218B8F658(v18, v15, v14);
    if (v23)
    {
      sub_218B8FB28((uint64_t)v40, a4, 0, a7, (uint64_t)(a3 + 1), -1, a4, v23);
      goto LABEL_15;
    }
  }
  else
  {
    v38 = 0;
  }
  __memcpy_chk();
LABEL_15:
  v22 = 1;
LABEL_16:
  if (v38)
  {
    result = sub_218B8FA60((uint64_t)&v39[-2 * a5], a5 + 1, (uint64_t)&a3[-a5], 0, a5 + 1);
    v16 *= 2;
  }
  else if (a6 >= 0x400 && (v25 = sub_218B8F658(a5 + a4, v36, v37)) != 0)
  {
    result = sub_218B8FB28((uint64_t)&v39[-a5], a5, a5 - a8, a5, (uint64_t)&a3[-a5], 0, a5 + 1, v25);
  }
  else
  {
    result = (uint64_t)memcpy(&v39[-a5], &a3[-a5], a5);
  }
  v39[0] = *a3;
  if (a5 >= 1)
  {
    v26 = 0;
    v27 = v22 << 6;
    v28 = &v39[~v38];
    do
    {
      v27 -= v17;
      if (a4 >= 1)
      {
        v29 = 0;
        LODWORD(result) = v27 >> 6;
        v30 = (v26 << (v38 | 6)) - v16;
        do
        {
          if ((result & 0x80000000) != 0)
          {
            v33 = v30 & 0x3E;
            v31 = (64 - v33) * v28[-(v30 >> 6)];
            v32 = &v28[~(v30 >> 6)];
          }
          else
          {
            v31 = (64 - (v27 & 0x3E)) * v39[result];
            v32 = &v39[(result + 1)];
            v33 = v27 & 0x3E;
          }
          *(_BYTE *)(a1 + v29++) = (v31 + v33 * *v32 + 32) >> 6;
          result = (result + v22);
          v30 -= v16;
        }
        while (a4 != v29);
      }
      ++v26;
      a1 += a2;
    }
    while (v26 != a5);
  }
  return result;
}

uint64_t sub_218B8EA78(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6)
{
  _BYTE *v10;
  int v11;
  unsigned int v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE v27[128];
  uint64_t v28;

  v10 = (_BYTE *)result;
  v28 = *MEMORY[0x24BDAC8D0];
  v11 = a6 & 0x1FF;
  v12 = word_218BBF9C0[(270 - v11) >> 1];
  if (a6 < 0x400)
    goto LABEL_2;
  v17 = a5 + (uint64_t)a4;
  if ((v11 - 220) >= 0xFFFFFFD8 && (int)(0x10u >> ((a6 & 0x200) != 0)) >= (int)v17)
  {
    result = sub_218B8FA60((uint64_t)v27, a5 + a4, a3 - (int)v17, (a4 - a5) & ~((a4 - a5) >> 31), (int)v17 + 1);
    v15 = 2 * (int)v17 - 2;
    v13 = &v27[v15];
    v12 *= 2;
    v16 = 2;
    goto LABEL_11;
  }
  result = sub_218B8F658(a5 + a4, v11 - 180, (a6 >> 9) & 1);
  if ((_DWORD)result)
  {
    result = sub_218B8FB28((uint64_t)v27, a5 + a4, 0, a5 + a4, a3 - v17, (a4 - a5) & ~((a4 - a5) >> 31), (int)v17 + 1, result);
    v15 = (int)v17 - 1;
    v13 = &v27[v15];
    v16 = 1;
  }
  else
  {
LABEL_2:
    v13 = (_BYTE *)(a3 - 1);
    if (a4 >= a5)
      v14 = a5;
    else
      v14 = a4;
    LODWORD(v15) = a5 + v14 - 1;
    v16 = 1;
  }
LABEL_11:
  if (a4 >= 1)
  {
    v18 = 0;
    v19 = (int)v15;
    v20 = -(uint64_t)(int)v15;
    result = 64;
    v21 = v12;
    do
    {
      if (a5 >= 1)
      {
        v22 = 0;
        v23 = &v13[-(v21 >> 6)];
        v24 = (unint64_t)~(v21 >> 6) << 32;
        v25 = (v21 >> 6) - v16;
        v26 = v10;
        while (1)
        {
          v25 += v16;
          if (v25 >= v19)
            break;
          *v26 = ((v21 & 0x3E) * v13[v24 >> 32] + (64 - (v21 & 0x3E)) * *v23 + 32) >> 6;
          v26 += a2;
          v23 -= v16;
          v24 -= v16 << 32;
          if (a5 == ++v22)
            goto LABEL_19;
        }
        do
        {
          *v26 = v13[v20];
          ++v22;
          v26 += a2;
        }
        while (v22 < a5);
      }
LABEL_19:
      ++v18;
      v21 += v12;
      ++v10;
    }
    while (v18 != a4);
  }
  return result;
}

uint64_t sub_218B8ECB8(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, __int16 a6)
{
  unint64_t v6;
  char *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  int v26;

  if (a5 >= 1)
  {
    v6 = 0;
    v7 = (char *)&unk_218BBFA40 + 64 * (unint64_t)(a6 & 0x1FF);
    v8 = (unsigned __int8 *)(a3 + 1);
    v9 = a5;
    do
    {
      if (a4 >= 1)
      {
        v10 = 0;
        v11 = (unsigned __int8 *)(a3 - v6);
        v12 = (unsigned __int8 *)(a3 - v6 - 1);
        v13 = -1;
        do
        {
          v14 = *v11;
          v15 = *v8;
          v16 = v8[1];
          v17 = v8[2];
          v11 = v8 + 3;
          v18 = v8[3];
          v19 = result + v10;
          v20 = 1;
          v21 = v7;
          v22 = *v12;
          v23 = v12[v13];
          do
          {
            v24 = 0;
            v25 = v20;
            do
            {
              v26 = (v21[v24 + 8] * v15
                   + v21[v24] * v14
                   + v21[v24 + 16] * v16
                   + v21[v24 + 24] * v17
                   + v21[v24 + 32] * v18
                   + v21[v24 + 40] * v22
                   + v21[v24 + 48] * v23
                   + 8) >> 4;
              if (v26 >= 255)
                v26 = 255;
              *(_BYTE *)(v19 + v24++) = v26 & ~(v26 >> 31);
            }
            while (v24 != 4);
            v20 = 0;
            v21 += 4;
            v19 += a2;
          }
          while ((v25 & 1) != 0);
          v12 = (unsigned __int8 *)(result + (v10 | 3));
          v8 += 4;
          v10 += 4;
          v13 = a2;
        }
        while (v10 < a4);
      }
      v8 = (unsigned __int8 *)(result + a2);
      result += 2 * a2;
      v6 += 2;
    }
    while (v6 < v9);
  }
  return result;
}

unint64_t sub_218B8EE24(unint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, signed int a6, signed int a7)
{
  return sub_218B8F828(a1, a2, a3, a4, a5, a6, a7, 1, 1);
}

unint64_t sub_218B8EE4C(unint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, signed int a6, signed int a7)
{
  return sub_218B8F828(a1, a2, a3, a4, a5, a6, a7, 1, 0);
}

unint64_t sub_218B8EE70(unint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, signed int a6, signed int a7)
{
  return sub_218B8F828(a1, a2, a3, a4, a5, a6, a7, 0, 0);
}

uint64_t sub_218B8EE94(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  int v13;

  v13 = sub_218B8F7A4(a3, a4, a5);
  return sub_218B8F72C(a1, a2, a4, a5, v13, a6, a7);
}

uint64_t sub_218B8EF00(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  return sub_218B8F72C(a1, a2, a4, a5, 128, a6, a7);
}

uint64_t sub_218B8EF10(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;

  v7 = a4 >> 1;
  if (a4 >= 1)
  {
    v8 = a4;
    v9 = (unsigned __int8 *)(a3 + 1);
    do
    {
      v10 = *v9++;
      v7 += v10;
      --v8;
    }
    while (v8);
  }
  return sub_218B8F72C(a1, a2, a4, a5, v7 >> __clz(__rbit32(a4)), a6, a7);
}

uint64_t sub_218B8EF50(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;

  v7 = a5 >> 1;
  if (a5 >= 1)
  {
    v8 = a5;
    v9 = (unsigned __int8 *)(a3 - 1);
    do
    {
      v10 = *v9--;
      v7 += v10;
      --v8;
    }
    while (v8);
  }
  return sub_218B8F72C(a1, a2, a4, a5, v7 >> __clz(__rbit32(a5)), a6, a7);
}

uint64_t sub_218B8EF90(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5, int a6)
{
  int i;
  uint64_t j;
  unsigned int v8;
  _BYTE *v9;

  if (a6 >= 1)
  {
    for (i = 0; i != a6; ++i)
    {
      if (a5 >= 1)
      {
        for (j = 0; j < a5; j += 2)
        {
          v8 = *a4++;
          v9 = (_BYTE *)(result + j);
          *v9 = *(_BYTE *)(a3 + (v8 & 7));
          v9[1] = *(_BYTE *)(a3 + ((unint64_t)v8 >> 4));
        }
      }
      result += a2;
    }
  }
  return result;
}

int8x8_t *sub_218B8EFEC(int8x8_t *a1, uint64_t a2, int8x16_t *a3, int a4, uint64_t a5, unsigned int a6)
{
  uint64_t v11;
  int v12;
  signed int v13;
  int v14;
  char v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int8x16_t v21[18];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v11 = *(unsigned __int16 *)((char *)word_218BBF9C0 + (a6 & 0x1FE));
  if (a6 < 0x400)
    goto LABEL_2;
  v13 = a5 + a4;
  if ((a6 & 0x1FF) < 0x33 || (int)(0x10u >> ((a6 & 0x200) != 0)) < v13)
  {
    v18 = sub_218B8F658((int)a5 + a4, 90 - (a6 & 0x1FF), (a6 >> 9) & 1);
    if (v18)
    {
      if (a4 >= (int)a5)
        v19 = a5;
      else
        v19 = a4;
      sub_218B2C6FC(v21, a5 + a4, a3, v19 + a4, v18);
      goto LABEL_17;
    }
LABEL_2:
    if (a4 >= (int)a5)
      v12 = a5;
    else
      v12 = a4;
    v13 = v12 + a4;
    __memcpy_chk();
LABEL_17:
    v16 = v13 - 1;
    v15 = 1;
    v17 = 1;
    goto LABEL_18;
  }
  if (a4 >= (int)a5)
    v14 = a5;
  else
    v14 = a4;
  sub_218B2C638(v21, (a5 + a4), a3, v14 + a4);
  v15 = 0;
  v16 = 2 * v13 - 2;
  v11 = (2 * v11);
  v17 = 2;
LABEL_18:
  sub_218B2C8E8((int8x16_t *)&v21[0].i8[v16 + 1], v21[0].u8[v16], v17 * (a4 + 15));
  if ((v15 & 1) != 0)
    return (int8x8_t *)sub_218B2C8FC((uint64_t)a1, a2, (uint64_t)v21, a4, a5, v11, v16);
  else
    return sub_218B2CB30(a1, a2, (uint64_t)v21, a4, a5, v11, v16);
}

_QWORD *sub_218B8F17C(_QWORD *a1, uint64_t a2, int8x16_t *a3, signed int a4, signed int a5, unsigned int a6, signed int a7, signed int a8)
{
  int v12;
  unsigned int v13;
  int v14;
  _BOOL4 v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int64x2_t v23;
  int64x2_t v24;
  signed int v27;
  signed int v28;
  unsigned int v30;
  unsigned int v31;
  int v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  int64x2_t v39;
  int64x2_t v40;
  unsigned int v41;
  int v42;
  int v45;
  int v47;
  int8x16_t v48;
  int8x16_t v49[4];
  int8x16_t v50[4];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v12 = (a6 >> 9) & 1;
  v13 = (a6 & 0x1FF) - 90;
  v45 = *(unsigned __int16 *)((char *)word_218BBF9C0 + (v13 & 0xFFFFFFFE));
  v14 = 180 - (a6 & 0x1FF);
  v47 = *(unsigned __int16 *)((char *)word_218BBF9C0 + (v14 & 0xFFFFFFFE));
  if (a6 <= 0x3FF)
  {
    v15 = 0;
LABEL_3:
    __memcpy_chk();
    goto LABEL_4;
  }
  v27 = a5 + a4;
  v28 = 0x10u >> ((a6 & 0x200) != 0);
  v15 = (a6 & 0x1FF) > 0x8C && v28 >= v27;
  if (v13 <= 0x27 && v28 >= v27)
  {
    sub_218B2C6A0(v49, a4, a3);
    v47 *= 2;
    v16 = 1;
    if (v15)
      goto LABEL_5;
    goto LABEL_15;
  }
  v41 = sub_218B8F658(v27, v13, (a6 >> 9) & 1);
  if (!v41)
    goto LABEL_3;
  if (a7 >= a4)
    v42 = a4;
  else
    v42 = a7;
  sub_218B2C6FC((int8x16_t *)&v49[0].i8[1], v42, a3, a4, v41);
  if (a4 > a7)
    memcpy(&v49[0].i8[a7 + 1], &a3->i8[a7 + 1], a4 - a7);
LABEL_4:
  v16 = 0;
  if (v15)
  {
LABEL_5:
    v48.i8[0] = a3->i8[0];
    sub_218B2CC60((uint64_t *)((char *)v48.i64 + 1), (uint64_t)a3, a5);
    *(_QWORD *)&v17 = sub_218B2C6A0(v50, a5, &v48).u64[0];
    v50[0].i8[0] = a3->i8[0];
    v49[0].i8[0] = v50[0].i8[0];
    return sub_218B2D6CC(a1, a2, (uint64_t)v49, (__int128 *)v50[0].i8, a4, a5, v47, 2 * v45, v17, v18, v19, v20, v21, v22, v23, v24);
  }
LABEL_15:
  if (a6 >= 0x400 && (v30 = sub_218B8F658(a5 + a4, v14, v12)) != 0)
  {
    v31 = v30;
    v48.i8[0] = a3->i8[0];
    sub_218B2CC60((uint64_t *)((char *)v48.i64 + 1), (uint64_t)a3, a5);
    if (a8 >= a5)
      v32 = a5;
    else
      v32 = a8;
    sub_218B2C6FC((int8x16_t *)&v50[0].i8[1], v32, &v48, a5, v31);
    if (a5 > a8)
      memcpy(&v50[0].i8[a8 + 1], &v48.i8[a8 + 1], a5 - a8);
  }
  else
  {
    sub_218B2CC60((uint64_t *)((char *)v50[0].i64 + 1), (uint64_t)a3, a5);
  }
  v50[0].i8[0] = a3->i8[0];
  v49[0].i8[0] = v50[0].i8[0];
  if ((v16 & 1) != 0)
    return sub_218B2D450(a1, a2, (uint64_t)v49, v50, a4, a5, v47, v45, v33, v34, v35, v36, v37, v38, v39, v40);
  else
    return (_QWORD *)sub_218B2CC8C((uint64_t)a1, a2, (uint64_t)v49, (uint64_t)v50, a4);
}

int8x8_t *sub_218B8F468(int8x8_t *a1, unint64_t a2, __int8 *a3, int a4, int a5, unsigned int a6)
{
  int v11;
  unsigned int v12;
  int v13;
  signed int v14;
  int v15;
  int v16;
  char v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  double v25;
  double v26;
  double v27;
  int8x16_t v29[17];
  int8x16_t v30[9];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v11 = a6 & 0x1FF;
  v12 = word_218BBF9C0[(270 - v11) >> 1];
  if (a6 < 0x400)
    goto LABEL_2;
  v14 = a5 + a4;
  if ((v11 - 220) < 0xFFFFFFD8 || (int)(0x10u >> ((a6 & 0x200) != 0)) < v14)
  {
    v20 = sub_218B8F658(a5 + a4, v11 - 180, (a6 >> 9) & 1);
    if (v20)
    {
      v21 = v20;
      v30[0].i8[0] = *a3;
      if (a4 <= a5)
        v22 = a5;
      else
        v22 = a4;
      if (a4 >= a5)
        v23 = a5;
      else
        v23 = a4;
      sub_218B2CC60((uint64_t *)((char *)v30[0].i64 + 1), (uint64_t)a3, v22 + a5);
      sub_218B2C6FC(v29, a5 + a4, v30, v23 + a5, v21);
      goto LABEL_23;
    }
LABEL_2:
    if (a4 >= a5)
      v13 = a5;
    else
      v13 = a4;
    v14 = v13 + a5;
    sub_218B2CC60(v29, (uint64_t)a3, v13 + a5);
LABEL_23:
    v18 = v14 - 1;
    v17 = 1;
    v19 = 1;
    goto LABEL_24;
  }
  v30[0].i8[0] = *a3;
  if (a4 <= a5)
    v15 = a5;
  else
    v15 = a4;
  if (a4 >= a5)
    v16 = a5;
  else
    v16 = a4;
  sub_218B2CC60((uint64_t *)((char *)v30[0].i64 + 1), (uint64_t)a3, v15 + a5);
  sub_218B2C638(v29, (a5 + a4), v30, v16 + a5);
  v17 = 0;
  v18 = 2 * v14 - 2;
  v12 *= 2;
  v19 = 2;
LABEL_24:
  v24 = 63 - v18;
  if (63 - v18 <= a5 + 15)
    v24 = a5 + 15;
  sub_218B2C8E8((int8x16_t *)&v29[0].i8[v18 + 1], v29[0].u8[v18], v24 * v19);
  if ((v17 & 1) != 0)
    return (int8x8_t *)sub_218B2D95C(a1, a2, (uint64_t)v29, a4, a5, v12, v18);
  else
    return sub_218B2DEFC(a1, a2, (__int128 *)v29[0].i8, a4, a5, v12, v18, v25, v26, v27);
}

uint64_t sub_218B8F658(unsigned int a1, int a2, int a3)
{
  uint64_t result;
  unsigned int v5;

  if (a3)
  {
    if ((int)a1 <= 8)
    {
      if (a2 <= 63)
        return a2 > 39;
      return 2;
    }
    if (a1 <= 0x10)
    {
      if (a2 > 47)
        return 2;
      return a2 > 19;
    }
    result = 3;
    if (a1 <= 0x18 && a2 <= 3)
      return 0;
  }
  else
  {
    if ((int)a1 <= 8)
      return a2 > 55;
    if (a1 <= 0x10)
      return a2 > 39;
    if (a1 <= 0x18)
    {
      if (a2 > 31)
        return 3;
      if (a2 > 15)
        return 2;
      return a2 > 7;
    }
    if (a2 <= 3)
      v5 = 1;
    else
      v5 = 2;
    if (a2 > 31)
      v5 = 3;
    if (a1 <= 0x20)
      return v5;
    else
      return 3;
  }
  return result;
}

uint64_t sub_218B8F72C(uint64_t result, uint64_t a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  int i;
  uint64_t j;
  int v9;
  BOOL v10;
  unsigned int v11;
  int v12;

  if (a4 >= 1)
  {
    for (i = 0; i != a4; ++i)
    {
      if (a3 >= 1)
      {
        for (j = 0; j != a3; *(_BYTE *)(result + j++) = v12 & ~(v12 >> 31))
        {
          v9 = *(__int16 *)(a6 + 2 * j) * a7;
          v10 = v9 < 0;
          if (v9 < 0)
            v9 = -v9;
          v11 = (v9 + 32) >> 6;
          if (v10)
            v11 = -v11;
          v12 = v11 + a5;
          if (v12 >= 255)
            v12 = 255;
        }
      }
      result += a2;
      a6 += 2 * a3;
    }
  }
  return result;
}

uint64_t sub_218B8F7A4(uint64_t a1, int a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  int v12;
  unsigned int v13;

  v3 = (a3 + a2) >> 1;
  if (a2 >= 1)
  {
    v4 = a2;
    v5 = (unsigned __int8 *)(a1 + 1);
    do
    {
      v6 = *v5++;
      v3 += v6;
      --v4;
    }
    while (v4);
  }
  if (a3 >= 1)
  {
    v7 = a3;
    v8 = (unsigned __int8 *)(a1 - 1);
    do
    {
      v9 = *v8--;
      v3 += v9;
      --v7;
    }
    while (v7);
  }
  v10 = v3 >> __clz(__rbit32(a3 + a2));
  if (2 * a2 < a3 || 2 * a3 < a2)
    v12 = 13108;
  else
    v12 = 21846;
  v13 = (v10 * v12) >> 16;
  if (a2 == a3)
    return v10;
  else
    return v13;
}

unint64_t sub_218B8F828(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, signed int a6, signed int a7, int a8, int a9)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  char v24;
  __int16 v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;

  v11 = result;
  v12 = (a7 - 4 * a5);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = (a6 - 4 * a4);
    v15 = a3 << a9;
    v16 = 2 * a6;
    v17 = a2 + a3;
    v18 = (char *)result;
    while ((int)v14 < 1)
    {
      result = 0;
LABEL_15:
      if ((int)result < a6)
      {
        result = result;
        v25 = *(_WORD *)(v11 + 2 * (v14 & ~((int)v14 >> 31)) - 2 + v16 * v13);
        do
          *(_WORD *)&v18[2 * result++] = v25;
        while (a6 != result);
      }
      v18 += v16;
      a2 += v15;
      ++v13;
      v17 += v15;
      if (v13 == v12)
        goto LABEL_21;
    }
    v19 = 0;
    v20 = 1;
    while (1)
    {
      v21 = (int)((_DWORD)v19 << a8);
      v22 = *(unsigned __int8 *)(a2 + v21);
      if (a8)
      {
        v22 += *(unsigned __int8 *)(a2 + v20);
        if (!a9)
          goto LABEL_11;
        v23 = v22 + *(unsigned __int8 *)(a2 + v21 + a3);
        v22 = *(unsigned __int8 *)(v17 + v20);
      }
      else
      {
        if (!a9)
        {
LABEL_11:
          v24 = 2;
          goto LABEL_12;
        }
        v23 = *(unsigned __int8 *)(a2 + v21 + a3);
      }
      v22 += v23;
      v24 = 1;
LABEL_12:
      *(_WORD *)&v18[2 * (_QWORD)v19] = v22 << (v24 + (a8 == 0));
      v19 = (char *)v19 + 1;
      v20 += 2;
      if ((void *)v14 == v19)
      {
        result = v14;
        goto LABEL_15;
      }
    }
  }
  LODWORD(v12) = 0;
  v18 = (char *)result;
LABEL_21:
  v26 = a7 - v12;
  if (a7 > (int)v12)
  {
    do
    {
      result = (unint64_t)memcpy(v18, &v18[-2 * a6], 2 * a6);
      v18 += 2 * a6;
      --v26;
    }
    while (v26);
  }
  if (a7 >= 1)
  {
    v27 = 0;
    v28 = __clz(__rbit32(a7)) + __clz(__rbit32(a6));
    v29 = 1 << v28 >> 1;
    v30 = v11;
    do
    {
      if (a6 >= 1)
      {
        v31 = 0;
        do
        {
          v29 += *(__int16 *)(v30 + v31);
          v31 += 2;
        }
        while (2 * a6 != v31);
      }
      ++v27;
      v30 += 2 * a6;
    }
    while (v27 != a7);
    v32 = 0;
    v33 = v29 >> v28;
    do
    {
      if (a6 >= 1)
      {
        v34 = 0;
        do
        {
          *(_WORD *)(v11 + v34) -= v33;
          v34 += 2;
        }
        while (2 * a6 != v34);
      }
      ++v32;
      v11 += 2 * a6;
    }
    while (v32 != a7);
  }
  return result;
}

uint64_t sub_218B8FA60(uint64_t result, int a2, uint64_t a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v5 = a5 - 1;
  if (a2 < 2)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v6 = 0;
    v7 = (a2 - 1);
    do
    {
      v8 = 0;
      v9 = 0;
      if ((int)v6 >= v5)
        v10 = a5 - 1;
      else
        v10 = v6;
      if (v6 < a4)
        v10 = a4;
      *(_BYTE *)(result + 2 * v6) = *(_BYTE *)(a3 + v10);
      do
      {
        v11 = v6 + v8 - 1;
        if (v11 >= v5)
          v11 = a5 - 1;
        if (v6 + v8 <= a4)
          v12 = a4;
        else
          v12 = v11;
        v9 += byte_218BBFA18[v8++] * *(unsigned __int8 *)(a3 + v12);
      }
      while (v8 != 4);
      v13 = (v9 + 8) >> 4;
      if (v13 >= 255)
        v13 = 255;
      *(_BYTE *)(result + ((2 * v6++) | 1)) = v13 & ~(v13 >> 31);
    }
    while (v6 != v7);
  }
  if ((int)v7 < v5)
    v5 = v7;
  if ((int)v7 < a4)
    v5 = a4;
  *(_BYTE *)(result + 2 * v7) = *(_BYTE *)(a3 + v5);
  return result;
}

uint64_t sub_218B8FB28(uint64_t result, int a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v8;
  uint64_t i;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t j;
  int v14;
  int v15;
  int v16;

  if (a2 >= a3)
    v8 = a3;
  else
    v8 = a2;
  if ((int)v8 < 1)
  {
    LODWORD(v8) = 0;
  }
  else
  {
    for (i = 0; i != v8; ++i)
    {
      if ((int)i >= a7 - 1)
        v10 = a7 - 1;
      else
        v10 = i;
      if (i < a6)
        v10 = a6;
      *(_BYTE *)(result + i) = *(_BYTE *)(a5 + v10);
    }
  }
  if (a4 >= a2)
    v11 = a2;
  else
    v11 = a4;
  if ((int)v8 < (int)v11)
  {
    v8 = v8;
    do
    {
      v12 = 0;
      for (j = -2; j != 3; ++j)
      {
        if ((int)v8 + (int)j >= a7 - 1)
          v14 = a7 - 1;
        else
          v14 = v8 + j;
        if (v8 + j >= a6)
          v15 = v14;
        else
          v15 = a6;
        v12 += byte_218BBFA1C[5 * (a8 - 1) + 2 + j] * *(unsigned __int8 *)(a5 + v15);
      }
      *(_BYTE *)(result + v8++) = (v12 + 8) >> 4;
    }
    while (v8 != v11);
    LODWORD(v8) = v11;
  }
  if ((int)v8 < a2)
  {
    v8 = v8;
    do
    {
      if ((int)v8 >= a7 - 1)
        v16 = a7 - 1;
      else
        v16 = v8;
      if ((int)v8 < a6)
        v16 = a6;
      *(_BYTE *)(result + v8++) = *(_BYTE *)(a5 + v16);
    }
    while (a2 != v8);
  }
  return result;
}

_DWORD *sub_218B8FC34(_DWORD *result, uint64_t a2, int a3, int a4, int a5)
{
  int i;
  unint64_t j;

  if (a3 < 5)
  {
    if (a4 >= 1)
    {
      do
      {
        if (a3 >= 1)
          *result = 16843009 * a5;
        result = (_DWORD *)((char *)result + a2);
        --a4;
      }
      while (a4);
    }
  }
  else if (a4 >= 1)
  {
    for (i = 0; i != a4; ++i)
    {
      for (j = 0; j < a3; j += 8)
        *(_QWORD *)&result[j / 4] = 0x101010101010101 * a5;
      result = (_DWORD *)((char *)result + a2);
    }
  }
  return result;
}

_QWORD *sub_218B8FCAC(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v9;

  v9 = sub_218B91228(a3, a4, a5);
  return sub_218B916C0(a1, a2, a4, a5, v9);
}

_QWORD *sub_218B8FD10(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  return sub_218B916C0(a1, a2, a4, a5, (a9 + 1) >> 1);
}

_QWORD *sub_218B8FD2C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v5;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;

  v5 = a4 >> 1;
  if (a4 >= 1)
  {
    v6 = a4;
    v7 = (unsigned __int16 *)(a3 + 2);
    do
    {
      v8 = *v7++;
      v5 += v8;
      --v6;
    }
    while (v6);
  }
  return sub_218B916C0(a1, a2, a4, a5, v5 >> __clz(__rbit32(a4)));
}

_QWORD *sub_218B8FD70(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v5;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;

  v5 = a5 >> 1;
  if (a5 >= 1)
  {
    v6 = a5;
    v7 = (unsigned __int16 *)(a3 - 2);
    do
    {
      v8 = *v7--;
      v5 += v8;
      --v6;
    }
    while (v6);
  }
  return sub_218B916C0(a1, a2, a4, a5, v5 >> __clz(__rbit32(a5)));
}

uint64_t sub_218B8FDB4(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t i;
  uint64_t v6;
  __int16 v7;

  if (a5 >= 1)
  {
    for (i = 0; i != a5; ++i)
    {
      if (a4 >= 1)
      {
        v6 = 0;
        v7 = *(_WORD *)(a3 + 2 * ~i);
        do
        {
          *(_WORD *)(result + v6) = v7;
          v6 += 2;
        }
        while (2 * a4 != v6);
      }
      result += a2 & 0xFFFFFFFFFFFFFFFELL;
    }
  }
  return result;
}

char *sub_218B8FE04(char *__dst, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  char *v6;
  const void *v7;
  size_t v8;
  unint64_t v9;

  if (a5 >= 1)
  {
    v5 = a5;
    v6 = __dst;
    v7 = (const void *)(a3 + 2);
    v8 = 2 * a4;
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      __dst = (char *)memcpy(v6, v7, v8);
      v6 += v9;
      --v5;
    }
    while (v5);
  }
  return __dst;
}

uint64_t sub_218B8FE68(uint64_t result, uint64_t a2, unsigned __int16 *a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = *a3;
    v7 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v8 = a5;
    do
    {
      if (a4 >= 1)
      {
        v9 = 0;
        v10 = a3[~v5];
        v11 = v10 - v6;
        if (v10 - v6 >= 0)
          v12 = v10 - v6;
        else
          v12 = v6 - v10;
        do
        {
          v13 = a3[v9 + 1];
          v14 = v6 - v13;
          if (v6 - v13 < 0)
            v14 = v13 - v6;
          v15 = v6 - (v11 + v13);
          if (v15 < 0)
            v15 = v11 + v13 - v6;
          if (v12 > v15)
            LOWORD(v13) = v6;
          if (v14 <= v15 && v14 <= v12)
            LOWORD(v13) = v10;
          *(_WORD *)(result + v9 * 2) = v13;
          ++v9;
        }
        while (a4 != v9);
      }
      ++v5;
      result += v7;
    }
    while (v5 != v8);
  }
  return result;
}

uint64_t sub_218B8FEF4(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = &byte_218BBF940[a5];
    v7 = *(unsigned __int16 *)(a3 + 2 * a4);
    v8 = *(unsigned __int16 *)(a3 - 2 * a5);
    v9 = a5;
    do
    {
      if (a4 >= 1)
      {
        v10 = 0;
        v11 = v6[v5];
        do
        {
          *(_WORD *)(result + 2 * v10) = ((256 - v11) * v8
                                        + 256
                                        + *(unsigned __int16 *)(a3 + 2 + 2 * v10) * v11
                                        + *(unsigned __int16 *)(a3 + 2 * ~v5) * byte_218BBF940[a4 + v10]
                                        + (256 - byte_218BBF940[a4 + v10]) * v7) >> 9;
          ++v10;
        }
        while (a4 != v10);
      }
      ++v5;
      result += a2 & 0xFFFFFFFFFFFFFFFELL;
    }
    while (v5 != v9);
  }
  return result;
}

uint64_t sub_218B8FFA8(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = *(unsigned __int16 *)(a3 - 2 * a5);
    v7 = a2 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if (a4 >= 1)
      {
        v8 = 0;
        v9 = byte_218BBF940[a5 + v5];
        do
        {
          *(_WORD *)(result + v8) = ((256 - v9) * v6 + 128 + *(unsigned __int16 *)(a3 + 2 + v8) * v9) >> 8;
          v8 += 2;
        }
        while (2 * a4 != v8);
      }
      ++v5;
      result += v7;
    }
    while (v5 != a5);
  }
  return result;
}

uint64_t sub_218B90028(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t i;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = *(unsigned __int16 *)(a3 + 2 * a4);
    do
    {
      if (a4 >= 1)
      {
        for (i = 0; i != a4; ++i)
          *(_WORD *)(result + 2 * i) = (*(unsigned __int16 *)(a3 + 2 * ~v5) * byte_218BBF940[a4 + i]
                                      + (256 - byte_218BBF940[a4 + i]) * v6
                                      + 128) >> 8;
      }
      ++v5;
      result += a2 & 0xFFFFFFFFFFFFFFFELL;
    }
    while (v5 != a5);
  }
  return result;
}

uint64_t sub_218B900A4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7, uint64_t a8, int a9)
{
  _WORD *v13;
  unsigned int v14;
  _BYTE *v15;
  int v16;
  signed int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  _WORD *v28;
  __int16 v29;
  _BYTE v30[256];
  uint64_t v31;

  v13 = (_WORD *)result;
  v31 = *MEMORY[0x24BDAC8D0];
  v14 = *(unsigned __int16 *)((char *)word_218BBF9C0 + (a6 & 0x1FE));
  if (a6 < 0x400)
    goto LABEL_2;
  v17 = a5 + a4;
  if ((a6 & 0x1FF) < 0x33 || (int)(0x10u >> ((a6 & 0x200) != 0)) < v17)
  {
    result = sub_218B8F658(a5 + (int)a4, 90 - (a6 & 0x1FF), (a6 >> 9) & 1);
    if ((_DWORD)result)
    {
      v22 = a3 + 2;
      if ((int)a4 >= a5)
        v23 = a5;
      else
        v23 = a4;
      v15 = v30;
      result = sub_218B915B4((uint64_t)v30, a5 + (int)a4, 0, a5 + (int)a4, v22, -1, v23 + (int)a4, result);
      goto LABEL_17;
    }
LABEL_2:
    v15 = (_BYTE *)(a3 + 2);
    if ((int)a4 >= a5)
      v16 = a5;
    else
      v16 = a4;
    v17 = v16 + a4;
LABEL_17:
    v20 = v17 - 1;
    v21 = 1;
    goto LABEL_18;
  }
  v18 = a3 + 2;
  if ((int)a4 >= a5)
    v19 = a5;
  else
    v19 = a4;
  v15 = v30;
  result = sub_218B914E4((uint64_t)v30, a5 + (int)a4, v18, -1, v19 + (int)a4, a9);
  v20 = 2 * v17 - 2;
  v14 *= 2;
  v21 = 2;
LABEL_18:
  if (a5 >= 1)
  {
    v24 = 0;
    v25 = v14;
    do
    {
      if ((int)a4 >= 1)
      {
        v26 = 0;
        v27 = v25 >> 6;
        v28 = v13;
        result = a4;
        while (v27 < v20)
        {
          v13[v26++] = ((v25 & 0x3E) * *(unsigned __int16 *)&v15[2 * v27 + 2]
                      + (64 - (v25 & 0x3E)) * *(unsigned __int16 *)&v15[2 * v27]
                      + 32) >> 6;
          v27 += v21;
          result = (result - 1);
          ++v28;
          if (a4 == v26)
            goto LABEL_28;
        }
        if ((int)a4 - (int)v26 >= 1)
        {
          v29 = *(_WORD *)&v15[2 * v20];
          result = result;
          do
          {
            *v28++ = v29;
            --result;
          }
          while (result);
        }
      }
LABEL_28:
      ++v24;
      v25 += v14;
      v13 = (_WORD *)((char *)v13 + (a2 & 0xFFFFFFFFFFFFFFFELL));
    }
    while (v24 != a5);
  }
  return result;
}

uint64_t sub_218B902B0(uint64_t a1, uint64_t a2, _WORD *a3, int a4, int a5, unsigned int a6, int a7, int a8, int a9)
{
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  signed int v19;
  signed int v20;
  int v22;
  int v23;
  uint64_t result;
  int v25;
  int v26;
  int v27;
  _WORD *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned __int16 *v33;
  int v34;
  _WORD v37[65];
  _QWORD v38[18];

  v38[16] = *MEMORY[0x24BDAC8D0];
  v14 = (a6 & 0x1FF) - 90;
  v15 = *(unsigned __int16 *)((char *)word_218BBF9C0 + (v14 & 0xFFFFFFFE));
  v16 = *(unsigned __int16 *)((char *)word_218BBF9C0 + ((180 - (a6 & 0x1FF)) & 0xFFFFFFFE));
  if (a6 <= 0x3FF)
  {
    v17 = 0;
    goto LABEL_3;
  }
  v19 = a5 + a4;
  v20 = 0x10u >> ((a6 & 0x200) != 0);
  v17 = (a6 & 0x1FF) > 0x8C && v20 >= v19;
  if (v14 > 0x27 || v20 < v19)
  {
    v25 = sub_218B8F658(v19, v14, (a6 >> 9) & 1);
    if (v25)
    {
      sub_218B915B4((uint64_t)v38, a4, 0, a7, (uint64_t)(a3 + 1), -1, a4, v25);
LABEL_19:
      v22 = 1;
      if (v17)
        goto LABEL_20;
      goto LABEL_13;
    }
LABEL_3:
    __memcpy_chk();
    goto LABEL_19;
  }
  sub_218B914E4((uint64_t)v37, a4 + 1, (uint64_t)a3, 0, a4 + 1, a9);
  v16 *= 2;
  v22 = 2;
  if (v17)
  {
LABEL_20:
    result = sub_218B914E4((uint64_t)&v37[-2 * a5], a5 + 1, (uint64_t)&a3[-a5], 0, a5 + 1, a9);
    v15 *= 2;
    goto LABEL_21;
  }
LABEL_13:
  if (a6 >= 0x400 && (v23 = sub_218B8F658(a5 + a4, 180 - (a6 & 0x1FF), (a6 >> 9) & 1)) != 0)
    result = sub_218B915B4((uint64_t)&v37[-a5], a5, a5 - a8, a5, (uint64_t)&a3[-a5], 0, a5 + 1, v23);
  else
    result = (uint64_t)memcpy(&v37[-a5], &a3[-a5], 2 * a5);
LABEL_21:
  v37[0] = *a3;
  if (a5 >= 1)
  {
    v26 = 0;
    v27 = v22 << 6;
    v28 = &v37[~v17];
    do
    {
      v27 -= v16;
      if (a4 >= 1)
      {
        v29 = 0;
        result = v27 & 0x3E;
        v30 = v27 >> 6;
        v31 = (v26 << (v17 | 6)) - v15;
        do
        {
          if (v30 < 0)
          {
            v34 = v31 & 0x3E;
            v32 = (64 - v34) * (unsigned __int16)v28[-(v31 >> 6)];
            v33 = &v28[~(v31 >> 6)];
          }
          else
          {
            v32 = (64 - result) * (unsigned __int16)v37[v30];
            v33 = &v37[v30 + 1];
            v34 = v27 & 0x3E;
          }
          *(_WORD *)(a1 + v29) = (v32 + v34 * *v33 + 32) >> 6;
          v30 += v22;
          v29 += 2;
          v31 -= v15;
        }
        while (2 * a4 != v29);
      }
      ++v26;
      a1 += a2 & 0xFFFFFFFFFFFFFFFELL;
    }
    while (v26 != a5);
  }
  return result;
}

uint64_t sub_218B90584(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6, uint64_t a7, uint64_t a8, int a9)
{
  _WORD *v13;
  int v14;
  unsigned int v15;
  _WORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  signed int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  int64_t v27;
  uint64_t v28;
  _WORD *v29;
  _WORD v30[128];
  uint64_t v31;

  v13 = (_WORD *)result;
  v31 = *MEMORY[0x24BDAC8D0];
  v14 = a6 & 0x1FF;
  v15 = word_218BBF9C0[(270 - v14) >> 1];
  if (a6 < 0x400)
    goto LABEL_2;
  v20 = a5 + a4;
  if ((v14 - 220) >= 0xFFFFFFD8 && (int)(0x10u >> ((a6 & 0x200) != 0)) >= v20)
  {
    result = sub_218B914E4((uint64_t)v30, a5 + a4, a3 - 2 * v20, (a4 - a5) & ~((a4 - a5) >> 31), v20 + 1, a9);
    v18 = 2 * v20 - 2;
    v16 = &v30[v18];
    v15 *= 2;
    v19 = 2;
    goto LABEL_11;
  }
  result = sub_218B8F658(a5 + a4, v14 - 180, (a6 >> 9) & 1);
  if ((_DWORD)result)
  {
    result = sub_218B915B4((uint64_t)v30, a5 + a4, 0, a5 + a4, a3 - 2 * v20, (a4 - a5) & ~((a4 - a5) >> 31), v20 + 1, result);
    LODWORD(v18) = v20 - 1;
    v16 = &v30[v20 - 1];
    v19 = 1;
  }
  else
  {
LABEL_2:
    v16 = (_WORD *)(a3 - 2);
    if (a4 >= a5)
      v17 = a5;
    else
      v17 = a4;
    LODWORD(v18) = a5 + v17 - 1;
    v19 = 1;
  }
LABEL_11:
  if (a4 >= 1)
  {
    v21 = 0;
    v22 = a4;
    v23 = a2 & 0xFFFFFFFFFFFFFFFELL;
    result = a5;
    v24 = v15;
    do
    {
      if (a5 >= 1)
      {
        v25 = 0;
        v26 = &v16[-(v24 >> 6)];
        v27 = (unint64_t)~(v24 >> 6) << 32;
        v28 = (v24 >> 6) - v19;
        v29 = v13;
        while (1)
        {
          v28 += v19;
          if (v28 >= (int)v18)
            break;
          *v29 = ((v24 & 0x3E) * *(unsigned __int16 *)((char *)v16 + (v27 >> 31)) + (64 - (v24 & 0x3E)) * *v26 + 32) >> 6;
          v29 = (_WORD *)((char *)v29 + v23);
          v26 -= v19;
          v27 -= v19 << 32;
          if (a5 == ++v25)
            goto LABEL_19;
        }
        do
        {
          *v29 = v16[-(int)v18];
          ++v25;
          v29 = (_WORD *)((char *)v29 + v23);
        }
        while (v25 < a5);
      }
LABEL_19:
      ++v21;
      v24 += v15;
      ++v13;
    }
    while (v21 != v22);
  }
  return result;
}

uint64_t sub_218B907D0(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, __int16 a6, uint64_t a7, uint64_t a8, int a9)
{
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  char v32;
  int v33;
  int v34;
  __int16 v35;

  if (a5 >= 1)
  {
    v9 = 0;
    v10 = (char *)&unk_218BBFA40 + 64 * (unint64_t)(a6 & 0x1FF);
    v11 = a2 >> 1;
    v12 = (unsigned __int16 *)(a3 + 2);
    v13 = 2 * a2;
    v14 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v15 = a5;
    do
    {
      if (a4 >= 1)
      {
        v16 = 0;
        v17 = (unsigned __int16 *)(a3 - 2 * v9);
        v18 = v17 - 1;
        v19 = -1;
        v20 = result;
        do
        {
          v21 = *v17;
          v22 = *v12;
          v23 = v12[1];
          v24 = v12[2];
          v17 = v12 + 3;
          v25 = v12[3];
          v26 = 1;
          v27 = v20;
          v28 = v10;
          v29 = *v18;
          v30 = v18[v19];
          do
          {
            v31 = 0;
            v32 = v26;
            do
            {
              v33 = v28[v31] * v21
                  + v28[v31 + 8] * v22
                  + v28[v31 + 16] * v23
                  + v28[v31 + 24] * v24
                  + v28[v31 + 32] * v25
                  + v28[v31 + 40] * v29
                  + v28[v31 + 48] * v30;
              v34 = (v33 + 8) >> 4;
              if (v34 >= a9)
                LOWORD(v34) = a9;
              if (v33 >= -8)
                v35 = v34;
              else
                v35 = 0;
              *(_WORD *)(v27 + 2 * v31++) = v35;
            }
            while (v31 != 4);
            v26 = 0;
            v28 += 4;
            v27 += v14;
          }
          while ((v32 & 1) != 0);
          v18 = (unsigned __int16 *)(result + ((2 * v16) | 6));
          v12 += 4;
          v20 += 8;
          v16 += 4;
          v19 = v11;
        }
        while (v16 < a4);
      }
      v12 = (unsigned __int16 *)(result + 2 * v11);
      result += v13;
      v9 += 2;
    }
    while (v9 < v15);
  }
  return result;
}

unint64_t sub_218B9093C(unint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, signed int a6, signed int a7)
{
  return sub_218B912AC(a1, a2, a3, a4, a5, a6, a7, 1, 1);
}

unint64_t sub_218B90964(unint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, signed int a6, signed int a7)
{
  return sub_218B912AC(a1, a2, a3, a4, a5, a6, a7, 1, 0);
}

unint64_t sub_218B90988(unint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, signed int a6, signed int a7)
{
  return sub_218B912AC(a1, a2, a3, a4, a5, a6, a7, 0, 0);
}

uint64_t sub_218B909AC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, int a8)
{
  int v15;

  v15 = sub_218B91228(a3, a4, a5);
  return sub_218B911AC(a1, a2, a4, a5, v15, a6, a7, a8);
}

uint64_t sub_218B90A28(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, int a8)
{
  return sub_218B911AC(a1, a2, a4, a5, (a8 + 1) >> 1, a6, a7, a8);
}

uint64_t sub_218B90A40(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, int a8)
{
  unsigned int v8;
  uint64_t v9;
  unsigned __int16 *v10;
  int v11;

  v8 = a4 >> 1;
  if (a4 >= 1)
  {
    v9 = a4;
    v10 = (unsigned __int16 *)(a3 + 2);
    do
    {
      v11 = *v10++;
      v8 += v11;
      --v9;
    }
    while (v9);
  }
  return sub_218B911AC(a1, a2, a4, a5, v8 >> __clz(__rbit32(a4)), a6, a7, a8);
}

uint64_t sub_218B90A80(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, int a8)
{
  unsigned int v8;
  uint64_t v9;
  unsigned __int16 *v10;
  int v11;

  v8 = a5 >> 1;
  if (a5 >= 1)
  {
    v9 = a5;
    v10 = (unsigned __int16 *)(a3 - 2);
    do
    {
      v11 = *v10--;
      v8 += v11;
      --v9;
    }
    while (v9);
  }
  return sub_218B911AC(a1, a2, a4, a5, v8 >> __clz(__rbit32(a5)), a6, a7, a8);
}

uint64_t sub_218B90AC0(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5, int a6)
{
  int i;
  uint64_t j;
  unsigned int v8;
  _WORD *v9;

  if (a6 >= 1)
  {
    for (i = 0; i != a6; ++i)
    {
      if (a5 >= 1)
      {
        for (j = 0; j < a5; j += 2)
        {
          v8 = *a4++;
          v9 = (_WORD *)(result + 2 * j);
          *v9 = *(_WORD *)(a3 + 2 * (v8 & 7));
          v9[1] = *(_WORD *)(a3 + (((unint64_t)v8 >> 3) & 0x1E));
        }
      }
      result += a2 & 0xFFFFFFFFFFFFFFFELL;
    }
  }
  return result;
}

int16x8_t *sub_218B90B24(int16x8_t *a1, uint64_t a2, int8x16_t *a3, int a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v14;
  int v15;
  signed int v16;
  int v17;
  char v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int16x8_t v24[37];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v14 = *(unsigned __int16 *)((char *)word_218BBF9C0 + (a6 & 0x1FE));
  if (a6 < 0x400)
    goto LABEL_2;
  v16 = a5 + a4;
  if ((a6 & 0x1FF) < 0x33 || (int)(0x10u >> ((a6 & 0x200) != 0)) < v16)
  {
    v21 = sub_218B8F658((int)a5 + a4, 90 - (a6 & 0x1FF), (a6 >> 9) & 1);
    if (v21)
    {
      if (a4 >= (int)a5)
        v22 = a5;
      else
        v22 = a4;
      sub_218B54D94((uint16x8_t *)v24, a5 + a4, a3, v22 + a4, v21);
      goto LABEL_17;
    }
LABEL_2:
    if (a4 >= (int)a5)
      v15 = a5;
    else
      v15 = a4;
    v16 = v15 + a4;
    __memcpy_chk();
LABEL_17:
    v19 = v16 - 1;
    v18 = 1;
    v20 = 1;
    goto LABEL_18;
  }
  if (a4 >= (int)a5)
    v17 = a5;
  else
    v17 = a4;
  sub_218B54C78(v24, (a5 + a4), a3, v17 + a4, a9);
  v18 = 0;
  v19 = 2 * v16 - 2;
  v14 = (2 * v14);
  v20 = 2;
LABEL_18:
  sub_218B54FBC((int16x8_t *)&v24[0].i16[v19 + 1], v24[0].u16[v19], v20 * (a4 + 15));
  if ((v18 & 1) != 0)
    return (int16x8_t *)sub_218B54FD0((uint64_t)a1, a2, (uint64_t)v24, a4, a5, v14, v19);
  else
    return sub_218B5526C(a1, a2, (uint64_t)v24, a4, a5, v14, v19);
}

int8x16_t *sub_218B90CB8(int8x16_t *a1, uint64_t a2, int8x16_t *a3, signed int a4, signed int a5, unsigned int a6, signed int a7, signed int a8, unsigned int a9)
{
  int v13;
  unsigned int v14;
  int v15;
  _BOOL4 v16;
  char v17;
  signed int v20;
  signed int v21;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v30;
  int v32;
  int8x16_t v33;
  int16x8_t v34[8];
  int16x8_t v35[8];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v13 = (a6 >> 9) & 1;
  v14 = (a6 & 0x1FF) - 90;
  v30 = *(unsigned __int16 *)((char *)word_218BBF9C0 + (v14 & 0xFFFFFFFE));
  v15 = 180 - (a6 & 0x1FF);
  v32 = *(unsigned __int16 *)((char *)word_218BBF9C0 + (v15 & 0xFFFFFFFE));
  if (a6 <= 0x3FF)
  {
    v16 = 0;
LABEL_3:
    __memcpy_chk();
    goto LABEL_4;
  }
  v20 = a5 + a4;
  v21 = 0x10u >> ((a6 & 0x200) != 0);
  v16 = (a6 & 0x1FF) > 0x8C && v21 >= v20;
  if (v14 <= 0x27 && v21 >= v20)
  {
    sub_218B54D1C(v34, a4, a3, a9);
    v32 *= 2;
    v17 = 1;
    if (v16)
      goto LABEL_5;
    goto LABEL_15;
  }
  v26 = sub_218B8F658(v20, v14, (a6 >> 9) & 1);
  if (!v26)
    goto LABEL_3;
  if (a7 >= a4)
    v27 = a4;
  else
    v27 = a7;
  sub_218B54D94((uint16x8_t *)&v34[0].i16[1], v27, a3, a4, v26);
  if (a4 > a7)
    memcpy(&v34[0].i16[a7 + 1], &a3->i16[a7 + 1], 2 * (a4 - a7));
LABEL_4:
  v17 = 0;
  if (v16)
  {
LABEL_5:
    v33.i16[0] = a3->i16[0];
    sub_218B553C4((uint64_t *)((char *)v33.i64 + 2), (uint64_t)a3, a5);
    sub_218B54D1C(v35, a5, &v33, a9);
    v35[0].i16[0] = a3->i16[0];
    v34[0].i16[0] = v35[0].i16[0];
    return sub_218B56010(a1, a2, (uint64_t)v34, (__int128 *)v35[0].i8, a4, a5, v32, 2 * v30);
  }
LABEL_15:
  if (a6 >= 0x400 && (v23 = sub_218B8F658(a5 + a4, v15, v13)) != 0)
  {
    v24 = v23;
    v33.i16[0] = a3->i16[0];
    sub_218B553C4((uint64_t *)((char *)v33.i64 + 2), (uint64_t)a3, a5);
    if (a8 >= a5)
      v25 = a5;
    else
      v25 = a8;
    sub_218B54D94((uint16x8_t *)&v35[0].i16[1], v25, &v33, a5, v24);
    if (a5 > a8)
      memcpy(&v35[0].i16[a8 + 1], &v33.i16[a8 + 1], 2 * (a5 - a8));
  }
  else
  {
    sub_218B553C4((uint64_t *)((char *)v35[0].i64 + 2), (uint64_t)a3, a5);
  }
  v35[0].i16[0] = a3->i16[0];
  v34[0].i16[0] = v35[0].i16[0];
  if ((v17 & 1) != 0)
    return sub_218B55CCC(a1, a2, (uint64_t)v34, (uint64_t)v35, a4, a5, v32, v30);
  else
    return (int8x16_t *)sub_218B553F0((uint64_t)a1, a2, (uint64_t)v34, (uint64_t)v35, a4);
}

_OWORD *sub_218B90FB4(_OWORD *a1, uint64_t a2, __int16 *a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  int v14;
  uint64_t v15;
  int v16;
  signed int v17;
  int v18;
  int v19;
  char v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int16x8_t v29[35];
  int8x16_t v30[18];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v14 = a6 & 0x1FF;
  v15 = word_218BBF9C0[(270 - v14) >> 1];
  if (a6 < 0x400)
    goto LABEL_2;
  v17 = a5 + a4;
  if ((v14 - 220) < 0xFFFFFFD8 || (int)(0x10u >> ((a6 & 0x200) != 0)) < v17)
  {
    v23 = sub_218B8F658(a5 + (int)a4, v14 - 180, (a6 >> 9) & 1);
    if (v23)
    {
      v24 = v23;
      v30[0].i16[0] = *a3;
      if ((int)a4 <= a5)
        v25 = a5;
      else
        v25 = a4;
      if ((int)a4 >= a5)
        v26 = a5;
      else
        v26 = a4;
      sub_218B553C4((uint64_t *)((char *)v30[0].i64 + 2), (uint64_t)a3, v25 + a5);
      sub_218B54D94((uint16x8_t *)v29, a5 + a4, v30, v26 + a5, v24);
      goto LABEL_23;
    }
LABEL_2:
    if ((int)a4 >= a5)
      v16 = a5;
    else
      v16 = a4;
    v17 = v16 + a5;
    sub_218B553C4(v29, (uint64_t)a3, v16 + a5);
LABEL_23:
    v21 = v17 - 1;
    v20 = 1;
    v22 = 1;
    goto LABEL_24;
  }
  v30[0].i16[0] = *a3;
  if ((int)a4 <= a5)
    v18 = a5;
  else
    v18 = a4;
  if ((int)a4 >= a5)
    v19 = a5;
  else
    v19 = a4;
  sub_218B553C4((uint64_t *)((char *)v30[0].i64 + 2), (uint64_t)a3, v18 + a5);
  sub_218B54C78(v29, (a5 + a4), v30, v19 + a5, a9);
  v20 = 0;
  v21 = 2 * v17 - 2;
  v15 = (2 * v15);
  v22 = 2;
LABEL_24:
  v27 = 63 - v21;
  if (63 - v21 <= a5 + 15)
    v27 = a5 + 15;
  sub_218B54FBC((int16x8_t *)&v29[0].i16[v21 + 1], v29[0].u16[v21], v27 * v22);
  if ((v20 & 1) != 0)
    return (_OWORD *)sub_218B56360((uint64_t)a1, a2, (uint64_t)v29, a4, a5, v15, v21);
  else
    return sub_218B5678C(a1, a2, (uint64_t)v29, a4, a5, v15, v21);
}

uint64_t sub_218B911AC(uint64_t result, uint64_t a2, int a3, int a4, int a5, uint64_t a6, int a7, int a8)
{
  int i;
  uint64_t v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  int v13;
  __int16 v14;
  __int16 v15;

  if (a4 >= 1)
  {
    for (i = 0; i != a4; ++i)
    {
      if (a3 >= 1)
      {
        v9 = 0;
        do
        {
          v10 = *(__int16 *)(a6 + v9) * a7;
          v11 = v10 < 0;
          if (v10 < 0)
            v10 = -v10;
          v12 = (v10 + 32) >> 6;
          if (v11)
            v12 = -v12;
          v13 = v12 + a5;
          if (v13 >= a8)
            v14 = a8;
          else
            v14 = v13;
          if (v13 >= 0)
            v15 = v14;
          else
            v15 = 0;
          *(_WORD *)(result + v9) = v15;
          v9 += 2;
        }
        while (2 * a3 != v9);
      }
      result += a2 & 0xFFFFFFFFFFFFFFFELL;
      a6 += 2 * a3;
    }
  }
  return result;
}

uint64_t sub_218B91228(uint64_t a1, int a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned __int16 *v5;
  int v6;
  uint64_t v7;
  unsigned __int16 *v8;
  int v9;
  unsigned int v10;
  int v12;
  unsigned int v13;

  v3 = (a3 + a2) >> 1;
  if (a2 >= 1)
  {
    v4 = a2;
    v5 = (unsigned __int16 *)(a1 + 2);
    do
    {
      v6 = *v5++;
      v3 += v6;
      --v4;
    }
    while (v4);
  }
  if (a3 >= 1)
  {
    v7 = a3;
    v8 = (unsigned __int16 *)(a1 - 2);
    do
    {
      v9 = *v8--;
      v3 += v9;
      --v7;
    }
    while (v7);
  }
  v10 = v3 >> __clz(__rbit32(a3 + a2));
  if (2 * a2 < a3 || 2 * a3 < a2)
    v12 = 26215;
  else
    v12 = 43691;
  v13 = (v10 * v12) >> 17;
  if (a2 == a3)
    return v10;
  else
    return v13;
}

unint64_t sub_218B912AC(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, signed int a6, signed int a7, int a8, int a9)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  __int16 v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;

  v11 = result;
  v12 = (a7 - 4 * a5);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = a3 >> 1;
    v15 = (a6 - 4 * a4);
    v16 = 2 * a6;
    v17 = (char *)result;
    while ((int)v15 < 1)
    {
      result = 0;
LABEL_14:
      if ((int)result < a6)
      {
        result = result;
        v23 = *(_WORD *)(v11 + 2 * (v15 & ~((int)v15 >> 31)) - 2 + v16 * v13);
        do
          *(_WORD *)&v17[2 * result++] = v23;
        while (a6 != result);
      }
      v17 += v16;
      a2 += 2 * (v14 << a9);
      if (++v13 == v12)
        goto LABEL_20;
    }
    v18 = 0;
    v19 = 1;
    while (1)
    {
      v20 = (int)((_DWORD)v18 << a8);
      v21 = *(unsigned __int16 *)(a2 + 2 * v20);
      if (a8)
      {
        v21 += *(unsigned __int16 *)(a2 + 2 * v19);
        if (!a9)
          goto LABEL_10;
        v21 += *(unsigned __int16 *)(a2 + 2 * (v14 + v20));
        v20 = v19;
      }
      else if (!a9)
      {
LABEL_10:
        v22 = 2;
        goto LABEL_11;
      }
      v21 += *(unsigned __int16 *)(a2 + 2 * (v14 + v20));
      v22 = 1;
LABEL_11:
      *(_WORD *)&v17[2 * (_QWORD)v18] = v21 << (v22 + (a8 == 0));
      v18 = (char *)v18 + 1;
      v19 += 2;
      if ((void *)v15 == v18)
      {
        result = v15;
        goto LABEL_14;
      }
    }
  }
  LODWORD(v12) = 0;
  v17 = (char *)result;
LABEL_20:
  v24 = a7 - v12;
  if (a7 > (int)v12)
  {
    do
    {
      result = (unint64_t)memcpy(v17, &v17[-2 * a6], 2 * a6);
      v17 += 2 * a6;
      --v24;
    }
    while (v24);
  }
  if (a7 >= 1)
  {
    v25 = 0;
    v26 = __clz(__rbit32(a7)) + __clz(__rbit32(a6));
    v27 = 1 << v26 >> 1;
    v28 = v11;
    do
    {
      if (a6 >= 1)
      {
        v29 = 0;
        do
        {
          v27 += *(__int16 *)(v28 + v29);
          v29 += 2;
        }
        while (2 * a6 != v29);
      }
      ++v25;
      v28 += 2 * a6;
    }
    while (v25 != a7);
    v30 = 0;
    v31 = v27 >> v26;
    do
    {
      if (a6 >= 1)
      {
        v32 = 0;
        do
        {
          *(_WORD *)(v11 + v32) -= v31;
          v32 += 2;
        }
        while (2 * a6 != v32);
      }
      ++v30;
      v11 += 2 * a6;
    }
    while (v30 != a7);
  }
  return result;
}

uint64_t sub_218B914E4(uint64_t result, int a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  __int16 v15;

  v6 = a5 - 1;
  if (a2 < 2)
  {
    LODWORD(v8) = 0;
  }
  else
  {
    v7 = 0;
    v8 = (a2 - 1);
    do
    {
      v9 = 0;
      v10 = 0;
      if ((int)v7 >= v6)
        v11 = a5 - 1;
      else
        v11 = v7;
      if (v7 < a4)
        v11 = a4;
      *(_WORD *)(result + 4 * v7) = *(_WORD *)(a3 + 2 * v11);
      do
      {
        v12 = v7 + v9 - 1;
        if (v12 >= v6)
          v12 = a5 - 1;
        if (v7 + v9 <= a4)
          v13 = a4;
        else
          v13 = v12;
        v10 += byte_218BBFA18[v9++] * *(unsigned __int16 *)(a3 + 2 * v13);
      }
      while (v9 != 4);
      v14 = (v10 + 8) >> 4;
      if (v14 >= a6)
        LOWORD(v14) = a6;
      if (v10 >= -8)
        v15 = v14;
      else
        v15 = 0;
      *(_WORD *)(result + ((4 * v7++) | 2)) = v15;
    }
    while (v7 != v8);
  }
  if ((int)v8 < v6)
    v6 = v8;
  if ((int)v8 < a4)
    v6 = a4;
  *(_WORD *)(result + 2 * (2 * v8)) = *(_WORD *)(a3 + 2 * v6);
  return result;
}

uint64_t sub_218B915B4(uint64_t result, int a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v8;
  uint64_t i;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t j;
  int v14;
  int v15;
  int v16;

  if (a2 >= a3)
    v8 = a3;
  else
    v8 = a2;
  if ((int)v8 < 1)
  {
    LODWORD(v8) = 0;
  }
  else
  {
    for (i = 0; i != v8; ++i)
    {
      if ((int)i >= a7 - 1)
        v10 = a7 - 1;
      else
        v10 = i;
      if (i < a6)
        v10 = a6;
      *(_WORD *)(result + 2 * i) = *(_WORD *)(a5 + 2 * v10);
    }
  }
  if (a4 >= a2)
    v11 = a2;
  else
    v11 = a4;
  if ((int)v8 < (int)v11)
  {
    v8 = v8;
    do
    {
      v12 = 0;
      for (j = -2; j != 3; ++j)
      {
        if ((int)v8 + (int)j >= a7 - 1)
          v14 = a7 - 1;
        else
          v14 = v8 + j;
        if (v8 + j >= a6)
          v15 = v14;
        else
          v15 = a6;
        v12 += byte_218BBFA1C[5 * (a8 - 1) + 2 + j] * *(unsigned __int16 *)(a5 + 2 * v15);
      }
      *(_WORD *)(result + 2 * v8++) = (v12 + 8) >> 4;
    }
    while (v8 != v11);
    LODWORD(v8) = v11;
  }
  if ((int)v8 < a2)
  {
    v8 = v8;
    do
    {
      if ((int)v8 >= a7 - 1)
        v16 = a7 - 1;
      else
        v16 = v8;
      if ((int)v8 < a6)
        v16 = a6;
      *(_WORD *)(result + 2 * v8++) = *(_WORD *)(a5 + 2 * v16);
    }
    while (a2 != v8);
  }
  return result;
}

_QWORD *sub_218B916C0(_QWORD *result, uint64_t a2, int a3, int a4, int a5)
{
  int i;
  uint64_t v6;
  _QWORD *v7;

  if (a4 >= 1)
  {
    for (i = 0; i != a4; ++i)
    {
      if (a3 >= 1)
      {
        v6 = 0;
        v7 = result;
        do
        {
          *v7++ = 0x1000100010001 * a5;
          v6 += 4;
        }
        while (v6 < a3);
      }
      result = (_QWORD *)((char *)result + (a2 & 0xFFFFFFFFFFFFFFFELL));
    }
  }
  return result;
}

uint64_t sub_218B91714(uint64_t a1, int a2, int a3, int a4)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int i;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;

  sub_218B588EC();
  if (v7)
  {
    sub_218B588EC();
    if (v8)
    {
      sub_218B588EC();
      a4 += v9 + 1;
    }
    v10 = 1 << a4;
  }
  else
  {
    v10 = 0;
  }
  for (i = 0; a4; i = v12 | (2 * i))
  {
    --a4;
    sub_218B588EC();
  }
  v13 = i + v10;
  v14 = 2 * a2;
  v15 = a3 - 1 - a2;
  v16 = i + v10 + 1;
  v17 = v15 - (v16 >> 1);
  if (((i + v10) & 1) == 0)
    v17 = v15 + ((i + v10) >> 1);
  if (v13 <= 2 * v15)
    v18 = v17;
  else
    v18 = i + v10;
  v19 = a3 - 1 - v18;
  v20 = a2 - (v16 >> 1);
  if ((v13 & 1) == 0)
    v20 = a2 + (v13 >> 1);
  if (v14 >= v13)
    v13 = v20;
  if (v14 <= a3)
    return v13;
  else
    return v19;
}

uint16x4_t *sub_218B917EC(uint16x4_t *result, uint64_t a2, _OWORD *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  int32x4_t *v6;
  _OWORD *v7;
  uint64_t i;
  __int32 v9;
  __int32 v10;
  __int32 v11;
  __int32 v12;
  int v13;
  __int32 v14;
  __int32 v15;
  uint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  uint64_t v28;

  v5 = 0;
  v28 = *MEMORY[0x24BDAC8D0];
  v6 = &v24;
  v7 = a3;
  do
  {
    for (i = 0; i != 4; ++i)
      v6->i32[i] = SLODWORD(v7[i]) >> 2;
    v9 = v6->i32[1];
    v10 = v6->i32[3];
    v11 = v9 + v6->i32[0];
    v12 = v6->i32[2] - v10;
    v13 = (v11 - v12) >> 1;
    v14 = v13 - v10;
    v15 = v13 - v9;
    v6->i32[0] = v11 - v14;
    v6->i32[1] = v14;
    v6->i32[2] = v15;
    v6->i32[3] = v15 + v12;
    ++v5;
    ++v6;
    v7 = (_OWORD *)((char *)v7 + 4);
  }
  while (v5 != 4);
  v16 = 0;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v17 = vaddq_s32(v25, v24);
  v18 = vsubq_s32(v26, v27);
  v19 = vshrq_n_s32(vsubq_s32(v17, v18), 1uLL);
  v20 = vsubq_s32(v19, v27);
  v21 = vsubq_s32(v19, v25);
  v24 = vsubq_s32(v17, v20);
  v25 = v20;
  v26 = v21;
  v27 = vaddq_s32(v21, v18);
  v22 = vdupq_n_s32(a5);
  do
  {
    v23 = (int32x4_t)vaddw_u16(*(uint32x4_t *)((char *)&v24 + v16), *result);
    *result = (uint16x4_t)vbic_s8((int8x8_t)vmovn_s32(vminq_s32(v23, v22)), (int8x8_t)vmovn_s32(vcltzq_s32(v23)));
    v16 += 16;
    result = (uint16x4_t *)((char *)result + (a2 & 0xFFFFFFFFFFFFFFFELL));
  }
  while ((_DWORD)v16 != 64);
  return result;
}

uint64_t sub_218B9191C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)sub_218B5D4B4, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D4B4, 1, a5);
}

uint64_t sub_218B91958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)sub_218B61110, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61110, 0, a5);
}

uint64_t sub_218B91990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)sub_218B60500, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D4B4, 0, a5);
}

uint64_t sub_218B919D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)sub_218B5D4B4, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B60500, 0, a5);
}

uint64_t sub_218B91A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)sub_218B60500, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B60500, 0, a5);
}

uint64_t sub_218B91A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)sub_218B605CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B60500, 0, a5);
}

uint64_t sub_218B91A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)sub_218B60500, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605CC, 0, a5);
}

uint64_t sub_218B91AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)sub_218B605CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D4B4, 0, a5);
}

uint64_t sub_218B91B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)sub_218B5D4B4, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605CC, 0, a5);
}

uint64_t sub_218B91B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)sub_218B605CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605CC, 0, a5);
}

uint64_t sub_218B91B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)sub_218B5D4B4, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61110, 0, a5);
}

uint64_t sub_218B91BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)sub_218B61110, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D4B4, 0, a5);
}

uint64_t sub_218B91C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)sub_218B605CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61110, 0, a5);
}

uint64_t sub_218B91C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)sub_218B61110, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605CC, 0, a5);
}

uint64_t sub_218B91C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)sub_218B60500, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61110, 0, a5);
}

uint64_t sub_218B91CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 4, 0, (uint64_t)sub_218B61110, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B60500, 0, a5);
}

uint64_t sub_218B91D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)sub_218B5D4B4, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D5CC, 1, a5);
}

uint64_t sub_218B91D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)sub_218B61110, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61140, 0, a5);
}

uint64_t sub_218B91D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)sub_218B60500, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D5CC, 0, a5);
}

uint64_t sub_218B91DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)sub_218B5D4B4, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605DC, 0, a5);
}

uint64_t sub_218B91E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)sub_218B60500, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605DC, 0, a5);
}

uint64_t sub_218B91E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)sub_218B605CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605DC, 0, a5);
}

uint64_t sub_218B91E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)sub_218B60500, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B608FC, 0, a5);
}

uint64_t sub_218B91EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)sub_218B605CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D5CC, 0, a5);
}

uint64_t sub_218B91F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)sub_218B5D4B4, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B608FC, 0, a5);
}

uint64_t sub_218B91F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)sub_218B605CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B608FC, 0, a5);
}

uint64_t sub_218B91F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)sub_218B5D4B4, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61140, 0, a5);
}

uint64_t sub_218B91FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)sub_218B61110, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D5CC, 0, a5);
}

uint64_t sub_218B92004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)sub_218B605CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61140, 0, a5);
}

uint64_t sub_218B92044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)sub_218B61110, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B608FC, 0, a5);
}

uint64_t sub_218B92084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)sub_218B60500, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61140, 0, a5);
}

uint64_t sub_218B920C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 8, 0, (uint64_t)sub_218B61110, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605DC, 0, a5);
}

uint64_t sub_218B92104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)sub_218B5D4B4, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D82C, 1, a5);
}

uint64_t sub_218B92148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)sub_218B61110, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61164, 0, a5);
}

uint64_t sub_218B92188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)sub_218B60500, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D82C, 0, a5);
}

uint64_t sub_218B921C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)sub_218B5D4B4, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B6090C, 0, a5);
}

uint64_t sub_218B92208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)sub_218B60500, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B6090C, 0, a5);
}

uint64_t sub_218B92248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)sub_218B605CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B6090C, 0, a5);
}

uint64_t sub_218B92288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)sub_218B60500, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61100, 0, a5);
}

uint64_t sub_218B922C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)sub_218B605CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D82C, 0, a5);
}

uint64_t sub_218B92308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)sub_218B5D4B4, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61100, 0, a5);
}

uint64_t sub_218B92348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)sub_218B605CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61100, 0, a5);
}

uint64_t sub_218B92388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)sub_218B5D4B4, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61164, 0, a5);
}

uint64_t sub_218B923C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)sub_218B61110, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D82C, 0, a5);
}

uint64_t sub_218B92408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)sub_218B605CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61164, 0, a5);
}

uint64_t sub_218B92448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)sub_218B61110, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61100, 0, a5);
}

uint64_t sub_218B92488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)sub_218B60500, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61164, 0, a5);
}

uint64_t sub_218B924C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 4, 16, 1, (uint64_t)sub_218B61110, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B6090C, 0, a5);
}

uint64_t sub_218B92508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)sub_218B5D5CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D4B4, 1, a5);
}

uint64_t sub_218B9254C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)sub_218B61140, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61110, 0, a5);
}

uint64_t sub_218B9258C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)sub_218B605DC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D4B4, 0, a5);
}

uint64_t sub_218B925CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)sub_218B5D5CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B60500, 0, a5);
}

uint64_t sub_218B9260C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)sub_218B605DC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B60500, 0, a5);
}

uint64_t sub_218B9264C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)sub_218B608FC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B60500, 0, a5);
}

uint64_t sub_218B9268C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)sub_218B605DC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605CC, 0, a5);
}

uint64_t sub_218B926CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)sub_218B608FC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D4B4, 0, a5);
}

uint64_t sub_218B9270C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)sub_218B5D5CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605CC, 0, a5);
}

uint64_t sub_218B9274C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)sub_218B608FC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605CC, 0, a5);
}

uint64_t sub_218B9278C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)sub_218B5D5CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61110, 0, a5);
}

uint64_t sub_218B927CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)sub_218B61140, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D4B4, 0, a5);
}

uint64_t sub_218B9280C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)sub_218B608FC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61110, 0, a5);
}

uint64_t sub_218B9284C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)sub_218B61140, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605CC, 0, a5);
}

uint64_t sub_218B9288C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)sub_218B605DC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61110, 0, a5);
}

uint64_t sub_218B928CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 4, 0, (uint64_t)sub_218B61140, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B60500, 0, a5);
}

uint64_t sub_218B9290C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)sub_218B5D5CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D5CC, 1, a5);
}

uint64_t sub_218B92948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)sub_218B61140, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61140, 0, a5);
}

uint64_t sub_218B92980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)sub_218B605DC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D5CC, 0, a5);
}

uint64_t sub_218B929C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)sub_218B5D5CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605DC, 0, a5);
}

uint64_t sub_218B92A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)sub_218B605DC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605DC, 0, a5);
}

uint64_t sub_218B92A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)sub_218B608FC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605DC, 0, a5);
}

uint64_t sub_218B92A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)sub_218B605DC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B608FC, 0, a5);
}

uint64_t sub_218B92AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)sub_218B608FC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D5CC, 0, a5);
}

uint64_t sub_218B92AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)sub_218B5D5CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B608FC, 0, a5);
}

uint64_t sub_218B92B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)sub_218B608FC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B608FC, 0, a5);
}

uint64_t sub_218B92B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)sub_218B5D5CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61140, 0, a5);
}

uint64_t sub_218B92BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)sub_218B61140, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D5CC, 0, a5);
}

uint64_t sub_218B92BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)sub_218B608FC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61140, 0, a5);
}

uint64_t sub_218B92C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)sub_218B61140, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B608FC, 0, a5);
}

uint64_t sub_218B92C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)sub_218B605DC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61140, 0, a5);
}

uint64_t sub_218B92CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 8, 1, (uint64_t)sub_218B61140, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605DC, 0, a5);
}

uint64_t sub_218B92CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)sub_218B5D5CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D82C, 1, a5);
}

uint64_t sub_218B92D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)sub_218B61140, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61164, 0, a5);
}

uint64_t sub_218B92D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)sub_218B605DC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D82C, 0, a5);
}

uint64_t sub_218B92DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)sub_218B5D5CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B6090C, 0, a5);
}

uint64_t sub_218B92DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)sub_218B605DC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B6090C, 0, a5);
}

uint64_t sub_218B92E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)sub_218B608FC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B6090C, 0, a5);
}

uint64_t sub_218B92E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)sub_218B605DC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61100, 0, a5);
}

uint64_t sub_218B92EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)sub_218B608FC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D82C, 0, a5);
}

uint64_t sub_218B92EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)sub_218B5D5CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61100, 0, a5);
}

uint64_t sub_218B92F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)sub_218B608FC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61100, 0, a5);
}

uint64_t sub_218B92F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)sub_218B5D5CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61164, 0, a5);
}

uint64_t sub_218B92FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)sub_218B61140, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D82C, 0, a5);
}

uint64_t sub_218B92FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)sub_218B608FC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61164, 0, a5);
}

uint64_t sub_218B93034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)sub_218B61140, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61100, 0, a5);
}

uint64_t sub_218B93074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)sub_218B605DC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61164, 0, a5);
}

uint64_t sub_218B930B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 16, 1, (uint64_t)sub_218B61140, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B6090C, 0, a5);
}

uint64_t sub_218B930F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 32, 2, (uint64_t)sub_218B5D5CC, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5DD88, 1, a5);
}

uint64_t sub_218B93138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 8, 32, 2, (uint64_t)sub_218B61140, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61198, 0, a5);
}

uint64_t sub_218B93178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)sub_218B5D82C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D4B4, 1, a5);
}

uint64_t sub_218B931BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)sub_218B61164, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61110, 0, a5);
}

uint64_t sub_218B931FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)sub_218B6090C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D4B4, 0, a5);
}

uint64_t sub_218B9323C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)sub_218B5D82C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B60500, 0, a5);
}

uint64_t sub_218B9327C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)sub_218B6090C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B60500, 0, a5);
}

uint64_t sub_218B932BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)sub_218B61100, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B60500, 0, a5);
}

uint64_t sub_218B932FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)sub_218B6090C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605CC, 0, a5);
}

uint64_t sub_218B9333C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)sub_218B61100, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D4B4, 0, a5);
}

uint64_t sub_218B9337C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)sub_218B5D82C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605CC, 0, a5);
}

uint64_t sub_218B933BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)sub_218B61100, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605CC, 0, a5);
}

uint64_t sub_218B933FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)sub_218B5D82C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61110, 0, a5);
}

uint64_t sub_218B9343C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)sub_218B61164, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D4B4, 0, a5);
}

uint64_t sub_218B9347C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)sub_218B61100, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61110, 0, a5);
}

uint64_t sub_218B934BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)sub_218B61164, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605CC, 0, a5);
}

uint64_t sub_218B934FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)sub_218B6090C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61110, 0, a5);
}

uint64_t sub_218B9353C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 4, 1, (uint64_t)sub_218B61164, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B60500, 0, a5);
}

uint64_t sub_218B9357C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)sub_218B5D82C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D5CC, 1, a5);
}

uint64_t sub_218B935C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)sub_218B61164, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61140, 0, a5);
}

uint64_t sub_218B93600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)sub_218B6090C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D5CC, 0, a5);
}

uint64_t sub_218B93640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)sub_218B5D82C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605DC, 0, a5);
}

uint64_t sub_218B93680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)sub_218B6090C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605DC, 0, a5);
}

uint64_t sub_218B936C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)sub_218B61100, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605DC, 0, a5);
}

uint64_t sub_218B93700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)sub_218B6090C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B608FC, 0, a5);
}

uint64_t sub_218B93740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)sub_218B61100, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D5CC, 0, a5);
}

uint64_t sub_218B93780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)sub_218B5D82C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B608FC, 0, a5);
}

uint64_t sub_218B937C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)sub_218B61100, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B608FC, 0, a5);
}

uint64_t sub_218B93800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)sub_218B5D82C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61140, 0, a5);
}

uint64_t sub_218B93840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)sub_218B61164, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D5CC, 0, a5);
}

uint64_t sub_218B93880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)sub_218B61100, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61140, 0, a5);
}

uint64_t sub_218B938C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)sub_218B61164, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B608FC, 0, a5);
}

uint64_t sub_218B93900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)sub_218B6090C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61140, 0, a5);
}

uint64_t sub_218B93940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 8, 1, (uint64_t)sub_218B61164, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B605DC, 0, a5);
}

uint64_t sub_218B93980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)sub_218B5D82C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D82C, 1, a5);
}

uint64_t sub_218B939BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)sub_218B61164, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61164, 0, a5);
}

uint64_t sub_218B939F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)sub_218B6090C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D82C, 0, a5);
}

uint64_t sub_218B93A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)sub_218B5D82C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B6090C, 0, a5);
}

uint64_t sub_218B93A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)sub_218B6090C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B6090C, 0, a5);
}

uint64_t sub_218B93AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)sub_218B61100, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B6090C, 0, a5);
}

uint64_t sub_218B93AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)sub_218B6090C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61100, 0, a5);
}

uint64_t sub_218B93B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)sub_218B61100, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D82C, 0, a5);
}

uint64_t sub_218B93B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)sub_218B5D82C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61100, 0, a5);
}

uint64_t sub_218B93BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)sub_218B61100, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61100, 0, a5);
}

uint64_t sub_218B93BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)sub_218B5D82C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61164, 0, a5);
}

uint64_t sub_218B93C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 16, 2, (uint64_t)sub_218B61164, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D82C, 0, a5);
}

uint64_t sub_218B93C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 32, 1, (uint64_t)sub_218B5D82C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5DD88, 1, a5);
}

uint64_t sub_218B93CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 32, 1, (uint64_t)sub_218B61164, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61198, 0, a5);
}

uint64_t sub_218B93CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 16, 64, 2, (uint64_t)sub_218B5D82C, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5EBB0, 1, a5);
}

uint64_t sub_218B93D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 32, 8, 2, (uint64_t)sub_218B5DD88, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D5CC, 1, a5);
}

uint64_t sub_218B93D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 32, 8, 2, (uint64_t)sub_218B61198, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61140, 0, a5);
}

uint64_t sub_218B93DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 32, 16, 1, (uint64_t)sub_218B5DD88, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D82C, 1, a5);
}

uint64_t sub_218B93DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 32, 16, 1, (uint64_t)sub_218B61198, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61164, 0, a5);
}

uint64_t sub_218B93E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 32, 32, 2, (uint64_t)sub_218B5DD88, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5DD88, 1, a5);
}

uint64_t sub_218B93E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 32, 32, 2, (uint64_t)sub_218B61198, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B61198, 0, a5);
}

uint64_t sub_218B93EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 32, 64, 1, (uint64_t)sub_218B5DD88, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5EBB0, 1, a5);
}

uint64_t sub_218B93EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 64, 16, 2, (uint64_t)sub_218B5EBB0, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5D82C, 1, a5);
}

uint64_t sub_218B93F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 64, 32, 1, (uint64_t)sub_218B5EBB0, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5DD88, 1, a5);
}

uint64_t sub_218B93F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_218B93FB0(a1, a2, a3, a4, 64, 64, 2, (uint64_t)sub_218B5EBB0, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_218B5EBB0, 1, a5);
}

uint64_t sub_218B93FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(_DWORD *, uint64_t, uint64_t, uint64_t), int a10, int a11)
{
  uint64_t result;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  unsigned int v15;
  int v16;
  char v17;
  void (*v18)(_DWORD *, uint64_t, _QWORD, _QWORD);
  _DWORD *v19;
  _WORD *v20;
  _BOOL4 v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  _DWORD *v43;
  uint64_t v44;
  int v45;
  int *v46;
  _WORD *v47;
  uint64_t v48;
  int v49;
  int v50;
  __int16 v51;
  __int16 v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  void (*v61)(_DWORD *, uint64_t, _QWORD, _QWORD);
  _DWORD v62[4096];
  uint64_t v63;

  result = MEMORY[0x24BDAC7A8]();
  v61 = v18;
  v19 = v13;
  v20 = (_WORD *)result;
  v63 = *MEMORY[0x24BDAC8D0];
  v22 = v16 == 2 * v15 || v15 == 2 * v16;
  if (v14 >= a10)
  {
    v55 = (1 << v17) >> 1;
    v56 = v17;
    v58 = v12;
    v30 = 0;
    if (v16 >= 32)
      v31 = 32;
    else
      v31 = v16;
    if ((int)v15 >= 32)
      v32 = 32;
    else
      v32 = v15;
    v60 = 4 * v15;
    v33 = v62;
    v53 = ~a11;
    v59 = v16;
    v54 = v15;
    v57 = v15;
    v34 = v22;
    do
    {
      v35 = 0;
      v36 = v30;
      if (v22)
      {
        do
        {
          v33[v35++] = (181 * v19[v36] + 128) >> 8;
          v36 += v31;
        }
        while (v32 != v35);
      }
      else
      {
        do
        {
          v33[v35++] = v19[v36];
          v36 += v31;
        }
        while (v32 != v35);
      }
      v61(v33, 1, (~a11 << 7), ~(~a11 << 7));
      ++v30;
      v33 = (_DWORD *)((char *)v33 + v60);
      LOBYTE(v22) = v34;
    }
    while (v30 != v31);
    v37 = (32 * v53);
    v38 = ~(32 * v53);
    bzero(v19, (4 * v32 * v31));
    v39 = 0;
    do
    {
      v40 = (int)(v62[v39] + v55) >> v56;
      if (v40 >= (int)v38)
        v41 = ~(32 * v53);
      else
        v41 = (int)(v62[v39] + v55) >> v56;
      if (v40 >= (int)v37)
        v42 = v41;
      else
        v42 = 32 * v53;
      v62[v39++] = v42;
    }
    while ((_DWORD)v31 * v54 != v39);
    v43 = v62;
    v44 = v57;
    do
    {
      result = a9(v43++, v57, v37, v38);
      --v44;
    }
    while (v44);
    v45 = 0;
    v46 = v62;
    do
    {
      v47 = v20;
      v48 = v57;
      do
      {
        v49 = *v46++;
        v50 = (unsigned __int16)*v47 + ((v49 + 8) >> 4);
        if (v50 >= a11)
          v51 = a11;
        else
          v51 = v50;
        if (v50 >= 0)
          v52 = v51;
        else
          v52 = 0;
        *v47++ = v52;
        --v48;
      }
      while (v48);
      ++v45;
      v20 = (_WORD *)((char *)v20 + (v58 & 0xFFFFFFFFFFFFFFFELL));
    }
    while (v45 != v59);
  }
  else
  {
    v23 = 0;
    v24 = *v13;
    *v13 = 0;
    if (v22)
      v24 = (181 * v24 + 128) >> 8;
    v25 = (181 * ((int)(((1 << v17) >> 1) + ((181 * v24 + 128) >> 8)) >> v17) + 2176) >> 12;
    do
    {
      v26 = 0;
      do
      {
        v27 = v25 + (unsigned __int16)v20[v26];
        if (v27 >= a11)
          v28 = a11;
        else
          v28 = v25 + v20[v26];
        if (v27 >= 0)
          v29 = v28;
        else
          v29 = 0;
        v20[v26++] = v29;
      }
      while (v15 != v26);
      ++v23;
      v20 = (_WORD *)((char *)v20 + (v12 & 0xFFFFFFFFFFFFFFFELL));
    }
    while (v23 != v16);
  }
  return result;
}

_QWORD *sub_218B942BC(_QWORD *result, char *__dst, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, int a8, int a9, unsigned int a10, int a11, unsigned int a12, int a13)
{
  char *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  char *v23;
  int v24;
  int v25;
  size_t v26;
  uint64_t v27;
  int v28;
  int v29;
  char *v30;
  int v31;
  char *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  unsigned int *v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;

  v17 = __dst;
  v18 = a12;
  v19 = a10;
  v20 = result[3];
  v38 = a10;
  v39 = result;
  if (*(_BYTE *)(v20 + 417))
    v38 = ((int)(*(_DWORD *)(v20 + 240) + a12) >> a12);
  if (a8)
    v21 = 0;
  else
    v21 = -8;
  v22 = ((64 << ((a13 == 0) & a7)) + v21) >> a6;
  v23 = (char *)(a4 + (v22 - 2) * a5);
  if (*(_DWORD *)(result[407] + 24) == 1)
  {
    if (a8)
    {
      v24 = 4 << a7;
      memcpy(__dst, &__dst[(4 << a7) * a3], (int)v38);
      memcpy(&v17[a3], &v17[(v24 | 1) * a3], (int)v38);
      memcpy(&v17[2 * a3], &v17[(v24 | 2) * a3], (int)v38);
      v19 = a10;
      result = memcpy(&v17[3 * a3], &v17[(v24 | 3) * a3], (int)v38);
      v18 = a12;
    }
    v17 += 4 * a3;
  }
  if (a13 && *(_DWORD *)(v39[3] + 236) != *(_DWORD *)(v39[3] + 240))
  {
    v31 = v22 + a8;
    if (v31 <= a9)
    {
      v32 = (char *)v39 + 4 * v18;
      v36 = v32 + 3248;
      v37 = (unsigned int *)(v32 + 3240);
      v33 = 0x40u >> a6;
      v34 = a11 - 1;
      do
      {
        if (v34 == v31)
          v35 = 3;
        else
          v35 = 4;
        result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _DWORD))(v39[410] + 672))(v17, a3, v23, a5, v38, v35, v19, *v37, *v36);
        v17 += v35 * a3;
        if (v34 == v31)
        {
          result = memcpy(v17, &v17[-a3], (int)v38);
          v17 += a3;
        }
        v23 += v33 * a5;
        v31 += v33;
      }
      while (v31 <= a9);
    }
  }
  else
  {
    v25 = v22 + a8;
    if ((int)(v22 + a8) <= a9)
    {
      v26 = (int)v19;
      v40 = 0x40u >> a6;
      v27 = ((0x40u >> a6) - 4) * a5;
      do
      {
        v28 = 0;
        if (v25 + 1 == a11)
          v29 = 3;
        else
          v29 = 4;
        do
        {
          if (v29 == v28)
            v30 = &v17[-a3];
          else
            v30 = v23;
          result = memcpy(v17, v30, v26);
          v17 += a3;
          v23 += a5;
          ++v28;
        }
        while (v28 != 4);
        v23 += v27;
        v25 += v40;
      }
      while (v25 <= a9);
    }
  }
  return result;
}

BOOL sub_218B94584(uint64_t a1)
{
  signed int v2;
  _BOOL8 result;
  int v4;
  int v5;
  BOOL v6;
  unsigned int v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unsigned int v33;
  __int16 v34;
  int v35;
  int v36;
  int v37;
  int v38;

  v2 = *(_DWORD *)(a1 + 12);
  result = 1;
  if (v2 >= 1)
  {
    if (v2 >= 98303)
      v4 = 98303;
    else
      v4 = v2;
    if (v4 <= 0x8000)
      v4 = 0x8000;
    v5 = v4 - 0x10000;
    if (v4 - 0x10000 < 0)
      v5 = 0x10000 - v4;
    v6 = v4 >= 0x10000;
    v7 = (v5 + 32) >> 6;
    if (!v6)
      v7 = -v7;
    v8 = (_WORD)v7 << 6;
    *(_WORD *)(a1 + 28) = v8;
    v9 = *(_DWORD *)(a1 + 16);
    v10 = *(int *)(a1 + 20);
    if (v9 >= 0x7FFF)
      v11 = 0x7FFF;
    else
      v11 = *(_DWORD *)(a1 + 16);
    v12 = __clz(v2);
    v13 = (-1 << (v12 ^ 0x1F)) + v2;
    v14 = v13 << (v12 - 23);
    v15 = (v13 + (1 << (22 - v12))) >> (23 - v12);
    if (v11 <= -32768)
      v11 = -32768;
    v16 = v11 < 0;
    if (v11 < 0)
      v11 = -v11;
    v17 = (v11 + 32) >> 6;
    if (v16)
      v17 = -v17;
    v18 = (_WORD)v17 << 6;
    *(_WORD *)(a1 + 30) = v18;
    if (v2 >= 0x200)
      v19 = v15;
    else
      v19 = v14;
    v20 = 45 - v12;
    v21 = word_218BBFB80[v19];
    v22 = 1 << v20 >> 1;
    v23 = v21 * (uint64_t)v9 * v10;
    v24 = v23 < 0;
    if (v23 < 0)
      v23 = -v23;
    v25 = (v23 + v22) >> v20;
    if (!v24)
      LODWORD(v25) = -(int)v25;
    v26 = v25 + *(_DWORD *)(a1 + 24);
    if (v26 >= 98303)
      v27 = 98303;
    else
      v27 = v26;
    if (v27 <= 0x8000)
      v27 = 0x8000;
    v28 = v27 - 0x10000;
    if (v27 - 0x10000 < 0)
      v28 = 0x10000 - v27;
    v6 = v27 >= 0x10000;
    v29 = (v28 + 32) >> 6;
    if (!v6)
      v29 = -v29;
    if ((((int)v10 * (uint64_t)v21) & 0x800000000000) != 0)
      v30 = -65536 * (int)v10 * (uint64_t)v21;
    else
      v30 = ((int)v10 * (uint64_t)v21) << 16;
    v31 = (v30 + v22) >> v20;
    if ((((int)v10 * (uint64_t)v21) & 0x800000000000) != 0)
      LODWORD(v31) = -(int)v31;
    if ((int)v31 >= 0x7FFF)
      LODWORD(v31) = 0x7FFF;
    if ((int)v31 <= -32768)
      LODWORD(v31) = -32768;
    v32 = (int)v31 < 0;
    if ((int)v31 < 0)
      LODWORD(v31) = -(int)v31;
    v33 = (v31 + 32) >> 6;
    if (v32)
      v33 = -v33;
    v34 = (_WORD)v33 << 6;
    *(_WORD *)(a1 + 32) = v34;
    *(_WORD *)(a1 + 34) = (_WORD)v29 << 6;
    v35 = v8;
    if (v8 < 0)
      v35 = -v8;
    v36 = v18;
    if (v18 < 0)
      v36 = -v18;
    if (!((7 * v36 + 4 * v35) >> 16))
    {
      v37 = v34;
      if (v34 < 0)
        v37 = -v34;
      v38 = (__int16)((_WORD)v29 << 6);
      if (v38 < 0)
        v38 = (__int16)(-64 * v29);
      return ((v38 + v37) & 0x3FFFC000) != 0;
    }
  }
  return result;
}

int32x2_t sub_218B94764(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  int32x2_t v6;
  int32x2_t v7;
  int32x2_t v8;
  int32x2_t result;

  v6 = vadd_s32(vadd_s32(vadd_s32((int32x2_t)__PAIR64__(a2, a1), (int32x2_t)__PAIR64__(a2, a1)), vshl_n_s32((int32x2_t)__PAIR64__(a6, a5), 2uLL)), (int32x2_t)-1);
  v7.i32[0] = vand_s8((int8x8_t)vshl_s32((int32x2_t)a3, (int32x2_t)0xFFFFFFF0FFFFFFFDLL), (int8x8_t)0x1F0000001FLL).u32[0];
  v7.i32[1] = vshr_n_s32((int32x2_t)vshl_u32((uint32x2_t)vdup_lane_s32((int32x2_t)a3, 0), (uint32x2_t)0x1000000003), 3uLL).i32[1];
  v8.i32[0] = *(_DWORD *)(a4 + 12);
  v8.i32[1] = *(_DWORD *)(a4 + 24);
  result = vmax_s32(vmin_s32(vadd_s32(vmls_s32(vmul_s32(vsub_s32((int32x2_t)0x1000000010000, v8), v6), *(int32x2_t *)(a4 + 16), vrev64_s32(v6)), v7), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
  *(int32x2_t *)(a4 + 4) = result;
  return result;
}

unint64_t sub_218B947F8(uint64_t *a1)
{
  int v1;
  unsigned __int8 *v2;
  uint64_t v3;
  unint64_t v5;

  v1 = *((_DWORD *)a1 + 2);
  if (!v1)
  {
    v2 = (unsigned __int8 *)a1[2];
    if ((unint64_t)v2 < a1[4])
    {
      a1[2] = (uint64_t)(v2 + 1);
      v3 = *v2;
      *((_DWORD *)a1 + 2) = 7;
      *a1 = v3 << 57;
      return (v3 >> 7) & 1;
    }
    *((_DWORD *)a1 + 3) = 1;
  }
  v5 = *a1;
  *((_DWORD *)a1 + 2) = v1 - 1;
  *a1 = 2 * v5;
  return v5 >> 63;
}

unint64_t sub_218B94858(uint64_t *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;

  v2 = *((_DWORD *)a1 + 2);
  if (v2 < a2)
  {
    v3 = 0;
    v4 = a1[4];
    v5 = (unsigned __int8 *)a1[2];
    while ((unint64_t)v5 < v4)
    {
      a1[2] = (uint64_t)(v5 + 1);
      v3 = *v5 | (v3 << 8);
      v2 += 8;
      *((_DWORD *)a1 + 2) = v2;
      ++v5;
      if (v2 >= a2)
        goto LABEL_7;
    }
    *((_DWORD *)a1 + 3) = 1;
    if (!v3)
      goto LABEL_8;
LABEL_7:
    *a1 |= (unint64_t)v3 << -(char)v2;
  }
LABEL_8:
  v6 = *a1;
  *((_DWORD *)a1 + 2) = v2 - a2;
  *a1 = v6 << a2;
  return v6 >> -(char)a2;
}

uint64_t sub_218B948E4(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < a2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(unsigned __int8 **)(a1 + 16);
    while ((unint64_t)v5 < v4)
    {
      *(_QWORD *)(a1 + 16) = v5 + 1;
      v3 = *v5 | (v3 << 8);
      v6 = v2 + 8;
      *(_DWORD *)(a1 + 8) = v2 + 8;
      v2 = 8;
      ++v5;
      if (v6 >= a2)
      {
        v2 = v6;
        goto LABEL_7;
      }
    }
    *(_DWORD *)(a1 + 12) = 1;
    if (!v3)
      goto LABEL_8;
LABEL_7:
    *(_QWORD *)a1 |= (unint64_t)v3 << -(char)v2;
  }
LABEL_8:
  v7 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = v2 - a2;
  *(_QWORD *)a1 = v7 << a2;
  return v7 >> -(char)a2;
}

unint64_t sub_218B94978(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  char v4;
  BOOL v5;

  v2 = 0;
  v3 = 0;
  do
  {
    v4 = sub_218B94858((uint64_t *)a1, 8u);
    v3 |= (unint64_t)(v4 & 0x7F) << v2;
    if ((v4 & 0x80) == 0)
      break;
    v5 = v2 >= 0x31;
    v2 += 7;
  }
  while (!v5);
  if (v4 < 0 || HIDWORD(v3))
  {
    v3 = 0;
    *(_DWORD *)(a1 + 12) = 1;
  }
  return v3;
}

unint64_t sub_218B949EC(uint64_t *a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;

  v3 = __clz(a2) ^ 0x1F;
  v4 = (2 << v3) - a2;
  v5 = sub_218B94858(a1, v3);
  if (v5 >= v4)
    return sub_218B947F8(a1) - v4 + 2 * (_DWORD)v5;
  return v5;
}

uint64_t sub_218B94A4C(uint64_t *a1, int a2, char a3)
{
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  v4 = 0;
  v5 = 0;
  v6 = 1 << a3;
  v7 = (1 << a3) + a2;
  v8 = 2 << a3;
  v9 = 3;
  v10 = 8;
  while (sub_218B947F8(a1))
  {
    v5 += v10;
    v9 = v4 + 3;
    v10 = 8 << v4;
    v11 = 24 << v4++;
    if (v5 + v11 > v8)
    {
      v12 = sub_218B949EC(a1, (v8 | 1) - v5);
      goto LABEL_6;
    }
  }
  v12 = sub_218B94858(a1, v9);
LABEL_6:
  v13 = v12 + v5;
  v14 = 2 * v7;
  v15 = v12 + v5 + 1;
  v16 = v8 - v7 - (v15 >> 1);
  if (((v12 + v5) & 1) == 0)
    v16 = v8 - v7 + ((v12 + v5) >> 1);
  if (v13 <= 2 * (v8 - v7))
    v17 = v16;
  else
    v17 = v12 + v5;
  v18 = v8 - v17;
  v19 = v7 - (v15 >> 1);
  if ((v13 & 1) == 0)
    v19 = v7 + (v13 >> 1);
  if (v14 >= v13)
    v13 = v19;
  if (v14 > v8)
    v13 = v18;
  return v13 - v6;
}

uint64_t sub_218B94B50(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  uint64_t v14;
  int32x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  __int16 *v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t i;
  uint64_t v30;
  int v31;
  int *v32;
  int v33;
  uint64_t result;
  uint64_t j;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _OWORD v42[11];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _OWORD v51[2];
  uint64_t v52;

  v3 = 0;
  v52 = *MEMORY[0x24BDAC8D0];
  memset(v51, 0, sizeof(v51));
  memset(v50, 0, sizeof(v50));
  v49 = 0;
  v47 = 0u;
  v48 = 0u;
  memset(v46, 0, sizeof(v46));
  v44 = 0u;
  v45 = 0u;
  v43 = 0u;
  v4 = 88;
  v5 = &v43;
  memset(v42, 0, sizeof(v42));
  do
  {
    v6 = 0;
    v7 = (2 * v3) & 0xFFFFFFFFFFFFFFFCLL;
    v8 = (char *)&v42[8] + v7 + 4;
    v9 = (char *)&v42[6] - v7 + 4;
    v10 = v4;
    do
    {
      v11 = *(unsigned __int8 *)(a1 + v6) - 128;
      *((_DWORD *)v5 + v6) += v11;
      *((_DWORD *)v42 + v3 + (v6 >> 1)) += v11;
      *((_DWORD *)v50 + v3) += v11;
      v12 = (char *)v42 + 4 * (v3 + 3 - (v6 >> 1));
      v13 = *(_DWORD *)((char *)&v43 + v10);
      *((_DWORD *)v12 + 11) += v11;
      *(_DWORD *)((char *)&v43 + v10) = v13 + v11;
      *(_DWORD *)&v9[4 * v6] += v11;
      *((_DWORD *)v51 + v6) += v11;
      *(_DWORD *)&v8[4 * v6++] += v11;
      v10 -= 4;
    }
    while (v6 != 8);
    a1 += a2;
    ++v3;
    v4 += 4;
    v5 = (__int128 *)((char *)v5 + 4);
  }
  while (v3 != 8);
  v14 = 0;
  v39 = 0;
  v38 = 0;
  v41 = 0;
  v15 = 0uLL;
  v16 = 0uLL;
  v40 = 0;
  do
  {
    v15 = vmlaq_s32(v15, (int32x4_t)v50[v14], (int32x4_t)v50[v14]);
    v16 = vmlaq_s32(v16, (int32x4_t)v50[v14 + 2], (int32x4_t)v50[v14 + 2]);
    ++v14;
  }
  while (v14 != 2);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  HIDWORD(v38) = 105 * vaddvq_s32(v15);
  HIDWORD(v40) = 105 * vaddvq_s32(v16);
  v20 = 116;
  v21 = word_218BBFD82;
  do
  {
    v22 = (unsigned __int16)*v21++;
    v18 += (*(_DWORD *)((char *)&v43 + v17) * *(_DWORD *)((char *)&v43 + v17)
          + *(_DWORD *)((char *)&v42[7] + v20 + 4) * *(_DWORD *)((char *)&v42[7] + v20 + 4))
         * v22;
    v19 += (*(_DWORD *)((char *)v46 + v17 + 12) * *(_DWORD *)((char *)v46 + v17 + 12)
          + *(_DWORD *)((char *)&v43 + v20) * *(_DWORD *)((char *)&v43 + v20))
         * v22;
    v20 -= 4;
    v17 += 4;
  }
  while (v20 != 88);
  v23 = 0;
  v24 = v18 + 105 * HIDWORD(v44) * HIDWORD(v44);
  v37 = v24;
  HIDWORD(v39) = v19 + 105 * DWORD2(v47) * DWORD2(v47);
  v25 = v42;
  v26 = (char *)&v42[2] + 8;
  do
  {
    v27 = (2 * v23) | 1;
    v28 = *(&v37 + v27);
    for (i = 12; i != 32; i += 4)
      v28 += *(_DWORD *)((char *)v25 + i) * *(_DWORD *)((char *)v25 + i);
    v30 = 0;
    v31 = 105 * v28;
    v32 = (int *)v26;
    do
    {
      v33 = *v32--;
      v31 += (*(_DWORD *)((char *)v25 + v30 * 2) * *(_DWORD *)((char *)v25 + v30 * 2) + v33 * v33)
           * (unsigned __int16)word_218BBFD82[v30 + 1];
      v30 += 2;
    }
    while (v30 != 6);
    *(&v37 + v27) = v31;
    ++v23;
    v25 = (_OWORD *)((char *)v25 + 44);
    v26 += 44;
  }
  while (v23 != 4);
  LODWORD(result) = 0;
  for (j = 1; j != 8; ++j)
  {
    v36 = *(&v37 + j);
    if (v36 <= v24)
      result = result;
    else
      result = j;
    if (v36 > v24)
      v24 = *(&v37 + j);
  }
  *a3 = (v24 - *(&v37 + ((int)result ^ 4))) >> 10;
  return result;
}

__int16 *sub_218B94E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, double a9, double a10, double a11, double a12, int32x2_t a13, double a14, int32x2_t a15, int a16, char a17)
{
  return sub_218B95188(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, 8u, 8u, a17);
}

__int16 *sub_218B94E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, double a9, double a10, double a11, double a12, int32x2_t a13, double a14, int32x2_t a15, int a16, char a17)
{
  return sub_218B95188(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, 4u, 8u, a17);
}

__int16 *sub_218B94ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, double a9, double a10, double a11, double a12, int32x2_t a13, double a14, int32x2_t a15, int a16, char a17)
{
  return sub_218B95188(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, 4u, 4u, a17);
}

_QWORD *sub_218B94F00(_QWORD *a1, uint64_t a2, __int16 *a3, uint8x8_t *a4, uint8x8_t *a5, uint64_t a6, uint64_t a7, unsigned int a8, __n128 a9, __n128 a10, __n128 a11, uint8x8_t a12, unsigned int a13, int a14)
{
  uint64_t v20[42];

  v20[41] = *MEMORY[0x24BDAC8D0];
  sub_218B485AC((uint64_t)v20, (uint64_t)a1, a2, a3, a4, a5, 8, a14, a9, a10, a11, a12);
  return sub_218B490D8(a1, a2, v20, a6, a7, a8, a13, 8, a14);
}

_DWORD *sub_218B94FD8(_DWORD *a1, uint64_t a2, __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, double a9, double a10, uint8x8_t a11, uint8x8_t a12, unsigned int a13, int a14)
{
  _QWORD v20[22];

  v20[21] = *MEMORY[0x24BDAC8D0];
  sub_218B488D0((uint64_t)v20, (uint64_t)a1, a2, a3, a4, a5, 8, a14, a9, a10, a11, a12);
  return sub_218B49590(a1, a2, (uint64_t)v20, a6, a7, a8, a13, 8, a14);
}

_DWORD *sub_218B950B0(_DWORD *a1, uint64_t a2, __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, double a9, double a10, uint8x8_t a11, uint8x8_t a12, unsigned int a13, int a14)
{
  _QWORD v20[22];

  v20[21] = *MEMORY[0x24BDAC8D0];
  sub_218B488D0((uint64_t)v20, (uint64_t)a1, a2, a3, a4, a5, 4, a14, a9, a10, a11, a12);
  return sub_218B49590(a1, a2, (uint64_t)v20, a6, a7, a8, a13, 4, a14);
}

__int16 *sub_218B95188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, double a9, double a10, double a11, double a12, int32x2_t a13, double a14, int32x2_t a15, int a16, unsigned int a17, unsigned int a18, char a19)
{
  char v22;
  unsigned int v23;
  __int16 *result;
  char v25;
  _WORD *v26;
  char v27;
  _QWORD *v28;
  char v29;
  char *v30;
  char v31;
  unsigned int v32;
  __int16 *v33;
  int v34;
  char *v35;
  int v36;
  __int16 *v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  _WORD *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _WORD *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  _WORD *v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int32x4_t v63;
  int32x2_t v64;
  uint32x2_t v65;
  uint32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  int32x4_t v71;
  uint64_t v72;
  signed int v73;
  unsigned int v74;
  int v75;
  int v76;
  int32x2_t v77;
  int32x2_t v78;
  int8x8_t v79;
  int v80;
  __int32 v81;
  int v82;
  int v83;
  int16x4_t v84;
  int32x2_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x2_t v88;
  int32x4_t v89;
  int v90;
  int v91;
  unsigned int v92;
  __int32 v93;
  unsigned int v94;
  int v95;
  signed int v96;
  char v97;
  char v98;
  int32x4_t v99;
  uint32x4_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  int32x4_t v105;
  char v106;
  int v107;
  int v108;
  int16x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x2_t v113;
  uint32x2_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  int32x2_t v119;
  char v120;
  int v121;
  int v122;
  int32x2_t v123;
  int32x2_t v124;
  int32x2_t v125;
  int32x2_t v126;
  char v127;
  int v128;
  int v132;
  unsigned int v133;
  uint64_t v134;
  _WORD __b[26];
  _QWORD v136[31];

  v23 = a18;
  v22 = a19;
  *(_QWORD *)((char *)&v136[29] + 4) = *MEMORY[0x24BDAC8D0];
  result = (__int16 *)(a18 + 2);
  v134 = a2;
  v133 = a7;
  if ((a19 & 4) != 0)
  {
    v132 = -2;
  }
  else
  {
    v25 = 0;
    v26 = __b;
    do
    {
      v27 = v25;
      memset_pattern16(v26, &unk_218BBC0D0, 2 * (a17 + 4));
      v26 += 12;
      v25 = 1;
    }
    while ((v27 & 1) == 0);
    v132 = 0;
    a2 = v134;
    result = (__int16 *)(a18 + 2);
    v22 = a19;
    a7 = v133;
  }
  v28 = v136;
  if ((v22 & 8) == 0)
  {
    v29 = 0;
    v30 = (char *)&v136[3 * a18 - 1] + 4;
    do
    {
      v31 = v29;
      memset_pattern16(v30, &unk_218BBC0D0, 2 * (a17 + 4));
      v30 += 24;
      v29 = 1;
    }
    while ((v31 & 1) == 0);
    result = (__int16 *)a18;
    a2 = v134;
    v22 = a19;
    a7 = v133;
  }
  v32 = a17 + 2;
  if ((v22 & 1) != 0)
  {
    v36 = -2;
    if ((v22 & 2) != 0)
      goto LABEL_19;
    goto LABEL_16;
  }
  v33 = result;
  v34 = (_DWORD)result - v132;
  v35 = (char *)&v136[3 * v132 - 1] + 4;
  do
  {
    memset_pattern16(v35, &unk_218BBC0D0, 4uLL);
    v35 += 24;
    --v34;
  }
  while (v34);
  v36 = 0;
  a2 = v134;
  result = v33;
  v22 = a19;
  a7 = v133;
  v32 = a17 + 2;
  if ((a19 & 2) == 0)
  {
LABEL_16:
    v128 = v36;
    v37 = result;
    v38 = (_DWORD)result - v132;
    v39 = (char *)&v136[3 * v132] + 2 * a17;
    do
    {
      memset_pattern16(v39, &unk_218BBC0D0, 4uLL);
      v39 += 24;
      --v38;
    }
    while (v38);
    v32 = a17;
    a2 = v134;
    result = v37;
    v22 = a19;
    a7 = v133;
    v36 = v128;
  }
LABEL_19:
  v40 = v36;
  if ((v22 & 4) != 0)
  {
    v41 = v132;
    if (v132 < 0)
      v42 = -1;
    else
      v42 = v132;
    v43 = (v42 + 1);
    v44 = &__b[12 * v132];
    do
    {
      v45 = v36 + 26;
      do
      {
        v44[v45] = *(unsigned __int8 *)(a4 + v45 - 26);
        ++v45;
      }
      while (v45 - v32 != 26);
      a4 += a2;
      ++v41;
      v44 += 12;
    }
    while (v41 != v43);
  }
  v46 = 0;
  if (v36 < 0)
    v47 = -1;
  else
    v47 = v36;
  v48 = (v47 + 1) - (uint64_t)v36;
  v49 = &__b[v36 + 26];
  v50 = v36 + a3 + 2;
  do
  {
    v51 = (unsigned __int8 *)v50;
    v52 = v49;
    v53 = v48;
    if ((v22 & 1) != 0)
    {
      do
      {
        v54 = *v51++;
        *v52++ = v54;
        --v53;
      }
      while (v53);
    }
    ++v46;
    v49 += 12;
    v50 += 2;
  }
  while (v46 != a18);
  v55 = 0;
  v56 = v136;
  v57 = a1;
  do
  {
    v58 = 0;
    do
    {
      *((_WORD *)v56 + v58) = *(unsigned __int8 *)(v57 + v58);
      ++v58;
    }
    while (v32 != v58);
    v57 += a2;
    v56 += 3;
    ++v55;
  }
  while (v55 != a18);
  if ((int)result > (int)a18)
  {
    v59 = a18;
    do
    {
      v60 = v40;
      do
      {
        *((_WORD *)v56 + v60) = *(unsigned __int8 *)(a5 + v60);
        ++v60;
      }
      while (v32 != v60);
      a5 += a2;
      v56 += 3;
      ++v59;
    }
    while (v59 != (_DWORD)result);
  }
  if (a6)
  {
    v61 = __clz(a6);
    v62 = (v61 + a16 - 31) & ~((int)(v61 + a16 - 31) >> 31);
    if (a7)
    {
      v63 = vdupq_n_s32(a7);
      v64 = vdup_n_s32(a6);
      v65 = (uint32x2_t)vneg_s32(vdup_n_s32(v62));
      v66 = (uint32x4_t)vnegq_s32(vdupq_n_s32(__clz(a7) + a16 - 31));
      do
      {
        v67 = 0;
        do
        {
          v68 = 0;
          v69 = 0;
          v70 = *(unsigned __int8 *)(a1 + v67);
          v71 = vdupq_n_s32(v70);
          v72 = 1;
          v73 = v70;
          v74 = v70;
          v75 = 4 - (a6 & 1);
          do
          {
            result = (__int16 *)v72;
            v76 = byte_218BBFD90[2 * a8 + 4 + v68];
            a15.i16[0] = *((_WORD *)v28 + (int)v67 - v76);
            a15.i16[2] = *((_WORD *)v28 + (int)v67 + v76);
            v77 = vshr_n_s32(vshl_n_s32(a15, 0x10uLL), 0x10uLL);
            v78 = vabd_s32(v77, *(int32x2_t *)v71.i8);
            v79 = (int8x8_t)vcltz_s32(vsub_s32(v77, *(int32x2_t *)v71.i8));
            v80 = v77.i32[1];
            v81 = v77.i32[0];
            v82 = byte_218BBFD90[2 * a8 + 8 + v68];
            v83 = byte_218BBFD90[2 * a8 + v68];
            v84.i16[0] = *((_WORD *)v28 + (int)v67 + v82);
            v85 = vmin_s32(v78, vmax_s32(vsub_s32(v64, (int32x2_t)vshl_u32((uint32x2_t)v78, v65)), 0));
            v84.i16[1] = *((_WORD *)v28 + (int)v67 - v82);
            v84.i16[2] = *((_WORD *)v28 + (int)v67 + v83);
            v84.i16[3] = *((_WORD *)v28 + (int)v67 - v83);
            v86 = vmovl_s16(v84);
            v87 = vabdq_s32(v86, v71);
            v88 = (int32x2_t)vbsl_s8(v79, (int8x8_t)vneg_s32(v85), (int8x8_t)v85);
            v89 = vminq_s32(v87, vmaxq_s32(vsubq_s32(v63, (int32x4_t)vshlq_u32((uint32x4_t)v87, v66)), (int32x4_t)0));
            v90 = 2 - v68;
            v91 = vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v86, v71)), (int8x16_t)vnegq_s32(v89), (int8x16_t)v89));
            a15 = vadd_s32(v88, vdup_lane_s32(v88, 1));
            v92 = vminvq_u32((uint32x4_t)v86);
            v93 = v69 + a15.i32[0] * v75;
            if (v92 >= v80)
              v94 = v80;
            else
              v94 = v92;
            if (v81 < v74)
              v74 = v81;
            if (v94 < v74)
              v74 = v94;
            v69 = v93 + v91 * v90;
            a15.i32[0] = vmaxvq_s32(v86);
            v95 = a15.i32[0];
            if (a15.i32[0] <= v80)
              v95 = v80;
            if (v81 > v73)
              v73 = v81;
            if (v95 > v73)
              v73 = v95;
            v68 = 1;
            v75 = v75 & 1 | 2;
            v72 = 0;
          }
          while ((result & 1) != 0);
          v96 = v70 + ((v69 + (v69 >> 31) + 8) >> 4);
          if (v96 >= v73)
            v97 = v73;
          else
            v97 = v96;
          if (v96 >= (int)v74)
            v98 = v97;
          else
            v98 = v74;
          *(_BYTE *)(a1 + v67++) = v98;
        }
        while (v67 != a17);
        a1 += a2;
        v28 += 3;
        --v23;
      }
      while (v23);
    }
    else
    {
      v113 = vdup_n_s32(a6);
      v114 = (uint32x2_t)vneg_s32(vdup_n_s32(v62));
      do
      {
        v115 = 0;
        do
        {
          v116 = 0;
          v117 = 0;
          v118 = *(unsigned __int8 *)(a1 + v115);
          v119 = vdup_n_s32(v118);
          v120 = 1;
          v121 = 4 - (a6 & 1);
          do
          {
            v122 = byte_218BBFD90[2 * a8 + 4 + v116];
            a13.i16[0] = *((_WORD *)v28 + (int)v115 - v122);
            a13.i16[2] = *((_WORD *)v28 + (int)v115 + v122);
            v123 = vshr_n_s32(vshl_n_s32(a13, 0x10uLL), 0x10uLL);
            v124 = vabd_s32(v123, v119);
            v125 = vmin_s32(v124, vmax_s32(vsub_s32(v113, (int32x2_t)vshl_u32((uint32x2_t)v124, v114)), 0));
            v126 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vsub_s32(v123, v119)), (int8x8_t)vneg_s32(v125), (int8x8_t)v125);
            a13 = vadd_s32(v126, vdup_lane_s32(v126, 1));
            v127 = v120;
            v117 += a13.i32[0] * v121;
            v116 = 1;
            v121 = v121 & 1 | 2;
            v120 = 0;
          }
          while ((v127 & 1) != 0);
          *(_BYTE *)(a1 + v115++) = v118 + ((v117 + (v117 >> 31) + 8) >> 4);
        }
        while (v115 != a17);
        a1 += a2;
        v28 += 3;
        --v23;
      }
      while (v23);
    }
  }
  else
  {
    v99 = vdupq_n_s32(a7);
    v100 = (uint32x4_t)vnegq_s32(vdupq_n_s32(__clz(a7) + a16 - 31));
    do
    {
      v101 = 0;
      do
      {
        v102 = 0;
        v103 = 0;
        v104 = *(unsigned __int8 *)(a1 + v101);
        v105 = vdupq_n_s32(v104);
        v106 = 1;
        do
        {
          v107 = byte_218BBFD90[2 * a8 + 8 + v102];
          v108 = byte_218BBFD90[2 * a8 + v102];
          result = (__int16 *)v28 + (int)v101 - v107;
          v109.i16[0] = *((_WORD *)v28 + (int)v101 + v107);
          v109.i16[1] = *result;
          v109.i16[2] = *((_WORD *)v28 + (int)v101 + v108);
          v109.i16[3] = *((_WORD *)v28 + (int)v101 - v108);
          v110 = vmovl_s16(v109);
          v111 = vabdq_s32(v110, v105);
          v112 = vminq_s32(v111, vmaxq_s32(vsubq_s32(v99, (int32x4_t)vshlq_u32((uint32x4_t)v111, v100)), (int32x4_t)0));
          LOBYTE(v107) = v106;
          v103 += vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v110, v105)), (int8x16_t)vnegq_s32(v112), (int8x16_t)v112))* (2 - v102);
          v102 = 1;
          v106 = 0;
        }
        while ((v107 & 1) != 0);
        *(_BYTE *)(a1 + v101++) = v104 + ((v103 + (v103 >> 31) + 8) >> 4);
      }
      while (v101 != a17);
      a1 += a2;
      v28 += 3;
      --v23;
    }
    while (v23);
  }
  return result;
}

uint64_t sub_218B958BC(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  char *v15;
  int v16;
  uint64_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  __int16 *v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t i;
  uint64_t v33;
  int v34;
  int *v35;
  int v36;
  uint64_t result;
  uint64_t j;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _OWORD v45[11];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[2];
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _OWORD v53[2];
  _OWORD v54[2];
  uint64_t v55;

  v4 = 0;
  v55 = *MEMORY[0x24BDAC8D0];
  memset(v54, 0, sizeof(v54));
  memset(v53, 0, sizeof(v53));
  v52 = 0;
  v5 = 24 - __clz(a4);
  v50 = 0u;
  v51 = 0u;
  memset(v49, 0, sizeof(v49));
  v47 = 0u;
  v48 = 0u;
  v46 = 0u;
  v6 = a2 & 0xFFFFFFFFFFFFFFFELL;
  v7 = 88;
  v8 = &v46;
  memset(v45, 0, sizeof(v45));
  do
  {
    v9 = 0;
    v10 = (2 * v4) & 0xFFFFFFFFFFFFFFFCLL;
    v11 = (char *)&v45[8] + v10 + 4;
    v12 = (char *)&v45[6] - v10 + 4;
    v13 = v7;
    do
    {
      v14 = (*(unsigned __int16 *)(a1 + 2 * v9) >> v5) - 128;
      *((_DWORD *)v8 + v9) += v14;
      *((_DWORD *)v45 + v4 + (v9 >> 1)) += v14;
      *((_DWORD *)v53 + v4) += v14;
      v15 = (char *)v45 + 4 * (v4 + 3 - (v9 >> 1));
      v16 = *(_DWORD *)((char *)&v46 + v13);
      *((_DWORD *)v15 + 11) += v14;
      *(_DWORD *)((char *)&v46 + v13) = v16 + v14;
      *(_DWORD *)&v12[4 * v9] += v14;
      *((_DWORD *)v54 + v9) += v14;
      *(_DWORD *)&v11[4 * v9++] += v14;
      v13 -= 4;
    }
    while (v9 != 8);
    ++v4;
    v7 += 4;
    v8 = (__int128 *)((char *)v8 + 4);
    a1 += v6;
  }
  while (v4 != 8);
  v17 = 0;
  v42 = 0;
  v41 = 0;
  v44 = 0;
  v18 = 0uLL;
  v19 = 0uLL;
  v43 = 0;
  do
  {
    v18 = vmlaq_s32(v18, (int32x4_t)v53[v17], (int32x4_t)v53[v17]);
    v19 = vmlaq_s32(v19, (int32x4_t)v53[v17 + 2], (int32x4_t)v53[v17 + 2]);
    ++v17;
  }
  while (v17 != 2);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  HIDWORD(v41) = 105 * vaddvq_s32(v18);
  HIDWORD(v43) = 105 * vaddvq_s32(v19);
  v23 = 116;
  v24 = word_218BBFD82;
  do
  {
    v25 = (unsigned __int16)*v24++;
    v21 += (*(_DWORD *)((char *)&v46 + v20) * *(_DWORD *)((char *)&v46 + v20)
          + *(_DWORD *)((char *)&v45[7] + v23 + 4) * *(_DWORD *)((char *)&v45[7] + v23 + 4))
         * v25;
    v22 += (*(_DWORD *)((char *)v49 + v20 + 12) * *(_DWORD *)((char *)v49 + v20 + 12)
          + *(_DWORD *)((char *)&v46 + v23) * *(_DWORD *)((char *)&v46 + v23))
         * v25;
    v23 -= 4;
    v20 += 4;
  }
  while (v23 != 88);
  v26 = 0;
  v27 = v21 + 105 * HIDWORD(v47) * HIDWORD(v47);
  v40 = v27;
  HIDWORD(v42) = v22 + 105 * DWORD2(v50) * DWORD2(v50);
  v28 = v45;
  v29 = (char *)&v45[2] + 8;
  do
  {
    v30 = (2 * v26) | 1;
    v31 = *(&v40 + v30);
    for (i = 12; i != 32; i += 4)
      v31 += *(_DWORD *)((char *)v28 + i) * *(_DWORD *)((char *)v28 + i);
    v33 = 0;
    v34 = 105 * v31;
    v35 = (int *)v29;
    do
    {
      v36 = *v35--;
      v34 += (*(_DWORD *)((char *)v28 + v33 * 2) * *(_DWORD *)((char *)v28 + v33 * 2) + v36 * v36)
           * (unsigned __int16)word_218BBFD82[v33 + 1];
      v33 += 2;
    }
    while (v33 != 6);
    *(&v40 + v30) = v34;
    ++v26;
    v28 = (_OWORD *)((char *)v28 + 44);
    v29 += 44;
  }
  while (v26 != 4);
  LODWORD(result) = 0;
  for (j = 1; j != 8; ++j)
  {
    v39 = *(&v40 + j);
    if (v39 <= v27)
      result = result;
    else
      result = j;
    if (v39 > v27)
      v27 = *(&v40 + j);
  }
  *a3 = (v27 - *(&v40 + ((int)result ^ 4))) >> 10;
  return result;
}

__int16 *sub_218B95BF4(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, int a9, char a10, unsigned int a11)
{
  return sub_218B95F34(a1, a2, a3, a4, a5, a6, a7, a8, a9, 8u, 8u, a10, a11);
}

__int16 *sub_218B95C28(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, int a9, char a10, unsigned int a11)
{
  return sub_218B95F34(a1, a2, a3, a4, a5, a6, a7, a8, a9, 4u, 8u, a10, a11);
}

__int16 *sub_218B95C60(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, int a9, char a10, unsigned int a11)
{
  return sub_218B95F34(a1, a2, a3, a4, a5, a6, a7, a8, a9, 4u, 4u, a10, a11);
}

int16x8_t *sub_218B95C94(__int128 *a1, uint64_t a2, int *a3, __int128 *a4, __int128 *a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int16x8_t v17[20];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  sub_218B527A4((uint64_t)v17, a1, a2, a3, a4, a5, 8, a10);
  return sub_218B530CC((int16x8_t *)a1, a2, v17, a6, a7, a8, a9, 8, a10, a11);
}

_QWORD *sub_218B95D74(uint64_t *a1, uint64_t a2, int *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  uint64_t v17[22];

  v17[21] = *MEMORY[0x24BDAC8D0];
  sub_218B52A30((uint64_t)v17, a1, a2, a3, a4, a5, 8, a10);
  return sub_218B5357C(a1, a2, v17, a6, a7, a8, a9, 8, a10, a11);
}

_QWORD *sub_218B95E54(uint64_t *a1, uint64_t a2, int *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  uint64_t v17[22];

  v17[21] = *MEMORY[0x24BDAC8D0];
  sub_218B52A30((uint64_t)v17, a1, a2, a3, a4, a5, 4, a10);
  return sub_218B5357C(a1, a2, v17, a6, a7, a8, a9, 4, a10, a11);
}

__int16 *sub_218B95F34(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, int a9, unsigned int a10, unsigned int a11, char a12, unsigned int a13)
{
  uint64_t v14;
  char v16;
  unsigned int v17;
  char v19;
  _BYTE *v20;
  char v21;
  _QWORD *v22;
  char v23;
  char *v24;
  char v25;
  unsigned int v26;
  int v27;
  char *v28;
  unsigned int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BYTE *v34;
  char *v35;
  uint64_t v36;
  int v37;
  size_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unsigned int v43;
  _QWORD *v44;
  __int16 *result;
  int32x2_t v46;
  int32x2_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  signed int v52;
  unsigned int v53;
  int32x4_t v54;
  int32x2_t v55;
  uint32x2_t v56;
  uint32x4_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int32x4_t v62;
  uint64_t v63;
  signed int v64;
  unsigned int v65;
  int v66;
  int v67;
  int32x2_t v68;
  int32x2_t v69;
  int8x8_t v70;
  int v71;
  __int32 v72;
  int v73;
  int v74;
  int16x4_t v75;
  int32x2_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x2_t v79;
  int32x4_t v80;
  int v81;
  int v82;
  unsigned int v83;
  __int32 v84;
  unsigned int v85;
  int v86;
  signed int v87;
  __int16 v88;
  __int16 v89;
  int32x4_t v90;
  uint32x4_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  int32x4_t v96;
  char v97;
  int v98;
  int v99;
  int16x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x2_t v104;
  uint32x2_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  int32x2_t v110;
  char v111;
  int v112;
  int v113;
  int32x2_t v114;
  int32x2_t v115;
  int32x2_t v116;
  int32x2_t v117;
  char v118;
  unsigned int v119;
  int v124;
  int v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE __b[52];
  _QWORD v130[31];

  v14 = a4;
  v16 = a12;
  *(_QWORD *)((char *)&v130[29] + 4) = *MEMORY[0x24BDAC8D0];
  v17 = a11 + 2;
  if ((a12 & 4) != 0)
  {
    v124 = -2;
  }
  else
  {
    v19 = 0;
    v20 = __b;
    do
    {
      v21 = v19;
      memset_pattern16(v20, &unk_218BBC0D0, 2 * (a10 + 4));
      v20 += 24;
      v19 = 1;
    }
    while ((v21 & 1) == 0);
    v124 = 0;
    v17 = a11 + 2;
    v16 = a12;
    v14 = a4;
  }
  v22 = v130;
  if ((v16 & 8) == 0)
  {
    v23 = 0;
    v24 = (char *)&v130[3 * a11 - 1] + 4;
    do
    {
      v25 = v23;
      memset_pattern16(v24, &unk_218BBC0D0, 2 * (a10 + 4));
      v24 += 24;
      v23 = 1;
    }
    while ((v25 & 1) == 0);
    v17 = a11;
    v16 = a12;
  }
  v26 = a10 + 2;
  v126 = v17;
  if ((v16 & 1) != 0)
  {
    v27 = -2;
  }
  else
  {
    v27 = v17 - v124;
    v28 = (char *)&v130[3 * v124 - 1] + 4;
    do
    {
      memset_pattern16(v28, &unk_218BBC0D0, 4uLL);
      v28 += 24;
      --v27;
    }
    while (v27);
    v16 = a12;
    v17 = v126;
  }
  if ((v16 & 2) == 0)
  {
    v29 = v17 - v124;
    v30 = (char *)&v130[3 * v124] + 2 * a10;
    do
    {
      memset_pattern16(v30, &unk_218BBC0D0, 4uLL);
      v30 += 24;
      --v29;
    }
    while (v29);
    v26 = a10;
    v16 = a12;
  }
  v119 = v26;
  if ((v16 & 4) != 0)
  {
    if (v124 < 0)
      v33 = -1;
    else
      v33 = v124;
    v34 = &__b[24 * v124 + 52 + 2 * v27];
    v35 = (char *)(v14 + 2 * v27);
    v36 = (v33 + 1) - (uint64_t)v124;
    do
    {
      memcpy(v34, v35, 2 * (v26 - (uint64_t)v27));
      v34 += 24;
      v35 += a2;
      --v36;
    }
    while (v36);
    v16 = a12;
    v31 = v27;
    v32 = 2 * v27;
  }
  else
  {
    v31 = v27;
    v32 = 2 * v27;
  }
  if (v27 < 0)
    v37 = -1;
  else
    v37 = v27;
  v127 = v31;
  v38 = 2 * ((v37 + 1) - v31);
  v39 = v32 + 52;
  v40 = (char *)(v32 + a3 + 4);
  v41 = a11;
  do
  {
    if ((v16 & 1) != 0)
    {
      memcpy(&__b[v39], v40, v38);
      v16 = a12;
    }
    v39 += 24;
    v40 += 4;
    --v41;
  }
  while (v41);
  v128 = a2 >> 1;
  v42 = a1;
  v43 = a11;
  v44 = v130;
  do
  {
    result = (__int16 *)memcpy(v44, v42, 2 * v119);
    v44 += 3;
    v42 += a2 & 0xFFFFFFFFFFFFFFFELL;
    --v43;
  }
  while (v43);
  v48 = a11;
  if (v126 > (int)a11)
  {
    v49 = a11;
    do
    {
      v50 = v127;
      do
      {
        *((_WORD *)v44 + v50) = *(_WORD *)(a5 + 2 * v50);
        ++v50;
      }
      while (v119 != v50);
      v44 += 3;
      ++v49;
      a5 += 2 * v128;
    }
    while (v49 != v126);
  }
  if (a6)
  {
    v51 = 4 - ((a6 >> (24 - __clz(a13))) & 1);
    v52 = __clz(a6) + a9 - 31;
    v53 = v52 & ~(v52 >> 31);
    if (a7)
    {
      v54 = vdupq_n_s32(a7);
      v55 = vdup_n_s32(a6);
      v56 = (uint32x2_t)vneg_s32(vdup_n_s32(v53));
      v57 = (uint32x4_t)vnegq_s32(vdupq_n_s32(__clz(a7) + a9 - 31));
      do
      {
        v58 = 0;
        do
        {
          v59 = 0;
          v60 = 0;
          v61 = *(unsigned __int16 *)&a1[2 * v58];
          v62 = vdupq_n_s32(v61);
          v63 = 1;
          v64 = v61;
          v65 = v61;
          v66 = v51;
          do
          {
            result = (__int16 *)v63;
            v67 = byte_218BBFD90[2 * a8 + 4 + v59];
            v47.i16[0] = *((_WORD *)v22 + (int)v58 - v67);
            v47.i16[2] = *((_WORD *)v22 + (int)v58 + v67);
            v68 = vshr_n_s32(vshl_n_s32(v47, 0x10uLL), 0x10uLL);
            v69 = vabd_s32(v68, *(int32x2_t *)v62.i8);
            v70 = (int8x8_t)vcltz_s32(vsub_s32(v68, *(int32x2_t *)v62.i8));
            v71 = v68.i32[1];
            v72 = v68.i32[0];
            v73 = byte_218BBFD90[2 * a8 + 8 + v59];
            v74 = byte_218BBFD90[2 * a8 + v59];
            v75.i16[0] = *((_WORD *)v22 + (int)v58 + v73);
            v76 = vmin_s32(v69, vmax_s32(vsub_s32(v55, (int32x2_t)vshl_u32((uint32x2_t)v69, v56)), 0));
            v75.i16[1] = *((_WORD *)v22 + (int)v58 - v73);
            v75.i16[2] = *((_WORD *)v22 + (int)v58 + v74);
            v75.i16[3] = *((_WORD *)v22 + (int)v58 - v74);
            v77 = vmovl_s16(v75);
            v78 = vabdq_s32(v77, v62);
            v79 = (int32x2_t)vbsl_s8(v70, (int8x8_t)vneg_s32(v76), (int8x8_t)v76);
            v80 = vminq_s32(v78, vmaxq_s32(vsubq_s32(v54, (int32x4_t)vshlq_u32((uint32x4_t)v78, v57)), (int32x4_t)0));
            v81 = 2 - v59;
            v82 = vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v77, v62)), (int8x16_t)vnegq_s32(v80), (int8x16_t)v80));
            v47 = vadd_s32(v79, vdup_lane_s32(v79, 1));
            v83 = vminvq_u32((uint32x4_t)v77);
            v84 = v60 + v47.i32[0] * v66;
            if (v83 >= v71)
              v85 = v71;
            else
              v85 = v83;
            if (v72 < v65)
              v65 = v72;
            if (v85 < v65)
              v65 = v85;
            v60 = v84 + v82 * v81;
            v47.i32[0] = vmaxvq_s32(v77);
            v86 = v47.i32[0];
            if (v47.i32[0] <= v71)
              v86 = v71;
            if (v72 > v64)
              v64 = v72;
            if (v86 > v64)
              v64 = v86;
            v59 = 1;
            v66 = v66 & 1 | 2;
            v63 = 0;
          }
          while ((result & 1) != 0);
          v87 = v61 + ((v60 + (v60 >> 31) + 8) >> 4);
          if (v87 >= v64)
            v88 = v64;
          else
            v88 = v87;
          if (v87 >= (int)v65)
            v89 = v88;
          else
            v89 = v65;
          *(_WORD *)&a1[2 * v58++] = v89;
        }
        while (v58 != a10);
        a1 += 2 * v128;
        v22 += 3;
        --v48;
      }
      while (v48);
    }
    else
    {
      v104 = vdup_n_s32(a6);
      v105 = (uint32x2_t)vneg_s32(vdup_n_s32(v53));
      do
      {
        v106 = 0;
        do
        {
          v107 = 0;
          v108 = 0;
          v109 = *(unsigned __int16 *)&a1[2 * v106];
          v110 = vdup_n_s32(v109);
          v111 = 1;
          v112 = v51;
          do
          {
            v113 = byte_218BBFD90[2 * a8 + 4 + v107];
            v46.i16[0] = *((_WORD *)v22 + (int)v106 - v113);
            v46.i16[2] = *((_WORD *)v22 + (int)v106 + v113);
            v114 = vshr_n_s32(vshl_n_s32(v46, 0x10uLL), 0x10uLL);
            v115 = vabd_s32(v114, v110);
            v116 = vmin_s32(v115, vmax_s32(vsub_s32(v104, (int32x2_t)vshl_u32((uint32x2_t)v115, v105)), 0));
            v117 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vsub_s32(v114, v110)), (int8x8_t)vneg_s32(v116), (int8x8_t)v116);
            v46 = vadd_s32(v117, vdup_lane_s32(v117, 1));
            v118 = v111;
            v108 += v46.i32[0] * v112;
            v107 = 1;
            v112 = v112 & 1 | 2;
            v111 = 0;
          }
          while ((v118 & 1) != 0);
          *(_WORD *)&a1[2 * v106++] = v109 + ((v108 + (v108 >> 31) + 8) >> 4);
        }
        while (v106 != a10);
        a1 += 2 * v128;
        v22 += 3;
        --v48;
      }
      while (v48);
    }
  }
  else
  {
    v90 = vdupq_n_s32(a7);
    v91 = (uint32x4_t)vnegq_s32(vdupq_n_s32(__clz(a7) + a9 - 31));
    do
    {
      v92 = 0;
      do
      {
        v93 = 0;
        v94 = 0;
        v95 = *(unsigned __int16 *)&a1[2 * v92];
        v96 = vdupq_n_s32(v95);
        v97 = 1;
        do
        {
          v98 = byte_218BBFD90[2 * a8 + 8 + v93];
          v99 = byte_218BBFD90[2 * a8 + v93];
          result = (__int16 *)v22 + (int)v92 - v98;
          v100.i16[0] = *((_WORD *)v22 + (int)v92 + v98);
          v100.i16[1] = *result;
          v100.i16[2] = *((_WORD *)v22 + (int)v92 + v99);
          v100.i16[3] = *((_WORD *)v22 + (int)v92 - v99);
          v101 = vmovl_s16(v100);
          v102 = vabdq_s32(v101, v96);
          v103 = vminq_s32(v102, vmaxq_s32(vsubq_s32(v90, (int32x4_t)vshlq_u32((uint32x4_t)v102, v91)), (int32x4_t)0));
          LOBYTE(v98) = v97;
          v94 += vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vsubq_s32(v101, v96)), (int8x16_t)vnegq_s32(v103), (int8x16_t)v103))* (2 - v93);
          v93 = 1;
          v97 = 0;
        }
        while ((v98 & 1) != 0);
        *(_WORD *)&a1[2 * v92++] = v95 + ((v94 + (v94 >> 31) + 8) >> 4);
      }
      while (v92 != a10);
      a1 += 2 * v128;
      v22 += 3;
      --v48;
    }
    while (v48);
  }
  return result;
}

uint64_t sub_218B966A8(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  char v36;
  uint64_t v37;
  _WORD *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  signed int v50;
  int v51;
  uint64_t v52;
  int v53;
  int i;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  uint64_t v61;
  _WORD *v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  BOOL v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  unint64_t v100;
  unsigned int v101;
  int v102;
  int v103;
  unsigned int v104;
  unint64_t v105;
  unsigned int v106;
  unsigned __int8 *v107;
  int v108;
  unsigned __int8 *v109;
  unint64_t v110;
  BOOL v111;
  _QWORD *v112;
  uint64_t v113;
  int v114;
  int v115;
  unsigned __int8 *v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  unsigned __int8 *v120;
  char v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  _DWORD *v126;
  unsigned int v127;
  unsigned __int8 v128;
  unsigned int v129;
  unsigned __int8 v130;
  _WORD v131[6];

  v4 = result;
  v126 = *(_DWORD **)(result + 8);
  v5 = v126[542];
  v6 = v5 != 3;
  v7 = &byte_218BCF600[4 * a2];
  v8 = *v7;
  if (v5 == 3)
    v9 = *v7;
  else
    v9 = v8 + 1;
  v10 = *(_DWORD *)(result + 24);
  v11 = *(_DWORD *)(result + 28);
  v110 = v10 & 0x1F;
  v117 = v110 >> v6;
  v124 = v5 == 1;
  v105 = v11 & 0x1F;
  v100 = v105 >> v124;
  v12 = v7[1];
  if (v5 == 1)
    v13 = v12 + 1;
  else
    v13 = v7[1];
  if (!v5 || (v8 <= v6 ? (v14 = (*(_DWORD *)(result + 24) & 1) == 0) : (v14 = 0), v14))
  {
    v94 = 0;
  }
  else
  {
    if (v12 <= v124)
      v15 = *(_DWORD *)(result + 28) & 1;
    else
      v15 = 1;
    v94 = v15;
  }
  if (*(_BYTE *)(a3 + 6))
  {
    switch(v12)
    {
      case 1:
        *(_BYTE *)(result + v105 + 64) = 64;
        break;
      case 2:
        *(_WORD *)(result + v105 + 64) = 16448;
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 4:
        *(_DWORD *)(result + v105 + 64) = 1077952576;
        break;
      case 8:
        *(_QWORD *)(result + v105 + 64) = 0x4040404040404040;
        break;
      default:
        if (v12 == 16)
        {
          *(_QWORD *)&v71 = 0x4040404040404040;
          *((_QWORD *)&v71 + 1) = 0x4040404040404040;
          *(_OWORD *)(result + v105 + 64) = v71;
        }
        else if (v12 == 32)
        {
          *(_QWORD *)&v70 = 0x4040404040404040;
          *((_QWORD *)&v70 + 1) = 0x4040404040404040;
          *(_OWORD *)(result + 64 + v105) = v70;
          *(_OWORD *)(result + 64 + (v105 + 16)) = v70;
        }
        break;
    }
    switch(v8)
    {
      case 1:
        *(_BYTE *)(*(_QWORD *)(result + 656) + v110 + 32) = 64;
        goto LABEL_135;
      case 2:
        *(_WORD *)(*(_QWORD *)(result + 656) + v110 + 32) = 16448;
        goto LABEL_135;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_135;
      case 4:
        *(_DWORD *)(*(_QWORD *)(result + 656) + v110 + 32) = 1077952576;
        goto LABEL_135;
      case 8:
        v74 = *(_QWORD *)(result + 656) + v110;
        goto LABEL_134;
      default:
        if (v8 == 16)
        {
          *(_QWORD *)(*(_QWORD *)(result + 656) + v110 + 32) = 0x4040404040404040;
          v72 = *(_QWORD *)(result + 656);
          v73 = (v110 + 8);
        }
        else
        {
          if (v8 != 32)
            goto LABEL_135;
          *(_QWORD *)(*(_QWORD *)(result + 656) + v110 + 32) = 0x4040404040404040;
          *(_QWORD *)(*(_QWORD *)(result + 656) + (v110 + 8) + 32) = 0x4040404040404040;
          *(_QWORD *)(*(_QWORD *)(result + 656) + (v110 + 16) + 32) = 0x4040404040404040;
          v72 = *(_QWORD *)(result + 656);
          v73 = (v110 + 24);
        }
        v74 = v72 + v73;
LABEL_134:
        *(_QWORD *)(v74 + 32) = 0x4040404040404040;
LABEL_135:
        if (v94)
        {
          v75 = v9 >> v6;
          v76 = v13 >> v124;
          switch(v13 >> v124)
          {
            case 1u:
              v77 = result + v100;
              *(_BYTE *)(v77 + 96) = 64;
              *(_BYTE *)(v77 + 128) = 64;
              break;
            case 2u:
              v82 = result + v100;
              *(_WORD *)(v82 + 96) = 16448;
              *(_WORD *)(v82 + 128) = 16448;
              break;
            case 3u:
            case 5u:
            case 6u:
            case 7u:
              break;
            case 4u:
              v83 = result + v100;
              *(_DWORD *)(v83 + 96) = 1077952576;
              *(_DWORD *)(v83 + 128) = 1077952576;
              break;
            case 8u:
              v84 = result + v100;
              *(_QWORD *)(v84 + 96) = 0x4040404040404040;
              *(_QWORD *)(v84 + 128) = 0x4040404040404040;
              break;
            default:
              if (v76 == 16)
              {
                v85 = result + v100;
                *(_QWORD *)&v86 = 0x4040404040404040;
                *((_QWORD *)&v86 + 1) = 0x4040404040404040;
                *(_OWORD *)(v85 + 96) = v86;
                *(_OWORD *)(v85 + 128) = v86;
              }
              else if (v76 == 32)
              {
                v78 = result + 96;
                *(_QWORD *)&v79 = 0x4040404040404040;
                *((_QWORD *)&v79 + 1) = 0x4040404040404040;
                *(_OWORD *)(v78 + v100) = v79;
                v80 = v100 + 16;
                *(_OWORD *)(v78 + v80) = v79;
                v81 = result + 128;
                *(_OWORD *)(v81 + v100) = v79;
                *(_OWORD *)(v81 + v80) = v79;
              }
              break;
          }
          switch(v75)
          {
            case 1u:
              *(_BYTE *)(*(_QWORD *)(result + 656) + v117 + 64) = 64;
              *(_BYTE *)(*(_QWORD *)(result + 656) + v117 + 96) = 64;
              return result;
            case 2u:
              *(_WORD *)(*(_QWORD *)(result + 656) + v117 + 64) = 16448;
              *(_WORD *)(*(_QWORD *)(result + 656) + v117 + 96) = 16448;
              return result;
            case 3u:
            case 5u:
            case 6u:
            case 7u:
              return result;
            case 4u:
              *(_DWORD *)(*(_QWORD *)(result + 656) + v117 + 64) = 1077952576;
              *(_DWORD *)(*(_QWORD *)(result + 656) + v117 + 96) = 1077952576;
              return result;
            case 8u:
              v89 = v110 >> v6;
              *(_QWORD *)(*(_QWORD *)(result + 656) + v117 + 64) = 0x4040404040404040;
              goto LABEL_155;
            default:
              if (v75 == 16)
              {
                *(_QWORD *)(*(_QWORD *)(result + 656) + v117 + 64) = 0x4040404040404040;
                v89 = v117 + 8;
                *(_QWORD *)(*(_QWORD *)(result + 656) + v89 + 64) = 0x4040404040404040;
                v90 = *(_QWORD *)(result + 656) + v117;
              }
              else
              {
                if (v75 != 32)
                  return result;
                *(_QWORD *)(*(_QWORD *)(result + 656) + v117 + 64) = 0x4040404040404040;
                v87 = v117 + 8;
                *(_QWORD *)(*(_QWORD *)(result + 656) + v87 + 64) = 0x4040404040404040;
                v88 = v117 + 16;
                *(_QWORD *)(*(_QWORD *)(result + 656) + v88 + 64) = 0x4040404040404040;
                v89 = v117 + 24;
                *(_QWORD *)(*(_QWORD *)(result + 656) + v89 + 64) = 0x4040404040404040;
                *(_QWORD *)(*(_QWORD *)(result + 656) + v117 + 96) = 0x4040404040404040;
                *(_QWORD *)(*(_QWORD *)(result + 656) + v87 + 96) = 0x4040404040404040;
                v90 = *(_QWORD *)(result + 656) + v88;
              }
              *(_QWORD *)(v90 + 96) = 0x4040404040404040;
LABEL_155:
              *(_QWORD *)(*(_QWORD *)(result + 656) + v89 + 96) = 0x4040404040404040;
              break;
          }
        }
        break;
    }
  }
  else
  {
    v16 = *(_QWORD *)(result + 16);
    v17 = v126[862] - v10;
    if (v8 < v17)
      v17 = v8;
    v97 = v17;
    if (v12 >= v126[863] - v11)
      v18 = v126[863] - v11;
    else
      v18 = v12;
    v19 = 10;
    if (!*(_BYTE *)(a3 + 3))
      v19 = 26;
    v20 = *(unsigned __int8 *)(a3 + v19);
    v21 = *(unsigned __int8 *)(a3 + 7);
    v131[0] = *(unsigned __int8 *)(a3 + 29);
    v131[1] = *(_WORD *)(a3 + 30);
    if (v18 >= 1)
    {
      v92 = (int)(v97 + v6) >> v6;
      v91 = (int)(v18 + v124) >> v124;
      v109 = &byte_218BCF658[8 * v20];
      v107 = v109 + 1;
      v113 = result + 9344;
      v22 = 0;
      v116 = &byte_218BCF658[8 * v21];
      v120 = v116 + 1;
      v125 = v6;
      v103 = v18;
      do
      {
        v23 = v22 + 16;
        if (v18 >= (int)(v22 + 16))
          v24 = v22 + 16;
        else
          v24 = v18;
        v99 = v24;
        v25 = v22;
        if (v97 >= 1)
        {
          v26 = 0;
          v93 = v22 != 0;
          v27 = v91;
          if (v91 >= (int)(v23 >> v124))
            v27 = v23 >> v124;
          v28 = v97;
          v98 = v25;
          v96 = v25 >> v124;
          v104 = v23;
          v102 = v27;
          do
          {
            v95 = v26 + 16;
            if (v28 >= (int)(v26 + 16))
              v29 = v26 + 16;
            else
              v29 = v28;
            v30 = v11 + v98;
            *(_DWORD *)(v4 + 28) = v30;
            v106 = v26;
            if (v98 >= v99)
            {
              v31 = v98;
            }
            else
            {
              v111 = v26 != 0;
              v31 = v98;
              v122 = v93;
              do
              {
                v32 = v10 + v26;
                *(_DWORD *)(v4 + 24) = v32;
                v33 = v26;
                if ((int)v26 < v29)
                {
                  v114 = v31;
                  v34 = (v31 + v105);
                  v33 = v26;
                  v35 = (unsigned __int8 *)(v4 + 64 + v34);
                  v118 = (_QWORD *)(v4 + 64 + (v34 + 8));
                  v36 = v111;
                  do
                  {
                    if (*(_BYTE *)(a3 + 3))
                    {
                      v130 = 64;
                      v129 = 0;
                      v37 = (v33 + v110);
                      result = sub_218B979B8(v4, *(_QWORD *)(v4 + 656) + v37 + 32, (uint64_t)v35, *(unsigned __int8 *)(a3 + 10), a2, a3, 1, 0, *(_QWORD *)(v16 + 13936), &v129, &v130);
                      v38 = *(_WORD **)(v16 + 13928);
                      *v38 = v129 + 32 * result;
                      *(_QWORD *)(v16 + 13928) = v38 + 1;
                      v39 = *v109;
                      if (v39 >= 8)
                        v40 = 8;
                      else
                        v40 = *v109;
                      v41 = *v107;
                      if (v41 >= 8)
                        v42 = 8;
                      else
                        v42 = *v107;
                      *(_QWORD *)(v16 + 13936) += 4 * (16 * v40 * v42);
                      v43 = v126[863] - *(_DWORD *)(v4 + 28);
                      if ((int)v41 < v43)
                        v43 = v41;
                      switch(v43)
                      {
                        case 1:
                          LODWORD(v44) = v130;
                          *v35 = v130;
                          break;
                        case 2:
                          LODWORD(v44) = v130;
                          *(_WORD *)v35 = v130 | (v130 << 8);
                          break;
                        case 3:
                        case 5:
                        case 6:
                        case 7:
                          goto LABEL_57;
                        case 4:
                          LODWORD(v44) = v130;
                          *(_DWORD *)v35 = 16843009 * v130;
                          break;
                        case 8:
                          LODWORD(v44) = v130;
                          *(_QWORD *)v35 = 0x101010101010101 * v130;
                          break;
                        default:
                          if (v43 == 16)
                          {
                            v44 = v130;
                            *(_QWORD *)v35 = 0x101010101010101 * v130;
                            *v118 = 0x101010101010101 * v44;
                          }
                          else
                          {
LABEL_57:
                            LODWORD(v44) = v130;
                            result = (uint64_t)memset(v35, v130, v43);
                          }
                          break;
                      }
                      LOBYTE(v6) = v125;
                      v45 = v126[862] - *(_DWORD *)(v4 + 24);
                      if ((int)v39 < v45)
                        v45 = v39;
                      switch(v45)
                      {
                        case 1:
                          *(_BYTE *)(*(_QWORD *)(v4 + 656) + v37 + 32) = v44;
                          break;
                        case 2:
                          *(_WORD *)(*(_QWORD *)(v4 + 656) + v37 + 32) = v44 | ((_WORD)v44 << 8);
                          break;
                        case 3:
                        case 5:
                        case 6:
                        case 7:
                          goto LABEL_67;
                        case 4:
                          *(_DWORD *)(*(_QWORD *)(v4 + 656) + v37 + 32) = 16843009 * v44;
                          break;
                        case 8:
                          v46 = 0x101010101010101 * v44;
                          v47 = *(_QWORD *)(v4 + 656) + v37;
                          goto LABEL_71;
                        default:
                          if (v45 == 16)
                          {
                            v46 = 0x101010101010101 * v44;
                            *(_QWORD *)(*(_QWORD *)(v4 + 656) + v37 + 32) = v46;
                            v47 = *(_QWORD *)(v4 + 656) + (v37 + 8);
LABEL_71:
                            *(_QWORD *)(v47 + 32) = v46;
                          }
                          else
                          {
LABEL_67:
                            result = (uint64_t)memset((void *)(*(_QWORD *)(v4 + 656) + v37 + 32), v44, v45);
                            LOBYTE(v6) = v125;
                          }
                          break;
                      }
                    }
                    else
                    {
                      result = sub_218B973C8(v4, a2, a3, *(unsigned __int8 *)(a3 + 26), 0, (uint64_t)v131, v36, v122, 0);
                      LOBYTE(v6) = v125;
                      v39 = *v109;
                    }
                    v33 += v39;
                    v32 = *(_DWORD *)(v4 + 24) + v39;
                    *(_DWORD *)(v4 + 24) = v32;
                    ++v36;
                  }
                  while (v33 < v29);
                  v30 = *(_DWORD *)(v4 + 28);
                  v26 = v106;
                  v31 = v114;
                }
                v10 = v32 - v33;
                v48 = *v107;
                v31 += v48;
                v30 += v48;
                *(_DWORD *)(v4 + 24) = v10;
                *(_DWORD *)(v4 + 28) = v30;
                ++v122;
              }
              while (v31 < v99);
            }
            v11 = v30 - v31;
            *(_DWORD *)(v4 + 28) = v11;
            if (v94)
            {
              v119 = 0;
              v49 = v95 >> v6;
              if (v92 < (int)(v95 >> v6))
                v49 = v92;
              v123 = v49;
              v50 = v26 >> v6;
              v18 = v103;
              v23 = v104;
              v51 = v102;
              v101 = v26 >> v6;
              do
              {
                v52 = v119;
                v53 = v11 + v98;
                *(_DWORD *)(v4 + 28) = v53;
                ++v119;
                for (i = v96; i < v51; *(_DWORD *)(v4 + 28) = v53)
                {
                  v55 = v10 + v26;
                  *(_DWORD *)(v4 + 24) = v55;
                  if (v50 >= v123)
                  {
                    v64 = *v120;
                    v59 = v50;
                  }
                  else
                  {
                    v115 = v110 | (32 * ((i << v124) + v105));
                    v108 = i;
                    v56 = (i + v100);
                    v57 = v4 + 32 * v52 + 96;
                    v58 = (unsigned __int8 *)(v57 + v56);
                    v112 = (_QWORD *)(v57 + (v56 + 8));
                    v59 = v50;
                    while (2)
                    {
                      v128 = 64;
                      v127 = 0;
                      v60 = *(unsigned __int8 *)(a3 + 3);
                      if (!*(_BYTE *)(a3 + 3))
                        v127 = *(unsigned __int8 *)(v113 + v115 + (v59 << v6));
                      v61 = (v59 + v117);
                      result = sub_218B979B8(v4, *(_QWORD *)(v4 + 656) + 32 * v52 + v61 + 64, (uint64_t)v58, *(unsigned __int8 *)(a3 + 7), a2, a3, v60, v119, *(_QWORD *)(v16 + 13936), &v127, &v128);
                      v62 = *(_WORD **)(v16 + 13928);
                      *v62 = v127 + 32 * result;
                      *(_QWORD *)(v16 + 13928) = v62 + 1;
                      v63 = *v116;
                      v64 = *v120;
                      *(_QWORD *)(v16 + 13936) += (*v116 * (unint64_t)*v120) << 6;
                      v65 = (int)(v126[863] + v124 - *(_DWORD *)(v4 + 28)) >> v124;
                      if (v64 < v65)
                        v65 = v64;
                      switch(v65)
                      {
                        case 1:
                          LODWORD(v66) = v128;
                          *v58 = v128;
                          break;
                        case 2:
                          LODWORD(v66) = v128;
                          *(_WORD *)v58 = v128 | (v128 << 8);
                          break;
                        case 3:
                        case 5:
                        case 6:
                        case 7:
                          goto LABEL_92;
                        case 4:
                          LODWORD(v66) = v128;
                          *(_DWORD *)v58 = 16843009 * v128;
                          break;
                        case 8:
                          LODWORD(v66) = v128;
                          *(_QWORD *)v58 = 0x101010101010101 * v128;
                          break;
                        default:
                          if (v65 == 16)
                          {
                            v66 = v128;
                            *(_QWORD *)v58 = 0x101010101010101 * v128;
                            *v112 = 0x101010101010101 * v66;
                          }
                          else
                          {
LABEL_92:
                            LODWORD(v66) = v128;
                            result = (uint64_t)memset(v58, v128, v65);
                          }
                          break;
                      }
                      v6 = v125;
                      v67 = (int)(v126[862] + v6 - *(_DWORD *)(v4 + 24)) >> v6;
                      if (v63 < v67)
                        v67 = v63;
                      switch(v67)
                      {
                        case 1:
                          *(_BYTE *)(*(_QWORD *)(v4 + 656) + 32 * v52 + v61 + 64) = v66;
                          goto LABEL_107;
                        case 2:
                          *(_WORD *)(*(_QWORD *)(v4 + 656) + 32 * v52 + v61 + 64) = v66 | ((_WORD)v66 << 8);
                          goto LABEL_107;
                        case 3:
                        case 5:
                        case 6:
                        case 7:
                          goto LABEL_102;
                        case 4:
                          *(_DWORD *)(*(_QWORD *)(v4 + 656) + 32 * v52 + v61 + 64) = 16843009 * v66;
                          goto LABEL_107;
                        case 8:
                          v68 = 0x101010101010101 * v66;
                          v69 = *(_QWORD *)(v4 + 656) + 32 * v52 + v61;
                          goto LABEL_106;
                        default:
                          if (v67 == 16)
                          {
                            v68 = 0x101010101010101 * v66;
                            *(_QWORD *)(*(_QWORD *)(v4 + 656) + 32 * v52 + v61 + 64) = v68;
                            v69 = *(_QWORD *)(v4 + 656) + 32 * v52 + (v61 + 8);
LABEL_106:
                            *(_QWORD *)(v69 + 64) = v68;
                          }
                          else
                          {
LABEL_102:
                            result = (uint64_t)memset((void *)(*(_QWORD *)(v4 + 656) + 32 * v52 + v61 + 64), v66, v67);
                            LOBYTE(v6) = v125;
                          }
LABEL_107:
                          v59 += v63;
                          v55 = *(_DWORD *)(v4 + 24) + (v63 << v6);
                          *(_DWORD *)(v4 + 24) = v55;
                          if (v59 < v123)
                            continue;
                          v53 = *(_DWORD *)(v4 + 28);
                          v18 = v103;
                          v23 = v104;
                          v50 = v101;
                          v51 = v102;
                          v26 = v106;
                          i = v108;
                          break;
                      }
                      break;
                    }
                  }
                  v10 = v55 - (v59 << v6);
                  i += v64;
                  v53 += v64 << v124;
                  *(_DWORD *)(v4 + 24) = v10;
                }
                v11 = v53 - (i << v124);
                *(_DWORD *)(v4 + 28) = v11;
                v28 = v97;
              }
              while (!v52);
            }
            else
            {
              v28 = v97;
              v18 = v103;
              v23 = v104;
            }
            v26 = v95;
          }
          while ((int)v95 < v28);
        }
        v22 = v23;
      }
      while ((int)v23 < v18);
    }
  }
  return result;
}

uint64_t sub_218B973C8(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, char a7, char a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  __int16 *v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _BYTE *v39;
  int v40;
  unsigned int v41;
  void *v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  uint64_t v56;
  _WORD *v57;
  int v58;
  int v59;
  _DWORD *v60;
  int v62;
  uint64_t v63;
  _BYTE __c[5];

  v12 = result;
  v13 = *(_QWORD *)(result + 8);
  v14 = *(_QWORD *)(result + 16);
  v15 = *(_QWORD *)(v13 + 3280);
  v16 = a4;
  v17 = &byte_218BCF658[8 * a4];
  v18 = *v17;
  v19 = v17[1];
  v63 = v13;
  if (a5 <= 1
    && *(_WORD *)(a6 + 2 * a5)
    && ((*(unsigned __int16 *)(a6 + 2 * a5) >> (a7 + 4 * a8)) & 1) != 0)
  {
    v20 = byte_218BCF658[8 * a4 + 6];
    v21 = &byte_218BCF658[8 * v20];
    v22 = *v21;
    v23 = v21[1];
    result = sub_218B973C8(result, a2, a3, v20);
    v24 = *(_DWORD *)(v12 + 24) + v22;
    *(_DWORD *)(v12 + 24) = v24;
    if (v18 >= v19)
    {
      v25 = v63;
      if (v24 < *(_DWORD *)(v63 + 3448))
      {
        result = sub_218B973C8(v12, a2, a3, v20);
        v25 = v63;
        v24 = *(_DWORD *)(v12 + 24);
      }
    }
    else
    {
      v25 = v63;
    }
    v44 = v24 - v22;
    v45 = *(_DWORD *)(v12 + 28) + v23;
    *(_DWORD *)(v12 + 24) = v44;
    *(_DWORD *)(v12 + 28) = v45;
    if (v19 >= v18 && v45 < *(_DWORD *)(v25 + 3452))
    {
      result = sub_218B973C8(v12, a2, a3, v20);
      v58 = v22;
      v59 = *(_DWORD *)(v12 + 24) + v22;
      *(_DWORD *)(v12 + 24) = v59;
      if (v18 >= v19 && v59 < *(_DWORD *)(v63 + 3448))
      {
        result = sub_218B973C8(v12, a2, a3, v20);
        v58 = v22;
        v59 = *(_DWORD *)(v12 + 24);
      }
      *(_DWORD *)(v12 + 24) = v59 - v58;
      v45 = *(_DWORD *)(v12 + 28);
    }
    *(_DWORD *)(v12 + 28) = v45 - v23;
    return result;
  }
  v27 = *(_DWORD *)(result + 24);
  v26 = *(_DWORD *)(result + 28);
  memset(__c, 0, sizeof(__c));
  v28 = *(_DWORD *)(result + 258564);
  if (!v28)
  {
    v60 = (_DWORD *)(result + 258564);
    v36 = v15;
    v37 = a4;
    v30 = result + 1024;
    goto LABEL_17;
  }
  v29 = v14 + 24 * (v28 & 1);
  v30 = *(_QWORD *)(v29 + 13912);
  if (v18 >= 8)
    v31 = 8;
  else
    v31 = v18;
  if (v19 >= 8)
    v32 = 8;
  else
    v32 = v19;
  *(_QWORD *)(v29 + 13912) = v30 + 4 * (16 * v31 * v32);
  if (v28 != 2)
  {
    v60 = (_DWORD *)(result + 258564);
    v36 = v15;
    v37 = a4;
LABEL_17:
    v38 = v27 & 0x1F;
    v62 = v26 & 0x1F;
    v39 = (_BYTE *)(result + (v26 & 0x1F) + 64);
    result = sub_218B979B8(result, *(_QWORD *)(result + 656) + v38 + 32, (uint64_t)v39, a4, a2, a3, 0, 0, v30, (unsigned int *)&__c[1], __c);
    v35 = result;
    v13 = v63;
    v40 = *(_DWORD *)(v63 + 3452) - *(_DWORD *)(v12 + 28);
    if (v19 < v40)
      v40 = v19;
    switch(v40)
    {
      case 1:
        v41 = __c[0];
        *v39 = __c[0];
        goto LABEL_32;
      case 2:
        v41 = __c[0];
        *(_WORD *)v39 = __c[0] | (__c[0] << 8);
        goto LABEL_32;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_23;
      case 4:
        v41 = __c[0];
        *(_DWORD *)v39 = 16843009 * __c[0];
        goto LABEL_32;
      case 8:
        v41 = __c[0];
        *(_QWORD *)v39 = 0x101010101010101 * __c[0];
        goto LABEL_32;
      default:
        if (v40 == 16)
        {
          v41 = __c[0];
          *(int64x2_t *)v39 = vdupq_n_s64(0x101010101010101 * (unint64_t)__c[0]);
        }
        else
        {
LABEL_23:
          v41 = __c[0];
          v42 = v39;
          v43 = v35;
          result = (uint64_t)memset(v42, __c[0], v40);
          v35 = v43;
          v13 = v63;
        }
LABEL_32:
        v16 = v37;
        v15 = v36;
        v46 = v14;
        v47 = *(_DWORD *)(v13 + 3448) - *(_DWORD *)(v12 + 24);
        if (v18 < v47)
          v47 = v18;
        switch(v47)
        {
          case 1:
            *(_BYTE *)(*(_QWORD *)(v12 + 656) + v38 + 32) = v41;
            goto LABEL_43;
          case 2:
            *(_WORD *)(*(_QWORD *)(v12 + 656) + v38 + 32) = v41 | ((_WORD)v41 << 8);
            goto LABEL_43;
          case 3:
          case 5:
          case 6:
          case 7:
            goto LABEL_38;
          case 4:
            *(_DWORD *)(*(_QWORD *)(v12 + 656) + v38 + 32) = 16843009 * v41;
            goto LABEL_43;
          case 8:
            v48 = 0x101010101010101 * v41;
            v49 = *(_QWORD *)(v12 + 656) + v38;
            goto LABEL_42;
          default:
            if (v47 == 16)
            {
              v48 = 0x101010101010101 * v41;
              *(_QWORD *)(*(_QWORD *)(v12 + 656) + v38 + 32) = v48;
              v49 = *(_QWORD *)(v12 + 656) + (v38 + 8);
LABEL_42:
              *(_QWORD *)(v49 + 32) = v48;
            }
            else
            {
LABEL_38:
              v50 = v35;
              result = (uint64_t)memset((void *)(*(_QWORD *)(v12 + 656) + v38 + 32), v41, v47);
              v35 = v50;
              v13 = v63;
            }
LABEL_43:
            v51 = v12 + 9344 + (v38 | (32 * v62));
            switch(v18)
            {
              case 1:
                v52 = __c[1];
                do
                {
                  *(_BYTE *)v51 = v52;
                  v51 += 32;
                  --v19;
                }
                while (v19);
                break;
              case 2:
                v54 = 257 * *(_WORD *)&__c[1];
                do
                {
                  *(_WORD *)v51 = v54;
                  v51 += 32;
                  --v19;
                }
                while (v19);
                break;
              case 3:
              case 5:
              case 6:
              case 7:
                break;
              case 4:
                v55 = 16843009 * *(_DWORD *)&__c[1];
                do
                {
                  *(_DWORD *)v51 = v55;
                  v51 += 32;
                  --v19;
                }
                while (v19);
                break;
              case 8:
                v56 = 0x101010101010101 * *(unsigned int *)&__c[1];
                do
                {
                  *(_QWORD *)v51 = v56;
                  v51 += 32;
                  --v19;
                }
                while (v19);
                break;
              default:
                if (v18 == 16)
                {
                  v53 = 0x101010101010101 * *(unsigned int *)&__c[1];
                  do
                  {
                    *(_QWORD *)v51 = v53;
                    *(_QWORD *)(v51 + 8) = v53;
                    v51 += 32;
                    --v19;
                  }
                  while (v19);
                }
                break;
            }
            if (*v60 == 1)
            {
              v57 = *(_WORD **)(v46 + 13928);
              *v57 = *(_WORD *)&__c[1] + 32 * v35;
              *(_QWORD *)(v46 + 13928) = v57 + 1;
              return result;
            }
            if ((*v60 & 1) == 0)
              goto LABEL_62;
            return result;
        }
    }
  }
  v33 = *(__int16 **)(v14 + 13904);
  v34 = *v33;
  *(_QWORD *)(v14 + 13904) = v33 + 1;
  v35 = v34 >> 5;
  *(_DWORD *)&__c[1] = v34 & 0x1F;
LABEL_62:
  if ((v35 & 0x80000000) == 0)
    return (*(uint64_t (**)(uint64_t, _QWORD))(v15 + 136 * v16 + 8 * *(unsigned int *)&__c[1] + 680))(a9, *(_QWORD *)(v13 + 2144));
  return result;
}

uint64_t sub_218B979B8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, int a7, int a8, uint64_t a9, unsigned int *a10, _BYTE *a11)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint16x8_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  unint64_t v49;
  unsigned int v50;
  int16x4_t *v51;
  int8x8_t *v52;
  int8x16_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  BOOL v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  void *v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  char v75;
  int v76;
  double v77;
  double v78;
  double v79;
  double v80;
  uint16x8_t v81;
  char v82;
  unsigned int v83;
  _BYTE *v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  _BYTE *v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  _BYTE *v92;
  int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  int v101;
  char v102;
  int v103;
  unint64_t v104;
  int v105;
  double v106;
  double v107;
  double v108;
  double v109;
  uint16x8_t v110;
  uint64_t v111;
  unsigned int v112;
  char v113;
  char v114;
  char v115;
  unsigned int v116;
  char v117;
  unsigned int v118;
  char v119;
  int v120;
  _BYTE *v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int v127;
  _BYTE *v128;
  int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  int v137;
  char v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  double v144;
  double v145;
  double v146;
  double v147;
  uint16x8_t v148;
  unsigned int v149;
  _BYTE *v150;
  unsigned int v151;
  unsigned int v152;
  char v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  _BYTE *v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  int v167;
  unsigned int v168;
  int v169;
  unsigned int v170;
  int v171;
  char v172;
  int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  int v185;
  uint64_t v186;
  int v187;
  int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  BOOL v198;
  int v199;
  unsigned int v200;
  int v201;
  uint64_t v202;
  int v203;
  int v204;
  int v205;
  unsigned int v206;
  unsigned int v207;
  int v208;
  unsigned int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  unsigned int v215;
  int v216;
  char v217;
  int v219;
  unsigned __int8 *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  int v225;
  char v226;
  unsigned int v227;
  unsigned int v228;
  int v230;
  _BYTE *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v235;
  int v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  int16x4_t *v241;
  char v242;

  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 24) + *(unsigned __int8 *)(a6 + 4) + 808);
  v14 = a4;
  v15 = &byte_218BCF600[4 * a5];
  v233 = v11;
  if (a8)
    __asm { BR              X10 }
  v16 = &byte_218BCF658[8 * a4];
  v17 = v16[2];
  if (v15[2] != (_DWORD)v17 || (v18 = v15[3], v18 != v16[3]))
    __asm { BR              X9 }
  v20 = v15[2];
  v21 = v12 + 13824;
  v22 = *(_QWORD *)(a1 + 16);
  v23 = v12 + 7040;
  v24 = byte_218BCF658[8 * a4 + 7];
  sub_218B58964(v12 + 13824, (unsigned int *)(v12 + 7040 + 52 * v24 + 5896));
  if (v25)
  {
    *a11 = 64;
    *a10 = 16 * v13;
    return 0xFFFFFFFFLL;
  }
  v237 = v24;
  v232 = v22;
  if (!v13)
  {
    if (byte_218BCF658[8 * v14 + 5] + a7 > 3)
    {
      v32 = 0;
      v33 = a9;
LABEL_25:
      v34 = v24;
      goto LABEL_26;
    }
    v35 = *(_QWORD *)(v233 + 24);
    v32 = *(unsigned __int8 *)(v35 + *(unsigned __int8 *)(a6 + 4) + 816);
    v33 = a9;
    if (!*(_BYTE *)(v35 + *(unsigned __int8 *)(a6 + 4) + 816))
      goto LABEL_25;
    if (!a7)
    {
      v41 = byte_218BCF658[8 * v14 + 4];
      if (((0x18608uLL >> v14) & 1) == 0 && !*(_BYTE *)(v35 + 894))
      {
        v34 = v24;
        if (((0x60604uLL >> v14) & 1) != 0)
        {
          sub_218B58658(v21, v22 + 2144, 11);
          v43 = v219 + 12;
        }
        else
        {
          sub_218B58658(v21, v22 + 32 * v41 + 2080, 15);
          v43 = v42 + 24;
        }
        v32 = byte_218BBFDCB[v43];
        goto LABEL_26;
      }
      sub_218B58964(v21, (unsigned int *)(v22 + 4 * v41 + 5448));
      v32 = (v44 - 1) & 9;
      goto LABEL_25;
    }
    v36 = *(unsigned __int8 *)(a6 + 8);
    if (v36 == 13)
      v36 = byte_218BBFDC6[*(char *)(a6 + 13)];
    v37 = *(unsigned __int8 *)(v35 + 894);
    v38 = byte_218BCF658[8 * v14 + 4];
    v34 = v24;
    if (!v37)
    {
      if (((0x60604uLL >> v14) & 1) == 0)
      {
        sub_218B58598(v21, (int8x16_t *)(v22 + 208 * byte_218BCF658[8 * v14 + 4] + 16 * v36 + 2176), 6);
        v40 = v39 + 5;
LABEL_220:
        v32 = byte_218BBFDCB[v40];
        goto LABEL_26;
      }
      v38 = 2;
    }
    v40 = sub_218B58408(v21, (int16x4_t *)(v22 + 208 * v38 + 16 * v36 + 2592), 4, v26, v27, v28, v29, v30);
    goto LABEL_220;
  }
  v32 = 0x10u;
  v33 = a9;
  v34 = v24;
LABEL_26:
  *a10 = v32;
  if (v20 >= 3)
    v45 = 3;
  else
    v45 = v20;
  if (v18 >= 3)
    v46 = 3;
  else
    v46 = v18;
  v47 = v32;
  v48 = byte_218BBFDF3[v32];
  v49 = v32 - 10;
  v225 = v48;
  switch(v46 + v45)
  {
    case 0:
      v50 = sub_218B58408(v21, (int16x4_t *)(v23 + 16 * (v49 < 6)), 4, v26, v27, v28, v29, v30);
      goto LABEL_46;
    case 1:
      v53 = (int8x16_t *)(v22 + 16 * (v49 < 6) + 7104);
      v54 = v21;
      v55 = 5;
      goto LABEL_40;
    case 2:
      v53 = (int8x16_t *)(v22 + 16 * (v49 < 6) + 7168);
      v54 = v21;
      v55 = 6;
      goto LABEL_40;
    case 3:
      v53 = (int8x16_t *)(v22 + 16 * (v49 < 6) + 7232);
      v54 = v21;
      v55 = 7;
LABEL_40:
      sub_218B58598(v54, v53, v55);
      goto LABEL_45;
    case 4:
      v57 = v22 + 32 * (v49 < 6) + 7296;
      v58 = v21;
      v59 = 8;
      goto LABEL_44;
    case 5:
      v57 = v22 + 7424;
      v58 = v21;
      v59 = 9;
      goto LABEL_44;
    case 6:
      v57 = v22 + 7488;
      v58 = v21;
      v59 = 10;
LABEL_44:
      sub_218B58658(v58, v57, v59);
LABEL_45:
      v50 = v56;
LABEL_46:
      if ((int)v50 >= 2)
      {
        v60 = v50;
        sub_218B58964(v21, (unsigned int *)(v22 + 88 * v34 + 4 * v50 + 12496));
        v63 = v60 - 2;
        v62 = v60 == 2;
        v64 = (v61 | 2) << (v60 - 2);
        v65 = 0;
        if (!v62)
        {
          do
          {
            --v63;
            sub_218B588EC();
            v65 = v66 | (2 * v65);
          }
          while (v63);
        }
        v50 = v65 | v64;
        v33 = a9;
        v22 = v232;
        v34 = v24;
      }
      v51 = (int16x4_t *)(v22 + 7040 + (v34 << 6) + 512);
      if ((int)v34 >= 3)
        v67 = 3;
      else
        v67 = v34;
      v238 = v22 + 7040 + 336 * v67 + 4112;
      if (!v50)
      {
        v52 = (int8x8_t *)(v22 + 7040 + 336 * v67 + 4112);
LABEL_91:
        v105 = sub_218B58408(v21, v51, 2, v26, v27, v28, v29, v30);
        v111 = 0;
        v237 = v34;
        if (v105 != 2)
        {
          v112 = v105 + 1;
          v90 = 0;
          goto LABEL_165;
        }
        v227 = 0;
        v90 = 0;
        goto LABEL_162;
      }
      v220 = (unsigned __int8 *)(a1 + 8257);
      v241 = (int16x4_t *)(v22 + 656 * v34 + 7872);
      v68 = (void *)(a1 + 8256);
      if (byte_218BCF658[8 * a4] >= 8u)
        v69 = 8;
      else
        v69 = byte_218BCF658[8 * a4];
      if (byte_218BCF658[8 * v14 + 1] >= 8u)
        v70 = 8;
      else
        v70 = byte_218BCF658[8 * v14 + 1];
      v71 = 1;
      if (v50 > 2 * v70 * v69)
        v71 = 2;
      v227 = v50;
      if (v50 <= 4 * v70 * v69)
        v72 = v71;
      else
        v72 = v71 + 1;
      v73 = sub_218B58408(v21, &v51[v72], 2, v26, v27, v28, v29, v30);
      v74 = v73 + 1;
      v235 = v14;
      if (v225 == 2)
      {
        v113 = v20 + 2;
        v114 = v18 + 2;
        bzero(v68, (v69 << 6) | 0x20u);
        v115 = 65 * v74;
        v116 = v227;
        v230 = 4 * v69 - 1;
        v117 = v113;
        v118 = v227 >> v113;
        v119 = v114;
        v120 = (v230 & v227) << v114;
        v121 = v68;
        v90 = v120 | v118;
        if (v73 == 2)
        {
          v122 = 112;
          if (!v118)
            v122 = 56;
          v123 = sub_218B58740(v21, (int8x8_t *)(v238 + v122), v77, v78, v79, v80, v81);
          v116 = v227;
          v74 = v123;
          v115 = v123 - 64;
        }
        *(_DWORD *)(a9 + 4 * v90) = v74 << 11;
        v121[16 * (v230 & v227) + v118] = v115;
        if (v116 >= 2)
        {
          v124 = v116 + 1;
          do
          {
            v125 = (v124 - 2) & v230;
            v126 = (v124 - 2) >> v117;
            v127 = (v125 << v119) | v126;
            v128 = &v121[16 * v125 + v126];
            v129 = v128[16] + v128[1] + v128[2];
            v130 = v129 + v128[3] + v128[4];
            v131 = 5 * v126 + 26;
            if (v126 > 1)
              v131 = 36;
            if (v130 <= 0x200)
              v132 = (v130 + 64) >> 7;
            else
              v132 = 4;
            v133 = sub_218B58408(v21, &v241[v132 + v131], 3, v77, v78, v79, v80, v81);
            if (v133 == 3)
            {
              v134 = v129 & 0x3F;
              if ((_DWORD)v126)
                v135 = 14;
              else
                v135 = 7;
              if (v134 <= 0xC)
                v136 = (v134 + 1) >> 1;
              else
                v136 = 6;
              v137 = sub_218B58740(v21, (int8x8_t *)(v238 + 8 * (v136 + v135)), v77, v78, v79, v80, v81);
              v138 = v137 - 64;
              v139 = v90 | (v137 << 11);
              v90 = v127;
            }
            else
            {
              v138 = 65 * v133;
              v139 = (v90 - 2048) & ((1572673 * v133) >> 9);
              if (v139)
                v90 = v127;
            }
            *v128 = v138;
            *(_DWORD *)(a9 + 4 * v127) = v139;
            --v124;
          }
          while (v124 > 2);
        }
        goto LABEL_154;
      }
      if (v225 == 1)
      {
        v75 = v18 + 2;
        v76 = 4 * v70 - 1;
        bzero(v68, (v70 << 6) | 0x20);
        v82 = 65 * v74;
        v83 = v227;
        v84 = v68;
        v85 = v227 >> v75;
        if (v73 == 2)
        {
          v86 = 112;
          if (!v85)
            v86 = 56;
          v87 = sub_218B58740(v21, (int8x8_t *)(v238 + v86), v77, v78, v79, v80, v81);
          v83 = v227;
          v74 = v87;
          v82 = v87 - 64;
        }
        *(_DWORD *)(a9 + 4 * v83) = v74 << 11;
        v84[16 * (v76 & v227) + v85] = v82;
        if (v83 < 2)
        {
          v90 = 1;
        }
        else
        {
          v88 = v84;
          v89 = v83 - 1;
          v90 = v83;
          do
          {
            v91 = v89 >> v75;
            v92 = &v88[16 * (v76 & v89) + v91];
            v93 = v92[16] + v92[1] + v92[2];
            v94 = v93 + v92[3] + v92[4];
            v95 = 5 * v91 + 26;
            if (v91 > 1)
              v95 = 36;
            if (v94 <= 0x200)
              v96 = (v94 + 64) >> 7;
            else
              v96 = 4;
            v97 = sub_218B58408(v21, &v241[v96 + v95], 3, v77, v78, v79, v80, v81);
            if (v97 == 3)
            {
              v98 = v93 & 0x3F;
              if ((_DWORD)v91)
                v99 = 14;
              else
                v99 = 7;
              if (v98 <= 0xC)
                v100 = (v98 + 1) >> 1;
              else
                v100 = 6;
              v101 = sub_218B58740(v21, (int8x8_t *)(v238 + 8 * (v100 + v99)), v77, v78, v79, v80, v81);
              v102 = v101 - 64;
              v103 = v90 | (v101 << 11);
              v90 = v89;
            }
            else
            {
              v102 = 65 * v97;
              v103 = (v90 - 2048) & ((1572673 * v97) >> 9);
              if (v103)
                v90 = v89;
            }
            *v92 = v102;
            *(_DWORD *)(a9 + 4 * v89) = v103;
            v104 = v89-- + 1;
          }
          while (v104 > 2);
        }
LABEL_154:
        v177 = v220[15] + *v220 + v220[1];
        v178 = v177 + v220[2] + v220[3];
        if (v178 <= 0x200)
          v179 = ((v178 + 64) >> 7) + 26;
        else
          v179 = 30;
        v180 = sub_218B58408(v21, &v241[v179], 3, v77, v78, v79, v80, v81);
        if (v180 == 3)
        {
          if ((v177 & 0x3Fu) <= 0xC)
            v181 = ((v177 & 0x3Fu) + 1) >> 1;
          else
            v181 = 6;
          v52 = (int8x8_t *)(v238 + 8 * v181);
          v33 = a9;
          v22 = v232;
          v14 = v235;
LABEL_162:
          v112 = sub_218B58740(v21, v52, v106, v107, v108, v109, v110);
          v111 = v227;
          goto LABEL_165;
        }
        v112 = v180;
        v33 = a9;
        v22 = v232;
        v111 = v227;
        v14 = v235;
        goto LABEL_165;
      }
      v140 = (a4 > 4) & a4;
      if (a4 > 4)
        ++v140;
      v223 = v140;
      v141 = (uint64_t)*(&off_24D9B15E8 + v14);
      v142 = 4 * v70;
      if (v18 >= 4)
        v143 = 5;
      else
        v143 = v18 + 2;
      bzero(v68, v142 * ((4 * v69) | 2));
      v149 = v227;
      v150 = v68;
      v221 = v141;
      v90 = *(unsigned __int16 *)(v141 + 2 * v227);
      v226 = v143;
      v151 = v90 >> v143;
      v224 = (v142 - 1);
      v152 = (v142 - 1) & v90;
      v153 = 65 * (v73 + 1);
      if (v73 == 2)
      {
        v154 = 56;
        if ((v151 | v152) > 1)
          v154 = 112;
        v155 = sub_218B58740(v21, (int8x8_t *)(v238 + v154), v144, v145, v146, v147, v148);
        v149 = v227;
        v74 = v155;
        v153 = v155 - 64;
      }
      v33 = a9;
      *(_DWORD *)(a9 + 4 * v90) = v74 << 11;
      v231 = v150;
      v150[v151 * v142 + (unint64_t)v152] = v153;
      if (v149 >= 2)
      {
        v222 = v221 - 2;
        v156 = v149;
        do
        {
          v157 = *(unsigned __int16 *)(v222 + 2 * v156);
          v158 = v157 >> v226;
          v159 = v224 & v157;
          v160 = &v231[(v157 >> v226) * (unint64_t)v142 + (v224 & v157)];
          v161 = v160[v142] + v160[1] + v160[v142 | 1];
          v162 = v161 + v160[2] + v160[2 * v142];
          if ((v224 & v157) >= 4)
            v163 = 4;
          else
            v163 = v159;
          if (v158 >= 4)
            v164 = 4;
          else
            v164 = v157 >> v226;
          v165 = byte_218BBFE04[25 * v223 + 4 * v163 + v163 + v164];
          if (v162 <= 0x200)
            v166 = (v162 + 64) >> 7;
          else
            v166 = 4;
          v167 = sub_218B58408(v21, &v241[v166 + v165], 3, v144, v145, v146, v147, v148);
          if (v167 == 3)
          {
            v168 = v161 & 0x3F;
            if ((v158 | v159) <= 1)
              v169 = 7;
            else
              v169 = 14;
            if (v168 <= 0xC)
              v170 = (v168 + 1) >> 1;
            else
              v170 = 6;
            v171 = sub_218B58740(v21, (int8x8_t *)(v238 + 8 * (v170 + v169)), v144, v145, v146, v147, v148);
            v172 = v171 - 64;
            v173 = v90 | (v171 << 11);
            v90 = v157;
          }
          else
          {
            v172 = 65 * v167;
            v173 = (v90 - 2048) & ((1572673 * v167) >> 9);
            if (v173)
              v90 = v157;
          }
          v14 = v235;
          --v156;
          *v160 = v172;
          v33 = a9;
          *(_DWORD *)(a9 + 4 * v157) = v173;
        }
        while ((unint64_t)(v156 + 1) > 2);
      }
      v174 = sub_218B58408(v21, v241, 3, v144, v145, v146, v147, v148);
      if (v174 == 3)
      {
        v22 = v232;
        v175 = (v231[v142] + *v220 + v231[v142 | 1]) & 0x3F;
        if (v175 <= 0xC)
          v176 = (v175 + 1) >> 1;
        else
          v176 = 6;
        v52 = (int8x8_t *)(v238 + 8 * v176);
        goto LABEL_162;
      }
      v112 = v174;
      v22 = v232;
      v111 = v227;
LABEL_165:
      if (*a10 > 8)
      {
        v239 = 0;
        v182 = v233;
      }
      else
      {
        v182 = v233;
        v239 = *(_QWORD *)(v233 + 24 * v14 + 3576);
      }
      v183 = *(_QWORD *)(v22 + 14048) + 12 * *(unsigned __int8 *)(a6 + 4);
      if (v237 <= 2)
        v184 = 2;
      else
        v184 = v237;
      v242 = v184 - 2;
      v240 = ~(-128 << *(_DWORD *)(v182 + 2172));
      if (v112)
        __asm { BR              X9 }
      if (v239)
      {
        v228 = v111;
        v185 = *(unsigned __int16 *)(v183 + 2);
        v186 = v239;
        do
        {
          sub_218B588EC();
          v188 = v187;
          v189 = *(_DWORD *)(v33 + 4 * v90);
          v190 = (*(unsigned __int8 *)(v186 + v90) * v185 + 16) >> 5;
          v191 = v189 >> 11;
          if (v189 >> 11 < 0xF)
          {
            v200 = v190 * v191;
          }
          else
          {
            v192 = 0;
            v193 = -1;
            do
            {
              v194 = v192;
              ++v193;
              sub_218B588EC();
              if (v195)
                break;
              v192 = v194 - 1;
            }
            while (v193 < 0x20);
            if (v193)
            {
              v196 = 1;
              do
              {
                sub_218B588EC();
                v196 = v197 + 2 * v196;
                v198 = __CFADD__(v194++, 1);
              }
              while (!v198);
              v199 = v196 - 1;
            }
            else
            {
              v199 = 0;
            }
            v191 = (v199 + 15) & 0xFFFFF;
            v200 = (v191 * v190) & 0xFFFFFF;
            v33 = a9;
            v186 = v239;
          }
          v112 += v191;
          v201 = v200 >> v242;
          if (v200 >> v242 >= v188 + v240)
            v201 = v188 + v240;
          if (v188)
            v201 = -v201;
          *(_DWORD *)(v33 + 4 * v90) = v201;
          v90 = v189 & 0x3FF;
        }
        while ((v189 & 0x3FF) != 0);
        v31 = v228;
      }
      else
      {
        v202 = v111;
        v203 = *(unsigned __int16 *)(v183 + 2);
        do
        {
          sub_218B588EC();
          v205 = v204;
          v206 = *(_DWORD *)(v33 + 4 * v90);
          v207 = v206 >> 11;
          if (v206 >> 11 < 0xF)
          {
            v215 = (v207 * v203) >> v242;
          }
          else
          {
            v208 = 0;
            v209 = -1;
            do
            {
              v210 = v208;
              ++v209;
              sub_218B588EC();
              if (v211)
                break;
              v208 = v210 - 1;
            }
            while (v209 < 0x20);
            if (v209)
            {
              v212 = 1;
              do
              {
                sub_218B588EC();
                v212 = v213 + 2 * v212;
                v198 = __CFADD__(v210++, 1);
              }
              while (!v198);
              v214 = v212 - 1;
            }
            else
            {
              v214 = 0;
            }
            v207 = (v214 + 15) & 0xFFFFF;
            v215 = ((v207 * v203) & 0xFFFFFF) >> v242;
            if (v215 >= v205 + v240)
              v215 = v205 + v240;
            v33 = a9;
          }
          v112 += v207;
          if (v205)
            v216 = -v215;
          else
            v216 = v215;
          *(_DWORD *)(v33 + 4 * v90) = v216;
          v90 = v206 & 0x3FF;
        }
        while ((v206 & 0x3FF) != 0);
        v31 = v202;
      }
      if (v112 >= 0x3F)
        v217 = 63;
      else
        v217 = v112;
      *a11 = v217 | 0x40;
      return v31;
    default:
      v51 = (int16x4_t *)(v22 + 7040 + (v34 << 6) + 512);
      if ((int)v34 < 3)
        v47 = v34;
      v52 = (int8x8_t *)(v22 + 7040 + 336 * v47 + 4112);
      goto LABEL_91;
  }
}

uint64_t sub_218B99070(uint64_t result, int a2, int a3, _BYTE *a4)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  int v29;
  int v30;
  _BOOL4 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int64_t v40;
  int v41;
  int v43;
  int v44;
  unsigned int v45;
  char v46;
  int64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  _WORD *v52;
  char v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  char v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  _DWORD *v64;
  __int16 *v65;
  int v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  int v89;
  uint64_t v90;
  _WORD *v91;
  int v92;
  int v93;
  uint64_t (*v94)(_WORD *, unint64_t, _WORD *, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD);
  _WORD *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  _DWORD *v99;
  unint64_t v100;
  int v101;
  int v102;
  int v106;
  signed int v107;
  unint64_t v108;
  signed int v109;
  signed int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  _WORD *v117;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  BOOL v123;
  char v124;
  int v125;
  uint64_t v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  _DWORD *v131;
  __int16 *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  int v151;
  unsigned __int8 *v152;
  _BOOL4 v153;
  char v154;
  uint64_t v156;
  uint64_t v157;
  _BYTE *v158;
  int v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  int64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  int v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t *v175;
  _BYTE *v176;
  _QWORD *v177;
  unint64_t v178;
  _BYTE *v179;
  _QWORD *v180;
  int v181;
  int64_t v182;
  unsigned int v183;
  char v184;
  uint64_t v185;
  _QWORD *v187;
  int v188;
  uint64_t v189;
  int v190;
  int v191;
  int v192;
  _BYTE *v193;
  uint64_t v194;
  int v195;
  _WORD *v196;
  int v197;
  BOOL v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  _DWORD *v204;
  uint64_t v205;
  unsigned int v206;
  int v207;
  unint64_t v208;
  char v209;
  _BYTE *v210;
  _BYTE *v211;
  uint64_t v212;
  int v213;
  _DWORD *v214;
  _BYTE *v215;
  _BYTE *v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  unsigned __int8 *v220;
  unsigned int v221;
  int v222;
  unsigned int v223;
  _QWORD v224[4];

  v4 = a4;
  v5 = result;
  v224[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(result + 8);
  v8 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v9 = *(_DWORD *)(v6 + 2168);
  v10 = &byte_218BCF600[4 * a2];
  v11 = *v10;
  v12 = v10[1];
  if (v11 >= *(_DWORD *)(v6 + 3448) - v8)
    v13 = *(_DWORD *)(v6 + 3448) - v8;
  else
    v13 = v11;
  if (v12 >= *(_DWORD *)(v6 + 3452) - v7)
    v14 = *(_DWORD *)(v6 + 3452) - v7;
  else
    v14 = v12;
  v15 = v9 != 3;
  v162 = v13;
  if (v9 == 3)
    v16 = v13;
  else
    v16 = v13 + 1;
  v17 = v9 == 1;
  if (v9 == 1)
    v18 = v14 + 1;
  else
    v18 = v14;
  if (!v9 || (v11 <= v15 ? (v19 = (*(_DWORD *)(result + 24) & 1) == 0) : (v19 = 0), v19))
  {
    v161 = 0;
  }
  else
  {
    if (v12 <= v17)
      v20 = *(_DWORD *)(result + 28) & 1;
    else
      v20 = 1;
    v161 = v20;
  }
  if (v14 >= 1)
  {
    v21 = 0;
    v22 = v8 & 0x1F;
    v205 = (*(_DWORD *)(result + 24) & 0x1Fu) >> v15;
    result = (uint64_t)&byte_218BCF658[8 * a4[10]];
    v23 = &byte_218BCF658[8 * a4[7]];
    v196 = (_WORD *)(v5 + 25984);
    v24 = (v11 + v15) >> v15;
    v25 = (v12 + v17) >> v17;
    v195 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 8) + 394) << 10;
    v214 = *(_DWORD **)(v5 + 16);
    v26 = *(_QWORD *)(v6 + 3280);
    v27 = (_DWORD *)(v5 + 258564);
    v147 = (8 * v11 * v12);
    v167 = v7 & 0x1F;
    v157 = v5 + 26256;
    v158 = (_BYTE *)(v5 + 32 + v167 + 224);
    v145 = 8 * v24 * v25;
    v146 = v5 + 13440;
    v165 = v5 + 9344;
    v159 = v16 >> v15;
    v151 = v18 >> v17;
    v171 = (v7 & 0x1F) >> v17;
    v156 = v5 + 32;
    v152 = (unsigned __int8 *)(v5 + 32 + v171 + 560);
    v179 = (_BYTE *)result;
    v176 = (_BYTE *)(result + 1);
    v194 = v26 + 64;
    v200 = v5 + 1024;
    v166 = v26;
    v189 = v26 + 680;
    v148 = 4 * v25;
    v149 = 4 * v24;
    v190 = ~v15;
    v213 = ~v17;
    v211 = v4 + 15;
    v220 = v23;
    v215 = v23 + 1;
    v201 = v6;
    v160 = v14;
    v199 = v15;
    v170 = v22;
    v204 = (_DWORD *)(v5 + 258564);
    v193 = v4;
    v212 = v5;
    v206 = v17;
    do
    {
      v28 = v21 + 16;
      if (v14 >= (int)(v21 + 16))
        v29 = v21 + 16;
      else
        v29 = v14;
      v169 = v29;
      v30 = v151;
      v150 = v28 >> v17;
      if (v151 >= (int)(v28 >> v17))
        v30 = v28 >> v17;
      v181 = v30;
      if (v162 >= 1)
      {
        v178 = 0;
        v163 = v21 + 16;
        v154 = a3 & (v21 == 0);
        v32 = (a3 & 8) == 0 && (int)v28 >= v14;
        v153 = v32;
        v168 = v21;
        v174 = v21 >> v17;
        do
        {
          if (v4[11])
          {
            v33 = *(_QWORD *)(v6 + 2120);
            v34 = *(_QWORD *)(v6 + 2144);
            v35 = *(int *)(v5 + 24);
            if (*v27)
              *(_QWORD *)&v214[6 * (*v27 & 1) + 3474] += v147;
            result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v6 + 3280) + 248))(v33 + 8 * (v35 + (v34 >> 1) * v7));
          }
          v36 = *(_QWORD *)(v5 + 656);
          v37 = *(unsigned __int8 *)(v36 + v22 + 224);
          if (*(_BYTE *)(v36 + v22 + 224))
          {
            v38 = *(unsigned __int8 *)(v36 + v22);
            if ((v38 & 0xFFFFFFFD) == 9 || v38 == 10)
              v37 = 512;
            else
              v37 = 0;
          }
          v40 = v178;
          if (*v158)
          {
            v41 = *(unsigned __int8 *)(v156 + v167);
            if ((v41 & 0xFFFFFFFD) == 9 || v41 == 10)
              v43 = 512;
            else
              v43 = 0;
          }
          else
          {
            v43 = 0;
          }
          if (v162 >= (int)v178 + 16)
            v44 = v178 + 16;
          else
            v44 = v162;
          v45 = *(_DWORD *)(v5 + 28) + v168;
          *(_DWORD *)(v5 + 28) = v45;
          v164 = v178 + 16;
          if ((int)v168 >= v169)
          {
            v197 = v168;
          }
          else
          {
            v46 = v154;
            if ((uint64_t)(v178 + 16) < v162)
              v46 = 1;
            v184 = v46;
            v47 = v44;
            v48 = v153;
            if (v178)
              v48 = 1;
            v191 = v48;
            v202 = v37 | v43;
            v49 = *(_DWORD *)(v5 + 24);
            v197 = v168;
            v207 = v44;
            v182 = v44;
            do
            {
              v50 = *(_QWORD *)(v6 + 2120);
              v51 = *(_QWORD *)(v6 + 2144);
              result = (v49 + v40);
              *(_DWORD *)(v5 + 24) = result;
              if (v40 >= v47)
              {
                v55 = v40;
              }
              else
              {
                v52 = (_WORD *)(v50 + 8 * (v40 + (v51 >> 1) * (int)v45 + v49));
                v53 = v184;
                if (v197 > v168)
                  v53 = 0;
                v209 = v53;
                v54 = (v197 + v167);
                v216 = (_BYTE *)(v5 + 64 + v54);
                v187 = (_QWORD *)(v5 + 64 + (v54 + 8));
                v55 = v40;
                do
                {
                  if (!v4[11])
                  {
                    v223 = (char)v4[13];
                    v56 = (v209 & 1) == 0 && v55 + *v179 >= v44;
                    if (v178 < v55 || v191 && v197 + *v176 >= v169)
                      v57 = 0;
                    else
                      v57 = 8;
                    v58 = *(_DWORD *)(v5 + 28);
                    if (((*(_DWORD *)(v6 + 3472) - 1) & v58) != 0)
                      v59 = 0;
                    else
                      v59 = *(_QWORD *)(v6 + 3408)
                          + 2 * ((*(_DWORD *)(v6 + 3456) * ((v58 >> *(_DWORD *)(v6 + 3468)) - 1)) << 7);
                    v60 = *v179;
                    v61 = *v176;
                    v62 = sub_218B8DCF0(result, (int)result > v214[3466], v58, v58 > v214[3468], v214[3467], v214[3469], v57 | !v56, v52, *(_QWORD *)(v6 + 2144), v59, v4[8], (int *)&v223, v60, v61, *(unsigned __int8 *)(*(_QWORD *)(v6 + 8) + 394), v196, *(_DWORD *)(v6 + 4324));
                    (*(void (**)(_WORD *, _QWORD, _WORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))(v194 + 8 * v62))(v52, *(_QWORD *)(v6 + 2144), v196, (4 * v60), (4 * v61), v202 | v195 | v223, (4 * (*(_DWORD *)(v6 + 3448) - *(_DWORD *)(v5 + 24))), (4 * (*(_DWORD *)(v6 + 3452) - *(_DWORD *)(v5 + 28))), *(_DWORD *)(v6 + 4324));
                    v44 = v207;
                  }
                  if (v4[6])
                  {
                    if (*v204)
                    {
                      v63 = *v179;
                    }
                    else
                    {
                      switch(*v176)
                      {
                        case 1:
                          *v216 = 64;
                          break;
                        case 2:
                          *(_WORD *)v216 = 16448;
                          break;
                        case 3:
                        case 5:
                        case 6:
                        case 7:
                          break;
                        case 4:
                          *(_DWORD *)v216 = 1077952576;
                          break;
                        case 8:
                          v74 = v216;
                          goto LABEL_104;
                        default:
                          if (*v176 == 16)
                          {
                            *(_QWORD *)v216 = 0x4040404040404040;
                            v74 = v187;
LABEL_104:
                            *v74 = 0x4040404040404040;
                          }
                          break;
                      }
                      v63 = *v179;
                      switch(*v179)
                      {
                        case 1:
                          *(_BYTE *)(*(_QWORD *)(v5 + 656) + (v55 + v170) + 32) = 64;
                          v63 = 1;
                          break;
                        case 2:
                          *(_WORD *)(*(_QWORD *)(v5 + 656) + (v55 + v170) + 32) = 16448;
                          v63 = 2;
                          break;
                        case 3:
                        case 5:
                        case 6:
                        case 7:
                          break;
                        case 4:
                          *(_DWORD *)(*(_QWORD *)(v5 + 656) + (v55 + v170) + 32) = 1077952576;
                          v63 = 4;
                          break;
                        case 8:
                          *(_QWORD *)(*(_QWORD *)(v5 + 656) + (v55 + v170) + 32) = 0x4040404040404040;
                          v63 = 8;
                          break;
                        default:
                          if (v63 == 16)
                          {
                            v75 = (v55 + v170);
                            *(_QWORD *)(*(_QWORD *)(v5 + 656) + v75 + 32) = 0x4040404040404040;
                            *(_QWORD *)(*(_QWORD *)(v5 + 656) + (v75 + 8) + 32) = 0x4040404040404040;
                          }
                          break;
                      }
                    }
                  }
                  else
                  {
                    LODWORD(v224[0]) = 0;
                    if (!*v204)
                    {
                      LOBYTE(v222) = 0;
                      v71 = (v55 + v170);
                      v70 = sub_218B979B8(v5, *(_QWORD *)(v5 + 656) + v71 + 32, (uint64_t)v216, v4[10], a2, (uint64_t)v4, 1, 0, v200, (unsigned int *)v224, &v222);
                      v72 = *v176;
                      if (v72 >= *(_DWORD *)(v6 + 3452) - *(_DWORD *)(v5 + 28))
                        v72 = *(_DWORD *)(v6 + 3452) - *(_DWORD *)(v5 + 28);
                      switch(v72)
                      {
                        case 1:
                          LODWORD(v73) = v222;
                          *v216 = v222;
                          goto LABEL_119;
                        case 2:
                          LODWORD(v73) = v222;
                          *(_WORD *)v216 = v222 | (v222 << 8);
                          goto LABEL_119;
                        case 3:
                        case 5:
                        case 6:
                        case 7:
                          goto LABEL_115;
                        case 4:
                          LODWORD(v73) = v222;
                          *(_DWORD *)v216 = 16843009 * v222;
                          goto LABEL_119;
                        case 8:
                          LODWORD(v73) = v222;
                          *(_QWORD *)v216 = 0x101010101010101 * v222;
                          goto LABEL_119;
                        default:
                          if (v72 == 16)
                          {
                            v73 = v222;
                            *(_QWORD *)v216 = 0x101010101010101 * v222;
                            *v187 = 0x101010101010101 * v73;
                          }
                          else
                          {
LABEL_115:
                            LODWORD(v73) = v222;
                            memset(v216, v222, v72);
                          }
LABEL_119:
                          v63 = *v179;
                          v76 = *(_DWORD *)(v201 + 3448) - *(_DWORD *)(v5 + 24);
                          if ((int)v63 < v76)
                            v76 = *v179;
                          switch(v76)
                          {
                            case 1:
                              *(_BYTE *)(*(_QWORD *)(v5 + 656) + v71 + 32) = v73;
                              goto LABEL_130;
                            case 2:
                              *(_WORD *)(*(_QWORD *)(v5 + 656) + v71 + 32) = v73 | ((_WORD)v73 << 8);
                              goto LABEL_130;
                            case 3:
                            case 5:
                            case 6:
                            case 7:
                              goto LABEL_125;
                            case 4:
                              *(_DWORD *)(*(_QWORD *)(v5 + 656) + v71 + 32) = 16843009 * v73;
                              goto LABEL_130;
                            case 8:
                              v77 = 0x101010101010101 * v73;
                              v78 = *(_QWORD *)(v5 + 656) + v71;
                              goto LABEL_128;
                            default:
                              if (v76 == 16)
                              {
                                v77 = 0x101010101010101 * v73;
                                *(_QWORD *)(*(_QWORD *)(v5 + 656) + v71 + 32) = v77;
                                v78 = *(_QWORD *)(v5 + 656) + (v71 + 8);
LABEL_128:
                                *(_QWORD *)(v78 + 32) = v77;
                              }
                              else
                              {
LABEL_125:
                                memset((void *)(*(_QWORD *)(v5 + 656) + v71 + 32), v73, v76);
                              }
LABEL_130:
                              v67 = v200;
                              v6 = v201;
                              v15 = v199;
                              if ((v70 & 0x80000000) == 0)
                                goto LABEL_131;
                              goto LABEL_132;
                          }
                      }
                    }
                    v64 = &v214[6 * (*v204 & 1)];
                    v65 = (__int16 *)*((_QWORD *)v64 + 1738);
                    v66 = *v65;
                    *((_QWORD *)v64 + 1738) = v65 + 1;
                    v67 = *((_QWORD *)v64 + 1739);
                    v63 = *v179;
                    if (v63 >= 8)
                      v68 = 8;
                    else
                      v68 = *v179;
                    v69 = *v176;
                    if (v69 >= 8)
                      v69 = 8;
                    *((_QWORD *)v64 + 1739) = v67 + 64 * v68 * v69;
                    v70 = (v66 >> 5);
                    LODWORD(v224[0]) = v66 & 0x1F;
                    if ((v70 & 0x80000000) == 0)
LABEL_131:
                      (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t, _QWORD))(v189
                                                                                        + 136
                                                                                        * v4[10]
                                                                                        + 8 * LODWORD(v224[0])))(v52, *(_QWORD *)(v6 + 2144), v67, v70, *(unsigned int *)(v6 + 4324));
                  }
LABEL_132:
                  v52 += 4 * v63;
                  v55 += v63;
                  result = *(_DWORD *)(v5 + 24) + v63;
                  *(_DWORD *)(v5 + 24) = result;
                }
                while (v55 < v44);
                v45 = *(_DWORD *)(v5 + 28);
                v40 = v178;
                v47 = v182;
              }
              v49 = result - v55;
              *(_DWORD *)(v5 + 24) = result - v55;
              v79 = *v176;
              v45 += v79;
              *(_DWORD *)(v5 + 28) = v45;
              v197 += v79;
            }
            while (v197 < v169);
          }
          v7 = v45 - v197;
          *(_DWORD *)(v5 + 28) = v7;
          LOBYTE(v17) = v206;
          v27 = v204;
          if (v161)
          {
            v80 = *(_QWORD *)(v6 + 2152);
            v208 = v80;
            if (v4[9] == 13)
            {
              v81 = *(_DWORD *)(v5 + 24);
              v82 = *(_QWORD *)(v6 + 2120) + 8 * (v81 & v190) + 2 * (*(_QWORD *)(v6 + 2144) >> 1) * 4 * (v7 & v213);
              v83 = (v80 >> 1) * (v7 >> v206) + (v81 >> v15);
              v84 = *(_QWORD *)(v6 + 2128) + 8 * v83;
              v85 = *(_QWORD *)(v6 + 2136) + 8 * v83;
              v224[0] = v84;
              v224[1] = v85;
              result = (*(uint64_t (**)(uint64_t, uint64_t))(v166
                                                                   + 8 * (*(_DWORD *)(v6 + 2168) - 1)
                                                                   + 176))(v165, v82);
              v86 = 0;
              v87 = 1;
              do
              {
                v88 = v87;
                if (v211[v86])
                {
                  v222 = 0;
                  v89 = *(_DWORD *)(v5 + 28);
                  v217 = v87;
                  if (((*(_DWORD *)(v6 + 3472) - 1) & v213 & v89) != 0)
                    v90 = 0;
                  else
                    v90 = *(_QWORD *)(v6 + 8 * v86 + 3416)
                        + 2 * ((*(_DWORD *)(v6 + 3456) * ((v89 >> *(_DWORD *)(v6 + 3468)) - 1)) << 7);
                  v91 = (_WORD *)v224[v86];
                  v92 = *v220;
                  v93 = *v215;
                  v94 = *(uint64_t (**)(_WORD *, unint64_t, _WORD *, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(v166 + 8 * sub_218B8DCF0(*(int *)(v5 + 24) >> v15, *(int *)(v5 + 24) >> v15 > (int)v214[3466] >> v15, v89 >> v206, v89 >> v206 > (int)v214[3468] >> v206, (int)v214[3467] >> v15, (int)v214[3469] >> v206, 0, v91, v208, v90, 0, &v222, v92, v93, 0, v196, *(_DWORD *)(v6 + 4324)) + 200);
                  v95 = v91;
                  v80 = v208;
                  result = v94(v95, v208, v196, (4 * v92), (4 * v93), v165, (char)v211[v86], *(unsigned int *)(v6 + 4324));
                  v27 = v204;
                  v4 = v193;
                  v88 = v217;
                }
                v87 = 0;
                v86 = 1;
              }
              while ((v88 & 1) != 0);
            }
            else if (v4[12])
            {
              v96 = *(_DWORD *)(v5 + 24);
              v97 = v157;
              v98 = v146;
              if (*v204)
              {
                v99 = &v214[6 * (*v204 & 1)];
                v98 = *((_QWORD *)v99 + 1737);
                v97 = *(_QWORD *)(v6 + 4376)
                    + 48
                    * ((*(uint64_t *)(v6 + 3432) >> 1) * ((*(_DWORD *)(v5 + 24) & 1) + (v7 >> 1))
                     + (v7 & 1)
                     + (*(int *)(v5 + 24) >> 1));
                *((_QWORD *)v99 + 1737) = v98 + v145;
              }
              v218 = v97;
              v100 = 4 * ((v80 >> 1) * (v7 >> v206) + (v96 >> v15));
              (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v6 + 3280) + 248))(*(_QWORD *)(v6 + 2128) + 8 * ((v80 >> 1) * (v7 >> v206) + (v96 >> v15)), v80, v97 + 16, v98, v149, v148);
              v15 = v199;
              result = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v6 + 3280) + 248))(*(_QWORD *)(v6 + 2136) + 2 * v100, *(_QWORD *)(v6 + 2152), v218 + 32, v98, v149, v148);
            }
            v101 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 656) + v205 + 560);
            v102 = *v152;
            if ((v102 & 0xFFFFFFFD) == 9 || v102 == 10 || (v101 & 0xFFFFFFFD) == 9 || v101 == 10)
              v106 = 512;
            else
              v106 = 0;
            v192 = v106;
            v107 = v164 >> v15;
            v173 = (int)(v164 >> v15) < v159;
            if (v168)
            {
              v108 = v178;
            }
            else
            {
              v108 = v178;
              if (v107 >= v159)
                v173 = (4u >> (*(_DWORD *)(v6 + 2168) - 1)) & a3;
            }
            v183 = v108 == 0;
            if (!v108 && v150 >= v151)
              v183 = (0x20u >> (*(_DWORD *)(v6 + 2168) - 1)) & a3;
            v185 = 0;
            if (v159 >= v107)
              v109 = v164 >> v15;
            else
              v109 = v159;
            v172 = (uint64_t)v80 >> 1;
            v110 = v178 >> v15;
            v7 = *(_DWORD *)(v5 + 28);
            v203 = v178 >> v15;
            do
            {
              v111 = v7 + v168;
              *(_DWORD *)(v5 + 28) = v7 + v168;
              v219 = v185;
              v112 = ++v185;
              if ((int)v174 >= v181)
              {
                v188 = v174;
              }
              else
              {
                v113 = v6 + 8 * v112;
                v175 = (uint64_t *)(v113 + 2120);
                v180 = (_QWORD *)(v113 + 3408);
                v114 = *(_DWORD *)(v5 + 24);
                v188 = v174;
                do
                {
                  v115 = *v175;
                  v116 = v114 + v178;
                  *(_DWORD *)(v5 + 24) = v116;
                  if (v110 < v109)
                  {
                    v117 = (_WORD *)(v115 + 8 * (v172 * (v111 >> v17) + (v116 >> v15)));
                    v119 = v188 <= v174 && v173 != 0;
                    v198 = v119;
                    v120 = v188 + v171;
                    v121 = v5 + 32 * v219 + 96;
                    v210 = (_BYTE *)(v121 + v120);
                    v177 = (_QWORD *)(v121 + (v120 + 8));
                    do
                    {
                      v122 = v4[9];
                      if ((v122 != 13 || !v211[v219]) && !v4[12])
                      {
                        v221 = (char)v4[14];
                        v123 = !v198 && v110 + *v220 >= v109;
                        if (v110 <= v203 && (v183 || v188 + *v215 < v181))
                          v124 = 8;
                        else
                          v124 = 0;
                        v125 = *(_DWORD *)(v212 + 28);
                        if (((*(_DWORD *)(v6 + 3472) - 1) & v213 & v125) != 0)
                          v126 = 0;
                        else
                          v126 = *v180 + 2 * ((*(_DWORD *)(v6 + 3456) * ((v125 >> *(_DWORD *)(v6 + 3468)) - 1)) << 7);
                        if (v122 == 13)
                          v122 = 0;
                        v127 = *v220;
                        v128 = *v215;
                        v129 = sub_218B8DCF0(v116 >> v15, v116 >> v15 > (int)v214[3466] >> v15, v125 >> v206, v125 >> v206 > (int)v214[3468] >> v206, (int)v214[3467] >> v15, (int)v214[3469] >> v206, v124 | !v123, v117, v208, v126, v122, (int *)&v221, v127, v128, *(unsigned __int8 *)(*(_QWORD *)(v6 + 8) + 394), v196, *(_DWORD *)(v6 + 4324));
                        v221 |= v195;
                        result = (*(uint64_t (**)(_WORD *, unint64_t, _WORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))(v194 + 8 * v129))(v117, v208, v196, (4 * v127), (4 * v128), v221 | v192, ((int)((v15 | (4 * *(_DWORD *)(v6 + 3448)))- 4 * (*(_DWORD *)(v212 + 24) & v190)) >> v15), ((int)((v206 | (4 * *(_DWORD *)(v6 + 3452)))- 4 * (*(_DWORD *)(v212 + 28) & v213)) >> v206), *(_DWORD *)(v6 + 4324));
                        v27 = v204;
                        v4 = v193;
                        v5 = v212;
                      }
                      if (v4[6])
                      {
                        if (*v27)
                        {
                          v130 = *v220;
                        }
                        else
                        {
                          switch(*v215)
                          {
                            case 1:
                              *v210 = 64;
                              break;
                            case 2:
                              *(_WORD *)v210 = 16448;
                              break;
                            case 3:
                            case 5:
                            case 6:
                            case 7:
                              break;
                            case 4:
                              *(_DWORD *)v210 = 1077952576;
                              break;
                            case 8:
                              v139 = v210;
                              goto LABEL_218;
                            default:
                              if (*v215 == 16)
                              {
                                *(_QWORD *)v210 = 0x4040404040404040;
                                v139 = v177;
LABEL_218:
                                *v139 = 0x4040404040404040;
                              }
                              break;
                          }
                          v130 = *v220;
                          switch(*v220)
                          {
                            case 1u:
                              *(_BYTE *)(*(_QWORD *)(v5 + 656) + 32 * v219 + (v110 + v205) + 64) = 64;
                              v130 = 1;
                              break;
                            case 2u:
                              *(_WORD *)(*(_QWORD *)(v5 + 656) + 32 * v219 + (v110 + v205) + 64) = 16448;
                              v130 = 2;
                              break;
                            case 3u:
                            case 5u:
                            case 6u:
                            case 7u:
                              break;
                            case 4u:
                              *(_DWORD *)(*(_QWORD *)(v5 + 656) + 32 * v219 + (v110 + v205) + 64) = 1077952576;
                              v130 = 4;
                              break;
                            case 8u:
                              *(_QWORD *)(*(_QWORD *)(v5 + 656) + 32 * v219 + (v110 + v205) + 64) = 0x4040404040404040;
                              v130 = 8;
                              break;
                            default:
                              if (v130 == 16)
                              {
                                v140 = (v110 + v205);
                                *(_QWORD *)(*(_QWORD *)(v5 + 656) + 32 * v219 + v140 + 64) = 0x4040404040404040;
                                *(_QWORD *)(*(_QWORD *)(v5 + 656) + 32 * v219 + (v140 + 8) + 64) = 0x4040404040404040;
                              }
                              break;
                          }
                        }
                      }
                      else
                      {
                        LODWORD(v224[0]) = 0;
                        if (!*v27)
                        {
                          LOBYTE(v222) = 0;
                          v136 = (v110 + v205);
                          result = sub_218B979B8(v5, *(_QWORD *)(v5 + 656) + 32 * v219 + v136 + 64, (uint64_t)v210, v4[7], a2, (uint64_t)v4, 1, v185, v200, (unsigned int *)v224, &v222);
                          v135 = result;
                          v137 = *v215;
                          if (v137 >= (int)(*(_DWORD *)(v6 + 3452) + v206 - *(_DWORD *)(v5 + 28)) >> v206)
                            v137 = (int)(*(_DWORD *)(v6 + 3452) + v206 - *(_DWORD *)(v5 + 28)) >> v206;
                          switch(v137)
                          {
                            case 1:
                              LODWORD(v138) = v222;
                              *v210 = v222;
                              goto LABEL_233;
                            case 2:
                              LODWORD(v138) = v222;
                              *(_WORD *)v210 = v222 | (v222 << 8);
                              goto LABEL_233;
                            case 3:
                            case 5:
                            case 6:
                            case 7:
                              goto LABEL_229;
                            case 4:
                              LODWORD(v138) = v222;
                              *(_DWORD *)v210 = 16843009 * v222;
                              goto LABEL_233;
                            case 8:
                              LODWORD(v138) = v222;
                              *(_QWORD *)v210 = 0x101010101010101 * v222;
                              goto LABEL_233;
                            default:
                              if (v137 == 16)
                              {
                                v138 = v222;
                                *(_QWORD *)v210 = 0x101010101010101 * v222;
                                *v177 = 0x101010101010101 * v138;
                              }
                              else
                              {
LABEL_229:
                                LODWORD(v138) = v222;
                                result = (uint64_t)memset(v210, v222, v137);
                              }
LABEL_233:
                              v130 = *v220;
                              v141 = (int)(*(_DWORD *)(v201 + 3448) + v199 - *(_DWORD *)(v5 + 24)) >> v199;
                              if (v130 < v141)
                                v141 = *v220;
                              switch(v141)
                              {
                                case 1:
                                  *(_BYTE *)(*(_QWORD *)(v5 + 656) + 32 * v219 + v136 + 64) = v138;
                                  goto LABEL_244;
                                case 2:
                                  *(_WORD *)(*(_QWORD *)(v5 + 656) + 32 * v219 + v136 + 64) = v138 | ((_WORD)v138 << 8);
                                  goto LABEL_244;
                                case 3:
                                case 5:
                                case 6:
                                case 7:
                                  goto LABEL_239;
                                case 4:
                                  *(_DWORD *)(*(_QWORD *)(v5 + 656) + 32 * v219 + v136 + 64) = 16843009 * v138;
                                  goto LABEL_244;
                                case 8:
                                  v142 = 0x101010101010101 * v138;
                                  v143 = *(_QWORD *)(v5 + 656) + 32 * v219 + v136;
                                  goto LABEL_242;
                                default:
                                  if (v141 == 16)
                                  {
                                    v142 = 0x101010101010101 * v138;
                                    *(_QWORD *)(*(_QWORD *)(v5 + 656) + 32 * v219 + v136 + 64) = v142;
                                    v143 = *(_QWORD *)(v5 + 656) + 32 * v219 + (v136 + 8);
LABEL_242:
                                    *(_QWORD *)(v143 + 64) = v142;
                                  }
                                  else
                                  {
LABEL_239:
                                    result = (uint64_t)memset((void *)(*(_QWORD *)(v5 + 656) + 32 * v219 + v136 + 64), v138, v141);
                                  }
LABEL_244:
                                  v134 = v200;
                                  v6 = v201;
                                  v15 = v199;
                                  if ((v135 & 0x80000000) == 0)
                                    goto LABEL_245;
                                  goto LABEL_246;
                              }
                          }
                        }
                        v131 = &v214[6 * (*v27 & 1)];
                        v132 = (__int16 *)*((_QWORD *)v131 + 1738);
                        v133 = *v132;
                        *((_QWORD *)v131 + 1738) = v132 + 1;
                        v134 = *((_QWORD *)v131 + 1739);
                        v130 = *v220;
                        *((_QWORD *)v131 + 1739) = v134 + ((*v215 * (unint64_t)*v220) << 6);
                        v135 = (v133 >> 5);
                        LODWORD(v224[0]) = v133 & 0x1F;
                        if ((v135 & 0x80000000) == 0)
LABEL_245:
                          result = (*(uint64_t (**)(_WORD *, unint64_t, uint64_t, uint64_t, _QWORD))(v189 + 136 * v4[7] + 8 * LODWORD(v224[0])))(v117, v208, v134, v135, *(unsigned int *)(v6 + 4324));
                      }
LABEL_246:
                      v117 += (4 * v130);
                      v110 += v130;
                      v116 = (v130 << v15) + *(_DWORD *)(v5 + 24);
                      *(_DWORD *)(v5 + 24) = v116;
                    }
                    while (v110 < v109);
                    v111 = *(_DWORD *)(v5 + 28);
                    LOBYTE(v17) = v206;
                  }
                  v114 = v116 - (v110 << v15);
                  *(_DWORD *)(v5 + 24) = v114;
                  v144 = *v215;
                  v111 += v144 << v17;
                  *(_DWORD *)(v5 + 28) = v111;
                  v188 += v144;
                  v110 = v203;
                }
                while (v188 < v181);
              }
              v7 = v111 - (v188 << v17);
              *(_DWORD *)(v5 + 28) = v7;
            }
            while (!v219);
          }
          v178 += 16;
          v14 = v160;
          v22 = v170;
          v28 = v163;
        }
        while (v164 < v162);
      }
      v21 = v28;
    }
    while ((int)v28 < v14);
  }
  return result;
}

uint64_t sub_218B9A7EC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  unint64_t v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _WORD *v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  int v54;
  char v55;
  unsigned int v56;
  unsigned int v57;
  char *v58;
  _QWORD *v59;
  _BOOL4 v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  _WORD *v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  _WORD *v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  int v125;
  uint64_t v126;
  unsigned int v127;
  int v128;
  signed int v129;
  int v130;
  unint64_t v131;
  _WORD *v132;
  int v133;
  char v134;
  signed int v135;
  int v136;
  int v137;
  int v138;
  signed int v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  signed int v145;
  signed int v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  signed int v150;
  char v151;
  uint64_t v152;
  int v153;
  signed int v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  signed int v160;
  unsigned __int8 *v161;
  int v162;
  _DWORD *v163;
  __int16 *v164;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  __int16 v178;
  int v179;
  unsigned int v180;
  unint64_t v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v202;
  int v203;
  int v204;
  unint64_t v205;
  unsigned __int8 *v206;
  unsigned int v207;
  BOOL v208;
  unint64_t v209;
  unint64_t v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  _WORD *v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  signed int v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  signed int v226;
  signed int v227;
  int v228;
  signed int v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  _QWORD *v233;
  int v234;
  char *v235;
  unint64_t v236;
  signed int v238;
  signed int v240;
  int v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  _DWORD *v245;
  unsigned int v246;
  unsigned int v248;
  char v249;
  unsigned __int8 *v250;
  _DWORD *v251;
  unsigned __int8 *v252;
  char *v253;
  unsigned __int8 *v254;
  int v255;
  uint64_t v256;
  unsigned __int8 v257;
  _WORD v258[2];
  int v259[3];

  v4 = a1;
  v251 = (_DWORD *)(a1 + 258496);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 24);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = v6;
  v9 = v7;
  v224 = v7 & 0x1F;
  v225 = v6 & 0x1F;
  v10 = *(_DWORD *)(v5 + 2168);
  v242 = v10 == 1;
  v11 = &byte_218BCF600[4 * a2];
  v12 = *v11;
  v252 = v11;
  v13 = v11[1];
  v14 = *(_DWORD *)(v5 + 3448) - v6;
  if ((int)v12 < v14)
    v14 = *v11;
  v207 = v14;
  v15 = *(_DWORD *)(v5 + 3452) - v7;
  if (v13 < v15)
    v15 = v11[1];
  v204 = v15;
  v255 = v10 != 3;
  if (!v10 || (v12 <= (v10 != 3) ? (v16 = (v8 & 1) == 0) : (v16 = 0), v16))
  {
    v17 = 0;
  }
  else if (v13 <= v242)
  {
    v17 = v7 & 1;
  }
  else
  {
    v17 = 1;
  }
  v243 = *(_QWORD *)(v5 + 3280);
  v245 = *(_DWORD **)(a1 + 16);
  v236 = v225 >> v255;
  v223 = v224 >> v242;
  if (v10)
    v18 = 3 - v10;
  else
    v18 = 0;
  v238 = (v13 + v242) >> v242;
  v240 = (v12 + v255) >> v255;
  v19 = *(_QWORD *)(v5 + 2144);
  v20 = (_WORD *)(*(_QWORD *)(v5 + 2120) + 8 * (v8 + (v19 >> 1) * v7));
  v218 = 4 * ((*(_QWORD *)(v5 + 2152) >> 1) * (v7 >> v242) + ((int)v8 >> v255));
  v21 = *(_QWORD *)(v5 + 24);
  v212 = v17;
  v214 = *v11;
  v256 = *(_QWORD *)(a1 + 8);
  v209 = v11[1];
  v228 = *(_DWORD *)(v5 + 2168);
  if ((*(_BYTE *)(v21 + 232) & 1) == 0)
  {
    v22 = v5 + 2376;
    sub_218B9C484(a1, (uint64_t)v20, 0, v19, v12, v13, v8, v9, 0, v202, *(_DWORD *)(a3 + 8), v5 + 2376, 0, 9u);
    v5 = v256;
    if (v17)
    {
      v23 = 0;
      do
      {
        v24 = *(_QWORD *)(v256 + 2128 + 8 * v23++) + 2 * v218;
        sub_218B9C484(a1, v24, 0, *(_QWORD *)(v5 + 2152), (_DWORD)v214 << ((_DWORD)v214 == v255), (_DWORD)v209 << ((_DWORD)v209 == v242), *(_DWORD *)(a1 + 24) & ~v255, *(_DWORD *)(a1 + 28) & ~v242, v23, v203, *(_DWORD *)(a3 + 8), v22, 0, 9u);
        v5 = v256;
      }
      while (v23 != 2);
    }
    goto LABEL_149;
  }
  if (*(_BYTE *)(a3 + 20))
  {
    v25 = 0;
    v26 = a3 + 8;
    v27 = *(unsigned __int8 *)(a3 + 27);
    v28 = a1 + 8256;
    v29 = 4 * v12;
    v30 = 1;
    do
    {
      v31 = v30;
      v32 = *(char *)(a3 + v25 + 24);
      if (*(_BYTE *)(a3 + 21) == 6 && *(_BYTE *)(v5 + v32 + 3056))
        sub_218B9C988(a1, 0, v28 + (v25 << 15), v29, v252, 0, v5 + 296 * *(char *)(a3 + v25 + 24) + 32, *(_QWORD *)(v5 + 24) + 36 * *(char *)(a3 + v25 + 24) + 896);
      else
        sub_218B9C484(a1, 0, v28 + (v25 << 15), 0, v214, v209, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 0, v202, *(_DWORD *)(v26 + 4 * v25), v5 + 296 * v32 + 32, *(char *)(a3 + v25 + 24), v27);
      v30 = 0;
      v25 = 1;
      v5 = v256;
    }
    while ((v31 & 1) != 0);
    switch(*(_BYTE *)(a3 + 20))
    {
      case 1:
        v230 = *(unsigned __int8 *)(v256 - *(char *)(a3 + 24) + 8 * *(char *)(a3 + 24) + *(char *)(a3 + 25) + 4272);
        (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(v243 + 584))(v20, *(_QWORD *)(v256 + 2144), v28, a1 + 41024, v29, (4 * v209));
        v5 = v256;
        goto LABEL_52;
      case 2:
        (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v243 + 576))(v20, *(_QWORD *)(v256 + 2144), v28, a1 + 41024, v29, (4 * v209), *(unsigned int *)(v256 + 4324));
        v5 = v256;
        goto LABEL_51;
      case 3:
        v235 = (char *)(a1 + 73792);
        (*(void (**)(_WORD *, _QWORD, unint64_t, unint64_t, uint64_t, _QWORD))(v243 + 8 * v18 + 600))(v20, *(_QWORD *)(v256 + 2144), v28 + ((unint64_t)*(unsigned __int8 *)(a3 + 17) << 15), v28 + ((unint64_t)(*(_BYTE *)(a3 + 17) == 0) << 15), v29, (4 * v209));
        v5 = v256;
        v230 = 0;
        if (v17)
          goto LABEL_55;
        goto LABEL_149;
      case 4:
        v43 = 4 * v209;
        (*(void (**)(_WORD *, _QWORD, unint64_t, unint64_t, uint64_t, _QWORD, char *, _QWORD))(v243 + 592))(v20, *(_QWORD *)(v256 + 2144), v28 + ((unint64_t)*(unsigned __int8 *)(a3 + 17) << 15), v28 + ((unint64_t)(*(_BYTE *)(a3 + 17) == 0) << 15), v29, (4 * v209), (char *)&unk_253D3D600+ 8 * *((unsigned __int16 *)&unk_253D3D600 + 36 * a2 + *(unsigned __int8 *)(a3 + 16) - 252), *(unsigned int *)(v256 + 4324));
        v5 = v256;
        if (!v17)
          goto LABEL_149;
        v230 = 0;
        v235 = (char *)&unk_253D3D600
             + 8
             * *((unsigned __int16 *)&unk_253D3D600
               + 396 * v18
               + 36 * a2
               + 16 * *(unsigned __int8 *)(a3 + 17)
               + *(unsigned __int8 *)(a3 + 16)
               - 252);
        goto LABEL_56;
      default:
LABEL_51:
        v230 = 0;
LABEL_52:
        v235 = 0;
        if (!v17)
          goto LABEL_149;
LABEL_55:
        v43 = 4 * v209;
LABEL_56:
        if (v240 >= v238)
          v44 = v238;
        else
          v44 = v240;
        v45 = v29 >> v255;
        v246 = v43 >> v242;
        v232 = a1 + 41024;
        v46 = 1;
        v47 = 1;
        break;
    }
    while (1)
    {
      v48 = 0;
      v249 = v46;
      v49 = 1;
      do
      {
        v50 = v49;
        v51 = *(char *)(a3 + v48 + 24);
        v52 = *(_BYTE *)(a3 + 21) == 6 && v44 >= 2;
        if (v52 && *(_BYTE *)(v5 + v51 + 3056))
          sub_218B9C988(a1, 0, v28 + (v48 << 15), v45, v252, v47, v5 + 296 * *(char *)(a3 + v48 + 24) + 32, *(_QWORD *)(v5 + 24) + 36 * *(char *)(a3 + v48 + 24) + 896);
        else
          sub_218B9C484(a1, 0, v28 + (v48 << 15), 0, v214, v209, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), v47, v202, *(_DWORD *)(v26 + 4 * v48), v5 + 296 * v51 + 32, *(char *)(a3 + v48 + 24), v27);
        v49 = 0;
        v48 = 1;
        v5 = v256;
      }
      while ((v50 & 1) != 0);
      v53 = *(_QWORD *)(v256 + 8 * v47 + 2120) + 2 * v218;
      v54 = *(unsigned __int8 *)(a3 + 20);
      if ((v54 - 3) < 2)
      {
        (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t, uint64_t, _QWORD, char *, _QWORD))(v243 + 592))(v53, *(_QWORD *)(v256 + 2152), v28 + ((unint64_t)*(unsigned __int8 *)(a3 + 17) << 15), v28 + ((unint64_t)(*(_BYTE *)(a3 + 17) == 0) << 15), v45, v246, v235, *(unsigned int *)(v256 + 4324));
      }
      else
      {
        if (v54 != 1)
        {
          v55 = v249;
          if (v54 == 2)
          {
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v243 + 576))(v53, *(_QWORD *)(v256 + 2152), v28, v232, v45, v246, *(unsigned int *)(v256 + 4324));
            v5 = v256;
          }
          goto LABEL_77;
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v243 + 584))(v53, *(_QWORD *)(v256 + 2152), v28, v232, v45, v246, v230, *(unsigned int *)(v256 + 4324));
      }
      v5 = v256;
      v55 = v249;
LABEL_77:
      v46 = 0;
      v47 = 2;
      if ((v55 & 1) == 0)
        goto LABEL_149;
    }
  }
  v234 = v18;
  v33 = *(char *)(a3 + 24);
  v34 = v5 + 296 * v33 + 32;
  v248 = *(unsigned __int8 *)(a3 + 27);
  if ((int)v12 >= v13)
    v35 = v11[1];
  else
    v35 = *v11;
  if (v35 < 2)
    goto LABEL_43;
  if (*(_BYTE *)(a3 + 21) != 2 || !*(_BYTE *)(v5 + v33 + 3056))
  {
    if (*(_BYTE *)(a3 + 22) == 2 && *v251 > 1u)
      goto LABEL_41;
LABEL_43:
    sub_218B9C484(a1, (uint64_t)v20, 0, v19, v12, v13, v8, v9, 0, v202, *(_DWORD *)(a3 + 8), v34, v33, v248);
    if (*(_BYTE *)(a3 + 22) == 1)
      sub_218B9CCD8(v4, (uint64_t)v20, *(_QWORD *)(v256 + 2144), v252, 0, v225, v224, v207, v204);
    goto LABEL_45;
  }
  if (*(_BYTE *)(a3 + 22) == 2)
  {
LABEL_41:
    v36 = a1 + 258496;
    goto LABEL_42;
  }
  v36 = v21 + 36 * (int)v33 + 896;
LABEL_42:
  sub_218B9C988(a1, (uint64_t)v20, 0, v19, v252, 0, v34, v36);
LABEL_45:
  v5 = v256;
  if (*(_BYTE *)(a3 + 28))
  {
    v37 = v4 + 17536;
    v38 = v4;
    v39 = (_WORD *)(v4 + 25792);
    v40 = *(unsigned __int8 *)(a3 + 18);
    if (v40 == 3)
      v40 = 9;
    v259[0] = 0;
    v41 = *(_DWORD *)(v38 + 28);
    if (((*(_DWORD *)(v256 + 3472) - 1) & v41) != 0)
      v42 = 0;
    else
      v42 = *(_QWORD *)(v256 + 3408) + 2 * ((*(_DWORD *)(v256 + 3456) * ((v41 >> *(_DWORD *)(v256 + 3468)) - 1)) << 7);
    v56 = sub_218B8DCF0(*(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 24) > v245[3466], v41, v41 > v245[3468], v245[3467], v245[3469], 0, v20, *(_QWORD *)(v256 + 2144), v42, v40, v259, v214, v209, 0, v39, *(_DWORD *)(v256 + 4324));
    (*(void (**)(uint64_t, uint64_t, _WORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))(v243 + 8 * v56 + 64))(v37, 8 * v214, v39, (4 * v214), (4 * v209), 0, 0, 0, *(_DWORD *)(v256 + 4324));
    v57 = a2 - 7;
    if (*(_BYTE *)(a3 + 28) == 1)
      v58 = (char *)&unk_253D3D600 + 72 * v57 + 2 * *(unsigned __int8 *)(a3 + 18) + 64;
    else
      v58 = (char *)&unk_253D3D600 + 72 * v57 + 2 * *(unsigned __int8 *)(a3 + 16);
    v4 = a1;
    (*(void (**)(_WORD *, _QWORD, uint64_t, _QWORD, _QWORD, char *))(v243 + 624))(v20, *(_QWORD *)(v256 + 2144), v37, (4 * v214), (4 * v209), (char *)&unk_253D3D600 + 8 * *(unsigned __int16 *)v58);
    v5 = v256;
  }
  if (v17)
  {
    if ((_DWORD)v214 != v255 && (_DWORD)v209 != v242)
      goto LABEL_121;
    v59 = (_QWORD *)(v4 + 8 * (*(_DWORD *)(v4 + 28) & 0x1F) + 712);
    v60 = (_DWORD)v214 != 1 || *(char *)(*v59 + 12 * *(int *)(v4 + 24) - 4) > 0;
    if ((_DWORD)v209 == v242)
    {
      v61 = *(_QWORD *)(v4 + 8 * (*(_DWORD *)(v4 + 28) & 0x1F) + 704);
      v62 = *(_DWORD *)(v4 + 24);
      if (*(char *)(v61 + 12 * v62 + 8) <= 0)
        v60 = 0;
      if ((_DWORD)v214 == 1 && *(char *)(v61 + 12 * v62 - 4) <= 0)
        v60 = 0;
    }
    if (v60)
    {
      v63 = 0;
      v64 = 0;
      if ((_DWORD)v214 == 1 && (_DWORD)v209 == v242)
      {
        v65 = 1;
        v66 = 1;
        v67 = a1;
        do
        {
          v68 = v65;
          v69 = *(int *)(v67 + 24);
          v70 = *(int *)(v67 + 28) - 1;
          if (v251[17] == 2)
            v71 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 4360) + 32 * (v69 + *(_QWORD *)(v5 + 3432) * v70) - 5);
          else
            v71 = v251[16];
          v72 = v69 - 1;
          v73 = *(v59 - 1) + 12 * (v69 - 1);
          v67 = a1;
          sub_218B9C484(a1, *(_QWORD *)(v5 + 8 * v66 + 2120) + 2 * v218, 0, *(_QWORD *)(v5 + 2152), 1, v242, v72, v70, v66, v202, *(_DWORD *)v73, v5 + 296 * (*(char *)(v73 + 8) - 1) + 32, *(char *)(v73 + 8) - 1, v71);
          v5 = v256;
          v65 = 0;
          v66 = 2;
        }
        while ((v68 & 1) != 0);
        v64 = *(_QWORD *)(v256 + 2152);
        v63 = 2;
      }
      if ((_DWORD)v214 == 1)
      {
        v74 = byte_218BBFDA8[4 * *(unsigned __int8 *)(a1 + v224 + 416) + *(unsigned __int8 *)(a1 + v224 + 384)];
        v75 = 1;
        v63 = 2;
        v76 = 1;
        do
        {
          v77 = v75;
          v79 = *(int *)(a1 + 24);
          v78 = *(int *)(a1 + 28);
          v80 = v74;
          if (v251[17] == 2)
            v80 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 4360) + 32 * (v79 + *(_QWORD *)(v5 + 3432) * v78) - 5);
          sub_218B9C484(a1, *(_QWORD *)(v5 + 8 * v76 + 2120) + 2 * v218 + 2 * v64, 0, *(_QWORD *)(v5 + 2152), 1, v209, v79 - 1, v78, v76, v202, *(_DWORD *)(*v59 + 12 * (v79 - 1)), v5 + 296 * (*(char *)(*v59 + 12 * (v79 - 1) + 8) - 1) + 32, *(char *)(*v59 + 12 * (v79 - 1) + 8) - 1, v80);
          v5 = v256;
          v75 = 0;
          v76 = 2;
        }
        while ((v77 & 1) != 0);
      }
      if ((_DWORD)v209 == v242)
      {
        v81 = byte_218BBFDA8[4 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 656) + v225 + 384)
                           + *(unsigned __int8 *)(*(_QWORD *)(a1 + 656) + v225 + 352)];
        v82 = 1;
        v83 = 1;
        do
        {
          v84 = v82;
          v85 = *(int *)(a1 + 24);
          v86 = *(int *)(a1 + 28) - 1;
          v87 = v81;
          if (v251[17] == 2)
            v87 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 4360) + 32 * (v85 + *(_QWORD *)(v5 + 3432) * v86) + 27);
          v88 = *(v59 - 1) + 12 * (int)v85;
          sub_218B9C484(a1, *(_QWORD *)(v5 + 8 * v83 + 2120) + 2 * v218 + 2 * v63, 0, *(_QWORD *)(v5 + 2152), v214, v242, v85, v86, v83, v202, *(_DWORD *)v88, v5 + 296 * (*(char *)(v88 + 8) - 1) + 32, *(char *)(v88 + 8) - 1, v87);
          v5 = v256;
          v82 = 0;
          v83 = 2;
        }
        while ((v84 & 1) != 0);
        v64 = *(_QWORD *)(v256 + 2152);
      }
      v89 = 1;
      v90 = 1;
      do
      {
        v91 = v89;
        sub_218B9C484(a1, *(_QWORD *)(v5 + 8 * v90 + 2120) + 2 * v218 + 2 * v63 + 2 * v64, 0, *(_QWORD *)(v5 + 2152), v214, v209, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), v90, v202, *(_DWORD *)(a3 + 8), v34, *(char *)(a3 + 24), v248);
        v5 = v256;
        v89 = 0;
        v90 = 2;
      }
      while ((v91 & 1) != 0);
    }
    else
    {
LABEL_121:
      v92 = v34;
      v93 = v240;
      if (v240 >= v238)
        v93 = v238;
      if (v93 >= 2
        && (*(_BYTE *)(a3 + 21) == 2 && *(_BYTE *)(v5 + *(char *)(a3 + 24) + 3056)
         || *(_BYTE *)(a3 + 22) == 2 && *v251 >= 2u))
      {
        v94 = v4 + 258496;
        v95 = 1;
        v96 = 1;
        do
        {
          v97 = v95;
          v98 = v94;
          if (*(_BYTE *)(a3 + 22) != 2)
            v98 = *(_QWORD *)(v5 + 24) + 36 * *(char *)(a3 + 24) + 896;
          sub_218B9C988(a1, *(_QWORD *)(v5 + 8 * v96 + 2120) + 2 * v218, 0, *(_QWORD *)(v5 + 2152), v252, v96, v34, v98);
          v5 = v256;
          v95 = 0;
          v96 = 2;
        }
        while ((v97 & 1) != 0);
      }
      else
      {
        v99 = 1;
        v100 = 1;
        do
        {
          v101 = v99;
          v102 = v5 + 8 * v100;
          sub_218B9C484(a1, *(_QWORD *)(v102 + 2120) + 2 * v218, 0, *(_QWORD *)(v5 + 2152), (_DWORD)v214 << ((_DWORD)v214 == v255), (_DWORD)v209 << ((_DWORD)v209 == v242), *(_DWORD *)(a1 + 24) & ~v255, *(_DWORD *)(a1 + 28) & ~v242, v100, v202, *(_DWORD *)(a3 + 8), v92, *(char *)(a3 + 24), v248);
          if (*(_BYTE *)(a3 + 22) == 1)
            sub_218B9CCD8(a1, *(_QWORD *)(v102 + 2120) + 2 * v218, *(_QWORD *)(v256 + 2152), v252, v100, v225, v224, v207, v204);
          v99 = 0;
          v100 = 2;
          v5 = v256;
        }
        while ((v101 & 1) != 0);
      }
      if (*(_BYTE *)(a3 + 28))
      {
        if (*(_BYTE *)(a3 + 28) == 1)
          v103 = (char *)&unk_253D3D600 + 792 * v234 + 72 * a2 + 2 * *(unsigned __int8 *)(a3 + 18) - 440;
        else
          v103 = (char *)&unk_253D3D600 + 792 * v234 + 72 * a2 + 2 * *(unsigned __int8 *)(a3 + 16) - 504;
        v104 = a1;
        v253 = (char *)&unk_253D3D600 + 8 * *(unsigned __int16 *)v103;
        v105 = (_WORD *)(a1 + 25792);
        v106 = (4 * v240);
        v107 = (4 * v238);
        v108 = 1;
        v109 = 1;
        v110 = a1 + 17536;
        do
        {
          v111 = v108;
          v112 = *(unsigned __int8 *)(a3 + 18);
          if (v112 == 3)
            v112 = 9;
          v259[0] = 0;
          v113 = v5 + 8 * v109;
          v114 = *(_DWORD *)(v104 + 28);
          if (((*(_DWORD *)(v5 + 3472) - 1) & v114) != 0)
            v115 = 0;
          else
            v115 = *(_QWORD *)(v113 + 3408)
                 + 2 * ((*(_DWORD *)(v5 + 3456) * ((v114 >> *(_DWORD *)(v5 + 3468)) - 1)) << 7);
          v116 = (_WORD *)(*(_QWORD *)(v113 + 2120) + 2 * v218);
          v104 = a1;
          v117 = sub_218B8DCF0(*(int *)(a1 + 24) >> v255, *(int *)(a1 + 24) >> v255 > (int)v245[3466] >> v255, v114 >> v242, v114 >> v242 > (int)v245[3468] >> v242, (int)v245[3467] >> v255, (int)v245[3469] >> v242, 0, v116, *(_QWORD *)(v5 + 2152), v115, v112, v259, v240, v238, 0, v105, *(_DWORD *)(v5 + 4324));
          (*(void (**)(uint64_t, _QWORD, _WORD *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _DWORD))(v243 + 64 + 8 * v117))(v110, (8 * v240), v105, v106, v107, 0, 0, 0, *(_DWORD *)(v256 + 4324));
          (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t, uint64_t, char *))(v243 + 624))(v116, *(_QWORD *)(v256 + 2152), v110, v106, v107, v253);
          v5 = v256;
          v108 = 0;
          v109 = 2;
        }
        while ((v111 & 1) != 0);
      }
    }
  }
  v251[16] = v248;
LABEL_149:
  if (*(_BYTE *)(a3 + 6))
  {
    v118 = a1;
    v119 = v212;
    v120 = v214;
    switch((int)v209)
    {
      case 1:
        *(_BYTE *)(a1 + v224 + 64) = 64;
        break;
      case 2:
        *(_WORD *)(a1 + v224 + 64) = 16448;
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 4:
        *(_DWORD *)(a1 + v224 + 64) = 1077952576;
        break;
      case 8:
        *(_QWORD *)(a1 + v224 + 64) = 0x4040404040404040;
        break;
      default:
        if ((_DWORD)v209 == 16)
        {
          v118 = a1;
          *(_QWORD *)&v183 = 0x4040404040404040;
          *((_QWORD *)&v183 + 1) = 0x4040404040404040;
          *(_OWORD *)(a1 + v224 + 64) = v183;
          v119 = v212;
          v120 = v214;
        }
        else
        {
          v118 = a1;
          v119 = v212;
          v120 = v214;
          if ((_DWORD)v209 == 32)
          {
            *(_QWORD *)&v182 = 0x4040404040404040;
            *((_QWORD *)&v182 + 1) = 0x4040404040404040;
            *(_OWORD *)(a1 + 64 + v224) = v182;
            *(_OWORD *)(a1 + 64 + (v224 + 16)) = v182;
          }
        }
        break;
    }
    switch(v120)
    {
      case 1:
        *(_BYTE *)(*(_QWORD *)(v118 + 656) + v225 + 32) = 64;
        goto LABEL_239;
      case 2:
        *(_WORD *)(*(_QWORD *)(v118 + 656) + v225 + 32) = 16448;
        goto LABEL_239;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_239;
      case 4:
        *(_DWORD *)(*(_QWORD *)(v118 + 656) + v225 + 32) = 1077952576;
        goto LABEL_239;
      case 8:
        v186 = *(_QWORD *)(v118 + 656) + v225;
        goto LABEL_238;
      default:
        if (v120 == 16)
        {
          *(_QWORD *)(*(_QWORD *)(v118 + 656) + v225 + 32) = 0x4040404040404040;
          v184 = *(_QWORD *)(v118 + 656);
          v185 = (v225 + 8);
        }
        else
        {
          if (v120 != 32)
            goto LABEL_239;
          *(_QWORD *)(*(_QWORD *)(v118 + 656) + v225 + 32) = 0x4040404040404040;
          *(_QWORD *)(*(_QWORD *)(v118 + 656) + (v225 + 8) + 32) = 0x4040404040404040;
          *(_QWORD *)(*(_QWORD *)(v118 + 656) + (v225 + 16) + 32) = 0x4040404040404040;
          v184 = *(_QWORD *)(v118 + 656);
          v185 = (v225 + 24);
        }
        v186 = v184 + v185;
LABEL_238:
        *(_QWORD *)(v186 + 32) = 0x4040404040404040;
LABEL_239:
        if (v119)
        {
          switch(v238)
          {
            case 1:
              v187 = v118 + v223;
              *(_BYTE *)(v187 + 96) = 64;
              *(_BYTE *)(v187 + 128) = 64;
              break;
            case 2:
              v192 = v118 + v223;
              *(_WORD *)(v192 + 96) = 16448;
              *(_WORD *)(v192 + 128) = 16448;
              break;
            case 3:
            case 5:
            case 6:
            case 7:
              break;
            case 4:
              v193 = v118 + v223;
              *(_DWORD *)(v193 + 96) = 1077952576;
              *(_DWORD *)(v193 + 128) = 1077952576;
              break;
            case 8:
              v194 = v118 + v223;
              *(_QWORD *)(v194 + 96) = 0x4040404040404040;
              *(_QWORD *)(v194 + 128) = 0x4040404040404040;
              break;
            default:
              if (v238 == 16)
              {
                v195 = v118 + v223;
                *(_QWORD *)&v196 = 0x4040404040404040;
                *((_QWORD *)&v196 + 1) = 0x4040404040404040;
                *(_OWORD *)(v195 + 96) = v196;
                *(_OWORD *)(v195 + 128) = v196;
              }
              else if (v238 == 32)
              {
                v188 = v118 + 96;
                *(_QWORD *)&v189 = 0x4040404040404040;
                *((_QWORD *)&v189 + 1) = 0x4040404040404040;
                *(_OWORD *)(v188 + v223) = v189;
                v190 = v223 + 16;
                *(_OWORD *)(v188 + v190) = v189;
                v191 = v118 + 128;
                *(_OWORD *)(v191 + v223) = v189;
                *(_OWORD *)(v191 + v190) = v189;
              }
              break;
          }
          switch(v240)
          {
            case 1:
              *(_BYTE *)(*(_QWORD *)(v118 + 656) + v236 + 64) = 64;
              *(_BYTE *)(*(_QWORD *)(v118 + 656) + v236 + 96) = 64;
              return 0;
            case 2:
              *(_WORD *)(*(_QWORD *)(v118 + 656) + v236 + 64) = 16448;
              *(_WORD *)(*(_QWORD *)(v118 + 656) + v236 + 96) = 16448;
              return 0;
            case 3:
            case 5:
            case 6:
            case 7:
              return 0;
            case 4:
              *(_DWORD *)(*(_QWORD *)(v118 + 656) + v236 + 64) = 1077952576;
              *(_DWORD *)(*(_QWORD *)(v118 + 656) + v236 + 96) = 1077952576;
              return 0;
            case 8:
              v199 = v225 >> v255;
              *(_QWORD *)(*(_QWORD *)(v118 + 656) + v236 + 64) = 0x4040404040404040;
              goto LABEL_259;
            default:
              if (v240 == 16)
              {
                *(_QWORD *)(*(_QWORD *)(v118 + 656) + v236 + 64) = 0x4040404040404040;
                v199 = v236 + 8;
                *(_QWORD *)(*(_QWORD *)(v118 + 656) + v199 + 64) = 0x4040404040404040;
                v200 = *(_QWORD *)(v118 + 656) + v236;
              }
              else
              {
                if (v240 != 32)
                  return 0;
                *(_QWORD *)(*(_QWORD *)(v118 + 656) + v236 + 64) = 0x4040404040404040;
                v197 = v236 + 8;
                *(_QWORD *)(*(_QWORD *)(v118 + 656) + v197 + 64) = 0x4040404040404040;
                v198 = v236 + 16;
                *(_QWORD *)(*(_QWORD *)(v118 + 656) + v198 + 64) = 0x4040404040404040;
                v199 = v236 + 24;
                *(_QWORD *)(*(_QWORD *)(v118 + 656) + v199 + 64) = 0x4040404040404040;
                *(_QWORD *)(*(_QWORD *)(v118 + 656) + v236 + 96) = 0x4040404040404040;
                *(_QWORD *)(*(_QWORD *)(v118 + 656) + v197 + 96) = 0x4040404040404040;
                v200 = *(_QWORD *)(v118 + 656) + v198;
              }
              *(_QWORD *)(v200 + 96) = 0x4040404040404040;
LABEL_259:
              *(_QWORD *)(*(_QWORD *)(v118 + 656) + v199 + 96) = 0x4040404040404040;
              break;
          }
        }
        break;
    }
  }
  else
  {
    v121 = *(unsigned __int8 *)(a3 + 7);
    v122 = *(unsigned __int8 *)(a3 + 26);
    v258[0] = *(unsigned __int8 *)(a3 + 29);
    v258[1] = *(_WORD *)(a3 + 30);
    v123 = a1;
    v124 = v214;
    LOBYTE(v125) = v255;
    if ((_DWORD)v209)
    {
      v126 = 0;
      v216 = v228 == 1;
      v206 = &byte_218BCF658[8 * v122];
      v250 = &byte_218BCF658[8 * v121];
      v254 = v250 + 1;
      v244 = v243 + 680;
      do
      {
        if (v124)
        {
          v231 = 0;
          v208 = v126 != 0;
          v213 = 2 * v126;
          v127 = v126 + 16;
          v128 = v204;
          if (v204 >= (int)v126 + 16)
            v128 = v126 + 16;
          v221 = v128;
          v217 = 4 * v126;
          v219 = v126 >> v242;
          v205 = v126 + 16;
          v129 = v127 >> v242;
          if ((int)(v204 + v242) >> v242 < (int)(v127 >> v242))
            v129 = (int)(v204 + v242) >> v242;
          v227 = v129;
          v130 = *(_DWORD *)(v123 + 28);
          v220 = v126;
          do
          {
            v131 = *(_QWORD *)(v5 + 2144);
            v132 = &v20[v213 * v131];
            v133 = v130 + v126;
            *(_DWORD *)(v123 + 28) = v130 + v126;
            if (v126 >= v221)
            {
              v137 = v126;
            }
            else
            {
              v134 = v208;
              if ((int)v207 >= (int)(v231 + 16))
                v135 = v231 + 16;
              else
                v135 = v207;
              v136 = *(_DWORD *)(v123 + 24);
              v137 = v126;
              do
              {
                v138 = v136 + v231;
                *(_DWORD *)(v123 + 24) = v138;
                v139 = v231;
                if ((int)v231 < v135)
                {
                  v140 = v123;
                  v141 = v231 != 0;
                  v139 = v231;
                  do
                  {
                    sub_218B973C8(v140, a2, a3, *(unsigned __int8 *)(a3 + 26), 0, (uint64_t)v258, v141, v134, (uint64_t)&v132[4 * v139]);
                    v142 = *v206;
                    v138 = *(_DWORD *)(v140 + 24) + v142;
                    *(_DWORD *)(v140 + 24) = v138;
                    v139 += v142;
                    ++v141;
                  }
                  while (v139 < v135);
                  LOBYTE(v125) = v255;
                  v5 = v256;
                  v131 = *(_QWORD *)(v256 + 2144);
                  v133 = *(_DWORD *)(v140 + 28);
                  v123 = v140;
                }
                v143 = v206[1];
                v132 += 2 * v131 * v143;
                v136 = v138 - v139;
                v133 += v143;
                *(_DWORD *)(v123 + 24) = v136;
                *(_DWORD *)(v123 + 28) = v133;
                v137 += v143;
                ++v134;
              }
              while (v137 < (int)v221);
            }
            v130 = v133 - v137;
            *(_DWORD *)(v123 + 28) = v133 - v137;
            v215 = v132;
            if ((v212 & 1) != 0)
            {
              v210 = v131;
              v211 = v137;
              v144 = 0;
              v145 = v231 >> v125;
              if ((int)(v207 + v255) >> v255 >= (int)((v231 + 16) >> v125))
                v146 = (v231 + 16) >> v125;
              else
                v146 = (int)(v207 + v255) >> v255;
              v147 = *(_QWORD *)(v5 + 2152);
              v148 = 1;
              v149 = a3;
              v150 = v227;
              v226 = v231 >> v125;
              do
              {
                v151 = v148;
                v152 = *(_QWORD *)(v5 + 8 * (v144 + 1) + 2120);
                v153 = v130 + v220;
                *(_DWORD *)(v123 + 28) = v153;
                v222 = v151;
                if (v219 >= v150)
                {
                  v154 = v219;
                }
                else
                {
                  v154 = v219;
                  v155 = v152 + 2 * v218 + 2 * ((v217 * (v147 >> 1)) >> v216);
                  v156 = *(_DWORD *)(v123 + 24);
                  do
                  {
                    v157 = v156 + v231;
                    *(_DWORD *)(v123 + 24) = v157;
                    if (v145 >= v146)
                    {
                      v167 = *v254;
                      v160 = v145;
                    }
                    else
                    {
                      v241 = v225 | (32 * ((v154 << v242) + v224));
                      v229 = v154;
                      v158 = (v154 + v223);
                      v159 = v123 + 32 * v144 + 96;
                      v160 = v145;
                      v161 = (unsigned __int8 *)(v159 + v158);
                      v233 = (_QWORD *)(v159 + (v158 + 8));
                      do
                      {
                        v162 = v251[17];
                        if (!v162)
                        {
                          v257 = 0;
                          v259[0] = *(unsigned __int8 *)(a1 + 9344 + v241 + (v160 << v125));
                          v168 = v149;
                          v169 = (v160 + v236);
                          v170 = sub_218B979B8(v123, *(_QWORD *)(v123 + 656) + 32 * v144 + v169 + 64, (uint64_t)v161, *(unsigned __int8 *)(v168 + 7), a2, v168, 0, (int)v144 + 1, a1 + 1024, (unsigned int *)v259, &v257);
                          v167 = *v254;
                          v171 = v256;
                          v172 = (int)(*(_DWORD *)(v256 + 3452) + v242 - *(_DWORD *)(v123 + 28)) >> v242;
                          if ((int)v167 < v172)
                            v172 = *v254;
                          switch(v172)
                          {
                            case 1:
                              LODWORD(v173) = v257;
                              *v161 = v257;
                              goto LABEL_196;
                            case 2:
                              LODWORD(v173) = v257;
                              *(_WORD *)v161 = v257 | (v257 << 8);
                              goto LABEL_196;
                            case 3:
                            case 5:
                            case 6:
                            case 7:
                              goto LABEL_192;
                            case 4:
                              LODWORD(v173) = v257;
                              *(_DWORD *)v161 = 16843009 * v257;
                              goto LABEL_196;
                            case 8:
                              LODWORD(v173) = v257;
                              *(_QWORD *)v161 = 0x101010101010101 * v257;
                              goto LABEL_196;
                            default:
                              if (v172 == 16)
                              {
                                v173 = v257;
                                *(_QWORD *)v161 = 0x101010101010101 * v257;
                                *v233 = 0x101010101010101 * v173;
                              }
                              else
                              {
LABEL_192:
                                LODWORD(v173) = v257;
                                memset(v161, v257, v172);
                                v171 = v256;
                              }
LABEL_196:
                              v166 = *v250;
                              v125 = v255;
                              v174 = (*(_DWORD *)(v171 + 3448) + v125 - *(_DWORD *)(a1 + 24)) >> v125;
                              if (v166 < v174)
                                v174 = *v250;
                              switch(v174)
                              {
                                case 1:
                                  *(_BYTE *)(*(_QWORD *)(a1 + 656) + 32 * v144 + v169 + 64) = v173;
                                  v123 = a1;
                                  goto LABEL_207;
                                case 2:
                                  v178 = v173 | ((_WORD)v173 << 8);
                                  v123 = a1;
                                  *(_WORD *)(*(_QWORD *)(a1 + 656) + 32 * v144 + v169 + 64) = v178;
                                  goto LABEL_207;
                                case 3:
                                case 5:
                                case 6:
                                case 7:
                                  goto LABEL_202;
                                case 4:
                                  v179 = 16843009 * v173;
                                  v123 = a1;
                                  *(_DWORD *)(*(_QWORD *)(a1 + 656) + 32 * v144 + v169 + 64) = v179;
                                  goto LABEL_207;
                                case 8:
                                  v175 = 0x101010101010101 * v173;
                                  v123 = a1;
                                  v176 = *(_QWORD *)(a1 + 656) + 32 * v144 + v169;
                                  goto LABEL_206;
                                default:
                                  if (v174 == 16)
                                  {
                                    v175 = 0x101010101010101 * v173;
                                    v123 = a1;
                                    *(_QWORD *)(*(_QWORD *)(a1 + 656) + 32 * v144 + v169 + 64) = v175;
                                    v176 = *(_QWORD *)(a1 + 656) + 32 * v144 + (v169 + 8);
LABEL_206:
                                    *(_QWORD *)(v176 + 64) = v175;
                                  }
                                  else
                                  {
LABEL_202:
                                    v177 = v173;
                                    v123 = a1;
                                    memset((void *)(*(_QWORD *)(a1 + 656) + 32 * v144 + v169 + 64), v177, v174);
                                    LOBYTE(v125) = v255;
                                  }
LABEL_207:
                                  v149 = a3;
                                  if (v170 < 0)
                                    goto LABEL_184;
                                  goto LABEL_183;
                              }
                          }
                        }
                        v163 = &v245[6 * (v162 & 1)];
                        v164 = (__int16 *)*((_QWORD *)v163 + 1738);
                        v165 = *v164;
                        *((_QWORD *)v163 + 1738) = v164 + 1;
                        v166 = *v250;
                        v167 = *v254;
                        *((_QWORD *)v163 + 1739) += (v167 * *v250) << 6;
                        v259[0] = v165 & 0x1F;
                        if (((v165 >> 5) & 0x80000000) == 0)
                        {
LABEL_183:
                          (*(void (**)(uint64_t, _QWORD))(v244
                                                                  + 136 * *(unsigned __int8 *)(v149 + 7)
                                                                  + 8 * v259[0]))(v155 + 2 * (4 * v160), *(_QWORD *)(v256 + 2152));
                          LOBYTE(v125) = v255;
                        }
LABEL_184:
                        v157 = (v166 << v125) + *(_DWORD *)(v123 + 24);
                        *(_DWORD *)(v123 + 24) = v157;
                        v160 += v166;
                      }
                      while (v160 < v146);
                      v5 = v256;
                      v147 = *(_QWORD *)(v256 + 2152);
                      v153 = *(_DWORD *)(v123 + 28);
                      v150 = v227;
                      v154 = v229;
                      v145 = v226;
                    }
                    v155 += 4 * v147 * v167;
                    v156 = v157 - (v160 << v125);
                    v153 += (_DWORD)v167 << v242;
                    *(_DWORD *)(v123 + 24) = v156;
                    *(_DWORD *)(v123 + 28) = v153;
                    v154 += v167;
                  }
                  while (v154 < v150);
                }
                v148 = 0;
                v130 = v153 - (v154 << v242);
                *(_DWORD *)(v123 + 28) = v130;
                v144 = 1;
              }
              while ((v222 & 1) != 0);
              v124 = v214;
              v126 = v220;
              v137 = v211;
              v131 = v210;
              v180 = v231 + 16;
            }
            else
            {
              v180 = v231 + 16;
              v124 = v214;
              v126 = v220;
            }
            v20 = &v215[-4 * v137 * (v131 >> 1)];
            v231 = v180;
          }
          while (v180 < v124);
          v181 = v205;
        }
        else
        {
          v181 = v126 + 16;
        }
        v126 = v181;
      }
      while (v181 < v209);
    }
  }
  return 0;
}

uint64_t sub_218B9C484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned int a9, int a10, int a11, uint64_t a12, int a13, unsigned int a14)
{
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  char v25;
  char v26;
  unint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  char v31;
  unsigned int v32;
  char v33;
  int v34;
  int v35;
  int v37;
  _DWORD *v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  int v47;
  __int16 v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  BOOL v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  uint64_t v87;
  uint64_t v88;

  v18 = *(_QWORD *)(a1 + 8);
  if (a9)
  {
    v19 = *(_DWORD *)(v18 + 2168);
    v20 = v19 == 1;
    v21 = v19 != 3;
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v22 = 4u >> v21;
  v23 = 4u >> v20;
  v24 = a11 >> 16;
  v25 = v21 ^ 1;
  v26 = v20 ^ 1;
  v27 = *(_QWORD *)(a12 + 8 * (a9 != 0) + 40);
  v29 = *(_DWORD *)(a12 + 56);
  v28 = *(_DWORD *)(a12 + 60);
  if (v29 == *(_DWORD *)(v18 + 2160) && v28 == *(_DWORD *)(v18 + 2164))
  {
    v30 = (0xFu >> v25) & (a11 >> 16);
    if (v21)
      v31 = 4;
    else
      v31 = 3;
    v32 = (v24 >> v31) + v22 * a7;
    if (v20)
      v33 = 4;
    else
      v33 = 3;
    if (*(_QWORD *)(a12 + 16) == *(_QWORD *)(v18 + 2120))
    {
      v34 = 4 * *(_DWORD *)(v18 + 3448);
      v35 = 4 * *(_DWORD *)(v18 + 3452);
    }
    else
    {
      v34 = v29 + v21;
      v35 = v28 + v20;
    }
    v82 = a4;
    v67 = (0xFu >> v26) & a11;
    v68 = ((__int16)a11 >> v33) + v23 * a8;
    v69 = v35 >> v20;
    v70 = v34 >> v21;
    if (v30)
      v71 = 3;
    else
      v71 = 0;
    v84 = (0xFu >> v26) & a11;
    v83 = (0xFu >> v25) & (a11 >> 16);
    if ((int)v32 >= v71
      && (v67 ? (v72 = 3) : (v72 = 0),
          (int)v68 >= v72
       && (int)(v32 + v22 * a5 + 4 * (v30 != 0)) <= v70
       && (int)(v68 + v23 * a6 + 4 * (v67 != 0)) <= v69))
    {
      v88 = *(_QWORD *)(a12 + 8 * (a9 != 0) + 40);
      v73 = *(_QWORD *)(a12 + 8 * a9 + 16) + 2 * (v27 >> 1) * v68;
    }
    else
    {
      v73 = a1 + 90176;
      if (v30)
        v74 = 7;
      else
        v74 = 0;
      if (v67)
        v75 = 7;
      else
        v75 = 0;
      v76 = v69;
      if (v67)
        v77 = -3;
      else
        v77 = 0;
      v78 = a2;
      if (v67)
        v79 = 576;
      else
        v79 = 0;
      v88 = 384;
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, unint64_t))(*(_QWORD *)(v18 + 3280) + 664))(v74 + v22 * a5, v75 + v23 * a6, v70, v76, (int)(v32 - v71), v77 + (int)v68, v73, 384, *(_QWORD *)(a12 + 8 * a9 + 16), v27);
      v32 = v71 | v79;
      a2 = v78;
    }
    v80 = *(_QWORD *)(v18 + 3280);
    if (a2)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v80 + 8 * a14 + 256))(a2, v82, v73 + 2 * v32, v88, v22 * a5, v23 * a6, v83 << v25, v84 << v26);
    else
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v80 + 8 * a14 + 416))(a3, v73 + 2 * v32, v88, v22 * a5, v23 * a6, v83 << v25, v84 << v26, *(unsigned int *)(v18 + 4324));
  }
  else
  {
    v37 = (v24 << v25) + 16 * a7 * v22;
    v38 = (_DWORD *)(v18 + 16 * a13);
    v39 = 8 * v38[782] - 0x20000 + (int)v38[782] * (uint64_t)v37;
    v40 = v39 < 0;
    if (v39 < 0)
      v39 = -v39;
    v41 = (unint64_t)(v39 + 128) >> 8;
    if (v40)
      v42 = -(int)v41;
    else
      v42 = v41;
    v43 = v42 + 32;
    v44 = 8 * v38[784] - 0x20000 + (int)v38[784] * (uint64_t)(int)(((__int16)a11 << v26) + 16 * a8 * v23);
    v45 = v44 < 0;
    if (v44 < 0)
      v44 = -v44;
    v46 = (unint64_t)(v44 + 128) >> 8;
    if (v45)
      v47 = -(int)v46;
    else
      v47 = v46;
    v48 = v47 + 32;
    v49 = v43 >> 10;
    v50 = ((v47 + 32) >> 10);
    v51 = v22 * a5;
    v52 = v38[783];
    v53 = (v43 + (int)v52 * ((int)v51 - 1)) >> 10;
    v54 = v23 * a6;
    v55 = v38[785];
    v56 = (int)(v47 + 32 + v55 * (v54 - 1)) >> 10;
    v57 = (v29 + v21) >> v21;
    v58 = (v28 + v20) >> v20;
    if (v42 >= 3040
      && (v47 >= 3040 ? (v59 = v53 + 5 <= v57) : (v59 = 0), v59 ? (v60 = v56 + 5 <= v58) : (v60 = 0), v60))
    {
      v61 = *(_QWORD *)(a12 + 8 * (a9 != 0) + 40);
      v62 = *(_QWORD *)(a12 + 8 * a9 + 16) + 2 * (v27 >> 1) * v50 + 2 * v49;
    }
    else
    {
      v87 = a2;
      v63 = v38 + 782;
      v85 = v38 + 785;
      v64 = a4;
      v61 = 640;
      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, unint64_t))(*(_QWORD *)(v18 + 3280) + 664))((int)(v53 - v49 + 8), v56 - (int)v50 + 8, v57, v58, (int)(v49 - 3), (int)v50 - 3, a1 + 90176, 640, *(_QWORD *)(a12 + 8 * a9 + 16), v27);
      a4 = v64;
      v62 = a1 + 92102;
      v52 = v63[1];
      a2 = v87;
      v55 = *v85;
    }
    v65 = *(_QWORD *)(v18 + 3280);
    if (a2)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, unint64_t))(v65 + 8 * a14 + 336))(a2, a4, v62, v61, v51, v54, v43 & 0x3FF, v48 & 0x3FF, __PAIR64__(v55, v52));
    else
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t))(v65 + 8 * a14 + 496))(a3, v62, v61, v51, v54, v43 & 0x3FF, v48 & 0x3FF, v52, __PAIR64__(*(_DWORD *)(v18 + 4324), v55));
  }
}

uint64_t sub_218B9C988(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  int v45;
  int v46;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v54;

  v51 = result;
  v10 = *(_QWORD *)(result + 8);
  if (a6)
  {
    v11 = *(_DWORD *)(v10 + 2168);
    v34 = v11 == 1;
    v48 = v11 != 3;
  }
  else
  {
    v34 = 0;
    v48 = 0;
  }
  if (a5[1])
  {
    v12 = 0;
    v43 = *(_QWORD *)(v10 + 3280);
    v13 = *a5;
    v45 = (*(_DWORD *)(a7 + 60) + v34) >> v34;
    v46 = (*(_DWORD *)(a7 + 56) + v48) >> v48;
    v44 = (unint64_t *)(a7 + 8 * (a6 != 0) + 40);
    v41 = (_QWORD *)(a7 + 8 * a6 + 16);
    v42 = a8 + 28;
    v36 = 4 * a4;
    v35 = 8 * a4;
    v39 = result + 90374;
    v40 = result + 90176;
    v54 = *(_QWORD *)(result + 8);
    do
    {
      if (v13)
      {
        v14 = 0;
        v37 = v12;
        v15 = 4 * *(int *)(v51 + 28) + (int)((v12 | 4) << v34);
        v50 = *(int *)(a8 + 4) + v15 * *(int *)(a8 + 16);
        v49 = *(int *)(a8 + 8) + *(int *)(a8 + 24) * v15;
        v16 = a3;
        v38 = a2;
        do
        {
          v17 = 4 * *(int *)(v51 + 24) + (((int)v14 + 4) << v48);
          v18 = (v50 + v17 * *(int *)(a8 + 12)) >> v48;
          v19 = (v49 + *(int *)(a8 + 20) * v17) >> v34;
          v20 = *(__int16 *)(a8 + 28);
          v21 = *(__int16 *)(a8 + 30);
          v22 = v19 >> 16;
          v23 = *(__int16 *)(a8 + 32);
          v24 = *(__int16 *)(a8 + 34);
          v25 = *v44;
          if ((int)(v18 >> 16) >= 7 && (int)((v18 >> 16) + 8) <= v46 && (int)v22 >= 7 && (int)((v19 >> 16) + 8) <= v45)
          {
            v29 = *v41 + 2 * ((v19 >> 16) - 4) * (v25 >> 1) + 2 * ((v18 >> 16) - 4);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, unint64_t))(*(_QWORD *)(v10 + 3280) + 664))(15, 15, v46, v45, (uint64_t)((v18 >> 16 << 32) - 0x700000000) >> 32, (uint64_t)((v22 << 32) - 0x700000000) >> 32, v40, 64, *v41, v25);
            v10 = v54;
            v29 = v39;
            v25 = 64;
          }
          v30 = (-7 * v21 - 4 * v20 + (unsigned __int16)v18) & 0xFFFFFFC0;
          v31 = ((v19 & 0xFFFC) - 4 * (v24 + v23)) & 0xFFFFFFC0;
          v32 = *(unsigned int *)(v10 + 4324);
          if (a3)
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(v43 + 656))(v16, a4, v29, v25, v42, v30, v31, v32);
          else
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(v43 + 648))(a2, a4, v29, v25, v42, v30, v31, v32);
          v10 = v54;
          v14 += 8;
          v13 = *a5;
          a2 += 16;
          v16 += 16;
        }
        while (v14 < (4u >> v48) * v13);
        a2 = v38;
        v12 = v37;
      }
      v33 = a3;
      if (!a2)
        v33 = a3 + 2 * v35;
      a3 = v33;
      if (a2)
        a2 += 2 * v36;
      else
        a2 = 0;
      v12 += 8;
    }
    while (v12 < (4u >> v34) * a5[1]);
  }
  return result;
}

uint64_t sub_218B9CCD8(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5, int a6, int a7, uint64_t a8, int a9)
{
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  signed int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v64;

  v9 = a4;
  v10 = result;
  v11 = a9;
  v12 = *(_DWORD *)(result + 24);
  v13 = *(_DWORD *)(result + 28);
  v14 = *(_QWORD *)(result + 8);
  v64 = result + 8 * (v13 & 0x1E) + 712;
  v60 = result + 8256;
  if (a5)
  {
    v15 = *(_DWORD *)(v14 + 2168);
    v16 = 4u >> (v15 != 3);
    v17 = 4u >> (v15 == 1);
    v19 = (uint64_t *)(result + 16);
    v18 = *(_QWORD *)(result + 16);
    if (v13 <= *(_DWORD *)(v18 + 13872) || v16 * *a4 + v17 * a4[1] < 0x10)
    {
      v58 = v17;
      v59 = v16;
      goto LABEL_29;
    }
  }
  else
  {
    v19 = (uint64_t *)(result + 16);
    v18 = *(_QWORD *)(result + 16);
    v16 = 4;
    if (v13 <= *(_DWORD *)(v18 + 13872))
    {
      v58 = 4;
      v59 = 4;
      goto LABEL_29;
    }
    v17 = 4;
  }
  v58 = v17;
  v59 = v16;
  if ((int)a8 >= 1)
  {
    v53 = v19;
    v54 = a7;
    v20 = 0;
    v21 = 0;
    v55 = a6 + 1;
    while (1)
    {
      v22 = v9[2] >= 4u ? 4 : v9[2];
      v12 = *(_DWORD *)(v10 + 24);
      if (v21 >= v22)
        break;
      v23 = *(_QWORD *)(v64 - 8);
      v24 = v12 + v20;
      v25 = v12 + v20 + 1;
      v26 = v23 + 12 * v25;
      v27 = byte_218BCF600[4 * *(unsigned __int8 *)(v26 + 10)];
      if (v27 >= 0x10)
        v27 = 16;
      if (v27 <= 2)
        v28 = 2;
      else
        v28 = v27;
      v29 = *(char *)(v26 + 8);
      if (v29 >= 1)
      {
        v30 = 12 * v25;
        if (v28 >= *v9)
          v31 = *v9;
        else
          v31 = v28;
        v32 = v9[1];
        if (v32 >= 0x10)
          v32 = 16;
        v33 = v32 >> 1;
        v34 = (v31 * v59);
        v57 = v21;
        v35 = v9;
        v36 = a8;
        v37 = *(_QWORD *)(v10 + 656) + v55 + v20;
        sub_218B9C484(v10, v60, 0, (2 * v34), v31, (3 * (v32 >> 1) + 3) >> 2, v24, *(_DWORD *)(v10 + 28), a5, v52, *(_DWORD *)(v23 + v30), v14 + 296 * (v29 - 1) + 32, v29 - 1, byte_218BBFDA8[4 * *(unsigned __int8 *)(v37 + 384) + *(unsigned __int8 *)(v37 + 352)]);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v14 + 3280) + 640))(a2 + 2 * (v20 * v59), a3, v60, v34, v33 * v58);
        a8 = v36;
        v9 = v35;
        v21 = v57 + 1;
      }
      v20 += v28;
      if (v20 >= (int)a8)
      {
        v12 = *(_DWORD *)(v10 + 24);
        break;
      }
    }
    v18 = *v53;
    a7 = v54;
    v11 = a9;
  }
LABEL_29:
  if (v12 > *(_DWORD *)(v18 + 13864) && v11 >= 1)
  {
    v39 = 0;
    v40 = 0;
    v56 = a7 + 1;
    do
    {
      v41 = v9[3];
      if (v41 >= 4)
        v41 = 4;
      if (v40 >= (int)v41)
        break;
      v42 = *(_QWORD *)(v64 + 8 * (v39 + 1));
      v43 = *(_DWORD *)(v10 + 24);
      v44 = v42 + 12 * (v43 - 1);
      v45 = byte_218BCF600[4 * *(unsigned __int8 *)(v44 + 10) + 1];
      if (v45 >= 0x10)
        v45 = 16;
      if (v45 <= 2)
        v46 = 2;
      else
        v46 = v45;
      v47 = *(char *)(v44 + 8);
      if (v47 >= 1)
      {
        v48 = *v9;
        if (v48 >= 0x10)
          v48 = 16;
        v49 = v48 >> 1;
        if (v46 >= v9[1])
          v50 = v9[1];
        else
          v50 = v46;
        v51 = (v49 * v59);
        sub_218B9C484(v10, v60, 0, 2 * v51, v49, v50, v43, *(_DWORD *)(v10 + 28) + v39, a5, v52, *(_DWORD *)(v42 + 12 * (v43 - 1)), v14 + 296 * (v47 - 1) + 32, v47 - 1, byte_218BBFDA8[4 * *(unsigned __int8 *)(v10 + v56 + v39 + 416) + *(unsigned __int8 *)(v10 + 384 + v56 + v39)]);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v14 + 3280) + 632))(a2 + 2 * (a3 >> 1) * (v39 * v58), a3, v60, v51, (v50 * v58));
        ++v40;
      }
      v39 += v46;
    }
    while (v39 < v11);
  }
  return result;
}

uint64_t sub_218B9D108(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  signed int v5;
  char v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _WORD *v24;
  int v25;
  _BOOL4 v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  _WORD *v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  char v44;
  int v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  _WORD *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  _WORD *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int16 *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int16 *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  signed int v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int16 *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  signed int v115;
  uint64_t v116;
  int v117;
  char v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  int v122;
  unsigned __int16 *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;

  v143 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(result + 3256) + 63080) & 1) == 0)
    return result;
  v2 = *(_QWORD *)(result + 24);
  if (!*(_BYTE *)(v2 + 830) && !*(_BYTE *)(v2 + 831))
    return result;
  v128 = 4 * a2 * *(_DWORD *)(result + 3472);
  v3 = *(_DWORD *)(result + 2168);
  v4 = *(_BYTE *)(*(_QWORD *)(result + 8) + 392) == 0;
  v5 = 0x20u >> v4;
  if (*(_BYTE *)(*(_QWORD *)(result + 8) + 392))
    v6 = 5;
  else
    v6 = 4;
  v113 = v3 != 3;
  v117 = v5 * a2;
  if (*(_DWORD *)(result + 3444) - v5 * (int)a2 >= v5)
    v7 = 0x20u >> v4;
  else
    v7 = *(_DWORD *)(result + 3444) - v5 * a2;
  v103 = *(_QWORD *)(result + 5304);
  v105 = 0x20u >> v4;
  v100 = *(_QWORD *)(result + 2144);
  v116 = *(_QWORD *)(result + 5312);
  v106 = *(_QWORD *)(result + 2152);
  v107 = *(_QWORD *)(result + 5320);
  v8 = *(unsigned int *)(result + 3456);
  v109 = ((int)a2 >> v4) * (int)v8;
  v111 = *(_QWORD *)(result + 4440);
  v125 = *(unsigned __int8 *)(*(_QWORD *)(result + 5288) + (int)a2);
  v9 = v111 + 1348 * v109;
  v122 = a2;
  v120 = 16 * (v4 & a2);
  v115 = 0x10u >> (v3 == 1);
  v137 = v7;
  v134 = v4 & a2;
  v131 = v7 + v120;
  if (v3 == 1)
    v10 = v7 + v120 + 1;
  else
    v10 = v7 + v120;
  v118 = v3 == 1;
  v114 = v10 >> (v3 == 1);
  v136 = result;
  v11 = *(_DWORD *)(result + 3448);
  v12 = *(unsigned __int16 *)(v2 + 452);
  if ((int)(v12 << v6) < v11)
  {
    result = a2;
    v13 = *(_QWORD *)(v136 + 5168) + (int)((_DWORD)a2 << (v6 - v118));
    v14 = *(_QWORD *)(v136 + 5160) + (int)((_DWORD)a2 << v6);
    v15 = (*(int *)(v136 + 3452) + 31) & 0xFFFFFFFFFFFFFFE0;
    v16 = 1;
    v17 = v120 >> v118;
    if (v3 == 1)
      v18 = 3;
    else
      v18 = 4;
    do
    {
      v19 = 16 * (v12 & v4);
      v20 = v12 >> v4;
      if (v120 < v131)
      {
        v21 = 0;
        v22 = 1 << v120;
        do
        {
          v23 = v22 >> (16 * ((v22 & 0xFFFF0000) != 0));
          v24 = (_WORD *)(v9 + 1348 * v20 + 12 * v19 + 2 * ((v22 & 0xFFFF0000) != 0));
          v25 = (unsigned __int16)v24[4];
          v26 = (v23 & v25) != 0;
          v27 = (unsigned __int16)v24[2];
          v24[4] = v25 & ~(_WORD)v23;
          v24[2] = v27 & ~(_WORD)v23;
          *v24 &= ~(_WORD)v23;
          v28 = *(unsigned __int8 *)(v14 + v21);
          v29 = ((v23 & v27) != 0) | (2 * v26);
          if (v29 < v28)
            v28 = v29;
          result = 4 * v28;
          *(_WORD *)((char *)v24 + result) |= v23;
          v22 *= 2;
          ++v21;
        }
        while (v131 - v120 != v21);
      }
      if (v3 && v17 < v114)
      {
        v30 = 0;
        v31 = v9 + 1348 * v20 + 8 * (v19 >> v113) + 768;
        v32 = 1 << v17;
        do
        {
          v33 = v32 >> ((v32 >> v115 != 0) << v18);
          v34 = (_WORD *)(v31 + 2 * (v32 >> v115 != 0));
          v35 = (unsigned __int16)v34[2];
          v36 = (v33 & v35) == 0;
          v34[2] = v35 & ~(_WORD)v33;
          *v34 &= ~(_WORD)v33;
          v37 = *(unsigned __int8 *)(v13 + v30);
          v38 = !v36;
          if (v38 < v37)
            v37 = v38;
          result = 4 * v37;
          *(_WORD *)((char *)v34 + result) |= v33;
          v32 *= 2;
          ++v30;
        }
        while (v114 - v17 != v30);
      }
      v14 += v15;
      v13 += (int)v15 >> v118;
      ++v16;
      v12 = *(unsigned __int16 *)(v2 + 2 * v16 + 450);
    }
    while ((int)(v12 << v6) < v11);
  }
  v39 = v128;
  if (!v125)
    goto LABEL_56;
  if ((int)v8 > 0)
  {
    v40 = 0;
    v41 = 0x10u >> v113;
    v42 = *(_QWORD *)(v136 + 4032) + 624 * (int)v8 * (v125 - 1);
    result = v9 + 12 * v120 + 384;
    v43 = *(_DWORD *)(v136 + 3440);
    if (v3 == 3)
      v44 = 4;
    else
      v44 = 3;
    v45 = *(_DWORD *)(v136 + 3440);
    do
    {
      v46 = v45;
      v47 = __OFSUB__(v45, 32);
      v45 -= 32;
      if (v45 < 0 != v47)
        v48 = v46;
      else
        v48 = 32;
      if (v43 - 32 * (int)v40 >= 32)
        v49 = 32;
      else
        v49 = v43 - 32 * v40;
      if (v49)
      {
        v50 = 0;
        v51 = 1;
        do
        {
          v52 = v51 >> (16 * ((v51 & 0xFFFF0000) != 0));
          v53 = (_WORD *)(result + 1348 * v40 + 2 * ((v51 & 0xFFFF0000) != 0));
          v54 = (unsigned __int16)v53[4];
          v55 = (unsigned __int16)v53[2];
          v56 = ((v52 & v55) != 0) | (2 * ((v52 & v54) != 0));
          v53[4] = v54 & ~(_WORD)v52;
          v53[2] = v55 & ~(_WORD)v52;
          *v53 &= ~(_WORD)v52;
          v57 = *(unsigned __int8 *)(v42 + v50 + 480);
          if (v56 < v57)
            v57 = v56;
          v53[2 * v57] |= v52;
          v51 *= 2;
          ++v50;
        }
        while (v48 != v50);
      }
      if (v3)
      {
        v58 = (v49 + v113) >> v113;
        if ((_DWORD)v58)
        {
          v59 = 0;
          v60 = 1;
          do
          {
            v61 = v60 >> ((v60 >> v41 != 0) << v44);
            v62 = (_WORD *)(v9 + 1348 * v40 + 8 * (v120 >> v118) + 1024 + 2 * (v60 >> v41 != 0));
            v63 = (unsigned __int16)v62[2];
            v64 = (v61 & v63) != 0;
            v62[2] = v63 & ~(_WORD)v61;
            *v62 &= ~(_WORD)v61;
            v65 = *(unsigned __int8 *)(v42 + v59 + 512);
            if (v64 < v65)
              v65 = v64;
            v62[2 * v65] |= v61;
            v60 *= 2;
            ++v59;
          }
          while (v58 != v59);
        }
      }
      ++v40;
      v42 += 624;
    }
    while (v40 != v8);
LABEL_56:
    if ((int)v8 >= 1)
    {
      v66 = 0;
      v67 = 0;
      v68 = 0;
      v69 = v100 >> 1;
      v101 = v128;
      v70 = v103 + 2 * v69 * v128;
      v71 = v136;
      v72 = *(_QWORD *)(v71 + 4432) + 4 * v105 * (uint64_t)v122 * *(_QWORD *)(v71 + 3432);
      v73 = (unsigned __int16 *)(v111 + 1348 * (int)v109 + 6);
      while (1)
      {
        v74 = *(_DWORD *)(v71 + 3440);
        if (v74 - 32 * (int)v67 < 1)
          goto LABEL_71;
        v123 = v73;
        v126 = v67;
        v75 = 0;
        v76 = 0;
        v77 = *(_QWORD *)(v71 + 3432);
        v78 = *(_QWORD *)(v71 + 2144);
        v79 = *(_QWORD *)(v71 + 3280);
        v129 = v66;
        if (v74 + v66 >= 32)
          v80 = 32;
        else
          v80 = (v74 + v66);
        do
        {
          if (!(v68 | v76))
            goto LABEL_69;
          if (v134)
          {
            v139 = *(v73 - 2);
            v140 = *v73;
            v81 = v73[2];
LABEL_67:
            v141 = v81;
            goto LABEL_68;
          }
          v82 = *(v73 - 3);
          v139 = v82;
          v83 = *(v73 - 1);
          v140 = v83;
          v84 = v73[1];
          v141 = v84;
          if ((int)v131 >= 17)
          {
            v139 = v82 | (*(v73 - 2) << 16);
            v140 = v83 | (*v73 << 16);
            v81 = v84 | (v73[2] << 16);
            goto LABEL_67;
          }
LABEL_68:
          v142 = 0;
          result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v79 + 3264))(v70 + 2 * (v75 & 0xFFFFFFFC), v78, &v139, v72 + v75, v77, v136 + 4496, v137, *(unsigned int *)(v136 + 4324));
LABEL_69:
          ++v76;
          v75 += 4;
          v73 += 6;
        }
        while (v80 != v76);
        v71 = v136;
        LODWORD(v8) = *(_DWORD *)(v136 + 3456);
        v66 = v129;
        v73 = v123;
        v67 = v126;
LABEL_71:
        ++v67;
        v70 += 256;
        v72 += 128;
        v66 -= 32;
        v73 += 674;
        v68 = 1;
        if (v67 >= (int)v8)
        {
          v2 = *(_QWORD *)(v71 + 24);
          v39 = v101;
          goto LABEL_74;
        }
      }
    }
  }
  v71 = v136;
LABEL_74:
  if (*(_BYTE *)(v2 + 832))
  {
    if ((int)v8 < 1)
      return result;
    goto LABEL_81;
  }
  if (*(_BYTE *)(v2 + 833))
    v85 = (int)v8 <= 0;
  else
    v85 = 1;
  if (!v85)
  {
LABEL_81:
    v86 = 0;
    v87 = 0;
    v135 = 0;
    v88 = ((v106 >> 1) * v39) >> v118;
    v102 = v107 + 2 * v88;
    v104 = v116 + 2 * v88;
    v132 = *(_QWORD *)(v71 + 4432) + 4 * *(_QWORD *)(v71 + 3432) * (v117 >> v118);
    v119 = v120 >> v118;
    v89 = (unsigned __int16 *)(v111 + 1348 * (int)v109 + 774);
    v90 = v71 + 4496;
    v91 = v114 - v119;
    while (1)
    {
      v92 = *(_DWORD *)(v71 + 3440) - 32 * v86;
      if (v92 >= 32)
        v92 = 32;
      v93 = (v92 + v113) >> v113;
      if (v93 >= 1)
        break;
LABEL_95:
      ++v86;
      v87 += 0x80u >> v113;
      v132 += 4 * (0x20u >> v113);
      v89 += 674;
      v135 = 1;
      if (v86 >= (int)v8)
        return result;
    }
    v112 = v86;
    v94 = 0;
    v95 = 0;
    v127 = *(_QWORD *)(v71 + 2152);
    v130 = *(_QWORD *)(v71 + 3432);
    v133 = 4 * v93;
    v108 = v89;
    v138 = *(_QWORD *)(v71 + 3280);
    v110 = v87;
    v121 = v102 + 2 * v87;
    v124 = v104 + 2 * v87;
    while (!(v135 | v95))
    {
LABEL_93:
      ++v95;
      v94 += 4;
      v89 += 4;
      if (v133 == v94)
      {
        v71 = v136;
        LODWORD(v8) = *(_DWORD *)(v136 + 3456);
        v87 = v110;
        v86 = v112;
        v89 = v108;
        goto LABEL_95;
      }
    }
    if (v119)
    {
      v139 = *(v89 - 2);
      v96 = *v89;
    }
    else
    {
      v97 = *(v89 - 3);
      v139 = v97;
      v98 = *(v89 - 1);
      v140 = v98;
      if (v115 >= (int)v114)
      {
LABEL_92:
        v141 = 0;
        v99 = (2 * v94) & 0x1FFFFFFF8;
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v138 + 3280))(v124 + v99, v127, &v139, v132 + v94 + 2, v130, v90, v91, *(unsigned int *)(v136 + 4324));
        result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v138 + 3280))(v121 + v99, v127, &v139, v132 + v94 + 3, v130, v90, v91, *(unsigned int *)(v136 + 4324));
        goto LABEL_93;
      }
      v139 = (*(v89 - 2) << v115) | v97;
      v96 = (*v89 << v115) | v98;
    }
    v140 = v96;
    goto LABEL_92;
  }
  return result;
}

_DWORD *sub_218B9DA30(_DWORD *result, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  signed int v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  signed int v26;
  BOOL v27;
  uint64_t v28;
  signed int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  char v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  char v61;
  int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  unsigned int v71;
  char v72;
  BOOL v73;
  char v74;
  int v75;
  int v76;
  char v77;
  char v78;
  char v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unint64_t v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v106;
  int v107;
  int v108;
  unsigned int v109;
  int v110;
  uint64_t v111;
  unsigned __int16 *v112;
  signed int v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  int v127;
  uint64_t v128;
  unsigned int v129;
  signed int v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  _BOOL4 v135;
  uint64_t v136;
  unsigned int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;

  v2 = (uint64_t)result;
  v142 = *MEMORY[0x24BDAC8D0];
  v101 = 4 * a2;
  v3 = 4 * a2 * result[868];
  v4 = result[542];
  v104 = *((_QWORD *)result + 663) + 2 * (*((_QWORD *)result + 268) >> 1) * v3;
  v5 = ((*((uint64_t *)result + 269) >> 1) * v3) >> (v4 == 1);
  v102 = *((_QWORD *)result + 664) + 2 * v5;
  v103 = *((_QWORD *)result + 665) + 2 * v5;
  v6 = *((_QWORD *)result + 1);
  v7 = *(_BYTE *)(v6 + 392) == 0;
  v133 = (uint64_t)result;
  if ((*(_BYTE *)(*((_QWORD *)result + 407) + 63080) & 1) == 0)
    goto LABEL_38;
  v111 = *((_QWORD *)result + 555);
  v8 = result[864];
  v9 = (_BYTE *)*((_QWORD *)result + 3);
  if (!v9[830] && !v9[831])
    goto LABEL_38;
  v10 = (a2 >> v7) * v8;
  v135 = a2 > 0;
  v11 = 0x20u >> v7;
  v110 = v4 != 3;
  v108 = v11 * a2;
  v12 = result[861] - v11 * a2;
  v117 = v12;
  if (v12 >= (int)v11)
    v12 = 0x20u >> v7;
  v42 = v4 == 1;
  v13 = v4 == 1;
  v14 = v7 & a2;
  v115 = 16 * (v7 & a2);
  v113 = v12;
  v15 = v12 + v115;
  if (v42)
    ++v15;
  if (v8 >= 1)
  {
    v100 = v15;
    v106 = v13;
    v16 = 0;
    v107 = v10;
    v126 = result + 1124;
    v17 = 1348 * v10 + 192 * v14 + v111 + 394;
    v18 = *((_QWORD *)result + 554) + 4 * *((_QWORD *)result + 429) * a2 * v11 + 1;
    v19 = v104;
    do
    {
      v20 = *(_DWORD *)(v2 + 3440) - 32 * v16;
      if (v20 >= 32)
        v20 = 32;
      v129 = v20;
      if (v117 >= 1)
      {
        v122 = v17;
        v124 = v16;
        v21 = *(_QWORD *)(v2 + 3432);
        v22 = *(_QWORD *)(v2 + 2144);
        v118 = v19;
        v120 = v18;
        v23 = *(_QWORD *)(v2 + 3280);
        v24 = v115;
        v25 = v19;
        v26 = v113;
        do
        {
          if (v24 | v135)
          {
            v138 = *(_DWORD *)(v17 - 10);
            v139 = *(_DWORD *)(v17 - 6);
            v140 = *(_DWORD *)(v17 - 2);
            v141 = 0;
            result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, _DWORD *, _QWORD, _QWORD))(v23 + 3272))(v25, v22, &v138, v18, v21, v126, v129, *(unsigned int *)(v133 + 4324));
          }
          v17 += 12;
          v25 += 4 * v22;
          ++v24;
          v18 += 4 * v21;
          --v26;
        }
        while (v26);
        v2 = v133;
        v8 = *(_DWORD *)(v133 + 3456);
        v17 = v122;
        v16 = v124;
        v19 = v118;
        v18 = v120;
      }
      ++v16;
      v19 += 256;
      v17 += 1348;
      v18 += 128;
    }
    while (v16 < v8);
    v9 = *(_BYTE **)(v2 + 24);
    v10 = v107;
    v13 = v106;
    v15 = v100;
  }
  if (!v9[832])
  {
    if (v9[833])
      v27 = v8 <= 0;
    else
      v27 = 1;
    if (v27)
      goto LABEL_37;
LABEL_27:
    v28 = 0;
    v130 = v15 >> v13;
    v29 = v115 >> v13;
    v119 = 0x10u >> v110;
    v30 = *(_QWORD *)(v2 + 4432) + 4 * *(_QWORD *)(v2 + 3432) * (v108 >> v13) + 2;
    v31 = 4 * (0x20u >> v110);
    v32 = (unsigned __int16 *)(1348 * v10 + 8 * (v115 >> v13) + v111 + 1030);
    v33 = 2 * (0x80u >> v110);
    v121 = v103;
    v123 = v102;
    v109 = v115 >> v13;
    v34 = v2 + 4496;
    do
    {
      v35 = *(_DWORD *)(v2 + 3440) - 32 * v28;
      if (v35 >= 32)
        v35 = 32;
      if (v29 < v130)
      {
        v116 = v28;
        v36 = 0;
        v37 = *(_QWORD *)(v2 + 3432);
        v38 = *(_QWORD *)(v2 + 2152);
        v39 = ((v35 + v110) >> v110);
        v40 = *(_QWORD *)(v2 + 3280);
        v112 = v32;
        v114 = v30;
        do
        {
          if (v29 | v135)
          {
            v138 = (*(v32 - 2) << v119) | *(v32 - 3);
            v139 = (*v32 << v119) | *(v32 - 1);
            v140 = 0;
            (*(void (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v40 + 3288))(v123 + v36, v38, &v138, v30, v37, v34, v39, *(unsigned int *)(v133 + 4324));
            result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v40 + 3288))(v121 + v36, v38, &v138, v30 + 1, v37, v34, v39, *(unsigned int *)(v133 + 4324));
          }
          ++v29;
          v30 += 4 * v37;
          v32 += 4;
          v36 += 4 * v38;
        }
        while (v130 != v29);
        v2 = v133;
        v8 = *(_DWORD *)(v133 + 3456);
        v30 = v114;
        v28 = v116;
        v29 = v109;
        v33 = 2 * (0x80u >> v110);
        v31 = 4 * (0x20u >> v110);
        v32 = v112;
      }
      ++v28;
      v30 += v31;
      v32 += 674;
      v121 += v33;
      v123 += v33;
    }
    while (v28 < v8);
    goto LABEL_37;
  }
  if (v8 >= 1)
    goto LABEL_27;
LABEL_37:
  v6 = *(_QWORD *)(v2 + 8);
LABEL_38:
  v41 = *(_DWORD *)(v2 + 5352);
  if (*(_BYTE *)(v6 + 414))
    v42 = 0;
  else
    v42 = v41 == 0;
  v43 = a2;
  if (!v42)
  {
    v44 = *(_DWORD *)(*(_QWORD *)(v2 + 3256) + 24);
    v45 = *(_QWORD *)(v2 + 24);
    v46 = *(_DWORD *)(v45 + 236);
    v47 = *(_DWORD *)(v45 + 240);
    v48 = 8 * (a2 != 0);
    if (v44 <= 1)
      v49 = 0;
    else
      v49 = a2;
    v50 = *(_BYTE *)(v6 + 392);
    v51 = (4 << v50) * v49;
    v52 = *(_QWORD *)(v2 + 5264);
    v53 = v51;
    v54 = *(_QWORD *)(v2 + 2416);
    v55 = *(_QWORD *)(v2 + 5272);
    v56 = *(_QWORD *)(v2 + 2424);
    v57 = *(_QWORD *)(v2 + 5280);
    if (*(_BYTE *)(v6 + 414) || (v41 & 1) != 0)
    {
      v131 = *(_QWORD *)(v2 + 2424);
      v136 = *(_QWORD *)(v2 + 5280);
      v58 = v2;
      v59 = *(_DWORD *)(v2 + 2164);
      v60 = 4 * *(_DWORD *)(v58 + 3448);
      v61 = v50 + 6;
      if ((a2 + 1) << (v50 + 6) >= v59 - 1)
        v62 = v59 - 1;
      else
        v62 = (a2 + 1) << (v50 + 6);
      v63 = (a2 << v61) - v48;
      if ((v41 & 1) != 0 || v46 == v47)
      {
        v127 = v47;
        v64 = v55;
        v65 = v44;
        result = sub_218B7D774((_DWORD *)v133, (char *)(v52 + 2 * (v54 >> 1) * v53), v54, v104 - 2 * (*(_QWORD *)(v133 + 2144) >> 1) * v48, *(_QWORD *)(v133 + 2144), 0, v50, (a2 << v61) - (int)v48, v62, v60, v59, 0, 1);
        v44 = v65;
        v55 = v64;
        v43 = a2;
        v6 = *(_QWORD *)(v133 + 8);
        v47 = v127;
      }
      if (v44 < 2 || v46 == v47)
      {
        v2 = v133;
      }
      else
      {
        v95 = v59;
        v2 = v133;
        v66 = v63;
        v67 = v44;
        result = sub_218B7D774((_DWORD *)v133, (char *)(*(_QWORD *)(v133 + 5240) + 2 * (*(uint64_t *)(v133 + 2144) >> 1) * v101), *(_QWORD *)(v133 + 2144), v104 - 2 * (*(uint64_t *)(v133 + 2144) >> 1) * v48, *(_QWORD *)(v133 + 2144), 0, *(_BYTE *)(v6 + 392), v66, v62, v60, v95, 0, 0);
        v44 = v67;
        v43 = a2;
        v6 = *(_QWORD *)(v133 + 8);
      }
      v57 = v136;
      v56 = v131;
    }
    if ((*(_BYTE *)(v6 + 414) || (v41 & 6) != 0) && *(_DWORD *)(v2 + 2168))
    {
      v68 = v55;
      v69 = (v56 >> 1) * v53;
      v70 = *(_DWORD *)(v2 + 2440);
      v71 = v70 != 3;
      if (v70 == 3)
        v72 = 2;
      else
        v72 = 1;
      v73 = v70 == 1;
      v74 = v70 == 1;
      v75 = *(_DWORD *)(v2 + 2164);
      if (v73)
        ++v75;
      v76 = v75 >> v74;
      v137 = *(_DWORD *)(v2 + 3448) << v72;
      if (v73)
        v77 = 5;
      else
        v77 = 6;
      v78 = *(_BYTE *)(v6 + 392);
      v79 = v77 + v78;
      v80 = (v43 + 1) << v79;
      if (v80 >= v76 - 1)
        v80 = v76 - 1;
      v132 = v80;
      v81 = v48 >> v74;
      v134 = (v43 << v79) - v81;
      v82 = *(_QWORD *)(v2 + 2152);
      v128 = (v82 >> 1) * v101;
      if (*(_BYTE *)(v6 + 414) || (v41 & 2) != 0)
      {
        v125 = v81;
        if ((v41 & 2) != 0 || v46 == v47)
        {
          v83 = v102 - 2 * (v82 >> 1) * v81;
          v98 = v71;
          v96 = v76;
          v84 = v44;
          v85 = v76;
          v86 = v71;
          v87 = v69;
          result = sub_218B7D774((_DWORD *)v2, (char *)(v68 + 2 * v69), *(_QWORD *)(v2 + 2424), v83, v82, v74, v78, v134, v80, v137, v96, v98, 1);
          v69 = v87;
          v71 = v86;
          v76 = v85;
          v81 = v125;
          v44 = v84;
          v6 = *(_QWORD *)(v2 + 8);
        }
        if (v44 >= 2 && v46 != v47)
        {
          v88 = *(_QWORD *)(v2 + 2152);
          v89 = v102 - 2 * (v88 >> 1) * v81;
          v99 = v71;
          v97 = v76;
          v90 = v44;
          v91 = v76;
          v92 = v71;
          v93 = v69;
          result = sub_218B7D774((_DWORD *)v2, (char *)(*(_QWORD *)(v2 + 5248) + 2 * v128), v88, v89, v88, v74, *(_BYTE *)(v6 + 392), v134, v132, v137, v97, v99, 0);
          v69 = v93;
          v71 = v92;
          v76 = v91;
          v81 = v125;
          v44 = v90;
          v6 = *(_QWORD *)(v2 + 8);
        }
      }
      if (*(_BYTE *)(v6 + 414) || (v41 & 4) != 0)
      {
        if ((v41 & 4) != 0 || v46 == v47)
        {
          v94 = v44;
          result = sub_218B7D774((_DWORD *)v2, (char *)(v57 + 2 * v69), *(_QWORD *)(v2 + 2424), v103 - 2 * (*(_QWORD *)(v2 + 2152) >> 1) * v81, *(_QWORD *)(v2 + 2152), v74, *(_BYTE *)(v6 + 392), v134, v132, v137, v76, v71, 1);
          v44 = v94;
        }
        if (v44 >= 2 && v46 != v47)
          return sub_218B7D774((_DWORD *)v2, (char *)(*(_QWORD *)(v2 + 5256) + 2 * v128), *(_QWORD *)(v2 + 2152), v103 - 2 * (*(_QWORD *)(v2 + 2152) >> 1) * v81, *(_QWORD *)(v2 + 2152), v74, *(_BYTE *)(*(_QWORD *)(v2 + 8) + 392), v134, v132, v137, v76, v71, 0);
      }
    }
  }
  return result;
}

uint64_t sub_218B9E32C(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23[3];
  uint64_t v24[4];

  v24[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(result + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 3256) + 63080) & 2) != 0)
  {
    v4 = result;
    v5 = *(_DWORD *)(v2 + 3472);
    v6 = v5 * a2;
    v7 = *(_DWORD *)(v2 + 2168) == 1;
    v8 = 4 * v5 * a2;
    v9 = *(uint64_t *)(v2 + 2144) >> 1;
    v10 = *(_QWORD *)(v2 + 5304) + 2 * v9 * v8;
    v11 = *(_QWORD *)(v2 + 2152);
    v12 = ((v11 >> 1) * v8) >> v7;
    v13 = *(_QWORD *)(v2 + 5312) + 2 * v12;
    v24[0] = v10;
    v24[1] = v13;
    v14 = *(_QWORD *)(v2 + 5320) + 2 * v12;
    v24[2] = v14;
    v15 = *(_QWORD *)(v2 + 4440);
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 8) + 392) == 0;
    v17 = *(_DWORD *)(v2 + 3456);
    v18 = v15 + 1348 * (a2 >> v16) * v17;
    if (a2)
    {
      v19 = (4 * v11) >> v7;
      v23[0] = v10 - 16 * v9;
      v23[1] = v13 - 2 * v19;
      v23[2] = v14 - 2 * v19;
      sub_218BA2F50(result, v23, v15 + 1348 * ((a2 - 1) >> v16) * v17, v6 - 2, v6, 1, a2);
    }
    if (a2 + 1 >= *(_DWORD *)(v2 + 3464))
      v20 = 0;
    else
      v20 = -2;
    v21 = v6 + v5 + v20;
    if (v21 >= *(_DWORD *)(v2 + 3452))
      v22 = *(_DWORD *)(v2 + 3452);
    else
      v22 = v21;
    return sub_218BA2F50(v4, v24, v18, v6, v22, 0, a2);
  }
  return result;
}

uint64_t sub_218B9E4B4(uint64_t a1, int a2)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  char v12;
  uint64_t result;
  _QWORD v15[7];

  v3 = 0;
  v15[6] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 2168);
  v5 = 4 * a2 * *(_DWORD *)(a1 + 3472);
  v6 = ((*(uint64_t *)(a1 + 2152) >> 1) * v5) >> (v4 == 1);
  v7 = *(_QWORD *)(a1 + 5312) + 2 * v6;
  v15[3] = *(_QWORD *)(a1 + 5304) + 2 * (*(_QWORD *)(a1 + 2144) >> 1) * v5;
  v15[4] = v7;
  v15[5] = *(_QWORD *)(a1 + 5320) + 2 * v6;
  v8 = *(_QWORD *)(a1 + 5328) + 2 * (*(_QWORD *)(a1 + 2416) >> 1) * v5;
  v9 = ((*(uint64_t *)(a1 + 2424) >> 1) * v5) >> (v4 == 1);
  v10 = *(_QWORD *)(a1 + 5336) + 2 * v9;
  v15[0] = v8;
  v15[1] = v10;
  v15[2] = *(_QWORD *)(a1 + 5344) + 2 * v9;
  v11 = 8 * (a2 != 0);
  do
  {
    if (v3)
      v12 = *(_DWORD *)(a1 + 2168) == 1;
    else
      v12 = 0;
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 3280) + 672))(v15[v3] - 2
                                                                                          * (*(_QWORD *)(a1 + 8 * (v3 != 0) + 2416) >> 1)
                                                                                          * (v11 >> v12));
    if (!v4)
      break;
  }
  while (v3++ < 2);
  return result;
}

uint64_t sub_218B9E6C4(uint64_t result, int a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  int v19;
  char v20;
  int v21;
  int v22;
  int v23;
  char v24;
  char v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  if ((*(_BYTE *)(*(_QWORD *)(result + 3256) + 63080) & 4) != 0)
  {
    v3 = result;
    v4 = *(_DWORD *)(result + 2168) == 1;
    v5 = 4 * a2 * *(_DWORD *)(result + 3472);
    v6 = *(_QWORD *)(result + 5336);
    v7 = *(_QWORD *)(result + 2424);
    v31 = *(_QWORD *)(result + 5344);
    v8 = 8 * (a2 != 0);
    v9 = *(_DWORD *)(result + 5352);
    v10 = a2 + 1;
    v11 = *(_DWORD *)(result + 3464);
    if ((v9 & 1) != 0)
    {
      v12 = *(_DWORD *)(result + 2436);
      if (v10 >= v11)
        v13 = 0;
      else
        v13 = -8;
      v14 = (v10 << (*(_BYTE *)(*(_QWORD *)(result + 8) + 392) + 6)) + v13;
      if (v14 >= v12)
        v15 = v12;
      else
        v15 = v14;
      result = sub_218BA3AF0(result, *(_QWORD *)(result + 5328)+ 2 * (*(uint64_t *)(result + 2416) >> 1) * v5- 2 * (*(uint64_t *)(result + 2416) >> 1) * v8, (a2 << (*(_BYTE *)(*(_QWORD *)(result + 8) + 392) + 6)) - (int)v8, *(_DWORD *)(result + 2432), v12, v15, 0);
    }
    if ((v9 & 6) != 0)
    {
      v16 = ((v7 >> 1) * v5) >> v4;
      v17 = *(_DWORD *)(v3 + 2440);
      v18 = v17 != 3;
      v19 = *(_DWORD *)(v3 + 2432);
      if (v17 != 3)
        ++v19;
      v20 = v17 == 1;
      v21 = *(_DWORD *)(v3 + 2436);
      if (v20)
        ++v21;
      v22 = v21 >> v20;
      v23 = v19 >> v18;
      if (v20)
        v24 = 5;
      else
        v24 = 6;
      v25 = v24 + *(_BYTE *)(*(_QWORD *)(v3 + 8) + 392);
      v26 = 8u >> v20;
      if (v10 >= v11)
        v26 = 0;
      v27 = (v10 << v25) - v26;
      if (v27 >= v22)
        v28 = v22;
      else
        v28 = v27;
      v29 = v8 >> v20;
      v30 = (a2 << v25) - v29;
      if ((v9 & 2) != 0)
        result = sub_218BA3AF0(v3, v6 + 2 * v16 - 2 * (*(_QWORD *)(v3 + 2424) >> 1) * v29, v30, v23, v22, v28, 1);
      if ((v9 & 4) != 0)
        return sub_218BA3AF0(v3, v31 + 2 * v16 - 2 * (*(_QWORD *)(v3 + 2424) >> 1) * v29, v30, v23, v22, v28, 2);
    }
  }
  return result;
}

uint64_t sub_218B9E8CC(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;

  v2 = a2;
  sub_218B9D108(a1, a2);
  result = (uint64_t)sub_218B9DA30((_DWORD *)a1, v2);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 414))
    result = sub_218B9E32C(*(_QWORD *)(*(_QWORD *)(a1 + 3256) + 16), v2);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 236) != *(_DWORD *)(*(_QWORD *)(a1 + 24) + 240))
    result = sub_218B9E4B4(a1, v2);
  if (*(_DWORD *)(a1 + 5352))
    return sub_218B9E6C4(a1, v2);
  return result;
}

void *sub_218B9E950(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  void *result;
  int v8;
  uint64_t v9;
  char v10;
  BOOL v11;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 28);
  v5 = (*(_DWORD *)(v2 + 3456) * (v4 >> *(_DWORD *)(v2 + 3468))) << 7;
  v6 = *(int *)(v3 + 13864);
  result = memcpy((void *)(*(_QWORD *)(v2 + 3408) + 2 * (v5 + 4 * (int)v6)), (const void *)(*(_QWORD *)(v2 + 2120)+ 8 * v6+ 2 * (*(_QWORD *)(v2 + 2144) >> 1) * (4 * (*(_DWORD *)(v2 + 3472) + v4) - 1)), 8 * (*(_DWORD *)(v3 + 13868) - (int)v6));
  v8 = *(_DWORD *)(v2 + 2168);
  if (v8)
  {
    v9 = 0;
    v10 = v8 == 1;
    v11 = v8 == 3;
    v12 = *(_DWORD *)(v2 + 3472) + *(_DWORD *)(a1 + 28);
    v13 = !v11;
    v14 = (4 * (int)v6) >> v13;
    v15 = (*(uint64_t *)(v2 + 2152) >> 1) * (((4 * v12) >> v10) - 1) + v14;
    v16 = v14 + v5;
    do
    {
      result = memcpy((void *)(*(_QWORD *)(v2 + v9 + 3416) + 2 * v16), (const void *)(*(_QWORD *)(v2 + v9 + 2128) + 2 * v15), 2 * ((4 * (*(_DWORD *)(v3 + 13868) - (int)v6)) >> v13));
      v9 += 8;
    }
    while (v9 != 16);
  }
  return result;
}

__n128 sub_218B9EA84(__n128 *a1, int a2, int a3, int a4, int a5)
{
  __n128 *v5;
  uint64_t v6;
  __n128 *v7;
  __n128 result;
  uint64_t v9;
  __n128 *v10;

  if (a1[16160].n128_u32[1])
    v5 = (__n128 *)(*(_QWORD *)(a1->n128_u64[1] + 4376)
                  + 48
                  * ((*(uint64_t *)(a1->n128_u64[1] + 3432) >> 1) * ((a1[1].n128_u32[2] & 1) + (a1[1].n128_i32[3] >> 1))
                   + (a1[1].n128_u32[3] & 1)
                   + (a1[1].n128_i32[2] >> 1)));
  else
    v5 = a1 + 1641;
  if (a4 >= 1)
  {
    v6 = a4;
    v7 = &a1[3 * a2 + 320];
    do
    {
      result = *v5;
      *v7 = *v5;
      v7 += 3;
      --v6;
    }
    while (v6);
  }
  if (a5 >= 1)
  {
    v9 = a5;
    v10 = &a1[3 * a3 + 416];
    do
    {
      result = *v5;
      *v10 = *v5;
      v10 += 3;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_218B9EB34(uint64_t result, int a2, int a3, int a4, int a5)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  _OWORD *v13;

  if (*(_DWORD *)(result + 258564))
    v5 = *(_QWORD *)(*(_QWORD *)(result + 8) + 4376)
       + 48
       * ((*(uint64_t *)(*(_QWORD *)(result + 8) + 3432) >> 1)
        * ((*(_DWORD *)(result + 24) & 1) + (*(int *)(result + 28) >> 1))
        + (*(_DWORD *)(result + 28) & 1)
        + (*(int *)(result + 24) >> 1));
  else
    v5 = result + 26256;
  v6 = 0;
  v7 = 1;
  do
  {
    v8 = v6;
    if (a4 >= 1)
    {
      v9 = a4;
      v10 = (_OWORD *)(result + 48 * a2 + 5120 + 16 * v7);
      do
      {
        *v10 = *(_OWORD *)(v5 + 16 * v7);
        v10 += 3;
        --v9;
      }
      while (v9);
    }
    if (a5 >= 1)
    {
      v11 = (_OWORD *)(v5 + 16 * v7);
      v12 = a5;
      v13 = (_OWORD *)(result + 48 * a3 + 6656 + 16 * v7);
      do
      {
        *v13 = *v11;
        v13 += 3;
        --v12;
      }
      while (v12);
    }
    v6 = 1;
    v7 = 2;
  }
  while ((v8 & 1) == 0);
  return result;
}

void sub_218B9EC10(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  _BOOL4 v23;
  _BOOL4 v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _BOOL4 v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  _WORD *v40;
  int v41;
  int v42;
  unsigned __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  BOOL v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unsigned __int16 v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  signed int v62;
  uint64_t v63;
  int v64;
  _WORD *v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  _BOOL4 v70;
  uint64_t v71;
  _WORD *v72;
  _WORD __src[24];
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(a1 + 8);
  v12 = a3;
  sub_218B58598(*(_QWORD *)(a1 + 16) + 13824, (int8x16_t *)(*(_QWORD *)(a1 + 16) + 112 * a3 + 16 * a4 + 3552), 6);
  *(_BYTE *)(a2 + a3 + 11) = v13 + 2;
  v14 = a1 + a6;
  v15 = (unsigned __int8 *)(v14 + 8224);
  v16 = (unsigned __int8 *)(v14 + 624);
  if (a3)
    v16 = v15;
  v17 = *v16;
  if ((a6 & 0xF) != 0)
  {
    v18 = a5;
    if (a3)
      v19 = *(unsigned __int8 *)(a1 + a5 + 0x2000);
    else
      v19 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 656) + a5 + 592);
  }
  else
  {
    v19 = 0;
    v18 = a5;
  }
  v20 = 0;
  v21 = (unsigned __int16 *)(a1 + 5120 + 48 * a6 + 16 * v12 + 1536);
  v22 = (unsigned __int16 *)(a1 + 5120 + 48 * v18 + 16 * v12);
  v23 = v17 != 0;
  v24 = v19 != 0;
  if (v17 && v19)
  {
    v20 = 0;
    do
    {
      v25 = *v21;
      v26 = *v22;
      if (v25 >= v26)
      {
        v27 = v26 == v25;
        if (!v20 || (unsigned __int16)__src[v20 + 7] != v26)
          __src[v20++ + 8] = v26;
        v17 -= v27;
        ++v22;
        --v19;
        v21 += v27;
      }
      else
      {
        if (!v20 || (unsigned __int16)__src[v20 + 7] != v25)
          __src[v20++ + 8] = v25;
        ++v21;
        --v17;
      }
      v23 = v17 != 0;
      v24 = v19 != 0;
    }
    while (v17 && v19);
  }
  v28 = (v13 + 2);
  v71 = v12;
  v29 = v11;
  if (v23)
  {
    v30 = v17 + 1;
    do
    {
      v31 = *v21;
      if (!v20 || (unsigned __int16)__src[v20 + 7] != v31)
        __src[v20++ + 8] = v31;
      ++v21;
      --v30;
    }
    while (v30 > 1);
  }
  else if (v24)
  {
    v32 = v19 + 1;
    do
    {
      v33 = *v22;
      if (!v20 || (unsigned __int16)__src[v20 + 7] != v33)
        __src[v20++ + 8] = v33;
      ++v22;
      --v32;
    }
    while (v32 > 1);
  }
  v34 = 0;
  v35 = v28 != 0;
  if (v20 >= 1 && v13 != -2)
  {
    v36 = 0;
    v34 = 0;
    v37 = v20;
    do
    {
      sub_218B588EC();
      if (v38)
        __src[v34++] = __src[v36 + 8];
      ++v36;
      v35 = v34 < (int)v28;
    }
    while (v36 < v37 && v34 < (int)v28);
  }
  if (*(_DWORD *)(a1 + 258564))
    v39 = *(_QWORD *)(v29 + 4376)
        + 48
        * ((*(uint64_t *)(v29 + 3432) >> 1) * ((*(_DWORD *)(a1 + 24) & 1) + (*(int *)(a1 + 28) >> 1))
         + (*(_DWORD *)(a1 + 28) & 1)
         + (*(int *)(a1 + 24) >> 1));
  else
    v39 = a1 + 26256;
  v40 = (_WORD *)(v39 + 16 * v71);
  if (v35)
  {
    v41 = a3;
    v42 = *(_DWORD *)(v29 + 2172);
    if (v42)
    {
      v43 = 0;
      v44 = v42;
      do
      {
        --v44;
        sub_218B588EC();
        v43 = v45 | (2 * v43);
      }
      while (v44);
    }
    else
    {
      v43 = 0;
    }
    LODWORD(v46) = v34 + 1;
    v40[v34] = v43;
    if (v34 + 1 < (int)v28)
    {
      v72 = v40;
      v47 = 0;
      v48 = -2;
      do
      {
        sub_218B588EC();
        v47 = v49 | (2 * v47);
        v50 = __CFADD__(v48++, 1);
      }
      while (!v50);
      v70 = v41 == 0;
      v51 = v43;
      v52 = v42 + v47 - 3;
      v53 = ~(-1 << v42);
      v46 = (int)v46;
      v54 = v34 + 2;
      while (1)
      {
        v55 = 0;
        if (v52)
        {
          v56 = v52;
          do
          {
            --v56;
            sub_218B588EC();
            v55 = v57 | (2 * v55);
          }
          while (v56);
        }
        v58 = v51 + v70 + v55 >= v53 ? v53 : v51 + v70 + v55;
        v59 = v46 + 1;
        v40 = v72;
        v72[v46] = v58;
        v60 = v70 + v58;
        v50 = v53 >= v60;
        v61 = v53 - v60;
        if (v61 == 0 || !v50)
          break;
        v51 = v58;
        v62 = 32 - __clz(v61);
        if (v52 >= v62)
          v52 = v62;
        ++v54;
        ++v46;
        if (v59 == (_DWORD)v28)
          goto LABEL_72;
      }
      if (v59 < (int)v28)
      {
        v63 = v54;
        do
          v72[v63++] = v53;
        while (v63 < v28);
      }
    }
LABEL_72:
    if ((_DWORD)v28)
    {
      v64 = 0;
      v65 = v40;
      v66 = v28;
      v67 = v34;
      while (v64 < v34)
      {
        v68 = (unsigned __int16)__src[v64];
        if (v67 < (int)v28)
        {
          v69 = (unsigned __int16)v40[v67];
          if (v68 > v69)
            goto LABEL_79;
        }
        ++v64;
LABEL_80:
        *v65++ = v68;
        if (!--v66)
          return;
      }
      LOWORD(v69) = v40[v67];
LABEL_79:
      ++v67;
      LOWORD(v68) = v69;
      goto LABEL_80;
    }
  }
  else
  {
    memcpy((void *)(v39 + 16 * v71), __src, 2 * v34);
  }
}

void sub_218B9F0C4(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v7;
  _WORD *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;

  sub_218B9EC10(a1, a2, 1, a3, a4, a5);
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 258564))
    v8 = (_WORD *)(*(_QWORD *)(v7 + 4376)
                 + 48
                 * ((*(uint64_t *)(v7 + 3432) >> 1) * ((*(_DWORD *)(a1 + 24) & 1) + (*(int *)(a1 + 28) >> 1))
                  + (*(_DWORD *)(a1 + 28) & 1)
                  + (*(int *)(a1 + 24) >> 1))
                 + 32);
  else
    v8 = (_WORD *)(a1 + 26288);
  v9 = *(_DWORD *)(v7 + 2172);
  sub_218B588EC();
  if (v10)
  {
    v11 = 0;
    v12 = -2;
    do
    {
      sub_218B588EC();
      v11 = v13 | (2 * v11);
    }
    while (!__CFADD__(v12++, 1));
    v15 = 0;
    if (v9)
    {
      v16 = v9;
      do
      {
        --v16;
        sub_218B588EC();
        v15 = v17 | (2 * v15);
      }
      while (v16);
    }
    *v8 = v15;
    if (*(unsigned __int8 *)(a2 + 12) >= 2u)
    {
      v18 = v9 + v11 - 4;
      v19 = ~(-1 << v9);
      v20 = 1;
      do
      {
        if (!v18)
          goto LABEL_20;
        v21 = 0;
        v22 = v18;
        do
        {
          --v22;
          sub_218B588EC();
          v21 = v23 | (2 * v21);
        }
        while (v22);
        if (v21)
        {
          sub_218B588EC();
          if (v24)
            v25 = -v21;
          else
            LOWORD(v25) = v21;
        }
        else
        {
LABEL_20:
          LOWORD(v25) = 0;
        }
        v15 = (v25 + v15) & v19;
        v8[v20++] = v15;
      }
      while (v20 < *(unsigned __int8 *)(a2 + 12));
    }
  }
  else if (*(_BYTE *)(a2 + 12))
  {
    v26 = 0;
    do
    {
      v27 = 0;
      if (v9)
      {
        v28 = v9;
        do
        {
          --v28;
          sub_218B588EC();
          v27 = v29 | (2 * v27);
        }
        while (v28);
      }
      v8[v26++] = v27;
    }
    while (v26 < *(unsigned __int8 *)(a2 + 12));
  }
}

double sub_218B9F28C(uint64_t a1)
{
  unint64_t v1;
  int v2;
  double result;
  void *v4;
  BOOL v5;
  void **v6;
  void *memptr;

  v1 = (a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  memptr = 0;
  v2 = malloc_type_posix_memalign(&memptr, 0x40uLL, v1 + 40, 0xE584FBEuLL);
  v4 = memptr;
  if (v2)
    v5 = 1;
  else
    v5 = memptr == 0;
  if (!v5)
  {
    v6 = (void **)((char *)memptr + v1);
    *v6 = memptr;
    v6[1] = v4;
    *(_QWORD *)&result = 1;
    v6[2] = (void *)1;
    v6[3] = j__free;
    v6[4] = v4;
  }
  return result;
}

double sub_218B9F30C(uint64_t a1, uint64_t a2)
{
  char *v3;
  double result;

  v3 = sub_218B8DC0C(a1, (char *)(((a2 + 7) & 0xFFFFFFFFFFFFFFF8) + 40));
  if (v3)
  {
    *((_QWORD *)v3 - 5) = *(_QWORD *)v3;
    *((_QWORD *)v3 - 4) = a1;
    *(_QWORD *)&result = 1;
    *((_QWORD *)v3 - 3) = 1;
    *((_QWORD *)v3 - 2) = sub_218B9F364;
    *((_QWORD *)v3 - 1) = v3;
  }
  return result;
}

void sub_218B9F368(uint64_t *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;

  v1 = *a1;
  if (*a1)
  {
    *a1 = 0;
    v2 = (unsigned int *)(v1 + 16);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      v5 = *(_DWORD *)(v1 + 20);
      (*(void (**)(_QWORD, _QWORD))(v1 + 24))(*(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 32));
      if (v5)
        free((void *)v1);
    }
  }
}

void sub_218B9F3C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t i;
  uint64_t v13;
  _DWORD *v14;
  pthread_cond_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = a1 + 63088;
  sub_218B70C54(a1 + 176);
  if (*(_QWORD *)(a1 + 256))
  {
    sub_218BA2EB0(a1 + 248);
    *(_QWORD *)(a1 + 536) = 0;
  }
  if (*(_QWORD *)(a1 + 552))
  {
    sub_218BA2EB0(a1 + 544);
    *(_QWORD *)(a1 + 832) = 0;
  }
  v3 = 0;
  *(_DWORD *)v2 = 0;
  v4 = 52704;
  *(_DWORD *)(v2 + 64) = 0;
  v5 = 50240;
  v6 = 50232;
  v7 = 50224;
  v8 = 49936;
  v9 = 49944;
  do
  {
    if (*(_QWORD *)(a1 + v9))
    {
      sub_218BA2EB0(a1 + v8);
      *(_QWORD *)(a1 + v7) = 0;
    }
    sub_218B9F368((uint64_t *)(a1 + v6));
    sub_218B9F368((uint64_t *)(a1 + v5));
    v10 = (_QWORD *)(a1 + v4);
    *v10 = 0;
    v10[1] = 0;
    sub_218B9F368((uint64_t *)(a1 + 52696 + v3));
    v4 += 24;
    v3 += 24;
    v5 += 344;
    v6 += 344;
    v7 += 344;
    v8 += 344;
    v9 += 344;
  }
  while (v3 != 192);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  sub_218B9F368((uint64_t *)(a1 + 80));
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  sub_218B9F368((uint64_t *)(a1 + 136));
  sub_218B9F368((uint64_t *)(a1 + 120));
  sub_218B9F368((uint64_t *)(a1 + 152));
  v27 = *(_QWORD *)(v2 + 56);
  *(_OWORD *)(a1 + 63112) = 0u;
  *(_OWORD *)(a1 + 63128) = 0u;
  *(_QWORD *)(a1 + 63144) = 0;
  *(_QWORD *)(v2 + 16) = 0x8000000000000000;
  *(_QWORD *)(v2 + 32) = -1;
  sub_218B9F368(&v27);
  if (*(_DWORD *)(a1 + 8) != 1 || *(_DWORD *)(a1 + 24) != 1)
  {
    atomic_store(1u, *(unsigned int **)(a1 + 848));
    if (*(_DWORD *)(a1 + 24) >= 2u)
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 896));
      v11 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v11)
      {
        for (i = 0; i < v11; ++i)
        {
          v13 = *(_QWORD *)(a1 + 16);
          v14 = (_DWORD *)(v13 + 258752 * i + 258712);
          if (!*v14)
          {
            v15 = (pthread_cond_t *)(v13 + 258752 * i + 258576);
            do
              pthread_cond_wait(v15, (pthread_mutex_t *)(a1 + 896));
            while (!*v14);
            v11 = *(unsigned int *)(a1 + 28);
          }
        }
      }
      if (*(_DWORD *)(a1 + 8))
      {
        v16 = 0;
        v17 = 5672;
        do
        {
          v18 = (_QWORD *)(*(_QWORD *)a1 + v17);
          ++v16;
          *(v18 - 12) = 0;
          *(v18 - 11) = 0;
          *((_DWORD *)v18 - 18) = 0;
          *(v18 - 10) = 0;
          *v18 = 0;
          v18[1] = 0;
          v19 = *(unsigned int *)(a1 + 8);
          v17 += 5712;
        }
        while (v16 < v19);
      }
      else
      {
        LODWORD(v19) = 0;
      }
      *(_DWORD *)(a1 + 1008) = 0;
      *(_DWORD *)(a1 + 1012) = v19;
      atomic_store(0xFFFFFFFF, (unsigned int *)(a1 + 1016));
      atomic_store(0, (unsigned int *)(a1 + 1020));
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 896));
    }
    v20 = *(_DWORD *)(a1 + 8);
    if (v20 >= 2)
    {
      v21 = 0;
      v22 = *(_DWORD *)(a1 + 864);
      do
      {
        if (v22 == v20)
          v23 = 0;
        else
          v23 = v22;
        v24 = *(_QWORD *)a1 + 5712 * v23;
        sub_218B8ADFC(v24, -1);
        *(_DWORD *)(v24 + 3124) = 0;
        *(_DWORD *)(v24 + 5556) = 0;
        v25 = *(_QWORD *)(a1 + 856);
        v26 = v25 + 296 * v23;
        if (*(_QWORD *)(v26 + 8))
        {
          sub_218BA2EB0(v26);
          *(_QWORD *)(v25 + 296 * v23 + 288) = 0;
        }
        ++v21;
        v22 = v23 + 1;
        v20 = *(_DWORD *)(a1 + 8);
      }
      while (v21 < v20);
      *(_DWORD *)(a1 + 864) = 0;
    }
    atomic_store(0, *(unsigned int **)(a1 + 848));
  }
}

uint64_t sub_218B9F6C0(uint64_t a1)
{
  unsigned int v1;
  int v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v11;

  sub_218B9F774(a1);
  v4 = v3;
  result = 0;
  if (!v4)
  {
    do
    {
      if (!*(_QWORD *)(a1 + 184))
        return 0;
      v6 = sub_218B77034(a1, (unsigned __int8 **)(a1 + 176));
      v7 = v6;
      if (v6 < 0 || (v8 = *(_QWORD *)(a1 + 184) - v6, *(_QWORD *)(a1 + 176) += v6, (*(_QWORD *)(a1 + 184) = v8) == 0))
        sub_218B70C54(a1 + 176);
      sub_218B9F774(a1);
      v9 = (unint64_t)v7 >> 63;
      if (v10)
      {
        LODWORD(v9) = 3;
        v11 = 0;
      }
      else
      {
        v11 = v7 < 0;
      }
      if (v11)
        v1 = v7;
    }
    while (!(_DWORD)v9);
    if ((_DWORD)v9 == 3)
      return 0;
    else
      return v1;
  }
  return result;
}

double sub_218B9F774(uint64_t a1)
{
  int v2;
  _OWORD *v3;
  double result;

  if (!*(_DWORD *)(a1 + 63152) && !*(_DWORD *)(a1 + 63060))
  {
    v2 = *(_DWORD *)(a1 + 63064);
    if (v2)
    {
      if (*(_QWORD *)(a1 + 264))
      {
        v3 = (_OWORD *)(a1 + 248);
        if (!*(_QWORD *)(a1 + 560))
        {
LABEL_11:
          memcpy((void *)(a1 + 544), (const void *)(a1 + 248), 0x110uLL);
          *(_QWORD *)(a1 + 832) = *(_QWORD *)(a1 + 536);
          *(_DWORD *)(a1 + 824) = *(_DWORD *)(a1 + 528);
          result = 0.0;
          *v3 = 0u;
          *(_OWORD *)(a1 + 264) = 0u;
          *(_OWORD *)(a1 + 280) = 0u;
          *(_OWORD *)(a1 + 296) = 0u;
          *(_OWORD *)(a1 + 312) = 0u;
          *(_OWORD *)(a1 + 328) = 0u;
          *(_OWORD *)(a1 + 344) = 0u;
          *(_OWORD *)(a1 + 360) = 0u;
          *(_OWORD *)(a1 + 376) = 0u;
          *(_OWORD *)(a1 + 392) = 0u;
          *(_OWORD *)(a1 + 408) = 0u;
          *(_OWORD *)(a1 + 424) = 0u;
          *(_OWORD *)(a1 + 440) = 0u;
          *(_OWORD *)(a1 + 456) = 0u;
          *(_OWORD *)(a1 + 472) = 0u;
          *(_OWORD *)(a1 + 488) = 0u;
          *(_QWORD *)(a1 + 816) = *(_QWORD *)(a1 + 520);
          *v3 = 0u;
          *(_OWORD *)(a1 + 264) = 0u;
          *(_OWORD *)(a1 + 280) = 0u;
          *(_OWORD *)(a1 + 296) = 0u;
          *(_OWORD *)(a1 + 312) = 0u;
          *(_OWORD *)(a1 + 328) = 0u;
          *(_OWORD *)(a1 + 344) = 0u;
          *(_OWORD *)(a1 + 360) = 0u;
          *(_OWORD *)(a1 + 376) = 0u;
          *(_OWORD *)(a1 + 392) = 0u;
          *(_OWORD *)(a1 + 408) = 0u;
          *(_OWORD *)(a1 + 424) = 0u;
          *(_OWORD *)(a1 + 440) = 0u;
          *(_OWORD *)(a1 + 456) = 0u;
          *(_OWORD *)(a1 + 472) = 0u;
          *(_OWORD *)(a1 + 488) = 0u;
          *(_OWORD *)(a1 + 504) = 0u;
          *(_OWORD *)(a1 + 520) = 0u;
          *(_OWORD *)(a1 + 504) = 0u;
          *(_QWORD *)(a1 + 536) = 0;
          return result;
        }
        if (v2 != *(unsigned __int8 *)(*(_QWORD *)(a1 + 552) + 250) && (*(_BYTE *)(a1 + 528) & 4) == 0)
        {
          sub_218BA2EB0(a1 + 544);
          goto LABEL_11;
        }
      }
    }
  }
  return result;
}

uint64_t sub_218B9F894()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _OWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  void (**v13)(uint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  unsigned int v16;
  char v18[3];
  _QWORD v19[4552];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = (uint64_t)v1;
  v3 = v0;
  v19[4551] = *MEMORY[0x24BDAC8D0];
  v4 = (_DWORD *)(v0 + 63048);
  if (*(_DWORD *)(v0 + 63060) || !*(_DWORD *)(v0 + 63064))
    v5 = (_OWORD *)(v0 + 248);
  else
    v5 = (_OWORD *)(v0 + 544);
  if (!*v4)
    goto LABEL_30;
  v6 = (_DWORD *)*((_QWORD *)v5 + 1);
  if (!v6[1] && !v6[10])
  {
    if (!v6[11] && (!v6[54] || !v6[9]))
    {
LABEL_30:
      memcpy(v1, v5, 0x110uLL);
      v8 = 0;
      *v5 = 0u;
      v5[1] = 0u;
      v5[2] = 0u;
      v5[3] = 0u;
      v5[4] = 0u;
      v5[5] = 0u;
      v5[6] = 0u;
      v5[7] = 0u;
      v5[8] = 0u;
      v5[9] = 0u;
      v5[10] = 0u;
      v5[11] = 0u;
      v5[12] = 0u;
      v5[13] = 0u;
      v5[14] = 0u;
      v5[15] = 0u;
      v5[16] = 0u;
      goto LABEL_31;
    }
    if (!v6[10] && !v6[11] && (!v6[54] || !v6[9]))
    {
      sub_218BA2DE4(v1, v5);
LABEL_27:
      v8 = 0;
      goto LABEL_31;
    }
  }
  v7 = sub_218BA2D60(v0, (uint64_t *)v1, *((unsigned int *)v5 + 14), (uint64_t)v5);
  if ((v7 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(v3 + 24) < 2u)
    {
      v9 = *(_DWORD *)(v2 + 68);
      if (v9 == 12 || v9 == 10)
      {
        v13 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 3368 * ((v9 >> 1) - 4) + 52888);
        v14 = *(_DWORD *)(v2 + 60);
        sub_218BA7D54(v13, v2, (uint64_t)v5, v18, (uint64_t)v19);
        if (v14 >= 1)
        {
          v15 = 0;
          v16 = (v14 + 31) >> 5;
          do
            sub_218BA8214((uint64_t)v13, v2, (uint64_t)v5, (uint64_t)v18, (uint64_t)v19, v15++);
          while (v16 != v15);
        }
      }
      else
      {
        if (v9 != 8)
          abort();
        v10 = *(_DWORD *)(v2 + 60);
        sub_218B73298((void (**)(uint64_t, uint64_t))(v3 + 52888), v2, (uint64_t)v5, (uint64_t)v18, (uint64_t)v19);
        if (v10 >= 1)
        {
          v11 = 0;
          v12 = (v10 + 31) >> 5;
          do
            sub_218B73614(v3 + 52888, v2, (uint64_t)v5, (uint64_t)v18, (uint64_t)v19, v11++);
          while (v12 != v11);
        }
      }
    }
    else
    {
      *(_QWORD *)(v3 + 1080) = v5;
      *(_QWORD *)(v3 + 1088) = v2;
      *(_QWORD *)(v3 + 1096) = 11;
      *(_DWORD *)(v3 + 1104) = 0;
      pthread_mutex_lock((pthread_mutex_t *)(v3 + 896));
      *(_QWORD *)(v3 + 1024) = 1;
      pthread_cond_signal((pthread_cond_t *)(v3 + 960));
      do
        pthread_cond_wait((pthread_cond_t *)(v3 + 1032), (pthread_mutex_t *)(v3 + 896));
      while (!*(_DWORD *)(v3 + 1028));
      pthread_mutex_unlock((pthread_mutex_t *)(v3 + 896));
    }
    goto LABEL_27;
  }
  v8 = v7;
  sub_218BA2EB0(v2);
LABEL_31:
  sub_218BA2EB0((uint64_t)v5);
  *((_QWORD *)v5 + 36) = 0;
  if (!v4[3] && v4[4] && *(_QWORD *)(v3 + 264))
  {
    memcpy(v5, (const void *)(v3 + 248), 0x110uLL);
    *(_OWORD *)(v3 + 248) = 0u;
    *(_OWORD *)(v3 + 264) = 0u;
    *(_OWORD *)(v3 + 280) = 0u;
    *(_OWORD *)(v3 + 296) = 0u;
    *(_OWORD *)(v3 + 312) = 0u;
    *(_OWORD *)(v3 + 328) = 0u;
    *(_OWORD *)(v3 + 344) = 0u;
    *(_OWORD *)(v3 + 360) = 0u;
    *(_OWORD *)(v3 + 376) = 0u;
    *(_OWORD *)(v3 + 392) = 0u;
    *(_OWORD *)(v3 + 408) = 0u;
    *(_OWORD *)(v3 + 424) = 0u;
    *(_OWORD *)(v3 + 440) = 0u;
    *(_OWORD *)(v3 + 456) = 0u;
    *(_OWORD *)(v3 + 472) = 0u;
    *(_OWORD *)(v3 + 488) = 0u;
    *(_OWORD *)(v3 + 504) = 0u;
    *((_QWORD *)v5 + 34) = *(_QWORD *)(v3 + 520);
    *((_QWORD *)v5 + 36) = *(_QWORD *)(v3 + 536);
    *((_DWORD *)v5 + 70) = *(_DWORD *)(v3 + 528);
    *(_QWORD *)(v3 + 536) = 0;
    *(_OWORD *)(v3 + 504) = 0u;
    *(_OWORD *)(v3 + 520) = 0u;
    *(_OWORD *)(v3 + 472) = 0u;
    *(_OWORD *)(v3 + 488) = 0u;
    *(_OWORD *)(v3 + 440) = 0u;
    *(_OWORD *)(v3 + 456) = 0u;
    *(_OWORD *)(v3 + 408) = 0u;
    *(_OWORD *)(v3 + 424) = 0u;
    *(_OWORD *)(v3 + 376) = 0u;
    *(_OWORD *)(v3 + 392) = 0u;
    *(_OWORD *)(v3 + 344) = 0u;
    *(_OWORD *)(v3 + 360) = 0u;
    *(_OWORD *)(v3 + 312) = 0u;
    *(_OWORD *)(v3 + 328) = 0u;
    *(_OWORD *)(v3 + 280) = 0u;
    *(_OWORD *)(v3 + 296) = 0u;
    *(_OWORD *)(v3 + 264) = 0u;
    *(_OWORD *)(v3 + 248) = 0u;
  }
  return v8;
}

uint64_t sub_218B9FC14(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t j;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t k;
  uint64_t v37;
  uint64_t m;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;
  __int16 *v47;
  _WORD *v48;
  __int16 *v49;
  _WORD *v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  uint64_t v99;
  _WORD *v100;
  __int16 *v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t n;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t ii;
  uint64_t v129;
  char v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t jj;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  _WORD *v162;
  __int16 *v163;
  uint64_t v164;
  __int16 v165;
  uint64_t kk;
  uint64_t mm;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t nn;
  uint64_t v178;
  uint64_t i1;
  uint64_t i2;
  uint64_t v181;
  uint64_t i3;
  uint64_t i4;
  uint64_t i5;
  uint64_t i6;
  uint64_t i7;
  uint64_t i8;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t i9;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t i10;
  uint64_t v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t i11;
  uint64_t i12;
  uint64_t i13;
  uint64_t i14;
  uint64_t i15;
  uint64_t v214;
  uint64_t i16;
  uint64_t v216;
  uint64_t i17;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  char v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  _WORD *v226;
  __int16 *v227;
  uint64_t v228;
  __int16 v229;
  uint64_t v230;
  uint64_t v231;

  for (i = 0; i != 88; i += 4)
    *(_DWORD *)(a2 + i + 5464) = *(unsigned __int16 *)(a3 + 5464 + i);
  v4 = 0;
  v5 = a2 + 128;
  *(_OWORD *)(a2 + 3360) = *(_OWORD *)(a3 + 3360);
  *(_WORD *)(a2 + 3368) = 0;
  v6 = 1;
  do
  {
    v7 = 0;
    v8 = v6;
    if ((v6 & 1) != 0)
      v9 = 24;
    else
      v9 = 26;
    v10 = 416 * v4;
    v11 = v5 + ((416 * v4) | v9);
    v12 = a3 + 128 + v10;
    v13 = v5 + v10;
    do
    {
      v14 = (_OWORD *)(v13 + v7);
      v15 = *(_OWORD *)(v12 + v7 + 16);
      *v14 = *(_OWORD *)(v12 + v7);
      v14[1] = v15;
      *(_WORD *)(v11 + v7) = 0;
      v7 += 32;
    }
    while (v7 != 416);
    v6 = 0;
    v4 = 1;
  }
  while ((v8 & 1) != 0);
  for (j = 0; j != 128; j += 16)
  {
    v17 = a2 + j;
    *(_OWORD *)(v17 + 3232) = *(_OWORD *)(a3 + 3232 + j);
    *(_WORD *)(v17 + 3244) = 0;
  }
  v18 = 0;
  v19 = a2 + 5026;
  v20 = a3 + 5024;
  v21 = a2;
  do
  {
    v22 = 0;
    if ((int)v18 >= 1)
      v23 = 1;
    else
      v23 = v18;
    v24 = v19 + 2 * v23;
    do
    {
      *(_QWORD *)(v21 + v22 + 5024) = *(_QWORD *)(v20 + v22);
      *(_WORD *)(v24 + v22) = 0;
      v22 += 8;
    }
    while (v22 != 24);
    ++v18;
    v19 += 24;
    v20 += 24;
    v21 += 24;
  }
  while (v18 != 4);
  v25 = 0;
  v26 = 1;
  do
  {
    v27 = 0;
    v28 = v26;
    v29 = 208 * v25;
    v30 = a2 + 208 * v25;
    v31 = a3 + 2176 + v29;
    do
    {
      v32 = v30 + v27;
      *(_OWORD *)(v32 + 2176) = *(_OWORD *)(v31 + v27);
      *(_WORD *)(v32 + 2188) = 0;
      v27 += 16;
    }
    while (v27 != 208);
    v26 = 0;
    v25 = 1;
  }
  while ((v28 & 1) != 0);
  v33 = 0;
  v34 = a3 + 2592;
  v35 = a2;
  do
  {
    for (k = 0; k != 208; k += 16)
    {
      v37 = v35 + k;
      *(_OWORD *)(v37 + 2592) = *(_OWORD *)(v34 + k);
      *(_WORD *)(v37 + 2600) = 0;
    }
    ++v33;
    v35 += 208;
    v34 += 208;
  }
  while (v33 != 3);
  for (m = 0; m != 12; m += 4)
    *(_DWORD *)(a2 + m + 6012) = *(unsigned __int16 *)(a3 + 6012 + m);
  v39 = 0;
  v40 = a2 + 1248;
  v41 = a3 + 1248;
  do
  {
    v42 = 0;
    v43 = v40 + 2 * byte_218BBFE99[v39];
    do
    {
      v44 = (_OWORD *)(v40 + v42);
      v45 = *(_OWORD *)(v41 + v42 + 16);
      *v44 = *(_OWORD *)(v41 + v42);
      v44[1] = v45;
      *(_WORD *)(v43 + v42) = 0;
      v42 += 32;
    }
    while (v42 != 128);
    ++v39;
    v40 += 128;
    v41 += 128;
  }
  while (v39 != 5);
  v46 = 0;
  v47 = (__int16 *)(a3 + 12936);
  v48 = (_WORD *)(a2 + 12938);
  do
  {
    v49 = v47;
    v50 = v48;
    v51 = 13;
    do
    {
      v52 = *v49;
      v49 += 2;
      *(v50 - 1) = v52;
      *v50 = 0;
      v50 += 2;
      --v51;
    }
    while (v51);
    ++v46;
    v48 += 26;
    v47 += 26;
  }
  while (v46 != 5);
  v53 = 0;
  *(_OWORD *)(a2 + 7040) = *(_OWORD *)(a3 + 7040);
  *(_WORD *)(a2 + 7048) = 0;
  *(_OWORD *)(a2 + 7056) = *(_OWORD *)(a3 + 7056);
  *(_WORD *)(a2 + 7064) = 0;
  *(_OWORD *)(a2 + 7072) = *(_OWORD *)(a3 + 7072);
  *(_WORD *)(a2 + 7080) = 0;
  *(_OWORD *)(a2 + 7088) = *(_OWORD *)(a3 + 7088);
  *(_WORD *)(a2 + 7096) = 0;
  *(_OWORD *)(a2 + 7104) = *(_OWORD *)(a3 + 7104);
  *(_WORD *)(a2 + 7114) = 0;
  *(_OWORD *)(a2 + 7120) = *(_OWORD *)(a3 + 7120);
  *(_WORD *)(a2 + 7130) = 0;
  *(_OWORD *)(a2 + 7136) = *(_OWORD *)(a3 + 7136);
  *(_WORD *)(a2 + 7146) = 0;
  *(_OWORD *)(a2 + 7152) = *(_OWORD *)(a3 + 7152);
  *(_WORD *)(a2 + 7162) = 0;
  *(_OWORD *)(a2 + 7168) = *(_OWORD *)(a3 + 7168);
  *(_WORD *)(a2 + 7180) = 0;
  *(_OWORD *)(a2 + 7184) = *(_OWORD *)(a3 + 7184);
  *(_WORD *)(a2 + 7196) = 0;
  *(_OWORD *)(a2 + 7200) = *(_OWORD *)(a3 + 7200);
  *(_WORD *)(a2 + 7212) = 0;
  *(_OWORD *)(a2 + 7216) = *(_OWORD *)(a3 + 7216);
  *(_WORD *)(a2 + 7228) = 0;
  v54 = *(_QWORD *)(a3 + 7232);
  *(_QWORD *)(a2 + 7238) = *(_QWORD *)(a3 + 7238);
  *(_QWORD *)(a2 + 7232) = v54;
  *(_WORD *)(a2 + 7246) = 0;
  v55 = *(_QWORD *)(a3 + 7248);
  *(_QWORD *)(a2 + 7254) = *(_QWORD *)(a3 + 7254);
  *(_QWORD *)(a2 + 7248) = v55;
  *(_WORD *)(a2 + 7262) = 0;
  v56 = *(_QWORD *)(a3 + 7264);
  *(_QWORD *)(a2 + 7270) = *(_QWORD *)(a3 + 7270);
  *(_QWORD *)(a2 + 7264) = v56;
  *(_WORD *)(a2 + 7278) = 0;
  v57 = *(_QWORD *)(a3 + 7280);
  *(_QWORD *)(a2 + 7286) = *(_QWORD *)(a3 + 7286);
  *(_QWORD *)(a2 + 7280) = v57;
  *(_WORD *)(a2 + 7294) = 0;
  v58 = *(_OWORD *)(a3 + 7296);
  *(_OWORD *)(a2 + 7312) = *(_OWORD *)(a3 + 7312);
  *(_OWORD *)(a2 + 7296) = v58;
  *(_WORD *)(a2 + 7312) = 0;
  v59 = *(_OWORD *)(a3 + 7328);
  *(_OWORD *)(a2 + 7344) = *(_OWORD *)(a3 + 7344);
  *(_OWORD *)(a2 + 7328) = v59;
  *(_WORD *)(a2 + 7344) = 0;
  v60 = *(_OWORD *)(a3 + 7360);
  *(_OWORD *)(a2 + 7376) = *(_OWORD *)(a3 + 7376);
  *(_OWORD *)(a2 + 7360) = v60;
  *(_WORD *)(a2 + 7376) = 0;
  v61 = *(_OWORD *)(a3 + 7392);
  *(_OWORD *)(a2 + 7408) = *(_OWORD *)(a3 + 7408);
  *(_OWORD *)(a2 + 7392) = v61;
  *(_WORD *)(a2 + 7408) = 0;
  v62 = *(_OWORD *)(a3 + 7424);
  *(_OWORD *)(a2 + 7440) = *(_OWORD *)(a3 + 7440);
  *(_OWORD *)(a2 + 7424) = v62;
  *(_WORD *)(a2 + 7442) = 0;
  v63 = *(_OWORD *)(a3 + 7456);
  *(_OWORD *)(a2 + 7472) = *(_OWORD *)(a3 + 7472);
  *(_OWORD *)(a2 + 7456) = v63;
  *(_WORD *)(a2 + 7474) = 0;
  v64 = *(_OWORD *)(a3 + 7488);
  *(_OWORD *)(a2 + 7504) = *(_OWORD *)(a3 + 7504);
  *(_OWORD *)(a2 + 7488) = v64;
  *(_WORD *)(a2 + 7508) = 0;
  v65 = *(_OWORD *)(a3 + 7520);
  *(_OWORD *)(a2 + 7536) = *(_OWORD *)(a3 + 7536);
  *(_OWORD *)(a2 + 7520) = v65;
  *(_WORD *)(a2 + 7540) = 0;
  v66 = a3 + 12496;
  v67 = a2 + 12496;
  do
  {
    v68 = 0;
    v69 = 1;
    do
    {
      v70 = 0;
      v71 = v69;
      v72 = 44 * v68;
      v73 = v66 + 44 * v68;
      v74 = v67 + v72;
      do
      {
        *(_DWORD *)(v74 + v70) = *(unsigned __int16 *)(v73 + v70);
        v70 += 4;
      }
      while (v70 != 44);
      v69 = 0;
      v68 = 1;
    }
    while ((v71 & 1) != 0);
    ++v53;
    v66 += 88;
    v67 += 88;
  }
  while (v53 != 5);
  v75 = 0;
  v76 = a3 + 7552;
  v77 = a2;
  do
  {
    v78 = 0;
    v79 = 1;
    do
    {
      v80 = 0;
      v81 = v79;
      v82 = v77 + 32 * v78;
      v83 = v76 + 32 * v78;
      do
      {
        v84 = v82 + v80;
        *(_QWORD *)(v84 + 7552) = *(_QWORD *)(v83 + v80);
        *(_WORD *)(v84 + 7556) = 0;
        v80 += 8;
      }
      while (v80 != 32);
      v79 = 0;
      v78 = 1;
    }
    while ((v81 & 1) != 0);
    ++v75;
    v77 += 64;
    v76 += 64;
  }
  while (v75 != 5);
  v85 = 0;
  v86 = a3 + 7872;
  v87 = a2;
  do
  {
    v88 = 0;
    v89 = 1;
    do
    {
      v90 = 0;
      v91 = v89;
      v92 = 328 * v88;
      v93 = v87 + 328 * v88;
      v94 = v86 + v92;
      do
      {
        v95 = v93 + v90;
        *(_QWORD *)(v95 + 7872) = *(_QWORD *)(v94 + v90);
        *(_WORD *)(v95 + 7878) = 0;
        v90 += 8;
      }
      while (v90 != 328);
      v89 = 0;
      v88 = 1;
    }
    while ((v91 & 1) != 0);
    ++v85;
    v87 += 656;
    v86 += 656;
  }
  while (v85 != 5);
  v96 = 0;
  v97 = 1;
  do
  {
    v98 = v97;
    v99 = 3 * v96;
    v100 = (_WORD *)(a2 + 13198 + 12 * v96);
    v101 = (__int16 *)(a3 + 13196 + 4 * v99);
    v102 = 3;
    do
    {
      v103 = *v101;
      v101 += 2;
      *(v100 - 1) = v103;
      *v100 = 0;
      v100 += 2;
      --v102;
    }
    while (v102);
    v97 = 0;
    v96 = 1;
  }
  while ((v98 & 1) != 0);
  v104 = 0;
  v105 = a2 + 11158;
  v106 = a3 + 11152;
  v107 = a2;
  do
  {
    v108 = 0;
    v109 = 1;
    do
    {
      v110 = 0;
      v111 = v109;
      v112 = 168 * v108;
      v113 = v105 + 168 * v108;
      v114 = v106 + v112;
      v115 = v107 + v112;
      do
      {
        *(_QWORD *)(v115 + v110 + 11152) = *(_QWORD *)(v114 + v110);
        *(_WORD *)(v113 + v110) = 0;
        v110 += 8;
      }
      while (v110 != 168);
      v109 = 0;
      v108 = 1;
    }
    while ((v111 & 1) != 0);
    ++v104;
    v105 += 336;
    v106 += 336;
    v107 += 336;
  }
  while (v104 != 4);
  for (n = 0; n != 48; n += 16)
  {
    v117 = a2 + n;
    *(_OWORD *)(v117 + 3504) = *(_OWORD *)(a3 + 3504 + n);
    *(_WORD *)(v117 + 3518) = 0;
  }
  v118 = 0;
  v119 = *(_QWORD *)(a3 + 3216);
  *(_QWORD *)(a2 + 3222) = *(_QWORD *)(a3 + 3222);
  *(_QWORD *)(a2 + 3216) = v119;
  *(_WORD *)(a2 + 3230) = 0;
  v120 = a3 + 1888;
  do
  {
    v121 = a2 + v118;
    v122 = *(_OWORD *)(v120 + v118);
    *(_OWORD *)(v121 + 1904) = *(_OWORD *)(v120 + v118 + 16);
    *(_OWORD *)(v121 + 1888) = v122;
    *(_WORD *)(v121 + 1918) = 0;
    v118 += 32;
  }
  while (v118 != 192);
  v123 = 0;
  *(_WORD *)(a2 + 5384) = *(_WORD *)(a3 + 5384);
  *(_WORD *)(a2 + 5386) = 0;
  *(_WORD *)(a2 + 5388) = *(_WORD *)(a3 + 5388);
  *(_WORD *)(a2 + 5390) = 0;
  *(_QWORD *)(a2 + 5376) = *(_QWORD *)(a3 + 5376);
  *(_WORD *)(a2 + 5380) = 0;
  *(_QWORD *)(a2 + 5296) = *(_QWORD *)(a3 + 5296);
  *(_WORD *)(a2 + 5302) = 0;
  do
  {
    v124 = a2 + v123;
    *(_QWORD *)(v124 + 5304) = *(_QWORD *)(a3 + 5304 + v123);
    *(_WORD *)(v124 + 5310) = 0;
    v123 += 8;
  }
  while (v123 != 40);
  v125 = 0;
  v126 = a3 + 6136;
  v127 = a2;
  do
  {
    for (ii = 0; ii != 12; ii += 4)
      *(_DWORD *)(v127 + ii + 6136) = *(unsigned __int16 *)(v126 + ii);
    ++v125;
    v127 += 12;
    v126 += 12;
  }
  while (v125 != 7);
  v129 = 0;
  *(_WORD *)(a2 + 6220) = *(_WORD *)(a3 + 6220);
  *(_WORD *)(a2 + 6222) = 0;
  *(_WORD *)(a2 + 6224) = *(_WORD *)(a3 + 6224);
  *(_WORD *)(a2 + 6226) = 0;
  v130 = 1;
  do
  {
    v131 = 0;
    v132 = v130;
    v133 = 112 * v129;
    v134 = a2 + 112 * v129;
    v135 = a3 + 3552 + v133;
    do
    {
      v136 = v134 + v131;
      *(_OWORD *)(v136 + 3552) = *(_OWORD *)(v135 + v131);
      *(_WORD *)(v136 + 3564) = 0;
      v131 += 16;
    }
    while (v131 != 112);
    v130 = 0;
    v129 = 1;
  }
  while ((v132 & 1) != 0);
  v137 = 0;
  v138 = 1;
  do
  {
    v139 = 0;
    v140 = v138;
    v141 = 560 * v137;
    v142 = a2 + 3778 + 560 * v137;
    v143 = a3 + 3776 + v141;
    v144 = a2 + 3776 + v141;
    do
    {
      v145 = 0;
      ++v139;
      do
      {
        *(_OWORD *)(v144 + v145) = *(_OWORD *)(v143 + v145);
        *(_WORD *)(v142 + v145) = 0;
        v145 += 16;
      }
      while (v145 != 80);
      v142 += 82;
      v143 += 80;
      v144 += 80;
    }
    while (v139 != 7);
    v138 = 0;
    v137 = 1;
  }
  while ((v140 & 1) != 0);
  v146 = 0;
  v147 = a3 + 5928;
  v148 = a2;
  do
  {
    for (jj = 0; jj != 12; jj += 4)
      *(_DWORD *)(v148 + jj + 5928) = *(unsigned __int16 *)(v147 + jj);
    ++v146;
    v148 += 12;
    v147 += 12;
  }
  while (v146 != 7);
  v150 = 0;
  v151 = *(_OWORD *)(a3 + 2080);
  *(_OWORD *)(a2 + 2094) = *(_OWORD *)(a3 + 2094);
  *(_OWORD *)(a2 + 2080) = v151;
  *(_WORD *)(a2 + 2110) = 0;
  v152 = *(_OWORD *)(a3 + 2112);
  *(_OWORD *)(a2 + 2126) = *(_OWORD *)(a3 + 2126);
  *(_OWORD *)(a2 + 2112) = v152;
  *(_WORD *)(a2 + 2142) = 0;
  v153 = *(_OWORD *)(a3 + 2144);
  *(_OWORD *)(a2 + 2160) = *(_OWORD *)(a3 + 2160);
  *(_OWORD *)(a2 + 2144) = v153;
  *(_WORD *)(a2 + 2166) = 0;
  do
  {
    *(_DWORD *)(a2 + v150 + 5448) = *(unsigned __int16 *)(a3 + 5448 + v150);
    v150 += 4;
  }
  while (v150 != 16);
  if ((*(_BYTE *)(result + 232) & 1) != 0)
  {
    for (kk = 0; kk != 12; kk += 4)
      *(_DWORD *)(a2 + kk + 6024) = *(unsigned __int16 *)(a3 + 6024 + kk);
    for (mm = 0; mm != 128; mm += 32)
    {
      v168 = a2 + mm;
      v169 = *(_OWORD *)(a3 + mm + 16);
      *(_OWORD *)v168 = *(_OWORD *)(a3 + mm);
      *(_OWORD *)(v168 + 16) = v169;
      *(_WORD *)(v168 + 24) = 0;
    }
    v170 = 0;
    v171 = 1;
    do
    {
      v172 = 0;
      v173 = v171;
      v174 = a2 + (v170 << 6);
      v175 = a3 + 4896 + (v170 << 6);
      do
      {
        v176 = v174 + v172;
        *(_QWORD *)(v176 + 4896) = *(_QWORD *)(v175 + v172);
        *(_WORD *)(v176 + 4900) = 0;
        v172 += 8;
      }
      while (v172 != 64);
      v171 = 0;
      v170 = 1;
    }
    while ((v173 & 1) != 0);
    for (nn = 0; nn != 24; nn += 4)
      *(_DWORD *)(a2 + nn + 5552) = *(unsigned __int16 *)(a3 + 5552 + nn);
    v178 = 0;
    *(_WORD *)(a2 + 5576) = *(_WORD *)(a3 + 5576);
    *(_WORD *)(a2 + 5578) = 0;
    *(_WORD *)(a2 + 5580) = *(_WORD *)(a3 + 5580);
    *(_WORD *)(a2 + 5582) = 0;
    do
    {
      *(_DWORD *)(a2 + v178 + 5584) = *(unsigned __int16 *)(a3 + 5584 + v178);
      v178 += 4;
    }
    while (v178 != 24);
    for (i1 = 0; i1 != 12; i1 += 4)
      *(_DWORD *)(a2 + i1 + 5608) = *(unsigned __int16 *)(a3 + 5608 + i1);
    for (i2 = 0; i2 != 128; i2 += 16)
    {
      v181 = a2 + i2;
      *(_OWORD *)(v181 + 3376) = *(_OWORD *)(a3 + 3376 + i2);
      *(_WORD *)(v181 + 3390) = 0;
    }
    for (i3 = 0; i3 != 16; i3 += 4)
      *(_DWORD *)(a2 + i3 + 5620) = *(unsigned __int16 *)(a3 + 5620 + i3);
    for (i4 = 0; i4 != 20; i4 += 4)
      *(_DWORD *)(a2 + i4 + 5636) = *(unsigned __int16 *)(a3 + 5636 + i4);
    for (i5 = 0; i5 != 20; i5 += 4)
      *(_DWORD *)(a2 + i5 + 5656) = *(unsigned __int16 *)(a3 + 5656 + i5);
    for (i6 = 0; i6 != 24; i6 += 4)
      *(_DWORD *)(a2 + i6 + 5676) = *(unsigned __int16 *)(a3 + 5676 + i6);
    for (i7 = 0; i7 != 24; i7 += 4)
      *(_DWORD *)(a2 + i7 + 5700) = *(unsigned __int16 *)(a3 + 5700 + i7);
    for (i8 = 0; i8 != 36; i8 += 4)
      *(_DWORD *)(a2 + i8 + 5724) = *(unsigned __int16 *)(a3 + 5724 + i8);
    v188 = 0;
    v189 = a3 + 960;
    do
    {
      v190 = a2 + v188;
      v191 = *(_OWORD *)(v189 + v188 + 16);
      *(_OWORD *)(v190 + 960) = *(_OWORD *)(v189 + v188);
      *(_OWORD *)(v190 + 976) = v191;
      *(_WORD *)(v190 + 990) = 0;
      v188 += 32;
    }
    while (v188 != 288);
    v192 = 0;
    v193 = a3 + 5760;
    v194 = a2;
    do
    {
      for (i9 = 0; i9 != 12; i9 += 4)
        *(_DWORD *)(v194 + i9 + 5760) = *(unsigned __int16 *)(v193 + i9);
      ++v192;
      v194 += 12;
      v193 += 12;
    }
    while (v192 != 6);
    v196 = 0;
    v197 = a3 + 5832;
    v198 = a2;
    do
    {
      for (i10 = 0; i10 != 12; i10 += 4)
        *(_DWORD *)(v198 + i10 + 5832) = *(unsigned __int16 *)(v197 + i10);
      ++v196;
      v198 += 12;
      v197 += 12;
    }
    while (v196 != 3);
    v200 = 0;
    v201 = 1;
    do
    {
      v202 = 0;
      v203 = 3 * v200;
      v204 = v201;
      v205 = a2 + 12 * v200;
      do
      {
        *(_DWORD *)(v205 + v202 + 5868) = *(unsigned __int16 *)(a3 + 5868 + 4 * v203 + v202);
        v202 += 4;
      }
      while (v202 != 12);
      v201 = 0;
      v200 = 1;
    }
    while ((v204 & 1) != 0);
    v206 = 0;
    v207 = a3 + 5892;
    v208 = a2;
    do
    {
      for (i11 = 0; i11 != 12; i11 += 4)
        *(_DWORD *)(v208 + i11 + 5892) = *(unsigned __int16 *)(v207 + i11);
      ++v206;
      v208 += 12;
      v207 += 12;
    }
    while (v206 != 3);
    for (i12 = 0; i12 != 12; i12 += 4)
      *(_DWORD *)(a2 + i12 + 6036) = *(unsigned __int16 *)(a3 + 6036 + i12);
    for (i13 = 0; i13 != 16; i13 += 4)
      *(_DWORD *)(a2 + i13 + 5392) = *(unsigned __int16 *)(a3 + 5392 + i13);
    for (i14 = 0; i14 != 28; i14 += 4)
      *(_DWORD *)(a2 + i14 + 5420) = *(unsigned __int16 *)(a3 + 5420 + i14);
    for (i15 = 0; i15 != 32; i15 += 8)
    {
      v214 = a2 + i15;
      *(_QWORD *)(v214 + 5344) = *(_QWORD *)(a3 + 5344 + i15);
      *(_WORD *)(v214 + 5350) = 0;
    }
    for (i16 = 0; i16 != 176; i16 += 8)
    {
      v216 = a2 + i16;
      *(_QWORD *)(v216 + 5120) = *(_QWORD *)(a3 + 5120 + i16);
      *(_WORD *)(v216 + 5124) = 0;
    }
    for (i17 = 0; i17 != 88; i17 += 4)
      *(_DWORD *)(a2 + i17 + 6048) = *(unsigned __int16 *)(a3 + 6048 + i17);
    v218 = 0;
    v219 = a2 + 13248;
    v220 = a3 + 13248;
    *(_QWORD *)(a2 + 13504) = *(_QWORD *)(a3 + 13504);
    *(_WORD *)(a2 + 13510) = 0;
    v221 = 1;
    do
    {
      v222 = v221;
      v223 = v219 + (v218 << 7);
      v224 = v220 + (v218 << 7);
      v225 = *(_OWORD *)(v224 + 16);
      *(_OWORD *)v223 = *(_OWORD *)v224;
      *(_OWORD *)(v223 + 16) = v225;
      *(_WORD *)(v223 + 20) = 0;
      *(_WORD *)(v223 + 64) = *(_WORD *)(v224 + 64);
      *(_WORD *)(v223 + 66) = 0;
      v226 = (_WORD *)(a2 + 13318 + (v218 << 7));
      v227 = (__int16 *)(a3 + 13316 + (v218 << 7));
      v228 = 10;
      do
      {
        v229 = *v227;
        v227 += 2;
        *(v226 - 1) = v229;
        *v226 = 0;
        v226 += 2;
        --v228;
      }
      while (v228);
      v221 = 0;
      v230 = v219 + (v218 << 7);
      v231 = v220 + (v218 << 7);
      *(_QWORD *)(v230 + 32) = *(_QWORD *)(v231 + 32);
      *(_WORD *)(v230 + 38) = 0;
      *(_QWORD *)(v230 + 40) = *(_QWORD *)(v231 + 40);
      *(_WORD *)(v230 + 46) = 0;
      *(_QWORD *)(v230 + 48) = *(_QWORD *)(v231 + 48);
      *(_WORD *)(v230 + 54) = 0;
      *(_WORD *)(v230 + 56) = *(_WORD *)(v231 + 56);
      *(_WORD *)(v230 + 58) = 0;
      *(_DWORD *)(v230 + 60) = *(unsigned __int16 *)(v231 + 60);
      *(_WORD *)(v230 + 108) = *(_WORD *)(v231 + 108);
      *(_WORD *)(v230 + 110) = 0;
      v218 = 1;
    }
    while ((v222 & 1) != 0);
  }
  else
  {
    v154 = 0;
    *(_WORD *)(a2 + 6228) = *(_WORD *)(a3 + 6228);
    *(_WORD *)(a2 + 6230) = 0;
    *(_QWORD *)(a2 + 13792) = *(_QWORD *)(a3 + 13792);
    v155 = a2 + 13536;
    v156 = a3 + 13536;
    *(_WORD *)(a2 + 13798) = 0;
    v157 = 1;
    do
    {
      v158 = v157;
      v159 = v155 + (v154 << 7);
      v160 = v156 + (v154 << 7);
      v161 = *(_OWORD *)(v160 + 16);
      *(_OWORD *)v159 = *(_OWORD *)v160;
      *(_OWORD *)(v159 + 16) = v161;
      *(_WORD *)(v159 + 20) = 0;
      *(_WORD *)(v159 + 64) = *(_WORD *)(v160 + 64);
      *(_WORD *)(v159 + 66) = 0;
      v162 = (_WORD *)(a2 + 13606 + (v154 << 7));
      v163 = (__int16 *)(a3 + 13604 + (v154 << 7));
      v164 = 10;
      do
      {
        v165 = *v163;
        v163 += 2;
        *(v162 - 1) = v165;
        *v162 = 0;
        v162 += 2;
        --v164;
      }
      while (v164);
      v157 = 0;
      *(_DWORD *)(v155 + (v154 << 7) + 108) = *(unsigned __int16 *)(v156 + (v154 << 7) + 108);
      v154 = 1;
    }
    while ((v158 & 1) != 0);
  }
  return result;
}

uint64_t sub_218BA0A8C(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  uint64_t k;
  int v14;
  char *v15;
  int v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;

  v2 = 0;
  v3 = *a2;
  v4 = a2[46] + 4;
  v5 = 1 << (*((_BYTE *)a2 + 184) + 4) >> 1;
  v6 = result;
  do
  {
    for (i = 0; i != 82; ++i)
    {
      v3 = (((((v3 >> 3) ^ (v3 >> 12) ^ v3) ^ (v3 >> 1)) & 1) << 15) | (v3 >> 1);
      *(_BYTE *)(v6 + i) = (v5 + word_218BCF84A[(unsigned __int16)v3 >> 5]) >> v4;
    }
    ++v2;
    v6 += 82;
  }
  while (v2 != 73);
  v8 = (int)a2[23];
  v9 = -(int)v8;
  v10 = result + 83 * v9 + 249;
  for (j = 3; j != 73; ++j)
  {
    v12 = v10;
    for (k = 3; k != 79; ++k)
    {
      v14 = 0;
      if ((v8 & 0x80000000) == 0)
      {
        v15 = (char *)v12;
        v16 = -(int)v8;
        v17 = (char *)(a2 + 24);
        do
        {
          v18 = v15;
          v19 = -(int)v8;
          if (v16 | v9)
          {
            do
            {
              v21 = *v17++;
              v20 = v21;
              v22 = *v18++;
              v14 += v22 * v20;
              if (v19 >= v8)
                break;
              ++v19;
            }
            while (v19 | v16);
          }
          ++v16;
          v15 += 82;
        }
        while (v16 != 1);
      }
      v23 = result + 82 * j;
      v24 = ((v14 + (1 << a2[44] >> 1)) >> a2[44]) + *(char *)(v23 + k);
      if (v24 >= 127)
        v24 = 127;
      if (v24 <= -128)
        LOBYTE(v24) = 0x80;
      *(_BYTE *)(v23 + k) = v24;
      ++v12;
    }
    v10 += 82;
  }
  return result;
}

_BYTE *sub_218BA0BF0(_BYTE *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  return sub_218BA266C(a1, a2, a3, a4, 1, 1);
}

_BYTE *sub_218BA0BFC(_BYTE *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  return sub_218BA266C(a1, a2, a3, a4, 1, 0);
}

_BYTE *sub_218BA0C08(_BYTE *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  return sub_218BA266C(a1, a2, a3, a4, 0, 0);
}

_BYTE *sub_218BA0C14(_BYTE *result, unsigned __int8 *a2, uint64_t a3, int *a4, unint64_t a5, uint64_t a6, uint64_t a7, int a8, double a9, double a10, double a11, double a12, double a13, int32x2_t a14, int32x2_t a15, signed int a16)
{
  int v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  int32x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  _BOOL4 v25;
  unint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  int *v34;
  uint64_t v35;
  uint64_t i;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned __int8 *v51;
  _BYTE *v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  char v56;
  char v57;
  signed int v58;
  _DWORD *v59;
  signed int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  char v65;
  char v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  _BYTE *v70;
  unsigned __int8 *v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t *v75;
  int v76;
  int v77;
  int v78;
  int v79;
  char v80;
  char v81;
  signed int v82;
  uint64_t *v83;
  int32x2_t v84;
  signed int v85;
  signed int v86;
  signed int v87;
  _BYTE *v88;
  unsigned __int8 *v89;
  uint64_t v90;
  int32x2_t v91;
  int32x2_t v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  int v97;
  char v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  int v104;
  int v105;
  unsigned __int8 *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  int v118;
  uint64_t v119;
  _BYTE *v120;
  unsigned __int8 *v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  int v125;
  int v126;
  int v127;
  int v128;
  _DWORD v129[2];
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  v16 = a4[54];
  if (v16)
    v17 = 235;
  else
    v17 = 255;
  if (a4[53])
    v18 = a16 <= 0;
  else
    v18 = 1;
  v19 = *a4;
  if (v18)
    v20 = 1;
  else
    v20 = 2;
  v21 = vmovn_s64((int64x2_t)vcgeq_u64((uint64x2_t)vdupq_n_s64(v20 - 1), (uint64x2_t)xmmword_218BBBF10));
  v22 = vadd_s32(vdup_n_s32(a16), (int32x2_t)0xFFFFFFFF00000000);
  if ((v21.i8[0] & 1) != 0)
  {
    v23 = (int32x2_t)vand_s8((int8x8_t)vmla_lane_s32((int32x2_t)0xB20000000069, (int32x2_t)0x2500000000ADLL, v22, 0), (int8x8_t)0xFF00000000FFLL);
    v129[0] = vorr_s8((int8x8_t)v23, (int8x8_t)vdup_lane_s32(v23, 1)).u32[0] ^ v19;
  }
  if ((v21.i8[4] & 1) != 0)
  {
    v24 = (int32x2_t)vand_s8((int8x8_t)vmla_lane_s32((int32x2_t)0xB20000000069, (int32x2_t)0x2500000000ADLL, v22, 1), (int8x8_t)0xFF00000000FFLL);
    v129[1] = vorr_s8((int8x8_t)v24, (int8x8_t)vdup_lane_s32(v24, 1)).u32[0] ^ v19;
  }
  v25 = v16 != 0;
  if (a5)
  {
    LODWORD(v26) = 0;
    v27 = 16 * v25;
    if (a8 >= 2)
      v28 = 2;
    else
      v28 = a8;
    v100 = v28;
    LODWORD(v29) = a5;
    v101 = v20;
    v102 = a5;
    do
    {
      v104 = v29;
      v105 = v26;
      v29 = (int)v29;
      if ((int)v29 >= 32)
        v29 = 32;
      v119 = v29;
      LODWORD(v29) = a5 - v26;
      if ((int)a5 - (int)v26 >= 32)
        v30 = 32;
      else
        v30 = a5 - v26;
      v118 = v30;
      v31 = a4[53];
      if ((_DWORD)v26)
        v32 = v31 == 0;
      else
        v32 = 1;
      v33 = !v32;
      v34 = &v127;
      v35 = v20;
      if (!v32)
      {
        do
        {
          *v34 = *(v34 - 2);
          ++v34;
          --v35;
        }
        while (v35);
      }
      for (i = 0; i != v20; ++i)
      {
        v37 = v129[i];
        v38 = (((((v37 >> 3) ^ (v37 >> 12) ^ v37) ^ (v37 >> 1)) & 1) << 15) | (v37 >> 1);
        v129[i] = v38;
        *(&v125 + i) = BYTE1(v38);
      }
      if (v31)
        v39 = a16 == 0;
      else
        v39 = 1;
      if (v39)
        v40 = 0;
      else
        v40 = v100;
      if ((int)v29 >= 2)
        LODWORD(v29) = 2;
      if (v33)
        v29 = v29;
      else
        v29 = 0;
      v123 = v29;
      v114 = v40;
      v124 = result;
      if ((int)v40 < a8)
      {
        v41 = 2 * (v125 & 0xF);
        v42 = 2 * (v127 & 0xF);
        v43 = (int)v40;
        v44 = a3 * (int)v40;
        v45 = v44 + (int)v123;
        v46 = &result[v45];
        v47 = &a2[v45];
        v48 = ((v125 >> 3) & 0xFFFFFFFE) + 9;
        v49 = ((v127 >> 3) & 0xFFFFFFFE) + 41;
        do
        {
          if ((int)v123 < v118)
          {
            v50 = v48 + v123;
            v51 = v47;
            v52 = v46;
            v53 = v119 - (int)v123;
            do
            {
              v54 = *v51++;
              v55 = ((*(unsigned __int8 *)(a6 + v54) * *(char *)(a7 + 82 * ((int)v43 + v41 + 9) + v50)
                    + (1 << a4[22] >> 1)) >> a4[22])
                  + v54;
              if (v55 >= v17)
                v56 = v17;
              else
                v56 = v55;
              if (v55 >= v27)
                v57 = v56;
              else
                v57 = v27;
              *v52++ = v57;
              ++v50;
              --v53;
            }
            while (v53);
          }
          if ((int)v123 >= 1)
          {
            v58 = v49;
            v59 = (_DWORD *)qword_218BCF580 + 1;
            v60 = v48;
            v61 = v44;
            v62 = v123;
            do
            {
              v63 = (*v59 * *(char *)(a7 + 82 * ((int)v43 + 9 + v41) + v60)
                   + *(v59 - 1) * *(char *)(a7 + 82 * ((int)v43 + 9 + v42) + v58)
                   + 16) >> 5;
              if (v63 >= 127)
                v63 = 127;
              if (v63 <= -128)
                v63 = -128;
              v64 = ((v63 * *(unsigned __int8 *)(a6 + a2[v61]) + (1 << a4[22] >> 1)) >> a4[22]) + a2[v61];
              if (v64 >= v17)
                v65 = v17;
              else
                v65 = v64;
              if (v64 >= v27)
                v66 = v65;
              else
                v66 = v27;
              v124[v61++] = v66;
              ++v60;
              v59 += 2;
              ++v58;
              --v62;
            }
            while (v62);
          }
          ++v43;
          v46 += a3;
          v47 += a3;
          v44 += a3;
        }
        while (v43 != a8);
      }
      v106 = a2;
      if ((int)v114 >= 1)
      {
        v122 = 0;
        v67 = (v125 >> 3) & 0xFFFFFFFE;
        v116 = 2 * (v125 & 0xF);
        v68 = (v126 >> 3) & 0xFFFFFFFE;
        v115 = 2 * (v126 & 0xF);
        v69 = v119 - (int)v123;
        v70 = &v124[(int)v123];
        v71 = &a2[(int)v123];
        v112 = 2 * (v128 & 0xF);
        v111 = 2 * (v127 & 0xF);
        v72 = v123 + 9 + v68;
        v73 = v123 + 9 + v67;
        v110 = ((v127 >> 3) & 0xFFFFFFFE) + 41;
        v108 = v67 + 9;
        v109 = ((v128 >> 3) & 0xFFFFFFFE) + 41;
        v107 = v68 + 9;
        v120 = v124;
        v121 = a2;
        v113 = v69;
        do
        {
          if ((int)v123 < v118)
          {
            v74 = 0;
            v75 = &qword_218BCF580[v122];
            v76 = *(_DWORD *)v75;
            v77 = *((_DWORD *)v75 + 1);
            do
            {
              v78 = (v77 * *(char *)(a7 + 82 * ((int)v122 + v116 + 9) + v73 + (int)v74)
                   + v76 * *(char *)(a7 + 82 * ((int)v122 + v115 + 41) + v72 + (int)v74)
                   + 16) >> 5;
              if (v78 >= 127)
                v78 = 127;
              if (v78 <= -128)
                v78 = -128;
              v79 = ((v78 * *(unsigned __int8 *)(a6 + v71[v74]) + (1 << a4[22] >> 1)) >> a4[22]) + v71[v74];
              if (v79 >= v17)
                v80 = v17;
              else
                v80 = v79;
              if (v79 >= v27)
                v81 = v80;
              else
                v81 = v27;
              v70[v74++] = v81;
            }
            while (v69 != v74);
          }
          if ((int)v123 >= 1)
          {
            v82 = v110;
            v83 = qword_218BCF580;
            v84 = (int32x2_t)qword_218BCF580[v122];
            v85 = v107;
            v86 = v108;
            v87 = v109;
            v88 = v120;
            v89 = v121;
            v90 = v123;
            do
            {
              v91 = (int32x2_t)*v83++;
              a14.i8[0] = *(_BYTE *)(a7 + 82 * (v112 + (int)v122 + 41) + v87);
              a14.i8[4] = *(_BYTE *)(a7 + 82 * (v116 + (int)v122 + 9) + v86);
              a15.i8[0] = *(_BYTE *)(a7 + 82 * (v115 + (int)v122 + 41) + v85);
              a15.i8[4] = *(_BYTE *)(a7 + 82 * (v111 + (int)v122 + 9) + v82);
              a14 = vshr_n_s32(vshl_n_s32(a14, 0x18uLL), 0x18uLL);
              a15 = vmla_s32(vmul_s32(vrev64_s32(v91), vshr_n_s32(vshl_n_s32(a15, 0x18uLL), 0x18uLL)), v91, a14);
              v92 = vmul_s32(vmax_s32(vmin_s32(vshr_n_s32(vadd_s32(a15, (int32x2_t)0x1000000010), 5uLL), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL), v84);
              v93 = (v92.i32[0] + v92.i32[1] + 16) >> 5;
              if (v93 >= 127)
                v93 = 127;
              v95 = *v89++;
              v94 = v95;
              v96 = *(unsigned __int8 *)(a6 + v95);
              if (v93 <= -128)
                v93 = -128;
              v97 = ((v93 * v96 + (1 << a4[22] >> 1)) >> a4[22]) + v94;
              if (v97 >= v17)
                v98 = v17;
              else
                v98 = v97;
              if (v97 >= v27)
                v99 = v98;
              else
                v99 = v27;
              *v88++ = v99;
              ++v82;
              ++v87;
              ++v86;
              ++v85;
              --v90;
            }
            while (v90);
          }
          v70 += a3;
          v71 += a3;
          v120 += a3;
          v121 += a3;
          ++v122;
          v69 = v113;
        }
        while (v122 != v114);
      }
      v26 = (v105 + 32);
      LODWORD(v29) = v104 - 32;
      result = v124 + 32;
      a2 = v106 + 32;
      v20 = v101;
      LODWORD(a5) = v102;
    }
    while (v26 < v102);
  }
  return result;
}

uint64_t sub_218BA1348(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, unint64_t a5, uint64_t a6, uint64_t a7, int a8, signed int a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  return sub_218BA1CA4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, 1u, 1u);
}

uint64_t sub_218BA1384(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, unint64_t a5, uint64_t a6, uint64_t a7, int a8, signed int a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  return sub_218BA1CA4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, 1u, 0);
}

uint64_t sub_218BA13C0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, unint64_t a5, uint64_t a6, uint64_t a7, int a8, signed int a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  return sub_218BA1CA4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, 0, 0);
}

void sub_218BA13F8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, signed int a9)
{
  BOOL v13;
  int v14;
  uint64_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  uint64_t v20;
  unsigned int i;
  int v22;
  BOOL v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t j;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  _DWORD v36[2];
  uint64_t v37;
  _DWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (a4[53])
    v13 = a9 <= 0;
  else
    v13 = 1;
  v14 = *a4;
  if (v13)
    v15 = 1;
  else
    v15 = 2;
  v16 = vmovn_s64((int64x2_t)vcgeq_u64((uint64x2_t)vdupq_n_s64(v15 - 1), (uint64x2_t)xmmword_218BBBF10));
  v17 = vadd_s32(vdup_n_s32(a9), (int32x2_t)0xFFFFFFFF00000000);
  if ((v16.i8[0] & 1) != 0)
  {
    v18 = (int32x2_t)vand_s8((int8x8_t)vmla_lane_s32((int32x2_t)0xB20000000069, (int32x2_t)0x2500000000ADLL, v17, 0), (int8x8_t)0xFF00000000FFLL);
    v38[0] = vorr_s8((int8x8_t)v18, (int8x8_t)vdup_lane_s32(v18, 1)).u32[0] ^ v14;
  }
  if ((v16.i8[4] & 1) != 0)
  {
    v19 = (int32x2_t)vand_s8((int8x8_t)vmla_lane_s32((int32x2_t)0xB20000000069, (int32x2_t)0x2500000000ADLL, v17, 1), (int8x8_t)0xFF00000000FFLL);
    v38[1] = vorr_s8((int8x8_t)v19, (int8x8_t)vdup_lane_s32(v19, 1)).u32[0] ^ v14;
  }
  if (a5)
  {
    v20 = 0;
    for (i = 0; i < a5; v20 = i)
    {
      v22 = a4[53];
      if (i)
        v23 = v22 == 0;
      else
        v23 = 1;
      v24 = !v23;
      v25 = &v37;
      v26 = v15;
      if (!v23)
      {
        do
        {
          *(_DWORD *)v25 = *((_DWORD *)v25 - 2);
          v25 = (uint64_t *)((char *)v25 + 4);
          --v26;
        }
        while (v26);
      }
      for (j = 0; j != v15; ++j)
      {
        v28 = v38[j];
        v29 = (((((v28 >> 3) ^ (v28 >> 12) ^ v28) ^ (v28 >> 1)) & 1) << 15) | (v28 >> 1);
        v38[j] = v29;
        v36[j] = BYTE1(v29);
      }
      if (a9)
        v30 = v22 == 0;
      else
        v30 = 1;
      v31 = !v30;
      if (v24)
        v31 |= 2u;
      sub_218B470EC(a1 + v20, a2 + v20, a3, a6, a4[22], a7, (uint64_t)v36, a8, a4[54], v31);
      i += 32;
    }
  }
}

void sub_218BA15F4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, unint64_t a5, uint64_t a6, uint64_t a7, int a8, signed int a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  BOOL v14;
  int v15;
  uint64_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t i;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  _DWORD v40[2];
  uint64_t v41;
  _DWORD v42[2];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a4[53])
    v14 = a9 <= 0;
  else
    v14 = 1;
  v15 = *a4;
  if (v14)
    v16 = 1;
  else
    v16 = 2;
  v17 = vmovn_s64((int64x2_t)vcgeq_u64((uint64x2_t)vdupq_n_s64(v16 - 1), (uint64x2_t)xmmword_218BBBF10));
  v18 = vadd_s32(vdup_n_s32(a9), (int32x2_t)0xFFFFFFFF00000000);
  if ((v17.i8[0] & 1) != 0)
  {
    v19 = (int32x2_t)vand_s8((int8x8_t)vmla_lane_s32((int32x2_t)0xB20000000069, (int32x2_t)0x2500000000ADLL, v18, 0), (int8x8_t)0xFF00000000FFLL);
    v42[0] = vorr_s8((int8x8_t)v19, (int8x8_t)vdup_lane_s32(v19, 1)).u32[0] ^ v15;
  }
  if ((v17.i8[4] & 1) != 0)
  {
    v20 = (int32x2_t)vand_s8((int8x8_t)vmla_lane_s32((int32x2_t)0xB20000000069, (int32x2_t)0x2500000000ADLL, v18, 1), (int8x8_t)0xFF00000000FFLL);
    v42[1] = vorr_s8((int8x8_t)v20, (int8x8_t)vdup_lane_s32(v20, 1)).u32[0] ^ v15;
  }
  if (a5)
  {
    v21 = 0;
    v22 = 0;
    v23 = a8;
    do
    {
      v24 = a4[53];
      if (v22)
        v25 = v24 == 0;
      else
        v25 = 1;
      v26 = !v25;
      v27 = &v41;
      v28 = v16;
      if (!v25)
      {
        do
        {
          *(_DWORD *)v27 = *((_DWORD *)v27 - 2);
          v27 = (uint64_t *)((char *)v27 + 4);
          --v28;
        }
        while (v28);
      }
      for (i = 0; i != v16; ++i)
      {
        v30 = v42[i];
        v31 = (((((v30 >> 3) ^ (v30 >> 12) ^ v30) ^ (v30 >> 1)) & 1) << 15) | (v30 >> 1);
        v42[i] = v31;
        v40[i] = BYTE1(v31);
      }
      if (a9)
        v32 = v24 == 0;
      else
        v32 = 1;
      v33 = !v32;
      if (v26)
        v33 |= 2u;
      if (a4[9])
        v33 |= 4u;
      sub_218B474E4(a1 + v21, a2 + v21, a3, a6, (uint64_t)a4, a7, a10 + 2 * v22, a11, (uint64_t)v40, v23, a12, a13, v33);
      v22 += 16;
      v21 = v22;
    }
    while (v22 < a5);
  }
}

void sub_218BA1830(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, unint64_t a5, uint64_t a6, uint64_t a7, int a8, signed int a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  BOOL v14;
  int v15;
  uint64_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t i;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  _DWORD v40[2];
  uint64_t v41;
  _DWORD v42[2];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a4[53])
    v14 = a9 <= 0;
  else
    v14 = 1;
  v15 = *a4;
  if (v14)
    v16 = 1;
  else
    v16 = 2;
  v17 = vmovn_s64((int64x2_t)vcgeq_u64((uint64x2_t)vdupq_n_s64(v16 - 1), (uint64x2_t)xmmword_218BBBF10));
  v18 = vadd_s32(vdup_n_s32(a9), (int32x2_t)0xFFFFFFFF00000000);
  if ((v17.i8[0] & 1) != 0)
  {
    v19 = (int32x2_t)vand_s8((int8x8_t)vmla_lane_s32((int32x2_t)0xB20000000069, (int32x2_t)0x2500000000ADLL, v18, 0), (int8x8_t)0xFF00000000FFLL);
    v42[0] = vorr_s8((int8x8_t)v19, (int8x8_t)vdup_lane_s32(v19, 1)).u32[0] ^ v15;
  }
  if ((v17.i8[4] & 1) != 0)
  {
    v20 = (int32x2_t)vand_s8((int8x8_t)vmla_lane_s32((int32x2_t)0xB20000000069, (int32x2_t)0x2500000000ADLL, v18, 1), (int8x8_t)0xFF00000000FFLL);
    v42[1] = vorr_s8((int8x8_t)v20, (int8x8_t)vdup_lane_s32(v20, 1)).u32[0] ^ v15;
  }
  if (a5)
  {
    v21 = 0;
    v22 = 0;
    v23 = a8;
    do
    {
      v24 = a4[53];
      if (v22)
        v25 = v24 == 0;
      else
        v25 = 1;
      v26 = !v25;
      v27 = &v41;
      v28 = v16;
      if (!v25)
      {
        do
        {
          *(_DWORD *)v27 = *((_DWORD *)v27 - 2);
          v27 = (uint64_t *)((char *)v27 + 4);
          --v28;
        }
        while (v28);
      }
      for (i = 0; i != v16; ++i)
      {
        v30 = v42[i];
        v31 = (((((v30 >> 3) ^ (v30 >> 12) ^ v30) ^ (v30 >> 1)) & 1) << 15) | (v30 >> 1);
        v42[i] = v31;
        v40[i] = BYTE1(v31);
      }
      if (a9)
        v32 = v24 == 0;
      else
        v32 = 1;
      v33 = !v32;
      if (v26)
        v33 |= 2u;
      if (a4[9])
        v33 |= 4u;
      sub_218B475EC(a1 + v21, a2 + v21, a3, a6, (uint64_t)a4, a7, a10 + 2 * v22, a11, (uint64_t)v40, v23, a12, a13, v33);
      v22 += 16;
      v21 = v22;
    }
    while (v22 < a5);
  }
}

void sub_218BA1A6C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, unint64_t a5, uint64_t a6, uint64_t a7, int a8, signed int a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  BOOL v14;
  int v15;
  uint64_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t i;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  _DWORD v40[2];
  uint64_t v41;
  _DWORD v42[2];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a4[53])
    v14 = a9 <= 0;
  else
    v14 = 1;
  v15 = *a4;
  if (v14)
    v16 = 1;
  else
    v16 = 2;
  v17 = vmovn_s64((int64x2_t)vcgeq_u64((uint64x2_t)vdupq_n_s64(v16 - 1), (uint64x2_t)xmmword_218BBBF10));
  v18 = vadd_s32(vdup_n_s32(a9), (int32x2_t)0xFFFFFFFF00000000);
  if ((v17.i8[0] & 1) != 0)
  {
    v19 = (int32x2_t)vand_s8((int8x8_t)vmla_lane_s32((int32x2_t)0xB20000000069, (int32x2_t)0x2500000000ADLL, v18, 0), (int8x8_t)0xFF00000000FFLL);
    v42[0] = vorr_s8((int8x8_t)v19, (int8x8_t)vdup_lane_s32(v19, 1)).u32[0] ^ v15;
  }
  if ((v17.i8[4] & 1) != 0)
  {
    v20 = (int32x2_t)vand_s8((int8x8_t)vmla_lane_s32((int32x2_t)0xB20000000069, (int32x2_t)0x2500000000ADLL, v18, 1), (int8x8_t)0xFF00000000FFLL);
    v42[1] = vorr_s8((int8x8_t)v20, (int8x8_t)vdup_lane_s32(v20, 1)).u32[0] ^ v15;
  }
  if (a5)
  {
    v21 = 0;
    v22 = 0;
    v23 = a8;
    do
    {
      v24 = a4[53];
      if (v22)
        v25 = v24 == 0;
      else
        v25 = 1;
      v26 = !v25;
      v27 = &v41;
      v28 = v16;
      if (!v25)
      {
        do
        {
          *(_DWORD *)v27 = *((_DWORD *)v27 - 2);
          v27 = (uint64_t *)((char *)v27 + 4);
          --v28;
        }
        while (v28);
      }
      for (i = 0; i != v16; ++i)
      {
        v30 = v42[i];
        v31 = (((((v30 >> 3) ^ (v30 >> 12) ^ v30) ^ (v30 >> 1)) & 1) << 15) | (v30 >> 1);
        v42[i] = v31;
        v40[i] = BYTE1(v31);
      }
      if (a9)
        v32 = v24 == 0;
      else
        v32 = 1;
      v33 = !v32;
      if (v26)
        v33 |= 2u;
      if (a4[9])
        v33 |= 4u;
      sub_218B47700(a1 + v21, a2 + v21, a3, a6, (uint64_t)a4, a7, a10 + v21, a11, (uint64_t)v40, v23, a12, a13, v33);
      v22 += 32;
      v21 = v22;
    }
    while (v22 < a5);
  }
}

uint64_t sub_218BA1CA4(uint64_t result, uint64_t a2, uint64_t a3, int *a4, unint64_t a5, uint64_t a6, uint64_t a7, int a8, signed int a9, uint64_t a10, uint64_t a11, int a12, int a13, unsigned int a14, unsigned int a15)
{
  int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  int32x2_t v20;
  int32x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  _BOOL4 v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int *v28;
  uint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  int *v34;
  uint64_t v35;
  uint64_t i;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  char v56;
  char v57;
  int v58;
  _DWORD *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  char v69;
  char v70;
  uint64_t v71;
  int v72;
  int v73;
  int *v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  unsigned __int8 *v82;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  char v87;
  char v88;
  uint64_t v89;
  int *v90;
  int v91;
  int v92;
  _DWORD *v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unsigned __int8 *v99;
  unsigned int v100;
  int v101;
  int v102;
  int v103;
  char v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  int v110;
  unsigned int v111;
  int v112;
  signed int v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  unsigned int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  int v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  _DWORD *v131;
  _DWORD *v132;
  _DWORD *v133;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  int v138;
  _DWORD v139[2];
  uint64_t v140;

  v122 = result;
  v140 = *MEMORY[0x24BDAC8D0];
  v15 = a4[54];
  if (a13)
    v16 = 235;
  else
    v16 = 240;
  if (!v15)
    v16 = 255;
  if (a4[53])
    v17 = a9 <= 0;
  else
    v17 = 1;
  v18 = *a4;
  if (v17)
    v19 = 1;
  else
    v19 = 2;
  v20 = vmovn_s64((int64x2_t)vcgeq_u64((uint64x2_t)vdupq_n_s64(v19 - 1), (uint64x2_t)xmmword_218BBBF10));
  v21 = vadd_s32(vdup_n_s32(a9), (int32x2_t)0xFFFFFFFF00000000);
  if ((v20.i8[0] & 1) != 0)
  {
    v22 = (int32x2_t)vand_s8((int8x8_t)vmla_lane_s32((int32x2_t)0xB20000000069, (int32x2_t)0x2500000000ADLL, v21, 0), (int8x8_t)0xFF00000000FFLL);
    v139[0] = vorr_s8((int8x8_t)v22, (int8x8_t)vdup_lane_s32(v22, 1)).u32[0] ^ v18;
  }
  if ((v20.i8[4] & 1) != 0)
  {
    v23 = (int32x2_t)vand_s8((int8x8_t)vmla_lane_s32((int32x2_t)0xB20000000069, (int32x2_t)0x2500000000ADLL, v21, 1), (int8x8_t)0xFF00000000FFLL);
    v139[1] = vorr_s8((int8x8_t)v23, (int8x8_t)vdup_lane_s32(v23, 1)).u32[0] ^ v18;
  }
  v24 = v15 != 0;
  if (a5)
  {
    v25 = 0;
    v26 = 16 * v24;
    result = 0x20u >> a14;
    v27 = 2u >> a15;
    v111 = 2u >> a15;
    if ((int)(2u >> a15) >= a8)
      v27 = a8;
    v28 = &a4[a12];
    v113 = 2u >> a14;
    v133 = v28 + 49;
    v132 = v28 + 47;
    v131 = v28 + 51;
    v118 = (0x20u >> a15) + 3;
    v110 = result + 3;
    LODWORD(v29) = a5;
    v107 = v19;
    v108 = a5;
    v106 = 0x20u >> a14;
    do
    {
      v112 = v29;
      v29 = (int)v29;
      if ((int)v29 >= result)
        v29 = result;
      v129 = v29;
      v30 = a5 - v25;
      if ((int)result < (int)(a5 - v25))
        v30 = result;
      v121 = v30;
      v31 = a4[53];
      if (v25)
        v32 = v31 == 0;
      else
        v32 = 1;
      v33 = !v32;
      v34 = &v137;
      v35 = v19;
      if (!v32)
      {
        do
        {
          *v34 = *(v34 - 2);
          ++v34;
          --v35;
        }
        while (v35);
      }
      for (i = 0; i != v19; ++i)
      {
        v37 = v139[i];
        v38 = (((((v37 >> 3) ^ (v37 >> 12) ^ v37) ^ (v37 >> 1)) & 1) << 15) | (v37 >> 1);
        v139[i] = v38;
        *(&v135 + i) = BYTE1(v38);
      }
      if (v31)
        v39 = a9 == 0;
      else
        v39 = 1;
      if (v39)
        v40 = 0;
      else
        v40 = v27;
      v41 = 2u >> a14;
      if (v113 >= v121)
        v41 = v121;
      if (v33)
        v42 = v41;
      else
        v42 = 0;
      v134 = v42;
      if ((int)v40 < a8)
      {
        v43 = ((v135 & 0xF) + 3) * v111;
        v44 = ((v137 & 0xF) + 3) * v111;
        v45 = (int)v40;
        v46 = ((v135 >> 4) + 3) * v113 + 3;
        v47 = v110 + ((v137 >> 4) + 3) * v113;
        do
        {
          if ((int)v134 < v121)
          {
            v48 = v134;
            v49 = v129 - (int)v134;
            do
            {
              v50 = v25 + v48;
              v51 = (unsigned __int8 *)(a10 + (int)((_DWORD)v45 << a15) * a11 + (int)((_DWORD)v50 << a14));
              v52 = *v51;
              if (a14)
                v52 = ((v52 + v51[1] + 1) >> 1);
              v53 = *(unsigned __int8 *)(a2 + v45 * a3 + v50);
              if (!a4[9])
              {
                v54 = *v131 + ((int)(*v133 * v52 + *v132 * v53) >> 6);
                if (v54 >= 255)
                  v54 = 255;
                v52 = v54 & ~(v54 >> 31);
              }
              v55 = ((*(unsigned __int8 *)(a6 + v52) * *(char *)(a7 + 82 * ((int)v45 + v43 + 3) + v46 + v48)
                    + (1 << a4[22] >> 1)) >> a4[22])
                  + v53;
              if (v55 >= v16)
                v56 = v16;
              else
                v56 = v55;
              if (v55 >= v26)
                v57 = v56;
              else
                v57 = v26;
              *(_BYTE *)(v122 + v45 * a3 + v50) = v57;
              ++v48;
              --v49;
            }
            while (v49);
          }
          if ((int)v134 >= 1)
          {
            v58 = 0;
            v59 = (_DWORD *)((char *)&unk_218BCF590 + 16 * a14 + 4);
            v60 = v134;
            do
            {
              v61 = (*v59 * *(char *)(a7 + 82 * (v43 + (int)v45 + 3) + v46 + v58)
                   + *(v59 - 1) * *(char *)(a7 + 82 * (v44 + (int)v45 + 3) + v47 + v58)
                   + 16) >> 5;
              if (v61 >= 127)
                v61 = 127;
              if (v61 <= -128)
                v62 = -128;
              else
                v62 = v61;
              v63 = v25 + v58;
              v64 = (unsigned __int8 *)(a10 + (int)((_DWORD)v45 << a15) * a11 + (int)((_DWORD)v63 << a14));
              v65 = *v64;
              if (a14)
                v65 = ((v65 + v64[1] + 1) >> 1);
              v66 = *(unsigned __int8 *)(a2 + v45 * a3 + v63);
              if (!a4[9])
              {
                v67 = *v131 + ((int)(*v133 * v65 + *v132 * v66) >> 6);
                if (v67 >= 255)
                  v67 = 255;
                v65 = v67 & ~(v67 >> 31);
              }
              v59 += 2;
              v68 = ((v62 * *(unsigned __int8 *)(a6 + v65) + (1 << a4[22] >> 1)) >> a4[22]) + v66;
              if (v68 >= v16)
                v69 = v16;
              else
                v69 = v68;
              if (v68 >= v26)
                v70 = v69;
              else
                v70 = v26;
              *(_BYTE *)(v122 + v45 * a3 + v63) = v70;
              ++v58;
              --v60;
            }
            while (v60);
          }
          ++v45;
        }
        while (v45 != a8);
      }
      if ((int)v40 >= 1)
      {
        v71 = 0;
        v120 = ((v135 & 0xF) + 3) * v111;
        v119 = ((v136 & 0xF) + 3) * v111;
        v116 = ((v138 & 0xF) + 3) * v111;
        v115 = ((v137 & 0xF) + 3) * v111;
        v114 = v129 - (int)v134;
        v72 = ((v136 >> 4) + 3) * v113 + 3;
        v127 = ((v135 >> 4) + 3) * v113 + 3;
        v130 = v110 + ((v137 >> 4) + 3) * v113;
        v128 = v110 + ((v138 >> 4) + 3) * v113;
        v73 = v72;
        v117 = v72;
        do
        {
          v125 = (_DWORD)v71 << a15;
          if ((int)v134 < v121)
          {
            v74 = (int *)((char *)&unk_218BCF590 + 16 * a15 + 8 * v71);
            v75 = *v74;
            v76 = v74[1];
            v77 = v134;
            v78 = v114;
            do
            {
              v79 = (v76 * *(char *)(a7 + 82 * ((int)v71 + v120 + 3) + v127 + v77)
                   + v75 * *(char *)(a7 + 82 * (int)(v118 + v71 + v119) + v72 + v77)
                   + 16) >> 5;
              if (v79 >= 127)
                v79 = 127;
              if (v79 <= -128)
                v80 = -128;
              else
                v80 = v79;
              v81 = v25 + v77;
              v82 = (unsigned __int8 *)(a10 + v125 * a11 + (int)((_DWORD)v81 << a14));
              v83 = *v82;
              if (a14)
                v83 = ((v83 + v82[1] + 1) >> 1);
              v84 = *(unsigned __int8 *)(a2 + v71 * a3 + v81);
              if (!a4[9])
              {
                v85 = *v131 + ((int)(*v133 * v83 + *v132 * v84) >> 6);
                if (v85 >= 255)
                  v85 = 255;
                v83 = v85 & ~(v85 >> 31);
              }
              v86 = ((v80 * *(unsigned __int8 *)(a6 + v83) + (1 << a4[22] >> 1)) >> a4[22]) + v84;
              if (v86 >= v16)
                v87 = v16;
              else
                v87 = v86;
              if (v86 >= v26)
                v88 = v87;
              else
                v88 = v26;
              *(_BYTE *)(v122 + v71 * a3 + v81) = v88;
              ++v77;
              --v78;
            }
            while (v78);
          }
          v126 = v71;
          if ((int)v134 >= 1)
          {
            v89 = 0;
            v90 = (int *)((char *)&unk_218BCF590 + 16 * a15 + 8 * v71);
            v92 = *v90;
            v91 = v90[1];
            v93 = (_DWORD *)((char *)&unk_218BCF590 + 16 * a14 + 4);
            do
            {
              v94 = *(v93 - 1);
              v95 = (*v93 * *(char *)(a7 + 82 * (int)(v119 + v118 + v71) + v73 + (int)v89)
                   + v94 * *(char *)(a7 + 82 * (int)(v116 + v118 + v71) + v128 + (int)v89)
                   + 16) >> 5;
              if (v95 >= 127)
                v95 = 127;
              if (v95 <= -128)
                v95 = -128;
              v96 = (v94 * *(char *)(a7 + 82 * (v115 + (int)v71 + 3) + v130 + (int)v89)
                   + *v93 * *(char *)(a7 + 82 * (v120 + (int)v71 + 3) + v127 + (int)v89)
                   + 16) >> 5;
              if (v96 >= 127)
                v96 = 127;
              if (v96 <= -128)
                v96 = -128;
              v97 = (v96 * v91 + v95 * v92 + 16) >> 5;
              if (v97 >= 127)
                v97 = 127;
              if (v97 <= -128)
                v98 = -128;
              else
                v98 = v97;
              v99 = (unsigned __int8 *)(a10 + v125 * a11 + (int)((v25 + (_DWORD)v89) << a14));
              v100 = *v99;
              if (a14)
                v100 = ((v100 + v99[1] + 1) >> 1);
              v101 = *(unsigned __int8 *)(a2 + v71 * a3 + v25 + v89);
              if (!a4[9])
              {
                v102 = *v131 + ((int)(*v133 * v100 + *v132 * v101) >> 6);
                if (v102 >= 255)
                  v102 = 255;
                v100 = v102 & ~(v102 >> 31);
              }
              v93 += 2;
              v103 = ((v98 * *(unsigned __int8 *)(a6 + v100) + (1 << a4[22] >> 1)) >> a4[22]) + v101;
              if (v103 >= v16)
                v104 = v16;
              else
                v104 = v103;
              if (v103 >= v26)
                v105 = v104;
              else
                v105 = v26;
              *(_BYTE *)(v122 + v71 * a3 + v25 + v89++) = v105;
            }
            while (v134 != v89);
          }
          ++v71;
          v72 = v117;
        }
        while (v126 + 1 != v40);
      }
      result = 0x20u >> a14;
      v19 = v107;
      v25 += v106;
      LODWORD(v29) = v112 - v106;
      LODWORD(a5) = v108;
    }
    while (v108 > v25);
  }
  return result;
}

_BYTE *sub_218BA266C(_BYTE *result, uint64_t a2, _DWORD *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  int v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int v41;
  _BYTE *v42;
  int v43;
  uint64_t v44;
  uint64_t v47;

  v6 = 0;
  if (a4)
    v7 = 18904;
  else
    v7 = 46372;
  v8 = *a3 ^ v7;
  v9 = a3[46] + 4;
  if (a5)
    v10 = 44;
  else
    v10 = 82;
  if (a6)
    v11 = 38;
  else
    v11 = 73;
  v12 = result;
  do
  {
    v13 = v12;
    v14 = v10;
    do
    {
      v8 = (((((v8 >> 3) ^ (v8 >> 12) ^ v8) ^ (v8 >> 1)) & 1) << 15) | (v8 >> 1);
      *v13++ = ((1 << v9 >> 1) + word_218BCF84A[(unsigned __int16)v8 >> 5]) >> v9;
      --v14;
    }
    while (v14);
    ++v6;
    v12 += 82;
  }
  while (v6 != v11);
  v15 = a3[23];
  v16 = (uint64_t)&a3[7 * a4 + 30];
  if (v15 >= 0)
    v17 = a3[23];
  else
    v17 = -v15;
  v18 = (v10 - 3);
  v19 = (v15 + v17);
  v20 = v19 + 1;
  v21 = v19 + 1;
  v22 = (uint64_t)&result[-83 * v15 + 249];
  v23 = 3;
  v44 = v11;
  do
  {
    v47 = v22;
    v24 = 3;
    do
    {
      v25 = 0;
      if ((v15 & 0x80000000) == 0)
      {
        v26 = (char *)v22;
        v27 = -v15;
        v28 = (char *)v16;
        do
        {
          v29 = &v28[v20];
          v30 = v26;
          v31 = v21;
          v32 = -v15;
          while (v32 | v27)
          {
            v34 = *v28++;
            v33 = v34;
            v35 = *v30++;
            v25 += v35 * v33;
            ++v32;
            if (!--v31)
            {
              v28 = v29;
              goto LABEL_31;
            }
          }
          if (a3[1])
          {
            v36 = 0;
            v37 = 0;
            v38 = a2 + 82 * ((((int)v23 - 3) << a6) + 3) + (((int)v24 - 3) << a5) + 3;
            do
            {
              v39 = (char *)v38;
              v40 = (a5 + 1);
              do
              {
                v41 = *v39++;
                v37 += v41;
                --v40;
              }
              while (v40);
              ++v36;
              v38 += 82;
            }
            while (v36 != a6 + 1);
            v25 += ((int)(v37 + ((1 << (a6 + a5)) >> 1)) >> (a6 + a5)) * *v28;
          }
LABEL_31:
          ++v27;
          v26 += 82;
        }
        while (v27 != 1);
      }
      v42 = &result[82 * v23];
      v43 = ((v25 + (1 << a3[44] >> 1)) >> a3[44]) + (char)v42[v24];
      if (v43 >= 127)
        v43 = 127;
      if (v43 <= -128)
        LOBYTE(v43) = 0x80;
      v42[v24++] = v43;
      ++v22;
    }
    while (v24 != v18);
    ++v23;
    v22 = v47 + 82;
  }
  while (v23 != v44);
  return result;
}

uint64_t sub_218BA2904(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v3 = *(_DWORD *)(a1 + 64);
  v4 = (int)(((*(_DWORD *)(a1 + 56) + 127) & 0xFFFFFF80) << (*(_DWORD *)(a1 + 68) > 8));
  v5 = v4 >> (v3 != 3);
  if (v3)
    v6 = v4 >> (v3 != 3);
  else
    v6 = 0;
  if ((v6 & 0x3C0) == 0)
    v5 = v6 + 64;
  v7 = (*(int *)(a1 + 60) + 127) & 0xFFFFFFFFFFFFFF80;
  if (!v3)
    v5 = 0;
  if ((v4 & 0x380) == 0)
    v4 |= 0x40uLL;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  v8 = v4 * v7;
  v9 = v5 * ((int)v7 >> (v3 == 1));
  v10 = sub_218B8DC0C(a2, (char *)((v4 * v7 + 2 * v9) | 0x30));
  if (!v10)
    return 4294967284;
  v11 = v10;
  result = 0;
  *(_QWORD *)(a1 + 264) = v11;
  v13 = *(_QWORD *)v11;
  if (v3)
    v14 = v13 + v8;
  else
    v14 = 0;
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = v14;
  v15 = v13 + v8 + v9;
  if (!v3)
    v15 = 0;
  *(_QWORD *)(a1 + 32) = v15;
  return result;
}

void sub_218BA29F0(uint64_t a1, uint64_t a2)
{
  sub_218B8DB80(a2, *(_QWORD *)(a1 + 264));
}

void sub_218BA2A00(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(a2 + 8))
  {
    v3 = 0;
    v4 = 16;
    do
    {
      free(*(void **)(*(_QWORD *)a2 + v4));
      ++v3;
      v4 += 24;
    }
    while (v3 < *(_QWORD *)(a2 + 8));
  }
  free(*(void **)a2);
  free((void *)a2);
}

void sub_218BA2A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 *a9)
{
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;

  sub_218B9F368((uint64_t *)(a1 + 112));
  v17 = *a9;
  v18 = a9[1];
  *(_OWORD *)(a1 + 104) = a9[2];
  *(_OWORD *)(a1 + 88) = v18;
  *(_OWORD *)(a1 + 72) = v17;
  v19 = *(_QWORD *)(a1 + 112);
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 16);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  sub_218B9F368((uint64_t *)(a1 + 200));
  *(_QWORD *)(a1 + 200) = a3;
  *(_QWORD *)(a1 + 120) = a2;
  if (a3)
  {
    v22 = (unsigned int *)(a3 + 16);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  sub_218B9F368((uint64_t *)(a1 + 208));
  *(_QWORD *)(a1 + 208) = a5;
  *(_QWORD *)(a1 + 128) = a4;
  if (a5)
  {
    v24 = (unsigned int *)(a5 + 16);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  sub_218B9F368((uint64_t *)(a1 + 216));
  *(_QWORD *)(a1 + 216) = a7;
  *(_QWORD *)(a1 + 136) = a6;
  *(_QWORD *)(a1 + 144) = a8;
  if (a7)
  {
    v26 = (unsigned int *)(a7 + 16);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
}

uint64_t sub_218BA2B6C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int128 *a10, _QWORD *a11)
{
  int v14;
  int v15;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v33;

  if (a2[2])
  {
    sub_218BB90C0(a1, (uint64_t)"Picture already allocated!\n", a3, a4, a5, a6, a7, a8, v33);
    return 0xFFFFFFFFLL;
  }
  else
  {
    v14 = a4;
    v15 = a3;
    v17 = *(_DWORD *)(a1 + 8);
    v18 = (uint64_t *)(a1 + 63184);
    v19 = *(_QWORD *)(a1 + 63184);
    if (v17 <= 1)
      v20 = 336;
    else
      v20 = 344;
    v21 = sub_218B8DC0C(v19, (char *)v20);
    if (v21)
    {
      v22 = (uint64_t)v21;
      v23 = *(_QWORD *)v21;
      *((_DWORD *)a2 + 14) = v15;
      *((_DWORD *)a2 + 15) = v14;
      *a2 = a5;
      a2[1] = a7;
      *((_DWORD *)a2 + 16) = *(_DWORD *)(a5 + 12);
      *((_DWORD *)a2 + 17) = a9;
      *((_OWORD *)a2 + 5) = 0u;
      *((_OWORD *)a2 + 6) = 0u;
      a2[14] = 0;
      a2[9] = 0x8000000000000000;
      a2[11] = -1;
      v24 = (*((uint64_t (**)(uint64_t *, _QWORD))a10 + 1))(a2, *(_QWORD *)a10);
      if ((v24 & 0x80000000) != 0)
      {
        v31 = v24;
        sub_218B8DB80(*v18, v22);
      }
      else
      {
        v25 = *a10;
        *(_QWORD *)(v23 + 16) = *((_QWORD *)a10 + 2);
        *(_OWORD *)v23 = v25;
        memcpy((void *)(v23 + 24), a2, 0x110uLL);
        v26 = *v18;
        *(_QWORD *)(v23 + 296) = 0;
        *(_QWORD *)(v23 + 304) = v22;
        *(_QWORD *)(v23 + 312) = 1;
        *(_QWORD *)(v23 + 320) = sub_218BA2D24;
        *(_QWORD *)(v23 + 328) = v26;
        a2[32] = v23 + 296;
        a2[24] = a6;
        if (a6)
        {
          v27 = (unsigned int *)(a6 + 16);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        a2[23] = a8;
        if (a8)
        {
          v29 = (unsigned int *)(a8 + 16);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        v31 = 0;
        if (a11 && v17 >= 2)
        {
          v31 = 0;
          *a11 = v23 + 336;
        }
      }
    }
    else
    {
      return 4294967284;
    }
  }
  return v31;
}

void sub_218BA2D24(_QWORD **a1, uint64_t a2)
{
  ((void (*)(_QWORD *, _QWORD))(*a1)[2])(*a1 + 3, **a1);
  sub_218B8DB80(a2, (uint64_t)a1);
}

uint64_t sub_218BA2D60(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = sub_218BA2B6C(a1, a2, a3, *(unsigned int *)(a4 + 60), *(_QWORD *)a4, *(_QWORD *)(a4 + 192), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 184), *(_DWORD *)(a4 + 68), **(__int128 ***)(*(_QWORD *)(a4 + 256) + 8), 0);
  if (!(_DWORD)v6)
    sub_218BA2A60((uint64_t)a2, *(_QWORD *)(a4 + 120), *(_QWORD *)(a4 + 200), *(_QWORD *)(a4 + 128), *(_QWORD *)(a4 + 208), *(_QWORD *)(a4 + 136), *(_QWORD *)(a4 + 216), *(_QWORD *)(a4 + 144), (__int128 *)(a4 + 72));
  return v6;
}

void *sub_218BA2DE4(void *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;

  v2 = a2[32];
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[23];
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[24];
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = a2[14];
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 16);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = a2[25];
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 16);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = a2[26];
  if (v17)
  {
    v18 = (unsigned int *)(v17 + 16);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = a2[27];
  if (v20)
  {
    v21 = (unsigned int *)(v20 + 16);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  return memcpy(a1, a2, 0x110uLL);
}

double sub_218BA2EB0(uint64_t a1)
{
  double result;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 256))
    {
      if (!*(_QWORD *)(a1 + 16))
        return result;
      sub_218B9F368((uint64_t *)(a1 + 256));
    }
    sub_218B9F368((uint64_t *)(a1 + 192));
    sub_218B9F368((uint64_t *)(a1 + 184));
    sub_218B9F368((uint64_t *)(a1 + 112));
    sub_218B9F368((uint64_t *)(a1 + 200));
    sub_218B9F368((uint64_t *)(a1 + 208));
    sub_218B9F368((uint64_t *)(a1 + 216));
    result = 0.0;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_QWORD *)(a1 + 72) = 0x8000000000000000;
    *(_QWORD *)(a1 + 88) = -1;
  }
  return result;
}

uint64_t sub_218BA2F50(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  const void *v50;
  char *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  BOOL v56;
  _BOOL4 v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  BOOL v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  signed int v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int *v116;
  _BOOL4 v117;
  signed int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  char *v133;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t *v149;
  int v150;
  uint64_t v151;
  int v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  BOOL v163;
  int v164;
  int v165;
  _BOOL4 v166;
  int v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _OWORD v174[12];
  uint64_t v175;

  v175 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(result + 8);
  v8 = *(_DWORD *)(v7 + 2168);
  v141 = v8 != 3;
  v150 = v8;
  v9 = v8 == 2;
  if (a4 < a5)
  {
    v10 = 0;
    v11 = *(_QWORD *)(v7 + 24);
    v133 = (char *)&unk_218BCF5B0 + 8 * v9;
    v12 = *(_DWORD *)(*(_QWORD *)(v7 + 3256) + 24);
    v13 = *(_QWORD *)(v7 + 2144);
    v14 = *(uint64_t *)(v7 + 2152) >> 1;
    v15 = v13 >> 1;
    v16 = a4;
    if (a4 <= 0)
      v17 = 8;
    else
      v17 = 12;
    v18 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 8) + 392);
    v19 = a6 != 0;
    v20 = 6;
    if (v150 == 1)
      v20 = 2;
    v111 = v20;
    v21 = 7;
    if (v150 == 1)
      v21 = 3;
    v110 = v21;
    v22 = (4 << v18) * a7;
    v23 = 4 * a7 - 4;
    v24 = v22 - 4;
    v169 = *(_DWORD *)(*(_QWORD *)(v7 + 3256) + 24);
    if (v12 < 2)
      v19 = 1;
    v117 = v19;
    if (v12 >= 2)
      v25 = a7;
    else
      v25 = 0;
    v112 = v14 * 8 * v25;
    v113 = v15 * 4 * v25;
    v26 = (4 * a7) | 2;
    v125 = v15 * v26;
    v27 = (4 * v18 + v22) | 2;
    v28 = v23;
    v128 = v15 * v23;
    v129 = v15 * 4 * a7;
    if (v12 >= 2)
      v29 = v15 * 4 * a7;
    else
      v29 = 0;
    v30 = v14 * 8 * a7;
    v139 = v30;
    v140 = v29;
    if (v12 < 2)
      v30 = 0;
    v165 = *(_DWORD *)(v11 + 236);
    v164 = *(_DWORD *)(v11 + 240);
    if (v165 == v164)
      v28 = v24;
    v127 = v15 * v24;
    v124 = v15 * v27;
    v137 = v14 * v26;
    v138 = v30;
    v168 = v14 * (8u >> (v150 == 1));
    v135 = v14 * v28;
    v136 = v14 * v27;
    v121 = a2[1];
    v122 = *a2;
    v120 = a2[2];
    v132 = 2 * *(_DWORD *)(v7 + 3456);
    v31 = a5;
    v123 = *(_DWORD *)(v7 + 2172) - 8;
    v151 = *(_QWORD *)(v7 + 3280);
    v156 = 8u >> v141;
    v130 = 0x40u >> v141;
    v32 = v123 + *(unsigned __int8 *)(v11 + 847) - 1;
    v148 = 4 * v13;
    v149 = (uint64_t *)(v7 + 2144);
    v116 = (int *)(result + 258544);
    v33 = *(_DWORD *)(result + 258544);
    while (1)
    {
      if ((signed int)(v16 + 2) >= *(_DWORD *)(v7 + 3452))
        v34 = v17 & 0xFFFFFFF7;
      else
        v34 = v17;
      v119 = v16 + 2;
      v35 = v117;
      if ((int)(v16 + 2) < v31)
        v35 = 1;
      if (v35 == 1 && (v34 & 8) != 0)
      {
        v37 = (_QWORD *)(v7 + 24 * (v33 == 0));
        v38 = (char *)(v37[649] + 2 * v113);
        v39 = v37[650];
        v40 = v37[651];
        v41 = v13 >> 1;
        if (v13 < 0)
        {
          v38 += 2 * v41;
          v42 = (const void *)(v122 + 14 * v41);
          v43 = -4 * v41;
        }
        else
        {
          v42 = (const void *)(v122 + 12 * v41);
          v43 = 2 * v13;
        }
        result = (uint64_t)memcpy(v38, v42, v43);
        v31 = a5;
        if (v150)
        {
          v44 = (char *)(v39 + 2 * v112);
          v45 = (char *)(v40 + 2 * v112);
          v46 = *(_QWORD *)(v7 + 2152);
          v47 = v46 >> 1;
          if (v46 < 0)
          {
            v49 = -4 * v47;
            memcpy(&v44[2 * v47], (const void *)(v121 + 2 * v47 * v110), -4 * v47);
            v51 = &v45[2 * v47];
            v50 = (const void *)(v120 + 2 * v47 * v110);
          }
          else
          {
            v48 = v47 * v111;
            v49 = 2 * v46;
            memcpy(v44, (const void *)(v121 + 2 * v48), 2 * v46);
            v50 = (const void *)(v120 + 2 * v48);
            v51 = v45;
          }
          result = (uint64_t)memcpy(v51, v50, v49);
          v31 = a5;
        }
      }
      v52 = v34 & 0xFFFFFFFC | 2;
      if (v132 >= 1)
        break;
LABEL_131:
      v13 = *(_QWORD *)(v7 + 2144);
      v122 += 8 * v13;
      v109 = (4 * *(_QWORD *)(v7 + 2152)) >> (v150 == 1);
      v121 += 2 * v109;
      v120 += 2 * v109;
      v33 = *v116 ^ 1;
      *v116 = v33;
      v17 = v52 | 4;
      v31 = a5;
      v16 = v119;
      if (v119 >= a5)
        return result;
    }
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v126 = (v16 >> 1) & 0xF;
    v56 = a6 != 0;
    v57 = v16 == a4 && a6 != 0;
    v166 = v57;
    v131 = (v16 >> 3) & 2;
    if (v119 < v31)
      v56 = 1;
    v163 = v56;
    v167 = v33;
    v147 = (uint64_t *)(v7 + 24 * v33 + 5192);
    v58 = 1;
    v59 = v120;
    v60 = v121;
    v61 = v122;
    while (1)
    {
      v62 = v53;
      v63 = *(char *)(a3 + 1348 * (v54 >> 1) + (v54 & 1 | v131) + 1280);
      v146 = v54;
      v144 = v60;
      v145 = v59;
      v142 = v53;
      v143 = v61;
      if (v63 == -1
        || ((v64 = *(_QWORD *)(v7 + 24) + v63,
             v65 = *(unsigned __int8 *)(v64 + 849),
             v66 = *(unsigned __int8 *)(v64 + 857),
             !*(_BYTE *)(v64 + 849))
          ? (v67 = v66 == 0)
          : (v67 = 0),
            v67))
      {
        v58 = 1;
      }
      else
      {
        v158 = *(_DWORD *)(a3 + 1348 * (v54 >> 1) + 4 * v126 + 1284);
        if ((v65 & 3) == 3)
          v68 = 4;
        else
          v68 = v65 & 3;
        if ((v66 & 3) == 3)
          v69 = 4;
        else
          v69 = v66 & 3;
        v171 = v61;
        v172 = v60;
        v173 = v59;
        v70 = 16 * v54;
        LODWORD(result) = v70 + 16;
        v71 = *(_DWORD *)(v7 + 3448);
        v157 = v70 + 16;
        if (v70 + 16 >= v71)
          result = v71;
        else
          result = result;
        if (v70 < (int)result)
        {
          v72 = (v65 != 0) | (2 * (v66 != 0));
          v152 = v68 << v123;
          v73 = v66 >> 2 << v123;
          v74 = (v69 << v123);
          v155 = v65 >> 2 << v123;
          v75 = v59;
          v76 = v60;
          v154 = v66;
          v153 = v72;
          do
          {
            v162 = v62 + 2;
            if (v71 <= (int)v62 + 2)
              v77 = v52 & 0xFFFFFFFD;
            else
              v77 = v52;
            if (((v158 >> (v62 & 0x1E)) & 3) == 0)
            {
              v58 = 1;
              goto LABEL_123;
            }
            if (v58)
              v78 = 3;
            else
              v78 = ~v55;
            if ((v78 & v72) != 0 && (v77 & 1) != 0)
              result = sub_218BA3958((uint64_t)&v174[6 * v10], &v171, v149, 0, v150, v78 & v72);
            if ((v77 & 2) != 0)
              result = sub_218BA3958((uint64_t)&v174[6 * (v10 == 0)], &v171, v149, 8u, v150, v72);
            v79 = 0;
            v170 = 0;
            if (v155 | v73)
            {
              result = (*(uint64_t (**)(uint64_t, _QWORD, unsigned int *, _QWORD))(v151 + 3296))(v61, *(_QWORD *)(v7 + 2144), &v170, *(unsigned int *)(v7 + 4324));
              v79 = result;
            }
            if (v169 > 1)
            {
              v81 = v152;
              if (v166)
              {
                v83 = (4 * (_DWORD)v62) & 0xFFFFFFF8;
                if (v165 == v164)
                {
                  v84 = v127 + v83;
                  v85 = *(_QWORD *)(v7 + 5264);
                }
                else
                {
                  v84 = v128 + v83;
                  v85 = *(_QWORD *)(v7 + 5240);
                }
                v82 = v85 + 2 * v84;
                goto LABEL_88;
              }
              v80 = *v147;
              if (!v163)
              {
                v86 = (4 * (_DWORD)v62) & 0xFFFFFFF8;
                v82 = v80 + 2 * (v129 + v86);
                if (v165 == v164)
                {
                  v87 = v124 + v86;
                  v88 = *(_QWORD *)(v7 + 5264);
                }
                else
                {
                  v87 = v125 + v86;
                  v88 = *(_QWORD *)(v7 + 5240);
                }
                v89 = v88 + 2 * v87;
                goto LABEL_89;
              }
            }
            else
            {
              v80 = *v147;
              v81 = v152;
            }
            v82 = v80 + 2 * (v140 + ((4 * (_DWORD)v62) & 0xFFFFFFF8));
LABEL_88:
            v89 = v171 + 2 * v148;
LABEL_89:
            if (v155)
            {
              if (v170)
              {
                if (v170 >= 0x40)
                {
                  v92 = __clz(v170 >> 6) ^ 0x1F;
                  if (v92 >= 12)
                    v92 = 12;
                  v90 = v92 + 4;
                }
                else
                {
                  v90 = 4;
                }
                v91 = ((int)(v90 * v155 + 8) >> 4);
              }
              else
              {
                v91 = 0;
              }
              if (v91 | v81)
                result = (*(uint64_t (**)(uint64_t, _QWORD, _OWORD *, uint64_t, uint64_t, uint64_t))(v151 + 3304))(v171, *(_QWORD *)(v7 + 2144), &v174[6 * v10], v82, v89, v91);
            }
            else if (v81)
            {
              result = (*(uint64_t (**)(uint64_t, _QWORD, _OWORD *, uint64_t, uint64_t, _QWORD))(v151 + 3304))(v171, *(_QWORD *)(v7 + 2144), &v174[6 * v10], v82, v89, 0);
            }
            if (v66)
            {
              if ((_DWORD)v73)
                v93 = v133[v79];
              else
                v93 = 0;
              v94 = 0;
              v95 = (4 * v62) >> v141;
              v161 = v139 + v95;
              v160 = v137 + v95;
              v159 = v136 + v95;
              v96 = v138 + v95;
              v97 = v135 + v95;
              v98 = 1;
              do
              {
                v99 = v94;
                if (v169 >= 2)
                {
                  if (v166)
                  {
                    v101 = v7 + 8 * v98;
                    v102 = (_QWORD *)(v101 + 5264);
                    v103 = (_QWORD *)(v101 + 5240);
                    if (v165 == v164)
                      v103 = v102;
                    v100 = *v103 + 2 * v97;
                    goto LABEL_113;
                  }
                  if (!v163)
                  {
                    v100 = *(_QWORD *)(v7 + 24 * v167 + 8 * v98 + 5192) + 2 * v161;
                    v106 = v7 + 8 * v98;
                    v107 = (uint64_t *)(v106 + 5264);
                    v104 = (uint64_t *)(v106 + 5240);
                    if (v165 == v164)
                      v104 = v107;
                    v105 = v160;
                    if (v165 == v164)
                      v105 = v159;
                    goto LABEL_114;
                  }
                }
                v100 = *(_QWORD *)(v7 + 24 * v167 + 8 * v98 + 5192) + 2 * v96;
LABEL_113:
                v104 = &v171 + v98;
                v105 = v168;
LABEL_114:
                result = (*(uint64_t (**)(_QWORD, _QWORD, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, _DWORD))(v151 + 8 * (3 - v150) + 3304))(*(&v171 + v98), *(_QWORD *)(v7 + 2152), &v174[6 * v10 + 2 * v98], v100, *v104 + 2 * v105, v73, v74, v93, __PAIR64__(v77, v32), *(_DWORD *)(v7 + 4324));
                v94 = 1;
                v98 = 2;
              }
              while ((v99 & 1) == 0);
            }
            v58 = 0;
            v10 ^= 1uLL;
            v61 = v171;
            v76 = v172;
            v75 = v173;
            v72 = v153;
            v55 = v153;
            v71 = *(_DWORD *)(v7 + 3448);
            v66 = v154;
LABEL_123:
            v61 += 16;
            v76 += 2 * v156;
            v171 = v61;
            v172 = v76;
            v75 += 2 * v156;
            v173 = v75;
            v52 = v77 | 1;
            v108 = v157;
            if (v157 >= v71)
              v108 = v71;
            v62 = v162;
          }
          while (v108 > (int)v162);
        }
      }
      v61 = v143 + 128;
      v60 = v144 + 2 * v130;
      v59 = v145 + 2 * v130;
      v54 = v146 + 1;
      v52 |= 1u;
      v53 = v142 + 16;
      if (v146 + 1 == v132)
        goto LABEL_131;
    }
  }
  return result;
}

uint64_t sub_218BA3958(uint64_t result, _QWORD *a2, uint64_t *a3, unsigned int a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  if ((a6 & 1) != 0)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      *(_DWORD *)(result + v6) = *(_DWORD *)(*a2 + 2 * (a4 - 2 + v7));
      v7 += *a3 >> 1;
      v6 += 4;
    }
    while (v6 != 32);
  }
  if (a5 && (a6 & 2) != 0)
  {
    v8 = 0;
    v9 = 8u >> (a5 == 1);
    v10 = (_DWORD *)(result + 64);
    do
    {
      v11 = 2 * ((a4 >> (a5 != 3)) - 2 + v8);
      *(v10 - 8) = *(_DWORD *)(a2[1] + v11);
      *v10++ = *(_DWORD *)(a2[2] + v11);
      v8 += a3[1] >> 1;
      --v9;
    }
    while (v9);
  }
  return result;
}

_BYTE *sub_218BA39F8(_BYTE *result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char v18;
  char v19;
  unsigned int v20;
  char *v21;

  v7 = a2;
  v8 = result;
  v9 = 0;
  v10 = a5 >> 1;
  v11 = a3 >> 1;
  v12 = a5 - 1;
  v13 = (int)(v11 - (a5 >> 1));
  v14 = a3;
  v15 = (char *)(a2 + 1);
  do
  {
    v16 = 0;
    v17 = v15;
    do
    {
      v18 = *(v17 - 1);
      v19 = *v17;
      v17 += 2;
      v8[v16++] = v18 | (16 * v19);
    }
    while (v10 != v16);
    if (v10 < v11)
      result = memset(&v8[v10], 17 * *(unsigned __int8 *)(v7 + v12), v13);
    ++v9;
    v7 += v14;
    v8 += v11;
    v15 += v14;
  }
  while (v9 != a6);
  v20 = a4 - a6;
  if (a4 > a6)
  {
    v21 = &v8[-(int)v11];
    do
    {
      result = memcpy(v8, v21, v11);
      v8 += v11;
      --v20;
    }
    while (v20);
  }
  return result;
}

uint64_t sub_218BA3AF0(uint64_t result, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v10;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  int v34;
  char v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  BOOL v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  char v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  _BOOL4 v62;
  _QWORD v63[276];

  v7 = a7;
  v10 = a3;
  v63[274] = *MEMORY[0x24BDAC8D0];
  v12 = a7 != 0;
  v13 = *(_DWORD *)(result + 2440);
  v14 = *(_QWORD *)(result + 24);
  if ((_DWORD)a7)
    ++v14;
  v15 = v13 == 1 && (_DWORD)a7 != 0;
  v16 = (1 << *(_BYTE *)(v14 + 880));
  v17 = 8u >> v15;
  if (!a3)
    v17 = 0;
  v18 = v17 + a3;
  if (a3 <= 0)
    v19 = 2;
  else
    v19 = 6;
  v20 = v18 & -(int)v16;
  if (v20 + ((int)v16 >> 1) <= a5)
    v21 = 0;
  else
    v21 = v16;
  v22 = v20 - v21;
  if ((v18 & -(int)v16) != 0)
    v23 = v22;
  else
    v23 = 0;
  v24 = v13 == 3;
  v25 = *(_QWORD *)(result + 8 * v12 + 2416);
  v26 = (v16 + ((int)v16 >> 1));
  v27 = !v24;
  if ((v12 & v27) != 0)
    v28 = 6;
  else
    v28 = 7;
  v29 = (v23 << v15 >> 7) * *(_DWORD *)(result + 3476);
  v30 = ((v23 << v15) >> 5) & 2;
  v63[0] = *(_QWORD *)(result + 4448)
         + 108 * v29
         + 36 * v7
         + (((v23 << v15) >> 5) & 2 | (16 * (((unint64_t)v30 >> 1) & 1)));
  v63[1] = 0;
  v31 = *(_BYTE *)v63[0] != 0;
  if ((int)v26 > a4)
  {
    v32 = 0;
    v33 = 0;
    if (!*(_BYTE *)v63[0])
      return result;
    return sub_218BA3E14(result, a2, (uint64_t)&v63[136 * (v33 == 0) + 2], v32, v10, v7, a4 - v32, a6, (char *)v63[v33], v19 & 0xFFFFFFFD);
  }
  v33 = 0;
  v34 = 0;
  v35 = v28 - 1;
  v36 = a6 - v10;
  v37 = v19 | 1;
  v53 = a6 - v10 + 1;
  v54 = a6 - v10;
  v38 = 2 * (int)v16;
  v51 = v38 - 8;
  v52 = v38;
  v39 = v25 & 0xFFFFFFFFFFFFFFFELL;
  v61 = v7;
  v58 = v29;
  v59 = v10;
  v57 = ((v23 << v15) >> 5) & 2;
  v55 = v19 | 1;
  v56 = v28 - 1;
  do
  {
    v32 = v34 + v16;
    v40 = (unsigned __int8 *)(*(_QWORD *)(result + 4448)
                            + 108 * ((v32 >> v28) + v29)
                            + 36 * v61
                            + ((v32 >> v35) & 1 | v30 | (8 * ((v32 >> v35) & 1 | v30))));
    v63[v33 == 0] = v40;
    LODWORD(v40) = *v40;
    v62 = (_DWORD)v40 != 0;
    if ((_DWORD)v40)
      v41 = v36 < 1;
    else
      v41 = 1;
    if (!v41)
    {
      v42 = &v63[136 * v33 + 2];
      v43 = v51;
      v44 = v53;
      do
      {
        *v42++ = *(_QWORD *)(a2 + v43);
        --v44;
        v43 += v39;
      }
      while (v44 > 1);
    }
    if (v31)
    {
      v60 = v34 + v16;
      v45 = result;
      v46 = a6;
      v47 = v16;
      v48 = v7;
      v49 = v26;
      v50 = v28;
      sub_218BA3E14(result, a2, (uint64_t)&v63[136 * (v33 == 0) + 2], v34, v10, v7, v16, a6, (char *)v63[v33], v19);
      v30 = v57;
      v29 = v58;
      v10 = v59;
      v28 = v50;
      v26 = v49;
      v35 = v56;
      result = v45;
      v32 = v60;
      v7 = v48;
      v36 = v54;
      v37 = v55;
      v16 = v47;
      v38 = v52;
      a6 = v46;
    }
    a2 += v38;
    v33 ^= 1uLL;
    v34 = v32;
    v31 = v62;
    v19 = v37;
  }
  while ((int)v26 + v32 <= a4);
  v19 = v37;
  if (v62)
    return sub_218BA3E14(result, a2, (uint64_t)&v63[136 * (v33 == 0) + 2], v32, v10, v7, a4 - v32, a6, (char *)v63[v33], v19 & 0xFFFFFFFD);
  return result;
}

uint64_t sub_218BA3E14(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6, unsigned int a7, int a8, char *a9, int a10)
{
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  char v17;
  char v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  __int16 v28;
  uint64_t (**v29)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *, _QWORD, _DWORD);
  unsigned __int16 *v30;
  unsigned int v31;
  _BOOL8 v32;
  int v33;
  uint64_t v35;
  unsigned int v36;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *, _QWORD, _DWORD);
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v13 = result;
  v47 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(result + 3280);
  v15 = a6 != 0 && *(_DWORD *)(result + 2440) == 1;
  v44 = *(_QWORD *)(result + 8 * (a6 != 0) + 2416);
  v16 = 8 << v15;
  if (v15)
    v17 = 5;
  else
    v17 = 6;
  if (!a5)
    v16 = 0;
  v18 = *(_BYTE *)(*(_QWORD *)(result + 8) + 392);
  v19 = (v16 + a5) >> (v17 + v18);
  v20 = *(_QWORD *)(result + 8 * a6 + 5264);
  v21 = 4 << v18;
  if (a5)
    v22 = 64;
  else
    v22 = 56;
  v23 = v19 * v21 - 4;
  if (*(_DWORD *)(*(_QWORD *)(result + 3256) + 24) <= 1u)
    v23 = 0;
  if ((int)(v22 >> v15) >= a8 - a5)
    v24 = (a8 - a5);
  else
    v24 = v22 >> v15;
  v45 = 0u;
  v46 = 0u;
  v25 = *a9;
  if (v25 == 2)
  {
    v26 = a9[1];
    WORD6(v45) = v26;
    LOWORD(v45) = v26;
    WORD5(v45) = a9[2];
    WORD1(v45) = WORD5(v45);
    WORD4(v45) = a9[3];
    WORD2(v45) = WORD4(v45);
    WORD3(v45) = 128 - 2 * (WORD5(v45) + v26 + WORD4(v45));
    v27 = a9[4];
    WORD6(v46) = v27;
    LOWORD(v46) = v27;
    WORD5(v46) = a9[5];
    WORD1(v46) = WORD5(v46);
    v28 = a9[6];
    WORD4(v46) = v28;
    WORD2(v46) = v28;
    WORD3(v46) = 128 - 2 * (WORD5(v46) + v27 + v28);
    v29 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *, _QWORD, _DWORD))(v14 + 8 * ((v27 | v26) == 0) + 3328);
  }
  else
  {
    v30 = (unsigned __int16 *)((char *)&unk_218BCF5C0 + 4 * (v25 - 3));
    v31 = *v30;
    v32 = *v30 == 0;
    LODWORD(v30) = v30[1];
    *(_QWORD *)&v45 = __PAIR64__(v30, v31);
    WORD4(v45) = a9[7];
    WORD5(v45) = 128 - (WORD4(v45) + a9[8]);
    v29 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *, _QWORD, _DWORD))(v14 + 8 * (2 * ((_DWORD)v30 != 0) - v32) + 3344);
  }
  v33 = v24 + a5;
  if ((int)v24 + a5 <= a8)
  {
    v35 = v20 + 2 * (v44 >> 1) * v23 + 2 * a4;
    v42 = *v29;
    v41 = v19 + 1;
    v36 = 0x40u >> v15;
    do
    {
      if (v41 == *(_DWORD *)(v13 + 3464) && a8 == v33)
        v38 = 0;
      else
        v38 = 8;
      v39 = v38 | a10 & 0xFFFFFFF7;
      result = v42(a2, v44, a3, v35, a7, v24, &v45, v39, *(_DWORD *)(v13 + 4324));
      LODWORD(v40) = a8 - v33;
      if ((int)v36 >= a8 - v33)
        v40 = v40;
      else
        v40 = v36;
      if (!(_DWORD)v40)
        break;
      a10 = v39 | 4;
      a2 += 2 * (v44 >> 1) * (int)v24;
      a3 += 8 * (int)v24;
      v33 += v40;
      v35 += 4 * v44;
      v24 = v40;
    }
    while (v33 <= a8);
  }
  return result;
}

uint64_t sub_218BA40F4(uint64_t a1, int a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char *v8;
  BOOL v9;
  int v10;
  char *v11;
  int v12;
  int v13;
  char *v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v21;
  unsigned int *v22;
  char *v23;
  char *v24;
  char v25;
  int v26;
  int v27;
  uint64_t v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  int *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  int v37;
  char *v38;
  char **v39;
  int v40;
  int v41;
  int v42;

  v4 = *(char **)(a1 + 5488);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int8 *)(v5 + 449) * *(unsigned __int8 *)(v5 + 445);
  if (a2 <= 1)
  {
    v7 = (_DWORD)v6 << (*(_DWORD *)(*(_QWORD *)(a1 + 3256) + 8) > 1u);
    if (v7 > *(_DWORD *)(a1 + 5540))
    {
      v8 = (char *)malloc_type_realloc(*(void **)(a1 + 5488), (32 * v7), 0x5847BBF5uLL);
      if (!v8)
        return 0xFFFFFFFFLL;
      v4 = v8;
      bzero(v8, (32 * v7));
      *(_QWORD *)(a1 + 5488) = v4;
      *(_DWORD *)(a1 + 5540) = v7;
      v5 = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(a1 + 5496) = &v4[32 * v6];
  }
  if (*(_BYTE *)(v5 + 830))
    v9 = 1;
  else
    v9 = *(_BYTE *)(v5 + 831) != 0;
  v41 = *(_DWORD *)(v5 + 236);
  v42 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 414);
  v40 = *(_DWORD *)(v5 + 240);
  v10 = *(_DWORD *)(a1 + 5352);
  v11 = *(char **)(a1 + 5480);
  v12 = *(_DWORD *)(a1 + 3464);
  v13 = v12 << (*(_DWORD *)(*(_QWORD *)(a1 + 3256) + 8) > 1u);
  if (v13 > *(_DWORD *)(a1 + 5536))
  {
    v14 = (char *)malloc_type_realloc(*(void **)(a1 + 5480), 32 * v13, 0x557A5B2EuLL);
    if (!v14)
      return 0xFFFFFFFFLL;
    v11 = v14;
    bzero(v14, 32 * v13);
    *(_QWORD *)(a1 + 5480) = v11;
    *(_DWORD *)(a1 + 5536) = v13;
    v12 = *(_DWORD *)(a1 + 3464);
  }
  v15 = a2 & 1;
  if ((a2 & 1) == 0)
  {
    v16 = (v12 + 31) >> 5;
    v17 = *(char **)(a1 + 4344);
    if (v16 <= *(_DWORD *)(a1 + 4400))
    {
      v18 = v16;
      goto LABEL_19;
    }
    v17 = (char *)malloc_type_realloc(v17, 8 * v16, 0x100004052888210uLL);
    if (v17)
    {
      *(_QWORD *)(a1 + 4344) = v17;
      v18 = v16;
      *(_QWORD *)(a1 + 4352) = &v17[4 * v16];
LABEL_19:
      *(_DWORD *)(a1 + 4400) = v16;
      v21 = 4 * v18;
      bzero(v17, 4 * v18);
      bzero(*(void **)(a1 + 4352), v21);
      v19 = 4340;
      goto LABEL_20;
    }
    return 0xFFFFFFFFLL;
  }
  v19 = 4336;
LABEL_20:
  v22 = (unsigned int *)(a1 + v19);
  v23 = &v4[32 * (v6 * v15)];
  v24 = &v11[32 * v12 * (int)v15];
  atomic_store(0, v22);
  *(_DWORD *)(a1 + 4 * (a2 & 1) + 4328) = 0;
  *((_QWORD *)v24 + 1) = 0x100000000;
  *((_DWORD *)v24 + 4) = 0;
  v25 = a2 == 1 || v9;
  if (a2 == 1)
    v26 = 3;
  else
    v26 = 5;
  if ((v25 & 1) == 0)
  {
    if (v41 == v40)
      v27 = 10;
    else
      v27 = 8;
    if (v42 | v10)
      v26 = 6;
    else
      v26 = v27;
  }
  v28 = 0;
  v29 = 0;
  *((_DWORD *)v24 + 1) = v26;
  v30 = 1828669549 * ((unint64_t)(a1 - **(_QWORD **)(a1 + 3256)) >> 4);
  *(_DWORD *)v24 = v30;
  v31 = *(_DWORD *)(a1 + 3468);
  if (a2 == 1)
    v32 = 2;
  else
    v32 = 4;
  v33 = (int *)(*(_QWORD *)(a1 + 3264) + 13872);
  v34 = v23;
  do
  {
    v35 = v28;
    v36 = v34;
    v37 = *v33 >> v31;
    *((_DWORD *)v34 + 2) = v37;
    if (v24 && v37)
    {
      v38 = 0;
      *((_QWORD *)v29 + 3) = v24;
    }
    else
    {
      v38 = v24;
      v24 = v29;
    }
    *((_QWORD *)v34 + 2) = 0;
    *((_DWORD *)v34 + 3) = 0;
    *(_DWORD *)v34 = v30;
    *((_DWORD *)v34 + 1) = v32;
    if (v24)
      *((_QWORD *)v24 + 3) = v34;
    v33 += 3656;
    v28 = v35 + 1;
    v34 += 32;
    v29 = v36;
    v24 = v38;
  }
  while (v6 != v35 + 1);
  if (v38)
    *(_QWORD *)&v23[32 * v35 + 24] = v38;
  else
    v38 = v36;
  *((_QWORD *)v38 + 3) = 0;
  atomic_store(0, (unsigned int *)(a1 + 4 * v15 + 5548));
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 5608));
  if (*(_QWORD *)(a1 + 5672))
    v39 = (char **)(*(_QWORD *)(a1 + 5680) + 24);
  else
    v39 = (char **)(a1 + 5672);
  *v39 = v23;
  *(_QWORD *)(a1 + 5680) = v38;
  atomic_store(1u, (unsigned int *)(a1 + 5600));
  atomic_store(1u, (unsigned int *)(a1 + 5544));
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 5608));
  return 0;
}

_QWORD *sub_218BA447C(_QWORD *a1, unsigned int *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  signed int v9;
  signed int v10;
  signed int v11;
  signed int v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1[697];
  if (v4)
  {
    v5 = 0;
    v6 = a2[1];
    while (1)
    {
      v7 = v5;
      v5 = v4;
      v8 = *(_DWORD *)(v4 + 4);
      if (v8 == 2)
      {
        if (v6 > 2)
          goto LABEL_14;
        v9 = a2[2];
        v10 = *(_DWORD *)(v5 + 8);
        if (v9 > v10)
          goto LABEL_14;
        if (v9 < v10)
          goto LABEL_19;
      }
      else
      {
        if (v6 == 2)
          goto LABEL_19;
        v11 = a2[2];
        v12 = *(_DWORD *)(v5 + 8);
        if (v11 > v12)
          goto LABEL_14;
        if (v11 < v12)
          goto LABEL_19;
        if (v6 > v8)
          goto LABEL_14;
        if (v6 < v8)
          goto LABEL_19;
      }
      v13 = a1[(v8 == 2) + 686];
      if ((int)(((unint64_t)a2 - v13) >> 5) <= (int)((unint64_t)(v5 - v13) >> 5))
      {
LABEL_19:
        v14 = (uint64_t)a2;
        return sub_218BA453C(a1, a2, v14, v7, v5, a3);
      }
LABEL_14:
      v4 = *(_QWORD *)(v5 + 24);
      if (!v4)
        goto LABEL_17;
    }
  }
  v5 = 0;
LABEL_17:
  v14 = (uint64_t)a2;
  v7 = v5;
  v5 = 0;
  return sub_218BA453C(a1, a2, v14, v7, v5, a3);
}

_QWORD *sub_218BA453C(_QWORD *result, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  unsigned int **v8;
  uint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;

  v6 = result[684];
  if (atomic_load(*(unsigned int **)(result[407] + 848)))
    return result;
  v8 = (unsigned int **)(result + 697);
  if (a4)
    v8 = (unsigned int **)(a4 + 24);
  *v8 = a2;
  if (!a5)
    result[698] = a3;
  *(_QWORD *)(a3 + 24) = a5;
  v9 = (uint64_t *)result[407];
  v10 = *a2;
  v11 = atomic_load((unsigned int *)(v6 + 112));
  v12 = (unsigned int *)(v6 + 120);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(0xFFFFFFFF, v12));
  if (v13 < v11)
  {
    if (v10 == -1)
      goto LABEL_33;
    v13 = -1;
  }
  v14 = *(_DWORD *)(v6 + 116);
  if (v14 || *(_QWORD *)(*v9 + 5712 * v11 + 5592))
  {
    if (v13 == -1)
    {
      if (v10 == -1)
        goto LABEL_33;
    }
    else if (v10 == -1)
    {
      if (v13 <= v14 + v11)
      {
        v15 = v13 - v11;
        v16 = *((_DWORD *)v9 + 2);
LABEL_30:
        *(_DWORD *)(v6 + 116) = v15;
        v19 = v16 - v15;
        if (v16 > v15)
        {
          v20 = *v9;
          v21 = v15 + v11;
          do
          {
            *(_QWORD *)(v20 + 5712 * (v21 % v16) + 5592) = 0;
            ++v21;
            --v19;
          }
          while (v19);
        }
        goto LABEL_33;
      }
      goto LABEL_33;
    }
    v16 = *((_DWORD *)v9 + 2);
    if (v11 <= v10)
      v17 = 0;
    else
      v17 = *((_DWORD *)v9 + 2);
    v18 = v17 + v10;
    if (v13 >= v18)
      v13 = v18;
    if (v14 < v16 && v14 + v11 < v13)
      goto LABEL_33;
    v15 = v13 - v11;
    if (v13 - v11 < v16)
    {
      while (!*(_QWORD *)(*v9 + 5712 * (v13 % v16) + 5576))
      {
        ++v15;
        ++v13;
        if (v16 == v15)
        {
          *(_DWORD *)(v6 + 116) = v16;
          goto LABEL_33;
        }
      }
    }
    goto LABEL_30;
  }
LABEL_33:
  if (a6)
  {
    v22 = (unsigned int *)(v6 + 124);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 | 1, v22));
    if (!v23)
      return (_QWORD *)pthread_cond_signal((pthread_cond_t *)(v6 + 64));
  }
  return result;
}

uint64_t sub_218BA46C0(uint64_t a1)
{
  int *v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int i;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int *v42;
  uint64_t v44;
  _QWORD *v45;
  pthread_mutex_t *v46;
  uint64_t v47;
  pthread_mutex_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  pthread_cond_t *v57;
  uint64_t v58;
  int v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  _BOOL8 v68;
  int v69;
  int v70;
  int v71;
  signed int v72;
  _BOOL4 v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  signed int v77;
  _BOOL4 v78;
  unsigned int v79;
  unsigned int v80;
  signed int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  signed int v87;
  int v88;
  BOOL v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  unsigned int v97;
  unsigned int v98;
  signed int v99;
  signed int v100;
  pthread_cond_t *v101;
  uint64_t v102;
  __int128 v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  pthread_mutex_t *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  uint64_t v121;
  pthread_cond_t *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int v125;
  int sig_high;
  uint64_t v127;
  _BOOL8 v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unsigned int v133;
  int v134;
  _BOOL4 v135;
  int v136;
  unsigned int v137;
  int v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  pthread_cond_t *v143;
  int v144;
  unsigned int v145;
  int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  int v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int *v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  pthread_cond_t **v165;
  int v167;
  signed int v169;
  signed int v170;
  pthread_cond_t *v171;
  pthread_cond_t **v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  pthread_mutex_t *v184;
  pthread_mutex_t *v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  unsigned int *v193;
  unsigned int v194;
  unsigned int *v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v199;
  unsigned int v200;
  int v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  char v212;
  unsigned int *v213;
  uint64_t v214;
  char v215;
  uint64_t v216;
  int v217;
  unsigned int v218;
  unsigned int v220;
  unsigned int sig;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  int v227;
  unsigned int v228;
  unsigned int v229;
  uint64_t v230;
  unsigned int v231;
  unsigned int *v232;
  unsigned int v233;
  unsigned int v234;
  _BOOL4 v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v248;
  int v249;
  unsigned int v250;
  int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int *v254;
  unsigned int v255;
  pthread_cond_t *v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  int v262;
  unsigned int *v263;
  unsigned int v264;
  unsigned int v265;
  int v266;
  int v267;
  unsigned int v270;
  int v271;
  int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  uint64_t v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  unsigned int *v284;
  unsigned int v285;
  pthread_cond_t *v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v293;
  unsigned int v294;
  int v295;
  int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  int v302;
  unsigned int v303;
  int v304;
  unsigned int v305;
  int v306;
  unsigned int v307;
  int v308;
  unsigned int v309;
  unsigned int v310;
  uint64_t v311;
  unsigned int v312;
  unsigned int v313;
  uint64_t v314;
  unsigned int v315;
  unsigned int v316;
  uint64_t v317;
  unsigned int v318;
  unsigned int v319;
  uint64_t v320;
  unsigned int v321;
  int v322;
  unsigned int v323;
  unsigned int v324;
  uint64_t v325;
  unsigned int v326;
  _QWORD *v327;
  unsigned int *v328;
  unsigned int *v329;
  uint64_t v330;
  int v331;
  pthread_cond_t *v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int *v336;
  pthread_cond_t *v337;
  pthread_cond_t *v338;
  int *v340;
  uint64_t v341;
  void (**v342)(uint64_t, uint64_t);
  uint64_t *v343;
  char *v344;
  pthread_cond_t *v345;
  uint64_t v346;
  uint64_t v347;
  unsigned int v348;
  uint64_t v349;
  uint64_t v350;

  v1 = (int *)(a1 + 258564);
  v2 = *(uint64_t **)a1;
  v3 = *(_QWORD *)(a1 + 258696);
  pthread_mutex_lock((pthread_mutex_t *)v3);
  if (v1[38])
    goto LABEL_2;
  v336 = (unsigned int *)(v3 + 124);
  v345 = (pthread_cond_t *)(v3 + 64);
  v350 = v3 + 256;
  v344 = (char *)(v3 + 36672);
  v342 = (void (**)(uint64_t, uint64_t))(v2 + 6611);
  v341 = v3 + 18496;
  v5 = (unsigned int *)(v3 + 204);
  v6 = (unsigned int *)(v3 + 208);
  v332 = (pthread_cond_t *)(v3 + 136);
  v7 = (unsigned int *)(v3 + 120);
  v346 = v3;
  v340 = v1;
  v343 = v2;
LABEL_4:
  if (atomic_load((unsigned int *)v2[106]))
  {
LABEL_5:
    v1[37] = 1;
    pthread_cond_signal((pthread_cond_t *)(a1 + 258576));
    atomic_store(0, (unsigned int *)(v3 + 124));
    pthread_cond_wait(v345, (pthread_mutex_t *)v3);
    v1[37] = 0;
    v9 = atomic_load((unsigned int *)(v3 + 112));
    do
      v10 = __ldaxr(v7);
    while (__stlxr(0xFFFFFFFF, v7));
    if (v10 >= v9)
    {
      v11 = *(_DWORD *)(v3 + 116);
      if (v11)
      {
        if (v10 == -1)
          goto LABEL_354;
      }
      else if (v10 == -1 || !*(_QWORD *)(*v2 + 5712 * v9 + 5592))
      {
        goto LABEL_354;
      }
      if (v10 <= v11 + v9)
      {
        v35 = *((_DWORD *)v2 + 2);
        *(_DWORD *)(v3 + 116) = v10 - v9;
        if (v10 - v9 < v35)
        {
          v36 = *v2;
          v37 = v9 + v35;
          do
          {
            *(_QWORD *)(v36 + 5712 * (v10 % v35) + 5592) = 0;
            ++v10;
          }
          while (v37 != v10);
        }
      }
    }
    goto LABEL_354;
  }
  if (!*((_DWORD *)v2 + 2))
  {
    if (!*(_DWORD *)(v3 + 128))
    {
      v39 = atomic_load((unsigned int *)(v3 + 112));
      goto LABEL_87;
    }
LABEL_31:
    v28 = *(_QWORD *)(v3 + 184);
    v29 = *(_QWORD *)(v3 + 192);
    v30 = ((uint64_t)*(int *)(v29 + 68) >> 1) - 4;
    v31 = *(_DWORD *)(v3 + 200);
    if (v31 == 12)
      goto LABEL_95;
    if (v31 == 11)
    {
      *(_DWORD *)(v3 + 128) = 0;
      if (atomic_load((unsigned int *)(v3 + 124)))
        pthread_cond_signal(v345);
      pthread_mutex_unlock((pthread_mutex_t *)v3);
      v33 = *(_DWORD *)(v29 + 68);
      v34 = v33 == 12 || v33 == 10;
      if (v34)
      {
        sub_218BA7D54((void (**)(uint64_t, uint64_t, uint64_t))&v343[421 * (int)v30 + 6611], v29, v28, v344, v350);
LABEL_94:
        *(_DWORD *)(v3 + 200) = 12;
        pthread_mutex_lock((pthread_mutex_t *)v3);
        *(_DWORD *)(v3 + 128) = 1;
        do
LABEL_95:
          v87 = __ldaxr(v5);
        while (__stlxr(v87 + 1, v5));
        pthread_mutex_unlock((pthread_mutex_t *)v3);
        v88 = *(_DWORD *)(v29 + 60);
        v90 = v88 + 31;
        v89 = v88 < -31;
        v91 = v88 + 62;
        if (!v89)
          v91 = v90;
        if (v87 < v91 >> 5)
        {
          v92 = v91 >> 5;
          v93 = (v91 >> 5) - 1;
          v94 = (uint64_t)&v343[421 * (int)v30 + 6611];
          do
          {
            if (v87 >= v93)
            {
              pthread_mutex_lock((pthread_mutex_t *)v346);
              *(_DWORD *)(v346 + 128) = 0;
              pthread_mutex_unlock((pthread_mutex_t *)v346);
            }
            else
            {
              pthread_cond_signal(v345);
            }
            v95 = *(_DWORD *)(v29 + 68);
            if (v95 == 12 || v95 == 10)
            {
              sub_218BA8214(v94, v29, v28, (uint64_t)v344, v350, v87);
            }
            else
            {
              if (v95 != 8)
                goto LABEL_573;
              sub_218B73614((uint64_t)v342, v29, v28, v341, v350, v87);
            }
            do
              v87 = __ldaxr(v5);
            while (__stlxr(v87 + 1, v5));
            do
              v97 = __ldaxr(v6);
            while (__stlxr(v97 + 1, v6));
          }
          while (v87 < v92);
        }
        v3 = v346;
        pthread_mutex_lock((pthread_mutex_t *)v346);
        *(_DWORD *)(v346 + 128) = 0;
        do
        {
          v98 = __ldaxr(v6);
          v99 = v98 + 1;
        }
        while (__stlxr(v99, v6));
        v100 = atomic_load(v5);
        v1 = v340;
        v2 = v343;
        if (v99 < v100)
          goto LABEL_354;
        *(_DWORD *)(v346 + 132) = 1;
        v101 = v332;
        goto LABEL_118;
      }
      if (v33 == 8)
      {
        sub_218B73298(v342, v29, v28, v341, v350);
        goto LABEL_94;
      }
    }
LABEL_573:
    abort();
  }
  v12 = 0;
  do
  {
    v13 = *v2 + 5712 * v12;
    if (atomic_load((unsigned int *)(v13 + 5600)))
    {
      v15 = *v2 + 5712 * v12;
      pthread_mutex_lock((pthread_mutex_t *)(v15 + 5608));
      v16 = *(_QWORD *)(v15 + 5672);
      *(_QWORD *)(v15 + 5680) = 0;
      *(_QWORD *)(v15 + 5672) = 0;
      atomic_store(0, (unsigned int *)(v13 + 5600));
      pthread_mutex_unlock((pthread_mutex_t *)(v15 + 5608));
      if (v16)
      {
        do
        {
          v17 = *(_QWORD *)(v16 + 24);
          sub_218BA447C((_QWORD *)v13, (unsigned int *)v16, 0);
          v16 = v17;
        }
        while (v17);
      }
    }
    ++v12;
    v18 = *((unsigned int *)v2 + 2);
  }
  while (v12 < v18);
  v3 = v346;
  v1 = v340;
  if (*(_DWORD *)(v346 + 128))
    goto LABEL_31;
  if (v18 >= 2)
  {
    for (i = 0; i < v18; ++i)
    {
      v20 = atomic_load((unsigned int *)(v346 + 112));
      v21 = *v2;
      v22 = (i + v20) % *((_DWORD *)v2 + 2);
      if (!atomic_load((unsigned int *)(*v2 + 5712 * v22 + 5544)))
      {
        v24 = *(_QWORD *)(v21 + 5712 * v22 + 5576);
        if (v24)
        {
          v25 = *(_DWORD *)(v24 + 4);
          if (v25 == 1)
          {
            v26 = *(unsigned int **)(v21 + 5712 * v22 + 3080);
            if (!v26)
            {
              v27 = 1;
LABEL_143:
              v118 = v21 + 5712 * v22;
              v119 = (unsigned int *)(v118 + 5564);
              do
                v120 = __ldaxr(v119);
              while (__stlxr(v120 | (v27 == 2147483646), v119));
LABEL_145:
              v58 = 0;
              v121 = *(_QWORD *)(v24 + 24);
              *(_QWORD *)(v118 + 5576) = v121;
              if (!v121)
                goto LABEL_146;
              goto LABEL_147;
            }
            v27 = atomic_load(v26);
            if (v27)
              goto LABEL_143;
          }
          else if (!v25)
          {
            v118 = v21 + 5712 * v22;
            goto LABEL_145;
          }
        }
      }
      LODWORD(v18) = *((_DWORD *)v2 + 2);
    }
  }
  v38 = *(_DWORD *)(v346 + 116);
  v39 = atomic_load((unsigned int *)(v346 + 112));
  if (v38 >= v18)
  {
    do
LABEL_87:
      v84 = __ldaxr(v7);
    while (__stlxr(0xFFFFFFFF, v7));
    v85 = v84 - v39;
    if (v84 < v39)
      goto LABEL_129;
    v86 = *(_DWORD *)(v3 + 116);
    if (v86)
    {
      if (v84 == -1)
      {
LABEL_129:
        if (*((_DWORD *)v2 + 2))
        {
          v107 = 0;
          v108 = 0;
          do
          {
            v109 = *v2 + 5712 * v107;
            v110 = atomic_load((unsigned int *)(v109 + 5600));
            v348 = v110;
            if (v110)
            {
              v111 = *v2 + 5712 * v107;
              v112 = (pthread_mutex_t *)(v111 + 5608);
              pthread_mutex_lock((pthread_mutex_t *)(v111 + 5608));
              v113 = *(_QWORD *)(v111 + 5672);
              *(_QWORD *)(v111 + 5680) = 0;
              *(_QWORD *)(v111 + 5672) = 0;
              v2 = v343;
              atomic_store(0, (unsigned int *)(v109 + 5600));
              pthread_mutex_unlock(v112);
              if (v113)
              {
                do
                {
                  v114 = *(_QWORD *)(v113 + 24);
                  sub_218BA447C((_QWORD *)v109, (unsigned int *)v113, 0);
                  v113 = v114;
                }
                while (v114);
              }
            }
            v108 |= v348;
            ++v107;
          }
          while (v107 < *((unsigned int *)v2 + 2));
          v3 = v346;
          v1 = v340;
          if (v108)
            goto LABEL_354;
        }
        goto LABEL_5;
      }
    }
    else if (v84 == -1 || !*(_QWORD *)(*v2 + 5712 * v39 + 5592))
    {
      goto LABEL_129;
    }
    if (v84 <= v86 + v39)
    {
      v115 = *((_DWORD *)v2 + 2);
      *(_DWORD *)(v3 + 116) = v85;
      if (v85 < v115)
      {
        v116 = *v2;
        v117 = v39 + v115;
        do
        {
          *(_QWORD *)(v116 + 5712 * (v84 % v115) + 5592) = 0;
          ++v84;
        }
        while (v117 != v84);
      }
      goto LABEL_354;
    }
    goto LABEL_129;
  }
  while (1)
  {
    v40 = *v2;
    v41 = (*(_DWORD *)(v3 + 116) + v39) % *((_DWORD *)v2 + 2);
    v347 = v40;
    v118 = v40 + 5712 * v41;
    v42 = (unsigned int *)(v118 + 5600);
    if (atomic_load((unsigned int *)(v118 + 5600)))
    {
      v44 = v40 + 5712 * v41;
      v45 = (_QWORD *)v44;
      v46 = (pthread_mutex_t *)(v44 + 5608);
      pthread_mutex_lock((pthread_mutex_t *)(v44 + 5608));
      v47 = *(_QWORD *)(v44 + 5672);
      *(_QWORD *)(v44 + 5680) = 0;
      *(_QWORD *)(v44 + 5672) = 0;
      v3 = v346;
      atomic_store(0, v42);
      v48 = v46;
      v118 = (uint64_t)v45;
      pthread_mutex_unlock(v48);
      if (v47)
      {
        do
        {
          v49 = *(_QWORD *)(v47 + 24);
          sub_218BA447C(v45, (unsigned int *)v47, 0);
          v47 = v49;
        }
        while (v49);
      }
    }
    v333 = v41;
    v50 = v347 + 5712 * v41;
    v24 = *(_QWORD *)(v50 + 5592);
    v51 = (uint64_t *)(v24 + 24);
    if (!v24)
      v51 = (uint64_t *)(v50 + 5576);
    v52 = *v51;
    if (v52)
      break;
LABEL_84:
    v82 = *(_DWORD *)(v3 + 116) + 1;
    *(_DWORD *)(v3 + 116) = v82;
    v2 = v343;
    v83 = *((_DWORD *)v343 + 2);
    v39 = atomic_load((unsigned int *)(v3 + 112));
    v1 = v340;
    if (v82 >= v83)
      goto LABEL_87;
  }
  v53 = (_QWORD *)(v50 + 5592);
  v54 = v347 + 5712 * v41;
  v55 = (unsigned int *)(v54 + 5564);
  v56 = v54 + 24;
  v330 = v54 + 4328;
  v329 = (unsigned int *)(v54 + 4336);
  v57 = (pthread_cond_t *)(v54 + 3264);
  v328 = (unsigned int *)(v54 + 4340);
  v327 = (_QWORD *)(v54 + 4352);
  v337 = (pthread_cond_t *)(v54 + 3264);
  while (1)
  {
    v58 = v24;
    v24 = v52;
    v59 = *(_DWORD *)(v52 + 4);
    if (v59 == 1)
      goto LABEL_63;
    if (v59 == 4 || v59 == 2)
    {
      v61 = v118;
      v62 = v24;
      v63 = v3;
      v64 = v118;
      v65 = v58;
      v66 = v53;
      v67 = sub_218BA65EC((_DWORD *)v24, v61, *((_DWORD *)v343 + 2) > 1u);
      v57 = v337;
      v53 = v66;
      v58 = v65;
      v118 = v64;
      v3 = v63;
      v24 = v62;
      if (!v67)
        goto LABEL_123;
      goto LABEL_63;
    }
    if (!*(_DWORD *)(v24 + 12))
    {
      if (v59 == 7)
      {
        v80 = atomic_load((unsigned int *)(*v327 + 4 * ((*(_DWORD *)(v24 + 8) - 1) >> 5)));
        if (((v80 >> (*(_BYTE *)(v24 + 8) - 1)) & 1) != 0)
          goto LABEL_123;
      }
      else
      {
        v81 = atomic_load(v328);
        if (v81 >= *(_DWORD *)(v24 + 16))
        {
          v235 = v81 == 2147483646;
          do
            v236 = __ldaxr(v55);
          while (__stlxr(v236 | v235, v55));
          goto LABEL_123;
        }
      }
      goto LABEL_63;
    }
    atomic_load(v55);
    v34 = v59 == 3;
    v68 = v59 == 3;
    atomic_load((unsigned int *)(v347 + 5712 * v333 + 4 * v68 + 5548));
    v69 = *(unsigned __int8 *)(*(_QWORD *)v56 + 445);
    v70 = *(_DWORD *)(v330 + 4 * v68);
    v71 = v69;
    if (!v34)
      goto LABEL_72;
    v72 = atomic_load(v329);
    if (v72 >= *(_DWORD *)(v24 + 8))
      break;
LABEL_63:
    v52 = *(_QWORD *)(v24 + 24);
    *v53 = v24;
    if (!v52)
      goto LABEL_84;
  }
  v73 = v72 == 2147483646;
  do
    v74 = __ldaxr(v55);
  while (__stlxr(v74 | v73, v55));
  v71 = *(unsigned __int8 *)(*(_QWORD *)v56 + 445);
LABEL_72:
  if (v71)
  {
    v75 = 0;
    v76 = v70 * (uint64_t)v69;
    do
    {
      v77 = atomic_load((unsigned int *)(v57->__sig + 14624 * (v75 + v76) + 4 * v68 + 13888));
      if (v77 < *(_DWORD *)(v24 + 12))
        goto LABEL_63;
      v78 = v77 == 2147483646;
      do
        v79 = __ldaxr(v55);
      while (__stlxr(v79 | v78, v55));
    }
    while (++v75 < (unint64_t)*(unsigned __int8 *)(*(_QWORD *)v56 + 445));
  }
  if (*(_DWORD *)(v24 + 8) + 1 < *(_DWORD *)(v347 + 5712 * v333 + 3464))
  {
    v102 = v58;
    v103 = *(_OWORD *)(v24 + 16);
    *(_OWORD *)(v24 + 32) = *(_OWORD *)v24;
    *(_OWORD *)(v24 + 48) = v103;
    v104 = *(_DWORD *)(v24 + 40) + 1;
    *(_DWORD *)(v24 + 40) = v104;
    v105 = *(int *)(v330 + 4 * v68) + 1;
    if (v104 == *(unsigned __int16 *)(*(_QWORD *)v56 + 2 * v105 + 580))
    {
      *(_DWORD *)(v330 + 4 * v68) = v105;
      v104 = *(_DWORD *)(v24 + 40);
    }
    *(_DWORD *)(v24 + 44) = v104 + 1;
    v106 = v24;
    sub_218BA447C((_QWORD *)v118, (unsigned int *)(v24 + 32), 0);
    v24 = v106;
    v58 = v102;
  }
LABEL_123:
  if (!v58)
  {
    v1 = v340;
    goto LABEL_145;
  }
  *(_QWORD *)(v58 + 24) = *(_QWORD *)(v24 + 24);
  v1 = v340;
  if (!*(_QWORD *)(v24 + 24))
LABEL_146:
    *(_QWORD *)(v118 + 5584) = v58;
LABEL_147:
  if (*(_DWORD *)(v24 + 4) >= 2u && !*(_QWORD *)(v118 + 5576))
    ++*(_DWORD *)(v3 + 116);
  *(_QWORD *)(v24 + 24) = 0;
  atomic_store(1u, (unsigned int *)(v3 + 124));
  v338 = (pthread_cond_t *)v24;
  pthread_cond_signal(v345);
  pthread_mutex_unlock((pthread_mutex_t *)v3);
  v122 = v338;
  v123 = (unsigned int *)(v118 + 5564);
  v349 = v118;
  while (2)
  {
    v124 = atomic_load((unsigned int *)v343[106]);
    do
      v125 = __ldaxr(v123);
    while (__stlxr(v125 | v124, v123));
    *(_QWORD *)(a1 + 8) = v118;
    sig_high = HIDWORD(v122->__sig);
    v127 = *(unsigned int *)v122->__opaque;
    switch(sig_high)
    {
      case 0:
        v152 = sub_218B89254(v118);
        v153 = v152;
        v154 = *(unsigned int **)(v118 + 3080);
        if (!v154)
        {
          v3 = v346;
          v122 = v338;
          if (v152)
          {
            pthread_mutex_lock((pthread_mutex_t *)v346);
            goto LABEL_309;
          }
          HIDWORD(v338->__sig) = 1;
          continue;
        }
        v155 = atomic_load(v154);
        v3 = v346;
        v122 = v338;
        if (!v152 && v155 != 2147483646)
        {
          HIDWORD(v338->__sig) = 1;
          if (!v155)
          {
            v185 = (pthread_mutex_t *)(v118 + 5608);
            pthread_mutex_lock((pthread_mutex_t *)(v118 + 5608));
            v171 = v338;
            *(_QWORD *)&v338->__opaque[16] = 0;
            if (*(_QWORD *)(v118 + 5672))
              v172 = (pthread_cond_t **)(*(_QWORD *)(v118 + 5680) + 24);
            else
              v172 = (pthread_cond_t **)(v118 + 5672);
            v2 = v343;
LABEL_352:
            *v172 = v171;
            *(_QWORD *)(v118 + 5680) = v171;
            atomic_store(1u, (unsigned int *)(v118 + 5600));
            v184 = v185;
            goto LABEL_353;
          }
          continue;
        }
        pthread_mutex_lock((pthread_mutex_t *)v346);
        if (!v153)
        {
LABEL_310:
          v220 = 1;
          v153 = -22;
          goto LABEL_312;
        }
LABEL_309:
        if (v153 == -22)
          goto LABEL_310;
        v220 = -1;
LABEL_312:
        v2 = v343;
        atomic_store(v220, (unsigned int *)(v118 + 5564));
        atomic_store(0, (unsigned int *)(v118 + 5568));
        atomic_store(1u, (unsigned int *)(v118 + 5548));
        atomic_store(1u, (unsigned int *)(v118 + 5552));
        atomic_store(0xFFFFFFFE, *(unsigned int **)(v118 + 2664));
        atomic_store(0xFFFFFFFE, (unsigned int *)(*(_QWORD *)(v118 + 2664) + 4));
        sub_218B8ADFC(v118, v153);
        *(_DWORD *)(v118 + 3124) = 0;
        pthread_cond_signal((pthread_cond_t *)(v118 + 5424));
        sig = v338->__sig;
        v222 = atomic_load((unsigned int *)(v3 + 112));
        do
          v223 = __ldaxr(v7);
        while (__stlxr(0xFFFFFFFF, v7));
        if (v223 < v222)
        {
          if (sig == -1)
            goto LABEL_354;
          v223 = -1;
        }
        v224 = *(_DWORD *)(v3 + 116);
        if (v224 || *(_QWORD *)(*v343 + 5712 * v222 + 5592))
        {
          if (v223 == -1)
          {
            if (sig == -1)
              goto LABEL_354;
          }
          else if (sig == -1)
          {
            if (v223 > v224 + v222)
              goto LABEL_354;
            v225 = v223 - v222;
            v226 = *((_DWORD *)v343 + 2);
            goto LABEL_335;
          }
          v226 = *((_DWORD *)v343 + 2);
          if (v222 <= sig)
            v227 = 0;
          else
            v227 = *((_DWORD *)v343 + 2);
          v228 = v227 + sig;
          if (v223 < v228)
            v228 = v223;
          if (v224 < v226 && v224 + v222 < v228)
            goto LABEL_354;
          v225 = v228 - v222;
          if (v228 - v222 < v226)
          {
            while (!*(_QWORD *)(*v343 + 5712 * (v228 % v226) + 5576))
            {
              ++v225;
              ++v228;
              if (v226 == v225)
                goto LABEL_538;
            }
          }
LABEL_335:
          *(_DWORD *)(v3 + 116) = v225;
          v229 = v226 - v225;
          if (v226 > v225)
          {
            v230 = *v343;
            v231 = v225 + v222;
            do
            {
              *(_QWORD *)(v230 + 5712 * (v231 % v226) + 5592) = 0;
              ++v231;
              --v229;
            }
            while (v229);
          }
        }
LABEL_354:
        if (!v1[38])
          goto LABEL_4;
LABEL_2:
        pthread_mutex_unlock((pthread_mutex_t *)v3);
        return 0;
      case 1:
        if (atomic_load(v123))
          v167 = -22;
        else
          v167 = sub_218B8A50C(v118);
        v2 = v343;
        v3 = v346;
        if (*(_BYTE *)(*(_QWORD *)(v118 + 24) + 438) && !*(_DWORD *)(v118 + 5560))
        {
          if (v167 >= 0)
            v204 = 1;
          else
            v204 = 2147483646;
          atomic_store(v204, *(unsigned int **)(v118 + 3104));
        }
        if (!v167)
        {
          v212 = 0;
          v213 = (unsigned int *)(v118 + 5568);
          v214 = 1;
          while (1)
          {
            v215 = v212;
            if (sub_218BA40F4(v349, v214))
            {
              pthread_mutex_lock((pthread_mutex_t *)v346);
              v216 = v349;
              atomic_store(1u, (unsigned int *)(v349 + 4 * (2 - v214) + 5548));
              atomic_store(0xFFFFFFFF, (unsigned int *)(v216 + 5564));
              v217 = *(_DWORD *)(v216 + 3464)
                   + *(unsigned __int8 *)(*(_QWORD *)(v216 + 24) + 449)
                   * *(unsigned __int8 *)(*(_QWORD *)(v216 + 24) + 445);
              do
                v218 = __ldaxr(v213);
              while (__stlxr(v218 - v217, v213));
              atomic_store(0xFFFFFFFE, (unsigned int *)(*(_QWORD *)(v349 + 2664) + 4 * v214 - 4));
              if ((v215 & 1) != 0)
              {
                if (atomic_load((unsigned int *)(v349 + 5552)))
                {
                  atomic_load((unsigned int *)(v349 + 5568));
                  sub_218B8ADFC(v349, -12);
                  *(_DWORD *)(v349 + 3124) = 0;
                  pthread_cond_signal((pthread_cond_t *)(v118 + 5424));
LABEL_572:
                  v3 = v346;
                  pthread_mutex_lock((pthread_mutex_t *)v346);
                  v1 = v340;
                  goto LABEL_354;
                }
              }
              pthread_mutex_unlock((pthread_mutex_t *)v346);
            }
            v212 = 1;
            v214 = 2;
            if ((v215 & 1) != 0)
              goto LABEL_572;
          }
        }
        pthread_mutex_lock((pthread_mutex_t *)v346);
        if (v167 == -22)
          v205 = 1;
        else
          v205 = -1;
        atomic_store(v205, (unsigned int *)(v118 + 5564));
        atomic_store(0, (unsigned int *)(v118 + 5568));
        atomic_store(1u, (unsigned int *)(v118 + 5548));
        atomic_store(1u, (unsigned int *)(v118 + 5552));
        atomic_store(0xFFFFFFFE, *(unsigned int **)(v118 + 2664));
        atomic_store(0xFFFFFFFE, (unsigned int *)(*(_QWORD *)(v118 + 2664) + 4));
        sub_218B8ADFC(v118, v167);
        *(_DWORD *)(v118 + 3124) = 0;
        pthread_cond_signal((pthread_cond_t *)(v118 + 5424));
        v206 = v338->__sig;
        v207 = atomic_load((unsigned int *)(v346 + 112));
        do
          v208 = __ldaxr(v7);
        while (__stlxr(0xFFFFFFFF, v7));
        v1 = v340;
        if (v208 >= v207)
          goto LABEL_293;
        if (v206 == -1)
          goto LABEL_570;
        v208 = -1;
LABEL_293:
        v209 = *(_DWORD *)(v346 + 116);
        if (!v209 && !*(_QWORD *)(*v343 + 5712 * v207 + 5592))
          goto LABEL_570;
        if (v208 == -1)
        {
          if (v206 == -1)
            goto LABEL_570;
        }
        else if (v206 == -1)
        {
          if (v208 <= v209 + v207)
          {
            v210 = v208 - v207;
            v211 = *((_DWORD *)v343 + 2);
LABEL_567:
            *(_DWORD *)(v346 + 116) = v210;
            v324 = v211 - v210;
            if (v211 > v210)
            {
              v325 = *v343;
              v326 = v210 + v207;
              do
              {
                *(_QWORD *)(v325 + 5712 * (v326 % v211) + 5592) = 0;
                ++v326;
                --v324;
              }
              while (v324);
            }
          }
LABEL_570:
          atomic_store(1u, (unsigned int *)(v118 + 5544));
          goto LABEL_354;
        }
        v211 = *((_DWORD *)v343 + 2);
        if (v207 <= v206)
          v322 = 0;
        else
          v322 = *((_DWORD *)v343 + 2);
        v323 = v322 + v206;
        if (v208 < v323)
          v323 = v208;
        if (v209 < v211 && v209 + v207 < v323)
          goto LABEL_570;
        v210 = v323 - v207;
        if (v323 - v207 >= v211)
          goto LABEL_567;
        do
        {
          if (*(_QWORD *)(*v343 + 5712 * (v323 % v211) + 5576))
            goto LABEL_567;
          ++v210;
          ++v323;
        }
        while (v211 != v210);
        *(_DWORD *)(v346 + 116) = v211;
        goto LABEL_570;
      case 2:
      case 4:
        v128 = sig_high == 2;
        v129 = v118;
        v130 = (unint64_t)v122 - *(_QWORD *)(v118 + 8 * v128 + 5488);
        v131 = *(_QWORD *)(v129 + 3264);
        v132 = v130 >> 5;
        *(_QWORD *)(a1 + 16) = v131 + 14624 * (int)(v130 >> 5);
        *(_DWORD *)(a1 + 28) = (_DWORD)v127 << *(_DWORD *)(v129 + 3468);
        v133 = *((_DWORD *)v343 + 2);
        if (sig_high == 4)
          v134 = 2;
        else
          v134 = 1;
        if (v133 <= 1)
          v134 = 0;
        *v1 = v134;
        v135 = v133 > 1;
        v136 = v125 | v124;
        if (!(v125 | v124))
        {
          v137 = v133;
          v136 = sub_218B7DA88(a1);
          v133 = v137;
          v132 = v130 >> 5;
          v122 = v338;
        }
        v138 = (uint64_t)v130 >> 5;
        v139 = v127 + 1;
        if (v136)
          v140 = 2147483646;
        else
          v140 = v127 + 1;
        do
          v141 = __ldaxr(v123);
        while (__stlxr(v141 | v136, v123));
        if (v139 << *(_DWORD *)(v349 + 3468) >= *(_DWORD *)(v131 + 14624 * v138 + 13876))
        {
          v331 = v132;
          v334 = v133;
          v157 = (unsigned int *)v122;
          pthread_mutex_lock((pthread_mutex_t *)v346);
          v158 = v131 + 14624 * v138;
          v3 = v346;
          atomic_store(v140, (unsigned int *)(v158 + 4 * v128 + 13888));
          v159 = *v157;
          v160 = atomic_load((unsigned int *)(v3 + 112));
          do
            v161 = __ldaxr(v7);
          while (__stlxr(0xFFFFFFFF, v7));
          v2 = v343;
          if (v161 < v160)
          {
            if (v159 != -1)
            {
              v161 = -1;
              goto LABEL_194;
            }
LABEL_249:
            v191 = atomic_load((unsigned int *)(v349 + 5564));
            v192 = *(_QWORD *)(v349 + 24);
            v193 = v336;
            if (*(_BYTE *)(v192 + 438)
              && *v340 <= 1
              && *(_DWORD *)(v349 + 5560)
              && *(unsigned __int16 *)(v192 + 710) == v331)
            {
              if (!v191)
              {
                sub_218B9FC14(v192, *(_QWORD *)(v349 + 3096), *(_QWORD *)(v349 + 3264) + 14624 * *(unsigned __int16 *)(v192 + 710));
                v193 = v336;
              }
              if (*((_DWORD *)v343 + 2) >= 2u)
              {
                if (v191)
                  v194 = 2147483646;
                else
                  v194 = 1;
                atomic_store(v194, *(unsigned int **)(v349 + 3104));
              }
            }
            v195 = (unsigned int *)(v349 + 5568);
            do
            {
              v196 = __ldaxr(v195);
              v197 = v196 - 1;
            }
            while (__stlxr(v197, v195));
            if (!v197)
            {
              if (atomic_load((unsigned int *)(v349 + 5548)))
              {
                if (v334 < 2 || (v199 = atomic_load((unsigned int *)(v349 + 5552))) != 0)
                {
                  v200 = atomic_load((unsigned int *)(v349 + 5564));
                  if (v200)
                    v201 = -12;
                  else
                    v201 = 0;
                  if (v200 == 1)
                    v202 = -22;
                  else
                    v202 = v201;
                  sub_218B8ADFC(v349, v202);
                  *(_DWORD *)(v349 + 3124) = 0;
                  pthread_cond_signal((pthread_cond_t *)(v349 + 5424));
                  v193 = v336;
                }
              }
            }
            atomic_load(v195);
            do
              v203 = __ldaxr(v193);
            while (__stlxr(v203 | 1, v193));
            v1 = v340;
            if (v203)
              goto LABEL_354;
            v101 = v345;
LABEL_118:
            pthread_cond_signal(v101);
            goto LABEL_354;
          }
LABEL_194:
          v162 = *(_DWORD *)(v346 + 116);
          if (!v162 && !*(_QWORD *)(*v343 + 5712 * v160 + 5592))
            goto LABEL_249;
          if (v161 == -1)
          {
            if (v159 == -1)
              goto LABEL_249;
          }
          else if (v159 == -1)
          {
            if (v161 > v162 + v160)
              goto LABEL_249;
            v163 = v161 - v160;
            v164 = *((_DWORD *)v343 + 2);
            goto LABEL_246;
          }
          v164 = *((_DWORD *)v343 + 2);
          if (v160 <= v159)
            v186 = 0;
          else
            v186 = *((_DWORD *)v343 + 2);
          v187 = v186 + v159;
          if (v161 < v187)
            v187 = v161;
          if (v162 < v164 && v162 + v160 < v187)
            goto LABEL_249;
          v163 = v187 - v160;
          if (v187 - v160 < v164)
          {
            do
            {
              if (*(_QWORD *)(*v343 + 5712 * (v187 % v164) + 5576))
                goto LABEL_246;
              ++v163;
              ++v187;
            }
            while (v164 != v163);
            *(_DWORD *)(v346 + 116) = v164;
            goto LABEL_249;
          }
LABEL_246:
          *(_DWORD *)(v346 + 116) = v163;
          v188 = v164 - v163;
          if (v164 > v163)
          {
            v189 = *v343;
            v190 = v163 + v160;
            do
            {
              *(_QWORD *)(v189 + 5712 * (v190 % v164) + 5592) = 0;
              ++v190;
              --v188;
            }
            while (v188);
          }
          goto LABEL_249;
        }
        ++*(_DWORD *)v122->__opaque;
        *(_DWORD *)&v122->__opaque[12] = 0;
        v142 = v135;
        v143 = v122;
        v144 = sub_218BA65EC(v122, v349, v142);
        atomic_store(v140, (unsigned int *)(v131 + 14624 * v138 + 4 * v128 + 13888));
        if (v144)
        {
          pthread_mutex_lock((pthread_mutex_t *)(v349 + 5608));
          *(_QWORD *)&v143->__opaque[16] = 0;
          v3 = v346;
          if (*(_QWORD *)(v349 + 5672))
            v165 = (pthread_cond_t **)(*(_QWORD *)(v349 + 5680) + 24);
          else
            v165 = (pthread_cond_t **)(v349 + 5672);
          v2 = v343;
          *v165 = v143;
          *(_QWORD *)(v349 + 5680) = v143;
          atomic_store(1u, (unsigned int *)(v349 + 5600));
          v184 = (pthread_mutex_t *)(v349 + 5608);
LABEL_353:
          pthread_mutex_unlock(v184);
          pthread_mutex_lock((pthread_mutex_t *)v3);
          v1 = v340;
          goto LABEL_354;
        }
        v145 = v143->__sig;
        v146 = *((_DWORD *)v343 + 2);
        v118 = v349;
        v147 = atomic_load((unsigned int *)(v346 + 112));
        if (v147 <= v145)
          v146 = 0;
        v148 = v146 + v145;
        v122 = v143;
        do
        {
          v149 = v148;
          do
            v148 = __ldaxr(v7);
          while (__stlxr(v149, v7));
        }
        while (v148 < v149);
        v1 = v340;
        if (v149 == v147)
        {
          v150 = atomic_load((unsigned int *)(v346 + 112));
          if (v150 != v147)
          {
            while (1)
            {
              v151 = __ldaxr(v7);
              if (v151 != v147)
                break;
              if (!__stlxr(0xFFFFFFFF, v7))
                goto LABEL_186;
            }
            __clrex();
          }
        }
        do
LABEL_186:
          v156 = __ldaxr(v336);
        while (__stlxr(v156 | 1, v336));
        if (!v156)
        {
          pthread_cond_signal(v345);
          v122 = v338;
        }
        continue;
      case 3:
      case 10:
        goto LABEL_384;
      case 5:
        if (!atomic_load(v123))
        {
          (*(void (**)(uint64_t, _QWORD))(v118 + 3312))(v118, *(unsigned int *)v122->__opaque);
          v122 = v338;
        }
        v169 = atomic_load((unsigned int *)(v118 + 4340));
        v170 = *(_DWORD *)v122->__opaque;
        if (v169 >= v170)
          goto LABEL_209;
        HIDWORD(v122->__sig) = 6;
        v185 = (pthread_mutex_t *)(v118 + 5608);
        *(_DWORD *)&v122->__opaque[4] = 0;
        *(_DWORD *)&v122->__opaque[8] = v170;
        pthread_mutex_lock((pthread_mutex_t *)(v118 + 5608));
        v171 = v338;
        *(_QWORD *)&v338->__opaque[16] = 0;
        v3 = v346;
        if (*(_QWORD *)(v118 + 5672))
          v172 = (pthread_cond_t **)(*(_QWORD *)(v118 + 5680) + 24);
        else
          v172 = (pthread_cond_t **)(v118 + 5672);
        v2 = v343;
        goto LABEL_352;
      case 6:
LABEL_209:
        v173 = atomic_load(v123);
        v3 = v346;
        if (!v173)
        {
          (*(void (**)(uint64_t, uint64_t))(v118 + 3320))(v118, v127);
          v122 = v338;
        }
        v174 = *(_QWORD *)(v118 + 24);
        if (*(_BYTE *)(v174 + 830) || *(_BYTE *)(v174 + 831))
        {
          if (atomic_load((unsigned int *)(v118 + 5564)))
            v176 = 2147483646;
          else
            v176 = v127 + 1;
          atomic_store(v176, (unsigned int *)(v118 + 4340));
          v177 = v122->__sig;
          v178 = *((_DWORD *)v343 + 2);
          v179 = atomic_load((unsigned int *)(v346 + 112));
          if (v179 <= v177)
            v178 = 0;
          v180 = v178 + v177;
          do
          {
            v181 = v180;
            do
              v180 = __ldaxr(v7);
            while (__stlxr(v181, v7));
          }
          while (v180 < v181);
          if (v181 == v179)
          {
            v182 = atomic_load((unsigned int *)(v346 + 112));
            if (v182 != v179)
            {
              while (1)
              {
                v183 = __ldaxr(v7);
                if (v183 != v179)
                  break;
                if (!__stlxr(0xFFFFFFFF, v7))
                  goto LABEL_357;
              }
              __clrex();
            }
          }
          do
LABEL_357:
            v237 = __ldaxr(v336);
          while (__stlxr(v237 | 1, v336));
          if (!v237)
          {
            pthread_cond_signal(v345);
            v122 = v338;
          }
          goto LABEL_360;
        }
        if (*(_BYTE *)(*(_QWORD *)(v118 + 8) + 414) || *(_DWORD *)(v118 + 5352))
        {
          v232 = (unsigned int *)(*(_QWORD *)(v118 + 4352) + 4 * ((int)v127 >> 5));
          do
            v233 = __ldaxr(v232);
          while (__stlxr(v233 | (1 << v127), v232));
          if ((_DWORD)v127)
          {
            v234 = atomic_load((unsigned int *)(*(_QWORD *)(v118 + 4352) + 4 * (((int)v127 - 1) >> 5)));
            if (((v234 >> (v127 - 1)) & 1) == 0)
            {
              HIDWORD(v122->__sig) = 7;
              *(_DWORD *)&v122->__opaque[4] = 0;
              *(_DWORD *)&v122->__opaque[8] = 0;
              sub_218BA67D8(v118, (uint64_t)v122);
              pthread_mutex_lock((pthread_mutex_t *)v346);
              v2 = v343;
              goto LABEL_354;
            }
          }
        }
LABEL_360:
        if (!*(_BYTE *)(*(_QWORD *)(v118 + 8) + 414))
          goto LABEL_378;
        if (!atomic_load(v123))
        {
          (*(void (**)(uint64_t, uint64_t))(v118 + 3328))(a1, v127);
          v122 = v338;
        }
        v239 = v122->__sig;
        v240 = *((_DWORD *)v343 + 2);
        v241 = atomic_load((unsigned int *)(v3 + 112));
        if (v241 <= v239)
          v240 = 0;
        v242 = v240 + v239;
        do
        {
          v243 = v242;
          do
            v242 = __ldaxr(v7);
          while (__stlxr(v243, v7));
        }
        while (v242 < v243);
        if (v243 != v241)
          goto LABEL_375;
        v244 = atomic_load((unsigned int *)(v3 + 112));
        if (v244 == v241)
          goto LABEL_375;
        while (1)
        {
          v245 = __ldaxr(v7);
          if (v245 != v241)
            break;
          if (!__stlxr(0xFFFFFFFF, v7))
            goto LABEL_375;
        }
        __clrex();
        do
LABEL_375:
          v246 = __ldaxr(v336);
        while (__stlxr(v246 | 1, v336));
        if (!v246)
        {
          pthread_cond_signal(v345);
          v122 = v338;
        }
LABEL_378:
        if (*(_DWORD *)(*(_QWORD *)(v118 + 24) + 236) != *(_DWORD *)(*(_QWORD *)(v118 + 24) + 240)
          && !atomic_load(v123))
        {
          (*(void (**)(uint64_t, uint64_t))(v118 + 3336))(v118, v127);
          v122 = v338;
        }
LABEL_381:
        v248 = atomic_load(v123);
        if (!v248 && *(_DWORD *)(v118 + 5352))
        {
          (*(void (**)(uint64_t, uint64_t))(v118 + 3344))(v118, v127);
          v122 = v338;
        }
LABEL_384:
        v249 = *(_DWORD *)(v118 + 3464);
        if (HIDWORD(v122->__sig) == 3)
        {
          v250 = atomic_load((unsigned int *)(v118 + 5564));
          v251 = v127 + 1;
          v3 = v346;
          if (*(_QWORD *)(v118 + 2392))
          {
            v252 = 4 * *(_DWORD *)(v118 + 3472) * v251;
            if (v251 == v249)
              v252 = -1;
            if (v250)
              v252 = -2;
            atomic_store(v252, *(unsigned int **)(v118 + 2664));
          }
          if (v250)
            v253 = 2147483646;
          else
            v253 = v127 + 1;
          atomic_store(v253, (unsigned int *)(v118 + 4336));
          v2 = v343;
          if (v251 == v249)
            atomic_store(1u, (unsigned int *)(v118 + 5552));
          pthread_mutex_lock((pthread_mutex_t *)v346);
          v254 = (unsigned int *)(v118 + 5568);
          do
            v255 = __ldaxr(v254);
          while (__stlxr(v255 - 1, v254));
          v256 = v338;
          if (v251 < v249 && v255 != 1)
          {
            v257 = v338->__sig;
            v258 = atomic_load((unsigned int *)(v346 + 112));
            v1 = v340;
            do
              v259 = __ldaxr(v7);
            while (__stlxr(0xFFFFFFFF, v7));
            if (v259 < v258)
            {
              if (v257 == -1)
                goto LABEL_354;
              v259 = -1;
            }
            v260 = *(_DWORD *)(v346 + 116);
            if (!v260 && !*(_QWORD *)(*v343 + 5712 * v258 + 5592))
              goto LABEL_354;
            if (v259 == -1)
            {
              if (v257 == -1)
                goto LABEL_354;
            }
            else if (v257 == -1)
            {
              if (v259 > v260 + v258)
                goto LABEL_354;
              v261 = v259 - v258;
              v226 = *((_DWORD *)v343 + 2);
              goto LABEL_539;
            }
            v226 = *((_DWORD *)v343 + 2);
            if (v258 <= v257)
              v302 = 0;
            else
              v302 = *((_DWORD *)v343 + 2);
            v303 = v302 + v257;
            if (v259 < v303)
              v303 = v259;
            if (v260 < v226 && v260 + v258 < v303)
              goto LABEL_354;
            v261 = v303 - v258;
            if (v303 - v258 < v226)
            {
              while (!*(_QWORD *)(*v343 + 5712 * (v303 % v226) + 5576))
              {
                ++v261;
                ++v303;
                if (v226 == v261)
                  goto LABEL_538;
              }
            }
LABEL_539:
            *(_DWORD *)(v346 + 116) = v261;
            v310 = v226 - v261;
            if (v226 > v261)
            {
              v311 = *v343;
              v312 = v261 + v258;
              do
              {
                *(_QWORD *)(v311 + 5712 * (v312 % v226) + 5592) = 0;
                ++v312;
                --v310;
              }
              while (v310);
            }
            goto LABEL_354;
          }
          v1 = v340;
          if (v255 == 1)
          {
            if (atomic_load((unsigned int *)(v118 + 5548)))
            {
              if (atomic_load((unsigned int *)(v118 + 5552)))
              {
                v270 = atomic_load((unsigned int *)(v118 + 5564));
                if (v270)
                  v271 = -12;
                else
                  v271 = 0;
                if (v270 == 1)
                  v272 = -22;
                else
                  v272 = v271;
                sub_218B8ADFC(v118, v272);
                *(_DWORD *)(v118 + 3124) = 0;
                pthread_cond_signal((pthread_cond_t *)(v118 + 5424));
                v256 = v338;
              }
            }
          }
          v273 = v256->__sig;
          v274 = atomic_load((unsigned int *)(v346 + 112));
          do
            v275 = __ldaxr(v7);
          while (__stlxr(0xFFFFFFFF, v7));
          if (v275 < v274)
          {
            if (v273 == -1)
              goto LABEL_354;
            v275 = -1;
          }
          v276 = *(_DWORD *)(v346 + 116);
          if (!v276 && !*(_QWORD *)(*v343 + 5712 * v274 + 5592))
            goto LABEL_354;
          if (v275 == -1)
          {
            if (v273 == -1)
              goto LABEL_354;
          }
          else if (v273 == -1)
          {
            if (v275 > v276 + v274)
              goto LABEL_354;
            v277 = v275 - v274;
            v226 = *((_DWORD *)v343 + 2);
            goto LABEL_543;
          }
          v226 = *((_DWORD *)v343 + 2);
          if (v274 <= v273)
            v304 = 0;
          else
            v304 = *((_DWORD *)v343 + 2);
          v305 = v304 + v273;
          if (v275 < v305)
            v305 = v275;
          if (v276 < v226 && v276 + v274 < v305)
            goto LABEL_354;
          v277 = v305 - v274;
          if (v305 - v274 < v226)
          {
            while (!*(_QWORD *)(*v343 + 5712 * (v305 % v226) + 5576))
            {
              ++v277;
              ++v305;
              if (v226 == v277)
                goto LABEL_538;
            }
          }
LABEL_543:
          *(_DWORD *)(v346 + 116) = v277;
          v313 = v226 - v277;
          if (v226 > v277)
          {
            v314 = *v343;
            v315 = v277 + v274;
            do
            {
              *(_QWORD *)(v314 + 5712 * (v315 % v226) + 5592) = 0;
              ++v315;
              --v313;
            }
            while (v313);
          }
          goto LABEL_354;
        }
        v262 = 4 * *(_DWORD *)(v118 + 3472);
        v335 = *((_DWORD *)v343 + 2);
        v263 = (unsigned int *)(*(_QWORD *)(v118 + 4344) + 4 * ((int)v127 >> 5));
        v3 = v346;
        do
          v264 = __ldaxr(v263);
        while (__stlxr(v264 | (1 << v127), v263));
        pthread_mutex_lock((pthread_mutex_t *)(v118 + 5360));
        if (*((_DWORD *)v343 + 2) < 2u)
        {
          v265 = 0;
          v266 = v262;
        }
        else
        {
          v265 = atomic_load((unsigned int *)(*(_QWORD *)(v118 + 2664) + 4));
          v266 = v262;
          if (v265 >= 0xFFFFFFFE)
          {
            v267 = *(_DWORD *)(v118 + 3464);
            goto LABEL_444;
          }
        }
        v278 = (int)(v265 >> (*(_BYTE *)(v118 + 3468) + 7));
        while (1)
        {
          v279 = atomic_load((unsigned int *)(*(_QWORD *)(v118 + 4344) + 4 * v278));
          if (v279 != -1)
            break;
          if (++v278 >= *(int *)(v118 + 4400))
          {
            v280 = 0;
            goto LABEL_443;
          }
        }
        v280 = __clz(__rbit32(~v279));
LABEL_443:
        v267 = v280 | (32 * v278);
LABEL_444:
        v281 = atomic_load(v123);
        v282 = v267 * v266;
        if (v267 == v249)
          v282 = -1;
        v2 = v343;
        if (*((_DWORD *)v343 + 2) >= 2u && *(_QWORD *)(v118 + 2392))
        {
          if (v281)
            v283 = -2;
          else
            v283 = v282;
          atomic_store(v283, (unsigned int *)(*(_QWORD *)(v118 + 2664) + 4));
        }
        pthread_mutex_unlock((pthread_mutex_t *)(v118 + 5360));
        if (v267 == v249)
          atomic_store(1u, (unsigned int *)(v118 + 5548));
        pthread_mutex_lock((pthread_mutex_t *)v346);
        v284 = (unsigned int *)(v118 + 5568);
        do
          v285 = __ldaxr(v284);
        while (__stlxr(v285 - 1, v284));
        v286 = v338;
        if (v267 < v249 && v285 != 1)
        {
          v287 = v338->__sig;
          v288 = atomic_load((unsigned int *)(v346 + 112));
          v1 = v340;
          do
            v289 = __ldaxr(v7);
          while (__stlxr(0xFFFFFFFF, v7));
          if (v289 < v288)
          {
            if (v287 == -1)
              goto LABEL_354;
            v289 = -1;
          }
          v290 = *(_DWORD *)(v346 + 116);
          if (!v290 && !*(_QWORD *)(*v343 + 5712 * v288 + 5592))
            goto LABEL_354;
          if (v289 == -1)
          {
            if (v287 == -1)
              goto LABEL_354;
          }
          else if (v287 == -1)
          {
            if (v289 > v290 + v288)
              goto LABEL_354;
            v291 = v289 - v288;
            v226 = *((_DWORD *)v343 + 2);
            goto LABEL_547;
          }
          v226 = *((_DWORD *)v343 + 2);
          if (v288 <= v287)
            v306 = 0;
          else
            v306 = *((_DWORD *)v343 + 2);
          v307 = v306 + v287;
          if (v289 < v307)
            v307 = v289;
          if (v290 < v226 && v290 + v288 < v307)
            goto LABEL_354;
          v291 = v307 - v288;
          if (v307 - v288 < v226)
          {
            while (!*(_QWORD *)(*v343 + 5712 * (v307 % v226) + 5576))
            {
              ++v291;
              ++v307;
              if (v226 == v291)
                goto LABEL_538;
            }
          }
LABEL_547:
          *(_DWORD *)(v346 + 116) = v291;
          v316 = v226 - v291;
          if (v226 > v291)
          {
            v317 = *v343;
            v318 = v291 + v288;
            do
            {
              *(_QWORD *)(v317 + 5712 * (v318 % v226) + 5592) = 0;
              ++v318;
              --v316;
            }
            while (v316);
          }
          goto LABEL_354;
        }
        v1 = v340;
        if (v285 == 1)
        {
          if (atomic_load((unsigned int *)(v118 + 5548)))
          {
            if (v335 < 2 || (v293 = atomic_load((unsigned int *)(v118 + 5552))) != 0)
            {
              v294 = atomic_load((unsigned int *)(v118 + 5564));
              if (v294)
                v295 = -12;
              else
                v295 = 0;
              if (v294 == 1)
                v296 = -22;
              else
                v296 = v295;
              sub_218B8ADFC(v118, v296);
              *(_DWORD *)(v118 + 3124) = 0;
              pthread_cond_signal((pthread_cond_t *)(v118 + 5424));
              v286 = v338;
            }
          }
        }
        v297 = v286->__sig;
        v298 = atomic_load((unsigned int *)(v346 + 112));
        do
          v299 = __ldaxr(v7);
        while (__stlxr(0xFFFFFFFF, v7));
        if (v299 < v298)
        {
          if (v297 == -1)
            goto LABEL_354;
          v299 = -1;
        }
        v300 = *(_DWORD *)(v346 + 116);
        if (!v300 && !*(_QWORD *)(*v343 + 5712 * v298 + 5592))
          goto LABEL_354;
        if (v299 == -1)
        {
          if (v297 == -1)
            goto LABEL_354;
        }
        else if (v297 == -1)
        {
          if (v299 > v300 + v298)
            goto LABEL_354;
          v301 = v299 - v298;
          v226 = *((_DWORD *)v343 + 2);
          goto LABEL_551;
        }
        v226 = *((_DWORD *)v343 + 2);
        if (v298 <= v297)
          v308 = 0;
        else
          v308 = *((_DWORD *)v343 + 2);
        v309 = v308 + v297;
        if (v299 < v309)
          v309 = v299;
        if (v300 < v226 && v300 + v298 < v309)
          goto LABEL_354;
        v301 = v309 - v298;
        if (v309 - v298 < v226)
        {
          while (!*(_QWORD *)(*v343 + 5712 * (v309 % v226) + 5576))
          {
            ++v301;
            ++v309;
            if (v226 == v301)
            {
LABEL_538:
              *(_DWORD *)(v3 + 116) = v226;
              goto LABEL_354;
            }
          }
        }
LABEL_551:
        *(_DWORD *)(v346 + 116) = v301;
        v319 = v226 - v301;
        if (v226 > v301)
        {
          v320 = *v343;
          v321 = v301 + v298;
          do
          {
            *(_QWORD *)(v320 + 5712 * (v321 % v226) + 5592) = 0;
            ++v321;
            --v319;
          }
          while (v319);
        }
        goto LABEL_354;
      case 7:
        v3 = v346;
        goto LABEL_360;
      case 8:
        goto LABEL_378;
      case 9:
        goto LABEL_381;
      default:
        goto LABEL_573;
    }
  }
}

uint64_t sub_218BA65EC(_DWORD *a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  uint64_t v7;
  int v9;
  _BOOL4 v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  signed int v14;
  _BOOL4 v15;
  unsigned int v16;
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int *v25;
  int v26;
  int v27;
  signed int v28;
  int v29;
  signed int v30;
  unsigned int v31;
  _BOOL4 v32;
  unsigned int v33;

  v3 = a1[1];
  v4 = (uint64_t)a1 - *(_QWORD *)(a2 + 8 * (v3 == 2) + 5488);
  v5 = *(_QWORD *)(a2 + 3264);
  v6 = atomic_load((unsigned int *)(v5 + 14624 * (int)((unint64_t)v4 >> 5) + 4 * (v3 == 2) + 13888));
  if (v6 < a1[2])
    return 1;
  v9 = v4 >> 5;
  v10 = v6 == 2147483646;
  v11 = (unsigned int *)(a2 + 5564);
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 | v10;
  }
  while (__stlxr(v13, v11));
  if (v3 != 2 && a3 && !v13)
  {
    v14 = atomic_load((unsigned int *)(v5 + 14624 * v9 + 13892));
    if (v14 <= a1[2])
      return 1;
    v15 = v14 == 2147483646;
    do
    {
      v16 = __ldaxr(v11);
      v13 = v16 | v15;
    }
    while (__stlxr(v13, v11));
  }
  v7 = 0;
  if (a3 && !v13)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 232) & 1) == 0)
      return 0;
    v17 = *(_DWORD *)(a2 + 2440) == 1;
    v18 = a1[5];
    if (v18 > 6)
      return 0;
    v19 = a1[2];
    v20 = *(_DWORD *)(a2 + 3468);
    v21 = (v19 + 1) << (v20 + 2);
    v22 = *(_QWORD *)(v5 + 14624 * v9 + 13944) + 56 * (v19 - (*(int *)(v5 + 14624 * v9 + 13872) >> v20));
    v23 = v18;
    while (1)
    {
      v24 = v21;
      if (v3 == 2)
        goto LABEL_32;
      v25 = (int *)(v22 + 8 * v23);
      v26 = *v25;
      v27 = v25[1];
      if (v26 == 0x80000000)
        v28 = 0x80000000;
      else
        v28 = v26 + 8;
      if (v27 == 0x80000000)
        v29 = 0x80000000;
      else
        v29 = (v27 << v17) + 8;
      if (v28 > v29)
        v29 = v28;
      if (v29 != 0x80000000)
        break;
LABEL_36:
      v7 = 0;
      ++v23;
      a1[5] = ++v18;
      if ((_DWORD)v23 == 7)
        return v7;
    }
    v30 = *(_DWORD *)(a2 + 296 * v23 + 92);
    if (v29 < v30)
      v30 = v29;
    if (v29 < 1)
      v24 = 1;
    else
      v24 = v30;
LABEL_32:
    v31 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 296 * v23 + 320) + 4 * (v3 != 2)));
    if (v31 < v24)
      return 1;
    v32 = v31 == -2;
    do
      v33 = __ldaxr(v11);
    while (__stlxr(v33 | v32, v11));
    v18 = a1[5];
    goto LABEL_36;
  }
  return v7;
}

uint64_t sub_218BA67D8(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  _QWORD *v5;

  v4 = (pthread_mutex_t *)(a1 + 5608);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 5608));
  *(_QWORD *)(a2 + 24) = 0;
  if (*(_QWORD *)(a1 + 5672))
    v5 = (_QWORD *)(*(_QWORD *)(a1 + 5680) + 24);
  else
    v5 = (_QWORD *)(a1 + 5672);
  *v5 = a2;
  *(_QWORD *)(a1 + 5680) = a2;
  atomic_store(1u, (unsigned int *)(a1 + 5600));
  return pthread_mutex_unlock(v4);
}

_WORD *sub_218BA684C(_WORD *result, uint64_t a2, _DWORD *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, signed int a8)
{
  int v8;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  int v20;

  v8 = a3[1] | *a3 | a3[2];
  if (v8)
  {
    v13 = result;
    v14 = a2 >> 1;
    v15 = 4 * a2;
    v16 = 1;
    v17 = 4 * a5;
    do
    {
      if ((v16 & v8) != 0)
      {
        v18 = *a4;
        if (*a4 || (v18 = *(a4 - 4), *(a4 - 4)))
        {
          if ((a3[2] & v16) != 0)
            v19 = 2;
          else
            v19 = (a3[1] & v16) != 0;
          result = sub_218BA6BDC(v13, *(unsigned __int8 *)(a6 + v18), *(unsigned __int8 *)(a6 + v18 + 64), v18 >> 4, v14, 1, 4 << v19, a8);
        }
      }
      v20 = -2 * v16;
      v13 = (_WORD *)((char *)v13 + v15);
      a4 += v17;
      v16 *= 2;
    }
    while ((v8 & v20) != 0);
  }
  return result;
}

_WORD *sub_218BA693C(_WORD *result, uint64_t a2, _DWORD *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, signed int a8)
{
  int v8;
  _WORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  int v19;

  v8 = a3[1] | *a3 | a3[2];
  if (v8)
  {
    v13 = result;
    v14 = a2 >> 1;
    v15 = 1;
    v16 = -4 * a5;
    do
    {
      if ((v15 & v8) != 0)
      {
        v17 = *a4;
        if (*a4 || (v17 = a4[v16], a4[v16]))
        {
          if ((a3[2] & v15) != 0)
            v18 = 2;
          else
            v18 = (a3[1] & v15) != 0;
          result = sub_218BA6BDC(v13, *(unsigned __int8 *)(a6 + v17), *(unsigned __int8 *)(a6 + v17 + 64), v17 >> 4, 1, v14, 4 << v18, a8);
        }
      }
      v19 = -2 * v15;
      v13 += 4;
      a4 += 4;
      v15 *= 2;
    }
    while ((v8 & v19) != 0);
  }
  return result;
}

_WORD *sub_218BA6A28(_WORD *result, uint64_t a2, _DWORD *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, signed int a8)
{
  int v8;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  int v22;

  v8 = a3[1] | *a3;
  if (*(_QWORD *)a3)
  {
    v13 = result;
    v14 = a2 >> 1;
    v15 = 4 * a2;
    v16 = 1;
    v17 = 4 * a5;
    do
    {
      if ((v16 & v8) != 0)
      {
        v18 = *a4;
        if (*a4 || (v18 = *(a4 - 4), *(a4 - 4)))
        {
          v19 = v18 >> 4;
          v20 = (unsigned __int8 *)(a6 + v18);
          if ((a3[1] & v16) != 0)
            v21 = 6;
          else
            v21 = 4;
          result = sub_218BA6BDC(v13, *v20, v20[64], v19, v14, 1, v21, a8);
        }
      }
      v22 = -2 * v16;
      v13 = (_WORD *)((char *)v13 + v15);
      a4 += v17;
      v16 *= 2;
    }
    while ((v8 & v22) != 0);
  }
  return result;
}

_WORD *sub_218BA6AFC(_WORD *result, uint64_t a2, _DWORD *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, signed int a8)
{
  int v8;
  _WORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;

  v8 = a3[1] | *a3;
  if (*(_QWORD *)a3)
  {
    v13 = result;
    v14 = a2 >> 1;
    v15 = 1;
    v21 = -4 * a5;
    do
    {
      if ((v15 & v8) != 0)
      {
        v16 = *a4;
        if (*a4 || (v16 = a4[v21], a4[v21]))
        {
          v17 = v16 >> 4;
          v18 = (unsigned __int8 *)(a6 + v16);
          if ((a3[1] & v15) != 0)
            v19 = 6;
          else
            v19 = 4;
          result = sub_218BA6BDC(v13, *v18, v18[64], v17, 1, v14, v19, a8);
        }
      }
      v20 = -2 * v15;
      v13 += 4;
      a4 += 4;
      v15 *= 2;
    }
    while ((v8 & v20) != 0);
  }
  return result;
}

_WORD *sub_218BA6BDC(_WORD *result, int a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, signed int a8)
{
  char v8;
  signed int v9;
  signed int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  signed int v20;
  signed int v21;
  char v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  signed int v27;
  signed int v28;
  BOOL v29;
  BOOL v30;
  int v31;
  signed int v32;
  int v33;
  signed int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  _BOOL4 v46;
  int v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  _BOOL4 v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  int v60;
  int v61;
  unsigned int v62;
  signed int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  __int16 v72;
  __int16 v73;
  int v74;
  __int16 v75;
  __int16 v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  __int16 v84;
  __int16 v85;
  int v86;
  __int16 v87;
  __int16 v88;
  int v89;
  int v90;
  __int16 v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  unsigned int v105;

  v8 = __clz(a8);
  v105 = 1 << (24 - v8);
  v103 = a2 << (24 - v8);
  v9 = a3 << (24 - v8);
  v10 = a4 << (24 - v8);
  v11 = -6 * a6;
  v12 = -128 << (24 - v8);
  v13 = (128 << (24 - v8)) - 1;
  v14 = 2 * a5;
  v104 = 2 * a5;
  v15 = 4;
  do
  {
    v16 = (unsigned __int16)result[-2 * a6];
    v17 = (unsigned __int16)result[-a6];
    v18 = (unsigned __int16)*result;
    v19 = (unsigned __int16)result[a6];
    if (v16 - v17 >= 0)
      v20 = v16 - v17;
    else
      v20 = v17 - v16;
    if (v20 > v9)
      goto LABEL_9;
    v21 = v19 - v18;
    if (v19 - v18 < 0)
      v21 = v18 - v19;
    if (v21 <= v9)
    {
      v23 = v17 - v18;
      if (v17 - v18 < 0)
        v23 = v18 - v17;
      v24 = v16 - v19;
      if (v16 - v19 < 0)
        v24 = v19 - v16;
      v22 = (int)((v24 >> 1) + 2 * v23) <= v103;
    }
    else
    {
LABEL_9:
      v22 = 0;
    }
    if (a7 < 5)
    {
      v25 = 0;
      v26 = 0;
LABEL_47:
      if ((v22 & 1) == 0)
        goto LABEL_149;
      if (a7 < 6)
        goto LABEL_80;
      v31 = 0;
      v33 = 0;
      goto LABEL_50;
    }
    v25 = *(unsigned __int16 *)((char *)result + v11);
    v26 = (unsigned __int16)result[2 * a6];
    v27 = v25 - v16;
    if (v25 - v16 < 0)
      v27 = v16 - v25;
    v28 = v26 - v19;
    if (v26 - v19 < 0)
      v28 = v19 - v26;
    v29 = v28 <= v9;
    v30 = v27 <= v9 && v29;
    v22 &= v30;
    if (a7 < 7)
      goto LABEL_47;
    v31 = (unsigned __int16)result[-4 * a6];
    v32 = v31 - v25;
    if (v31 - v25 < 0)
      v32 = v25 - v31;
    if (v32 <= v9)
    {
      v33 = (unsigned __int16)result[3 * a6];
      v34 = v33 - v26;
      if (v33 - v26 < 0)
        v34 = v26 - v33;
      if (v34 > v9)
        v22 = 0;
      if ((v22 & 1) != 0)
      {
        if (a7 >= 0x10)
        {
          v35 = (unsigned __int16)result[-6 * a6];
          v36 = (unsigned __int16)result[-5 * a6];
          v37 = (unsigned __int16)result[4 * a6];
          v38 = (unsigned __int16)result[5 * a6];
          v39 = (unsigned __int16)result[6 * a6];
          v40 = (unsigned __int16)result[-7 * a6];
          v41 = v40 - v17;
          if (v40 - v17 < 0)
            v41 = v17 - v40;
          v101 = (unsigned __int16)result[-6 * a6];
          v102 = (unsigned __int16)result[-5 * a6];
          if (v41 > v105)
            goto LABEL_45;
          v42 = v35 - v17;
          if (v35 - v17 < 0)
            v42 = v17 - v35;
          if (v42 > v105)
            goto LABEL_45;
          v43 = v36 - v17;
          if (v36 - v17 < 0)
            v43 = v17 - v36;
          if (v43 > v105)
            goto LABEL_45;
          v44 = v37 - v18;
          if (v37 - v18 < 0)
            v44 = v18 - v37;
          if (v44 <= v105)
          {
            v97 = v38 - v18;
            if (v38 - v18 < 0)
              v97 = v18 - v38;
            v49 = v97 > v105;
            v47 = (unsigned __int16)result[-7 * a6];
            v45 = 0;
            if (v49)
            {
              v46 = 0;
            }
            else
            {
              v98 = v39 - v18;
              if (v39 - v18 < 0)
                v98 = v18 - v39;
              v46 = v98 <= v105;
            }
          }
          else
          {
LABEL_45:
            v45 = 0;
            v46 = 0;
            v47 = (unsigned __int16)result[-7 * a6];
          }
LABEL_51:
          v48 = v25 - v17;
          if (v25 - v17 < 0)
            v48 = v17 - v25;
          v49 = v20 > v105 || v48 > v105;
          if (v49)
            goto LABEL_60;
          v50 = v19 - v18;
          if (v19 - v18 < 0)
            v50 = v18 - v19;
          if (v50 > v105)
          {
LABEL_60:
            v51 = 0;
          }
          else
          {
            v52 = v26 - v18;
            if (v26 - v18 < 0)
              v52 = v18 - v26;
            v51 = v52 <= v105;
          }
          if (a7 < 8)
          {
            if (a7 != 6 || !v51)
              goto LABEL_80;
            v60 = 2 * v17 + 4;
            v61 = v60 + 2 * v16;
            result[-2 * a6] = (v61 + v18 + 3 * v25) >> 3;
            result[-a6] = (v61 + 2 * v18 + v19 + v25) >> 3;
            *result = (v60 + v16 + 2 * v18 + 2 * v19 + v26) >> 3;
            v62 = (v17 + 2 * v18 + 2 * v19 + v26 + 2 * v26 + 4) >> 3;
          }
          else
          {
            v53 = v11;
            v54 = v31 - v17;
            if (v31 - v17 < 0)
              v54 = v17 - v31;
            v49 = v54 > v105;
            v11 = v53;
            if (!v49)
            {
              v55 = v33 - v18;
              if (v33 - v18 < 0)
                v55 = v18 - v33;
              if (v55 > v105)
                v51 = 0;
              if (((v45 | (!v46 || !v51)) & 1) == 0)
              {
                v100 = v18 + v17 + 8;
                result[-6 * a6] = (v100 + v16 + v31 + v25 + 2 * v102 + 2 * v101 - v47 + 8 * v47) >> 4;
                result[-5 * a6] = (v100 + v16 + v19 + 2 * v31 + v25 + 2 * v102 + 2 * v101 + 5 * v47) >> 4;
                v99 = v16 + 8 + v17 + v18;
                result[-4 * a6] = (v99 + v19 + 2 * v31 + 2 * v25 + v26 + v101 + 2 * v102 + 4 * v47) >> 4;
                v95 = 2 * v16 + 8;
                *(_WORD *)((char *)result + v53) = (v95
                                                                + v17
                                                                + v18
                                                                + v19
                                                                + 2 * v31
                                                                + 2 * v25
                                                                + v26
                                                                + v33
                                                                + v102
                                                                + v101
                                                                + 3 * v47) >> 4;
                v96 = v95 + 2 * v17;
                result[-2 * a6] = (v96
                                               + v18
                                               + v19
                                               + v31
                                               + 2 * v25
                                               + v26
                                               + v33
                                               + v37
                                               + v102
                                               + v101
                                               + 2 * v47) >> 4;
                v11 = v53;
                result[-a6] = (v96 + 2 * v18 + v19 + v31 + v25 + v26 + v33 + v38 + v37 + v102 + v101 + v47) >> 4;
                *result = (v16
                                       + 8
                                       + 2 * v17
                                       + 2 * v18
                                       + 2 * v19
                                       + v31
                                       + v25
                                       + v26
                                       + v33
                                       + v39
                                       + v38
                                       + v37
                                       + v102
                                       + v101) >> 4;
                result[a6] = (v16
                                          + 8
                                          + v17
                                          + 2 * v18
                                          + 2 * v19
                                          + v31
                                          + v25
                                          + 2 * v26
                                          + v33
                                          + v38
                                          + 2 * v39
                                          + v37
                                          + v102) >> 4;
                result[2 * a6] = (v99 + 2 * v19 + v31 + v25 + 2 * v26 + 2 * v33 + v39 + v38 + 2 * v39 + v37) >> 4;
                result[3 * a6] = (v99 + v19 + v25 + 2 * v26 + 2 * v33 + v38 + 4 * v39 + 2 * v37) >> 4;
                result[4 * a6] = (v99 + v19 + v26 + 2 * v33 + v39 + 4 * v39 + 2 * v38 + 2 * v37) >> 4;
                result[5 * a6] = (v100 + v19 + v26 + v33 + v39 + 4 * v39 + 2 * v39 + 2 * v38 + 2 * v37) >> 4;
                goto LABEL_148;
              }
              v11 = v53;
              if (v51)
              {
                v56 = v17 + 4 + v18 + v19;
                v57 = v17 + 4 + v16;
                *(_WORD *)((char *)result + v53) = (v57 + v18 + 3 * v31 + 2 * v25) >> 3;
                result[-2 * a6] = (v56 + v25 + 2 * (v31 + v16)) >> 3;
                result[-a6] = (v16 + 2 * v17 + v18 + v19 + v31 + v25 + v26 + 4) >> 3;
                *result = (v57 + 2 * v18 + v19 + v25 + v26 + v33) >> 3;
                result[a6] = (v57 + v18 + 2 * v19 + v26 + 2 * v33) >> 3;
                v58 = v56 + 2 * v26;
                v11 = v53;
                result[2 * a6] = (v58 + v33 + 2 * v33) >> 3;
LABEL_148:
                v14 = v104;
                goto LABEL_149;
              }
            }
LABEL_80:
            if (v20 > v10)
              goto LABEL_84;
            v63 = v19 - v18;
            if (v19 - v18 < 0)
              v63 = v18 - v19;
            if (v63 > v10)
            {
LABEL_84:
              if (v16 - v19 >= v13)
                v64 = v13;
              else
                v64 = v16 - v19;
              if (v16 - v19 >= v12)
                v65 = v64;
              else
                v65 = v12;
              v66 = v65 + 3 * (v18 - v17);
              if (v66 >= v13)
                v67 = v13;
              else
                v67 = v66;
              if (v66 >= v12)
                v68 = v67;
              else
                v68 = v12;
              v69 = v68 + 4;
              if (v68 + 4 >= v13)
                v69 = v13;
              v70 = v68 + 3;
              if (v70 >= v13)
                v70 = v13;
              v71 = v17 + (v70 >> 3);
              if (v71 >= a8)
                v72 = a8;
              else
                v72 = v71;
              if (v71 >= 0)
                v73 = v72;
              else
                v73 = 0;
              result[-a6] = v73;
              v74 = v18 - (v69 >> 3);
              if (v74 >= a8)
                v75 = a8;
              else
                v75 = v18 - (v69 >> 3);
              if (v74 >= 0)
                v76 = v75;
              else
                v76 = 0;
              *result = v76;
              goto LABEL_148;
            }
            v77 = 3 * (v18 - v17);
            if (v77 >= v13)
              v78 = v13;
            else
              v78 = 3 * (v18 - v17);
            if (v77 >= v12)
              v79 = v78;
            else
              v79 = v12;
            v80 = v79 + 4;
            if (v79 + 4 >= v13)
              v80 = v13;
            v81 = v80 >> 3;
            v82 = v79 + 3;
            if (v82 >= v13)
              v82 = v13;
            v83 = v17 + (v82 >> 3);
            if (v83 >= a8)
              v84 = a8;
            else
              v84 = v83;
            if (v83 >= 0)
              v85 = v84;
            else
              v85 = 0;
            result[-a6] = v85;
            v86 = v18 - (v80 >> 3);
            if (v86 >= a8)
              v87 = a8;
            else
              v87 = v18 - (v80 >> 3);
            if (v86 >= 0)
              v88 = v87;
            else
              v88 = 0;
            *result = v88;
            v89 = v81 + 1;
            v90 = v16 + ((v81 + 1) >> 1);
            if (v90 >= a8)
              v91 = a8;
            else
              v91 = v16 + ((v81 + 1) >> 1);
            if (v90 >= 0)
              v92 = v91;
            else
              v92 = 0;
            result[-2 * a6] = v92;
            v93 = v19 - (v89 >> 1);
            if (v93 >= a8)
              v94 = a8;
            else
              v94 = v93;
            if (v93 >= 0)
              LOWORD(v62) = v94;
            else
              LOWORD(v62) = 0;
          }
          result[a6] = v62;
          goto LABEL_148;
        }
LABEL_50:
        v46 = 0;
        v39 = 0;
        v38 = 0;
        v37 = 0;
        v101 = 0;
        v102 = 0;
        v47 = 0;
        v45 = 1;
        goto LABEL_51;
      }
    }
LABEL_149:
    result = (_WORD *)((char *)result + v14);
    --v15;
  }
  while (v15);
  return result;
}

char *sub_218BA740C(char *result, unsigned int a2, unsigned int a3, size_t __len, unsigned int a5, int a6, unsigned int a7, uint64_t *__b, uint64_t *__ba, char a10, char a11)
{
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  uint64_t v48;
  uint64_t v49;

  v13 = 0;
  v14 = a7;
  v15 = 1 << (0x10u >> a11);
  v16 = (1 << a2);
  v17 = (0x7DFDEuLL >> a7) & 1;
  v18 = (0x7BFBEuLL >> a7) & 1;
  v19 = v16;
  do
  {
    v20 = *((unsigned __int8 *)__ba + v13);
    if ((int)v17 < v20)
      v20 = (0x7DFDEuLL >> a7) & 1;
    v21 = (uint64_t)&result[8 * a3 + 4 * v20];
    *(_WORD *)(v21 + 2 * (v19 >= v15)) |= v19 >> ((v19 >= v15) << (4 - a11));
    ++v13;
    v19 *= 2;
  }
  while (a5 != v13);
  v22 = 0;
  v23 = &byte_218BCF658[8 * a7];
  v24 = 1 << (0x10u >> a10);
  v25 = 1 << a3;
  do
  {
    v26 = *((unsigned __int8 *)__b + v22);
    if ((int)v18 < v26)
      v26 = v18;
    v27 = (uint64_t)&result[8 * a2 + 4 * v26 + 2 * (v25 >= v24)];
    *(_WORD *)(v27 + 256) |= v25 >> ((v25 >= v24) << (4 - a10));
    ++v22;
    v25 *= 2;
  }
  while (__len != v22);
  if (!a6)
  {
    v28 = *v23;
    if ((int)v28 < (int)__len)
    {
      v29 = (v16 << a5) - v16;
      v30 = v29 >> (0x10u >> a11);
      v31 = (v15 - 1) & v29;
      v32 = &result[((4 * v17) | (8 * (v28 + a3))) + 2];
      v33 = *v23;
      do
      {
        if (v31)
          *((_WORD *)v32 - 1) |= v31;
        if (v30)
          *(_WORD *)v32 |= v30;
        v33 += v28;
        v32 += 8 * v28;
      }
      while (v33 < __len);
    }
    v34 = byte_218BCF658[8 * v14 + 1];
    if ((int)v34 < (int)a5)
    {
      v35 = ((unint64_t)(1 << a3) << __len) - (1 << a3);
      v36 = v35 >> (0x10u >> a10);
      v37 = (v24 - 1) & v35;
      v38 = &result[((4 * v18) | (8 * (v34 + a2))) + 258];
      v39 = v34;
      do
      {
        if (v37)
          *((_WORD *)v38 - 1) |= v37;
        if (v36)
          *(_WORD *)v38 |= v36;
        v39 += v34;
        v38 += 8 * v34;
      }
      while (v39 < a5);
    }
  }
  switch((int)__len)
  {
    case 1:
      *(_BYTE *)__b = v18;
      break;
    case 2:
      if (v18)
        v41 = 257;
      else
        v41 = 0;
      *(_WORD *)__b = v41;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_31;
    case 4:
      if (v18)
        v42 = 16843009;
      else
        v42 = 0;
      *(_DWORD *)__b = v42;
      break;
    case 8:
      v43 = 0x101010101010101;
      if (!v18)
        v43 = 0;
      *__b = v43;
      break;
    default:
      if ((_DWORD)__len == 16)
      {
        v44 = 0x101010101010101;
        if (!v18)
          v44 = 0;
        *__b = v44;
        __b[1] = v44;
      }
      else if ((_DWORD)__len == 32)
      {
        v40 = 0x101010101010101;
        if (!v18)
          v40 = 0;
        *__b = v40;
        __b[1] = v40;
        __b[2] = v40;
        __b[3] = v40;
      }
      else
      {
LABEL_31:
        result = (char *)memset(__b, v18, __len);
      }
      break;
  }
  switch(a5)
  {
    case 1u:
      *(_BYTE *)__ba = v17;
      break;
    case 2u:
      if (v17)
        v46 = 257;
      else
        v46 = 0;
      *(_WORD *)__ba = v46;
      break;
    case 3u:
    case 5u:
    case 6u:
    case 7u:
      goto LABEL_53;
    case 4u:
      if (v17)
        v47 = 16843009;
      else
        v47 = 0;
      *(_DWORD *)__ba = v47;
      break;
    case 8u:
      v48 = 0x101010101010101;
      if (!v17)
        v48 = 0;
      *__ba = v48;
      break;
    default:
      if (a5 == 16)
      {
        v49 = 0x101010101010101;
        if (!v17)
          v49 = 0;
        *__ba = v49;
        __ba[1] = v49;
      }
      else if (a5 == 32)
      {
        v45 = 0x101010101010101;
        if (!v17)
          v45 = 0;
        *__ba = v45;
        __ba[1] = v45;
        __ba[2] = v45;
        __ba[3] = v45;
      }
      else
      {
LABEL_53:
        result = (char *)memset(__ba, v17, a5);
      }
      break;
  }
  return result;
}

uint64_t sub_218BA77B4(uint64_t result, unsigned int a2, int a3, int a4, int a5, uint64_t a6)
{
  int64x2_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int64x2_t *v26;
  int64x2_t *v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t *v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  __int16 v34;
  int64x2_t *v35;
  uint64_t v36;
  __int32 v37;
  __int32 v38;
  int64x2_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64x2_t *v43;
  uint64_t v44;
  uint64_t v46;
  char v47;

  v6 = (int64x2_t *)result;
  v7 = a2;
  v8 = &byte_218BCF658[8 * a2];
  if (a2 && a3 <= 1)
  {
    v9 = a6;
    LODWORD(v10) = a5;
    LODWORD(v11) = a4;
    v12 = a3;
    v13 = (a3 + 1);
    while (((*(unsigned __int16 *)(v9 + 2 * v12) >> (v10 + 4 * v11)) & 1) != 0)
    {
      v46 = v12;
      v47 = v7;
      v14 = (char *)&byte_218BCF658[8 * v7];
      v15 = v14[6];
      v16 = *v8;
      v17 = v14[1];
      v18 = v17 >> 1;
      v11 = (2 * v11);
      v10 = (2 * v10);
      result = sub_218BA77B4(v6, v15, v13, v11, v10, v9);
      if (v16 >= v17)
      {
        result = sub_218BA77B4(&v6->i8[v16 >> 1], v15, v13, v11, v10 | 1, v9);
        if (v17 < v16)
          return result;
        v11 = v11 | 1;
        result = sub_218BA77B4(&v6[2 * v18], v15, v13, v11, v10, v9);
        v6 = (int64x2_t *)((char *)v6 + 32 * v18 + (v16 >> 1));
        LODWORD(v10) = v10 | 1;
      }
      else
      {
        v6 += 2 * v18;
        LODWORD(v11) = v11 | 1;
      }
      v8 = &byte_218BCF658[8 * v15];
      if (((0x63uLL >> v47) & 1) == 0)
      {
        v13 = (v13 + 1);
        v12 = v46 + 1;
        v7 = v15;
        v9 = a6;
        if (v46 <= 0)
          continue;
      }
      goto LABEL_13;
    }
  }
  v15 = v7;
LABEL_13:
  v19 = (char *)&byte_218BCF658[8 * v15];
  if (v19[2] >= 2u)
    v20 = 2;
  else
    v20 = v19[2];
  v21 = v19[3];
  if (v21 >= 2)
    v22 = 2;
  else
    v22 = v21;
  v23 = *v8;
  switch(*v8)
  {
    case 1u:
      v24 = byte_218BCF658[8 * v15 + 1];
      v25 = byte_218BCF658[8 * v15 + 1];
      v26 = v6;
      v27 = v6;
      do
      {
        v26->i8[0] = v20;
        v26[128].i8[0] = v22;
        v26[64].i8[0] = 1;
        v26 += 2;
        --v24;
      }
      while (v24);
      goto LABEL_35;
    case 2u:
      v32 = byte_218BCF658[8 * v15 + 1];
      v25 = byte_218BCF658[8 * v15 + 1];
      v33 = v20 | ((_WORD)v20 << 8);
      v34 = v22 | ((_WORD)v22 << 8);
      v35 = v6;
      v27 = v6;
      do
      {
        v35->i16[0] = v33;
        v35[128].i16[0] = v34;
        v35[64].i8[0] = 2;
        v35 += 2;
        --v32;
      }
      while (v32);
      goto LABEL_35;
    case 3u:
    case 5u:
    case 6u:
    case 7u:
      return result;
    case 4u:
      v36 = byte_218BCF658[8 * v15 + 1];
      v25 = byte_218BCF658[8 * v15 + 1];
      v37 = 16843009 * v20;
      v38 = 16843009 * v22;
      v39 = v6;
      v27 = v6;
      do
      {
        v39->i32[0] = v37;
        v39[128].i32[0] = v38;
        v39[64].i8[0] = 4;
        v39 += 2;
        --v36;
      }
      while (v36);
      goto LABEL_35;
    case 8u:
      v40 = byte_218BCF658[8 * v15 + 1];
      v25 = byte_218BCF658[8 * v15 + 1];
      v41 = 0x101010101010101 * v20;
      v42 = 0x101010101010101 * v22;
      v43 = v6;
      v27 = v6;
      do
      {
        v43->i64[0] = v41;
        v43[128].i64[0] = v42;
        v43[64].i8[0] = 8;
        v43 += 2;
        --v40;
      }
      while (v40);
      goto LABEL_35;
    default:
      if (v23 != 16)
        return result;
      v25 = byte_218BCF658[8 * v15 + 1];
      v28 = vdupq_n_s64(0x101010101010101 * v20);
      v29 = vdupq_n_s64(0x101010101010101 * v22);
      v30 = v6;
      v31 = byte_218BCF658[8 * v15 + 1];
      v27 = v6;
      do
      {
        *v30 = v28;
        v30[128] = v29;
        v30[64].i8[0] = 16;
        v30 += 2;
        --v31;
      }
      while (v31);
LABEL_35:
      switch(v23)
      {
        case 1:
          v27[192].i8[0] = v25;
          break;
        case 2:
          v27[192].i16[0] = v25 | ((_WORD)v25 << 8);
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          return result;
        case 4:
          v27[192].i32[0] = 16843009 * v25;
          break;
        case 8:
          v27[192].i64[0] = 0x101010101010101 * v25;
          break;
        default:
          if (v23 == 16)
          {
            v44 = 0x101010101010101 * v25;
            v27[192].i64[0] = v44;
            v27[192].i64[1] = v44;
          }
          break;
      }
      break;
  }
  return result;
}

void sub_218BA7B20(_QWORD *a1, _BYTE *a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *i;
  int v9;
  int v10;
  char *v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;

  if (a2[722])
    v5 = 8;
  else
    v5 = 1;
  if (a2[830] || a2[831])
  {
    if (a2[834])
      v6 = (uint64_t)(a2 + 836);
    else
      v6 = 0;
    v7 = a1 + 6;
    for (i = a2 + 731; ; i += 10)
    {
      v9 = a2[722];
      if (a2[722])
        v10 = *(i - 3);
      else
        v10 = 0;
      sub_218BA7C94((uint64_t)(v7 - 6), a2[830], *a3, v10, v6);
      if (a2[828])
        v11 = a3 + 1;
      else
        v11 = a3;
      if (v9)
        v12 = *(i - 2);
      else
        v12 = 0;
      sub_218BA7C94((uint64_t)(v7 - 4), a2[831], *v11, v12, v6);
      if (v9)
        v13 = *(i - 1);
      else
        v13 = 0;
      v14 = v7 - 2;
      if (a2[832])
      {
        sub_218BA7C94((uint64_t)v14, a2[832], a3[2 * (a2[828] != 0)], v13, v6);
      }
      else
      {
        *v14 = 0;
        *(v7 - 1) = 0;
      }
      if (a2[828])
        v15 = 3;
      else
        v15 = 0;
      if (v9)
      {
        v16 = *i;
        if (!a2[833])
          goto LABEL_32;
      }
      else
      {
        v16 = 0;
        if (!a2[833])
        {
LABEL_32:
          *v7 = 0;
          v7[1] = 0;
          goto LABEL_33;
        }
      }
      sub_218BA7C94((uint64_t)v7, a2[833], a3[v15], v16, v6);
LABEL_33:
      v7 += 8;
      if (!--v5)
        return;
    }
  }
  bzero(a1, ((_DWORD)v5 << 6));
}

uint64_t sub_218BA7C94(uint64_t result, int a2, int a3, int a4, uint64_t a5)
{
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  char v9;
  uint64_t i;
  uint64_t v11;
  char v12;
  char v13;
  int v14;
  uint64_t v15;

  v5 = a3 + a2;
  if (a3 + a2 >= 63)
    v5 = 63;
  v6 = (v5 & ~(v5 >> 31)) + a4;
  if (v6 >= 63)
    v6 = 63;
  v7 = v6 & ~(v6 >> 31);
  if (a5)
  {
    v8 = (*(char *)(a5 + 2) << (v7 > 0x1F)) + v7;
    if (v8 >= 63)
      v8 = 63;
    v9 = v8 & ~(v8 >> 31);
    *(_BYTE *)(result + 1) = v9;
    *(_BYTE *)result = v9;
    for (i = 1; i != 8; ++i)
    {
      v11 = 0;
      v12 = 1;
      do
      {
        v13 = v12;
        v14 = ((*(char *)(a5 + i + 2) + *(char *)(a5 + v11)) << (v7 > 0x1F)) + v7;
        if (v14 >= 63)
          v14 = 63;
        *(_BYTE *)(result + 2 * i + v11) = v14 & ~(v14 >> 31);
        v11 = 1;
        v12 = 0;
      }
      while ((v13 & 1) != 0);
    }
  }
  else
  {
    v15 = 0x101010101010101 * v7;
    *(_QWORD *)result = v15;
    *(_QWORD *)(result + 8) = v15;
  }
  return result;
}

void sub_218BA7D54(void (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  const void *v18;
  int v19;
  uint64_t v20;
  char v21;
  int v22;
  size_t v23;
  int v24;
  void *v25;
  const void *v26;
  size_t v27;

  v10 = *(_QWORD *)(a2 + 8);
  v11 = ~(-1 << *(_DWORD *)(a2 + 68));
  (*a1)(a5, v10, v11);
  if (*(_DWORD *)(v10 + 40) || *(_DWORD *)(v10 + 36))
    ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))a1[(*(_DWORD *)(a3 + 64) - 1) + 1])(a5 + 12136, a5, v10, 0, v11);
  if (*(_DWORD *)(v10 + 44) || *(_DWORD *)(v10 + 36))
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1[(*(_DWORD *)(a3 + 64) - 1) + 1])(a5 + 24272, a5, v10, 1, v11);
  v12 = *(_DWORD *)(v10 + 4);
  if (v12)
  {
    sub_218BA7FA8(*(_DWORD *)(a3 + 68), (unsigned __int8 *)(v10 + 8), v12, a4);
  }
  else if (*(_DWORD *)(v10 + 36))
  {
    bzero(a4, 1 << *(_DWORD *)(a3 + 68));
  }
  v13 = *(_DWORD *)(v10 + 40);
  if (v13)
    sub_218BA7FA8(*(_DWORD *)(a3 + 68), (unsigned __int8 *)(v10 + 48), v13, a4 + 4096);
  v14 = *(_DWORD *)(v10 + 44);
  if (v14)
    sub_218BA7FA8(*(_DWORD *)(a3 + 68), (unsigned __int8 *)(v10 + 68), v14, a4 + 0x2000);
  if (!*(_DWORD *)(v10 + 4))
  {
    v15 = *(_QWORD *)(a2 + 40);
    v16 = v15 * *(int *)(a2 + 60);
    v17 = *(char **)(a2 + 16);
    if ((v16 & 0x8000000000000000) != 0)
    {
      v17 = &v17[v16 - v15];
      v18 = (const void *)(*(_QWORD *)(a3 + 16) + v16 - v15);
      v16 = -(uint64_t)v16;
    }
    else
    {
      v18 = *(const void **)(a3 + 16);
    }
    memcpy(v17, v18, v16);
  }
  v19 = *(_DWORD *)(a3 + 64);
  if (v19 && !*(_DWORD *)(v10 + 36))
  {
    v20 = *(_QWORD *)(a2 + 48);
    v21 = v19 == 1;
    v22 = *(_DWORD *)(a2 + 60);
    if (v21)
      ++v22;
    v23 = v20 * (v22 >> v21);
    v24 = *(_DWORD *)(v10 + 40);
    if ((v23 & 0x8000000000000000) != 0)
    {
      if (!v24)
        memcpy((void *)(*(_QWORD *)(a2 + 24) + v23 - v20), (const void *)(*(_QWORD *)(a3 + 24) + v23 - v20), -(uint64_t)v23);
      if (*(_DWORD *)(v10 + 44))
        return;
      v25 = (void *)(*(_QWORD *)(a2 + 32) + v23 - v20);
      v26 = (const void *)(*(_QWORD *)(a3 + 32) + v23 - v20);
      v27 = -(uint64_t)v23;
    }
    else
    {
      if (!v24)
        memcpy(*(void **)(a2 + 24), *(const void **)(a3 + 24), v23);
      if (*(_DWORD *)(v10 + 44))
        return;
      v25 = *(void **)(a2 + 32);
      v26 = *(const void **)(a3 + 32);
      v27 = v23;
    }
    memcpy(v25, v26, v27);
  }
}

void sub_218BA7FA8(char a1, unsigned __int8 *a2, int a3, char *__b)
{
  int v5;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  uint32x2_t v18;
  int v19;
  int32x2_t v20;
  int v21;
  uint32x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64x2_t v27;
  int32x2_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  int32x2_t v37;
  int32x2_t v38;
  int32x2_t v39;
  int32x2_t v40;
  int32x2_t v41;
  int32x2_t v42;

  v5 = 1 << a1;
  if (a3)
  {
    v8 = a1 - 8;
    memset(__b, a2[1], *a2 << (a1 - 8));
    v9 = (a3 - 1);
    if (a3 >= 2)
    {
      v10 = 0;
      do
      {
        v11 = 0;
        v12 = &a2[2 * v10];
        v13 = *v12;
        v14 = v12[1];
        ++v10;
        v15 = &a2[2 * v10];
        v16 = *v15 - v13;
        v17 = (v15[1] - v14) * (((v16 >> 1) + 0x10000) / v16);
        v18 = (uint32x2_t)vdup_n_s32(v16 - 1);
        v19 = (v16 + 1) & 0x7FFFFFFE;
        v20 = (int32x2_t)0x100000000;
        do
        {
          v21 = v11 * v17 + 0x8000;
          v22 = vcge_u32(v18, (uint32x2_t)v20);
          if ((v22.i8[0] & 1) != 0)
            __b[v13 << v8] = v14 + BYTE2(v21);
          if ((v22.i8[4] & 1) != 0)
            __b[(v13 + 1) << v8] = v14 + ((v21 + v17) >> 16);
          v11 += 2;
          v20 = vadd_s32(v20, (int32x2_t)0x200000002);
          v13 += 2;
          v19 -= 2;
        }
        while (v19);
      }
      while (v10 != v9);
    }
    memset(&__b[a2[2 * (int)v9] << v8], a2[2 * (int)v9 + 1], v5 - (a2[2 * (int)v9] << v8));
    if (a3 >= 2)
    {
      v23 = 0;
      v24 = (1 << v8);
      v25 = (int)v24;
      v26 = v24 & 0xFFFFFFFE;
      v27 = (uint64x2_t)vdupq_n_s64(v24 - 2);
      v28 = vdup_n_s32((int)v24 >> 1);
      do
      {
        v29 = a2[2 * v23++];
        v30 = (a2[2 * v23] - v29) << v8;
        if ((int)v30 >= 1)
        {
          v31 = 0;
          v32 = v29 << v8;
          v33 = &__b[v32];
          do
          {
            if ((int)v25 >= 2)
            {
              v34 = 0;
              v35 = __b[v31 + v32];
              v36 = __b[v31 + v32 + v25] - v35;
              v37 = vdup_n_s32(v36);
              v38.i32[1] = v37.i32[1];
              v38.i32[0] = 0;
              v39 = vadd_s32(v28, v38);
              v40 = vdup_n_s32(2 * v36);
              do
              {
                v41 = vmovn_s64((int64x2_t)vcgeq_u64(v27, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v34), (int8x16_t)xmmword_218BBBF10)));
                v42 = vadd_s32(v39, v37);
                if ((v41.i8[0] & 1) != 0)
                  v33[v34 + 1] = v35 + (v42.i32[0] >> v8);
                if ((v41.i8[4] & 1) != 0)
                  v33[v34 + 2] = v35 + (v42.i32[1] >> v8);
                v34 += 2;
                v39 = vadd_s32(v39, v40);
              }
              while (v26 != v34);
            }
            v31 += v25;
            v33 += v25;
          }
          while (v31 < v30);
        }
      }
      while (v23 != v9);
    }
  }
  else
  {
    bzero(__b, v5);
  }
}

uint64_t sub_218BA8214(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v7;
  int v11;
  int v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;

  v7 = a5;
  v11 = *(_DWORD *)(a3 + 64);
  v12 = v11 != 3;
  if (v11 == 3)
    v13 = *(_DWORD *)(a2 + 56);
  else
    v13 = *(_DWORD *)(a2 + 56) + 1;
  v14 = *(_DWORD **)(a2 + 8);
  v37 = *(_DWORD *)(*(_QWORD *)a2 + 24) == 0;
  v15 = 32 * a6;
  v16 = *(_QWORD *)(a3 + 16) + 2 * (*(_QWORD *)(a3 + 40) >> 1) * v15;
  v17 = ~(-1 << *(_DWORD *)(a2 + 68));
  v42 = v16;
  v41 = v17;
  v38 = result;
  if (v14[1])
  {
    v39 = v13;
    HIDWORD(v36) = ~(-1 << *(_DWORD *)(a2 + 68));
    result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 32))(*(_QWORD *)(a2 + 16) + 2 * (*(_QWORD *)(a2 + 40) >> 1) * v15, v16);
    v13 = v39;
    v7 = a5;
    v12 = v11 != 3;
    v17 = v41;
    v16 = v42;
  }
  v19 = a4;
  v40 = v7;
  v20 = a6;
  if (v14[10] || v14[11] || v14[9])
  {
    v21 = v13 >> v12;
    v22 = *(int *)(a2 + 56);
    v23 = *(_DWORD *)(a2 + 60) - v15;
    if (v23 >= 32)
      v23 = 32;
    v24 = ((v23 + (v11 == 1)) >> (v11 == 1));
    if ((v22 & v12) != 0 && (int)v24 > 0)
    {
      v25 = v11 == 1;
      v26 = 2 * (*(_QWORD *)(a3 + 40) >> 1 << (v11 == 1));
      v27 = v16;
      v28 = v24;
      do
      {
        *(_WORD *)(v27 + 2 * v22) = *(_WORD *)(v27 + 2 * ((int)v22 - 1));
        v27 += v26;
        --v28;
      }
      while (v28);
    }
    else
    {
      v25 = v11 == 1;
    }
    v29 = ((*(uint64_t *)(a2 + 48) >> 1) * v15) >> v25;
    v30 = v21;
    if (v14[9])
    {
      v31 = 0;
      v32 = 1;
      do
      {
        v33 = v32;
        LODWORD(v36) = a6;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, int))(v38 + 8 * (*(_DWORD *)(a3 + 64) - 1) + 40))(*(_QWORD *)(a2 + 8 * (v31 + 1) + 16) + 2 * v29, *(_QWORD *)(a3 + 8 * (v31 + 1) + 16) + 2 * v29, *(_QWORD *)(a3 + 48), v14, v30, v19, v40 + 12136 * (v31 + 1), v24, v36, v16, *(_QWORD *)(a3 + 40), __PAIR64__(v37, v31), v17);
        v17 = v41;
        v16 = v42;
        v32 = 0;
        v31 = 1;
      }
      while ((v33 & 1) != 0);
    }
    else
    {
      v34 = 0;
      do
      {
        while (1)
        {
          v35 = v34;
          if (!v14[v34 + 10])
            break;
          ++v34;
          LODWORD(v36) = v20;
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, int))(v38 + 8 * (*(_DWORD *)(a3 + 64) - 1) + 40))(*(_QWORD *)(a2 + 8 * (v35 + 1) + 16) + 2 * v29, *(_QWORD *)(a3 + 8 * (v35 + 1) + 16) + 2 * v29, *(_QWORD *)(a3 + 48), v14, v30, v19 + ((v35 + 1) << 12), v40 + 12136 * (v35 + 1), v24, v36, v16, *(_QWORD *)(a3 + 40), __PAIR64__(v37, v35), v17);
          v17 = v41;
          v16 = v42;
          if (v35)
            return result;
        }
        ++v34;
      }
      while (!v35);
    }
  }
  return result;
}

unint64_t sub_218BA8518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t result;
  unsigned int v23;
  char v24;
  int v25;
  _WORD *v26;
  _WORD *v27;
  uint64_t v28;
  _WORD *v29;
  uint64_t v30;
  int v31;
  int v32;
  __int16 v33;
  __int16 v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  __int16 v45;
  __int16 v46;
  _WORD v47[2];
  _WORD v48[27300];
  uint64_t v49;

  v9 = (char *)MEMORY[0x24BDAC7A8]();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = v9;
  v49 = *MEMORY[0x24BDAC8D0];
  result = (unint64_t)sub_218BAA9BC(v48, v9, v16, v19, v20, v14, v12, v21);
  v23 = __clz(a9);
  v24 = 2 * (v23 == 20);
  if (v13 >= -5)
  {
    v25 = 0;
    v26 = v48;
    v27 = v47;
    result = v15;
    do
    {
      if (v15 >= 1)
      {
        v28 = 0;
        v29 = v26;
        do
        {
          v30 = 0;
          v31 = 1 << (38 - v23);
          do
          {
            v31 += *(__int16 *)(v11 + v30 * 2) * (unsigned __int16)v29[v30];
            ++v30;
          }
          while (v30 != 7);
          v32 = (v31 + (4 << v24)) >> (v24 + 3);
          if (v32 >= ~(-1 << (37 - v23 - v24)))
            v33 = ~(-1 << (37 - v23 - v24));
          else
            v33 = v32;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v27[v28++] = v34;
          ++v29;
        }
        while (v28 != v15);
      }
      v26 += 390;
      v27 += 390;
    }
    while (v25++ != ((v13 + 5) & ~((v13 + 5) >> 31)));
  }
  if (v13 >= 1)
  {
    v36 = 0;
    v37 = 0;
    v38 = 1 << (10 - v24);
    v39 = -1 << (10 - v24 - v23);
    v40 = v24 ^ 0xB;
    do
    {
      if (v15 >= 1)
      {
        for (result = 0; result != v15; *(_WORD *)&v18[2 * (v17 >> 1) * v37 + 2 * result++] = v46)
        {
          v41 = 0;
          v42 = v36;
          v43 = v39;
          do
          {
            v43 += *(__int16 *)(v11 + 16 + v41) * (unsigned __int16)v47[(v42 & 0xFFFFFFFE) + result];
            v41 += 2;
            v42 += 390;
          }
          while (v41 != 14);
          v44 = (v43 + v38) >> v40;
          if (v44 >= a9)
            v45 = a9;
          else
            v45 = (v43 + v38) >> v40;
          if (v44 >= 0)
            v46 = v45;
          else
            v46 = 0;
        }
      }
      ++v37;
      v36 += 390;
    }
    while (v37 != v13);
  }
  return result;
}

int *sub_218BA8774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int *result;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t i;
  int v27;
  __int16 v28;
  _BYTE v29[24];
  _WORD v30[27300];
  uint64_t v31;

  v9 = (char *)MEMORY[0x24BDAC7A8]();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = v9;
  v31 = *MEMORY[0x24BDAC8D0];
  sub_218BAA9BC(v30, v9, v16, v19, v20, v14, v12, v21);
  result = sub_218BAAD60();
  if (v13 >= 1)
  {
    v23 = 0;
    v24 = 0;
    v25 = *(__int16 *)(v11 + 8);
    do
    {
      if (v15 >= 1)
      {
        for (i = 0; i != v15; *(_WORD *)&v18[2 * i++] = v28)
        {
          v27 = *(unsigned __int16 *)&v18[2 * i]
              + ((*(_DWORD *)&v29[512 * (unint64_t)(v23 & 0x1FFFFFF) + 4 * i] * v25 + 1024) >> 11);
          if (v27 >= a9)
            result = (int *)a9;
          else
            result = (int *)v27;
          if (v27 >= 0)
            v28 = (__int16)result;
          else
            v28 = 0;
        }
      }
      ++v24;
      v18 += v17 & 0xFFFFFFFFFFFFFFFELL;
      v23 += 3;
    }
    while (v24 != v13);
  }
  return result;
}

int *sub_218BA88CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int *result;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t i;
  int v27;
  __int16 v28;
  _BYTE v29[24];
  _WORD v30[27300];
  uint64_t v31;

  v9 = (char *)MEMORY[0x24BDAC7A8]();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = v9;
  v31 = *MEMORY[0x24BDAC8D0];
  sub_218BAA9BC(v30, v9, v16, v19, v20, v14, v12, v21);
  result = sub_218BAAD60();
  if (v13 >= 1)
  {
    v23 = 0;
    v24 = 0;
    v25 = *(__int16 *)(v11 + 10);
    do
    {
      if (v15 >= 1)
      {
        for (i = 0; i != v15; *(_WORD *)&v18[2 * i++] = v28)
        {
          v27 = *(unsigned __int16 *)&v18[2 * i]
              + ((*(_DWORD *)&v29[512 * (unint64_t)(v23 & 0x1FFFFFF) + 4 * i] * v25 + 1024) >> 11);
          if (v27 >= a9)
            result = (int *)a9;
          else
            result = (int *)v27;
          if (v27 >= 0)
            v28 = (__int16)result;
          else
            v28 = 0;
        }
      }
      ++v24;
      v18 += v17 & 0xFFFFFFFFFFFFFFFELL;
      v23 += 3;
    }
    while (v24 != v13);
  }
  return result;
}

int *sub_218BA8A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, signed int a9)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int *result;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t i;
  int v28;
  unsigned int v29;
  _BYTE v30[196608];
  _WORD v31[27300];
  uint64_t v32;

  v9 = (char *)MEMORY[0x24BDAC7A8]();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = v9;
  v32 = *MEMORY[0x24BDAC8D0];
  sub_218BAA9BC(v31, v9, v16, v19, v20, v14, v12, v21);
  sub_218BAAD60();
  result = sub_218BAAD60();
  if (v13 >= 1)
  {
    v23 = 0;
    v24 = 0;
    v25 = *(__int16 *)(v11 + 8);
    v26 = *(__int16 *)(v11 + 10);
    do
    {
      if (v15 >= 1)
      {
        for (i = 0; i != v15; *(_WORD *)&v18[2 * i++] = (_WORD)result)
        {
          v28 = *(unsigned __int16 *)&v18[2 * i]
              + ((*(_DWORD *)&v30[512 * (unint64_t)(v23 & 0x1FFFFFF) + 4 * i] * v26
                + *(_DWORD *)&v30[512 * (unint64_t)(v23 & 0x1FFFFFF) + 98304 + 4 * i] * v25
                + 1024) >> 11);
          if (v28 >= a9)
            v29 = a9;
          else
            v29 = *(unsigned __int16 *)&v18[2 * i]
                + ((*(_DWORD *)&v30[512 * (unint64_t)(v23 & 0x1FFFFFF) + 4 * i] * v26
                  + *(_DWORD *)&v30[512 * (unint64_t)(v23 & 0x1FFFFFF) + 98304 + 4 * i] * v25
                  + 1024) >> 11);
          if (v28 >= 0)
            result = (int *)v29;
          else
            result = 0;
        }
      }
      ++v24;
      v18 += v17 & 0xFFFFFFFFFFFFFFFELL;
      v23 += 3;
    }
    while (v24 != v13);
  }
  return result;
}

uint16x4_t *sub_218BA8BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  double v16;
  int8x16_t v17;
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unint64_t *v23;
  uint16x4_t *v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  double v29;
  double v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t *v38;
  unsigned int v39;
  int16x8_t *v40;
  double v41;
  double v42;
  int8x16_t v43;
  int8x16_t v44;
  uint16x4_t *v45;
  int v46;
  uint64_t v47;
  uint32x4_t *v48;
  uint32x4_t *v49;
  int16x8_t *v50;
  __int128 v51;
  uint32x4_t *v52;
  int16x8_t *v53;
  double v54;
  double v55;
  int8x16_t v56;
  double v57;
  double v58;
  int8x16_t v59;
  double v60;
  double v61;
  int8x16_t v62;
  int32x4_t *v63;
  int16x8_t *v64;
  unsigned int v65;
  uint16x4_t *v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  unint64_t *v71;
  double v72;
  double v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  double v78;
  double v79;
  int8x16_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  int v84;
  char v85;
  uint32x4_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint32x4_t *v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t v93;
  int8x16_t v94;
  char v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  _OWORD v102[3];
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  _QWORD v106[2];
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  _QWORD v110[1010];

  v9 = MEMORY[0x24BDAC7A8]();
  v18 = v15;
  v19 = v14;
  v21 = v20;
  v22 = v13;
  v88 = v12;
  v23 = v11;
  v92 = v10;
  v24 = (uint16x4_t *)v9;
  v25 = 0;
  v110[1008] = *MEMORY[0x24BDAC8D0];
  v105 = 0;
  v104 = 0u;
  v103 = 0u;
  v101 = 0;
  v100 = 0u;
  v99 = 0u;
  v26 = &v109;
  v27 = v110;
  do
  {
    *(_QWORD *)((char *)&v103 + v25) = v27;
    *(_QWORD *)((char *)&v99 + v25) = v26;
    v25 += 8;
    v26 += 100;
    v27 += 200;
  }
  while (v25 != 40);
  v108 = 0uLL;
  v107 = 0;
  memset(v102, 0, 40);
  v94.i64[0] = (uint64_t)&v97;
  v94.i64[1] = (uint64_t)&v98;
  v93.i64[0] = (uint64_t)&v95;
  v93.i64[1] = (uint64_t)&v96;
  v28 = v10 >> 1;
  v106[0] = v103;
  v106[1] = v103;
  if ((v15 & 4) == 0)
  {
    v107 = v103;
    *(_QWORD *)&v108 = v103;
    *((_QWORD *)&v108 + 1) = v103;
    *(_QWORD *)&v102[0] = v99;
    *((_QWORD *)&v102[0] + 1) = v99;
    *(_QWORD *)&v102[1] = v99;
    *((_QWORD *)&v102[1] + 1) = v99;
    *(_QWORD *)&v102[2] = v99;
    sub_218B227E0((uint32x4_t *)v103, (int16x8_t *)v99, v11, v9, v13, v15, 0.0, v16, v17);
    if (v21 >= 2)
    {
      *((_QWORD *)&v108 + 1) = *((_QWORD *)&v103 + 1);
      *(_QWORD *)&v102[2] = *((_QWORD *)&v99 + 1);
      sub_218B227E0(*((uint32x4_t **)&v103 + 1), *((int16x8_t **)&v99 + 1), v23 + 1, (uint64_t)v24 + 2 * v28, v22, v18, v29, v30, v31);
      sub_218BAA748((uint64_t)v106, (uint64_t)v102, (int32x4_t *)v94.i64[1], (int16x8_t *)v93.i64[1], v22, *(_DWORD *)v19, a9);
      v32 = v94;
      v33 = v93;
      v34 = vextq_s8(v33, v33, 8uLL);
      v93 = v34;
      v94 = vextq_s8(v32, v32, 8uLL);
      if (v21 == 2)
        goto LABEL_12;
      v35 = (uint64_t)v24 + 2 * v28 + 2 * v28;
      v36 = v23 + 2;
      v90 = (uint32x4_t *)*((_QWORD *)&v104 + 1);
      v108 = v104;
      v37 = v28;
      v38 = v23;
      v39 = v21;
      v40 = (int16x8_t *)*((_QWORD *)&v100 + 1);
      *(_OWORD *)((char *)&v102[1] + 8) = v100;
      sub_218B227E0((uint32x4_t *)v104, (int16x8_t *)v100, v36, v35, v22, v18, *(double *)v32.i64, *(double *)v33.i64, v34);
      if (v39 >= 4)
      {
        v82 = v37;
        v83 = v38;
        sub_218B227E0(v90, v40, v38 + 3, v35 + 2 * v37, v22, v18, v41, v42, v43);
        sub_218BAA748((uint64_t)v106, (uint64_t)v102, (int32x4_t *)v94.i64[1], (int16x8_t *)v93.i64[1], v22, *(_DWORD *)v19, a9);
        sub_218B22EA0(v24, v92, &v94, &v93, v22, 2, *(__int16 *)(v19 + 8), a9);
        v24 = (uint16x4_t *)((char *)v24 + 2 * v92);
        v32 = v94;
        v33 = v93;
        v44 = vextq_s8(v33, v33, 8uLL);
        v93 = v44;
        v94 = vextq_s8(v32, v32, 8uLL);
        if (v39 != 4)
        {
          v45 = v24;
          v84 = v22;
          v85 = v18;
          v91 = v19;
          v46 = -4;
          v47 = 4;
          goto LABEL_16;
        }
        goto LABEL_12;
      }
LABEL_22:
      *((_QWORD *)&v108 + 1) = v108;
      *(_QWORD *)&v102[2] = *((_QWORD *)&v102[1] + 1);
      sub_218BAA748((uint64_t)v106, (uint64_t)v102, (int32x4_t *)v94.i64[1], (int16x8_t *)v93.i64[1], v22, *(_DWORD *)v19, a9);
      sub_218B22EA0(v24, v92, &v94, &v93, v22, 2, *(__int16 *)(v19 + 8), a9);
      v24 = (uint16x4_t *)((char *)v24 + 2 * v92);
LABEL_23:
      v75 = v94;
      v76 = v93;
      v93 = vextq_s8(v76, v76, 8uLL);
      v94 = vextq_s8(v75, v75, 8uLL);
      *(_QWORD *)&v108 = v107;
      *((_QWORD *)&v108 + 1) = v107;
      *((_QWORD *)&v102[1] + 1) = *(_QWORD *)&v102[1];
      *(_QWORD *)&v102[2] = *(_QWORD *)&v102[1];
      sub_218BAA748((uint64_t)v106, (uint64_t)v102, (int32x4_t *)v75.i64[0], (int16x8_t *)v76.i64[0], v22, *(_DWORD *)v19, a9);
      v65 = *(__int16 *)(v19 + 8);
      v66 = v24;
      v67 = v92;
      v68 = v22;
      v69 = 1;
      return sub_218B22EA0(v66, v67, &v94, &v93, v68, v69, v65, a9);
    }
LABEL_10:
    *((_QWORD *)&v108 + 1) = v108;
    *(_QWORD *)&v102[2] = *((_QWORD *)&v102[1] + 1);
    sub_218BAA748((uint64_t)v106, (uint64_t)v102, (int32x4_t *)v94.i64[1], (int16x8_t *)v93.i64[1], v22, *(_DWORD *)v19, a9);
    goto LABEL_23;
  }
  v84 = v13;
  v85 = v15;
  v48 = (uint32x4_t *)*((_QWORD *)&v103 + 1);
  v49 = (uint32x4_t *)v104;
  v107 = *((_QWORD *)&v103 + 1);
  v86 = (uint32x4_t *)*((_QWORD *)&v104 + 1);
  v108 = v104;
  v91 = v14;
  v50 = (int16x8_t *)*((_QWORD *)&v99 + 1);
  *(_QWORD *)&v102[0] = v99;
  *(_OWORD *)((char *)v102 + 8) = v99;
  v51 = v100;
  *(_OWORD *)((char *)&v102[1] + 8) = v100;
  sub_218B227E0((uint32x4_t *)v103, (int16x8_t *)v99, 0, v12, v13, v15, 0.0, v16, v17);
  v52 = v48;
  v22 = v84;
  v53 = v50;
  v19 = v91;
  sub_218B227E0(v52, v53, 0, v88 + 2 * v28, v84, v85, v54, v55, v56);
  sub_218B227E0(v49, (int16x8_t *)v51, v23, (uint64_t)v24, v84, v85, v57, v58, v59);
  if (v21 < 2)
    goto LABEL_10;
  v83 = v23;
  sub_218B227E0(v86, *((int16x8_t **)&v51 + 1), v23 + 1, (uint64_t)v24 + 2 * v28, v84, v85, v60, v61, v62);
  sub_218BAA748((uint64_t)v106, (uint64_t)v102, (int32x4_t *)v94.i64[1], (int16x8_t *)v93.i64[1], v84, *(_DWORD *)v91, a9);
  v32 = v94;
  v33 = v93;
  v44 = vextq_s8(v33, v33, 8uLL);
  v93 = v44;
  v94 = vextq_s8(v32, v32, 8uLL);
  if (v21 != 2)
  {
    v39 = v21;
    v82 = v28;
    v46 = -2;
    v47 = 2;
    v45 = v24;
    v35 = (uint64_t)v24;
LABEL_16:
    v70 = (v92 & 0x7FFFFFFFFFFFFFFELL) + (v92 >> 1);
    v87 = 2 * v70;
    v81 = v88 + 4 * v70;
    v71 = &v83[v47];
    *(_QWORD *)&v108 = v105;
    *((_QWORD *)&v102[1] + 1) = v101;
    v89 = 4 * v82;
    do
    {
      sub_218B227E0((uint32x4_t *)v108, *((int16x8_t **)&v102[1] + 1), v71, v35 + v89, v84, v85, *(double *)v32.i64, *(double *)v33.i64, v44);
      if (v39 + v46 < 2)
      {
        v19 = v91;
        v22 = v84;
        v24 = v45;
        goto LABEL_22;
      }
      sub_218B227E0(*((uint32x4_t **)&v108 + 1), *(int16x8_t **)&v102[2], v71 + 1, v35 + v87, v84, v85, v72, v73, v74);
      sub_218BAA748((uint64_t)v106, (uint64_t)v102, (int32x4_t *)v94.i64[1], (int16x8_t *)v93.i64[1], v84, *(_DWORD *)v91, a9);
      sub_218B22EA0(v45, v92, &v94, &v93, v84, 2, *(__int16 *)(v91 + 8), a9);
      v32 = v94;
      v33 = v93;
      v44 = vextq_s8(v33, v33, 8uLL);
      v93 = v44;
      v94 = vextq_s8(v32, v32, 8uLL);
      v45 = (uint16x4_t *)((char *)v45 + 2 * v92);
      v46 -= 2;
      v71 += 2;
      v35 += v89;
    }
    while (v39 + v46);
    if ((v85 & 8) == 0)
    {
      v63 = (int32x4_t *)v32.i64[0];
      v64 = (int16x8_t *)v33.i64[0];
      v19 = v91;
      v22 = v84;
      v24 = v45;
      goto LABEL_13;
    }
    v22 = v84;
    sub_218B227E0((uint32x4_t *)v108, *((int16x8_t **)&v102[1] + 1), 0, v81, v84, v85, *(double *)v32.i64, *(double *)v33.i64, v44);
    sub_218B227E0(*((uint32x4_t **)&v108 + 1), *(int16x8_t **)&v102[2], 0, v81 + 2 * v82, v84, v85, v78, v79, v80);
    v63 = (int32x4_t *)v94.i64[1];
    v64 = (int16x8_t *)v93.i64[1];
    v19 = v91;
    v24 = v45;
    goto LABEL_14;
  }
LABEL_12:
  v63 = (int32x4_t *)v32.i64[0];
  v64 = (int16x8_t *)v33.i64[0];
LABEL_13:
  *(_QWORD *)&v108 = v107;
  *((_QWORD *)&v108 + 1) = v107;
  *((_QWORD *)&v102[1] + 1) = *(_QWORD *)&v102[1];
  *(_QWORD *)&v102[2] = *(_QWORD *)&v102[1];
LABEL_14:
  sub_218BAA748((uint64_t)v106, (uint64_t)v102, v63, v64, v22, *(_DWORD *)v19, a9);
  v65 = *(__int16 *)(v19 + 8);
  v66 = v24;
  v67 = v92;
  v68 = v22;
  v69 = 2;
  return sub_218B22EA0(v66, v67, &v94, &v93, v68, v69, v65, a9);
}

uint16x4_t *sub_218BA92FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint16x4_t *v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  char v14;
  double v15;
  double v16;
  int8x16_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t *v25;
  uint16x4_t *v26;
  uint64_t v27;
  unsigned int v28;
  int16x8_t *v29;
  uint32x4_t *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  double v35;
  int8x16_t v36;
  int32x4_t *v37;
  int16x8_t *v38;
  double v39;
  uint16x4_t *v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  double v46;
  int8x16_t v47;
  int32x4_t *v48;
  int16x8_t *v49;
  double v50;
  uint64_t v51;
  double v52;
  int8x16_t v53;
  int32x4_t *v54;
  int16x8_t *v55;
  uint64_t v56;
  unsigned int v57;
  double v58;
  double v59;
  int8x16_t v60;
  double v61;
  int8x16_t v62;
  double v63;
  int32x4_t *v64;
  int16x8_t *v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  int32x4_t *v73;
  int16x8_t *v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unsigned int v79;
  int32x4_t *v80;
  int16x8_t *v81;
  unsigned int v82;
  double v83;
  double v84;
  int8x16_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int16x8_t *v92;
  char v93;
  uint32x4_t *v94;
  uint16x4_t *v95;
  _OWORD v96[2];
  _OWORD v97[2];
  char v98;
  char v99;
  int16x8_t *v100;
  __int128 v101;
  int16x8_t *v102;
  __int128 v103;
  uint32x4_t *v104;
  __int128 v105;
  uint32x4_t *v106;
  __int128 v107;
  uint64_t v108;
  _QWORD v109[612];

  v9 = (uint16x4_t *)MEMORY[0x24BDAC7A8]();
  v18 = v14;
  v20 = v19;
  v22 = v21;
  v23 = v13;
  v24 = v12;
  v25 = v11;
  v26 = v9;
  v27 = 0;
  v28 = a9;
  v109[609] = *MEMORY[0x24BDAC8D0];
  v95 = v9;
  v105 = 0uLL;
  v104 = 0;
  v101 = 0uLL;
  v100 = 0;
  v29 = (int16x8_t *)&v108;
  v30 = (uint32x4_t *)v109;
  do
  {
    *(uint32x4_t **)((char *)&v104 + v27) = v30;
    *(int16x8_t **)((char *)&v100 + v27) = v29;
    v27 += 8;
    v29 += 50;
    v30 += 100;
  }
  while (v27 != 24);
  v31 = 0;
  memset(v97, 0, 24);
  v32 = &v98;
  memset(v96, 0, 24);
  v33 = &v99;
  do
  {
    *(_QWORD *)((char *)v97 + v31) = v33;
    *(_QWORD *)((char *)v96 + v31) = v32;
    v31 += 8;
    v32 += 800;
    v33 += 1600;
  }
  while (v31 != 24);
  v102 = 0;
  v103 = 0uLL;
  v88 = v12;
  v90 = v10;
  v34 = v10 >> 1;
  v107 = 0uLL;
  v106 = v104;
  if ((v14 & 4) != 0)
  {
    v94 = (uint32x4_t *)v105;
    v107 = v105;
    v102 = v100;
    v92 = (int16x8_t *)v101;
    v103 = v101;
    sub_218B22714(v104, v100, 0, v12, v13, v14, *(double *)&v101, v16, v17);
    sub_218B22714(v94, v92, 0, v24 + 2 * v34, v23, v18, *(double *)&v92, v52, v53);
    v54 = *(int32x4_t **)&v97[1];
    v55 = *(int16x8_t **)&v96[1];
    v56 = (uint64_t)v26;
    v41 = v22;
    v51 = v34;
    v57 = *(_DWORD *)(v20 + 4);
    v91 = v56;
    sub_218B22714(*((uint32x4_t **)&v107 + 1), *((int16x8_t **)&v103 + 1), v25, v56, v23, v18, v58, v59, v60);
    sub_218BAA6EC((uint64_t)&v106, (uint64_t)&v102, v54, v55, v23, v57, a9);
    v37 = *(int32x4_t **)&v97[0];
    v38 = *(int16x8_t **)&v96[0];
    v97[0] = *(_OWORD *)((char *)v97 + 8);
    v63 = *((double *)v96 + 1);
    v96[0] = *(_OWORD *)((char *)v96 + 8);
    *(_QWORD *)&v97[1] = v37;
    *(_QWORD *)&v96[1] = v38;
    if (v41 >= 2)
    {
      v87 = v20;
      v67 = *(_DWORD *)(v20 + 4);
      v93 = v18;
      sub_218B22714(*((uint32x4_t **)&v107 + 1), *((int16x8_t **)&v103 + 1), v25 + 1, v91 + 2 * v51, v23, v18, v63, v61, v62);
      v68 = v67;
      v45 = a9;
      sub_218BAA6EC((uint64_t)&v106, (uint64_t)&v102, v37, v38, v23, v68, a9);
      v48 = *(int32x4_t **)&v97[0];
      v49 = *(int16x8_t **)&v96[0];
      v97[0] = *(_OWORD *)((char *)v97 + 8);
      v50 = *((double *)v96 + 1);
      v96[0] = *(_OWORD *)((char *)v96 + 8);
      *(_QWORD *)&v97[1] = v48;
      *(_QWORD *)&v96[1] = v49;
      if (v41 != 2)
      {
LABEL_13:
        v89 = v88 + 12 * v51;
        v69 = v25 + 2;
        v70 = v41 - 1;
        v71 = v91 + 4 * v51;
        v72 = v45;
        do
        {
          v73 = *(int32x4_t **)&v97[1];
          v74 = *(int16x8_t **)&v96[1];
          v75 = *(_DWORD *)(v87 + 4);
          sub_218B22714(*((uint32x4_t **)&v107 + 1), *((int16x8_t **)&v103 + 1), v69, v71, v23, v93, v50, v46, v47);
          sub_218BAA6EC((uint64_t)&v106, (uint64_t)&v102, v73, v74, v23, v75, v72);
          ++v69;
          sub_218BAA92C(&v95, v90, (uint64_t *)v97, (uint64_t *)v96, v23, *(__int16 *)(v87 + 10), v72);
          --v70;
          v71 += 2 * v51;
        }
        while (v70 > 1);
        v66 = v90;
        v48 = *(int32x4_t **)&v97[1];
        v49 = *(int16x8_t **)&v96[1];
        if ((v93 & 8) != 0)
        {
          v20 = v87;
          v79 = *(_DWORD *)(v87 + 4);
          sub_218B22714(*((uint32x4_t **)&v107 + 1), *((int16x8_t **)&v103 + 1), 0, v89, v23, v93, v50, v46, v47);
          v28 = v72;
          sub_218BAA6EC((uint64_t)&v106, (uint64_t)&v102, v48, v49, v23, v79, v72);
          sub_218BAA92C(&v95, v90, (uint64_t *)v97, (uint64_t *)v96, v23, *(__int16 *)(v87 + 10), v72);
          v80 = *(int32x4_t **)&v97[1];
          v81 = *(int16x8_t **)&v96[1];
          v82 = *(_DWORD *)(v87 + 4);
          sub_218B22714(*((uint32x4_t **)&v107 + 1), *((int16x8_t **)&v103 + 1), 0, v89 + 2 * v51, v23, v93, v83, v84, v85);
          v64 = v80;
          v65 = v81;
          v77 = v23;
          v76 = v82;
          goto LABEL_19;
        }
        v28 = v72;
        v20 = v87;
        goto LABEL_17;
      }
LABEL_12:
      v66 = v90;
      v28 = v45;
      v20 = v87;
LABEL_17:
      *((_QWORD *)&v107 + 1) = v107;
      *((_QWORD *)&v103 + 1) = v103;
      sub_218BAA6EC((uint64_t)&v106, (uint64_t)&v102, v48, v49, v23, *(_DWORD *)(v20 + 4), v28);
      sub_218BAA92C(&v95, v66, (uint64_t *)v97, (uint64_t *)v96, v23, *(__int16 *)(v20 + 10), v28);
      v64 = *(int32x4_t **)&v97[1];
      v65 = *(int16x8_t **)&v96[1];
      goto LABEL_18;
    }
  }
  else
  {
    *(_QWORD *)&v107 = v104;
    *((_QWORD *)&v107 + 1) = v104;
    v102 = v100;
    *(_QWORD *)&v103 = v100;
    *((_QWORD *)&v103 + 1) = v100;
    sub_218B22714(v104, v100, v11, (uint64_t)v9, v13, v14, v15, v16, v17);
    sub_218BAA6EC((uint64_t)&v106, (uint64_t)&v102, *(int32x4_t **)&v97[1], *(int16x8_t **)&v96[1], v23, *(_DWORD *)(v20 + 4), a9);
    v37 = *(int32x4_t **)&v97[0];
    v38 = *(int16x8_t **)&v96[0];
    v97[0] = *(_OWORD *)((char *)v97 + 8);
    v39 = *((double *)v96 + 1);
    v96[0] = *(_OWORD *)((char *)v96 + 8);
    *(_QWORD *)&v97[1] = v37;
    *(_QWORD *)&v96[1] = v38;
    if (v22 >= 2)
    {
      v40 = v26;
      v41 = v22;
      v86 = v34;
      v87 = v20;
      v91 = (uint64_t)v40;
      v42 = (uint64_t)v40 + 2 * v34;
      *((_QWORD *)&v107 + 1) = v105;
      *((_QWORD *)&v103 + 1) = v101;
      v43 = *(_DWORD *)(v20 + 4);
      v93 = v18;
      sub_218B22714((uint32x4_t *)v105, (int16x8_t *)v101, v25 + 1, v42, v23, v18, v39, v35, v36);
      v44 = v43;
      v45 = a9;
      sub_218BAA6EC((uint64_t)&v106, (uint64_t)&v102, v37, v38, v23, v44, a9);
      v48 = *(int32x4_t **)&v97[0];
      v49 = *(int16x8_t **)&v96[0];
      v97[0] = *(_OWORD *)((char *)v97 + 8);
      v50 = *((double *)v96 + 1);
      v96[0] = *(_OWORD *)((char *)v96 + 8);
      *(_QWORD *)&v97[1] = v48;
      *(_QWORD *)&v96[1] = v49;
      if (v22 != 2)
      {
        *((_QWORD *)&v107 + 1) = *((_QWORD *)&v105 + 1);
        *((_QWORD *)&v103 + 1) = *((_QWORD *)&v101 + 1);
        v51 = v86;
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  *((_QWORD *)&v107 + 1) = v107;
  *((_QWORD *)&v103 + 1) = v103;
  sub_218BAA6EC((uint64_t)&v106, (uint64_t)&v102, v37, v38, v23, *(_DWORD *)(v20 + 4), a9);
  v64 = *(int32x4_t **)&v97[0];
  v65 = *(int16x8_t **)&v96[0];
  v97[0] = *(_OWORD *)((char *)v97 + 8);
  v96[0] = *(_OWORD *)((char *)v96 + 8);
  *(_QWORD *)&v97[1] = v64;
  *(_QWORD *)&v96[1] = v65;
  v66 = v90;
LABEL_18:
  *((_QWORD *)&v107 + 1) = v107;
  *((_QWORD *)&v103 + 1) = v103;
  v76 = *(_DWORD *)(v20 + 4);
  v77 = v23;
LABEL_19:
  sub_218BAA6EC((uint64_t)&v106, (uint64_t)&v102, v64, v65, v77, v76, v28);
  return sub_218BAA92C(&v95, v66, (uint64_t *)v97, (uint64_t *)v96, v23, *(__int16 *)(v20 + 10), v28);
}

uint16x8_t *sub_218BA99E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint16x8_t *v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  double v17;
  int8x16_t v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  int16x8_t *v30;
  uint32x4_t *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  double v35;
  int8x16_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  double v41;
  int8x16_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  unint64_t *v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  unsigned int v50;
  int16x8_t *v51;
  uint64_t v52;
  double v53;
  int8x16_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  double v58;
  BOOL v59;
  uint64_t v60;
  uint32x4_t *v61;
  int16x8_t *v62;
  int16x8_t *v63;
  uint32x4_t *v64;
  uint32x4_t *v65;
  int16x8_t *v66;
  int16x8_t *v67;
  uint32x4_t *v68;
  int16x8_t *v69;
  unsigned int v70;
  double v71;
  double v72;
  int8x16_t v73;
  int16x8_t *v74;
  double v75;
  double v76;
  int8x16_t v77;
  double v78;
  int8x16_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  double v88;
  int8x16_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  double v98;
  int8x16_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  double v108;
  int8x16_t v109;
  uint64_t v110;
  int16x8_t *v111;
  uint32x4_t *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  char v117;
  uint32x4_t *v118;
  uint64_t v119;
  uint32x4_t *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  uint16x8_t *v125;
  _OWORD v126[2];
  _OWORD v127[2];
  char v128;
  char v129;
  int8x16_t v130;
  int8x16_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int16x8_t *v136;
  int16x8_t *v137;
  int16x8_t *v138;
  int16x8_t *v139;
  int16x8_t *v140;
  int16x8_t *v141;
  uint32x4_t *v142;
  uint32x4_t *v143;
  uint32x4_t *v144;
  uint32x4_t *v145;
  uint32x4_t *v146;
  uint32x4_t *v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  _QWORD v153[6];
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  _QWORD v157[2];
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  _QWORD v161[1012];

  v9 = (uint16x8_t *)MEMORY[0x24BDAC7A8]();
  v19 = v16;
  v20 = v15;
  v21 = v14;
  v22 = v13;
  v123 = v12;
  v124 = v10;
  v23 = v11;
  v24 = (uint64_t)v9;
  v25 = 0;
  v26 = a9;
  v161[1009] = *MEMORY[0x24BDAC8D0];
  v125 = v9;
  v156 = 0;
  v155 = 0u;
  v154 = 0u;
  v152 = 0;
  v151 = 0u;
  v150 = 0u;
  v27 = &v160;
  v28 = v161;
  do
  {
    *(_QWORD *)((char *)&v154 + v25) = v28;
    *(_QWORD *)((char *)&v150 + v25) = v27;
    v25 += 8;
    v27 += 100;
    v28 += 200;
  }
  while (v25 != 40);
  v29 = 0;
  v146 = 0;
  v145 = 0;
  v147 = 0;
  v143 = 0;
  v142 = 0;
  v144 = 0;
  v140 = 0;
  v139 = 0;
  v141 = 0;
  v30 = (int16x8_t *)&v148;
  v137 = 0;
  v136 = 0;
  v31 = (uint32x4_t *)&v149;
  v138 = 0;
  do
  {
    *(uint32x4_t **)((char *)&v142 + v29) = v31;
    *(int16x8_t **)((char *)&v136 + v29) = v30;
    v29 += 8;
    v30 += 50;
    v31 += 100;
  }
  while (v29 != 24);
  v32 = 0;
  v131.i64[0] = (uint64_t)&v134;
  v131.i64[1] = (uint64_t)&v135;
  v130.i64[0] = (uint64_t)&v132;
  v130.i64[1] = (uint64_t)&v133;
  memset(v127, 0, sizeof(v127));
  v33 = &v128;
  v34 = &v129;
  memset(v126, 0, sizeof(v126));
  do
  {
    *(_QWORD *)((char *)v127 + v32) = v34;
    *(_QWORD *)((char *)v126 + v32) = v33;
    v32 += 8;
    v33 += 800;
    v34 += 1600;
  }
  while (v32 != 32);
  v159 = 0uLL;
  v158 = 0;
  memset(v153, 0, 40);
  v157[0] = v154;
  v157[1] = v154;
  if ((v16 & 4) == 0)
  {
    v158 = v154;
    *(_QWORD *)&v159 = v154;
    *((_QWORD *)&v159 + 1) = v154;
    v153[0] = v150;
    v153[1] = v150;
    v153[2] = v150;
    v153[3] = v150;
    v153[4] = v150;
    v145 = v142;
    v146 = v142;
    v147 = v142;
    v139 = v136;
    v140 = v136;
    v141 = v136;
    sub_218B228D0(v142, v136, (uint32x4_t *)v154, (int16x8_t *)v150, v11, (uint64_t)v9, v13, v16, 0.0, v17, v18);
    sub_218BAA6EC((uint64_t)&v145, (uint64_t)&v139, *((int32x4_t **)&v127[1] + 1), *((int16x8_t **)&v126[1] + 1), v22, *(_DWORD *)(v20 + 4), a9);
    v37 = *(_QWORD *)&v127[0];
    v38 = *(_QWORD *)&v126[0];
    v127[0] = *(_OWORD *)((char *)v127 + 8);
    v39 = *((double *)v126 + 1);
    v126[0] = *(_OWORD *)((char *)v126 + 8);
    *(_QWORD *)&v127[1] = *((_QWORD *)&v127[1] + 1);
    *((_QWORD *)&v127[1] + 1) = v37;
    *(_QWORD *)&v126[1] = *((_QWORD *)&v126[1] + 1);
    *((_QWORD *)&v126[1] + 1) = v38;
    if (v21 >= 2)
    {
      v40 = v24 + 2 * (v124 >> 1);
      *((_QWORD *)&v159 + 1) = *((_QWORD *)&v154 + 1);
      v153[4] = *((_QWORD *)&v150 + 1);
      v147 = v143;
      v141 = v137;
      sub_218B228D0(v143, v137, *((uint32x4_t **)&v154 + 1), *((int16x8_t **)&v150 + 1), v23 + 1, v40, v22, v19, v39, v35, v36);
      sub_218BAA748((uint64_t)v157, (uint64_t)v153, (int32x4_t *)v131.i64[1], (int16x8_t *)v130.i64[1], v22, *(_DWORD *)v20, a9);
      v130 = vextq_s8(v130, v130, 8uLL);
      v131 = vextq_s8(v131, v131, 8uLL);
      sub_218BAA6EC((uint64_t)&v145, (uint64_t)&v139, *((int32x4_t **)&v127[1] + 1), *((int16x8_t **)&v126[1] + 1), v22, *(_DWORD *)(v20 + 4), a9);
      v43 = *(_QWORD *)&v127[0];
      v44 = *(_QWORD *)&v126[0];
      v127[0] = *(_OWORD *)((char *)v127 + 8);
      v45 = *((double *)v126 + 1);
      v126[0] = *(_OWORD *)((char *)v126 + 8);
      *(_QWORD *)&v127[1] = *((_QWORD *)&v127[1] + 1);
      *((_QWORD *)&v127[1] + 1) = v43;
      *(_QWORD *)&v126[1] = *((_QWORD *)&v126[1] + 1);
      *((_QWORD *)&v126[1] + 1) = v44;
      if (v21 != 2)
      {
        v46 = v23;
        v116 = v124 >> 1;
        v47 = v40 + 2 * (v124 >> 1);
        v48 = v23 + 2;
        v120 = (uint32x4_t *)*((_QWORD *)&v155 + 1);
        v159 = v155;
        v49 = v22;
        v50 = v21;
        v51 = (int16x8_t *)*((_QWORD *)&v151 + 1);
        *(_OWORD *)&v153[3] = v151;
        v147 = v144;
        v141 = v138;
        v52 = v47;
        sub_218B228D0(v144, v138, (uint32x4_t *)v155, (int16x8_t *)v151, v48, v47, v49, v19, v45, v41, v42);
        sub_218BAA6EC((uint64_t)&v145, (uint64_t)&v139, *((int32x4_t **)&v127[1] + 1), *((int16x8_t **)&v126[1] + 1), v49, *(_DWORD *)(v20 + 4), a9);
        v55 = *(_QWORD *)&v127[0];
        v56 = *(_QWORD *)&v126[0];
        v57 = v50;
        v127[0] = *(_OWORD *)((char *)v127 + 8);
        v58 = *((double *)v126 + 1);
        v126[0] = *(_OWORD *)((char *)v126 + 8);
        *(_QWORD *)&v127[1] = *((_QWORD *)&v127[1] + 1);
        *((_QWORD *)&v127[1] + 1) = v55;
        *(_QWORD *)&v126[1] = *((_QWORD *)&v126[1] + 1);
        *((_QWORD *)&v126[1] + 1) = v56;
        v59 = v50 >= 4;
        v60 = v20;
        if (!v59)
        {
LABEL_11:
          *((_QWORD *)&v159 + 1) = v159;
          v153[4] = v153[3];
          v147 = v146;
          v141 = v140;
          sub_218BAA748((uint64_t)v157, (uint64_t)v153, (int32x4_t *)v131.i64[1], (int16x8_t *)v130.i64[1], v49, *(_DWORD *)v60, v26);
          sub_218BAA6EC((uint64_t)&v145, (uint64_t)&v139, *((int32x4_t **)&v127[1] + 1), *((int16x8_t **)&v126[1] + 1), v49, *(_DWORD *)(v60 + 4), v26);
          sub_218BAA7AC(&v125, v124, v131.i64, v130.i64, (uint64_t *)v127, (uint64_t *)v126, v49, 2u, *(_WORD *)(v60 + 8), *(__int16 *)(v60 + 8) >> 15, *(_WORD *)(v60 + 10), v26);
          v20 = v60;
          v22 = v49;
LABEL_14:
          *(_QWORD *)&v159 = v158;
          *((_QWORD *)&v159 + 1) = v158;
          v153[3] = v153[2];
          v153[4] = v153[2];
          v147 = v146;
          v141 = v140;
          sub_218BAA748((uint64_t)v157, (uint64_t)v153, (int32x4_t *)v131.i64[1], (int16x8_t *)v130.i64[1], v22, *(_DWORD *)v20, v26);
          sub_218BAA6EC((uint64_t)&v145, (uint64_t)&v139, *((int32x4_t **)&v127[1] + 1), *((int16x8_t **)&v126[1] + 1), v22, *(_DWORD *)(v20 + 4), v26);
          v85 = *(_QWORD *)&v127[0];
          v86 = *(_QWORD *)&v126[0];
          v127[0] = *(_OWORD *)((char *)v127 + 8);
          v126[0] = *(_OWORD *)((char *)v126 + 8);
          *(_QWORD *)&v127[1] = *((_QWORD *)&v127[1] + 1);
          *((_QWORD *)&v127[1] + 1) = v85;
          v87 = 1;
          *(_QWORD *)&v126[1] = *((_QWORD *)&v126[1] + 1);
          *((_QWORD *)&v126[1] + 1) = v86;
          return sub_218BAA7AC(&v125, v124, v131.i64, v130.i64, (uint64_t *)v127, (uint64_t *)v126, v22, v87, *(_WORD *)(v20 + 8), *(__int16 *)(v20 + 8) >> 15, *(_WORD *)(v20 + 10), v26);
        }
        v110 = v52;
        sub_218B228D0(v147, v141, v120, v51, v46 + 3, v52 + 2 * v116, v49, v19, v58, v53, v54);
        sub_218BAA748((uint64_t)v157, (uint64_t)v153, (int32x4_t *)v131.i64[1], (int16x8_t *)v130.i64[1], v49, *(_DWORD *)v20, a9);
        sub_218BAA6EC((uint64_t)&v145, (uint64_t)&v139, *((int32x4_t **)&v127[1] + 1), *((int16x8_t **)&v126[1] + 1), v49, *(_DWORD *)(v20 + 4), a9);
        sub_218BAA7AC(&v125, v124, v131.i64, v130.i64, (uint64_t *)v127, (uint64_t *)v126, v49, 2u, *(_WORD *)(v20 + 8), *(__int16 *)(v20 + 8) >> 15, *(_WORD *)(v20 + 10), a9);
        v22 = v49;
        if (v57 != 4)
        {
          v70 = v57;
          v23 = v46;
          v115 = v22;
          v114 = v20;
          v117 = v19;
          v93 = -4;
          v94 = 4;
LABEL_19:
          v95 = (v124 & 0x7FFFFFFFFFFFFFFELL) + (v124 >> 1);
          v113 = v123 + 4 * v95;
          v96 = &v23[v94];
          *(_QWORD *)&v159 = v156;
          v153[3] = v152;
          v119 = 2 * v95;
          v122 = 4 * v116;
          v60 = v114;
          v49 = v115;
          v97 = v110;
          while (1)
          {
            sub_218B228D0(v147, v141, (uint32x4_t *)v159, (int16x8_t *)v153[3], v96, v97 + v122, v115, v117, v92, v88, v89);
            sub_218BAA6EC((uint64_t)&v145, (uint64_t)&v139, *((int32x4_t **)&v127[1] + 1), *((int16x8_t **)&v126[1] + 1), v115, *(_DWORD *)(v114 + 4), a9);
            v100 = *(_QWORD *)&v127[0];
            v101 = *(_QWORD *)&v126[0];
            v127[0] = *(_OWORD *)((char *)v127 + 8);
            v102 = *((double *)v126 + 1);
            v126[0] = *(_OWORD *)((char *)v126 + 8);
            *(_QWORD *)&v127[1] = *((_QWORD *)&v127[1] + 1);
            *((_QWORD *)&v127[1] + 1) = v100;
            *(_QWORD *)&v126[1] = *((_QWORD *)&v126[1] + 1);
            *((_QWORD *)&v126[1] + 1) = v101;
            v26 = a9;
            if (v70 + v93 < 2)
              goto LABEL_11;
            sub_218B228D0(v147, v141, *((uint32x4_t **)&v159 + 1), (int16x8_t *)v153[4], v96 + 1, v97 + v119, v115, v117, v102, v98, v99);
            sub_218BAA748((uint64_t)v157, (uint64_t)v153, (int32x4_t *)v131.i64[1], (int16x8_t *)v130.i64[1], v115, *(_DWORD *)v114, a9);
            sub_218BAA6EC((uint64_t)&v145, (uint64_t)&v139, *((int32x4_t **)&v127[1] + 1), *((int16x8_t **)&v126[1] + 1), v115, *(_DWORD *)(v114 + 4), a9);
            sub_218BAA7AC(&v125, v124, v131.i64, v130.i64, (uint64_t *)v127, (uint64_t *)v126, v115, 2u, *(_WORD *)(v114 + 8), *(__int16 *)(v114 + 8) >> 15, *(_WORD *)(v114 + 10), a9);
            v93 -= 2;
            v96 += 2;
            v97 += v122;
            if (!(v70 + v93))
            {
              v20 = v114;
              v22 = v115;
              if ((v117 & 8) == 0)
                goto LABEL_23;
              sub_218B228D0(v147, v141, (uint32x4_t *)v159, (int16x8_t *)v153[3], 0, v113, v115, v117, v92, v88, v89);
              sub_218BAA6EC((uint64_t)&v145, (uint64_t)&v139, *((int32x4_t **)&v127[1] + 1), *((int16x8_t **)&v126[1] + 1), v115, *(_DWORD *)(v114 + 4), a9);
              v106 = *(_QWORD *)&v127[0];
              v107 = *(_QWORD *)&v126[0];
              v127[0] = *(_OWORD *)((char *)v127 + 8);
              v126[0] = *(_OWORD *)((char *)v126 + 8);
              *(_QWORD *)&v127[1] = *((_QWORD *)&v127[1] + 1);
              *((_QWORD *)&v127[1] + 1) = v106;
              *(_QWORD *)&v126[1] = *((_QWORD *)&v126[1] + 1);
              *((_QWORD *)&v126[1] + 1) = v107;
              sub_218B228D0(v147, v141, *((uint32x4_t **)&v159 + 1), (int16x8_t *)v153[4], 0, v113 + 2 * v116, v115, v117, *(double *)v126, v108, v109);
              goto LABEL_24;
            }
          }
        }
      }
      goto LABEL_23;
    }
LABEL_13:
    *((_QWORD *)&v159 + 1) = v159;
    v153[4] = v153[3];
    v147 = v146;
    v141 = v140;
    sub_218BAA748((uint64_t)v157, (uint64_t)v153, (int32x4_t *)v131.i64[1], (int16x8_t *)v130.i64[1], v22, *(_DWORD *)v20, v26);
    v130 = vextq_s8(v130, v130, 8uLL);
    v131 = vextq_s8(v131, v131, 8uLL);
    sub_218BAA6EC((uint64_t)&v145, (uint64_t)&v139, *((int32x4_t **)&v127[1] + 1), *((int16x8_t **)&v126[1] + 1), v22, *(_DWORD *)(v20 + 4), v26);
    v83 = *(_QWORD *)&v127[0];
    v84 = *(_QWORD *)&v126[0];
    v127[0] = *(_OWORD *)((char *)v127 + 8);
    v126[0] = *(_OWORD *)((char *)v126 + 8);
    *(_QWORD *)&v127[1] = *((_QWORD *)&v127[1] + 1);
    *((_QWORD *)&v127[1] + 1) = v83;
    *(_QWORD *)&v126[1] = *((_QWORD *)&v126[1] + 1);
    *((_QWORD *)&v126[1] + 1) = v84;
    goto LABEL_14;
  }
  v115 = v13;
  v61 = (uint32x4_t *)*((_QWORD *)&v154 + 1);
  v118 = (uint32x4_t *)v155;
  v158 = *((_QWORD *)&v154 + 1);
  v112 = (uint32x4_t *)*((_QWORD *)&v155 + 1);
  v159 = v155;
  v114 = v15;
  v121 = v14;
  v62 = (int16x8_t *)*((_QWORD *)&v150 + 1);
  v153[0] = v150;
  *(_OWORD *)&v153[1] = v150;
  v111 = (int16x8_t *)*((_QWORD *)&v151 + 1);
  v63 = (int16x8_t *)v151;
  *(_OWORD *)&v153[3] = v151;
  v116 = v10 >> 1;
  v64 = v143;
  v145 = v142;
  v146 = v143;
  v117 = v16;
  v65 = v144;
  v147 = v144;
  v66 = v137;
  v139 = v136;
  v140 = v137;
  v67 = v138;
  v141 = v138;
  sub_218B228D0(v142, v136, (uint32x4_t *)v154, (int16x8_t *)v150, 0, v12, v13, v16, 0.0, v17, v18);
  v68 = v61;
  v22 = v115;
  v69 = v62;
  v70 = v121;
  v20 = v114;
  sub_218B228D0(v64, v66, v68, v69, 0, v123 + 2 * (v124 >> 1), v115, v117, v71, v72, v73);
  v74 = v63;
  v26 = a9;
  sub_218B228D0(v65, v67, v118, v74, v23, v24, v115, v117, v75, v76, v77);
  sub_218BAA6EC((uint64_t)&v145, (uint64_t)&v139, *((int32x4_t **)&v127[1] + 1), *((int16x8_t **)&v126[1] + 1), v115, *(_DWORD *)(v114 + 4), a9);
  v80 = *(_QWORD *)&v127[0];
  v81 = *(_QWORD *)&v126[0];
  v127[0] = *(_OWORD *)((char *)v127 + 8);
  v82 = *((double *)v126 + 1);
  v126[0] = *(_OWORD *)((char *)v126 + 8);
  *(_QWORD *)&v127[1] = *((_QWORD *)&v127[1] + 1);
  *((_QWORD *)&v127[1] + 1) = v80;
  *(_QWORD *)&v126[1] = *((_QWORD *)&v126[1] + 1);
  *((_QWORD *)&v126[1] + 1) = v81;
  if (v121 < 2)
    goto LABEL_13;
  v110 = v24;
  sub_218B228D0(v147, v141, v112, v111, v23 + 1, v24 + 2 * (v124 >> 1), v115, v117, v82, v78, v79);
  sub_218BAA748((uint64_t)v157, (uint64_t)v153, (int32x4_t *)v131.i64[1], (int16x8_t *)v130.i64[1], v115, *(_DWORD *)v114, a9);
  v130 = vextq_s8(v130, v130, 8uLL);
  v131 = vextq_s8(v131, v131, 8uLL);
  sub_218BAA6EC((uint64_t)&v145, (uint64_t)&v139, *((int32x4_t **)&v127[1] + 1), *((int16x8_t **)&v126[1] + 1), v115, *(_DWORD *)(v114 + 4), a9);
  v90 = *(_QWORD *)&v127[0];
  v91 = *(_QWORD *)&v126[0];
  v127[0] = *(_OWORD *)((char *)v127 + 8);
  v92 = *((double *)v126 + 1);
  v126[0] = *(_OWORD *)((char *)v126 + 8);
  *(_QWORD *)&v127[1] = *((_QWORD *)&v127[1] + 1);
  *((_QWORD *)&v127[1] + 1) = v90;
  *(_QWORD *)&v126[1] = *((_QWORD *)&v126[1] + 1);
  *((_QWORD *)&v126[1] + 1) = v91;
  if (v121 != 2)
  {
    v93 = -2;
    v94 = 2;
    goto LABEL_19;
  }
LABEL_23:
  *(_QWORD *)&v159 = v158;
  *((_QWORD *)&v159 + 1) = v158;
  v153[3] = v153[2];
  v153[4] = v153[2];
  v147 = v146;
  v141 = v140;
  sub_218BAA6EC((uint64_t)&v145, (uint64_t)&v139, *((int32x4_t **)&v127[1] + 1), *((int16x8_t **)&v126[1] + 1), v22, *(_DWORD *)(v20 + 4), v26);
  v103 = *(_QWORD *)&v127[0];
  v104 = *(_QWORD *)&v126[0];
  v127[0] = *(_OWORD *)((char *)v127 + 8);
  v126[0] = *(_OWORD *)((char *)v126 + 8);
  *(_QWORD *)&v127[1] = *((_QWORD *)&v127[1] + 1);
  *((_QWORD *)&v127[1] + 1) = v103;
  *(_QWORD *)&v126[1] = *((_QWORD *)&v126[1] + 1);
  *((_QWORD *)&v126[1] + 1) = v104;
  v147 = v146;
  v141 = v140;
LABEL_24:
  sub_218BAA748((uint64_t)v157, (uint64_t)v153, (int32x4_t *)v131.i64[1], (int16x8_t *)v130.i64[1], v22, *(_DWORD *)v20, v26);
  sub_218BAA6EC((uint64_t)&v145, (uint64_t)&v139, *((int32x4_t **)&v127[1] + 1), *((int16x8_t **)&v126[1] + 1), v22, *(_DWORD *)(v20 + 4), v26);
  v87 = 2;
  return sub_218BAA7AC(&v125, v124, v131.i64, v130.i64, (uint64_t *)v127, (uint64_t *)v126, v22, v87, *(_WORD *)(v20 + 8), *(__int16 *)(v20 + 8) >> 15, *(_WORD *)(v20 + 10), v26);
}

int32x4_t *sub_218BAA6EC(uint64_t a1, uint64_t a2, int32x4_t *a3, int16x8_t *a4, int a5, unsigned int a6, unsigned int a7)
{
  int32x4_t *result;
  uint64_t v10;
  int32x4_t *v11;
  int16x8_t *v12;

  result = sub_218B580F8((int32x4_t **)a1, (int16x8_t **)a2, a3, a4, a5, a6, a7);
  v10 = 0;
  v11 = *(int32x4_t **)a1;
  v12 = *(int16x8_t **)a2;
  do
  {
    *(_QWORD *)(a1 + v10) = *(_QWORD *)(a1 + v10 + 8);
    *(_QWORD *)(a2 + v10) = *(_QWORD *)(a2 + v10 + 8);
    v10 += 8;
  }
  while (v10 != 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a2 + 16) = v12;
  return result;
}

int32x4_t *sub_218BAA748(uint64_t a1, uint64_t a2, int32x4_t *a3, int16x8_t *a4, int a5, unsigned int a6, unsigned int a7)
{
  int32x4_t *result;
  uint64_t v10;
  int32x4_t *v11;
  uint64_t v12;
  int16x8_t *v13;
  uint64_t v14;

  result = sub_218B5825C((int32x4_t **)a1, (int16x8_t **)a2, a3, a4, a5, a6, a7);
  v10 = 0;
  v11 = *(int32x4_t **)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(int16x8_t **)a2;
  v14 = *(_QWORD *)(a2 + 8);
  do
  {
    *(_QWORD *)(a1 + v10) = *(_QWORD *)(a1 + v10 + 16);
    *(_QWORD *)(a2 + v10) = *(_QWORD *)(a2 + v10 + 16);
    v10 += 8;
  }
  while (v10 != 24);
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a2 + 32) = v14;
  return result;
}

uint16x8_t *sub_218BAA7AC(uint16x8_t **a1, unint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, unsigned int a8, __int16 a9, __int16 a10, __int16 a11, unsigned int a12)
{
  uint16x8_t *result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26[2];
  int16x8_t v27[96];
  int16x8_t v28[96];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  sub_218B22D54(v28, *a1, a2, a3, a4, a7, a8);
  sub_218B229C8(v27, *a1, a2, a5, a6, a7, a8);
  v26[0] = a9;
  v26[1] = a11;
  result = sub_218B2302C(*a1, a2, (int16x8_t *)*a1, a2, v28, v27, a7, a8, v26, a12);
  v21 = 0;
  *a1 = (uint16x8_t *)((char *)*a1 + 2 * (a2 >> 1) * a8);
  v22 = *a4;
  v23 = *a3;
  *a3 = a3[1];
  *a4 = a4[1];
  a3[1] = v23;
  a4[1] = v22;
  v24 = *a5;
  v25 = *a6;
  do
  {
    a5[v21] = a5[v21 + 1];
    a6[v21] = a6[v21 + 1];
    ++v21;
  }
  while (v21 != 3);
  a5[3] = v24;
  a6[3] = v25;
  return result;
}

uint16x4_t *sub_218BAA92C(uint16x4_t **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5, unsigned int a6, unsigned int a7)
{
  uint16x4_t *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_218B22BEC(*a1, a3, a4, a5, a6, a7);
  v12 = 0;
  *a1 = (uint16x4_t *)((char *)*a1 + a2);
  v13 = *a3;
  v14 = *a4;
  do
  {
    a3[v12] = a3[v12 + 1];
    a4[v12] = a4[v12 + 1];
    ++v12;
  }
  while (v12 != 2);
  a3[2] = v13;
  a4[2] = v14;
  return result;
}

void *sub_218BAA9BC(_WORD *a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  char *v9;
  _WORD *v10;
  int v11;
  unsigned int v12;
  _WORD *v13;
  int v14;
  char *v15;
  char *v16;
  int v17;
  size_t v18;
  size_t v19;
  int v20;
  int v21;
  int v22;
  char *v23;
  size_t v24;
  _WORD *v25;
  int v26;
  char *v27;
  _WORD *v28;
  int v29;
  size_t v30;
  _WORD *v31;
  _WORD *v32;
  void *result;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  char *v38;
  char *v39;
  int v40;
  size_t v41;
  char *v42;
  int v43;
  __int16 *v44;
  __int16 *v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  _WORD *v50;
  uint64_t v51;
  int *v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  int v58;
  int v59;
  int v61;

  v9 = a2;
  v10 = a1;
  v11 = a8 & 1;
  v12 = v11 | (2 * v11);
  v13 = &a1[!(a8 & 1) | (2 * !(a8 & 1))];
  v14 = 3 * (v11 + ((a8 & 2) >> 1)) + a6;
  v15 = &a2[-2 * v12];
  v16 = (char *)(a5 - 2 * v12);
  v58 = a8 & 2;
  v59 = v11;
  v61 = v14;
  v55 = v12;
  if ((a8 & 4) != 0)
  {
    v23 = &v16[a3];
    v24 = 2 * v14;
    memcpy(&a1[!(a8 & 1) | (2 * !(a8 & 1))], (const void *)(a5 - 2 * v12), v24);
    memcpy(v13 + 390, v16, v24);
    memcpy(v13 + 780, v23, v24);
  }
  else
  {
    v17 = 2 * v14;
    v18 = 2 * v14;
    memcpy(&a1[!(a8 & 1) | (2 * !(a8 & 1))], &a2[-2 * v12], v17);
    memcpy(v13 + 390, v15, v18);
    v19 = v18;
    v14 = v61;
    memcpy(v13 + 780, v15, v19);
    if (v11)
    {
      v20 = *(_DWORD *)(a4 + 2);
      v13[2] = *(_WORD *)(a4 + 6);
      *(_DWORD *)v13 = v20;
      v21 = *(_DWORD *)(a4 + 2);
      v13[392] = *(_WORD *)(a4 + 6);
      *((_DWORD *)v13 + 195) = v21;
      v22 = *(_DWORD *)(a4 + 2);
      v13[782] = *(_WORD *)(a4 + 6);
      *((_DWORD *)v13 + 390) = v22;
    }
  }
  v25 = v13 + 1170;
  if ((a8 & 8) != 0)
  {
    v38 = &v16[12 * (a3 >> 1)];
    v39 = &v38[a3];
    v26 = a7;
    v40 = 2 * v14;
    v41 = 2 * v14;
    memcpy(&v25[390 * a7], v38, v40);
    memcpy(&v25[390 * a7 + 390], v39, v41);
    result = memcpy(&v25[390 * a7 + 780], v39, v41);
  }
  else
  {
    v26 = a7;
    v54 = a7 - 1;
    v27 = &v15[2 * (a3 >> 1) * v54];
    v28 = &v25[390 * a7];
    v29 = 2 * v14;
    v30 = 2 * v14;
    memcpy(v28, v27, v29);
    v31 = &v25[390 * a7 + 390];
    memcpy(v31, v27, v30);
    v32 = &v25[390 * a7 + 780];
    result = memcpy(v32, v27, v30);
    if (v59)
    {
      v34 = a4 + 8 * v54;
      v35 = *(_DWORD *)(v34 + 2);
      v28[2] = *(_WORD *)(v34 + 6);
      *(_DWORD *)v28 = v35;
      v36 = *(_DWORD *)(v34 + 2);
      v31[2] = *(_WORD *)(v34 + 6);
      *(_DWORD *)v31 = v36;
      v37 = *(_DWORD *)(v34 + 2);
      v32[2] = *(_WORD *)(v34 + 6);
      *(_DWORD *)v32 = v37;
    }
  }
  if (v26 >= 1)
  {
    v42 = (char *)&v10[3 * (a8 & 1) + 1170 + 3 * (((_BYTE)a8 + 1) & 1)];
    v43 = v26;
    do
    {
      result = memcpy(v42, v9, (int)(2 * (v61 - v55)));
      v9 += a3 & 0xFFFFFFFFFFFFFFFELL;
      v42 += 780;
      --v43;
    }
    while (v43);
  }
  if (!v58 && v26 > -6)
  {
    v44 = &v13[v61];
    v45 = v44 - 1;
    v46 = ((v26 + 5) & ~((v26 + 5) >> 31)) + 1;
    do
    {
      v47 = *v45;
      *v44 = *v45;
      v44[1] = v47;
      v44[2] = v47;
      v45 += 390;
      v44 += 390;
      --v46;
    }
    while (v46);
  }
  if (v59)
  {
    if (v26 >= 1)
    {
      v50 = v10 + 1170;
      v51 = v26;
      v52 = (int *)(a4 + 2);
      do
      {
        v53 = *v52;
        v50[2] = *((_WORD *)v52 + 2);
        *(_DWORD *)v50 = v53;
        v50 += 390;
        v52 += 2;
        --v51;
      }
      while (v51);
    }
  }
  else if (v26 >= -5)
  {
    v48 = ((v26 + 5) & ~((v26 + 5) >> 31)) + 1;
    do
    {
      v49 = *(_WORD *)((char *)v10 + ((2 * ((a8 + 1) & 1)) & 0xFFFFFFFFFFFFFFFBLL | (4 * ((a8 + 1) & 1))));
      *v10 = v49;
      v10[1] = v49;
      v10[2] = v49;
      v10 += 390;
      --v48;
    }
    while (v48);
  }
  return result;
}

int *sub_218BAAD60()
{
  int *result;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int *v8;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned __int16 *v14;
  uint64_t *v15;
  uint64_t *v16;
  unsigned __int16 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  unsigned __int16 *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned __int16 *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unsigned __int16 *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  _DWORD *v42;
  _DWORD *v43;
  unsigned __int16 *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  _DWORD *v49;
  _DWORD *v50;
  unint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t v74;
  unsigned int *v75;
  int v76;
  unsigned int *v77;
  int *v78;
  uint64_t v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  unsigned __int16 *v84;
  int v85;
  uint64_t v86;
  unsigned __int16 *v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  unint64_t v100;
  unsigned __int16 *v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  _BYTE *v107;
  _BYTE *v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int *v131;
  int *v132;
  int v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  _BYTE v140[1560];
  uint64_t v141;
  uint64_t v142;
  int v143;
  _BYTE v144[1560];
  uint64_t v145;
  uint64_t v146;
  _BYTE v147[102964];

  result = (int *)MEMORY[0x24BDAC7A8]();
  v138 = v6;
  v7 = v1;
  *(_QWORD *)&v147[102948] = *MEMORY[0x24BDAC8D0];
  v8 = (int *)v147;
  v9 = &v143;
  if (v4 == 25)
    v10 = 164;
  else
    v10 = 455;
  if (v4 == 25)
    v11 = 2;
  else
    v11 = 1;
  if (v4 == 25)
  {
    if (v2 <= -6)
    {
      v13 = v3 + 4;
    }
    else
    {
      v136 = v11;
      v12 = 0;
      v139 = v1 + 2340;
      v13 = v3 + 4;
      v137 = v1;
      v14 = (unsigned __int16 *)(v1 + 3120);
      v15 = &v145;
      v16 = &v141;
      do
      {
        if (v3 >= -1)
        {
          v17 = (unsigned __int16 *)(v139 + 2 * v12);
          v18 = *v17;
          v19 = v18 * v18;
          v20 = *(v17 - 390);
          v21 = v20 * v20;
          v22 = *(v17 - 780);
          v23 = v22 * v22;
          v24 = *(v17 - 1170);
          v25 = v24 * v24;
          v26 = v16;
          v27 = v15;
          v28 = v14;
          v29 = v3 + 2;
          do
          {
            v30 = v22 + v24;
            v24 = v22;
            v22 = v20;
            v31 = v23 + v25;
            v25 = v23;
            v23 = v21;
            v20 = v18;
            v21 = v19;
            v18 = *v28;
            v19 = v18 * v18;
            *(_DWORD *)v26 = v22 + v20 + v30 + v18;
            *(_DWORD *)v27 = v23 + v21 + v31 + v18 * v18;
            v28 += 390;
            v27 += 195;
            v26 += 195;
            --v29;
          }
          while (v29);
        }
        ++v12;
        ++v14;
        v15 = (uint64_t *)((char *)v15 + 4);
        v16 = (uint64_t *)((char *)v16 + 4);
      }
      while (v12 != v2 + 6);
      v7 = v137;
      v11 = v136;
    }
    if (v3 >= -1)
    {
      v48 = 2;
      v49 = v140;
      v50 = v144;
      do
      {
        if (v2 >= -1)
        {
          v51 = 0;
          v52 = v50[393];
          v53 = v49[393];
          v54 = v50[392];
          v55 = v49[392];
          v56 = v50[391];
          v57 = v49[391];
          v58 = v50[390];
          v59 = v49[390];
          do
          {
            v60 = v57 + v59;
            v59 = v57;
            v57 = v55;
            v61 = v56 + v58;
            v58 = v56;
            v56 = v54;
            v55 = v53;
            v54 = v52;
            v53 = v49[v51 / 4 + 394];
            v52 = v50[v51 / 4 + 394];
            v49[v51 / 4 + 392] = v57 + v55 + v60 + v53;
            v50[v51 / 4 + 392] = v56 + v54 + v61 + v52;
            v51 += 4;
          }
          while (4 * (v2 + 4) - 8 != v51);
        }
        v50 += 390;
        v49 += 390;
        ++v48;
      }
      while (v48 != v13);
LABEL_37:
      v72 = 24 - __clz(v138);
      v73 = &v142;
      v74 = 4 * (390 << (v4 == 25));
      v75 = (unsigned int *)&v146;
      v76 = -1;
      do
      {
        v77 = v75;
        v78 = (int *)v73;
        v79 = (v2 + 1) + 1;
        if (v2 >= -1)
        {
          do
          {
            v80 = *v78;
            v81 = ((int)(*v77 + ((1 << (2 * v72)) >> 1)) >> (2 * v72)) * v4
                - ((int)(v80 + ((1 << v72) >> 1)) >> v72)
                * ((int)(v80 + ((1 << v72) >> 1)) >> v72);
            v82 = ((v81 & ~(v81 >> 31)) * v5 + 0x80000) >> 20;
            if (v82 >= 0xFF)
              v82 = 255;
            v83 = byte_218BCF700[v82];
            *v77++ = (v80 * v10 * v83 + 2048) >> 12;
            *v78++ = v83;
            --v79;
          }
          while (v79);
        }
        v76 += v11;
        v73 = (uint64_t *)((char *)v73 + v74);
        v75 = (unsigned int *)((char *)v75 + v74);
      }
      while (v76 <= v3);
    }
  }
  else
  {
    if (v2 <= -4)
    {
      v32 = v3 + 4;
    }
    else
    {
      v32 = v3 + 4;
      v33 = (unsigned __int16 *)(v1 + 2342);
      v34 = (char *)&v145 + 4;
      v35 = (char *)&v141 + 4;
      v36 = 1;
      do
      {
        if (v3 >= -1)
        {
          v37 = (unsigned __int16 *)(v7 + 780 + 2 * v36);
          v38 = v37[390];
          v39 = v38 * v38;
          v40 = *v37;
          v41 = v40 * v40;
          v42 = v35;
          v43 = v34;
          v44 = v33;
          v45 = v3 + 2;
          do
          {
            v46 = v40 + v38;
            v40 = v38;
            v38 = *v44;
            v47 = v41 + v39;
            v41 = v39;
            v39 = v38 * v38;
            *v42 = v46 + v38;
            *v43 = v47 + v38 * v38;
            v44 += 390;
            v43 += 390;
            v42 += 390;
            --v45;
          }
          while (v45);
        }
        ++v36;
        ++v33;
        v34 += 4;
        v35 += 4;
      }
      while (v36 != v2 + 5);
    }
    if (v3 >= -1)
    {
      v62 = 2;
      v63 = v140;
      v64 = v144;
      do
      {
        if (v2 >= -1)
        {
          v65 = 0;
          v66 = *((_DWORD *)v64 + 392);
          v67 = *((_DWORD *)v63 + 392);
          v68 = *((_DWORD *)v64 + 391);
          v69 = *((_DWORD *)v63 + 391);
          do
          {
            v70 = v69 + v67;
            v69 = v67;
            v67 = *(_DWORD *)&v63[v65 + 1572];
            v71 = v68 + v66;
            v68 = v66;
            v66 = *(_DWORD *)&v64[v65 + 1572];
            *(_DWORD *)&v63[v65 + 1568] = v70 + v67;
            *(_DWORD *)&v64[v65 + 1568] = v71 + v66;
            v65 += 4;
          }
          while (4 * (v2 + 4) - 8 != v65);
        }
        v64 += 1560;
        v63 += 1560;
        ++v62;
      }
      while (v62 != v32);
      goto LABEL_37;
    }
  }
  v84 = (unsigned __int16 *)(v7 + 2346);
  if (v4 == 25)
  {
    if (v3 < 2)
    {
      v105 = 1;
    }
    else
    {
      v85 = 0;
      v86 = 4 * v2;
      v87 = (unsigned __int16 *)(v7 + 3126);
      v88 = v140;
      v89 = v144;
      do
      {
        if (v2 >= 1)
        {
          v90 = 0;
          v91 = 0;
          v92 = *(v9 - 390);
          v93 = v9[390];
          v94 = *(v8 - 390);
          v95 = v8[390];
          v96 = v95;
          v97 = v93;
          do
          {
            v98 = -6 * (v97 + v92);
            v92 = *(_DWORD *)&v88[v91 + 1576];
            v97 = *(_DWORD *)&v88[v91 + 4696];
            v99 = v96 + v94;
            v94 = *(_DWORD *)&v89[v91 + 1576];
            v96 = *(_DWORD *)&v89[v91 + 4696];
            result[v91 / 4] = (5 * (*(_DWORD *)&v89[v91 + 4688] + *(_DWORD *)&v89[v91 + 1568] + v94 + v96)
                             + 6 * v99
                             + (v98 - 5 * (*(_DWORD *)&v88[v91 + 4688] + *(_DWORD *)&v88[v91 + 1568] + v92 + v97))
                             * v84[v90]
                             + 256) >> 9;
            v91 += 4;
            ++v90;
          }
          while (v86 != v91);
          v100 = 0;
          v101 = v87;
          do
          {
            v102 = -6 * v93;
            v93 = *(_DWORD *)&v88[v100 + 4696];
            v103 = *(_DWORD *)&v89[v100 + 4696];
            v104 = *v101++;
            result[v100 / 4 + 384] = (5 * (v103 + *(_DWORD *)&v89[v100 + 4688])
                                    + 6 * v95
                                    + (v102 - 5 * (v93 + *(_DWORD *)&v88[v100 + 4688])) * v104
                                    + 128) >> 8;
            v100 += 4;
            v95 = v103;
          }
          while (v86 != v100);
        }
        result += 768;
        v84 += 780;
        v9 += 780;
        v8 += 780;
        v85 += 2;
        v88 += 3120;
        v89 += 3120;
        v87 += 780;
      }
      while (v85 < v3 - 1);
      v105 = v3 | 1;
    }
    if (v105 == v3 && v2 >= 1)
    {
      v126 = v2;
      v127 = *(v9 - 390);
      v128 = v9[390];
      v129 = *(v8 - 390);
      v130 = v8[390];
      v131 = v9 - 391;
      v132 = v8 - 391;
      do
      {
        v133 = -6 * (v128 + v127);
        v127 = v131[2];
        v128 = v131[782];
        v134 = v130 + v129;
        v129 = v132[2];
        v130 = v132[782];
        v135 = *v84++;
        *result++ = (5 * (v132[780] + *v132 + v129 + v130)
                   + 6 * v134
                   + (v133 - 5 * (v131[780] + *v131 + v127 + v128)) * v135
                   + 256) >> 9;
        ++v131;
        ++v132;
        --v126;
      }
      while (v126);
    }
  }
  else if (v3 >= 1)
  {
    v106 = 0;
    v107 = v140;
    v108 = v144;
    do
    {
      if (v2 >= 1)
      {
        v109 = 0;
        v110 = 0;
        v111 = *v9;
        v112 = *(v9 - 390);
        v113 = v9[389];
        v114 = *v8;
        v115 = *(v8 - 390);
        v116 = v8[389];
        do
        {
          v117 = *(_DWORD *)&v107[v110 + 3128] + v111;
          v111 = *(_DWORD *)&v107[v110 + 3136];
          v118 = v117 + v111 + v112;
          v119 = *(_DWORD *)&v107[v110 + 4692];
          v120 = v118 + v119;
          v112 = *(_DWORD *)&v107[v110 + 1576];
          v121 = -3 * (v113 + *(_DWORD *)&v107[v110 + 1568] + v112 + *(_DWORD *)&v107[v110 + 4696]) - 4 * v120;
          v122 = *(_DWORD *)&v108[v110 + 3128] + v114;
          v114 = *(_DWORD *)&v108[v110 + 3136];
          v123 = v122 + v114 + v115;
          v124 = *(_DWORD *)&v108[v110 + 4692];
          v125 = v123 + v124;
          v115 = *(_DWORD *)&v108[v110 + 1576];
          result[v110 / 4] = (3 * (v116 + *(_DWORD *)&v108[v110 + 1568] + v115 + *(_DWORD *)&v108[v110 + 4696])
                            + 4 * v125
                            + v121 * v84[v109]
                            + 256) >> 9;
          v110 += 4;
          ++v109;
          v116 = v124;
          v113 = v119;
        }
        while (4 * v2 != v110);
      }
      result += 384;
      v84 += 390;
      v9 += 390;
      v8 += 390;
      ++v106;
      v107 += 1560;
      v108 += 1560;
    }
    while (v106 != v3);
  }
  return result;
}

void sub_218BAB590()
{
  unint64_t v0;
  uint64_t (**v1)();
  uint64_t (*v2)();

  v0 = atomic_load(qword_253D5FA28);
  if (v0 != -1)
  {
    v1 = &v2;
    v2 = sub_218BAB5E4;
    std::__call_once(qword_253D5FA28, &v1, (void (__cdecl *)(void *))sub_218BAB698);
  }
}

uint64_t sub_218BAB5E4()
{
  uint64_t result;
  uint64_t v1;
  size_t v2;
  int v3;

  v3 = 0;
  v1 = 0;
  v2 = 8;
  sysctlbyname("hw.cachelinesize", &v1, &v2, 0, 0);
  v2 = 4;
  if (!sysctlbyname("hw.physicalcpu", &v3, &v2, 0, 0) && v2 == 4)
    dword_253D3D5A0 = v3;
  v2 = 4;
  result = sysctlbyname("hw.logicalcpu", &v3, &v2, 0, 0);
  dword_253D5FA24 |= 2u;
  return result;
}

uint64_t sub_218BAB698(uint64_t (***a1)(void))
{
  return (**a1)();
}

uint64_t sub_218BAB6A4(char a1, int a2)
{
  unsigned int v5;

  if (!a2)
    return 0;
  if ((sub_218BB670C(a2) & 1) != 0)
    return 0;
  v5 = sub_218BB6630(a2) ^ 1;
  if (a1)
    return v5;
  else
    return 1;
}

uint64_t sub_218BAB6F8(uint64_t a1, int32x2_t *a2, CVPixelBufferRef pixelBuffer)
{
  OSType PixelFormatType;
  int32x2_t v7;
  void *v8;
  void *v9;
  id v10;
  int v11;
  OSType v12;
  uint64_t i;
  __CVBuffer *v15;
  CVPixelBufferLockFlags v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  uint64_t j;
  __CVBuffer *v23;
  CVPixelBufferLockFlags v24;
  unint64_t v25;
  CVPixelBufferRef v26;
  CVPixelBufferRef **v27;
  CVPixelBufferRef *v28;

  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v7 = a2[33];
  if (*(_BYTE *)(*(_QWORD *)&v7 + 24) && !a2[8].i32[0])
    return 0;
  v8 = (void *)MEMORY[0x219A202B4]();
  v9 = *(void **)(a1 + 32);
  if (!v9)
  {
LABEL_10:
    objc_autoreleasePoolPop(v8);
    goto LABEL_11;
  }
  v10 = v9;
  if ((objc_msgSend(v10, "metalIsSupported") & 1) == 0
    || !CVPixelBufferGetIOSurface(pixelBuffer)
    || (v11 = objc_msgSend(v10, "maximumTextureDimension"), CVPixelBufferGetWidth(pixelBuffer) > v11)
    || CVPixelBufferGetHeight(pixelBuffer) > v11
    || (v12 = CVPixelBufferGetPixelFormatType(pixelBuffer), (sub_218BB6630(v12) & 1) != 0)
    || objc_msgSend(v10, "broken444") && (sub_218BB6840(v12) & 1) != 0)
  {

    goto LABEL_10;
  }

  objc_autoreleasePoolPop(v8);
  for (i = 0; i != 3; ++i)
  {
    v15 = *(__CVBuffer **)(*(_QWORD *)&v7 + 8 * i);
    if (v15)
    {
      if (*(_BYTE *)(*(_QWORD *)&v7 + i + 27))
      {
        v16 = *(_QWORD *)(*(_QWORD *)&v7 + 8 * i + 32);
        if (v16 != 1)
        {
          CVPixelBufferUnlockBaseAddress(v15, v16);
          *(_BYTE *)(*(_QWORD *)&v7 + i + 27) = 0;
        }
      }
    }
  }
  v17 = *(unsigned __int8 *)(*(_QWORD *)&v7 + 26);
  v18 = (void *)MEMORY[0x219A202B4]();
  v19 = *(void **)(a1 + 32);
  if (!v17)
  {
    if (v19)
    {
      v20 = objc_msgSend(v19, "copyPicture:toPixelBuffer:", a2, pixelBuffer);
      goto LABEL_29;
    }
LABEL_30:
    v21 = -12911;
    goto LABEL_31;
  }
  if (!v19)
    goto LABEL_30;
  v20 = objc_msgSend(v19, "applyFilmGrain:forPicture:toPixelBuffer:", a1 + 40, a2, pixelBuffer);
LABEL_29:
  v21 = v20;
LABEL_31:
  objc_autoreleasePoolPop(v18);
  for (j = 0; j != 3; ++j)
  {
    v23 = *(__CVBuffer **)(*(_QWORD *)&v7 + 8 * j);
    if (!v23)
      continue;
    if (*(_BYTE *)(*(_QWORD *)&v7 + j + 27))
    {
      v24 = *(_QWORD *)(*(_QWORD *)&v7 + 8 * j + 32);
      if (v24 == 1)
        continue;
      CVPixelBufferUnlockBaseAddress(v23, v24);
      v23 = *(__CVBuffer **)(*(_QWORD *)&v7 + 8 * j);
    }
    *(_QWORD *)(*(_QWORD *)&v7 + 8 * j + 32) = 1;
    CVPixelBufferLockBaseAddress(v23, 1uLL);
    *(_BYTE *)(*(_QWORD *)&v7 + j + 27) = 1;
  }
  if (!v21)
    return 0;
  v26 = pixelBuffer;
  v25 = atomic_load((unint64_t *)(a1 + 36896));
  if (v25 != -1)
  {
    v28 = &v26;
    v27 = &v28;
    std::__call_once((std::once_flag::_State_type *)(a1 + 36896), &v27, (void (__cdecl *)(void *))sub_218BAB984);
  }
  if ((sub_218BB670C(PixelFormatType) & 1) != 0)
    return 4294954385;
LABEL_11:
  if (*(_BYTE *)(*(_QWORD *)&v7 + 26))
  {
    sub_218BAC284(a1 + 40, a2, pixelBuffer, 0);
    return 0;
  }
  return sub_218BABA2C(a1, (uint64_t)a2, pixelBuffer, 0);
}

void sub_218BAB96C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_218BAB984(uint64_t ***a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v2 = ***a1;
    v3 = 138412290;
    v4 = v2;
    _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Unable to copy via metal to %@", (uint8_t *)&v3, 0xCu);
  }
}

uint64_t sub_218BABA2C(uint64_t a1, uint64_t a2, CVPixelBufferRef pixelBuffer, uint64_t a4)
{
  OSType PixelFormatType;
  uint64_t v9;
  uint64_t v10;

  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  if (*(_DWORD *)(a2 + 68) == 8)
  {
    v9 = (*(uint64_t (**)(uint64_t, CVPixelBufferRef, uint64_t))a1)(a2, pixelBuffer, a4);
  }
  else if (sub_218BB6630(PixelFormatType))
  {
    v9 = (*(uint64_t (**)(uint64_t, CVPixelBufferRef))(a1 + 16))(a2, pixelBuffer);
  }
  else
  {
    v9 = (*(uint64_t (**)(uint64_t, CVPixelBufferRef, uint64_t))(a1 + 8))(a2, pixelBuffer, a4);
  }
  v10 = v9;
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  return v10;
}

uint64_t sub_218BABAD8(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t a3)
{
  int v6;
  uint64_t v7;
  int v8;
  char *BaseAddressOfPlane;
  uint64_t v10;
  size_t BytesPerRowOfPlane;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t i;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  char v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;

  v6 = 8 - *(_DWORD *)(a1 + 68);
  v7 = *(unsigned int *)(a1 + 56);
  v8 = *(_DWORD *)(a1 + 60);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 264) + 24))
  {
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
    v10 = *(_QWORD *)(a1 + 16);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
    if (v8 >= 1)
    {
      v12 = 0;
      v13 = *(_QWORD *)(a1 + 40);
      v14 = &BaseAddressOfPlane[BytesPerRowOfPlane * (a3 >> 32) + (int)a3];
      do
      {
        if ((int)v7 >= 1)
        {
          for (i = 0; i != v7; ++i)
            v14[i] = *(unsigned __int8 *)(v10 + i) << v6;
        }
        v14 += BytesPerRowOfPlane;
        v10 += v13;
        ++v12;
      }
      while (v12 != v8);
    }
  }
  v16 = *(_DWORD *)(a1 + 64);
  if (v16)
  {
    v17 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(_QWORD *)(a1 + 32);
    v20 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
    v21 = v16 == 1;
    v22 = v16 == 1 ? v8 + 1 : v8;
    v23 = v22 >> v21;
    if (v23 >= 1)
    {
      v24 = 0;
      v25 = *(_QWORD *)(a1 + 48);
      v26 = SHIDWORD(a3) >> v21;
      v27 = v16 != 3;
      if (v16 == 3)
        v28 = v7;
      else
        v28 = v7 + 1;
      v29 = (v28 >> v27);
      v30 = (uint64_t)v17 + 2 * ((int)a3 >> v27) + v20 * v26 + 1;
      do
      {
        if ((int)v29 >= 1)
        {
          v31 = 0;
          v32 = (_BYTE *)v30;
          do
          {
            *(v32 - 1) = *(unsigned __int8 *)(v18 + v31) << v6;
            *v32 = *(unsigned __int8 *)(v19 + v31) << v6;
            v32 += 2;
            ++v31;
          }
          while (v29 != v31);
        }
        v18 += v25;
        v19 += v25;
        ++v24;
        v30 += v20;
      }
      while (v24 != v23);
    }
  }
  return 0;
}

uint64_t sub_218BABC7C(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t a3)
{
  int v6;
  uint64_t v7;
  int v8;
  char *BaseAddressOfPlane;
  uint64_t v10;
  size_t BytesPerRowOfPlane;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  char v21;
  int v22;
  int v23;
  int v24;
  size_t v25;
  int v26;
  char v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _WORD *v34;

  v6 = 16 - *(_DWORD *)(a1 + 68);
  v7 = *(unsigned int *)(a1 + 56);
  v8 = *(_DWORD *)(a1 + 60);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 264) + 24))
  {
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
    v10 = *(_QWORD *)(a1 + 16);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
    if (v8 >= 1)
    {
      v12 = 0;
      v13 = &BaseAddressOfPlane[2 * (BytesPerRowOfPlane >> 1) * (a3 >> 32) + 2 * (int)a3];
      v14 = 2 * (*(_QWORD *)(a1 + 40) >> 1);
      do
      {
        if ((int)v7 >= 1)
        {
          v15 = 0;
          do
          {
            *(_WORD *)&v13[v15] = *(unsigned __int16 *)(v10 + v15) << v6;
            v15 += 2;
          }
          while (2 * v7 != v15);
        }
        ++v12;
        v13 += 2 * (BytesPerRowOfPlane >> 1);
        v10 += v14;
      }
      while (v12 != v8);
    }
  }
  v16 = *(_DWORD *)(a1 + 64);
  if (v16)
  {
    v17 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(_QWORD *)(a1 + 32);
    v20 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
    v21 = v16 == 1;
    v22 = v16 == 1 ? v8 + 1 : v8;
    v23 = v22 >> v21;
    if (v23 >= 1)
    {
      v24 = 0;
      v25 = v20 >> 1;
      v26 = SHIDWORD(a3) >> v21;
      v27 = v16 != 3;
      if (v16 == 3)
        v28 = v7;
      else
        v28 = v7 + 1;
      v29 = v28 >> v27;
      v30 = 2 * (*(_QWORD *)(a1 + 48) >> 1);
      v31 = (uint64_t)v17 + 4 * ((int)a3 >> v27) + 2 * v25 * v26 + 2;
      v32 = 2 * v25;
      do
      {
        if (v29 >= 1)
        {
          v33 = 0;
          v34 = (_WORD *)v31;
          do
          {
            *(v34 - 1) = *(unsigned __int16 *)(v18 + v33) << v6;
            *v34 = *(unsigned __int16 *)(v19 + v33) << v6;
            v34 += 2;
            v33 += 2;
          }
          while (2 * v29 != v33);
        }
        ++v24;
        v19 += v30;
        v18 += v30;
        v31 += v32;
      }
      while (v24 != v23);
    }
  }
  return 0;
}

uint64_t sub_218BABE48(uint64_t a1, CVPixelBufferRef pixelBuffer)
{
  uint64_t v4;
  uint64_t v5;
  char *BaseAddressOfPlane;
  uint64_t v7;
  size_t BytesPerRowOfPlane;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  size_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int v28;

  v4 = *(unsigned int *)(a1 + 60);
  v5 = *(int *)(a1 + 56);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  v7 = *(_QWORD *)(a1 + 16);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
  if ((int)v4 >= 1)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 40);
    do
    {
      if ((int)v5 >= 1)
      {
        v11 = 0;
        v12 = (int *)&BaseAddressOfPlane[BytesPerRowOfPlane * v9];
        do
        {
          *v12++ = *(unsigned __int16 *)(v7 + 2 * v11) | (*(unsigned __int16 *)(v7 + 2 * v11 + 2) << 10) | (*(unsigned __int16 *)(v7 + 2 * v11 + 4) << 20);
          v11 += 3;
        }
        while (v11 < v5);
      }
      ++v9;
      v7 += v10;
    }
    while (v9 != v4);
  }
  v13 = *(_DWORD *)(a1 + 64);
  if (v13)
  {
    v14 = *(_QWORD *)(a1 + 24);
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 48);
    v17 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
    v18 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
    v19 = v13 == 1 ? v4 + 1 : v4;
    v20 = (v19 >> (v13 == 1));
    if ((int)v20 >= 1)
    {
      v21 = 0;
      if (v13 == 3)
        v22 = v5;
      else
        v22 = v5 + 1;
      v23 = v22 >> (v13 != 3);
      v24 = 2 * (v16 >> 1);
      do
      {
        if ((int)v23 >= 1)
        {
          v25 = 0;
          v26 = 0;
          v27 = (int *)&v17[v18 * v21];
          do
          {
            v28 = *(unsigned __int16 *)(v15 + v25 + 2) | (*(unsigned __int16 *)(v14 + v25 + 4) << 10) | (*(unsigned __int16 *)(v15 + v25 + 4) << 20);
            *v27 = *(unsigned __int16 *)(v14 + v25) | (*(unsigned __int16 *)(v15 + v25) << 10) | (*(unsigned __int16 *)(v14 + v25 + 2) << 20);
            v27[1] = v28;
            v27 += 2;
            v26 += 3;
            v25 += 6;
          }
          while (v26 < v23);
        }
        ++v21;
        v14 += v24;
        v15 += v24;
      }
      while (v21 != v20);
    }
  }
  return 0;
}

const void **sub_218BABFD4(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_218BAC004(char *a1, uint64_t a2)
{
  int v4;
  int v5;

  if (*(_BYTE *)(a2 + 39))
    v4 = 1;
  else
    v4 = (*(_DWORD *)(a2 + 4) >> 1) & 1;
  if (*(_BYTE *)(a2 + 60))
    v5 = 2;
  else
    v5 = *(_DWORD *)(a2 + 4) & 2;
  if (*(_BYTE *)(a2 + 10))
  {
    if (v4)
      goto LABEL_9;
LABEL_15:
    bzero(a1 + 11972, 0x2EC4uLL);
    if (v5)
      goto LABEL_11;
    goto LABEL_10;
  }
  bzero(a1, 0x2EC4uLL);
  if (!v4)
    goto LABEL_15;
LABEL_9:
  if (!v5)
LABEL_10:
    bzero(a1 + 23944, 0x2EC4uLL);
LABEL_11:
  if (*(_BYTE *)(a2 + 10) || v5 | v4)
    (*(void (**)(uint64_t, char *, _QWORD))&a1[8 * ((*(_DWORD *)(a2 + 4) & 0x30000) == 0)
                                                       + 36720
                                                       + (*(_DWORD *)(a2 + 4) & 0x30)])(a2, a1, 0);
}

__n128 sub_218BAC0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  char v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __n128 result;
  int v25;
  int v26;
  int v27;
  int v28;

  v2 = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = 0x100A00001;
  v4 = (2 * (*(_DWORD *)(v3 + 36) & 1)) | 1;
  *(_DWORD *)(a1 + 4) = v4;
  v5 = v4 & 0xFFFFFFF3 | (4 * (*(_DWORD *)(v3 + 88) & 3));
  *(_DWORD *)(a1 + 4) = v5;
  v6 = v5 & 0xFFFFFFCF | (16 * (*(_DWORD *)(v3 + 92) & 3));
  *(_DWORD *)(a1 + 4) = v6;
  v7 = ((*(_BYTE *)(v3 + 176) << 6) + 0x80) & 0xC0 | v6;
  *(_DWORD *)(a1 + 4) = v7;
  v8 = v7 & 0xFFFFFCFF | ((*(_DWORD *)(v3 + 184) & 3) << 8);
  *(_DWORD *)(a1 + 4) = v8;
  v9 = v8 & 0xFFFFFBFF | ((*(_DWORD *)(v3 + 212) & 1) << 10);
  *(_DWORD *)(a1 + 4) = v9;
  v10 = v9 & 0xFFFFF7FF | ((*(_DWORD *)(v3 + 216) & 1) << 11);
  *(_DWORD *)(a1 + 4) = v10;
  v11 = v10 & 0xFFFFEFFF | ((*(_DWORD *)(*(_QWORD *)a2 + 24) == 0) << 12);
  *(_DWORD *)(a1 + 4) = v11;
  v12 = v11 & 0xFFFF1FFF | ((*(_DWORD *)(a2 + 68) & 7) << 13);
  *(_DWORD *)(a1 + 4) = v12;
  v13 = v12 & 0xFFFEFFFF | ((*(_DWORD *)(a2 + 64) < 3) << 16);
  *(_DWORD *)(a1 + 4) = v13;
  *(_DWORD *)(a1 + 4) = v13 & 0xFFFDFFFF | ((*(_DWORD *)(a2 + 64) < 2) << 17);
  v14 = *(_DWORD *)(v3 + 4);
  *(_WORD *)(a1 + 8) = *(_DWORD *)v3;
  *(_BYTE *)(a1 + 10) = v14;
  v15 = *(_DWORD *)(v3 + 44);
  *(_BYTE *)(a1 + 39) = *(_DWORD *)(v3 + 40);
  *(_BYTE *)(a1 + 60) = v15;
  v16 = (char *)(v3 + 9);
  do
  {
    v17 = a1 + v2;
    *(_BYTE *)(v17 + 11) = *(v16 - 1);
    v18 = *v16;
    v16 += 2;
    *(_BYTE *)(v17 + 25) = v18;
    ++v2;
  }
  while (v2 != 14);
  v19 = (_BYTE *)(a1 + 40);
  v20 = v3 + 69;
  v21 = -20;
  do
  {
    *v19 = *(_BYTE *)(v20 + v21 - 1);
    v19[10] = *(_BYTE *)(v20 + v21);
    v19[21] = *(_BYTE *)(v20 + v21 + 19);
    v19[31] = *(_BYTE *)(v20 + v21 + 20);
    ++v19;
    v21 += 2;
  }
  while (v21);
  v22 = *(_OWORD *)(v3 + 96);
  *(_QWORD *)(a1 + 97) = *(_QWORD *)(v3 + 112);
  *(_OWORD *)(a1 + 81) = v22;
  v23 = *(_OWORD *)(v3 + 120);
  *(_OWORD *)(a1 + 114) = *(_OWORD *)(v3 + 129);
  *(_OWORD *)(a1 + 105) = v23;
  result = *(__n128 *)(v3 + 148);
  *(_OWORD *)(a1 + 139) = *(_OWORD *)(v3 + 157);
  *(__n128 *)(a1 + 130) = result;
  v25 = *(_DWORD *)(v3 + 192);
  *(_BYTE *)(a1 + 155) = *(_DWORD *)(v3 + 188);
  v26 = *(_DWORD *)(v3 + 200);
  *(_BYTE *)(a1 + 156) = *(_DWORD *)(v3 + 196);
  v28 = *(_DWORD *)(v3 + 204);
  v27 = *(_DWORD *)(v3 + 208);
  *(_WORD *)(a1 + 158) = v28;
  *(_BYTE *)(a1 + 160) = v25;
  *(_BYTE *)(a1 + 161) = v26;
  *(_WORD *)(a1 + 162) = v27;
  return result;
}

uint64_t sub_218BAC284(uint64_t a1, int32x2_t *a2, __CVBuffer *a3, uint64_t a4)
{
  unsigned int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int32x2_t v11;
  int32x2_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  char *v27;
  int32x2_t v28;
  int v29;
  uint64_t v30;
  void (*v31)(_QWORD *, int32x2_t *, __CVBuffer *, uint64_t);
  uint64_t v32;
  _QWORD *v33;
  _BYTE v36[164];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v7 = (unsigned int *)a2[1];
  sub_218BAC0F0((uint64_t)v36, (uint64_t)a2);
  CVPixelBufferLockBaseAddress(a3, 0);
  sub_218BAC004((char *)a1, (uint64_t)v36);
  v8 = 0;
  v9 = (_QWORD *)(a1 + 36688);
  v10 = a1 + 35916;
  do
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(a1 + 36792))(v36, v10, v8++);
    v10 += 256;
  }
  while (v8 != 3);
  v11 = vadd_s32(a2[7], (int32x2_t)0x1F0000001FLL);
  v12 = vsra_n_s32((int32x2_t)0xF0000000FLL, v11, 5uLL);
  v13 = (int)(v12.i32[0] & 0xFFFFFFF0);
  *(_QWORD *)(a1 + 36712) = v13;
  v14 = (int)(v12.i32[1] & 0xFFFFFFF0) * (uint64_t)(int)v13;
  v16 = (char *)*v9;
  v15 = *(char **)(a1 + 36696);
  v17 = (uint64_t)&v15[-*v9] >> 2;
  if (v14 <= v17)
  {
    if (v14 >= v17)
      goto LABEL_21;
    v27 = &v16[4 * v14];
    goto LABEL_20;
  }
  v18 = v14 - v17;
  v19 = *(_QWORD *)(a1 + 36704);
  if (v14 - v17 <= (v19 - (uint64_t)v15) >> 2)
  {
    bzero(*(void **)(a1 + 36696), 4 * v18);
    v27 = &v15[4 * v18];
LABEL_20:
    *(_QWORD *)(a1 + 36696) = v27;
    goto LABEL_21;
  }
  if (v14 >> 62)
    sub_218BAC4EC();
  v20 = v19 - (_QWORD)v16;
  if (v20 >> 1 > v14)
    v14 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v14;
  if (v21 >> 62)
    sub_218BAC4F8();
  v22 = (char *)operator new(4 * v21);
  v23 = &v22[4 * v17];
  v24 = &v22[4 * v21];
  bzero(v23, 4 * v18);
  v25 = &v23[4 * v18];
  if (v15 != v16)
  {
    do
    {
      v26 = *((_DWORD *)v15 - 1);
      v15 -= 4;
      *((_DWORD *)v23 - 1) = v26;
      v23 -= 4;
    }
    while (v15 != v16);
    v15 = (char *)*v9;
  }
  *v9 = v23;
  *(_QWORD *)(a1 + 36696) = v25;
  *(_QWORD *)(a1 + 36704) = v24;
  if (v15)
    operator delete(v15);
LABEL_21:
  v28 = vshr_n_s32(v11, 5uLL);
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 36800))(*v9, *(_QWORD *)(a1 + 36712), v28.u32[0], v28.u32[1], *v7);
  v29 = (a2[8].i32[1] - 8) >> 1;
  if (v29 >= 2)
    v29 = 2;
  v30 = a1 + 16 * (v29 & ~(v29 >> 31)) + 36808;
  v31 = *(void (**)(_QWORD *, int32x2_t *, __CVBuffer *, uint64_t))v30;
  v32 = *(_QWORD *)(v30 + 8);
  v33 = (_QWORD *)(a1 + (v32 >> 1));
  if ((v32 & 1) != 0)
    v31 = *(void (**)(_QWORD *, int32x2_t *, __CVBuffer *, uint64_t))(*v33 + v31);
  v31(v33, a2, a3, a4);
  return CVPixelBufferUnlockBaseAddress(a3, 0);
}

void sub_218BAC4EC()
{
  sub_218BAC520();
}

void sub_218BAC4F8()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void sub_218BAC520()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_218BAC568(exception);
  __cxa_throw(exception, (struct type_info *)off_24D9B0978, MEMORY[0x24BEDAAF0]);
}

void sub_218BAC554(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_218BAC568(std::logic_error *a1)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, "vector");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

uint64_t sub_218BAC594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  __int128 *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  uint64_t v22;
  __int16 *v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  _WORD *v26;
  __int16 *v27;
  uint64_t v28;
  __int16 v29;
  uint64_t result;
  unsigned int v31;

  v3 = 0;
  v4 = *(_DWORD *)(a1 + 4);
  v5 = (v4 >> 17) & 1;
  v6 = (__int128 *)(a2 + 1494);
  do
  {
    v7 = (_OWORD *)(a3 + v3);
    v8 = *v6;
    v9 = v6[1];
    v10 = v6[3];
    v7[2] = v6[2];
    v7[3] = v10;
    *v7 = v8;
    v7[1] = v9;
    v11 = v6[4];
    v12 = v6[5];
    v13 = v6[7];
    v7[6] = v6[6];
    v7[7] = v13;
    v7[4] = v11;
    v7[5] = v12;
    v3 += 128;
    v6 = (__int128 *)((char *)v6 + 164);
  }
  while (v3 != 0x2000);
  v14 = 0;
  v15 = 1476;
  if (v5)
    v15 = 984;
  v17 = HIWORD(v4) & 1;
  v16 = v17 == 0;
  LODWORD(v18) = 0x40u >> v17;
  LODWORD(v19) = 0x40u >> v5;
  v20 = 18;
  if (!v16)
    v20 = 12;
  v21 = (_WORD *)(a3 + 0x2000);
  if (v18 <= 1)
    v18 = 1;
  else
    v18 = v18;
  if (v19 <= 1)
    v19 = 1;
  else
    v19 = v19;
  v22 = v15 + a2 + v20;
  v23 = (__int16 *)(v22 + 11972);
  v24 = (unsigned __int16 *)(v22 + 23944);
  do
  {
    v25 = v24;
    v26 = v21;
    v27 = v23;
    v28 = v18;
    do
    {
      v29 = *v27++;
      *v26 = v29;
      v31 = *v25++;
      result = v31;
      v26[1] = v31;
      v26 += 2;
      --v28;
    }
    while (v28);
    ++v14;
    v23 += 82;
    v21 += 128;
    v24 += 82;
  }
  while (v14 != v19);
  return result;
}

double sub_218BAC680(_BYTE *a1, _OWORD *a2, int a3)
{
  int v3;
  _BYTE *v4;
  _BYTE *v5;
  unsigned int v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64x2_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v16;
  int v17;
  uint64x2_t v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  int v22;
  int64x2_t v23;
  int32x2_t v24;
  double result;

  if (a1[10] >= 0xEu)
    v3 = 14;
  else
    v3 = a1[10];
  v4 = a1 + 11;
  v5 = a1 + 25;
  if (a3 && (a1[4] & 2) == 0)
  {
    if (a3 != 1)
    {
      if (a1[60] >= 0xAu)
        v3 = 10;
      else
        v3 = a1[60];
      if (a1[60])
      {
        v4 = a1 + 61;
        v5 = a1 + 71;
        if (v3)
          goto LABEL_13;
      }
LABEL_42:
      result = 0.0;
      a2[14] = 0u;
      a2[15] = 0u;
      a2[12] = 0u;
      a2[13] = 0u;
      a2[10] = 0u;
      a2[11] = 0u;
      a2[8] = 0u;
      a2[9] = 0u;
      a2[6] = 0u;
      a2[7] = 0u;
      a2[4] = 0u;
      a2[5] = 0u;
      a2[2] = 0u;
      a2[3] = 0u;
      *a2 = 0u;
      a2[1] = 0u;
      return result;
    }
    if (a1[39] >= 0xAu)
      v3 = 10;
    else
      v3 = a1[39];
    if (!a1[39])
      goto LABEL_42;
    v4 = a1 + 40;
    v5 = a1 + 50;
  }
  if (!v3)
    goto LABEL_42;
LABEL_13:
  v6 = *v4;
  if (*v4)
  {
    v7 = a2;
    v8 = *v4;
    do
    {
      *v7++ = *v5;
      --v8;
    }
    while (v8);
  }
  v9 = (v3 - 1);
  if (v3 < 2)
  {
    v13 = v6;
  }
  else
  {
    v10 = 0;
    v11 = vdupq_n_s64(2uLL);
    do
    {
      v12 = v10 + 1;
      v13 = v4[v10 + 1];
      LODWORD(v14) = 256 - v6;
      if ((int)(v13 - v6) < (int)(256 - v6))
        LODWORD(v14) = v13 - v6;
      if ((int)(v13 - v6) >= 1 && (_DWORD)v14 != 0)
      {
        v16 = v5[v10];
        v17 = (((int)v14 >> 1) + 0x10000) / (int)v14;
        if ((int)v14 <= 1)
          v14 = 1;
        else
          v14 = v14;
        v18 = (uint64x2_t)vdupq_n_s64(v14 - 1);
        v19 = ((_DWORD)v14 + 1) & 0xFFFFFFFE;
        v20 = (char *)a2 + v6 + 1;
        v21 = v17 * (v5[v12] - v16);
        v22 = 0x8000;
        v23 = (int64x2_t)xmmword_218BBBF10;
        do
        {
          v24 = vmovn_s64((int64x2_t)vcgeq_u64(v18, (uint64x2_t)v23));
          if ((v24.i8[0] & 1) != 0)
            *(v20 - 1) = v16 + BYTE2(v22);
          if ((v24.i8[4] & 1) != 0)
            *v20 = v16 + ((v21 + v22) >> 16);
          v23 = vaddq_s64(v23, v11);
          v20 += 2;
          v22 += 2 * v21;
          v19 -= 2;
        }
        while (v19);
      }
      v10 = v12;
      v6 = v13;
    }
    while (v12 != v9);
  }
  memset((char *)a2 + v13, v5[v9], 256 - v13);
  return result;
}

uint64_t sub_218BAC830(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a4 >= 1)
  {
    v5 = 0;
    v6 = -a2;
    v7 = 4 * a2;
    v8 = -4 * a2;
    do
    {
      if (a3 >= 1)
      {
        v9 = 0;
        v10 = (9472 * (_WORD)v5 - 19968) & 0xFF00 ^ a5 ^ (105 - 83 * v5);
        v11 = result + v8;
        do
        {
          *(_DWORD *)(result + v9) = 0;
          v10 = (v10 >> 1) & 0xFFFF7FFF | ((((v10 ^ (v10 >> 3) ^ (v10 >> 12)) ^ (v10 >> 1)) & 1) << 15);
          *(_BYTE *)(result + v9) = BYTE1(v10);
          if (v9)
          {
            v12 = result + v9;
            *(_BYTE *)(result + v9 + 1) = *(_BYTE *)(result + v9 - 4);
            if (v5)
            {
              *(_BYTE *)(v12 + 2) = *(_BYTE *)(v11 + v9);
              *(_BYTE *)(v12 + 3) = *(_BYTE *)(v11 + v9 - 4);
            }
          }
          else if (v5)
          {
            *(_BYTE *)(result + 2) = *(_BYTE *)(result + 4 * v6);
          }
          v9 += 4;
        }
        while (4 * a3 != v9);
      }
      result += v7;
      ++v5;
    }
    while (v5 != a4);
  }
  return result;
}

uint64_t sub_218BAC90C(uint64_t a1, uint64_t a2, CVPixelBufferRef pixelBuffer, uint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  char *BaseAddressOfPlane;
  uint64_t result;
  int *v13;
  int v14;
  char v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  char v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t j;
  unsigned __int8 *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  char v61;
  size_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  size_t v76;
  int v77;
  uint64_t v78;
  size_t BytesPerRowOfPlane;
  uint64_t v80;
  signed int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  char *v93;
  uint64_t v94;
  int *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int *v104[5];
  _BYTE v105[2];
  int v106;
  int v107;
  int v108;
  int v109;

  v7 = a2;
  v8 = *(int **)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 60);
  v65 = *(_DWORD *)(a2 + 56);
  v10 = *(_DWORD *)(a2 + 64);
  v77 = v10 == 1;
  v83 = v10;
  v85 = v10 != 3;
  v108 = v85;
  v109 = v77;
  v80 = *(_QWORD *)(a2 + 40);
  v75 = *(_QWORD *)(a2 + 48);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
  v76 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  result = (uint64_t)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
  v13 = v8;
  if (v8[54])
  {
    v82 = 235;
    if (*(_DWORD *)(*(_QWORD *)v7 + 24))
      v14 = 240;
    else
      v14 = 235;
    v87 = v14;
    v96 = 16;
  }
  else
  {
    v96 = 0;
    v87 = 255;
    v82 = 255;
  }
  v15 = *(_DWORD *)(v7 + 68) - 8;
  v107 = -(128 << v15);
  v106 = (256 << v15) + ~(128 << v15);
  v16 = v8[10] > 0 || v8[9] != 0;
  v105[0] = v16;
  v17 = v8[11] > 0 || v8[9] != 0;
  v105[1] = v17;
  v104[0] = &v108;
  v104[1] = &v109;
  v104[2] = (int *)a1;
  v104[3] = &v107;
  v104[4] = &v106;
  if (v9 >= 1)
  {
    v67 = 0;
    v73 = 0;
    v66 = &BaseAddressOfPlane[BytesPerRowOfPlane * (a4 >> 32) + (int)a4];
    v18 = (v65 + 31) >> 5;
    v19 = (v9 + 31) >> 5;
    v68 = 0x20u >> v85;
    v62 = result + v76 * (SHIDWORD(a4) >> v77) + 2 * ((int)a4 >> v85);
    v63 = 0x20u >> v77;
    if (v18 <= 1)
      v20 = 1;
    else
      v20 = v18;
    v70 = v20;
    if (v19 <= 1)
      v21 = 1;
    else
      v21 = v19;
    v64 = v21;
    v95 = v8;
    v74 = v7;
    do
    {
      if (v65 >= 1)
      {
        v99 = 0;
        v22 = 0;
        v23 = *(_QWORD *)(v7 + 16);
        v69 = v23 + 32 * v73 * v80;
        v72 = 32 * v73;
        v97 = v23 + v67;
        v93 = v66;
        do
        {
          LODWORD(v24) = *(_DWORD *)(v7 + 60) - v72;
          v91 = v22;
          if ((_DWORD)v22 != 0 && v13[53] != 0)
            v25 = 2;
          else
            v25 = 0;
          if ((_DWORD)v73 != 0 && v13[53] != 0)
            v26 = 2;
          else
            v26 = 0;
          if ((int)v24 >= 1)
          {
            v27 = 0;
            if ((int)v24 >= 32)
              v24 = 32;
            else
              v24 = v24;
            v102 = v24;
            v28 = *(_DWORD *)(v74 + 56);
            v29 = v93;
            v101 = v28 - 32 * v22;
            v30 = *(unsigned int *)(*(_QWORD *)(a1 + 36688) + 4 * (*(_QWORD *)(a1 + 36712) * (int)v73 + (int)v22));
            v31 = v28 + v99;
            if (v31 >= 32)
              v31 = 32;
            if (v31 <= 1)
              v32 = 1;
            else
              v32 = v31;
            v33 = v97;
            do
            {
              if (v101 >= 1)
              {
                for (i = 0; i != v32; ++i)
                {
                  v35 = *(unsigned __int8 *)(v33 + i);
                  if (v13[1] >= 1)
                  {
                    v4 = v4 & 0xFFFFFFFF00000000 | v30;
                    result = sub_218BAE14C(v104, 0, v4, i, v27, v25, v26);
                    v13 = v95;
                    v36 = v95[22];
                    v37 = 1 << (v36 - 1);
                    if (!v36)
                      v37 = 0;
                    v38 = ((int)(v37 + result * *(unsigned __int8 *)(a1 + 35916 + v35)) >> v36) + v35;
                    v39 = v82;
                    if (v38 < v82)
                      v39 = v38;
                    if (v38 <= v96)
                      LOBYTE(v35) = v96;
                    else
                      LOBYTE(v35) = v39;
                  }
                  v29[i] = v35;
                }
              }
              ++v27;
              v29 += BytesPerRowOfPlane;
              v33 += v80;
            }
            while (v27 != v102);
          }
          v22 = v91 + 1;
          v99 -= 32;
          v93 += 32;
          v97 += 32;
          v7 = v74;
        }
        while (v91 + 1 != v70);
        if (v83)
        {
          v40 = 0;
          v100 = *(_QWORD *)(v74 + 24);
          v98 = *(_QWORD *)(v74 + 32);
          do
          {
            v41 = *(_DWORD *)(v7 + 60);
            v42 = *(_DWORD *)(v7 + 56) - 32 * v40;
            if (v42 >= 32)
              v42 = 32;
            v81 = v42;
            v43 = v41 - v72;
            if (v41 - v72 >= 32)
              v43 = 32;
            v71 = v40;
            v44 = 2u >> v85;
            if ((_DWORD)v40 == 0 || v13[53] == 0)
              v44 = 0;
            v92 = v44;
            v45 = 2u >> v77;
            if ((_DWORD)v73 == 0 || v13[53] == 0)
              v45 = 0;
            v90 = v45;
            v78 = ((v43 + v77) >> v77);
            if ((v43 + v77) >> v77 >= 1)
            {
              v94 = 0;
              v46 = v40 * v68;
              v103 = v62 + v76 * v73 * v63 + 2 * v40 * v68;
              v84 = v69 + 32 * v40;
              v86 = ((v81 + v85) >> v85);
              v89 = *(unsigned int *)(*(_QWORD *)(a1 + 36688) + 4 * (*(_QWORD *)(a1 + 36712) * (int)v73 + (int)v40));
              do
              {
                if ((int)v86 >= 1)
                {
                  for (j = 0; j != v86; ++j)
                  {
                    v48 = (unsigned __int8 *)(v84 + v80 * (int)((_DWORD)v94 << v77) + (int)((_DWORD)j << v85));
                    v49 = *v48;
                    v50 = 2 * j;
                    if (v83 != 3 && (int)(v50 | 1) < v81)
                      v49 = (v49 + v48[1] + 1) >> 1;
                    v51 = 0;
                    v52 = v94 * v76 + v50;
                    do
                    {
                      v53 = v51;
                      v54 = v100;
                      if (v51)
                        v54 = v98;
                      v55 = *(unsigned __int8 *)(v54 + v75 * v73 * v63 + v46 + v94 * v75 + j);
                      if (v105[v51])
                      {
                        v56 = v49;
                        if (!v13[9])
                        {
                          v57 = v13[v51 + 51] + ((int)(v13[v51 + 49] * v49 + v13[v51 + 47] * v55) >> 6);
                          if (v57 >= 255)
                            v57 = 255;
                          v56 = v57 & ~(v57 >> 31);
                        }
                        ++v51;
                        v4 = v4 & 0xFFFFFFFF00000000 | v89;
                        result = sub_218BAE14C(v104, (int)v53 + 1, v4, j, v94, v92, v90);
                        v13 = v95;
                        v58 = v95[22];
                        v59 = 1 << (v58 - 1);
                        if (!v58)
                          v59 = 0;
                        v60 = ((int)(v59 + result * *(unsigned __int8 *)(a1 + (v51 << 8) + v56 + 35916)) >> v58) + v55;
                        v61 = v87;
                        if (v60 < v87)
                          v61 = v60;
                        if (v60 <= v96)
                          LOBYTE(v55) = v96;
                        else
                          LOBYTE(v55) = v61;
                      }
                      else
                      {
                        ++v51;
                      }
                      *(_BYTE *)(v103 + v52 + v53) = v55;
                    }
                    while (!v53);
                  }
                }
                ++v94;
              }
              while (v94 != v78);
            }
            v40 = v71 + 1;
            v7 = v74;
          }
          while (v71 + 1 != v70);
        }
      }
      v66 += 32 * BytesPerRowOfPlane;
      v67 += 32 * v80;
      ++v73;
    }
    while (v73 != v64);
  }
  return result;
}

uint64_t sub_218BAD0B4(uint64_t a1, uint64_t a2, CVPixelBufferRef pixelBuffer, uint64_t a4)
{
  uint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  size_t BytesPerRowOfPlane;
  size_t v13;
  char *BaseAddressOfPlane;
  uint64_t result;
  _DWORD *v16;
  int v17;
  char v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  int v33;
  char *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t i;
  unsigned __int16 *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  __int16 v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  size_t v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  signed int v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  int *v118[5];
  _BYTE v119[2];
  int v120;
  int v121;
  int v122;
  int v123;

  v6 = a2;
  v7 = *(_DWORD **)(a2 + 8);
  v8 = *(_DWORD *)(a2 + 60);
  v76 = *(_DWORD *)(a2 + 56);
  v9 = *(_DWORD *)(a2 + 64);
  v87 = v9 == 1;
  v95 = v9;
  v97 = v9 != 3;
  v122 = v97;
  v123 = v87;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
  v13 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  result = (uint64_t)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
  v16 = v7;
  if (v7[54])
  {
    v94 = 940;
    if (*(_DWORD *)(*(_QWORD *)v6 + 24))
      v17 = 960;
    else
      v17 = 940;
    v99 = v17;
    v110 = 64;
  }
  else
  {
    v110 = 0;
    v99 = 1023;
    v94 = 1023;
  }
  v18 = *(_DWORD *)(v6 + 68) - 8;
  v121 = -(128 << v18);
  v120 = (256 << v18) + ~(128 << v18);
  v19 = (int)v7[10] > 0 || v7[9] != 0;
  v119[0] = v19;
  v20 = (int)v7[11] > 0 || v7[9] != 0;
  v119[1] = v20;
  v118[0] = &v122;
  v118[1] = &v123;
  v118[2] = (int *)a1;
  v118[3] = &v121;
  v118[4] = &v120;
  if (v8 >= 1)
  {
    v79 = 0;
    v86 = v13 >> 1;
    LODWORD(v21) = (v76 + 31) >> 5;
    v22 = (v8 + 31) >> 5;
    v80 = 0x20u >> v97;
    v71 = 0x20u >> v87;
    v23 = v10 >> 1;
    v85 = v11 >> 1;
    v24 = BytesPerRowOfPlane >> 1;
    if ((int)v21 <= 1)
      v21 = 1;
    else
      v21 = v21;
    v82 = v21;
    if (v22 <= 1)
      v25 = 1;
    else
      v25 = v22;
    v75 = v25;
    v77 = *(_QWORD *)(v6 + 16);
    v78 = &BaseAddressOfPlane[2 * (a4 >> 32) * v24 + 2 * (int)a4];
    v74 = v24 << 6;
    v92 = 2 * v24;
    v72 = v77;
    v73 = v23 << 6;
    v70 = result + 2 * ((v13 >> 1) * (SHIDWORD(a4) >> v87) + 2 * ((int)a4 >> v97));
    v88 = v10 >> 1;
    v91 = 2 * v23;
    v109 = v7;
    v90 = v6;
    do
    {
      if (v76 >= 1)
      {
        v113 = 0;
        v26 = 0;
        v27 = *(_DWORD *)(v6 + 60) - 32 * v79;
        v84 = v16[53];
        if ((_DWORD)v79 != 0 && v84 != 0)
          v28 = 2;
        else
          v28 = 0;
        v116 = v28;
        v101 = *(_DWORD *)(v6 + 60) - 32 * v79;
        if (v27 >= 32)
          v29 = 32;
        else
          v29 = v27;
        v107 = v29;
        v111 = v77;
        v105 = v78;
        do
        {
          v103 = v26;
          if (v84)
            v30 = (_DWORD)v26 == 0;
          else
            v30 = 1;
          if (v30)
            v31 = 0;
          else
            v31 = 2;
          if (v101 >= 1)
          {
            v32 = 0;
            v33 = *(_DWORD *)(v90 + 56);
            v34 = v105;
            v115 = v33 - 32 * v26;
            v35 = *(unsigned int *)(*(_QWORD *)(a1 + 36688) + 4 * (*(_QWORD *)(a1 + 36712) * (int)v79 + (int)v26));
            v36 = v33 + v113;
            if (v36 >= 32)
              v36 = 32;
            if (v36 <= 1)
              v37 = 1;
            else
              v37 = v36;
            v38 = v111;
            do
            {
              if (v115 >= 1)
              {
                v39 = 0;
                v40 = v16[1];
                do
                {
                  v41 = *(unsigned __int16 *)(v38 + 2 * v39);
                  if (v40 >= 1)
                  {
                    v13 = v13 & 0xFFFFFFFF00000000 | v35;
                    result = sub_218BAE14C(v118, 0, v13, v39, v32, v31, v116);
                    if ((v41 >> 2) == 255)
                      v42 = *(unsigned __int8 *)(a1 + 36171);
                    else
                      v42 = *(unsigned __int8 *)(a1 + 35916 + (v41 >> 2))
                          + ((int)((*(unsigned __int8 *)(a1 + 35916 + (v41 >> 2) + 1)
                                  - *(unsigned __int8 *)(a1 + 35916 + (v41 >> 2)))
                                 * (v41 & 3)
                                 + 2) >> 2);
                    v16 = v109;
                    v43 = v109[22];
                    v44 = 1 << (v43 - 1);
                    if (!v43)
                      v44 = 0;
                    v45 = ((v44 + v42 * (int)result) >> v43) + v41;
                    v46 = v94;
                    if (v45 < v94)
                      v46 = v45;
                    if (v45 <= v110)
                      LOWORD(v41) = v110;
                    else
                      LOWORD(v41) = v46;
                  }
                  *(_WORD *)&v34[2 * v39++] = (_WORD)v41 << 6;
                }
                while (v37 != v39);
              }
              ++v32;
              v34 += v92;
              v38 += v91;
            }
            while (v32 != v107);
          }
          v26 = v103 + 1;
          v113 -= 32;
          v105 += 64;
          v111 += 64;
        }
        while (v103 + 1 != v82);
        v6 = v90;
        if (v95)
        {
          v47 = 0;
          v114 = *(_QWORD *)(v90 + 24);
          v112 = *(_QWORD *)(v90 + 32);
          v81 = *(_DWORD *)(v90 + 56);
          v89 = (((int)v107 + v87) >> v87);
          v48 = 2u >> v87;
          if ((_DWORD)v79 == 0 || v84 == 0)
            v48 = 0;
          v102 = v48;
          do
          {
            v49 = v81 - 32 * v47;
            if (v49 >= 32)
              v49 = 32;
            v93 = v49;
            v83 = v47;
            if (v84)
              v50 = (_DWORD)v47 == 0;
            else
              v50 = 1;
            v51 = 2u >> v97;
            if (v50)
              v51 = 0;
            v106 = v51;
            if ((int)v89 >= 1)
            {
              v108 = 0;
              v52 = v47 * v80;
              v117 = v70 + 2 * v86 * v79 * v71 + 4 * v47 * v80;
              v96 = v72 + ((v79 * v88) << 6) + (v47 << 6);
              v98 = ((v93 + v97) >> v97);
              v104 = *(unsigned int *)(*(_QWORD *)(a1 + 36688) + 4 * (*(_QWORD *)(a1 + 36712) * (int)v79 + (int)v47));
              do
              {
                if ((int)v98 >= 1)
                {
                  for (i = 0; i != v98; ++i)
                  {
                    v54 = (unsigned __int16 *)(v96 + 2 * (v88 * (int)((_DWORD)v108 << v87) + (int)((_DWORD)i << v97)));
                    v55 = *v54;
                    v56 = 2 * i;
                    if (v95 != 3 && (int)(v56 | 1) < v93)
                      v55 = (v55 + v54[1] + 1) >> 1;
                    v57 = 0;
                    v58 = v108 * v86 + v56;
                    do
                    {
                      v59 = v57;
                      v60 = v114;
                      if (v57)
                        v60 = v112;
                      v61 = *(unsigned __int16 *)(v60 + 2 * v85 * v79 * v71 + 2 * v52 + 2 * (v108 * v85 + i));
                      if (v119[v57])
                      {
                        v62 = v55;
                        if (!v16[9])
                        {
                          v63 = ((int)(v16[v57 + 49] * v55 + v16[v57 + 47] * v61) >> 6) + 4 * v16[v57 + 51];
                          if (v63 >= 1023)
                            v63 = 1023;
                          v62 = v63 & ~(v63 >> 31);
                        }
                        ++v57;
                        v13 = v13 & 0xFFFFFFFF00000000 | v104;
                        result = sub_218BAE14C(v118, (int)v59 + 1, v13, i, v108, v106, v102);
                        v64 = (unint64_t)v62 >> 2;
                        if ((_DWORD)v64 == 255)
                          v65 = *(unsigned __int8 *)(a1 + (v57 << 8) + 36171);
                        else
                          v65 = *(unsigned __int8 *)(a1 + (v57 << 8) + 35916 + v64)
                              + ((int)((*(unsigned __int8 *)(a1 + (v57 << 8) + 35916 + v64 + 1)
                                      - *(unsigned __int8 *)(a1 + (v57 << 8) + 35916 + v64))
                                     * (v62 & 3)
                                     + 2) >> 2);
                        v16 = v109;
                        v66 = v109[22];
                        v67 = 1 << (v66 - 1);
                        if (!v66)
                          v67 = 0;
                        v68 = ((v67 + v65 * (int)result) >> v66) + v61;
                        v69 = v99;
                        if (v68 < v99)
                          v69 = v68;
                        if (v68 <= v110)
                          LOWORD(v61) = v110;
                        else
                          LOWORD(v61) = v69;
                      }
                      else
                      {
                        ++v57;
                      }
                      *(_WORD *)(v117 + 2 * (v58 + v59)) = (_WORD)v61 << 6;
                    }
                    while (!v59);
                  }
                }
                ++v108;
                v6 = v90;
              }
              while (v108 != v89);
            }
            v47 = v83 + 1;
          }
          while (v83 + 1 != v82);
        }
      }
      v78 += v74;
      ++v79;
      v77 += v73;
    }
    while (v79 != v75);
  }
  return result;
}

uint64_t sub_218BAD900(uint64_t a1, uint64_t a2, CVPixelBufferRef pixelBuffer, uint64_t a4)
{
  uint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  size_t BytesPerRowOfPlane;
  size_t v13;
  char *BaseAddressOfPlane;
  uint64_t result;
  _DWORD *v16;
  int v17;
  char v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  int v33;
  char *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t i;
  unsigned __int16 *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  __int16 v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  size_t v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  signed int v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  int *v118[5];
  _BYTE v119[2];
  int v120;
  int v121;
  int v122;
  int v123;

  v6 = a2;
  v7 = *(_DWORD **)(a2 + 8);
  v8 = *(_DWORD *)(a2 + 60);
  v76 = *(_DWORD *)(a2 + 56);
  v9 = *(_DWORD *)(a2 + 64);
  v87 = v9 == 1;
  v95 = v9;
  v97 = v9 != 3;
  v122 = v97;
  v123 = v87;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
  v13 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  result = (uint64_t)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
  v16 = v7;
  if (v7[54])
  {
    v94 = 3760;
    if (*(_DWORD *)(*(_QWORD *)v6 + 24))
      v17 = 3840;
    else
      v17 = 3760;
    v99 = v17;
    v110 = 256;
  }
  else
  {
    v110 = 0;
    v99 = 4095;
    v94 = 4095;
  }
  v18 = *(_DWORD *)(v6 + 68) - 8;
  v121 = -(128 << v18);
  v120 = (256 << v18) + ~(128 << v18);
  v19 = (int)v7[10] > 0 || v7[9] != 0;
  v119[0] = v19;
  v20 = (int)v7[11] > 0 || v7[9] != 0;
  v119[1] = v20;
  v118[0] = &v122;
  v118[1] = &v123;
  v118[2] = (int *)a1;
  v118[3] = &v121;
  v118[4] = &v120;
  if (v8 >= 1)
  {
    v79 = 0;
    v86 = v13 >> 1;
    LODWORD(v21) = (v76 + 31) >> 5;
    v22 = (v8 + 31) >> 5;
    v80 = 0x20u >> v97;
    v71 = 0x20u >> v87;
    v23 = v10 >> 1;
    v85 = v11 >> 1;
    v24 = BytesPerRowOfPlane >> 1;
    if ((int)v21 <= 1)
      v21 = 1;
    else
      v21 = v21;
    v82 = v21;
    if (v22 <= 1)
      v25 = 1;
    else
      v25 = v22;
    v75 = v25;
    v77 = *(_QWORD *)(v6 + 16);
    v78 = &BaseAddressOfPlane[2 * (a4 >> 32) * v24 + 2 * (int)a4];
    v74 = v24 << 6;
    v92 = 2 * v24;
    v72 = v77;
    v73 = v23 << 6;
    v70 = result + 2 * ((v13 >> 1) * (SHIDWORD(a4) >> v87) + 2 * ((int)a4 >> v97));
    v88 = v10 >> 1;
    v91 = 2 * v23;
    v109 = v7;
    v90 = v6;
    do
    {
      if (v76 >= 1)
      {
        v113 = 0;
        v26 = 0;
        v27 = *(_DWORD *)(v6 + 60) - 32 * v79;
        v84 = v16[53];
        if ((_DWORD)v79 != 0 && v84 != 0)
          v28 = 2;
        else
          v28 = 0;
        v116 = v28;
        v101 = *(_DWORD *)(v6 + 60) - 32 * v79;
        if (v27 >= 32)
          v29 = 32;
        else
          v29 = v27;
        v107 = v29;
        v111 = v77;
        v105 = v78;
        do
        {
          v103 = v26;
          if (v84)
            v30 = (_DWORD)v26 == 0;
          else
            v30 = 1;
          if (v30)
            v31 = 0;
          else
            v31 = 2;
          if (v101 >= 1)
          {
            v32 = 0;
            v33 = *(_DWORD *)(v90 + 56);
            v34 = v105;
            v115 = v33 - 32 * v26;
            v35 = *(unsigned int *)(*(_QWORD *)(a1 + 36688) + 4 * (*(_QWORD *)(a1 + 36712) * (int)v79 + (int)v26));
            v36 = v33 + v113;
            if (v36 >= 32)
              v36 = 32;
            if (v36 <= 1)
              v37 = 1;
            else
              v37 = v36;
            v38 = v111;
            do
            {
              if (v115 >= 1)
              {
                v39 = 0;
                v40 = v16[1];
                do
                {
                  v41 = *(unsigned __int16 *)(v38 + 2 * v39);
                  if (v40 >= 1)
                  {
                    v13 = v13 & 0xFFFFFFFF00000000 | v35;
                    result = sub_218BAE14C(v118, 0, v13, v39, v32, v31, v116);
                    if ((v41 >> 4) == 255)
                      v42 = *(unsigned __int8 *)(a1 + 36171);
                    else
                      v42 = *(unsigned __int8 *)(a1 + 35916 + (v41 >> 4))
                          + ((int)((*(unsigned __int8 *)(a1 + 35916 + (v41 >> 4) + 1)
                                  - *(unsigned __int8 *)(a1 + 35916 + (v41 >> 4)))
                                 * (v41 & 0xF)
                                 + 8) >> 4);
                    v16 = v109;
                    v43 = v109[22];
                    v44 = 1 << (v43 - 1);
                    if (!v43)
                      v44 = 0;
                    v45 = ((v44 + v42 * (int)result) >> v43) + v41;
                    v46 = v94;
                    if (v45 < v94)
                      v46 = v45;
                    if (v45 <= v110)
                      LOWORD(v41) = v110;
                    else
                      LOWORD(v41) = v46;
                  }
                  *(_WORD *)&v34[2 * v39++] = 16 * v41;
                }
                while (v37 != v39);
              }
              ++v32;
              v34 += v92;
              v38 += v91;
            }
            while (v32 != v107);
          }
          v26 = v103 + 1;
          v113 -= 32;
          v105 += 64;
          v111 += 64;
        }
        while (v103 + 1 != v82);
        v6 = v90;
        if (v95)
        {
          v47 = 0;
          v114 = *(_QWORD *)(v90 + 24);
          v112 = *(_QWORD *)(v90 + 32);
          v81 = *(_DWORD *)(v90 + 56);
          v89 = (((int)v107 + v87) >> v87);
          v48 = 2u >> v87;
          if ((_DWORD)v79 == 0 || v84 == 0)
            v48 = 0;
          v102 = v48;
          do
          {
            v49 = v81 - 32 * v47;
            if (v49 >= 32)
              v49 = 32;
            v93 = v49;
            v83 = v47;
            if (v84)
              v50 = (_DWORD)v47 == 0;
            else
              v50 = 1;
            v51 = 2u >> v97;
            if (v50)
              v51 = 0;
            v106 = v51;
            if ((int)v89 >= 1)
            {
              v108 = 0;
              v52 = v47 * v80;
              v117 = v70 + 2 * v86 * v79 * v71 + 4 * v47 * v80;
              v96 = v72 + ((v79 * v88) << 6) + (v47 << 6);
              v98 = ((v93 + v97) >> v97);
              v104 = *(unsigned int *)(*(_QWORD *)(a1 + 36688) + 4 * (*(_QWORD *)(a1 + 36712) * (int)v79 + (int)v47));
              do
              {
                if ((int)v98 >= 1)
                {
                  for (i = 0; i != v98; ++i)
                  {
                    v54 = (unsigned __int16 *)(v96 + 2 * (v88 * (int)((_DWORD)v108 << v87) + (int)((_DWORD)i << v97)));
                    v55 = *v54;
                    v56 = 2 * i;
                    if (v95 != 3 && (int)(v56 | 1) < v93)
                      v55 = (v55 + v54[1] + 1) >> 1;
                    v57 = 0;
                    v58 = v108 * v86 + v56;
                    do
                    {
                      v59 = v57;
                      v60 = v114;
                      if (v57)
                        v60 = v112;
                      v61 = *(unsigned __int16 *)(v60 + 2 * v85 * v79 * v71 + 2 * v52 + 2 * (v108 * v85 + i));
                      if (v119[v57])
                      {
                        v62 = v55;
                        if (!v16[9])
                        {
                          v63 = ((int)(v16[v57 + 49] * v55 + v16[v57 + 47] * v61) >> 6) + 16 * v16[v57 + 51];
                          if (v63 >= 4095)
                            v63 = 4095;
                          v62 = v63 & ~(v63 >> 31);
                        }
                        ++v57;
                        v13 = v13 & 0xFFFFFFFF00000000 | v104;
                        result = sub_218BAE14C(v118, (int)v59 + 1, v13, i, v108, v106, v102);
                        v64 = (unint64_t)v62 >> 4;
                        if ((_DWORD)v64 == 255)
                          v65 = *(unsigned __int8 *)(a1 + (v57 << 8) + 36171);
                        else
                          v65 = *(unsigned __int8 *)(a1 + (v57 << 8) + 35916 + v64)
                              + ((int)((*(unsigned __int8 *)(a1 + (v57 << 8) + 35916 + v64 + 1)
                                      - *(unsigned __int8 *)(a1 + (v57 << 8) + 35916 + v64))
                                     * (v62 & 0xF)
                                     + 8) >> 4);
                        v16 = v109;
                        v66 = v109[22];
                        v67 = 1 << (v66 - 1);
                        if (!v66)
                          v67 = 0;
                        v68 = ((v67 + v65 * (int)result) >> v66) + v61;
                        v69 = v99;
                        if (v68 < v99)
                          v69 = v68;
                        if (v68 <= v110)
                          LOWORD(v61) = v110;
                        else
                          LOWORD(v61) = v69;
                      }
                      else
                      {
                        ++v57;
                      }
                      *(_WORD *)(v117 + 2 * (v58 + v59)) = 16 * v61;
                    }
                    while (!v59);
                  }
                }
                ++v108;
                v6 = v90;
              }
              while (v108 != v89);
            }
            v47 = v83 + 1;
          }
          while (v83 + 1 != v82);
        }
      }
      v78 += v74;
      ++v79;
      v77 += v73;
    }
    while (v79 != v75);
  }
  return result;
}

uint64_t sub_218BAE14C(int **a1, int a2, unint64_t a3, int a4, int a5, int a6, int a7)
{
  unint64_t v7;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  BOOL v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  int *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;

  v7 = a3 >> 8;
  v8 = a1[2];
  if (a2)
  {
    v9 = **a1;
    v10 = *a1[1];
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v11 = 0x20u >> v9;
  v12 = (unsigned __int8 *)&unk_218BCF800 + 2 * v9;
  v13 = a3 >> 4;
  v14 = a3 & 0xF;
  v15 = v13 + 6;
  v16 = 2 * v13 + 9;
  if (v9)
    v16 = v15;
  v17 = v14 + 6;
  v18 = 2 * v14 + 9;
  if (!v10)
    v17 = v18;
  v20 = *((__int16 *)&v8[2993 * a2 + 41 * v17 + 41 * a5] + v16 + a4);
  if (a5 >= a7)
  {
    if (a4 < a6)
    {
      v58 = v11 + a4;
      v59 = BYTE1(a3) >> 4;
      v60 = BYTE1(a3) & 0xF;
      v61 = v59 + 6;
      v62 = 2 * v59 + 9;
      if (v9)
        v63 = v61;
      else
        v63 = v62;
      v64 = v60 + 6;
      v65 = 2 * v60 + 9;
      if (v10)
        v65 = v64;
      v66 = *((__int16 *)&v8[2993 * a2 + 41 * v65 + 41 * a5] + v58 + v63);
      v67 = v12[a4];
      if (!a4)
        ++v12;
      v68 = *v12 * (_DWORD)v20;
      v69 = *a1[3];
      v70 = (v68 + v67 * v66 + 16) >> 5;
      if (v70 >= *a1[4])
        v71 = *a1[4];
      else
        v71 = v70;
      if (v70 <= v69)
        return v69;
      else
        return v71;
    }
  }
  else
  {
    v21 = (unsigned __int8 *)&unk_218BCF800 + 2 * v10;
    v22 = (0x20u >> v10) + a5;
    v23 = (a3 >> 20) & 0xF;
    v24 = WORD1(a3) & 0xF;
    v25 = v23 + 6;
    v26 = 2 * v23 + 9;
    if (v9)
      v26 = v25;
    v27 = v24 + 6;
    v28 = 2 * v24 + 9;
    if (v10)
      v28 = v27;
    v29 = *((__int16 *)&v8[2993 * a2 + 41 * v28 + 41 * v22] + v26 + a4);
    if (a4 >= a6)
    {
      v53 = *a1[3];
      v54 = *a1[4];
    }
    else
    {
      v30 = v11 + a4;
      v31 = a3 >> 28;
      v32 = BYTE3(a3) & 0xF;
      v33 = v31 + 6;
      v34 = 2 * v31 + 9;
      v35 = v9 == 0;
      if (v9)
        v36 = v33;
      else
        v36 = v34;
      v37 = v32 + 6;
      v38 = 2 * v32 + 9;
      v39 = v7 >> 4;
      v40 = v39 + 6;
      v41 = 2 * v39 + 9;
      if (!v35)
        v41 = v40;
      v42 = v10 == 0;
      if (v10)
        v43 = v37;
      else
        v43 = v38;
      v44 = &v8[2993 * a2];
      v45 = *((__int16 *)&v44[41 * v43 + 41 * v22] + v36 + v30);
      v46 = v7 & 0xF;
      v47 = v46 + 6;
      v48 = 2 * v46 + 9;
      if (!v42)
        v48 = v47;
      v49 = *((__int16 *)&v44[41 * v48 + 41 * a5] + v41 + v30);
      v50 = v12[a4];
      if (a4)
        v51 = v12;
      else
        v51 = v12 + 1;
      v52 = *v51;
      v53 = *a1[3];
      v54 = *a1[4];
      v55 = (v52 * v29 + v50 * v45 + 16) >> 5;
      if (v55 >= v54)
        v29 = *a1[4];
      else
        v29 = v55;
      if (v55 <= v53)
        v29 = *a1[3];
      v56 = (v52 * (int)v20 + v50 * v49 + 16) >> 5;
      if (v56 >= v54)
        v57 = *a1[4];
      else
        v57 = v56;
      if (v56 <= v53)
        LODWORD(v20) = *a1[3];
      else
        LODWORD(v20) = v57;
    }
    v72 = v21[a5];
    if (!a5)
      ++v21;
    v73 = (int)(v20 * *v21 + v29 * v72 + 16) >> 5;
    if (v73 < v54)
      v54 = v73;
    if (v73 <= v53)
      return v53;
    else
      return v54;
  }
  return v20;
}

uint64_t sub_218BAE404(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  int v26;
  __int16 *v27;
  uint64_t v28;
  uint64_t v29;
  __int16 *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t k;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  BOOL v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _WORD *v64;
  _WORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t m;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  __int16 *v84;
  __int16 *v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  __int16 v91;
  __int16 v92;
  int v93;
  __int16 v94;
  __int16 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  int v122;
  int v123;
  int v125;
  int v126;

  v3 = *(unsigned int *)(result + 4);
  v4 = (unsigned __int16)v3 >> 13;
  v5 = *(unsigned __int8 *)(result + 39);
  v6 = ((v3 >> 8) & 3) - v4;
  v7 = *(unsigned __int8 *)(result + 60);
  v8 = v6 + 4;
  v108 = v3 & 0x10000;
  v9 = 44;
  if ((v3 & 0x10000) == 0)
    v9 = 82;
  v110 = v9;
  v10 = *(unsigned __int16 *)(result + 8);
  v107 = v3 & 0x20000;
  v11 = 38;
  if ((v3 & 0x20000) == 0)
    v11 = 73;
  v112 = v11;
  v123 = -(128 << v4);
  v122 = (256 << v4) + ~(128 << v4);
  v12 = v3 >> 6;
  v121 = (v3 >> 6) + 6;
  v13 = (v3 >> 4) & 3;
  v126 = *(unsigned __int8 *)(result + 10);
  if (*(_BYTE *)(result + 10))
  {
    v14 = 0;
    if (v6 == -4)
      v15 = 0;
    else
      v15 = 1 << (v6 + 3);
    v16 = a2 - 166 * ((v3 >> 4) & 3) + 498;
    v17 = 4;
    v18 = 3;
    v19 = *(unsigned __int16 *)(result + 8);
    do
    {
      if (v18 >= v14)
      {
        v20 = v14;
        v21 = a2 + 164 * v14;
        do
        {
          for (i = 0; i != 164; i += 2)
          {
            v19 = (v19 >> 1) & 0xFFFF7FFF | ((((v19 ^ (v19 >> 3) ^ (v19 >> 12)) ^ (v19 >> 1)) & 1) << 15);
            *(_WORD *)(v21 + i) = (v15 + word_218BCF84A[(unsigned __int16)v19 >> 5]) >> v8;
          }
          ++v20;
          v21 += 164;
        }
        while (v17 != (_DWORD)v20);
        v14 = v17;
      }
      v23 = v16;
      for (j = 3; j != 79; ++j)
      {
        LODWORD(v25) = 0;
        v26 = 0;
        v27 = (__int16 *)v23;
        v28 = -(int)v13;
        do
        {
          v29 = v28;
          if (v28 | -(int)v13)
          {
            v25 = (int)v25;
            v30 = v27;
            v31 = -(int)v13;
            do
            {
              v32 = *v30++;
              v26 += v32 * *(char *)(result + 81 + v25++);
              if (v31 >= v13)
                break;
              ++v31;
            }
            while (v31 | v29);
          }
          v28 = v29 + 1;
          v27 += 82;
        }
        while (v29);
        v33 = a2 + 164 * v18;
        v34 = ((v26 + (32 << v12)) >> v121) + *(__int16 *)(v33 + 2 * j);
        v35 = v122;
        if (v34 < v122)
          v35 = ((v26 + (32 << v12)) >> v121) + *(_WORD *)(v33 + 2 * j);
        if (v34 <= v123)
          v36 = v123;
        else
          v36 = v35;
        *(_WORD *)(v33 + 2 * j) = v36;
        v23 += 2;
      }
      ++v18;
      ++v17;
      v16 += 164;
    }
    while (v18 != 73);
    if (a3)
    {
      v37 = 0;
      v38 = a2 + 1494;
      v39 = a3;
      do
      {
        for (k = 0; k != 128; k += 2)
          *(_WORD *)(v39 + k) = *(_WORD *)(v38 + k);
        ++v37;
        v39 += 128;
        v38 += 164;
      }
      while (v37 != 64);
    }
  }
  if (v5)
  {
    v41 = 1;
    if (v7)
      goto LABEL_41;
  }
  else
  {
    v41 = (*(_DWORD *)(result + 4) >> 1) & 1;
    if (v7)
      goto LABEL_41;
  }
  if ((*(_DWORD *)(result + 4) & 2) == 0)
  {
    v42 = 0;
    goto LABEL_42;
  }
LABEL_41:
  v42 = 2;
LABEL_42:
  if (v42 | v41)
  {
    v43 = 0;
    v44 = v10 ^ 0xB524;
    v45 = v10 ^ 0x49D8;
    v46 = v3;
    v47 = v3 & 2;
    v48 = (v5 | v47) == 0;
    v49 = (v7 | v47) == 0;
    v50 = 1 << (v6 + 3);
    if (v8)
      v51 = v50;
    else
      v51 = 0;
    v52 = 41;
    if (!(_DWORD)v108)
      v52 = 79;
    v118 = v52;
    v117 = 32 << v12;
    v53 = 1 << (BYTE2(v108) + (v107 >> 17) - 1);
    if (!((v108 >> 16) + (v107 >> 17)))
      v53 = 0;
    v125 = v53;
    v54 = -(int)v13;
    v55 = (2 * (_DWORD)v13) | 1u;
    v111 = v107 >> 17;
    v56 = a2 - 166 * ((v46 >> 4) & 3);
    v57 = v56 + 24442;
    v58 = v56 + 12470;
    v59 = 4;
    v60 = 3;
    do
    {
      v114 = v59;
      if (v60 >= (int)v43)
      {
        v61 = (int)v43;
        v62 = a2 + 23944 + 164 * (int)v43;
        v63 = a2 + 11972 + 164 * (int)v43;
        do
        {
          v64 = (_WORD *)v63;
          v65 = (_WORD *)v62;
          v66 = v110;
          do
          {
            if (!v48)
            {
              v44 = (v44 >> 1) & 0xFFFF7FFF | ((((v44 ^ (v44 >> 3) ^ (v44 >> 12)) ^ (v44 >> 1)) & 1) << 15);
              *v64 = (v51 + word_218BCF84A[(unsigned __int16)v44 >> 5]) >> v8;
            }
            if (!v49)
            {
              v45 = (v45 >> 1) & 0xFFFF7FFF | ((((v45 ^ (v45 >> 3) ^ (v45 >> 12)) ^ (v45 >> 1)) & 1) << 15);
              *v65 = (v51 + word_218BCF84A[(unsigned __int16)v45 >> 5]) >> v8;
            }
            ++v65;
            ++v64;
            --v66;
          }
          while (v66);
          ++v61;
          v62 += 164;
          v63 += 164;
        }
        while ((_DWORD)v59 != (_DWORD)v61);
        v113 = v59;
      }
      else
      {
        v113 = v43;
      }
      v119 = a2 + 164 * ((((int)v60 - 3) << v111) + 3);
      v120 = v60;
      v115 = v58;
      v116 = v57;
      v67 = v58;
      v68 = v57;
      for (m = 3; m != v118; ++m)
      {
        v70 = 0;
        v71 = 0;
        v72 = 0;
        v73 = v67;
        v74 = v68;
        v75 = v54;
        do
        {
          v76 = 0;
          v77 = v75;
          v78 = v70;
          v79 = result + v70;
          v70 += v55;
          while (1)
          {
            v80 = *(char *)(v79 + v76 + 105);
            v81 = *(char *)(v79 + v76 + 130);
            if (!(((_DWORD)v54 + (_DWORD)v76) | v77))
              break;
            v72 += *(__int16 *)(v73 + 2 * v76) * v80;
            v71 += *(__int16 *)(v74 + 2 * v76++) * v81;
            if (v55 == v76)
              goto LABEL_74;
          }
          v70 = v78 + v76;
          if (v126)
          {
            v82 = 0;
            v83 = 0;
            v84 = (__int16 *)(v119 + 2 * ((((int)m - 3) << SBYTE2(v108)) + 3));
            do
            {
              v85 = v84;
              v86 = (v108 >> 16) + 1;
              do
              {
                v87 = *v85++;
                v83 += v87;
                --v86;
              }
              while (v86);
              ++v82;
              v84 += 82;
            }
            while (v82 != (v107 >> 17) + 1);
            v88 = (v83 + v125) >> (BYTE2(v108) + (v107 >> 17));
            v72 += v88 * v80;
            v71 += v88 * v81;
          }
LABEL_74:
          v75 = v77 + 1;
          v74 += 164;
          v73 += 164;
        }
        while (v77);
        v89 = a2 + 164 * v120 + 2 * m;
        v90 = ((v72 + v117) >> v121) + *(__int16 *)(v89 + 11972);
        if (v90 >= v122)
          v91 = v122;
        else
          v91 = ((v72 + v117) >> v121) + *(_WORD *)(v89 + 11972);
        if (v90 <= v123)
          v92 = v123;
        else
          v92 = v91;
        *(_WORD *)(v89 + 11972) = v92;
        v93 = ((v71 + v117) >> v121) + *(__int16 *)(v89 + 23944);
        if (v93 >= v122)
          v94 = v122;
        else
          v94 = ((v71 + v117) >> v121) + *(_WORD *)(v89 + 23944);
        if (v93 <= v123)
          v95 = v123;
        else
          v95 = v94;
        *(_WORD *)(v89 + 23944) = v95;
        v68 += 2;
        v67 += 2;
      }
      v60 = v120 + 1;
      v59 = (v114 + 1);
      v57 = v116 + 164;
      v58 = v115 + 164;
      v43 = v113;
    }
    while (v120 + 1 != v112);
    result = a3;
    if (a3)
    {
      v96 = 0;
      if ((_DWORD)v107)
        v97 = 984;
      else
        v97 = 1476;
      if ((_DWORD)v108)
        v98 = 12;
      else
        v98 = 18;
      v99 = 0x40u >> v111;
      if (0x40u >> SBYTE2(v108) <= 1)
        v100 = 1;
      else
        v100 = 0x40u >> SBYTE2(v108);
      if (v99 <= 1)
        v101 = 1;
      else
        v101 = v99;
      v102 = v97 + v98 + a2;
      v103 = v102 + 23944;
      v104 = v102 + 11972;
      do
      {
        v105 = 0;
        do
        {
          v106 = result + v105;
          *(_WORD *)(v106 + 0x2000) = *(_WORD *)(v104 + v105);
          *(_WORD *)(v106 + 0x4000) = *(_WORD *)(v103 + v105);
          v105 += 2;
        }
        while (2 * v100 != v105);
        ++v96;
        result += 128;
        v103 += 164;
        v104 += 164;
      }
      while (v96 != v101);
    }
  }
  return result;
}

void sub_218BAEB04(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11[2];
  __int128 v12;
  uint64_t *v13[2];

  v2 = (uint64_t **)(a1 + 4637);
  if (a1[3])
  {
    while (!sub_218BAEC9C(a1))
      ;
    if (v2[1] && *v2)
    {
      v3 = v2[2];
      v13[0] = v2[1];
      v13[1] = v3;
      if (v3)
      {
        v4 = (unint64_t *)(v3 + 1);
        do
          v5 = __ldxr(v4);
        while (__stxr(v5 + 1, v4));
      }
      sub_218BAF53C((uint64_t)a1, v13);
      if (v3)
      {
        v6 = (unint64_t *)(v3 + 1);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          (*(void (**)(uint64_t *))(*v3 + 16))(v3);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
        }
      }
    }
    v12 = 0uLL;
    sub_218BAF8E0((uint64_t)(v2 + 1), &v12);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (*((_QWORD *)&v12 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  while (*v2)
  {
    v11[0] = 0;
    v11[1] = 0;
    sub_218BAF53C((uint64_t)a1, v11);
  }
}

void sub_218BAEC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_218BAEC44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_218BAEC44(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_218BAEC9C(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  const void **v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  _BOOL4 v18;
  _QWORD *v19;
  _QWORD *v20;
  FILE **v21;
  uint64_t **v22;
  NSObject *v23;
  uint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  const void *v33;
  const void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v39;
  pthread_mutex_t *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  pthread_cond_t *v49;
  pthread_mutex_t **v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  int v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  __int128 v85;
  uint64_t *v86[2];
  uint64_t *v87[2];
  __int128 v88;
  _BYTE buf[22];
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)operator new(0x128uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24D9B0E60;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_QWORD *)&v88 = v2 + 24;
  *((_QWORD *)&v88 + 1) = v2;
  v3 = a1[3];
  if (!v3)
  {
    v6 = 4294967274;
LABEL_27:
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Error %d decoding frame\n", v6);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v6;
      _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error %d decoding frame", buf, 8u);
    }
    goto LABEL_60;
  }
  v4 = *(_DWORD *)(v3 + 63088);
  *(_DWORD *)(v3 + 63088) = 1;
  v5 = sub_218B9F6C0(v3);
  if ((v5 & 0x80000000) != 0)
  {
    v6 = v5;
LABEL_25:
    if ((_DWORD)v6 == -35)
      goto LABEL_26;
    goto LABEL_27;
  }
  v6 = *(unsigned int *)(v3 + 63152);
  if ((_DWORD)v6)
  {
    *(_DWORD *)(v3 + 63152) = 0;
    goto LABEL_9;
  }
  sub_218B9F774(v3);
  if (v7)
  {
LABEL_8:
    v6 = sub_218B9F894();
LABEL_9:
    if ((v6 & 0x80000000) == 0)
    {
      v8 = a1 + 4636;
      v9 = *(const void ***)(v88 + 104);
      v10 = *((char *)v9 + 30);
      if ((int)v10 >= *(unsigned __int8 *)(*(_QWORD *)v88 + 34))
        v10 = 0;
      v11 = *(_BYTE *)(*(_QWORD *)v88 + 10 * v10 + 41);
      v12 = 31 - __clz(v11 & 0xF);
      if ((v11 & 0xF) != 0)
        v13 = v12;
      else
        v13 = 0;
      v14 = *(unsigned __int8 *)(*(_QWORD *)(v88 + 8) + 250);
      v15 = *((unsigned __int8 *)v9 + 29);
      v16 = (char)v15;
      v18 = (v15 & 0x80u) == 0 && v14 == v15;
      v19 = a1 + 4635;
      v20 = (_QWORD *)*v8;
      if ((_QWORD *)*v8 == a1 + 4635)
        goto LABEL_54;
      while ((const void *)v20[2] != *v9)
      {
        v20 = (_QWORD *)v20[1];
        if (v20 == v19)
          goto LABEL_54;
      }
      if (v20 == v19)
      {
LABEL_54:
        if (v16 < 0 || v13 == v16)
        {
          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Got a picture for a VTFrame we've already emitted (%p)\n", *v9);
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            v34 = *v9;
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v34;
            _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Got a picture for a VTFrame we've already emitted (%p)", buf, 0xCu);
          }
          v6 = 4294954387;
          goto LABEL_60;
        }
      }
      else
      {
        v21 = (FILE **)MEMORY[0x24BDAC8D8];
        if (!a1[4637])
        {
LABEL_51:
          fwrite("Pulled frame but can't find the corresponding VTVideoDecoderFrame\n", 0x42uLL, 1uLL, *v21);
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Pulled frame but can't find the corresponding VTVideoDecoderFrame", buf, 2u);
          }
          v6 = 4294954385;
          goto LABEL_60;
        }
        v22 = (uint64_t **)(a1 + 4638);
        v23 = MEMORY[0x24BDACB70];
        while (*(const void **)(*v8 + 16) != *v9)
        {
          if (*v22)
          {
            v24 = (uint64_t *)a1[4639];
            v87[0] = *v22;
            v87[1] = v24;
            if (v24)
            {
              v25 = (unint64_t *)(v24 + 1);
              do
                v26 = __ldxr(v25);
              while (__stxr(v26 + 1, v25));
            }
            sub_218BAF53C((uint64_t)a1, v87);
            if (v24)
            {
              v27 = (unint64_t *)(v24 + 1);
              do
                v28 = __ldaxr(v27);
              while (__stlxr(v28 - 1, v27));
              if (!v28)
              {
                (*(void (**)(uint64_t *))(*v24 + 16))(v24);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v24);
              }
            }
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = 0;
            sub_218BAF8E0((uint64_t)(a1 + 4638), (__int128 *)buf);
            v29 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v30 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
          }
          else
          {
            fprintf(*v21, "Expecting frame %p, got %p\n", *(const void **)(*v8 + 16), *v9);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              v32 = *(_QWORD *)(*v8 + 16);
              v33 = *v9;
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)&buf[4] = v32;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v33;
              _os_log_impl(&dword_218B1F000, v23, OS_LOG_TYPE_ERROR, "Expecting frame %p, got %p", buf, 0x16u);
            }
            v86[0] = 0;
            v86[1] = 0;
            sub_218BAF53C((uint64_t)a1, v86);
          }
          if (!a1[4637])
            goto LABEL_51;
        }
        v68 = v13 == v14 || v18;
        if (v68 == 1)
        {
          v69 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
          v85 = v88;
          if (*((_QWORD *)&v88 + 1))
          {
            v70 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
          }
          sub_218BAF53C((uint64_t)a1, (uint64_t **)&v85);
          if (v69)
          {
            p_shared_owners = (unint64_t *)&v69->__shared_owners_;
            do
              v73 = __ldaxr(p_shared_owners);
            while (__stlxr(v73 - 1, p_shared_owners));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
        }
        else
        {
          sub_218BAF8E0((uint64_t)(a1 + 4638), &v88);
        }
      }
      v6 = 0;
      goto LABEL_60;
    }
    goto LABEL_25;
  }
  v6 = 4294967261;
  if (*(_DWORD *)(v3 + 8) < 2u || !v4)
    goto LABEL_60;
  v80 = 0;
  v39 = 0;
  v40 = (pthread_mutex_t *)(v3 + 896);
  v41 = (unsigned int *)(v3 + 1008);
  v42 = (unsigned int *)(v3 + 1016);
  while (1)
  {
    v82 = v39;
    v43 = *(_DWORD *)(v3 + 864);
    v44 = *(_QWORD *)v3;
    pthread_mutex_lock(v40);
    v45 = v43;
    v83 = v44;
    v46 = v44 + 5712 * v43;
    if (*(int *)(v46 + 3124) >= 1)
    {
      v47 = (int *)(v46 + 3124);
      v48 = v44 + 5712 * v45;
      v49 = (pthread_cond_t *)(v48 + 5424);
      v50 = (pthread_mutex_t **)(v48 + 5472);
      do
        pthread_cond_wait(v49, *v50);
      while (*v47 > 0);
    }
    v51 = v45;
    v81 = *(_QWORD *)(v3 + 856);
    v52 = v81 + 296 * v45;
    if (*(_QWORD *)(v52 + 16) || (v53 = atomic_load((unsigned int *)(v83 + 5712 * v51 + 5564))) != 0)
    {
      v54 = atomic_load((unsigned int *)(v3 + 1008));
      if (v54 + 1 >= *(_DWORD *)(v3 + 8))
      {
        atomic_store(0, v41);
      }
      else
      {
        do
          v55 = __ldaxr(v41);
        while (__stlxr(v55 + 1, v41));
      }
      v40 = (pthread_mutex_t *)(v3 + 896);
      while (1)
      {
        v56 = __ldaxr(v42);
        if (v56 != v54)
          break;
        if (!__stlxr(0xFFFFFFFF, v42))
          goto LABEL_83;
      }
      __clrex();
LABEL_83:
      v57 = *(_DWORD *)(v3 + 1012);
      v58 = *(_DWORD *)(v3 + 8);
      if (v57)
        v59 = v57 >= v58;
      else
        v59 = 1;
      if (!v59)
        *(_DWORD *)(v3 + 1012) = v57 - 1;
      v80 = 1;
      goto LABEL_89;
    }
    if (v80)
      break;
    v80 = 0;
    v58 = *(_DWORD *)(v3 + 8);
    v40 = (pthread_mutex_t *)(v3 + 896);
LABEL_89:
    v60 = *(_DWORD *)(v3 + 864);
    if (v60 + 1 == v58)
      v61 = 0;
    else
      v61 = v60 + 1;
    *(_DWORD *)(v3 + 864) = v61;
    pthread_mutex_unlock(v40);
    v62 = v83 + 5712 * v51;
    v6 = *(unsigned int *)(v62 + 5556);
    if ((_DWORD)v6)
    {
      *(_DWORD *)(v62 + 5556) = 0;
      sub_218B9F368((uint64_t *)(v3 + 63144));
      v74 = *(_OWORD *)(v52 + 72);
      v75 = *(_OWORD *)(v52 + 88);
      *(_OWORD *)(v3 + 63136) = *(_OWORD *)(v52 + 104);
      *(_OWORD *)(v3 + 63120) = v75;
      *(_OWORD *)(v3 + 63104) = v74;
      v76 = *(_QWORD *)(v3 + 63144);
      if (v76)
      {
        v77 = (unsigned int *)(v76 + 16);
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      sub_218BA2EB0(v52);
      *(_QWORD *)(v81 + 296 * v51 + 288) = 0;
      goto LABEL_9;
    }
    if (*(_QWORD *)(v52 + 16))
    {
      v63 = v81 + 296 * v51;
      v64 = (_QWORD *)(v63 + 288);
      if ((*(_DWORD *)(v63 + 272) || *(_DWORD *)(v3 + 63076)) && *(_DWORD *)(*(_QWORD *)(v63 + 288) + 4) != -2)
      {
        v84 = v51;
        v65 = (_QWORD *)(v63 + 272);
        sub_218BA2DE4((void *)(v3 + 248), (_QWORD *)v52);
        *(_QWORD *)(v3 + 520) = *v65;
        *(_QWORD *)(v3 + 536) = *v64;
        v66 = v81 + 296 * v84;
        *(_DWORD *)(v3 + 528) = *(_DWORD *)(v66 + 280);
        *(_DWORD *)(v3 + 63096) |= *(_DWORD *)(v66 + 280) & 3;
      }
      sub_218BA2EB0(v52);
      *v64 = 0;
      sub_218B9F774(v3);
      if (v67)
        goto LABEL_8;
    }
    v39 = v82 + 1;
    if ((v82 + 1) >= *(_DWORD *)(v3 + 8))
      goto LABEL_122;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v3 + 896));
LABEL_122:
  sub_218B9F774(v3);
  if (v79)
    goto LABEL_8;
LABEL_26:
  v6 = 4294967261;
LABEL_60:
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  return v6;
}

void sub_218BAF508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_218BAEC44((uint64_t)va);
  sub_218BAEC44((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_218BAF53C(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t *v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  int v10;
  uint64_t v11;
  CVPixelBufferRef v12;
  int v13;
  uint64_t v14;
  __CVPixelBufferPool *PixelBufferPool;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD block[7];
  std::__shared_weak_count *v28;
  uint64_t *v29;
  int v30;
  int v31;
  CVPixelBufferRef pixelBufferOut;
  uint64_t v33;
  int v34;
  _BYTE buf[22];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v33 = a1;
  v34 = 0;
  v2 = *a2;
  if (!*a2)
  {
    sub_218BAF944(&v33);
    return;
  }
  v4 = a1 + 37000;
  v5 = (uint64_t *)v2[13];
  v6 = *(const void **)(*(_QWORD *)(a1 + 37088) + 16);
  if (v6 != (const void *)*v5)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Expecting %p, got %p\n", v6, (const void *)*v5);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 16);
      v8 = (const void *)*v5;
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v8;
      _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Expecting %p, got %p", buf, 0x16u);
    }
    sub_218BAF944(&v33);
    return;
  }
  v10 = *((_DWORD *)v5 + 6);
  v11 = v2[33];
  pixelBufferOut = 0;
  v12 = *(CVPixelBufferRef *)a1;
  if (*(_QWORD *)a1)
  {
    if (!*(_BYTE *)(v11 + 24))
    {
      std::mutex::lock((std::mutex *)(a1 + 36936));
      if (*(_BYTE *)(v4 + 40) && sub_218BB69A8(a1 + 37000, v2)
        || (*(_OWORD *)v4 = *(_OWORD *)(v2 + 7),
            v14 = *v2,
            *(_BYTE *)(v4 + 16) = *(_BYTE *)(*v2 + 33) != 0,
            *(_BYTE *)(v4 + 17) = *(_BYTE *)(v14 + 421) != 0,
            (v13 = sub_218BB0150((int32x2_t *)a1)) == 0))
      {
        PixelBufferPool = (__CVPixelBufferPool *)VTDecoderSessionGetPixelBufferPool();
        v13 = CVPixelBufferPoolCreatePixelBuffer(0, PixelBufferPool, &pixelBufferOut);
      }
      else
      {
        fwrite("Failed to create buffer pools\n", 0x1EuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to create buffer pools", buf, 2u);
        }
      }
      std::mutex::unlock((std::mutex *)(a1 + 36936));
      v12 = pixelBufferOut;
      v2 = *a2;
      goto LABEL_19;
    }
    v12 = 0;
  }
  v13 = 0;
LABEL_19:
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = sub_218BAFA90;
  block[3] = &unk_24D9B1690;
  block[4] = a1;
  block[5] = v12;
  v16 = (std::__shared_weak_count *)a2[1];
  block[6] = v2;
  v28 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v29 = v5;
  v30 = v10 & 1;
  v31 = v13;
  if ((v10 & 1) != 0)
  {
    dispatch_group_wait(*(dispatch_group_t *)(v4 + 56), 0xFFFFFFFFFFFFFFFFLL);
    dispatch_group_async(*(dispatch_group_t *)(v4 + 56), *(dispatch_queue_t *)(v4 + 48), block);
  }
  else
  {
    dispatch_sync(*(dispatch_queue_t *)(v4 + 48), block);
  }
  v19 = *(uint64_t **)(v4 + 88);
  v20 = *v19;
  *(_QWORD *)(v20 + 8) = v19[1];
  *(_QWORD *)v19[1] = v20;
  --*(_QWORD *)(v4 + 96);
  operator delete(v19);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_218BAF8E0(a1 + 37104, (__int128 *)buf);
  v21 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v28;
  if (v28)
  {
    v25 = (unint64_t *)&v28->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_218BAF8C0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_218BAF8E0(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_218BAF944(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  uint64_t v5;
  uint8_t buf[4];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = *a1 + 37088;
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Failed to pull picture for frame %p, dropping\n", *(const void **)(*(_QWORD *)v2 + 16));
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v3 = *(_QWORD *)(*(_QWORD *)v2 + 16);
    *(_DWORD *)buf = 134217984;
    v7 = v3;
    _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to pull picture for frame %p, dropping", buf, 0xCu);
  }
  if (*(_QWORD *)(v1 + 8))
    VTTileDecoderSessionEmitDecodedTile();
  else
    VTDecoderSessionEmitDecodedFrame();
  v4 = *(_QWORD ***)v2;
  v5 = **(_QWORD **)v2;
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(*(_QWORD *)v2 + 8);
  *v4[1] = v5;
  --*(_QWORD *)(v2 + 8);
  operator delete(v4);
}

const void **sub_218BAFA90(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  CMVideoDimensions Dimensions;
  int32x2_t *v5;
  uint64_t v6;
  __CVBuffer *v7;
  unsigned int v8;
  __int32 v9;
  BOOL v10;
  FILE *v11;
  OSType v12;
  int32x2_t *v13;
  int32x2_t v14;
  CMVideoDimensions v15;
  uint64_t v16;
  int v17;
  OSType v18;
  size_t Width;
  size_t Height;
  uint64_t v21;
  VTSessionRef *v22;
  size_t v23;
  size_t v24;
  OSType PixelFormatType;
  uint64_t v26;
  __CVBuffer *v27;
  uint64_t v28;
  uint64_t v29;
  const __CFString *v30;
  CFTypeRef v31;
  CVPixelBufferRef v32;
  uint64_t v33;
  CVPixelBufferLockFlags v34;
  __int32 v35;
  __int32 v36;
  uint64_t v38;
  int32x2_t v39;
  CFTypeRef v40;
  CFTypeRef cf;
  CFDictionaryRef DictionaryRepresentation;
  size_t extraRowsOnBottom;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;
  uint8_t buf[8];
  uint64_t v48;
  size_t v49;
  _BYTE v50[10];
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  uint64_t v55;
  CGRect v56;

  v55 = *MEMORY[0x24BDAC8D0];
  v3 = a1[4];
  v2 = (void *)a1[5];
  v40 = v2;
  if (!*(_QWORD *)(v3 + 8))
  {
    v13 = (int32x2_t *)a1[6];
    v14 = v13[33];
    if (*(_BYTE *)(*(_QWORD *)&v14 + 24))
    {
      if (!*(_BYTE *)(*(_QWORD *)&v14 + 25)
        && !sub_218BAB6F8(v3 + 32, v13, **(CVPixelBufferRef **)&v14))
      {
        *(_BYTE *)(*(_QWORD *)&v14 + 25) = 1;
      }
      if (v40)
        CFRelease(v40);
      v32 = **(CVPixelBufferRef **)&v14;
      v40 = v32;
      if (v32)
        CFRetain(v32);
    }
    else if (v2)
    {
      sub_218BAB6F8(v3 + 32, v13, (CVPixelBufferRef)v2);
    }
    if (!*(_BYTE *)(*(_QWORD *)&v14 + 24))
      goto LABEL_45;
    if (*(_BYTE *)(*(_QWORD *)&v14 + 27))
    {
      v34 = *(_QWORD *)(*(_QWORD *)&v14 + 32);
      if (v34 == 1)
      {
LABEL_45:
        VTDecoderSessionEmitDecodedFrame();
        return sub_218B5AFAC(&v40);
      }
      CVPixelBufferUnlockBaseAddress(**(CVPixelBufferRef **)&v14, v34);
    }
    *(_QWORD *)(*(_QWORD *)&v14 + 32) = 1;
    CVPixelBufferLockBaseAddress(**(CVPixelBufferRef **)&v14, 1uLL);
    *(_BYTE *)(*(_QWORD *)&v14 + 27) = 1;
    goto LABEL_45;
  }
  Dimensions = CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(v3 + 16));
  v5 = (int32x2_t *)a1[6];
  v6 = a1[8];
  v7 = *(__CVBuffer **)(v6 + 8);
  v8 = v5[8].u32[0];
  v9 = v5[8].i32[1];
  v10 = v8 <= 3 && (v9 - 14) >= 0xFFFFFFFA;
  if (v10
    && ((v15 = Dimensions,
         v16 = *(_QWORD *)(v6 + 16),
         v17 = *(unsigned __int8 *)(v6 + 28),
         v39 = v5[33],
         v18 = CVPixelBufferGetPixelFormatType(v7),
         v18 == *(_DWORD *)&a800l800l010l01[24 * v8 + 8 * ((v9 - 8) >> 1)])
     || v18 == *(_DWORD *)&a800l800l010l01[24 * v8 + 4 + 8 * ((v9 - 8) >> 1)]))
  {
    Width = CVPixelBufferGetWidth(v7);
    Height = CVPixelBufferGetHeight(v7);
    extraColumnsOnRight = 0;
    extraColumnsOnLeft = 0;
    extraRowsOnBottom = 0;
    extraRowsOnTop = 0;
    CVPixelBufferGetExtendedPixels(v7, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
    if (extraColumnsOnLeft | extraRowsOnTop)
    {
      fwrite("Extended pixels top/left not supported\n", 0x27uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Extended pixels top/left not supported", buf, 2u);
      }
    }
    else
    {
      v38 = v3 + 32;
      v21 = v5[7].i32[0];
      if (v21 + (int)v16 <= extraColumnsOnRight + Width
        && (v33 = v5[7].i32[1], v33 + (v16 >> 32) <= extraRowsOnBottom + Height)
        && __PAIR64__(v33, v21) == v15)
      {
        if (*(_BYTE *)(*(_QWORD *)&v39 + 26))
          sub_218BAC284(v3 + 72, v5, v7, v16);
        else
          sub_218BABA2C(v38, (uint64_t)v5, v7, v16);
      }
      else if (v17)
      {
        v22 = (VTSessionRef *)(v3 + 56);
        if (*(_QWORD *)(v3 + 56) || !VTPixelTransferSessionCreate(0, (VTPixelTransferSessionRef *)(v3 + 56)))
        {
          v56.origin.x = (double)(int)v16;
          v56.origin.y = (double)SHIDWORD(v16);
          v56.size.width = (double)v15.width;
          v56.size.height = (double)v15.height;
          DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v56);
          VTSessionSetProperty(*v22, (CFStringRef)*MEMORY[0x24BDF9650], DictionaryRepresentation);
          VTSessionSetProperty(*v22, (CFStringRef)*MEMORY[0x24BDF9690], (CFTypeRef)*MEMORY[0x24BDBD268]);
          cf = 0;
          v23 = v5[7].i32[0];
          v24 = v5[7].i32[1];
          PixelFormatType = CVPixelBufferGetPixelFormatType(v7);
          CVPixelBufferCreate(0, v23, v24, PixelFormatType, 0, (CVPixelBufferRef *)&cf);
          v26 = 0;
          v27 = (__CVBuffer *)cf;
          v28 = *MEMORY[0x24BDC5510];
          *(_QWORD *)buf = *MEMORY[0x24BDC5490];
          v48 = v28;
          v29 = *MEMORY[0x24BDC5410];
          v49 = *MEMORY[0x24BDC5570];
          *(_QWORD *)v50 = v29;
          do
          {
            v30 = *(const __CFString **)&buf[v26];
            v31 = CVBufferCopyAttachment(v7, v30, 0);
            if (v31)
            {
              CVBufferSetAttachment(v27, v30, v31, kCVAttachmentMode_ShouldPropagate);
              CFRelease(v31);
            }
            v26 += 8;
          }
          while (v26 != 32);
          if (!sub_218BABA2C(v38, (uint64_t)v5, (CVPixelBufferRef)cf, 0))
            VTPixelTransferSessionTransferImage((VTPixelTransferSessionRef)*v22, (CVPixelBufferRef)cf, v7);
          sub_218B5AFAC(&cf);
          sub_218B205D0((const void **)&DictionaryRepresentation);
        }
      }
      else
      {
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Copying tile of size %dx%d to imagebuffer of size %zux%zu at offset %dx%d is outside bounds\n", v21, v5[7].i32[1], Width, Height, v16, HIDWORD(v16));
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          v35 = v5[7].i32[0];
          v36 = v5[7].i32[1];
          *(_DWORD *)buf = 67110400;
          *(_DWORD *)&buf[4] = v35;
          LOWORD(v48) = 1024;
          *(_DWORD *)((char *)&v48 + 2) = v36;
          HIWORD(v48) = 2048;
          v49 = Width;
          *(_WORD *)v50 = 2048;
          *(_QWORD *)&v50[2] = Height;
          v51 = 1024;
          v52 = v16;
          v53 = 1024;
          v54 = HIDWORD(v16);
          _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Copying tile of size %dx%d to imagebuffer of size %zux%zu at offset %dx%d is outside bounds", buf, 0x2Eu);
        }
      }
    }
  }
  else
  {
    v11 = (FILE *)*MEMORY[0x24BDAC8D8];
    v12 = CVPixelBufferGetPixelFormatType(v7);
    fprintf(v11, "Copy to pixelformat %d not supported\n", v12);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = CVPixelBufferGetPixelFormatType(v7);
      _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Copy to pixelformat %d not supported", buf, 8u);
    }
  }
  VTTileDecoderSessionEmitDecodedTile();
  return sub_218B5AFAC(&v40);
}

void sub_218BB00E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  const void *v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, const void *);
  v13 = va_arg(va1, _QWORD);
  sub_218B205D0((const void **)va1);
  sub_218B5AFAC((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_218BB0124(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_218BB0148(uint64_t a1)
{
  return sub_218BAEC44(a1 + 48);
}

uint64_t sub_218BB0150(int32x2_t *a1)
{
  int32x2_t *v2;
  CFTypeRef *v3;
  const void *v4;
  CFTypeRef *v5;
  CFTypeRef v6;
  __int32 v7;
  __int32 v8;
  char v9;
  const CFDictionaryKeyCallBacks *v10;
  const CFDictionaryValueCallBacks *v11;
  int v12;
  unsigned int v13;
  __int32 v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  int32x2_t v18;
  int8x8_t v19;
  int32x2_t v20;
  const void *v21;
  int v22;
  int v23;
  __CFDictionary *v24;
  CFNumberRef v25;
  __CFDictionary *v26;
  CFNumberRef v27;
  __CFDictionary *v28;
  CFNumberRef v29;
  __CFDictionary *v30;
  CFNumberRef v31;
  __CFArray *v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  CFTypeRef *v37;
  char v38;
  CFNumberRef v39;
  int v40;
  __CFArray *v41;
  CFNumberRef v42;
  int v43;
  int v44;
  __CFDictionary *v45;
  CFNumberRef v46;
  __CFArray *v47;
  CFNumberRef v48;
  uint64_t v49;
  __CFDictionary *v50;
  CFNumberRef v51;
  __CFDictionary *v52;
  CFNumberRef v53;
  __CFDictionary *v54;
  CFNumberRef v55;
  __CFDictionary *v56;
  CFNumberRef v57;
  __CFDictionary *v58;
  CFNumberRef v59;
  __CFDictionary *v60;
  CFNumberRef v61;
  __CFDictionary *v62;
  CFNumberRef v63;
  __CFDictionary *v64;
  CFNumberRef v65;
  __CFDictionary *v66;
  CFNumberRef v67;
  __CFDictionary *v68;
  CFNumberRef v69;
  int v70;
  __CFDictionary *v71;
  CFNumberRef v72;
  __CFDictionary *v73;
  CFNumberRef v74;
  const void *v75;
  __CFDictionary *v76;
  CFNumberRef v77;
  __CFDictionary *v78;
  CFNumberRef v79;
  __CFDictionary *v80;
  CFNumberRef v81;
  __CFDictionary *v82;
  CFNumberRef v83;
  __CFDictionary *v84;
  CFNumberRef v85;
  const __CFDictionary *v86;
  NSObject *v87;
  const char *v88;
  __CFDictionary *v89;
  CFNumberRef v90;
  __CFDictionary *v91;
  CFNumberRef v92;
  __CFDictionary *v93;
  CFNumberRef v94;
  __CFDictionary *v95;
  CFNumberRef v96;
  __CFDictionary *v97;
  CFNumberRef v98;
  __CFDictionary *v99;
  CFNumberRef v100;
  __CFDictionary *v101;
  CFNumberRef v102;
  const __CFDictionary *v103;
  __int32 v105;
  int v106;
  int v107;
  CFTypeRef *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *key;
  int32x2_t v114;
  int32x2_t v115;
  int32x2_t v116;
  const void *v117;
  CFMutableDictionaryRef v118;
  int v119;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef pixelBufferAttributes;
  CFMutableDictionaryRef theDict;
  _BYTE valuePtr[12];
  __int16 v124;
  CFMutableDictionaryRef v125;
  void *values[3];

  values[1] = *(void **)MEMORY[0x24BDAC8D0];
  v2 = a1 + 4625;
  v3 = (CFTypeRef *)&a1[4628];
  v5 = (CFTypeRef *)&a1[4629];
  v4 = (const void *)a1[4629];
  if (v4)
  {
    CFRelease(v4);
    *v5 = 0;
  }
  if (*v3)
  {
    CFRelease(*v3);
    v6 = *v5;
    *v3 = *v5;
    if (v6)
      CFRetain(v6);
  }
  else
  {
    *v3 = 0;
  }
  v2[5].i8[0] = 0;
  v7 = v2[1].i32[0];
  v8 = v2[1].i32[1];
  v106 = v7 == 1;
  v107 = v7 != 3;
  v9 = v8 != 8;
  v115 = *v2;
  v10 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
  v11 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
  theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  pixelBufferAttributes = CFDictionaryCreateMutable(0, 0, v10, v11);
  v12 = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v13 = v2[1].u32[0];
  v108 = v3;
  v105 = v7;
  if (v13 <= 3)
  {
    v14 = v2[1].i32[1];
    if ((v14 - 14) >= 0xFFFFFFFA)
      v12 = *(_DWORD *)&a800l800l010l01[24 * v13 + 8 * ((v14 - 8) >> 1) + 4 * v2[2].u8[0]];
  }
  *(_DWORD *)valuePtr = v12;
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  key = (void *)*MEMORY[0x24BDC56B8];
  if (v15)
  {
    CFDictionaryAddValue(theDict, key, v15);
    CFRelease(v15);
  }
  *(_DWORD *)valuePtr = 64;
  v16 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  v111 = (void *)*MEMORY[0x24BDC56C8];
  if (v16)
  {
    CFDictionaryAddValue(theDict, v111, v16);
    CFRelease(v16);
  }
  *(_DWORD *)valuePtr = 64;
  v17 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  v110 = (void *)*MEMORY[0x24BDC55D0];
  if (v17)
  {
    CFDictionaryAddValue(theDict, v110, v17);
    CFRelease(v17);
  }
  v18.i32[1] = 1;
  v19.i32[1] = 1;
  v20.i32[1] = v115.i32[1];
  v20.i32[0] = v115.i32[0] - 1;
  v18.i32[0] = 0x40u >> v9;
  v19.i32[0] = -(0x40u >> v9);
  v114 = vsub_s32((int32x2_t)(*(_QWORD *)&vadd_s32(v115, (int32x2_t)0x7F0000007FLL) & 0xFFFFFF80FFFFFF80), v115);
  v116 = vsub_s32((int32x2_t)vand_s8((int8x8_t)vadd_s32(v20, v18), v19), v115);
  if (v8 == 8 || *(_QWORD *)&a1[1])
  {
    v119 = 0;
    *(_QWORD *)valuePtr = CFNumberCreate(0, kCFNumberSInt32Type, &v119);
    values[0] = *(void **)valuePtr;
    v118 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x24BDBD690]);
    CFDictionaryAddValue(theDict, (const void *)*MEMORY[0x24BDC55F0], v118);
    v116 = vmax_s32(v116, v114);
    sub_218BB1244((const void **)&v118);
    sub_218BB1274((const void **)valuePtr);
  }
  if (*(_QWORD *)a1 || v2[2].i8[1])
  {
    if (qword_255007D00 != -1)
      dispatch_once(&qword_255007D00, &unk_24D9B0E90);
    if (byte_255007D08)
    {
      *(_QWORD *)valuePtr = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      v21 = (const void *)*MEMORY[0x24BDC5668];
      CFDictionaryAddValue(theDict, (const void *)*MEMORY[0x24BDC5668], *(const void **)valuePtr);
      CFDictionaryAddValue(pixelBufferAttributes, v21, *(const void **)valuePtr);
      CFDictionaryAddValue(Mutable, v21, *(const void **)valuePtr);
      sub_218BB12A4((const void **)valuePtr);
    }
  }
  if (v116.i32[0] <= 32)
    v22 = 32;
  else
    v22 = v116.i32[0];
  if (v2[2].i8[1])
    v23 = v22;
  else
    v23 = v116.i32[0];
  v24 = theDict;
  *(_DWORD *)valuePtr = v23;
  v25 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  v112 = (void *)*MEMORY[0x24BDC5628];
  if (v25)
  {
    CFDictionaryAddValue(v24, v112, v25);
    CFRelease(v25);
  }
  v26 = theDict;
  *(_DWORD *)valuePtr = v116.i32[1];
  v27 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  v117 = (const void *)*MEMORY[0x24BDC5610];
  if (v27)
  {
    CFDictionaryAddValue(v26, v117, v27);
    CFRelease(v27);
  }
  if (*a1)
  {
    v28 = theDict;
    *(_DWORD *)valuePtr = v2->i32[0];
    v29 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    v109 = (void *)*MEMORY[0x24BDC5708];
    if (v29)
    {
      CFDictionaryAddValue(v28, v109, v29);
      CFRelease(v29);
    }
    v30 = theDict;
    *(_DWORD *)valuePtr = v2->i32[1];
    v31 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v31)
    {
      CFDictionaryAddValue(v30, (const void *)*MEMORY[0x24BDC5650], v31);
      CFRelease(v31);
    }
    if (v2[1].i32[1] == 10)
    {
      v32 = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
      v33 = 0;
      *(_QWORD *)valuePtr = v32;
      v34 = v2[1].u32[0];
      v35 = v2[1].i32[1];
      if (v34 <= 3 && (v35 - 14) >= 0xFFFFFFFA)
        v33 = dword_218BD08EC[6 * v34 + 2 * ((v35 - 8) >> 1) + v2[2].u8[0]];
      v36 = 0;
      v37 = v5;
      if (v34 <= 3 && v35 >= 10)
        v36 = *(_DWORD *)&a800l800l010l01[16 * v34 + 96 + 8 * (v35 > 0xA) + 4 * v2[2].u8[0]];
      v38 = v2[2].i8[1];
      if (sub_218BAB6A4(v38, v33))
      {
        LODWORD(v118) = v33;
        v39 = CFNumberCreate(0, kCFNumberSInt32Type, &v118);
        if (v39)
        {
          CFArrayAppendValue(v32, v39);
          CFRelease(v39);
        }
        v38 = v2[2].i8[1];
      }
      v40 = sub_218BAB6A4(v38, v36);
      v5 = v37;
      if (v40)
      {
        v41 = *(__CFArray **)valuePtr;
        LODWORD(v118) = v36;
        v42 = CFNumberCreate(0, kCFNumberSInt32Type, &v118);
        if (v42)
        {
          CFArrayAppendValue(v41, v42);
          CFRelease(v42);
        }
        v43 = v2->i32[0] % 48;
        if (v43)
        {
          v44 = 48 - v43;
          v45 = theDict;
          if (48 - v43 <= v23)
            v44 = v23;
          LODWORD(v118) = v44;
          v46 = CFNumberCreate(0, kCFNumberSInt32Type, &v118);
          if (v46)
          {
            CFDictionarySetValue(v45, v112, v46);
            CFRelease(v46);
          }
        }
      }
      v47 = *(__CFArray **)valuePtr;
      LODWORD(v118) = v12;
      v48 = CFNumberCreate(0, kCFNumberSInt32Type, &v118);
      if (v48)
      {
        CFArrayAppendValue(v47, v48);
        CFRelease(v48);
      }
      CFDictionarySetValue(theDict, key, *(const void **)valuePtr);
      sub_218BB12D4((const void **)valuePtr);
    }
    v49 = VTDecoderSessionSetPixelBufferAttributes();
    if ((_DWORD)v49)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)valuePtr = 138412290;
        *(_QWORD *)&valuePtr[4] = theDict;
        _os_log_error_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "VTDecoderSessionSetPixelBufferAttributes failed for: %@", valuePtr, 0xCu);
      }
      goto LABEL_139;
    }
  }
  else
  {
    if (!*(_QWORD *)&a1[1])
    {
      fwrite("No active session!\n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)valuePtr = 0;
        _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "No active session!", valuePtr, 2u);
      }
      v49 = 4294954393;
      goto LABEL_139;
    }
    v50 = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v118 = v50;
    *(_DWORD *)valuePtr = 0xFFFF;
    v51 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v51)
    {
      CFDictionaryAddValue(v50, (const void *)*MEMORY[0x24BDF9920], v51);
      CFRelease(v51);
    }
    v52 = v118;
    *(_DWORD *)valuePtr = 0xFFFF;
    v53 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v53)
    {
      CFDictionaryAddValue(v52, (const void *)*MEMORY[0x24BDF9928], v53);
      CFRelease(v53);
    }
    v54 = v118;
    *(_DWORD *)valuePtr = 1;
    v55 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v55)
    {
      CFDictionaryAddValue(v54, (const void *)*MEMORY[0x24BDF9940], v55);
      CFRelease(v55);
    }
    v56 = v118;
    *(_DWORD *)valuePtr = 1;
    v57 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v57)
    {
      CFDictionaryAddValue(v56, (const void *)*MEMORY[0x24BDF9948], v57);
      CFRelease(v57);
    }
    v58 = v118;
    *(_DWORD *)valuePtr = 1;
    v59 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v59)
    {
      CFDictionaryAddValue(v58, (const void *)*MEMORY[0x24BDF9960], v59);
      CFRelease(v59);
    }
    v60 = v118;
    *(_DWORD *)valuePtr = 1;
    v61 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v61)
    {
      CFDictionaryAddValue(v60, (const void *)*MEMORY[0x24BDF9958], v61);
      CFRelease(v61);
    }
    v62 = v118;
    *(_DWORD *)valuePtr = 0x7FFFFFFF;
    v63 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v63)
    {
      CFDictionaryAddValue(v62, (const void *)*MEMORY[0x24BDF9918], v63);
      CFRelease(v63);
    }
    v64 = v118;
    *(_DWORD *)valuePtr = 0x7FFFFFFF;
    v65 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v65)
    {
      CFDictionaryAddValue(v64, (const void *)*MEMORY[0x24BDF9908], v65);
      CFRelease(v65);
    }
    v66 = v118;
    *(_QWORD *)valuePtr = 0x7FFFFFFFFFFFFFFFLL;
    v67 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
    if (v67)
    {
      CFDictionaryAddValue(v66, (const void *)*MEMORY[0x24BDF9910], v67);
      CFRelease(v67);
    }
    v68 = v118;
    *(_DWORD *)valuePtr = 64;
    v69 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v69)
    {
      CFDictionaryAddValue(v68, (const void *)*MEMORY[0x24BDF9950], v69);
      CFRelease(v69);
    }
    CFDictionaryAddValue(v118, (const void *)*MEMORY[0x24BDF9900], (const void *)*MEMORY[0x24BDBD268]);
    if (!v2[5].i8[1])
    {
      v49 = VTTileDecoderSessionSetTileDecodeRequirements();
      if ((_DWORD)v49)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)valuePtr = 138412546;
          *(_QWORD *)&valuePtr[4] = theDict;
          v124 = 2112;
          v125 = v118;
          _os_log_error_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "VTTileDecoderSessionSetTileDecodeRequirements failed for: (%@ %@)", valuePtr, 0x16u);
        }
        sub_218BB12A4((const void **)&v118);
        goto LABEL_139;
      }
    }
    sub_218BB12A4((const void **)&v118);
    v109 = (void *)*MEMORY[0x24BDC5708];
  }
  if (v8 == 8)
    v70 = 1278226488;
  else
    v70 = 1278226742;
  v71 = pixelBufferAttributes;
  *(_DWORD *)valuePtr = v2->i32[0];
  v72 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v72)
  {
    CFDictionaryAddValue(v71, v109, v72);
    CFRelease(v72);
  }
  v73 = pixelBufferAttributes;
  *(_DWORD *)valuePtr = v2->i32[1];
  v74 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  v75 = (const void *)*MEMORY[0x24BDC5650];
  if (v74)
  {
    CFDictionaryAddValue(v73, (const void *)*MEMORY[0x24BDC5650], v74);
    CFRelease(v74);
  }
  v76 = pixelBufferAttributes;
  *(_DWORD *)valuePtr = v70;
  v77 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v77)
  {
    CFDictionaryAddValue(v76, key, v77);
    CFRelease(v77);
  }
  v78 = pixelBufferAttributes;
  *(_DWORD *)valuePtr = 64;
  v79 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v79)
  {
    CFDictionaryAddValue(v78, v111, v79);
    CFRelease(v79);
  }
  v80 = pixelBufferAttributes;
  *(_DWORD *)valuePtr = 64;
  v81 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v81)
  {
    CFDictionaryAddValue(v80, v110, v81);
    CFRelease(v81);
  }
  v82 = pixelBufferAttributes;
  *(_DWORD *)valuePtr = v114.i32[0];
  v83 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v83)
  {
    CFDictionaryAddValue(v82, v112, v83);
    CFRelease(v83);
  }
  v84 = pixelBufferAttributes;
  *(_DWORD *)valuePtr = v114.i32[1];
  v85 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v85)
  {
    CFDictionaryAddValue(v84, v117, v85);
    CFRelease(v85);
  }
  v86 = pixelBufferAttributes;
  if (*v108)
  {
    CFRelease(*v108);
    *v108 = 0;
  }
  v49 = CVPixelBufferPoolCreate(0, 0, v86, (CVPixelBufferPoolRef *)v108);
  if ((_DWORD)v49)
  {
    fwrite("Failed to create luma DPB pool\n", 0x1FuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_139;
    *(_WORD *)valuePtr = 0;
    v87 = MEMORY[0x24BDACB70];
    v88 = "Failed to create luma DPB pool";
LABEL_110:
    _os_log_impl(&dword_218B1F000, v87, OS_LOG_TYPE_ERROR, v88, valuePtr, 2u);
    goto LABEL_139;
  }
  if (!v105)
    goto LABEL_134;
  v89 = Mutable;
  *(_DWORD *)valuePtr = (v2->i32[0] + v107) >> v107;
  v90 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v90)
  {
    CFDictionaryAddValue(v89, v109, v90);
    CFRelease(v90);
  }
  v91 = Mutable;
  *(_DWORD *)valuePtr = (v2->i32[1] + v106) >> v106;
  v92 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v92)
  {
    CFDictionaryAddValue(v91, v75, v92);
    CFRelease(v92);
  }
  v93 = Mutable;
  *(_DWORD *)valuePtr = v70;
  v94 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v94)
  {
    CFDictionaryAddValue(v93, key, v94);
    CFRelease(v94);
  }
  v95 = Mutable;
  *(_DWORD *)valuePtr = 64;
  v96 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v96)
  {
    CFDictionaryAddValue(v95, v111, v96);
    CFRelease(v96);
  }
  v97 = Mutable;
  *(_DWORD *)valuePtr = 64;
  v98 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v98)
  {
    CFDictionaryAddValue(v97, v110, v98);
    CFRelease(v98);
  }
  v99 = Mutable;
  *(_DWORD *)valuePtr = v114.i32[0] >> v107;
  v100 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v100)
  {
    CFDictionaryAddValue(v99, v112, v100);
    CFRelease(v100);
  }
  v101 = Mutable;
  *(_DWORD *)valuePtr = v114.i32[1] >> v106;
  v102 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v102)
  {
    CFDictionaryAddValue(v101, v117, v102);
    CFRelease(v102);
  }
  v103 = Mutable;
  if (*v5)
  {
    CFRelease(*v5);
    *v5 = 0;
  }
  v49 = CVPixelBufferPoolCreate(0, 0, v103, (CVPixelBufferPoolRef *)v5);
  if (!(_DWORD)v49)
  {
LABEL_134:
    v49 = 0;
    v2[5].i8[0] = 1;
    goto LABEL_139;
  }
  fwrite("Failed to create chroma DPB pool\n", 0x21uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)valuePtr = 0;
    v87 = MEMORY[0x24BDACB70];
    v88 = "Failed to create chroma DPB pool";
    goto LABEL_110;
  }
LABEL_139:
  sub_218BB12A4((const void **)&Mutable);
  sub_218BB12A4((const void **)&pixelBufferAttributes);
  sub_218BB12A4((const void **)&theDict);
  return v49;
}

void sub_218BB11AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,const void *a24,const void *a25,const void *a26)
{
  sub_218BB12A4(&a24);
  sub_218BB12A4(&a25);
  sub_218BB12A4(&a26);
  _Unwind_Resume(a1);
}

const void **sub_218BB1244(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_218BB1274(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_218BB12A4(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_218BB12D4(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_218BB1304()
{
  const CFDictionaryKeyCallBacks *v0;
  const CFDictionaryValueCallBacks *v1;
  CVReturn v2;
  BOOL v3;
  CVPixelBufferRef pixelBufferOut;
  CFDictionaryRef pixelBufferAttributes;
  void *value;

  v0 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
  v1 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
  value = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  pixelBufferAttributes = CFDictionaryCreateMutable(0, 0, v0, v1);
  CFDictionarySetValue(pixelBufferAttributes, (const void *)*MEMORY[0x24BDC5668], value);
  pixelBufferOut = 0;
  v2 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0x80uLL, 0x80uLL, 0x4C303038u, pixelBufferAttributes, &pixelBufferOut);
  if (pixelBufferOut)
  {
    CFRelease(pixelBufferOut);
    v3 = pixelBufferOut != 0;
  }
  else
  {
    v3 = 0;
  }
  if (v2)
    v3 = 0;
  byte_255007D08 = v3;
  sub_218BB12A4((const void **)&pixelBufferAttributes);
  return sub_218BB12A4((const void **)&value);
}

void sub_218BB13E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  sub_218BB12A4((const void **)va);
  sub_218BB12A4((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_218BB1410(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D9B0E60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_218BB1420(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D9B0E60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A20128);
}

double sub_218BB1450(uint64_t a1)
{
  return sub_218BA2EB0(a1 + 24);
}

uint64_t sub_218BB145C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  std::mutex *v5;
  uint64_t v6;
  uint64_t PixelBuffer;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  BOOL v12;
  __CVPixelBufferPool *PixelBufferPool;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  __CVPixelBufferPool *v20;
  CFTypeRef *v21;
  uint64_t i;
  __CVBuffer *v23;
  FILE *v24;
  size_t BytesPerRow;
  size_t v26;
  size_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  uint8_t buf[4];
  size_t v34;
  __int16 v35;
  size_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 37000;
  v5 = (std::mutex *)(a2 + 36936);
  std::mutex::lock((std::mutex *)(a2 + 36936));
  if (!*(_BYTE *)(v4 + 40) || !sub_218BB69A8(a2 + 37000, a1))
  {
    *(_OWORD *)v4 = *(_OWORD *)(a1 + 7);
    v6 = *a1;
    *(_BYTE *)(v4 + 16) = *(_BYTE *)(*a1 + 33) != 0;
    *(_BYTE *)(v4 + 17) = *(_BYTE *)(v6 + 421) != 0;
    PixelBuffer = sub_218BB0150((int32x2_t *)a2);
    if ((_DWORD)PixelBuffer)
    {
      fwrite("Failed to create buffer pools\n", 0x1EuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to create buffer pools", buf, 2u);
      }
      goto LABEL_43;
    }
  }
  v8 = *((_DWORD *)a1 + 16);
  v9 = operator new();
  v10 = v9;
  *(_QWORD *)(v9 + 48) = 0;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)v9 = 0u;
  v11 = (_DWORD *)a1[1];
  if (v11[1] || v11[10] || v11[11])
  {
    v12 = 1;
  }
  else if (v11[54])
  {
    v12 = v11[9] != 0;
  }
  else
  {
    v12 = 0;
  }
  *(_BYTE *)(v9 + 26) = v12;
  if (*(_QWORD *)a2 && *((_DWORD *)a1 + 17) == 8)
  {
    *(_BYTE *)(v9 + 24) = !v12;
    if (!v12)
    {
      PixelBufferPool = (__CVPixelBufferPool *)VTDecoderSessionGetPixelBufferPool();
      if (*(_QWORD *)v10)
      {
        CFRelease(*(CFTypeRef *)v10);
        *(_QWORD *)v10 = 0;
      }
      PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(0, PixelBufferPool, (CVPixelBufferRef *)v10);
      if ((_DWORD)PixelBuffer)
      {
        fwrite("Failed to create output CVPixelBuffer\n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          v14 = MEMORY[0x24BDACB70];
          v15 = "Failed to create output CVPixelBuffer";
LABEL_22:
          _os_log_impl(&dword_218B1F000, v14, OS_LOG_TYPE_ERROR, v15, buf, 2u);
          goto LABEL_23;
        }
        goto LABEL_23;
      }
      goto LABEL_24;
    }
  }
  else
  {
    *(_BYTE *)(v9 + 24) = 0;
  }
  PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(0, *(CVPixelBufferPoolRef *)(v4 + 24), (CVPixelBufferRef *)v9);
  if ((_DWORD)PixelBuffer)
  {
    fwrite("Failed to create luma backing\n", 0x1EuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v14 = MEMORY[0x24BDACB70];
      v15 = "Failed to create luma backing";
      goto LABEL_22;
    }
LABEL_23:
    v16 = sub_218BB6A18(v10);
    MEMORY[0x219A20128](v16, 0x1020C4061E6B045);
    goto LABEL_43;
  }
LABEL_24:
  if (v8)
  {
    v17 = 0;
    v18 = 1;
    while (1)
    {
      v19 = v17;
      v20 = *(__CVPixelBufferPool **)(v4 + 32);
      v21 = (CFTypeRef *)(v10 + 8 * v18);
      if (*v21)
      {
        CFRelease(*v21);
        *v21 = 0;
      }
      PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(0, v20, (CVPixelBufferRef *)v21);
      if ((_DWORD)PixelBuffer)
        break;
      v17 = 1;
      v18 = 2;
      if ((v19 & 1) != 0)
        goto LABEL_30;
    }
    fwrite("Failed to create chroma backing\n", 0x20uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_23;
    *(_WORD *)buf = 0;
    v14 = MEMORY[0x24BDACB70];
    v15 = "Failed to create chroma backing";
    goto LABEL_22;
  }
LABEL_30:
  for (i = 0; i != 3; ++i)
  {
    v23 = *(__CVBuffer **)(v10 + 8 * i);
    if (v23)
    {
      *(_QWORD *)(v10 + 8 * i + 32) = 0;
      CVPixelBufferLockBaseAddress(v23, 0);
      *(_BYTE *)(v10 + i + 27) = 1;
    }
  }
  a1[2] = (uint64_t)CVPixelBufferGetBaseAddressOfPlane(*(CVPixelBufferRef *)v10, 0);
  a1[5] = CVPixelBufferGetBytesPerRowOfPlane(*(CVPixelBufferRef *)v10, 0);
  if (v8)
  {
    a1[3] = (uint64_t)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(v10 + 8));
    a1[4] = (uint64_t)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(v10 + 16));
    a1[6] = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(v10 + 8));
    if (CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(v10 + 16)) != a1[6])
    {
      v24 = (FILE *)*MEMORY[0x24BDAC8D8];
      BytesPerRow = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(v10 + 8));
      v26 = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(v10 + 16));
      fprintf(v24, "Chroma backing buffer has differing strides between chroma planes - %zu %zu\n", BytesPerRow, v26);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v27 = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(v10 + 8));
        v28 = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(v10 + 16));
        *(_DWORD *)buf = 134218240;
        v34 = v27;
        v35 = 2048;
        v36 = v28;
        _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Chroma backing buffer has differing strides between chroma planes - %zu %zu", buf, 0x16u);
      }
      v29 = a1[6];
      v30 = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(v10 + 16));
      if (v30 >= v29)
        v31 = v29;
      else
        v31 = v30;
      a1[6] = v31;
    }
  }
  PixelBuffer = 0;
  a1[33] = v10;
LABEL_43:
  std::mutex::unlock(v5);
  return PixelBuffer;
}

void sub_218BB194C(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = sub_218BB6A18(v2);
  MEMORY[0x219A20128](v4, 0x1020C4061E6B045);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_218BB199C(_QWORD *a1)
{
  uint64_t result;

  result = a1[33];
  a1[33] = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  if (result)
  {
    sub_218BB6A18(result);
    JUMPOUT(0x219A20128);
  }
  return result;
}

const void **sub_218BB19E0()
{
  const __CFAllocator *v0;
  CFDictionaryRef v1;
  void *v2;
  uint8_t v4[8];
  CFDictionaryRef v5;
  void *values[2];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void *keys[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  *(_OWORD *)keys = 0u;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  *(_OWORD *)values = 0u;
  v0 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, 0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v5 = v1;
  if (v1)
  {
    v2 = (void *)*MEMORY[0x24BDF9430];
    keys[0] = *(void **)MEMORY[0x24BDF9450];
    keys[1] = v2;
    values[0] = v1;
    values[1] = v1;
    *(_QWORD *)&v13 = *MEMORY[0x24BDF9458];
    *(_QWORD *)&v7 = v1;
    qword_253D701B0 = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)values, 3, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  }
  else
  {
    fwrite("CFDictionaryCreate failed\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "CFDictionaryCreate failed", v4, 2u);
    }
  }
  return sub_218B205D0((const void **)&v5);
}

void sub_218BB1B54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_218B205D0((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_218BB1B68(uint64_t a1)
{
  uint64_t v2;
  const __CFBoolean *Extension;
  CFTypeID TypeID;
  const __CFData *v5;
  const __CFData *v6;
  const UInt8 *BytePtr;
  unint64_t Length;
  unint64_t v9;
  NSObject *v10;
  const char *v11;
  uint32_t v12;
  int v13;
  unsigned int v15;
  unsigned int v16;
  NSObject *v17;
  const char *v18;
  uint32_t v19;
  UInt8 v20;
  int v21;
  int v22;
  uint8_t buf[4];
  unint64_t v24;
  char v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 37000;
  *(_BYTE *)(a1 + 37016) = *(_QWORD *)a1 == 0;
  Extension = (const __CFBoolean *)CMFormatDescriptionGetExtension(*(CMFormatDescriptionRef *)(a1 + 16), (CFStringRef)*MEMORY[0x24BDC0B60]);
  if (Extension)
  {
    TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(Extension))
      *(_BYTE *)(v2 + 16) = CFBooleanGetValue(Extension) != 0;
  }
  *(CMVideoDimensions *)v2 = CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(a1 + 16));
  v5 = sub_218BB1F14(*(const opaqueCMFormatDescription **)(a1 + 16));
  if (!v5)
  {
    fwrite("No av1C found\n", 0xEuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      return 4294954387;
    *(_WORD *)buf = 0;
    v10 = MEMORY[0x24BDACB70];
    v11 = "No av1C found";
LABEL_13:
    v12 = 2;
    goto LABEL_14;
  }
  v6 = v5;
  BytePtr = CFDataGetBytePtr(v5);
  Length = CFDataGetLength(v6);
  v9 = Length;
  if (Length <= 3)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "av1C too small (%zu bytes)\n", Length);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v24 = v9;
      v10 = MEMORY[0x24BDACB70];
      v11 = "av1C too small (%zu bytes)";
      v12 = 12;
LABEL_14:
      _os_log_impl(&dword_218B1F000, v10, OS_LOG_TYPE_ERROR, v11, buf, v12);
    }
    return 4294954387;
  }
  v13 = *(char *)BytePtr;
  if ((v13 & 0x80000000) == 0)
  {
    fwrite("av1C marker invalid\n", 0x14uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      return 4294954387;
    *(_WORD *)buf = 0;
    v10 = MEMORY[0x24BDACB70];
    v11 = "av1C marker invalid";
    goto LABEL_13;
  }
  if ((v13 & 0x7F) != 1)
  {
    fwrite("Unsupported av1C version\n", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v17 = MEMORY[0x24BDACB70];
      v18 = "Unsupported av1C version";
      v19 = 2;
      goto LABEL_22;
    }
    return 4294954386;
  }
  v15 = BytePtr[1];
  if (v15 >= 0x60)
  {
    v16 = v15 >> 5;
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Unsupported profile %d\n", v15 >> 5);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v24) = v16;
      v17 = MEMORY[0x24BDACB70];
      v18 = "Unsupported profile %d";
      v19 = 8;
LABEL_22:
      _os_log_impl(&dword_218B1F000, v17, OS_LOG_TYPE_ERROR, v18, buf, v19);
      return 4294954386;
    }
    return 4294954386;
  }
  v20 = BytePtr[2];
  if ((v20 & 0x40) != 0)
    v21 = 10;
  else
    v21 = 8;
  if ((BytePtr[2] & 0x20) != 0)
    v21 = 12;
  *(_DWORD *)(v2 + 12) = v21;
  if ((v20 & 0x10) != 0)
  {
    *(_DWORD *)(v2 + 8) = 0;
  }
  else
  {
    if ((v20 & 4) != 0)
    {
      v22 = 1;
    }
    else if ((v20 & 8) != 0)
    {
      v22 = 2;
    }
    else
    {
      v22 = 3;
    }
    *(_DWORD *)(v2 + 8) = v22;
  }
  if (Length >= 5 && !sub_218B766C4(buf, (unsigned __int8 *)BytePtr + 4, Length - 4))
  {
    if (!Extension)
      *(_BYTE *)(v2 + 16) = v25 != 0;
    *(_BYTE *)(v2 + 17) = v26 != 0;
  }
  return sub_218BB0150((int32x2_t *)a1);
}

const __CFDictionary *sub_218BB1F14(const opaqueCMFormatDescription *a1)
{
  const __CFDictionary *result;
  const __CFDictionary *v2;
  CFTypeID TypeID;
  const __CFDictionary *v4;
  CFTypeID v5;
  CFTypeID v6;

  result = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x24BDC0B80]);
  if (result)
  {
    v2 = result;
    TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(v2))
    {
      result = (const __CFDictionary *)CFDictionaryGetValue(v2, CFSTR("av1C"));
      if (result)
      {
        v4 = result;
        v5 = CFArrayGetTypeID();
        if (v5 != CFGetTypeID(v4)
          || (result = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, 0), (v4 = result) != 0))
        {
          v6 = CFDataGetTypeID();
          if (v6 == CFGetTypeID(v4))
            return v4;
          else
            return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const void **sub_218BB1FC0(const void **a1, const void **a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

uint64_t sub_218BB2000(uint64_t a1, char a2)
{
  uint64_t v4;
  dispatch_group_t v5;
  BOOL v6;
  int v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, const char *, va_list);
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 37048;
  *(_QWORD *)(a1 + 37048) = dispatch_queue_create("com.apple.av1decoder.emit", 0);
  v5 = dispatch_group_create();
  *(_QWORD *)(v4 + 8) = v5;
  if (*(_QWORD *)v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    fwrite("Error allocating dispatch queue\n", 0x20uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v9) = 0;
      _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error allocating dispatch queue", (uint8_t *)&v9, 2u);
    }
    return 4294954392;
  }
  else
  {
    v16 = 0u;
    v12 = 0u;
    v11 = 0u;
    v9 = xmmword_218BBBF70;
    v13 = 0;
    v14 = sub_218BB90B0;
    v10 = 0x100000000;
    v15 = xmmword_218BBBF80;
    v8 = *(_DWORD *)(v4 + 16);
    if (!v8)
    {
      sub_218BAB590();
      v8 = dword_253D3D5A0;
      *(_DWORD *)(v4 + 16) = dword_253D3D5A0;
    }
    DWORD1(v9) = v8;
    HIDWORD(v9) = 0;
    if ((a2 & 1) == 0)
      DWORD2(v9) = 1;
    if (*(_BYTE *)(v4 + 21))
      LODWORD(v9) = 17;
    *((_QWORD *)&v11 + 1) = a1;
    *(_QWORD *)&v12 = sub_218BB145C;
    *((_QWORD *)&v12 + 1) = sub_218BB199C;
    return sub_218BBA1CC((uint64_t *)(a1 + 24), (unsigned int *)&v9);
  }
}

uint64_t sub_218BB219C(_QWORD *a1, opaqueCMSampleBuffer *a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v12;
  uint64_t DataPointer;
  size_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  NSObject *v28;
  const char *v29;
  uint8_t buf[16];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD *v35;
  CMBlockBufferRef blockBufferOut;
  char *dataPointerOut;
  size_t totalLengthOut;
  size_t lengthAtOffsetOut;
  uint8_t v40[4];
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 4635;
  v7 = *a3;
  v8 = operator new(0x18uLL);
  v9 = *v7;
  v8[1] = v6;
  v8[2] = v9;
  v10 = *v6;
  *v8 = *v6;
  *(_QWORD *)(v10 + 8) = v8;
  *v6 = (uint64_t)v8;
  ++v6[2];
  DataBuffer = CMSampleBufferGetDataBuffer(a2);
  if (DataBuffer)
  {
    v12 = DataBuffer;
    totalLengthOut = 0;
    lengthAtOffsetOut = 0;
    dataPointerOut = 0;
    DataPointer = CMBlockBufferGetDataPointer(DataBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
    if (!(_DWORD)DataPointer)
    {
      blockBufferOut = 0;
      if (lengthAtOffsetOut < totalLengthOut)
      {
        DataPointer = CMBlockBufferCreateContiguous(0, v12, 0, 0, 0, totalLengthOut, 2u, &blockBufferOut);
        if ((_DWORD)DataPointer)
          goto LABEL_42;
        DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
        if ((_DWORD)DataPointer)
          goto LABEL_42;
        if (lengthAtOffsetOut < totalLengthOut)
        {
          DataPointer = 4294954392;
LABEL_42:
          sub_218BB2718((const void **)&blockBufferOut);
          return DataPointer;
        }
        v12 = blockBufferOut;
      }
      v35 = 0;
      v33 = 0u;
      v34 = 0u;
      *(_OWORD *)buf = 0u;
      v32 = 0u;
      CFRetain(v12);
      v14 = totalLengthOut;
      DataPointer = 4294967274;
      if ((totalLengthOut & 0x8000000000000000) == 0)
      {
        v15 = dataPointerOut;
        if (dataPointerOut)
        {
          v16 = malloc_type_malloc(0x28uLL, 0x10C0040DB5B76A7uLL);
          if (v16)
          {
            *v16 = 0;
            v16[1] = v15;
            v16[2] = 0x100000001;
            v16[3] = sub_218BB26D0;
            v16[4] = v12;
            *(_QWORD *)buf = v15;
            *(_QWORD *)&buf[8] = v14;
            *(_QWORD *)&v33 = 0;
            v35 = 0;
            *(_QWORD *)&v32 = v16;
            *((_QWORD *)&v32 + 1) = 0x8000000000000000;
            *((_QWORD *)&v33 + 1) = -1;
            v34 = v14;
            v17 = *a3;
            v18 = malloc_type_malloc(0x28uLL, 0x10C0040DB5B76A7uLL);
            if (!v18)
            {
              *a3 = 0;
              fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Wrapping frame info struct failed with %d\n", -12);
              DataPointer = 4294967284;
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v40 = 67109120;
                v41 = -12;
                _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Wrapping frame info struct failed with %d", v40, 8u);
                DataPointer = 4294967284;
              }
              goto LABEL_41;
            }
            *v18 = 0;
            v18[1] = v17;
            v18[2] = 0x100000001;
            v18[3] = sub_218BB26D8;
            v18[4] = v17;
            *((_QWORD *)&v34 + 1) = v17;
            v35 = v18;
            *a3 = 0;
            v19 = *(_QWORD *)&buf[8];
            if (!*(_QWORD *)&buf[8])
            {
LABEL_36:
              DataPointer = 0;
              goto LABEL_41;
            }
            while (1)
            {
              v20 = a1[3];
              if (!v20)
                break;
              if (*(_QWORD *)buf)
              {
                if (v19 < 1)
                  break;
                *(_DWORD *)(v20 + 63088) = 0;
              }
              if (*(_QWORD *)(v20 + 176))
                goto LABEL_33;
              if ((_QWORD)v32)
              {
                v21 = (unsigned int *)(v32 + 16);
                do
                  v22 = __ldxr(v21);
                while (__stxr(v22 + 1, v21));
              }
              if (v35)
              {
                v23 = (unsigned int *)(v35 + 2);
                do
                  v24 = __ldxr(v23);
                while (__stxr(v24 + 1, v23));
              }
              v25 = v34;
              *(_OWORD *)(v20 + 208) = v33;
              *(_OWORD *)(v20 + 224) = v25;
              *(_QWORD *)(v20 + 240) = v35;
              v26 = v32;
              *(_OWORD *)(v20 + 176) = *(_OWORD *)buf;
              *(_OWORD *)(v20 + 192) = v26;
              DataPointer = sub_218B9F6C0(v20);
              if (!(_DWORD)DataPointer)
              {
                sub_218B70C54((uint64_t)buf);
                goto LABEL_33;
              }
LABEL_31:
              if ((DataPointer & 0x80000000) != 0 && (_DWORD)DataPointer != -35)
              {
                fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Sending data failed with %d\n", DataPointer);
                if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  goto LABEL_41;
                *(_DWORD *)v40 = 67109120;
                v41 = DataPointer;
                v28 = MEMORY[0x24BDACB70];
                v29 = "Sending data failed with %d";
                goto LABEL_40;
              }
LABEL_33:
              v27 = sub_218BAEC9C(a1);
              DataPointer = v27;
              if ((_DWORD)v27 != -35 && (_DWORD)v27)
              {
                fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Error %d pulling picture\n", v27);
                if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  goto LABEL_41;
                *(_DWORD *)v40 = 67109120;
                v41 = DataPointer;
                v28 = MEMORY[0x24BDACB70];
                v29 = "Error %d pulling picture";
LABEL_40:
                _os_log_impl(&dword_218B1F000, v28, OS_LOG_TYPE_ERROR, v29, v40, 8u);
                goto LABEL_41;
              }
              v19 = *(_QWORD *)&buf[8];
              if (!*(_QWORD *)&buf[8])
                goto LABEL_36;
            }
            DataPointer = 4294967274;
            goto LABEL_31;
          }
          DataPointer = 4294967284;
        }
      }
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Wrapping data failed with %d\n", DataPointer);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v40 = 67109120;
        v41 = DataPointer;
        v28 = MEMORY[0x24BDACB70];
        v29 = "Wrapping data failed with %d";
        goto LABEL_40;
      }
LABEL_41:
      sub_218B70C54((uint64_t)buf);
      goto LABEL_42;
    }
  }
  else
  {
    fwrite("No data buffer in sample buffer!\n\n", 0x22uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "No data buffer in sample buffer!\n", buf, 2u);
    }
    return 4294954394;
  }
  return DataPointer;
}

void sub_218BB269C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_218BB2718((const void **)va);
  _Unwind_Resume(a1);
}

void sub_218BB26D0(int a1, CFTypeRef cf)
{
  CFRelease(cf);
}

void sub_218BB26D8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_218B5AFAC((const void **)(a2 + 8));
    JUMPOUT(0x219A20128);
  }
}

const void **sub_218BB2718(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_218BB2748(uint64_t a1, CMAttachmentBearerRef target, _QWORD *a3)
{
  const __CFBoolean *v6;
  const __CFBoolean *v7;
  CFTypeID v8;
  const __CFNumber *v9;
  const __CFNumber *v10;
  CFTypeID v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  CFTypeID v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  CFTypeID v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t result;
  _BYTE *v22;
  int v23;
  unsigned int v24;
  int valuePtr;
  uint8_t buf[4];
  unsigned int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = (const __CFBoolean *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x24BDC0D00], 0);
  if (v6)
  {
    v7 = v6;
    v8 = CFGetTypeID(v6);
    if (v8 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue(v7))
      {
        sub_218BAEB04((_QWORD *)a1);
        sub_218B9F3C8(*(_QWORD *)(a1 + 24));
      }
    }
  }
  v24 = 0;
  valuePtr = -1;
  v23 = 0;
  v9 = (const __CFNumber *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x24BDDCF58], 0);
  if (v9)
  {
    v10 = v9;
    v11 = CFGetTypeID(v9);
    if (v11 == CFNumberGetTypeID())
      CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr);
  }
  v12 = (const __CFNumber *)CMGetAttachment(target, CFSTR("IncompleteSample"), 0);
  if (v12)
  {
    v13 = v12;
    v14 = CFGetTypeID(v12);
    if (v14 == CFNumberGetTypeID())
      CFNumberGetValue(v13, kCFNumberSInt32Type, &v23);
  }
  v15 = (const __CFNumber *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x24BDDCF60], 0);
  v16 = v15;
  if (v15)
  {
    v17 = CFGetTypeID(v15);
    if (v17 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v16, kCFNumberSInt32Type, &v24);
      LODWORD(v16) = v24;
    }
    else
    {
      LODWORD(v16) = 0;
    }
  }
  v18 = (_DWORD *)(a1 + 37072);
  if ((_DWORD)v16 == *(_DWORD *)(a1 + 37072))
    goto LABEL_19;
  sub_218BAEB04((_QWORD *)a1);
  LODWORD(v16) = v24;
  if (v24 <= 0x1F)
  {
    v19 = *(_QWORD *)(a1 + 24);
    v20 = (_DWORD *)(v19 + 63052);
    if (*(_DWORD *)(v19 + 63052) != v24)
    {
      sub_218B9F3C8(v19);
      *v20 = (_DWORD)v16;
      LODWORD(v16) = v24;
    }
LABEL_19:
    result = 0;
    *v18 = (_DWORD)v16;
    v22 = (_BYTE *)*a3;
    v22[28] = v23 != 0;
    v22[29] = valuePtr;
    v22[30] = (_BYTE)v16;
    return result;
  }
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Invalid operating point %d\n", v24);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v27 = v24;
    _os_log_impl(&dword_218B1F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Invalid operating point %d", buf, 8u);
  }
  return 4294967274;
}

uint64_t *sub_218BB29CC(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    sub_218B5AFAC((const void **)(v1 + 8));
    JUMPOUT(0x219A20128);
  }
  return result;
}

uint64_t sub_218BB2A18(uint64_t a1, uint64_t a2, __n128 *a3, double a4, double a5, double a6, __n128 a7, int16x4_t a8)
{
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned __int32 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int16x8_t v27;
  __n128 *v28;
  int16x8_t v29;
  int16x8_t *v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  int16x8_t *v36;
  __n128 *v37;
  int16x8_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int32x4_t v43;
  int v44;
  int v45;
  uint64_t v46;
  BOOL v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _WORD *v54;
  _WORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t *v67;
  uint64_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  uint64_t v75;
  int16x8_t *v76;
  uint64_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t *v84;
  uint64_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t *v92;

  v8 = *(_DWORD *)(a1 + 4);
  v9 = (unsigned __int16)v8 >> 13;
  v10 = *(unsigned __int8 *)(a1 + 39);
  v11 = *(unsigned __int8 *)(a1 + 60);
  v12 = ((v8 >> 8) & 3) - v9;
  v13 = v12 + 4;
  if ((v8 & 0x10000) != 0)
    v14 = 44;
  else
    v14 = 82;
  v15 = *(unsigned __int16 *)(a1 + 8);
  v16 = v8 & 0x20000;
  if ((v8 & 0x20000) != 0)
    v17 = 6;
  else
    v17 = 9;
  v18 = -(128 << v9);
  v19 = (256 << v9) + ~(128 << v9);
  v20 = *(unsigned __int8 *)(a1 + 10);
  v21 = *(char *)(a1 + 105);
  result = *(char *)(a1 + 130);
  if (v20)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    v25 = 1 << (v12 + 3);
    if (v12 == -4)
      v26 = 0;
    else
      v26 = 1 << (v12 + 3);
    v27 = vdupq_n_s16(v19);
    v28 = a3 + 1;
    v29 = vdupq_n_s16(v18);
    v30 = (int16x8_t *)(a2 + 1510);
    v31 = 10;
    v32 = v15;
    do
    {
      if (v23 + 9 >= (int)v24)
      {
        v24 = (int)v24;
        v33 = a2 + 164 * (int)v24;
        do
        {
          for (i = 0; i != 164; i += 2)
          {
            v32 = (v32 >> 1) & 0xFFFF7FFF | ((((v32 ^ (v32 >> 3) ^ (v32 >> 12)) ^ (v32 >> 1)) & 1) << 15);
            *(_WORD *)(v33 + i) = (v26 + word_218BCF84A[(unsigned __int16)v32 >> 5]) >> v13;
          }
          ++v24;
          v33 += 164;
        }
        while (v31 != (_DWORD)v24);
        LODWORD(v24) = v31;
      }
      v35 = -16;
      v36 = v30;
      v37 = v28;
      do
      {
        v38 = vmaxq_s16(vminq_s16(v36[-1], v27), v29);
        a7 = (__n128)vmaxq_s16(vminq_s16(*v36, v27), v29);
        v36[-1] = v38;
        *v36 = (int16x8_t)a7;
        if (a3)
        {
          v37[-1] = (__n128)v38;
          *v37 = a7;
        }
        v35 += 16;
        v37 += 2;
        v36 += 2;
      }
      while (v35 < 0x30);
      ++v23;
      ++v31;
      v28 += 8;
      v30 = (int16x8_t *)((char *)v30 + 164);
    }
    while (v23 != 64);
  }
  else
  {
    if (!(v10 | v11))
      return result;
    v25 = 1 << (v12 + 3);
    v27 = vdupq_n_s16(v19);
    v29 = vdupq_n_s16(v18);
  }
  v39 = 0;
  v40 = 0;
  v41 = v15 ^ 0xB524;
  v42 = v15 ^ 0x49D8;
  v43 = vdupq_n_s32(-6 - (v8 >> 6));
  a7.n128_u32[0] = v21;
  a8.i32[0] = result;
  v44 = v8 & 2;
  v45 = v11 | v44;
  LODWORD(v46) = 0x40u >> (v16 >> 17);
  result = (v10 | v44) == 0;
  v47 = v45 == 0;
  if (v13)
    v48 = v25;
  else
    v48 = 0;
  if (v46 <= 1)
    v46 = 1;
  else
    v46 = v46;
  v49 = v17;
  do
  {
    ++v49;
    v50 = v39 + v17;
    if (v39 + v17 >= v40)
    {
      v51 = v40;
      v52 = a2 + 23944 + 164 * v40;
      v53 = a2 + 11972 + 164 * v40;
      do
      {
        v54 = (_WORD *)v53;
        v55 = (_WORD *)v52;
        v56 = v14;
        do
        {
          if ((result & 1) == 0)
          {
            v41 = (v41 >> 1) & 0xFFFF7FFF | ((((v41 ^ (v41 >> 3) ^ (v41 >> 12)) ^ (v41 >> 1)) & 1) << 15);
            *v54 = (v48 + word_218BCF84A[(unsigned __int16)v41 >> 5]) >> v13;
          }
          if (!v47)
          {
            v42 = (v42 >> 1) & 0xFFFF7FFF | ((((v42 ^ (v42 >> 3) ^ (v42 >> 12)) ^ (v42 >> 1)) & 1) << 15);
            *v55 = (v48 + word_218BCF84A[(unsigned __int16)v42 >> 5]) >> v13;
          }
          ++v55;
          ++v54;
          --v56;
        }
        while (v56);
        ++v51;
        v52 += 164;
        v53 += 164;
      }
      while (v50 + 1 != v51);
      v40 = v49;
    }
    v57 = a2 + 164 * v50;
    v58 = (int)((_DWORD)v39 << (v16 >> 17));
    v59 = v58 + 9;
    v60 = v58 + 10;
    v61 = *(int16x8_t *)(v57 + 11984);
    v62 = *(int16x8_t *)(v57 + 23956);
    if (v20)
    {
      v63 = *(int16x8_t *)(a2 + 164 * v59 + 18);
      if (v16)
        v64 = vrshrq_n_s16(vpaddq_s16(vaddq_s16(*(int16x8_t *)(a2 + 164 * v60 + 18), v63), vaddq_s16(*(int16x8_t *)(a2 + 164 * v60 + 34), *(int16x8_t *)(a2 + 164 * v59 + 34))), 2uLL);
      else
        v64 = vrshrq_n_s16(vpaddq_s16(v63, *(int16x8_t *)(a2 + 164 * v59 + 34)), 1uLL);
      v61 = vqaddq_s16(v61, vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*(int16x4_t *)v64.i8, (int16x4_t)a7.n128_u64[0], 0), v43)), vrshlq_s32(vmull_high_lane_s16(v64, (int16x4_t)a7.n128_u64[0], 0), v43)));
      v62 = vqaddq_s16(v62, vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*(int16x4_t *)v64.i8, a8, 0), v43)), vrshlq_s32(vmull_high_lane_s16(v64, a8, 0), v43)));
    }
    v65 = vmaxq_s16(vminq_s16(v61, v27), v29);
    v66 = vmaxq_s16(vminq_s16(v62, v27), v29);
    *(int16x8_t *)(v57 + 11984) = v65;
    *(int16x8_t *)(v57 + 23956) = v66;
    if (a3)
    {
      v67 = (int16x8_t *)&a3[8 * v39];
      v67[512] = v65;
      v67[1024] = v66;
    }
    v68 = a2 + 164 * v50;
    v69 = *(int16x8_t *)(v68 + 12000);
    v70 = *(int16x8_t *)(v68 + 23972);
    if (v20)
    {
      v71 = *(int16x8_t *)(a2 + 164 * v59 + 50);
      if (v16)
        v72 = vrshrq_n_s16(vpaddq_s16(vaddq_s16(*(int16x8_t *)(a2 + 164 * v60 + 50), v71), vaddq_s16(*(int16x8_t *)(a2 + 164 * v60 + 66), *(int16x8_t *)(a2 + 164 * v59 + 66))), 2uLL);
      else
        v72 = vrshrq_n_s16(vpaddq_s16(v71, *(int16x8_t *)(a2 + 164 * v59 + 66)), 1uLL);
      v69 = vqaddq_s16(v69, vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*(int16x4_t *)v72.i8, (int16x4_t)a7.n128_u64[0], 0), v43)), vrshlq_s32(vmull_high_lane_s16(v72, (int16x4_t)a7.n128_u64[0], 0), v43)));
      v70 = vqaddq_s16(v70, vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*(int16x4_t *)v72.i8, a8, 0), v43)), vrshlq_s32(vmull_high_lane_s16(v72, a8, 0), v43)));
    }
    v73 = vmaxq_s16(vminq_s16(v69, v27), v29);
    v74 = vmaxq_s16(vminq_s16(v70, v27), v29);
    *(int16x8_t *)(v68 + 12000) = v73;
    *(int16x8_t *)(v68 + 23972) = v74;
    v75 = v39 << 7;
    if (a3)
    {
      v76 = (int16x8_t *)((char *)a3 + (v75 | 0x10));
      v76[512] = v73;
      v76[1024] = v74;
    }
    v77 = a2 + 164 * v50;
    v78 = *(int16x8_t *)(v77 + 12016);
    v79 = *(int16x8_t *)(v77 + 23988);
    if (v20)
    {
      v80 = *(int16x8_t *)(a2 + 164 * v59 + 82);
      if (v16)
        v81 = vrshrq_n_s16(vpaddq_s16(vaddq_s16(*(int16x8_t *)(a2 + 164 * v60 + 82), v80), vaddq_s16(*(int16x8_t *)(a2 + 164 * v60 + 98), *(int16x8_t *)(a2 + 164 * v59 + 98))), 2uLL);
      else
        v81 = vrshrq_n_s16(vpaddq_s16(v80, *(int16x8_t *)(a2 + 164 * v59 + 98)), 1uLL);
      v78 = vqaddq_s16(v78, vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*(int16x4_t *)v81.i8, (int16x4_t)a7.n128_u64[0], 0), v43)), vrshlq_s32(vmull_high_lane_s16(v81, (int16x4_t)a7.n128_u64[0], 0), v43)));
      v79 = vqaddq_s16(v79, vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*(int16x4_t *)v81.i8, a8, 0), v43)), vrshlq_s32(vmull_high_lane_s16(v81, a8, 0), v43)));
    }
    v82 = vmaxq_s16(vminq_s16(v78, v27), v29);
    v83 = vmaxq_s16(vminq_s16(v79, v27), v29);
    *(int16x8_t *)(v77 + 12016) = v82;
    *(int16x8_t *)(v77 + 23988) = v83;
    if (a3)
    {
      v84 = (int16x8_t *)((char *)a3 + (v75 | 0x20));
      v84[512] = v82;
      v84[1024] = v83;
    }
    v85 = a2 + 164 * v50;
    v86 = *(int16x8_t *)(v85 + 12032);
    v87 = *(int16x8_t *)(v85 + 24004);
    if (v20)
    {
      v88 = *(int16x8_t *)(a2 + 164 * v59 + 114);
      if (v16)
        v89 = vrshrq_n_s16(vpaddq_s16(vaddq_s16(*(int16x8_t *)(a2 + 164 * v60 + 114), v88), vaddq_s16(*(int16x8_t *)(a2 + 164 * v60 + 130), *(int16x8_t *)(a2 + 164 * v59 + 130))), 2uLL);
      else
        v89 = vrshrq_n_s16(vpaddq_s16(v88, *(int16x8_t *)(a2 + 164 * v59 + 130)), 1uLL);
      v86 = vqaddq_s16(v86, vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*(int16x4_t *)v89.i8, (int16x4_t)a7.n128_u64[0], 0), v43)), vrshlq_s32(vmull_high_lane_s16(v89, (int16x4_t)a7.n128_u64[0], 0), v43)));
      v87 = vqaddq_s16(v87, vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*(int16x4_t *)v89.i8, a8, 0), v43)), vrshlq_s32(vmull_high_lane_s16(v89, a8, 0), v43)));
    }
    v90 = vmaxq_s16(vminq_s16(v86, v27), v29);
    v91 = vmaxq_s16(vminq_s16(v87, v27), v29);
    *(int16x8_t *)(v85 + 12032) = v90;
    *(int16x8_t *)(v85 + 24004) = v91;
    if (a3)
    {
      v92 = (int16x8_t *)((char *)a3 + (v75 | 0x30));
      v92[512] = v90;
      v92[1024] = v91;
    }
    ++v39;
  }
  while (v39 != v46);
  return result;
}

uint64_t sub_218BB3060(uint64_t result, uint64_t a2, int16x8_t *a3, double a4, int16x4_t a5, int16x4_t a6)
{
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int32x4_t v20;
  int v21;
  int16x8_t v22;
  int16x8_t v23;
  uint64_t v24;
  int16x8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  int16x8_t *v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  uint64_t v36;
  uint64_t v37;
  int16x8_t *v38;
  int16x8_t *v39;
  int v40;
  int16x8_t v41;
  int16x8_t v42;
  uint64_t v43;
  int16x8_t *v44;
  int v45;
  _WORD *v46;
  _WORD *v47;
  _WORD *v48;
  _WORD *v49;
  uint64_t v50;
  unint64_t v51;
  int16x8_t *v52;
  int16x8_t *v53;
  int16x8_t *v54;
  int16x8_t v55;
  int16x8_t v56;

  v6 = *(_DWORD *)(result + 4);
  v7 = (v6 >> 1) & 1;
  if (*(_BYTE *)(result + 39))
    v7 = 1;
  v8 = *(_DWORD *)(result + 4) & 2;
  if (*(_BYTE *)(result + 60))
    v8 = 2;
  v9 = (unsigned __int16)v6 >> 13;
  v10 = ((v6 >> 8) & 3) - v9;
  v11 = v10 + 4;
  if ((v6 & 0x10000) != 0)
    v12 = 44;
  else
    v12 = 82;
  v13 = *(unsigned __int16 *)(result + 8);
  v14 = v13 ^ 0xB524;
  v15 = v13 ^ 0x49D8;
  v16 = -(128 << v9);
  v17 = (256 << v9) + ~(128 << v9);
  if (*(_BYTE *)(result + 10))
  {
    v18 = 0;
    LODWORD(v19) = 0;
    v20 = vdupq_n_s32(-6 - (v6 >> 6));
    a5.i32[0] = *(char *)(result + 130);
    a6.i32[0] = *(char *)(result + 105);
    v21 = 1 << (v10 + 3);
    if (v10 == -4)
      v21 = 0;
    v22 = vdupq_n_s16(v17);
    v23 = vdupq_n_s16(v16);
    LODWORD(result) = 10;
    v24 = a2;
    v25 = a3;
    do
    {
      if (v18 + 9 >= (int)v19)
      {
        v19 = (int)v19;
        v26 = a2 + 23944 + 164 * (int)v19;
        v27 = a2 + 11972 + 164 * (int)v19;
        v28 = a2 + 164 * (int)v19;
        do
        {
          for (i = 0; i != 164; i += 2)
          {
            v13 = (v13 >> 1) & 0xFFFF7FFF | ((((v13 ^ (v13 >> 3) ^ (v13 >> 12)) ^ (v13 >> 1)) & 1) << 15);
            *(_WORD *)(v28 + i) = (v21 + word_218BCF84A[(unsigned __int16)v13 >> 5]) >> v11;
            if (v7)
            {
              v14 = (v14 >> 1) & 0xFFFF7FFF | ((((v14 ^ (v14 >> 3) ^ (v14 >> 12)) ^ (v14 >> 1)) & 1) << 15);
              *(_WORD *)(v27 + i) = (v21 + word_218BCF84A[(unsigned __int16)v14 >> 5]) >> v11;
            }
            if (v8)
            {
              v15 = (v15 >> 1) & 0xFFFF7FFF | ((((v15 ^ (v15 >> 3) ^ (v15 >> 12)) ^ (v15 >> 1)) & 1) << 15);
              *(_WORD *)(v26 + i) = (v21 + word_218BCF84A[(unsigned __int16)v15 >> 5]) >> v11;
            }
          }
          ++v19;
          v26 += 164;
          v27 += 164;
          v28 += 164;
        }
        while ((_DWORD)result != (_DWORD)v19);
        LODWORD(v19) = result;
      }
      v30 = -8;
      v31 = v24;
      v32 = v25;
      do
      {
        v33 = vmaxq_s16(vminq_s16(*(int16x8_t *)(v31 + 1494), v22), v23);
        *(int16x8_t *)(v31 + 1494) = v33;
        v34 = vmaxq_s16(vminq_s16(vqaddq_s16(*(int16x8_t *)(v31 + 13466), vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*(int16x4_t *)v33.i8, a6, 0), v20)), vrshlq_s32(vmull_high_lane_s16(v33, a6, 0), v20))), v22), v23);
        v35 = vmaxq_s16(vminq_s16(vqaddq_s16(*(int16x8_t *)(v31 + 25438), vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*(int16x4_t *)v33.i8, a5, 0), v20)), vrshlq_s32(vmull_high_lane_s16(v33, a5, 0), v20))), v22), v23);
        *(int16x8_t *)(v31 + 13466) = v34;
        *(int16x8_t *)(v31 + 25438) = v35;
        if (a3)
        {
          v32[512] = v34;
          v32[1024] = v35;
          *v32 = v33;
        }
        v30 += 8;
        ++v32;
        v31 += 16;
      }
      while (v30 < 0x38);
      ++v18;
      result = (result + 1);
      v25 += 8;
      v24 += 164;
    }
    while (v18 != 64);
  }
  else if (*(unsigned __int8 *)(result + 39) | *(unsigned __int8 *)(result + 60))
  {
    v36 = 0;
    LODWORD(v37) = 0;
    v38 = (int16x8_t *)(a2 + 25438);
    v39 = (int16x8_t *)(a2 + 13466);
    v40 = 1 << (v10 + 3);
    v41 = vdupq_n_s16(v17);
    if (!v11)
      v40 = 0;
    v42 = vdupq_n_s16(v16);
    result = a2 + 23944;
    v43 = a2 + 11972;
    v44 = a3 + 512;
    v45 = 10;
    do
    {
      if (v36 + 9 >= (int)v37)
      {
        v37 = (int)v37;
        v46 = (_WORD *)(result + 164 * (int)v37);
        v47 = (_WORD *)(v43 + 164 * (int)v37);
        do
        {
          v48 = v47;
          v49 = v46;
          v50 = v12;
          do
          {
            if (v7)
            {
              v14 = (v14 >> 1) & 0xFFFF7FFF | ((((v14 ^ (v14 >> 3) ^ (v14 >> 12)) ^ (v14 >> 1)) & 1) << 15);
              *v48 = (v40 + word_218BCF84A[(unsigned __int16)v14 >> 5]) >> v11;
            }
            if (v8)
            {
              v15 = (v15 >> 1) & 0xFFFF7FFF | ((((v15 ^ (v15 >> 3) ^ (v15 >> 12)) ^ (v15 >> 1)) & 1) << 15);
              *v49 = (v40 + word_218BCF84A[(unsigned __int16)v15 >> 5]) >> v11;
            }
            ++v49;
            ++v48;
            --v50;
          }
          while (v50);
          ++v37;
          v46 += 82;
          v47 += 82;
        }
        while (v45 != (_DWORD)v37);
        LODWORD(v37) = v45;
      }
      v51 = -8;
      v52 = v39;
      v53 = v38;
      v54 = v44;
      do
      {
        v55 = vmaxq_s16(vminq_s16(*v52, v41), v42);
        v56 = vmaxq_s16(vminq_s16(*v53, v41), v42);
        *v52 = v55;
        *v53 = v56;
        if (a3)
        {
          *v54 = v55;
          v54[512] = v56;
        }
        v51 += 8;
        ++v54;
        ++v53;
        ++v52;
      }
      while (v51 < 0x38);
      ++v36;
      ++v45;
      v44 += 8;
      v38 = (int16x8_t *)((char *)v38 + 164);
      v39 = (int16x8_t *)((char *)v39 + 164);
    }
    while (v36 != 64);
  }
  return result;
}

uint64_t sub_218BB3480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  char v11;
  unsigned int v12;
  int v13;
  int v14;
  char v15;
  int8x8_t v16;
  int16x4_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t i;
  int16x8_t v30;
  unint64_t v31;
  int8x16_t *v32;
  int32x4_t *v33;
  int8x16_t v34;
  int16x8_t v35;
  int16x8_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  _OWORD *v41;
  _OWORD *v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int8x8_t v54;
  int16x8_t v55;
  int8x8_t v56;
  uint64_t result;
  int v58;
  int16x8_t v59;
  BOOL v60;
  BOOL v61;
  unint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _WORD *v72;
  _WORD *v73;
  uint64_t v74;
  _OWORD *v75;
  uint64_t v76;
  int8x16_t v77;
  int8x16_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int32x4_t *v82;
  uint64_t v83;
  unint64_t j;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int32x4_t v94;
  uint64_t v95;
  uint64_t v96;
  int16x8_t v97;
  uint64_t v98;
  int v99;
  int v100;
  _DWORD *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  unint64_t v110;
  _OWORD *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  _OWORD *v118;
  unint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  _DWORD v124[4];
  _QWORD v125[80];

  LODWORD(v4) = 0;
  v125[78] = *MEMORY[0x24BDAC8D0];
  v5 = (_OWORD *)(a2 + 348);
  v123 = *(unsigned __int8 *)(a1 + 39);
  v6 = *(_DWORD *)(a1 + 4);
  v7 = *(unsigned __int8 *)(a1 + 60);
  v8 = (unsigned __int16)v6 >> 13;
  v9 = ((v6 >> 8) & 3) - v8;
  v11 = v9 + 4;
  v10 = v9 == -4;
  v12 = *(unsigned __int16 *)(a1 + 8) ^ 0xB524;
  v13 = -(128 << v8);
  v14 = (256 << v8) + ~(128 << v8);
  v15 = (v6 >> 6) + 6;
  v16 = *(int8x8_t *)(a1 + 81);
  v17 = (int16x4_t)vmovl_s8(v16).u64[0];
  v18 = v16.i8[3];
  v19 = 1 << (v9 + 3);
  if (v10)
    v19 = 0;
  v20 = 32 << (v6 >> 6);
  v21 = a2 + 498;
  v22 = (_OWORD *)(a2 + 510);
  v23 = (_OWORD *)(a3 - 768);
  v24 = *(unsigned __int16 *)(a1 + 8);
  v25 = 4;
  v26 = 3;
  v27 = v24;
  do
  {
    if ((uint64_t)v26 >= (int)v4)
    {
      v4 = (int)v4;
      v28 = a2 + 164 * (int)v4;
      do
      {
        for (i = 0; i != 164; i += 2)
        {
          v27 = (v27 >> 1) & 0xFFFF7FFF | (((v27 ^ (v27 >> 3) ^ (v27 >> 12) ^ (v27 >> 1)) & 1) << 15);
          *(_WORD *)(v28 + i) = (v19 + word_218BCF84A[(unsigned __int16)v27 >> 5]) >> v11;
        }
        ++v4;
        v28 += 164;
      }
      while (v25 != (_DWORD)v4);
      LODWORD(v4) = v25;
    }
    v30 = *(int16x8_t *)(a2 + 164 * v26 - 160);
    v31 = -5;
    v32 = (int8x16_t *)v5;
    v33 = (int32x4_t *)v125;
    do
    {
      v34 = *v32++;
      v35 = (int16x8_t)vextq_s8((int8x16_t)v30, v34, 2uLL);
      v36 = (int16x8_t)vextq_s8((int8x16_t)v30, v34, 4uLL);
      v33[-1] = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v17, 1), *(int16x4_t *)v30.i8, v17, 0), *(int16x4_t *)v36.i8, v17, 2);
      *v33 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v35, v17, 1), v30, v17, 0), v36, v17, 2);
      v31 += 8;
      v33 += 2;
      v30 = (int16x8_t)v34;
    }
    while (v31 < 0x47);
    v37 = 0;
    v38 = *(__int16 *)(a2 + 164 * v26 + 4);
    do
    {
      v39 = ((v20 + v38 * v18 + v124[v37]) >> v15) + *(__int16 *)(v21 + 2 * v37);
      if (v39 >= v14)
        v38 = v14;
      else
        v38 = ((v20 + v38 * v18 + v124[v37]) >> v15) + *(__int16 *)(v21 + 2 * v37);
      if (v39 <= v13)
        v38 = v13;
      *(_WORD *)(v21 + 2 * v37++) = v38;
    }
    while (v37 != 76);
    if (a3 && v26 >= 9)
    {
      v40 = -16;
      v41 = v23;
      v42 = v22;
      do
      {
        *v41 = *v42;
        v41[1] = v42[1];
        v40 += 16;
        v42 += 2;
        v41 += 2;
      }
      while (v40 < 0x30);
    }
    ++v26;
    ++v25;
    v5 = (_OWORD *)((char *)v5 + 164);
    v21 += 164;
    v22 = (_OWORD *)((char *)v22 + 164);
    v23 += 8;
  }
  while (v26 != 73);
  v43 = 0;
  v44 = v123 | v6 & 2;
  v45 = v7 | v6 & 2;
  v46 = v24 ^ 0x49D8;
  if ((v6 & 0x10000) != 0)
    v47 = 44;
  else
    v47 = 82;
  v48 = *(unsigned int *)(a1 + 4);
  v49 = v48 & 0x10000;
  v50 = v48 & 0x20000;
  v51 = 38;
  if ((v48 & 0x20000) == 0)
    v51 = 73;
  v114 = v51;
  if ((v48 & 0x20000) != 0)
    v52 = 6;
  else
    v52 = 9;
  v53 = *(unsigned __int8 *)(a1 + 10);
  v54 = *(int8x8_t *)(a1 + 105);
  v55 = vmovl_s8(v54);
  v56 = *(int8x8_t *)(a1 + 130);
  result = v54.i8[3];
  v58 = v56.i8[3];
  v59 = vmovl_s8(v56);
  v60 = v44 == 0;
  v61 = v45 == 0;
  if (v49)
    v62 = 41;
  else
    v62 = 79;
  v121 = v48 & 0x10000;
  v122 = (v48 >> 16) & 1;
  v113 = 0x40uLL >> (BYTE2(v48) & 1);
  v63 = 12;
  if (!v49)
    v63 = 18;
  v112 = v52;
  v64 = (_OWORD *)(a2 + v63);
  v65 = 192 - ((_DWORD)v52 << 6);
  v66 = 4;
  v67 = 3;
  v68 = a2;
  v115 = v47;
  do
  {
    v118 = v64;
    v120 = v67;
    if (v67 >= (int)v43)
    {
      v69 = (int)v43;
      v70 = a2 + 23944 + 164 * (int)v43;
      v71 = a2 + 11972 + 164 * (int)v43;
      do
      {
        v72 = (_WORD *)v71;
        v73 = (_WORD *)v70;
        v74 = v47;
        do
        {
          if (!v60)
          {
            v12 = (v12 >> 1) & 0xFFFF7FFF | ((((v12 ^ (v12 >> 3) ^ (v12 >> 12)) ^ (v12 >> 1)) & 1) << 15);
            *v72 = (v19 + word_218BCF84A[(unsigned __int16)v12 >> 5]) >> v11;
          }
          if (!v61)
          {
            v46 = (v46 >> 1) & 0xFFFF7FFF | ((((v46 ^ (v46 >> 3) ^ (v46 >> 12)) ^ (v46 >> 1)) & 1) << 15);
            *v73 = (v19 + word_218BCF84A[(unsigned __int16)v46 >> 5]) >> v11;
          }
          ++v73;
          ++v72;
          --v74;
        }
        while (v74);
        ++v69;
        v70 += 164;
        v71 += 164;
      }
      while ((_DWORD)v66 != (_DWORD)v69);
      v116 = v66;
      v67 = v120;
    }
    else
    {
      v116 = v43;
    }
    v117 = v65;
    v75 = (_OWORD *)(a3 + 8208 + 2 * v65);
    v76 = a2 + 164 * v67;
    v77 = *(int8x16_t *)(v76 + 11812);
    v78 = *(int8x16_t *)(v76 + 23784);
    v79 = ((int)v67 - 3) << (v50 >> 17);
    v80 = v79 + 3;
    v81 = v79 + 4;
    v82 = (int32x4_t *)v124;
    v83 = v68;
    for (j = 3; j < v62; j += 8)
    {
      v85 = (int16x8_t)v77;
      v86 = (int16x8_t)v78;
      v77 = *(int8x16_t *)(v83 + 12320);
      v87 = (int16x8_t)vextq_s8((int8x16_t)v85, v77, 2uLL);
      v88 = (int16x8_t)vextq_s8((int8x16_t)v85, v77, 4uLL);
      v89 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v87.i8, *(int16x4_t *)v55.i8, 1), *(int16x4_t *)v85.i8, *(int16x4_t *)v55.i8, 0), *(int16x4_t *)v88.i8, *(int16x4_t *)v55.i8, 2);
      v90 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v87, *(int16x4_t *)v55.i8, 1), v85, *(int16x4_t *)v55.i8, 0), v88, *(int16x4_t *)v55.i8, 2);
      v78 = *(int8x16_t *)(v83 + 24292);
      v91 = (int16x8_t)vextq_s8((int8x16_t)v86, v78, 2uLL);
      v92 = (int16x8_t)vextq_s8((int8x16_t)v86, v78, 4uLL);
      v93 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v59.i8, 1), *(int16x4_t *)v86.i8, *(int16x4_t *)v59.i8, 0), *(int16x4_t *)v92.i8, *(int16x4_t *)v59.i8, 2);
      v94 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v91, *(int16x4_t *)v59.i8, 1), v86, *(int16x4_t *)v59.i8, 0), v92, *(int16x4_t *)v59.i8, 2);
      if (v53)
      {
        v95 = ((int)j - 3) << v122;
        v96 = 2 * (v95 + 3);
        v97 = *(int16x8_t *)(a2 + 164 * v80 + v96);
        if (v50)
        {
          v97 = vrshrq_n_s16(vpaddq_s16(vaddq_s16(*(int16x8_t *)(a2 + 164 * v81 + v96), v97), vaddq_s16(*(int16x8_t *)(a2 + 164 * v81 + 2 * v95 + 22), *(int16x8_t *)(a2 + 164 * v80 + 2 * v95 + 22))), 2uLL);
        }
        else if (v121)
        {
          v97 = vrshrq_n_s16(vpaddq_s16(v97, *(int16x8_t *)(a2 + 164 * v80 + 2 * v95 + 22)), 1uLL);
        }
        v89 = vmlal_laneq_s16(v89, *(int16x4_t *)v97.i8, v55, 4);
        v90 = vmlal_high_laneq_s16(v90, v97, v55, 4);
        v93 = vmlal_laneq_s16(v93, *(int16x4_t *)v97.i8, v59, 4);
        v94 = vmlal_high_laneq_s16(v94, v97, v59, 4);
      }
      *v82 = v89;
      v82[1] = v90;
      v82[20] = v93;
      v82[21] = v94;
      v83 += 16;
      v82 += 2;
    }
    v98 = a2 + 164 * v120;
    v99 = *(__int16 *)(v98 + 11976);
    v100 = *(__int16 *)(v98 + 23948);
    v101 = v124;
    v102 = 12470;
    v103 = 24442;
    v104 = v62 - 3;
    do
    {
      v106 = ((v20 + v99 * (int)result + *v101) >> v15) + *(__int16 *)(v68 + v102);
      if (v106 >= v14)
        v107 = v14;
      else
        v107 = v106;
      if (v106 <= v13)
        v99 = v13;
      else
        v99 = v107;
      v105 = v101[80];
      v108 = ((v20 + v100 * v58 + v105) >> v15) + *(__int16 *)(v68 + v103);
      if (v108 >= v14)
        v109 = v14;
      else
        v109 = ((v20 + v100 * v58 + v105) >> v15) + *(__int16 *)(v68 + v103);
      if (v108 <= v13)
        v100 = v13;
      else
        v100 = v109;
      *(_WORD *)(v68 + v102) = v99;
      *(_WORD *)(v68 + v103) = v100;
      v103 += 2;
      v102 += 2;
      ++v101;
      --v104;
    }
    while (v104);
    if (a3 && v120 >= v112)
    {
      v110 = 0;
      v111 = v118;
      do
      {
        *(v75 - 1) = v111[779];
        *v75 = v111[780];
        v75[511] = *(_OWORD *)((char *)v111 + 24436);
        v75[512] = *(_OWORD *)((char *)v111 + 24452);
        v110 += 16;
        v111 += 2;
        v75 += 2;
      }
      while (v110 < v113);
    }
    v67 = v120 + 1;
    v66 = (v66 + 1);
    v68 += 164;
    v64 = (_OWORD *)((char *)v118 + 164);
    v65 = v117 + 64;
    v47 = v115;
    v43 = v116;
  }
  while (v120 + 1 != v114);
  return result;
}

uint64_t sub_218BB3B18(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int32x4_t v15;
  uint64_t v16;
  int v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  int v21;
  _OWORD *v22;
  int8x16_t v23;
  int16x8_t v24;
  int8x16_t v25;
  int16x4_t v26;
  int v27;
  int v28;
  int16x4_t v29;
  int16x4_t v30;
  uint64_t v31;
  _OWORD *v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  int8x16_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int32x4_t v49;
  const __int16 *v50;
  int16x4_t v51;
  BOOL v52;
  unint64_t v53;
  _OWORD *v54;
  _OWORD *v55;
  uint64_t v56;
  _WORD *v57;
  __int16 *v58;
  unsigned int v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x4_t v64;
  BOOL v65;
  BOOL v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int8x16_t v71;
  uint64_t v72;
  uint64_t v73;
  _WORD *v74;
  _WORD *v75;
  _WORD *v76;
  _WORD *v77;
  uint64_t v78;
  uint64_t v79;
  int8x16_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int16 *v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int32x4_t v95;
  __int128 v96;
  __int128 v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int32x4_t v102;
  uint64_t v103;
  int16x8_t v104;
  int16x4_t v105;
  int16x8_t v106;
  int8x16_t v107;
  int32x4_t v108;
  __int16 *v109;
  __int16 *v110;
  const __int16 *v111;
  __int16 *v112;
  int32x4_t v113;
  int16x4_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v128;
  __int16 *v129;
  _WORD *v130;
  int8x16x2_t v131;
  int8x16x2_t v132;

  v3 = *(unsigned __int8 *)(result + 39);
  v4 = *(_DWORD *)(result + 4);
  v5 = *(unsigned __int8 *)(result + 60);
  v6 = (unsigned __int16)v4 >> 13;
  v7 = ((v4 >> 8) & 3) - v6;
  v8 = v7 + 4;
  v9 = 44;
  if ((v4 & 0x10000) == 0)
    v9 = 82;
  v124 = v9;
  v10 = *(unsigned __int16 *)(result + 8);
  v11 = -(128 << v6);
  v12 = v4 & 0x20000;
  if ((v4 & 0x20000) != 0)
    v13 = 6;
  else
    v13 = 9;
  v126 = v13;
  v14 = (256 << v6) + ~(128 << v6);
  v15 = vdupq_n_s32(-6 - (v4 >> 6));
  v16 = 38;
  if ((v4 & 0x20000) == 0)
    v16 = 73;
  v125 = v16;
  v17 = *(unsigned __int8 *)(result + 10);
  v18 = *(int8x16_t *)(result + 105);
  v19 = *(int8x16_t *)(result + 130);
  v20 = (int8x16_t *)&loc_218BBB000;
  if (*(_BYTE *)(result + 10))
  {
    v21 = 0;
    v22 = (_OWORD *)(a2 + 510);
    v23 = *(int8x16_t *)(result + 81);
    v24 = vmovl_s8(*(int8x8_t *)v23.i8);
    v25 = (int8x16_t)vmovl_high_s8(v23);
    v26 = (int16x4_t)vextq_s8(v25, v25, 4uLL).u64[0];
    v27 = 1 << (v7 + 3);
    if (v7 == -4)
      v28 = 0;
    else
      v28 = 1 << (v7 + 3);
    v29 = vdup_n_s16(v14);
    v30 = vdup_n_s16(v11);
    v31 = a2 + 498;
    v32 = (_OWORD *)(a3 - 768);
    v33 = 4;
    v34 = 3;
    v35 = v10;
    do
    {
      if ((uint64_t)v34 >= v21)
      {
        v36 = v21;
        v37 = a2 + 164 * v21;
        do
        {
          for (i = 0; i != 164; i += 2)
          {
            v35 = (v35 >> 1) & 0xFFFF7FFF | ((((v35 ^ (v35 >> 3) ^ (v35 >> 12)) ^ (v35 >> 1)) & 1) << 15);
            *(_WORD *)(v37 + i) = (v28 + word_218BCF84A[(unsigned __int16)v35 >> 5]) >> v8;
          }
          ++v36;
          v37 += 164;
        }
        while (v33 != (_DWORD)v36);
        v21 = v33;
      }
      v39.i64[0] = *(_QWORD *)(a2 + 164 * v34 + 2);
      v40 = v31;
      v41 = 3;
      do
      {
        v42 = 0;
        v43 = 2 * v41 - 4;
        v131.val[0] = *(int8x16_t *)(a2 + 164 * (v34 - 2) + v43);
        v131.val[1] = *(int8x16_t *)(a2 + 164 * (v34 - 1) + v43);
        v44 = (int16x8_t)vqtbl2q_s8(v131, (int8x16_t)xmmword_218BBBF90);
        v45 = (int16x8_t)vqtbl2q_s8(v131, (int8x16_t)xmmword_218BBBFA0);
        v46 = (int16x8_t)vqtbl2q_s8(v131, (int8x16_t)xmmword_218BBBFB0);
        v47 = (int16x8_t)vqtbl2q_s8(v131, (int8x16_t)xmmword_218BBBFC0);
        v48 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v24.i8, 1), *(int16x4_t *)v131.val[0].i8, *(int16x4_t *)v24.i8, 0), *(int16x4_t *)v45.i8, *(int16x4_t *)v24.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v24.i8, 3), *(int16x4_t *)v47.i8,
                          v24,
                          4),
                        *(int16x4_t *)v131.val[1].i8,
                        v24,
                        5),
                      v44,
                      v24,
                      6),
                    v45,
                    v24,
                    7),
                  v46,
                  *(int16x4_t *)v25.i8,
                  0),
                v47,
                *(int16x4_t *)v25.i8,
                1);
        do
        {
          v49 = vmull_s16(*(int16x4_t *)v39.i8, v26);
          v50 = (const __int16 *)(v40 + v42);
          v51 = vld1_dup_s16(v50);
          *(int16x4_t *)v49.i8 = vmax_s16(vmin_s16(vqadd_s16(vqmovn_s32(vrshlq_s32(vaddq_s32(vpaddq_s32(v49, v49), v48), v15)), v51), v29), v30);
          *(_WORD *)(v40 + v42) = v49.i16[0];
          v39.i64[1] = v49.i64[0];
          *(int8x8_t *)v39.i8 = vqtbl1_s8(v39, (int8x8_t)151520002);
          v48 = (int32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 4uLL);
          v42 += 2;
        }
        while (v42 != 8);
        v40 += 8;
        v52 = v41 >= 0x4B;
        v41 += 4;
      }
      while (!v52);
      if (a3 && v34 >= 9)
      {
        v53 = -16;
        v54 = v32;
        v55 = v22;
        do
        {
          *v54 = *v55;
          v54[1] = v55[1];
          v53 += 16;
          v55 += 2;
          v54 += 2;
        }
        while (v53 < 0x30);
      }
      ++v34;
      ++v33;
      v31 += 164;
      v22 = (_OWORD *)((char *)v22 + 164);
      v32 += 8;
    }
    while (v34 != 73);
    v20 = (int8x16_t *)&loc_218BBB000;
  }
  else
  {
    if (!(v3 | v5))
      return result;
    v27 = 1 << (v7 + 3);
    v29 = vdup_n_s16(v14);
    v30 = vdup_n_s16(v11);
  }
  v56 = 0;
  v57 = (_WORD *)(a2 + 24442);
  v58 = (__int16 *)(a2 + 12470);
  v59 = v10 ^ 0xB524;
  result = v10 ^ 0x49D8;
  v60 = vmovl_s8(*(int8x8_t *)v18.i8);
  v61 = vmovl_high_s8(v18);
  v62 = vmovl_s8(*(int8x8_t *)v19.i8);
  v63 = vmovl_high_s8(v19);
  v64 = (int16x4_t)vzip2_s32(*(int32x2_t *)v61.i8, *(int32x2_t *)v63.i8);
  v65 = (v3 | v4 & 2) == 0;
  v66 = (v5 | v4 & 2) == 0;
  if (v8)
    v67 = v27;
  else
    v67 = 0;
  v68 = a2 + 11972;
  v69 = a2 + 23944;
  v70 = 3;
  v71 = v20[251];
  v72 = 4;
  do
  {
    if (v70 >= (int)v56)
    {
      v73 = (int)v56;
      v74 = (_WORD *)(v69 + 164 * (int)v56);
      v75 = (_WORD *)(v68 + 164 * (int)v73);
      do
      {
        v76 = v75;
        v77 = v74;
        v78 = v124;
        do
        {
          if (!v65)
          {
            v59 = (v59 >> 1) & 0xFFFF7FFF | ((((v59 ^ (v59 >> 3) ^ (v59 >> 12)) ^ (v59 >> 1)) & 1) << 15);
            *v76 = (v67 + word_218BCF84A[(unsigned __int16)v59 >> 5]) >> v8;
          }
          if (!v66)
          {
            result = (result >> 1) & 0xFFFF7FFF | ((((result ^ (result >> 3) ^ (result >> 12)) ^ (result >> 1)) & 1) << 15);
            *v77 = (v67 + word_218BCF84A[(unsigned __int16)result >> 5]) >> v8;
          }
          ++v77;
          ++v76;
          --v78;
        }
        while (v78);
        ++v73;
        v74 += 82;
        v75 += 82;
      }
      while ((_DWORD)v72 != (_DWORD)v73);
      v128 = v72;
    }
    else
    {
      v128 = v56;
    }
    v79 = a2 + 164 * v70;
    v80.i64[0] = *(_QWORD *)(v79 + 11974);
    v80.i32[1] = *(_DWORD *)(v79 + 23946);
    v81 = v70 - 2;
    v82 = v70 - 1;
    v83 = ((int)v70 - 3) << (v12 >> 17);
    v84 = v83 + 3;
    v85 = v83 + 4;
    LODWORD(v86) = 38;
    v129 = v58;
    v130 = v57;
    v87 = v57;
    v88 = 3;
    do
    {
      v89 = 2 * v88 - 4;
      v132.val[0] = *(int8x16_t *)(v68 + 164 * v81 + v89);
      v132.val[1] = *(int8x16_t *)(v68 + 164 * v82 + v89);
      v90 = v86 - 4;
      v91 = (int16x8_t)vqtbl2q_s8(v132, (int8x16_t)xmmword_218BBBF90);
      v92 = (int16x8_t)vqtbl2q_s8(v132, (int8x16_t)xmmword_218BBBFA0);
      v93 = (int16x8_t)vqtbl2q_s8(v132, v71);
      v94 = (int16x8_t)vqtbl2q_s8(v132, (int8x16_t)xmmword_218BBBFC0);
      v95 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v60.i8, 1), *(int16x4_t *)v132.val[0].i8, *(int16x4_t *)v60.i8, 0), *(int16x4_t *)v92.i8, *(int16x4_t *)v60.i8, 2), *(int16x4_t *)v93.i8, *(int16x4_t *)v60.i8, 3), *(int16x4_t *)v94.i8,
                        v60,
                        4),
                      *(int16x4_t *)v132.val[1].i8,
                      v60,
                      5),
                    v91,
                    v60,
                    6),
                  v92,
                  v60,
                  7),
                v93,
                *(int16x4_t *)v61.i8,
                0),
              v94,
              *(int16x4_t *)v61.i8,
              1);
      v96 = *(_OWORD *)(v69 + 164 * v81 + v89);
      if ((int)v86 >= 4)
        v86 = 4;
      else
        v86 = v86;
      v97 = *(_OWORD *)(v69 + 164 * v82 + v89);
      v98 = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v96, (int8x16_t)xmmword_218BBBF90);
      v99 = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v96, (int8x16_t)xmmword_218BBBFA0);
      v100 = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v96, v71);
      v101 = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v96, (int8x16_t)xmmword_218BBBFC0);
      v102 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v62.i8, 1), *(int16x4_t *)&v96, *(int16x4_t *)v62.i8, 0), *(int16x4_t *)v99.i8, *(int16x4_t *)v62.i8, 2), *(int16x4_t *)v100.i8, *(int16x4_t *)v62.i8, 3), *(int16x4_t *)v101.i8,
                         v62,
                         4),
                       *(int16x4_t *)&v97,
                       v62,
                       5),
                     v98,
                     v62,
                     6),
                   v99,
                   v62,
                   7),
                 v100,
                 *(int16x4_t *)v63.i8,
                 0),
               v101,
               *(int16x4_t *)v63.i8,
               1);
      if (v17)
      {
        v103 = 2 * (2 * v88 - 3);
        v104 = *(int16x8_t *)(a2 + 164 * v84 + v103);
        if (v12)
        {
          v106 = vaddq_s16(*(int16x8_t *)(a2 + 164 * v85 + v103), v104);
          v105 = (int16x4_t)vrshrq_n_s16(vpaddq_s16(v106, v106), 2uLL).u64[0];
        }
        else
        {
          v105 = (int16x4_t)vrshrq_n_s16(vpaddq_s16(v104, v104), 1uLL).u64[0];
        }
        v95 = vmlal_laneq_s16(v95, v105, v61, 4);
        v102 = vmlal_laneq_s16(v102, v105, v63, 4);
      }
      v107 = (int8x16_t)vzip2q_s32(v95, v102);
      v108 = vzip1q_s32(v95, v102);
      v109 = v58;
      v110 = v87;
      v111 = v58;
      v112 = v87;
      do
      {
        v113 = vmull_s16(*(int16x4_t *)v80.i8, v64);
        v114 = vld1_dup_s16(v111++);
        v114.i16[1] = *v112++;
        *(int16x4_t *)v113.i8 = vmax_s16(vmin_s16(vqadd_s16(vqmovn_s32(vrshlq_s32(vaddq_s32(vpaddq_s32(v113, v113), v108), v15)), v114), v29), v30);
        *v109 = v113.i16[0];
        *v110 = v113.i16[1];
        v80.i64[1] = v113.i64[0];
        *(int8x8_t *)v80.i8 = vqtbl1_s8(v80, (int8x8_t)0xB0A070609080302);
        v108 = (int32x4_t)vextq_s8((int8x16_t)v108, v107, 8uLL);
        v107 = vextq_s8(v107, v107, 8uLL);
        v109 = (__int16 *)v111;
        v110 = v112;
        --v86;
      }
      while (v86);
      v87 += 4;
      v58 += 4;
      LODWORD(v86) = v90;
      v52 = v88 >= 0x25;
      v88 += 4;
    }
    while (!v52);
    if (a3 && v70 >= v126)
    {
      v115 = 0;
      v116 = a3 + ((uint64_t)((int)v70 - (int)v126) << 7);
      v117 = v116 + 0x2000;
      v118 = v116 + 0x4000;
      v119 = 1;
      do
      {
        v120 = a2 + 164 * v70;
        v121 = 2 * v115;
        *(_OWORD *)(v117 + v121) = *(_OWORD *)(v120 + 11972 + (v121 | 0xC));
        v122 = v121 | 0x10;
        *(_OWORD *)(v117 + v122) = *(_OWORD *)(v120 + 11972 + (v121 | 0x1C));
        v123 = v119;
        *(_OWORD *)(v118 + v121) = *(_OWORD *)(v120 + 23944 + (v121 | 0xC));
        *(_OWORD *)(v118 + v122) = *(_OWORD *)(v120 + 23944 + (v121 | 0x1C));
        v115 = 16;
        v119 = 0;
      }
      while ((v123 & 1) != 0);
    }
    ++v70;
    v72 = (v72 + 1);
    v57 = v130 + 82;
    v58 = v129 + 82;
    v56 = v128;
  }
  while (v70 != v125);
  return result;
}

uint64_t sub_218BB41D8(uint64_t result, uint64_t a2, _OWORD *a3)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int32x4_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int8x16_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x4_t v23;
  uint64_t v24;
  int8x16_t v25;
  int v26;
  int16x8_t v27;
  int8x16_t v28;
  int16x4_t v29;
  int16x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int16x4_t v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t i;
  uint64_t v45;
  int8x16_t v46;
  unint64_t v47;
  unint64_t v48;
  int8x16_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int32x4_t v60;
  int32x4_t v61;
  const __int16 *v62;
  int16x4_t v63;
  uint64_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int32x4_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int32x4_t v78;
  int32x4_t v79;
  const __int16 *v80;
  int16x4_t v81;
  BOOL v82;
  unint64_t v83;
  _OWORD *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  int v89;
  uint64_t v90;
  int16x4_t v91;
  int16x4_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _WORD *v98;
  _WORD *v99;
  _WORD *v100;
  _WORD *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int8x16_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int32x4_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int32x4_t v121;
  int8x16_t v122;
  int32x4_t v123;
  int32x4_t v124;
  const __int16 *v125;
  int16x4_t v126;
  unint64_t v127;
  __int128 *v128;
  _OWORD *v129;
  _OWORD *v130;
  __int128 v131;
  _OWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int8x16x2_t v136;
  int8x16x2_t v137;
  int8x16x2_t v138;

  v4 = *(_DWORD *)(result + 4);
  v5 = (v4 >> 1) & 1;
  if (*(_BYTE *)(result + 39))
    v5 = 1;
  v6 = *(_DWORD *)(result + 4) & 2;
  if (*(_BYTE *)(result + 60))
    v6 = 2;
  v7 = (unsigned __int16)v4 >> 13;
  v8 = ((v4 >> 8) & 3) - v7;
  v9 = v8 + 4;
  if ((v4 & 0x10000) != 0)
    v10 = 44;
  else
    v10 = 82;
  v11 = *(unsigned __int16 *)(result + 8);
  v12 = v11 ^ 0xB524;
  v13 = v11 ^ 0x49D8;
  v14 = -(128 << v7);
  v15 = (256 << v7) + ~(128 << v7);
  v16 = vdupq_n_s32(-6 - (v4 >> 6));
  v17 = *(int8x16_t *)(result + 105);
  v18 = vmovl_s8(*(int8x8_t *)v17.i8);
  v19 = vmovl_high_s8(v17);
  v20 = *(int8x16_t *)(result + 130);
  v21 = vmovl_s8(*(int8x8_t *)v20.i8);
  v22 = vmovl_high_s8(v20);
  v23 = (int16x4_t)vzip2_s32(*(int32x2_t *)v19.i8, *(int32x2_t *)v22.i8);
  v132 = a3;
  if (*(_BYTE *)(result + 10))
  {
    v24 = 0;
    v25 = *(int8x16_t *)(result + 81);
    v26 = 1 << (v8 + 3);
    v27 = vmovl_s8(*(int8x8_t *)v25.i8);
    v28 = (int8x16_t)vmovl_high_s8(v25);
    v29 = (int16x4_t)vextq_s8(v28, v28, 4uLL).u64[0];
    if (v8 == -4)
      v26 = 0;
    v30 = vdup_n_s16(v15);
    v31 = a2 + 11972;
    v32 = a2 + 23944;
    v33 = a2 + 498;
    v34 = vdup_n_s16(v14);
    result = a2 + 24442;
    v35 = a2 + 12470;
    v36 = a3 - 48;
    v37 = 4;
    v38 = 3;
    v39 = a2;
    do
    {
      if ((uint64_t)v38 >= (int)v24)
      {
        v40 = (int)v24;
        v41 = v32 + 164 * (int)v24;
        v42 = v31 + 164 * (int)v24;
        v43 = a2 + 164 * (int)v40;
        do
        {
          for (i = 0; i != 164; i += 2)
          {
            v11 = (v11 >> 1) & 0xFFFF7FFF | ((((v11 ^ (v11 >> 3) ^ (v11 >> 12)) ^ (v11 >> 1)) & 1) << 15);
            *(_WORD *)(v43 + i) = (v26 + word_218BCF84A[(unsigned __int16)v11 >> 5]) >> v9;
            if (v5)
            {
              v12 = (v12 >> 1) & 0xFFFF7FFF | ((((v12 ^ (v12 >> 3) ^ (v12 >> 12)) ^ (v12 >> 1)) & 1) << 15);
              *(_WORD *)(v42 + i) = (v26 + word_218BCF84A[(unsigned __int16)v12 >> 5]) >> v9;
            }
            if (v6)
            {
              v13 = (v13 >> 1) & 0xFFFF7FFF | ((((v13 ^ (v13 >> 3) ^ (v13 >> 12)) ^ (v13 >> 1)) & 1) << 15);
              *(_WORD *)(v41 + i) = (v26 + word_218BCF84A[(unsigned __int16)v13 >> 5]) >> v9;
            }
          }
          ++v40;
          v41 += 164;
          v42 += 164;
          v43 += 164;
        }
        while ((_DWORD)v37 != (_DWORD)v40);
        v133 = v37;
      }
      else
      {
        v133 = v24;
      }
      v45 = a2 + 164 * v38;
      v46.i64[0] = *(_QWORD *)(v45 + 2);
      v49.i64[0] = *(_QWORD *)(v45 + 11974);
      v47 = v38 - 2;
      v48 = v38 - 1;
      v49.i32[1] = *(_DWORD *)(v45 + 23946);
      v50 = v35;
      v51 = result;
      v134 = v33;
      v52 = v33;
      v53 = 3;
      do
      {
        v54 = 0;
        v55 = 2 * (v53 - 2);
        v137.val[0] = *(int8x16_t *)(a2 + 164 * v47 + v55);
        v137.val[1] = *(int8x16_t *)(a2 + 164 * v48 + v55);
        v56 = (int16x8_t)vqtbl2q_s8(v137, (int8x16_t)xmmword_218BBBF90);
        v57 = (int16x8_t)vqtbl2q_s8(v137, (int8x16_t)xmmword_218BBBFA0);
        v58 = (int16x8_t)vqtbl2q_s8(v137, (int8x16_t)xmmword_218BBBFB0);
        v59 = (int16x8_t)vqtbl2q_s8(v137, (int8x16_t)xmmword_218BBBFC0);
        v60 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v137.val[0].i8, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)v57.i8, *(int16x4_t *)v27.i8, 2), *(int16x4_t *)v58.i8, *(int16x4_t *)v27.i8, 3), *(int16x4_t *)v59.i8,
                          v27,
                          4),
                        *(int16x4_t *)v137.val[1].i8,
                        v27,
                        5),
                      v56,
                      v27,
                      6),
                    v57,
                    v27,
                    7),
                  v58,
                  *(int16x4_t *)v28.i8,
                  0),
                v59,
                *(int16x4_t *)v28.i8,
                1);
        do
        {
          v61 = vmull_s16(*(int16x4_t *)v46.i8, v29);
          v62 = (const __int16 *)(v52 + v54);
          v63 = vld1_dup_s16(v62);
          *(int16x4_t *)v61.i8 = vmax_s16(vmin_s16(vqadd_s16(vqmovn_s32(vrshlq_s32(vaddq_s32(vpaddq_s32(v61, v61), v60), v16)), v63), v30), v34);
          *(_WORD *)(v52 + v54) = v61.i16[0];
          v46.i64[1] = v61.i64[0];
          *(int8x8_t *)v46.i8 = vqtbl1_s8(v46, (int8x8_t)151520002);
          v60 = (int32x4_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 4uLL);
          v54 += 2;
        }
        while (v54 != 8);
        v64 = 0;
        v138.val[0] = *(int8x16_t *)(v31 + 164 * v47 + v55);
        v138.val[1] = *(int8x16_t *)(v31 + 164 * v48 + v55);
        v65 = (int16x8_t)vqtbl2q_s8(v138, (int8x16_t)xmmword_218BBBF90);
        v66 = (int16x8_t)vqtbl2q_s8(v138, (int8x16_t)xmmword_218BBBFA0);
        v67 = (int16x8_t)vqtbl2q_s8(v138, (int8x16_t)xmmword_218BBBFB0);
        v68 = (int16x8_t)vqtbl2q_s8(v138, (int8x16_t)xmmword_218BBBFC0);
        v69 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v65.i8, *(int16x4_t *)v18.i8, 1), *(int16x4_t *)v138.val[0].i8, *(int16x4_t *)v18.i8, 0), *(int16x4_t *)v66.i8, *(int16x4_t *)v18.i8, 2), *(int16x4_t *)v67.i8, *(int16x4_t *)v18.i8, 3), *(int16x4_t *)v68.i8,
                          v18,
                          4),
                        *(int16x4_t *)v138.val[1].i8,
                        v18,
                        5),
                      v65,
                      v18,
                      6),
                    v66,
                    v18,
                    7),
                  v67,
                  *(int16x4_t *)v19.i8,
                  0),
                v68,
                *(int16x4_t *)v19.i8,
                1);
        v138.val[0] = *(int8x16_t *)(v32 + 164 * v47 + v55);
        v138.val[1] = *(int8x16_t *)(v32 + 164 * v48 + v55);
        v70 = (int16x8_t)vqtbl2q_s8(v138, (int8x16_t)xmmword_218BBBF90);
        v71 = (int16x8_t)vqtbl2q_s8(v138, (int8x16_t)xmmword_218BBBFA0);
        v72 = (int16x8_t)vqtbl2q_s8(v138, (int8x16_t)xmmword_218BBBFB0);
        v73 = (int16x8_t)vqtbl2q_s8(v138, (int8x16_t)xmmword_218BBBFC0);
        v74 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v21.i8, 1), *(int16x4_t *)v138.val[0].i8, *(int16x4_t *)v21.i8, 0), *(int16x4_t *)v71.i8, *(int16x4_t *)v21.i8, 2), *(int16x4_t *)v72.i8, *(int16x4_t *)v21.i8, 3), *(int16x4_t *)v73.i8,
                          v21,
                          4),
                        *(int16x4_t *)v138.val[1].i8,
                        v21,
                        5),
                      v70,
                      v21,
                      6),
                    v71,
                    v21,
                    7),
                  v72,
                  *(int16x4_t *)v22.i8,
                  0),
                v73,
                *(int16x4_t *)v22.i8,
                1);
        v138.val[0].i64[0] = *(_QWORD *)(a2 + 164 * v38 + 2 * v53);
        v75 = vmlal_laneq_s16(v69, *(int16x4_t *)v138.val[0].i8, v19, 4);
        v76 = vmlal_laneq_s16(v74, *(int16x4_t *)v138.val[0].i8, v22, 4);
        v77 = (int8x16_t)vzip2q_s32(v75, v76);
        v78 = vzip1q_s32(v75, v76);
        do
        {
          v79 = vmull_s16(*(int16x4_t *)v49.i8, v23);
          v80 = (const __int16 *)(v50 + v64);
          v81 = vld1_dup_s16(v80);
          v81.i16[1] = *(_WORD *)(v51 + v64);
          *(int16x4_t *)v79.i8 = vmax_s16(vmin_s16(vqadd_s16(vqmovn_s32(vrshlq_s32(vaddq_s32(vpaddq_s32(v79, v79), v78), v16)), v81), v30), v34);
          *(_WORD *)(v50 + v64) = v79.i16[0];
          *(_WORD *)(v51 + v64) = v79.i16[1];
          v49.i64[1] = v79.i64[0];
          *(int8x8_t *)v49.i8 = vqtbl1_s8(v49, (int8x8_t)0xB0A070609080302);
          v78 = (int32x4_t)vextq_s8((int8x16_t)v78, v77, 8uLL);
          v77 = vextq_s8(v77, v77, 8uLL);
          v64 += 2;
        }
        while (v64 != 8);
        v52 += 8;
        v51 += 8;
        v50 += 8;
        v82 = v53 >= 0x4B;
        v53 += 4;
      }
      while (!v82);
      if (a3 && v38 >= 9)
      {
        v83 = -16;
        v84 = v36;
        v85 = v39;
        do
        {
          *v84 = *(_OWORD *)(v85 + 510);
          v84[1] = *(_OWORD *)(v85 + 526);
          v84[512] = *(_OWORD *)(v85 + 12482);
          v84[513] = *(_OWORD *)(v85 + 12498);
          v84[1024] = *(_OWORD *)(v85 + 24454);
          v84[1025] = *(_OWORD *)(v85 + 24470);
          v83 += 16;
          v85 += 32;
          v84 += 2;
        }
        while (v83 < 0x30);
      }
      ++v38;
      v37 = (v37 + 1);
      v33 = v134 + 164;
      result += 164;
      v35 += 164;
      v39 += 164;
      v36 += 8;
      v24 = v133;
    }
    while (v38 != 73);
  }
  else if (*(unsigned __int8 *)(result + 39) | *(unsigned __int8 *)(result + 60))
  {
    v86 = 0;
    v87 = (__int128 *)(a2 + 24470);
    v88 = (_OWORD *)(a2 + 12482);
    v89 = 1 << (v8 + 3);
    if (!v9)
      v89 = 0;
    v90 = a2 + 11972;
    result = a2 + 23944;
    v91 = vdup_n_s16(v15);
    v92 = vdup_n_s16(v14);
    v93 = a2 + 24442;
    v94 = a2 + 12470;
    v95 = 4;
    v96 = 3;
    do
    {
      if ((uint64_t)v96 >= (int)v86)
      {
        v97 = (int)v86;
        v98 = (_WORD *)(result + 164 * (int)v86);
        v99 = (_WORD *)(v90 + 164 * (int)v86);
        do
        {
          v100 = v99;
          v101 = v98;
          v102 = v10;
          do
          {
            if (v5)
            {
              v12 = (v12 >> 1) & 0xFFFF7FFF | ((((v12 ^ (v12 >> 3) ^ (v12 >> 12)) ^ (v12 >> 1)) & 1) << 15);
              *v100 = (v89 + word_218BCF84A[(unsigned __int16)v12 >> 5]) >> v9;
            }
            if (v6)
            {
              v13 = (v13 >> 1) & 0xFFFF7FFF | ((((v13 ^ (v13 >> 3) ^ (v13 >> 12)) ^ (v13 >> 1)) & 1) << 15);
              *v101 = (v89 + word_218BCF84A[(unsigned __int16)v13 >> 5]) >> v9;
            }
            ++v101;
            ++v100;
            --v102;
          }
          while (v102);
          ++v97;
          v98 += 82;
          v99 += 82;
        }
        while ((_DWORD)v95 != (_DWORD)v97);
        v135 = v95;
      }
      else
      {
        v135 = v86;
      }
      v103 = a2 + 164 * v96;
      v105.i64[0] = *(_QWORD *)(v103 + 11974);
      v104 = v96 - 2;
      v105.i32[1] = *(_DWORD *)(v103 + 23946);
      v106 = v96 - 1;
      v107 = v94;
      v108 = v93;
      v109 = 3;
      do
      {
        v110 = 0;
        v111 = 2 * v109 - 4;
        v136.val[0] = *(int8x16_t *)(v90 + 164 * v104 + v111);
        v136.val[1] = *(int8x16_t *)(v90 + 164 * v106 + v111);
        v112 = (int16x8_t)vqtbl2q_s8(v136, (int8x16_t)xmmword_218BBBF90);
        v113 = (int16x8_t)vqtbl2q_s8(v136, (int8x16_t)xmmword_218BBBFA0);
        v114 = (int16x8_t)vqtbl2q_s8(v136, (int8x16_t)xmmword_218BBBFB0);
        v115 = (int16x8_t)vqtbl2q_s8(v136, (int8x16_t)xmmword_218BBBFC0);
        v116 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v18.i8, 1), *(int16x4_t *)v136.val[0].i8, *(int16x4_t *)v18.i8, 0), *(int16x4_t *)v113.i8, *(int16x4_t *)v18.i8, 2), *(int16x4_t *)v114.i8, *(int16x4_t *)v18.i8, 3), *(int16x4_t *)v115.i8,
                           v18,
                           4),
                         *(int16x4_t *)v136.val[1].i8,
                         v18,
                         5),
                       v112,
                       v18,
                       6),
                     v113,
                     v18,
                     7),
                   v114,
                   *(int16x4_t *)v19.i8,
                   0),
                 v115,
                 *(int16x4_t *)v19.i8,
                 1);
        v136.val[0] = *(int8x16_t *)(result + 164 * v104 + v111);
        v136.val[1] = *(int8x16_t *)(result + 164 * v106 + v111);
        v117 = (int16x8_t)vqtbl2q_s8(v136, (int8x16_t)xmmword_218BBBF90);
        v118 = (int16x8_t)vqtbl2q_s8(v136, (int8x16_t)xmmword_218BBBFA0);
        v119 = (int16x8_t)vqtbl2q_s8(v136, (int8x16_t)xmmword_218BBBFB0);
        v120 = (int16x8_t)vqtbl2q_s8(v136, (int8x16_t)xmmword_218BBBFC0);
        v121 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v21.i8, 1), *(int16x4_t *)v136.val[0].i8, *(int16x4_t *)v21.i8, 0), *(int16x4_t *)v118.i8, *(int16x4_t *)v21.i8, 2), *(int16x4_t *)v119.i8, *(int16x4_t *)v21.i8, 3), *(int16x4_t *)v120.i8,
                           v21,
                           4),
                         *(int16x4_t *)v136.val[1].i8,
                         v21,
                         5),
                       v117,
                       v21,
                       6),
                     v118,
                     v21,
                     7),
                   v119,
                   *(int16x4_t *)v22.i8,
                   0),
                 v120,
                 *(int16x4_t *)v22.i8,
                 1);
        v122 = (int8x16_t)vzip2q_s32(v116, v121);
        v123 = vzip1q_s32(v116, v121);
        do
        {
          v124 = vmull_s16(*(int16x4_t *)v105.i8, v23);
          v125 = (const __int16 *)(v107 + v110);
          v126 = vld1_dup_s16(v125);
          v126.i16[1] = *(_WORD *)(v108 + v110);
          *(int16x4_t *)v124.i8 = vmax_s16(vmin_s16(vqadd_s16(vqmovn_s32(vrshlq_s32(vaddq_s32(vpaddq_s32(v124, v124), v123), v16)), v126), v91), v92);
          *(_WORD *)(v107 + v110) = v124.i16[0];
          *(_WORD *)(v108 + v110) = v124.i16[1];
          v105.i64[1] = v124.i64[0];
          *(int8x8_t *)v105.i8 = vqtbl1_s8(v105, (int8x8_t)0xB0A070609080302);
          v123 = (int32x4_t)vextq_s8((int8x16_t)v123, v122, 8uLL);
          v122 = vextq_s8(v122, v122, 8uLL);
          v110 += 2;
        }
        while (v110 != 8);
        v108 += 8;
        v107 += 8;
        v82 = v109 >= 0x4B;
        v109 += 4;
      }
      while (!v82);
      if (v132 && v96 >= 9)
      {
        v127 = -16;
        v128 = v87;
        v129 = a3;
        v130 = v88;
        do
        {
          v129[464] = *v130;
          v129[465] = v130[1];
          v129[976] = *(v128 - 1);
          v127 += 16;
          v131 = *v128;
          v128 += 2;
          v129[977] = v131;
          v130 += 2;
          v129 += 2;
        }
        while (v127 < 0x30);
      }
      ++v96;
      v95 = (v95 + 1);
      v93 += 164;
      v94 += 164;
      v88 = (_OWORD *)((char *)v88 + 164);
      a3 += 8;
      v87 = (__int128 *)((char *)v87 + 164);
      v86 = v135;
    }
    while (v96 != 73);
  }
  return result;
}

uint64_t sub_218BB4A00(uint64_t result, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  signed int v14;
  signed int v15;
  int v16;
  int v17;
  int8x16_t v18;
  int8x8_t v19;
  int8x16_t v20;
  int8x8_t v21;
  __int16 v22;
  unsigned int v23;
  int v24;
  int16x4_t v25;
  int8x16_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  uint64_t v41;
  int16x4_t v42;
  int v43;
  __int16 v44;
  __int16 v45;
  uint64_t v46;
  unint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x4_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x4_t v62;
  int v63;
  uint64_t v64;
  BOOL v65;
  int32x4_t v66;
  int16x4_t v67;
  int v68;
  int16x4_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _WORD *v81;
  _WORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int16x8_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int16x4_t v98;
  int16x4_t v99;
  int16x4_t v100;
  _WORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  int8x16x2_t v118;
  int8x16x2_t v119;
  int8x16x2_t v120;

  v4 = *(unsigned __int8 *)(result + 39);
  v5 = *(_DWORD *)(result + 4);
  v6 = *(unsigned __int8 *)(result + 60);
  v7 = (unsigned __int16)v5 >> 13;
  v8 = ((v5 >> 8) & 3) - v7;
  v9 = v8 + 4;
  v10 = 44;
  if ((v5 & 0x10000) == 0)
    v10 = 82;
  v11 = *(unsigned __int16 *)(result + 8);
  v12 = v5 & 0x20000;
  if ((v5 & 0x20000) != 0)
    v13 = 6;
  else
    v13 = 9;
  v14 = -(128 << v7);
  v15 = (256 << v7) + ~(128 << v7);
  v16 = v5 >> 6;
  v17 = *(unsigned __int8 *)(result + 10);
  v18 = *(int8x16_t *)(result + 105);
  v19 = *(int8x8_t *)(result + 121);
  v20 = *(int8x16_t *)(result + 130);
  v21 = *(int8x8_t *)(result + 146);
  v22 = *(char *)(result + 154);
  v23 = *(char *)(result + 129);
  if (*(_BYTE *)(result + 10))
  {
    v116 = *(char *)(result + 154);
    v24 = 0;
    v118.val[1] = (int8x16_t)vmovl_s8(*(int8x8_t *)(result + 97));
    v25 = (int16x4_t)vextq_s8(v118.val[1], (int8x16_t)0, 0xAuLL).u64[0];
    v26 = *(int8x16_t *)(result + 81);
    v118.val[0] = (int8x16_t)vmovl_high_s8(v26);
    v27 = (int16x8_t)vqtbl2q_s8(v118, (int8x16_t)xmmword_218BBBFE0);
    v28 = vmovl_s8(*(int8x8_t *)v26.i8);
    v29 = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v28.i8, (int8x16_t)xmmword_218BBBFD0);
    v30 = v28;
    v31 = 1 << (v8 + 3);
    if (v8 == -4)
      v32 = 0;
    else
      v32 = 1 << (v8 + 3);
    v33 = a3 - 768;
    v34 = 4;
    v30.i16[7] = 0;
    v35 = 3;
    v36 = a2;
    v37 = *(unsigned __int16 *)(result + 8);
    do
    {
      if ((uint64_t)v35 >= v24)
      {
        v38 = v24;
        v39 = a2 + 164 * v24;
        do
        {
          for (i = 0; i != 164; i += 2)
          {
            v37 = (v37 >> 1) & 0xFFFF7FFF | (((v37 ^ (v37 >> 3) ^ (v37 >> 12) ^ (v37 >> 1)) & 1) << 15);
            *(_WORD *)(v39 + i) = (v32 + word_218BCF84A[(unsigned __int16)v37 >> 5]) >> v9;
          }
          ++v38;
          v39 += 164;
        }
        while (v34 != (_DWORD)v38);
        v24 = v34;
      }
      v41 = 0;
      v42 = *(int16x4_t *)(a2 + 164 * v35);
      do
      {
        v43 = ((vaddvq_s32(vmlal_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)(v36 + v41), *(int16x4_t *)v28.i8), *(int16x8_t *)(v36 + v41), v30), *(int16x4_t *)(v36 + v41 + 164), *(int16x4_t *)v29.i8), *(int16x8_t *)(v36 + v41 + 164), v29), *(int16x4_t *)(v36 + v41 + 328), *(int16x4_t *)v27.i8), *(int16x8_t *)(v36 + v41 + 328), v27), v42, v25))
              + (32 << v16)) >> (v16 + 6))
            + *(__int16 *)(v36 + v41 + 498);
        if (v43 >= v15)
          v44 = v15;
        else
          v44 = v43;
        if (v43 <= v14)
          v45 = v14;
        else
          v45 = v44;
        *(_WORD *)(v36 + v41 + 498) = v45;
        v42 = (int16x4_t)vext_s8((int8x8_t)v42, (int8x8_t)v42, 2uLL);
        v42.i16[2] = v45;
        v41 += 2;
      }
      while (v41 != 152);
      if (a3 && v35 >= 9)
      {
        v46 = 0;
        v47 = -16;
        do
        {
          v48 = (_OWORD *)(v33 + v46);
          *v48 = *(_OWORD *)(v36 + v46 + 510);
          v48[1] = *(_OWORD *)(v36 + v46 + 526);
          v47 += 16;
          v46 += 32;
        }
        while (v47 < 0x30);
      }
      ++v35;
      ++v34;
      v36 += 164;
      v33 += 128;
    }
    while (v35 != 73);
    v22 = v116;
  }
  else
  {
    if (!(v6 | v4))
      return result;
    v31 = 1 << (v8 + 3);
  }
  v49 = 0;
  v50 = v11 ^ 0xB524;
  v51 = v11 ^ 0x49D8;
  v52 = vmovl_s8(*(int8x8_t *)v18.i8);
  v119.val[0] = (int8x16_t)vmovl_high_s8(v18);
  v119.val[1] = (int8x16_t)vmovl_s8(v19);
  v53 = v52;
  v53.i16[7] = 0;
  v54 = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v52.i8, (int8x16_t)xmmword_218BBBFD0);
  v55 = (int16x8_t)vqtbl2q_s8(v119, (int8x16_t)xmmword_218BBBFE0);
  v56 = (int16x4_t)vextq_s8(v119.val[1], (int8x16_t)0, 0xAuLL).u64[0];
  v57 = vmovl_s8(*(int8x8_t *)v20.i8);
  v120.val[0] = (int8x16_t)vmovl_high_s8(v20);
  v120.val[1] = (int8x16_t)vmovl_s8(v21);
  v58 = v57;
  v58.i16[7] = 0;
  v59 = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v57.i8, (int8x16_t)xmmword_218BBBFD0);
  v60 = (int16x8_t)vqtbl2q_s8(v120, (int8x16_t)xmmword_218BBBFE0);
  v61.i64[0] = vextq_s8(v120.val[1], (int8x16_t)0, 0xAuLL).u64[0];
  v61.i64[1] = v61.i64[0];
  v62 = vdup_n_s16(v23);
  v62.i16[1] = v22;
  v63 = v4 | v5 & 2;
  v64 = 38;
  if (!v12)
    v64 = 73;
  result = v63 == 0;
  v65 = (v6 | v5 & 2) == 0;
  v66 = vdupq_n_s32(-6 - v16);
  v67 = vdup_n_s16(v15);
  if (v9)
    v68 = v31;
  else
    v68 = 0;
  v69 = vdup_n_s16(v14);
  v111 = v64;
  v70 = 4;
  v71 = 3;
  v72 = 24442;
  v73 = 12470;
  v74 = 24272;
  v75 = 12300;
  v76 = 23944;
  v77 = 11972;
  do
  {
    v117 = v74;
    if (v71 >= (int)v49)
    {
      v78 = v73;
      v49 = (int)v49;
      v79 = a2 + 23944 + 164 * (int)v49;
      v80 = a2 + 11972 + 164 * (int)v49;
      do
      {
        v81 = (_WORD *)v80;
        v82 = (_WORD *)v79;
        v83 = v10;
        do
        {
          if ((result & 1) == 0)
          {
            v50 = (v50 >> 1) & 0xFFFF7FFF | ((((v50 ^ (v50 >> 3) ^ (v50 >> 12)) ^ (v50 >> 1)) & 1) << 15);
            *v81 = (v68 + word_218BCF84A[(unsigned __int16)v50 >> 5]) >> v9;
          }
          if (!v65)
          {
            v51 = (v51 >> 1) & 0xFFFF7FFF | ((((v51 ^ (v51 >> 3) ^ (v51 >> 12)) ^ (v51 >> 1)) & 1) << 15);
            *v82 = (v68 + word_218BCF84A[(unsigned __int16)v51 >> 5]) >> v9;
          }
          ++v82;
          ++v81;
          --v83;
        }
        while (v83);
        ++v49;
        v79 += 164;
        v80 += 164;
      }
      while ((_DWORD)v70 != (_DWORD)v49);
      v113 = v70;
      v73 = v78;
      v74 = v117;
    }
    else
    {
      v113 = v49;
    }
    v84 = a2 + 164 * v71;
    v87.i64[0] = *(_QWORD *)(v84 + 11972);
    v85 = *(_QWORD *)(v84 + 23944);
    LODWORD(v84) = ((_DWORD)v71 - 3) << (v12 >> 17);
    v86 = 164 * ((int)v84 + 4) + 6;
    v87.i64[1] = v85;
    v88 = 164 * ((int)v84 + 3) + 6;
    v89 = v75;
    v90 = v76;
    v91 = v77;
    v114 = v73;
    v115 = v72;
    v92 = v72;
    v93 = 38;
    do
    {
      v94 = *(int16x8_t *)(a2 + v89 + 11808);
      v95 = *(int16x8_t *)(a2 + v74);
      v96 = vpaddq_s32(vmlal_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)(a2 + v91), *(int16x4_t *)v52.i8), *(int16x8_t *)(a2 + v91), v53), *(int16x4_t *)(a2 + v91 + 164), *(int16x4_t *)v54.i8), *(int16x8_t *)(a2 + v91 + 164), v54), *(int16x4_t *)(a2 + v89), *(int16x4_t *)v55.i8), *(int16x8_t *)(a2 + v89), v55), *(int16x4_t *)v87.i8, v56),
              vmlal_high_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)(a2 + v90), *(int16x4_t *)v57.i8), *(int16x8_t *)(a2 + v90), v58), *(int16x4_t *)v94.i8, *(int16x4_t *)v59.i8), v94, v59), *(int16x4_t *)v95.i8, *(int16x4_t *)v60.i8), v95, v60), v87, v61));
      v97 = vpaddq_s32(v96, v96);
      if (v17)
      {
        v94.i32[0] = *(_DWORD *)(a2 + v88);
        if (v12)
        {
          v95.i32[0] = *(_DWORD *)(a2 + v86);
          v100 = (int16x4_t)vdup_lane_s32((int32x2_t)vadd_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v94.i8), 0);
          v99 = vrshr_n_s16(vpadd_s16(v100, v100), 2uLL);
        }
        else
        {
          v98 = (int16x4_t)vdup_lane_s32(*(int32x2_t *)v94.i8, 0);
          v99 = vrshr_n_s16(vpadd_s16(v98, v98), 1uLL);
        }
        v97 = vmlal_lane_s16(v97, v62, v99, 0);
      }
      v101 = (_WORD *)(a2 + v92);
      *(int16x4_t *)&v3 = vmax_s16(vmin_s16(vqadd_s16(vqmovn_s32(vrshlq_s32(v97, v66)), vzip1_s16(*(int16x4_t *)(a2 + v73), *(int16x4_t *)(a2 + v92))), v67), v69);
      *(_WORD *)(a2 + v73) = v3;
      v92 += 2;
      *v101 = WORD1(v3);
      v73 += 2;
      v86 += 4;
      v88 += 4;
      v74 += 2;
      v87 = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(&v3 - 1), (int8x16_t)xmmword_218BBBFF0);
      v91 += 2;
      v90 += 2;
      v89 += 2;
      --v93;
    }
    while (v93);
    if (a3 && v71 >= v13)
    {
      v102 = 0;
      v103 = a3 + ((uint64_t)((int)v71 - (int)v13) << 7);
      v104 = v103 + 0x2000;
      v105 = v103 + 0x4000;
      v106 = 1;
      do
      {
        v107 = a2 + 164 * v71;
        v108 = 2 * v102;
        *(_OWORD *)(v104 + v108) = *(_OWORD *)(v107 + 11972 + (v108 | 0xC));
        v109 = v108 | 0x10;
        *(_OWORD *)(v104 + v109) = *(_OWORD *)(v107 + 11972 + (v108 | 0x1C));
        v110 = v106;
        *(_OWORD *)(v105 + v108) = *(_OWORD *)(v107 + 23944 + (v108 | 0xC));
        *(_OWORD *)(v105 + v109) = *(_OWORD *)(v107 + 23944 + (v108 | 0x1C));
        v102 = 16;
        v106 = 0;
      }
      while ((v110 & 1) != 0);
    }
    ++v71;
    v70 = (v70 + 1);
    v72 = v115 + 164;
    v73 = v114 + 164;
    v74 = v117 + 164;
    v77 += 164;
    v76 += 164;
    v75 += 164;
    v49 = v113;
  }
  while (v71 != v111);
  return result;
}

uint64_t sub_218BB5054(uint64_t result, uint64_t a2, _OWORD *a3)
{
  __int128 v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  signed int v14;
  signed int v15;
  int v16;
  int8x16_t v17;
  int16x8_t v18;
  int16x8_t v19;
  unint64_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x4_t v23;
  int8x16_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  uint64_t v30;
  char v31;
  int16x4_t v32;
  int16x4_t v33;
  int8x16_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int v39;
  uint64_t v40;
  int32x4_t v41;
  uint64_t v42;
  int16x4_t v43;
  int16x4_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  uint64_t v55;
  _QWORD *v56;
  int16x4_t v57;
  int16x8_t v58;
  int16x4_t *v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int32x4_t v63;
  unint64_t v64;
  _OWORD *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 *v69;
  _OWORD *v70;
  uint64_t v71;
  int32x4_t v72;
  int16x4_t v73;
  int16x4_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  _OWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  uint64_t v85;
  _WORD *v86;
  _WORD *v87;
  _WORD *v88;
  _WORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t v93;
  int32x4_t v94;
  int16x4_t v95;
  unint64_t v96;
  __int128 *v97;
  _OWORD *v98;
  _OWORD *v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  _OWORD *v105;
  uint64_t v106;
  int8x16x2_t v107;
  int8x16x2_t v108;
  int8x16x2_t v109;

  v4 = *(_DWORD *)(result + 4);
  v5 = (v4 >> 1) & 1;
  if (*(_BYTE *)(result + 39))
    v5 = 1;
  v6 = *(_DWORD *)(result + 4) & 2;
  if (*(_BYTE *)(result + 60))
    v6 = 2;
  v7 = (unsigned __int16)v4 >> 13;
  v8 = ((v4 >> 8) & 3) - v7;
  v9 = v8 + 4;
  if ((v4 & 0x10000) != 0)
    v10 = 44;
  else
    v10 = 82;
  v11 = *(unsigned __int16 *)(result + 8);
  v12 = v11 ^ 0xB524;
  v13 = v11 ^ 0x49D8;
  v14 = -(128 << v7);
  v15 = (256 << v7) + ~(128 << v7);
  v16 = v4 >> 6;
  v17 = *(int8x16_t *)(result + 105);
  v18 = vmovl_s8(*(int8x8_t *)v17.i8);
  v107.val[0] = (int8x16_t)vmovl_high_s8(v17);
  v107.val[1] = (int8x16_t)vmovl_s8(*(int8x8_t *)(result + 121));
  v19 = v18;
  v19.i16[7] = 0;
  v20 = 0xFFFF1B1A19181716;
  v21 = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v18.i8, (int8x16_t)xmmword_218BBBFD0);
  v22 = (int16x8_t)vqtbl2q_s8(v107, (int8x16_t)xmmword_218BBBFE0);
  v23 = (int16x4_t)vextq_s8(v107.val[1], (int8x16_t)0, 0xAuLL).u64[0];
  v24 = *(int8x16_t *)(result + 130);
  v25 = vmovl_s8(*(int8x8_t *)v24.i8);
  v108.val[0] = (int8x16_t)vmovl_high_s8(v24);
  v108.val[1] = (int8x16_t)vmovl_s8(*(int8x8_t *)(result + 146));
  v26 = v25;
  v26.i16[7] = 0;
  v27 = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v25.i8, (int8x16_t)xmmword_218BBBFD0);
  v28 = (int16x8_t)vqtbl2q_s8(v108, (int8x16_t)xmmword_218BBBFE0);
  v29.i64[0] = vextq_s8(v108.val[1], (int8x16_t)0, 0xAuLL).u64[0];
  if (*(_BYTE *)(result + 10))
  {
    LODWORD(v30) = 0;
    v31 = v16 + 6;
    v109.val[1] = (int8x16_t)vmovl_s8(*(int8x8_t *)(result + 97));
    v32 = (int16x4_t)vextq_s8(v109.val[1], (int8x16_t)0, 0xAuLL).u64[0];
    v33 = vdup_n_s16(*(char *)(result + 129));
    v33.i16[1] = *(char *)(result + 154);
    v29.i64[1] = v29.i64[0];
    v34 = *(int8x16_t *)(result + 81);
    v109.val[0] = (int8x16_t)vmovl_high_s8(v34);
    v35 = (int16x8_t)vqtbl2q_s8(v109, (int8x16_t)xmmword_218BBBFE0);
    v36 = vmovl_s8(*(int8x8_t *)v34.i8);
    v37 = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v36.i8, (int8x16_t)xmmword_218BBBFD0);
    v38 = v36;
    v38.i16[7] = 0;
    v39 = 1 << (v8 + 3);
    if (v8 == -4)
      v39 = 0;
    result = (32 << v16);
    v40 = a2 + 11972;
    v41 = vdupq_n_s32(-6 - v16);
    v42 = a2 + 23944;
    v43 = vdup_n_s16(v15);
    v44 = vdup_n_s16(v14);
    v45 = a2 + 24442;
    v46 = a2 + 12470;
    v47 = a2 + 12300;
    v105 = a3 - 48;
    v48 = 4;
    v49 = 3;
    v101 = a2 + 23944;
    v102 = a2 + 11972;
    v50 = a2;
    do
    {
      if ((uint64_t)v49 >= (int)v30)
      {
        v30 = (int)v30;
        v51 = v101 + 164 * (int)v30;
        v52 = v102 + 164 * (int)v30;
        v53 = a2 + 164 * (int)v30;
        do
        {
          for (i = 0; i != 164; i += 2)
          {
            v11 = (v11 >> 1) & 0xFFFF7FFF | ((((v11 ^ (v11 >> 3) ^ (v11 >> 12)) ^ (v11 >> 1)) & 1) << 15);
            *(_WORD *)(v53 + i) = (v39 + word_218BCF84A[(unsigned __int16)v11 >> 5]) >> v9;
            if (v5)
            {
              v12 = (v12 >> 1) & 0xFFFF7FFF | ((((v12 ^ (v12 >> 3) ^ (v12 >> 12)) ^ (v12 >> 1)) & 1) << 15);
              *(_WORD *)(v52 + i) = (v39 + word_218BCF84A[(unsigned __int16)v12 >> 5]) >> v9;
            }
            if (v6)
            {
              v13 = (v13 >> 1) & 0xFFFF7FFF | ((((v13 ^ (v13 >> 3) ^ (v13 >> 12)) ^ (v13 >> 1)) & 1) << 15);
              *(_WORD *)(v51 + i) = (v39 + word_218BCF84A[(unsigned __int16)v13 >> 5]) >> v9;
            }
          }
          ++v30;
          v51 += 164;
          v52 += 164;
          v53 += 164;
        }
        while (v48 != (_DWORD)v30);
        LODWORD(v30) = v48;
      }
      v55 = 0;
      v56 = (_QWORD *)(a2 + 164 * v49);
      v57 = *(int16x4_t *)v56;
      v58.i64[0] = *(_QWORD *)((char *)v56 + 11972);
      v58.i64[1] = v56[2993];
      do
      {
        v59 = (int16x4_t *)(v50 + v55);
        v60 = ((vaddvq_s32(vmlal_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)(v50 + v55), *(int16x4_t *)v36.i8), *(int16x8_t *)(v50 + v55), v38), *(int16x4_t *)(v50 + v55 + 164), *(int16x4_t *)v37.i8), *(int16x8_t *)(v50 + v55 + 164), v37), *(int16x4_t *)(v50 + v55 + 328), *(int16x4_t *)v35.i8), *(int16x8_t *)(v50 + v55 + 328), v35), v57, v32))
              + (int)result) >> v31)
            + *(__int16 *)(v50 + v55 + 498);
        if (v60 >= v15)
          v61 = v15;
        else
          v61 = v60;
        if (v60 <= v14)
          v62 = v14;
        else
          v62 = v61;
        v59[62].i16[1] = v62;
        v63 = vpaddq_s32(vmlal_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)(v40 + v55), *(int16x4_t *)v18.i8), *(int16x8_t *)(v40 + v55), v19), *(int16x4_t *)(v40 + v55 + 164), *(int16x4_t *)v21.i8), *(int16x8_t *)(v40 + v55 + 164), v21), *(int16x4_t *)(v47 + v55), *(int16x4_t *)v22.i8), *(int16x8_t *)(v47 + v55), v22), *(int16x4_t *)v58.i8, v23),
                vmlal_high_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)(v42 + v55), *(int16x4_t *)v25.i8), *(int16x8_t *)(v42 + v55), v26), *(int16x4_t *)(v47 + v55 + 11808), *(int16x4_t *)v27.i8), *(int16x8_t *)(v47 + v55 + 11808), v27), v59[3034], *(int16x4_t *)v28.i8), *(int16x8_t *)v59[3034].i8, v28), v58, v29));
        *(int16x4_t *)&v3 = vmax_s16(vmin_s16(vqadd_s16(vqmovn_s32(vrshlq_s32(vmlal_s16(vpaddq_s32(v63, v63), vdup_n_s16(v62), v33), v41)), vzip1_s16(*(int16x4_t *)(v46 + v55), *(int16x4_t *)(v45 + v55))), v43), v44);
        v57 = (int16x4_t)vext_s8((int8x8_t)v57, (int8x8_t)v57, 2uLL);
        v57.i16[2] = v62;
        *(_WORD *)(v46 + v55) = v3;
        *(_WORD *)(v45 + v55) = WORD1(v3);
        v58 = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(&v3 - 1), (int8x16_t)xmmword_218BBBFF0);
        v55 += 2;
      }
      while (v55 != 152);
      if (a3 && v49 >= 9)
      {
        v64 = -16;
        v65 = v105;
        v66 = v50;
        do
        {
          *v65 = *(_OWORD *)(v66 + 510);
          v65[1] = *(_OWORD *)(v66 + 526);
          v65[512] = *(_OWORD *)(v66 + 12482);
          v65[513] = *(_OWORD *)(v66 + 12498);
          v65[1024] = *(_OWORD *)(v66 + 24454);
          v65[1025] = *(_OWORD *)(v66 + 24470);
          v64 += 16;
          v66 += 32;
          v65 += 2;
        }
        while (v64 < 0x30);
      }
      ++v49;
      ++v48;
      v45 += 164;
      v46 += 164;
      v50 += 164;
      v42 += 164;
      v47 += 164;
      v40 += 164;
      v105 += 8;
    }
    while (v49 != 73);
  }
  else if (*(unsigned __int8 *)(result + 60) | *(unsigned __int8 *)(result + 39))
  {
    v67 = 0;
    v68 = a2;
    v69 = (__int128 *)(a2 + 24470);
    v70 = (_OWORD *)(a2 + 12482);
    LODWORD(result) = 1 << (v8 + 3);
    if (v8 == -4)
      result = 0;
    else
      result = result;
    v71 = a2 + 11972;
    v72 = vdupq_n_s32(-6 - v16);
    v73 = vdup_n_s16(v15);
    v74 = vdup_n_s16(v14);
    v75 = a2 + 23944;
    v76 = a2 + 24442;
    v77 = a2 + 12470;
    v78 = a2 + 12300;
    v79 = 4;
    v80 = 3;
    v81 = a3;
    v106 = a2 + 23944;
    v82 = a2 + 11972;
    do
    {
      if ((uint64_t)v80 >= v67)
      {
        v85 = v67;
        v86 = (_WORD *)(v106 + 164 * v67);
        v87 = (_WORD *)(v82 + 164 * (int)v85);
        do
        {
          v88 = v87;
          v89 = v86;
          v90 = v10;
          do
          {
            if (v5)
            {
              v12 = (v12 >> 1) & 0xFFFF7FFF | ((((v12 ^ (v12 >> 3) ^ (v12 >> 12)) ^ (v12 >> 1)) & 1) << 15);
              *v88 = ((int)result + word_218BCF84A[(unsigned __int16)v12 >> 5]) >> v9;
            }
            if (v6)
            {
              v13 = (v13 >> 1) & 0xFFFF7FFF | ((((v13 ^ (v13 >> 3) ^ (v13 >> 12)) ^ (v13 >> 1)) & 1) << 15);
              *v89 = ((int)result + word_218BCF84A[(unsigned __int16)v13 >> 5]) >> v9;
            }
            ++v89;
            ++v88;
            --v90;
          }
          while (v90);
          ++v85;
          v86 += 82;
          v87 += 82;
        }
        while (v79 != (_DWORD)v85);
        v67 = v79;
        v84 = a3;
        v83 = a2;
      }
      else
      {
        v84 = a3;
        v83 = a2;
      }
      v91 = 0;
      v92 = v83 + 164 * v80;
      v93.i64[0] = *(_QWORD *)(v92 + 11972);
      v93.i64[1] = *(_QWORD *)(v92 + 23944);
      do
      {
        v94 = vpaddq_s32(vmlal_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)(v71 + v91), *(int16x4_t *)v18.i8), *(int16x8_t *)(v71 + v91), v19), *(int16x4_t *)(v71 + v91 + 164), *(int16x4_t *)v21.i8), *(int16x8_t *)(v71 + v91 + 164), v21), *(int16x4_t *)(v78 + v91), *(int16x4_t *)v22.i8), *(int16x8_t *)(v78 + v91), v22), *(int16x4_t *)v93.i8, v23),
                vmlal_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)(v75 + v91), *(int16x4_t *)v25.i8), *(int16x8_t *)(v75 + v91), v26), *(int16x4_t *)(v78 + v91 + 11808), *(int16x4_t *)v27.i8), *(int16x8_t *)(v78 + v91 + 11808), v27), *(int16x4_t *)(v68 + v91 + 24272), *(int16x4_t *)v28.i8), *(int16x8_t *)(v68 + v91 + 24272), v28), (int16x4_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL), *(int16x4_t *)v29.i8));
        v95 = vmax_s16(vmin_s16(vqadd_s16(vqmovn_s32(vrshlq_s32(vpaddq_s32(v94, v94), v72)), vzip1_s16(*(int16x4_t *)(v77 + v91), *(int16x4_t *)(v76 + v91))), v73), v74);
        *(_WORD *)(v77 + v91) = v95.i16[0];
        *(_WORD *)(v76 + v91) = v95.i16[1];
        v93 = vqtbl2q_s8(*(int8x16x2_t *)(&v20 - 3), (int8x16_t)xmmword_218BBBFF0);
        v91 += 2;
      }
      while (v91 != 152);
      if (v84 && v80 >= 9)
      {
        v96 = -16;
        v97 = v69;
        v98 = v81;
        v99 = v70;
        do
        {
          v98[464] = *v99;
          v98[465] = v99[1];
          v98[976] = *(v97 - 1);
          v96 += 16;
          v100 = *v97;
          v97 += 2;
          v98[977] = v100;
          v99 += 2;
          v98 += 2;
        }
        while (v96 < 0x30);
      }
      ++v80;
      ++v79;
      v76 += 164;
      v77 += 164;
      v68 += 164;
      v71 += 164;
      v75 += 164;
      v78 += 164;
      v70 = (_OWORD *)((char *)v70 + 164);
      v81 += 8;
      v69 = (__int128 *)((char *)v69 + 164);
    }
    while (v80 != 73);
  }
  return result;
}

uint64_t sub_218BB57A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  uint64_t v12;
  unint64_t v13;
  int16x8x2_t v14;

  v3 = 0;
  v4 = *(_DWORD *)(result + 4);
  v5 = 12;
  if ((v4 & 0x10000) == 0)
    v5 = 18;
  v6 = (v4 & 0x20000) == 0;
  v7 = 984;
  if (v6)
    v7 = 1476;
  v8 = v7 + v5 + a2;
  v9 = v8 + 23944;
  v10 = v8 + 11972;
  v11 = (__int16 *)(a3 + 0x2000);
  do
  {
    v12 = 0;
    v13 = -8;
    do
    {
      *(_OWORD *)(a3 + v12) = *(_OWORD *)(a2 + v12 + 1494);
      v14.val[0] = *(int16x8_t *)(v10 + v12);
      v14.val[1] = *(int16x8_t *)(v9 + v12);
      vst2q_s16(v11, v14);
      v11 += 16;
      v13 += 8;
      v12 += 16;
    }
    while (v13 < 0x38);
    a3 += v12;
    ++v3;
    v9 += 164;
    v10 += 164;
    a2 += 164;
  }
  while (v3 != 64);
  return result;
}

double sub_218BB5840(_BYTE *a1, _OWORD *a2, int a3)
{
  int v3;
  _BYTE *v4;
  const char *v5;
  unsigned int v6;
  int8x16_t v7;
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int32x4_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v17;
  unsigned int v18;
  int32x4_t v19;
  int16x8_t v20;
  _BYTE *v21;
  int32x4_t v22;
  int32x4_t v23;
  const char *v24;
  int8x16_t v25;
  uint64_t i;
  unint64_t v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  BOOL v31;
  _BYTE v33[272];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (a1[10] >= 0xEu)
    v3 = 14;
  else
    v3 = a1[10];
  v4 = a1 + 11;
  v5 = a1 + 25;
  if (a3 && (a1[4] & 2) == 0)
  {
    if (a3 != 1)
    {
      if (a1[60] >= 0xAu)
        v3 = 10;
      else
        v3 = a1[60];
      v4 = a1 + 61;
      v5 = a1 + 71;
      if (v3)
        goto LABEL_12;
LABEL_38:
      *(_QWORD *)&v29 = 0;
      a2[14] = 0u;
      a2[15] = 0u;
      a2[12] = 0u;
      a2[13] = 0u;
      a2[10] = 0u;
      a2[11] = 0u;
      a2[8] = 0u;
      a2[9] = 0u;
      a2[6] = 0u;
      a2[7] = 0u;
      a2[4] = 0u;
      a2[5] = 0u;
      a2[2] = 0u;
      a2[3] = 0u;
      *a2 = 0u;
      a2[1] = 0u;
      return *(double *)&v29;
    }
    if (a1[39] >= 0xAu)
      v3 = 10;
    else
      v3 = a1[39];
    v4 = a1 + 40;
    v5 = a1 + 50;
  }
  if (!v3)
    goto LABEL_38;
LABEL_12:
  v6 = *v4;
  if (*v4)
  {
    v7 = vld1q_dup_s8(v5);
    v8 = (int8x16_t *)v33;
    v9 = *v4;
    do
    {
      *v8 = v7;
      v8 = (int8x16_t *)((char *)v8 + 1);
      --v9;
    }
    while (v9);
  }
  v10 = (v3 - 1);
  if (v3 < 2)
  {
    v14 = v6;
  }
  else
  {
    v11 = 0;
    v12.i64[0] = 0x800000008;
    v12.i64[1] = 0x800000008;
    do
    {
      v13 = v11 + 1;
      v14 = v4[v11 + 1];
      v15 = 256 - v6;
      if ((int)(v14 - v6) < (int)(256 - v6))
        v15 = v14 - v6;
      if ((int)(v14 - v6) >= 1 && v15 != 0)
      {
        v17 = 0;
        v18 = v5[v11];
        v19 = vdupq_n_s32((v5[v13] - v18) * (((v15 >> 1) + 0x10000) / v15));
        v20 = vdupq_n_s16(v18);
        v21 = &v33[v6];
        v22 = (int32x4_t)xmmword_218BBBF60;
        v23 = (int32x4_t)xmmword_218BBBF50;
        do
        {
          *(int8x8_t *)&v21[v17] = vmovn_s16(vaddq_s16(vraddhn_high_s32(vraddhn_s32(vmulq_s32(v22, v19), (int32x4_t)0), vmulq_s32(v23, v19), (int32x4_t)0), v20));
          v22 = vaddq_s32(v22, v12);
          v23 = vaddq_s32(v23, v12);
          v17 += 8;
        }
        while (v17 < v15);
      }
      v11 = v13;
      v6 = v14;
    }
    while (v13 != v10);
  }
  v24 = &v5[v10];
  v25 = vld1q_dup_s8(v24);
  for (i = v14; i != 256; ++i)
    *(int8x16_t *)&v33[i] = v25;
  v27 = 0;
  do
  {
    v28 = &a2[v27];
    v29 = *(_OWORD *)&v33[v27 * 16];
    v30 = *(_OWORD *)&v33[v27 * 16 + 16];
    *v28 = v29;
    v28[1] = v30;
    v31 = v27 >= 14;
    v27 += 2;
  }
  while (!v31);
  return *(double *)&v29;
}

uint64_t sub_218BB5A68(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t a3)
{
  int v6;
  size_t v7;
  char *BaseAddressOfPlane;
  char *v9;
  size_t BytesPerRowOfPlane;
  size_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  char v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  int v27;
  int v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int8x16x2_t v37;
  int8x16x2_t v38;

  v6 = *(_DWORD *)(a1 + 60);
  v7 = *(int *)(a1 + 56);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 264) + 24))
  {
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
    v9 = *(char **)(a1 + 16);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
    if (v6 >= 1)
    {
      v11 = BytesPerRowOfPlane;
      v12 = *(_QWORD *)(a1 + 40);
      v13 = &BaseAddressOfPlane[BytesPerRowOfPlane * (a3 >> 32) + (int)a3];
      v14 = v6;
      do
      {
        memcpy(v13, v9, v7);
        v13 += v11;
        v9 += v12;
        --v14;
      }
      while (v14);
    }
  }
  v15 = *(_DWORD *)(a1 + 64);
  if (v15)
  {
    v16 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
    v17 = *(_QWORD *)(a1 + 24);
    v18 = *(_QWORD *)(a1 + 32);
    v19 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
    v20 = v15 == 1;
    v21 = v15 == 1 ? v6 + 1 : v6;
    v22 = v21 >> v20;
    if (v22 >= 1)
    {
      v23 = 0;
      v24 = *(_QWORD *)(a1 + 48);
      v25 = SHIDWORD(a3) >> v20;
      v26 = v15 != 3;
      if (v15 == 3)
        v27 = v7;
      else
        v27 = v7 + 1;
      v28 = v27 >> v26;
      v29 = v19 * v25 + 2 * ((int)a3 >> v26);
      v30 = v28;
      v31 = (uint64_t)v16 + v29 + 32;
      do
      {
        if ((int)v30 >= 1)
        {
          v32 = (char *)v31;
          v33 = 16;
          do
          {
            v37.val[0] = *(int8x16_t *)(v17 + v33 - 16);
            v38.val[0] = *(int8x16_t *)(v17 + v33);
            v37.val[1] = *(int8x16_t *)(v18 + v33 - 16);
            v38.val[1] = *(int8x16_t *)(v18 + v33);
            v34 = v32 - 32;
            vst2q_s8(v34, v37);
            vst2q_s8(v32, v38);
            v35 = v33 + 16;
            v33 += 32;
            v32 += 64;
          }
          while (v35 < v30);
        }
        v17 += v24;
        v18 += v24;
        ++v23;
        v31 += v19;
      }
      while (v23 != v22);
    }
  }
  return 0;
}

uint64_t sub_218BB5C00(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t *v19;
  int16x8_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  char v26;
  int v27;
  int v28;
  int v29;
  size_t v30;
  int v31;
  char v32;
  int v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 *v41;
  int16x8_t v42;
  int16x8_t v43;
  __int16 *v44;
  int v45;
  uint64_t v46;
  char *BaseAddressOfPlane;
  uint64_t v48;
  size_t BytesPerRowOfPlane;
  int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t *v57;
  int16x8_t v58;
  int v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  size_t v63;
  char v64;
  int v65;
  int v66;
  int v67;
  size_t v68;
  int v69;
  char v70;
  int v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int16 *v79;
  int16x8_t v80;
  int16x8_t v81;
  __int16 *v82;
  int16x8x2_t v84;
  int16x8x2_t v85;
  int16x8x2_t v86;
  int16x8x2_t v87;

  v6 = *(_DWORD *)(a1 + 68);
  if (v6 == 12)
  {
    v45 = *(_DWORD *)(a1 + 60);
    v46 = *(int *)(a1 + 56);
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 264) + 24))
    {
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      v48 = *(_QWORD *)(a1 + 16);
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
      if (v45 >= 1)
      {
        v50 = 0;
        v51 = &BaseAddressOfPlane[2 * (BytesPerRowOfPlane >> 1) * (a3 >> 32) + 2 * (int)a3];
        v52 = 2 * (*(uint64_t *)(a1 + 40) >> 1);
        do
        {
          if ((int)v46 >= 1)
          {
            v53 = 0;
            for (i = 0; i < v46; i += 32)
            {
              v55 = *(int16x8_t *)(v48 + v53 + 32);
              v56 = *(int16x8_t *)(v48 + v53 + 48);
              v57 = (int16x8_t *)&v51[v53];
              v58 = vshlq_n_s16(*(int16x8_t *)(v48 + v53 + 16), 4uLL);
              *v57 = vshlq_n_s16(*(int16x8_t *)(v48 + v53), 4uLL);
              v57[1] = v58;
              v57[2] = vshlq_n_s16(v55, 4uLL);
              v57[3] = vshlq_n_s16(v56, 4uLL);
              v53 += 64;
            }
          }
          ++v50;
          v48 += v52;
          v51 += 2 * (BytesPerRowOfPlane >> 1);
        }
        while (v50 != v45);
      }
    }
    v59 = *(_DWORD *)(a1 + 64);
    if (v59)
    {
      v60 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
      v61 = *(_QWORD *)(a1 + 24);
      v62 = *(_QWORD *)(a1 + 32);
      v63 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
      v64 = v59 == 1;
      v65 = v59 == 1 ? v45 + 1 : v45;
      v66 = v65 >> v64;
      if (v66 >= 1)
      {
        v67 = 0;
        v68 = v63 >> 1;
        v69 = SHIDWORD(a3) >> v64;
        v70 = v59 != 3;
        if (v59 == 3)
          v71 = v46;
        else
          v71 = v46 + 1;
        v72 = v68 * v69 + 2 * ((int)a3 >> v70);
        v73 = v71 >> v70;
        v74 = 2 * (*(uint64_t *)(a1 + 48) >> 1);
        v75 = (uint64_t)v60 + 2 * v72 + 32;
        v76 = 2 * v68;
        do
        {
          if ((int)v73 >= 1)
          {
            v77 = 0;
            v78 = 0;
            v79 = (__int16 *)v75;
            do
            {
              v80 = *(int16x8_t *)(v61 + v77 + 16);
              v87.val[0] = vshlq_n_s16(*(int16x8_t *)(v61 + v77), 4uLL);
              v81 = *(int16x8_t *)(v62 + v77 + 16);
              v87.val[1] = vshlq_n_s16(*(int16x8_t *)(v62 + v77), 4uLL);
              v82 = v79 - 16;
              vst2q_s16(v82, v87);
              v85.val[0] = vshlq_n_s16(v80, 4uLL);
              v85.val[1] = vshlq_n_s16(v81, 4uLL);
              vst2q_s16(v79, v85);
              v78 += 16;
              v77 += 32;
              v79 += 32;
            }
            while (v78 < v73);
          }
          ++v67;
          v61 += v74;
          v75 += v76;
          v62 += v74;
        }
        while (v67 != v66);
      }
    }
    return 0;
  }
  if (v6 == 10)
  {
    v7 = *(_DWORD *)(a1 + 60);
    v8 = *(int *)(a1 + 56);
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 264) + 24))
    {
      v9 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      v10 = *(_QWORD *)(a1 + 16);
      v11 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
      if (v7 >= 1)
      {
        v12 = 0;
        v13 = &v9[2 * (v11 >> 1) * (a3 >> 32) + 2 * (int)a3];
        v14 = 2 * (*(uint64_t *)(a1 + 40) >> 1);
        do
        {
          if ((int)v8 >= 1)
          {
            v15 = 0;
            for (j = 0; j < v8; j += 32)
            {
              v17 = *(int16x8_t *)(v10 + v15 + 32);
              v18 = *(int16x8_t *)(v10 + v15 + 48);
              v19 = (int16x8_t *)&v13[v15];
              v20 = vshlq_n_s16(*(int16x8_t *)(v10 + v15 + 16), 6uLL);
              *v19 = vshlq_n_s16(*(int16x8_t *)(v10 + v15), 6uLL);
              v19[1] = v20;
              v19[2] = vshlq_n_s16(v17, 6uLL);
              v19[3] = vshlq_n_s16(v18, 6uLL);
              v15 += 64;
            }
          }
          ++v12;
          v10 += v14;
          v13 += 2 * (v11 >> 1);
        }
        while (v12 != v7);
      }
    }
    v21 = *(_DWORD *)(a1 + 64);
    if (v21)
    {
      v22 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
      v23 = *(_QWORD *)(a1 + 24);
      v24 = *(_QWORD *)(a1 + 32);
      v25 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
      v26 = v21 == 1;
      v27 = v21 == 1 ? v7 + 1 : v7;
      v28 = v27 >> v26;
      if (v28 >= 1)
      {
        v29 = 0;
        v30 = v25 >> 1;
        v31 = SHIDWORD(a3) >> v26;
        v32 = v21 != 3;
        if (v21 == 3)
          v33 = v8;
        else
          v33 = v8 + 1;
        v34 = v30 * v31 + 2 * ((int)a3 >> v32);
        v35 = v33 >> v32;
        v36 = 2 * (*(uint64_t *)(a1 + 48) >> 1);
        v37 = (uint64_t)v22 + 2 * v34 + 32;
        v38 = 2 * v30;
        do
        {
          if ((int)v35 >= 1)
          {
            v39 = 0;
            v40 = 0;
            v41 = (__int16 *)v37;
            do
            {
              v42 = *(int16x8_t *)(v23 + v39 + 16);
              v86.val[0] = vshlq_n_s16(*(int16x8_t *)(v23 + v39), 6uLL);
              v43 = *(int16x8_t *)(v24 + v39 + 16);
              v86.val[1] = vshlq_n_s16(*(int16x8_t *)(v24 + v39), 6uLL);
              v44 = v41 - 16;
              vst2q_s16(v44, v86);
              v84.val[0] = vshlq_n_s16(v42, 6uLL);
              v84.val[1] = vshlq_n_s16(v43, 6uLL);
              vst2q_s16(v41, v84);
              v40 += 16;
              v39 += 32;
              v41 += 32;
            }
            while (v40 < v35);
          }
          ++v29;
          v23 += v36;
          v37 += v38;
          v24 += v36;
        }
        while (v29 != v28);
      }
    }
    return 0;
  }
  return 4294954391;
}

uint64_t sub_218BB5FE0(uint64_t a1, CVPixelBufferRef pixelBuffer)
{
  uint64_t v4;
  uint64_t v5;
  char *BaseAddressOfPlane;
  uint64_t v7;
  size_t BytesPerRowOfPlane;
  uint64_t i;
  uint64_t v10;
  int32x4_t *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  size_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int32x4_t *v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16x2_t v33;
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;

  v4 = *(unsigned int *)(a1 + 60);
  v5 = *(int *)(a1 + 56);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  v7 = *(_QWORD *)(a1 + 16);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
  if ((int)v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((int)v5 >= 1)
      {
        v10 = 0;
        v11 = (int32x4_t *)&BaseAddressOfPlane[BytesPerRowOfPlane * i];
        v12 = (_OWORD *)(v7 + 32 + *(_QWORD *)(a1 + 40) * i);
        do
        {
          v34 = *(int8x16x2_t *)((_BYTE *)v12 - 1);
          v13 = *v12;
          v12 += 3;
          v14 = v13;
          *v11 = vsliq_n_s32(vsliq_n_s32((int32x4_t)vqtbl2q_s8(v34, (int8x16_t)xmmword_218BBC000), (int32x4_t)vqtbl2q_s8(v34, (int8x16_t)xmmword_218BBC010), 0xAuLL), (int32x4_t)vqtbl2q_s8(v34, (int8x16_t)xmmword_218BBC020), 0x14uLL);
          v11[1] = vsliq_n_s32(vsliq_n_s32((int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)((char *)&v34 + 16), (int8x16_t)xmmword_218BBC030), (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)((char *)&v34 + 16), (int8x16_t)xmmword_218BBC040), 0xAuLL), (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)((char *)&v34 + 16), (int8x16_t)xmmword_218BBC050), 0x14uLL);
          v11 += 2;
          v10 += 24;
        }
        while (v10 < v5);
      }
    }
  }
  v15 = *(_DWORD *)(a1 + 64);
  if (v15)
  {
    v16 = *(_QWORD *)(a1 + 24);
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(_QWORD *)(a1 + 48);
    v19 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
    v20 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
    v21 = v15 == 1 ? v4 + 1 : v4;
    v22 = (v21 >> (v15 == 1));
    if ((int)v22 >= 1)
    {
      v23 = 0;
      if (v15 == 3)
        v24 = v5;
      else
        v24 = v5 + 1;
      v25 = v24 >> (v15 != 3);
      v26 = 2 * (v18 >> 1);
      do
      {
        if ((int)v25 >= 1)
        {
          v27 = 0;
          v28 = 0;
          v29 = (int32x4_t *)&v19[v20 * v23];
          do
          {
            v33.val[0] = *(int8x16_t *)(v16 + v27);
            v30 = *(int8x16_t *)(v16 + v27 + 16);
            v35.val[0] = *(int8x16_t *)(v16 + v27 + 32);
            v33.val[1] = *(int8x16_t *)(v17 + v27);
            v31 = *(int8x16_t *)(v17 + v27 + 16);
            v35.val[1] = *(int8x16_t *)(v17 + v27 + 32);
            v36.val[0] = vextq_s8(v33.val[0], v30, 0xCuLL);
            v36.val[1] = vextq_s8(v33.val[1], v31, 0xCuLL);
            v37.val[0] = vextq_s8(v30, v35.val[0], 8uLL);
            v37.val[1] = vextq_s8(v31, v35.val[1], 8uLL);
            *v29 = vsliq_n_s32(vsliq_n_s32((int32x4_t)vqtbl2q_s8(v33, (int8x16_t)xmmword_218BBC060), (int32x4_t)vqtbl2q_s8(v33, (int8x16_t)xmmword_218BBC070), 0xAuLL), (int32x4_t)vqtbl2q_s8(v33, (int8x16_t)xmmword_218BBC080), 0x14uLL);
            v29[1] = vsliq_n_s32(vsliq_n_s32((int32x4_t)vqtbl2q_s8(v36, (int8x16_t)xmmword_218BBC060), (int32x4_t)vqtbl2q_s8(v36, (int8x16_t)xmmword_218BBC070), 0xAuLL), (int32x4_t)vqtbl2q_s8(v36, (int8x16_t)xmmword_218BBC080), 0x14uLL);
            v29[2] = vsliq_n_s32(vsliq_n_s32((int32x4_t)vqtbl2q_s8(v37, (int8x16_t)xmmword_218BBC060), (int32x4_t)vqtbl2q_s8(v37, (int8x16_t)xmmword_218BBC070), 0xAuLL), (int32x4_t)vqtbl2q_s8(v37, (int8x16_t)xmmword_218BBC080), 0x14uLL);
            v29[3] = vsliq_n_s32(vsliq_n_s32((int32x4_t)vqtbl2q_s8(v35, (int8x16_t)xmmword_218BBC090), (int32x4_t)vqtbl2q_s8(v35, (int8x16_t)xmmword_218BBC0A0), 0xAuLL), (int32x4_t)vqtbl2q_s8(v35, (int8x16_t)xmmword_218BBC0B0), 0x14uLL);
            v28 += 24;
            v27 += 48;
            v29 += 4;
          }
          while (v28 < v25);
        }
        ++v23;
        v16 += v26;
        v17 += v26;
      }
      while (v23 != v22);
    }
  }
  return 0;
}

uint64_t sub_218BB6238(int a1)
{
  uint64_t v1;
  int v2;
  unsigned __int16 v3;
  int v4;
  int v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  unsigned int v9;
  unsigned int v10;

  v1 = 8;
  if (a1 > 1278226487)
  {
    if (a1 <= 1886680623)
    {
      if (a1 <= 1885745711)
      {
        if (a1 <= 1882468911)
        {
          if (a1 == 1278226488)
            return v1;
          if (a1 == 1278226736)
            return 10;
          v4 = 1278226738;
LABEL_71:
          if (a1 == v4)
            return 12;
          return 0;
        }
        if (a1 == 1882468912 || a1 == 1882468914)
          return 10;
        v5 = 1882469428;
        goto LABEL_76;
      }
      if (a1 <= 1886676527)
      {
        if (a1 == 1885745712 || a1 == 1885745714)
          return 10;
        v5 = 1885746228;
        goto LABEL_76;
      }
      v8 = -26160;
    }
    else
    {
      if (a1 > 1953903153)
      {
        if (a1 > 2016687155)
        {
          if (a1 > 2019963441)
          {
            if (a1 == 2019963956)
              return 10;
            v7 = 12850;
          }
          else
          {
            if (a1 == 2016687156)
              return 10;
            v7 = 12848;
          }
          v5 = v7 | 0x78660000;
        }
        else
        {
          if (a1 <= 2016686639)
          {
            if (a1 == 1953903154)
              return 12;
            v3 = 13364;
LABEL_70:
            v4 = v3 | 0x74760000;
            goto LABEL_71;
          }
          if (a1 == 2016686640)
            return 10;
          v5 = 2016686642;
        }
LABEL_76:
        if (a1 == v5)
          return 10;
        return 0;
      }
      if (a1 > 1952854575)
      {
        if (a1 <= 1952855091)
        {
          if (a1 == 1952854576)
            return 12;
          v4 = 1952854578;
          goto LABEL_71;
        }
        if (a1 == 1952855092)
          return 12;
        v3 = 12848;
        goto LABEL_70;
      }
      v8 = -30256;
    }
    v9 = v8 | 0x8F8B0000;
    goto LABEL_58;
  }
  if (a1 <= 645166639)
  {
    if (a1 <= 642527287)
    {
      if (((a1 - 641230384) > 4 || ((1 << (a1 - 48)) & 0x15) == 0)
        && ((a1 - 641234480) > 4 || ((1 << (a1 - 48)) & 0x15) == 0))
      {
        return 0;
      }
      return v1;
    }
    if (a1 <= 645162543)
    {
      if (a1 == 642527288)
        return v1;
      if (a1 == 642527536)
        return 10;
      v4 = 642527538;
      goto LABEL_71;
    }
    v9 = -645162544;
LABEL_58:
    v10 = a1 + v9;
    if (v10 > 4 || ((1 << v10) & 0x15) == 0)
      return 0;
    return 12;
  }
  if (a1 <= 645428783)
  {
    if ((a1 - 645166640) > 4 || ((1 << (a1 - 48)) & 0x15) == 0)
    {
      if ((a1 - 645424688) > 4 || ((1 << (a1 - 48)) & 0x15) == 0)
        return 0;
      return 10;
    }
    return 12;
  }
  if (a1 <= 875704437)
  {
    if ((a1 - 645428784) > 4 || ((1 << (a1 - 48)) & 0x15) == 0)
    {
      v6 = 12390;
      goto LABEL_63;
    }
    return 10;
  }
  if (a1 > 875704949)
  {
    if (a1 == 875704950 || a1 == 875836518)
      return v1;
    v2 = 875836534;
    goto LABEL_64;
  }
  if (a1 == 875704438)
    return v1;
  v6 = 12902;
LABEL_63:
  v2 = v6 | 0x34320000;
LABEL_64:
  if (a1 != v2)
    return 0;
  return v1;
}

uint64_t sub_218BB6630(int a1)
{
  uint64_t result;
  unsigned __int16 v3;
  int v4;

  result = 1;
  if (a1 > 1885746227)
  {
    if (((a1 - 1886676528) > 4 || ((1 << (a1 - 48)) & 0x15) == 0)
      && ((a1 - 1886680624) > 4 || ((1 << (a1 - 48)) & 0x15) == 0))
    {
      v3 = 13364;
      goto LABEL_10;
    }
  }
  else
  {
    if (a1 <= 1882469427)
    {
      if (a1 == 1882468912)
        return result;
      v4 = 1882468914;
      goto LABEL_15;
    }
    if (a1 != 1882469428 && a1 != 1885745712)
    {
      v3 = 12850;
LABEL_10:
      v4 = v3 | 0x70660000;
LABEL_15:
      if (a1 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t sub_218BB670C(int a1)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  result = 1;
  if (a1 > 645166639)
  {
    if (((a1 - 645166640) > 4 || ((1 << (a1 - 48)) & 0x15) == 0)
      && ((a1 - 645424688) > 4 || ((1 << (a1 - 48)) & 0x15) == 0))
    {
      v3 = -645428784;
LABEL_8:
      v4 = a1 + v3;
      if (v4 <= 4 && ((1 << v4) & 0x15) != 0)
        return result;
      return 0;
    }
  }
  else
  {
    if (a1 <= 642527535)
    {
      if ((a1 - 641230384) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0)
        return result;
      v3 = -641234480;
      goto LABEL_8;
    }
    if (((a1 - 645162544) > 4 || ((1 << (a1 - 48)) & 0x15) == 0) && a1 != 642527536 && a1 != 642527538)
      return 0;
  }
  return result;
}

uint64_t sub_218BB6840(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 > 1882469427)
  {
    if (a1 > 1952855091)
    {
      if (a1 > 2016687155)
      {
        if (a1 == 2016687156)
          return result;
        v3 = 2019963956;
      }
      else
      {
        if (a1 == 1952855092)
          return result;
        v3 = 1953903668;
      }
    }
    else if (a1 > 1886676531)
    {
      if (a1 == 1886676532)
        return result;
      v3 = 1886680628;
    }
    else
    {
      if (a1 == 1882469428)
        return result;
      v3 = 1885746228;
    }
  }
  else if (a1 > 645424691)
  {
    if (a1 > 875836517)
    {
      if (a1 == 875836518)
        return result;
      v3 = 875836534;
    }
    else
    {
      if (a1 == 645424692)
        return result;
      v3 = 645428788;
    }
  }
  else if (a1 > 645162547)
  {
    if (a1 == 645162548)
      return result;
    v3 = 645166644;
  }
  else
  {
    if (a1 == 641230388)
      return result;
    v3 = 641234484;
  }
  if (a1 != v3)
    return 0;
  return result;
}

BOOL sub_218BB69A8(uint64_t a1, _DWORD *a2)
{
  return *(_DWORD *)a1 == a2[14]
      && *(_DWORD *)(a1 + 4) == a2[15]
      && *(_DWORD *)(a1 + 8) == a2[16]
      && *(_DWORD *)(a1 + 12) == a2[17]
      && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(*(_QWORD *)a2 + 33)
      && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(*(_QWORD *)a2 + 421);
}

uint64_t sub_218BB6A18(uint64_t a1)
{
  uint64_t i;
  uint64_t j;

  for (i = 0; i != 3; ++i)
  {
    if (*(_BYTE *)(a1 + i + 27))
    {
      CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 8 * i), *(_QWORD *)(a1 + 8 * i + 32));
      *(_BYTE *)(a1 + i + 27) = 0;
    }
  }
  for (j = 16; j != -8; j -= 8)
    sub_218B5AFAC((const void **)(a1 + j));
  return a1;
}

_QWORD *sub_218BB6A8C(_QWORD *result)
{
  *result = sub_218B612EC;
  result[1] = sub_218B613A0;
  result[2] = sub_218B61360;
  result[3] = sub_218B613E0;
  result[8] = sub_218B61458;
  result[9] = sub_218B61328;
  result[4] = sub_218B614D8;
  result[5] = sub_218B61498;
  result[6] = sub_218B61518;
  result[7] = sub_218B61418;
  result[10] = sub_218B61590;
  result[11] = sub_218B61550;
  result[14] = sub_218B61610;
  result[15] = sub_218B615D0;
  result[12] = sub_218B61690;
  result[13] = sub_218B61650;
  result[85] = sub_218B616D0;
  result[94] = sub_218B61714;
  result[87] = sub_218B61754;
  result[86] = sub_218B61794;
  result[88] = sub_218B617D4;
  result[92] = sub_218B61814;
  result[93] = sub_218B61854;
  result[90] = sub_218B61894;
  result[89] = sub_218B618D4;
  result[91] = sub_218B61914;
  result[96] = sub_218B61954;
  result[95] = sub_218B61994;
  result[100] = sub_218B619D4;
  result[99] = sub_218B61A14;
  result[98] = sub_218B61A54;
  result[97] = sub_218B61A94;
  result[221] = sub_218B61AD4;
  result[230] = sub_218B61B18;
  result[223] = sub_218B61B58;
  result[222] = sub_218B61B98;
  result[224] = sub_218B61BD8;
  result[228] = sub_218B61C18;
  result[229] = sub_218B61C58;
  result[226] = sub_218B61C98;
  result[225] = sub_218B61CD8;
  result[227] = sub_218B61D18;
  result[232] = sub_218B61D58;
  result[231] = sub_218B61D98;
  result[236] = sub_218B61DD8;
  result[235] = sub_218B61E18;
  result[234] = sub_218B61E58;
  result[233] = sub_218B61E98;
  result[102] = sub_218B61ED8;
  result[111] = sub_218B61F1C;
  result[104] = sub_218B61F5C;
  result[103] = sub_218B61F9C;
  result[105] = sub_218B61FDC;
  result[109] = sub_218B6201C;
  result[110] = sub_218B6205C;
  result[107] = sub_218B6209C;
  result[106] = sub_218B620DC;
  result[108] = sub_218B6211C;
  result[113] = sub_218B6215C;
  result[112] = sub_218B6219C;
  result[117] = sub_218B621DC;
  result[116] = sub_218B6221C;
  result[115] = sub_218B6225C;
  result[114] = sub_218B6229C;
  result[16] = sub_218B611BC;
  result[17] = sub_218B622DC;
  result[18] = sub_218B62390;
  result[19] = sub_218B62350;
  result[24] = sub_218B62408;
  result[25] = sub_218B62448;
  result[20] = sub_218B623D0;
  result[21] = sub_218B624C8;
  result[22] = sub_218B62488;
  result[23] = sub_218B62508;
  result[26] = sub_218B62318;
  result[27] = sub_218B62580;
  result[31] = sub_218B62600;
  result[32] = sub_218B625C0;
  result[30] = sub_218B62640;
  result[28] = sub_218B62540;
  result[29] = sub_218B62680;
  result[119] = sub_218B626C0;
  result[128] = sub_218B62704;
  result[121] = sub_218B62744;
  result[120] = sub_218B62784;
  result[122] = sub_218B627C4;
  result[126] = sub_218B62804;
  result[127] = sub_218B62844;
  result[124] = sub_218B62884;
  result[123] = sub_218B628C4;
  result[125] = sub_218B62904;
  result[130] = sub_218B62944;
  result[129] = sub_218B62984;
  result[134] = sub_218B629C4;
  result[133] = sub_218B62A04;
  result[132] = sub_218B62A44;
  result[131] = sub_218B62A84;
  result[255] = sub_218B62AC4;
  result[264] = sub_218B62B08;
  result[238] = sub_218B62B48;
  result[247] = sub_218B62B8C;
  result[240] = sub_218B62BCC;
  result[239] = sub_218B62C0C;
  result[241] = sub_218B62C4C;
  result[245] = sub_218B62C8C;
  result[246] = sub_218B62CCC;
  result[243] = sub_218B62D0C;
  result[242] = sub_218B62D4C;
  result[244] = sub_218B62D8C;
  result[249] = sub_218B62DCC;
  result[248] = sub_218B62E0C;
  result[253] = sub_218B62E4C;
  result[252] = sub_218B62E8C;
  result[251] = sub_218B62ECC;
  result[250] = sub_218B62F0C;
  result[136] = sub_218B62F4C;
  result[145] = sub_218B62F90;
  result[138] = sub_218B62FD0;
  result[137] = sub_218B63010;
  result[139] = sub_218B63050;
  result[143] = sub_218B63090;
  result[144] = sub_218B630D0;
  result[141] = sub_218B63110;
  result[140] = sub_218B63150;
  result[142] = sub_218B63190;
  result[147] = sub_218B631D0;
  result[146] = sub_218B63210;
  result[151] = sub_218B63250;
  result[150] = sub_218B63290;
  result[149] = sub_218B632D0;
  result[148] = sub_218B63310;
  result[34] = sub_218B63350;
  result[35] = sub_218B63404;
  result[36] = sub_218B633C4;
  result[37] = sub_218B63444;
  result[42] = sub_218B634BC;
  result[43] = sub_218B6338C;
  result[38] = sub_218B6353C;
  result[39] = sub_218B634FC;
  result[40] = sub_218B6357C;
  result[41] = sub_218B6347C;
  result[44] = sub_218B635F4;
  result[45] = sub_218B635B4;
  result[153] = sub_218B63634;
  result[162] = sub_218B63678;
  result[289] = sub_218B636B8;
  result[272] = sub_218B636FC;
  result[281] = sub_218B63740;
  result[170] = sub_218B63780;
  result[179] = sub_218B637C4;
  result[51] = sub_218B63804;
  result[60] = sub_218B63840;
  result[187] = sub_218B63878;
  result[306] = sub_218B638BC;
  result[204] = sub_218B63900;
  result[68] = sub_218B63944;
  if ((dword_253D3D5E0 & 1) != 0)
  {
    *result = sub_218B23770;
    result[1] = sub_218B237C8;
    result[2] = sub_218B237F8;
    result[3] = sub_218B23808;
    result[8] = sub_218B23818;
    result[9] = sub_218B237B8;
    result[4] = sub_218B237D8;
    result[5] = sub_218B23828;
    result[6] = sub_218B23848;
    result[7] = sub_218B23838;
    result[10] = sub_218B23858;
    result[11] = sub_218B237E8;
    result[12] = sub_218B23888;
    result[13] = sub_218B23868;
    result[14] = sub_218B23898;
    result[15] = sub_218B23878;
    result[85] = sub_218B24570;
    result[94] = sub_218B245AC;
    result[86] = sub_218B245BC;
    result[89] = sub_218B245CC;
    result[96] = sub_218B245DC;
    result[87] = sub_218B245EC;
    result[88] = sub_218B245FC;
    result[93] = sub_218B2460C;
    result[90] = sub_218B2461C;
    result[92] = sub_218B2462C;
    result[91] = sub_218B2463C;
    result[95] = sub_218B2464C;
    result[98] = sub_218B2465C;
    result[100] = sub_218B2466C;
    result[97] = sub_218B2467C;
    result[99] = sub_218B2468C;
    result[221] = sub_218B26BA0;
    result[230] = sub_218B26BDC;
    result[222] = sub_218B26BE8;
    result[225] = sub_218B26BF8;
    result[232] = sub_218B26C08;
    result[223] = sub_218B26C18;
    result[224] = sub_218B26C28;
    result[229] = sub_218B26C38;
    result[226] = sub_218B26C48;
    result[228] = sub_218B26C58;
    result[227] = sub_218B26C68;
    result[231] = sub_218B26C78;
    result[234] = sub_218B26C84;
    result[236] = sub_218B26C94;
    result[233] = sub_218B26CA4;
    result[235] = sub_218B26CB0;
    result[102] = sub_218B2469C;
    result[111] = sub_218B246D8;
    result[103] = sub_218B246E8;
    result[106] = sub_218B246F8;
    result[113] = sub_218B24708;
    result[104] = sub_218B24718;
    result[105] = sub_218B24728;
    result[110] = sub_218B24738;
    result[107] = sub_218B24748;
    result[109] = sub_218B24758;
    result[108] = sub_218B24768;
    result[112] = sub_218B24778;
    result[115] = sub_218B24788;
    result[117] = sub_218B24798;
    result[114] = sub_218B247A8;
    result[116] = sub_218B247B8;
    result[16] = sub_218B23650;
    result[17] = sub_218B24274;
    result[18] = sub_218B242BC;
    result[19] = sub_218B242EC;
    result[20] = sub_218B242FC;
    result[21] = sub_218B242CC;
    result[24] = sub_218B2432C;
    result[25] = sub_218B2430C;
    result[22] = sub_218B2431C;
    result[23] = sub_218B2433C;
    result[26] = sub_218B242B0;
    result[27] = sub_218B2434C;
    result[32] = sub_218B24368;
    result[28] = sub_218B242DC;
    result[29] = sub_218B24378;
    result[30] = sub_218B24358;
    result[31] = sub_218B24384;
    result[119] = sub_218B2773C;
    result[128] = sub_218B2777C;
    result[120] = sub_218B27788;
    result[123] = sub_218B27798;
    result[130] = sub_218B277A8;
    result[121] = sub_218B277B8;
    result[122] = sub_218B277C8;
    result[127] = sub_218B277D8;
    result[124] = sub_218B277E8;
    result[126] = sub_218B277F8;
    result[125] = sub_218B27808;
    result[129] = sub_218B27818;
    result[132] = sub_218B27824;
    result[134] = sub_218B27834;
    result[131] = sub_218B27844;
    result[133] = sub_218B27850;
    result[255] = sub_218B298D4;
    result[264] = sub_218B292DC;
    result[238] = sub_218B26CBC;
    result[247] = sub_218B26CF4;
    result[239] = sub_218B26CFC;
    result[242] = sub_218B26D08;
    result[249] = sub_218B26D14;
    result[240] = sub_218B26D20;
    result[241] = sub_218B26D2C;
    result[246] = sub_218B26D38;
    result[243] = sub_218B26D44;
    result[245] = sub_218B26D50;
    result[244] = sub_218B26D5C;
    result[248] = sub_218B26D68;
    result[251] = sub_218B26D70;
    result[253] = sub_218B26D7C;
    result[250] = sub_218B26D88;
    result[252] = sub_218B26D90;
    result[136] = sub_218B2785C;
    result[145] = sub_218B27898;
    result[137] = sub_218B278A0;
    result[140] = sub_218B278AC;
    result[147] = sub_218B278B8;
    result[138] = sub_218B278C4;
    result[139] = sub_218B278D0;
    result[144] = sub_218B278DC;
    result[141] = sub_218B278E8;
    result[143] = sub_218B278F4;
    result[142] = sub_218B27900;
    result[146] = sub_218B2790C;
    result[149] = sub_218B27914;
    result[151] = sub_218B27920;
    result[148] = sub_218B2792C;
    result[150] = sub_218B27934;
    result[34] = sub_218B26458;
    result[35] = sub_218B264A8;
    result[36] = sub_218B264E4;
    result[37] = sub_218B264F8;
    result[42] = sub_218B2650C;
    result[43] = sub_218B26498;
    result[38] = sub_218B264BC;
    result[39] = sub_218B26520;
    result[40] = sub_218B26548;
    result[41] = sub_218B26534;
    result[44] = sub_218B2655C;
    result[45] = sub_218B264D0;
    result[153] = sub_218B296FC;
    result[162] = sub_218B28E64;
    result[289] = sub_218B2B220;
    result[272] = sub_218B29A3C;
    result[281] = sub_218B2946C;
    result[170] = sub_218B29804;
    result[179] = sub_218B29090;
    result[51] = sub_218B295DC;
    result[60] = sub_218B28CC8;
    result[187] = sub_218B2AFC4;
    result[306] = sub_218B2B0FC;
    result[204] = sub_218B2AE28;
    result[68] = sub_218B2AC70;
  }
  return result;
}

_QWORD *sub_218BB788C(_QWORD *result)
{
  *result = sub_218B64244;
  result[1] = sub_218B643C4;
  result[2] = sub_218B643D4;
  result[3] = sub_218B643E4;
  result[4] = sub_218B643F4;
  result[5] = sub_218B64B84;
  result[6] = sub_218B64BC8;
  result[7] = sub_218B64C0C;
  if ((dword_253D3D5E0 & 1) != 0)
  {
    *result = sub_218B39634;
    result[1] = sub_218B39AA8;
    result[2] = sub_218B39CE4;
    result[3] = sub_218B39810;
    result[4] = sub_218B64C4C;
    result[5] = sub_218B64E4C;
    result[6] = sub_218B65098;
    result[7] = sub_218B652E4;
  }
  return result;
}

_QWORD *sub_218BB793C(_QWORD *result)
{
  *result = sub_218B70CC0;
  result[1] = sub_218B70D34;
  result[10] = sub_218B70CE0;
  result[11] = sub_218B70D58;
  result[20] = sub_218B70D08;
  result[21] = sub_218B70D84;
  result[30] = sub_218B70D10;
  result[31] = sub_218B70D8C;
  result[2] = sub_218B70DB4;
  result[3] = sub_218B70E34;
  result[12] = sub_218B70DD8;
  result[13] = sub_218B70E58;
  result[22] = sub_218B70E04;
  result[23] = sub_218B70E84;
  result[32] = sub_218B70E0C;
  result[33] = sub_218B70E8C;
  result[4] = sub_218B70EB4;
  result[5] = sub_218B70F34;
  result[14] = sub_218B70ED8;
  result[15] = sub_218B70F58;
  result[24] = sub_218B70F04;
  result[25] = sub_218B70F84;
  result[34] = sub_218B70F0C;
  result[35] = sub_218B70F8C;
  result[6] = sub_218B70FB4;
  result[7] = sub_218B71034;
  result[16] = sub_218B70FD8;
  result[17] = sub_218B71058;
  result[26] = sub_218B71004;
  result[27] = sub_218B71084;
  result[36] = sub_218B7100C;
  result[37] = sub_218B7108C;
  result[8] = sub_218B710B4;
  result[9] = sub_218B71134;
  result[18] = sub_218B710D8;
  result[19] = sub_218B71358;
  result[28] = sub_218B71104;
  result[29] = sub_218B714B8;
  result[38] = sub_218B7110C;
  result[39] = sub_218B716B4;
  result[40] = sub_218B71808;
  result[41] = sub_218B71868;
  result[46] = sub_218B7194C;
  result[47] = sub_218B719AC;
  result[42] = sub_218B718D4;
  result[43] = sub_218B71A90;
  result[44] = sub_218B71AB0;
  result[45] = sub_218B71AD4;
  result[48] = sub_218B71A20;
  result[49] = sub_218B71AF8;
  result[50] = sub_218B71D1C;
  result[51] = sub_218B71F34;
  result[52] = sub_218B72128;
  if ((dword_253D3D5E0 & 1) != 0)
  {
    *result = sub_218B40624;
    result[1] = sub_218B40630;
    result[6] = sub_218B40648;
    result[7] = sub_218B4063C;
    result[2] = sub_218B3F094;
    result[3] = sub_218B3F0B8;
    result[4] = sub_218B3F0C4;
    result[5] = sub_218B3F0AC;
    result[8] = sub_218B3F0A0;
    result[9] = sub_218B41A44;
    result[20] = sub_218B430B4;
    result[21] = sub_218B430C0;
    result[26] = sub_218B430D8;
    result[27] = sub_218B430CC;
    result[22] = sub_218B41FBC;
    result[23] = sub_218B41FE0;
    result[24] = sub_218B41FEC;
    result[25] = sub_218B41FD4;
    result[28] = sub_218B41FC8;
    result[29] = sub_218B44054;
    result[40] = sub_218B3D0A0;
    result[41] = sub_218B3D484;
    result[46] = sub_218B3E84C;
    result[47] = sub_218B3EBE4;
    result[42] = sub_218B3DA54;
    result[43] = sub_218B3E1FC;
    result[44] = sub_218B3E408;
    result[45] = sub_218B3E62C;
    result[48] = sub_218B3E9DC;
    result[49] = sub_218B4450C;
    result[50] = sub_218B446B8;
    result[51] = sub_218B44864;
  }
  return result;
}

uint64_t sub_218BB7CA0()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  _WORD *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t result;
  _WORD *v42;
  __int16 v43;
  _BYTE v44[12284];
  _BYTE v45[12308];

  MEMORY[0x24BDAC7A8]();
  v0 = 0;
  *(_QWORD *)&v45[12292] = *MEMORY[0x24BDAC8D0];
  do
  {
    v1 = &v44[v0];
    *((_DWORD *)v1 + 1030) = 0;
    *((_QWORD *)v1 + 514) = 0;
    *((_OWORD *)v1 + 256) = 0uLL;
    *(_QWORD *)&v44[v0 + 4124] = 0x403E392B15070200;
    memset(&v44[v0 + 4132], 64, 28);
    v0 += 64;
  }
  while ((_DWORD)v0 != 4096);
  v2 = 0;
  v3 = v45;
  v4 = 48;
  v5 = -2;
  do
  {
    if (v4 >= 5)
      bzero(v3 + 4, (v4 - 4));
    if (v4 <= 4)
      v6 = 4;
    else
      v6 = v4;
    v7 = &v3[v6];
    v8 = 64 - v4;
    if (64 - v4 >= 8)
      v8 = 8;
    memcpy(v7, (char *)&unk_218BBDF4A + ((4 - v4) & ~((4 - v4) >> 31)) + 8, v8);
    if (v4 >= 60)
    {
      v10 = v3 + 68;
      v9 = v4 - 1;
      goto LABEL_15;
    }
    memset(&v3[v4 + 8], 64, (60 - v4));
    v9 = v4 - 1;
    if (v4 >= 6)
    {
      v10 = &v45[(v2 | 0x40) + 4];
LABEL_15:
      bzero(v10, (v4 - 5));
      goto LABEL_17;
    }
    v10 = v3 + 68;
LABEL_17:
    if (v9 <= 4)
      v11 = 4;
    else
      v11 = v9;
    v12 = &v10[v11 - 4];
    v13 = 65 - v4;
    if (65 - v4 >= 8)
      v13 = 8;
    memcpy(v12, (char *)&unk_218BBDF4A + ((5 - v4) & ~((5 - v4) >> 31)), v13);
    if (v4 <= 60)
      memset(&v10[v9 + 4], 64, (61 - v4));
    v2 += 128;
    v3 += 128;
    v5 += 2;
    v4 = v9;
  }
  while (v5 < 0x3E);
  v14 = 0;
  v15 = 12288;
  do
  {
    v16 = v15;
    for (i = 0x2000; i != 12288; i += 64)
      v44[v14 + i] = v44[v16++];
    ++v14;
    v15 += 64;
  }
  while (v14 != 64);
  v18 = 0;
  v19 = 4096;
  do
  {
    v20 = 0;
    v21 = v19;
    do
    {
      v44[v18 + v20] = v44[v21];
      v20 += 64;
      ++v21;
    }
    while (v20 != 4096);
    ++v18;
    v19 += 64;
  }
  while (v18 != 64);
  v22 = 0;
  v23 = 0;
  v24 = 16447;
  do
  {
    v25 = 0;
    v26 = v24;
    do
      v44[v26--] = v44[v22 + 12288 + v25++];
    while (v25 != 64);
    ++v23;
    v22 += 64;
    v24 += 64;
  }
  while (v23 != 64);
  v27 = 0;
  v28 = 0;
  v29 = 20543;
  do
  {
    v30 = 0;
    v31 = v29;
    do
      v44[v31--] = v44[v27 + 0x2000 + v30++];
    while (v30 != 64);
    ++v28;
    v27 += 64;
    v29 += 64;
  }
  while (v28 != 64);
  sub_218BB83B4(0x20uLL, 32, 0, (uint64_t)v44, (uint64_t)&unk_218BBDF62, (unsigned __int8 *)&unk_253D3DF80, (uint64_t)&unk_253D3DF80 + 50176, (uint64_t)&unk_253D56780, 31739);
  sub_218BB83B4(0x20uLL, 16, 1u, (uint64_t)v44, (uint64_t)&unk_218BBDF92, byte_253D41F80, (uint64_t)&unk_253D4E380, (uint64_t)&unk_253D58780, 31723);
  sub_218BB83B4(0x20uLL, 8, 2u, (uint64_t)v44, (uint64_t)&unk_218BBDF92, &byte_253D41F80[0x2000], (uint64_t)&unk_253D50380, (uint64_t)&unk_253D59780, 27627);
  sub_218BB83B4(0x10uLL, 32, 4u, (uint64_t)v44, (uint64_t)&unk_218BBDFC2, &byte_253D41F80[12288], (uint64_t)&unk_253D51380, (uint64_t)&unk_253D59F80, 31723);
  sub_218BB83B4(0x10uLL, 16, 5u, (uint64_t)v44, (uint64_t)&unk_218BBDF62, &byte_253D41F80[20480], (uint64_t)&unk_253D53380, (uint64_t)&unk_253D5AF80, 31739);
  sub_218BB83B4(0x10uLL, 8, 6u, (uint64_t)v44, (uint64_t)&unk_218BBDF92, &byte_253D41F80[24576], (uint64_t)&unk_253D54380, (uint64_t)&unk_253D5B780, 31723);
  sub_218BB83B4(8uLL, 32, 8u, (uint64_t)v44, (uint64_t)&unk_218BBDFC2, (unsigned __int8 *)&unk_253D3DF80 + 43008, (uint64_t)&unk_253D54B80, (uint64_t)&unk_253D5BB80, 31467);
  sub_218BB83B4(8uLL, 16, 9u, (uint64_t)v44, (uint64_t)&unk_218BBDFC2, (unsigned __int8 *)&unk_253D3DF80 + 47104, (uint64_t)&unk_253D55B80, (uint64_t)&unk_253D5C380, 31723);
  sub_218BB83B4(8uLL, 8, 0xAu, (uint64_t)v44, (uint64_t)&unk_218BBDF62, byte_253D49F80, (uint64_t)&unk_253D56380, (uint64_t)&unk_253D5C780, 31739);
  memset(&unk_253D5C980, 32, 0x400uLL);
  for (j = 0; j != 2376; j += 792)
  {
    v33 = (_WORD *)((char *)&unk_253D3D600 + j);
    v33[392] = 15984;
    v33[356] = 15984;
    v33[248] = 15984;
    v33[212] = 15984;
    v33[176] = 15984;
    v33[68] = 15984;
    v33[32] = 15984;
  }
  sub_218BB86D8((uint64_t)&unk_253D5CD80, 0x20uLL, 0x20u, 1u);
  sub_218BB86D8((uint64_t)&unk_253D5D980, 0x10uLL, 0x20u, 1u);
  sub_218BB86D8((uint64_t)&unk_253D5CD80 + 4608, 0x10uLL, 0x10u, 2u);
  sub_218BB86D8((uint64_t)&unk_253D5CD80 + 5376, 8uLL, 0x20u, 1u);
  sub_218BB86D8((uint64_t)&unk_253D5CD80 + 6144, 8uLL, 0x10u, 2u);
  sub_218BB86D8((uint64_t)&unk_253D5CD80 + 6528, 8uLL, 8u, 4u);
  sub_218BB86D8((uint64_t)&unk_253D5CD80 + 6720, 4uLL, 0x10u, 2u);
  sub_218BB86D8((uint64_t)&unk_253D5CD80 + 6912, 4uLL, 8u, 4u);
  sub_218BB86D8((uint64_t)&unk_253D5CD80 + 7008, 4uLL, 4u, 8u);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  result = 16976;
  do
  {
    v42 = (_WORD *)((char *)&unk_253D3D600 + v40);
    v42[33] = v39 + 16112;
    v42[429] = v38 + 16496;
    v42[825] = v37 + 16688;
    v42[69] = v39 + 16112;
    v42[465] = v37 + 16688;
    v42[861] = v37 + 16688;
    v42[177] = v38 + 16496;
    v42[573] = v37 + 16784;
    v42[969] = v36 + 16880;
    v42[213] = v37 + 16688;
    v42[609] = v36 + 16880;
    v42[1005] = v35 + 16928;
    v42[249] = v37 + 16688;
    v42[645] = v35 + 16928;
    v42[1041] = v35 + 16928;
    v42[357] = v36 + 16880;
    v42[753] = v35 + 16952;
    v43 = v40 + 16988;
    v40 += 2;
    v42[1149] = v34 + 16976;
    v39 += 128;
    v38 += 64;
    v42[393] = v35 + 16928;
    v37 += 32;
    v36 += 16;
    v42[789] = v34 + 16976;
    v35 += 8;
    v34 += 4;
    v42[1185] = v43;
  }
  while (v40 != 6);
  return result;
}

uint64_t sub_218BB83B4(size_t __n, int a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned __int8 *__dst, uint64_t a7, uint64_t a8, int a9)
{
  unsigned int v12;
  uint64_t v13;
  size_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char *v19;
  int v20;
  char *v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  size_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  char *v39;
  uint64_t result;
  char *v41;
  char *v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v51;
  char *v52;
  int v53;
  unsigned int v54;
  uint64_t v55;

  v12 = __n;
  v13 = 0;
  v46 = (a2 * __n) >> 1;
  v47 = (a2 * __n);
  v53 = 16 * v46;
  v45 = (a2 * __n) >> 2;
  v43 = 8 * a2;
  v44 = 16 * v45;
  v15 = __n;
  v16 = (char *)&unk_253D3D600 + 72 * a3;
  v52 = v16 + 792;
  v42 = v16;
  v41 = v16 + 1584;
  v17 = __n >> 1;
  if (a2 <= 1)
    v18 = 1;
  else
    v18 = a2;
  v48 = __n;
  do
  {
    v19 = (char *)(a4
                 + ((unint64_t)*(unsigned __int8 *)(a5 + 3 * v13) << 12)
                 + (int)(2080
                       - (((v43 * *(unsigned __int8 *)(a5 + 3 * v13 + 2)) & 0x7FFFFFC0)
                        + ((*(unsigned __int8 *)(a5 + 3 * v13 + 1) * v12) >> 3))));
    v51 = a8;
    v55 = a7;
    v54 = a9;
    if ((a9 & 1) != 0)
    {
      v22 = 0;
      v23 = __dst;
      do
      {
        v24 = 0;
        do
        {
          v23[v24] = 64 - v19[v24];
          ++v24;
        }
        while (v15 != v24);
        v19 += 64;
        v23 += v15;
        ++v22;
      }
      while (v22 != a2);
    }
    else
    {
      v20 = a2;
      v21 = (char *)__dst;
      do
      {
        memcpy(v21, v19, v15);
        v19 += 64;
        v21 += v15;
        --v20;
      }
      while (v20);
    }
    v25 = 0;
    v26 = v54 & 1;
    v27 = (__dst - &unk_253D3D600) >> 3;
    v28 = &v42[2 * v13];
    *((_WORD *)v28 + 16) = v27;
    *(_WORD *)v28 = v27;
    v29 = v55 + (v26 * v53);
    v30 = __dst;
    do
    {
      v31 = 0;
      v32 = 0;
      do
      {
        *(_BYTE *)(v29 + v31) = (v30[v32] + v30[v32 + 1] + 1) >> 1;
        v32 += 2;
        ++v31;
      }
      while (v32 < v15);
      v30 += v15;
      v29 += v17;
      ++v25;
    }
    while (v25 != v18);
    v33 = 0;
    *(_WORD *)&v52[2 * v13] = ((_DWORD)v55 + v26 * v53 - &unk_253D3D600) >> 3;
    v34 = v55 + !(v54 & 1) * v53;
    v35 = (uint64_t)__dst;
    do
    {
      v36 = 0;
      v37 = 0;
      do
      {
        *(_BYTE *)(v34 + v36) = (__dst[v37] + __dst[v37 + 1]) >> 1;
        v37 += 2;
        ++v36;
      }
      while (v37 < v15);
      __dst += v15;
      v34 += v17;
      ++v33;
    }
    while (v33 != v18);
    *(_WORD *)&v52[2 * v13 + 32] = ((_DWORD)v55 + !(v54 & 1) * v53 - &unk_253D3D600) >> 3;
    v38 = v35;
    v12 = v48;
    v39 = &v41[2 * v13];
    *(_WORD *)v39 = sub_218BB87A0((_BYTE *)(v51 + (v26 * v44)), v35, 0, v48, a2, 1);
    result = sub_218BB87A0((_BYTE *)(v51 + !(v54 & 1) * v44), v38, 1, v48, a2, 1);
    *((_WORD *)v39 + 16) = result;
    a9 = v54 >> 1;
    __dst = (unsigned __int8 *)(v38 + v47);
    a7 = v55 + v46;
    a8 = v51 + v45;
    ++v13;
  }
  while (v13 != 16);
  return result;
}

void *sub_218BB86D8(uint64_t a1, size_t __len, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  char *v16;
  int v17;

  v6 = 0;
  v7 = 0;
  v8 = __len;
  v9 = a3 * __len;
  v10 = a1 + v9;
  v11 = a1 + v9 + v9;
  v12 = a4;
  v13 = a3;
  do
  {
    result = memset((void *)(a1 + v7), byte_218BBDFF2[v6 * v12], v8);
    v15 = 0;
    v16 = byte_218BBDFF2;
    do
    {
      if ((int)v15 >= (int)v6)
        v17 = v6;
      else
        v17 = v15;
      *(_BYTE *)(v11 + v15) = byte_218BBDFF2[v17 * a4];
      *(_BYTE *)(v10 + v15++) = *v16;
      v16 += v12;
    }
    while (v8 != v15);
    ++v6;
    v7 += v8;
    v10 += v8;
    v11 += v8;
  }
  while (v6 != v13);
  return result;
}

uint64_t sub_218BB87A0(_BYTE *a1, uint64_t a2, int a3, unsigned int a4, int a5, int a6)
{
  int v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;

  v6 = 0;
  v7 = a6 + 1;
  v8 = a1;
  do
  {
    v9 = v8;
    v10 = 1;
    do
    {
      v11 = *(unsigned __int8 *)(a2 + v10 - 1) + *(unsigned __int8 *)(a2 + v10) + 1;
      if (a6)
        v11 += *(unsigned __int8 *)(a2 + a4 + v10 - 1) + *(unsigned __int8 *)(a2 + a4 + v10) + 1;
      *v9++ = (v11 - a3) >> v7;
      v12 = v10 + 1;
      v10 += 2;
    }
    while (v12 < a4);
    a2 += a4 << a6;
    v8 += a4 >> 1;
    v6 += v7;
  }
  while (v6 < a5);
  return (unsigned __int16)((a1 - &unk_253D3D600) >> 3);
}

_QWORD *sub_218BB8838(_QWORD *result)
{
  *result = sub_218B8AFD4;
  result[1] = sub_218B8B070;
  result[10] = sub_218B8AFF8;
  result[11] = sub_218B8B098;
  result[20] = sub_218B8B024;
  result[21] = sub_218B8B0C8;
  result[30] = sub_218B8B048;
  result[31] = sub_218B8B0EC;
  result[2] = sub_218B8B118;
  result[3] = sub_218B8B1C0;
  result[12] = sub_218B8B140;
  result[13] = sub_218B8B1E8;
  result[22] = sub_218B8B170;
  result[23] = sub_218B8B218;
  result[32] = sub_218B8B194;
  result[33] = sub_218B8B23C;
  result[4] = sub_218B8B268;
  result[5] = sub_218B8B310;
  result[14] = sub_218B8B290;
  result[15] = sub_218B8B338;
  result[24] = sub_218B8B2C0;
  result[25] = sub_218B8B368;
  result[34] = sub_218B8B2E4;
  result[35] = sub_218B8B38C;
  result[6] = sub_218B8B3B8;
  result[7] = sub_218B8B460;
  result[16] = sub_218B8B3E0;
  result[17] = sub_218B8B488;
  result[26] = sub_218B8B410;
  result[27] = sub_218B8B4B8;
  result[36] = sub_218B8B434;
  result[37] = sub_218B8B4DC;
  result[8] = sub_218B8B508;
  result[9] = sub_218B8B5B0;
  result[18] = sub_218B8B530;
  result[19] = sub_218B8B850;
  result[28] = sub_218B8B560;
  result[29] = sub_218B8B9F8;
  result[38] = sub_218B8B584;
  result[39] = sub_218B8BC50;
  result[40] = sub_218B8BDD0;
  result[41] = sub_218B8BE4C;
  result[46] = sub_218B8BF68;
  result[47] = sub_218B8BFD0;
  result[42] = sub_218B8BED0;
  result[43] = sub_218B8C0BC;
  result[44] = sub_218B8C0E4;
  result[45] = sub_218B8C110;
  result[48] = sub_218B8C048;
  result[49] = sub_218B8C13C;
  result[50] = sub_218B8C388;
  result[51] = sub_218B8C5BC;
  result[52] = sub_218B8C810;
  if ((dword_253D3D5E0 & 1) != 0)
  {
    *result = sub_218B4E608;
    result[1] = sub_218B4E614;
    result[6] = sub_218B4E62C;
    result[7] = sub_218B4E620;
    result[2] = sub_218B4D298;
    result[3] = sub_218B4D2BC;
    result[4] = sub_218B4D2C8;
    result[5] = sub_218B4D2B0;
    result[8] = sub_218B4D2A4;
    result[9] = sub_218B4F820;
    result[20] = sub_218B50D90;
    result[21] = sub_218B50D9C;
    result[26] = sub_218B50DB4;
    result[27] = sub_218B50DA8;
    result[22] = sub_218B4FE50;
    result[23] = sub_218B4FE74;
    result[24] = sub_218B4FE80;
    result[25] = sub_218B4FE68;
    result[28] = sub_218B4FE5C;
    result[29] = sub_218B51B98;
    result[40] = sub_218B4A5A4;
    result[41] = sub_218B4A990;
    result[46] = sub_218B4C8E8;
    result[47] = sub_218B4CCD8;
    result[42] = sub_218B4B2D8;
    result[43] = sub_218B4BE78;
    result[44] = sub_218B4C1E4;
    result[45] = sub_218B4C568;
    result[48] = sub_218B4CA94;
    result[49] = sub_218B521A8;
    result[50] = sub_218B5238C;
    result[51] = sub_218B52560;
  }
  return result;
}

uint64_t sub_218BB8B9C(pthread_mutex_t **a1)
{
  pthread_mutex_t *v2;
  pthread_mutex_t *v3;
  uint64_t result;

  v2 = (pthread_mutex_t *)malloc_type_malloc(0x50uLL, 0x1020040D51851D7uLL);
  v3 = v2;
  if (v2)
  {
    result = pthread_mutex_init(v2, 0);
    if (!(_DWORD)result)
    {
      v3[1].__sig = 0;
      *(_QWORD *)v3[1].__opaque = 1;
      goto LABEL_6;
    }
    free(v3);
    v3 = 0;
  }
  result = 4294967284;
LABEL_6:
  *a1 = v3;
  return result;
}

void sub_218BB8C10(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void *v4;

  if (a1)
  {
    pthread_mutex_lock((pthread_mutex_t *)a1);
    v2 = *(_QWORD *)(a1 + 64);
    v3 = *(_DWORD *)(a1 + 72) - 1;
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = v3;
    *(_DWORD *)(a1 + 76) = 1;
    pthread_mutex_unlock((pthread_mutex_t *)a1);
    while (v2)
    {
      v4 = *(void **)v2;
      v2 = *(_QWORD *)(v2 + 8);
      free(v4);
    }
    if (!v3)
    {
      pthread_mutex_destroy((pthread_mutex_t *)a1);
      free((void *)a1);
    }
  }
}

uint64_t sub_218BB8C8C()
{
  int v0;
  BOOL v1;
  unsigned int v2;
  int v3;
  BOOL v4;
  size_t v6;
  int v7;

  v7 = 0;
  v6 = 4;
  v0 = sysctlbyname("hw.optional.arm.FEAT_DotProd", &v7, &v6, 0, 0);
  if (v7)
    v1 = v0 == 0;
  else
    v1 = 0;
  if (v1)
    v2 = 3;
  else
    v2 = 1;
  v7 = 0;
  v6 = 4;
  v3 = sysctlbyname("hw.optional.arm.FEAT_I8MM", &v7, &v6, 0, 0);
  if (v7)
    v4 = v3 == 0;
  else
    v4 = 0;
  if (v4)
    return v2 | 4;
  else
    return v2;
}

_QWORD *sub_218BB8D20(_QWORD *result)
{
  result[4] = sub_218B8E234;
  result[5] = sub_218B8E224;
  result[2] = sub_218B8E2B4;
  result[3] = sub_218B8E274;
  *result = sub_218B8E1D0;
  result[1] = sub_218B8E314;
  result[10] = sub_218B8E4B0;
  result[11] = sub_218B8E530;
  result[6] = sub_218B8E5A8;
  result[7] = sub_218B8E7AC;
  result[8] = sub_218B8EA78;
  result[9] = sub_218B8E400;
  result[12] = sub_218B8E374;
  result[13] = sub_218B8ECB8;
  result[14] = sub_218B8EE24;
  result[15] = sub_218B8EE4C;
  result[16] = sub_218B8EE70;
  result[17] = sub_218B8EE94;
  result[20] = sub_218B8EF50;
  result[21] = sub_218B8EF10;
  result[22] = sub_218B8EF00;
  result[23] = sub_218B8EF90;
  if ((dword_253D3D5E0 & 1) != 0)
  {
    result[4] = sub_218B2B860;
    result[5] = sub_218B2B5C0;
    result[2] = sub_218B2B75C;
    result[3] = sub_218B2B99C;
    *result = sub_218B2BB04;
    result[1] = sub_218B2B68C;
    result[10] = sub_218B2C284;
    result[11] = sub_218B2C454;
    result[6] = sub_218B8EFEC;
    result[7] = sub_218B8F17C;
    result[8] = sub_218B8F468;
    result[9] = sub_218B2C010;
    result[12] = sub_218B2BDB0;
    result[13] = sub_218B2E03C;
    result[20] = sub_218B2E66C;
    result[21] = sub_218B2E5E4;
    result[14] = sub_218B2E8B4;
    result[15] = sub_218B2ECC4;
    result[16] = sub_218B2EF8C;
    result[17] = sub_218B2E708;
    result[22] = sub_218B2E440;
    result[23] = sub_218B2E25C;
  }
  return result;
}

_QWORD *sub_218BB8EE8(_QWORD *result)
{
  result[4] = sub_218B8FD2C;
  result[5] = sub_218B8FD10;
  result[2] = sub_218B8FDB4;
  result[3] = sub_218B8FD70;
  *result = sub_218B8FCAC;
  result[1] = sub_218B8FE04;
  result[10] = sub_218B8FFA8;
  result[11] = sub_218B90028;
  result[6] = sub_218B900A4;
  result[7] = sub_218B902B0;
  result[8] = sub_218B90584;
  result[9] = sub_218B8FEF4;
  result[12] = sub_218B8FE68;
  result[13] = sub_218B907D0;
  result[14] = sub_218B9093C;
  result[15] = sub_218B90964;
  result[16] = sub_218B90988;
  result[17] = sub_218B909AC;
  result[20] = sub_218B90A80;
  result[21] = sub_218B90A40;
  result[22] = sub_218B90A28;
  result[23] = sub_218B90AC0;
  if ((dword_253D3D5E0 & 1) != 0)
  {
    result[4] = sub_218B53EAC;
    result[5] = sub_218B53B8C;
    result[2] = sub_218B53D68;
    result[3] = sub_218B54018;
    *result = sub_218B541B8;
    result[1] = sub_218B53C80;
    result[10] = sub_218B54934;
    result[11] = sub_218B54ACC;
    result[6] = sub_218B90B24;
    result[7] = sub_218B90CB8;
    result[8] = sub_218B90FB4;
    result[9] = sub_218B54664;
    result[12] = sub_218B544B4;
    result[13] = sub_218B56E28;
    result[20] = sub_218B573E8;
    result[21] = sub_218B57350;
    result[14] = sub_218B57660;
    result[15] = sub_218B57AAC;
    result[16] = sub_218B57DDC;
    result[17] = sub_218B57494;
    result[22] = sub_218B5713C;
    result[23] = sub_218B56E38;
  }
  return result;
}

uint64_t sub_218BB90B0(uint64_t a1, const char *a2, va_list a3)
{
  return vfprintf((FILE *)*MEMORY[0x24BDAC8D8], a2, a3);
}

uint64_t sub_218BB90C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_QWORD *)(result + 63168))
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(result + 63168))(*(_QWORD *)(result + 63160), a2, &a9);
  return result;
}

_QWORD *sub_218BB90FC(_QWORD *result, int a2)
{
  *result = sub_218B9191C;
  result[1] = sub_218B919D0;
  result[2] = sub_218B91990;
  result[3] = sub_218B91A10;
  result[8] = sub_218B91A88;
  result[9] = sub_218B91958;
  result[4] = sub_218B91B08;
  result[5] = sub_218B91AC8;
  result[6] = sub_218B91B48;
  result[7] = sub_218B91A48;
  result[10] = sub_218B91BC0;
  result[11] = sub_218B91B80;
  result[14] = sub_218B91C40;
  result[15] = sub_218B91C00;
  result[12] = sub_218B91CC0;
  result[13] = sub_218B91C80;
  result[85] = sub_218B91D00;
  result[94] = sub_218B91D44;
  result[87] = sub_218B91D84;
  result[86] = sub_218B91DC4;
  result[88] = sub_218B91E04;
  result[92] = sub_218B91E44;
  result[93] = sub_218B91E84;
  result[90] = sub_218B91EC4;
  result[89] = sub_218B91F04;
  result[91] = sub_218B91F44;
  result[96] = sub_218B91F84;
  result[95] = sub_218B91FC4;
  result[100] = sub_218B92004;
  result[99] = sub_218B92044;
  result[98] = sub_218B92084;
  result[97] = sub_218B920C4;
  result[221] = sub_218B92104;
  result[230] = sub_218B92148;
  result[223] = sub_218B92188;
  result[222] = sub_218B921C8;
  result[224] = sub_218B92208;
  result[228] = sub_218B92248;
  result[229] = sub_218B92288;
  result[226] = sub_218B922C8;
  result[225] = sub_218B92308;
  result[227] = sub_218B92348;
  result[232] = sub_218B92388;
  result[231] = sub_218B923C8;
  result[236] = sub_218B92408;
  result[235] = sub_218B92448;
  result[234] = sub_218B92488;
  result[233] = sub_218B924C8;
  result[102] = sub_218B92508;
  result[111] = sub_218B9254C;
  result[104] = sub_218B9258C;
  result[103] = sub_218B925CC;
  result[105] = sub_218B9260C;
  result[109] = sub_218B9264C;
  result[110] = sub_218B9268C;
  result[107] = sub_218B926CC;
  result[106] = sub_218B9270C;
  result[108] = sub_218B9274C;
  result[113] = sub_218B9278C;
  result[112] = sub_218B927CC;
  result[117] = sub_218B9280C;
  result[116] = sub_218B9284C;
  result[115] = sub_218B9288C;
  result[114] = sub_218B928CC;
  result[16] = sub_218B917EC;
  result[17] = sub_218B9290C;
  result[18] = sub_218B929C0;
  result[19] = sub_218B92980;
  result[24] = sub_218B92A38;
  result[25] = sub_218B92A78;
  result[20] = sub_218B92A00;
  result[21] = sub_218B92AF8;
  result[22] = sub_218B92AB8;
  result[23] = sub_218B92B38;
  result[26] = sub_218B92948;
  result[27] = sub_218B92BB0;
  result[31] = sub_218B92C30;
  result[32] = sub_218B92BF0;
  result[30] = sub_218B92C70;
  result[28] = sub_218B92B70;
  result[29] = sub_218B92CB0;
  result[119] = sub_218B92CF0;
  result[128] = sub_218B92D34;
  result[121] = sub_218B92D74;
  result[120] = sub_218B92DB4;
  result[122] = sub_218B92DF4;
  result[126] = sub_218B92E34;
  result[127] = sub_218B92E74;
  result[124] = sub_218B92EB4;
  result[123] = sub_218B92EF4;
  result[125] = sub_218B92F34;
  result[130] = sub_218B92F74;
  result[129] = sub_218B92FB4;
  result[134] = sub_218B92FF4;
  result[133] = sub_218B93034;
  result[132] = sub_218B93074;
  result[131] = sub_218B930B4;
  result[255] = sub_218B930F4;
  result[264] = sub_218B93138;
  result[238] = sub_218B93178;
  result[247] = sub_218B931BC;
  result[240] = sub_218B931FC;
  result[239] = sub_218B9323C;
  result[241] = sub_218B9327C;
  result[245] = sub_218B932BC;
  result[246] = sub_218B932FC;
  result[243] = sub_218B9333C;
  result[242] = sub_218B9337C;
  result[244] = sub_218B933BC;
  result[249] = sub_218B933FC;
  result[248] = sub_218B9343C;
  result[253] = sub_218B9347C;
  result[252] = sub_218B934BC;
  result[251] = sub_218B934FC;
  result[250] = sub_218B9353C;
  result[136] = sub_218B9357C;
  result[145] = sub_218B935C0;
  result[138] = sub_218B93600;
  result[137] = sub_218B93640;
  result[139] = sub_218B93680;
  result[143] = sub_218B936C0;
  result[144] = sub_218B93700;
  result[141] = sub_218B93740;
  result[140] = sub_218B93780;
  result[142] = sub_218B937C0;
  result[147] = sub_218B93800;
  result[146] = sub_218B93840;
  result[151] = sub_218B93880;
  result[150] = sub_218B938C0;
  result[149] = sub_218B93900;
  result[148] = sub_218B93940;
  result[34] = sub_218B93980;
  result[35] = sub_218B93A34;
  result[36] = sub_218B939F4;
  result[37] = sub_218B93A74;
  result[42] = sub_218B93AEC;
  result[43] = sub_218B939BC;
  result[38] = sub_218B93B6C;
  result[39] = sub_218B93B2C;
  result[40] = sub_218B93BAC;
  result[41] = sub_218B93AAC;
  result[44] = sub_218B93C24;
  result[45] = sub_218B93BE4;
  result[153] = sub_218B93C64;
  result[162] = sub_218B93CA8;
  result[289] = sub_218B93CE8;
  result[272] = sub_218B93D2C;
  result[281] = sub_218B93D70;
  result[170] = sub_218B93DB0;
  result[179] = sub_218B93DF4;
  result[51] = sub_218B93E34;
  result[60] = sub_218B93E70;
  result[187] = sub_218B93EA8;
  result[306] = sub_218B93EEC;
  result[204] = sub_218B93F30;
  result[68] = sub_218B93F74;
  if ((dword_253D3D5E0 & 1) != 0)
  {
    result[16] = sub_218B30E88;
    if (a2 == 10)
    {
      *result = sub_218B30FCC;
      result[1] = sub_218B31038;
      result[2] = sub_218B31074;
      result[3] = sub_218B31088;
      result[8] = sub_218B3109C;
      result[9] = sub_218B31024;
      result[4] = sub_218B3104C;
      result[5] = sub_218B310B0;
      result[6] = sub_218B310D8;
      result[7] = sub_218B310C4;
      result[10] = sub_218B310EC;
      result[11] = sub_218B31060;
      result[12] = sub_218B31128;
      result[13] = sub_218B31100;
      result[14] = sub_218B3113C;
      result[15] = sub_218B31114;
      result[85] = sub_218B31BEC;
      result[94] = sub_218B31C38;
      result[86] = sub_218B31C50;
      result[89] = sub_218B31C68;
      result[96] = sub_218B31C80;
      result[87] = sub_218B31C98;
      result[88] = sub_218B31CB0;
      result[93] = sub_218B31CC8;
      result[90] = sub_218B31CE0;
      result[92] = sub_218B31CF8;
      result[91] = sub_218B31D10;
      result[95] = sub_218B31D28;
      result[98] = sub_218B31D40;
      result[100] = sub_218B31D58;
      result[97] = sub_218B31D70;
      result[99] = sub_218B31D88;
      result[221] = sub_218B33610;
      result[230] = sub_218B33658;
      result[222] = sub_218B33670;
      result[225] = sub_218B33688;
      result[232] = sub_218B336A0;
      result[223] = sub_218B336B8;
      result[224] = sub_218B336D0;
      result[229] = sub_218B336E8;
      result[226] = sub_218B33700;
      result[228] = sub_218B33718;
      result[227] = sub_218B33730;
      result[231] = sub_218B33748;
      result[234] = sub_218B33760;
      result[236] = sub_218B33778;
      result[233] = sub_218B33790;
      result[235] = sub_218B337A8;
      result[102] = sub_218B31DA0;
      result[111] = sub_218B31DE8;
      result[103] = sub_218B31DFC;
      result[106] = sub_218B31E10;
      result[113] = sub_218B31E24;
      result[104] = sub_218B31E38;
      result[105] = sub_218B31E4C;
      result[110] = sub_218B31E60;
      result[107] = sub_218B31E74;
      result[109] = sub_218B31E88;
      result[108] = sub_218B31E9C;
      result[112] = sub_218B31EB0;
      result[115] = sub_218B31EC4;
      result[117] = sub_218B31ED8;
      result[114] = sub_218B31EEC;
      result[116] = sub_218B31F00;
      result[17] = sub_218B31798;
      result[18] = sub_218B317F8;
      result[19] = sub_218B31840;
      result[20] = sub_218B31858;
      result[25] = sub_218B31870;
      result[26] = sub_218B317E0;
      result[21] = sub_218B31810;
      result[22] = sub_218B31888;
      result[23] = sub_218B318B8;
      result[24] = sub_218B318A0;
      result[27] = sub_218B318D0;
      result[28] = sub_218B31828;
      result[29] = sub_218B31918;
      result[30] = sub_218B318E8;
      result[31] = sub_218B31930;
      result[32] = sub_218B31900;
      result[119] = sub_218B34220;
      result[128] = sub_218B3426C;
      result[120] = sub_218B34284;
      result[123] = sub_218B3429C;
      result[130] = sub_218B342B4;
      result[121] = sub_218B342CC;
      result[122] = sub_218B342E4;
      result[127] = sub_218B342FC;
      result[124] = sub_218B34314;
      result[126] = sub_218B3432C;
      result[125] = sub_218B34344;
      result[129] = sub_218B3435C;
      result[132] = sub_218B34374;
      result[134] = sub_218B3438C;
      result[131] = sub_218B343A4;
      result[133] = sub_218B343BC;
      result[255] = sub_218B36768;
      result[264] = sub_218B35FA0;
      result[238] = sub_218B337C0;
      result[247] = sub_218B33800;
      result[239] = sub_218B33810;
      result[242] = sub_218B33820;
      result[249] = sub_218B33830;
      result[240] = sub_218B33840;
      result[241] = sub_218B33850;
      result[246] = sub_218B33860;
      result[243] = sub_218B33870;
      result[245] = sub_218B33880;
      result[244] = sub_218B33890;
      result[248] = sub_218B338A0;
      result[251] = sub_218B338B0;
      result[253] = sub_218B338C0;
      result[250] = sub_218B338D0;
      result[252] = sub_218B338E0;
      result[136] = sub_218B343D4;
      result[145] = sub_218B34424;
      result[137] = sub_218B34440;
      result[140] = sub_218B3445C;
      result[147] = sub_218B34478;
      result[138] = sub_218B34494;
      result[139] = sub_218B344B0;
      result[144] = sub_218B344CC;
      result[141] = sub_218B344E8;
      result[143] = sub_218B34504;
      result[142] = sub_218B34520;
      result[146] = sub_218B3453C;
      result[149] = sub_218B34558;
      result[151] = sub_218B34574;
      result[148] = sub_218B34590;
      result[150] = sub_218B345AC;
      result[34] = sub_218B3300C;
      result[35] = sub_218B3306C;
      result[36] = sub_218B330B4;
      result[37] = sub_218B330CC;
      result[42] = sub_218B330E4;
      result[43] = sub_218B33054;
      result[38] = sub_218B33084;
      result[39] = sub_218B330FC;
      result[40] = sub_218B3312C;
      result[41] = sub_218B33114;
      result[44] = sub_218B33144;
      result[45] = sub_218B3309C;
      result[153] = sub_218B364B4;
      result[162] = sub_218B35978;
      result[289] = sub_218B38354;
      result[272] = sub_218B36890;
      result[281] = sub_218B36158;
      result[170] = sub_218B36638;
      result[179] = sub_218B35C6C;
      result[51] = sub_218B36310;
      result[60] = sub_218B35794;
      result[187] = sub_218B37FF4;
      result[306] = sub_218B381B4;
      result[204] = sub_218B37DA4;
      result[68] = sub_218B37B38;
    }
  }
  return result;
}

uint64_t sub_218BB9F04()
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = &unk_253D5E960;
  v2 = &unk_253D5E9A0;
  v3 = &unk_253D5EAA0;
  v4 = &unk_253D5EEA0;
  sub_218BB9F88((uint64_t)&unk_253D5E950, 0, (uint64_t)&v1, 1, 0);
  v1 = 0;
  v2 = &unk_253D5F6B0;
  v3 = &unk_253D5F6F0;
  v4 = &unk_253D5F7F0;
  return sub_218BB9F88((uint64_t)&unk_253D5F6A0, 1u, (uint64_t)&v1, 1, 0);
}

uint64_t sub_218BB9F88(uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5)
{
  char v10;
  char v11;
  uint64_t result;
  uint64_t i;
  _BYTE *v14;
  char v17;
  BOOL v18;
  char v20;
  uint64_t j;
  uint64_t v22;

  if (a4)
    v10 = 7;
  else
    v10 = 0;
  if (a5)
    v11 = 56;
  else
    v11 = 0;
  result = sub_218BBA0F0(a1, a2, v11 | v10);
  if (a2 == 3)
  {
    for (i = 8; i != 16; i += 2)
    {
      v14 = *(_BYTE **)(a3 + 24);
      if (i == 10 && a4 == 0 || i == 14)
        v17 = 0;
      else
        v17 = 7;
      v18 = i != 12 || a5 == 0;
      *(_QWORD *)(a3 + 24) = v14 + 8;
      *(_WORD *)(a1 + i) = (_WORD)v14 - a1;
      if (!v18 || i == 8)
        v20 = 56;
      else
        v20 = 0;
      *v14 = v17 | v20;
      v14[1] = v17 | 0x38;
      v14[3] = v20 | 7;
      v14[2] = (v17 | v20) & 0x3C;
      v14[4] = (v17 | v20) & 0xF7;
      v14[5] = v17 | 0x10;
      v14[6] = v17 | v20 | 1;
      v14[7] = (v17 | v20) & 0x34;
    }
  }
  else
  {
    for (j = 8; j != 16; j += 2)
    {
      v22 = *(_QWORD *)(a3 + 8 * a2);
      *(_QWORD *)(a3 + 8 * a2) = v22 + 16;
      *(_WORD *)(a1 + j) = v22 - a1;
      result = sub_218BB9F88();
    }
  }
  return result;
}

uint64_t sub_218BBA0F0(uint64_t result, int a2, char a3)
{
  *(_BYTE *)result = a3;
  *(_BYTE *)(result + 1) = a3 | 0x38;
  *(_BYTE *)(result + 3) = a3 | 7;
  *(_BYTE *)(result + 2) = a3 & 0x38;
  *(_BYTE *)(result + 4) = a3 & 7;
  *(_WORD *)(result + 5) = 1848;
  if (a2 == 3)
  {
    *(_BYTE *)(result + 5) = a3 & 4 | 0x38;
    *(_BYTE *)(result + 6) = a3 & 0x30 | 7;
  }
  return result;
}

uint64_t sub_218BBA140(uint64_t result, uint64_t a2, int *a3, int *a4)
{
  int v7;
  unsigned int v8;

  v7 = *(_DWORD *)(a2 + 4);
  if (!v7)
  {
    result = sub_218BBB360(result);
    v7 = (int)result >= 256 ? 256 : result;
    if (v7 <= 1)
      v7 = 1;
  }
  *a3 = v7;
  v8 = *(_DWORD *)(a2 + 8);
  if (v8)
  {
    if (v8 < v7)
      v7 = *(_DWORD *)(a2 + 8);
  }
  else if (v7 > 0x31)
  {
    v7 = 8;
  }
  else
  {
    v7 = byte_218BBFE68[v7 - 1];
  }
  *a4 = v7;
  return result;
}

uint64_t sub_218BBA1CC(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;
  void (*v8)(uint64_t, uint64_t);
  unsigned int *v9;
  size_t v10;
  void *v11;
  size_t v12;
  void *v13;
  pthread_mutex_t *v14;
  pthread_cond_t *v15;
  unsigned int v16;
  size_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  dispatch_group_t v24;
  dispatch_queue_global_t global_queue;
  uint64_t v26;
  unint64_t i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t (**v32)(uint64_t, int, int, int, int, int);
  _DWORD *v33;
  void *memptr;
  pthread_attr_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  pthread_once(&stru_253D3D590, (void (*)(void))sub_218BBA808);
  v4 = 4294967274;
  if (a1
    && a2
    && a2[1] <= 0x100
    && a2[2] <= 0x100
    && *((_QWORD *)a2 + 5)
    && *((_QWORD *)a2 + 6)
    && a2[4] <= 0x1F
    && a2[21] <= 3)
  {
    memset(&v35, 0, sizeof(v35));
    if (pthread_attr_init(&v35))
      return 4294967284;
    pthread_attr_setstacksize(&v35, 0x100000uLL);
    memptr = 0;
    if (malloc_type_posix_memalign(&memptr, 0x40uLL, 0xF700uLL, 0xE584FBEuLL))
      v5 = 0;
    else
      v5 = memptr;
    *a1 = (uint64_t)v5;
    if (v5)
    {
      bzero(v5, 0xF700uLL);
      v7 = *((_OWORD *)a2 + 2);
      v5[7880] = *((_QWORD *)a2 + 6);
      *((_OWORD *)v5 + 3939) = v7;
      *(_OWORD *)(v5 + 7895) = *(_OWORD *)(a2 + 14);
      v5[7881] = *(_QWORD *)(a2 + 3);
      *((_DWORD *)v5 + 15765) = a2[5];
      *((_DWORD *)v5 + 15767) = a2[6];
      *((_OWORD *)v5 + 3942) = *(_OWORD *)(a2 + 18);
      v5[7893] = 0;
      *(_OWORD *)(v5 + 7891) = 0u;
      *(_OWORD *)(v5 + 7889) = 0u;
      v5[7888] = 0x8000000000000000;
      v5[7890] = -1;
      if (!sub_218BB8B9C((pthread_mutex_t **)v5 + 9)
        && !sub_218BB8B9C((pthread_mutex_t **)v5 + 12)
        && !sub_218BB8B9C((pthread_mutex_t **)v5 + 6240)
        && !sub_218BB8B9C((pthread_mutex_t **)v5 + 6241)
        && !sub_218BB8B9C((pthread_mutex_t **)v5 + 7898)
        && !sub_218BB8B9C((pthread_mutex_t **)v5 + 6586))
      {
        v8 = (void (*)(uint64_t, uint64_t))v5[7880];
        v32 = (uint64_t (**)(uint64_t, int, int, int, int, int))(v5 + 7875);
        if ((uint64_t (*)(uint64_t, uint64_t))v5[7879] == sub_218BA2904)
        {
          if (v8 != sub_218BA29F0 || v5[7878] || sub_218BB8B9C((pthread_mutex_t **)v5 + 7897))
            goto LABEL_30;
          v5[7878] = v5[7897];
        }
        else if (v8 == sub_218BA29F0)
        {
          goto LABEL_30;
        }
        v5[106] = v5 + 105;
        *((_DWORD *)v5 + 210) = 0;
        v9 = (unsigned int *)(v5 + 1);
        v33 = v5 + 3;
        sub_218BBA140((uint64_t)v5, (uint64_t)a2, (int *)v5 + 6, (int *)v5 + 2);
        v10 = 5712 * *((unsigned int *)v5 + 2);
        memptr = 0;
        v11 = malloc_type_posix_memalign(&memptr, 0x20uLL, v10, 0xE584FBEuLL) ? 0 : memptr;
        *v5 = v11;
        if (v11)
        {
          bzero(v11, 5712 * *((unsigned int *)v5 + 2));
          v12 = 258752 * *((unsigned int *)v5 + 6);
          memptr = 0;
          v13 = malloc_type_posix_memalign(&memptr, 0x40uLL, v12, 0xE584FBEuLL) ? 0 : memptr;
          v5[2] = v13;
          if (v13)
          {
            bzero(v13, 258752 * *v33);
            if (*v33 <= 1u)
            {
              v16 = *v9;
            }
            else
            {
              v14 = (pthread_mutex_t *)(v5 + 112);
              if (pthread_mutex_init((pthread_mutex_t *)v5 + 14, 0))
                goto LABEL_30;
              v15 = (pthread_cond_t *)(v5 + 120);
              if (pthread_cond_init((pthread_cond_t *)v5 + 20, 0))
                goto LABEL_73;
              if (pthread_cond_init((pthread_cond_t *)(v5 + 129), 0))
                goto LABEL_72;
              v16 = *((_DWORD *)v5 + 2);
              *((_DWORD *)v5 + 253) = v16;
              v5[127] = 0xFFFFFFFFLL;
              *((_DWORD *)v5 + 12464) = 1;
            }
            if (v16 >= 2)
            {
              v17 = 296 * v16;
              v18 = malloc_type_malloc(v17, 0xEDC67742uLL);
              v5[107] = v18;
              if (!v18)
                goto LABEL_30;
              bzero(v18, v17);
              v16 = *v9;
            }
            if (v16)
            {
              v19 = 0;
              v20 = 5608;
              do
              {
                v21 = *v5;
                if (*((_DWORD *)v5 + 6) >= 2u)
                {
                  if (pthread_mutex_init((pthread_mutex_t *)(v21 + v20 - 248), 0))
                    goto LABEL_30;
                  if (pthread_cond_init((pthread_cond_t *)(v21 + v20 - 184), 0))
                  {
                    v14 = (pthread_mutex_t *)(v21 + v20 - 248);
                    goto LABEL_73;
                  }
                  v22 = v21 + v20;
                  if (pthread_mutex_init((pthread_mutex_t *)(v21 + v20), 0))
                  {
                    v15 = (pthread_cond_t *)(v22 - 184);
                    v14 = (pthread_mutex_t *)(v22 - 248);
                    goto LABEL_72;
                  }
                }
                *(_QWORD *)(v21 + v20 - 2352) = v5;
                *(_QWORD *)(v21 + v20 - 136) = v5 + 112;
                *(_DWORD *)(v21 + v20 - 968) = -1;
                v23 = (_OWORD *)(v21 + v20 - 1384);
                *v23 = 0u;
                v23[1] = 0u;
                ++v19;
                v20 += 5712;
              }
              while (v19 < *((unsigned int *)v5 + 2));
            }
            v24 = dispatch_group_create();
            v5[4] = v24;
            if (v24)
            {
              global_queue = dispatch_get_global_queue(*a2, 0);
              v5[5] = global_queue;
              if (global_queue)
              {
                if (*v33)
                {
                  v26 = 0;
                  for (i = 0; i < v31; ++i)
                  {
                    v28 = v5[2];
                    v29 = v28 + v26;
                    v30 = *v5;
                    *(_QWORD *)(v29 + 258696) = v5 + 112;
                    *(_QWORD *)v29 = v5;
                    *(_QWORD *)(v29 + 8) = v30;
                    bzero((void *)(v28 + v26 + 1024), 0x1000uLL);
                    v31 = *((unsigned int *)v5 + 6);
                    if (v31 >= 2)
                    {
                      if (pthread_mutex_init((pthread_mutex_t *)(v29 + 258624), 0))
                        goto LABEL_30;
                      if (pthread_cond_init((pthread_cond_t *)(v28 + v26 + 258576), 0))
                      {
                        v14 = (pthread_mutex_t *)(v28 + v26 + 258624);
                        goto LABEL_73;
                      }
                      if (!v5[4]
                        && pthread_create((pthread_t *)(v29 + 258568), &v35, (void *(__cdecl *)(void *))sub_218BA46C0, (void *)(v28 + v26)))
                      {
                        v15 = (pthread_cond_t *)(v28 + v26 + 258576);
                        v14 = (pthread_mutex_t *)(v28 + v26 + 258624);
LABEL_72:
                        pthread_cond_destroy(v15);
LABEL_73:
                        pthread_mutex_destroy(v14);
                        goto LABEL_30;
                      }
                      *(_DWORD *)(v28 + v26 + 258688) = 1;
                      v31 = *v33;
                    }
                    v26 += 258752;
                  }
                }
                v5[7874] = sub_218BA39F8;
                *v32 = sub_218B67C98;
                v5[7876] = sub_218B6803C;
                v5[7877] = sub_218B682C0;
                v4 = 0;
                if ((dword_253D3D5E0 & 1) != 0)
                {
                  v32[1] = (uint64_t (*)(uint64_t, int, int, int, int, int))sub_218B2B3C4;
                  v32[2] = (uint64_t (*)(uint64_t, int, int, int, int, int))sub_218B2B330;
                }
                goto LABEL_16;
              }
            }
          }
        }
      }
LABEL_30:
      sub_218BBA82C(a1, 0);
    }
    v4 = 4294967284;
LABEL_16:
    pthread_attr_destroy(&v35);
  }
  return v4;
}

char *sub_218BBA808()
{
  dword_253D3D5E0 = sub_218BB8C8C();
  sub_218BB7CA0();
  sub_218BB9F04();
  return sub_218BBAC48();
}

void sub_218BBA82C(uint64_t *a1, int a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  _DWORD *v6;
  NSObject *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  void **v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v2 = *a1;
  if (*a1)
  {
    if (a2)
      sub_218B9F3C8(*a1);
    v4 = *(void **)(v2 + 16);
    if (v4)
    {
      if (*(_DWORD *)(v2 + 49856))
      {
        pthread_mutex_lock((pthread_mutex_t *)(v2 + 896));
        v5 = *(unsigned int *)(v2 + 24);
        if ((_DWORD)v5)
        {
          v6 = (_DWORD *)(*(_QWORD *)(v2 + 16) + 258716);
          do
          {
            if (!*(v6 - 7))
              break;
            *v6 = 1;
            v6 += 64688;
            --v5;
          }
          while (v5);
        }
        pthread_cond_broadcast((pthread_cond_t *)(v2 + 960));
        pthread_mutex_unlock((pthread_mutex_t *)(v2 + 896));
        v7 = *(NSObject **)(v2 + 32);
        if (v7)
          dispatch_group_wait(v7, 0xFFFFFFFFFFFFFFFFLL);
        if (*(_DWORD *)(v2 + 24))
        {
          v8 = 0;
          v9 = 258688;
          do
          {
            v10 = *(_QWORD *)(v2 + 16);
            if (!*(_DWORD *)(v10 + v9))
              break;
            if (!*(_QWORD *)(v2 + 32))
              pthread_join(*(pthread_t *)(v10 + v9 - 120), 0);
            v11 = v10 + v9;
            pthread_cond_destroy((pthread_cond_t *)(v11 - 112));
            pthread_mutex_destroy((pthread_mutex_t *)(v11 - 64));
            ++v8;
            v9 += 258752;
          }
          while (v8 < *(unsigned int *)(v2 + 24));
        }
        pthread_cond_destroy((pthread_cond_t *)(v2 + 1032));
        pthread_cond_destroy((pthread_cond_t *)(v2 + 960));
        pthread_mutex_destroy((pthread_mutex_t *)(v2 + 896));
        v4 = *(void **)(v2 + 16);
      }
      free(v4);
    }
    v12 = *(NSObject **)(v2 + 32);
    if (v12)
      dispatch_release(v12);
    v13 = *(char **)v2;
    if (*(_QWORD *)v2)
    {
      v14 = -1;
      v15 = 3112;
      do
      {
        v16 = *(unsigned int *)(v2 + 8);
        if (++v14 >= v16)
          break;
        if (v16 >= 2)
        {
          free(*(void **)&v13[v15 + 2576]);
          free(*(void **)&v13[v15 + 1248]);
          free(*(void **)&v13[v15 + 1256]);
          free(*(void **)&v13[v15 + 1272]);
          free(*(void **)&v13[v15 + 1280]);
          free(*(void **)&v13[v15 + 1312]);
          free(*(void **)&v13[v15 + 1264]);
        }
        if (*(_DWORD *)(v2 + 24) >= 2u)
        {
          pthread_mutex_destroy((pthread_mutex_t *)&v13[v15 + 2496]);
          pthread_cond_destroy((pthread_cond_t *)&v13[v15 + 2312]);
          pthread_mutex_destroy((pthread_mutex_t *)&v13[v15 + 2248]);
        }
        v17 = &v13[v15];
        free(*(void **)&v13[v15 + 1232]);
        free(*(void **)&v13[v15 + 2368]);
        free(*(void **)&v13[v15 + 2376]);
        free(*(void **)&v13[v15 + 152]);
        free(*(void **)&v13[v15 + 296]);
        free(*(void **)&v13[v15 + 920]);
        free(*(void **)&v13[v15]);
        free(*(void **)&v13[v15 + 1328]);
        free(*(void **)&v13[v15 + 1320]);
        free(*(void **)&v13[v15 + 1336]);
        free(*(void **)&v13[v15 + 2048]);
        free(*(void **)&v13[v15 + 2176]);
        v18 = *(void **)&v13[v15 + 1128];
        if (v18)
        {
          free(v18);
          *((_QWORD *)v17 + 141) = 0;
        }
        v19 = (void *)*((_QWORD *)v17 + 139);
        if (v19)
        {
          free(v19);
          *((_QWORD *)v17 + 139) = 0;
        }
        v20 = (void **)&v13[v15];
        free(v20[258]);
        free(v20[259]);
        v13 = *(char **)v2;
        v15 += 5712;
      }
      while (*(_QWORD *)v2);
    }
    free(v13);
    v21 = *(unsigned int *)(v2 + 8);
    if (v21 > 1 && *(_QWORD *)(v2 + 856))
    {
      v22 = 0;
      v23 = 288;
      do
      {
        v24 = *(_QWORD *)(v2 + 856);
        if (*(_QWORD *)(v24 + v23 - 280))
        {
          sub_218BA2EB0(v24 + v23 - 288);
          *(_QWORD *)(v24 + v23) = 0;
          v21 = *(unsigned int *)(v2 + 8);
        }
        ++v22;
        v23 += 296;
      }
      while (v22 < v21);
      free(*(void **)(v2 + 856));
    }
    if (*(int *)(v2 + 60) >= 1)
    {
      v25 = 0;
      v26 = 0;
      do
      {
        sub_218B70C54(*(_QWORD *)(v2 + 48) + v25);
        ++v26;
        v25 += 80;
      }
      while (v26 < *(int *)(v2 + 60));
    }
    free(*(void **)(v2 + 48));
    v27 = 0;
    v28 = 0;
    v29 = v2 + 52696;
    do
    {
      v30 = (_QWORD *)(v2 + 52704 + v28);
      *v30 = 0;
      v30[1] = 0;
      sub_218B9F368((uint64_t *)(v29 + v28));
      v31 = v29 + v27;
      if (*(_QWORD *)(v29 + v27 - 2752))
      {
        sub_218BA2EB0(v31 - 2760);
        *(_QWORD *)(v31 - 2472) = 0;
      }
      sub_218B9F368((uint64_t *)(v31 - 2456));
      sub_218B9F368((uint64_t *)(v31 - 2464));
      v28 += 24;
      v27 += 344;
    }
    while (v28 != 192);
    sub_218B9F368((uint64_t *)(v2 + 80));
    sub_218B9F368((uint64_t *)(v2 + 104));
    sub_218B9F368((uint64_t *)(v2 + 136));
    sub_218B9F368((uint64_t *)(v2 + 120));
    sub_218B9F368((uint64_t *)(v2 + 152));
    sub_218BB8C10(*(_QWORD *)(v2 + 72));
    sub_218BB8C10(*(_QWORD *)(v2 + 96));
    sub_218BB8C10(*(_QWORD *)(v2 + 49920));
    sub_218BB8C10(*(_QWORD *)(v2 + 49928));
    sub_218BB8C10(*(_QWORD *)(v2 + 52688));
    sub_218BB8C10(*(_QWORD *)(v2 + 63176));
    sub_218BB8C10(*(_QWORD *)(v2 + 63184));
    if (*a1)
    {
      free((void *)*a1);
      *a1 = 0;
    }
  }
}

char *sub_218BBAC48()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *result;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  unint64_t v22;
  char *v23;
  uint64_t i;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t j;
  unint64_t v30;
  char *v31;
  uint64_t k;
  unint64_t v33;
  char *v34;
  uint64_t m;
  unint64_t v36;
  char *v37;
  uint64_t n;
  unint64_t v39;
  char *v40;
  uint64_t ii;
  unint64_t v42;
  char *v43;
  uint64_t jj;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  _OWORD *v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;

  v0 = 0;
  v86 = (char *)&unk_253D649C3;
  v87 = (char *)&unk_253D64961;
  v85 = (char *)&unk_218BC7BC1;
  v84 = (char *)&unk_253D64981;
  v82 = (char *)&unk_253D60D40;
  v83 = (char *)&unk_218BC7BC0;
  v80 = (char *)&unk_255005F00;
  v81 = (char *)&unk_253D6DBC0;
  v78 = (char *)&unk_255005000;
  v79 = (char *)&unk_253D6CCC0;
  v76 = (char *)&unk_255004880;
  v77 = (char *)&unk_253D6C180;
  v74 = (char *)&unk_2550044C0;
  v75 = (char *)&unk_253D6C900;
  v73 = (char *)&unk_253D64960;
  v1 = (char *)&unk_218BC7BA0;
  do
  {
    v2 = 0;
    v3 = 1;
    v71 = v1;
    v72 = v0;
    do
    {
      v4 = 0;
      v5 = (char *)&unk_2550044C0 + 64 * v0 + 32 * v2;
      v6 = (_QWORD *)((char *)&unk_253D5FA40 + 304 * v0 + 152 * v2);
      v6[5] = v5;
      v6[6] = (char *)&unk_253D6C900 + 64 * v0 + 32 * v2;
      v7 = (char *)&unk_255004880 + 128 * v0 + 64 * v2;
      v6[13] = v7;
      v6[14] = (char *)&unk_253D6C180 + 128 * v0 + 64 * v2;
      v8 = (char *)&unk_255005000 + 256 * v0 + 128 * v2;
      v6[7] = v8;
      v6[8] = (char *)&unk_253D6CCC0 + 256 * v0 + 128 * v2;
      v9 = (char *)&unk_255005F00 + 512 * v0 + 256 * v2;
      v6[15] = v9;
      v6[16] = (char *)&unk_253D6DBC0 + 512 * v0 + 256 * v2;
      v6[10] = (char *)&unk_253D60D40 + 1024 * v0 + 512 * v2;
      v10 = (char *)&unk_253D72000 + 32 * v0 + 16 * v2;
      v11 = (char *)&unk_253D6F9E0 + 128 * v0 + 64 * v2;
      *v6 = v10;
      v6[1] = v11;
      v12 = (char *)&unk_253D701E0 + 512 * v0 + 256 * v2;
      v13 = (char *)&unk_253D64960 + 2048 * v0 + 1024 * v2;
      v6[2] = v12;
      v6[3] = v13;
      v6[9] = (char *)&unk_218BC7BA0 + 1024 * v0 + 512 * v2;
      v89 = v6 + 9;
      v91 = v3;
      v88 = v2 << 10;
      v14 = (char *)&unk_218BCB7A0 + 1056 * v0 + 528 * v2;
      v90 = (unint64_t)v13;
      result = v13;
      v92 = v2;
      v16 = &v87[1024 * v2];
      do
      {
        v93 = v4 + 1;
        v94 = result;
        v17 = v14;
        memcpy(result, v14, v4 + 1);
        if (v4 <= 0x1E)
        {
          v18 = 0;
          v19 = &v17[v4];
          do
          {
            v20 = &v19[v4 + v18];
            v21 = v20[1];
            v19 = v20 + 1;
            v16[v18++] = v21;
          }
          while (v4 + v18 != 31);
        }
        result = v94 + 32;
        v14 = &v17[v93];
        v16 += 33;
        ++v4;
      }
      while (v93 != 32);
      v22 = 0;
      v23 = &v86[v88];
      do
      {
        for (i = 0; i != 32; i += 8)
          *v10++ = v23[i];
        v23 += 256;
        v25 = v22 >= 0x18;
        v22 += 8;
      }
      while (!v25);
      v26 = 0;
      v27 = v92 << 9;
      v28 = &v85[512 * v92];
      do
      {
        for (j = 0; j != 32; j += 4)
          *v5++ = v28[j];
        v28 += 128;
        v25 = v26 >= 0xC;
        v26 += 4;
      }
      while (!v25);
      v30 = 0;
      v31 = &v84[v88];
      do
      {
        for (k = 0; k != 32; k += 4)
          *v11++ = v31[k];
        v31 += 128;
        v25 = v30 >= 0x1C;
        v30 += 4;
      }
      while (!v25);
      v33 = 0;
      v34 = &v83[v27];
      do
      {
        for (m = 0; m != 32; m += 2)
          *v7++ = v34[m];
        v34 += 128;
        v25 = v33 >= 0xC;
        v33 += 4;
      }
      while (!v25);
      v36 = 0;
      v37 = &v71[v27];
      do
      {
        for (n = 0; n != 32; n += 2)
          *v8++ = v37[n];
        v37 += 64;
        v25 = v36 >= 0xE;
        v36 += 2;
      }
      while (!v25);
      v39 = 0;
      v40 = &v73[v88];
      do
      {
        for (ii = 0; ii != 32; ii += 2)
          *v12++ = v40[ii];
        v40 += 64;
        v25 = v39 >= 0x1E;
        v39 += 2;
      }
      while (!v25);
      v42 = 0;
      v43 = &v71[v27];
      do
      {
        for (jj = 0; jj != 32; ++jj)
          v9[jj] = v43[jj];
        v9 += 32;
        v43 += 64;
        v25 = v42 >= 0xE;
        v42 += 2;
      }
      while (!v25);
      v45 = 0;
      v46 = &v74[32 * v92];
      v47 = &v75[32 * v92];
      do
      {
        v48 = 0;
        v49 = v47;
        do
        {
          *v49 = v46[v48];
          v49 += 4;
          ++v48;
        }
        while (v48 != 8);
        ++v45;
        v46 += 8;
        ++v47;
      }
      while (v45 != 4);
      v50 = 0;
      v51 = &v76[64 * v92];
      v52 = &v77[64 * v92];
      do
      {
        v53 = 0;
        v54 = v52;
        do
        {
          *v54 = v51[v53];
          v54 += 4;
          ++v53;
        }
        while (v53 != 16);
        ++v50;
        v51 += 16;
        ++v52;
      }
      while (v50 != 4);
      v55 = 0;
      v56 = &v78[128 * v92];
      v57 = &v79[128 * v92];
      do
      {
        v58 = 0;
        v59 = v57;
        do
        {
          *v59 = v56[v58];
          v59 += 8;
          ++v58;
        }
        while (v58 != 16);
        ++v55;
        v56 += 16;
        ++v57;
      }
      while (v55 != 8);
      v60 = 0;
      v61 = &v80[256 * v92];
      v62 = &v81[256 * v92];
      do
      {
        v63 = 0;
        v64 = v62;
        do
        {
          *v64 = v61[v63];
          v64 += 8;
          ++v63;
        }
        while (v63 != 32);
        ++v60;
        v61 += 32;
        ++v62;
      }
      while (v60 != 8);
      v65 = 0;
      v66 = &v71[v27];
      v67 = &v82[v27];
      do
      {
        v68 = 0;
        v69 = v67;
        do
        {
          *v69 = v66[v68];
          v69 += 16;
          ++v68;
        }
        while (v68 != 32);
        ++v65;
        v66 += 32;
        ++v67;
      }
      while (v65 != 16);
      v3 = 0;
      v0 = v72;
      v70 = (char *)&unk_253D5FA40 + 304 * v72 + 152 * v92;
      *((_QWORD *)v70 + 4) = v90;
      *(int64x2_t *)(v70 + 88) = vdupq_n_s64(v90);
      *(_OWORD *)(v70 + 136) = *v89;
      v2 = 1;
    }
    while ((v91 & 1) != 0);
    v0 = v72 + 1;
    v86 += 2048;
    v87 += 2048;
    v84 += 2048;
    v85 += 1024;
    v83 += 1024;
    v1 = v71 + 1024;
    v73 += 2048;
    v74 += 64;
    v75 += 64;
    v76 += 128;
    v77 += 128;
    v78 += 256;
    v79 += 256;
    v80 += 512;
    v81 += 512;
    v82 += 1024;
  }
  while (v72 != 14);
  return result;
}

_QWORD *sub_218BBB2B0(_QWORD *result)
{
  *result = sub_218BA0A8C;
  result[1] = sub_218BA0BF0;
  result[2] = sub_218BA0BFC;
  result[3] = sub_218BA0C08;
  result[4] = sub_218BA0C14;
  result[5] = sub_218BA1348;
  result[6] = sub_218BA1384;
  result[7] = sub_218BA13C0;
  if ((dword_253D3D5E0 & 1) != 0)
  {
    *result = sub_218B4657C;
    result[1] = sub_218B46A24;
    result[2] = sub_218B46C64;
    result[3] = sub_218B46764;
    result[4] = sub_218BA13F8;
    result[5] = sub_218BA15F4;
    result[6] = sub_218BA1830;
    result[7] = sub_218BA1A6C;
  }
  return result;
}

uint64_t sub_218BBB360(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v9;
  unsigned int v10;

  v10 = 0;
  v9 = 4;
  if (!sysctlbyname("hw.logicalcpu", &v10, &v9, 0, 0))
    return v10;
  sub_218BB90C0(a1, (uint64_t)"Unable to detect thread count, defaulting to single-threaded mode\n", v2, v3, v4, v5, v6, v7, v9);
  return 1;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x24BDBB7C8](theArray, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x24BDBB7F0](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x24BDBB808](allocator, capacity, callBacks);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x24BDBB850]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x24BDBBA18]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x24BDBBA20](BOOLean);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x24BDBBD08]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBDB0](theDict, key, value);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDD8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x24BDBBE68](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x24BDBC118]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x24BDBC130](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x24BDBC4C0](theString, formatOptions, format);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x24BDBC538](alloc, maxLength);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x24BDBEFD0]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

uint64_t CMBaseObjectGetDerivedStorage()
{
  return MEMORY[0x24BDC0080]();
}

OSStatus CMBlockBufferCreateContiguous(CFAllocatorRef structureAllocator, CMBlockBufferRef sourceBuffer, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x24BDC00B8](structureAllocator, sourceBuffer, blockAllocator, customBlockSource, offsetToData, dataLength, *(_QWORD *)&flags, blockBufferOut);
}

OSStatus CMBlockBufferGetDataPointer(CMBlockBufferRef theBuffer, size_t offset, size_t *lengthAtOffsetOut, size_t *totalLengthOut, char **dataPointerOut)
{
  return MEMORY[0x24BDC00D8](theBuffer, offset, lengthAtOffsetOut, totalLengthOut, dataPointerOut);
}

uint64_t CMDerivedObjectCreate()
{
  return MEMORY[0x24BDC0180]();
}

CFPropertyListRef CMFormatDescriptionGetExtension(CMFormatDescriptionRef desc, CFStringRef extensionKey)
{
  return (CFPropertyListRef)MEMORY[0x24BDC01A8](desc, extensionKey);
}

CFTypeRef CMGetAttachment(CMAttachmentBearerRef target, CFStringRef key, CMAttachmentMode *attachmentModeOut)
{
  return (CFTypeRef)MEMORY[0x24BDC01E0](target, key, attachmentModeOut);
}

CMBlockBufferRef CMSampleBufferGetDataBuffer(CMSampleBufferRef sbuf)
{
  return (CMBlockBufferRef)MEMORY[0x24BDC02B8](sbuf);
}

CMVideoDimensions CMVideoFormatDescriptionGetDimensions(CMVideoFormatDescriptionRef videoDesc)
{
  return (CMVideoDimensions)MEMORY[0x24BDC0668](videoDesc);
}

CFTypeRef CVBufferCopyAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x24BDC5138](buffer, key, attachmentMode);
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
  MEMORY[0x24BDC5180](buffer, key, value, *(_QWORD *)&attachmentMode);
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x24BDC51F8](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x24BDC5200](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x24BDC5210](image);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5248](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x24BDC5278](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x24BDC5288](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC5290](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC5298](pixelBuffer, planeIndex);
}

void CVPixelBufferGetExtendedPixels(CVPixelBufferRef pixelBuffer, size_t *extraColumnsOnLeft, size_t *extraColumnsOnRight, size_t *extraRowsOnTop, size_t *extraRowsOnBottom)
{
  MEMORY[0x24BDC52A8](pixelBuffer, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, extraRowsOnBottom);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52B0](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52B8](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x24BDC52C0](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D0](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D8](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52E8](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52F0](pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x24BDC5308](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  return MEMORY[0x24BDC5318](allocator, poolAttributes, pixelBufferAttributes, poolOut);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5320](allocator, pixelBufferPool, pixelBufferOut);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x24BDC53A0](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x24BDC53B0](pixelBuffer, unlockFlags);
}

uint64_t FigFormatDescriptionRetain()
{
  return MEMORY[0x24BDC08A8]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x24BDDD1E0]();
}

uint64_t VTDecoderSessionEmitDecodedFrame()
{
  return MEMORY[0x24BDF9028]();
}

uint64_t VTDecoderSessionGetPixelBufferPool()
{
  return MEMORY[0x24BDF9040]();
}

uint64_t VTDecoderSessionSetPixelBufferAttributes()
{
  return MEMORY[0x24BDF9048]();
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x24BDF9168](allocator, pixelTransferSessionOut);
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x24BDF9178](session, sourceBuffer, destinationBuffer);
}

uint64_t VTRegisterVideoDecoderWithInfo()
{
  return MEMORY[0x24BDF9188]();
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  return MEMORY[0x24BDF91A8](session, propertyKey, propertyValue);
}

uint64_t VTTileDecoderSessionEmitDecodedTile()
{
  return MEMORY[0x24BDF91B0]();
}

uint64_t VTTileDecoderSessionSetTileDecodeRequirements()
{
  return MEMORY[0x24BDF91B8]();
}

uint64_t VTVideoDecoderGetCMBaseObject()
{
  return MEMORY[0x24BDF91D8]();
}

uint64_t VTVideoDecoderGetClassID()
{
  return MEMORY[0x24BDF91E0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x24BEDABC0](a1, a2, a3);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete(void *__p)
{
  off_24D9B0990(__p);
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  off_24D9B0998(__p, a2);
}

uint64_t operator delete()
{
  return off_24D9B09A0();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24D9B09A8(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_24D9B09B0(__sz, a2);
}

uint64_t operator new()
{
  return off_24D9B09B8();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x24BDAC848]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x24BDADDA8](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADDB8](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADDF0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x24BDAED80](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x24BEDCFB0](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x24BEDCFC0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x24BDAF778](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x24BDAF790](a1);
}

int pthread_attr_setstacksize(pthread_attr_t *a1, size_t a2)
{
  return MEMORY[0x24BDAF7C0](a1, a2);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x24BDAF7C8](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x24BDAF7D0](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x24BDAF7D8](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x24BDAF7E0](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x24BDAF800](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x24BDAF818](a1, a2, a3, a4);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x24BDAF880](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8C0](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x24BDAF8C8](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8D0](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8E0](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x24BDAF910](a1, a2);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x24BDB0100](a1, a2, a3, a4, a5);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x24BDB0370](a1, a2, a3);
}

