void sub_21653C778(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialSubmixRouter::~SpatialSubmixRouter(Phase::Controller::SpatialSubmixRouter *this)
{
  void *v2;
  void *v3;
  void *v4;

  Phase::Controller::SpatialSubmixRouter::Reset(this);
  v2 = (void *)*((_QWORD *)this + 53);
  if (v2)
  {
    *((_QWORD *)this + 54) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 50);
  if (v3)
  {
    *((_QWORD *)this + 51) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 47);
  if (v4)
  {
    *((_QWORD *)this + 48) = v4;
    operator delete(v4);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 304));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 256));
  std::mutex::~mutex((std::mutex *)this + 3);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::~__hash_table((uint64_t)this + 80);
  std::__list_imp<Phase::Controller::SpatialSubmixRouter::StoppingRenderer>::clear((uint64_t *)this + 7);
  Phase::Controller::RouterCommandBatch::Clear((_QWORD *)this + 5);
  Phase::Controller::RouterCommandList::Clear((uint64_t)this);
}

_QWORD *Phase::Controller::SpatialSubmixRouter::Reset(Phase::Controller::SpatialSubmixRouter *this)
{
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)this + 15);
  atomic_store(0, (unsigned int *)this + 46);
  atomic_store(0xFFFFFFFF, (unsigned int *)this + 45);
  std::shared_ptr<Phase::Job>::reset[abi:ne180100]((_QWORD *)this + 20);
  *((_DWORD *)this + 44) = 0;
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::clear((uint64_t)this + 80);
  std::__list_imp<Phase::Controller::SpatialSubmixRouter::StoppingRenderer>::clear((uint64_t *)this + 7);
  Phase::Controller::RouterCommandList::Clear((uint64_t)this);
  return Phase::Controller::RouterCommandBatch::Clear((_QWORD *)this + 5);
}

Phase::Logger *Phase::Controller::SpatialSubmixRouter::CopyRuntimeSettingsFrom(Phase::Logger *this, const Phase::Controller::SpatialSubmixRouter *a2)
{
  uint64_t **v2;
  unsigned int v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  char *v8;
  uint64_t **v9;

  v2 = (uint64_t **)*((_QWORD *)this + 20);
  v3 = *((_DWORD *)this + 44);
  v4 = &v2[3 * v3];
  if (v3)
  {
    v5 = *v2;
    if (!*v2)
    {
      v6 = v2 + 3;
      while (1)
      {
        v2 = v6;
        if (v6 >= v4)
          break;
        v6 += 3;
        v5 = *v2;
        if (*v2)
          goto LABEL_9;
      }
      v5 = 0;
    }
LABEL_9:
    v7 = (unint64_t)v4;
  }
  else
  {
    v5 = 0;
    v7 = *((_QWORD *)this + 20);
  }
  if (v2 != v4)
  {
    v8 = (char *)a2 + 120;
    do
    {
      this = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams>::At((uint64_t)v8, *v5, v5[1]);
      v5[6] = *((_QWORD *)this + 6);
      if ((unint64_t)v2 < v7)
      {
        v9 = v2 + 3;
        while (1)
        {
          v2 = v9;
          if ((unint64_t)v9 >= v7)
            break;
          v9 += 3;
          v5 = *v2;
          if (*v2)
            goto LABEL_18;
        }
        v5 = 0;
      }
LABEL_18:
      ;
    }
    while (v2 != v4);
  }
  return this;
}

Phase::Logger *Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams>::At(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Phase::Logger *result;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  std::logic_error *exception;
  _BYTE v10[18];
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v10 = a2;
  *(_QWORD *)&v10[8] = a3;
  result = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)a1, v10);
  if (result)
    v6 = *((_QWORD *)result + 4);
  else
    v6 = 0;
  if (*(_DWORD *)(a1 + 56) <= v6
    || (v7 = *(_QWORD *)(a1 + 40), *(_DWORD *)(v7 + 24 * v6 + 20) != HIDWORD(v6))
    || (result = *(Phase::Logger **)(v7 + 24 * v6)) == 0)
  {
    v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 224));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v10 = 136315906;
      *(_QWORD *)&v10[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&v10[12] = 1024;
      *(_DWORD *)&v10[14] = 134;
      v11 = 2048;
      v12 = v6;
      v13 = 2048;
      v14 = a2;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [nullptr == pObject is true]: \"SubmixSlotMap::At couldn't find SubmixHandle %llu for SubmixId %llu\"", v10, 0x26u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "SubmixSlotMap::At couldn't find SubmixHandle %llu for SubmixId %llu");
  }
  return result;
}

void sub_21653CAF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatialSubmixRouter::AddInput(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  _QWORD *v8;
  Phase::Logger *v9;
  Phase::Logger *v10;
  Phase::Logger *v11;
  uint64_t *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  Phase::Logger *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  Phase::Logger *UniqueSlot;
  uint64_t v36;
  char *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  Phase::Logger *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  void *p_p;
  NSObject *v52;
  void **v53;
  std::logic_error *exception;
  NSObject *v55;
  std::logic_error *v56;
  NSObject *v57;
  void (__cdecl *v58)(std::logic_error *__hidden);
  struct type_info *v59;
  NSObject *v60;
  NSObject *v61;
  _QWORD *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  __int128 v70;
  uint64_t v71;
  char v72;
  void *__p;
  char v74;
  char v75;
  uint64_t v76;
  __int128 v77;
  _BYTE buf[18];
  __int16 v79;
  _BYTE v80[18];
  __int16 v81;
  double v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v8 = (_QWORD *)(a1 + 120);
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  v9 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 120), buf);
  if (v9)
  {
    v52 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v9)
                                                                                        + 224)));
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)&__p, *(Phase::Controller::SpatialModelerInfo **)(a1 + 48));
      v53 = v75 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "CvmSpatialSubmixRouter.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 335;
      v79 = 2080;
      *(_QWORD *)v80 = v53;
      *(_WORD *)&v80[8] = 2048;
      *(_QWORD *)&v80[10] = a2;
      _os_log_impl(&dword_2164CC000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (IdAlreadyExists) [HasSubmix(inSubmixId) is true]: \"%s [SpatialSubmixRouter]: inSubmixId %llu already exists!\"", buf, 0x26u);
      if (v75 < 0)
        operator delete(__p);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(exception, "%s [SpatialSubmixRouter]: inSubmixId %llu already exists!");
  }
  *(_QWORD *)&v63 = a2;
  *((_QWORD *)&v63 + 1) = a3;
  *(_QWORD *)&v64 = 0;
  DWORD2(v64) = 2;
  *(double *)&v65 = a4;
  *((_QWORD *)&v65 + 1) = 0x7FEFFFFFFFFFFFFFLL;
  v66 = -1;
  v10 = Phase::Fader<double>::Fader((Phase::Logger *)&v68, 0.0);
  v72 = 0;
  *(_QWORD *)&v77 = a2;
  *((_QWORD *)&v77 + 1) = a3;
  if (!(a2 | a3))
  {
    v55 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10) + 224));
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 60;
      _os_log_impl(&dword_2164CC000, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [kInvalidSubmixId == inSubmixId is true]: \"Invalid SubmixId pass to SubmixSlotMap::Insert\"", buf, 0x12u);
    }
    v56 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v56, "Invalid SubmixId pass to SubmixSlotMap::Insert");
    goto LABEL_76;
  }
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  v11 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v8, buf);
  if (v11)
  {
    v57 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11) + 224));
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 63;
      v79 = 2048;
      *(_QWORD *)v80 = a2;
      _os_log_impl(&dword_2164CC000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [true == Contains(inSubmixId) is true]: \"SubmixId %llu already exists in SubmixSlotMap::Insert\"", buf, 0x1Cu);
    }
    v56 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v56, "SubmixId %llu already exists in SubmixSlotMap::Insert");
LABEL_76:
    v56->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v58 = (void (__cdecl *)(std::logic_error *__hidden))MEMORY[0x24BEDAB88];
    goto LABEL_84;
  }
  v12 = (uint64_t *)(a1 + 160);
  v13 = (unsigned int *)(a1 + 180);
  v14 = atomic_load((unsigned int *)(a1 + 180));
  if (v14 == -1)
    goto LABEL_12;
  *(_QWORD *)buf = a1 + 192;
  buf[8] = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 192));
LABEL_6:
  v15 = v14;
  v16 = *v12;
  v17 = *(_DWORD *)(*v12 + 24 * v14 + 16);
  do
  {
    v14 = __ldaxr(v13);
    if (v14 != v15)
    {
      __clrex();
      if (v14 == -1)
      {
        std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
LABEL_12:
        v18 = (unsigned int *)(a1 + 184);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
        v76 = v19 | 0x100000000;
        goto LABEL_16;
      }
      goto LABEL_6;
    }
  }
  while (__stlxr(v17, v13));
  Phase::Handle64::Set((Phase::Logger *)&__p, v15, *(unsigned int *)(v16 + 24 * v15 + 20));
  v20 = (Phase::Logger *)std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
  v76 = (uint64_t)__p;
  if (!__p)
  {
    v61 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v20) + 224));
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 68;
      v79 = 2048;
      *(_QWORD *)v80 = a2;
      _os_log_impl(&dword_2164CC000, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [SubmixHandle::kInvalidHandle == submixHandle is true]: \"SubmixSlotMap::Insert unable to allocate new handle SubmixId %llu\"", buf, 0x1Cu);
    }
    v56 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v56, "SubmixSlotMap::Insert unable to allocate new handle SubmixId %llu");
    goto LABEL_83;
  }
LABEL_16:
  v21 = atomic_load((unsigned int *)(a1 + 184));
  v22 = *(unsigned int *)(a1 + 176);
  if (v22 < v21)
  {
    v23 = v21 >= 0x40 ? v21 + (v21 >> 1) : 64;
    if (v22 < v23)
    {
      Phase::details::SharedSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::AllocSlots(buf, v23);
      v24 = *(_QWORD *)buf;
      if ((_DWORD)v22)
      {
        v62 = v8;
        v25 = 0;
        do
        {
          v26 = (uint64_t *)(*v12 + v25);
          std::shared_ptr<Phase::Controller::SpatialModelerInstance::SubmixInfo>::operator=[abi:ne180100]((_QWORD *)(v24 + v25), *v26, v26[1])[2] = v26[2];
          v25 += 24;
        }
        while (24 * v22 != v25);
        v27 = v22;
        v8 = v62;
      }
      else
      {
        v27 = 0;
      }
      v28 = (_QWORD *)(v24 + 24 * v27);
      do
      {
        std::shared_ptr<Phase::Job>::reset[abi:ne180100](v28);
        v28[2] = 0x1FFFFFFFFLL;
        LODWORD(v22) = v22 + 1;
        v28 += 3;
      }
      while ((_DWORD)v23 != (_DWORD)v22);
      __p = (void *)(a1 + 192);
      v74 = 1;
      std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 192));
      v29 = *(_QWORD *)(a1 + 160);
      v30 = *(std::__shared_weak_count **)(a1 + 168);
      v31 = *(_QWORD *)&buf[8];
      *(_QWORD *)(a1 + 160) = v24;
      *(_QWORD *)(a1 + 168) = v31;
      *(_QWORD *)buf = v29;
      *(_QWORD *)&buf[8] = v30;
      std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&__p);
      *(_DWORD *)(a1 + 176) = v23;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
  }
  v34 = v76;
  UniqueSlot = (Phase::Logger *)Phase::details::SharedSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::GetUniqueSlot((uint64_t *)(a1 + 160), v76);
  v36 = (uint64_t)UniqueSlot;
  if (UniqueSlot)
  {
    v37 = (char *)operator new(0x90uLL);
    *((_QWORD *)v37 + 1) = 0;
    *((_QWORD *)v37 + 2) = 0;
    *(_QWORD *)v37 = &off_24D579A70;
    *(_OWORD *)(v37 + 24) = 0u;
    *(_OWORD *)(v37 + 72) = 0u;
    *(_OWORD *)(v37 + 40) = 0u;
    *(_OWORD *)(v37 + 104) = 0u;
    *(_OWORD *)(v37 + 120) = 0u;
    *((_QWORD *)v37 + 17) = 0;
    *(_OWORD *)(v37 + 88) = 0u;
    *(int64x2_t *)(v37 + 56) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *((_QWORD *)v37 + 9) = -1;
    Phase::Fader<double>::Fader((Phase::Logger *)(v37 + 88), 0.0);
    v37[136] = 0;
    *(_QWORD *)buf = v37 + 24;
    *(_QWORD *)&buf[8] = v37;
    UniqueSlot = (Phase::Logger *)std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100](v36, (__int128 *)buf);
    v38 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v39 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v36 = *(_QWORD *)v36;
  }
  if (!v34)
  {
    v60 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(UniqueSlot) + 224));
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 76;
      v79 = 2048;
      *(_QWORD *)v80 = 0;
      *(_WORD *)&v80[8] = 2048;
      *(_QWORD *)&v80[10] = v77;
      _os_log_impl(&dword_2164CC000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [SubmixHandle::kInvalidHandle == submixHandle is true]: \"SubmixSlotMap::Insert couldn't find SubmixHandle %llu for SubmixId %llu\"", buf, 0x26u);
    }
    v56 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v56, "SubmixSlotMap::Insert couldn't find SubmixHandle %llu for SubmixId %llu");
LABEL_83:
    v56->__vftable = (std::logic_error_vtbl *)&off_24D578278;
    v58 = Phase::Controller::InvalidId::~InvalidId;
LABEL_84:
    __cxa_throw(v56, v59, (void (*)(void *))v58);
  }
  v41 = v63;
  v42 = v64;
  v43 = v65;
  *(_QWORD *)(v36 + 48) = v66;
  *(_OWORD *)(v36 + 16) = v42;
  *(_OWORD *)(v36 + 32) = v43;
  *(_OWORD *)v36 = v41;
  *(_QWORD *)(v36 + 56) = v67;
  if ((__int128 *)v36 != &v63)
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__assign_with_size[abi:ne180100]<Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(v36 + 64, v68, v69, (v69 - v68) >> 6);
  v44 = v70;
  *(_QWORD *)(v36 + 104) = v71;
  *(_OWORD *)(v36 + 88) = v44;
  *(_BYTE *)(v36 + 112) = v72;
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__emplace_unique_key_args<Phase::UniqueObjectId,Phase::UniqueObjectId&,Phase::Handle64&>((uint64_t)v8, &v77, &v77, &v76);
  v45 = v76;
  *(_QWORD *)buf = &v68;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)(v36 + 16) = v45;
  *(_QWORD *)(v36 + 56) = 0x3FF0000000000000;
  *(_QWORD *)buf = &unk_24D5770F0;
  *(_QWORD *)&buf[8] = Phase::CurveFunction::Linear<double>;
  *(_QWORD *)&v80[4] = buf;
  Phase::Fader<double>::SetInternal(v36 + 64, (uint64_t)buf, 1.0, 0.0);
  v46 = *(Phase::Logger **)&v80[4];
  if (*(_BYTE **)&v80[4] == buf)
  {
    v47 = 4;
    v46 = (Phase::Logger *)buf;
LABEL_47:
    v46 = (Phase::Logger *)(*(uint64_t (**)(void))(*(_QWORD *)v46 + 8 * v47))();
  }
  else if (*(_QWORD *)&v80[4])
  {
    v47 = 5;
    goto LABEL_47;
  }
  if (*(_DWORD *)(a1 + 176) <= v45
    || *(_DWORD *)(*v12 + 24 * v45 + 20) != HIDWORD(v45)
    || (v48 = *(_QWORD *)(*v12 + 24 * v45)) == 0
    || a2 != *(_QWORD *)v48
    || a3 != *(_QWORD *)(v48 + 8)
    || *(_DWORD *)(v48 + 24) != 2
    || *(double *)(v48 + 32) != a4)
  {
    std::terminate();
  }
  v49 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v46)
                                                                                      + 224)));
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)&__p, *(Phase::Controller::SpatialModelerInfo **)(a1 + 48));
    if (v75 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "CvmSpatialSubmixRouter.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 352;
    v79 = 2080;
    *(_QWORD *)v80 = p_p;
    *(_WORD *)&v80[8] = 2048;
    *(_QWORD *)&v80[10] = a2;
    v81 = 2048;
    v82 = a4;
    _os_log_impl(&dword_2164CC000, v49, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s [SpatialSubmixRouter]: Added submixId %llu, send level %f", buf, 0x30u);
    if (v75 < 0)
      operator delete(__p);
  }

  return v45;
}

void sub_21653D470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void *v29;

  __cxa_free_exception(v29);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialSubmixRouter::RemoveInput(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t UniqueSlot;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  Phase::Logger *v17;
  NSObject *v18;
  void **v19;
  NSObject *v20;
  void **v21;
  std::logic_error *exception;
  NSObject *v23;
  std::logic_error *v24;
  void *__p[2];
  char v26;
  _BYTE buf[18];
  __int16 v28;
  void **v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)(a1 + 120);
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 120), buf))
  {
    v20 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                        + 224)));
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *(Phase::Controller::SpatialModelerInfo **)(a1 + 48));
      v21 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "CvmSpatialSubmixRouter.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 379;
      v28 = 2080;
      v29 = v21;
      v30 = 2048;
      v31 = a2;
      _os_log_impl(&dword_2164CC000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [not HasSubmix(inSubmixId) is true]: \"%s [SpatialSubmixRouter]: Non-existent submixId %llu\"", buf, 0x26u);
      if (v26 < 0)
        operator delete(__p[0]);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "%s [SpatialSubmixRouter]: Non-existent submixId %llu");
  }
  Phase::Controller::SpatialSubmixRouter::SetPlayState(a1, (uint64_t)a2, (uint64_t)a3, 0);
  __p[0] = a2;
  __p[1] = a3;
  v7 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v6, __p);
  v8 = v7;
  if (!v7)
  {
    v23 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 224));
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 91;
      v28 = 2048;
      v29 = (void **)__p[0];
      _os_log_impl(&dword_2164CC000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [iter == mSubmixHandleMap.end() is true]: \"SubmixSlotMap::Erase couldn't find SubmixId %llu\"", buf, 0x1Cu);
    }
    v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v24, "SubmixSlotMap::Erase couldn't find SubmixId %llu");
  }
  v9 = v7[4];
  UniqueSlot = Phase::details::SharedSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::GetUniqueSlot((uint64_t *)(a1 + 160), v9);
  v11 = UniqueSlot;
  if (!UniqueSlot)
    goto LABEL_14;
  ++*(_DWORD *)(UniqueSlot + 20);
  std::shared_ptr<Phase::Job>::reset[abi:ne180100]((_QWORD *)UniqueSlot);
  v12 = (unsigned int *)(a1 + 180);
  v13 = atomic_load((unsigned int *)(a1 + 180));
  *(_DWORD *)(v11 + 16) = v13;
  v14 = __ldaxr((unsigned int *)(a1 + 180));
  if (v14 != v13)
  {
    __clrex();
LABEL_8:
    while (1)
    {
      *(_DWORD *)(v11 + 16) = v14;
      v15 = __ldaxr(v12);
      if (v15 != v14)
        break;
      if (__stlxr(v9, v12))
        goto LABEL_12;
      v16 = 1;
LABEL_13:
      v14 = v15;
      if (v16)
        goto LABEL_14;
    }
    __clrex();
LABEL_12:
    v16 = 0;
    goto LABEL_13;
  }
  if (__stlxr(v9, v12))
    goto LABEL_8;
LABEL_14:
  v17 = (Phase::Logger *)std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(v6, v8);
  v18 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v17)
                                                                                      + 224)));
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *(Phase::Controller::SpatialModelerInfo **)(a1 + 48));
    if (v26 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "CvmSpatialSubmixRouter.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 388;
    v28 = 2080;
    v29 = v19;
    v30 = 2048;
    v31 = a2;
    _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s [SpatialSubmixRouter]: Removed submixId %llu", buf, 0x26u);
    if (v26 < 0)
      operator delete(__p[0]);
  }

}

void sub_21653D8EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialSubmixRouter::SetPlayState(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  Phase::Logger *v7;
  uint64_t v8;
  Phase::Logger *v9;
  uint64_t v10;
  uint64_t *v11;
  Phase::Logger *UniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  NSObject *v17;
  void **v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  NSObject *v23;
  std::logic_error *v24;
  NSObject *v25;
  void **v26;
  std::logic_error *exception;
  NSObject *v28;
  std::logic_error *v29;
  void *__p[2];
  char v31;
  Phase::Logger *v32;
  std::__shared_weak_count *v33;
  _BYTE buf[18];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  v7 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 120), buf);
  if (!v7 || (v8 = *((_QWORD *)v7 + 4)) == 0)
  {
    v25 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7)
                                                                                        + 224)));
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *(Phase::Controller::SpatialModelerInfo **)(a1 + 48));
      v26 = v31 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "CvmSpatialSubmixRouter.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 532;
      v35 = 2080;
      v36 = (uint64_t)v26;
      v37 = 2048;
      v38 = a2;
      _os_log_impl(&dword_2164CC000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [SubmixHandle::kInvalidHandle == submixHandle is true]: \"%s [SpatialSubmixRouter]: Non-existent submixId %llu!\"", buf, 0x26u);
      if (v31 < 0)
        operator delete(__p[0]);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "%s [SpatialSubmixRouter]: Non-existent submixId %llu!");
  }
  if (a4 || !Phase::Controller::SpatialSubmixRouter::IsStopped(a1, v8))
  {
    v9 = Phase::Controller::RouterCommandList::ExecuteCommands((Phase::Controller::RouterCommandList *)a1, (void *)a1);
    if (*(_DWORD *)(a1 + 176) <= v8
      || (v9 = (Phase::Logger *)(a1 + 160),
          v10 = *(_QWORD *)(a1 + 160),
          *(_DWORD *)(v10 + 24 * v8 + 20) != HIDWORD(v8))
      || (v11 = *(uint64_t **)(v10 + 24 * v8)) == 0)
    {
      v23 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v9) + 224));
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "CvmSubmixSlotMapImpl.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 145;
        v35 = 2048;
        v36 = v8;
        _os_log_impl(&dword_2164CC000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [nullptr == pObject is true]: \"SubmixSlotMap::At couldn't find SubmixHandle %llu\"", buf, 0x1Cu);
      }
      v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v24, "SubmixSlotMap::At couldn't find SubmixHandle %llu");
    }
    if (*((_DWORD *)v11 + 6) != a4)
    {
      UniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA = (Phase::Logger *)_ZN5Phase7details13SharedSlotMapINS_10Controller19SpatialSubmixRouter12SubmixParamsENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS4_S5_DnE9GetUniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA_((uint64_t *)v9, v8);
      if (!UniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA
        || (v13 = *(_QWORD *)UniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA) == 0)
      {
        v28 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(UniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA)
                                                         + 224));
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "CvmSubmixSlotMapImpl.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 182;
          v35 = 2048;
          v36 = v8;
          _os_log_impl(&dword_2164CC000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [nullptr == pObject is true]: \"SubmixSlotMap::MutableAt couldn't find SubmixHandle %llu\"", buf, 0x1Cu);
        }
        v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v29, "SubmixSlotMap::MutableAt couldn't find SubmixHandle %llu");
      }
      if (!a4)
      {
        v14 = *(_QWORD *)(a1 + 368);
        *(_OWORD *)buf = *(_OWORD *)v11;
        v15 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(v14 + 216), buf);
        if (v15)
        {
          v16 = v15[4];
          if (v16 != -1)
          {
            Phase::Controller::RenderGroupMgr::GetRenderer(*(Phase::Controller::RenderGroupMgr **)(a1 + 368), v16, &v32);
            if (v32)
            {
              (*(void (**)(Phase::Logger *, _QWORD, uint64_t))(*(_QWORD *)v32 + 40))(v32, *v11, v11[1]);
            }
            else
            {
              v17 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                                  + 224)));
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *(Phase::Controller::SpatialModelerInfo **)(a1 + 48));
                v18 = v31 >= 0 ? __p : (void **)__p[0];
                v19 = *v11;
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "CvmSpatialSubmixRouter.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 571;
                v35 = 2080;
                v36 = (uint64_t)v18;
                v37 = 2048;
                v38 = v19;
                _os_log_impl(&dword_2164CC000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s [SpatialSubmixRouter]: submixId %llu: renderer was not available when requested for SetPlayState.", buf, 0x26u);
                if (v31 < 0)
                  operator delete(__p[0]);
              }

            }
            v20 = v33;
            if (v33)
            {
              p_shared_owners = (unint64_t *)&v33->__shared_owners_;
              do
                v22 = __ldaxr(p_shared_owners);
              while (__stlxr(v22 - 1, p_shared_owners));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                std::__shared_weak_count::__release_weak(v20);
              }
            }
          }
        }
      }
      *(_DWORD *)(v13 + 24) = a4;
    }
  }
}

void sub_21653DDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);

  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::SpatialSubmixRouter::SetInputSendLevel(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  Phase::Logger *result;
  BOOL v6;
  double v7;

  result = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams>::MutableAt((_QWORD *)(a1 + 120), a2, a3);
  v6 = a4 > 1.0 || a4 < 0.0;
  v7 = fmin(fmax(a4, 0.0), 1.0);
  if (!v6)
    v7 = a4;
  *((double *)result + 4) = v7;
  return result;
}

Phase::Logger *Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams>::MutableAt(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  Phase::Logger *result;
  NSObject *v8;
  std::logic_error *exception;
  _BYTE v10[18];
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v10 = a2;
  *(_QWORD *)&v10[8] = a3;
  v5 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(a1, v10);
  if (v5)
    v6 = v5[4];
  else
    v6 = 0;
  result = (Phase::Logger *)_ZN5Phase7details13SharedSlotMapINS_10Controller19SpatialSubmixRouter12SubmixParamsENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS4_S5_DnE9GetUniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA_(a1 + 5, v6);
  if (!result || (result = *(Phase::Logger **)result) == 0)
  {
    v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 224));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v10 = 136315906;
      *(_QWORD *)&v10[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&v10[12] = 1024;
      *(_DWORD *)&v10[14] = 171;
      v11 = 2048;
      v12 = v6;
      v13 = 2048;
      v14 = a2;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [nullptr == pObject is true]: \"SubmixSlotMap::MutableAt couldn't find SubmixHandle %llu for SubmixId %llu\"", v10, 0x26u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "SubmixSlotMap::MutableAt couldn't find SubmixHandle %llu for SubmixId %llu");
  }
  return result;
}

void sub_21653E00C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double Phase::Controller::SpatialSubmixRouter::GetInputSendLevel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *((double *)Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams>::At(a1 + 120, a2, a3)+ 4);
}

uint64_t Phase::Controller::SpatialSubmixRouter::IsPrepared(Phase::Controller::SpatialModelerInfo **a1, uint64_t a2, uint64_t a3)
{
  Phase::Logger *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  Phase::Controller::SpatialModelerInfo *v12;
  _QWORD *v13;
  unint64_t v14;
  NSObject *v15;
  void **v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p[2];
  char v22;
  Phase::Logger *v23;
  std::__shared_weak_count *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  __int128 v31;
  uint64_t v32;
  _BYTE buf[18];
  __int16 v35;
  void **v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  Phase::Controller::RenderGroupMgr::LoadFreshData(a1[46]);
  Phase::Controller::RouterCommandList::ExecuteCommands((Phase::Controller::RouterCommandList *)a1, a1);
  v6 = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams>::At((uint64_t)(a1 + 15), a2, a3);
  v7 = *(_OWORD *)v6;
  v8 = *((_OWORD *)v6 + 1);
  v9 = *((_OWORD *)v6 + 2);
  v28 = *((_QWORD *)v6 + 6);
  v26 = v8;
  v27 = v9;
  v25 = v7;
  v29 = *((_QWORD *)v6 + 7);
  memset(v30, 0, sizeof(v30));
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__init_with_size[abi:ne180100]<Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(v30, *((_QWORD *)v6 + 8), *((_QWORD *)v6 + 9), (uint64_t)(*((_QWORD *)v6 + 9) - *((_QWORD *)v6 + 8)) >> 6);
  v10 = *(_OWORD *)((char *)v6 + 88);
  v32 = *((_QWORD *)v6 + 13);
  v31 = v10;
  if (*((_BYTE *)v6 + 112))
  {
    v11 = 1;
  }
  else
  {
    v12 = a1[46];
    *(_QWORD *)buf = a2;
    *(_QWORD *)&buf[8] = a3;
    v13 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)v12 + 27, buf);
    if (!v13 || (v14 = v13[4], v14 == -1))
    {
      v11 = 0;
    }
    else
    {
      Phase::Controller::RenderGroupMgr::GetRenderer(a1[46], v14, &v23);
      if (v23)
      {
        v11 = (*(uint64_t (**)(Phase::Logger *))(*(_QWORD *)v23 + 88))(v23);
      }
      else
      {
        v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                            + 224)));
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, a1[6]);
          v16 = v22 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "CvmSpatialSubmixRouter.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 474;
          v35 = 2080;
          v36 = v16;
          v37 = 2048;
          v38 = a2;
          _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s [SpatialSubmixRouter]: submixId %llu: renderer was not available when requested for isPrepared", buf, 0x26u);
          if (v22 < 0)
            operator delete(__p[0]);
        }

        v11 = 0;
      }
      v17 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }
  *(_QWORD *)buf = v30;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v11;
}

void sub_21653E30C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void **);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);

  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL Phase::Controller::SpatialSubmixRouter::IsStopped(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v4 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 120), v7);
  if (v4)
    v5 = v4[4];
  else
    v5 = 0;
  return Phase::Controller::SpatialSubmixRouter::IsStopped(a1, v5);
}

BOOL Phase::Controller::SpatialSubmixRouter::IsStopped(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v10;
  void **v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p[2];
  char v17;
  Phase::Logger *v18;
  std::__shared_weak_count *v19;
  _BYTE buf[18];
  __int16 v21;
  void **v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 176) <= a2)
    return 1;
  v3 = *(_QWORD *)(a1 + 160);
  if (*(_DWORD *)(v3 + 24 * a2 + 20) != HIDWORD(a2))
    return 1;
  v4 = *(uint64_t **)(v3 + 24 * a2);
  if (!v4)
    return 1;
  Phase::Controller::RouterCommandList::ExecuteCommands((Phase::Controller::RouterCommandList *)a1, (void *)a1);
  v5 = *(_QWORD *)(a1 + 368);
  *(_OWORD *)buf = *(_OWORD *)v4;
  v6 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(v5 + 216), buf);
  if (!v6)
    return *((_DWORD *)v4 + 6) == 0;
  v7 = v6[4];
  if (v7 == -1)
    return *((_DWORD *)v4 + 6) == 0;
  Phase::Controller::RenderGroupMgr::GetRenderer(*(Phase::Controller::RenderGroupMgr **)(a1 + 368), v7, &v18);
  if (v18)
  {
    v8 = (*(uint64_t (**)(Phase::Logger *))(*(_QWORD *)v18 + 96))(v18);
  }
  else
  {
    v10 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                        + 224)));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *(Phase::Controller::SpatialModelerInfo **)(a1 + 48));
      v11 = v17 >= 0 ? __p : (void **)__p[0];
      v12 = *v4;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "CvmSpatialSubmixRouter.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 516;
      v21 = 2080;
      v22 = v11;
      v23 = 2048;
      v24 = v12;
      _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s [SpatialSubmixRouter]: submixId %llu: renderer was not available when requested for IsStopped", buf, 0x26u);
      if (v17 < 0)
        operator delete(__p[0]);
    }

    v8 = 0;
  }
  v13 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v8;
}

void sub_21653E5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);

  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatialSubmixRouter::GetPlayState(Phase::Controller::SpatialSubmixRouter *this, UniqueObjectId a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  UniqueObjectId v8;

  v8 = a2;
  v3 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)this + 15, &v8);
  if (v3)
    v4 = v3[4];
  else
    v4 = 0;
  if (*((_DWORD *)this + 44) > v4
    && (v5 = *((_QWORD *)this + 20), *(_DWORD *)(v5 + 24 * v4 + 20) == HIDWORD(v4))
    && (v6 = *(_QWORD *)(v5 + 24 * v4)) != 0)
  {
    return *(unsigned int *)(v6 + 24);
  }
  else
  {
    return 0;
  }
}

void Phase::Controller::SpatialSubmixRouter::Update(Phase::Controller::RenderGroupMgr **this, double a2)
{
  uint64_t *v4;
  uint64_t *i;
  _OWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  Phase::Controller::RenderGroupMgr *v9;
  uint64_t v10;
  Phase::Controller::RenderGroupMgr *v11;
  Phase::Controller::RenderGroupMgr *v12;
  Phase::Controller::RenderGroupMgr *v13;
  Phase::Controller::RenderGroupMgr *v14;
  Phase::Controller::RenderGroupMgr *v15;
  Phase::Controller::RenderGroupMgr *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  Phase::Controller::RenderGroupMgr *v23;
  Phase::Controller::RenderGroupMgr *v24;
  Phase::Controller::RenderGroupMgr *v25;
  uint64_t v26;
  Phase::Controller::RenderGroupMgr *v27;
  Phase::Controller::RenderGroupMgr *v28;
  Phase::Controller::RenderGroupMgr *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  Phase::Controller::RenderGroupMgr *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  Phase::Controller::RenderGroupMgr *v42;
  Phase::Controller::RenderGroupMgr *v43;
  Phase::Controller::RenderGroupMgr *v44;
  unint64_t v45;
  NSObject *v46;
  void **v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  Phase::Controller::RenderGroupMgr *v52;
  uint64_t v53;
  _OWORD *v54;
  Phase::Controller::RenderGroupMgr *v55;
  Phase::Controller::RenderGroupMgr *v56;
  Phase::Controller::RenderGroupMgr *v57;
  Phase::Controller::RenderGroupMgr *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  Phase::Controller::RenderGroupMgr *v66;
  Phase::Controller::RenderGroupMgr *v67;
  Phase::Controller::RenderGroupMgr *v68;
  __int128 v69;
  Phase::Controller::RenderGroupMgr *v70;
  Phase::Controller::RenderGroupMgr *v71;
  int v72;
  int v73;
  int v74;
  _OWORD *v75;
  Phase::Controller::RenderGroupMgr *v76;
  double *v77;
  double v78;
  Phase::Controller::RenderGroupMgr *v79;
  Phase::Logger *v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  NSObject *v85;
  void **v86;
  uint64_t v87;
  unint64_t v88;
  double v89;
  Phase::Logger *v90;
  NSObject *v91;
  void **v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  const char *v96;
  uint32_t v97;
  void **v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  double v104;
  double v105;
  double v106;
  uint64_t v108;
  _OWORD *v109;
  Phase::Controller::RenderGroupMgr *v110;
  Phase::Controller::RenderGroupMgr *v111;
  Phase::Controller::RenderGroupMgr *v112;
  BOOL v113;
  uint64_t v114;
  Phase::Controller::RenderGroupMgr *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  Phase::Controller::RenderGroupMgr *v123;
  Phase::Controller::RenderGroupMgr *v124;
  Phase::Controller::RenderGroupMgr *v125;
  __int128 v126;
  std::__shared_weak_count *v127;
  unint64_t *p_shared_owners;
  unint64_t v129;
  Phase::Controller::RenderGroupMgr *v130;
  uint64_t v131;
  unint64_t v132;
  Phase::Controller::RenderGroupMgr *v133;
  uint64_t v134;
  unint64_t v135;
  Phase::Controller::RenderGroupMgr *v136;
  uint64_t v137;
  char v138;
  char *v139;
  Phase::Controller::RenderGroupMgr **v140;
  char v141;
  void *__p[2];
  char v143;
  Phase::Logger *v144;
  std::__shared_weak_count *v145;
  _QWORD *v146;
  std::__shared_weak_count *v147;
  _BYTE buf[18];
  __int16 v149;
  _BYTE v150[18];
  __int16 v151;
  unint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  Phase::Controller::RenderGroupMgr::LoadFreshData(this[46]);
  Phase::Controller::RouterCommandList::ExecuteCommands((Phase::Controller::RouterCommandList *)this, this);
  v4 = (uint64_t *)*((_QWORD *)this[46] + 19);
  if (v4)
  {
    v138 = 0;
    v141 = 0;
    v140 = this + 50;
    v139 = (char *)(this + 52);
    while (1)
    {
      Phase::Controller::RenderGroupMgr::GetRenderer(this[46], v4[4], &v146);
      if (!v146)
      {
        v54 = v4 + 6;
        v56 = this[48];
        v55 = this[49];
        if (v56 >= v55)
        {
          v58 = this[47];
          v59 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v58) >> 3);
          v60 = v59 + 1;
          if (v59 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          v61 = 0xAAAAAAAAAAAAAAABLL * ((v55 - v58) >> 3);
          if (2 * v61 > v60)
            v60 = 2 * v61;
          if (v61 >= 0x555555555555555)
            v62 = 0xAAAAAAAAAAAAAAALL;
          else
            v62 = v60;
          v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>>(v62);
          v65 = &v63[24 * v59];
          *(_OWORD *)v65 = *v54;
          *((_QWORD *)v65 + 2) = v4[4];
          v67 = this[47];
          v66 = this[48];
          v68 = (Phase::Controller::RenderGroupMgr *)v65;
          if (v66 != v67)
          {
            do
            {
              v69 = *(_OWORD *)((char *)v66 - 24);
              *((_QWORD *)v68 - 1) = *((_QWORD *)v66 - 1);
              *(_OWORD *)((char *)v68 - 24) = v69;
              v68 = (Phase::Controller::RenderGroupMgr *)((char *)v68 - 24);
              v66 = (Phase::Controller::RenderGroupMgr *)((char *)v66 - 24);
            }
            while (v66 != v67);
            v66 = this[47];
          }
          v57 = (Phase::Controller::RenderGroupMgr *)(v65 + 24);
          this[47] = v68;
          this[48] = (Phase::Controller::RenderGroupMgr *)(v65 + 24);
          this[49] = (Phase::Controller::RenderGroupMgr *)&v63[24 * v64];
          if (v66)
            operator delete(v66);
        }
        else
        {
          *(_OWORD *)v56 = *v54;
          *((_QWORD *)v56 + 2) = v4[4];
          v57 = (Phase::Controller::RenderGroupMgr *)((char *)v56 + 24);
        }
        this[48] = v57;
        v138 = 1;
        goto LABEL_178;
      }
      if (((*(uint64_t (**)(_QWORD *))(*v146 + 104))(v146) & 1) == 0
        && (*(unsigned int (**)(_QWORD *))(*v146 + 88))(v146))
      {
        break;
      }
LABEL_178:
      v127 = v147;
      if (v147)
      {
        p_shared_owners = (unint64_t *)&v147->__shared_owners_;
        do
          v129 = __ldaxr(p_shared_owners);
        while (__stlxr(v129 - 1, p_shared_owners));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
      v4 = (uint64_t *)*v4;
      if (!v4)
        goto LABEL_186;
    }
    for (i = (uint64_t *)*((_QWORD *)this[46] + 29); i; i = (uint64_t *)*i)
    {
      v6 = i + 2;
      *(_OWORD *)buf = *((_OWORD *)i + 1);
      v7 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(this + 15, buf);
      if (v7)
        v8 = v7[4];
      else
        v8 = 0;
      if (*((_DWORD *)this + 44) > v8
        && (v9 = this[20], *((_DWORD *)v9 + 6 * v8 + 5) == HIDWORD(v8))
        && (v10 = *((_QWORD *)v9 + 3 * v8)) != 0)
      {
        if (!*(_BYTE *)(v10 + 112))
        {
          v26 = v4[4];
          if (v26 == i[4] || v26 == *(_QWORD *)(v10 + 48))
          {
            v28 = this[54];
            v27 = this[55];
            if (v28 >= v27)
            {
              v35 = this[53];
              v36 = (v28 - v35) >> 3;
              v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 61)
                std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
              v38 = v27 - v35;
              if (v38 >> 2 > v37)
                v37 = v38 >> 2;
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                v39 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v39 = v37;
              if (v39)
              {
                if (v39 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v40 = (char *)operator new(8 * v39);
              }
              else
              {
                v40 = 0;
              }
              v52 = (Phase::Controller::RenderGroupMgr *)&v40[8 * v36];
              *(_QWORD *)v52 = v10;
              v29 = (Phase::Controller::RenderGroupMgr *)((char *)v52 + 8);
              if (v28 != v35)
              {
                do
                {
                  v53 = *((_QWORD *)v28 - 1);
                  v28 = (Phase::Controller::RenderGroupMgr *)((char *)v28 - 8);
                  *((_QWORD *)v52 - 1) = v53;
                  v52 = (Phase::Controller::RenderGroupMgr *)((char *)v52 - 8);
                }
                while (v28 != v35);
                v28 = this[53];
              }
              this[53] = v52;
              this[54] = v29;
              this[55] = (Phase::Controller::RenderGroupMgr *)&v40[8 * v39];
              if (v28)
                operator delete(v28);
            }
            else
            {
              *(_QWORD *)v28 = v10;
              v29 = (Phase::Controller::RenderGroupMgr *)((char *)v28 + 8);
            }
            this[54] = v29;
          }
          continue;
        }
        v12 = this[51];
        v11 = this[52];
        if (v12 >= v11)
        {
          v30 = (v12 - *v140) >> 4;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 60)
            std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
          v32 = v11 - *v140;
          if (v32 >> 3 > v31)
            v31 = v32 >> 3;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
            v33 = 0xFFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)v139, v33);
          else
            v34 = 0;
          v41 = &v34[16 * v30];
          *(_OWORD *)v41 = *v6;
          v43 = this[50];
          v42 = this[51];
          v44 = (Phase::Controller::RenderGroupMgr *)v41;
          if (v42 != v43)
          {
            do
            {
              *((_OWORD *)v44 - 1) = *((_OWORD *)v42 - 1);
              v44 = (Phase::Controller::RenderGroupMgr *)((char *)v44 - 16);
              v42 = (Phase::Controller::RenderGroupMgr *)((char *)v42 - 16);
            }
            while (v42 != v43);
            v42 = *v140;
          }
          v13 = (Phase::Controller::RenderGroupMgr *)(v41 + 16);
          this[50] = v44;
          this[51] = (Phase::Controller::RenderGroupMgr *)(v41 + 16);
          this[52] = (Phase::Controller::RenderGroupMgr *)&v34[16 * v33];
          if (v42)
            operator delete(v42);
        }
        else
        {
          *(_OWORD *)v12 = *v6;
          v13 = (Phase::Controller::RenderGroupMgr *)((char *)v12 + 16);
        }
        this[51] = v13;
        v45 = *(_QWORD *)(v10 + 48);
        if (v45 != -1)
        {
          Phase::Controller::RenderGroupMgr::GetRenderer(this[46], v45, &v144);
          if (v144)
          {
            (*(void (**)(Phase::Logger *, _QWORD, _QWORD))(*(_QWORD *)v144 + 40))(v144, *(_QWORD *)v10, *(_QWORD *)(v10 + 8));
          }
          else
          {
            v46 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                                + 224)));
            if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
            {
              Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, this[6]);
              v47 = __p;
              if (v143 < 0)
                v47 = (void **)__p[0];
              v48 = *(_QWORD *)(v10 + 48);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "CvmSpatialSubmixRouter.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 676;
              v149 = 2080;
              *(_QWORD *)v150 = v47;
              *(_WORD *)&v150[8] = 2048;
              *(_QWORD *)&v150[10] = v48;
              _os_log_impl(&dword_2164CC000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d %s [SpatialSubmixRouter]: Connected rendererId %llu not found!", buf, 0x26u);
              if (v143 < 0)
                operator delete(__p[0]);
            }

          }
          v49 = v145;
          if (v145)
          {
            v50 = (unint64_t *)&v145->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
        }
      }
      else
      {
        v15 = this[51];
        v14 = this[52];
        if (v15 >= v14)
        {
          v17 = (v15 - *v140) >> 4;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60)
            std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
          v19 = v14 - *v140;
          if (v19 >> 3 > v18)
            v18 = v19 >> 3;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
            v20 = 0xFFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)v139, v20);
          else
            v21 = 0;
          v22 = &v21[16 * v17];
          *(_OWORD *)v22 = *v6;
          v24 = this[50];
          v23 = this[51];
          v25 = (Phase::Controller::RenderGroupMgr *)v22;
          if (v23 != v24)
          {
            do
            {
              *((_OWORD *)v25 - 1) = *((_OWORD *)v23 - 1);
              v25 = (Phase::Controller::RenderGroupMgr *)((char *)v25 - 16);
              v23 = (Phase::Controller::RenderGroupMgr *)((char *)v23 - 16);
            }
            while (v23 != v24);
            v23 = *v140;
          }
          v16 = (Phase::Controller::RenderGroupMgr *)(v22 + 16);
          this[50] = v25;
          this[51] = (Phase::Controller::RenderGroupMgr *)(v22 + 16);
          this[52] = (Phase::Controller::RenderGroupMgr *)&v21[16 * v20];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(_OWORD *)v15 = *v6;
          v16 = (Phase::Controller::RenderGroupMgr *)((char *)v15 + 16);
        }
        this[51] = v16;
      }
      v141 = 1;
    }
    v70 = this[53];
    v71 = this[54];
    v136 = v70;
    v137 = v71 - v70;
    if (v71 != v70)
    {
      v72 = 0;
      v73 = 0;
      v74 = 0;
      while (1)
      {
        v75 = *(_OWORD **)v70;
        v76 = this[46];
        *(_OWORD *)buf = *(_OWORD *)*(_QWORD *)v70;
        v77 = (double *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)v76 + 27, buf);
        if (v77)
          v78 = v77[5];
        else
          v78 = 1.0;
        v79 = this[46];
        *(_OWORD *)buf = *v75;
        v80 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)v79 + 27, buf);
        if (v80)
          v81 = *((_QWORD *)v80 + 4);
        else
          v81 = -1;
        switch(*((_DWORD *)v75 + 6))
        {
          case 0:
            ++v74;
            break;
          case 1:
          case 3:
            ++v72;
            break;
          case 2:
            ++v73;
            break;
          default:
            break;
        }
        v82 = *((_QWORD *)v75 + 6);
        if (v82 != -1 && v82 == v146[5])
        {
          if (*((double *)v75 + 7) != v78)
          {
            *((double *)v75 + 7) = v78;
            *(_QWORD *)buf = &unk_24D5770F0;
            *(_QWORD *)&buf[8] = Phase::CurveFunction::Linear<double>;
            *(_QWORD *)&v150[4] = buf;
            Phase::Fader<double>::SetInternal((uint64_t)(v75 + 4), (uint64_t)buf, v78, 0.2);
            v83 = *(_QWORD **)&v150[4];
            if (*(_BYTE **)&v150[4] == buf)
            {
              v83 = buf;
              v84 = 4;
LABEL_144:
              (*(void (**)(void))(*v83 + 8 * v84))();
            }
            else if (*(_QWORD *)&v150[4])
            {
              v84 = 5;
              goto LABEL_144;
            }
          }
          Phase::Fader<double>::Update((uint64_t)(v75 + 4), a2);
          v104 = *((double *)v75 + 13);
          v105 = *((double *)v75 + 4);
          v106 = v105 * v104;
          if (v105 * v104 != *((double *)v75 + 5) && v81 != -1)
          {
            (*(void (**)(_QWORD *, _QWORD, _QWORD, double))(*v146 + 48))(v146, *(_QWORD *)v75, *((_QWORD *)v75 + 1), v105 * v104);
            *((double *)v75 + 5) = v106;
          }
          goto LABEL_150;
        }
        v85 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v80)
                                                                                            + 224)));
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, this[6]);
          v86 = __p;
          if (v143 < 0)
            v86 = (void **)__p[0];
          v87 = *(_QWORD *)v75;
          v88 = v146[5];
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "CvmSpatialSubmixRouter.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 741;
          v149 = 2080;
          *(_QWORD *)v150 = v86;
          *(_WORD *)&v150[8] = 2048;
          *(_QWORD *)&v150[10] = v87;
          v151 = 2048;
          v152 = v88;
          _os_log_impl(&dword_2164CC000, v85, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s [SpatialSubmixRouter]: connected submixId %llu to rendererId %llu", buf, 0x30u);
          if (v143 < 0)
            operator delete(__p[0]);
        }

        v89 = v78 * *((double *)v75 + 4);
        (*(void (**)(_QWORD *, _QWORD, _QWORD, double))(*v146 + 32))(v146, *(_QWORD *)v75, *((_QWORD *)v75 + 1), v89);
        if (v82 != -1)
          break;
LABEL_138:
        *((_QWORD *)v75 + 6) = v146[5];
        *((double *)v75 + 5) = v89;
        *((double *)v75 + 7) = v78;
        *(_QWORD *)buf = &unk_24D5770F0;
        *(_QWORD *)&buf[8] = Phase::CurveFunction::Linear<double>;
        *(_QWORD *)&v150[4] = buf;
        Phase::Fader<double>::SetInternal((uint64_t)(v75 + 4), (uint64_t)buf, v78, 0.0);
        v102 = *(_QWORD **)&v150[4];
        if (*(_BYTE **)&v150[4] == buf)
        {
          v102 = buf;
          v103 = 4;
          goto LABEL_142;
        }
        if (*(_QWORD *)&v150[4])
        {
          v103 = 5;
LABEL_142:
          (*(void (**)(void))(*v102 + 8 * v103))();
        }
LABEL_150:
        v70 = (Phase::Controller::RenderGroupMgr *)((char *)v70 + 8);
        if (v70 == v71)
          goto LABEL_153;
      }
      Phase::Controller::RenderGroupMgr::GetRenderer(this[46], v82, &v144);
      if (v144)
      {
        v90 = (Phase::Logger *)(*(uint64_t (**)(Phase::Logger *, _QWORD, _QWORD))(*(_QWORD *)v144 + 40))(v144, *(_QWORD *)v75, *((_QWORD *)v75 + 1));
        v91 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v90)
                                                                                            + 224)));
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, this[6]);
          v92 = __p;
          if (v143 < 0)
            v92 = (void **)__p[0];
          v93 = *(_QWORD *)v75;
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "CvmSpatialSubmixRouter.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 759;
          v149 = 2080;
          *(_QWORD *)v150 = v92;
          *(_WORD *)&v150[8] = 2048;
          *(_QWORD *)&v150[10] = v93;
          v151 = 2048;
          v152 = v82;
          v94 = v91;
          v95 = OS_LOG_TYPE_DEFAULT;
          v96 = "%25s:%-5d %s [SpatialSubmixRouter]: disconnected submixId %llu from rendererId %llu";
          v97 = 48;
          goto LABEL_131;
        }
      }
      else
      {
        v91 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                            + 224)));
        if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
        {
          Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, this[6]);
          v98 = __p;
          if (v143 < 0)
            v98 = (void **)__p[0];
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "CvmSpatialSubmixRouter.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 765;
          v149 = 2080;
          *(_QWORD *)v150 = v98;
          *(_WORD *)&v150[8] = 2048;
          *(_QWORD *)&v150[10] = v82;
          v94 = v91;
          v95 = OS_LOG_TYPE_ERROR;
          v96 = "%25s:%-5d %s [SpatialSubmixRouter]: Connected rendererId %llu not found!";
          v97 = 38;
LABEL_131:
          _os_log_impl(&dword_2164CC000, v94, v95, v96, buf, v97);
          if (v143 < 0)
            operator delete(__p[0]);
        }
      }

      v99 = v145;
      if (v145)
      {
        v100 = (unint64_t *)&v145->__shared_owners_;
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      goto LABEL_138;
    }
    v74 = 0;
    v73 = 0;
    v72 = 0;
LABEL_153:
    v108 = v137 >> 3;
    if (!*((_BYTE *)v4 + 368) && v108 == v74)
    {
      (*(void (**)(_QWORD *, _QWORD, _QWORD))(*v146 + 112))(v146, 0, 0);
      v109 = v4 + 6;
      v111 = this[48];
      v110 = this[49];
      if (v111 >= v110)
      {
        v115 = this[47];
        v116 = 0xAAAAAAAAAAAAAAABLL * ((v111 - v115) >> 3);
        v117 = v116 + 1;
        if (v116 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        v118 = 0xAAAAAAAAAAAAAAABLL * ((v110 - v115) >> 3);
        if (2 * v118 > v117)
          v117 = 2 * v118;
        if (v118 >= 0x555555555555555)
          v119 = 0xAAAAAAAAAAAAAAALL;
        else
          v119 = v117;
        v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>>(v119);
        v122 = &v120[24 * v116];
        *(_OWORD *)v122 = *v109;
        *((_QWORD *)v122 + 2) = v4[4];
        v124 = this[47];
        v123 = this[48];
        v125 = (Phase::Controller::RenderGroupMgr *)v122;
        if (v123 != v124)
        {
          do
          {
            v126 = *(_OWORD *)((char *)v123 - 24);
            *((_QWORD *)v125 - 1) = *((_QWORD *)v123 - 1);
            *(_OWORD *)((char *)v125 - 24) = v126;
            v125 = (Phase::Controller::RenderGroupMgr *)((char *)v125 - 24);
            v123 = (Phase::Controller::RenderGroupMgr *)((char *)v123 - 24);
          }
          while (v123 != v124);
          v123 = this[47];
        }
        v112 = (Phase::Controller::RenderGroupMgr *)(v122 + 24);
        this[47] = v125;
        this[48] = (Phase::Controller::RenderGroupMgr *)(v122 + 24);
        this[49] = (Phase::Controller::RenderGroupMgr *)&v120[24 * v121];
        if (v123)
          operator delete(v123);
      }
      else
      {
        *(_OWORD *)v111 = *v109;
        *((_QWORD *)v111 + 2) = v4[4];
        v112 = (Phase::Controller::RenderGroupMgr *)((char *)v111 + 24);
      }
      this[48] = v112;
      v138 = 1;
      goto LABEL_177;
    }
    if (*((_BYTE *)v4 + 368))
      v113 = v136 == v71;
    else
      v113 = 0;
    v114 = 2;
    if (!v113 && v108 != v73)
    {
      if (v72 <= 0)
      {
LABEL_177:
        this[54] = this[53];
        goto LABEL_178;
      }
      v114 = 3;
    }
    (*(void (**)(_QWORD *, uint64_t, _QWORD))(*v146 + 112))(v146, v114, 0);
    goto LABEL_177;
  }
  v141 = 0;
  v138 = 0;
LABEL_186:
  v130 = this[47];
  if (this[48] != v130)
  {
    v131 = 0;
    v132 = 0;
    do
    {
      std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::__erase_unique<unsigned long long>(this + 10, *(_QWORD *)((char *)v130 + v131 + 16));
      Phase::Controller::RenderGroupMgr::RemoveRenderGroup((uint64_t)this[46], *(_QWORD *)((char *)this[47] + v131), *(_QWORD *)((char *)this[47] + v131 + 8));
      ++v132;
      v130 = this[47];
      v131 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((this[48] - v130) >> 3) > v132);
  }
  v133 = this[51];
  if (v133 != this[50])
  {
    v134 = 0;
    v135 = 0;
    v133 = this[50];
    do
    {
      Phase::Controller::RenderGroupMgr::RemoveSubmix((uint64_t)this[46], *(_QWORD *)((char *)v133 + v134), *(_QWORD *)((char *)v133 + v134 + 8));
      ++v135;
      v133 = this[50];
      v134 += 16;
    }
    while (v135 < (this[51] - v133) >> 4);
  }
  if ((v138 & 1) != 0)
    this[48] = this[47];
  if ((v141 & 1) != 0)
    this[51] = v133;
  Phase::Controller::RenderGroupMgr::SendChanges(this[46]);
}

void sub_21653F460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  void *v27;

  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void Phase::Fader<double>::Update(uint64_t a1, double a2)
{
  double v2;
  double v3;

  if (a2 > 0.0)
  {
    v2 = *(double *)(a1 + 24) + a2;
    *(double *)(a1 + 24) = v2;
    v3 = *(double *)(*(_QWORD *)(a1 + 8) - 48);
    if (v2 > v3)
    {
      *(double *)(a1 + 24) = v3;
      v2 = v3;
    }
    *(double *)(a1 + 40) = Phase::Envelope<double>::operator()((double **)a1, v2);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN5Phase10Controller18RouterCommandBatchENS_4pairINS7_8Handle64EyEENS_10shared_ptrINS8_8RendererEEEyNSA_INS7_14UniqueObjectIdEbEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix
                                           + v2))(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN5Phase10Controller18RouterCommandBatchENS_4pairINS9_8Handle64EyEENS_10shared_ptrINSA_8RendererEEEyNSC_INS9_14UniqueObjectIdEbEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS8_SB_SE_SH_ySJ_EEEEEEDcSN_DpT0_(int a1, Phase::Controller::RouterCommandBatch *this)
{
  return Phase::Controller::RouterCommandBatch::Clear(this);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN5Phase10Controller18RouterCommandBatchENS_4pairINS9_8Handle64EyEENS_10shared_ptrINSA_8RendererEEEyNSC_INS9_14UniqueObjectIdEbEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS8_SB_SE_SH_ySJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](a2);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
}

void std::__list_imp<Phase::Controller::SpatialSubmixRouter::StoppingRenderer>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<Phase::Controller::SpatialSubmixRouter::StoppingRenderer,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t std::__destroy_at[abi:ne180100]<Phase::Controller::SpatialSubmixRouter::StoppingRenderer,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](a1);
}

_QWORD *std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__init_with_size[abi:ne180100]<Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_21653F760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>>::__assign_alt[abi:ne180100]<3ul,std::shared_ptr<Phase::Controller::Renderer>,std::shared_ptr<Phase::Controller::Renderer>&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 24) == 3)
    return std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100](a2, a3);
  else
    return (_QWORD *)std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>>::__emplace[abi:ne180100]<3ul,std::shared_ptr<Phase::Controller::Renderer>&>(a1, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>>::__emplace[abi:ne180100]<3ul,std::shared_ptr<Phase::Controller::Renderer>&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char v9;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN5Phase10Controller18RouterCommandBatchENS_4pairINS7_8Handle64EyEENS_10shared_ptrINS8_8RendererEEEyNSA_INS7_14UniqueObjectIdEbEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix
                                           + v4))(&v9, a1);
  *(_DWORD *)(a1 + 24) = -1;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_DWORD *)(a1 + 24) = 3;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>>::__emplace[abi:ne180100]<5ul,std::pair<Phase::UniqueObjectId,BOOL>>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN5Phase10Controller18RouterCommandBatchENS_4pairINS7_8Handle64EyEENS_10shared_ptrINS8_8RendererEEEyNSA_INS7_14UniqueObjectIdEbEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix
                                           + v4))(&v7, a1);
  *(_DWORD *)(a1 + 24) = -1;
  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *(_DWORD *)(a1 + 24) = 5;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__function::__func<std::__bind<void (Phase::Controller::SpatialSubmixRouter::*)(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>),Phase::Controller::SpatialSubmixRouter*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::SpatialSubmixRouter::*)(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>),Phase::Controller::SpatialSubmixRouter*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<std::__bind<void (Phase::Controller::SpatialSubmixRouter::*)(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>),Phase::Controller::SpatialSubmixRouter*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::SpatialSubmixRouter::*)(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>),Phase::Controller::SpatialSubmixRouter*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D5799F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (Phase::Controller::SpatialSubmixRouter::*)(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>),Phase::Controller::SpatialSubmixRouter*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::SpatialSubmixRouter::*)(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>),Phase::Controller::SpatialSubmixRouter*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D5799F0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::__bind<void (Phase::Controller::SpatialSubmixRouter::*)(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>),Phase::Controller::SpatialSubmixRouter*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::SpatialSubmixRouter::*)(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>),Phase::Controller::SpatialSubmixRouter*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::operator()(_QWORD *a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t, __int128 *);
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  v3 = *a2;
  v4 = a1[2];
  v5 = (void (*)(_QWORD *, uint64_t, __int128 *))a1[1];
  v6 = (_QWORD *)(a1[3] + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t, __int128 *))(*v6 + v5);
  v10 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v5(v6, v3, &v10);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21653FA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *Phase::details::SharedSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::AllocSlots(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = result;
  if (a2)
  {
    v4 = 24 * a2;
    v5 = (_QWORD *)operator new[]();
    *v5 = 24;
    v5[1] = a2;
    v6 = v5 + 2;
    v7 = v5 + 2;
    do
    {
      *v7 = 0;
      v7[1] = 0;
      v7 += 3;
      v4 -= 24;
    }
    while (v4);
    *v2 = v6;
    result = (_QWORD *)operator new();
    *result = &off_24D579A38;
    result[1] = 0;
    result[2] = 0;
    result[3] = v6;
    v2[1] = result;
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  return result;
}

void sub_21653FB4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v1);
  MEMORY[0x2199F9D70](v3, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

uint64_t std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 - 8);
    if (v2)
    {
      v3 = 24 * v2;
      v4 = v1 - 24;
      do
      {
        std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v4 + v3);
        v3 -= 24;
      }
      while (v3);
    }
    JUMPOUT(0x2199F9D4CLL);
  }
  return result;
}

uint64_t Phase::details::SharedSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::GetUniqueSlot(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  char v17;
  __int128 v18;

  v3 = *((unsigned int *)a1 + 4);
  if (v3 <= a2)
    return 0;
  v5 = a2;
  result = *a1 + 24 * a2;
  if (*(_DWORD *)(result + 20) != HIDWORD(a2))
    return 0;
  v7 = a1[1];
  if (v7 && *(uint64_t *)(v7 + 8) >= 1)
  {
    Phase::details::SharedSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::AllocSlots(&v18, v3);
    if (*((_DWORD *)a1 + 4))
    {
      v8 = 0;
      v9 = 0;
      v10 = v18;
      do
      {
        v11 = (uint64_t *)(*a1 + v8);
        std::shared_ptr<Phase::Controller::SpatialModelerInstance::SubmixInfo>::operator=[abi:ne180100]((_QWORD *)(v10 + v8), *v11, v11[1])[2] = v11[2];
        ++v9;
        v8 += 24;
      }
      while (v9 < *((unsigned int *)a1 + 4));
    }
    v16 = a1 + 4;
    v17 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 4));
    v12 = *a1;
    v13 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v18;
    *(_QWORD *)&v18 = v12;
    *((_QWORD *)&v18 + 1) = v13;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v16);
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    return *a1 + 24 * v5;
  }
  return result;
}

void sub_21653FD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phase::Controller::SpatialSubmixRouter::SubmixParams>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D579A70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Controller::SpatialSubmixRouter::SubmixParams>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D579A70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

void std::__shared_ptr_emplace<Phase::Controller::SpatialSubmixRouter::SubmixParams>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 88);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t _ZN5Phase7details13SharedSlotMapINS_10Controller19SpatialSubmixRouter12SubmixParamsENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS4_S5_DnE9GetUniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA_(uint64_t *a1, uint64_t a2)
{
  __int128 **UniqueSlot;
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;

  UniqueSlot = (__int128 **)Phase::details::SharedSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::GetUniqueSlot(a1, a2);
  v3 = (uint64_t)UniqueSlot;
  if (UniqueSlot)
  {
    v4 = UniqueSlot[1];
    if (v4)
    {
      if (*((uint64_t *)v4 + 1) >= 1)
      {
        v5 = *UniqueSlot;
        v6 = (char *)operator new(0x90uLL);
        *((_QWORD *)v6 + 1) = 0;
        *((_QWORD *)v6 + 2) = 0;
        *(_QWORD *)v6 = &off_24D579A70;
        v7 = *v5;
        v8 = v5[1];
        v9 = *((_QWORD *)v5 + 6);
        *(_OWORD *)(v6 + 56) = v5[2];
        *((_QWORD *)v6 + 9) = v9;
        *(_OWORD *)(v6 + 40) = v8;
        *(_OWORD *)(v6 + 24) = v7;
        *((_QWORD *)v6 + 10) = *((_QWORD *)v5 + 7);
        *((_QWORD *)v6 + 12) = 0;
        *((_QWORD *)v6 + 13) = 0;
        *((_QWORD *)v6 + 11) = 0;
        std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__init_with_size[abi:ne180100]<Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>((_QWORD *)v6 + 11, *((_QWORD *)v5 + 8), *((_QWORD *)v5 + 9), (uint64_t)(*((_QWORD *)v5 + 9) - *((_QWORD *)v5 + 8)) >> 6);
        v10 = *(__int128 *)((char *)v5 + 88);
        *((_QWORD *)v6 + 16) = *((_QWORD *)v5 + 13);
        *((_OWORD *)v6 + 7) = v10;
        v6[136] = *((_BYTE *)v5 + 112);
        *(_QWORD *)&v15 = v6 + 24;
        *((_QWORD *)&v15 + 1) = v6;
        std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100](v3, &v15);
        v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
        if (*((_QWORD *)&v15 + 1))
        {
          v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
      }
    }
  }
  return v3;
}

void sub_21653FED8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::__erase_unique<unsigned long long>(_QWORD *a1, unint64_t a2)
{
  _QWORD *v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[2];
  char v14;

  v3 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = v3[1];
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(_QWORD *)&v4)
        v5 %= *(_QWORD *)&v4;
    }
    else
    {
      v5 &= *(_QWORD *)&v4 - 1;
    }
    v7 = *(_QWORD **)(*a1 + 8 * v5);
    do
    {
      v8 = v7;
      v7 = (_QWORD *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2)
      goto LABEL_19;
    v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v4)
        v9 %= *(_QWORD *)&v4;
    }
    else
    {
      v9 &= *(_QWORD *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_19:
      if (!*v3)
        goto LABEL_20;
      v10 = *(_QWORD *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v4)
          v10 %= *(_QWORD *)&v4;
      }
      else
      {
        v10 &= *(_QWORD *)&v4 - 1;
      }
      if (v10 != v5)
LABEL_20:
        *(_QWORD *)(*a1 + 8 * v5) = 0;
    }
    v11 = *v3;
    if (*v3)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v4)
          v12 %= *(_QWORD *)&v4;
      }
      else
      {
        v12 &= *(_QWORD *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(_QWORD *)(*a1 + 8 * v12) = v8;
        v11 = *v3;
      }
    }
    *v8 = v11;
    *v3 = 0;
    --a1[3];
    v13[0] = v3;
    v13[1] = a1 + 2;
    v14 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13);
  }
}

uint64_t Phase::Controller::StreamSamplerBase::StreamSamplerBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  NSObject *v26;
  std::logic_error *v27;
  NSObject *v28;
  std::runtime_error *exception;
  NSObject *v30;
  NSObject *v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v17 = Phase::Controller::SamplerBase::SamplerBase(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  *(_QWORD *)v17 = off_24D579AC0;
  *(_OWORD *)(v17 + 560) = 0u;
  *(_OWORD *)(v17 + 576) = 0u;
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a8 + 16))(a8);
  v19 = v18;
  if (!v18)
  {
    v28 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v33 = "CvmStreamSamplerBase.mm";
      v34 = 1024;
      v35 = 46;
      _os_log_impl(&dword_2164CC000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nullptr == pSamplerPrepareParameters is true]: \"Invalid GeneratorPrepareParameters for GeneratorType::Sampler!\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid GeneratorPrepareParameters for GeneratorType::Sampler!");
  }
  if (!*(_BYTE *)(v18 + 64))
  {
    v30 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v18) + 384));
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v33 = "CvmStreamSamplerBase.mm";
      v34 = 1024;
      v35 = 48;
      _os_log_impl(&dword_2164CC000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [pSamplerPrepareParameters->mSamplerType == SamplerType::FileBased is true]: \"Invalid sampler type for a stream-based Sampler\"", buf, 0x12u);
    }
    v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v27, "Invalid sampler type for a stream-based Sampler");
LABEL_28:
    v27->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  if (*(double *)(v18 + 96) <= 0.0 || !*(_DWORD *)(v18 + 124))
  {
    v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v18) + 384));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v33 = "CvmStreamSamplerBase.mm";
      v34 = 1024;
      v35 = 53;
      _os_log_impl(&dword_2164CC000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [pSamplerPrepareParameters->mAudioFormat.mSampleRate <= 0. || pSamplerPrepareParameters->mAudioFormat.mChannelsPerFrame <= 0 is true]: \"Invalid render format for a StreamSampler\"", buf, 0x12u);
    }
    v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v27, "Invalid render format for a StreamSampler");
    goto LABEL_28;
  }
  if (!a14)
  {
    v31 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v18) + 384));
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v33 = "CvmStreamSamplerBase.mm";
      v34 = 1024;
      v35 = 57;
      _os_log_impl(&dword_2164CC000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [pInCallbackInterface == nullptr is true]: \"Invalid callback interface for a StreamSampler\"", buf, 0x12u);
    }
    v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v27, "Invalid callback interface for a StreamSampler");
    goto LABEL_28;
  }
  v20 = (id *)(a1 + 560);
  if (*(_DWORD *)(v18 + 48) == -65536)
  {
    v21 = objc_msgSend(objc_alloc(MEMORY[0x24BDB1818]), "initStandardFormatWithSampleRate:channels:", *(unsigned int *)(v18 + 124), *(double *)(v18 + 96));
    v22 = *v20;
    *v20 = (id)v21;
  }
  else
  {
    v22 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDB17E8]), "initWithLayoutTag:", *(unsigned int *)(v18 + 48));
    if (!v22)
      goto LABEL_15;
    v23 = objc_msgSend(objc_alloc(MEMORY[0x24BDB1818]), "initStandardFormatWithSampleRate:channelLayout:", v22, *(double *)(v19 + 96));
    v24 = *v20;
    *v20 = (id)v23;

  }
  if (!*v20
    || objc_msgSend(*v20, "channelCount") != 1 && objc_msgSend(*v20, "isInterleaved")
    || !objc_msgSend(*v20, "channelCount"))
  {
LABEL_15:
    std::terminate();
  }
  return a1;
}

void sub_216540424(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  std::unique_ptr<Phase::Controller::SamplerCallBackDoubleBuffer>::reset[abi:ne180100]((void ***)(v1 + 584), 0);
  std::unique_ptr<std::unordered_map<long long,std::pair<void *,BOOL>>>::reset[abi:ne180100]((uint64_t *)(v1 + 576), 0);

  Phase::Controller::SamplerBase::~SamplerBase((void **)v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::StreamSamplerBase::~StreamSamplerBase(Phase::Controller::StreamSamplerBase *this)
{
  *(_QWORD *)this = off_24D579AC0;
  std::unique_ptr<Phase::Controller::SamplerCallBackDoubleBuffer>::reset[abi:ne180100]((void ***)this + 73, 0);
  std::unique_ptr<std::unordered_map<long long,std::pair<void *,BOOL>>>::reset[abi:ne180100]((uint64_t *)this + 72, 0);

  Phase::Controller::SamplerBase::~SamplerBase((void **)this);
}

uint64_t Phase::Controller::StreamSamplerBase::InternalPrepare(Phase::Controller::StreamSamplerBase *this, double a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  vDSP_Length v9;
  float *v10;
  int v11;
  float *v12;
  _DWORD *v13;
  uint64_t v14;
  const AudioBufferList *v15;

  v3 = Phase::Controller::TaskManager::GetService<Phase::Controller::VoiceManager>(*((Phase::Logger **)this + 3), 8);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v3 + 688) + 112))(*(_QWORD *)(*(_QWORD *)v3 + 688));
  v5 = objc_msgSend(*((id *)this + 70), "channelCount");
  v6 = operator new();
  v7 = v6;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_QWORD *)(v6 + 32) = 0;
  *(_DWORD *)(v6 + 40) = v5;
  v8 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (v4 < 0x10)
    v8 = 16;
  *(_QWORD *)(v6 + 48) = v8;
  v9 = v8 * v5;
  v10 = (float *)Phase::MallocAligned((Phase *)(4 * v9), 0x10uLL);
  *(_QWORD *)(v7 + 24) = v10;
  vDSP_vclr(v10, 1, v9);
  v11 = *(_DWORD *)(v7 + 40);
  if (v11 >= 2)
  {
    v12 = (float *)Phase::MallocAligned((Phase *)(4 * v9), 0x10uLL);
    *(_QWORD *)(v7 + 32) = v12;
    vDSP_vclr(v12, 1, v9);
    v11 = *(_DWORD *)(v7 + 40);
  }
  v13 = (_DWORD *)Phase::MallocAligned((Phase *)(16 * (v11 - 1) + 24), 0x10uLL);
  *(_QWORD *)v7 = v13;
  *(_QWORD *)(v7 + 8) = v13;
  *v13 = *(_DWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 + 24);
  Phase::Controller::SamplerCallBackDoubleBuffer::PrepareRenderingBuffer(v7);
  std::unique_ptr<Phase::Controller::SamplerCallBackDoubleBuffer>::reset[abi:ne180100]((void ***)this + 73, (void **)v7);
  v14 = *((_QWORD *)this + 73);
  v15 = *(const AudioBufferList **)v14;
  *((_QWORD *)this + 71) = *(_QWORD *)v14;
  Phase::Controller::SamplerBase::AssignVoiceBuffers(this, v15, *(_QWORD *)(v14 + 48));
  return 1;
}

void sub_216540638(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10A0C40C91BB0AALL);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::VoiceManager>(Phase::Logger *a1, int a2)
{
  uint64_t v3;
  Phase::Logger *v4;
  uint64_t (**v5)(uint64_t, _QWORD, _QWORD, _QWORD, void *);
  NSObject *v7;
  std::logic_error *exception;
  NSObject *v9;
  std::string *v10;
  std::logic_error *v11;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 7) - v3) >> 5))
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 112;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(_QWORD *)v4)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 121;
      v17 = 1024;
      v18 = a2;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  v5 = std::any_cast[abi:ne180100]<Phase::Controller::VoiceManager * const>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v4);
  if (!v5)
    std::__throw_bad_any_cast[abi:ne180100]();
  return (uint64_t)*v5;
}

void sub_216540874(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_216540964(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_216540984(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void Phase::Controller::StreamSamplerBase::InternalConfigureDspGenerator(Phase::Controller::StreamSamplerBase *this)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD *v15;
  _QWORD *i;
  unint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  Phase::Logger *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  Phase::Controller::StreamSamplerBase *v44;
  char *v45;
  uint64_t v46[3];
  _QWORD v47[5];
  void **v48;

  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_DWORD *)(v3 + 32) = 1065353216;
  v45 = (char *)this + 576;
  std::unique_ptr<std::unordered_map<long long,std::pair<void *,BOOL>>>::reset[abi:ne180100]((uint64_t *)this + 72, v3);
  v4 = Phase::Controller::TaskManager::GetService<Phase::Controller::VoiceManager>(*((Phase::Logger **)this + 3), 8);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v4 + 688) + 112))(*(_QWORD *)(*(_QWORD *)v4 + 688));
  v47[0] = this;
  v47[1] = Phase::Controller::StreamSamplerBase::IORenderOutput;
  v6 = *((_QWORD *)this + 71);
  v47[2] = v6;
  v47[3] = v5;
  v47[4] = *((_QWORD *)this + 72);
  v7 = *((_QWORD *)this + 20);
  v8 = *((_QWORD *)this + 21);
  v44 = this;
  if (v7 != v8)
  {
    v9 = 0;
    while (1)
    {
      v10 = *(_QWORD *)(v6 + 16 * v9 + 16);
      v11 = *(float **)v45;
      v12 = *(_QWORD *)(v7 + 8);
      v13 = *(_QWORD *)(*(_QWORD *)v45 + 8);
      if (v13)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          v1 = *(_QWORD *)(v7 + 8);
          if (v13 <= v12)
            v1 = v12 % v13;
        }
        else
        {
          v1 = (v13 - 1) & v12;
        }
        v15 = *(_QWORD **)(*(_QWORD *)v11 + 8 * v1);
        if (v15)
        {
          for (i = (_QWORD *)*v15; i; i = (_QWORD *)*i)
          {
            v17 = i[1];
            if (v17 == v12)
            {
              if (i[2] == v12)
                goto LABEL_75;
            }
            else
            {
              if (v14.u32[0] > 1uLL)
              {
                if (v17 >= v13)
                  v17 %= v13;
              }
              else
              {
                v17 &= v13 - 1;
              }
              if (v17 != v1)
                break;
            }
          }
        }
      }
      v18 = operator new(0x28uLL);
      *v18 = 0;
      v18[1] = v12;
      v18[2] = v12;
      v18[3] = v10;
      v18[4] = 0;
      v19 = (float)(unint64_t)(*((_QWORD *)v11 + 3) + 1);
      v20 = v11[8];
      if (!v13 || (float)(v20 * (float)v13) < v19)
        break;
LABEL_65:
      v36 = *(_QWORD **)v11;
      v37 = *(_QWORD **)(*(_QWORD *)v11 + 8 * v1);
      if (v37)
      {
        *v18 = *v37;
      }
      else
      {
        *v18 = *((_QWORD *)v11 + 2);
        *((_QWORD *)v11 + 2) = v18;
        v36[v1] = v11 + 4;
        if (!*v18)
          goto LABEL_74;
        v38 = *(_QWORD *)(*v18 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v38 >= v13)
            v38 %= v13;
        }
        else
        {
          v38 &= v13 - 1;
        }
        v37 = (_QWORD *)(*(_QWORD *)v11 + 8 * v38);
      }
      *v37 = v18;
LABEL_74:
      ++*((_QWORD *)v11 + 3);
LABEL_75:
      ++v9;
      v7 += 96;
      if (v7 == v8)
        goto LABEL_86;
    }
    v21 = (v13 & (v13 - 1)) != 0;
    if (v13 < 3)
      v21 = 1;
    v22 = v21 | (2 * v13);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v13 = *((_QWORD *)v11 + 1);
    }
    if (*(_QWORD *)&prime > v13)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v13)
    {
      v31 = vcvtps_u32_f32((float)*((unint64_t *)v11 + 3) / v11[8]);
      if (v13 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v13)
      {
        v13 = *((_QWORD *)v11 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = *(_QWORD **)v11;
          *(_QWORD *)v11 = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          *((int8x8_t *)v11 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v11 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*((_QWORD *)v11 + 2);
          if (v28)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v11 + 8 * v29) = v11 + 4;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v11 + 8 * v35))
                  {
                    *(_QWORD *)(*(_QWORD *)v11 + 8 * v35) = v28;
                    goto LABEL_56;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*(_QWORD *)v11 + 8 * v35);
                  **(_QWORD **)(*(_QWORD *)v11 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_56:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v13 = (unint64_t)prime;
          goto LABEL_60;
        }
        v39 = *(_QWORD **)v11;
        *(_QWORD *)v11 = 0;
        if (v39)
          operator delete(v39);
        v13 = 0;
        *((_QWORD *)v11 + 1) = 0;
      }
    }
LABEL_60:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v13 <= v12)
        v1 = v12 % v13;
      else
        v1 = v12;
    }
    else
    {
      v1 = (v13 - 1) & v12;
    }
    goto LABEL_65;
  }
LABEL_86:
  v40 = (Phase::Logger *)*((_QWORD *)v44 + 4);
  v41 = *((_QWORD *)v44 + 29);
  v42 = *((_QWORD *)v44 + 30);
  v43 = (char *)*((_QWORD *)v44 + 23);
  memset(v46, 0, sizeof(v46));
  Phase::Controller::DSPVoiceManager::ConfigureGeneratorWithRenderCallback(v40, v41, v42, 1, v43, v46, v47);
  v48 = (void **)v46;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](&v48);
}

void sub_216540E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::StreamSamplerBase::IORenderOutput(Phase::Controller::StreamSamplerBase *this, uint64_t *a2, const AudioTimeStamp *a3, unsigned int *a4, AudioBufferList *a5)
{
  uint64_t v8;
  Phase::Logger *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[12];
  __int16 v25;
  int v26;
  __int16 v27;
  Phase::Controller::StreamSamplerBase *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (!this || !a4)
LABEL_19:
    std::terminate();
  if (*a4 != 1)
  {
    if (!*a4)
      goto LABEL_19;
    v8 = *((_QWORD *)a4 + 2);
    v9 = (Phase::Logger *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t *, const AudioTimeStamp *, unsigned int *))(**((_QWORD **)this + 5) + 64))(*((_QWORD *)this + 5), *((_QWORD *)this + 29), *((_QWORD *)this + 30), a2, a3, a4);
    if ((_DWORD)v9)
    {
      if (*((_QWORD *)a4 + 2) != v8)
      {
        v10 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v9) + 384));
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          v11 = *a2;
          v12 = *((_QWORD *)a4 + 2);
          *(_DWORD *)v24 = 136316418;
          *(_QWORD *)&v24[4] = "CvmStreamSamplerBase.mm";
          v25 = 1024;
          v26 = 172;
          v27 = 2048;
          v28 = this;
          v29 = 2048;
          v30 = v11;
          v31 = 2048;
          v32 = v8;
          v33 = 2048;
          v34 = v12;
          _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: [IO] st@%f: internal buffer pointer changed [from %p to %p]!", v24, 0x3Au);
          std::terminate();
        }
        goto LABEL_19;
      }
      goto LABEL_10;
    }
    return 0;
  }
  if (!(*(unsigned int (**)(_QWORD, _QWORD, _QWORD, uint64_t *, const AudioTimeStamp *, unsigned int *))(**((_QWORD **)this + 5) + 64))(*((_QWORD *)this + 5), *((_QWORD *)this + 29), *((_QWORD *)this + 30), a2, a3, a4))return 0;
LABEL_10:
  v13 = *a4;
  v14 = 1;
  if ((_DWORD)v13)
  {
    v15 = 0;
    v16 = 0;
    v17 = 4;
    do
    {
      if ((*((_QWORD *)this + 9) & (1 << v15)) != 0)
      {
        v18 = (_QWORD *)*((_QWORD *)this + 72);
        *(_QWORD *)v24 = *(_QWORD *)(*((_QWORD *)this + 20) + 96 * v16 + 8);
        v19 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(v18, (unint64_t *)v24);
        v19[3] = *(_QWORD *)&a4[v17];
        *((_BYTE *)v19 + 32) = 1;
        ++v16;
        v13 = *a4;
      }
      ++v15;
      v17 += 4;
    }
    while (v15 < v13);
    if (v13 > 1)
    {
      v20 = *((_QWORD *)this + 73);
      if (*(_DWORD *)(v20 + 40) != 1)
      {
        v22 = *(_QWORD *)(v20 + 16);
        v21 = *(_QWORD *)(v20 + 24);
        if (v22 == v21)
        {
          v21 = *(_QWORD *)(v20 + 32);
        }
        else if (v22 != *(_QWORD *)(v20 + 32))
        {
          goto LABEL_19;
        }
        *(_QWORD *)(v20 + 16) = v21;
        Phase::Controller::SamplerCallBackDoubleBuffer::PrepareRenderingBuffer(v20);
      }
    }
    return 1;
  }
  return v14;
}

double Phase::Controller::StreamSamplerBase::GetAnchorTimeForWakeFromSleepInSeconds(Phase::Controller::StreamSamplerBase *this, PHASECullOption a2, double a3)
{
  return 0.0;
}

uint64_t Phase::Controller::SamplerCallBackDoubleBuffer::PrepareRenderingBuffer(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = *(unsigned int *)(this + 40);
  if ((int)v1 >= 1)
  {
    v2 = *(_QWORD *)(this + 16);
    v3 = *(_QWORD *)(this + 48);
    v4 = 4 * v3;
    v5 = (_QWORD *)(*(_QWORD *)this + 16);
    v6 = 4 * v3;
    do
    {
      *v5 = v2;
      *((_DWORD *)v5 - 2) = 1;
      *((_DWORD *)v5 - 1) = v4;
      v5 += 2;
      v2 += v6;
      --v1;
    }
    while (v1);
  }
  return this;
}

uint64_t std::unique_ptr<std::unordered_map<long long,std::pair<void *,BOOL>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void **std::unique_ptr<Phase::Controller::SamplerCallBackDoubleBuffer>::reset[abi:ne180100](void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::SamplerCallBackDoubleBuffer::~SamplerCallBackDoubleBuffer(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void Phase::Controller::SamplerCallBackDoubleBuffer::~SamplerCallBackDoubleBuffer(void **this)
{
  free(this[3]);
  free(this[4]);
  free(this[1]);
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Controller::VoiceManager * const>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::VoiceManager *>::__id);
    else
      return 0;
  }
  return result;
}

Phase::Logger *Phase::Controller::Submix::Submix(Phase::Logger *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, Phase::Logger *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Phase::Logger *v15;
  uint64_t v21;
  uint64_t v22;
  char *v28;
  char v29;
  char *v30;
  char v31;
  char *v32;
  char v33;
  NSObject *v35;
  std::logic_error *exception;
  NSObject *v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  std::runtime_error *v41;
  __int128 v42;
  _BYTE buf[32];
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24D579B50;
  *((_BYTE *)a1 + 8) = 0;
  *((_OWORD *)a1 + 5) = 0u;
  v12 = (uint64_t)a1 + 80;
  *((_OWORD *)a1 + 6) = 0u;
  *((_QWORD *)a1 + 7) = 0;
  *((_QWORD *)a1 + 8) = 0;
  *((_WORD *)a1 + 36) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_DWORD *)a1 + 12) = 0;
  *((_DWORD *)a1 + 28) = 1065353216;
  *((_QWORD *)a1 + 15) = 0xFFFF00000000;
  v13 = (uint64_t)a1 + 120;
  *((_DWORD *)a1 + 32) = 0;
  v14 = (uint64_t)a1 + 248;
  *(_OWORD *)((char *)a1 + 136) = 0u;
  *(_OWORD *)((char *)a1 + 152) = 0u;
  *(_OWORD *)((char *)a1 + 168) = 0u;
  *((_DWORD *)a1 + 46) = 0;
  *((_QWORD *)a1 + 34) = 0;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_DWORD *)a1 + 70) = 1065353216;
  *((_WORD *)a1 + 144) = 257;
  *((_QWORD *)a1 + 37) = 0x3FF0000000000000;
  *((_QWORD *)a1 + 39) = 0;
  if (!(a2 | a3))
  {
    v35 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 384));
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmSubmix.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 47;
      _os_log_impl(&dword_2164CC000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inSubmixId != kInvalidSubmixId is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: inSubmixId != kInvalidSubmixId is false.");
LABEL_20:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  if (!a7 || !a8 || (v15 = a1, (a1 = a10) == 0) || !a11 || !a12)
  {
    v37 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 384));
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmSubmix.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 50;
      _os_log_impl(&dword_2164CC000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pInBackingHeap != nullptr && pInVoiceIdAllocator != nullptr && pInTaskManager != nullptr && pInDSPVoiceManager != nullptr && pInSubmixSystem != nullptr is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: pInBackingHeap != nullptr && pInVoiceIdAllocator != nullptr && pInTaskManager != nullptr && pInDSPVoiceManager != nullptr && pInSubmixSystem != nullptr is false.");
    goto LABEL_20;
  }
  *((_QWORD *)v15 + 24) = a7;
  *((_QWORD *)v15 + 25) = a8;
  *((_QWORD *)v15 + 26) = a9;
  *((_QWORD *)v15 + 27) = a10;
  *((_QWORD *)v15 + 28) = a11;
  *((_QWORD *)v15 + 29) = a12;
  v21 = Phase::Controller::TaskManager::GetService<Phase::Controller::SessionManager>(a10, 20);
  *((_QWORD *)v15 + 39) = v21;
  if (!v21
    || (atomic_store(0x3F800000uLL, (unint64_t *)v15 + 38),
        v22 = Phase::Controller::TaskManager::GetService<Phase::Geometry::System>(*((Phase::Logger **)v15 + 27), 2),
        (*((_QWORD *)v15 + 30) = v22) == 0))
  {
    std::terminate();
  }
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = a3;
  *((_QWORD *)v15 + 4) = a4;
  *((_QWORD *)v15 + 5) = a5;
  *((_DWORD *)v15 + 12) = a6;
  Phase::BitBlockAllocator<Phase::SystemAllocator>::Initialize(v13, 16, 56, *((_QWORD *)v15 + 24), (uint64_t)"Effect Allocator");
  std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(v14, vcvtps_u32_f32(1.0 / *((float *)v15 + 70)));
  *(_QWORD *)buf = 0;
  __asm { FMOV            V0.2D, #1.0 }
  v42 = _Q0;
  *(_OWORD *)&buf[8] = _Q0;
  *(_QWORD *)&buf[24] = 0x3FF0000000000000;
  v44 = 0;
  v28 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,Phase::Controller::Parameter<double>>(v12, qword_24D579CC8, qword_24D579CC8, (uint64_t)buf);
  if (!v29)
  {
    v38 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v28) + 384));
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmSubmix.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 77;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = 0xB5767F7E05AD941ELL;
      _os_log_impl(&dword_2164CC000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert %llu parameter\"", buf, 0x1Cu);
    }
LABEL_29:
    v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, "Failed to insert %llu parameter");
  }
  *(_QWORD *)buf = 0;
  *(_OWORD *)&buf[8] = v42;
  *(_QWORD *)&buf[24] = 0x3FF0000000000000;
  v44 = 0;
  v30 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,Phase::Controller::Parameter<double>>(v12, qword_24D579CF8, qword_24D579CF8, (uint64_t)buf);
  if (!v31)
  {
    v39 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v30) + 384));
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmSubmix.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 80;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = 0x81FBB92FC0173ECLL;
      _os_log_impl(&dword_2164CC000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert %llu parameter\"", buf, 0x1Cu);
    }
    goto LABEL_29;
  }
  *(_QWORD *)buf = 0;
  *(_OWORD *)&buf[8] = v42;
  *(_QWORD *)&buf[24] = 0x3FF0000000000000;
  v44 = 0;
  v32 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,Phase::Controller::Parameter<double>>(v12, qword_24D579D28, qword_24D579D28, (uint64_t)buf);
  if (!v33)
  {
    v40 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v32) + 384));
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmSubmix.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 83;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = 0x8119B92FBF50030;
      _os_log_impl(&dword_2164CC000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert %llu parameter\"", buf, 0x1Cu);
    }
    goto LABEL_29;
  }
  return v15;
}

void sub_2165417AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  __cxa_free_exception(v4);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>>>::~__hash_table(v3);
  Phase::BitBlockAllocator<Phase::SystemAllocator>::Destroy(v2);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::SessionManager>(Phase::Logger *a1, int a2)
{
  uint64_t v3;
  Phase::Logger *v4;
  uint64_t (**v5)(uint64_t, _QWORD, _QWORD, _QWORD, void *);
  NSObject *v7;
  std::logic_error *exception;
  NSObject *v9;
  std::string *v10;
  std::logic_error *v11;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 7) - v3) >> 5))
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 112;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(_QWORD *)v4)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 121;
      v17 = 1024;
      v18 = a2;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  v5 = std::any_cast[abi:ne180100]<Phase::Controller::SessionManager * const>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v4);
  if (!v5)
    std::__throw_bad_any_cast[abi:ne180100]();
  return (uint64_t)*v5;
}

void sub_216541A40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_216541B30(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_216541B50(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void Phase::Controller::Submix::~Submix(Phase::Controller::Submix *this)
{
  _QWORD *v2;
  Phase::Logger *v3;
  Phase::Logger *InstancePtr;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = off_24D579B50;
  Phase::Controller::Submix::DestroyInputs(this);
  v2 = (_QWORD *)((char *)this + 168);
  while (*v2 || *((_QWORD *)this + 22))
    Phase::Controller::Submix::RemoveEffect(this, 0);
  *v2 = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  Phase::BitBlockAllocator<Phase::SystemAllocator>::Destroy((uint64_t)this + 120);
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(v3);
  if (*((_BYTE *)InstancePtr + 1552))
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 384));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *((_QWORD *)this + 4);
      v7 = *((_QWORD *)this + 2);
      v8 = 136315906;
      v9 = "CvmSubmix.mm";
      v10 = 1024;
      v11 = 101;
      v12 = 2048;
      v13 = v6;
      v14 = 2048;
      v15 = v7;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu) - destroyed", (uint8_t *)&v8, 0x26u);
    }
  }
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>>>::~__hash_table((uint64_t)this + 248);
  Phase::BitBlockAllocator<Phase::SystemAllocator>::Destroy((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 80);
}

void sub_216541CBC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void Phase::Controller::Submix::RemoveEffect(Phase::Controller::Submix *this, unsigned int a2)
{
  Phase::Logger *v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  NSObject *v11;
  std::logic_error *exception;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if ((a2 & 0x80000000) != 0 || *((_DWORD *)this + 46) <= a2)
  {
    v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 384));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v13 = 136315394;
      v14 = "CvmSubmix.mm";
      v15 = 1024;
      v16 = 582;
      _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inIndex >= 0 && inIndex < mEffectChain.Count() is false.", (uint8_t *)&v13, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "PRECONDITION: inIndex >= 0 && inIndex < mEffectChain.Count() is false.");
  }
  v3 = (Phase::Controller::Submix *)((char *)this + 168);
  for (i = *((_QWORD *)this + 21); a2; --a2)
    i = *(_QWORD *)(i + 16);
  Phase::LinkedList::RemoveNode(v3, i);
  v5 = *(_QWORD **)(i + 24);
  v6 = *(_QWORD **)(i + 32);
  while (v5 != v6)
  {
    std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(v5 + 2);
    v8 = v5[7];
    v7 = v5[8];
    if (v7 != v8)
    {
      do
      {
        v9 = v7 - 32;
        std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v7 - 24);
        v7 = v9;
      }
      while (v9 != v8);
    }
    v5[8] = v8;
    v5 += 12;
  }
  v10 = *(_DWORD *)(i + 48);
  (**(void (***)(uint64_t))i)(i);
  Phase::BitBlockAllocator<Phase::SystemAllocator>::Free((uint64_t)this + 120, v10);
  *((_QWORD *)this + 8) |= 2uLL;
}

void sub_216541E74(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::Submix::Pause(uint64_t this)
{
  *(_QWORD *)(this + 56) |= 2uLL;
  return this;
}

uint64_t Phase::Controller::Submix::Resume(uint64_t this)
{
  *(_QWORD *)(this + 56) |= 4uLL;
  return this;
}

void Phase::Controller::Submix::SessionPause(Phase::Controller::Submix *this)
{
  _QWORD *i;
  _BYTE *v2;

  for (i = (_QWORD *)*((_QWORD *)this + 33); i; i = (_QWORD *)*i)
  {
    v2 = (_BYTE *)i[4];
    if (!v2[512])
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v2 + 24))(i[4]);
      Phase::Controller::Generator::SetSessionState((uint64_t)v2, 1);
    }
  }
}

uint64_t Phase::Controller::Submix::SessionResume(uint64_t this)
{
  _QWORD *i;

  for (i = *(_QWORD **)(this + 264); i; i = (_QWORD *)*i)
  {
    this = i[4];
    if (*(_DWORD *)(this + 388) == 1)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 32))(this);
  }
  return this;
}

uint64_t Phase::Controller::Submix::ClientEnginePause(uint64_t this)
{
  uint64_t **i;

  for (i = *(uint64_t ***)(this + 264); i; i = (uint64_t **)*i)
    this = (*(uint64_t (**)(uint64_t *))(*i[4] + 40))(i[4]);
  return this;
}

uint64_t Phase::Controller::Submix::ClientEngineStart(uint64_t this)
{
  uint64_t **i;

  for (i = *(uint64_t ***)(this + 264); i; i = (uint64_t **)*i)
    this = (*(uint64_t (**)(uint64_t *))(*i[4] + 48))(i[4]);
  return this;
}

uint64_t Phase::Controller::Submix::Reset(uint64_t this)
{
  *(_QWORD *)(this + 56) = *(_QWORD *)(this + 56) & 0xFFFFFFFFFFFFFFE6 | 0x18;
  return this;
}

uint64_t Phase::Controller::Submix::Destroy(uint64_t this)
{
  *(_QWORD *)(this + 56) |= 0x28uLL;
  return this;
}

BOOL Phase::Controller::Submix::IsStopped(Phase::Controller::Submix *this)
{
  return !*((_BYTE *)this + 72) && *((_BYTE *)this + 288) != 0;
}

uint64_t Phase::Controller::Submix::IsDestroyed(Phase::Controller::Submix *this)
{
  if ((*((_BYTE *)this + 56) & 0x20) != 0)
    return (*(uint64_t (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 80))(this);
  else
    return 0;
}

BOOL Phase::Controller::Submix::IsPreparing(Phase::Controller::Submix *this)
{
  return *((_BYTE *)this + 72) == 2;
}

BOOL Phase::Controller::Submix::IsReady(Phase::Controller::Submix *this)
{
  return *((unsigned __int8 *)this + 72) - 3 < 2;
}

BOOL Phase::Controller::Submix::HasInputs(Phase::Controller::Submix *this)
{
  return *((_QWORD *)this + 34) != 0;
}

uint64_t Phase::Controller::Submix::HasActiveInputs(Phase::Controller::Submix *this)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)*((_QWORD *)this + 33);
  if (!v1)
    return 0;
  while (1)
  {
    v2 = v1[4];
    if (*(_DWORD *)(v2 + 508) != 1 && *(_DWORD *)(v2 + 376) != 4)
      break;
    v1 = (_QWORD *)*v1;
    if (!v1)
      return 0;
  }
  return 1;
}

BOOL Phase::Controller::Submix::AllInputsPaused(Phase::Controller::Submix *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + 264);
  do
    v1 = (_QWORD *)*v1;
  while (v1 && *(_BYTE *)(v1[4] + 512));
  return v1 == 0;
}

void Phase::Controller::Submix::SetParameter(Phase::Controller::Submix *this, unint64_t a2, double a3)
{
  double *v4;
  double *v5;
  double v6;
  NSObject *v7;
  unint64_t v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  v4 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((_QWORD *)this + 10, &v8);
  v5 = v4;
  if (v4)
  {
    v6 = Phase::Controller::sClamp<double>((Phase::Logger *)v4, a3, v4[3], v4[4]);
    if (v6 != v5[6])
    {
      v5[6] = v6;
      *((_BYTE *)v5 + 56) = 1;
    }
  }
  else
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      v10 = "CvmSubmix.mm";
      v11 = 1024;
      v12 = 233;
      v13 = 2048;
      v14 = v8;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Submix:SetParameter: was called with an invalid inParameterId %lld!", buf, 0x1Cu);
    }
  }
}

void Phase::Controller::Submix::SetParameterData(Phase::Controller::Submix *this, uint64_t a2, const void *a3)
{
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 384));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = 136315650;
    v6 = "CvmSubmix.mm";
    v7 = 1024;
    v8 = 240;
    v9 = 2048;
    v10 = a2;
    _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Submix:SetParameterData: was called with an invalid inParameterId %lld!", (uint8_t *)&v5, 0x1Cu);
  }
}

void Phase::Controller::Submix::StopInputs(Phase::Controller::Submix *this)
{
  _QWORD *i;
  Phase::Controller::Generator *v2;
  NSObject *v3;
  std::logic_error *exception;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  for (i = (_QWORD *)*((_QWORD *)this + 33); i; i = (_QWORD *)*i)
  {
    v2 = (Phase::Controller::Generator *)i[4];
    if (!v2)
    {
      v3 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        v5 = 136315394;
        v6 = "CvmSubmix.mm";
        v7 = 1024;
        v8 = 248;
        _os_log_impl(&dword_2164CC000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", (uint8_t *)&v5, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "PRECONDITION: pGenerator != nullptr is false.");
    }
    Phase::Controller::Generator::Stop(v2);
  }
}

void sub_21654239C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void Phase::Controller::Submix::DestroyInputs(Phase::Controller::Submix *this)
{
  uint64_t **i;
  Phase::Controller::Generator *v2;
  NSObject *v3;
  std::logic_error *exception;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  for (i = (uint64_t **)*((_QWORD *)this + 33); i; i = (uint64_t **)*i)
  {
    v2 = (Phase::Controller::Generator *)i[4];
    if (!v2)
    {
      v3 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        v5 = 136315394;
        v6 = "CvmSubmix.mm";
        v7 = 1024;
        v8 = 260;
        _os_log_impl(&dword_2164CC000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", (uint8_t *)&v5, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "PRECONDITION: pGenerator != nullptr is false.");
    }
    Phase::Controller::Generator::Stop(v2);
    Phase::Controller::Generator::Finish((Phase::Controller::Generator *)i[4]);
  }
}

void sub_2165424C8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void Phase::Controller::Submix::Update(Phase::Controller::Submix *this, double a2)
{
  Phase::Logger *v4;
  int v5;
  _QWORD *i;
  Phase::Controller::Generator *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *j;
  double v15;
  uint64_t v16;
  int v17;
  int v18;
  char *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  Phase::Logger *v23;
  int v24;
  NSObject *v25;
  unint64_t k;
  Phase::Logger *v27;
  int v28;
  NSObject *v29;
  _QWORD *m;
  Phase::Controller::Generator *v31;
  NSObject *v32;
  std::logic_error *exception;
  NSObject *v34;
  std::logic_error *v35;
  _BYTE buf[12];
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  _BYTE __p[18];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 88))(this) & 1) != 0)
    return;
  v4 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 112))(this);
  v5 = (int)v4;
  for (i = (_QWORD *)*((_QWORD *)this + 33); i; i = (_QWORD *)*i)
  {
    v7 = (Phase::Controller::Generator *)i[4];
    if (!v7)
    {
      v32 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4) + 384));
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "CvmSubmix.mm";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 283;
        _os_log_impl(&dword_2164CC000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", __p, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "PRECONDITION: pGenerator != nullptr is false.");
    }
    if ((*((_BYTE *)this + 56) & 0x10) != 0)
    {
      *((_QWORD *)v7 + 46) = 0;
      *((_BYTE *)v7 + 512) = 0;
      *((_BYTE *)v7 + 384) = 1;
      Phase::Controller::Generator::SetSleepState((uint64_t)v7, 0);
      (*(void (**)(Phase::Controller::Generator *, _QWORD))(*(_QWORD *)v7 + 112))(v7, 0);
      v7 = (Phase::Controller::Generator *)i[4];
    }
    Phase::Controller::Generator::Update(v7, a2, v5);
  }
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v8 & 0xFFFFFFFFFFFFFFEFLL;
  if ((v8 & 8) != 0)
  {
    (*(void (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 320))(this);
    if (*((unsigned __int8 *)this + 72) >= 2u)
      goto LABEL_69;
    goto LABEL_64;
  }
  v9 = *(_QWORD *)this;
  if ((v8 & 2) != 0)
  {
    (*(void (**)(Phase::Controller::Submix *))(v9 + 296))(this);
    if (*((_BYTE *)this + 72) != 5)
      goto LABEL_69;
    goto LABEL_15;
  }
  v10 = (*(uint64_t (**)(Phase::Controller::Submix *))(v9 + 184))(this);
  v11 = *((unsigned __int8 *)this + 72);
  if ((v10 & 1) != 0)
  {
    if (!*((_BYTE *)this + 72))
      goto LABEL_64;
  }
  else if (v11 != 6)
  {
    goto LABEL_21;
  }
  (*(void (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 312))(this);
  v11 = *((unsigned __int8 *)this + 72);
  if ((v11 & 0xFE) != 6)
    goto LABEL_69;
  if ((v10 & 1) != 0)
    goto LABEL_25;
LABEL_21:
  if (v11 == 5)
  {
LABEL_15:
    v12 = *((_QWORD *)this + 7);
    if ((v12 & 8) != 0)
      goto LABEL_69;
    if ((v12 & 4) == 0)
      goto LABEL_64;
    (*(void (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 304))(this);
    v11 = *((unsigned __int8 *)this + 72);
    goto LABEL_25;
  }
  if (v11 == 7)
  {
    (*(void (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 288))(this);
    if (*((_BYTE *)this + 72) != 2)
      goto LABEL_69;
LABEL_27:
    if (!(*(unsigned int (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 104))(this))
      return;
    (*(void (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 304))(this);
    if (*((_BYTE *)this + 72) != 3)
      goto LABEL_69;
    goto LABEL_29;
  }
LABEL_25:
  if (v11 != 3)
  {
    if (v11 != 2)
      goto LABEL_31;
    goto LABEL_27;
  }
LABEL_29:
  if (!(*(unsigned int (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 128))(this))
    return;
  Phase::Controller::Submix::SetState((uint64_t)this, 4u);
  v11 = *((unsigned __int8 *)this + 72);
LABEL_31:
  if (v11 == 4)
  {
    if ((*((_BYTE *)this + 64) & 1) == 0)
    {
      v13 = *((_QWORD *)this + 7);
      if ((v13 & 8) == 0 && (v13 & 2) == 0)
      {
        for (j = (uint64_t *)*((_QWORD *)this + 12); j; j = (uint64_t *)*j)
        {
          if (*((_BYTE *)j + 56))
            *((_BYTE *)j + 56) = 0;
        }
        if ((*(uint64_t (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 336))(this) != 2)
        {
          v15 = 0.016666;
          if (a2 <= 0.016666)
            v15 = a2;
          if (*((_BYTE *)this + 289))
            v15 = 0.0;
          Phase::Controller::Submix::UpdateGainEffectsWithDuration(this, v15);
          *((_BYTE *)this + 289) = (*(uint64_t (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 136))(this);
        }
        v16 = *((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v16 & 0xFFFFFFFFFFFFFFFDLL;
        if ((v16 & 2) != 0)
        {
          Phase::Controller::Submix::GetEffects((Phase::Logger **)this, 0, __p);
          v27 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::ConfigureSubmix(*(_QWORD **)(**((_QWORD **)this + 28) + 72), *((_QWORD *)this + 2), *((_QWORD *)this + 3), 1, __p);
          v28 = (int)v27;
          if ((_DWORD)v27)
          {
            v29 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v27) + 384));
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "CvmSubmix.mm";
              v37 = 1024;
              v38 = 419;
              v39 = 1024;
              v40 = v28;
              _os_log_impl(&dword_2164CC000, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mpDspVoiceManager->ConfigureSubmix() failed with error code: %hhd", buf, 0x18u);
            }
          }
          *(_QWORD *)buf = __p;
          std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        else
        {
          v17 = *((_DWORD *)this + 46);
          if (v17 >= 1)
          {
            v18 = 0;
            v19 = (char *)this + 168;
            do
            {
              v20 = *(_QWORD *)v19;
              v22 = *(unint64_t **)(*(_QWORD *)v19 + 24);
              v21 = *(unint64_t **)(*(_QWORD *)v19 + 32);
              if (v22 != v21)
              {
                do
                {
                  Phase::Controller::VoiceData::PackDirtyDspParameters((Phase::Controller::VoiceData *)v22, __p);
                  v23 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::SetParameters(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 28) + 72), *v22, v22[1], __p);
                  v24 = (int)v23;
                  if ((_DWORD)v23)
                  {
                    v25 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v23) + 384));
                    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = "CvmSubmix.mm";
                      v37 = 1024;
                      v38 = 440;
                      v39 = 1024;
                      v40 = v24;
                      _os_log_impl(&dword_2164CC000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mpDspVoiceManager->SetParameters() failed with error code: %hhd", buf, 0x18u);
                    }
                  }
                  for (k = v22[4]; k; k = *(_QWORD *)k)
                    *(_BYTE *)(k + 56) = 0;
                  if (*(_QWORD *)__p)
                  {
                    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
                    operator delete(*(void **)__p);
                  }
                  v22 += 12;
                }
                while (v22 != v21);
                v17 = *((_DWORD *)this + 46);
              }
              v19 = (char *)(v20 + 16);
              ++v18;
            }
            while (v18 < v17);
          }
        }
        goto LABEL_64;
      }
    }
LABEL_69:
    std::terminate();
  }
LABEL_64:
  if (((*(unsigned int (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 112))(this) & ~v5) == 1)
  {
    for (m = (_QWORD *)*((_QWORD *)this + 33); m; m = (_QWORD *)*m)
    {
      v31 = (Phase::Controller::Generator *)m[4];
      if (!v31)
      {
        v34 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "CvmSubmix.mm";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 458;
          _os_log_impl(&dword_2164CC000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", __p, 0x12u);
        }
        v35 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v35, "PRECONDITION: pGenerator != nullptr is false.");
      }
      Phase::Controller::Generator::Update(v31, 0.0, 1);
    }
  }
}

void sub_216542B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **p_p, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  p_p = &__p;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](&p_p);
  _Unwind_Resume(a1);
}

void Phase::Controller::Submix::SetState(uint64_t a1, unsigned int a2)
{
  Phase::Logger *InstancePtr;
  NSObject *v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (*(unsigned __int8 *)(a1 + 72) != a2)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)a1);
    if (*((_BYTE *)InstancePtr + 1552))
    {
      v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 384));
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(char *)(a1 + 72);
        if (v6 > 7)
          v7 = "<not found>";
        else
          v7 = off_24D579DF8[v6];
        v8 = *(_QWORD *)(a1 + 32);
        v9 = *(_QWORD *)(a1 + 16);
        if (a2 > 7)
          v10 = "<not found>";
        else
          v10 = off_24D579DF8[a2];
        v11 = 136316418;
        v12 = "CvmSubmix.mm";
        v13 = 1024;
        v14 = 1089;
        v15 = 2048;
        v16 = v8;
        v17 = 2048;
        v18 = v9;
        v19 = 2080;
        v20 = v7;
        v21 = 2080;
        v22 = v10;
        _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu) - state changed from '%s' to '%s'", (uint8_t *)&v11, 0x3Au);
      }
    }
    *(_BYTE *)(a1 + 72) = a2;
  }
}

void Phase::Controller::Submix::UpdateGainEffectsWithDuration(Phase::Controller::Submix *this, double a2)
{
  double v4;
  unint64_t v5;
  double v6;
  float v7;
  double v8;

  v4 = (*(double (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 328))(this);
  v5 = atomic_load((unint64_t *)this + 38);
  if ((v5 & 0x100000000) != 0)
    v6 = 0.0;
  else
    v6 = 1.0;
  LODWORD(v7) = atomic_load((unint64_t *)this + 38);
  v8 = v7;
  Phase::Controller::Submix::SetEffectParameter(this, 0, 0, a2, 0);
  Phase::Controller::Submix::SetEffectParameter(this, 0, 2, v4, 0);
  Phase::Controller::Submix::SetEffectParameter(this, 0, 3, v6, 0);
  Phase::Controller::Submix::SetEffectParameter(this, 0, 6, v8, 0);
}

void Phase::Controller::Submix::GetEffects(Phase::Logger **this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  int v6;
  Phase::Logger *v7;
  uint64_t v8;
  uint64_t v9;
  Phase::Logger *v10;
  uint64_t v11;
  Phase::Controller::VoiceData *v12;
  Phase::Controller::VoiceData *v13;
  unint64_t *v14;
  unint64_t v15;
  Phase::Controller::VoiceData *i;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64x2_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *j;
  NSObject *v40;
  uint64_t v41;
  std::logic_error *exception;
  void *v43;
  _QWORD *v44;
  _QWORD *v46;
  __int128 v47;
  __int128 v48;
  void **v49;
  _BYTE buf[32];
  void *v51[2];
  uint64_t v52;
  void *v53[2];
  uint64_t v54;
  void *__p[2];
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v5 = Phase::Controller::TaskManager::GetService<Phase::Controller::VoicePoolRegistry>(this[27], 3);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v46 = a3;
  if (*((int *)this + 46) >= 1)
  {
    v6 = 0;
    v7 = this[21];
    v43 = a3 + 2;
    v44 = (_QWORD *)(v5 + 40);
    do
    {
      v9 = *((_QWORD *)v7 + 3);
      v8 = *((_QWORD *)v7 + 4);
      if (0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 5) != (*((int (**)(Phase::Logger **))*this + 43))(this))
        std::terminate();
      *(_QWORD *)buf = **((_QWORD **)v7 + 3);
      v10 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v44, (unint64_t *)buf);
      if (!v10 || (v11 = *((_QWORD *)v10 + 3)) == 0)
      {
        v40 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10)
                                                                                            + 384)));
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
          v41 = **((_QWORD **)v7 + 3);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "CvmSubmix.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1436;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v41;
          _os_log_impl(&dword_2164CC000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [!pVoicePoolEntry is true]: \"Couldn't find a Voice Pool with StringHashId 0x%llx!\"", buf, 0x1Cu);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Couldn't find a Voice Pool with StringHashId 0x%llx!");
      }
      v12 = (Phase::Controller::VoiceData *)*((_QWORD *)v7 + 4);
      if (a2)
      {
        v13 = (Phase::Controller::VoiceData *)*((_QWORD *)v7 + 3);
        if (v13 != v12)
        {
          do
          {
            v14 = (unint64_t *)this[25];
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 + 1, v14));
            *((_QWORD *)v13 + 1) = v15;
            v13 = (Phase::Controller::VoiceData *)((char *)v13 + 96);
          }
          while (v13 != v12);
          v12 = (Phase::Controller::VoiceData *)*((_QWORD *)v7 + 4);
        }
      }
      v47 = 0u;
      v48 = 0u;
      *(_QWORD *)&v47 = *(_QWORD *)(v11 + 24);
      for (i = (Phase::Controller::VoiceData *)*((_QWORD *)v7 + 3);
            i != v12;
            i = (Phase::Controller::VoiceData *)((char *)i + 96))
      {
        Phase::Controller::VoiceData::CreateDspNodeVoice(i, (uint64_t)buf);
        v17 = v48;
        if ((unint64_t)v48 >= *((_QWORD *)&v48 + 1))
        {
          *(_QWORD *)&v48 = std::vector<Phase::Controller::DspNodeVoice>::__push_back_slow_path<Phase::Controller::DspNodeVoice>((uint64_t *)&v47 + 1, (uint64_t)buf);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_OWORD *)v48 = *(unint64_t *)buf;
          *(_QWORD *)(v17 + 24) = 0;
          *(_QWORD *)(v17 + 32) = 0;
          *(_QWORD *)(v17 + 16) = 0;
          *(_OWORD *)(v17 + 8) = *(_OWORD *)&buf[8];
          *(_QWORD *)(v17 + 24) = *(_QWORD *)&buf[24];
          memset(&buf[8], 0, 24);
          *(_QWORD *)(v17 + 40) = 0;
          *(_QWORD *)(v17 + 48) = 0;
          *(_OWORD *)(v17 + 32) = *(_OWORD *)v51;
          *(_QWORD *)(v17 + 48) = v52;
          *(_QWORD *)(v17 + 56) = 0;
          v51[0] = 0;
          v51[1] = 0;
          v52 = 0;
          *(_QWORD *)(v17 + 64) = 0;
          *(_QWORD *)(v17 + 72) = 0;
          *(_OWORD *)(v17 + 56) = *(_OWORD *)v53;
          v53[0] = 0;
          v53[1] = 0;
          *(_QWORD *)(v17 + 72) = v54;
          *(_QWORD *)(v17 + 80) = 0;
          v54 = 0;
          *(_QWORD *)(v17 + 88) = 0;
          *(_QWORD *)(v17 + 96) = 0;
          *(_OWORD *)(v17 + 80) = *(_OWORD *)__p;
          *(_QWORD *)(v17 + 96) = v56;
          __p[0] = 0;
          __p[1] = 0;
          v56 = 0;
          *(_QWORD *)&v48 = v17 + 104;
        }
        if (v53[0])
        {
          v53[1] = v53[0];
          operator delete(v53[0]);
        }
        if (v51[0])
        {
          v51[1] = v51[0];
          operator delete(v51[0]);
        }
        v49 = (void **)&buf[8];
        std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v49);
      }
      v19 = (_QWORD *)v46[1];
      v18 = v46[2];
      if ((unint64_t)v19 >= v18)
      {
        v22 = ((uint64_t)v19 - *v46) >> 5;
        if ((unint64_t)(v22 + 1) >> 59)
          std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
        v23 = v18 - *v46;
        v24 = v23 >> 4;
        if (v23 >> 4 <= (unint64_t)(v22 + 1))
          v24 = v22 + 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
          v25 = 0x7FFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        v51[0] = v43;
        if (v25)
        {
          if (v25 >> 59)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = (char *)operator new(32 * v25);
        }
        else
        {
          v26 = 0;
        }
        v27 = &v26[32 * v22];
        *(_QWORD *)buf = v26;
        *(_QWORD *)&buf[8] = v27;
        *(_QWORD *)&buf[16] = v27;
        *(_QWORD *)&buf[24] = &v26[32 * v25];
        v28 = *((_QWORD *)&v47 + 1);
        *(_QWORD *)v27 = v47;
        *((_QWORD *)v27 + 2) = 0;
        *((_QWORD *)v27 + 3) = 0;
        *((_QWORD *)v27 + 1) = 0;
        std::vector<Phase::Controller::DspNodeVoice>::__init_with_size[abi:ne180100]<Phase::Controller::DspNodeVoice*,Phase::Controller::DspNodeVoice*>((_QWORD *)v27 + 1, v28, v48, 0x4EC4EC4EC4EC4EC5 * (((uint64_t)v48 - v28) >> 3));
        v29 = *(_QWORD *)&buf[8];
        v20 = *(_QWORD *)&buf[16] + 32;
        *(_QWORD *)&buf[16] += 32;
        v31 = *v46;
        v30 = v46[1];
        if (v30 == *v46)
        {
          v35 = vdupq_n_s64(v30);
          v21 = v46;
        }
        else
        {
          v32 = 0;
          do
          {
            v33 = v29 + v32;
            v34 = v30 + v32;
            *(_QWORD *)(v33 - 32) = *(_QWORD *)(v30 + v32 - 32);
            *(_QWORD *)(v33 - 24) = 0;
            *(_QWORD *)(v33 - 16) = 0;
            *(_QWORD *)(v33 - 8) = 0;
            *(_OWORD *)(v33 - 24) = *(_OWORD *)(v30 + v32 - 24);
            *(_QWORD *)(v33 - 8) = *(_QWORD *)(v30 + v32 - 8);
            *(_QWORD *)(v34 - 24) = 0;
            *(_QWORD *)(v34 - 16) = 0;
            *(_QWORD *)(v34 - 8) = 0;
            v32 -= 32;
          }
          while (v30 + v32 != v31);
          v21 = v46;
          v35 = *(int64x2_t *)v46;
          v20 = *(_QWORD *)&buf[16];
          v29 += v32;
        }
        *v21 = v29;
        v21[1] = v20;
        *(int64x2_t *)&buf[8] = v35;
        v36 = v21[2];
        v21[2] = *(_QWORD *)&buf[24];
        *(_QWORD *)&buf[24] = v36;
        *(_QWORD *)buf = v35.i64[0];
        std::__split_buffer<Phase::Controller::DspNode>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *v19 = v47;
        v19[1] = 0;
        v19[2] = 0;
        v19[3] = 0;
        std::vector<Phase::Controller::DspNodeVoice>::__init_with_size[abi:ne180100]<Phase::Controller::DspNodeVoice*,Phase::Controller::DspNodeVoice*>(v19 + 1, *((uint64_t *)&v47 + 1), v48, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v48 - *((_QWORD *)&v47 + 1)) >> 3));
        v20 = (uint64_t)(v19 + 4);
        v21 = v46;
        v46[1] = v20;
      }
      v21[1] = v20;
      v37 = *((_QWORD *)v7 + 3);
      v38 = *((_QWORD *)v7 + 4);
      while (v37 != v38)
      {
        for (j = *(uint64_t **)(v37 + 32); j; j = (uint64_t *)*j)
          *((_BYTE *)j + 56) = 0;
        v37 += 96;
      }
      v7 = (Phase::Logger *)*((_QWORD *)v7 + 2);
      *(_QWORD *)buf = (char *)&v47 + 8;
      std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      ++v6;
    }
    while (v6 < *((_DWORD *)this + 46));
  }
}

void sub_2165432C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13)
{
  a13 = a12;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::Submix::ShouldSleep(Phase::Controller::Submix *this)
{
  uint64_t result;
  unint64_t v3;

  if (*((_BYTE *)this + 8))
    return 0;
  if ((*(unsigned int (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 120))(this)
    && ((*(uint64_t (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 128))(this) & 1) == 0)
  {
    v3 = *((_QWORD *)this + 8) | 1;
    result = 1;
  }
  else
  {
    result = 0;
    v3 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFFFFELL;
  }
  *((_QWORD *)this + 8) = v3;
  return result;
}

uint64_t Phase::Controller::Submix::SubmitGeneratorStoppedResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t Generator;

  Generator = Phase::Controller::Submix::GetGenerator(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)Generator + 64))(Generator, a5, a6, a4);
}

uint64_t Phase::Controller::Submix::GetGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  NSObject *v6;
  std::logic_error *exception;
  NSObject *v8;
  std::logic_error *v9;
  _QWORD v10[2];
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v10[0] = a2;
  v10[1] = a3;
  v4 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 248), v10);
  if (!v4)
  {
    v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v12 = "CvmSubmix.mm";
      v13 = 1024;
      v14 = 1372;
      v15 = 2048;
      v16 = a2;
      _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (IdAlreadyExists) [it == mGenerators.end() is true]: \"GeneratorId %llu does not exist!\"", buf, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(exception, "GeneratorId %llu does not exist!");
  }
  result = v4[4];
  if (!result)
  {
    v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v12 = "CvmSubmix.mm";
      v13 = 1024;
      v14 = 1375;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", buf, 0x12u);
    }
    v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v9, "PRECONDITION: pGenerator != nullptr is false.");
  }
  return result;
}

void sub_2165435BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::Submix::SubmitSubmixStoppedResult(Phase::Logger *this, std::error_code a2)
{
  NSObject *v2;
  void *exception;
  std::error_code v4;
  std::string buf;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  if (a2.__val_ == 1)
  {
    v2 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 384));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"CvmSubmix.mm";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 494;
      _os_log_impl(&dword_2164CC000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inErrorCode.value() == true is true]: inErrorCode.message()", (uint8_t *)&buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    std::error_code::message(&buf, &v4);
    MEMORY[0x2199F9908](exception, &buf);
  }
  *((_BYTE *)this + 288) = 1;
  return this;
}

void sub_2165436F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t Phase::Controller::Submix::AddEffect(Phase::Controller::Submix *this, uint64_t a2, uint64_t a3)
{
  char *v6;
  int v7;
  uint64_t v8;
  Phase::Controller::VoicePoolEntry **v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  NSObject *v21;
  std::logic_error *exception;
  Phase::Controller::VoicePoolEntry *v23;
  _BYTE buf[12];
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v6 = Phase::BitBlockAllocator<Phase::SystemAllocator>::Allocate((Phase::Controller::Submix *)((char *)this + 120));
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)v6 = off_24D579D58;
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 5) = 0;
  *((_DWORD *)v6 + 12) = v7;
  v8 = Phase::Controller::TaskManager::GetService<Phase::Controller::VoicePoolRegistry>(*((Phase::Logger **)this + 27), 3);
  *(_QWORD *)buf = a2;
  v9 = (Phase::Controller::VoicePoolEntry **)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)(v8 + 40), (unint64_t *)buf);
  if (!v9 || (v23 = v9[3]) == 0)
  {
    v21 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v9) + 384));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmSubmix.mm";
      v25 = 1024;
      v26 = 513;
      _os_log_impl(&dword_2164CC000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!pVoicePoolEntry is true]: \"Couldn't find a Voice Pool!\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Couldn't find a Voice Pool!");
  }
  if ((*(int (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 344))(this) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *((_QWORD *)v6 + 4);
      if (v11 >= *((_QWORD *)v6 + 5))
      {
        v12 = std::vector<Phase::Controller::VoiceData>::__emplace_back_slow_path<Phase::Controller::VoicePoolEntry const*&>((uint64_t *)v6 + 3, &v23);
      }
      else
      {
        Phase::Controller::VoiceData::VoiceData(*((Phase::Controller::VoiceData **)v6 + 4), v23, 0x7FFFFFFFFFFFFFFFLL);
        v12 = v11 + 96;
        *((_QWORD *)v6 + 4) = v11 + 96;
      }
      *((_QWORD *)v6 + 4) = v12;
      ++v10;
    }
    while (v10 < (*(int (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 344))(this));
  }
  if (a2 == 0x235B3F2D33EB877ALL || (_DWORD)a3)
  {
    if ((a3 & 0x80000000) != 0)
    {
LABEL_16:
      Phase::LinkedList::InsertNodeAfter((uint64_t)this + 168, (uint64_t)v6, *((_QWORD *)this + 22));
      v17 = *((_DWORD *)this + 46);
      a3 = v17 - 1;
      goto LABEL_24;
    }
  }
  else
  {
    v13 = (char *)this + 168;
    v14 = *((_QWORD *)this + 21);
    if (!v14)
    {
      if ((*((_DWORD *)this + 46) & 0x80000000) != 0)
        goto LABEL_16;
      a3 = 0;
      v18 = 0;
      goto LABEL_23;
    }
    v16 = v14 + 24;
    v15 = *(_QWORD **)(v14 + 24);
    if (*(_QWORD *)(v16 + 8) - (_QWORD)v15 != *((_QWORD *)v6 + 4) - *((_QWORD *)v6 + 3))
      goto LABEL_26;
    a3 = *v15 == 0x235B3F2D33EB877ALL;
  }
  if ((int)a3 > *((_DWORD *)this + 46))
    goto LABEL_16;
  v13 = (char *)this + 168;
  v18 = *((_QWORD *)this + 21);
  if ((_DWORD)a3)
  {
    v19 = a3;
    do
    {
      v18 = *(_QWORD *)(v18 + 16);
      --v19;
    }
    while (v19);
  }
LABEL_23:
  Phase::LinkedList::InsertNodeBefore((uint64_t)v13, (uint64_t)v6, v18);
  v17 = *((_DWORD *)this + 46);
LABEL_24:
  if (v17 <= a3)
LABEL_26:
    std::terminate();
  *((_QWORD *)this + 8) |= 2uLL;
  return a3;
}

void sub_2165439E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::Submix::AddEffect(Phase::Controller::Submix *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  Phase::Controller::VoiceData *v11;
  Phase::Controller::VoiceData *v12;

  v5 = Phase::Controller::Submix::AddEffect(a1, *a2, a3);
  v6 = v5;
  v8 = a2[1];
  v7 = a2[2];
  if (v8 != v7)
  {
    v9 = (_QWORD *)*((_QWORD *)a1 + 21);
    if ((int)v5 >= 1)
    {
      v10 = v5;
      do
      {
        v9 = (_QWORD *)v9[2];
        --v10;
      }
      while (v10);
    }
    do
    {
      v11 = (Phase::Controller::VoiceData *)v9[3];
      v12 = (Phase::Controller::VoiceData *)v9[4];
      while (v11 != v12)
      {
        Phase::Controller::VoiceData::SetParameter(v11, *(_DWORD *)v8, *(double *)(v8 + 8), 0);
        v11 = (Phase::Controller::VoiceData *)((char *)v11 + 96);
      }
      v8 += 16;
    }
    while (v8 != v7);
  }
  return v6;
}

void Phase::Controller::Submix::SetEffectParameter(Phase::Controller::Submix *this, unsigned int a2, int a3, double a4, int a5)
{
  _QWORD *i;
  Phase::Controller::VoiceData *v9;
  Phase::Controller::VoiceData *v10;
  NSObject *v11;
  std::logic_error *exception;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if ((a2 & 0x80000000) != 0 || *((_DWORD *)this + 46) <= a2)
  {
    v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 384));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v13 = 136315394;
      v14 = "CvmSubmix.mm";
      v15 = 1024;
      v16 = 606;
      _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inIndex >= 0 && inIndex < mEffectChain.Count() is false.", (uint8_t *)&v13, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "PRECONDITION: inIndex >= 0 && inIndex < mEffectChain.Count() is false.");
  }
  for (i = (_QWORD *)*((_QWORD *)this + 21); a2; --a2)
    i = (_QWORD *)i[2];
  v9 = (Phase::Controller::VoiceData *)i[3];
  v10 = (Phase::Controller::VoiceData *)i[4];
  while (v9 != v10)
  {
    Phase::Controller::VoiceData::SetParameter(v9, a3, a4, a5);
    v9 = (Phase::Controller::VoiceData *)((char *)v9 + 96);
  }
}

void sub_216543C00(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void Phase::Controller::Submix::Fade(Phase::Controller::Submix *this, float a2, float a3)
{
  double v3;

  v3 = a2;
  if (*((double *)this + 37) != a2)
  {
    Phase::Controller::Submix::SetEffectParameter(this, 0, 1, a3, 1);
    Phase::Controller::Submix::SetEffectParameter(this, 0, 4, *((double *)this + 37), 1);
    Phase::Controller::Submix::SetEffectParameter(this, 0, 5, v3, 1);
    *((double *)this + 37) = v3;
  }
}

void Phase::Controller::Submix::SetSessionLevel(unint64_t *a1, uint64_t a2, char a3)
{
  atomic_store(COERCE_UNSIGNED_INT(fminf(fmaxf(*(float *)a2, 0.0), 1.0)) | ((unint64_t)*(unsigned __int8 *)(a2 + 4) << 32), a1 + 38);
  if ((a3 & 1) == 0 && (*(uint64_t (**)(unint64_t *))(*a1 + 336))(a1) != 2)
    Phase::Controller::Submix::UpdateGainEffectsWithDuration((Phase::Controller::Submix *)a1, 0.0);
}

BOOL Phase::Controller::Submix::PrepareGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  unint64_t v6;
  uint64_t *v13;
  Phase::Logger *v14;
  int v15;
  _DWORD *v16;
  Phase::Logger *v17;
  Phase::Logger *v18;
  Phase::Logger *v19;
  Phase::Controller::Generator *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint8x8_t v24;
  Phase::Logger *v25;
  Phase::Logger *v26;
  Phase::Controller::FileSampler *v27;
  uint64_t v28;
  uint8x8_t v29;
  _QWORD *v30;
  _QWORD *i;
  unint64_t v32;
  _QWORD *v34;
  float v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  Phase::Controller::StreamSamplerBase *v41;
  uint64_t v42;
  uint8x8_t v43;
  Phase::Controller::StreamSamplerBase *v44;
  uint64_t v45;
  Phase::Logger *v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  void *v52;
  int v53;
  Phase::Logger *v54;
  Phase::Logger *v55;
  Phase::Logger *v56;
  NSObject *v57;
  int v58;
  std::logic_error *v59;
  Phase::Controller::StreamSamplerBase *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint8x8_t v64;
  uint64_t v65;
  Phase::Logger *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint8x8_t v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  float v78;
  float v79;
  _BOOL8 v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  float v87;
  float v88;
  _BOOL8 v89;
  unint64_t v90;
  unint64_t v91;
  size_t v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t v95;
  float v97;
  float v98;
  _BOOL8 v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  unint64_t v104;
  float v106;
  float v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  unint64_t v111;
  Phase::Controller::Generator *Generator;
  int v113;
  _QWORD *v114;
  _QWORD *v115;
  int8x8_t v116;
  uint64_t v117;
  unint64_t v118;
  uint8x8_t v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  _BOOL8 v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  unint64_t v132;
  void *v134;
  float v135;
  float v136;
  _BOOL8 v137;
  unint64_t v138;
  unint64_t v139;
  size_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  void *v144;
  unint64_t v145;
  Phase::Controller::ExternalOutputPullStreamSampler *v146;
  int v147;
  Phase::Logger *v148;
  Phase::Logger *v149;
  NSObject *v150;
  Phase::Logger *v151;
  NSObject *v152;
  std::logic_error *v154;
  NSObject *v155;
  std::logic_error *exception;
  NSObject *v157;
  std::logic_error *v158;
  NSObject *v159;
  std::logic_error *v160;
  NSObject *v161;
  int v162;
  std::logic_error *v163;
  NSObject *v164;
  std::runtime_error *v165;
  NSObject *v166;
  std::runtime_error *v167;
  NSObject *v168;
  int v169;
  std::logic_error *v170;
  Phase::Logger *v171;
  NSObject *v172;
  std::logic_error *v174;
  Phase::Logger *v175;
  NSObject *v176;
  std::logic_error *v178;
  Phase::Logger *v179;
  NSObject *v180;
  std::logic_error *v182;
  Phase::Logger *v183;
  NSObject *v184;
  std::logic_error *v186;
  NSObject *v187;
  std::runtime_error *v188;
  NSObject *v189;
  std::logic_error *v190;
  NSObject *v191;
  std::runtime_error *v192;
  NSObject *v193;
  int v194;
  std::logic_error *v195;
  void *v196;
  id v197;
  id v198;
  uint64_t v199;
  std::vector<char>::value_type __x[16];
  uint64_t v201;
  __int128 v202;
  _BYTE v203[30];
  uint64_t v204;
  __int16 v205;
  Phase::Logger *v206;
  __int16 v207;
  uint64_t v208;
  uint64_t v209;

  v209 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v202 = a2;
  *((_QWORD *)&v202 + 1) = a3;
  if (!(a2 | a3))
  {
    v155 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 384));
    if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v203 = 136315394;
      *(_QWORD *)&v203[4] = "CvmSubmix.mm";
      *(_WORD *)&v203[12] = 1024;
      *(_DWORD *)&v203[14] = 648;
      _os_log_impl(&dword_2164CC000, v155, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inGeneratorId == kInvalidGeneratorId is true]: \"Invalid GeneratorId!\"", v203, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid GeneratorId!");
  }
  *(_QWORD *)v203 = a2;
  *(_QWORD *)&v203[8] = a3;
  v13 = (uint64_t *)(a1 + 248);
  v14 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 248), v203);
  if (v14)
  {
    v157 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v14) + 384));
    if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v203 = 136315650;
      *(_QWORD *)&v203[4] = "CvmSubmix.mm";
      *(_WORD *)&v203[12] = 1024;
      *(_DWORD *)&v203[14] = 650;
      *(_WORD *)&v203[18] = 2048;
      *(_QWORD *)&v203[20] = a2;
      _os_log_impl(&dword_2164CC000, v157, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (IdAlreadyExists) [GeneratorIsValid(inGeneratorId) is true]: \"GeneratorId %llu already exists!\"", v203, 0x1Cu);
    }
    v158 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(v158, "GeneratorId %llu already exists!");
  }
  v15 = *(_DWORD *)(a4 + 48);
  __x[0] = 0;
  std::vector<char>::vector((std::vector<char> *)v203, 0x20uLL, __x);
  v16 = *(_DWORD **)v203;
  *(_DWORD *)(*(_QWORD *)v203 + 4) = 0;
  v16[2] = 0;
  *v16 = v15;
  *(_QWORD *)(a4 + 56) = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 352))(a1, v203);
  v17 = *(Phase::Logger **)v203;
  if (*(_QWORD *)v203)
  {
    *(_QWORD *)&v203[8] = *(_QWORD *)v203;
    operator delete(*(void **)v203);
  }
  if (*(_BYTE *)(a4 + 8))
  {
    if (*(_BYTE *)(a4 + 8) != 1)
    {
      v161 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v17) + 384));
      if (os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
      {
        v162 = *(char *)(a4 + 8);
        *(_DWORD *)v203 = 136315650;
        *(_QWORD *)&v203[4] = "CvmSubmix.mm";
        *(_WORD *)&v203[12] = 1024;
        *(_DWORD *)&v203[14] = 878;
        *(_WORD *)&v203[18] = 1024;
        *(_DWORD *)&v203[20] = v162;
        _os_log_impl(&dword_2164CC000, v161, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Unhandled Generator Type: %hhd\"", v203, 0x18u);
      }
      v163 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](v163, "Unhandled Generator Type: %hhd");
    }
    v18 = (Phase::Logger *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4);
    v19 = v18;
    if (!v18)
    {
      v164 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
      if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v203 = 136315394;
        *(_QWORD *)&v203[4] = "CvmSubmix.mm";
        *(_WORD *)&v203[12] = 1024;
        *(_DWORD *)&v203[14] = 836;
        _os_log_impl(&dword_2164CC000, v164, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nullptr == pProcedurePrepareParameters is true]: \"Invalid GeneratorPrepareParameters for GeneratorType::Procedure!\"", v203, 0x12u);
      }
      v165 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v165, "Invalid GeneratorPrepareParameters for GeneratorType::Procedure!");
    }
    if (*((_BYTE *)v18 + 64) != 1)
    {
      if (!*((_BYTE *)v18 + 64))
      {
        v159 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v18) + 384));
        if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v203 = 136315394;
          *(_QWORD *)&v203[4] = "CvmSubmix.mm";
          *(_WORD *)&v203[12] = 1024;
          *(_DWORD *)&v203[14] = 842;
          _os_log_impl(&dword_2164CC000, v159, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Invalid Procedure Type: None\"", v203, 0x12u);
        }
        v160 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](v160, "Invalid Procedure Type: None");
      }
      v168 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v18) + 384));
      if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
      {
        v169 = *((char *)v19 + 64);
        *(_DWORD *)v203 = 136315650;
        *(_QWORD *)&v203[4] = "CvmSubmix.mm";
        *(_WORD *)&v203[12] = 1024;
        *(_DWORD *)&v203[14] = 867;
        *(_WORD *)&v203[18] = 1024;
        *(_DWORD *)&v203[20] = v169;
        _os_log_impl(&dword_2164CC000, v168, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Unhandled Procedure Type: %hhd\"", v203, 0x18u);
      }
      v170 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](v170, "Unhandled Procedure Type: %hhd");
    }
    v20 = (Phase::Controller::Generator *)operator new();
    Phase::Controller::WaterProcedure::WaterProcedure((uint64_t)v20, a2, a3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a4, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), a5);
    v21 = 0;
    v22 = 0xCBF29CE484222325;
    *(_OWORD *)v203 = v202;
    *(_QWORD *)__x = 0;
    *(_QWORD *)&v203[16] = v20;
    do
      v22 = 0x100000001B3 * (v22 ^ (char)v203[v21++]);
    while (v21 != 16);
    v23 = *(_QWORD *)(a1 + 256);
    if (v23)
    {
      v24 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.u32[0] > 1uLL)
      {
        v6 = v22;
        if (v22 >= v23)
          v6 = v22 % v23;
      }
      else
      {
        v6 = (v23 - 1) & v22;
      }
      v30 = *(_QWORD **)(*v13 + 8 * v6);
      if (v30)
      {
        for (i = (_QWORD *)*v30; i; i = (_QWORD *)*i)
        {
          v32 = i[1];
          if (v32 == v22)
          {
            if (i[2] == *(_QWORD *)v203 && i[3] == *(_QWORD *)&v203[8])
            {
              Phase::Controller::Generator::~Generator(v20);
              v151 = (Phase::Logger *)MEMORY[0x2199F9D70]();
              v152 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v151) + 384));
              if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v203 = 136315650;
                *(_QWORD *)&v203[4] = "CvmSubmix.mm";
                *(_WORD *)&v203[12] = 1024;
                *(_DWORD *)&v203[14] = 858;
                *(_WORD *)&v203[18] = 2048;
                *(_QWORD *)&v203[20] = a2;
                _os_log_impl(&dword_2164CC000, v152, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Tried to create more than one generator instance with the same generator id: %llu.\"", v203, 0x1Cu);
              }
              v154 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::invalid_argument::invalid_argument[abi:ne180100](v154, "Tried to create more than one generator instance with the same generator id: %llu.");
            }
          }
          else
          {
            if (v24.u32[0] > 1uLL)
            {
              if (v32 >= v23)
                v32 %= v23;
            }
            else
            {
              v32 &= v23 - 1;
            }
            if (v32 != v6)
              break;
          }
        }
      }
    }
    v34 = operator new(0x28uLL);
    *v34 = 0;
    v34[1] = v22;
    *((_OWORD *)v34 + 1) = v202;
    *(_QWORD *)&v203[16] = 0;
    v34[4] = v20;
    v35 = (float)(unint64_t)(*(_QWORD *)(a1 + 272) + 1);
    v36 = *(float *)(a1 + 280);
    if (!v23 || (float)(v36 * (float)v23) < v35)
    {
      v37 = 1;
      if (v23 >= 3)
        v37 = (v23 & (v23 - 1)) != 0;
      v38 = v37 | (2 * v23);
      v39 = vcvtps_u32_f32(v35 / v36);
      if (v38 <= v39)
        v40 = v39;
      else
        v40 = v38;
LABEL_46:
      std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v13, v40);
      v23 = *(_QWORD *)(a1 + 256);
      if ((v23 & (v23 - 1)) != 0)
      {
        if (v22 >= v23)
          v6 = v22 % v23;
        else
          v6 = v22;
      }
      else
      {
        v6 = (v23 - 1) & v22;
      }
      goto LABEL_180;
    }
    goto LABEL_180;
  }
  v25 = (Phase::Logger *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
  v26 = v25;
  if (!v25)
  {
    v166 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
    if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v203 = 136315394;
      *(_QWORD *)&v203[4] = "CvmSubmix.mm";
      *(_WORD *)&v203[12] = 1024;
      *(_DWORD *)&v203[14] = 669;
      _os_log_impl(&dword_2164CC000, v166, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nullptr == pSamplerPrepareParameters is true]: \"Invalid GeneratorPrepareParameters for GeneratorType::Sampler!\"", v203, 0x12u);
    }
    v167 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v167, "Invalid GeneratorPrepareParameters for GeneratorType::Sampler!");
  }
  switch(*((_BYTE *)v25 + 64))
  {
    case 0:
      v27 = (Phase::Controller::FileSampler *)operator new();
      Phase::Controller::FileSampler::FileSampler((uint64_t)v27, a2, a3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a4, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), a5, 0xCFE1F9A8E823B67BLL);
      v28 = 0;
      v22 = 0xCBF29CE484222325;
      *(_OWORD *)v203 = v202;
      *(_QWORD *)__x = 0;
      *(_QWORD *)&v203[16] = v27;
      do
        v22 = 0x100000001B3 * (v22 ^ (char)v203[v28++]);
      while (v28 != 16);
      v23 = *(_QWORD *)(a1 + 256);
      if (!v23)
        goto LABEL_104;
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.u32[0] > 1uLL)
      {
        v6 = v22;
        if (v22 >= v23)
          v6 = v22 % v23;
      }
      else
      {
        v6 = (v23 - 1) & v22;
      }
      v74 = *(_QWORD **)(*v13 + 8 * v6);
      if (!v74)
        goto LABEL_104;
      v75 = (_QWORD *)*v74;
      if (!v75)
        goto LABEL_104;
      while (2)
      {
        v76 = v75[1];
        if (v76 == v22)
        {
          if (v75[2] == *(_QWORD *)v203 && v75[3] == *(_QWORD *)&v203[8])
          {
            Phase::Controller::FileSampler::~FileSampler(v27);
            v171 = (Phase::Logger *)MEMORY[0x2199F9D70]();
            v172 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v171) + 384));
            if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v203 = 136315650;
              *(_QWORD *)&v203[4] = "CvmSubmix.mm";
              *(_WORD *)&v203[12] = 1024;
              *(_DWORD *)&v203[14] = 687;
              *(_WORD *)&v203[18] = 2048;
              *(_QWORD *)&v203[20] = a2;
              _os_log_impl(&dword_2164CC000, v172, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Tried to create more than one generator instance with the same generator id: %llu.\"", v203, 0x1Cu);
            }
            v174 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::invalid_argument::invalid_argument[abi:ne180100](v174, "Tried to create more than one generator instance with the same generator id: %llu.");
          }
        }
        else
        {
          if (v29.u32[0] > 1uLL)
          {
            if (v76 >= v23)
              v76 %= v23;
          }
          else
          {
            v76 &= v23 - 1;
          }
          if (v76 != v6)
          {
LABEL_104:
            v34 = operator new(0x28uLL);
            *v34 = 0;
            v34[1] = v22;
            *((_OWORD *)v34 + 1) = v202;
            *(_QWORD *)&v203[16] = 0;
            v34[4] = v27;
            v78 = (float)(unint64_t)(*(_QWORD *)(a1 + 272) + 1);
            v79 = *(float *)(a1 + 280);
            if (!v23 || (float)(v79 * (float)v23) < v78)
            {
              v80 = 1;
              if (v23 >= 3)
                v80 = (v23 & (v23 - 1)) != 0;
              v81 = v80 | (2 * v23);
              v82 = vcvtps_u32_f32(v78 / v79);
              if (v81 <= v82)
                v40 = v82;
              else
                v40 = v81;
              goto LABEL_46;
            }
LABEL_180:
            v108 = *v13;
            v109 = *(_QWORD **)(*v13 + 8 * v6);
            if (v109)
            {
LABEL_181:
              *v34 = *v109;
LABEL_188:
              *v109 = v34;
              goto LABEL_189;
            }
            *v34 = *(_QWORD *)(a1 + 264);
            *(_QWORD *)(a1 + 264) = v34;
            *(_QWORD *)(v108 + 8 * v6) = a1 + 264;
            if (!*v34)
            {
LABEL_189:
              ++*(_QWORD *)(a1 + 272);
              goto LABEL_190;
            }
            v110 = *(_QWORD *)(*v34 + 8);
            v111 = v23 - 1;
            if ((v23 & (v23 - 1)) != 0)
            {
              if (v110 >= v23)
                v110 %= v23;
              goto LABEL_187;
            }
LABEL_184:
            v110 &= v111;
LABEL_187:
            v109 = (_QWORD *)(*v13 + 8 * v110);
            goto LABEL_188;
          }
        }
        v75 = (_QWORD *)*v75;
        if (!v75)
          goto LABEL_104;
        continue;
      }
    case 1:
      v60 = (Phase::Controller::StreamSamplerBase *)operator new();
      Phase::Controller::StreamSamplerBase::StreamSamplerBase((uint64_t)v60, a2, a3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a4, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), a5, 0x15687F45806132E7);
      v61 = 0;
      v62 = 0xCBF29CE484222325;
      *(_QWORD *)v60 = &off_24D579D78;
      *(_OWORD *)v203 = v202;
      *(_QWORD *)__x = 0;
      *(_QWORD *)&v203[16] = v60;
      do
        v62 = 0x100000001B3 * (v62 ^ (char)v203[v61++]);
      while (v61 != 16);
      v63 = *(_QWORD *)(a1 + 256);
      if (!v63)
        goto LABEL_128;
      v64 = (uint8x8_t)vcnt_s8((int8x8_t)v63);
      v64.i16[0] = vaddlv_u8(v64);
      if (v64.u32[0] > 1uLL)
      {
        v6 = v62;
        if (v62 >= v63)
          v6 = v62 % v63;
      }
      else
      {
        v6 = (v63 - 1) & v62;
      }
      v83 = *(_QWORD **)(*v13 + 8 * v6);
      if (!v83)
        goto LABEL_128;
      v84 = (_QWORD *)*v83;
      if (!v84)
        goto LABEL_128;
      while (2)
      {
        v85 = v84[1];
        if (v85 == v62)
        {
          if (v84[2] == *(_QWORD *)v203 && v84[3] == *(_QWORD *)&v203[8])
          {
            Phase::Controller::StreamSamplerBase::~StreamSamplerBase(v60);
            v175 = (Phase::Logger *)MEMORY[0x2199F9D70]();
            v176 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v175) + 384));
            if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v203 = 136315650;
              *(_QWORD *)&v203[4] = "CvmSubmix.mm";
              *(_WORD *)&v203[12] = 1024;
              *(_DWORD *)&v203[14] = 707;
              *(_WORD *)&v203[18] = 2048;
              *(_QWORD *)&v203[20] = a2;
              _os_log_impl(&dword_2164CC000, v176, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Tried to create more than one generator instance with the same generator id: %llu.\"", v203, 0x1Cu);
            }
            v178 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::invalid_argument::invalid_argument[abi:ne180100](v178, "Tried to create more than one generator instance with the same generator id: %llu.");
          }
        }
        else
        {
          if (v64.u32[0] > 1uLL)
          {
            if (v85 >= v63)
              v85 %= v63;
          }
          else
          {
            v85 &= v63 - 1;
          }
          if (v85 != v6)
          {
LABEL_128:
            v34 = operator new(0x28uLL);
            *v34 = 0;
            v34[1] = v62;
            *((_OWORD *)v34 + 1) = v202;
            *(_QWORD *)&v203[16] = 0;
            v34[4] = v60;
            v87 = (float)(unint64_t)(*(_QWORD *)(a1 + 272) + 1);
            v88 = *(float *)(a1 + 280);
            if (!v63 || (float)(v88 * (float)v63) < v87)
            {
              v89 = 1;
              if (v63 >= 3)
                v89 = (v63 & (v63 - 1)) != 0;
              v90 = v89 | (2 * v63);
              v91 = vcvtps_u32_f32(v87 / v88);
              if (v90 <= v91)
                v92 = v91;
              else
                v92 = v90;
              std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v13, v92);
              v63 = *(_QWORD *)(a1 + 256);
              if ((v63 & (v63 - 1)) != 0)
              {
                if (v62 >= v63)
                  v6 = v62 % v63;
                else
                  v6 = v62;
              }
              else
              {
                v6 = (v63 - 1) & v62;
              }
            }
            v141 = *v13;
            v109 = *(_QWORD **)(*v13 + 8 * v6);
            if (v109)
              goto LABEL_181;
            *v34 = *(_QWORD *)(a1 + 264);
            *(_QWORD *)(a1 + 264) = v34;
            *(_QWORD *)(v141 + 8 * v6) = a1 + 264;
            if (!*v34)
              goto LABEL_189;
            v110 = *(_QWORD *)(*v34 + 8);
            v111 = v63 - 1;
            if ((v63 & (v63 - 1)) != 0)
            {
              if (v110 >= v63)
                v110 %= v63;
              goto LABEL_187;
            }
            goto LABEL_184;
          }
        }
        v84 = (_QWORD *)*v84;
        if (!v84)
          goto LABEL_128;
        continue;
      }
    case 2:
      v44 = (Phase::Controller::StreamSamplerBase *)operator new();
      v45 = *(_QWORD *)(a1 + 16);
      Phase::Controller::StreamSamplerBase::StreamSamplerBase((uint64_t)v44, a2, a3, v45, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a4, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), a5, 0x15687F45806132E7);
      *(_QWORD *)v44 = &off_24D5784A8;
      v46 = (Phase::Logger *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
      v47 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v46) + 384));
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        v48 = *((_QWORD *)v46 + 11);
        *(_DWORD *)v203 = 136316418;
        *(_QWORD *)&v203[4] = "CvmFileStreamSampler.h";
        *(_WORD *)&v203[12] = 1024;
        *(_DWORD *)&v203[14] = 51;
        *(_WORD *)&v203[18] = 2048;
        *(_QWORD *)&v203[20] = v44;
        *(_WORD *)&v203[28] = 2048;
        v204 = a2;
        v205 = 2048;
        v206 = (Phase::Logger *)v45;
        v207 = 2048;
        v208 = v48;
        _os_log_impl(&dword_2164CC000, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: create file stream sampler with generatorId %llu on submixId %llu with assetId: (%llu)", v203, 0x3Au);
      }
      v49 = 0;
      v22 = 0xCBF29CE484222325;
      *(_OWORD *)__x = v202;
      v199 = 0;
      v201 = (uint64_t)v44;
      do
        v22 = 0x100000001B3 * (v22 ^ __x[v49++]);
      while (v49 != 16);
      v23 = *(_QWORD *)(a1 + 256);
      if (!v23)
        goto LABEL_178;
      v50 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
      v50.i16[0] = vaddlv_u8(v50);
      if (v50.u32[0] > 1uLL)
      {
        v6 = v22;
        if (v22 >= v23)
          v6 = v22 % v23;
      }
      else
      {
        v6 = (v23 - 1) & v22;
      }
      v102 = *(_QWORD **)(*v13 + 8 * v6);
      if (!v102)
        goto LABEL_178;
      v103 = (_QWORD *)*v102;
      if (!v103)
        goto LABEL_178;
      while (2)
      {
        v104 = v103[1];
        if (v104 == v22)
        {
          if (v103[2] == *(_QWORD *)__x && v103[3] == *(_QWORD *)&__x[8])
          {
            Phase::Controller::StreamSamplerBase::~StreamSamplerBase(v44);
            v183 = (Phase::Logger *)MEMORY[0x2199F9D70]();
            v184 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v183) + 384));
            if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v203 = 136315650;
              *(_QWORD *)&v203[4] = "CvmSubmix.mm";
              *(_WORD *)&v203[12] = 1024;
              *(_DWORD *)&v203[14] = 727;
              *(_WORD *)&v203[18] = 2048;
              *(_QWORD *)&v203[20] = a2;
              _os_log_impl(&dword_2164CC000, v184, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Tried to create more than one generator instance with the same generator id: %llu.\"", v203, 0x1Cu);
            }
            v186 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::invalid_argument::invalid_argument[abi:ne180100](v186, "Tried to create more than one generator instance with the same generator id: %llu.");
          }
        }
        else
        {
          if (v50.u32[0] > 1uLL)
          {
            if (v104 >= v23)
              v104 %= v23;
          }
          else
          {
            v104 &= v23 - 1;
          }
          if (v104 != v6)
          {
LABEL_178:
            v34 = operator new(0x28uLL);
            *v34 = 0;
            v34[1] = v22;
            *((_OWORD *)v34 + 1) = v202;
            v201 = 0;
            v34[4] = v44;
            v106 = (float)(unint64_t)(*(_QWORD *)(a1 + 272) + 1);
            v107 = *(float *)(a1 + 280);
            if (!v23 || (float)(v107 * (float)v23) < v106)
            {
              v127 = 1;
              if (v23 >= 3)
                v127 = (v23 & (v23 - 1)) != 0;
              v128 = v127 | (2 * v23);
              v129 = vcvtps_u32_f32(v106 / v107);
              if (v128 <= v129)
                v40 = v129;
              else
                v40 = v128;
              goto LABEL_46;
            }
            goto LABEL_180;
          }
        }
        v103 = (_QWORD *)*v103;
        if (!v103)
          goto LABEL_178;
        continue;
      }
    case 3:
      Phase::Controller::TaskManager::GetObjCService<ExternalStreamManager>(*(Phase::Logger **)(a1 + 216), 15);
      v51 = objc_claimAutoreleasedReturnValue();
      v196 = (void *)v51;
      v52 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", (char *)v26 + 136);
      v198 = 0;
      v53 = objc_msgSend((id)v51, "sessionIdForStream:error:", v52, &v198);
      v54 = (Phase::Logger *)v198;
      v55 = v54;
      if (v54)
      {
        v189 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v54) + 384));
        if (os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v203 = 136315906;
          *(_QWORD *)&v203[4] = "CvmSubmix.mm";
          *(_WORD *)&v203[12] = 1024;
          *(_DWORD *)&v203[14] = 745;
          *(_WORD *)&v203[18] = 2112;
          *(_QWORD *)&v203[20] = v52;
          *(_WORD *)&v203[28] = 2112;
          v204 = (uint64_t)v55;
          _os_log_impl(&dword_2164CC000, v189, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Could not get Audio Session Id for stream uuid %@ (%@)\"", v203, 0x26u);
        }
        v190 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v190, "Could not get Audio Session Id for stream uuid %@ (%@)");
        v190->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      }
      v56 = (Phase::Logger *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
      if ((v56 & 1) != 0)
      {
        if (*(_DWORD *)(a1 + 48) != v53)
        {
          v57 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v56) + 384));
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            v58 = *(_DWORD *)(a1 + 48);
            *(_DWORD *)v203 = 136315906;
            *(_QWORD *)&v203[4] = "CvmSubmix.mm";
            *(_WORD *)&v203[12] = 1024;
            *(_DWORD *)&v203[14] = 761;
            *(_WORD *)&v203[18] = 1024;
            *(_DWORD *)&v203[20] = v58;
            *(_WORD *)&v203[24] = 1024;
            *(_DWORD *)&v203[26] = v53;
            _os_log_impl(&dword_2164CC000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Audio Session Id mismatch. Existing submix belongs to \" \"session 0x%x and new ouput stream generator belongs to session 0x%x\"", v203, 0x1Eu);
          }
          v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v59, "Audio Session Id mismatch. Existing submix belongs to session 0x%x and new ouput stream generator belongs to session 0x%x");
          v59->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        }
      }
      else
      {
        *(_DWORD *)(a1 + 48) = v53;
      }
      v65 = operator new();
      v66 = *(Phase::Logger **)(a1 + 216);
      Phase::Controller::StreamSamplerBase::StreamSamplerBase(v65, a2, a3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a4, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), (uint64_t)v66, *(_QWORD *)(a1 + 224), a5, 0xE8CBC3A55AEFC3DALL);
      *(_QWORD *)v65 = &off_24D578388;
      *(_WORD *)(v65 + 592) = 257;
      *(_OWORD *)(v65 + 600) = 0u;
      *(_OWORD *)(v65 + 616) = 0u;
      v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
      if (!v67)
      {
        v191 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
        if (os_log_type_enabled(v191, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v203 = 136315650;
          *(_QWORD *)&v203[4] = "CvmExternalOutputPullStreamSampler.h";
          *(_WORD *)&v203[12] = 1024;
          *(_DWORD *)&v203[14] = 50;
          *(_WORD *)&v203[18] = 2048;
          *(_QWORD *)&v203[20] = a2;
          _os_log_impl(&dword_2164CC000, v191, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [samplerParameters == nullptr is true]: \"prepare parameters are unexpected type for generatorId %llu.\"", v203, 0x1Cu);
        }
        v192 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v192, "prepare parameters are unexpected type for generatorId %llu.");
      }
      Phase::Controller::TaskManager::GetObjCService<ExternalStreamManager>(v66, 15);
      v68 = objc_claimAutoreleasedReturnValue();
      v69 = *(void **)(v65 + 600);
      *(_QWORD *)(v65 + 600) = v68;

      v70 = 0;
      v71 = 0xCBF29CE484222325;
      *(_OWORD *)(v65 + 608) = *(_OWORD *)(v67 + 136);
      *(_QWORD *)(v65 + 624) = *(_QWORD *)(v67 + 72);
      *(_OWORD *)__x = v202;
      v201 = v65;
      do
        v71 = 0x100000001B3 * (v71 ^ __x[v70++]);
      while (v70 != 16);
      v72 = *(_QWORD *)(a1 + 256);
      if (!v72)
        goto LABEL_247;
      v73 = (uint8x8_t)vcnt_s8((int8x8_t)v72);
      v73.i16[0] = vaddlv_u8(v73);
      if (v73.u32[0] > 1uLL)
      {
        v51 = v71;
        if (v71 >= v72)
          v51 = v71 % v72;
      }
      else
      {
        v51 = (v72 - 1) & v71;
      }
      v130 = *(_QWORD **)(*v13 + 8 * v51);
      if (!v130)
        goto LABEL_247;
      v131 = (_QWORD *)*v130;
      if (!v131)
        goto LABEL_247;
      while (2)
      {
        v132 = v131[1];
        if (v132 == v71)
        {
          if (v131[2] == *(_QWORD *)__x && v131[3] == *(_QWORD *)&__x[8])
            std::default_delete<Phase::Controller::ExternalOutputPullStreamSampler>::operator()[abi:ne180100]((id *)v65);
          goto LABEL_246;
        }
        if (v73.u32[0] > 1uLL)
        {
          if (v132 >= v72)
            v132 %= v72;
        }
        else
        {
          v132 &= v72 - 1;
        }
        if (v132 == v51)
        {
LABEL_246:
          v131 = (_QWORD *)*v131;
          if (!v131)
            break;
          continue;
        }
        break;
      }
LABEL_247:
      v134 = operator new(0x28uLL);
      *(_QWORD *)v134 = 0;
      *((_QWORD *)v134 + 1) = v71;
      *((_OWORD *)v134 + 1) = v202;
      *((_QWORD *)v134 + 4) = v65;
      v135 = (float)(unint64_t)(*(_QWORD *)(a1 + 272) + 1);
      v136 = *(float *)(a1 + 280);
      if (!v72 || (float)(v136 * (float)v72) < v135)
      {
        v137 = 1;
        if (v72 >= 3)
          v137 = (v72 & (v72 - 1)) != 0;
        v138 = v137 | (2 * v72);
        v139 = vcvtps_u32_f32(v135 / v136);
        if (v138 <= v139)
          v140 = v139;
        else
          v140 = v138;
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v13, v140);
        v72 = *(_QWORD *)(a1 + 256);
        if ((v72 & (v72 - 1)) != 0)
        {
          if (v71 >= v72)
            v51 = v71 % v72;
          else
            v51 = v71;
        }
        else
        {
          v51 = (v72 - 1) & v71;
        }
      }
      v142 = *v13;
      v143 = *(_QWORD **)(*v13 + 8 * v51);
      if (v143)
      {
        *(_QWORD *)v134 = *v143;
        v144 = v196;
      }
      else
      {
        *(_QWORD *)v134 = *(_QWORD *)(a1 + 264);
        *(_QWORD *)(a1 + 264) = v134;
        *(_QWORD *)(v142 + 8 * v51) = a1 + 264;
        v144 = v196;
        if (!*(_QWORD *)v134)
          goto LABEL_276;
        v145 = *(_QWORD *)(*(_QWORD *)v134 + 8);
        if ((v72 & (v72 - 1)) != 0)
        {
          if (v145 >= v72)
            v145 %= v72;
        }
        else
        {
          v145 &= v72 - 1;
        }
        v143 = (_QWORD *)(*v13 + 8 * v145);
      }
      *v143 = v134;
LABEL_276:
      ++*(_QWORD *)(a1 + 272);
      v146 = (Phase::Controller::ExternalOutputPullStreamSampler *)*((_QWORD *)v134 + 4);
      v197 = 0;
      v147 = objc_msgSend(v144, "streamIsPaused:error:", v52, &v197);
      v148 = (Phase::Logger *)v197;
      v149 = v148;
      if (v148)
      {
        v150 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v148) + 384));
        if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v203 = 136316162;
          *(_QWORD *)&v203[4] = "CvmSubmix.mm";
          *(_WORD *)&v203[12] = 1024;
          *(_DWORD *)&v203[14] = 788;
          *(_WORD *)&v203[18] = 2048;
          *(_QWORD *)&v203[20] = a1;
          *(_WORD *)&v203[28] = 2112;
          v204 = (uint64_t)v52;
          v205 = 2112;
          v206 = v149;
          _os_log_impl(&dword_2164CC000, v150, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: failed to query pull stream %@ pause state: %@", v203, 0x30u);
        }
      }
      else if (v147)
      {
        Phase::Controller::ExternalOutputPullStreamSampler::PauseStream((uint64_t)v146);
      }
      else
      {
        Phase::Controller::ExternalOutputPullStreamSampler::ResumeStream(v146);
      }

LABEL_190:
      Generator = (Phase::Controller::Generator *)Phase::Controller::Submix::GetGenerator(a1, a2, a3);
      Phase::Controller::Generator::Prepare(Generator, a6);
      v113 = *((_DWORD *)Generator + 94);
      if (v113 != 4)
      {
        if (*(_QWORD *)(a1 + 272) == 1)
          Phase::Controller::SessionManager::SetSessionPlayState(*(void ***)(a1 + 312), *(unsigned int *)(a1 + 48), a1, 2u, 3, 0, 0);
        return v113 != 4;
      }
      v114 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v13, &v202);
      if (!v114)
        return v113 != 4;
      v115 = v114;
      v116 = *(int8x8_t *)(a1 + 256);
      v117 = *v114;
      v118 = v114[1];
      v119 = (uint8x8_t)vcnt_s8(v116);
      v119.i16[0] = vaddlv_u8(v119);
      if (v119.u32[0] > 1uLL)
      {
        if (v118 >= *(_QWORD *)&v116)
          v118 %= *(_QWORD *)&v116;
      }
      else
      {
        v118 &= *(_QWORD *)&v116 - 1;
      }
      v120 = *(_QWORD **)(*v13 + 8 * v118);
      do
      {
        v121 = v120;
        v120 = (_QWORD *)*v120;
      }
      while (v120 != v114);
      if (v121 == (_QWORD *)(a1 + 264))
        goto LABEL_211;
      v122 = v121[1];
      if (v119.u32[0] > 1uLL)
      {
        if (v122 >= *(_QWORD *)&v116)
          v122 %= *(_QWORD *)&v116;
      }
      else
      {
        v122 &= *(_QWORD *)&v116 - 1;
      }
      if (v122 != v118)
      {
LABEL_211:
        if (v117)
        {
          v123 = *(_QWORD *)(v117 + 8);
          if (v119.u32[0] > 1uLL)
          {
            v124 = *(_QWORD *)(v117 + 8);
            if (v123 >= *(_QWORD *)&v116)
              v124 = v123 % *(_QWORD *)&v116;
          }
          else
          {
            v124 = v123 & (*(_QWORD *)&v116 - 1);
          }
          if (v124 == v118)
            goto LABEL_215;
        }
        *(_QWORD *)(*v13 + 8 * v118) = 0;
        v117 = *v114;
      }
      if (v117)
      {
        v123 = *(_QWORD *)(v117 + 8);
LABEL_215:
        if (v119.u32[0] > 1uLL)
        {
          if (v123 >= *(_QWORD *)&v116)
            v123 %= *(_QWORD *)&v116;
        }
        else
        {
          v123 &= *(_QWORD *)&v116 - 1;
        }
        if (v123 != v118)
        {
          *(_QWORD *)(*v13 + 8 * v123) = v121;
          v117 = *v114;
        }
      }
      *v121 = v117;
      *v114 = 0;
      --*(_QWORD *)(a1 + 272);
      v125 = v114[4];
      v115[4] = 0;
      if (v125)
        (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
      operator delete(v115);
      return v113 != 4;
    case 4:
      v41 = (Phase::Controller::StreamSamplerBase *)operator new();
      Phase::Controller::StreamSamplerBase::StreamSamplerBase((uint64_t)v41, a2, a3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a4, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), a5, 0xE8CBC3A55AEFC3DALL);
      *(_QWORD *)v41 = &off_24D578878;
      if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4))
      {
        v187 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
        if (os_log_type_enabled(v187, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v203 = 136315650;
          *(_QWORD *)&v203[4] = "CvmPullStreamSampler.h";
          *(_WORD *)&v203[12] = 1024;
          *(_DWORD *)&v203[14] = 50;
          *(_WORD *)&v203[18] = 2048;
          *(_QWORD *)&v203[20] = a2;
          _os_log_impl(&dword_2164CC000, v187, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [samplerParameters == nullptr is true]: \"prepare parameters are unexpected type for generatorId %llu.\"", v203, 0x1Cu);
        }
        v188 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v188, "prepare parameters are unexpected type for generatorId %llu.");
      }
      v42 = 0;
      v22 = 0xCBF29CE484222325;
      *(_OWORD *)__x = v202;
      v199 = 0;
      v201 = (uint64_t)v41;
      do
        v22 = 0x100000001B3 * (v22 ^ __x[v42++]);
      while (v42 != 16);
      v23 = *(_QWORD *)(a1 + 256);
      if (!v23)
        goto LABEL_154;
      v43 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
      v43.i16[0] = vaddlv_u8(v43);
      if (v43.u32[0] > 1uLL)
      {
        v6 = v22;
        if (v22 >= v23)
          v6 = v22 % v23;
      }
      else
      {
        v6 = (v23 - 1) & v22;
      }
      v93 = *(_QWORD **)(*v13 + 8 * v6);
      if (!v93)
        goto LABEL_154;
      v94 = (_QWORD *)*v93;
      if (!v94)
        goto LABEL_154;
      while (2)
      {
        v95 = v94[1];
        if (v95 == v22)
        {
          if (v94[2] == *(_QWORD *)__x && v94[3] == *(_QWORD *)&__x[8])
          {
            Phase::Controller::StreamSamplerBase::~StreamSamplerBase(v41);
            v179 = (Phase::Logger *)MEMORY[0x2199F9D70]();
            v180 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v179) + 384));
            if (os_log_type_enabled(v180, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v203 = 136315650;
              *(_QWORD *)&v203[4] = "CvmSubmix.mm";
              *(_WORD *)&v203[12] = 1024;
              *(_DWORD *)&v203[14] = 816;
              *(_WORD *)&v203[18] = 2048;
              *(_QWORD *)&v203[20] = a2;
              _os_log_impl(&dword_2164CC000, v180, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Tried to create more than one generator instance with the same generatorId: %llu.\"", v203, 0x1Cu);
            }
            v182 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::invalid_argument::invalid_argument[abi:ne180100](v182, "Tried to create more than one generator instance with the same generatorId: %llu.");
          }
        }
        else
        {
          if (v43.u32[0] > 1uLL)
          {
            if (v95 >= v23)
              v95 %= v23;
          }
          else
          {
            v95 &= v23 - 1;
          }
          if (v95 != v6)
          {
LABEL_154:
            v34 = operator new(0x28uLL);
            *v34 = 0;
            v34[1] = v22;
            *((_OWORD *)v34 + 1) = v202;
            v201 = 0;
            v34[4] = v41;
            v97 = (float)(unint64_t)(*(_QWORD *)(a1 + 272) + 1);
            v98 = *(float *)(a1 + 280);
            if (!v23 || (float)(v98 * (float)v23) < v97)
            {
              v99 = 1;
              if (v23 >= 3)
                v99 = (v23 & (v23 - 1)) != 0;
              v100 = v99 | (2 * v23);
              v101 = vcvtps_u32_f32(v97 / v98);
              if (v100 <= v101)
                v40 = v101;
              else
                v40 = v100;
              goto LABEL_46;
            }
            goto LABEL_180;
          }
        }
        v94 = (_QWORD *)*v94;
        if (!v94)
          goto LABEL_154;
        continue;
      }
    default:
      v193 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v25) + 384));
      if (os_log_type_enabled(v193, OS_LOG_TYPE_ERROR))
      {
        v194 = *((char *)v26 + 64);
        *(_DWORD *)v203 = 136315650;
        *(_QWORD *)&v203[4] = "CvmSubmix.mm";
        *(_WORD *)&v203[12] = 1024;
        *(_DWORD *)&v203[14] = 824;
        *(_WORD *)&v203[18] = 1024;
        *(_DWORD *)&v203[20] = v194;
        _os_log_impl(&dword_2164CC000, v193, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Unhandled Sampler Type: %hhd\"", v203, 0x18u);
      }
      v195 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](v195, "Unhandled Sampler Type: %hhd");
  }
}

void sub_216545D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  void *v31;
  void *v32;
  id *v33;

  __cxa_free_exception(v31);

  Phase::Controller::StreamSamplerBase::~StreamSamplerBase((Phase::Controller::StreamSamplerBase *)v33);
  MEMORY[0x2199F9D70](v33, 0x10F3C40B3264B8BLL);

  _Unwind_Resume(a1);
}

void Phase::Controller::Submix::SetSessionPlayState(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4)
{
  unint64_t AudioSessionVolume;
  int v9;
  uint64_t v10;
  uint64_t InstancePtr;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const char *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BOOL8 v21;
  NSObject *v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *i;
  _DWORD *v28;
  int v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  std::runtime_error *exception;
  uint64_t v35;
  uint64_t v36;
  int v37;
  std::runtime_error *v38;
  int32x2_t v39;
  unint64_t v40;
  int v41;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  _BYTE v51[10];
  int v52;
  __int16 v53;
  const char *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  if ((a2 - 2) < 2 || (_DWORD)a2 == 0)
  {
    Phase::Controller::SessionManager::SetSessionPlayState(*(void ***)(a1 + 312), *(unsigned int *)(a1 + 48), a1, 2u, a2, a3, 0);
  }
  else
  {
    if ((_DWORD)a2 != 1)
    {
      v29 = a2;
      v30 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 384));
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        v31 = *(_QWORD *)(a1 + 32);
        v32 = *(_QWORD *)(a1 + 16);
        v33 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)buf = 136316418;
        v43 = "CvmSubmix.mm";
        v44 = 1024;
        v45 = 1643;
        v46 = 2048;
        v47 = v31;
        v48 = 2048;
        v49 = v32;
        v50 = 1024;
        *(_DWORD *)v51 = v29;
        *(_WORD *)&v51[4] = 1024;
        *(_DWORD *)&v51[6] = v33;
        _os_log_impl(&dword_2164CC000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"(sound event: %llu, submix: %llu:) Invalid session playstate %d on session 0x%x\"", buf, 0x32u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "(sound event: %llu, submix: %llu:) Invalid session playstate %d on session 0x%x");
    }
    AudioSessionVolume = Phase::Controller::SessionManager::GetAudioSessionVolume(*(Phase::Controller::SessionManager **)(a1 + 312), *(unsigned int *)(a1 + 48), a3);
    v40 = AudioSessionVolume;
    v41 = v9;
    v10 = v9;
    InstancePtr = Phase::Logger::GetInstancePtr((Phase::Logger *)AudioSessionVolume);
    if (v10)
    {
      if (*(_BYTE *)(InstancePtr + 1552))
      {
        v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)InstancePtr)
                                                         + 384));
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          v13 = *(_QWORD *)(a1 + 16);
          v14 = *(_QWORD *)(a1 + 32);
          v15 = *(_DWORD *)(a1 + 48);
          v16 = "YES";
          *(_DWORD *)buf = 136316674;
          if ((AudioSessionVolume & 0xFF00000000) == 0)
            v16 = "NO";
          v43 = "CvmSubmix.mm";
          v44 = 1024;
          v45 = 1567;
          v46 = 2048;
          v47 = v14;
          v48 = 2048;
          v49 = v13;
          v50 = 2048;
          *(double *)v51 = *(float *)&AudioSessionVolume;
          *(_WORD *)&v51[8] = 1024;
          v52 = v15;
          v53 = 2080;
          v54 = v16;
          _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu:) - applying start volume %.3f on session 0x%x - muted: %s", buf, 0x40u);
        }
      }
      (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)a1 + 232))(a1, &v40, a3);
    }
    else
    {
      v17 = objc_retainAutorelease(**(id **)(InstancePtr + 384));
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v18 = *(_QWORD *)(a1 + 32);
        v19 = *(_QWORD *)(a1 + 16);
        v20 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)buf = 136316162;
        v43 = "CvmSubmix.mm";
        v44 = 1024;
        v45 = 1576;
        v46 = 2048;
        v47 = v18;
        v48 = 2048;
        v49 = v19;
        v50 = 1024;
        *(_DWORD *)v51 = v20;
        _os_log_impl(&dword_2164CC000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d (sound event: %llu, submix: %llu:) - did not get/apply start volume on session 0x%x", buf, 0x2Cu);
      }
    }
    v39 = (int32x2_t)1065353216;
    v21 = Phase::Controller::SessionManager::SetSessionPlayState(*(void ***)(a1 + 312), *(unsigned int *)(a1 + 48), a1, 2u, 1, a3, &v39);
    if (v21)
    {
      if ((a3 & 1) != 0)
      {
        if (a4)
          *a4 = v39;
      }
      else
      {
        for (i = *(_QWORD **)(a1 + 264); i; i = (_QWORD *)*i)
        {
          v28 = (_DWORD *)i[4];
          if (v28[97] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 32))(v28);
        }
        (*(void (**)(uint64_t, float, float))(*(_QWORD *)a1 + 224))(a1, *(float *)v39.i32, *(float *)&v39.i32[1]);
      }
    }
    else
    {
      v22 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v21) + 384));
      v23 = os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
      if ((a3 & 1) == 0)
      {
        if (v23)
        {
          v35 = *(_QWORD *)(a1 + 32);
          v36 = *(_QWORD *)(a1 + 16);
          v37 = *(_DWORD *)(a1 + 48);
          *(_DWORD *)buf = 136316418;
          v43 = "CvmSubmix.mm";
          v44 = 1024;
          v45 = 1611;
          v46 = 2048;
          v47 = v35;
          v48 = 2048;
          v49 = v36;
          v50 = 1024;
          *(_DWORD *)v51 = 1;
          *(_WORD *)&v51[4] = 1024;
          *(_DWORD *)&v51[6] = v37;
          _os_log_impl(&dword_2164CC000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"(sound event: %llu, submix: %llu:) - unable to set session playstate %d on session 0x%x\"", buf, 0x32u);
        }
        v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v38, "(sound event: %llu, submix: %llu:) - unable to set session playstate %d on session 0x%x");
      }
      if (v23)
      {
        v24 = *(_QWORD *)(a1 + 32);
        v25 = *(_QWORD *)(a1 + 16);
        v26 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)buf = 136316418;
        v43 = "CvmSubmix.mm";
        v44 = 1024;
        v45 = 1617;
        v46 = 2048;
        v47 = v24;
        v48 = 2048;
        v49 = v25;
        v50 = 1024;
        *(_DWORD *)v51 = 1;
        *(_WORD *)&v51[4] = 1024;
        *(_DWORD *)&v51[6] = v26;
        _os_log_impl(&dword_2164CC000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d (sound event: %llu, submix: %llu:) - unable to set session playstate %d on session 0x%x", buf, 0x32u);
      }
    }
  }
}

void sub_216546590(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::Submix::PlayGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Generator;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1)
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1))
  {
    Phase::Controller::Submix::SetSessionPlayState(a1, 1, 0, 0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, 3);
  }
  Generator = Phase::Controller::Submix::GetGenerator(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)Generator + 16))(Generator);
}

uint64_t Phase::Controller::Submix::PauseGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Generator;
  uint64_t result;

  Generator = Phase::Controller::Submix::GetGenerator(a1, a2, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)Generator + 24))(Generator);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  if ((_DWORD)result)
  {
    Phase::Controller::SessionManager::SetSessionPlayState(*(void ***)(a1 + 312), *(unsigned int *)(a1 + 48), a1, 2u, 2, 0, 0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, 2);
  }
  return result;
}

uint64_t Phase::Controller::Submix::ResumeGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Generator;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1)
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1))
  {
    Phase::Controller::Submix::SetSessionPlayState(a1, 1, 0, 0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, 3);
  }
  Generator = Phase::Controller::Submix::GetGenerator(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)Generator + 32))(Generator);
}

uint64_t Phase::Controller::Submix::PauseExternalStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  NSObject *v8;
  void *v9;
  std::logic_error *exception;
  NSObject *v11;
  std::logic_error *v12;
  NSObject *v13;
  void *v14;
  std::logic_error *v15;
  _QWORD v16[2];
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v16[0] = a2;
  v16[1] = a3;
  v4 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 248), v16);
  if (!v4)
  {
    v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                       + 384)));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      Phase::UniqueObjectId::CreateNSUUID((Phase::UniqueObjectId *)v16);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136315650;
      v18 = "CvmSubmix.mm";
      v19 = 1024;
      v20 = 950;
      v21 = 2112;
      v22 = v9;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [it == mGenerators.end() is true]: \"External stream %@ does not exist!\"", buf, 0x1Cu);

    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "External stream %@ does not exist!");
  }
  v5 = v4[4];
  if (!v5)
  {
    v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v18 = "CvmSubmix.mm";
      v19 = 1024;
      v20 = 953;
      _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", buf, 0x12u);
    }
    v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "PRECONDITION: pGenerator != nullptr is false.");
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
  if (!v6)
  {
    v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                        + 384)));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      Phase::UniqueObjectId::CreateNSUUID((Phase::UniqueObjectId *)v16);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136315650;
      v18 = "CvmSubmix.mm";
      v19 = 1024;
      v20 = 957;
      v21 = 2112;
      v22 = v14;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [pExternalStreamNode == nullptr is true]: \"External stream %@ node is wrong type!\"", buf, 0x1Cu);

    }
    v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v15, "External stream %@ node is wrong type!");
  }
  Phase::Controller::ExternalOutputPullStreamSampler::PauseStream(v6);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  if ((_DWORD)result)
    return Phase::Controller::SessionManager::SetSessionPlayState(*(void ***)(a1 + 312), *(unsigned int *)(a1 + 48), a1, 2u, 2, 0, 0);
  return result;
}

void sub_216546A5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::Submix::ResumeExternalStream(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  Phase::Controller::ExternalOutputPullStreamSampler *v7;
  NSObject *v8;
  void *v9;
  std::logic_error *exception;
  NSObject *v11;
  std::logic_error *v12;
  NSObject *v13;
  void *v14;
  std::logic_error *v15;
  _QWORD v16[2];
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v16[0] = a2;
  v16[1] = a3;
  v4 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1 + 31, v16);
  if (!v4)
  {
    v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                       + 384)));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      Phase::UniqueObjectId::CreateNSUUID((Phase::UniqueObjectId *)v16);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136315650;
      v18 = "CvmSubmix.mm";
      v19 = 1024;
      v20 = 972;
      v21 = 2112;
      v22 = v9;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [it == mGenerators.end() is true]: \"External stream %@ does not exist!\"", buf, 0x1Cu);

    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "External stream %@ does not exist!");
  }
  v5 = v4[4];
  if (!v5)
  {
    v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v18 = "CvmSubmix.mm";
      v19 = 1024;
      v20 = 975;
      _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", buf, 0x12u);
    }
    v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "PRECONDITION: pGenerator != nullptr is false.");
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
  if (!v6)
  {
    v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                        + 384)));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      Phase::UniqueObjectId::CreateNSUUID((Phase::UniqueObjectId *)v16);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136315650;
      v18 = "CvmSubmix.mm";
      v19 = 1024;
      v20 = 979;
      v21 = 2112;
      v22 = v14;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [pExternalStreamNode == nullptr is true]: \"External stream %@ node is wrong type!\"", buf, 0x1Cu);

    }
    v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v15, "External stream %@ node is wrong type!");
  }
  v7 = (Phase::Controller::ExternalOutputPullStreamSampler *)v6;
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 128))(a1)
    || (*(unsigned int (**)(_QWORD *))(*a1 + 136))(a1))
  {
    Phase::Controller::Submix::SetSessionPlayState((uint64_t)a1, 1, 0, 0);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 280))(a1, 3);
  }
  Phase::Controller::ExternalOutputPullStreamSampler::ResumeStream(v7);
}

void sub_216546DA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::Submix::SleepGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Generator;

  Generator = Phase::Controller::Submix::GetGenerator(a1, a2, a3);
  if ((*(_DWORD *)(Generator + 376) - 3) >= 2)
  {
    *(_BYTE *)(Generator + 504) = 1;
    Phase::Controller::Generator::Sleep_Internal((Phase::Controller::Generator *)Generator);
  }
}

void Phase::Controller::Submix::WakeGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Generator;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1)
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1))
  {
    Phase::Controller::Submix::SetSessionPlayState(a1, 1, 0, 0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, 3);
  }
  Generator = Phase::Controller::Submix::GetGenerator(a1, a2, a3);
  if ((*(_DWORD *)(Generator + 376) - 3) >= 2)
  {
    *(_BYTE *)(Generator + 504) = 0;
    Phase::Controller::Generator::Wake_Internal((Phase::Controller::Generator *)Generator);
  }
}

void Phase::Controller::Submix::SetPlayState(uint64_t a1, int a2)
{
  BOOL v2;
  Phase::Logger *v3;
  int v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 72))
    v2 = *(_BYTE *)(a1 + 72) == 7;
  else
    v2 = 1;
  if (!v2)
  {
    v3 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::SetSubmixPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**(_QWORD **)(a1 + 224) + 72), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
    if ((_DWORD)v3)
    {
      v4 = (int)v3;
      v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v3) + 384));
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = 136315650;
        v7 = "CvmSubmix.mm";
        v8 = 1024;
        v9 = 1108;
        v10 = 1024;
        v11 = v4;
        _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mpDspVoiceManager->SetSubmixPlayState() failed with error code: %hhd", (uint8_t *)&v6, 0x18u);
      }
    }
  }
}

void Phase::Controller::Submix::InternalPrepare(Phase::Controller::Submix *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  Phase::Logger *v7;
  uint64_t *i;
  Phase::Logger *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  Phase::Logger *v15;
  int v16;
  NSObject *v17;
  int v18;
  NSObject *v19;
  std::logic_error *exception;
  _BOOL8 v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  std::logic_error *v25;
  _BYTE v26[12];
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  _DWORD v36[7];

  *(_QWORD *)&v36[5] = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 28);
  v3 = *((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  v5 = (*(uint64_t (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 336))(this);
  v6 = (*(uint64_t (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 344))(this);
  v7 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::AddSubmix(*(_QWORD *)(*(_QWORD *)v2 + 72), v3, v4, v5, v6);
  if ((_DWORD)v7)
  {
    v18 = (int)v7;
    v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7) + 384));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v32 = "CvmSubmix.mm";
      v33 = 1024;
      v34 = 1177;
      v35 = 1024;
      v36[0] = v18;
      _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (IdAlreadyExists) [not addSubmixResult.IsOkay() is true]: \"mpDspVoiceManager->AddSubmix() failed with error code: %hhd\"", buf, 0x18u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(exception, "mpDspVoiceManager->AddSubmix() failed with error code: %hhd");
  }
  for (i = (uint64_t *)*((_QWORD *)this + 12); i; i = (uint64_t *)*i)
    *((_BYTE *)i + 56) = 0;
  v9 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 336))(this);
  if (v9 != (Phase::Logger *)2)
  {
    v10 = *((_QWORD *)this + 21);
    if (v10)
    {
      v11 = **(_QWORD **)(v10 + 24);
      v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v9) + 384));
      v13 = v12;
      if (v11 != 0x235B3F2D33EB877ALL)
      {
        v21 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
        if (v21)
        {
          v22 = *((_QWORD *)this + 2);
          *(_DWORD *)buf = 136315906;
          v32 = "CvmSubmix.mm";
          v33 = 1024;
          v34 = 1129;
          v35 = 1024;
          v36[0] = 0;
          LOWORD(v36[1]) = 2048;
          *(_QWORD *)((char *)&v36[1] + 2) = v22;
          _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Submix at effect index: %d is not a SubmixGain voice pool for submixId %llu.", buf, 0x22u);
        }
        v23 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v21) + 384));
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          v24 = *((_QWORD *)this + 2);
          *(_DWORD *)buf = 136315650;
          v32 = "CvmSubmix.mm";
          v33 = 1024;
          v34 = 1192;
          v35 = 2048;
          *(_QWORD *)v36 = v24;
          _os_log_impl(&dword_2164CC000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (IdAlreadyExists) [not AddAndUpdateGainEffects() is true]: \"SubmixId %llu failed adding and updating gain effects!\"", buf, 0x1Cu);
        }
        v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        _ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(v25, "SubmixId %llu failed adding and updating gain effects!");
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *((_QWORD *)this + 2);
        *(_DWORD *)buf = 136315906;
        v32 = "CvmSubmix.mm";
        v33 = 1024;
        v34 = 1123;
        v35 = 1024;
        v36[0] = 0;
        LOWORD(v36[1]) = 2048;
        *(_QWORD *)((char *)&v36[1] + 2) = v14;
        _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SubmixGain voice at effect index: %d already added for submixId %llu.", buf, 0x22u);
      }
    }
    else if (Phase::Controller::Submix::AddEffect(this, 0x235B3F2D33EB877ALL, 0))
    {
      std::terminate();
    }
    Phase::Controller::Submix::UpdateGainEffectsWithDuration(this, 0.0);
  }
  Phase::Controller::Submix::GetEffects((Phase::Logger **)this, 1, buf);
  v15 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::ConfigureSubmix(*(_QWORD **)(**((_QWORD **)this + 28) + 72), *((_QWORD *)this + 2), *((_QWORD *)this + 3), 2, buf);
  v16 = (int)v15;
  if ((_DWORD)v15)
  {
    v17 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15) + 384));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v26 = 136315650;
      *(_QWORD *)&v26[4] = "CvmSubmix.mm";
      v27 = 1024;
      v28 = 1201;
      v29 = 1024;
      v30 = v16;
      _os_log_impl(&dword_2164CC000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mpDspVoiceManager->ConfigureSubmix() failed with error code: %hhd", v26, 0x18u);
    }
  }
  *((_BYTE *)this + 288) = 0;
  *((_QWORD *)this + 8) &= ~2uLL;
  Phase::Controller::Submix::SetState((uint64_t)this, 2u);
  *(_QWORD *)v26 = buf;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
}

void sub_216547408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void Phase::Controller::Submix::InternalPause(Phase::Controller::Submix *this)
{
  if (*((unsigned __int8 *)this + 72) - 3 <= 1)
  {
    (*(void (**)(Phase::Controller::Submix *, uint64_t))(*(_QWORD *)this + 280))(this, 2);
    *((_BYTE *)this + 288) = 0;
  }
  Phase::Controller::SessionManager::SetSessionPlayState(*((void ***)this + 39), *((unsigned int *)this + 12), (uint64_t)this, 2u, 2, 0, 0);
  *((_BYTE *)this + 73) = *((_BYTE *)this + 72);
  Phase::Controller::Submix::SetState((uint64_t)this, 5u);
  *((_QWORD *)this + 7) &= ~2uLL;
}

void Phase::Controller::Submix::InternalResume(Phase::Controller::Submix *this)
{
  int v2;
  char v3;
  char v4;

  v2 = *((unsigned __int8 *)this + 72);
  if (v2 == 2)
  {
LABEL_4:
    if ((*(unsigned int (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 128))(this)
      && ((*(uint64_t (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 136))(this) & 1) == 0)
    {
      Phase::Controller::Submix::SetSessionPlayState((uint64_t)this, 1, 0, 0);
      (*(void (**)(Phase::Controller::Submix *, uint64_t))(*(_QWORD *)this + 280))(this, 3);
    }
    *((_BYTE *)this + 288) = 0;
    LOBYTE(v2) = *((_BYTE *)this + 72);
    goto LABEL_8;
  }
  if (v2 == 5)
  {
    v3 = *((_BYTE *)this + 73);
    if ((v3 - 3) >= 2u)
    {
      *((_BYTE *)this + 73) = 5;
      goto LABEL_11;
    }
    goto LABEL_4;
  }
LABEL_8:
  v4 = *((_BYTE *)this + 73);
  *((_BYTE *)this + 73) = v2;
  if (v2 == 2)
    v3 = 3;
  else
    v3 = v4;
LABEL_11:
  Phase::Controller::Submix::SetState((uint64_t)this, v3);
  *((_QWORD *)this + 7) &= ~4uLL;
}

void Phase::Controller::Submix::InternalSleep(Phase::Controller::Submix *this)
{
  int v2;
  Phase::Logger *v4;
  int v5;
  NSObject *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 72) != 7)
  {
    v2 = (*(uint64_t (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 128))(this);
    if (*((_BYTE *)this + 72) != 6 && v2 != 0)
      std::terminate();
    v4 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::RemoveSubmix(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 28) + 72), *((_QWORD *)this + 2), *((_QWORD *)this + 3));
    if ((_DWORD)v4)
    {
      v5 = (int)v4;
      v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4) + 384));
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = 136315650;
        v8 = "CvmSubmix.mm";
        v9 = 1024;
        v10 = 1276;
        v11 = 1024;
        v12 = v5;
        _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mpDspVoiceManager->RemoveSubmix() failed with error code: %hhd", (uint8_t *)&v7, 0x18u);
      }
    }
    Phase::Controller::SessionManager::SetSessionPlayState(*((void ***)this + 39), *((unsigned int *)this + 12), (uint64_t)this, 2u, 0, 0, 0);
    Phase::Controller::Submix::SetState((uint64_t)this, 7u);
  }
}

void Phase::Controller::Submix::InternalStop(Phase::Controller::Submix *this)
{
  Phase::Logger *v2;
  int v3;
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 7) &= 0xFFFFFFFFFFFFFFF9;
  (*(void (**)(Phase::Controller::Submix *))(*(_QWORD *)this + 160))(this);
  Phase::Controller::Submix::SetState((uint64_t)this, 0);
  *((_QWORD *)this + 7) &= ~8uLL;
  Phase::Controller::SessionManager::SetSessionPlayState(*((void ***)this + 39), *((unsigned int *)this + 12), (uint64_t)this, 2u, 0, 0, 0);
  v2 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::RemoveSubmix(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 28) + 72), *((_QWORD *)this + 2), *((_QWORD *)this + 3));
  if ((_DWORD)v2)
  {
    v3 = (int)v2;
    v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v2) + 384));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 136315650;
      v6 = "CvmSubmix.mm";
      v7 = 1024;
      v8 = 1302;
      v9 = 1024;
      v10 = v3;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mpDspVoiceManager->RemoveSubmix() failed with error code: %hhd", (uint8_t *)&v5, 0x18u);
    }
  }
}

double Phase::Controller::Submix::GetGain(Phase::Controller::Submix *this)
{
  double *v1;

  v1 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)this + 10, qword_24D579CC8);
  if (!v1)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v1[6];
}

uint64_t Phase::Controller::Submix::GetChannelMask()
{
  return -1;
}

uint64_t Phase::Controller::Submix::IsPrepared(Phase::Controller::Submix *this)
{
  return 0;
}

uint64_t Phase::Controller::Submix::ExcludeFromTapBinding(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t v3;

  if (a2 != 5)
    return 0;
  v2 = *(uint64_t ***)(a1 + 264);
  if (!v2)
    return 0;
  while (1)
  {
    v3 = (*(uint64_t (**)(uint64_t *))(*v2[4] + 72))(v2[4]);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 624) == 1)
        break;
    }
    v2 = (uint64_t **)*v2;
    if (!v2)
      return 0;
  }
  return 1;
}

uint64_t Phase::Controller::Submix::GetSourceId(Phase::Controller::Submix *this)
{
  return 0;
}

uint64_t Phase::Controller::Submix::GetListenerId(Phase::Controller::Submix *this)
{
  return 0;
}

void Phase::Controller::Effect::~Effect(Phase::Controller::Effect *this)
{
  void **v1;

  *(_QWORD *)this = off_24D579D58;
  v1 = (void **)((char *)this + 24);
  std::vector<Phase::Controller::VoiceData>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_24D579D58;
  v2 = (void **)((char *)this + 24);
  std::vector<Phase::Controller::VoiceData>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x2199F9D70](this, 0x10A1C4098D41D02);
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[4];
      v2[4] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Controller::SessionManager * const>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::SessionManager *>::__id);
    else
      return 0;
  }
  return result;
}

Phase::Controller::FileSampler *std::unique_ptr<Phase::Controller::FileSampler>::reset[abi:ne180100](Phase::Controller::FileSampler **a1)
{
  Phase::Controller::FileSampler *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    Phase::Controller::FileSampler::~FileSampler(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void Phase::Controller::PushStreamSampler::~PushStreamSampler(Phase::Controller::PushStreamSampler *this)
{
  Phase::Controller::StreamSamplerBase::~StreamSamplerBase(this);
  JUMPOUT(0x2199F9D70);
}

Phase::Controller::StreamSamplerBase *std::unique_ptr<Phase::Controller::PushStreamSampler>::reset[abi:ne180100](Phase::Controller::StreamSamplerBase **a1)
{
  Phase::Controller::StreamSamplerBase *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    Phase::Controller::StreamSamplerBase::~StreamSamplerBase(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void std::default_delete<Phase::Controller::ExternalOutputPullStreamSampler>::operator()[abi:ne180100](id *a1)
{

  Phase::Controller::StreamSamplerBase::~StreamSamplerBase((Phase::Controller::StreamSamplerBase *)a1);
  JUMPOUT(0x2199F9D70);
}

Phase::Controller::Generator *std::unique_ptr<Phase::Controller::WaterProcedure>::reset[abi:ne180100](Phase::Controller::Generator **a1)
{
  Phase::Controller::Generator *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    Phase::Controller::Generator::~Generator(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

_QWORD *std::vector<Phase::Controller::DspNodeVoice>::__init_with_size[abi:ne180100]<Phase::Controller::DspNodeVoice*,Phase::Controller::DspNodeVoice*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  _QWORD *v15;

  if (a4)
  {
    if (a4 >= 0x276276276276277)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::DspNodeVoice>>((uint64_t)(result + 2), a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[13 * v7];
    v15 = result;
    if (a2 == a3)
    {
      v8 = result;
    }
    else
    {
      v8 = result;
      do
      {
        *v8 = *(_QWORD *)a2;
        v8[1] = 0;
        v8[2] = 0;
        v8[3] = 0;
        v9 = *(_QWORD *)(a2 + 8);
        v10 = *(_QWORD *)(a2 + 16);
        if (v10 != v9)
        {
          std::vector<Phase::Controller::VoiceBufferParameter>::__vallocate[abi:ne180100](v8 + 1, (v10 - v9) >> 5);
          std::vector<Phase::Controller::VoiceBufferParameter>::__construct_at_end<Phase::Controller::VoiceBufferParameter*,Phase::Controller::VoiceBufferParameter*>((uint64_t)(v8 + 1), v9, v10);
        }
        v8[4] = 0;
        v8[5] = 0;
        v8[6] = 0;
        std::vector<Phase::Controller::DspChannelIdBusValuePair>::__init_with_size[abi:ne180100]<Phase::Controller::DspChannelIdBusValuePair*,Phase::Controller::DspChannelIdBusValuePair*>(v8 + 4, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
        v8[7] = 0;
        v8[8] = 0;
        v8[9] = 0;
        result = std::vector<Phase::Controller::DspChannelIdBusValuePair>::__init_with_size[abi:ne180100]<Phase::Controller::DspChannelIdBusValuePair*,Phase::Controller::DspChannelIdBusValuePair*>(v8 + 7, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4);
        v8[10] = 0;
        v8[11] = 0;
        v8[12] = 0;
        v12 = *(_BYTE **)(a2 + 80);
        v11 = *(_BYTE **)(a2 + 88);
        v13 = v11 - v12;
        if (v11 != v12)
        {
          std::vector<Phase::Controller::DspParameterPair>::__vallocate[abi:ne180100](v8 + 10, v13 >> 4);
          v14 = (char *)v8[11];
          result = memmove(v14, v12, v13);
          v8[11] = &v14[16 * (v13 >> 4)];
        }
        v8 = v15 + 13;
        v15 += 13;
        a2 += 104;
      }
      while (a2 != a3);
    }
    v6[1] = v8;
  }
  return result;
}

void sub_216547CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

char *std::vector<Phase::Controller::VoiceBufferParameter>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t std::vector<Phase::Controller::VoiceBufferParameter>::__construct_at_end<Phase::Controller::VoiceBufferParameter*,Phase::Controller::VoiceBufferParameter*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  while (a2 != a3)
  {
    *(_DWORD *)v3 = *(_DWORD *)a2;
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(v3 + 16) = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    *(_BYTE *)(v3 + 24) = *(_BYTE *)(a2 + 24);
    a2 += 32;
    v3 += 32;
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

void std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

_QWORD *std::vector<Phase::Controller::DspChannelIdBusValuePair>::__init_with_size[abi:ne180100]<Phase::Controller::DspChannelIdBusValuePair*,Phase::Controller::DspChannelIdBusValuePair*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 60)
      std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)(result + 2), a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[2 * v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_216547E98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Phase::Controller::DspParameterPair>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::DspNodeVoice>,Phase::Controller::DspNodeVoice*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(uint64_t **)(a1 + 8);
    v2 = *(uint64_t **)(a1 + 16);
    v4 = *v2;
    v5 = *v3;
    if (*v2 != *v3)
    {
      v6 = *(_QWORD *)a1;
      do
      {
        v4 -= 104;
        std::allocator<Phase::Controller::DspNodeVoice>::destroy[abi:ne180100](v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

uint64_t std::__split_buffer<Phase::Controller::DspNode>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    v5 = (void **)(i - 24);
    std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void Phase::Controller::SubmixSystem::~SubmixSystem(Phase::Controller::SubmixSystem *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24D579E48;
  Phase::Controller::SubmixSystem::Destroy(this);
  v2 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 184);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 144);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 80));
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::~__hash_table((uint64_t)this + 40);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  Phase::Controller::SubmixSystem::~SubmixSystem(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::SubmixSystem::Destroy(Phase::Controller::SubmixSystem *this)
{
  std::recursive_mutex *v2;
  uint64_t v3;

  v2 = (std::recursive_mutex *)((char *)this + 80);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 80));
  while (*((_QWORD *)this + 8))
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::erase((_QWORD *)this + 5, *((uint64_t **)this + 7));
  v3 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)this + 18);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)this + 23);
  std::recursive_mutex::unlock(v2);
}

double Phase::Controller::SubmixSystem::Initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Phase::Logger *a5, uint64_t a6, uint64_t a7, const Phase::Controller::SpatialModelerSystem::InitializeParameters *a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1 + 40, vcvtps_u32_f32(16.0 / *(float *)(a1 + 72)));
  *(_QWORD *)(a1 + 224) = a2;
  *(_QWORD *)(a1 + 232) = a3;
  *(_QWORD *)(a1 + 240) = a4;
  *(_QWORD *)(a1 + 248) = a5;
  *(_QWORD *)(a1 + 256) = a6;
  *(_QWORD *)(a1 + 264) = a7;
  v16 = operator new();
  Phase::Controller::RendererSystem::RendererSystem(v16, a5, a6, a3);
  v17 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = Phase::Controller::TaskManager::GetService<Phase::Controller::SessionManager>(*(Phase::Logger **)(a1 + 248), 20);
  *(_QWORD *)(a1 + 280) = v18;
  if (!v18)
    std::terminate();
  Phase::Controller::SpatialModelerSystem::Initialize(*(Phase::Controller::SpatialModelerSystem **)(a1 + 264), a8, *(Phase::Controller::TaskManager **)(a1 + 248), *(Phase::Controller::RendererSystem **)(a1 + 272));
  result = 2.22507386e-308;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 288) = xmmword_2166F7A20;
  *(_OWORD *)(a1 + 304) = _Q1;
  *(_BYTE *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0x3FF0000000000000;
  return result;
}

void sub_2165481C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10E1C407AAC3C22);
  _Unwind_Resume(a1);
}

void Phase::Controller::SubmixSystem::Stop(Phase::Controller::SubmixSystem *this)
{
  int v2;
  char *v3;
  char *v4;
  Phase::Logger *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  Phase::Controller::SubmixSystem::Reset(this);
  v2 = 0;
  v3 = (char *)this + 56;
LABEL_2:
  v4 = v3;
  while (1)
  {
    v4 = *(char **)v4;
    if (!v4)
      break;
    v5 = (Phase::Logger *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v4 + 4) + 80))(*((_QWORD *)v4 + 4));
    if ((v5 & 1) == 0)
    {
      if (v2 != 99)
      {
        ++v2;
        usleep(0x4E20u);
        goto LABEL_2;
      }
      v6 = *((_QWORD *)v4 + 2);
      v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v5) + 384));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = 136316162;
        v9 = "CvmSubmixSystem.mm";
        v10 = 1024;
        v11 = 94;
        v12 = 2048;
        v13 = v6;
        v14 = 1024;
        v15 = 100;
        v16 = 2048;
        v17 = 0x4000000000000000;
        _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: could not wait for all the submixes to stop (e.g. submixId %llu) in %d tries over %.3fs!", (uint8_t *)&v8, 0x2Cu);
      }
      return;
    }
  }
}

void Phase::Controller::SubmixSystem::Reset(Phase::Controller::SubmixSystem *this)
{
  std::recursive_mutex *v2;
  char *i;

  v2 = (std::recursive_mutex *)((char *)this + 80);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 80));
  for (i = (char *)this + 56; ; (*(void (**)(_QWORD))(**((_QWORD **)i + 4) + 64))(*((_QWORD *)i + 4)))
  {
    i = *(char **)i;
    if (!i)
      break;
  }
  while (*((_QWORD *)this + 8))
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::erase((_QWORD *)this + 5, *((uint64_t **)this + 7));
  Phase::Controller::RendererSystem::Reset(*((Phase::Controller::RendererSystem **)this + 34));
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)this + 18);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)this + 23);
  std::recursive_mutex::unlock(v2);
}

void sub_216548398(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::SubmixSystem::CreateSpatialSubmix(Phase::Controller::SubmixSystem *this, const Phase::Controller::CreateSpatialSubmixParameters *a2)
{
  unint64_t v2;
  std::recursive_mutex *v5;
  Phase::Controller::SpatialSubmix *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  Phase::Logger *v27;
  NSObject *v28;
  uint64_t v30;
  std::logic_error *exception;
  _BYTE buf[28];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = (std::recursive_mutex *)((char *)this + 80);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 80));
  v6 = (Phase::Controller::SpatialSubmix *)operator new();
  Phase::Controller::SpatialSubmix::SpatialSubmix((uint64_t)v6, (uint64_t)a2, *((_QWORD *)this + 28), *((_QWORD *)this + 29), *((_QWORD *)this + 30), *((Phase::Logger **)this + 31), *((_QWORD *)this + 32), *((_QWORD *)this + 33), (uint64_t)this);
  v7 = 0;
  v8 = (uint64_t *)((char *)a2 + 8);
  *(_OWORD *)buf = *(_OWORD *)((char *)a2 + 8);
  *(_QWORD *)&buf[16] = v6;
  v9 = 0xCBF29CE484222325;
  do
    v9 = 0x100000001B3 * (v9 ^ (char)buf[v7++]);
  while (v7 != 16);
  v10 = (uint64_t *)((char *)this + 40);
  v11 = *((_QWORD *)this + 6);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v2 = v9;
      if (v9 >= v11)
        v2 = v9 % v11;
    }
    else
    {
      v2 = (v11 - 1) & v9;
    }
    v13 = *(_QWORD **)(*v10 + 8 * v2);
    if (v13)
    {
      for (i = (_QWORD *)*v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v9)
        {
          if (i[2] == *(_QWORD *)buf && i[3] == *(_QWORD *)&buf[8])
          {
            Phase::Controller::SpatialSubmix::~SpatialSubmix(v6);
            v27 = (Phase::Logger *)MEMORY[0x2199F9D70]();
            v28 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v27) + 384));
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              v30 = *v8;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "CvmSubmixSystem.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 151;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v30;
              _os_log_impl(&dword_2164CC000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!pair.second is true]: \"Tried to create more than one submix instance with the same submixId: %llu.\"", buf, 0x1Cu);
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Tried to create more than one submix instance with the same submixId: %llu.");
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11)
              v15 %= v11;
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v2)
            break;
        }
      }
    }
  }
  v17 = operator new(0x28uLL);
  *v17 = 0;
  v17[1] = v9;
  *((_OWORD *)v17 + 1) = *(_OWORD *)v8;
  *(_QWORD *)&buf[16] = 0;
  v17[4] = v6;
  v18 = (float)(unint64_t)(*((_QWORD *)this + 8) + 1);
  v19 = *((float *)this + 18);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>((uint64_t)this + 40, v23);
    v11 = *((_QWORD *)this + 6);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v9 >= v11)
        v2 = v9 % v11;
      else
        v2 = v9;
    }
    else
    {
      v2 = (v11 - 1) & v9;
    }
  }
  v24 = *v10;
  v25 = *(_QWORD **)(*v10 + 8 * v2);
  if (v25)
  {
    *v17 = *v25;
LABEL_44:
    *v25 = v17;
    goto LABEL_45;
  }
  *v17 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v17;
  *(_QWORD *)(v24 + 8 * v2) = (char *)this + 56;
  if (*v17)
  {
    v26 = *(_QWORD *)(*v17 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11)
        v26 %= v11;
    }
    else
    {
      v26 &= v11 - 1;
    }
    v25 = (_QWORD *)(*v10 + 8 * v26);
    goto LABEL_44;
  }
LABEL_45:
  ++*((_QWORD *)this + 8);
  std::recursive_mutex::unlock(v5);
}

void sub_216548768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Phase::Controller::SpatialSubmix *a10)
{
  std::recursive_mutex *v10;
  Phase::Controller::SpatialSubmix **v11;
  _QWORD *v12;
  uint64_t v14;

  v14 = v12[4];
  v12[4] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  operator delete(v12);
  std::unique_ptr<Phase::Controller::SpatialSubmix>::reset[abi:ne180100](v11);
  std::unique_ptr<Phase::Controller::SpatialSubmix>::reset[abi:ne180100](&a10);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void Phase::Controller::SubmixSystem::CreateChannelSubmix(uint64_t a1, _OWORD *a2)
{
  unint64_t v2;
  std::recursive_mutex *v5;
  uint64_t v6;
  Phase::Controller::ChannelSubmix *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  Phase::Logger *v27;
  NSObject *v28;
  uint64_t v30;
  std::logic_error *exception;
  _BYTE buf[28];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = (std::recursive_mutex *)(a1 + 80);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 80));
  v6 = *(_QWORD *)(a1 + 272);
  v7 = (Phase::Controller::ChannelSubmix *)operator new();
  Phase::Controller::ChannelSubmix::ChannelSubmix((uint64_t)v7, (uint64_t)a2, *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 240), *(Phase::Logger **)(a1 + 248), *(_QWORD *)(a1 + 256), a1, v6);
  v8 = 0;
  *(_OWORD *)buf = *a2;
  *(_QWORD *)&buf[16] = v7;
  v9 = 0xCBF29CE484222325;
  do
    v9 = 0x100000001B3 * (v9 ^ (char)buf[v8++]);
  while (v8 != 16);
  v10 = (uint64_t *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v2 = v9;
      if (v9 >= v11)
        v2 = v9 % v11;
    }
    else
    {
      v2 = (v11 - 1) & v9;
    }
    v13 = *(_QWORD **)(*v10 + 8 * v2);
    if (v13)
    {
      for (i = (_QWORD *)*v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v9)
        {
          if (i[2] == *(_QWORD *)buf && i[3] == *(_QWORD *)&buf[8])
          {
            Phase::Controller::ChannelSubmix::~ChannelSubmix(v7);
            v27 = (Phase::Logger *)MEMORY[0x2199F9D70]();
            v28 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v27) + 384));
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              v30 = *(_QWORD *)a2;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "CvmSubmixSystem.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 166;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v30;
              _os_log_impl(&dword_2164CC000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!pair.second is true]: \"Tried to create more than one submix instance with the same submixId: %llu.\"", buf, 0x1Cu);
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Tried to create more than one submix instance with the same submixId: %llu.");
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11)
              v15 %= v11;
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v2)
            break;
        }
      }
    }
  }
  v17 = operator new(0x28uLL);
  *v17 = 0;
  v17[1] = v9;
  *((_OWORD *)v17 + 1) = *a2;
  *(_QWORD *)&buf[16] = 0;
  v17[4] = v7;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 64) + 1);
  v19 = *(float *)(a1 + 72);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1 + 40, v23);
    v11 = *(_QWORD *)(a1 + 48);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v9 >= v11)
        v2 = v9 % v11;
      else
        v2 = v9;
    }
    else
    {
      v2 = (v11 - 1) & v9;
    }
  }
  v24 = *v10;
  v25 = *(_QWORD **)(*v10 + 8 * v2);
  if (v25)
  {
    *v17 = *v25;
LABEL_44:
    *v25 = v17;
    goto LABEL_45;
  }
  *v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v17;
  *(_QWORD *)(v24 + 8 * v2) = a1 + 56;
  if (*v17)
  {
    v26 = *(_QWORD *)(*v17 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11)
        v26 %= v11;
    }
    else
    {
      v26 &= v11 - 1;
    }
    v25 = (_QWORD *)(*v10 + 8 * v26);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 64);
  std::recursive_mutex::unlock(v5);
}

void sub_216548BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Phase::Controller::ChannelSubmix *a10)
{
  std::recursive_mutex *v10;
  Phase::Controller::ChannelSubmix **v11;
  _QWORD *v12;
  uint64_t v14;

  v14 = v12[4];
  v12[4] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  operator delete(v12);
  std::unique_ptr<Phase::Controller::ChannelSubmix>::reset[abi:ne180100](v11);
  std::unique_ptr<Phase::Controller::ChannelSubmix>::reset[abi:ne180100](&a10);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void Phase::Controller::SubmixSystem::CreateAmbientSubmix(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  std::recursive_mutex *v5;
  Phase::Controller::AmbientSubmix *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  Phase::Logger *v27;
  NSObject *v28;
  uint64_t v30;
  std::logic_error *exception;
  _BYTE buf[28];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = (std::recursive_mutex *)(a1 + 80);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 80));
  v6 = (Phase::Controller::AmbientSubmix *)operator new();
  Phase::Controller::AmbientSubmix::AmbientSubmix((uint64_t)v6, a2, *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 240), *(Phase::Logger **)(a1 + 248), *(_QWORD *)(a1 + 256), a1);
  v7 = 0;
  v8 = (uint64_t *)(a2 + 8);
  *(_OWORD *)buf = *(_OWORD *)(a2 + 8);
  *(_QWORD *)&buf[16] = v6;
  v9 = 0xCBF29CE484222325;
  do
    v9 = 0x100000001B3 * (v9 ^ (char)buf[v7++]);
  while (v7 != 16);
  v10 = (uint64_t *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v2 = v9;
      if (v9 >= v11)
        v2 = v9 % v11;
    }
    else
    {
      v2 = (v11 - 1) & v9;
    }
    v13 = *(_QWORD **)(*v10 + 8 * v2);
    if (v13)
    {
      for (i = (_QWORD *)*v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v9)
        {
          if (i[2] == *(_QWORD *)buf && i[3] == *(_QWORD *)&buf[8])
          {
            Phase::Controller::AmbientSubmix::~AmbientSubmix(v6);
            v27 = (Phase::Logger *)MEMORY[0x2199F9D70]();
            v28 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v27) + 384));
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              v30 = *v8;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "CvmSubmixSystem.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 181;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v30;
              _os_log_impl(&dword_2164CC000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!pair.second is true]: \"Tried to create more than one submix instance with the same submixId: %llu.\"", buf, 0x1Cu);
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Tried to create more than one submix instance with the same submixId: %llu.");
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11)
              v15 %= v11;
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v2)
            break;
        }
      }
    }
  }
  v17 = operator new(0x28uLL);
  *v17 = 0;
  v17[1] = v9;
  *((_OWORD *)v17 + 1) = *(_OWORD *)v8;
  *(_QWORD *)&buf[16] = 0;
  v17[4] = v6;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 64) + 1);
  v19 = *(float *)(a1 + 72);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1 + 40, v23);
    v11 = *(_QWORD *)(a1 + 48);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v9 >= v11)
        v2 = v9 % v11;
      else
        v2 = v9;
    }
    else
    {
      v2 = (v11 - 1) & v9;
    }
  }
  v24 = *v10;
  v25 = *(_QWORD **)(*v10 + 8 * v2);
  if (v25)
  {
    *v17 = *v25;
LABEL_44:
    *v25 = v17;
    goto LABEL_45;
  }
  *v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v17;
  *(_QWORD *)(v24 + 8 * v2) = a1 + 56;
  if (*v17)
  {
    v26 = *(_QWORD *)(*v17 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11)
        v26 %= v11;
    }
    else
    {
      v26 &= v11 - 1;
    }
    v25 = (_QWORD *)(*v10 + 8 * v26);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 64);
  std::recursive_mutex::unlock(v5);
}

void sub_216548FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Phase::Controller::AmbientSubmix *a10)
{
  std::recursive_mutex *v10;
  Phase::Controller::AmbientSubmix **v11;
  _QWORD *v12;
  uint64_t v14;

  v14 = v12[4];
  v12[4] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  operator delete(v12);
  std::unique_ptr<Phase::Controller::AmbientSubmix>::reset[abi:ne180100](v11);
  std::unique_ptr<Phase::Controller::AmbientSubmix>::reset[abi:ne180100](&a10);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

_QWORD *Phase::Controller::SubmixSystem::Destroy(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t Submix;
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)a1 + 5, v8);
  if (result)
  {
    Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, a2, a3);
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Submix + 72))(Submix);
  }
  return result;
}

uint64_t Phase::Controller::SubmixSystem::GetSubmix(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  NSObject *v13;
  std::logic_error *exception;
  _QWORD v16[2];
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v3 = 0;
  v23 = *MEMORY[0x24BDAC8D0];
  v16[0] = a2;
  v16[1] = a3;
  v4 = 0xCBF29CE484222325;
  do
    v4 = 0x100000001B3 * (v4 ^ *((char *)v16 + v3++));
  while (v3 != 16);
  v5 = *(int8x8_t *)((char *)a1 + 48);
  if (!*(_QWORD *)&v5)
    goto LABEL_23;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v8 = *(_QWORD **)(*((_QWORD *)a1 + 5) + 8 * v7);
  if (!v8 || (v9 = (_QWORD *)*v8) == 0)
  {
LABEL_23:
    v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 384));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v18 = "CvmSubmixSystem.mm";
      v19 = 1024;
      v20 = 486;
      v21 = 2048;
      v22 = a2;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [it == mSubmixes.end() is true]: \"Invalid SubmixId %llu\"", buf, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid SubmixId %llu");
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == v4)
      break;
    if (v6.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v5)
        v10 %= *(_QWORD *)&v5;
    }
    else
    {
      v10 &= *(_QWORD *)&v5 - 1;
    }
    if (v10 != v7)
      goto LABEL_23;
LABEL_22:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_23;
  }
  if (v9[2] != a2 || v9[3] != a3)
    goto LABEL_22;
  return v9[4];
}

void sub_2165492C8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

double Phase::Controller::SubmixSystem::SetUnitsPerMeter(Phase::Controller::SubmixSystem *this, double a2)
{
  double v3;
  double v4;
  double result;

  v3 = Phase::Controller::sClamp<double>(this, a2, *((double *)this + 36), *((double *)this + 37));
  v4 = *((double *)this + 39);
  if (v3 != v4)
  {
    *((double *)this + 39) = v3;
    *((_BYTE *)this + 320) = 1;
    v4 = v3;
  }
  result = 1.0 / v4;
  *((double *)this + 41) = 1.0 / v4;
  return result;
}

BOOL Phase::Controller::SubmixSystem::PrepareGenerator(Phase::Logger *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t Submix;
  _BOOL8 v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, a4, a5);
  v17 = Phase::Controller::Submix::PrepareGenerator(Submix, a2, a3, a6, a7, a8);
  if (v17)
  {
    *(_QWORD *)&v21 = a2;
    *((_QWORD *)&v21 + 1) = a3;
    v22 = a4;
    v23 = a5;
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>>>::__emplace_unique_key_args<Phase::UniqueObjectId,std::pair<Phase::UniqueObjectId,Phase::UniqueObjectId>>((uint64_t)a1 + 144, &v21, &v21);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
    if (v18)
    {
      if (*(_QWORD *)(v18 + 136) || *(_QWORD *)(v18 + 144))
      {
        *(_QWORD *)&v21 = v18 + 136;
        v19 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>>>::__emplace_unique_key_args<Phase::UniqueObjectId,std::piecewise_construct_t const&,std::tuple<Phase::UniqueObjectId const&>,std::tuple<>>((uint64_t)a1 + 184, (_QWORD *)(v18 + 136), (uint64_t)&std::piecewise_construct, (_OWORD **)&v21);
        v19[4] = a2;
        v19[5] = a3;
      }
    }
  }
  return v17;
}

uint64_t Phase::Controller::SubmixSystem::PlayGenerator(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t SubmixIdForGenerator;
  uint64_t v7;
  uint64_t Submix;

  SubmixIdForGenerator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, a2, a3);
  Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v7);
  return Phase::Controller::Submix::PlayGenerator(Submix, a2, a3);
}

uint64_t Phase::Controller::SubmixSystem::GetSubmixIdForGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  NSObject *v5;
  std::logic_error *exception;
  _QWORD v7[2];
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v7[0] = a2;
  v7[1] = a3;
  v3 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 144), v7);
  if (!v3)
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v9 = "CvmSubmixSystem.mm";
      v10 = 1024;
      v11 = 477;
      v12 = 2048;
      v13 = v7[0];
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [it == mGeneratorToSubmixIdMap.end() is true]: \"Invalid GeneratorId %llu\"", buf, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid GeneratorId %llu");
  }
  return v3[4];
}

void sub_216549588(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SubmixSystem::PauseGenerator(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t SubmixIdForGenerator;
  uint64_t v7;
  uint64_t Submix;

  SubmixIdForGenerator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, a2, a3);
  Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v7);
  return Phase::Controller::Submix::PauseGenerator(Submix, a2, a3);
}

uint64_t Phase::Controller::SubmixSystem::ResumeGenerator(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t SubmixIdForGenerator;
  uint64_t v7;
  uint64_t Submix;

  SubmixIdForGenerator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, a2, a3);
  Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v7);
  return Phase::Controller::Submix::ResumeGenerator(Submix, a2, a3);
}

void Phase::Controller::SubmixSystem::StopGenerator(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t SubmixIdForGenerator;
  uint64_t v7;
  uint64_t Submix;
  Phase::Controller::Generator *Generator;

  SubmixIdForGenerator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, a2, a3);
  Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v7);
  Generator = (Phase::Controller::Generator *)Phase::Controller::Submix::GetGenerator(Submix, a2, a3);
  Phase::Controller::Generator::Stop(Generator);
}

void Phase::Controller::SubmixSystem::SleepGenerator(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t SubmixIdForGenerator;
  uint64_t v7;
  uint64_t Submix;

  SubmixIdForGenerator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, a2, a3);
  Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v7);
  Phase::Controller::Submix::SleepGenerator(Submix, a2, a3);
}

void Phase::Controller::SubmixSystem::WakeGenerator(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t SubmixIdForGenerator;
  uint64_t v7;
  uint64_t Submix;

  SubmixIdForGenerator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, a2, a3);
  Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v7);
  Phase::Controller::Submix::WakeGenerator(Submix, a2, a3);
}

void Phase::Controller::SubmixSystem::SetGeneratorParameter(Phase::Logger *a1, uint64_t a2, uint64_t a3, unint64_t a4, double a5)
{
  uint64_t SubmixIdForGenerator;
  uint64_t v11;
  uint64_t Submix;
  Phase::Controller::Generator *Generator;

  SubmixIdForGenerator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, a2, a3);
  Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v11);
  Generator = (Phase::Controller::Generator *)Phase::Controller::Submix::GetGenerator(Submix, a2, a3);
  Phase::Controller::Generator::SetParameter(Generator, a4, a5, 0);
}

uint64_t Phase::Controller::SubmixSystem::PauseExternalStream(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t SubmixIdForGenerator;
  uint64_t v7;
  uint64_t Submix;
  NSObject *v10;
  void **v11;
  std::logic_error *exception;
  void *__p[2];
  char v14;
  _QWORD v15[2];
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  void **v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v15[0] = a2;
  v15[1] = a3;
  v4 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)a1 + 23, v15);
  if (!v4)
  {
    v10 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                        + 384)));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      Phase::UniqueObjectId::str((Phase::UniqueObjectId *)v15, __p);
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v17 = "CvmSubmixSystem.mm";
      v18 = 1024;
      v19 = 341;
      v20 = 2080;
      v21 = v11;
      _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [it == mExternalStreamIdToGeneratorIdMap.end() is true]: \"Invalid ExternalStreamId %s\"", buf, 0x1Cu);
      if (v14 < 0)
        operator delete(__p[0]);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid ExternalStreamId %s");
  }
  v5 = v4 + 5;
  SubmixIdForGenerator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, v4[4], v4[5]);
  Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v7);
  return Phase::Controller::Submix::PauseExternalStream(Submix, *(v5 - 1), *v5);
}

void sub_216549938(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::SubmixSystem::ResumeExternalStream(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t SubmixIdForGenerator;
  uint64_t v7;
  _QWORD *Submix;
  NSObject *v9;
  void **v10;
  std::logic_error *exception;
  void *__p[2];
  char v13;
  _QWORD v14[2];
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  void **v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v14[0] = a2;
  v14[1] = a3;
  v4 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)a1 + 23, v14);
  if (!v4)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                       + 384)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::UniqueObjectId::str((Phase::UniqueObjectId *)v14, __p);
      if (v13 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v16 = "CvmSubmixSystem.mm";
      v17 = 1024;
      v18 = 351;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [it == mExternalStreamIdToGeneratorIdMap.end() is true]: \"Invalid ExternalStreamId %s\"", buf, 0x1Cu);
      if (v13 < 0)
        operator delete(__p[0]);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid ExternalStreamId %s");
  }
  v5 = v4 + 5;
  SubmixIdForGenerator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, v4[4], v4[5]);
  Submix = (_QWORD *)Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v7);
  Phase::Controller::Submix::ResumeExternalStream(Submix, *(v5 - 1), *v5);
}

void sub_216549AF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::SubmixSystem::Update(Phase::Controller::SubmixSystem *this, double a2)
{
  uint64_t InstancePtr;
  Phase::Logger *v5;
  Phase::Logger *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t **i;
  std::recursive_mutex *v10;
  Phase::Logger *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Phase::Logger *v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;

  InstancePtr = Phase::Logger::GetInstancePtr(this);
  v5 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 896));
  v6 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v5);
  if (*((_BYTE *)v6 + 904))
  {
    v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v6)
                                                                                       + 896)));
    v8 = v7;
    if ((unint64_t)v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      LOWORD(v24) = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v8, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v5, "Phase_SubmixSystem_Update", "Submix System Update", (uint8_t *)&v24, 2u);
    }

  }
  Phase::Controller::RendererSystem::Update(*((Phase::Controller::RendererSystem **)this + 34));
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  for (i = (uint64_t **)*((_QWORD *)this + 7); i; i = (uint64_t **)*i)
    (*(void (**)(uint64_t *, double))(*i[4] + 176))(i[4], a2);
  v10 = (std::recursive_mutex *)((char *)this + 80);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 80));
  v12 = (uint64_t *)*((_QWORD *)this + 7);
  if (v12)
  {
    do
    {
      while (1)
      {
        v13 = v12[2];
        v14 = v12[3];
        v15 = v12[4];
        v11 = (Phase::Logger *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 88))(v15);
        if ((_DWORD)v11)
          break;
        v12 = (uint64_t *)*v12;
        if (!v12)
          goto LABEL_26;
      }
      v16 = (uint64_t *)*((_QWORD *)this + 20);
      while (v16)
      {
        if (v16[4] == v13 && v16[5] == v14)
          v16 = (uint64_t *)std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase((_QWORD *)this + 18, v16);
        else
          v16 = (uint64_t *)*v16;
      }
      v24 = 0;
      v25 = 0;
      v17 = v15 + 264;
      while (1)
      {
        v17 = *(_QWORD *)v17;
        if (!v17)
          break;
        v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 32) + 72))(*(_QWORD *)(v17 + 32));
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 608);
          v20 = *(_QWORD *)(v18 + 616);
          goto LABEL_23;
        }
      }
      v20 = 0;
      v19 = 0;
LABEL_23:
      v24 = v19;
      v25 = v20;
      if (v19 | v20)
        std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>>>::__erase_unique<Phase::UniqueObjectId>((_QWORD *)this + 23, &v24);
      v11 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::erase((_QWORD *)this + 5, v12);
      v12 = (uint64_t *)v11;
    }
    while (v11);
  }
LABEL_26:
  v21 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v11);
  if (*((_BYTE *)v21 + 904))
  {
    v22 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v21)
                                                                                        + 896)));
    v23 = v22;
    if ((unint64_t)v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v22))
    {
      LOWORD(v24) = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v23, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v5, "Phase_SubmixSystem_Update", (const char *)&unk_21676613F, (uint8_t *)&v24, 2u);
    }

  }
  std::recursive_mutex::unlock(v10);
}

void sub_216549D8C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SubmixSystem::SeekGeneratorTime(Phase::Logger *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t SubmixIdForGenerator;
  uint64_t v9;
  uint64_t Submix;
  uint64_t Generator;

  SubmixIdForGenerator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, a2, a3);
  Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v9);
  Generator = Phase::Controller::Submix::GetGenerator(Submix, a2, a3);
  return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)Generator + 56))(Generator, a4);
}

void Phase::Controller::SubmixSystem::ActivateAudioSession(Phase::Controller::SubmixSystem *this, int a2, int a3, int a4)
{
  NSObject *v8;
  const char *v9;
  const char *v10;
  uint64_t *i;
  uint64_t v12;
  int32x2_t v13;
  uint64_t v14;
  _DWORD *v15;
  NSObject *v16;
  Phase::Logger *InstancePtr;
  NSObject *v18;
  std::runtime_error *v19;
  NSObject *v20;
  std::logic_error *exception;
  int32x2_t v22;
  BOOL v23;
  unint64_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  Phase::Controller::SubmixSystem *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  const char *v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 384));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = "Deactivating";
    *(_DWORD *)buf = 136316418;
    v26 = "CvmSubmixSystem.mm";
    v27 = 1024;
    v28 = 515;
    if (a3)
      v9 = "Activating";
    v10 = "";
    v29 = 2048;
    v30 = this;
    v32 = (uint64_t)v9;
    v31 = 2080;
    if (a4)
      v10 = ", from platform callback";
    v33 = 1024;
    v34 = a2;
    v35 = 2080;
    v36 = v10;
    _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: %s session 0x%x%s", buf, 0x36u);
  }
  if ((a4 & 1) == 0)
    std::terminate();
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 80));
  for (i = (uint64_t *)*((_QWORD *)this + 7); i; i = (uint64_t *)*i)
  {
    v12 = i[4];
    if (!v12)
    {
      v20 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v26 = "CvmSubmixSystem.mm";
        v27 = 1024;
        v28 = 521;
        _os_log_impl(&dword_2164CC000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pSubmix != nullptr is false.", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "PRECONDITION: pSubmix != nullptr is false.");
    }
    if (*(_DWORD *)(v12 + 48) == a2)
    {
      v22 = (int32x2_t)1065353216;
      if ((a3 & 1) != 0)
        Phase::Controller::Submix::SetSessionPlayState(v12, 1, 1, &v22);
      else
        Phase::Controller::Submix::SetSessionPlayState(v12, 0, 1, 0);
      v13 = v22;
      v37 = *((_OWORD *)i + 1);
      v14 = **((_QWORD **)this + 1);
      v24 = 0;
      v23 = 1;
      v15 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v14, 48, &v24, &v23);
      if (!v15)
      {
        InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
        Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
        v18 = objc_retainAutorelease(**(id **)(v14 + 48));
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v26 = "CommandQueue.hpp";
          v27 = 1024;
          v28 = 100;
          _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buf"
            "fer is full, unable to grow.\"",
            buf,
            0x12u);
        }
        v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v19, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
      }
      if (v23)
      {
        v16 = objc_retainAutorelease(**(id **)(v14 + 48));
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315906;
          v26 = "CommandQueue.hpp";
          v27 = 1024;
          v28 = 89;
          v29 = 2048;
          v30 = (Phase::Controller::SubmixSystem *)v24;
          v31 = 2048;
          v32 = 48;
          _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
        }
      }
      *(_QWORD *)v15 = &off_24D579E78;
      *((_QWORD *)v15 + 1) = this;
      *((int32x2_t *)v15 + 2) = v13;
      *(_OWORD *)(v15 + 6) = v37;
      *((_BYTE *)v15 + 40) = a3;
      Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v14, 48);
      atomic_store(0, (unsigned __int8 *)(v14 + 40));
    }
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 80));
}

void sub_21654A268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::recursive_mutex *a12)
{
  __cxa_end_catch();
  std::recursive_mutex::unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SubmixSystem::FadeAudioSession(Phase::Controller::SubmixSystem *this, int a2, float a3, float a4, char a5)
{
  std::recursive_mutex *v9;
  Phase::Logger *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  NSObject *v16;
  Phase::Logger *InstancePtr;
  NSObject *v18;
  std::runtime_error *v19;
  NSObject *v20;
  NSObject *v22;
  std::logic_error *exception;
  BOOL v24;
  unint64_t v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  Phase::Controller::SubmixSystem *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if ((a5 & 1) == 0)
    std::terminate();
  v9 = (std::recursive_mutex *)((char *)this + 80);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 80));
  v11 = (uint64_t *)*((_QWORD *)this + 7);
  if (v11)
  {
    v12 = 0;
    do
    {
      v13 = v11[4];
      if (!v13)
      {
        v22 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10) + 384));
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v27 = "CvmSubmixSystem.mm";
          v28 = 1024;
          v29 = 572;
          _os_log_impl(&dword_2164CC000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pSubmix != nullptr is false.", buf, 0x12u);
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "PRECONDITION: pSubmix != nullptr is false.");
      }
      if (*(_DWORD *)(v13 + 48) == a2)
      {
        v40 = *((_OWORD *)v11 + 1);
        v14 = **((_QWORD **)this + 1);
        v25 = 0;
        v24 = 1;
        v15 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v14, 40, &v25, &v24);
        if (!v15)
        {
          InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
          Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
          v18 = objc_retainAutorelease(**(id **)(v14 + 48));
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v27 = "CommandQueue.hpp";
            v28 = 1024;
            v29 = 100;
            _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; b"
              "uffer is full, unable to grow.\"",
              buf,
              0x12u);
          }
          v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v19, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
        }
        if (v24)
        {
          v16 = objc_retainAutorelease(**(id **)(v14 + 48));
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315906;
            v27 = "CommandQueue.hpp";
            v28 = 1024;
            v29 = 89;
            v30 = 2048;
            v31 = (Phase::Controller::SubmixSystem *)v25;
            v32 = 2048;
            v33 = 40;
            _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
          }
        }
        *(_QWORD *)v15 = &off_24D579EA0;
        *((_QWORD *)v15 + 1) = this;
        *((_OWORD *)v15 + 1) = v40;
        *((float *)v15 + 8) = a3;
        *((float *)v15 + 9) = a4;
        v10 = (Phase::Logger *)Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v14, 40);
        atomic_store(0, (unsigned __int8 *)(v14 + 40));
        ++v12;
      }
      v11 = (uint64_t *)*v11;
    }
    while (v11);
    if (v12)
    {
      v20 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10) + 384));
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136316674;
        v27 = "CvmSubmixSystem.mm";
        v28 = 1024;
        v29 = 592;
        v30 = 2048;
        v31 = this;
        v32 = 2048;
        v33 = v12;
        v34 = 1024;
        v35 = a2;
        v36 = 2048;
        v37 = a3;
        v38 = 2048;
        v39 = a4;
        _os_log_impl(&dword_2164CC000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: Faded %zu submixes belonging to session 0x%x to %f over %f seconds", buf, 0x40u);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  std::recursive_mutex::unlock(v9);
  return v12;
}

void sub_21654A6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::recursive_mutex *a12)
{
  std::recursive_mutex::unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SubmixSystem::SetAudioSessionLevel(uint64_t a1, int a2, uint64_t a3, char a4)
{
  std::recursive_mutex *v7;
  _QWORD *v8;
  uint64_t v9;
  Phase::Logger *v10;
  NSObject *v11;
  double v12;
  BOOL v13;
  const char *v14;
  NSObject *v16;
  std::logic_error *exception;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  double v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if ((a4 & 1) == 0)
    std::terminate();
  v7 = (std::recursive_mutex *)(a1 + 80);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 80));
  v8 = *(_QWORD **)(a1 + 56);
  if (v8)
  {
    v9 = 0;
    do
    {
      v10 = (Phase::Logger *)v8[4];
      if (!v10)
      {
        v16 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          v18 = 136315394;
          v19 = "CvmSubmixSystem.mm";
          v20 = 1024;
          v21 = 613;
          _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pSubmix != nullptr is false.", (uint8_t *)&v18, 0x12u);
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "PRECONDITION: pSubmix != nullptr is false.");
      }
      if (*((_DWORD *)v10 + 12) == a2)
      {
        v10 = (Phase::Logger *)(*(uint64_t (**)(Phase::Logger *, uint64_t, uint64_t))(*(_QWORD *)v10 + 232))(v10, a3, 1);
        ++v9;
      }
      v8 = (_QWORD *)*v8;
    }
    while (v8);
    if (v9)
    {
      v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10) + 384));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(float *)a3;
        v13 = *(_BYTE *)(a3 + 4) == 0;
        v18 = 136316674;
        v19 = "CvmSubmixSystem.mm";
        if (v13)
          v14 = "NO";
        else
          v14 = "YES";
        v20 = 1024;
        v21 = 625;
        v22 = 2048;
        v23 = a1;
        v24 = 2048;
        v25 = v9;
        v26 = 1024;
        v27 = a2;
        v28 = 2048;
        v29 = v12;
        v30 = 2080;
        v31 = v14;
        _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: Setting %zu submixes belonging to session 0x%x to %f - muted: %s", (uint8_t *)&v18, 0x40u);
      }
    }
  }
  else
  {
    v9 = 0;
  }
  std::recursive_mutex::unlock(v7);
  return v9;
}

void sub_21654A93C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  void *v2;

  __cxa_free_exception(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SubmixSystem::SetAudioSessionLevelInVolumeCategoryAndMode(Phase::Controller::SubmixSystem *this, NSString *a2, NSString *a3, char a4)
{
  NSString *v7;
  NSString *v8;
  NSString *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t AudioSessionVolumeIfInVolumeCategoryAndMode;
  int v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v24;
  std::logic_error *exception;
  unint64_t v26;
  int v27;
  _OWORD v28[2];
  int v29;
  _OWORD v30[2];
  int v31;
  _BYTE buf[12];
  __int16 v33;
  int v34;
  __int16 v35;
  Phase::Controller::SubmixSystem *v36;
  __int16 v37;
  _BYTE v38[28];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  if ((a4 & 1) == 0)
    std::terminate();
  v9 = v8;
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 80));
  memset(v30, 0, sizeof(v30));
  v31 = 1065353216;
  memset(v28, 0, sizeof(v28));
  v29 = 1065353216;
  v11 = (_QWORD *)*((_QWORD *)this + 7);
  if (!v11)
  {
    v12 = 0;
    goto LABEL_24;
  }
  v12 = 0;
  do
  {
    v13 = (unsigned int *)v11[4];
    if (!v13)
    {
      v24 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v10) + 384));
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "CvmSubmixSystem.mm";
        v33 = 1024;
        v34 = 656;
        _os_log_impl(&dword_2164CC000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pSubmix != nullptr is false.", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "PRECONDITION: pSubmix != nullptr is false.");
    }
    v14 = v13[12];
    v15 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>>>::find<unsigned int>(*(uint64_t *)&v30[0], *((unint64_t *)&v30[0] + 1), v13[12]);
    v10 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>>>::find<unsigned int>(*(uint64_t *)&v28[0], *((unint64_t *)&v28[0] + 1), v14);
    if (v15)
      goto LABEL_6;
    if (v10)
      goto LABEL_9;
    AudioSessionVolumeIfInVolumeCategoryAndMode = Phase::Controller::SessionManager::GetAudioSessionVolumeIfInVolumeCategoryAndMode(*((Phase::Controller::SessionManager **)this + 35), v14, v7, v9, 1);
    v26 = AudioSessionVolumeIfInVolumeCategoryAndMode;
    v27 = v17;
    if (!(_BYTE)v17)
    {
      v10 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>>>::__emplace_unique_key_args<unsigned int,unsigned int const&,std::optional<Phase::Controller::SessionManager::SessionVolume>&>((float *)v28, v14, v14, (uint64_t)&v26);
      goto LABEL_9;
    }
    v15 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>>>::__emplace_unique_key_args<unsigned int,unsigned int const&,std::optional<Phase::Controller::SessionManager::SessionVolume>&>((float *)v30, v14, v14, (uint64_t)&v26);
    v18 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v15)
                                                                                        + 384)));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "CvmSubmixSystem.mm";
      v19 = "YES";
      if ((AudioSessionVolumeIfInVolumeCategoryAndMode & 0xFF00000000) == 0)
        v19 = "NO";
      v33 = 1024;
      v34 = 689;
      v35 = 2048;
      v36 = this;
      v37 = 1024;
      *(_DWORD *)v38 = v14;
      *(_WORD *)&v38[4] = 2048;
      *(double *)&v38[6] = *(float *)&AudioSessionVolumeIfInVolumeCategoryAndMode;
      *(_WORD *)&v38[14] = 2080;
      *(_QWORD *)&v38[16] = v19;
      _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: session 0x%x volume: queried %f, muted %s", buf, 0x36u);
    }

    if (v15)
    {
LABEL_6:
      if (!*((_BYTE *)v15 + 28))
        std::__throw_bad_optional_access[abi:ne180100]();
      *(_QWORD *)buf = *(uint64_t *)((char *)v15 + 20);
      v10 = (uint64_t *)(*(uint64_t (**)(unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)v13 + 232))(v13, buf, 1);
      ++v12;
    }
LABEL_9:
    v11 = (_QWORD *)*v11;
  }
  while (v11);
  if (v12)
  {
    v20 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v10)
                                                                                        + 384)));
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      v21 = -[NSString UTF8String](objc_retainAutorelease(v7), "UTF8String");
      v22 = -[NSString UTF8String](objc_retainAutorelease(v9), "UTF8String");
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "CvmSubmixSystem.mm";
      v33 = 1024;
      v34 = 710;
      v35 = 2048;
      v36 = this;
      v37 = 2048;
      *(_QWORD *)v38 = v12;
      *(_WORD *)&v38[8] = 2080;
      *(_QWORD *)&v38[10] = v21;
      *(_WORD *)&v38[18] = 2080;
      *(_QWORD *)&v38[20] = v22;
      _os_log_impl(&dword_2164CC000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d impl@%p: Set volume on %zu submixes belonging to category/mode [%s, %s]", buf, 0x3Au);
    }

  }
LABEL_24:
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v28);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v30);
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 80));

  return v12;
}

void sub_21654AD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::recursive_mutex *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&a15);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&a21);
  std::recursive_mutex::unlock(a12);

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SubmixSystem::SetAudioSessionLevelOnAllSessions(Phase::Controller::SubmixSystem *this, char a2)
{
  std::recursive_mutex *v3;
  Phase::Logger *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t *v9;
  Phase::Logger *AudioSessionVolume;
  Phase::Logger *v11;
  int v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v18;
  std::logic_error *exception;
  Phase::Logger *v20;
  int v21;
  __int128 v22;
  __int128 v23;
  int v24;
  _BYTE buf[12];
  __int16 v26;
  int v27;
  __int16 v28;
  Phase::Controller::SubmixSystem *v29;
  __int16 v30;
  _BYTE v31[24];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if ((a2 & 1) == 0)
    std::terminate();
  v3 = (std::recursive_mutex *)((char *)this + 80);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 80));
  v22 = 0u;
  v23 = 0u;
  v24 = 1065353216;
  v5 = (_QWORD *)*((_QWORD *)this + 7);
  if (v5)
  {
    v6 = 0;
    do
    {
      v7 = (unsigned int *)v5[4];
      if (!v7)
      {
        v18 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4) + 384));
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "CvmSubmixSystem.mm";
          v26 = 1024;
          v27 = 731;
          _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pSubmix != nullptr is false.", buf, 0x12u);
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "PRECONDITION: pSubmix != nullptr is false.");
      }
      v8 = v7[12];
      v9 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>>>::find<unsigned int>(v22, *((unint64_t *)&v22 + 1), v7[12]);
      if (v9)
        goto LABEL_15;
      AudioSessionVolume = (Phase::Logger *)Phase::Controller::SessionManager::GetAudioSessionVolume(*((Phase::Controller::SessionManager **)this + 35), v8, 1);
      v11 = AudioSessionVolume;
      v20 = AudioSessionVolume;
      v21 = v12;
      if ((_BYTE)v12)
      {
        v9 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>>>::__emplace_unique_key_args<unsigned int,unsigned int const&,std::optional<Phase::Controller::SessionManager::SessionVolume>&>((float *)&v22, v8, v8, (uint64_t)&v20);
        v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v9)
                                                                                            + 384)));
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "CvmSubmixSystem.mm";
          v14 = "YES";
          if (((unint64_t)v11 & 0xFF00000000) == 0)
            v14 = "NO";
          v26 = 1024;
          v27 = 759;
          v28 = 2048;
          v29 = this;
          v30 = 1024;
          *(_DWORD *)v31 = v8;
          *(_WORD *)&v31[4] = 2048;
          *(double *)&v31[6] = *(float *)&v11;
          *(_WORD *)&v31[14] = 2080;
          *(_QWORD *)&v31[16] = v14;
          _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: session 0x%x volume: queried %f muted: %s", buf, 0x36u);
        }

      }
      else
      {
        v15 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(AudioSessionVolume) + 384));
        v4 = (Phase::Logger *)os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v4)
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "CvmSubmixSystem.mm";
          v26 = 1024;
          v27 = 764;
          v28 = 2048;
          v29 = this;
          v30 = 1024;
          *(_DWORD *)v31 = v8;
          _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: error: could not get volume for session 0x%x", buf, 0x22u);
        }
      }
      if (v9)
      {
LABEL_15:
        if (!*((_BYTE *)v9 + 28))
          std::__throw_bad_optional_access[abi:ne180100]();
        *(_QWORD *)buf = *(uint64_t *)((char *)v9 + 20);
        v4 = (Phase::Logger *)(*(uint64_t (**)(unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)v7 + 232))(v7, buf, 1);
        ++v6;
      }
      v5 = (_QWORD *)*v5;
    }
    while (v5);
    if (v6)
    {
      v16 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4) + 384));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "CvmSubmixSystem.mm";
        v26 = 1024;
        v27 = 780;
        v28 = 2048;
        v29 = this;
        v30 = 2048;
        *(_QWORD *)v31 = v6;
        *(_WORD *)&v31[8] = 2048;
        *(_QWORD *)&v31[10] = *((_QWORD *)&v23 + 1);
        _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d impl@%p: Set volume on %zu submixes, %zu sessions", buf, 0x30u);
      }
    }
  }
  else
  {
    v6 = 0;
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v22);
  std::recursive_mutex::unlock(v3);
  return v6;
}

void sub_21654B1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::recursive_mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&a17);
  std::recursive_mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t *Phase::Controller::SubmixSystem::GetSubmixesForSource(uint64_t *result, uint64_t *a2, uint64_t **a3)
{
  uint64_t i;

  for (i = result[7]; i; i = *(_QWORD *)i)
  {
    result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 32) + 192))(*(_QWORD *)(i + 32));
    if (result == a2)
      result = std::__tree<Phase::UniqueObjectId>::__emplace_unique_key_args<Phase::UniqueObjectId,Phase::UniqueObjectId const&>(a3, (unint64_t *)(i + 16), (_OWORD *)(i + 16));
  }
  return result;
}

double Phase::Controller::SubmixSystem::GetStats@<D0>(Phase::Controller::SubmixSystem *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  double result;
  __int128 v14;
  _OWORD v15[2];
  _QWORD v16[2];

  v4 = 0;
  v16[1] = *MEMORY[0x24BDAC8D0];
  v16[0] = 0x706050403020100;
  do
  {
    v5 = *((char *)v16 + v4);
    *(_DWORD *)(a2 + 4 * v5) = Phase::Controller::SubmixSystem::GetSubmixCount(this, 1, *((_BYTE *)v16 + v4));
    *(_DWORD *)(a2 + 32 + 4 * v5) = Phase::Controller::SubmixSystem::GetSubmixCount(this, 2, v5);
    *(_DWORD *)(a2 + 64 + 4 * v5) = Phase::Controller::SubmixSystem::GetSubmixCount(this, 3, v5);
    ++v4;
  }
  while (v4 != 8);
  v6 = 0;
  v7 = (_QWORD *)*((_QWORD *)this + 7);
  do
  {
    v8 = __const__ZNK5Phase10Controller12SubmixSystem8GetStatsEv_generatorStates[v6];
    v9 = 0;
    if (v7)
    {
      v10 = v7;
      do
      {
        v11 = *(_QWORD **)(v10[4] + 264);
        if (v11)
        {
          v12 = 0;
          do
          {
            if (*(_DWORD *)(v11[4] + 376) == (_DWORD)v8)
              ++v12;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        else
        {
          v12 = 0;
        }
        v9 += v12;
        v10 = (_QWORD *)*v10;
      }
      while (v10);
    }
    *(_DWORD *)(a2 + 96 + 4 * v8) = v9;
    ++v6;
  }
  while (v6 != 8);
  Phase::Controller::RendererSystem::GetStats(*((_DWORD **)this + 34), (uint64_t)v15);
  result = *(double *)v15;
  v14 = v15[1];
  *(_OWORD *)(a2 + 116) = v15[0];
  *(_OWORD *)(a2 + 132) = v14;
  return result;
}

uint64_t Phase::Controller::SubmixSystem::GetSubmixCount(Phase::Logger *a1, uint64_t a2, unsigned __int8 a3)
{
  _QWORD *v4;
  uint64_t v6;
  int v7;
  NSObject *v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  Phase::Logger *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 384));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315650;
      v11 = "CvmSubmixSystem.mm";
      v12 = 1024;
      v13 = 868;
      v14 = 2048;
      v15 = a1;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: error: requesting submix count for mixer type 'unknown'. Returning 0", (uint8_t *)&v10, 0x1Cu);
    }
    return 0;
  }
  v4 = (_QWORD *)*((_QWORD *)a1 + 7);
  if (!v4)
    return 0;
  v6 = 0;
  v7 = a3;
  do
  {
    if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[4] + 336))(v4[4]) == a2)
    {
      if (*(unsigned __int8 *)(v4[4] + 72) == v7)
        v6 = (v6 + 1);
      else
        v6 = v6;
    }
    v4 = (_QWORD *)*v4;
  }
  while (v4);
  return v6;
}

void Phase::LambdaFunction<Phase::Controller::SubmixSystem::ActivateAudioSession(unsigned int,BOOL,BOOL)::$_0::operator() const(void)::{lambda(void)#1},void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *Phase::LambdaFunction<Phase::Controller::SubmixSystem::ActivateAudioSession(unsigned int,BOOL,BOOL)::$_0::operator() const(void)::{lambda(void)#1},void>::operator()(uint64_t a1)
{
  Phase::Logger *v2;
  _QWORD *result;
  _QWORD *Submix;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;

  v2 = *(Phase::Logger **)(a1 + 8);
  v7 = *(_OWORD *)(a1 + 24);
  result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)v2 + 5, &v7);
  if (result)
  {
    Submix = (_QWORD *)Phase::Controller::SubmixSystem::GetSubmix(v2, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
    v5 = Submix;
    v6 = *Submix;
    if (*(_BYTE *)(a1 + 40))
    {
      (*(void (**)(_QWORD *))(v6 + 56))(Submix);
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, float, float))(*v5 + 224))(v5, *(float *)(a1 + 16), *(float *)(a1 + 20));
    }
    else
    {
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6 + 48))(Submix);
    }
  }
  return result;
}

void Phase::LambdaFunction<Phase::Controller::SubmixSystem::FadeAudioSession(unsigned int,float,float,BOOL)::$_0::operator() const(void)::{lambda(void)#1},void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *Phase::LambdaFunction<Phase::Controller::SubmixSystem::FadeAudioSession(unsigned int,float,float,BOOL)::$_0::operator() const(void)::{lambda(void)#1},void>::operator()(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t Submix;
  __int128 v5;

  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_OWORD *)(a1 + 16);
  result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(v2 + 40), &v5);
  if (result)
  {
    Submix = Phase::Controller::SubmixSystem::GetSubmix(*(Phase::Logger **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    return (_QWORD *)(*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)Submix + 224))(Submix, *(float *)(a1 + 32), *(float *)(a1 + 36));
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[4];
      v2[4] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *__p;
  char v7;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
  {
    if (v7)
    {
      v4 = v3[4];
      v3[4] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    operator delete(v3);
  }
  return v2;
}

Phase::Controller::SpatialSubmix *std::unique_ptr<Phase::Controller::SpatialSubmix>::reset[abi:ne180100](Phase::Controller::SpatialSubmix **a1)
{
  Phase::Controller::SpatialSubmix *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    Phase::Controller::SpatialSubmix::~SpatialSubmix(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

Phase::Controller::ChannelSubmix *std::unique_ptr<Phase::Controller::ChannelSubmix>::reset[abi:ne180100](Phase::Controller::ChannelSubmix **a1)
{
  Phase::Controller::ChannelSubmix *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    Phase::Controller::ChannelSubmix::~ChannelSubmix(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

Phase::Controller::AmbientSubmix *std::unique_ptr<Phase::Controller::AmbientSubmix>::reset[abi:ne180100](Phase::Controller::AmbientSubmix **a1)
{
  Phase::Controller::AmbientSubmix *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    Phase::Controller::AmbientSubmix::~AmbientSubmix(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>>>::__emplace_unique_key_args<Phase::UniqueObjectId,std::pair<Phase::UniqueObjectId,Phase::UniqueObjectId>>(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  __int128 v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = 0;
  v7 = 0xCBF29CE484222325;
  do
    v7 = 0x100000001B3 * (v7 ^ *((char *)a2 + v6++));
  while (v6 != 16);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1])
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  v14 = a3[1];
  *((_OWORD *)v11 + 1) = *a3;
  *((_OWORD *)v11 + 2) = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v11 = *v22;
LABEL_44:
    *v22 = v11;
    goto LABEL_45;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    v23 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_21654B9D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>>>::__emplace_unique_key_args<Phase::UniqueObjectId,std::piecewise_construct_t const&,std::tuple<Phase::UniqueObjectId const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0;
  v8 = 0xCBF29CE484222325;
  do
    v8 = 0x100000001B3 * (v8 ^ *((char *)a2 + v7++));
  while (v7 != 16);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = **a4;
  i[4] = 0;
  i[5] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_44:
    *v22 = i;
    goto LABEL_45;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_21654BC30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>>>::__erase_unique<Phase::UniqueObjectId>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1, a2);
  if (result)
  {
    std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>>>::find<unsigned int>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<Phase::Controller::SessionManager::SessionVolume>>>>::__emplace_unique_key_args<unsigned int,unsigned int const&,std::optional<Phase::Controller::SessionManager::SessionVolume>&>(float *a1, unsigned int a2, int a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v35;

  v8 = a2;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & a2;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == a2)
          {
            if (*((_DWORD *)v12 + 4) == a2)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = a3;
  *(_QWORD *)((char *)v12 + 20) = *(_QWORD *)a4;
  *((_DWORD *)v12 + 7) = *(_DWORD *)(a4 + 8);
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (v9 && (float)(v15 * (float)v9) >= v14)
  {
    v8 = v4;
    goto LABEL_64;
  }
  v16 = 1;
  if (v9 >= 3)
    v16 = (v9 & (v9 - 1)) != 0;
  v17 = v16 | (2 * v9);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = (int8x8_t)v18;
  else
    prime = (int8x8_t)v17;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v9 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v9)
  {
    if (*(_QWORD *)&prime >= v9)
      goto LABEL_60;
    v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v9 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v26 = std::__next_prime(v26);
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
    }
    if (*(_QWORD *)&prime <= v26)
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime >= v9)
    {
      v9 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v35 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v35)
        operator delete(v35);
      v9 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v20 = operator new(8 * *(_QWORD *)&prime);
  v21 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v20;
  if (v21)
    operator delete(v21);
  v22 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
  while (*(_QWORD *)&prime != v22);
  v23 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v23)
  {
    v24 = v23[1];
    v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&prime)
        v24 %= *(_QWORD *)&prime;
    }
    else
    {
      v24 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = a1 + 4;
    v29 = (_QWORD *)*v23;
    if (*v23)
    {
      do
      {
        v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&prime)
            v30 %= *(_QWORD *)&prime;
        }
        else
        {
          v30 &= *(_QWORD *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *v23 = *v29;
          *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
          v29 = v23;
        }
        v30 = v24;
LABEL_56:
        v23 = v29;
        v29 = (_QWORD *)*v29;
        v24 = v30;
      }
      while (v29);
    }
  }
  v9 = (unint64_t)prime;
LABEL_60:
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= v8)
      v8 %= v9;
  }
  else
  {
    v8 = ((_DWORD)v9 - 1) & v8;
  }
LABEL_64:
  v31 = *(_QWORD **)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v32)
  {
    *v12 = *v32;
LABEL_72:
    *v32 = v12;
    goto LABEL_73;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v31[v8] = a1 + 4;
  if (*v12)
  {
    v33 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

void sub_21654C114(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<Phase::UniqueObjectId>::__emplace_unique_key_args<Phase::UniqueObjectId,Phase::UniqueObjectId const&>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<Phase::UniqueObjectId>::__find_equal<Phase::UniqueObjectId>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    std::__tree<Phase::SpatialCategory>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<Phase::UniqueObjectId>::__find_equal<Phase::UniqueObjectId>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v7 = *a3;
    v6 = a3[1];
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = v4[5];
        v10 = v8[4];
        v11 = v7 < v10;
        if (v6 != v9)
          v11 = v6 < v9;
        if (!v11)
          break;
        v4 = (_QWORD *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_15;
      }
      v12 = v10 < v7;
      if (v6 == v9)
        v13 = v12;
      else
        v13 = v9 < v6;
      if (!v13)
        break;
      result = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

Phase::Controller::VoiceData *Phase::Controller::VoiceData::VoiceData(Phase::Controller::VoiceData *this, const Phase::Controller::VoicePoolEntry *a2, uint64_t a3)
{
  float *v5;
  uint64_t *v6;
  _DWORD *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  NSObject *v39;
  std::runtime_error *exception;
  NSObject *v41;
  std::runtime_error *v42;
  char *v43;
  char *v44;
  void *v45;
  _BYTE *v46;
  void *__p[2];
  __int128 v48;
  uint64_t v49;
  void *v50;
  _BYTE *v51;
  _BYTE buf[24];
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  *((_OWORD *)this + 1) = 0u;
  v5 = (float *)((char *)this + 16);
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v6 = (uint64_t *)((char *)this + 56);
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  *(_QWORD *)this = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 1) = a3;
  Phase::Controller::VoicePoolEntry::GetIdsOfParameterOfClass((uint64_t)a2, 5, (char **)&v50);
  v7 = v50;
  if (v51 != v50)
  {
    v8 = 0;
    do
    {
      v9 = v7[v8];
      Phase::Controller::sCreateDefaultParameter((Phase::Controller *)__p, a2, v9);
      *(_DWORD *)buf = v9;
      *(_OWORD *)&buf[8] = *(_OWORD *)__p;
      v53 = v48;
      v54 = v49;
      v10 = std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<int,std::pair<int,Phase::Controller::Parameter<double>>>(v5, v9, (uint64_t)buf);
      if ((v10 & 1) == 0)
      {
        v39 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v10) + 720));
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "CvmVoiceData.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 50;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v9;
          _os_log_impl(&dword_2164CC000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!inserted.second is true]: \"Failed to insert %d parameter\"", buf, 0x18u);
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Failed to insert %d parameter");
      }
      ++v8;
      v7 = v50;
    }
    while (v8 < (v51 - (_BYTE *)v50) >> 2);
  }
  Phase::Controller::VoicePoolEntry::GetIdsOfParameterOfClass((uint64_t)a2, 4, (char **)&v45);
  v11 = v45;
  if (v46 != v45)
  {
    v12 = 0;
    do
    {
      v13 = v11[v12];
      Phase::Controller::sCreateDefaultParameter((Phase::Controller *)__p, a2, v13);
      *(_DWORD *)buf = v13;
      *(_OWORD *)&buf[8] = *(_OWORD *)__p;
      v53 = v48;
      v54 = v49;
      v14 = std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<int,std::pair<int,Phase::Controller::Parameter<double>>>(v5, v13, (uint64_t)buf);
      if ((v14 & 1) == 0)
      {
        v41 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v14) + 720));
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "CvmVoiceData.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 61;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v13;
          _os_log_impl(&dword_2164CC000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!inserted.second is true]: \"Failed to insert %d parameter\"", buf, 0x18u);
        }
        v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v42, "Failed to insert %d parameter");
      }
      ++v12;
      v11 = v45;
    }
    while (v12 < (v46 - (_BYTE *)v45) >> 2);
  }
  Phase::Controller::VoicePoolEntry::GetInputBufferIds(a2, (char **)__p);
  v15 = __p[0];
  v16 = __p[1];
  if (__p[0] != __p[1])
  {
    v17 = (unint64_t *)((char *)this + 72);
    v18 = *((_QWORD *)this + 8);
    do
    {
      if (v18 >= *v17)
      {
        v19 = (uint64_t)(v18 - *v6) >> 5;
        if ((unint64_t)(v19 + 1) >> 59)
          std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
        v20 = *v17 - *v6;
        v21 = v20 >> 4;
        if (v20 >> 4 <= (unint64_t)(v19 + 1))
          v21 = v19 + 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
          v22 = 0x7FFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        *((_QWORD *)&v53 + 1) = (char *)this + 72;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>((uint64_t)this + 72, v22);
        else
          v23 = 0;
        v24 = &v23[32 * v19];
        *(_QWORD *)buf = v23;
        *(_QWORD *)&buf[8] = v24;
        *(_QWORD *)&v53 = &v23[32 * v22];
        *(_DWORD *)v24 = *v15;
        *((_QWORD *)v24 + 1) = 0;
        *((_QWORD *)v24 + 2) = 0;
        v24[24] = 0;
        *(_QWORD *)&buf[16] = v24 + 32;
        std::vector<Phase::Controller::VoiceBufferParameter>::__swap_out_circular_buffer(v6, buf);
        v18 = *((_QWORD *)this + 8);
        std::__split_buffer<Phase::Controller::VoiceBufferParameter>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *(_DWORD *)v18 = *v15;
        *(_QWORD *)(v18 + 8) = 0;
        *(_QWORD *)(v18 + 16) = 0;
        *(_BYTE *)(v18 + 24) = 0;
        v18 += 32;
        *((_QWORD *)this + 8) = v18;
      }
      *((_QWORD *)this + 8) = v18;
      ++v15;
    }
    while (v15 != v16);
  }
  Phase::Controller::VoicePoolEntry::GetOutputBufferIds(a2, &v43);
  v25 = v43;
  v26 = v44;
  if (v43 != v44)
  {
    v27 = (unint64_t *)((char *)this + 72);
    v28 = *((_QWORD *)this + 8);
    do
    {
      if (v28 >= *v27)
      {
        v29 = (uint64_t)(v28 - *v6) >> 5;
        if ((unint64_t)(v29 + 1) >> 59)
          std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
        v30 = *v27 - *v6;
        v31 = v30 >> 4;
        if (v30 >> 4 <= (unint64_t)(v29 + 1))
          v31 = v29 + 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0)
          v32 = 0x7FFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        *((_QWORD *)&v53 + 1) = (char *)this + 72;
        if (v32)
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>((uint64_t)this + 72, v32);
        else
          v33 = 0;
        v34 = &v33[32 * v29];
        *(_QWORD *)buf = v33;
        *(_QWORD *)&buf[8] = v34;
        *(_QWORD *)&v53 = &v33[32 * v32];
        *(_DWORD *)v34 = *(_DWORD *)v25;
        *((_QWORD *)v34 + 1) = 0;
        *((_QWORD *)v34 + 2) = 0;
        v34[24] = 0;
        *(_QWORD *)&buf[16] = v34 + 32;
        std::vector<Phase::Controller::VoiceBufferParameter>::__swap_out_circular_buffer(v6, buf);
        v28 = *((_QWORD *)this + 8);
        std::__split_buffer<Phase::Controller::VoiceBufferParameter>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *(_DWORD *)v28 = *(_DWORD *)v25;
        *(_QWORD *)(v28 + 8) = 0;
        *(_QWORD *)(v28 + 16) = 0;
        *(_BYTE *)(v28 + 24) = 0;
        v28 += 32;
        *((_QWORD *)this + 8) = v28;
      }
      *((_QWORD *)this + 8) = v28;
      v25 += 4;
    }
    while (v25 != v26);
    v25 = v43;
  }
  v36.i64[0] = *((_QWORD *)a2 + 4);
  v35.i64[0] = *((_QWORD *)a2 + 5);
  v35.i64[1] = *((_QWORD *)a2 + 8);
  v36.i64[1] = *((_QWORD *)a2 + 7);
  v37 = (int64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64(v35, v36), 3uLL);
  v37.i64[0] *= 0xAAAAAAAAAAAAAAABLL;
  v37.i64[1] *= 0xAAAAAAAAAAAAAAABLL;
  *((int64x2_t *)this + 5) = vshrq_n_s64(vshlq_n_s64(v37, 0x20uLL), 0x20uLL);
  if (v25)
  {
    v44 = v25;
    operator delete(v25);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  return this;
}

void sub_21654C784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v23);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::sCreateDefaultParameter(Phase::Controller *this, const Phase::Controller::VoicePoolEntry *a2, int a3)
{
  double *Parameter;
  double v5;
  double v6;
  double v7;
  NSObject *v9;
  std::logic_error *exception;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  Parameter = (double *)Phase::Controller::VoicePoolEntry::GetParameter(a2, a3);
  if (!Parameter)
  {
    v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 400));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "VoicePoolEntry.hpp";
      v13 = 1024;
      v14 = 155;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: false is false.", (uint8_t *)&v11, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "POSTCONDITION: false is false.");
  }
  v5 = Parameter[4];
  v6 = Parameter[5];
  v7 = Parameter[6];
  *((_BYTE *)this + 32) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return Phase::Controller::Parameter<double>::Initialize((uint64_t)this, v5, v6, v7);
}

void sub_21654C988(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

Phase::Controller::VoiceData *Phase::Controller::VoiceData::VoiceData(Phase::Controller::VoiceData *this, const Phase::Controller::ProcedureInfo *a2, uint64_t a3)
{
  float *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  _DWORD *v26;
  _DWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  NSObject *v37;
  std::runtime_error *exception;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _BYTE buf[24];
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  *((_OWORD *)this + 1) = 0u;
  v5 = (float *)((char *)this + 16);
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  v6 = (uint64_t *)((char *)this + 56);
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  *(_QWORD *)this = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 1) = a3;
  v7 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) != v7)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v7 + v8;
      v11 = *(_DWORD *)(v10 + 32);
      v12 = *(double *)(v10 + 40);
      v13 = *(double *)(v10 + 48);
      v14 = *(double *)(v10 + 56);
      LOBYTE(v41) = 0;
      v39 = 0u;
      v40 = 0u;
      Phase::Controller::Parameter<double>::Initialize((uint64_t)&v39, v12, v13, v14);
      *(_DWORD *)buf = v11;
      *(_OWORD *)&buf[8] = v39;
      v43 = v40;
      v44 = v41;
      v15 = std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<int,std::pair<int,Phase::Controller::Parameter<double>>>(v5, v11, (uint64_t)buf);
      if ((v15 & 1) == 0)
      {
        v37 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v15) + 720));
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "CvmVoiceData.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 105;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v11;
          _os_log_impl(&dword_2164CC000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!inserted.second is true]: \"Failed to insert %d parameter\"", buf, 0x18u);
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Failed to insert %d parameter");
      }
      ++v9;
      v7 = *((_QWORD *)a2 + 4);
      v8 += 64;
    }
    while (v9 < (*((_QWORD *)a2 + 5) - v7) >> 6);
  }
  v16 = (_DWORD *)*((_QWORD *)a2 + 7);
  v17 = (_DWORD *)*((_QWORD *)a2 + 8);
  if (v16 != v17)
  {
    v18 = (unint64_t *)((char *)this + 72);
    v19 = *((_QWORD *)this + 8);
    do
    {
      if (v19 >= *v18)
      {
        v20 = (uint64_t)(v19 - *v6) >> 5;
        if ((unint64_t)(v20 + 1) >> 59)
          std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
        v21 = *v18 - *v6;
        v22 = v21 >> 4;
        if (v21 >> 4 <= (unint64_t)(v20 + 1))
          v22 = v20 + 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0)
          v23 = 0x7FFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        *((_QWORD *)&v43 + 1) = (char *)this + 72;
        if (v23)
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>((uint64_t)this + 72, v23);
        else
          v24 = 0;
        v25 = &v24[32 * v20];
        *(_QWORD *)buf = v24;
        *(_QWORD *)&buf[8] = v25;
        *(_QWORD *)&v43 = &v24[32 * v23];
        *(_DWORD *)v25 = *v16;
        *((_QWORD *)v25 + 1) = 0;
        *((_QWORD *)v25 + 2) = 0;
        v25[24] = 0;
        *(_QWORD *)&buf[16] = v25 + 32;
        std::vector<Phase::Controller::VoiceBufferParameter>::__swap_out_circular_buffer(v6, buf);
        v19 = *((_QWORD *)this + 8);
        std::__split_buffer<Phase::Controller::VoiceBufferParameter>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *(_DWORD *)v19 = *v16;
        *(_QWORD *)(v19 + 8) = 0;
        *(_QWORD *)(v19 + 16) = 0;
        *(_BYTE *)(v19 + 24) = 0;
        v19 += 32;
        *((_QWORD *)this + 8) = v19;
      }
      *((_QWORD *)this + 8) = v19;
      ++v16;
    }
    while (v16 != v17);
  }
  v26 = (_DWORD *)*((_QWORD *)a2 + 10);
  v27 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v26 != v27)
  {
    v28 = (unint64_t *)((char *)this + 72);
    v29 = *((_QWORD *)this + 8);
    do
    {
      if (v29 >= *v28)
      {
        v30 = (uint64_t)(v29 - *v6) >> 5;
        if ((unint64_t)(v30 + 1) >> 59)
          std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
        v31 = *v28 - *v6;
        v32 = v31 >> 4;
        if (v31 >> 4 <= (unint64_t)(v30 + 1))
          v32 = v30 + 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFE0)
          v33 = 0x7FFFFFFFFFFFFFFLL;
        else
          v33 = v32;
        *((_QWORD *)&v43 + 1) = (char *)this + 72;
        if (v33)
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>((uint64_t)this + 72, v33);
        else
          v34 = 0;
        v35 = &v34[32 * v30];
        *(_QWORD *)buf = v34;
        *(_QWORD *)&buf[8] = v35;
        *(_QWORD *)&v43 = &v34[32 * v33];
        *(_DWORD *)v35 = *v26;
        *((_QWORD *)v35 + 1) = 0;
        *((_QWORD *)v35 + 2) = 0;
        v35[24] = 0;
        *(_QWORD *)&buf[16] = v35 + 32;
        std::vector<Phase::Controller::VoiceBufferParameter>::__swap_out_circular_buffer(v6, buf);
        v29 = *((_QWORD *)this + 8);
        std::__split_buffer<Phase::Controller::VoiceBufferParameter>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *(_DWORD *)v29 = *v26;
        *(_QWORD *)(v29 + 8) = 0;
        *(_QWORD *)(v29 + 16) = 0;
        *(_BYTE *)(v29 + 24) = 0;
        v29 += 32;
        *((_QWORD *)this + 8) = v29;
      }
      *((_QWORD *)this + 8) = v29;
      ++v26;
    }
    while (v26 != v27);
  }
  *((_OWORD *)this + 5) = *(_OWORD *)((char *)a2 + 104);
  return this;
}

void sub_21654CD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v9);
  _Unwind_Resume(a1);
}

void Phase::Controller::VoiceData::SetParameter(Phase::Controller::VoiceData *this, int a2, double a3, int a4)
{
  unint64_t v5;
  uint8x8_t v7;
  unint64_t v8;
  double **v9;
  double *i;
  unint64_t v11;
  NSObject *v12;
  double v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v5 <= a2)
        v8 = a2 % v5;
    }
    else
    {
      v8 = (v5 - 1) & a2;
    }
    v9 = *(double ***)(*((_QWORD *)this + 2) + 8 * v8);
    if (v9)
    {
      for (i = *v9; i; i = *(double **)i)
      {
        v11 = *((_QWORD *)i + 1);
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
          {
            v13 = Phase::Controller::sClamp<double>(this, a3, i[3], i[4]);
            if (v13 != i[6])
            {
              i[6] = v13;
              *((_BYTE *)i + 56) = 1;
            }
            if (a4)
              *((_BYTE *)i + 56) = 1;
            return;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v5)
              v11 %= v5;
          }
          else
          {
            v11 &= v5 - 1;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 384));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v14 = 136315650;
    v15 = "CvmVoiceData.mm";
    v16 = 1024;
    v17 = 149;
    v18 = 1024;
    v19 = a2;
    _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d CvmVoiceData::SetParameter: was called with an invalid inParameterId %d!\n", (uint8_t *)&v14, 0x18u);
  }
}

void Phase::Controller::VoiceData::SetBuffer(Phase::Logger *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a1 + 7);
  if (a2 >= (*((_QWORD *)a1 + 8) - v4) >> 5)
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 384));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "CvmVoiceData.mm";
      v8 = 1024;
      v9 = 162;
      v10 = 2048;
      v11 = a2;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d CvmVoiceData::SetBuffer: was called with an invalid inIndex %lu!\n", (uint8_t *)&v6, 0x1Cu);
    }
  }
  else
  {
    std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100]((_QWORD *)(v4 + 32 * a2 + 8), a3);
  }
}

void Phase::Controller::VoiceData::PackDirtyDspParameters(Phase::Controller::VoiceData *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 4);
  if (v2)
  {
    v4 = 0;
    v5 = a2 + 2;
    do
    {
      if (*((_BYTE *)v2 + 56))
      {
        v6 = v2[6];
        if ((unint64_t)v4 >= *v5)
        {
          v7 = (uint64_t)&v4[-*a2] >> 4;
          if ((unint64_t)(v7 + 1) >> 60)
            std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
          v8 = *v5 - *a2;
          v9 = v8 >> 3;
          if (v8 >> 3 <= (unint64_t)(v7 + 1))
            v9 = v7 + 1;
          if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
            v10 = 0xFFFFFFFFFFFFFFFLL;
          else
            v10 = v9;
          v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)v5, v10);
          v13 = &v11[16 * v7];
          *(_DWORD *)v13 = *((_DWORD *)v2 + 4);
          *((_QWORD *)v13 + 1) = v6;
          v15 = (char *)*a2;
          v14 = (char *)a2[1];
          v16 = v13;
          if (v14 != (char *)*a2)
          {
            do
            {
              *((_OWORD *)v16 - 1) = *((_OWORD *)v14 - 1);
              v16 -= 16;
              v14 -= 16;
            }
            while (v14 != v15);
            v14 = (char *)*a2;
          }
          v4 = v13 + 16;
          *a2 = v16;
          a2[1] = v13 + 16;
          a2[2] = &v11[16 * v12];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_DWORD *)v4 = *((_DWORD *)v2 + 4);
          *((_QWORD *)v4 + 1) = v6;
          v4 += 16;
        }
        a2[1] = v4;
      }
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
}

void sub_21654D18C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double Phase::Controller::VoiceData::CreateDspNodeVoice@<D0>(Phase::Controller::VoiceData *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  void *v49;
  double result;
  __int128 v51;
  char *v52;
  char *v53;
  uint64_t v54;

  *(_OWORD *)(a2 + 8) = 0u;
  v4 = (uint64_t *)(a2 + 8);
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 7);
  v6 = *((_QWORD *)this + 8);
  if (v5 != v6)
  {
    v7 = 0;
    v8 = (unint64_t *)(a2 + 24);
    do
    {
      if (v7 >= *v8)
      {
        v12 = (uint64_t)(v7 - *v4) >> 5;
        if ((unint64_t)(v12 + 1) >> 59)
          std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
        v13 = *v8 - *v4;
        v14 = v13 >> 4;
        if (v13 >> 4 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
          v15 = 0x7FFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        v54 = a2 + 24;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>(a2 + 24, v15);
        else
          v16 = 0;
        v17 = &v16[32 * v12];
        *(_QWORD *)&v51 = v16;
        *((_QWORD *)&v51 + 1) = v17;
        v53 = &v16[32 * v15];
        *(_DWORD *)v17 = *(_DWORD *)v5;
        *((_QWORD *)v17 + 1) = *(_QWORD *)(v5 + 8);
        v18 = *(_QWORD *)(v5 + 16);
        *((_QWORD *)v17 + 2) = v18;
        if (v18)
        {
          v19 = (unint64_t *)(v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v17[24] = *(_BYTE *)(v5 + 24);
        v52 = v17 + 32;
        std::vector<Phase::Controller::VoiceBufferParameter>::__swap_out_circular_buffer(v4, &v51);
        v7 = *(_QWORD *)(a2 + 16);
        std::__split_buffer<Phase::Controller::VoiceBufferParameter>::~__split_buffer((uint64_t)&v51);
      }
      else
      {
        *(_DWORD *)v7 = *(_DWORD *)v5;
        *(_QWORD *)(v7 + 8) = *(_QWORD *)(v5 + 8);
        v9 = *(_QWORD *)(v5 + 16);
        *(_QWORD *)(v7 + 16) = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        *(_BYTE *)(v7 + 24) = *(_BYTE *)(v5 + 24);
        v7 += 32;
      }
      *(_QWORD *)(a2 + 16) = v7;
      v5 += 32;
    }
    while (v5 != v6);
  }
  if (*((_QWORD *)this + 10))
  {
    v21 = 0;
    v22 = (_QWORD *)(a2 + 32);
    v23 = (_QWORD *)(a2 + 48);
    v24 = *(char **)(a2 + 40);
    do
    {
      if ((unint64_t)v24 >= *v23)
      {
        v25 = (uint64_t)&v24[-*v22] >> 4;
        if ((unint64_t)(v25 + 1) >> 60)
          std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
        v26 = *v23 - *v22;
        v27 = v26 >> 3;
        if (v26 >> 3 <= (unint64_t)(v25 + 1))
          v27 = v25 + 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
          v28 = 0xFFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>(a2 + 48, v28);
        v31 = &v29[16 * v25];
        *(_DWORD *)v31 = v21;
        *((_QWORD *)v31 + 1) = 0x3FF0000000000000;
        v33 = *(char **)(a2 + 32);
        v32 = *(char **)(a2 + 40);
        v34 = v31;
        if (v32 != v33)
        {
          do
          {
            *((_OWORD *)v34 - 1) = *((_OWORD *)v32 - 1);
            v34 -= 16;
            v32 -= 16;
          }
          while (v32 != v33);
          v32 = (char *)*v22;
        }
        v24 = v31 + 16;
        *(_QWORD *)(a2 + 32) = v34;
        *(_QWORD *)(a2 + 40) = v31 + 16;
        *(_QWORD *)(a2 + 48) = &v29[16 * v30];
        if (v32)
          operator delete(v32);
      }
      else
      {
        *(_DWORD *)v24 = v21;
        *((_QWORD *)v24 + 1) = 0x3FF0000000000000;
        v24 += 16;
      }
      *(_QWORD *)(a2 + 40) = v24;
      ++v21;
    }
    while (*((_QWORD *)this + 10) > v21);
  }
  if (*((_QWORD *)this + 11))
  {
    v35 = 0;
    v36 = (_QWORD *)(a2 + 56);
    v37 = (_QWORD *)(a2 + 72);
    v38 = *(char **)(a2 + 64);
    do
    {
      if ((unint64_t)v38 >= *v37)
      {
        v39 = (uint64_t)&v38[-*v36] >> 4;
        if ((unint64_t)(v39 + 1) >> 60)
          std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
        v40 = *v37 - *v36;
        v41 = v40 >> 3;
        if (v40 >> 3 <= (unint64_t)(v39 + 1))
          v41 = v39 + 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
          v42 = 0xFFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>(a2 + 72, v42);
        v45 = &v43[16 * v39];
        *(_DWORD *)v45 = v35;
        *((_QWORD *)v45 + 1) = 0x3FF0000000000000;
        v47 = *(char **)(a2 + 56);
        v46 = *(char **)(a2 + 64);
        v48 = v45;
        if (v46 != v47)
        {
          do
          {
            *((_OWORD *)v48 - 1) = *((_OWORD *)v46 - 1);
            v48 -= 16;
            v46 -= 16;
          }
          while (v46 != v47);
          v46 = (char *)*v36;
        }
        v38 = v45 + 16;
        *(_QWORD *)(a2 + 56) = v48;
        *(_QWORD *)(a2 + 64) = v45 + 16;
        *(_QWORD *)(a2 + 72) = &v43[16 * v44];
        if (v46)
          operator delete(v46);
      }
      else
      {
        *(_DWORD *)v38 = v35;
        *((_QWORD *)v38 + 1) = 0x3FF0000000000000;
        v38 += 16;
      }
      *(_QWORD *)(a2 + 64) = v38;
      ++v35;
    }
    while (*((_QWORD *)this + 11) > v35);
  }
  Phase::Controller::VoiceData::PackDirtyDspParameters(this, &v51);
  v49 = *(void **)(a2 + 80);
  if (v49)
  {
    *(_QWORD *)(a2 + 88) = v49;
    operator delete(v49);
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
  }
  result = *(double *)&v51;
  *(_OWORD *)(a2 + 80) = v51;
  *(_QWORD *)(a2 + 96) = v52;
  return result;
}

void sub_21654D568(_Unwind_Exception *a1)
{
  Phase::Controller::DspNodeVoice *v1;

  Phase::Controller::DspNodeVoice::~DspNodeVoice(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<int,std::pair<int,Phase::Controller::Parameter<double>>>(float *a1, int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  char *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v34;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return 0;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (char *)operator new(0x40uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v6;
  *((_DWORD *)v12 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v12 + 7) = *(_QWORD *)(a3 + 40);
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v22)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = a1 + 4;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v30 = *(_QWORD **)a1;
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v31)
  {
    *(_QWORD *)v12 = *v31;
LABEL_72:
    *v31 = v12;
    goto LABEL_73;
  }
  *(_QWORD *)v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v30[v3] = a1 + 4;
  if (*(_QWORD *)v12)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return 1;
}

void sub_21654D998(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<Phase::Controller::VoiceBufferParameter>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_BYTE *)(v6 - 8) = *(_BYTE *)(v2 + v5 - 8);
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<Phase::Controller::VoiceBufferParameter>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](i - 24);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void Phase::Controller::sCatchAll(Phase::Controller *this, const char *a2)
{
  __cxa_rethrow();
}

uint64_t sub_21654DAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, __int16 a11, int a12, __int16 a13, uint64_t a14, __int16 a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  Phase::Logger *v25;
  NSObject *v26;
  uint64_t v27;
  const char *v28;
  Phase::Logger *v29;
  Phase::Logger *v30;
  Phase::Logger *v31;
  Phase::Logger *v32;
  Phase::Logger *v33;
  int v35;
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  int v42;

  if (!a2)
    _Unwind_Resume(exception_object);
  switch(a2)
  {
    case 7:
      v25 = (Phase::Logger *)__cxa_begin_catch(exception_object);
      v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v25) + 384));
      v27 = 3;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        v35 = 136315906;
        v36 = "CvmVoiceManager.mm";
        v37 = 1024;
        v38 = 52;
        v39 = 2080;
        v40 = v23;
        v41 = 1024;
        v42 = 3;
        v28 = "%25s:%-5d %s failed with ErrorCode: %hhd (InvalidId)";
LABEL_22:
        _os_log_impl(&dword_2164CC000, v26, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&v35, 0x22u);
      }
      break;
    case 6:
      v29 = (Phase::Logger *)__cxa_begin_catch(exception_object);
      v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v29) + 384));
      v27 = 4;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        v35 = 136315906;
        v36 = "CvmVoiceManager.mm";
        v37 = 1024;
        v38 = 58;
        v39 = 2080;
        v40 = v23;
        v41 = 1024;
        v42 = 4;
        v28 = "%25s:%-5d %s failed with ErrorCode: %hhd (IdAlreadyExists)";
        goto LABEL_22;
      }
      break;
    case 5:
      v30 = (Phase::Logger *)__cxa_begin_catch(exception_object);
      v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v30) + 384));
      v27 = 6;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        v35 = 136315906;
        v36 = "CvmVoiceManager.mm";
        v37 = 1024;
        v38 = 64;
        v39 = 2080;
        v40 = v23;
        v41 = 1024;
        v42 = 6;
        v28 = "%25s:%-5d %s failed with ErrorCode: %hhd (OutOfMemory)";
        goto LABEL_22;
      }
      break;
    case 4:
      v31 = (Phase::Logger *)__cxa_begin_catch(exception_object);
      v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v31) + 384));
      v27 = 1;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        v35 = 136315906;
        v36 = "CvmVoiceManager.mm";
        v37 = 1024;
        v38 = 70;
        v39 = 2080;
        v40 = v23;
        v41 = 1024;
        v42 = 1;
        v28 = "%25s:%-5d %s failed with ErrorCode: %hhd (InvalidArgument)";
        goto LABEL_22;
      }
      break;
    case 3:
      v32 = (Phase::Logger *)__cxa_begin_catch(exception_object);
      v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v32) + 384));
      v27 = 8;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        v35 = 136315906;
        v36 = "CvmVoiceManager.mm";
        v37 = 1024;
        v38 = 76;
        v39 = 2080;
        v40 = v23;
        v41 = 1024;
        v42 = 8;
        v28 = "%25s:%-5d %s failed with ErrorCode: %hhd (Failed)";
        goto LABEL_22;
      }
      break;
    default:
      v33 = (Phase::Logger *)__cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v33) + 384));
        v27 = 8;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          v35 = 136315906;
          v36 = "CvmVoiceManager.mm";
          v37 = 1024;
          v38 = 82;
          v39 = 2080;
          v40 = v23;
          v41 = 1024;
          v42 = 8;
          v28 = "%25s:%-5d %s failed with runtime ErrorCode: %hhd (Failed)";
          goto LABEL_22;
        }
      }
      else
      {
        v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v33) + 384));
        v27 = 8;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          v35 = 136315906;
          v36 = "CvmVoiceManager.mm";
          v37 = 1024;
          v38 = 88;
          v39 = 2080;
          v40 = v23;
          v41 = 1024;
          v42 = 8;
          v28 = "%25s:%-5d %s failed with logic ErrorCode: %hhd (Failed)";
          goto LABEL_22;
        }
      }
      break;
  }
  __cxa_end_catch();
  return v27;
}

Phase::Controller::VoiceManager *Phase::Controller::VoiceManager::VoiceManager(Phase::Controller::VoiceManager *this)
{
  Phase::Controller::VoiceManager::Implementation *v2;

  v2 = (Phase::Controller::VoiceManager::Implementation *)operator new();
  Phase::Controller::VoiceManager::Implementation::Implementation(v2);
  *(_QWORD *)this = v2;
  return this;
}

void sub_21654DF34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10E0C404FAEF3E0);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::VoiceManager::Implementation::Initialize(Phase::Controller::VoiceManager::Implementation *this, const Phase::Controller::VoiceManagerInitializeParameters *a2, Phase::Controller::VoiceManager *a3)
{
  NSObject *v6;
  _BOOL8 v7;
  Phase::Logger *InstancePtr;
  NSObject *v9;
  int v10;
  const char *v11;
  Phase::Controller::SystemAudioIO::AudioIOUnit *v12;
  uint64_t v13;
  Phase::Logger *v14;
  int v15;
  NSObject *v16;
  char v17;
  Phase::Logger *v18;
  int v19;
  Phase::Logger **v20;
  _BOOL8 IsLayoutSupported;
  uint64_t v22;
  char *v23;
  std::string **v24;
  uint64_t v25;
  uint64_t *i;
  _OWORD *v27;
  unint64_t v28;
  uint64_t *inserted;
  char *v30;
  _BYTE *v31;
  size_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  NSObject *v49;
  std::runtime_error *exception;
  NSObject *v51;
  std::runtime_error *v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  id v58[2];
  void *v59[3];
  _BYTE buf[40];
  _QWORD v61[4];
  int v62;
  void *__p;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t (*v67[7])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v67[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 85) = *((_QWORD *)a2 + 6);
  v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 384));
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "CvmVoiceManager.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 139;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = this;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: initializing", buf, 0x1Cu);
  }
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)v7);
  *((_BYTE *)this + 1001) = *((_BYTE *)InstancePtr + 1549);
  v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 384));
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *((unsigned __int8 *)this + 1001);
    *(_QWORD *)&buf[4] = "CvmVoiceManager.mm";
    *(_DWORD *)buf = 136315906;
    *(_WORD *)&buf[12] = 1024;
    if (v10)
      v11 = "enabled";
    else
      v11 = "disabled";
    *(_DWORD *)&buf[14] = 143;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = this;
    *(_WORD *)&buf[28] = 2080;
    *(_QWORD *)&buf[30] = v11;
    _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: stats logging is %s", buf, 0x26u);
  }
  if (*((_QWORD *)a2 + 8))
  {
    v12 = (Phase::Controller::SystemAudioIO::AudioIOUnit *)operator new();
    Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::AudioIOPlatformAdapter((uint64_t)v12, (uint64_t)a3, *((void **)a2 + 8), *(double *)a2);
  }
  else
  {
    v12 = (Phase::Controller::SystemAudioIO::AudioIOUnit *)operator new();
    Phase::Controller::SystemAudioIO::AudioIOUnit::AudioIOUnit(v12, a3, *(double *)a2);
  }
  v13 = *((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v12 = (Phase::Controller::SystemAudioIO::AudioIOUnit *)*((_QWORD *)this + 86);
  }
  (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *, _QWORD, uint64_t))(*(_QWORD *)v12 + 16))(v12, 0, 1);
  v14 = (Phase::Logger *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 86) + 16))(*((_QWORD *)this + 86), 1, *((unsigned __int8 *)a2 + 56));
  v15 = (int)v14;
  if ((_DWORD)v14)
  {
    v16 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v14) + 384));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "CvmVoiceManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 162;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = this;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v15;
      _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: failed to enable HW input: %d", buf, 0x22u);
    }
    v17 = 0;
  }
  else
  {
    v17 = *((_BYTE *)a2 + 56);
  }
  *((_BYTE *)this + 1000) = v17;
  v18 = (Phase::Logger *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 86) + 24))(*((_QWORD *)this + 86));
  v19 = (int)v18;
  if ((_DWORD)v18)
  {
    v49 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v18) + 384));
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "CvmVoiceManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 171;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = this;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v19;
      _os_log_impl(&dword_2164CC000, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [status != noErr is true]: \"impl@%p: AudioIOUnit::Initialize failed with error code: %d\"", buf, 0x22u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "impl@%p: AudioIOUnit::Initialize failed with error code: %d");
  }
  v20 = (Phase::Logger **)Phase::Controller::TaskManager::GetService<Phase::Controller::DeviceManager>(*(Phase::Logger **)(*((_QWORD *)this + 85) + 48), *(_QWORD *)(*((_QWORD *)this + 85) + 56));
  (*(void (**)(id *__return_ptr))(**((_QWORD **)this + 86) + 96))(v58);
  IsLayoutSupported = Phase::ChannelLayout::IsLayoutSupported((unsigned int **)v59);
  if (!IsLayoutSupported)
  {
    v51 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)IsLayoutSupported)
                                                     + 384));
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmVoiceManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 178;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = this;
      _os_log_impl(&dword_2164CC000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [not ChannelLayout::IsLayoutSupported(outputRoute.mChannelLayout) is true]: \"impl@%p: Output layout not supported, aborting engine initialization.\"", buf, 0x1Cu);
    }
    v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v52, "impl@%p: Output layout not supported, aborting engine initialization.");
  }
  Phase::Controller::DeviceManager::OnAudioOutputRouteChanged(v20, v58);
  v54 = 1;
  *(_QWORD *)&v53 = *(_QWORD *)a2;
  *((_QWORD *)&v53 + 1) = 0x200000080;
  HIDWORD(v53) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 86) + 80))(*((_QWORD *)this + 86));
  v54 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 86) + 72))(*((_QWORD *)this + 86));
  v22 = *((_QWORD *)this + 85);
  v55 = *((_QWORD *)this + 88);
  v56 = v22;
  v23 = (char *)this + 664;
  v57 = (char *)this + 664;
  v24 = (std::string **)operator new();
  std::string::basic_string[abi:ne180100]<0>(buf, "DspVoiceManager");
  Phase::Controller::DSPVoiceManager::DSPVoiceManager(v24, (__int128 *)buf, &v53);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::unique_ptr<Phase::Controller::DSPVoiceManager>::reset[abi:ne180100]((Phase::Controller::DSPVoiceManager::Implementation ***)this + 87, (Phase::Controller::DSPVoiceManager::Implementation **)v24);
  *((_QWORD *)this + 22) = *(_QWORD *)a2;
  memset(v61, 0, sizeof(v61));
  v62 = 1065353216;
  v65 = 0;
  v66 = 0x7FEFFFFFFFFFFFFFLL;
  v25 = *((_QWORD *)a2 + 4);
  *(_QWORD *)&buf[16] = *((_QWORD *)a2 + 3);
  *(_QWORD *)&buf[24] = 0x40E7700000000000;
  __p = 0;
  v64 = 0;
  *(_OWORD *)buf = *(_OWORD *)((char *)a2 + 8);
  *(_QWORD *)&buf[32] = v25;
  if (v61 != (_QWORD *)((char *)a2 + 72))
  {
    v62 = *((_DWORD *)a2 + 26);
    for (i = (uint64_t *)*((_QWORD *)a2 + 11); i; i = (uint64_t *)*i)
    {
      v27 = operator new(0x20uLL);
      *(_QWORD *)v27 = 0;
      v27[1] = *((_OWORD *)i + 1);
      v28 = *((int *)v27 + 4);
      *((_QWORD *)v27 + 1) = v28;
      inserted = std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__node_insert_multi_prepare((uint64_t)v61, v28, (_DWORD *)v27 + 4);
      std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform(v61, v27, inserted);
    }
  }
  if (&__p != (void **)((char *)a2 + 112))
  {
    v30 = (char *)*((_QWORD *)a2 + 14);
    v31 = (_BYTE *)*((_QWORD *)a2 + 15);
    v32 = v31 - v30;
    v33 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v30) >> 3);
    v34 = (uint64_t)v65;
    v35 = (char *)__p;
    if (0xAAAAAAAAAAAAAAABLL * ((v65 - (_BYTE *)__p) >> 3) >= v33)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v64 - (_BYTE *)__p) >> 3) < v33)
      {
        v40 = &v30[8 * ((v64 - (_BYTE *)__p) >> 3)];
        if (v64 != __p)
        {
          memmove(__p, *((const void **)a2 + 14), v64 - (_BYTE *)__p);
          v35 = v64;
        }
        v32 = v31 - v40;
        if (v31 == v40)
          goto LABEL_45;
        v41 = v35;
        v42 = v40;
        goto LABEL_44;
      }
    }
    else
    {
      if (__p)
      {
        v64 = (char *)__p;
        operator delete(__p);
        v34 = 0;
        __p = 0;
        v64 = 0;
        v65 = 0;
      }
      if (v33 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_65;
      v36 = 0xAAAAAAAAAAAAAAABLL * (v34 >> 3);
      v37 = 2 * v36;
      if (2 * v36 <= v33)
        v37 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v30) >> 3);
      v38 = v36 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v37;
      if (v38 > 0xAAAAAAAAAAAAAAALL)
LABEL_65:
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v65, v38);
      __p = v35;
      v64 = v35;
      v65 = &v35[24 * v39];
    }
    if (v31 == v30)
    {
LABEL_45:
      v23 = (char *)this + 664;
      v64 = &v35[v32];
      goto LABEL_46;
    }
    v41 = v35;
    v42 = v30;
LABEL_44:
    memmove(v41, v42, v32);
    goto LABEL_45;
  }
LABEL_46:
  v66 = *((_QWORD *)a2 + 17);
  Phase::Controller::SubmixSystem::Initialize((uint64_t)this + 224, (uint64_t)this + 672, (uint64_t)v23, *((_QWORD *)a2 + 5), *((Phase::Logger **)this + 85), *((_QWORD *)this + 87), (uint64_t)this + 560, (const Phase::Controller::SpatialModelerSystem::InitializeParameters *)buf);
  v43 = *((_QWORD *)this + 87);
  v44 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))operator new();
  Phase::Controller::TapManager::TapManager((uint64_t)v44, *((Phase::Logger **)this + 85), (uint64_t)this + 224, v43);
  v45 = *((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = v44;
  if (v45)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
    v44 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)this + 89);
  }
  v46 = (_QWORD *)*((_QWORD *)this + 85);
  v47 = v46[6];
  if ((unint64_t)(v46[7] - v47) <= 0x240)
  {
    std::vector<std::any>::resize(v46 + 6, 0x13uLL);
    v47 = v46[6];
  }
  if (!*(_QWORD *)(v47 + 576))
  {
    v67[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__any_imp::_SmallHandler<Phase::Controller::TapManager *>::__handle[abi:ne180100];
    v67[1] = v44;
    if (v67 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v47 + 576))
    {
      *(_QWORD *)(v47 + 584) = v44;
      *(_QWORD *)(v47 + 576) = std::__any_imp::_SmallHandler<Phase::Controller::TapManager *>::__handle[abi:ne180100];
      v67[0] = 0;
    }
    std::any::reset[abi:ne180100](v67);
    v67[0] = 0;
    std::vector<Phase::ICommandable *>::resize((uint64_t)(v46 + 9), 0x13uLL, v67);
    *(_QWORD *)(v46[9] + 144) = v44;
  }
  if (__p)
  {
    v64 = (char *)__p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v61);
  if (v59[0])
  {
    v59[1] = v59[0];
    operator delete(v59[0]);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,objc_object * {__strong}>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v58);
  return 0;
}

void sub_21654E7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  const char *v28;

  if (a2)
  {
    __cxa_free_exception(v26);
    Phase::Controller::AudioRouteDescription::~AudioRouteDescription((Phase::Controller::AudioRouteDescription *)&a16);
    __cxa_begin_catch(exception_object);
    Phase::Controller::sCatchAll((Phase::Controller *)"Initialize", v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::Implementation::Destroy(Phase::Controller::VoiceManager::Implementation *this)
{
  Phase::Logger *v2;
  int v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  BOOL v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v11 = (char *)this + 8;
  v12 = std::__shared_mutex_base::try_lock((std::__shared_mutex_base *)((char *)this + 8));
  v2 = (Phase::Logger *)Phase::Controller::VoiceManager::Implementation::AcquireStateLock((uint64_t)this, (uint64_t)&v11, 0, 0.0);
  if (atomic_load((unsigned __int8 *)this))
    __assert_rtn("Destroy", "CvmVoiceManager.mm", 259, "mState == State::Stopped");
  v4 = (int)v2;
  if ((_DWORD)v2)
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v2) + 384));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v14 = "CvmVoiceManager.mm";
      v15 = 1024;
      v16 = 262;
      v17 = 1024;
      v18 = v4;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d AcquireStateLock() failed with error %i", buf, 0x18u);
    }
  }
  v6 = *((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  Phase::Controller::SpatialModelerSystem::Destroy((Phase::Controller::VoiceManager::Implementation *)((char *)this + 560));
  Phase::Controller::SubmixSystem::Destroy((Phase::Controller::VoiceManager::Implementation *)((char *)this + 224));
  std::unique_ptr<Phase::Controller::DSPVoiceManager>::reset[abi:ne180100]((Phase::Controller::DSPVoiceManager::Implementation ***)this + 87, 0);
  v7 = *((_QWORD *)this + 86);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v8 = *((_QWORD *)this + 86);
    *((_QWORD *)this + 86) = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  v9 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v11);
  return 0;
}

void sub_21654EB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::VoiceManager::Implementation::Start(Phase::Controller::VoiceManager::Implementation *this, double a2)
{
  Phase::Logger *InstancePtr;
  Phase::Logger *v5;
  uint64_t v6;
  os_signpost_id_t v7;
  os_signpost_id_t v8;
  const char *v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  Phase::Logger *v14;
  NSObject *v15;
  _QWORD *v17;
  _QWORD *i;
  unsigned __int8 *v19;
  unsigned __int8 v20;
  char *v21;
  BOOL v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  Phase::Controller::VoiceManager::Implementation *v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(this);
  if (*((_BYTE *)InstancePtr + 392))
  {
    v5 = (Phase::Logger *)objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                            + 384)));
    v6 = Phase::Logger::GetInstancePtr(v5);
    v7 = os_signpost_id_generate(**(os_log_t **)(v6 + 384));
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v8 = v7;
      if (os_signpost_enabled((os_log_t)v5))
      {
        v9 = (const char *)*((_QWORD *)this + 22);
        *(_DWORD *)buf = 134217984;
        v24 = v9;
        _os_signpost_emit_with_name_impl(&dword_2164CC000, (os_log_t)v5, OS_SIGNPOST_EVENT, v8, "Phase_CVM_Start", "sr = %.f Hz", buf, 0xCu);
      }
    }

  }
  v10 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 384));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    v24 = "CvmVoiceManager.mm";
    v25 = 1024;
    v26 = 297;
    v27 = 2048;
    v28 = this;
    _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: start", buf, 0x1Cu);
  }
  v21 = (char *)this + 8;
  v22 = std::__shared_mutex_base::try_lock((std::__shared_mutex_base *)((char *)this + 8));
  v11 = Phase::Controller::VoiceManager::Implementation::AcquireStateLock((uint64_t)this, (uint64_t)&v21, 1, a2);
  if (!(_DWORD)v11)
  {
    v12 = atomic_load((unsigned __int8 *)this);
    if (v12 == 1)
    {
LABEL_10:
      v11 = 0;
      goto LABEL_11;
    }
    v14 = (Phase::Logger *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 86) + 40))(*((_QWORD *)this + 86));
    v11 = (uint64_t)v14;
    if (!(_DWORD)v14)
    {
      if (!atomic_load((unsigned __int8 *)this))
      {
        Phase::Controller::DVM::VoiceGraph::AddMaster(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 87) + 72), 0xFFFFFFFFFFFFFFFELL);
        v17 = (_QWORD *)*((_QWORD *)this + 89);
        if (v17)
          Phase::Controller::TapManager::EngineStartNotify(v17);
      }
      atomic_store(1u, (unsigned __int8 *)this);
      for (i = (_QWORD *)*((_QWORD *)this + 72); i; i = (_QWORD *)*i)
      {
        v19 = (unsigned __int8 *)(*(_QWORD *)(i[3] + 80) + 5641);
        v20 = atomic_load(v19);
        if ((v20 & 1) == 0)
          atomic_store(1u, v19);
      }
      goto LABEL_10;
    }
    v15 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v14) + 384));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v24 = "CvmVoiceManager.mm";
      v25 = 1024;
      v26 = 330;
      v27 = 2048;
      v28 = this;
      v29 = 1024;
      v30 = v11;
      _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: could not start audio IO unit, error %d", buf, 0x22u);
    }
  }
LABEL_11:
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v21);
  return v11;
}

void sub_21654EDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::VoiceManager::Implementation::Pause(Phase::Controller::VoiceManager::Implementation *this)
{
  NSObject *v2;
  Phase::Logger *v3;
  int v4;
  NSObject *v5;
  int v6;
  char *v8;
  BOOL v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  Phase::Controller::VoiceManager::Implementation *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 384));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    v11 = "CvmVoiceManager.mm";
    v12 = 1024;
    v13 = 339;
    v14 = 2048;
    v15 = this;
    _os_log_impl(&dword_2164CC000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: received message Pause()", buf, 0x1Cu);
  }
  v8 = (char *)this + 8;
  v9 = std::__shared_mutex_base::try_lock((std::__shared_mutex_base *)((char *)this + 8));
  v3 = (Phase::Logger *)Phase::Controller::VoiceManager::Implementation::AcquireStateLock((uint64_t)this, (uint64_t)&v8, 0, 0.0);
  v4 = (int)v3;
  if ((_DWORD)v3)
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v3) + 384));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v11 = "CvmVoiceManager.mm";
      v12 = 1024;
      v13 = 346;
      v14 = 1024;
      LODWORD(v15) = v4;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d AcquireStateLock() failed with error %i", buf, 0x18u);
    }
  }
  v6 = atomic_load((unsigned __int8 *)this);
  if (v6 == 1)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 86) + 48))(*((_QWORD *)this + 86));
    atomic_store(2u, (unsigned __int8 *)this);
  }
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v8);
  return 0;
}

void sub_21654EFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::VoiceManager::Implementation::Stop(Phase::Controller::VoiceManager::Implementation *this)
{
  NSObject *v2;
  Phase::Logger *v3;
  int v4;
  NSObject *v5;
  uint64_t v7;
  uint64_t **i;
  uint64_t **j;
  char *v12;
  BOOL v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  Phase::Controller::VoiceManager::Implementation *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 384));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    v15 = "CvmVoiceManager.mm";
    v16 = 1024;
    v17 = 364;
    v18 = 2048;
    v19 = this;
    _os_log_impl(&dword_2164CC000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: received message Stop()", buf, 0x1Cu);
  }
  v12 = (char *)this + 8;
  v13 = std::__shared_mutex_base::try_lock((std::__shared_mutex_base *)((char *)this + 8));
  v3 = (Phase::Logger *)Phase::Controller::VoiceManager::Implementation::AcquireStateLock((uint64_t)this, (uint64_t)&v12, 0, 0.0);
  v4 = (int)v3;
  if ((_DWORD)v3)
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v3) + 384));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v15 = "CvmVoiceManager.mm";
      v16 = 1024;
      v17 = 371;
      v18 = 1024;
      LODWORD(v19) = v4;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d AcquireStateLock() failed with error %i", buf, 0x18u);
    }
  }
  if (atomic_load((unsigned __int8 *)this))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 86) + 56))(*((_QWORD *)this + 86));
    Phase::Controller::SpatialModelerSystem::Stop((Phase::Controller::VoiceManager::Implementation *)((char *)this + 560));
    Phase::Controller::SubmixSystem::Stop((Phase::Controller::VoiceManager::Implementation *)((char *)this + 224));
    Phase::Controller::DVM::VoiceGraph::RemoveMaster(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 87) + 72), 0xFFFFFFFFFFFFFFFELL);
    atomic_store(0, (unsigned __int8 *)this);
    v7 = *((_QWORD *)this + 89);
    if (v7)
    {
      for (i = *(uint64_t ***)(v7 + 56); i; i = (uint64_t **)*i)
        (*(void (**)(uint64_t *))(*i[4] + 16))(i[4]);
    }
    if (atomic_load((unsigned __int8 *)this))
      __assert_rtn("Reset", "CvmVoiceManager.mm", 241, "mState == State::Stopped");
    for (j = (uint64_t **)*((_QWORD *)this + 72); j; j = (uint64_t **)*j)
      Phase::Controller::SpatialModelerCategory::Reset((Phase::Controller::SpatialModelerCategory *)j[3]);
    Phase::Controller::SubmixSystem::Reset((Phase::Controller::VoiceManager::Implementation *)((char *)this + 224));
    Phase::Controller::DSPVoiceManager::Implementation::Reset(**((Phase::Controller::DSPVoiceManager::Implementation ***)this
                                                               + 87));
  }
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v12);
  return 0;
}

void sub_21654F224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::VoiceManager::Implementation::Update(Phase::Controller::VoiceManager::Implementation *this, double a2)
{
  uint64_t InstancePtr;
  Phase::Logger *v5;
  Phase::Logger *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t **i;
  Phase::Logger *v10;
  double v11;
  _QWORD *v12;
  uint64_t j;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t k;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t m;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t n;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t ii;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t jj;
  _QWORD *v29;
  _QWORD *v30;
  Phase::Logger *v31;
  NSObject *v32;
  void **v33;
  uint64_t v34;
  Phase::Logger *v35;
  NSObject *v36;
  NSObject *v37;
  char *v39;
  char v40;
  void *__p;
  char v42;
  uint8_t buf[16];
  _QWORD v44[11];
  char v45;
  uint64_t v46;
  _BYTE v47[28];
  uint8_t v48[4];
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  void **v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (a2 <= 0.0)
    return 1;
  InstancePtr = Phase::Logger::GetInstancePtr(this);
  v5 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 896));
  v6 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v5);
  if (*((_BYTE *)v6 + 904))
  {
    v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v6)
                                                                                       + 896)));
    v8 = v7;
    if ((unint64_t)v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v8, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v5, "Phase_CVM_Update", "CVM Update", buf, 2u);
    }

  }
  v39 = (char *)this + 8;
  v40 = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 8));
  Phase::Controller::SubmixSystem::Update((Phase::Controller::VoiceManager::Implementation *)((char *)this + 224), a2);
  for (i = (uint64_t **)*((_QWORD *)this + 72); i; i = (uint64_t **)*i)
    Phase::Controller::SpatialModelerCategory::Update((Phase::Controller::SpatialModelerInstance **)i[3], a2);
  Phase::Controller::DSPVoiceManager::Update(*((Phase::Controller::DSPVoiceManager **)this + 87));
  v10 = (Phase::Logger *)Phase::Controller::TapManager::Update(*((Phase::Controller::TapManager **)this + 89));
  if (*((_BYTE *)this + 1001))
  {
    v11 = *((double *)this + 126) + a2;
    *((double *)this + 126) = v11;
    if (v11 >= *((double *)this + 127))
    {
      Phase::Controller::SubmixSystem::GetStats((Phase::Controller::VoiceManager::Implementation *)((char *)this + 224), (uint64_t)v47);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n=== CVM Statistics @ Time ", 27);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ===\n", 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Submix States (stopped/sleeping/preparing/ready/playing/paused/beginsleeping/sleeping)\n", 87);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Generator States (new/preparing/active/stopping/finished)\n", 58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Renderer States (stopped/playing/paused/resumed)\n", 49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"* Num. Spatial Submixes (s/s/p/r/p/p/b/s): (", 44);
      for (j = 0; j != 28; j += 4)
      {
        v14 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/", 1);
      }
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)")\n", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"* Num. Ambient Submixes (s/s/p/r/p/p/b/s): (", 44);
      for (k = 32; k != 60; k += 4)
      {
        v17 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"/", 1);
      }
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)")\n", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"* Num. Channel Submixes (s/s/p/r/p/p/b/s): (", 44);
      for (m = 64; m != 92; m += 4)
      {
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"/", 1);
      }
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)")\n", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"* Num. Generators (n/p/a/s/f): (", 32);
      for (n = 96; n != 112; n += 4)
      {
        v23 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"/", 1);
      }
      v24 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)")\n", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"* Num. Convolution Renderers (s/p/p/r): (", 41);
      for (ii = 116; ii != 128; ii += 4)
      {
        v26 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"/", 1);
      }
      v27 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)")\n", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"* Num. Matrix Renderers (s/p/p/r): (", 36);
      for (jj = 132; jj != 144; jj += 4)
      {
        v29 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"/", 1);
      }
      v30 = (_QWORD *)std::ostream::operator<<();
      v31 = (Phase::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)")\n", 2);
      v32 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v31)
                                                                                          + 384)));
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        v33 = v42 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)v48 = 136315650;
        v49 = "CvmVoiceManager.mm";
        v50 = 1024;
        v51 = 1410;
        v52 = 2080;
        v53 = v33;
        _os_log_impl(&dword_2164CC000, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", v48, 0x1Cu);
        if (v42 < 0)
          operator delete(__p);
      }

      *((_QWORD *)this + 126) = 0;
      *(_QWORD *)buf = *MEMORY[0x24BEDB7F0];
      v34 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v44[0] = v34;
      v44[1] = MEMORY[0x24BEDB848] + 16;
      if (v45 < 0)
        operator delete((void *)v44[9]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      v10 = (Phase::Logger *)MEMORY[0x2199F9CD4](&v46);
    }
    *((double *)this + 128) = *((double *)this + 128) + a2;
  }
  v35 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v10);
  if (*((_BYTE *)v35 + 904))
  {
    v36 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v35)
                                                                                        + 896)));
    v37 = v36;
    if ((unint64_t)v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v36))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v37, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v5, "Phase_CVM_Update", (const char *)&unk_21676613F, buf, 2u);
    }

  }
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v39);
  return 0;
}

void sub_21654F858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va1);
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21654F938(void *a1, int a2)
{
  const char *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    Phase::Controller::sCatchAll((Phase::Controller *)"Update", v2);
  }
  JUMPOUT(0x21654F930);
}

void sub_21654F954()
{
  __cxa_end_catch();
  JUMPOUT(0x21654F358);
}

void sub_21654F95C()
{
  __cxa_end_catch();
  JUMPOUT(0x21654F928);
}

void sub_21654F968(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x21654F930);
}

uint64_t Phase::Controller::VoiceManager::Implementation::CreateSpatialSubmix(Phase::Controller::VoiceManager::Implementation *this, const Phase::Controller::CreateSpatialSubmixParameters *a2)
{
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  Phase::Controller::VoiceManager::Implementation *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)a2 + 10))
  {
    if (*(_QWORD *)a2)
    {
      if (*((_QWORD *)a2 + 3))
      {
        Phase::Controller::SubmixSystem::CreateSpatialSubmix((Phase::Controller::VoiceManager::Implementation *)((char *)this + 224), a2);
        return 0;
      }
      v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 384));
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v11 = *((_QWORD *)a2 + 3);
        v12 = 136315906;
        v13 = "CvmVoiceManager.mm";
        v14 = 1024;
        v15 = 526;
        v16 = 2048;
        v17 = this;
        v18 = 2048;
        v19 = v11;
        v6 = "%25s:%-5d impl@%p: invalid source handle 0x%llx";
        goto LABEL_11;
      }
    }
    else
    {
      v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 384));
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = *(_QWORD *)a2;
        v12 = 136315906;
        v13 = "CvmVoiceManager.mm";
        v14 = 1024;
        v15 = 519;
        v16 = 2048;
        v17 = this;
        v18 = 2048;
        v19 = v10;
        v6 = "%25s:%-5d impl@%p: invalid listener handle 0x%llx";
LABEL_11:
        v7 = v9;
        v8 = 38;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 384));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v12 = 136315650;
      v13 = "CvmVoiceManager.mm";
      v14 = 1024;
      v15 = 512;
      v16 = 2048;
      v17 = this;
      v6 = "%25s:%-5d impl@%p: spatial category parameters argument is empty";
      v7 = v5;
      v8 = 28;
LABEL_12:
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v12, v8);
    }
  }
  return 1;
}

void sub_21654FB7C(_Unwind_Exception *exception_object, int a2)
{
  const char *v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    Phase::Controller::sCatchAll((Phase::Controller *)"CreateSpatialSubmix", v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::Implementation::CreateChannelSubmix(uint64_t a1, uint64_t a2)
{
  _BOOL8 IsLayoutSupported;
  NSObject *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  IsLayoutSupported = Phase::ChannelLayout::IsLayoutSupported((unsigned int **)(a2 + 16));
  if (IsLayoutSupported)
  {
    Phase::Controller::SubmixSystem::CreateChannelSubmix(a1 + 224, (_OWORD *)a2);
    return 0;
  }
  else
  {
    v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)IsLayoutSupported)
                                                    + 384));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 136315650;
      v8 = "CvmVoiceManager.mm";
      v9 = 1024;
      v10 = 538;
      v11 = 2048;
      v12 = a1;
      _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: invalid input channel layout for channel submix", (uint8_t *)&v7, 0x1Cu);
    }
    return 1;
  }
}

void sub_21654FCBC(_Unwind_Exception *exception_object, int a2)
{
  const char *v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    Phase::Controller::sCatchAll((Phase::Controller *)"CreateChannelSubmix", v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::Implementation::CreateAmbientSubmix(Phase::Logger *a1, uint64_t a2)
{
  _BOOL8 IsLayoutSupported;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  NSObject *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  Phase::Logger *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2)
  {
    IsLayoutSupported = Phase::ChannelLayout::IsLayoutSupported((unsigned int **)(a2 + 40));
    if (IsLayoutSupported)
    {
      Phase::Controller::SubmixSystem::CreateAmbientSubmix((uint64_t)a1 + 224, a2);
      return 0;
    }
    v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)IsLayoutSupported)
                                                     + 384));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = 136315650;
      v13 = "CvmVoiceManager.mm";
      v14 = 1024;
      v15 = 556;
      v16 = 2048;
      v17 = a1;
      v8 = "%25s:%-5d impl@%p: invalid input channel layout to create ambient submix";
      v9 = v11;
      v10 = 28;
      goto LABEL_8;
    }
  }
  else
  {
    v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 384));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)a2;
      v12 = 136315906;
      v13 = "CvmVoiceManager.mm";
      v14 = 1024;
      v15 = 550;
      v16 = 2048;
      v17 = a1;
      v18 = 2048;
      v19 = v7;
      v8 = "%25s:%-5d impl@%p: invalid listener handle 0x%llx";
      v9 = v6;
      v10 = 38;
LABEL_8:
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v12, v10);
    }
  }
  return 1;
}

void sub_21654FE90(_Unwind_Exception *exception_object, int a2)
{
  const char *v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    Phase::Controller::sCatchAll((Phase::Controller *)"CreateAmbientSubmix", v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::Implementation::DestroySubmix(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t **i;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  _QWORD *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 384));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 136315906;
    v11 = "CvmVoiceManager.mm";
    v12 = 1024;
    v13 = 568;
    v14 = 2048;
    v15 = a1;
    v16 = 2048;
    v17 = a2;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: received message DestroySubmix(%llu)", (uint8_t *)&v10, 0x26u);
  }
  Phase::Controller::SubmixSystem::Destroy((Phase::Logger *)(a1 + 28), a2, a3);
  v7 = a1[89];
  if (v7)
  {
    for (i = *(uint64_t ***)(v7 + 56); i; i = (uint64_t **)*i)
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*i[4] + 56))(i[4], a2, a3);
  }
  return 0;
}

void sub_216550004(_Unwind_Exception *exception_object, int a2)
{
  const char *v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    Phase::Controller::sCatchAll((Phase::Controller *)"DestroySubmix", v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::Implementation::SetSubmixParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t Submix;

  Submix = Phase::Controller::SubmixSystem::GetSubmix((Phase::Logger *)(a1 + 224), a2, a3);
  (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)Submix + 144))(Submix, a4, a5);
  return 0;
}

void sub_2165500AC(void *a1)
{
  const char *v1;

  __cxa_begin_catch(a1);
  Phase::Controller::sCatchAll((Phase::Controller *)"SetSubmixParameter", v1);
}

void sub_2165500BC()
{
  __cxa_end_catch();
  JUMPOUT(0x21655009CLL);
}

void sub_2165500CC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::VoiceManager::Implementation::SetSubmixParameterData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t Submix;

  Submix = Phase::Controller::SubmixSystem::GetSubmix((Phase::Logger *)(a1 + 224), a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)Submix + 152))(Submix, a4, a5, a6);
  return 0;
}

void sub_216550130(void *a1)
{
  const char *v1;

  __cxa_begin_catch(a1);
  Phase::Controller::sCatchAll((Phase::Controller *)"SetSubmixParameterData", v1);
}

void sub_216550140()
{
  __cxa_end_catch();
  JUMPOUT(0x216550120);
}

void sub_216550150(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::VoiceManager::Implementation::SetSpatialCategorySendLevel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t Submix;

  Submix = Phase::Controller::SubmixSystem::GetSubmix((Phase::Logger *)(a1 + 224), a2, a3);
  (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)Submix + 248))(Submix, a4, a5);
  return 0;
}

void sub_2165501AC(void *a1)
{
  const char *v1;

  __cxa_begin_catch(a1);
  Phase::Controller::sCatchAll((Phase::Controller *)"SetSpatialCategorySendLevel", v1);
}

void sub_2165501BC()
{
  __cxa_end_catch();
  JUMPOUT(0x21655019CLL);
}

void sub_2165501CC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::VoiceManager::Implementation::SetSpatialCategoryParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t Submix;

  Submix = Phase::Controller::SubmixSystem::GetSubmix((Phase::Logger *)(a1 + 224), a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)Submix + 256))(Submix, a4, a5, a6);
  return 0;
}

void sub_216550230(void *a1)
{
  const char *v1;

  __cxa_begin_catch(a1);
  Phase::Controller::sCatchAll((Phase::Controller *)"SetSpatialCategoryParameter", v1);
}

void sub_216550240()
{
  __cxa_end_catch();
  JUMPOUT(0x216550220);
}

void sub_216550250(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::VoiceManager::Implementation::SetSpatialCategoryUpdateRate(unsigned __int8 *a1, int a2, double a3)
{
  NSObject *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  char *v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  __int128 v69;
  char *v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  __int128 v79;
  _BYTE __p[28];
  __int16 v82;
  int v83;
  __int16 v84;
  double v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 384));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__p = 136316162;
    *(_QWORD *)&__p[4] = "CvmVoiceManager.mm";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = 726;
    *(_WORD *)&__p[18] = 2048;
    *(_QWORD *)&__p[20] = a1;
    v82 = 1024;
    v83 = a2;
    v84 = 2048;
    v85 = a3;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: received message SetSpatialCategoryUpdateRate(spatial category: %d, value: %f)", __p, 0x2Cu);
  }
  v7 = (char *)operator new(0x18uLL);
  *(_DWORD *)v7 = a2;
  *(_QWORD *)(v7 + 4) = 0x100000001;
  *((_DWORD *)v7 + 3) = 1;
  *((double *)v7 + 2) = a3;
  *(_QWORD *)&__p[8] = v7 + 24;
  *(_QWORD *)&__p[16] = v7 + 24;
  *(_QWORD *)__p = v7;
  v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], 2uLL);
  v10 = *(char **)__p;
  v11 = *(char **)&__p[8];
  *((_DWORD *)v9 + 6) = a2;
  v12 = v9 + 24;
  v13 = &v9[24 * v8];
  *(_QWORD *)(v9 + 28) = 0x200000001;
  *((_DWORD *)v9 + 9) = 1;
  *((double *)v9 + 5) = a3;
  v14 = v9 + 48;
  if (v11 != v10)
  {
    do
    {
      v15 = *(_OWORD *)(v11 - 24);
      *((_QWORD *)v12 - 1) = *((_QWORD *)v11 - 1);
      *(_OWORD *)(v12 - 24) = v15;
      v12 -= 24;
      v11 -= 24;
    }
    while (v11 != v10);
    v10 = *(char **)__p;
  }
  *(_QWORD *)__p = v12;
  *(_QWORD *)&__p[8] = v9 + 48;
  *(_QWORD *)&__p[16] = &v9[24 * v8];
  if (v10)
  {
    operator delete(v10);
    v13 = *(char **)&__p[16];
  }
  *(_QWORD *)&__p[8] = v9 + 48;
  if (v14 >= v13)
  {
    v17 = *(char **)__p;
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-*(_QWORD *)__p] >> 3);
    v19 = v18 + 1;
    if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*(_QWORD *)__p] >> 3);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0x555555555555555)
      v21 = 0xAAAAAAAAAAAAAAALL;
    else
      v21 = v19;
    if (v21)
    {
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v21);
      v17 = *(char **)__p;
      v14 = *(char **)&__p[8];
    }
    else
    {
      v22 = 0;
    }
    v23 = &v22[24 * v18];
    v13 = &v22[24 * v21];
    *(_DWORD *)v23 = a2;
    *(_QWORD *)(v23 + 4) = 0x300000001;
    *((_DWORD *)v23 + 3) = 1;
    *((double *)v23 + 2) = a3;
    v16 = v23 + 24;
    if (v14 != v17)
    {
      do
      {
        v24 = *(_OWORD *)(v14 - 24);
        *((_QWORD *)v23 - 1) = *((_QWORD *)v14 - 1);
        *(_OWORD *)(v23 - 24) = v24;
        v23 -= 24;
        v14 -= 24;
      }
      while (v14 != v17);
      v17 = *(char **)__p;
    }
    *(_QWORD *)__p = v23;
    *(_QWORD *)&__p[8] = v16;
    *(_QWORD *)&__p[16] = v13;
    if (v17)
    {
      operator delete(v17);
      v13 = *(char **)&__p[16];
    }
  }
  else
  {
    *((_DWORD *)v9 + 12) = a2;
    *(_QWORD *)(v9 + 52) = 0x300000001;
    *((_DWORD *)v9 + 15) = 1;
    *((double *)v9 + 8) = a3;
    v16 = v9 + 72;
  }
  *(_QWORD *)&__p[8] = v16;
  if (v16 >= v13)
  {
    v26 = *(char **)__p;
    v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v16[-*(_QWORD *)__p] >> 3);
    v28 = v27 + 1;
    if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*(_QWORD *)__p] >> 3);
    if (2 * v29 > v28)
      v28 = 2 * v29;
    if (v29 >= 0x555555555555555)
      v30 = 0xAAAAAAAAAAAAAAALL;
    else
      v30 = v28;
    if (v30)
    {
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v30);
      v26 = *(char **)__p;
      v16 = *(char **)&__p[8];
    }
    else
    {
      v31 = 0;
    }
    v32 = &v31[24 * v27];
    v13 = &v31[24 * v30];
    *(_DWORD *)v32 = a2;
    *(_QWORD *)(v32 + 4) = 0x100000002;
    *((_DWORD *)v32 + 3) = 1;
    *((double *)v32 + 2) = a3;
    v25 = v32 + 24;
    if (v16 != v26)
    {
      do
      {
        v33 = *(_OWORD *)(v16 - 24);
        *((_QWORD *)v32 - 1) = *((_QWORD *)v16 - 1);
        *(_OWORD *)(v32 - 24) = v33;
        v32 -= 24;
        v16 -= 24;
      }
      while (v16 != v26);
      v26 = *(char **)__p;
    }
    *(_QWORD *)__p = v32;
    *(_QWORD *)&__p[8] = v25;
    *(_QWORD *)&__p[16] = v13;
    if (v26)
    {
      operator delete(v26);
      v13 = *(char **)&__p[16];
    }
  }
  else
  {
    *(_DWORD *)v16 = a2;
    *(_QWORD *)(v16 + 4) = 0x100000002;
    *((_DWORD *)v16 + 3) = 1;
    *((double *)v16 + 2) = a3;
    v25 = v16 + 24;
  }
  *(_QWORD *)&__p[8] = v25;
  if (v25 >= v13)
  {
    v35 = *(char **)__p;
    v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v25[-*(_QWORD *)__p] >> 3);
    v37 = v36 + 1;
    if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*(_QWORD *)__p] >> 3);
    if (2 * v38 > v37)
      v37 = 2 * v38;
    if (v38 >= 0x555555555555555)
      v39 = 0xAAAAAAAAAAAAAAALL;
    else
      v39 = v37;
    if (v39)
    {
      v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v39);
      v35 = *(char **)__p;
      v25 = *(char **)&__p[8];
    }
    else
    {
      v40 = 0;
    }
    v41 = &v40[24 * v36];
    v13 = &v40[24 * v39];
    *(_DWORD *)v41 = a2;
    *(_QWORD *)(v41 + 4) = 0x200000002;
    *((_DWORD *)v41 + 3) = 1;
    *((double *)v41 + 2) = a3;
    v34 = v41 + 24;
    if (v25 != v35)
    {
      do
      {
        v42 = *(_OWORD *)(v25 - 24);
        *((_QWORD *)v41 - 1) = *((_QWORD *)v25 - 1);
        *(_OWORD *)(v41 - 24) = v42;
        v41 -= 24;
        v25 -= 24;
      }
      while (v25 != v35);
      v35 = *(char **)__p;
    }
    *(_QWORD *)__p = v41;
    *(_QWORD *)&__p[8] = v34;
    *(_QWORD *)&__p[16] = v13;
    if (v35)
    {
      operator delete(v35);
      v13 = *(char **)&__p[16];
    }
  }
  else
  {
    *(_DWORD *)v25 = a2;
    *(_QWORD *)(v25 + 4) = 0x200000002;
    *((_DWORD *)v25 + 3) = 1;
    *((double *)v25 + 2) = a3;
    v34 = v25 + 24;
  }
  *(_QWORD *)&__p[8] = v34;
  if (v34 >= v13)
  {
    v44 = *(char **)__p;
    v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v34[-*(_QWORD *)__p] >> 3);
    v46 = v45 + 1;
    if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*(_QWORD *)__p] >> 3);
    if (2 * v47 > v46)
      v46 = 2 * v47;
    if (v47 >= 0x555555555555555)
      v48 = 0xAAAAAAAAAAAAAAALL;
    else
      v48 = v46;
    if (v48)
    {
      v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v48);
      v44 = *(char **)__p;
      v34 = *(char **)&__p[8];
    }
    else
    {
      v49 = 0;
    }
    v50 = &v49[24 * v45];
    v13 = &v49[24 * v48];
    *(_DWORD *)v50 = a2;
    *(_QWORD *)(v50 + 4) = 0x300000002;
    *((_DWORD *)v50 + 3) = 1;
    *((double *)v50 + 2) = a3;
    v43 = v50 + 24;
    if (v34 != v44)
    {
      do
      {
        v51 = *(_OWORD *)(v34 - 24);
        *((_QWORD *)v50 - 1) = *((_QWORD *)v34 - 1);
        *(_OWORD *)(v50 - 24) = v51;
        v50 -= 24;
        v34 -= 24;
      }
      while (v34 != v44);
      v44 = *(char **)__p;
    }
    *(_QWORD *)__p = v50;
    *(_QWORD *)&__p[8] = v43;
    *(_QWORD *)&__p[16] = v13;
    if (v44)
    {
      operator delete(v44);
      v13 = *(char **)&__p[16];
    }
  }
  else
  {
    *(_DWORD *)v34 = a2;
    *(_QWORD *)(v34 + 4) = 0x300000002;
    *((_DWORD *)v34 + 3) = 1;
    *((double *)v34 + 2) = a3;
    v43 = v34 + 24;
  }
  *(_QWORD *)&__p[8] = v43;
  if (v43 >= v13)
  {
    v53 = *(char **)__p;
    v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v43[-*(_QWORD *)__p] >> 3);
    v55 = v54 + 1;
    if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*(_QWORD *)__p] >> 3);
    if (2 * v56 > v55)
      v55 = 2 * v56;
    if (v56 >= 0x555555555555555)
      v57 = 0xAAAAAAAAAAAAAAALL;
    else
      v57 = v55;
    if (v57)
    {
      v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v57);
      v53 = *(char **)__p;
      v43 = *(char **)&__p[8];
    }
    else
    {
      v58 = 0;
    }
    v59 = &v58[24 * v54];
    v13 = &v58[24 * v57];
    *(_DWORD *)v59 = a2;
    *(_QWORD *)(v59 + 4) = 0x100000003;
    *((_DWORD *)v59 + 3) = 1;
    *((double *)v59 + 2) = a3;
    v52 = v59 + 24;
    if (v43 != v53)
    {
      do
      {
        v60 = *(_OWORD *)(v43 - 24);
        *((_QWORD *)v59 - 1) = *((_QWORD *)v43 - 1);
        *(_OWORD *)(v59 - 24) = v60;
        v59 -= 24;
        v43 -= 24;
      }
      while (v43 != v53);
      v53 = *(char **)__p;
    }
    *(_QWORD *)__p = v59;
    *(_QWORD *)&__p[8] = v52;
    *(_QWORD *)&__p[16] = v13;
    if (v53)
    {
      operator delete(v53);
      v13 = *(char **)&__p[16];
    }
  }
  else
  {
    *(_DWORD *)v43 = a2;
    *(_QWORD *)(v43 + 4) = 0x100000003;
    *((_DWORD *)v43 + 3) = 1;
    *((double *)v43 + 2) = a3;
    v52 = v43 + 24;
  }
  *(_QWORD *)&__p[8] = v52;
  if (v52 >= v13)
  {
    v62 = *(char **)__p;
    v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v52[-*(_QWORD *)__p] >> 3);
    v64 = v63 + 1;
    if (v63 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*(_QWORD *)__p] >> 3);
    if (2 * v65 > v64)
      v64 = 2 * v65;
    if (v65 >= 0x555555555555555)
      v66 = 0xAAAAAAAAAAAAAAALL;
    else
      v66 = v64;
    if (v66)
    {
      v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v66);
      v62 = *(char **)__p;
      v52 = *(char **)&__p[8];
    }
    else
    {
      v67 = 0;
    }
    v68 = &v67[24 * v63];
    v13 = &v67[24 * v66];
    *(_DWORD *)v68 = a2;
    *(_QWORD *)(v68 + 4) = 0x200000003;
    *((_DWORD *)v68 + 3) = 1;
    *((double *)v68 + 2) = a3;
    v61 = v68 + 24;
    if (v52 != v62)
    {
      do
      {
        v69 = *(_OWORD *)(v52 - 24);
        *((_QWORD *)v68 - 1) = *((_QWORD *)v52 - 1);
        *(_OWORD *)(v68 - 24) = v69;
        v68 -= 24;
        v52 -= 24;
      }
      while (v52 != v62);
      v62 = *(char **)__p;
    }
    *(_QWORD *)__p = v68;
    *(_QWORD *)&__p[8] = v61;
    *(_QWORD *)&__p[16] = v13;
    if (v62)
    {
      operator delete(v62);
      v13 = *(char **)&__p[16];
    }
  }
  else
  {
    *(_DWORD *)v52 = a2;
    *(_QWORD *)(v52 + 4) = 0x200000003;
    *((_DWORD *)v52 + 3) = 1;
    *((double *)v52 + 2) = a3;
    v61 = v52 + 24;
  }
  *(_QWORD *)&__p[8] = v61;
  if (v61 >= v13)
  {
    v71 = *(char **)__p;
    v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v61[-*(_QWORD *)__p] >> 3);
    v73 = v72 + 1;
    if (v72 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*(_QWORD *)__p] >> 3);
    if (2 * v74 > v73)
      v73 = 2 * v74;
    if (v74 >= 0x555555555555555)
      v75 = 0xAAAAAAAAAAAAAAALL;
    else
      v75 = v73;
    if (v75)
    {
      v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v75);
      v71 = *(char **)__p;
      v61 = *(char **)&__p[8];
    }
    else
    {
      v76 = 0;
    }
    v77 = &v76[24 * v72];
    v78 = &v76[24 * v75];
    *(_DWORD *)v77 = a2;
    *(_QWORD *)(v77 + 4) = 0x300000003;
    *((_DWORD *)v77 + 3) = 1;
    *((double *)v77 + 2) = a3;
    v70 = v77 + 24;
    if (v61 != v71)
    {
      do
      {
        v79 = *(_OWORD *)(v61 - 24);
        *((_QWORD *)v77 - 1) = *((_QWORD *)v61 - 1);
        *(_OWORD *)(v77 - 24) = v79;
        v77 -= 24;
        v61 -= 24;
      }
      while (v61 != v71);
      v71 = *(char **)__p;
    }
    *(_QWORD *)__p = v77;
    *(_QWORD *)&__p[8] = v70;
    *(_QWORD *)&__p[16] = v78;
    if (v71)
      operator delete(v71);
  }
  else
  {
    *(_DWORD *)v61 = a2;
    *(_QWORD *)(v61 + 4) = 0x300000003;
    *((_DWORD *)v61 + 3) = 1;
    *((double *)v61 + 2) = a3;
    v70 = v61 + 24;
  }
  *(_QWORD *)&__p[8] = v70;
  Phase::Controller::SpatialModelerSystem::SetParameters(a1 + 560, (uint64_t *)__p);
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  return 0;
}

void sub_216550B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  const char *v11;

  if (a2)
  {
    if (__p)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    Phase::Controller::sCatchAll((Phase::Controller *)"SetSpatialCategoryUpdateRate", v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::Implementation::SetSpatialCategoryBandCount(unsigned __int8 *a1, int a2, unint64_t a3)
{
  NSObject *v6;
  char *v7;
  double v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  char *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  __int128 v70;
  char *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 v80;
  _BYTE __p[28];
  __int16 v83;
  int v84;
  __int16 v85;
  unint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 384));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__p = 136316162;
    *(_QWORD *)&__p[4] = "CvmVoiceManager.mm";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = 774;
    *(_WORD *)&__p[18] = 2048;
    *(_QWORD *)&__p[20] = a1;
    v83 = 1024;
    v84 = a2;
    v85 = 2048;
    v86 = a3;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: received message SetSpatialCategoryBandCount(spatial category: %d, band count: %zu)", __p, 0x2Cu);
  }
  memset(__p, 0, 24);
  v7 = (char *)operator new(0x18uLL);
  v8 = (double)a3;
  *(_DWORD *)v7 = a2;
  *(_QWORD *)(v7 + 4) = 0x100000001;
  *((_DWORD *)v7 + 3) = 2;
  *((double *)v7 + 2) = (double)a3;
  *(_QWORD *)&__p[8] = v7 + 24;
  *(_QWORD *)&__p[16] = v7 + 24;
  *(_QWORD *)__p = v7;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], 2uLL);
  v11 = *(char **)__p;
  v12 = *(char **)&__p[8];
  *((_DWORD *)v10 + 6) = a2;
  v13 = v10 + 24;
  v14 = &v10[24 * v9];
  *(_QWORD *)(v10 + 28) = 0x200000001;
  *((_DWORD *)v10 + 9) = 2;
  *((double *)v10 + 5) = (double)a3;
  v15 = v10 + 48;
  if (v12 != v11)
  {
    do
    {
      v16 = *(_OWORD *)(v12 - 24);
      *((_QWORD *)v13 - 1) = *((_QWORD *)v12 - 1);
      *(_OWORD *)(v13 - 24) = v16;
      v13 -= 24;
      v12 -= 24;
    }
    while (v12 != v11);
    v11 = *(char **)__p;
  }
  *(_QWORD *)__p = v13;
  *(_QWORD *)&__p[8] = v10 + 48;
  *(_QWORD *)&__p[16] = &v10[24 * v9];
  if (v11)
  {
    operator delete(v11);
    v14 = *(char **)&__p[16];
  }
  *(_QWORD *)&__p[8] = v10 + 48;
  if (v15 >= v14)
  {
    v18 = *(char **)__p;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v15[-*(_QWORD *)__p] >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-*(_QWORD *)__p] >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v20;
    if (v22)
    {
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v22);
      v18 = *(char **)__p;
      v15 = *(char **)&__p[8];
    }
    else
    {
      v23 = 0;
    }
    v24 = &v23[24 * v19];
    v14 = &v23[24 * v22];
    *(_DWORD *)v24 = a2;
    *(_QWORD *)(v24 + 4) = 0x300000001;
    *((_DWORD *)v24 + 3) = 2;
    *((double *)v24 + 2) = v8;
    v17 = v24 + 24;
    if (v15 != v18)
    {
      do
      {
        v25 = *(_OWORD *)(v15 - 24);
        *((_QWORD *)v24 - 1) = *((_QWORD *)v15 - 1);
        *(_OWORD *)(v24 - 24) = v25;
        v24 -= 24;
        v15 -= 24;
      }
      while (v15 != v18);
      v18 = *(char **)__p;
    }
    *(_QWORD *)__p = v24;
    *(_QWORD *)&__p[8] = v17;
    *(_QWORD *)&__p[16] = v14;
    if (v18)
    {
      operator delete(v18);
      v14 = *(char **)&__p[16];
    }
  }
  else
  {
    *((_DWORD *)v10 + 12) = a2;
    *(_QWORD *)(v10 + 52) = 0x300000001;
    *((_DWORD *)v10 + 15) = 2;
    *((double *)v10 + 8) = v8;
    v17 = v10 + 72;
  }
  *(_QWORD *)&__p[8] = v17;
  if (v17 >= v14)
  {
    v27 = *(char **)__p;
    v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v17[-*(_QWORD *)__p] >> 3);
    v29 = v28 + 1;
    if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-*(_QWORD *)__p] >> 3);
    if (2 * v30 > v29)
      v29 = 2 * v30;
    if (v30 >= 0x555555555555555)
      v31 = 0xAAAAAAAAAAAAAAALL;
    else
      v31 = v29;
    if (v31)
    {
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v31);
      v27 = *(char **)__p;
      v17 = *(char **)&__p[8];
    }
    else
    {
      v32 = 0;
    }
    v33 = &v32[24 * v28];
    v14 = &v32[24 * v31];
    *(_DWORD *)v33 = a2;
    *(_QWORD *)(v33 + 4) = 0x100000002;
    *((_DWORD *)v33 + 3) = 2;
    *((double *)v33 + 2) = v8;
    v26 = v33 + 24;
    if (v17 != v27)
    {
      do
      {
        v34 = *(_OWORD *)(v17 - 24);
        *((_QWORD *)v33 - 1) = *((_QWORD *)v17 - 1);
        *(_OWORD *)(v33 - 24) = v34;
        v33 -= 24;
        v17 -= 24;
      }
      while (v17 != v27);
      v27 = *(char **)__p;
    }
    *(_QWORD *)__p = v33;
    *(_QWORD *)&__p[8] = v26;
    *(_QWORD *)&__p[16] = v14;
    if (v27)
    {
      operator delete(v27);
      v14 = *(char **)&__p[16];
    }
  }
  else
  {
    *(_DWORD *)v17 = a2;
    *(_QWORD *)(v17 + 4) = 0x100000002;
    *((_DWORD *)v17 + 3) = 2;
    *((double *)v17 + 2) = v8;
    v26 = v17 + 24;
  }
  *(_QWORD *)&__p[8] = v26;
  if (v26 >= v14)
  {
    v36 = *(char **)__p;
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v26[-*(_QWORD *)__p] >> 3);
    v38 = v37 + 1;
    if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-*(_QWORD *)__p] >> 3);
    if (2 * v39 > v38)
      v38 = 2 * v39;
    if (v39 >= 0x555555555555555)
      v40 = 0xAAAAAAAAAAAAAAALL;
    else
      v40 = v38;
    if (v40)
    {
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v40);
      v36 = *(char **)__p;
      v26 = *(char **)&__p[8];
    }
    else
    {
      v41 = 0;
    }
    v42 = &v41[24 * v37];
    v14 = &v41[24 * v40];
    *(_DWORD *)v42 = a2;
    *(_QWORD *)(v42 + 4) = 0x200000002;
    *((_DWORD *)v42 + 3) = 2;
    *((double *)v42 + 2) = v8;
    v35 = v42 + 24;
    if (v26 != v36)
    {
      do
      {
        v43 = *(_OWORD *)(v26 - 24);
        *((_QWORD *)v42 - 1) = *((_QWORD *)v26 - 1);
        *(_OWORD *)(v42 - 24) = v43;
        v42 -= 24;
        v26 -= 24;
      }
      while (v26 != v36);
      v36 = *(char **)__p;
    }
    *(_QWORD *)__p = v42;
    *(_QWORD *)&__p[8] = v35;
    *(_QWORD *)&__p[16] = v14;
    if (v36)
    {
      operator delete(v36);
      v14 = *(char **)&__p[16];
    }
  }
  else
  {
    *(_DWORD *)v26 = a2;
    *(_QWORD *)(v26 + 4) = 0x200000002;
    *((_DWORD *)v26 + 3) = 2;
    *((double *)v26 + 2) = v8;
    v35 = v26 + 24;
  }
  *(_QWORD *)&__p[8] = v35;
  if (v35 >= v14)
  {
    v45 = *(char **)__p;
    v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v35[-*(_QWORD *)__p] >> 3);
    v47 = v46 + 1;
    if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-*(_QWORD *)__p] >> 3);
    if (2 * v48 > v47)
      v47 = 2 * v48;
    if (v48 >= 0x555555555555555)
      v49 = 0xAAAAAAAAAAAAAAALL;
    else
      v49 = v47;
    if (v49)
    {
      v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v49);
      v45 = *(char **)__p;
      v35 = *(char **)&__p[8];
    }
    else
    {
      v50 = 0;
    }
    v51 = &v50[24 * v46];
    v14 = &v50[24 * v49];
    *(_DWORD *)v51 = a2;
    *(_QWORD *)(v51 + 4) = 0x300000002;
    *((_DWORD *)v51 + 3) = 2;
    *((double *)v51 + 2) = v8;
    v44 = v51 + 24;
    if (v35 != v45)
    {
      do
      {
        v52 = *(_OWORD *)(v35 - 24);
        *((_QWORD *)v51 - 1) = *((_QWORD *)v35 - 1);
        *(_OWORD *)(v51 - 24) = v52;
        v51 -= 24;
        v35 -= 24;
      }
      while (v35 != v45);
      v45 = *(char **)__p;
    }
    *(_QWORD *)__p = v51;
    *(_QWORD *)&__p[8] = v44;
    *(_QWORD *)&__p[16] = v14;
    if (v45)
    {
      operator delete(v45);
      v14 = *(char **)&__p[16];
    }
  }
  else
  {
    *(_DWORD *)v35 = a2;
    *(_QWORD *)(v35 + 4) = 0x300000002;
    *((_DWORD *)v35 + 3) = 2;
    *((double *)v35 + 2) = v8;
    v44 = v35 + 24;
  }
  *(_QWORD *)&__p[8] = v44;
  if (v44 >= v14)
  {
    v54 = *(char **)__p;
    v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v44[-*(_QWORD *)__p] >> 3);
    v56 = v55 + 1;
    if (v55 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-*(_QWORD *)__p] >> 3);
    if (2 * v57 > v56)
      v56 = 2 * v57;
    if (v57 >= 0x555555555555555)
      v58 = 0xAAAAAAAAAAAAAAALL;
    else
      v58 = v56;
    if (v58)
    {
      v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v58);
      v54 = *(char **)__p;
      v44 = *(char **)&__p[8];
    }
    else
    {
      v59 = 0;
    }
    v60 = &v59[24 * v55];
    v14 = &v59[24 * v58];
    *(_DWORD *)v60 = a2;
    *(_QWORD *)(v60 + 4) = 0x100000003;
    *((_DWORD *)v60 + 3) = 2;
    *((double *)v60 + 2) = v8;
    v53 = v60 + 24;
    if (v44 != v54)
    {
      do
      {
        v61 = *(_OWORD *)(v44 - 24);
        *((_QWORD *)v60 - 1) = *((_QWORD *)v44 - 1);
        *(_OWORD *)(v60 - 24) = v61;
        v60 -= 24;
        v44 -= 24;
      }
      while (v44 != v54);
      v54 = *(char **)__p;
    }
    *(_QWORD *)__p = v60;
    *(_QWORD *)&__p[8] = v53;
    *(_QWORD *)&__p[16] = v14;
    if (v54)
    {
      operator delete(v54);
      v14 = *(char **)&__p[16];
    }
  }
  else
  {
    *(_DWORD *)v44 = a2;
    *(_QWORD *)(v44 + 4) = 0x100000003;
    *((_DWORD *)v44 + 3) = 2;
    *((double *)v44 + 2) = v8;
    v53 = v44 + 24;
  }
  *(_QWORD *)&__p[8] = v53;
  if (v53 >= v14)
  {
    v63 = *(char **)__p;
    v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v53[-*(_QWORD *)__p] >> 3);
    v65 = v64 + 1;
    if (v64 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-*(_QWORD *)__p] >> 3);
    if (2 * v66 > v65)
      v65 = 2 * v66;
    if (v66 >= 0x555555555555555)
      v67 = 0xAAAAAAAAAAAAAAALL;
    else
      v67 = v65;
    if (v67)
    {
      v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v67);
      v63 = *(char **)__p;
      v53 = *(char **)&__p[8];
    }
    else
    {
      v68 = 0;
    }
    v69 = &v68[24 * v64];
    v14 = &v68[24 * v67];
    *(_DWORD *)v69 = a2;
    *(_QWORD *)(v69 + 4) = 0x200000003;
    *((_DWORD *)v69 + 3) = 2;
    *((double *)v69 + 2) = v8;
    v62 = v69 + 24;
    if (v53 != v63)
    {
      do
      {
        v70 = *(_OWORD *)(v53 - 24);
        *((_QWORD *)v69 - 1) = *((_QWORD *)v53 - 1);
        *(_OWORD *)(v69 - 24) = v70;
        v69 -= 24;
        v53 -= 24;
      }
      while (v53 != v63);
      v63 = *(char **)__p;
    }
    *(_QWORD *)__p = v69;
    *(_QWORD *)&__p[8] = v62;
    *(_QWORD *)&__p[16] = v14;
    if (v63)
    {
      operator delete(v63);
      v14 = *(char **)&__p[16];
    }
  }
  else
  {
    *(_DWORD *)v53 = a2;
    *(_QWORD *)(v53 + 4) = 0x200000003;
    *((_DWORD *)v53 + 3) = 2;
    *((double *)v53 + 2) = v8;
    v62 = v53 + 24;
  }
  *(_QWORD *)&__p[8] = v62;
  if (v62 >= v14)
  {
    v72 = *(char **)__p;
    v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v62[-*(_QWORD *)__p] >> 3);
    v74 = v73 + 1;
    if (v73 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-*(_QWORD *)__p] >> 3);
    if (2 * v75 > v74)
      v74 = 2 * v75;
    if (v75 >= 0x555555555555555)
      v76 = 0xAAAAAAAAAAAAAAALL;
    else
      v76 = v74;
    if (v76)
    {
      v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v76);
      v72 = *(char **)__p;
      v62 = *(char **)&__p[8];
    }
    else
    {
      v77 = 0;
    }
    v78 = &v77[24 * v73];
    v79 = &v77[24 * v76];
    *(_DWORD *)v78 = a2;
    *(_QWORD *)(v78 + 4) = 0x300000003;
    *((_DWORD *)v78 + 3) = 2;
    *((double *)v78 + 2) = v8;
    v71 = v78 + 24;
    if (v62 != v72)
    {
      do
      {
        v80 = *(_OWORD *)(v62 - 24);
        *((_QWORD *)v78 - 1) = *((_QWORD *)v62 - 1);
        *(_OWORD *)(v78 - 24) = v80;
        v78 -= 24;
        v62 -= 24;
      }
      while (v62 != v72);
      v72 = *(char **)__p;
    }
    *(_QWORD *)__p = v78;
    *(_QWORD *)&__p[8] = v71;
    *(_QWORD *)&__p[16] = v79;
    if (v72)
      operator delete(v72);
  }
  else
  {
    *(_DWORD *)v62 = a2;
    *(_QWORD *)(v62 + 4) = 0x300000003;
    *((_DWORD *)v62 + 3) = 2;
    *((double *)v62 + 2) = v8;
    v71 = v62 + 24;
  }
  *(_QWORD *)&__p[8] = v71;
  Phase::Controller::SpatialModelerSystem::SetParameters(a1 + 560, (uint64_t *)__p);
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  return 0;
}

void sub_216551558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  const char *v11;

  if (a2)
  {
    if (__p)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    Phase::Controller::sCatchAll((Phase::Controller *)"SetSpatialCategoryBandCount", v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::Implementation::SetSpatialCategoryMaxClusterCount(unsigned __int8 *a1, int a2, unint64_t a3)
{
  NSObject *v6;
  char *v7;
  double v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  char *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  __int128 v70;
  char *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 v80;
  _BYTE __p[28];
  __int16 v83;
  int v84;
  __int16 v85;
  unint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 384));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__p = 136316162;
    *(_QWORD *)&__p[4] = "CvmVoiceManager.mm";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = 821;
    *(_WORD *)&__p[18] = 2048;
    *(_QWORD *)&__p[20] = a1;
    v83 = 1024;
    v84 = a2;
    v85 = 2048;
    v86 = a3;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: received message SetSpatialCategoryMaxClusterCount(spatial category: %d, max cluster count: %zu)", __p, 0x2Cu);
  }
  memset(__p, 0, 24);
  v7 = (char *)operator new(0x18uLL);
  v8 = (double)a3;
  *(_DWORD *)v7 = a2;
  *(_QWORD *)(v7 + 4) = 0x100000001;
  *((_DWORD *)v7 + 3) = 5;
  *((double *)v7 + 2) = (double)a3;
  *(_QWORD *)&__p[8] = v7 + 24;
  *(_QWORD *)&__p[16] = v7 + 24;
  *(_QWORD *)__p = v7;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], 2uLL);
  v11 = *(char **)__p;
  v12 = *(char **)&__p[8];
  *((_DWORD *)v10 + 6) = a2;
  v13 = v10 + 24;
  v14 = &v10[24 * v9];
  *(_QWORD *)(v10 + 28) = 0x200000001;
  *((_DWORD *)v10 + 9) = 5;
  *((double *)v10 + 5) = (double)a3;
  v15 = v10 + 48;
  if (v12 != v11)
  {
    do
    {
      v16 = *(_OWORD *)(v12 - 24);
      *((_QWORD *)v13 - 1) = *((_QWORD *)v12 - 1);
      *(_OWORD *)(v13 - 24) = v16;
      v13 -= 24;
      v12 -= 24;
    }
    while (v12 != v11);
    v11 = *(char **)__p;
  }
  *(_QWORD *)__p = v13;
  *(_QWORD *)&__p[8] = v10 + 48;
  *(_QWORD *)&__p[16] = &v10[24 * v9];
  if (v11)
  {
    operator delete(v11);
    v14 = *(char **)&__p[16];
  }
  *(_QWORD *)&__p[8] = v10 + 48;
  if (v15 >= v14)
  {
    v18 = *(char **)__p;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v15[-*(_QWORD *)__p] >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-*(_QWORD *)__p] >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v20;
    if (v22)
    {
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v22);
      v18 = *(char **)__p;
      v15 = *(char **)&__p[8];
    }
    else
    {
      v23 = 0;
    }
    v24 = &v23[24 * v19];
    v14 = &v23[24 * v22];
    *(_DWORD *)v24 = a2;
    *(_QWORD *)(v24 + 4) = 0x300000001;
    *((_DWORD *)v24 + 3) = 5;
    *((double *)v24 + 2) = v8;
    v17 = v24 + 24;
    if (v15 != v18)
    {
      do
      {
        v25 = *(_OWORD *)(v15 - 24);
        *((_QWORD *)v24 - 1) = *((_QWORD *)v15 - 1);
        *(_OWORD *)(v24 - 24) = v25;
        v24 -= 24;
        v15 -= 24;
      }
      while (v15 != v18);
      v18 = *(char **)__p;
    }
    *(_QWORD *)__p = v24;
    *(_QWORD *)&__p[8] = v17;
    *(_QWORD *)&__p[16] = v14;
    if (v18)
    {
      operator delete(v18);
      v14 = *(char **)&__p[16];
    }
  }
  else
  {
    *((_DWORD *)v10 + 12) = a2;
    *(_QWORD *)(v10 + 52) = 0x300000001;
    *((_DWORD *)v10 + 15) = 5;
    *((double *)v10 + 8) = v8;
    v17 = v10 + 72;
  }
  *(_QWORD *)&__p[8] = v17;
  if (v17 >= v14)
  {
    v27 = *(char **)__p;
    v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v17[-*(_QWORD *)__p] >> 3);
    v29 = v28 + 1;
    if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-*(_QWORD *)__p] >> 3);
    if (2 * v30 > v29)
      v29 = 2 * v30;
    if (v30 >= 0x555555555555555)
      v31 = 0xAAAAAAAAAAAAAAALL;
    else
      v31 = v29;
    if (v31)
    {
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v31);
      v27 = *(char **)__p;
      v17 = *(char **)&__p[8];
    }
    else
    {
      v32 = 0;
    }
    v33 = &v32[24 * v28];
    v14 = &v32[24 * v31];
    *(_DWORD *)v33 = a2;
    *(_QWORD *)(v33 + 4) = 0x100000002;
    *((_DWORD *)v33 + 3) = 5;
    *((double *)v33 + 2) = v8;
    v26 = v33 + 24;
    if (v17 != v27)
    {
      do
      {
        v34 = *(_OWORD *)(v17 - 24);
        *((_QWORD *)v33 - 1) = *((_QWORD *)v17 - 1);
        *(_OWORD *)(v33 - 24) = v34;
        v33 -= 24;
        v17 -= 24;
      }
      while (v17 != v27);
      v27 = *(char **)__p;
    }
    *(_QWORD *)__p = v33;
    *(_QWORD *)&__p[8] = v26;
    *(_QWORD *)&__p[16] = v14;
    if (v27)
    {
      operator delete(v27);
      v14 = *(char **)&__p[16];
    }
  }
  else
  {
    *(_DWORD *)v17 = a2;
    *(_QWORD *)(v17 + 4) = 0x100000002;
    *((_DWORD *)v17 + 3) = 5;
    *((double *)v17 + 2) = v8;
    v26 = v17 + 24;
  }
  *(_QWORD *)&__p[8] = v26;
  if (v26 >= v14)
  {
    v36 = *(char **)__p;
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v26[-*(_QWORD *)__p] >> 3);
    v38 = v37 + 1;
    if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-*(_QWORD *)__p] >> 3);
    if (2 * v39 > v38)
      v38 = 2 * v39;
    if (v39 >= 0x555555555555555)
      v40 = 0xAAAAAAAAAAAAAAALL;
    else
      v40 = v38;
    if (v40)
    {
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v40);
      v36 = *(char **)__p;
      v26 = *(char **)&__p[8];
    }
    else
    {
      v41 = 0;
    }
    v42 = &v41[24 * v37];
    v14 = &v41[24 * v40];
    *(_DWORD *)v42 = a2;
    *(_QWORD *)(v42 + 4) = 0x200000002;
    *((_DWORD *)v42 + 3) = 5;
    *((double *)v42 + 2) = v8;
    v35 = v42 + 24;
    if (v26 != v36)
    {
      do
      {
        v43 = *(_OWORD *)(v26 - 24);
        *((_QWORD *)v42 - 1) = *((_QWORD *)v26 - 1);
        *(_OWORD *)(v42 - 24) = v43;
        v42 -= 24;
        v26 -= 24;
      }
      while (v26 != v36);
      v36 = *(char **)__p;
    }
    *(_QWORD *)__p = v42;
    *(_QWORD *)&__p[8] = v35;
    *(_QWORD *)&__p[16] = v14;
    if (v36)
    {
      operator delete(v36);
      v14 = *(char **)&__p[16];
    }
  }
  else
  {
    *(_DWORD *)v26 = a2;
    *(_QWORD *)(v26 + 4) = 0x200000002;
    *((_DWORD *)v26 + 3) = 5;
    *((double *)v26 + 2) = v8;
    v35 = v26 + 24;
  }
  *(_QWORD *)&__p[8] = v35;
  if (v35 >= v14)
  {
    v45 = *(char **)__p;
    v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v35[-*(_QWORD *)__p] >> 3);
    v47 = v46 + 1;
    if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-*(_QWORD *)__p] >> 3);
    if (2 * v48 > v47)
      v47 = 2 * v48;
    if (v48 >= 0x555555555555555)
      v49 = 0xAAAAAAAAAAAAAAALL;
    else
      v49 = v47;
    if (v49)
    {
      v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v49);
      v45 = *(char **)__p;
      v35 = *(char **)&__p[8];
    }
    else
    {
      v50 = 0;
    }
    v51 = &v50[24 * v46];
    v14 = &v50[24 * v49];
    *(_DWORD *)v51 = a2;
    *(_QWORD *)(v51 + 4) = 0x300000002;
    *((_DWORD *)v51 + 3) = 5;
    *((double *)v51 + 2) = v8;
    v44 = v51 + 24;
    if (v35 != v45)
    {
      do
      {
        v52 = *(_OWORD *)(v35 - 24);
        *((_QWORD *)v51 - 1) = *((_QWORD *)v35 - 1);
        *(_OWORD *)(v51 - 24) = v52;
        v51 -= 24;
        v35 -= 24;
      }
      while (v35 != v45);
      v45 = *(char **)__p;
    }
    *(_QWORD *)__p = v51;
    *(_QWORD *)&__p[8] = v44;
    *(_QWORD *)&__p[16] = v14;
    if (v45)
    {
      operator delete(v45);
      v14 = *(char **)&__p[16];
    }
  }
  else
  {
    *(_DWORD *)v35 = a2;
    *(_QWORD *)(v35 + 4) = 0x300000002;
    *((_DWORD *)v35 + 3) = 5;
    *((double *)v35 + 2) = v8;
    v44 = v35 + 24;
  }
  *(_QWORD *)&__p[8] = v44;
  if (v44 >= v14)
  {
    v54 = *(char **)__p;
    v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v44[-*(_QWORD *)__p] >> 3);
    v56 = v55 + 1;
    if (v55 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-*(_QWORD *)__p] >> 3);
    if (2 * v57 > v56)
      v56 = 2 * v57;
    if (v57 >= 0x555555555555555)
      v58 = 0xAAAAAAAAAAAAAAALL;
    else
      v58 = v56;
    if (v58)
    {
      v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v58);
      v54 = *(char **)__p;
      v44 = *(char **)&__p[8];
    }
    else
    {
      v59 = 0;
    }
    v60 = &v59[24 * v55];
    v14 = &v59[24 * v58];
    *(_DWORD *)v60 = a2;
    *(_QWORD *)(v60 + 4) = 0x100000003;
    *((_DWORD *)v60 + 3) = 5;
    *((double *)v60 + 2) = v8;
    v53 = v60 + 24;
    if (v44 != v54)
    {
      do
      {
        v61 = *(_OWORD *)(v44 - 24);
        *((_QWORD *)v60 - 1) = *((_QWORD *)v44 - 1);
        *(_OWORD *)(v60 - 24) = v61;
        v60 -= 24;
        v44 -= 24;
      }
      while (v44 != v54);
      v54 = *(char **)__p;
    }
    *(_QWORD *)__p = v60;
    *(_QWORD *)&__p[8] = v53;
    *(_QWORD *)&__p[16] = v14;
    if (v54)
    {
      operator delete(v54);
      v14 = *(char **)&__p[16];
    }
  }
  else
  {
    *(_DWORD *)v44 = a2;
    *(_QWORD *)(v44 + 4) = 0x100000003;
    *((_DWORD *)v44 + 3) = 5;
    *((double *)v44 + 2) = v8;
    v53 = v44 + 24;
  }
  *(_QWORD *)&__p[8] = v53;
  if (v53 >= v14)
  {
    v63 = *(char **)__p;
    v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v53[-*(_QWORD *)__p] >> 3);
    v65 = v64 + 1;
    if (v64 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-*(_QWORD *)__p] >> 3);
    if (2 * v66 > v65)
      v65 = 2 * v66;
    if (v66 >= 0x555555555555555)
      v67 = 0xAAAAAAAAAAAAAAALL;
    else
      v67 = v65;
    if (v67)
    {
      v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v67);
      v63 = *(char **)__p;
      v53 = *(char **)&__p[8];
    }
    else
    {
      v68 = 0;
    }
    v69 = &v68[24 * v64];
    v14 = &v68[24 * v67];
    *(_DWORD *)v69 = a2;
    *(_QWORD *)(v69 + 4) = 0x200000003;
    *((_DWORD *)v69 + 3) = 5;
    *((double *)v69 + 2) = v8;
    v62 = v69 + 24;
    if (v53 != v63)
    {
      do
      {
        v70 = *(_OWORD *)(v53 - 24);
        *((_QWORD *)v69 - 1) = *((_QWORD *)v53 - 1);
        *(_OWORD *)(v69 - 24) = v70;
        v69 -= 24;
        v53 -= 24;
      }
      while (v53 != v63);
      v63 = *(char **)__p;
    }
    *(_QWORD *)__p = v69;
    *(_QWORD *)&__p[8] = v62;
    *(_QWORD *)&__p[16] = v14;
    if (v63)
    {
      operator delete(v63);
      v14 = *(char **)&__p[16];
    }
  }
  else
  {
    *(_DWORD *)v53 = a2;
    *(_QWORD *)(v53 + 4) = 0x200000003;
    *((_DWORD *)v53 + 3) = 5;
    *((double *)v53 + 2) = v8;
    v62 = v53 + 24;
  }
  *(_QWORD *)&__p[8] = v62;
  if (v62 >= v14)
  {
    v72 = *(char **)__p;
    v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v62[-*(_QWORD *)__p] >> 3);
    v74 = v73 + 1;
    if (v73 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-*(_QWORD *)__p] >> 3);
    if (2 * v75 > v74)
      v74 = 2 * v75;
    if (v75 >= 0x555555555555555)
      v76 = 0xAAAAAAAAAAAAAAALL;
    else
      v76 = v74;
    if (v76)
    {
      v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[16], v76);
      v72 = *(char **)__p;
      v62 = *(char **)&__p[8];
    }
    else
    {
      v77 = 0;
    }
    v78 = &v77[24 * v73];
    v79 = &v77[24 * v76];
    *(_DWORD *)v78 = a2;
    *(_QWORD *)(v78 + 4) = 0x300000003;
    *((_DWORD *)v78 + 3) = 5;
    *((double *)v78 + 2) = v8;
    v71 = v78 + 24;
    if (v62 != v72)
    {
      do
      {
        v80 = *(_OWORD *)(v62 - 24);
        *((_QWORD *)v78 - 1) = *((_QWORD *)v62 - 1);
        *(_OWORD *)(v78 - 24) = v80;
        v78 -= 24;
        v62 -= 24;
      }
      while (v62 != v72);
      v72 = *(char **)__p;
    }
    *(_QWORD *)__p = v78;
    *(_QWORD *)&__p[8] = v71;
    *(_QWORD *)&__p[16] = v79;
    if (v72)
      operator delete(v72);
  }
  else
  {
    *(_DWORD *)v62 = a2;
    *(_QWORD *)(v62 + 4) = 0x300000003;
    *((_DWORD *)v62 + 3) = 5;
    *((double *)v62 + 2) = v8;
    v71 = v62 + 24;
  }
  *(_QWORD *)&__p[8] = v71;
  Phase::Controller::SpatialModelerSystem::SetParameters(a1 + 560, (uint64_t *)__p);
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  return 0;
}

void sub_216551F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  const char *v11;

  if (a2)
  {
    if (__p)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    Phase::Controller::sCatchAll((Phase::Controller *)"SetSpatialCategoryMaxClusterCount", v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::Implementation::PrepareGenerator(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  NSObject *v14;
  _BOOL8 v15;
  int v16;
  NSObject *v17;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  double *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v14 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 384));
  v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    v20 = 136316162;
    v21 = "CvmVoiceManager.mm";
    v22 = 1024;
    v23 = 867;
    v24 = 2048;
    v25 = a1;
    v26 = 2048;
    v27 = a2;
    v28 = 2048;
    v29 = a4;
    _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: received message PrepareGenerator(generator: %llu, submix: %llu, ...)", (uint8_t *)&v20, 0x30u);
  }
  v16 = atomic_load((unsigned __int8 *)a1);
  if (v16 == 2)
  {
    v17 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v15) + 384));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v20 = 136315906;
      v21 = "CvmVoiceManager.mm";
      v22 = 1024;
      v23 = 875;
      v24 = 2048;
      v25 = a1;
      v26 = 2048;
      v27 = a2;
      _os_log_impl(&dword_2164CC000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: system is paused, so we're ignoring the request to prepare generatorId %llu", (uint8_t *)&v20, 0x26u);
    }
    return 5;
  }
  else if (Phase::Controller::SubmixSystem::PrepareGenerator((Phase::Logger *)(a1 + 28), a2, a3, a4, a5, a6, a7, a1[22]))
  {
    return 0;
  }
  else
  {
    return 5;
  }
}

void sub_216552184(_Unwind_Exception *exception_object, int a2)
{
  const char *v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    Phase::Controller::sCatchAll((Phase::Controller *)"PrepareGenerator", v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::Implementation::PlayGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 384));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136315906;
    v9 = "CvmVoiceManager.mm";
    v10 = 1024;
    v11 = 895;
    v12 = 2048;
    v13 = a1;
    v14 = 2048;
    v15 = a2;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: received message PlayGenerator(generator: %llu)", (uint8_t *)&v8, 0x26u);
  }
  Phase::Controller::SubmixSystem::PlayGenerator((Phase::Logger *)(a1 + 224), a2, a3);
  return 0;
}

void sub_2165522C8(_Unwind_Exception *exception_object, int a2)
{
  const char *v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    Phase::Controller::sCatchAll((Phase::Controller *)"PlayGenerator", v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::Implementation::PauseGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 384));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136315906;
    v9 = "CvmVoiceManager.mm";
    v10 = 1024;
    v11 = 903;
    v12 = 2048;
    v13 = a1;
    v14 = 2048;
    v15 = a2;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: received message PauseGenerator(generator: %llu)", (uint8_t *)&v8, 0x26u);
  }
  Phase::Controller::SubmixSystem::PauseGenerator((Phase::Logger *)(a1 + 224), a2, a3);
  return 0;
}

void sub_216552414(_Unwind_Exception *exception_object, int a2)
{
  const char *v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    Phase::Controller::sCatchAll((Phase::Controller *)"PauseGenerator", v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::Implementation::ResumeGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 384));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136315906;
    v9 = "CvmVoiceManager.mm";
    v10 = 1024;
    v11 = 911;
    v12 = 2048;
    v13 = a1;
    v14 = 2048;
    v15 = a2;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: received messageResumeGenerator(generator: %llu)", (uint8_t *)&v8, 0x26u);
  }
  Phase::Controller::SubmixSystem::ResumeGenerator((Phase::Logger *)(a1 + 224), a2, a3);
  return 0;
}

void sub_216552560(_Unwind_Exception *exception_object, int a2)
{
  const char *v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    Phase::Controller::sCatchAll((Phase::Controller *)"ResumeGenerator", v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::HasExternalStream(Phase::Controller::VoiceManager *this, UniqueObjectId a2)
{
  uint64_t v2;
  _QWORD *v3;
  UniqueObjectId v4;
  UniqueObjectId v6;

  v2 = *(_QWORD *)this;
  v6 = a2;
  v3 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(v2 + 408), &v6);
  if (v3)
    v4 = (UniqueObjectId)*((_OWORD *)v3 + 2);
  else
    v4 = (UniqueObjectId)0;
  v6 = v4;
  if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(v2 + 368), &v6))
  {
    return 0;
  }
  else
  {
    return 3;
  }
}

uint64_t Phase::Controller::VoiceManager::Implementation::PauseExternalStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v4 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1)
                                                                                     + 384)));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", &v7);
    *(_DWORD *)buf = 136315906;
    v10 = "CvmVoiceManager.mm";
    v11 = 1024;
    v12 = 925;
    v13 = 2048;
    v14 = a1;
    v15 = 2112;
    v16 = v5;
    _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: received message PauseExternalStream(external stream: %@)", buf, 0x26u);

  }
  Phase::Controller::SubmixSystem::PauseExternalStream((Phase::Logger *)(a1 + 224), v7, v8);
  return 0;
}

void sub_216552730(_Unwind_Exception *exception_object, int a2)
{
  const char *v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    Phase::Controller::sCatchAll((Phase::Controller *)"PauseExternalStream", v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::Implementation::ResumeExternalStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v4 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1)
                                                                                     + 384)));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", &v7);
    *(_DWORD *)buf = 136315906;
    v10 = "CvmVoiceManager.mm";
    v11 = 1024;
    v12 = 933;
    v13 = 2048;
    v14 = a1;
    v15 = 2112;
    v16 = v5;
    _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: received message ResumeExternalStream(external stream: %@)", buf, 0x26u);

  }
  Phase::Controller::SubmixSystem::ResumeExternalStream((Phase::Logger *)(a1 + 224), v7, v8);
  return 0;
}

void sub_2165528A8(_Unwind_Exception *exception_object, int a2)
{
  const char *v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    Phase::Controller::sCatchAll((Phase::Controller *)"ResumeExternalStream", v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::Implementation::StopGenerator(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  NSObject *v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  double v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 384));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 136316162;
    v11 = "CvmVoiceManager.mm";
    v12 = 1024;
    v13 = 942;
    v14 = 2048;
    v15 = a1;
    v16 = 2048;
    v17 = a2;
    v18 = 2048;
    v19 = a4;
    _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: received message StopGenerator(generator: %llu, fade out duration: %f)", (uint8_t *)&v10, 0x30u);
  }
  Phase::Controller::SubmixSystem::StopGenerator((Phase::Logger *)(a1 + 224), a2, a3);
  return 0;
}

void sub_216552A14(_Unwind_Exception *exception_object, int a2)
{
  const char *v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    Phase::Controller::sCatchAll((Phase::Controller *)"StopGenerator", v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::Implementation::SleepGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 384));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136315906;
    v9 = "CvmVoiceManager.mm";
    v10 = 1024;
    v11 = 950;
    v12 = 2048;
    v13 = a1;
    v14 = 2048;
    v15 = a2;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: received message SleepGenerator(generator: %llu)", (uint8_t *)&v8, 0x26u);
  }
  Phase::Controller::SubmixSystem::SleepGenerator((Phase::Logger *)(a1 + 224), a2, a3);
  return 0;
}

void sub_216552B60(_Unwind_Exception *exception_object, int a2)
{
  const char *v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    Phase::Controller::sCatchAll((Phase::Controller *)"SleepGenerator", v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::Implementation::WakeGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 384));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136315906;
    v9 = "CvmVoiceManager.mm";
    v10 = 1024;
    v11 = 958;
    v12 = 2048;
    v13 = a1;
    v14 = 2048;
    v15 = a2;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: received message WakeGenerator(generator: %llu)", (uint8_t *)&v8, 0x26u);
  }
  Phase::Controller::SubmixSystem::WakeGenerator((Phase::Logger *)(a1 + 224), a2, a3);
  return 0;
}

void sub_216552CAC(_Unwind_Exception *exception_object, int a2)
{
  const char *v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    Phase::Controller::sCatchAll((Phase::Controller *)"WakeGenerator", v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::Implementation::SetGeneratorParameter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, double a5)
{
  Phase::Controller::SubmixSystem::SetGeneratorParameter((Phase::Logger *)(a1 + 224), a2, a3, a4, a5);
  return 0;
}

void sub_216552D28(void *a1)
{
  const char *v1;

  __cxa_begin_catch(a1);
  Phase::Controller::sCatchAll((Phase::Controller *)"SetGeneratorParameter", v1);
}

void sub_216552D38()
{
  __cxa_end_catch();
  JUMPOUT(0x216552D1CLL);
}

void sub_216552D48(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL Phase::Controller::VoiceManager::Implementation::AudioIOConfigChanged(Phase::Controller::VoiceManager::Implementation *this)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  _BOOL8 v5;
  uint64_t v6;
  _DWORD *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  Phase::Logger *InstancePtr;
  NSObject *v13;
  std::runtime_error *exception;
  char *v15;
  BOOL v16;
  __int128 v17;
  char *v18;
  BOOL v19;
  BOOL v20;
  unint64_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = Phase::Controller::TaskManager::GetService<Phase::Controller::DeviceManager>(*(Phase::Logger **)(*((_QWORD *)this + 85) + 48), *(_QWORD *)(*((_QWORD *)this + 85) + 56));
  if (v2)
  {
    v3 = v2;
    v18 = (char *)this + 8;
    v4 = std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)((char *)this + 8));
    v5 = v4;
    v19 = v4;
    if (v4)
    {
      v15 = v18;
      v16 = v4;
      *((_QWORD *)&v17 + 1) = v3;
      v18 = 0;
      v19 = 0;
      *(_QWORD *)&v17 = this;
      v6 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
      v21 = 0;
      v20 = 1;
      v7 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v6, 40, &v21, &v20);
      if (!v7)
      {
        InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
        Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
        v13 = objc_retainAutorelease(**(id **)(v6 + 48));
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v23 = "CommandQueue.hpp";
          v24 = 1024;
          v25 = 100;
          _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buf"
            "fer is full, unable to grow.\"",
            buf,
            0x12u);
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
      }
      if (v20)
      {
        v8 = objc_retainAutorelease(**(id **)(v6 + 48));
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315906;
          v23 = "CommandQueue.hpp";
          v24 = 1024;
          v25 = 89;
          v26 = 2048;
          v27 = v21;
          v28 = 2048;
          v29 = 40;
          _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
        }
      }
      *(_QWORD *)v7 = &off_24D579EC8;
      *((_QWORD *)v7 + 1) = v15;
      *((_BYTE *)v7 + 16) = v16;
      v15 = 0;
      v16 = 0;
      *(_OWORD *)(v7 + 6) = v17;
      Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v6, 40);
      atomic_store(0, (unsigned __int8 *)(v6 + 40));
      std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v15);
    }
    else
    {
      v10 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v4) + 384));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v23 = "CvmVoiceManager.mm";
        v24 = 1024;
        v25 = 1054;
        _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Ignoring route change notification, received while updating engine state.", buf, 0x12u);
      }
    }
    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v18);
  }
  else
  {
    v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v23 = "CvmVoiceManager.mm";
      v24 = 1024;
      v25 = 1061;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d DeviceManager service not available to propagate route change notification.", buf, 0x12u);
    }
    return 0;
  }
  return v5;
}

void sub_2165530A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v14;

  if (a2)
  {
    __cxa_free_exception(v14);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v13);
    __cxa_end_catch();
    JUMPOUT(0x216552ECCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::VoiceManager::Implementation::SeekGeneratorTime(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  Phase::Controller::SubmixSystem::SeekGeneratorTime((Phase::Logger *)(a1 + 224), a2, a3, a4);
  return 0;
}

void sub_216553144(void *a1)
{
  const char *v1;

  __cxa_begin_catch(a1);
  Phase::Controller::sCatchAll((Phase::Controller *)"SeekGeneratorTime", v1);
}

void sub_216553154()
{
  __cxa_end_catch();
  JUMPOUT(0x216553138);
}

void sub_216553164(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::VoiceManager::Implementation::ActivateAudioSession(Phase::Controller::VoiceManager::Implementation *this, int a2, int a3, int a4)
{
  Phase::Controller::SubmixSystem::ActivateAudioSession((Phase::Controller::VoiceManager::Implementation *)((char *)this + 224), a2, a3, a4);
  return 0;
}

void sub_21655319C(void *a1)
{
  const char *v1;

  __cxa_begin_catch(a1);
  Phase::Controller::sCatchAll((Phase::Controller *)"ActivateAudioSession", v1);
}

void sub_2165531AC()
{
  __cxa_end_catch();
  JUMPOUT(0x216553190);
}

void sub_2165531BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::VoiceManager::IOExecuteRealtimeActions(Phase::Controller::VoiceManager *this, const AudioTimeStamp *a2, int a3)
{
  uint64_t v3;
  const AudioTimeStamp *v5;
  int v6;

  v3 = *(_QWORD *)this;
  v5 = a2;
  v6 = a3;
  Phase::ThreadsafeContainer<std::unordered_map<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int),std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<std::pair<unsigned long long const,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>>>>::realtime_operate(v3 + 720, (uint64_t (*)(uint64_t, uint64_t))Phase::Controller::VoiceManager::Implementation::RealtimeActionsExecution, (uint64_t)&v5);
  return 0;
}

uint64_t Phase::Controller::VoiceManager::IOExecuteRealtimeInputActions(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD v7[4];

  v5 = *a1;
  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = a5;
  Phase::ThreadsafeContainer<std::unordered_map<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int),std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<std::pair<unsigned long long const,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>>>>::realtime_operate(v5 + 856, (uint64_t (*)(uint64_t, uint64_t))Phase::Controller::VoiceManager::Implementation::RealtimeInputActionsExecution, (uint64_t)v7);
  return 0;
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::DeviceManager>(Phase::Logger *a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, char *, _QWORD, _QWORD, void *);
  uint64_t v3;
  NSObject *v5;
  std::logic_error *exception;
  NSObject *v7;
  std::string *v8;
  std::logic_error *v9;
  std::string __p;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  std::string *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if ((unint64_t)(a2 - (_QWORD)a1) <= 0x320)
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v12 = "TaskManager.hpp";
      v13 = 1024;
      v14 = 112;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  v2 = (uint64_t (*)(uint64_t, char *, _QWORD, _QWORD, void *))*((_QWORD *)a1 + 100);
  if (!v2)
  {
    v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1)
                                                                                       + 448)));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v12 = "TaskManager.hpp";
      v13 = 1024;
      v14 = 121;
      v15 = 1024;
      v16 = 25;
      v17 = 2080;
      v18 = v8;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v9, "No service registered for Id %i, in call \n%s");
  }
  v3 = v2(3, (char *)a1 + 800, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::DeviceManager *>::__id);
  if (!v3)
    std::__throw_bad_any_cast[abi:ne180100]();
  return *(_QWORD *)v3;
}

void sub_216553468(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_216553558(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_216553578(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialModelerSystem::InitializeParameters::~InitializeParameters(Phase::Controller::SpatialModelerSystem::InitializeParameters *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 40);
}

void Phase::Controller::AudioRouteDescription::~AudioRouteDescription(Phase::Controller::AudioRouteDescription *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,objc_object * {__strong}>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this);
}

Phase::Controller::DSPVoiceManager::Implementation ***std::unique_ptr<Phase::Controller::DSPVoiceManager>::reset[abi:ne180100](Phase::Controller::DSPVoiceManager::Implementation ***result, Phase::Controller::DSPVoiceManager::Implementation **a2)
{
  Phase::Controller::DSPVoiceManager::Implementation **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<Phase::Controller::DSPVoiceManager::Implementation>::reset[abi:ne180100](v2, 0);
    std::unique_ptr<Phase::Controller::DSPVoiceManager::Implementation>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

_QWORD *std::vector<std::any>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t (**v3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v4;
  uint64_t v5;

  v2 = result;
  v3 = (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))result[1];
  v4 = ((uint64_t)v3 - *result) >> 5;
  if (a2 > v4)
    return (_QWORD *)std::vector<std::any>::__append((uint64_t)result, a2 - v4);
  if (a2 < v4)
  {
    v5 = *result + 32 * a2;
    while (v3 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v5)
    {
      v3 -= 4;
      result = std::any::reset[abi:ne180100](v3);
    }
    v2[1] = v5;
  }
  return result;
}

void std::vector<Phase::ICommandable *>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<Phase::ICommandable *>::__append((void **)a1, a2 - v3, a3);
  }
}

uint64_t std::vector<std::any>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[5];

  v6 = *(_QWORD *)(a1 + 16);
  result = a1 + 16;
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if (a2 <= (v6 - (uint64_t)v7) >> 5)
  {
    if (a2)
    {
      v14 = 32 * a2;
      v15 = &v7[4 * a2];
      do
      {
        *v7 = 0;
        v7[1] = 0;
        v7 += 4;
        v14 -= 32;
      }
      while (v14);
      v7 = v15;
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
  else
  {
    v8 = (uint64_t)v7 - *(_QWORD *)a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *(_QWORD *)a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v19[4] = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>(result, v12);
    else
      v13 = 0;
    v16 = &v13[32 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v19[3] = &v13[32 * v12];
    v17 = 32 * a2;
    v18 = &v16[32 * a2];
    do
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      v16 += 32;
      v17 -= 32;
    }
    while (v17);
    v19[2] = v18;
    std::vector<std::any>::__swap_out_circular_buffer((void (***)(uint64_t))a1, v19);
    return std::__split_buffer<std::any>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_2165537FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::any>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void (**std::vector<std::any>::__swap_out_circular_buffer(void (***a1)(uint64_t), _QWORD *a2))(uint64_t)
{
  void (**v4)(uint64_t);
  void (**v5)(uint64_t);
  void (**result)(uint64_t);
  void (**v7)(uint64_t);
  void (**v8)(uint64_t);
  void (**v9)(uint64_t);

  v5 = *a1;
  v4 = a1[1];
  result = (void (**)(uint64_t))a2[1];
  while (v4 != v5)
  {
    v4 -= 4;
    result = (void (**)(uint64_t))std::any::any[abi:ne180100](result - 4, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = (void (**)(uint64_t))a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = (void (**)(uint64_t))a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

_QWORD *std::any::any[abi:ne180100](_QWORD *a1, void (**a2)(uint64_t))
{
  *a1 = 0;
  a1[1] = 0;
  if (*a2)
    (*a2)(2);
  return a1;
}

uint64_t (**std::any::reset[abi:ne180100](uint64_t (**result)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  if (*result)
    return (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*result)(0, result, 0, 0, 0);
  return result;
}

uint64_t std::__split_buffer<std::any>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(i - 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Controller::TapManager *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_216553978 + 4 * byte_2166F7A78[a1]))(0);
}

uint64_t sub_216553978(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_2165539B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::TapManager *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

void std::vector<Phase::ICommandable *>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v18 - 1) = v25;
        v18 -= 8;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

uint64_t Phase::Controller::VoiceManager::Implementation::AcquireStateLock(uint64_t a1, uint64_t a2, int a3, double a4)
{
  std::chrono::steady_clock::time_point v8;
  uint64_t rep;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  std::logic_error *exception;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = Phase::Controller::TaskManager::GetService<Phase::Controller::DeviceManager>(*(Phase::Logger **)(*(_QWORD *)(a1 + 680) + 48), *(_QWORD *)(*(_QWORD *)(a1 + 680) + 56));
  v10 = rep;
  if (*(_BYTE *)(a2 + 8))
    return 0;
  while (1)
  {
    if (a4 > 0.0)
    {
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      if (a4 * 1000.0 < (double)((rep - v8.__d_.__rep_) / 1000000))
        break;
    }
    if (v10)
    {
      if (a3 == 1)
      {
        Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands(v10);
      }
      else
      {
        if (a3)
          goto LABEL_21;
        if (*(int *)(v10 + 16) >= 1)
        {
          v11 = 0;
          do
            Phase::CommandQueue<Phase::LockFreeQueueMPSC>::Reset(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v11++));
          while (v11 < *(int *)(v10 + 16));
        }
      }
    }
    v12 = *(_QWORD *)(a1 + 688);
    *(_DWORD *)(v12 + 328) = 0;
    atomic_store(0, (unsigned int *)(v12 + 144));
    if (!*(_QWORD *)a2)
      goto LABEL_20;
    if (*(_BYTE *)(a2 + 8))
    {
      std::__throw_system_error(11, "unique_lock::try_lock: already locked");
LABEL_20:
      std::__throw_system_error(1, "unique_lock::try_lock: references null mutex");
LABEL_21:
      v15 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)rep) + 384));
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v17 = 136315650;
        v18 = "CvmVoiceManager.mm";
        v19 = 1024;
        v20 = 1509;
        v21 = 1024;
        LODWORD(v22) = a3;
        _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"[CVMVoiceManager::AcquireStateLock] Invalid action value %i for pending commands\"", (uint8_t *)&v17, 0x18u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "[CVMVoiceManager::AcquireStateLock] Invalid action value %i for pending commands");
    }
    rep = std::__shared_mutex_base::try_lock(*(std::__shared_mutex_base **)a2);
    *(_BYTE *)(a2 + 8) = rep;
    if ((_DWORD)rep)
      return 0;
  }
  v14 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)rep)
                                                                                      + 384)));
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v17 = 136315906;
    v18 = "CvmVoiceManager.mm";
    v19 = 1024;
    v20 = 1484;
    v21 = 2048;
    v22 = a1;
    v23 = 2048;
    v24 = (std::chrono::steady_clock::now().__d_.__rep_ - v8.__d_.__rep_) / 1000000;
    _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: acquiring voicemanager state lock timed out after %lli ms", (uint8_t *)&v17, 0x26u);
  }

  return 4294900542;
}

_QWORD *Phase::LambdaFunction<Phase::Controller::VoiceManager::Implementation::AudioIOConfigChanged(void)::{lambda(void)#1},void>::~LambdaFunction(_QWORD *a1)
{
  *a1 = &off_24D579EC8;
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Phase::LambdaFunction<Phase::Controller::VoiceManager::Implementation::AudioIOConfigChanged(void)::{lambda(void)#1},void>::~LambdaFunction(_QWORD *a1)
{
  *a1 = &off_24D579EC8;
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::LambdaFunction<Phase::Controller::VoiceManager::Implementation::AudioIOConfigChanged(void)::{lambda(void)#1},void>::operator()(uint64_t a1)
{
  uint64_t v2;
  Phase::Logger **v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  NSObject *v7;
  Phase::Logger *InstancePtr;
  NSObject *v10;
  std::runtime_error *exception;
  uint64_t v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  _BYTE v20[24];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 24);
  Phase::Controller::SystemAudioIO::AudioIOBase::BeginRouteChange(*(Phase::Controller::SystemAudioIO::AudioIOBase **)(v2 + 688));
  v3 = *(Phase::Logger ***)(a1 + 32);
  (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(v2 + 688) + 96))(buf);
  Phase::Controller::DeviceManager::OnAudioOutputRouteChanged(v3, (id *)buf);
  if (*(_QWORD *)&v20[2])
  {
    *(_QWORD *)&v20[10] = *(_QWORD *)&v20[2];
    operator delete(*(void **)&v20[2]);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,objc_object * {__strong}>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
  v4 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v14 = v2;
  v5 = **(_QWORD **)(v4 + 8);
  v16 = 0;
  v15 = 1;
  v6 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v5, 32, &v16, &v15);
  if (!v6)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v10 = objc_retainAutorelease(**(id **)(v5 + 48));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v18 = "CommandQueue.hpp";
      v19 = 1024;
      *(_DWORD *)v20 = 100;
      _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v15)
  {
    v7 = objc_retainAutorelease(**(id **)(v5 + 48));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v18 = "CommandQueue.hpp";
      v19 = 1024;
      *(_DWORD *)v20 = 89;
      *(_WORD *)&v20[4] = 2048;
      *(_QWORD *)&v20[6] = v16;
      *(_WORD *)&v20[14] = 2048;
      *(_QWORD *)&v20[16] = 32;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(_QWORD *)v6 = &off_24D579EF0;
  *((_QWORD *)v6 + 1) = v12;
  *((_BYTE *)v6 + 16) = v13;
  v12 = 0;
  v13 = 0;
  *((_QWORD *)v6 + 3) = v14;
  Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v5, 32);
  atomic_store(0, (unsigned __int8 *)(v5 + 40));
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v12);
}

void sub_2165540B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  void *v19;

  if (a2)
  {
    __cxa_free_exception(v19);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v18);
    __cxa_end_catch();
    JUMPOUT(0x216553FD4);
  }
  _Unwind_Resume(exception_object);
}

void sub_216554118(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x2165540F0);
}

void sub_216554134(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x2165540F0);
}

_QWORD *Phase::LambdaFunction<Phase::Controller::VoiceManager::Implementation::AudioIOConfigChanged(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~LambdaFunction(_QWORD *a1)
{
  *a1 = &off_24D579EF0;
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Phase::LambdaFunction<Phase::Controller::VoiceManager::Implementation::AudioIOConfigChanged(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~LambdaFunction(_QWORD *a1)
{
  *a1 = &off_24D579EF0;
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x2199F9D70);
}

void Phase::LambdaFunction<Phase::Controller::VoiceManager::Implementation::AudioIOConfigChanged(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::operator()(uint64_t a1)
{
  Phase::Controller::SystemAudioIO::AudioIOBase::EndRouteChange(*(Phase::Controller::SystemAudioIO::AudioIOBase **)(*(_QWORD *)(a1 + 24) + 688));
}

uint64_t Phase::ThreadsafeContainer<std::unordered_map<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int),std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<std::pair<unsigned long long const,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>>>>::realtime_operate(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  unsigned __int8 v6;
  int v7;
  uint64_t v9;
  char v10;

  v6 = atomic_load((unsigned __int8 *)(a1 + 120));
  if ((v6 & 1) != 0)
  {
    v9 = a1 + 124;
    v7 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(a1 + 124));
    v10 = v7;
    if (v7)
    {
      std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>>>::swap(a1 + 80, a1 + 40);
      atomic_store(0, (unsigned __int8 *)(a1 + 120));
    }
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v9);
  }
  return a2(a1 + 80, a3);
}

uint64_t Phase::Controller::VoiceManager::Implementation::RealtimeActionsExecution(uint64_t result)
{
  _QWORD *i;

  for (i = *(_QWORD **)(result + 16); i; i = (_QWORD *)*i)
    result = (*(uint64_t (**)(void))(i[3] + 16))();
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>>>::swap(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  v5 = *(void **)a2;
  *(_QWORD *)a2 = 0;
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = *(void **)a2;
  *(_QWORD *)a2 = v4;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v11;
  v13 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v13;
  if (*(_QWORD *)(a1 + 24))
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14)
        v15 %= v14;
    }
    else
    {
      v15 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
  }
  if (v11)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v17 >= v16)
        v17 %= v16;
    }
    else
    {
      v17 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = a2 + 16;
  }
}

uint64_t Phase::Controller::VoiceManager::Implementation::RealtimeInputActionsExecution(uint64_t result)
{
  _QWORD *i;

  for (i = *(_QWORD **)(result + 16); i; i = (_QWORD *)*i)
    result = (*(uint64_t (**)(void))(i[3] + 16))();
  return result;
}

Phase::Controller::VoiceManager::Implementation *Phase::Controller::VoiceManager::Implementation::Implementation(Phase::Controller::VoiceManager::Implementation *this)
{
  Phase::Logger *v2;
  uint64_t InstancePtr;
  _QWORD *v4;
  uint64_t v5;

  *(_BYTE *)this = 0;
  v2 = (Phase::Logger *)std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)((char *)this + 8));
  *((_QWORD *)this + 26) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  InstancePtr = Phase::Logger::GetInstancePtr(v2);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::Commandable((uint64_t)this + 224, *(_QWORD *)(InstancePtr + 384), 1, 0x20000);
  *((_QWORD *)this + 28) = off_24D579E48;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_DWORD *)this + 74) = 1065353216;
  *(_OWORD *)((char *)this + 264) = 0u;
  MEMORY[0x2199F9B78]((char *)this + 304);
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_DWORD *)this + 100) = 1065353216;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_DWORD *)this + 110) = 1065353216;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_BYTE *)this + 544) = 0;
  *((_QWORD *)this + 69) = 0x3FF0000000000000;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_DWORD *)this + 148) = 1065353216;
  *((_QWORD *)this + 83) = 0;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *((_QWORD *)this + 93) = 0;
  *((_DWORD *)this + 188) = 1065353216;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((_DWORD *)this + 198) = 1065353216;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_DWORD *)this + 208) = 1065353216;
  *((_BYTE *)this + 840) = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((Phase::Controller::VoiceManager::Implementation *)((char *)this + 844));
  *((_DWORD *)this + 212) = 0;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *((_DWORD *)this + 222) = 1065353216;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *((_DWORD *)this + 232) = 1065353216;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *((_DWORD *)this + 242) = 1065353216;
  *((_BYTE *)this + 976) = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((Phase::Controller::VoiceManager::Implementation *)((char *)this + 980));
  *((_DWORD *)this + 246) = 0;
  *((_QWORD *)this + 124) = 0;
  *((_WORD *)this + 500) = 0;
  *((_OWORD *)this + 63) = xmmword_2166F7470;
  *((_QWORD *)this + 128) = 0;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D579F18;
  v4[1] = this;
  v5 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return this;
}

void sub_2165545A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  Phase::Controller::SubmixSystem *v3;
  Phase::Controller::SpatialModelerSystem *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  Phase::ThreadsafeContainer<std::unordered_map<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int,AudioBufferList *,Phase::Controller::SpeechDetectorInfo const*),std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<std::pair<unsigned long long const,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int,AudioBufferList *,Phase::Controller::SpeechDetectorInfo const*)>>>>::~ThreadsafeContainer(v6);
  Phase::ThreadsafeContainer<std::unordered_map<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int,AudioBufferList *,Phase::Controller::SpeechDetectorInfo const*),std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<std::pair<unsigned long long const,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int,AudioBufferList *,Phase::Controller::SpeechDetectorInfo const*)>>>>::~ThreadsafeContainer(v5);
  v8 = *(_QWORD *)(v1 + 712);
  *(_QWORD *)(v1 + 712) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  v9 = *(_QWORD *)(v1 + 704);
  *(_QWORD *)(v1 + 704) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::unique_ptr<Phase::Controller::DSPVoiceManager>::reset[abi:ne180100]((Phase::Controller::DSPVoiceManager::Implementation ***)(v1 + 696), 0);
  v10 = *(_QWORD *)(v1 + 688);
  *(_QWORD *)(v1 + 688) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  Phase::Controller::SpatialModelerSystem::~SpatialModelerSystem(v4);
  Phase::Controller::SubmixSystem::~SubmixSystem(v3);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1 + 184);
  std::shared_mutex::~shared_mutex[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t Phase::ThreadsafeContainer<std::unordered_map<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int,AudioBufferList *,Phase::Controller::SpeechDetectorInfo const*),std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<std::pair<unsigned long long const,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int,AudioBufferList *,Phase::Controller::SpeechDetectorInfo const*)>>>>::~ThreadsafeContainer(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>>>::~__hash_table(a1 + 80);
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>>>::~__hash_table(a1 + 40);
  return std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>>>::~__hash_table(a1);
}

void std::shared_mutex::~shared_mutex[abi:ne180100](uint64_t a1)
{
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));
  std::mutex::~mutex((std::mutex *)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>>>::~__hash_table(uint64_t a1)
{
  id *v2;
  id *v3;
  void *v4;

  v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void Phase::Controller::VoiceManager::Implementation::DvmCallbackInterface::~DvmCallbackInterface(Phase::Controller::VoiceManager::Implementation::DvmCallbackInterface *this)
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::VoiceManager::Implementation::DvmCallbackInterface::SubmitGeneratorStoppedResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Phase::Logger *v11;
  uint64_t SubmixIdForGenerator;
  uint64_t v13;
  uint64_t Submix;

  v11 = (Phase::Logger *)(*(_QWORD *)(a1 + 8) + 224);
  SubmixIdForGenerator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)v11, a2, a3);
  Submix = Phase::Controller::SubmixSystem::GetSubmix(v11, SubmixIdForGenerator, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)Submix + 208))(Submix, a2, a3, a4, a5, a6);
}

void sub_2165547F8(void *a1)
{
  const char *v1;

  __cxa_begin_catch(a1);
  Phase::Controller::sCatchAll((Phase::Controller *)"SubmitGeneratorStoppedResult", v1);
}

void sub_216554808()
{
  __cxa_end_catch();
}

void sub_21655481C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::VoiceManager::Implementation::DvmCallbackInterface::SubmitSubmixStoppedResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t Submix;

  Submix = Phase::Controller::SubmixSystem::GetSubmix((Phase::Logger *)(*(_QWORD *)(a1 + 8) + 224), a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)Submix + 216))(Submix, a4, a5);
}

void sub_216554870(void *a1)
{
  const char *v1;

  __cxa_begin_catch(a1);
  Phase::Controller::sCatchAll((Phase::Controller *)"SubmitSubmixStoppedResult", v1);
}

void sub_216554880()
{
  __cxa_end_catch();
}

void sub_21655488C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::VoiceManager::Implementation::DvmCallbackInterface::SubmitRendererStoppedResult(Phase::Controller::VoiceManager::Implementation::DvmCallbackInterface *this, uint64_t a2, std::error_code a3)
{
  return Phase::Controller::RendererSystem::SubmitRendererStoppedResult(*(Phase::Controller::RendererSystem **)(*((_QWORD *)this + 1) + 496), a2, a3);
}

void sub_2165548C4(void *a1)
{
  const char *v1;

  __cxa_begin_catch(a1);
  Phase::Controller::sCatchAll((Phase::Controller *)"SubmitRendererStoppedResult", v1);
}

void sub_2165548D4()
{
  __cxa_end_catch();
}

void sub_2165548E0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

Phase::Controller::VoiceManager::Implementation *std::unique_ptr<Phase::Controller::VoiceManager::Implementation>::reset[abi:ne180100](Phase::Controller::VoiceManager::Implementation **a1, Phase::Controller::VoiceManager::Implementation *a2)
{
  Phase::Controller::VoiceManager::Implementation *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::VoiceManager::Implementation::~Implementation(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void Phase::Controller::VoiceManager::Implementation::~Implementation(Phase::Controller::VoiceManager::Implementation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  Phase::Controller::VoiceManager::Implementation::Destroy(this);
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>>>::~__hash_table((uint64_t)this + 936);
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>>>::~__hash_table((uint64_t)this + 896);
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>>>::~__hash_table((uint64_t)this + 856);
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>>>::~__hash_table((uint64_t)this + 800);
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>>>::~__hash_table((uint64_t)this + 760);
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(AudioTimeStamp const*,unsigned int)>>>::~__hash_table((uint64_t)this + 720);
  v2 = *((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<Phase::Controller::DSPVoiceManager>::reset[abi:ne180100]((Phase::Controller::DSPVoiceManager::Implementation ***)this + 87, 0);
  v4 = *((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  Phase::Controller::SpatialModelerSystem::~SpatialModelerSystem((Phase::Controller::VoiceManager::Implementation *)((char *)this + 560));
  Phase::Controller::SubmixSystem::~SubmixSystem((Phase::Controller::VoiceManager::Implementation *)((char *)this + 224));
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 184);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 72));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

uint64_t Phase::Controller::WaterProcedure::WaterProcedure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v16;
  Phase::Logger *v17;
  void **v18;
  unsigned int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  double *v25;
  unint64_t *v26;
  uint64_t *i;
  Phase::Logger *v28;
  char v29;
  unsigned int v30;
  double v31;
  _QWORD *v32;
  _DWORD *v33;
  unsigned int v34;
  uint8x8_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  NSObject *v45;
  std::runtime_error *v46;
  NSObject *v47;
  std::runtime_error *exception;
  NSObject *v49;
  std::logic_error *v50;
  NSObject *v51;
  std::logic_error *v52;
  void *__p[2];
  char v54;
  _BYTE buf[32];
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v16 = Phase::Controller::ProcedureBase::ProcedureBase((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  *v16 = &off_24D579F50;
  v16[72] = 0;
  *((_OWORD *)v16 + 34) = 0u;
  *((_OWORD *)v16 + 35) = xmmword_2166F7320;
  v17 = (Phase::Logger *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a8 + 24))(a8);
  if (!v17)
  {
    v47 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmWaterProcedure.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 44;
      _os_log_impl(&dword_2164CC000, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nullptr == pProcedurePrepareParameters is true]: \"Invalid GeneratorPrepareParameters for GeneratorType::Procedure!\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid GeneratorPrepareParameters for GeneratorType::Procedure!");
  }
  if (*((_BYTE *)v17 + 64) != 1)
  {
    v49 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v17) + 384));
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmWaterProcedure.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 46;
      _os_log_impl(&dword_2164CC000, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [pProcedurePrepareParameters->mProcedureType != ProcedureType::Water is true]: \"Invalid procedure type for a Water Procedure\"", buf, 0x12u);
    }
    v50 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v50, "Invalid procedure type for a Water Procedure");
    v50->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "WaterProcedure");
  if (v54 < 0)
  {
    v18 = (void **)__p[0];
    if (!__p[0])
      goto LABEL_10;
  }
  else
  {
    v18 = __p;
  }
  v19 = *(unsigned __int8 *)v18;
  if (*(_BYTE *)v18)
  {
    v20 = (unsigned __int8 *)v18 + 1;
    v21 = 0xCBF29CE484222325;
    do
    {
      v21 = 0x100000001B3 * (v21 ^ v19);
      v22 = *v20++;
      v19 = v22;
    }
    while (v22);
    goto LABEL_11;
  }
LABEL_10:
  v21 = 0;
LABEL_11:
  v23 = (_QWORD *)Phase::Controller::TaskManager::GetService<Phase::Controller::ProcedureRegistry>(*(Phase::Logger **)(a1 + 24), 4);
  *(_QWORD *)buf = v21;
  v24 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v23, (unint64_t *)buf);
  if (v24)
    v25 = (double *)(v24 + 3);
  else
    v25 = 0;
  if (!v24)
  {
    v51 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmWaterProcedure.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 54;
      _os_log_impl(&dword_2164CC000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!pProcedureInfo is true]: \"Couldn't find a Water Procedure!\"", buf, 0x12u);
    }
    v52 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v52, "Couldn't find a Water Procedure!");
    v52->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  v26 = (unint64_t *)v24[7];
  for (i = (uint64_t *)v24[8]; v26 != (unint64_t *)i; v26 += 8)
  {
    v28 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,int const&>(a1 + 80, v26 + 3, v26 + 3, (_DWORD *)v26 + 8);
    if ((v29 & 1) == 0)
    {
      v45 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v28) + 384));
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)v26 + 23) < 0)
          v26 = (unint64_t *)*v26;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "CvmWaterProcedure.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 61;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v26;
        _os_log_impl(&dword_2164CC000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert %s parameter ids\"", buf, 0x1Cu);
      }
      v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v46, "Failed to insert %s parameter ids");
    }
  }
  v30 = 0;
  v31 = v25[15];
  *(_QWORD *)(a1 + 544) = (unint64_t)(v31 * *(double *)(a1 + 528));
  *(double *)(a1 + 552) = v31;
  v32 = (_QWORD *)(a1 + 160);
  while (1)
  {
    v33 = *(_DWORD **)(a1 + 48);
    if (*v33 == 0x10000)
    {
      v35 = (uint8x8_t)vcnt_s8((int8x8_t)v33[1]);
      v35.i16[0] = vaddlv_u8(v35);
      v34 = v35.i32[0];
    }
    else
    {
      v34 = *v33 ? (unsigned __int16)*v33 : v33[2];
    }
    if (v30 >= v34)
      break;
    v37 = *(_QWORD *)(a1 + 168);
    v36 = *(_QWORD *)(a1 + 176);
    if (v37 >= v36)
    {
      v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v32) >> 5);
      v40 = v39 + 1;
      if (v39 + 1 > 0x2AAAAAAAAAAAAAALL)
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *v32) >> 5);
      if (2 * v41 > v40)
        v40 = 2 * v41;
      if (v41 >= 0x155555555555555)
        v42 = 0x2AAAAAAAAAAAAAALL;
      else
        v42 = v40;
      v56 = a1 + 176;
      if (v42)
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::VoiceData>>(a1 + 176, v42);
      else
        v43 = 0;
      *(_QWORD *)buf = v43;
      *(_QWORD *)&buf[8] = &v43[96 * v39];
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      *(_QWORD *)&buf[24] = &v43[96 * v42];
      Phase::Controller::VoiceData::VoiceData(*(Phase::Controller::VoiceData **)&buf[8], (const Phase::Controller::ProcedureInfo *)v25, 0x7FFFFFFFFFFFFFFFLL);
      *(_QWORD *)&buf[16] += 96;
      std::vector<Phase::Controller::VoiceData>::__swap_out_circular_buffer((uint64_t *)(a1 + 160), buf);
      v38 = *(_QWORD *)(a1 + 168);
      std::__split_buffer<Phase::Controller::VoiceData>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      Phase::Controller::VoiceData::VoiceData(*(Phase::Controller::VoiceData **)(a1 + 168), (const Phase::Controller::ProcedureInfo *)v25, 0x7FFFFFFFFFFFFFFFLL);
      v38 = v37 + 96;
      *(_QWORD *)(a1 + 168) = v38;
    }
    *(_QWORD *)(a1 + 168) = v38;
    ++v30;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) = v21;
  if (v54 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_216554FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  Phase::Controller::Generator *v22;
  void *v23;

  __cxa_free_exception(v23);
  if (a21 < 0)
    operator delete(__p);
  Phase::Controller::Generator::~Generator(v22);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::ProcedureRegistry>(Phase::Logger *a1, int a2)
{
  uint64_t v3;
  Phase::Logger *v4;
  uint64_t (**v5)(uint64_t, _QWORD, _QWORD, _QWORD, void *);
  NSObject *v7;
  std::logic_error *exception;
  NSObject *v9;
  std::string *v10;
  std::logic_error *v11;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 7) - v3) >> 5))
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 112;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(_QWORD *)v4)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 121;
      v17 = 1024;
      v18 = a2;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  v5 = std::any_cast[abi:ne180100]<Phase::Controller::ProcedureRegistry * const>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v4);
  if (!v5)
    std::__throw_bad_any_cast[abi:ne180100]();
  return (uint64_t)*v5;
}

void sub_216555280(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_216555370(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_216555390(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void Phase::Controller::WaterProcedure::~WaterProcedure(Phase::Controller::WaterProcedure *this)
{
  Phase::Controller::Generator::~Generator(this);
  JUMPOUT(0x2199F9D70);
}

double Phase::Controller::WaterProcedure::GetAnchorTimeForWakeFromSleepInSeconds(Phase::Controller::WaterProcedure *this, PHASECullOption a2, double a3)
{
  double v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (a2 != PHASECullOptionSleepWakeAtRandomOffset)
    return 0.0;
  v3 = *((double *)this + 69);
  v4 = *((_QWORD *)this + 70);
  v5 = *((_QWORD *)this + 71);
  *((_QWORD *)this + 70) = v5;
  v6 = (v5 >> 26) ^ ((v4 ^ (unint64_t)(v4 << 23)) >> 17) ^ v5 ^ v4 ^ (v4 << 23);
  *((_QWORD *)this + 71) = v6;
  return v3 * ((double)(v6 + v5) * 5.42101086e-20) + 0.0;
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Controller::ProcedureRegistry * const>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::ProcedureRegistry *>::__id);
    else
      return 0;
  }
  return result;
}

uint64_t *Phase::DspLayer::DelayHermite3rdOrder4Point::GetNewRegistryEntry(Phase::DspLayer::DelayHermite3rdOrder4Point *this)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v6[2];
  char v7;
  void *__p[2];
  char v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v1 = malloc_type_malloc(0x38uLL, 0x1050040B063AAFAuLL);
  *v1 = "Delay In Seconds";
  v1[1] = 0x500000000;
  *(_QWORD *)((char *)v1 + 20) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2166F7470;
  v1[6] = 0;
  v2 = (uint64_t *)operator new();
  v10[0] = &off_24D57A0D8;
  v11 = v10;
  Phase::Controller::VoicePoolEntry::VoicePoolEntry((uint64_t)v2, "DelayHermite3rdOrder4Point", 1, (uint64_t)v1, (uint64_t)v10);
  v3 = v11;
  if (v11 == v10)
  {
    v4 = 4;
    v3 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(__p, "Input");
  Phase::Controller::VoicePoolEntry::AddInput(v2, (__int128 *)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "Output");
  Phase::Controller::VoicePoolEntry::AddOutput(v2, (__int128 *)v6);
  if (v7 < 0)
    operator delete(v6[0]);
  return v2;
}

void sub_2165555F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::DelayHermite3rdOrder4Point::~DelayHermite3rdOrder4Point(Phase::DspLayer::DelayHermite3rdOrder4Point *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);
  JUMPOUT(0x2199F9D70);
}

void `anonymous namespace'::DelayHermite3rdOrder4PointSlice::~DelayHermite3rdOrder4PointSlice(void **this)
{
  *this = &off_24D57A000;
  free(this[1046]);
  this[1046] = 0;
}

{
  *this = &off_24D57A000;
  free(this[1046]);
  this[1046] = 0;
  JUMPOUT(0x2199F9D70);
}

double `anonymous namespace'::DelayHermite3rdOrder4PointSlice::Reset(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 4144) = 0u;
  *(_DWORD *)(a1 + 8376) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  **(_QWORD **)(a1 + 8368) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result = 0.0;
  *(_OWORD *)(a1 + 8400) = 0u;
  *(_OWORD *)(a1 + 8384) = 0u;
  return result;
}

uint64_t `anonymous namespace'::DelayHermite3rdOrder4PointSlice::Reset(_anonymous_namespace_::DelayHermite3rdOrder4PointSlice *this, Phase::DspLayer::VoiceEngine *a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  uint64_t result;

  v8 = (_DWORD *)((char *)this + 4 * (int)a3);
  v8[4] = 0;
  v8[8] = 0;
  v8[1036] = 0;
  _ZN5Phase8DspLayer17DelaylineCircularIfDv4_fE5ResetEi((uint64_t)this + 8368, a3);
  result = (*(uint64_t (**)(_anonymous_namespace_::DelayHermite3rdOrder4PointSlice *, Phase::DspLayer::VoiceEngine *, uint64_t))(*(_QWORD *)this + 56))(this, a2, a3);
  *((_QWORD *)this + (int)a3 + 1048) = a4;
  return result;
}

double `anonymous namespace'::DelayHermite3rdOrder4PointSlice::GetParameter(_anonymous_namespace_::DelayHermite3rdOrder4PointSlice *this, int a2, int a3)
{
  double result;

  if (!a2)
    return *((float *)this + a3 + 4);
  return result;
}

float `anonymous namespace'::DelayHermite3rdOrder4PointSlice::SetParameter(_anonymous_namespace_::DelayHermite3rdOrder4PointSlice *this, int a2, int a3, double a4)
{
  if (!a2)
  {
    *(float *)&a4 = a4;
    *((_DWORD *)this + a3 + 4) = LODWORD(a4);
  }
  return *(float *)&a4;
}

__n128 `anonymous namespace'::DelayHermite3rdOrder4PointSlice::UpdateParameters(uint64_t a1, double *a2)
{
  float v3;
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int32x4_t v17;
  __n128 result;
  float32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  __int128 v24;

  v3 = *a2;
  v4 = vmulq_n_f32(*(float32x4_t *)(a1 + 16), v3);
  v5 = vrndq_f32(v4);
  v6 = vcvtq_s32_f32(v5);
  v7.i64[0] = 0x200000002;
  v7.i64[1] = 0x200000002;
  v8 = vaddq_s32(v6, v7);
  v9.i64[0] = 0x100000001;
  v9.i64[1] = 0x100000001;
  v10 = vcgtq_s32(v9, v8);
  v11 = vdupq_n_s32(0xBB80u);
  v23 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v8, (int8x16_t)v10), v10), v11);
  v24 = *(_OWORD *)(a1 + 4144);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v12 = vaddq_s32(v6, v8);
  v13 = vcgtq_s32(v9, v12);
  v14 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v12, (int8x16_t)v13), v13), v11);
  v15 = vcgtq_s32(v9, v6);
  v21 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v6, (int8x16_t)v15), v15), v11);
  v22 = v14;
  v16 = (int8x16_t)vaddq_s32(v6, v9);
  v17 = (int32x4_t)vcgtq_u32((uint32x4_t)v6, (uint32x4_t)vdupq_n_s32(0x7FFFFFFEu));
  v19 = vsubq_f32(v4, v5);
  v20 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8(v16, (int8x16_t)v17), v17), v11);
  memcpy((void *)(a1 + 4160), (const void *)(a1 + 32), 0x1010uLL);
  *(_OWORD *)(a1 + 8272) = v24;
  *(int32x4_t *)(a1 + 8288) = v23;
  *(int32x4_t *)(a1 + 8304) = v22;
  *(int32x4_t *)(a1 + 8320) = v21;
  *(int32x4_t *)(a1 + 8336) = v20;
  result = (__n128)v19;
  *(float32x4_t *)(a1 + 8352) = v19;
  return result;
}

float `anonymous namespace'::DelayHermite3rdOrder4PointSlice::UpdateParameters(uint64_t a1, double *a2, int a3)
{
  uint64_t v3;
  int v4;
  float v5;
  double v6;
  uint64_t v7;
  _DWORD *v8;
  float v9;
  float v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  float result;

  v3 = a1 + 4 * a3;
  v4 = *(_DWORD *)(v3 + 4144);
  v5 = *(float *)(v3 + 16);
  v6 = *a2;
  v7 = *(unsigned int *)(v3 + 32);
  *(_DWORD *)(v3 + 4160) = v7;
  if ((int)v7 >= 1)
  {
    v8 = (_DWORD *)(a1 + 4 * a3);
    do
    {
      v8[1044] = v8[12];
      v8[1048] = v8[16];
      v8 += 8;
      --v7;
    }
    while (v7);
  }
  v9 = v6 * v5;
  v10 = truncf(v9);
  v11 = (int)v9;
  v12 = v11 & ~(v11 >> 31);
  if (v12 >= 0xBB7F)
    v12 = 47999;
  if (v11 <= 1)
    v13 = 1;
  else
    v13 = (int)v9;
  if (v13 >= 0xBB80)
    v13 = 48000;
  if (v11 <= 2)
    v14 = 2;
  else
    v14 = (int)v9;
  if (v14 >= 48001)
    v14 = 48001;
  if (v11 < 0)
    v11 = -1;
  if (v11 >= 47998)
    v11 = 47998;
  v15 = a1 + 4 * a3;
  *(_DWORD *)(v15 + 8272) = v4;
  *(_DWORD *)(v15 + 8288) = v11 + 2;
  result = v9 - v10;
  *(_DWORD *)(v15 + 8304) = v14 - 1;
  *(_DWORD *)(v15 + 8320) = v13;
  *(_DWORD *)(v15 + 8336) = v12 + 1;
  *(float *)(v15 + 8352) = result;
  return result;
}

__n128 `anonymous namespace'::DelayHermite3rdOrder4PointSlice::Run(_anonymous_namespace_::DelayHermite3rdOrder4PointSlice *this, Phase::DspLayer::VoiceEngine *a2, Phase::DspLayer::VoicePool *a3, unsigned int a4)
{
  int32x4_t v7;
  int64x2_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  unint64_t v19;
  float32x4_t v25;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int v31;
  __n128 result;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  __n128 v40;

  v35 = *((int32x4_t *)this + 519);
  v37 = *((int32x4_t *)this + 520);
  v39 = *((int32x4_t *)this + 521);
  v7 = (int32x4_t)vandq_s8(*((int8x16_t *)this + 260), (int8x16_t)vcgtq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2166F76B0));
  v8 = (int64x2_t)vcgtzq_s32(v7);
  if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0])
  {
    v9 = *((_QWORD *)a2 + 7);
    v10 = (float32x4_t *)((char *)this + 4192);
    v11 = 0uLL;
    v12 = 0uLL;
    v13.i64[0] = 0x100000001;
    v13.i64[1] = 0x100000001;
    do
    {
      v14.i32[0] = *(_DWORD *)(v9 + 4 * v10[-1].i32[0]);
      v14.i32[1] = *(_DWORD *)(v9 + 4 * v10[-1].i32[1]);
      v14.i32[2] = *(_DWORD *)(v9 + 4 * v10[-1].i32[2]);
      v14.i32[3] = *(_DWORD *)(v9 + 4 * v10[-1].i32[3]);
      v11 = vmlaq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)v8, v14), *v10);
      v12 = vaddq_s32(v12, v13);
      v8 = (int64x2_t)vcgtq_s32(v7, v12);
      v10 += 2;
    }
    while (vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0]);
  }
  else
  {
    v11 = 0uLL;
  }
  v40 = (__n128)v11;
  v34 = *((float32x4_t *)this + 522);
  *(__n64 *)v15.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)this + 1046, a4, *((int32x4_t *)this + 518));
  v33 = v15;
  *(__n64 *)v16.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)this + 1046, a4, v35);
  v36 = v16;
  *(__n64 *)v17.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)this + 1046, a4, v37);
  v38 = v17;
  *(__n64 *)v18.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)this + 1046, a4, v39);
  HIDWORD(v19) = a4 - 1;
  LODWORD(v19) = a4 - 1;
  __asm { FMOV            V3.4S, #1.5 }
  v25 = vmulq_f32(vsubq_f32(v38, v18), _Q3);
  _Q3.i64[0] = 0x3F0000003F000000;
  _Q3.i64[1] = 0x3F0000003F000000;
  __asm { FMOV            V1.4S, #-2.5 }
  v27 = vmlaq_f32(v36, _Q1, v38);
  _Q1.i64[0] = 0x4000000040000000;
  _Q1.i64[1] = 0x4000000040000000;
  v28 = vmlaq_f32(v27, _Q1, v18);
  _Q1.i64[0] = 0xBF000000BF000000;
  _Q1.i64[1] = 0xBF000000BF000000;
  v29 = vmlaq_f32(v38, v34, vmlaq_f32(vmulq_f32(vsubq_f32(v18, v36), _Q3), v34, vmlaq_f32(vmlaq_f32(v28, _Q1, v33), v34, vmlaq_f32(v25, _Q3, vsubq_f32(v33, v36)))));
  v30 = vandq_s8((int8x16_t)v29, vorrq_s8((int8x16_t)vcltzq_f32(v29), (int8x16_t)vcgezq_f32(v29)));
  switch((v19 >> 1))
  {
    case 0u:
      goto LABEL_10;
    case 1u:
      goto LABEL_9;
    case 3u:
      goto LABEL_8;
    case 7u:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * *((int *)this + 2071)) = v30.i32[3];
LABEL_8:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * *((int *)this + 2070)) = v30.i32[2];
LABEL_9:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * *((int *)this + 2069)) = v30.i32[1];
LABEL_10:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * *((int *)this + 2068)) = v30.i32[0];
      break;
    default:
      break;
  }
  v31 = (*((_DWORD *)this + 2094) + 1) % *((_DWORD *)this + 2095);
  *((_DWORD *)this + 2094) = v31;
  result = v40;
  *(__n128 *)(*((_QWORD *)this + 1046) + 16 * v31) = v40;
  return result;
}

void `anonymous namespace'::DelayHermite3rdOrder4PointSlice::CopyVoiceState(_anonymous_namespace_::DelayHermite3rdOrder4PointSlice *this, Phase::DspLayer::VoicePoolSlice *a2, signed int a3, signed int a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  int *v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  int *v18;
  int v19;

  v6 = a3;
  v7 = (char *)a2 + 4 * a3;
  v8 = a4;
  v9 = (char *)this + 4 * a4;
  *((_DWORD *)v9 + 4) = *((_DWORD *)v7 + 4);
  v10 = *((unsigned int *)v7 + 8);
  *((_DWORD *)v9 + 8) = v10;
  if ((int)v10 >= 1)
  {
    v11 = (_DWORD *)((char *)this + 4 * a4 + 64);
    v12 = (int *)((char *)a2 + 4 * a3 + 64);
    do
    {
      *(v11 - 4) = *(v12 - 4);
      v13 = *v12;
      v12 += 8;
      *v11 = v13;
      v11 += 8;
      --v10;
    }
    while (v10);
  }
  v14 = (_DWORD *)((char *)this + 4 * a4);
  v15 = (_DWORD *)((char *)a2 + 4 * a3);
  v16 = v15[1040];
  v14[1040] = v16;
  if ((int)v16 >= 1)
  {
    v17 = v14 + 1048;
    v18 = v15 + 1048;
    do
    {
      *(v17 - 4) = *(v18 - 4);
      v19 = *v18;
      v18 += 8;
      *v17 = v19;
      v17 += 8;
      --v16;
    }
    while (v16);
  }
  v14[1036] = v15[1036];
  v14[2068] = v15[2068];
  v14[2072] = v15[2072];
  v14[2076] = v15[2076];
  v14[2080] = v15[2080];
  v14[2084] = v15[2084];
  v14[2088] = v15[2088];
  _ZN5Phase8DspLayer17DelaylineCircularIfDv4_fE4CopyEPS3_ii((uint64_t)this + 8368, (uint64_t)a2 + 8368, a3, a4);
  *((_QWORD *)this + v8 + 1048) = *((_QWORD *)a2 + v6 + 1048);
}

uint64_t `anonymous namespace'::DelayHermite3rdOrder4PointSlice::AddInput(_anonymous_namespace_::DelayHermite3rdOrder4PointSlice *this, int a2, int a3, int a4, float a5)
{
  uint64_t result;
  char *v7;
  uint64_t v8;
  char *v9;

  if (a2)
    return 8;
  v7 = (char *)this + 32;
  v8 = *((int *)this + a3 + 8);
  if ((int)v8 > 127)
    return 6;
  result = 0;
  v9 = (char *)this + 32 * v8 + 4 * a3;
  *((_DWORD *)v9 + 12) = a4;
  *((float *)v9 + 16) = a5;
  *(_DWORD *)&v7[4 * a3] = v8 + 1;
  return result;
}

uint64_t `anonymous namespace'::DelayHermite3rdOrder4PointSlice::RemoveInput(_anonymous_namespace_::DelayHermite3rdOrder4PointSlice *this, int a2, int a3, int a4)
{
  if (a2)
    return 8;
  else
    return Phase::DspLayer::VoiceConnectionList<128>::RemoveConnection((uint64_t)this + 32, a3, a4);
}

uint64_t `anonymous namespace'::DelayHermite3rdOrder4PointSlice::SetInputGain(_anonymous_namespace_::DelayHermite3rdOrder4PointSlice *this, int a2, int a3, int a4, float a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  float *i;

  if (a2)
    return 8;
  v6 = *((unsigned int *)this + a3 + 8);
  if ((int)v6 < 1)
    return 7;
  v7 = 0;
  for (i = (float *)((char *)this + 4 * a3 + 64); *((_DWORD *)i - 4) != a4; i += 8)
  {
    if (v6 == ++v7)
      return 7;
  }
  if ((v7 & 0x80000000) != 0)
    return 7;
  result = 0;
  *i = a5;
  return result;
}

void `anonymous namespace'::DelayHermite3rdOrder4PointSlice::GetInputs(_anonymous_namespace_::DelayHermite3rdOrder4PointSlice *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    Phase::DspLayer::VoiceConnectionList<128>::GetConnections((uint64_t)this + 32, a3, (char **)a4);
  }
}

uint64_t `anonymous namespace'::DelayHermite3rdOrder4PointSlice::ClearInputs(_anonymous_namespace_::DelayHermite3rdOrder4PointSlice *this, int a2)
{
  *((_DWORD *)this + a2 + 8) = 0;
  return 0;
}

uint64_t `anonymous namespace'::DelayHermite3rdOrder4PointSlice::GetMaximumInputConnectionCount(_anonymous_namespace_::DelayHermite3rdOrder4PointSlice *this, int a2)
{
  return (a2 == 0) << 7;
}

unint64_t `anonymous namespace'::DelayHermite3rdOrder4PointSlice::GetOutput(_anonymous_namespace_::DelayHermite3rdOrder4PointSlice *this, int a2, int a3)
{
  if (a2)
    return 0xFFFFFFFF00000008;
  else
    return (unint64_t)*((unsigned int *)this + a3 + 1036) << 32;
}

uint64_t `anonymous namespace'::DelayHermite3rdOrder4PointSlice::SetOutput(_anonymous_namespace_::DelayHermite3rdOrder4PointSlice *this, int a2, int a3, int a4)
{
  uint64_t result;

  if (a2)
    return 8;
  result = 0;
  *((_DWORD *)this + a3 + 1036) = a4;
  return result;
}

uint64_t _ZN5Phase8DspLayer17DelaylineCircularIfDv4_fE5ResetEi(uint64_t result, unsigned int a2)
{
  int v2;
  _DWORD *v3;

  if (a2 > 3)
    __assert_rtn("Reset", "DelaylineCircular.hpp", 69, "lane >= 0 && lane < PHASE_SIMD_WIDTH");
  v2 = *(_DWORD *)(result + 12);
  if (v2 >= 1)
  {
    v3 = (_DWORD *)(*(_QWORD *)result + 4 * a2);
    do
    {
      *v3 = 0;
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  return result;
}

__n64 _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i(_QWORD *a1, int a2, int32x4_t a3)
{
  __n64 result;
  unint64_t v5;
  const float *v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  const float *v10;
  int32x4_t v11;
  int8x16_t v12;

  result.n64_u64[0] = 0;
  HIDWORD(v5) = a2 - 1;
  LODWORD(v5) = a2 - 1;
  v6 = (const float *)(a1 + 1);
  v7 = (int32x4_t)vld1q_dup_f32(v6);
  v8 = vsubq_s32(v7, a3);
  v7.i64[0] = 0x100000001;
  v7.i64[1] = 0x100000001;
  v9 = vaddq_s32(v8, v7);
  v10 = (const float *)a1 + 3;
  v11 = (int32x4_t)vld1q_dup_f32(v10);
  v12 = vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(v9), (int8x16_t)vaddq_s32(v9, v11)), (int8x16_t)vmaxq_s32(v9, (int32x4_t)0)), 2uLL), (int8x16_t)xmmword_2166F7490);
  switch((v5 >> 1))
  {
    case 0u:
      result.n64_u32[0] = *(_DWORD *)(*a1 + 4 * v12.i32[0]);
      break;
    case 1u:
      result.n64_u32[0] = *(_DWORD *)(*a1 + 4 * v12.i32[0]);
      result.n64_u32[1] = *(_DWORD *)(*a1 + 4 * v12.i32[1]);
      break;
    case 3u:
      result.n64_u32[0] = *(_DWORD *)(*a1 + 4 * v12.i32[0]);
      result.n64_u32[1] = *(_DWORD *)(*a1 + 4 * vextq_s8(v12, v12, 4uLL).i32[0]);
      break;
    case 7u:
      result.n64_u32[0] = *(_DWORD *)(*a1 + 4 * v12.i32[0]);
      result.n64_u32[1] = *(_DWORD *)(*a1 + 4 * v12.i32[1]);
      break;
    default:
      return result;
  }
  return result;
}

float _ZN5Phase8DspLayer17DelaylineCircularIfDv4_fE4CopyEPS3_ii(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  int v4;
  float *v5;
  float *v6;
  float v7;
  float result;

  if (a3 >= 4)
    __assert_rtn("Copy", "DelaylineCircular.hpp", 538, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  if (a4 >= 4)
    __assert_rtn("Copy", "DelaylineCircular.hpp", 539, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  v4 = *(_DWORD *)(a1 + 12);
  if (v4 != *(_DWORD *)(a2 + 12))
    __assert_rtn("Copy", "DelaylineCircular.hpp", 540, "mLength == dl->mLength");
  if (v4 >= 1)
  {
    v5 = (float *)(*(_QWORD *)a2 + 4 * a3);
    v6 = (float *)(*(_QWORD *)a1 + 4 * a4);
    do
    {
      v7 = *v5;
      v5 += 4;
      result = v7;
      *v6 = v7;
      v6 += 4;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t Phase::DspLayer::VoiceConnectionList<128>::RemoveConnection(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 4 * a2);
  if ((int)v3 < 1)
    return 7;
  v4 = 0;
  for (i = (_DWORD *)(a1 + 4 * a2 + 16); *i != a3; i += 8)
  {
    if (v3 == ++v4)
      return 7;
  }
  if ((v4 & 0x80000000) != 0)
    return 7;
  v6 = (v3 - 1);
  if ((int)v6 > (int)v4)
  {
    v7 = a1 + 32 * v6 + 4 * a2;
    *i = *(_DWORD *)(v7 + 16);
    i[4] = *(_DWORD *)(v7 + 32);
  }
  v8 = 0;
  *(_DWORD *)(a1 + 4 * a2) = v6;
  return v8;
}

void Phase::DspLayer::VoiceConnectionList<128>::GetConnections(uint64_t a1@<X0>, int a2@<W1>, char **a3@<X8>)
{
  int *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int *v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int *v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;

  v6 = (int *)(a1 + 4 * a2);
  v7 = *v6;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  std::vector<std::pair<int,float>>::reserve((void **)a3, v7);
  if ((int)v7 >= 1)
  {
    v8 = 0;
    v9 = a2;
    v10 = a3 + 2;
    v11 = (int *)a3[1];
    do
    {
      v12 = &v6[8 * v8 + 4];
      v13 = (int *)(a1 + 32 * v8 + 4 * v9 + 32);
      if ((unint64_t)v11 >= *v10)
      {
        v14 = ((char *)v11 - *a3) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        v15 = *v10 - (_QWORD)*a3;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a3 + 2), v17);
        v20 = (int *)&v18[8 * v14];
        *v20 = *v12;
        v20[1] = *v13;
        v22 = *a3;
        v21 = a3[1];
        v23 = v20;
        if (v21 != *a3)
        {
          do
          {
            v24 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *((_QWORD *)v23 - 1) = v24;
            v23 -= 2;
          }
          while (v21 != v22);
          v21 = *a3;
        }
        v11 = v20 + 2;
        *a3 = (char *)v23;
        a3[1] = (char *)(v20 + 2);
        a3[2] = &v18[8 * v19];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v11 = *v12;
        v11[1] = *v13;
        v11 += 2;
      }
      a3[1] = (char *)v11;
      ++v8;
    }
    while (v8 != v7);
  }
}

void sub_216556288(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<int,float>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::__function::__func<Phase::DspLayer::DelayHermite3rdOrder4Point::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayHermite3rdOrder4Point::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::DspLayer::DelayHermite3rdOrder4Point::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayHermite3rdOrder4Point::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D57A0D8;
  return result;
}

void std::__function::__func<Phase::DspLayer::DelayHermite3rdOrder4Point::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayHermite3rdOrder4Point::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D57A0D8;
}

uint64_t std::__function::__func<Phase::DspLayer::DelayHermite3rdOrder4Point::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayHermite3rdOrder4Point::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()(uint64_t a1, Phase::DspLayer::VoiceEngine **a2, int *a3)
{
  Phase::DspLayer::VoiceEngine *v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = *a3;
  v5 = operator new();
  Phase::DspLayer::VoicePool::VoicePool((Phase::DspLayer::VoicePool *)v5, "DelayHermite3rdOrder4Point", v3, v4, 8416);
  *(_QWORD *)v5 = &off_24D579FE0;
  if (*(int *)(v5 + 40) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 32);
      v8 = *(_QWORD *)(v5 + 24) + *(int *)(v5 + 16) * (uint64_t)v6;
      *(_QWORD *)v8 = &off_24D57A000;
      *(_QWORD *)(v8 + 8) = 0;
      bzero((void *)(v8 + 32), 0x1010uLL);
      bzero((void *)(v8 + 4160), 0x1010uLL);
      *(_OWORD *)(v8 + 8368) = 0u;
      *(_DWORD *)(v8 + 8380) = 48000;
      *(_QWORD *)(v8 + 8368) = malloc_type_malloc(0xBB800uLL, 0x100004052888210uLL);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7);
      ++v6;
    }
    while (v6 < *(_DWORD *)(v5 + 40));
  }
  return v5;
}

void sub_2165564B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

uint64_t *Phase::DspLayer::DelayHermite3rdOrder6Point::GetNewRegistryEntry(Phase::DspLayer::DelayHermite3rdOrder6Point *this)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v6[2];
  char v7;
  void *__p[2];
  char v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v1 = malloc_type_malloc(0x38uLL, 0x1050040B063AAFAuLL);
  *v1 = "Delay In Seconds";
  v1[1] = 0x500000000;
  *(_QWORD *)((char *)v1 + 20) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2166F7470;
  v1[6] = 0;
  v2 = (uint64_t *)operator new();
  v10[0] = &off_24D57A218;
  v11 = v10;
  Phase::Controller::VoicePoolEntry::VoicePoolEntry((uint64_t)v2, "DelayHermite3rdOrder6Point", 1, (uint64_t)v1, (uint64_t)v10);
  v3 = v11;
  if (v11 == v10)
  {
    v4 = 4;
    v3 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(__p, "Input");
  Phase::Controller::VoicePoolEntry::AddInput(v2, (__int128 *)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "Output");
  Phase::Controller::VoicePoolEntry::AddOutput(v2, (__int128 *)v6);
  if (v7 < 0)
    operator delete(v6[0]);
  return v2;
}

void sub_216556674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::DelayHermite3rdOrder6Point::~DelayHermite3rdOrder6Point(Phase::DspLayer::DelayHermite3rdOrder6Point *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);
  JUMPOUT(0x2199F9D70);
}

void `anonymous namespace'::DelayHermite3rdOrder6PointSlice::~DelayHermite3rdOrder6PointSlice(void **this)
{
  *this = &off_24D57A140;
  free(this[1050]);
  this[1050] = 0;
}

{
  *this = &off_24D57A140;
  free(this[1050]);
  this[1050] = 0;
  JUMPOUT(0x2199F9D70);
}

double `anonymous namespace'::DelayHermite3rdOrder6PointSlice::Reset(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 4144) = 0u;
  *(_DWORD *)(a1 + 8408) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  **(_QWORD **)(a1 + 8400) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result = 0.0;
  *(_OWORD *)(a1 + 8432) = 0u;
  *(_OWORD *)(a1 + 8416) = 0u;
  return result;
}

uint64_t `anonymous namespace'::DelayHermite3rdOrder6PointSlice::Reset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  uint64_t result;

  v8 = (_DWORD *)(a1 + 4 * (int)a3);
  v8[4] = 0;
  v8[8] = 0;
  v8[1036] = 0;
  _ZN5Phase8DspLayer17DelaylineCircularIfDv4_fE5ResetEi(a1 + 8400, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a3);
  *(_QWORD *)(a1 + 8 * (int)a3 + 8416) = a4;
  return result;
}

double `anonymous namespace'::DelayHermite3rdOrder6PointSlice::GetParameter(_anonymous_namespace_::DelayHermite3rdOrder6PointSlice *this, int a2, int a3)
{
  double result;

  if (!a2)
    return *((float *)this + a3 + 4);
  return result;
}

float `anonymous namespace'::DelayHermite3rdOrder6PointSlice::SetParameter(_anonymous_namespace_::DelayHermite3rdOrder6PointSlice *this, int a2, int a3, double a4)
{
  if (!a2)
  {
    *(float *)&a4 = a4;
    *((_DWORD *)this + a3 + 4) = LODWORD(a4);
  }
  return *(float *)&a4;
}

__n128 `anonymous namespace'::DelayHermite3rdOrder6PointSlice::UpdateParameters(uint64_t a1, double *a2)
{
  float v3;
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int32x4_t v22;
  __n128 result;
  float32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  __int128 v31;

  v3 = *a2;
  v4 = vmulq_n_f32(*(float32x4_t *)(a1 + 16), v3);
  v5 = vrndq_f32(v4);
  v6 = vcvtq_s32_f32(v5);
  v7.i64[0] = 0x100000001;
  v7.i64[1] = 0x100000001;
  v8 = vaddq_s32(v6, v7);
  v9.i64[0] = 0x100000001;
  v9.i64[1] = 0x100000001;
  v10 = vcgtq_s32(v9, v8);
  v11 = vdupq_n_s32(0xBB80u);
  v30 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v8, (int8x16_t)v10), v10), v11);
  v31 = *(_OWORD *)(a1 + 4144);
  v8.i64[0] = 0x300000003;
  v8.i64[1] = 0x300000003;
  v12 = vaddq_s32(v6, v8);
  v13 = vcgtq_s32(v9, v12);
  v29 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v12, (int8x16_t)v13), v13), v11);
  v12.i64[0] = 0x200000002;
  v12.i64[1] = 0x200000002;
  v14 = vaddq_s32(v6, v12);
  v15 = vcgtq_s32(v9, v14);
  v16 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v14, (int8x16_t)v15), v15), v11);
  v14.i64[0] = -1;
  v14.i64[1] = -1;
  v17 = vaddq_s32(v6, v14);
  v18 = vcgtq_s32(v9, v17);
  v27 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v17, (int8x16_t)v18), v18), v11);
  v28 = v16;
  v19 = vcgtq_s32(v9, v6);
  v20 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v6, (int8x16_t)v19), v19), v11);
  v21 = (int8x16_t)vaddq_s32(v6, v9);
  v22 = (int32x4_t)vcgtq_u32((uint32x4_t)v6, (uint32x4_t)vdupq_n_s32(0x7FFFFFFEu));
  v25 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8(v21, (int8x16_t)v22), v22), v11);
  v26 = v20;
  v24 = vsubq_f32(v4, v5);
  memcpy((void *)(a1 + 4160), (const void *)(a1 + 32), 0x1010uLL);
  *(_OWORD *)(a1 + 8272) = v31;
  *(int32x4_t *)(a1 + 8288) = v30;
  *(int32x4_t *)(a1 + 8304) = v29;
  *(int32x4_t *)(a1 + 8320) = v28;
  *(int32x4_t *)(a1 + 8336) = v27;
  *(int32x4_t *)(a1 + 8352) = v26;
  *(int32x4_t *)(a1 + 8368) = v25;
  result = (__n128)v24;
  *(float32x4_t *)(a1 + 8384) = v24;
  return result;
}

float `anonymous namespace'::DelayHermite3rdOrder6PointSlice::UpdateParameters(uint64_t a1, double *a2, int a3)
{
  uint64_t v3;
  int v4;
  float v5;
  double v6;
  uint64_t v7;
  _DWORD *v8;
  float v9;
  int v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  float result;

  v3 = a1 + 4 * a3;
  v4 = *(_DWORD *)(v3 + 4144);
  v5 = *(float *)(v3 + 16);
  v6 = *a2;
  v7 = *(unsigned int *)(v3 + 32);
  *(_DWORD *)(v3 + 4160) = v7;
  if ((int)v7 >= 1)
  {
    v8 = (_DWORD *)(a1 + 4 * a3);
    do
    {
      v8[1044] = v8[12];
      v8[1048] = v8[16];
      v8 += 8;
      --v7;
    }
    while (v7);
  }
  v9 = v6 * v5;
  v10 = (int)v9;
  v11 = truncf(v9);
  v12 = v10 & ~(v10 >> 31);
  if (v12 >= 0xBB7F)
    v12 = 47999;
  if (v10 <= 1)
    v13 = 1;
  else
    v13 = (int)v9;
  if (v13 >= 0xBB80)
    v13 = 48000;
  if (v10 <= 2)
    v14 = 2;
  else
    v14 = (int)v9;
  if (v14 >= 48001)
    v14 = 48001;
  if (v10 < 0)
    v15 = -1;
  else
    v15 = (int)v9;
  if (v15 >= 47998)
    v15 = 47998;
  v16 = v15 + 2;
  if (v10 <= -2)
    v17 = -2;
  else
    v17 = (int)v9;
  if (v17 >= 47997)
    v17 = 47997;
  v18 = v17 + 3;
  if (v10 <= 3)
    v10 = 3;
  if (v10 >= 48002)
    v10 = 48002;
  v19 = a1 + 4 * a3;
  *(_DWORD *)(v19 + 8272) = v4;
  *(_DWORD *)(v19 + 8288) = v10 - 2;
  *(_DWORD *)(v19 + 8304) = v18;
  *(_DWORD *)(v19 + 8320) = v16;
  result = v9 - v11;
  *(_DWORD *)(v19 + 8336) = v14 - 1;
  *(_DWORD *)(v19 + 8352) = v13;
  *(_DWORD *)(v19 + 8368) = v12 + 1;
  *(float *)(v19 + 8384) = result;
  return result;
}

__n128 `anonymous namespace'::DelayHermite3rdOrder6PointSlice::Run(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int32x4_t v7;
  int64x2_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  unint64_t v21;
  float32x4_t v22;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int v31;
  __n128 result;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  __n128 v44;

  v35 = *(int32x4_t *)(a1 + 8304);
  v37 = *(int32x4_t *)(a1 + 8320);
  v39 = *(int32x4_t *)(a1 + 8336);
  v41 = *(int32x4_t *)(a1 + 8352);
  v43 = *(int32x4_t *)(a1 + 8368);
  v7 = (int32x4_t)vandq_s8(*(int8x16_t *)(a1 + 4160), (int8x16_t)vcgtq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2166F76B0));
  v8 = (int64x2_t)vcgtzq_s32(v7);
  if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0])
  {
    v9 = *(_QWORD *)(a2 + 56);
    v10 = (float32x4_t *)(a1 + 4192);
    v11 = 0uLL;
    v12 = 0uLL;
    v13.i64[0] = 0x100000001;
    v13.i64[1] = 0x100000001;
    do
    {
      v14.i32[0] = *(_DWORD *)(v9 + 4 * v10[-1].i32[0]);
      v14.i32[1] = *(_DWORD *)(v9 + 4 * v10[-1].i32[1]);
      v14.i32[2] = *(_DWORD *)(v9 + 4 * v10[-1].i32[2]);
      v14.i32[3] = *(_DWORD *)(v9 + 4 * v10[-1].i32[3]);
      v11 = vmlaq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)v8, v14), *v10);
      v12 = vaddq_s32(v12, v13);
      v8 = (int64x2_t)vcgtq_s32(v7, v12);
      v10 += 2;
    }
    while (vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0]);
  }
  else
  {
    v11 = 0uLL;
  }
  v44 = (__n128)v11;
  v34 = *(float32x4_t *)(a1 + 8384);
  *(__n64 *)v15.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8400), a4, *(int32x4_t *)(a1 + 8288));
  v33 = v15;
  *(__n64 *)v16.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8400), a4, v35);
  v36 = v16;
  *(__n64 *)v17.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8400), a4, v37);
  v38 = v17;
  *(__n64 *)v18.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8400), a4, v39);
  v40 = v18;
  *(__n64 *)v19.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8400), a4, v41);
  v42 = v19;
  *(__n64 *)v20.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8400), a4, v43);
  HIDWORD(v21) = a4 - 1;
  LODWORD(v21) = a4 - 1;
  v22 = (float32x4_t)vdupq_n_s32(0x3DAAAAABu);
  __asm { FMOV            V4.4S, #1.25 }
  v28 = vmlaq_f32(vmlaq_f32(vmulq_f32(v42, (float32x4_t)vdupq_n_s32(0xC0155555)), _Q4, v40), (float32x4_t)vdupq_n_s32(0x3FD55555u), v20);
  _Q4.i64[0] = 0xBF000000BF000000;
  _Q4.i64[1] = 0xBF000000BF000000;
  v29 = vmlaq_f32(v42, v34, vmlaq_f32(vmlaq_f32(vmulq_f32(vsubq_f32(v20, v40), (float32x4_t)vdupq_n_s32(0x3F2AAAABu)), v22, vsubq_f32(v33, v38)), v34, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(v28, _Q4, v38), v22, v36), (float32x4_t)vdupq_n_s32(0xBE2AAAAB), v33), v34, vmlaq_f32(vmlaq_f32(vmulq_f32(vsubq_f32(v38, v40), (float32x4_t)vdupq_n_s32(0x3F155555u)), v22, vsubq_f32(v33, v36)), (float32x4_t)vdupq_n_s32(0x3FAAAAABu), vsubq_f32(v42, v20)))));
  v30 = vandq_s8((int8x16_t)v29, vorrq_s8((int8x16_t)vcltzq_f32(v29), (int8x16_t)vcgezq_f32(v29)));
  switch((v21 >> 1))
  {
    case 0u:
      goto LABEL_10;
    case 1u:
      goto LABEL_9;
    case 3u:
      goto LABEL_8;
    case 7u:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8284)) = v30.i32[3];
LABEL_8:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8280)) = v30.i32[2];
LABEL_9:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8276)) = v30.i32[1];
LABEL_10:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8272)) = v30.i32[0];
      break;
    default:
      break;
  }
  v31 = (*(_DWORD *)(a1 + 8408) + 1) % *(_DWORD *)(a1 + 8412);
  *(_DWORD *)(a1 + 8408) = v31;
  result = v44;
  *(__n128 *)(*(_QWORD *)(a1 + 8400) + 16 * v31) = v44;
  return result;
}

void `anonymous namespace'::DelayHermite3rdOrder6PointSlice::CopyVoiceState(_anonymous_namespace_::DelayHermite3rdOrder6PointSlice *this, Phase::DspLayer::VoicePoolSlice *a2, signed int a3, signed int a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  int *v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  int *v18;
  int v19;

  v6 = a3;
  v7 = (char *)a2 + 4 * a3;
  v8 = a4;
  v9 = (char *)this + 4 * a4;
  *((_DWORD *)v9 + 4) = *((_DWORD *)v7 + 4);
  v10 = *((unsigned int *)v7 + 8);
  *((_DWORD *)v9 + 8) = v10;
  if ((int)v10 >= 1)
  {
    v11 = (_DWORD *)((char *)this + 4 * a4 + 64);
    v12 = (int *)((char *)a2 + 4 * a3 + 64);
    do
    {
      *(v11 - 4) = *(v12 - 4);
      v13 = *v12;
      v12 += 8;
      *v11 = v13;
      v11 += 8;
      --v10;
    }
    while (v10);
  }
  v14 = (_DWORD *)((char *)this + 4 * a4);
  v15 = (_DWORD *)((char *)a2 + 4 * a3);
  v16 = v15[1040];
  v14[1040] = v16;
  if ((int)v16 >= 1)
  {
    v17 = v14 + 1048;
    v18 = v15 + 1048;
    do
    {
      *(v17 - 4) = *(v18 - 4);
      v19 = *v18;
      v18 += 8;
      *v17 = v19;
      v17 += 8;
      --v16;
    }
    while (v16);
  }
  v14[1036] = v15[1036];
  v14[2068] = v15[2068];
  v14[2072] = v15[2072];
  v14[2076] = v15[2076];
  v14[2080] = v15[2080];
  v14[2084] = v15[2084];
  v14[2088] = v15[2088];
  v14[2092] = v15[2092];
  v14[2096] = v15[2096];
  _ZN5Phase8DspLayer17DelaylineCircularIfDv4_fE4CopyEPS3_ii((uint64_t)this + 8400, (uint64_t)a2 + 8400, a3, a4);
  *((_QWORD *)this + v8 + 1052) = *((_QWORD *)a2 + v6 + 1052);
}

uint64_t `anonymous namespace'::DelayHermite3rdOrder6PointSlice::AddInput(_anonymous_namespace_::DelayHermite3rdOrder6PointSlice *this, int a2, int a3, int a4, float a5)
{
  uint64_t result;
  char *v7;
  uint64_t v8;
  char *v9;

  if (a2)
    return 8;
  v7 = (char *)this + 32;
  v8 = *((int *)this + a3 + 8);
  if ((int)v8 > 127)
    return 6;
  result = 0;
  v9 = (char *)this + 32 * v8 + 4 * a3;
  *((_DWORD *)v9 + 12) = a4;
  *((float *)v9 + 16) = a5;
  *(_DWORD *)&v7[4 * a3] = v8 + 1;
  return result;
}

uint64_t `anonymous namespace'::DelayHermite3rdOrder6PointSlice::RemoveInput(_anonymous_namespace_::DelayHermite3rdOrder6PointSlice *this, int a2, int a3, int a4)
{
  if (a2)
    return 8;
  else
    return Phase::DspLayer::VoiceConnectionList<128>::RemoveConnection((uint64_t)this + 32, a3, a4);
}

uint64_t `anonymous namespace'::DelayHermite3rdOrder6PointSlice::SetInputGain(_anonymous_namespace_::DelayHermite3rdOrder6PointSlice *this, int a2, int a3, int a4, float a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  float *i;

  if (a2)
    return 8;
  v6 = *((unsigned int *)this + a3 + 8);
  if ((int)v6 < 1)
    return 7;
  v7 = 0;
  for (i = (float *)((char *)this + 4 * a3 + 64); *((_DWORD *)i - 4) != a4; i += 8)
  {
    if (v6 == ++v7)
      return 7;
  }
  if ((v7 & 0x80000000) != 0)
    return 7;
  result = 0;
  *i = a5;
  return result;
}

void `anonymous namespace'::DelayHermite3rdOrder6PointSlice::GetInputs(_anonymous_namespace_::DelayHermite3rdOrder6PointSlice *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    Phase::DspLayer::VoiceConnectionList<128>::GetConnections((uint64_t)this + 32, a3, (char **)a4);
  }
}

uint64_t `anonymous namespace'::DelayHermite3rdOrder6PointSlice::ClearInputs(_anonymous_namespace_::DelayHermite3rdOrder6PointSlice *this, int a2)
{
  *((_DWORD *)this + a2 + 8) = 0;
  return 0;
}

uint64_t `anonymous namespace'::DelayHermite3rdOrder6PointSlice::GetMaximumInputConnectionCount(_anonymous_namespace_::DelayHermite3rdOrder6PointSlice *this, int a2)
{
  return (a2 == 0) << 7;
}

unint64_t `anonymous namespace'::DelayHermite3rdOrder6PointSlice::GetOutput(_anonymous_namespace_::DelayHermite3rdOrder6PointSlice *this, int a2, int a3)
{
  if (a2)
    return 0xFFFFFFFF00000008;
  else
    return (unint64_t)*((unsigned int *)this + a3 + 1036) << 32;
}

uint64_t `anonymous namespace'::DelayHermite3rdOrder6PointSlice::SetOutput(_anonymous_namespace_::DelayHermite3rdOrder6PointSlice *this, int a2, int a3, int a4)
{
  uint64_t result;

  if (a2)
    return 8;
  result = 0;
  *((_DWORD *)this + a3 + 1036) = a4;
  return result;
}

void std::__function::__func<Phase::DspLayer::DelayHermite3rdOrder6Point::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayHermite3rdOrder6Point::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::DspLayer::DelayHermite3rdOrder6Point::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayHermite3rdOrder6Point::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D57A218;
  return result;
}

void std::__function::__func<Phase::DspLayer::DelayHermite3rdOrder6Point::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayHermite3rdOrder6Point::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D57A218;
}

uint64_t std::__function::__func<Phase::DspLayer::DelayHermite3rdOrder6Point::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayHermite3rdOrder6Point::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()(uint64_t a1, Phase::DspLayer::VoiceEngine **a2, int *a3)
{
  Phase::DspLayer::VoiceEngine *v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = *a3;
  v5 = operator new();
  Phase::DspLayer::VoicePool::VoicePool((Phase::DspLayer::VoicePool *)v5, "DelayHermite3rdOrder6Point", v3, v4, 8448);
  *(_QWORD *)v5 = &off_24D57A120;
  if (*(int *)(v5 + 40) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 32);
      v8 = *(_QWORD *)(v5 + 24) + *(int *)(v5 + 16) * (uint64_t)v6;
      *(_QWORD *)v8 = &off_24D57A140;
      *(_QWORD *)(v8 + 8) = 0;
      bzero((void *)(v8 + 32), 0x1010uLL);
      bzero((void *)(v8 + 4160), 0x1010uLL);
      *(_OWORD *)(v8 + 8400) = 0u;
      *(_DWORD *)(v8 + 8412) = 48000;
      *(_QWORD *)(v8 + 8400) = malloc_type_malloc(0xBB800uLL, 0x100004052888210uLL);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7);
      ++v6;
    }
    while (v6 < *(_DWORD *)(v5 + 40));
  }
  return v5;
}

void sub_2165571B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

uint64_t *Phase::DspLayer::DelayLagrange3rdOrder3Point::GetNewRegistryEntry(Phase::DspLayer::DelayLagrange3rdOrder3Point *this)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v6[2];
  char v7;
  void *__p[2];
  char v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v1 = malloc_type_malloc(0x38uLL, 0x1050040B063AAFAuLL);
  *v1 = "Delay In Seconds";
  v1[1] = 0x500000000;
  *(_QWORD *)((char *)v1 + 20) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2166F7470;
  v1[6] = 0;
  v2 = (uint64_t *)operator new();
  v10[0] = &off_24D57A358;
  v11 = v10;
  Phase::Controller::VoicePoolEntry::VoicePoolEntry((uint64_t)v2, "DelayLagrange3rdOrder3Point", 1, (uint64_t)v1, (uint64_t)v10);
  v3 = v11;
  if (v11 == v10)
  {
    v4 = 4;
    v3 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(__p, "Input");
  Phase::Controller::VoicePoolEntry::AddInput(v2, (__int128 *)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "Output");
  Phase::Controller::VoicePoolEntry::AddOutput(v2, (__int128 *)v6);
  if (v7 < 0)
    operator delete(v6[0]);
  return v2;
}

void sub_21655736C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::DelayLagrange3rdOrder3Point::~DelayLagrange3rdOrder3Point(Phase::DspLayer::DelayLagrange3rdOrder3Point *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);
  JUMPOUT(0x2199F9D70);
}

void `anonymous namespace'::DelayLagrange3rdOrder3PointSlice::~DelayLagrange3rdOrder3PointSlice(void **this)
{
  *this = &off_24D57A280;
  free(this[1044]);
  this[1044] = 0;
}

{
  *this = &off_24D57A280;
  free(this[1044]);
  this[1044] = 0;
  JUMPOUT(0x2199F9D70);
}

double `anonymous namespace'::DelayLagrange3rdOrder3PointSlice::Reset(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 4144) = 0u;
  *(_DWORD *)(a1 + 8360) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  **(_QWORD **)(a1 + 8352) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result = 0.0;
  *(_OWORD *)(a1 + 8384) = 0u;
  *(_OWORD *)(a1 + 8368) = 0u;
  return result;
}

uint64_t `anonymous namespace'::DelayLagrange3rdOrder3PointSlice::Reset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  uint64_t result;

  v8 = (_DWORD *)(a1 + 4 * (int)a3);
  v8[4] = 0;
  v8[8] = 0;
  v8[1036] = 0;
  _ZN5Phase8DspLayer17DelaylineCircularIfDv4_fE5ResetEi(a1 + 8352, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a3);
  *(_QWORD *)(a1 + 8 * (int)a3 + 8368) = a4;
  return result;
}

double `anonymous namespace'::DelayLagrange3rdOrder3PointSlice::GetParameter(_anonymous_namespace_::DelayLagrange3rdOrder3PointSlice *this, int a2, int a3)
{
  double result;

  if (!a2)
    return *((float *)this + a3 + 4);
  return result;
}

float `anonymous namespace'::DelayLagrange3rdOrder3PointSlice::SetParameter(_anonymous_namespace_::DelayLagrange3rdOrder3PointSlice *this, int a2, int a3, double a4)
{
  if (!a2)
  {
    *(float *)&a4 = a4;
    *((_DWORD *)this + a3 + 4) = LODWORD(a4);
  }
  return *(float *)&a4;
}

__n128 `anonymous namespace'::DelayLagrange3rdOrder3PointSlice::UpdateParameters(uint64_t a1, double *a2)
{
  float v3;
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  __n128 result;
  float32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  __int128 v20;

  v20 = *(_OWORD *)(a1 + 4144);
  v3 = *a2;
  v4 = vmulq_n_f32(*(float32x4_t *)(a1 + 16), v3);
  v5 = vrndq_f32(v4);
  v6 = vcvtq_s32_f32(v5);
  v7.i64[0] = 0x100000001;
  v7.i64[1] = 0x100000001;
  v8 = (int32x4_t)vcgtq_u32((uint32x4_t)v6, (uint32x4_t)vdupq_n_s32(0x7FFFFFFEu));
  v9 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)vaddq_s32(v6, v7), (int8x16_t)v8), v8);
  v10 = vdupq_n_s32(0xBB80u);
  v11 = vminq_s32(v9, v10);
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v12 = vaddq_s32(v6, v9);
  v13 = vcgtq_s32(v7, v12);
  v18 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v12, (int8x16_t)v13), v13), v10);
  v19 = v11;
  v14 = vcgtq_s32(v7, v6);
  v16 = vsubq_f32(v4, v5);
  v17 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v6, (int8x16_t)v14), v14), v10);
  memcpy((void *)(a1 + 4160), (const void *)(a1 + 32), 0x1010uLL);
  *(_OWORD *)(a1 + 8272) = v20;
  *(int32x4_t *)(a1 + 8288) = v19;
  *(int32x4_t *)(a1 + 8304) = v18;
  *(int32x4_t *)(a1 + 8320) = v17;
  result = (__n128)v16;
  *(float32x4_t *)(a1 + 8336) = v16;
  return result;
}

float `anonymous namespace'::DelayLagrange3rdOrder3PointSlice::UpdateParameters(uint64_t a1, double *a2, int a3)
{
  uint64_t v3;
  int v4;
  float v5;
  double v6;
  uint64_t v7;
  _DWORD *v8;
  float v9;
  float v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  float result;

  v3 = a1 + 4 * a3;
  v4 = *(_DWORD *)(v3 + 4144);
  v5 = *(float *)(v3 + 16);
  v6 = *a2;
  v7 = *(unsigned int *)(v3 + 32);
  *(_DWORD *)(v3 + 4160) = v7;
  if ((int)v7 >= 1)
  {
    v8 = (_DWORD *)(a1 + 4 * a3);
    do
    {
      v8[1044] = v8[12];
      v8[1048] = v8[16];
      v8 += 8;
      --v7;
    }
    while (v7);
  }
  v9 = v6 * v5;
  v10 = truncf(v9);
  v11 = (int)v9;
  if ((int)v9 <= 1)
    v12 = 1;
  else
    v12 = (int)v9;
  if (v12 >= 0xBB80)
    v12 = 48000;
  if (v11 <= 2)
    v13 = 2;
  else
    v13 = (int)v9;
  if (v13 >= 48001)
    v13 = 48001;
  v14 = v13 - 1;
  v15 = v11 & ~(v11 >> 31);
  if (v15 >= 0xBB7F)
    v15 = 47999;
  v16 = a1 + 4 * a3;
  *(_DWORD *)(v16 + 8272) = v4;
  *(_DWORD *)(v16 + 8288) = v15 + 1;
  *(_DWORD *)(v16 + 8304) = v14;
  result = v9 - v10;
  *(_DWORD *)(v16 + 8320) = v12;
  *(float *)(v16 + 8336) = result;
  return result;
}

__n128 `anonymous namespace'::DelayLagrange3rdOrder3PointSlice::Run(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int32x4_t v7;
  int64x2_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  unint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int v23;
  __n128 result;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  __n128 v30;

  v27 = *(int32x4_t *)(a1 + 8304);
  v29 = *(int32x4_t *)(a1 + 8320);
  v7 = (int32x4_t)vandq_s8(*(int8x16_t *)(a1 + 4160), (int8x16_t)vcgtq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2166F76B0));
  v8 = (int64x2_t)vcgtzq_s32(v7);
  if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0])
  {
    v9 = *(_QWORD *)(a2 + 56);
    v10 = (float32x4_t *)(a1 + 4192);
    v11 = 0uLL;
    v12 = 0uLL;
    v13.i64[0] = 0x100000001;
    v13.i64[1] = 0x100000001;
    do
    {
      v14.i32[0] = *(_DWORD *)(v9 + 4 * v10[-1].i32[0]);
      v14.i32[1] = *(_DWORD *)(v9 + 4 * v10[-1].i32[1]);
      v14.i32[2] = *(_DWORD *)(v9 + 4 * v10[-1].i32[2]);
      v14.i32[3] = *(_DWORD *)(v9 + 4 * v10[-1].i32[3]);
      v11 = vmlaq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)v8, v14), *v10);
      v12 = vaddq_s32(v12, v13);
      v8 = (int64x2_t)vcgtq_s32(v7, v12);
      v10 += 2;
    }
    while (vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0]);
  }
  else
  {
    v11 = 0uLL;
  }
  v30 = (__n128)v11;
  v26 = *(float32x4_t *)(a1 + 8336);
  *(__n64 *)v15.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8352), a4, *(int32x4_t *)(a1 + 8288));
  v25 = v15;
  *(__n64 *)v16.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8352), a4, v27);
  v28 = v16;
  *(__n64 *)v17.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8352), a4, v29);
  HIDWORD(v18) = a4 - 1;
  LODWORD(v18) = a4 - 1;
  v19.i64[0] = 0x3F0000003F000000;
  v19.i64[1] = 0x3F0000003F000000;
  v20.i64[0] = 0xBF000000BF000000;
  v20.i64[1] = 0xBF000000BF000000;
  v21 = vmlaq_f32(v17, v26, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(v25, (float32x4_t)vdupq_n_s32(0xBEAAAAAB), v28), v20, v17), (float32x4_t)vdupq_n_s32(0xBE2AAAAB), v25), v26, vmlaq_f32(vmlaq_f32(vnegq_f32(v17), v19, vaddq_f32(v25, v28)), v26, vmlaq_f32(vmulq_f32(vsubq_f32(v17, v25), v19), (float32x4_t)vdupq_n_s32(0x3E2AAAABu), vsubq_f32(v25, v28)))));
  v22 = vandq_s8((int8x16_t)v21, vorrq_s8((int8x16_t)vcltzq_f32(v21), (int8x16_t)vcgezq_f32(v21)));
  switch((v18 >> 1))
  {
    case 0u:
      goto LABEL_10;
    case 1u:
      goto LABEL_9;
    case 3u:
      goto LABEL_8;
    case 7u:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8284)) = v22.i32[3];
LABEL_8:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8280)) = v22.i32[2];
LABEL_9:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8276)) = v22.i32[1];
LABEL_10:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8272)) = v22.i32[0];
      break;
    default:
      break;
  }
  v23 = (*(_DWORD *)(a1 + 8360) + 1) % *(_DWORD *)(a1 + 8364);
  *(_DWORD *)(a1 + 8360) = v23;
  result = v30;
  *(__n128 *)(*(_QWORD *)(a1 + 8352) + 16 * v23) = v30;
  return result;
}

void `anonymous namespace'::DelayLagrange3rdOrder3PointSlice::CopyVoiceState(_anonymous_namespace_::DelayLagrange3rdOrder3PointSlice *this, Phase::DspLayer::VoicePoolSlice *a2, signed int a3, signed int a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  int *v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  int *v18;
  int v19;

  v6 = a3;
  v7 = (char *)a2 + 4 * a3;
  v8 = a4;
  v9 = (char *)this + 4 * a4;
  *((_DWORD *)v9 + 4) = *((_DWORD *)v7 + 4);
  v10 = *((unsigned int *)v7 + 8);
  *((_DWORD *)v9 + 8) = v10;
  if ((int)v10 >= 1)
  {
    v11 = (_DWORD *)((char *)this + 4 * a4 + 64);
    v12 = (int *)((char *)a2 + 4 * a3 + 64);
    do
    {
      *(v11 - 4) = *(v12 - 4);
      v13 = *v12;
      v12 += 8;
      *v11 = v13;
      v11 += 8;
      --v10;
    }
    while (v10);
  }
  v14 = (_DWORD *)((char *)this + 4 * a4);
  v15 = (_DWORD *)((char *)a2 + 4 * a3);
  v16 = v15[1040];
  v14[1040] = v16;
  if ((int)v16 >= 1)
  {
    v17 = v14 + 1048;
    v18 = v15 + 1048;
    do
    {
      *(v17 - 4) = *(v18 - 4);
      v19 = *v18;
      v18 += 8;
      *v17 = v19;
      v17 += 8;
      --v16;
    }
    while (v16);
  }
  v14[1036] = v15[1036];
  v14[2068] = v15[2068];
  v14[2072] = v15[2072];
  v14[2076] = v15[2076];
  v14[2080] = v15[2080];
  v14[2084] = v15[2084];
  _ZN5Phase8DspLayer17DelaylineCircularIfDv4_fE4CopyEPS3_ii((uint64_t)this + 8352, (uint64_t)a2 + 8352, a3, a4);
  *((_QWORD *)this + v8 + 1046) = *((_QWORD *)a2 + v6 + 1046);
}

uint64_t `anonymous namespace'::DelayLagrange3rdOrder3PointSlice::AddInput(_anonymous_namespace_::DelayLagrange3rdOrder3PointSlice *this, int a2, int a3, int a4, float a5)
{
  uint64_t result;
  char *v7;
  uint64_t v8;
  char *v9;

  if (a2)
    return 8;
  v7 = (char *)this + 32;
  v8 = *((int *)this + a3 + 8);
  if ((int)v8 > 127)
    return 6;
  result = 0;
  v9 = (char *)this + 32 * v8 + 4 * a3;
  *((_DWORD *)v9 + 12) = a4;
  *((float *)v9 + 16) = a5;
  *(_DWORD *)&v7[4 * a3] = v8 + 1;
  return result;
}

uint64_t `anonymous namespace'::DelayLagrange3rdOrder3PointSlice::RemoveInput(_anonymous_namespace_::DelayLagrange3rdOrder3PointSlice *this, int a2, int a3, int a4)
{
  if (a2)
    return 8;
  else
    return Phase::DspLayer::VoiceConnectionList<128>::RemoveConnection((uint64_t)this + 32, a3, a4);
}

uint64_t `anonymous namespace'::DelayLagrange3rdOrder3PointSlice::SetInputGain(_anonymous_namespace_::DelayLagrange3rdOrder3PointSlice *this, int a2, int a3, int a4, float a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  float *i;

  if (a2)
    return 8;
  v6 = *((unsigned int *)this + a3 + 8);
  if ((int)v6 < 1)
    return 7;
  v7 = 0;
  for (i = (float *)((char *)this + 4 * a3 + 64); *((_DWORD *)i - 4) != a4; i += 8)
  {
    if (v6 == ++v7)
      return 7;
  }
  if ((v7 & 0x80000000) != 0)
    return 7;
  result = 0;
  *i = a5;
  return result;
}

void `anonymous namespace'::DelayLagrange3rdOrder3PointSlice::GetInputs(_anonymous_namespace_::DelayLagrange3rdOrder3PointSlice *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    Phase::DspLayer::VoiceConnectionList<128>::GetConnections((uint64_t)this + 32, a3, (char **)a4);
  }
}

uint64_t `anonymous namespace'::DelayLagrange3rdOrder3PointSlice::ClearInputs(_anonymous_namespace_::DelayLagrange3rdOrder3PointSlice *this, int a2)
{
  *((_DWORD *)this + a2 + 8) = 0;
  return 0;
}

uint64_t `anonymous namespace'::DelayLagrange3rdOrder3PointSlice::GetMaximumInputConnectionCount(_anonymous_namespace_::DelayLagrange3rdOrder3PointSlice *this, int a2)
{
  return (a2 == 0) << 7;
}

unint64_t `anonymous namespace'::DelayLagrange3rdOrder3PointSlice::GetOutput(_anonymous_namespace_::DelayLagrange3rdOrder3PointSlice *this, int a2, int a3)
{
  if (a2)
    return 0xFFFFFFFF00000008;
  else
    return (unint64_t)*((unsigned int *)this + a3 + 1036) << 32;
}

uint64_t `anonymous namespace'::DelayLagrange3rdOrder3PointSlice::SetOutput(_anonymous_namespace_::DelayLagrange3rdOrder3PointSlice *this, int a2, int a3, int a4)
{
  uint64_t result;

  if (a2)
    return 8;
  result = 0;
  *((_DWORD *)this + a3 + 1036) = a4;
  return result;
}

void std::__function::__func<Phase::DspLayer::DelayLagrange3rdOrder3Point::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayLagrange3rdOrder3Point::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::DspLayer::DelayLagrange3rdOrder3Point::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayLagrange3rdOrder3Point::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D57A358;
  return result;
}

void std::__function::__func<Phase::DspLayer::DelayLagrange3rdOrder3Point::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayLagrange3rdOrder3Point::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D57A358;
}

uint64_t std::__function::__func<Phase::DspLayer::DelayLagrange3rdOrder3Point::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayLagrange3rdOrder3Point::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()(uint64_t a1, Phase::DspLayer::VoiceEngine **a2, int *a3)
{
  Phase::DspLayer::VoiceEngine *v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = *a3;
  v5 = operator new();
  Phase::DspLayer::VoicePool::VoicePool((Phase::DspLayer::VoicePool *)v5, "DelayLagrange3rdOrder3Point", v3, v4, 8400);
  *(_QWORD *)v5 = &off_24D57A260;
  if (*(int *)(v5 + 40) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 32);
      v8 = *(_QWORD *)(v5 + 24) + *(int *)(v5 + 16) * (uint64_t)v6;
      *(_QWORD *)v8 = &off_24D57A280;
      *(_QWORD *)(v8 + 8) = 0;
      bzero((void *)(v8 + 32), 0x1010uLL);
      bzero((void *)(v8 + 4160), 0x1010uLL);
      *(_OWORD *)(v8 + 8352) = 0u;
      *(_DWORD *)(v8 + 8364) = 48000;
      *(_QWORD *)(v8 + 8352) = malloc_type_malloc(0xBB800uLL, 0x100004052888210uLL);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7);
      ++v6;
    }
    while (v6 < *(_DWORD *)(v5 + 40));
  }
  return v5;
}

void sub_216557D34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

uint64_t *Phase::DspLayer::DelayLagrange5thOrder6Point::GetNewRegistryEntry(Phase::DspLayer::DelayLagrange5thOrder6Point *this)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v6[2];
  char v7;
  void *__p[2];
  char v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v1 = malloc_type_malloc(0x38uLL, 0x1050040B063AAFAuLL);
  *v1 = "Delay In Seconds";
  v1[1] = 0x500000000;
  *(_QWORD *)((char *)v1 + 20) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2166F7470;
  v1[6] = 0;
  v2 = (uint64_t *)operator new();
  v10[0] = &off_24D57A498;
  v11 = v10;
  Phase::Controller::VoicePoolEntry::VoicePoolEntry((uint64_t)v2, "DelayLagrange5thOrder6Point", 1, (uint64_t)v1, (uint64_t)v10);
  v3 = v11;
  if (v11 == v10)
  {
    v4 = 4;
    v3 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(__p, "Input");
  Phase::Controller::VoicePoolEntry::AddInput(v2, (__int128 *)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "Output");
  Phase::Controller::VoicePoolEntry::AddOutput(v2, (__int128 *)v6);
  if (v7 < 0)
    operator delete(v6[0]);
  return v2;
}

void sub_216557EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::DelayLagrange5thOrder6Point::~DelayLagrange5thOrder6Point(Phase::DspLayer::DelayLagrange5thOrder6Point *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);
  JUMPOUT(0x2199F9D70);
}

void `anonymous namespace'::DelayLagrange5thOrder6PointSlice::~DelayLagrange5thOrder6PointSlice(void **this)
{
  *this = &off_24D57A3C0;
  free(this[1050]);
  this[1050] = 0;
}

{
  *this = &off_24D57A3C0;
  free(this[1050]);
  this[1050] = 0;
  JUMPOUT(0x2199F9D70);
}

double `anonymous namespace'::DelayLagrange5thOrder6PointSlice::Reset(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 4144) = 0u;
  *(_DWORD *)(a1 + 8408) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  **(_QWORD **)(a1 + 8400) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result = 0.0;
  *(_OWORD *)(a1 + 8432) = 0u;
  *(_OWORD *)(a1 + 8416) = 0u;
  return result;
}

uint64_t `anonymous namespace'::DelayLagrange5thOrder6PointSlice::Reset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  uint64_t result;

  v8 = (_DWORD *)(a1 + 4 * (int)a3);
  v8[4] = 0;
  v8[8] = 0;
  v8[1036] = 0;
  _ZN5Phase8DspLayer17DelaylineCircularIfDv4_fE5ResetEi(a1 + 8400, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a3);
  *(_QWORD *)(a1 + 8 * (int)a3 + 8416) = a4;
  return result;
}

double `anonymous namespace'::DelayLagrange5thOrder6PointSlice::GetParameter(_anonymous_namespace_::DelayLagrange5thOrder6PointSlice *this, int a2, int a3)
{
  double result;

  if (!a2)
    return *((float *)this + a3 + 4);
  return result;
}

float `anonymous namespace'::DelayLagrange5thOrder6PointSlice::SetParameter(_anonymous_namespace_::DelayLagrange5thOrder6PointSlice *this, int a2, int a3, double a4)
{
  if (!a2)
  {
    *(float *)&a4 = a4;
    *((_DWORD *)this + a3 + 4) = LODWORD(a4);
  }
  return *(float *)&a4;
}

__n128 `anonymous namespace'::DelayLagrange5thOrder6PointSlice::UpdateParameters(uint64_t a1, double *a2)
{
  float v3;
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  __n128 result;
  float32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  __int128 v29;

  v3 = *a2;
  v4 = vmulq_n_f32(*(float32x4_t *)(a1 + 16), v3);
  v5 = vrndq_f32(v4);
  v6 = vcvtq_s32_f32(v5);
  v7.i64[0] = 0x300000003;
  v7.i64[1] = 0x300000003;
  v8 = vaddq_s32(v6, v7);
  v9.i64[0] = 0x100000001;
  v9.i64[1] = 0x100000001;
  v10 = vcgtq_s32(v9, v8);
  v11 = vdupq_n_s32(0xBB80u);
  v28 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v8, (int8x16_t)v10), v10), v11);
  v29 = *(_OWORD *)(a1 + 4144);
  v8.i64[0] = 0x100000001;
  v8.i64[1] = 0x100000001;
  v12 = vaddq_s32(v6, v8);
  v13 = vcgtq_s32(v9, v12);
  v27 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v12, (int8x16_t)v13), v13), v11);
  v12.i64[0] = -1;
  v12.i64[1] = -1;
  v14 = vaddq_s32(v6, v12);
  v15 = vcgtq_s32(v9, v14);
  v16 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v14, (int8x16_t)v15), v15), v11);
  v14.i64[0] = 0x200000002;
  v14.i64[1] = 0x200000002;
  v17 = vaddq_s32(v6, v14);
  v18 = vcgtq_s32(v9, v17);
  v25 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v17, (int8x16_t)v18), v18), v11);
  v26 = v16;
  v19 = (int32x4_t)vcgtq_u32((uint32x4_t)v6, (uint32x4_t)vdupq_n_s32(0x7FFFFFFEu));
  v20 = vcgtq_s32(v9, v6);
  v23 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v6, (int8x16_t)v20), v20), v11);
  v24 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)vaddq_s32(v6, v9), (int8x16_t)v19), v19), v11);
  v22 = vsubq_f32(v4, v5);
  memcpy((void *)(a1 + 4160), (const void *)(a1 + 32), 0x1010uLL);
  *(_OWORD *)(a1 + 8272) = v29;
  *(int32x4_t *)(a1 + 8288) = v28;
  *(int32x4_t *)(a1 + 8304) = v27;
  *(int32x4_t *)(a1 + 8320) = v26;
  *(int32x4_t *)(a1 + 8336) = v25;
  *(int32x4_t *)(a1 + 8352) = v24;
  *(int32x4_t *)(a1 + 8368) = v23;
  result = (__n128)v22;
  *(float32x4_t *)(a1 + 8384) = v22;
  return result;
}

float `anonymous namespace'::DelayLagrange5thOrder6PointSlice::UpdateParameters(uint64_t a1, double *a2, int a3)
{
  uint64_t v3;
  int v4;
  float v5;
  double v6;
  uint64_t v7;
  _DWORD *v8;
  float v9;
  int v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  float result;

  v3 = a1 + 4 * a3;
  v4 = *(_DWORD *)(v3 + 4144);
  v5 = *(float *)(v3 + 16);
  v6 = *a2;
  v7 = *(unsigned int *)(v3 + 32);
  *(_DWORD *)(v3 + 4160) = v7;
  if ((int)v7 >= 1)
  {
    v8 = (_DWORD *)(a1 + 4 * a3);
    do
    {
      v8[1044] = v8[12];
      v8[1048] = v8[16];
      v8 += 8;
      --v7;
    }
    while (v7);
  }
  v9 = v6 * v5;
  v10 = (int)v9;
  v11 = truncf(v9);
  if ((int)v9 <= 1)
    v12 = 1;
  else
    v12 = (int)v9;
  if (v12 >= 0xBB80)
    v12 = 48000;
  v13 = v10 & ~(v10 >> 31);
  if (v13 >= 0xBB7F)
    v13 = 47999;
  v14 = v13 + 1;
  if (v10 < 0)
    v15 = -1;
  else
    v15 = (int)v9;
  if (v15 >= 47998)
    v15 = 47998;
  v16 = v15 + 2;
  if (v10 <= 2)
    v17 = 2;
  else
    v17 = (int)v9;
  if (v17 >= 48001)
    v17 = 48001;
  v18 = v17 - 1;
  if (v10 <= 3)
    v19 = 3;
  else
    v19 = (int)v9;
  if (v19 >= 48002)
    v19 = 48002;
  v20 = v19 - 2;
  if (v10 <= -2)
    v10 = -2;
  if (v10 >= 47997)
    v10 = 47997;
  v21 = a1 + 4 * a3;
  *(_DWORD *)(v21 + 8272) = v4;
  *(_DWORD *)(v21 + 8288) = v10 + 3;
  *(_DWORD *)(v21 + 8304) = v20;
  *(_DWORD *)(v21 + 8320) = v18;
  *(_DWORD *)(v21 + 8336) = v16;
  *(_DWORD *)(v21 + 8352) = v14;
  result = v9 - v11;
  *(_DWORD *)(v21 + 8368) = v12;
  *(float *)(v21 + 8384) = result;
  return result;
}

__n128 `anonymous namespace'::DelayLagrange5thOrder6PointSlice::Run(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int32x4_t v7;
  int64x2_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  unint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v31;
  float32x4_t v33;
  float32x4_t v35;
  int8x16_t v36;
  int v37;
  __n128 result;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  float32x4_t v48;
  int32x4_t v49;
  __n128 v50;

  v41 = *(int32x4_t *)(a1 + 8304);
  v43 = *(int32x4_t *)(a1 + 8320);
  v45 = *(int32x4_t *)(a1 + 8336);
  v47 = *(int32x4_t *)(a1 + 8352);
  v49 = *(int32x4_t *)(a1 + 8368);
  v7 = (int32x4_t)vandq_s8(*(int8x16_t *)(a1 + 4160), (int8x16_t)vcgtq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2166F76B0));
  v8 = (int64x2_t)vcgtzq_s32(v7);
  if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0])
  {
    v9 = *(_QWORD *)(a2 + 56);
    v10 = (float32x4_t *)(a1 + 4192);
    v11 = 0uLL;
    v12 = 0uLL;
    v13.i64[0] = 0x100000001;
    v13.i64[1] = 0x100000001;
    do
    {
      v14.i32[0] = *(_DWORD *)(v9 + 4 * v10[-1].i32[0]);
      v14.i32[1] = *(_DWORD *)(v9 + 4 * v10[-1].i32[1]);
      v14.i32[2] = *(_DWORD *)(v9 + 4 * v10[-1].i32[2]);
      v14.i32[3] = *(_DWORD *)(v9 + 4 * v10[-1].i32[3]);
      v11 = vmlaq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)v8, v14), *v10);
      v12 = vaddq_s32(v12, v13);
      v8 = (int64x2_t)vcgtq_s32(v7, v12);
      v10 += 2;
    }
    while (vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0]);
  }
  else
  {
    v11 = 0uLL;
  }
  v50 = (__n128)v11;
  v40 = *(float32x4_t *)(a1 + 8384);
  *(__n64 *)v15.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8400), a4, *(int32x4_t *)(a1 + 8288));
  v39 = v15;
  *(__n64 *)v16.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8400), a4, v41);
  v42 = v16;
  *(__n64 *)v17.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8400), a4, v43);
  v44 = v17;
  *(__n64 *)v18.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8400), a4, v45);
  v46 = v18;
  *(__n64 *)v19.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8400), a4, v47);
  v48 = v19;
  *(__n64 *)v20.f32 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8400), a4, v49);
  HIDWORD(v21) = a4 - 1;
  LODWORD(v21) = a4 - 1;
  v22 = (float32x4_t)vdupq_n_s32(0x3D2AAAABu);
  v23 = vmlaq_f32(vmlaq_f32(vmulq_f32(vsubq_f32(v44, v46), v22), (float32x4_t)vdupq_n_s32(0x3C088889u), vsubq_f32(v39, v42)), (float32x4_t)vdupq_n_s32(0x3DAAAAABu), vsubq_f32(v48, v20));
  v24 = vaddq_f32(v44, v48);
  v25 = vmulq_f32(vaddq_f32(v42, v46), v22);
  __asm { FMOV            V5.4S, #0.25 }
  v31 = vaddq_f32(v25, vmlaq_f32(vmulq_f32(v24, (float32x4_t)vdupq_n_s32(0xBE2AAAAB)), _Q5, v20));
  __asm { FMOV            V6.4S, #-1.25 }
  v33 = vsubq_f32(vmlaq_f32(vmulq_f32(v20, _Q6), (float32x4_t)vdupq_n_s32(0x3EAAAAABu), v24), v25);
  v25.i64[0] = 0xBF000000BF000000;
  v25.i64[1] = 0xBF000000BF000000;
  __asm { FMOV            V6.4S, #-0.25 }
  v35 = vmlaq_f32(v20, v40, vmlaq_f32(vmlaq_f32(vmlaq_f32(vaddq_f32(v48, vmlaq_f32(vmlaq_f32(vmulq_f32(v44, v25), (float32x4_t)vdupq_n_s32(0x3D4CCCCDu), v42), (float32x4_t)vdupq_n_s32(0xBEAAAAAB), v20)), _Q6, v46), (float32x4_t)vdupq_n_s32(0x3D088889u), v39), v40, vmlaq_f32(v33, v40,
              vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v48, (float32x4_t)vdupq_n_s32(0xBF155555)), (float32x4_t)vdupq_n_s32(0x3ED55555u), v20), (float32x4_t)vdupq_n_s32(0x3E955555u), v46), (float32x4_t)vdupq_n_s32(0xBD2AAAAB), vaddq_f32(v39, vaddq_f32(v42, v44))), v40, vmlaq_f32(v31, v40, v23)))));
  v36 = vandq_s8((int8x16_t)v35, vorrq_s8((int8x16_t)vcltzq_f32(v35), (int8x16_t)vcgezq_f32(v35)));
  switch((v21 >> 1))
  {
    case 0u:
      goto LABEL_10;
    case 1u:
      goto LABEL_9;
    case 3u:
      goto LABEL_8;
    case 7u:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8284)) = v36.i32[3];
LABEL_8:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8280)) = v36.i32[2];
LABEL_9:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8276)) = v36.i32[1];
LABEL_10:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8272)) = v36.i32[0];
      break;
    default:
      break;
  }
  v37 = (*(_DWORD *)(a1 + 8408) + 1) % *(_DWORD *)(a1 + 8412);
  *(_DWORD *)(a1 + 8408) = v37;
  result = v50;
  *(__n128 *)(*(_QWORD *)(a1 + 8400) + 16 * v37) = v50;
  return result;
}

void `anonymous namespace'::DelayLagrange5thOrder6PointSlice::CopyVoiceState(_anonymous_namespace_::DelayLagrange5thOrder6PointSlice *this, Phase::DspLayer::VoicePoolSlice *a2, signed int a3, signed int a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  int *v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  int *v18;
  int v19;

  v6 = a3;
  v7 = (char *)a2 + 4 * a3;
  v8 = a4;
  v9 = (char *)this + 4 * a4;
  *((_DWORD *)v9 + 4) = *((_DWORD *)v7 + 4);
  v10 = *((unsigned int *)v7 + 8);
  *((_DWORD *)v9 + 8) = v10;
  if ((int)v10 >= 1)
  {
    v11 = (_DWORD *)((char *)this + 4 * a4 + 64);
    v12 = (int *)((char *)a2 + 4 * a3 + 64);
    do
    {
      *(v11 - 4) = *(v12 - 4);
      v13 = *v12;
      v12 += 8;
      *v11 = v13;
      v11 += 8;
      --v10;
    }
    while (v10);
  }
  v14 = (_DWORD *)((char *)this + 4 * a4);
  v15 = (_DWORD *)((char *)a2 + 4 * a3);
  v16 = v15[1040];
  v14[1040] = v16;
  if ((int)v16 >= 1)
  {
    v17 = v14 + 1048;
    v18 = v15 + 1048;
    do
    {
      *(v17 - 4) = *(v18 - 4);
      v19 = *v18;
      v18 += 8;
      *v17 = v19;
      v17 += 8;
      --v16;
    }
    while (v16);
  }
  v14[1036] = v15[1036];
  v14[2068] = v15[2068];
  v14[2072] = v15[2072];
  v14[2076] = v15[2076];
  v14[2080] = v15[2080];
  v14[2084] = v15[2084];
  v14[2088] = v15[2088];
  v14[2092] = v15[2092];
  v14[2096] = v15[2096];
  _ZN5Phase8DspLayer17DelaylineCircularIfDv4_fE4CopyEPS3_ii((uint64_t)this + 8400, (uint64_t)a2 + 8400, a3, a4);
  *((_QWORD *)this + v8 + 1052) = *((_QWORD *)a2 + v6 + 1052);
}

uint64_t `anonymous namespace'::DelayLagrange5thOrder6PointSlice::AddInput(_anonymous_namespace_::DelayLagrange5thOrder6PointSlice *this, int a2, int a3, int a4, float a5)
{
  uint64_t result;
  char *v7;
  uint64_t v8;
  char *v9;

  if (a2)
    return 8;
  v7 = (char *)this + 32;
  v8 = *((int *)this + a3 + 8);
  if ((int)v8 > 127)
    return 6;
  result = 0;
  v9 = (char *)this + 32 * v8 + 4 * a3;
  *((_DWORD *)v9 + 12) = a4;
  *((float *)v9 + 16) = a5;
  *(_DWORD *)&v7[4 * a3] = v8 + 1;
  return result;
}

uint64_t `anonymous namespace'::DelayLagrange5thOrder6PointSlice::RemoveInput(_anonymous_namespace_::DelayLagrange5thOrder6PointSlice *this, int a2, int a3, int a4)
{
  if (a2)
    return 8;
  else
    return Phase::DspLayer::VoiceConnectionList<128>::RemoveConnection((uint64_t)this + 32, a3, a4);
}

uint64_t `anonymous namespace'::DelayLagrange5thOrder6PointSlice::SetInputGain(_anonymous_namespace_::DelayLagrange5thOrder6PointSlice *this, int a2, int a3, int a4, float a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  float *i;

  if (a2)
    return 8;
  v6 = *((unsigned int *)this + a3 + 8);
  if ((int)v6 < 1)
    return 7;
  v7 = 0;
  for (i = (float *)((char *)this + 4 * a3 + 64); *((_DWORD *)i - 4) != a4; i += 8)
  {
    if (v6 == ++v7)
      return 7;
  }
  if ((v7 & 0x80000000) != 0)
    return 7;
  result = 0;
  *i = a5;
  return result;
}

void `anonymous namespace'::DelayLagrange5thOrder6PointSlice::GetInputs(_anonymous_namespace_::DelayLagrange5thOrder6PointSlice *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    Phase::DspLayer::VoiceConnectionList<128>::GetConnections((uint64_t)this + 32, a3, (char **)a4);
  }
}

uint64_t `anonymous namespace'::DelayLagrange5thOrder6PointSlice::ClearInputs(_anonymous_namespace_::DelayLagrange5thOrder6PointSlice *this, int a2)
{
  *((_DWORD *)this + a2 + 8) = 0;
  return 0;
}

uint64_t `anonymous namespace'::DelayLagrange5thOrder6PointSlice::GetMaximumInputConnectionCount(_anonymous_namespace_::DelayLagrange5thOrder6PointSlice *this, int a2)
{
  return (a2 == 0) << 7;
}

unint64_t `anonymous namespace'::DelayLagrange5thOrder6PointSlice::GetOutput(_anonymous_namespace_::DelayLagrange5thOrder6PointSlice *this, int a2, int a3)
{
  if (a2)
    return 0xFFFFFFFF00000008;
  else
    return (unint64_t)*((unsigned int *)this + a3 + 1036) << 32;
}

uint64_t `anonymous namespace'::DelayLagrange5thOrder6PointSlice::SetOutput(_anonymous_namespace_::DelayLagrange5thOrder6PointSlice *this, int a2, int a3, int a4)
{
  uint64_t result;

  if (a2)
    return 8;
  result = 0;
  *((_DWORD *)this + a3 + 1036) = a4;
  return result;
}

void std::__function::__func<Phase::DspLayer::DelayLagrange5thOrder6Point::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayLagrange5thOrder6Point::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::DspLayer::DelayLagrange5thOrder6Point::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayLagrange5thOrder6Point::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D57A498;
  return result;
}

void std::__function::__func<Phase::DspLayer::DelayLagrange5thOrder6Point::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayLagrange5thOrder6Point::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D57A498;
}

uint64_t std::__function::__func<Phase::DspLayer::DelayLagrange5thOrder6Point::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayLagrange5thOrder6Point::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()(uint64_t a1, Phase::DspLayer::VoiceEngine **a2, int *a3)
{
  Phase::DspLayer::VoiceEngine *v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = *a3;
  v5 = operator new();
  Phase::DspLayer::VoicePool::VoicePool((Phase::DspLayer::VoicePool *)v5, "DelayLagrange5thOrder6Point", v3, v4, 8448);
  *(_QWORD *)v5 = &off_24D57A3A0;
  if (*(int *)(v5 + 40) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 32);
      v8 = *(_QWORD *)(v5 + 24) + *(int *)(v5 + 16) * (uint64_t)v6;
      *(_QWORD *)v8 = &off_24D57A3C0;
      *(_QWORD *)(v8 + 8) = 0;
      bzero((void *)(v8 + 32), 0x1010uLL);
      bzero((void *)(v8 + 4160), 0x1010uLL);
      *(_OWORD *)(v8 + 8400) = 0u;
      *(_DWORD *)(v8 + 8412) = 48000;
      *(_QWORD *)(v8 + 8400) = malloc_type_malloc(0xBB800uLL, 0x100004052888210uLL);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7);
      ++v6;
    }
    while (v6 < *(_DWORD *)(v5 + 40));
  }
  return v5;
}

void sub_216558AA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

uint64_t *Phase::DspLayer::DelayLinear::GetNewRegistryEntry(Phase::DspLayer::DelayLinear *this)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v6[2];
  char v7;
  void *__p[2];
  char v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v1 = malloc_type_malloc(0x38uLL, 0x1050040B063AAFAuLL);
  *v1 = "Delay In Seconds";
  v1[1] = 0x500000000;
  *(_QWORD *)((char *)v1 + 20) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2166F7470;
  v1[6] = 0;
  v2 = (uint64_t *)operator new();
  v10[0] = &off_24D57A5D8;
  v11 = v10;
  Phase::Controller::VoicePoolEntry::VoicePoolEntry((uint64_t)v2, "DelayLinear", 1, (uint64_t)v1, (uint64_t)v10);
  v3 = v11;
  if (v11 == v10)
  {
    v4 = 4;
    v3 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(__p, "Input");
  Phase::Controller::VoicePoolEntry::AddInput(v2, (__int128 *)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "Output");
  Phase::Controller::VoicePoolEntry::AddOutput(v2, (__int128 *)v6);
  if (v7 < 0)
    operator delete(v6[0]);
  return v2;
}

void sub_216558C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::DelayLinear::~DelayLinear(Phase::DspLayer::DelayLinear *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);
  JUMPOUT(0x2199F9D70);
}

void `anonymous namespace'::DelayLinearSlice::~DelayLinearSlice(void **this)
{
  *this = &off_24D57A500;
  free(this[1044]);
  this[1044] = 0;
}

{
  *this = &off_24D57A500;
  free(this[1044]);
  this[1044] = 0;
  JUMPOUT(0x2199F9D70);
}

double `anonymous namespace'::DelayLinearSlice::Reset(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 4144) = 0u;
  *(_DWORD *)(a1 + 8360) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  **(_QWORD **)(a1 + 8352) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result = 0.0;
  *(_OWORD *)(a1 + 8384) = 0u;
  *(_OWORD *)(a1 + 8368) = 0u;
  return result;
}

uint64_t `anonymous namespace'::DelayLinearSlice::Reset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  uint64_t result;

  v8 = (_DWORD *)(a1 + 4 * (int)a3);
  v8[4] = 0;
  v8[8] = 0;
  v8[1036] = 0;
  _ZN5Phase8DspLayer17DelaylineCircularIfDv4_fE5ResetEi(a1 + 8352, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a3);
  *(_QWORD *)(a1 + 8 * (int)a3 + 8368) = a4;
  return result;
}

double `anonymous namespace'::DelayLinearSlice::GetParameter(_anonymous_namespace_::DelayLinearSlice *this, int a2, int a3)
{
  double result;

  if (!a2)
    return *((float *)this + a3 + 4);
  return result;
}

float `anonymous namespace'::DelayLinearSlice::SetParameter(_anonymous_namespace_::DelayLinearSlice *this, int a2, int a3, double a4)
{
  if (!a2)
  {
    *(float *)&a4 = a4;
    *((_DWORD *)this + a3 + 4) = LODWORD(a4);
  }
  return *(float *)&a4;
}

__n128 `anonymous namespace'::DelayLinearSlice::UpdateParameters(uint64_t a1, double *a2)
{
  float v3;
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  __n128 result;
  int32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  __int128 v15;

  v15 = *(_OWORD *)(a1 + 4144);
  v3 = *a2;
  v4 = vmulq_n_f32(*(float32x4_t *)(a1 + 16), v3);
  v5 = vrndq_f32(v4);
  v6 = vcvtq_s32_f32(v5);
  v7.i64[0] = 0x100000001;
  v7.i64[1] = 0x100000001;
  v14 = vcgtq_s32(v7, v6);
  v8 = vdupq_n_s32(0xBB80u);
  v12 = vsubq_f32(v4, v5);
  v13 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v6, (int8x16_t)v14), v14), v8);
  v9 = (int32x4_t)vcgtq_u32((uint32x4_t)v6, (uint32x4_t)vdupq_n_s32(0x7FFFFFFEu));
  v11 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)vaddq_s32(v6, v7), (int8x16_t)v9), v9), v8);
  memcpy((void *)(a1 + 4160), (const void *)(a1 + 32), 0x1010uLL);
  *(_OWORD *)(a1 + 8272) = v15;
  *(int32x4_t *)(a1 + 8288) = v14;
  *(int32x4_t *)(a1 + 8304) = v13;
  *(float32x4_t *)(a1 + 8320) = v12;
  result = (__n128)v11;
  *(int32x4_t *)(a1 + 8336) = v11;
  return result;
}

float `anonymous namespace'::DelayLinearSlice::UpdateParameters(uint64_t a1, double *a2, int a3)
{
  uint64_t v3;
  int v4;
  float v5;
  double v6;
  uint64_t v7;
  _DWORD *v8;
  float v9;
  float v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  float result;

  v3 = a1 + 4 * a3;
  v4 = *(_DWORD *)(v3 + 4144);
  v5 = *(float *)(v3 + 16);
  v6 = *a2;
  v7 = *(unsigned int *)(v3 + 32);
  *(_DWORD *)(v3 + 4160) = v7;
  if ((int)v7 >= 1)
  {
    v8 = (_DWORD *)(a1 + 4 * a3);
    do
    {
      v8[1044] = v8[12];
      v8[1048] = v8[16];
      v8 += 8;
      --v7;
    }
    while (v7);
  }
  v9 = v6 * v5;
  v10 = truncf(v9);
  v11 = (int)v9;
  v12 = v11 & ~(v11 >> 31);
  if (v12 >= 0xBB7F)
    v12 = 47999;
  v13 = v12 + 1;
  v14 = v11 < 1;
  if (v11 <= 1)
    v11 = 1;
  v15 = v14;
  if (v11 >= 0xBB80)
    v11 = 48000;
  v16 = a1 + 4 * a3;
  *(_DWORD *)(v16 + 8272) = v4;
  *(_DWORD *)(v16 + 8288) = v15;
  *(_DWORD *)(v16 + 8304) = v11;
  result = v9 - v10;
  *(float *)(v16 + 8320) = result;
  *(_DWORD *)(v16 + 8336) = v13;
  return result;
}

void `anonymous namespace'::DelayLinearSlice::Run(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int32x4_t v7;
  int64x2_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  int v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int8x16_t v29;

  v28 = *(int32x4_t *)(a1 + 8336);
  v7 = (int32x4_t)vandq_s8(*(int8x16_t *)(a1 + 4160), (int8x16_t)vcgtq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2166F76B0));
  v8 = (int64x2_t)vcgtzq_s32(v7);
  if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0])
  {
    v9 = *(_QWORD *)(a2 + 56);
    v10 = (float32x4_t *)(a1 + 4192);
    v11 = 0uLL;
    v12 = 0uLL;
    v13.i64[0] = 0x100000001;
    v13.i64[1] = 0x100000001;
    do
    {
      v14.i32[0] = *(_DWORD *)(v9 + 4 * v10[-1].i32[0]);
      v14.i32[1] = *(_DWORD *)(v9 + 4 * v10[-1].i32[1]);
      v14.i32[2] = *(_DWORD *)(v9 + 4 * v10[-1].i32[2]);
      v14.i32[3] = *(_DWORD *)(v9 + 4 * v10[-1].i32[3]);
      v11 = vmlaq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)v8, v14), *v10);
      v12 = vaddq_s32(v12, v13);
      v8 = (int64x2_t)vcgtq_s32(v7, v12);
      v10 += 2;
    }
    while (vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0]);
  }
  else
  {
    v11 = 0uLL;
  }
  v29 = (int8x16_t)v11;
  v26 = *(int8x16_t *)(a1 + 8288);
  v27 = *(float32x4_t *)(a1 + 8320);
  *(__n64 *)v15.i8 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8352), a4, *(int32x4_t *)(a1 + 8304));
  v25 = v15;
  *(__n64 *)v16.i8 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8352), a4, v28);
  v17 = *(_DWORD *)(a1 + 8360);
  v18 = v17;
  if (v17 < 0)
    v18 = *(_DWORD *)(a1 + 8364) + v17;
  v19 = *(_QWORD *)(a1 + 8352);
  HIDWORD(v20) = a4 - 1;
  LODWORD(v20) = a4 - 1;
  v21 = (float32x4_t)vbslq_s8(v26, v29, v25);
  v22 = vmlaq_f32(v21, vsubq_f32((float32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v19 + 16 * v18), v26), vandq_s8(v16, vmvnq_s8(v26))), v21), v27);
  v23 = vandq_s8((int8x16_t)v22, vorrq_s8((int8x16_t)vcltzq_f32(v22), (int8x16_t)vcgezq_f32(v22)));
  switch((v20 >> 1))
  {
    case 0u:
      goto LABEL_12;
    case 1u:
      goto LABEL_11;
    case 3u:
      goto LABEL_10;
    case 7u:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8284)) = v23.i32[3];
LABEL_10:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8280)) = v23.i32[2];
LABEL_11:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8276)) = v23.i32[1];
LABEL_12:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8272)) = v23.i32[0];
      v17 = *(_DWORD *)(a1 + 8360);
      v19 = *(_QWORD *)(a1 + 8352);
      break;
    default:
      break;
  }
  v24 = (v17 + 1) % *(_DWORD *)(a1 + 8364);
  *(_DWORD *)(a1 + 8360) = v24;
  *(int8x16_t *)(v19 + 16 * v24) = v29;
}

void `anonymous namespace'::DelayLinearSlice::CopyVoiceState(_anonymous_namespace_::DelayLinearSlice *this, Phase::DspLayer::VoicePoolSlice *a2, signed int a3, signed int a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  int *v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  int *v18;
  int v19;

  v6 = a3;
  v7 = (char *)a2 + 4 * a3;
  v8 = a4;
  v9 = (char *)this + 4 * a4;
  *((_DWORD *)v9 + 4) = *((_DWORD *)v7 + 4);
  v10 = *((unsigned int *)v7 + 8);
  *((_DWORD *)v9 + 8) = v10;
  if ((int)v10 >= 1)
  {
    v11 = (_DWORD *)((char *)this + 4 * a4 + 64);
    v12 = (int *)((char *)a2 + 4 * a3 + 64);
    do
    {
      *(v11 - 4) = *(v12 - 4);
      v13 = *v12;
      v12 += 8;
      *v11 = v13;
      v11 += 8;
      --v10;
    }
    while (v10);
  }
  v14 = (_DWORD *)((char *)this + 4 * a4);
  v15 = (_DWORD *)((char *)a2 + 4 * a3);
  v16 = v15[1040];
  v14[1040] = v16;
  if ((int)v16 >= 1)
  {
    v17 = v14 + 1048;
    v18 = v15 + 1048;
    do
    {
      *(v17 - 4) = *(v18 - 4);
      v19 = *v18;
      v18 += 8;
      *v17 = v19;
      v17 += 8;
      --v16;
    }
    while (v16);
  }
  v14[1036] = v15[1036];
  v14[2068] = v15[2068];
  v14[2072] = v15[2072];
  v14[2076] = v15[2076];
  v14[2080] = v15[2080];
  v14[2084] = v15[2084];
  _ZN5Phase8DspLayer17DelaylineCircularIfDv4_fE4CopyEPS3_ii((uint64_t)this + 8352, (uint64_t)a2 + 8352, a3, a4);
  *((_QWORD *)this + v8 + 1046) = *((_QWORD *)a2 + v6 + 1046);
}

uint64_t `anonymous namespace'::DelayLinearSlice::AddInput(_anonymous_namespace_::DelayLinearSlice *this, int a2, int a3, int a4, float a5)
{
  uint64_t result;
  char *v7;
  uint64_t v8;
  char *v9;

  if (a2)
    return 8;
  v7 = (char *)this + 32;
  v8 = *((int *)this + a3 + 8);
  if ((int)v8 > 127)
    return 6;
  result = 0;
  v9 = (char *)this + 32 * v8 + 4 * a3;
  *((_DWORD *)v9 + 12) = a4;
  *((float *)v9 + 16) = a5;
  *(_DWORD *)&v7[4 * a3] = v8 + 1;
  return result;
}

uint64_t `anonymous namespace'::DelayLinearSlice::RemoveInput(_anonymous_namespace_::DelayLinearSlice *this, int a2, int a3, int a4)
{
  if (a2)
    return 8;
  else
    return Phase::DspLayer::VoiceConnectionList<128>::RemoveConnection((uint64_t)this + 32, a3, a4);
}

uint64_t `anonymous namespace'::DelayLinearSlice::SetInputGain(_anonymous_namespace_::DelayLinearSlice *this, int a2, int a3, int a4, float a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  float *i;

  if (a2)
    return 8;
  v6 = *((unsigned int *)this + a3 + 8);
  if ((int)v6 < 1)
    return 7;
  v7 = 0;
  for (i = (float *)((char *)this + 4 * a3 + 64); *((_DWORD *)i - 4) != a4; i += 8)
  {
    if (v6 == ++v7)
      return 7;
  }
  if ((v7 & 0x80000000) != 0)
    return 7;
  result = 0;
  *i = a5;
  return result;
}

void `anonymous namespace'::DelayLinearSlice::GetInputs(_anonymous_namespace_::DelayLinearSlice *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    Phase::DspLayer::VoiceConnectionList<128>::GetConnections((uint64_t)this + 32, a3, (char **)a4);
  }
}

uint64_t `anonymous namespace'::DelayLinearSlice::ClearInputs(_anonymous_namespace_::DelayLinearSlice *this, int a2)
{
  *((_DWORD *)this + a2 + 8) = 0;
  return 0;
}

uint64_t `anonymous namespace'::DelayLinearSlice::GetMaximumInputConnectionCount(_anonymous_namespace_::DelayLinearSlice *this, int a2)
{
  return (a2 == 0) << 7;
}

unint64_t `anonymous namespace'::DelayLinearSlice::GetOutput(_anonymous_namespace_::DelayLinearSlice *this, int a2, int a3)
{
  if (a2)
    return 0xFFFFFFFF00000008;
  else
    return (unint64_t)*((unsigned int *)this + a3 + 1036) << 32;
}

uint64_t `anonymous namespace'::DelayLinearSlice::SetOutput(_anonymous_namespace_::DelayLinearSlice *this, int a2, int a3, int a4)
{
  uint64_t result;

  if (a2)
    return 8;
  result = 0;
  *((_DWORD *)this + a3 + 1036) = a4;
  return result;
}

void std::__function::__func<Phase::DspLayer::DelayLinear::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayLinear::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::DspLayer::DelayLinear::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayLinear::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D57A5D8;
  return result;
}

void std::__function::__func<Phase::DspLayer::DelayLinear::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayLinear::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D57A5D8;
}

uint64_t std::__function::__func<Phase::DspLayer::DelayLinear::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayLinear::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()(uint64_t a1, Phase::DspLayer::VoiceEngine **a2, int *a3)
{
  Phase::DspLayer::VoiceEngine *v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = *a3;
  v5 = operator new();
  Phase::DspLayer::VoicePool::VoicePool((Phase::DspLayer::VoicePool *)v5, "DelayLinear", v3, v4, 8400);
  *(_QWORD *)v5 = &off_24D57A4E0;
  if (*(int *)(v5 + 40) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 32);
      v8 = *(_QWORD *)(v5 + 24) + *(int *)(v5 + 16) * (uint64_t)v6;
      *(_QWORD *)v8 = &off_24D57A500;
      *(_QWORD *)(v8 + 8) = 0;
      bzero((void *)(v8 + 32), 0x1010uLL);
      bzero((void *)(v8 + 4160), 0x1010uLL);
      *(_OWORD *)(v8 + 8352) = 0u;
      *(_DWORD *)(v8 + 8364) = 48000;
      *(_QWORD *)(v8 + 8352) = malloc_type_malloc(0xBB800uLL, 0x100004052888210uLL);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7);
      ++v6;
    }
    while (v6 < *(_DWORD *)(v5 + 40));
  }
  return v5;
}

void sub_2165595C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

uint64_t *Phase::DspLayer::DelayStep::GetNewRegistryEntry(Phase::DspLayer::DelayStep *this)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v6[2];
  char v7;
  void *__p[2];
  char v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v1 = malloc_type_malloc(0x38uLL, 0x1050040B063AAFAuLL);
  *v1 = "Delay In Seconds";
  v1[1] = 0x500000000;
  *(_QWORD *)((char *)v1 + 20) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2166F7470;
  v1[6] = 0;
  v2 = (uint64_t *)operator new();
  v10[0] = &off_24D57A718;
  v11 = v10;
  Phase::Controller::VoicePoolEntry::VoicePoolEntry((uint64_t)v2, "DelayStep", 1, (uint64_t)v1, (uint64_t)v10);
  v3 = v11;
  if (v11 == v10)
  {
    v4 = 4;
    v3 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(__p, "Input");
  Phase::Controller::VoicePoolEntry::AddInput(v2, (__int128 *)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "Output");
  Phase::Controller::VoicePoolEntry::AddOutput(v2, (__int128 *)v6);
  if (v7 < 0)
    operator delete(v6[0]);
  return v2;
}

void sub_21655977C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::DelayStep::~DelayStep(Phase::DspLayer::DelayStep *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);
  JUMPOUT(0x2199F9D70);
}

void `anonymous namespace'::DelayStepSlice::~DelayStepSlice(void **this)
{
  *this = &off_24D57A640;
  free(this[1038]);
  this[1038] = 0;
}

{
  *this = &off_24D57A640;
  free(this[1038]);
  this[1038] = 0;
  JUMPOUT(0x2199F9D70);
}

double `anonymous namespace'::DelayStepSlice::Reset(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 4144) = 0u;
  *(_DWORD *)(a1 + 8312) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  **(_QWORD **)(a1 + 8304) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result = 0.0;
  *(_OWORD *)(a1 + 8336) = 0u;
  *(_OWORD *)(a1 + 8320) = 0u;
  return result;
}

uint64_t `anonymous namespace'::DelayStepSlice::Reset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  uint64_t result;

  v8 = (_DWORD *)(a1 + 4 * (int)a3);
  v8[4] = 0;
  v8[8] = 0;
  v8[1036] = 0;
  _ZN5Phase8DspLayer17DelaylineCircularIfDv4_fE5ResetEi(a1 + 8304, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a3);
  *(_QWORD *)(a1 + 8 * (int)a3 + 8320) = a4;
  return result;
}

double `anonymous namespace'::DelayStepSlice::GetParameter(_anonymous_namespace_::DelayStepSlice *this, int a2, int a3)
{
  double result;

  if (!a2)
    return *((float *)this + a3 + 4);
  return result;
}

float `anonymous namespace'::DelayStepSlice::SetParameter(_anonymous_namespace_::DelayStepSlice *this, int a2, int a3, double a4)
{
  if (!a2)
  {
    *(float *)&a4 = a4;
    *((_DWORD *)this + a3 + 4) = LODWORD(a4);
  }
  return *(float *)&a4;
}

__n128 `anonymous namespace'::DelayStepSlice::UpdateParameters(uint64_t a1, double *a2)
{
  float v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  __n128 result;
  int32x4_t v8;
  __int128 v9;

  v3 = *a2;
  v4 = vcvtq_s32_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 16), v3));
  v5.i64[0] = 0x100000001;
  v5.i64[1] = 0x100000001;
  v6 = vcgtq_s32(v5, v4);
  v8 = vminq_s32(vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v4, (int8x16_t)v6), v6), vdupq_n_s32(0xBB80u));
  v9 = *(_OWORD *)(a1 + 4144);
  memcpy((void *)(a1 + 4160), (const void *)(a1 + 32), 0x1010uLL);
  *(_OWORD *)(a1 + 8272) = v9;
  result = (__n128)v8;
  *(int32x4_t *)(a1 + 8288) = v8;
  return result;
}

uint64_t `anonymous namespace'::DelayStepSlice::UpdateParameters(uint64_t result, double *a2, int a3)
{
  uint64_t v3;
  int v4;
  float v5;
  double v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;

  v3 = result + 4 * a3;
  v4 = *(_DWORD *)(v3 + 4144);
  v5 = *(float *)(v3 + 16);
  v6 = *a2;
  v7 = *(unsigned int *)(v3 + 32);
  *(_DWORD *)(v3 + 4160) = v7;
  if ((int)v7 >= 1)
  {
    v8 = (_DWORD *)(result + 4 * a3);
    do
    {
      v8[1044] = v8[12];
      v8[1048] = v8[16];
      v8 += 8;
      --v7;
    }
    while (v7);
  }
  v9 = (int)(v6 * v5);
  if (v9 <= 1)
    v9 = 1;
  if (v9 >= 0xBB80)
    v9 = 48000;
  v10 = result + 4 * a3;
  *(_DWORD *)(v10 + 8272) = v4;
  *(_DWORD *)(v10 + 8288) = v9;
  return result;
}

__n128 `anonymous namespace'::DelayStepSlice::Run(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int32x4_t v7;
  int64x2_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  unint64_t v16;
  int8x16_t v17;
  int v18;
  __n128 result;
  __n128 v20;

  v7 = (int32x4_t)vandq_s8(*(int8x16_t *)(a1 + 4160), (int8x16_t)vcgtq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2166F76B0));
  v8 = (int64x2_t)vcgtzq_s32(v7);
  if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0])
  {
    v9 = *(_QWORD *)(a2 + 56);
    v10 = (float32x4_t *)(a1 + 4192);
    v11 = 0uLL;
    v12 = 0uLL;
    v13.i64[0] = 0x100000001;
    v13.i64[1] = 0x100000001;
    do
    {
      v14.i32[0] = *(_DWORD *)(v9 + 4 * v10[-1].i32[0]);
      v14.i32[1] = *(_DWORD *)(v9 + 4 * v10[-1].i32[1]);
      v14.i32[2] = *(_DWORD *)(v9 + 4 * v10[-1].i32[2]);
      v14.i32[3] = *(_DWORD *)(v9 + 4 * v10[-1].i32[3]);
      v11 = vmlaq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)v8, v14), *v10);
      v12 = vaddq_s32(v12, v13);
      v8 = (int64x2_t)vcgtq_s32(v7, v12);
      v10 += 2;
    }
    while (vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0]);
  }
  else
  {
    v11 = 0uLL;
  }
  v20 = (__n128)v11;
  *(__n64 *)v15.i8 = _ZNK5Phase8DspLayer17DelaylineCircularIfDv4_fE15GetValueAtDelayEiDv4_i((_QWORD *)(a1 + 8304), a4, *(int32x4_t *)(a1 + 8288));
  HIDWORD(v16) = a4 - 1;
  LODWORD(v16) = a4 - 1;
  v17 = vandq_s8(v15, vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)v15), (int8x16_t)vcgezq_f32((float32x4_t)v15)));
  switch((v16 >> 1))
  {
    case 0u:
      goto LABEL_10;
    case 1u:
      goto LABEL_9;
    case 3u:
      goto LABEL_8;
    case 7u:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8284)) = v17.i32[3];
LABEL_8:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8280)) = v17.i32[2];
LABEL_9:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8276)) = v17.i32[1];
LABEL_10:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * *(int *)(a1 + 8272)) = v17.i32[0];
      break;
    default:
      break;
  }
  v18 = (*(_DWORD *)(a1 + 8312) + 1) % *(_DWORD *)(a1 + 8316);
  *(_DWORD *)(a1 + 8312) = v18;
  result = v20;
  *(__n128 *)(*(_QWORD *)(a1 + 8304) + 16 * v18) = v20;
  return result;
}

void `anonymous namespace'::DelayStepSlice::CopyVoiceState(_anonymous_namespace_::DelayStepSlice *this, Phase::DspLayer::VoicePoolSlice *a2, signed int a3, signed int a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  int *v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  int *v18;
  int v19;

  v6 = a3;
  v7 = (char *)a2 + 4 * a3;
  v8 = a4;
  v9 = (char *)this + 4 * a4;
  *((_DWORD *)v9 + 4) = *((_DWORD *)v7 + 4);
  v10 = *((unsigned int *)v7 + 8);
  *((_DWORD *)v9 + 8) = v10;
  if ((int)v10 >= 1)
  {
    v11 = (_DWORD *)((char *)this + 4 * a4 + 64);
    v12 = (int *)((char *)a2 + 4 * a3 + 64);
    do
    {
      *(v11 - 4) = *(v12 - 4);
      v13 = *v12;
      v12 += 8;
      *v11 = v13;
      v11 += 8;
      --v10;
    }
    while (v10);
  }
  v14 = (_DWORD *)((char *)this + 4 * a4);
  v15 = (_DWORD *)((char *)a2 + 4 * a3);
  v16 = v15[1040];
  v14[1040] = v16;
  if ((int)v16 >= 1)
  {
    v17 = v14 + 1048;
    v18 = v15 + 1048;
    do
    {
      *(v17 - 4) = *(v18 - 4);
      v19 = *v18;
      v18 += 8;
      *v17 = v19;
      v17 += 8;
      --v16;
    }
    while (v16);
  }
  v14[1036] = v15[1036];
  v14[2068] = v15[2068];
  v14[2072] = v15[2072];
  _ZN5Phase8DspLayer17DelaylineCircularIfDv4_fE4CopyEPS3_ii((uint64_t)this + 8304, (uint64_t)a2 + 8304, a3, a4);
  *((_QWORD *)this + v8 + 1040) = *((_QWORD *)a2 + v6 + 1040);
}

uint64_t `anonymous namespace'::DelayStepSlice::AddInput(_anonymous_namespace_::DelayStepSlice *this, int a2, int a3, int a4, float a5)
{
  uint64_t result;
  char *v7;
  uint64_t v8;
  char *v9;

  if (a2)
    return 8;
  v7 = (char *)this + 32;
  v8 = *((int *)this + a3 + 8);
  if ((int)v8 > 127)
    return 6;
  result = 0;
  v9 = (char *)this + 32 * v8 + 4 * a3;
  *((_DWORD *)v9 + 12) = a4;
  *((float *)v9 + 16) = a5;
  *(_DWORD *)&v7[4 * a3] = v8 + 1;
  return result;
}

uint64_t `anonymous namespace'::DelayStepSlice::RemoveInput(_anonymous_namespace_::DelayStepSlice *this, int a2, int a3, int a4)
{
  if (a2)
    return 8;
  else
    return Phase::DspLayer::VoiceConnectionList<128>::RemoveConnection((uint64_t)this + 32, a3, a4);
}

uint64_t `anonymous namespace'::DelayStepSlice::SetInputGain(_anonymous_namespace_::DelayStepSlice *this, int a2, int a3, int a4, float a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  float *i;

  if (a2)
    return 8;
  v6 = *((unsigned int *)this + a3 + 8);
  if ((int)v6 < 1)
    return 7;
  v7 = 0;
  for (i = (float *)((char *)this + 4 * a3 + 64); *((_DWORD *)i - 4) != a4; i += 8)
  {
    if (v6 == ++v7)
      return 7;
  }
  if ((v7 & 0x80000000) != 0)
    return 7;
  result = 0;
  *i = a5;
  return result;
}

void `anonymous namespace'::DelayStepSlice::GetInputs(_anonymous_namespace_::DelayStepSlice *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    Phase::DspLayer::VoiceConnectionList<128>::GetConnections((uint64_t)this + 32, a3, (char **)a4);
  }
}

uint64_t `anonymous namespace'::DelayStepSlice::ClearInputs(_anonymous_namespace_::DelayStepSlice *this, int a2)
{
  *((_DWORD *)this + a2 + 8) = 0;
  return 0;
}

uint64_t `anonymous namespace'::DelayStepSlice::GetMaximumInputConnectionCount(_anonymous_namespace_::DelayStepSlice *this, int a2)
{
  return (a2 == 0) << 7;
}

unint64_t `anonymous namespace'::DelayStepSlice::GetOutput(_anonymous_namespace_::DelayStepSlice *this, int a2, int a3)
{
  if (a2)
    return 0xFFFFFFFF00000008;
  else
    return (unint64_t)*((unsigned int *)this + a3 + 1036) << 32;
}

uint64_t `anonymous namespace'::DelayStepSlice::SetOutput(_anonymous_namespace_::DelayStepSlice *this, int a2, int a3, int a4)
{
  uint64_t result;

  if (a2)
    return 8;
  result = 0;
  *((_DWORD *)this + a3 + 1036) = a4;
  return result;
}

void std::__function::__func<Phase::DspLayer::DelayStep::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayStep::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::DspLayer::DelayStep::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayStep::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D57A718;
  return result;
}

void std::__function::__func<Phase::DspLayer::DelayStep::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayStep::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D57A718;
}

uint64_t std::__function::__func<Phase::DspLayer::DelayStep::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::DelayStep::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()(uint64_t a1, Phase::DspLayer::VoiceEngine **a2, int *a3)
{
  Phase::DspLayer::VoiceEngine *v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = *a3;
  v5 = operator new();
  Phase::DspLayer::VoicePool::VoicePool((Phase::DspLayer::VoicePool *)v5, "DelayStep", v3, v4, 8352);
  *(_QWORD *)v5 = &off_24D57A620;
  if (*(int *)(v5 + 40) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 32);
      v8 = *(_QWORD *)(v5 + 24) + *(int *)(v5 + 16) * (uint64_t)v6;
      *(_QWORD *)v8 = &off_24D57A640;
      *(_QWORD *)(v8 + 8) = 0;
      bzero((void *)(v8 + 32), 0x1010uLL);
      bzero((void *)(v8 + 4160), 0x1010uLL);
      *(_OWORD *)(v8 + 8304) = 0u;
      *(_DWORD *)(v8 + 8316) = 48000;
      *(_QWORD *)(v8 + 8304) = malloc_type_malloc(0xBB800uLL, 0x100004052888210uLL);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7);
      ++v6;
    }
    while (v6 < *(_DWORD *)(v5 + 40));
  }
  return v5;
}

void sub_216559FD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::DeviceInfo::GetAcousticID(Phase::Controller::DeviceInfo *this)
{
  Phase::Logger *v1;
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  os_log_type_t v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v1 = (Phase::Logger *)MGIsQuestionValid();
  if ((_DWORD)v1)
  {
    v2 = MGGetSInt32Answer();
    if ((_DWORD)v2 != 0x80000000)
    {
      v10 = v2 & 0xFFFFFF00;
      v8 = v2;
      v9 = 0x100000000;
      return v9 | v10 | v8;
    }
    v3 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v2) + 1152);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "DeviceInfo.cpp";
      v14 = 1024;
      v15 = 91;
      v4 = "%25s:%-5d An Acoustic ID was not found on this device.";
      v5 = v3;
      v6 = OS_LOG_TYPE_ERROR;
LABEL_7:
      _os_log_impl(&dword_2164CC000, v5, v6, v4, (uint8_t *)&v12, 0x12u);
    }
  }
  else
  {
    v7 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v1) + 1152);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 136315394;
      v13 = "DeviceInfo.cpp";
      v14 = 1024;
      v15 = 97;
      v4 = "%25s:%-5d This device does not recognize the request for an Acoustic ID.";
      v5 = v7;
      v6 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_7;
    }
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  return v9 | v10 | v8;
}

uint64_t Phase::Controller::DeviceInfo::IsInternalBuild(Phase::Controller::DeviceInfo *this)
{
  Phase::Logger *v1;
  int v2;
  int v3;
  NSObject *v4;
  _BOOL4 v5;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v1 = (Phase::Logger *)MGIsQuestionValid();
  if ((_DWORD)v1)
  {
    v2 = MGGetBoolAnswer();
    v3 = 1;
  }
  else
  {
    v4 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v1) + 1152);
    v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    v2 = 0;
    v3 = 0;
    if (v5)
    {
      v7 = 136315394;
      v8 = "DeviceInfo.cpp";
      v9 = 1024;
      v10 = 175;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d This device does not recognize the request for whether or not an internal build is installed.", (uint8_t *)&v7, 0x12u);
      v2 = 0;
      v3 = 0;
    }
  }
  return v2 | (v3 << 8);
}

void Phase::Controller::DeviceManager::Initialize(Phase::Controller::DeviceManager *this)
{
  void *v1;
  const char *v2;
  int v3;
  Phase::Logger *v4;
  NSObject *v5;
  _QWORD aBlock[5];
  _BYTE cf[12];
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZN5Phase10Controller13DeviceManager10InitializeEv_block_invoke;
  aBlock[3] = &__block_descriptor_40_e8_v12__0i8l;
  aBlock[4] = this;
  v1 = _Block_copy(aBlock);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, v2);
  v3 = CARegisterDeviceOrientation();
  v4 = *(Phase::Logger **)cf;
  if (*(_QWORD *)cf)
    CFRelease(*(CFTypeRef *)cf);
  if (v3)
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4) + 592));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)cf = 136315650;
      *(_QWORD *)&cf[4] = "DeviceManager_iOS.mm";
      v8 = 1024;
      v9 = 30;
      v10 = 1024;
      v11 = v3;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Device Manager: failed to register device orientation callback. Error code %i", cf, 0x18u);
    }
  }

}

void sub_21655A3A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN5Phase10Controller13DeviceManager10InitializeEv_block_invoke(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  NSObject *v6;
  uint64_t result;
  NSObject *v8;
  std::logic_error *exception;
  Phase::Logger *InstancePtr;
  NSObject *v11;
  std::runtime_error *v12;
  BOOL v13;
  unint64_t v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(int *)(v2 + 16) <= 0)
  {
    v8 = objc_retainAutorelease(**(id **)(v2 + 24));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v16 = "Commandable.hpp";
      v17 = 1024;
      v18 = 132;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.");
  }
  v4 = **(_QWORD **)(v2 + 8);
  v14 = 0;
  v13 = 1;
  v5 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v4, 40, &v14, &v13);
  if (!v5)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v11 = objc_retainAutorelease(**(id **)(v4 + 48));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v16 = "CommandQueue.hpp";
      v17 = 1024;
      v18 = 100;
      _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v13)
  {
    v6 = objc_retainAutorelease(**(id **)(v4 + 48));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v16 = "CommandQueue.hpp";
      v17 = 1024;
      v18 = 89;
      v19 = 2048;
      v20 = v14;
      v21 = 2048;
      v22 = 40;
      _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(_QWORD *)v5 = &off_24D57A7B0;
  *((_QWORD *)v5 + 1) = v2;
  *((_QWORD *)v5 + 2) = Phase::Controller::DeviceManager::OnDeviceOrientationChanged;
  *((_QWORD *)v5 + 3) = 0;
  v5[8] = a2;
  result = Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v4, 40);
  atomic_store(0, (unsigned __int8 *)(v4 + 40));
  return result;
}

void sub_21655A680(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x21655A504);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::DeviceManager::OnDeviceOrientationChanged(uint64_t a1, uint64_t a2)
{
  Phase::Controller::SpatializerManager *v3;
  Phase::Logger *v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  void **v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = (Phase::Controller::SpatializerManager *)Phase::Controller::TaskManager::GetService<Phase::Controller::SpatializerManager>(*(Phase::Logger **)(a1 + 40), 9);
  Phase::Device::GetOrientationString((uint64_t)__p);
  v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4) + 592));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = __p;
    if (v8 < 0)
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    v10 = "DeviceManager_iOS.mm";
    v11 = 1024;
    v12 = 49;
    v13 = 2080;
    v14 = v6;
    _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device orientation changed: %s", buf, 0x1Cu);
  }
  Phase::Controller::SpatializerManager::SetDeviceOrientation(v3, a2);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_21655A808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, const char *a2)
{
  void **v3;
  CFIndex v4;
  CFStringRef v5;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v9;

  std::string::basic_string[abi:ne180100]<0>(__p, "PHASE-DeviceManager-device-orientation");
  if ((v9 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v4 = v9;
  else
    v4 = (CFIndex)__p[1];
  v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *(_QWORD *)this = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if ((char)v9 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_21655A8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CFTypeRef *v15;

  if (*v15)
    CFRelease(*v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::Device::GetOrientationString(uint64_t a1@<X8>)
{
  const void *v2;
  std::runtime_error *exception;
  CFTypeRef cf;

  v2 = (const void *)CFStringCreateWithCAOrientation();
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v2);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, a1);
  if (cf)
    CFRelease(cf);
}

void sub_21655A9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  applesauce::CF::StringRef::~StringRef(&a10);
  _Unwind_Resume(a1);
}

void Phase::Controller::DeviceManager::OnAudioOutputRouteChanged(Phase::Logger **this, id *a2)
{
  Phase::Logger *v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  id v9;
  Phase::Logger *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  Phase::Logger *v16;
  void *v17;
  int v18;
  int v19;
  NSObject *v20;
  void *v21;
  char v22;
  NSObject *v23;
  char v24;
  void *v25;
  int v26;
  NSObject *v27;
  int v28;
  const char *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v3 = (Phase::Logger *)Phase::Controller::TaskManager::GetService<Phase::Controller::SpatializerManager>(this[5], 9);
  if (*((_DWORD *)a2 + 2) == 2)
  {
    v4 = (uint64_t)v3;
    v5 = *a2;
    if (objc_msgSend(v5, "isMemberOfClass:", objc_opt_class()))
    {
      v6 = v5;
      objc_msgSend(v6, "portType");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v7, "isEqualToString:", *MEMORY[0x24BDB16F0]))
      {

      }
      else
      {
        objc_msgSend(v6, "portType");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = objc_msgSend(v21, "isEqualToString:", *MEMORY[0x24BDB16B0]);

        if ((v22 & 1) == 0)
        {
          objc_msgSend(v6, "portType");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = objc_msgSend(v25, "isEqualToString:", *MEMORY[0x24BDB16D8]);

          if (v26)
            v19 = 1;
          else
            v19 = 2;
          goto LABEL_29;
        }
      }
      v19 = 0;
LABEL_29:

LABEL_30:
      Phase::Controller::SpatializerManager::SetSpatializerOutput(v4, v19, (uint64_t)(a2 + 2));
LABEL_31:
      v9 = v5;
      goto LABEL_32;
    }
    v10 = (Phase::Logger *)objc_msgSend(v5, "conformsToProtocol:", &unk_254E51028);
    if (!(_DWORD)v10)
    {
      v20 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10) + 528));
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v28 = 136315394;
        v29 = "DeviceManager_iOS.mm";
        v30 = 1024;
        v31 = 132;
        _os_log_impl(&dword_2164CC000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid route change notification: description doesn't conform to any of the expected protocols.", (uint8_t *)&v28, 0x12u);
      }
      goto LABEL_31;
    }
    v9 = v5;
    objc_msgSend(v9, "streamDescription");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      objc_msgSend(v9, "streamDescription");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("port type"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "streamDescription");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("port subtype"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (v13
        && (v16 = (Phase::Logger *)objc_msgSend(v13, "count"), v16 == (Phase::Logger *)1)
        && v15
        && (v16 = (Phase::Logger *)objc_msgSend(v15, "count"), v16 == (Phase::Logger *)1))
      {
        objc_msgSend(v13, "firstObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "unsignedIntValue");

        if ((v18 - 1885892674) <= 0x35
          && ((1 << (v18 - 66)) & 0x20000100000001) != 0)
        {
          v19 = 0;
        }
        else
        {
          if (v18 == 1886613611)
          {
            v24 = 1;
            v19 = 1;
            goto LABEL_24;
          }
          v19 = 2;
        }
        v24 = 1;
      }
      else
      {
        v23 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v16) + 528));
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          v28 = 136315394;
          v29 = "DeviceManager_iOS.mm";
          v30 = 1024;
          v31 = 97;
          _os_log_impl(&dword_2164CC000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid route change notification.", (uint8_t *)&v28, 0x12u);
        }
        v24 = 0;
        v19 = 0;
      }
LABEL_24:

      if ((v24 & 1) == 0)
        goto LABEL_32;
      goto LABEL_30;
    }
    v27 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 528));
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v28 = 136315394;
      v29 = "DeviceManager_iOS.mm";
      v30 = 1024;
      v31 = 125;
      _os_log_impl(&dword_2164CC000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid route change notification: missing stream description.", (uint8_t *)&v28, 0x12u);
    }

  }
  else
  {
    v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v3) + 528));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v28 = 136315394;
      v29 = "DeviceManager_iOS.mm";
      v30 = 1024;
      v31 = 138;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid route change notification: description is not of the expected type.", (uint8_t *)&v28, 0x12u);
    }
    v9 = 0;
  }
LABEL_32:

}

void sub_21655AE48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

Phase::Controller::DeviceManager *Phase::Controller::DeviceManager::DeviceManager(Phase::Controller::DeviceManager *this, const Phase::Controller::TaskManager *a2)
{
  uint64_t InstancePtr;
  Phase::Controller::DeviceManager *v5;

  InstancePtr = Phase::Logger::GetInstancePtr(this);
  v5 = (Phase::Controller::DeviceManager *)Phase::Commandable<128,Phase::LockFreeQueueMPSC>::Commandable((uint64_t)this, *(_QWORD *)(InstancePtr + 592), 2, 0x8000);
  *(_QWORD *)this = off_24D57A780;
  *((_QWORD *)this + 5) = a2;
  Phase::Controller::DeviceManager::Initialize(v5);
  return this;
}

void sub_21655AF24(_Unwind_Exception *a1)
{
  _QWORD *v1;

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::DeviceManager::~DeviceManager(Phase::Controller::DeviceManager *this, const char *a2)
{
  int v3;
  Phase::Logger *v4;
  NSObject *v5;
  _BYTE cf[12];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = off_24D57A780;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, a2);
  v3 = CAUnregisterDeviceOrientation();
  v4 = *(Phase::Logger **)cf;
  if (*(_QWORD *)cf)
    CFRelease(*(CFTypeRef *)cf);
  if (v3)
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4) + 592));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)cf = 136315394;
      *(_QWORD *)&cf[4] = "DeviceManager_iOS.mm";
      v7 = 1024;
      v8 = 39;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Device Manager: failed to unregister device orientation callback.", cf, 0x12u);
    }
  }
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  Phase::Controller::DeviceManager::~DeviceManager(this, a2);
  JUMPOUT(0x2199F9D70);
}

void sub_21655B028(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  return this;
}

void sub_21655B104(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::Controller::DeviceManager,void,CAOrientation>(int,void (Phase::Controller::DeviceManager::*)(CAOrientation),CAOrientation)::{lambda(void)#1},void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::Controller::DeviceManager,void,CAOrientation>(int,void (Phase::Controller::DeviceManager::*)(CAOrientation),CAOrientation)::{lambda(void)#1},void>::operator()(uint64_t a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD);
  uint64_t v2;
  _QWORD *v3;

  v1 = *(uint64_t (**)(_QWORD *, _QWORD))(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 8) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD))(*v3 + v1);
  return v1(v3, *(unsigned int *)(a1 + 32));
}

void Phase::DFTUtils::SetFftSize(Phase::DFTUtils *this, int a2)
{
  vDSP_DFT_SetupStruct *v4;
  vDSP_DFT_SetupStruct *v5;
  int v6;

  v4 = (vDSP_DFT_SetupStruct *)*((_QWORD *)this + 1);
  if (*(_DWORD *)this != a2 || !v4 || !*((_QWORD *)this + 2))
  {
    v5 = (vDSP_DFT_SetupStruct *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 1) = vDSP_DFT_zrop_CreateSetup(*((vDSP_DFT_Setup *)this + 1), a2, vDSP_DFT_FORWARD);
    *((_QWORD *)this + 2) = vDSP_DFT_zrop_CreateSetup(v5, a2, vDSP_DFT_INVERSE);
    vDSP_DFT_DestroySetup(v4);
    vDSP_DFT_DestroySetup(v5);
    if (a2 >= 0)
      v6 = a2;
    else
      v6 = a2 + 1;
    *(_DWORD *)this = a2;
    *((_DWORD *)this + 1) = v6 >> 1;
  }
}

void Phase::DFTUtils::~DFTUtils(vDSP_DFT_Setup *this)
{
  _QWORD *v2;

  v2 = this + 1;
  vDSP_DFT_DestroySetup(this[1]);
  vDSP_DFT_DestroySetup(this[2]);
  *v2 = 0;
  v2[1] = 0;
}

void Phase::DFTUtils::ProcessDFT(const vDSP_DFT_SetupStruct **this, DSPComplex *__C, DSPSplitComplex *a3, float a4)
{
  float __B;

  __B = a4;
  vDSP_ctoz(__C, 2, a3, 1, *((int *)this + 1));
  vDSP_DFT_Execute(this[1], a3->realp, a3->imagp, a3->realp, a3->imagp);
  vDSP_vsmul(a3->realp, 1, &__B, a3->realp, 1, (uint64_t)(*(_DWORD *)this + (*(int *)this < 0)) >> 1);
  vDSP_vsmul(a3->imagp, 1, &__B, a3->imagp, 1, (uint64_t)(*(_DWORD *)this + (*(int *)this < 0)) >> 1);
}

void Phase::DFTUtils::ProcessIDFT(const vDSP_DFT_SetupStruct **this, const DSPSplitComplex *a2, DSPComplex *a3)
{
  vDSP_Length v6;
  float __B;

  vDSP_DFT_Execute(this[2], a2->realp, a2->imagp, a2->realp, a2->imagp);
  vDSP_ztoc(a2, 1, a3, 2, *((int *)this + 1));
  v6 = *(int *)this;
  __B = 1.0 / (float)(int)v6;
  vDSP_vsmul((const float *)a3, 1, &__B, (float *)a3, 1, v6);
}

float Phase::DFTUtils::MultiplyAddComplexPackedSpectrums(Phase::DFTUtils *this, const DSPSplitComplex *__A, const DSPSplitComplex *a3, const DSPSplitComplex *__C, DSPSplitComplex *__D, int a6)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float *imagp;
  float result;

  v7 = *__A->realp;
  v8 = *__A->imagp;
  v9 = *a3->realp;
  v10 = *a3->imagp;
  v11 = *__C->realp;
  v12 = *__C->imagp;
  vDSP_zvma(__A, 1, a3, 1, __C, 1, __D, 1, a6);
  imagp = __D->imagp;
  *__D->realp = v11 + (float)(v7 * v9);
  result = v12 + (float)(v8 * v10);
  *imagp = result;
  return result;
}

float Phase::DFTUtils::MultiplyComplexPackedSpectrums(Phase::DFTUtils *this, const DSPSplitComplex *__A, const DSPSplitComplex *a3, DSPSplitComplex *__C, int a5)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float *imagp;
  float result;

  v6 = *__A->realp;
  v7 = *__A->imagp;
  v8 = *a3->realp;
  v9 = *a3->imagp;
  vDSP_zvmul(__A, 1, a3, 1, __C, 1, a5, 1);
  imagp = __C->imagp;
  *__C->realp = v6 * v8;
  result = v7 * v9;
  *imagp = v7 * v9;
  return result;
}

void **Phase::SpatialModeler::DirectionalHistogramData::operator=(void **this, uint64_t a2)
{
  int v4;
  int v5;

  v4 = *(_DWORD *)this;
  v5 = *(_DWORD *)a2;
  if (*(_DWORD *)this != v5)
  {
    Phase::SpatialModeler::DirectionalHistogramData::allocateHistogramUniform((Phase::SpatialModeler::DirectionalHistogramData *)this, v5);
    v4 = *(_DWORD *)this;
  }
  memcpy(this + 2, (const void *)(a2 + 16), 0x124uLL);
  memcpy(this[1], *(const void **)(a2 + 8), 4 * (73 * v4));
  return this;
}

uint64_t Phase::SpatialModeler::DirectionalHistogramData::computePDF(Phase::SpatialModeler::DirectionalHistogramData *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float32x4_t v5;
  float v6;
  uint64_t v7;
  float v8;
  NSObject *v10;
  double v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  _DWORD v22[7];

  v2 = 0;
  *(_QWORD *)&v22[5] = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 1) + 4 * (73 * a2);
  do
  {
    if (*(float *)(v3 + 4 * v2) < 0.0)
    {
      v10 = **(NSObject ***)(Phase::Logger::GetInstancePtr(this) + 1184);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        return 1;
      v11 = *(float *)(v3 + 4 * v2);
      v17 = 136315906;
      v18 = "DirectionalHistogramData.cpp";
      v19 = 1024;
      v20 = 217;
      v21 = 1024;
      v22[0] = v2;
      LOWORD(v22[1]) = 2048;
      *(double *)((char *)&v22[1] + 2) = v11;
      v12 = "%25s:%-5d computePDF fails with pTS[%u] < 0.f: %e";
      v13 = v10;
      v14 = 34;
      goto LABEL_17;
    }
    ++v2;
  }
  while (v2 != 72);
  v4 = 0;
  v5 = (float32x4_t)xmmword_2166F7AF0;
  do
  {
    v5 = vaddq_f32(v5, *(float32x4_t *)(v3 + v4));
    v4 += 16;
  }
  while (v4 != 288);
  v6 = (float)(vaddv_f32(*(float32x2_t *)v5.f32) + v5.f32[2]) + v5.f32[3];
  if (COERCE_INT(fabs(1.0 / v6)) >= 2139095040)
  {
    v15 = **(NSObject ***)(Phase::Logger::GetInstancePtr(this) + 1184);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      return 1;
    v17 = 136315650;
    v18 = "DirectionalHistogramData.cpp";
    v19 = 1024;
    v20 = 231;
    v21 = 2048;
    *(double *)v22 = v6;
    v12 = "%25s:%-5d computePDF inverseSum inf, sum %e";
    v13 = v15;
    v14 = 28;
    goto LABEL_17;
  }
  v7 = 0;
  *((_DWORD *)this + 4) = 0;
  v8 = 0.0;
  do
  {
    v8 = v8 + (float)(*(float *)(v3 + v7) * (float)(1.0 / v6));
    *(float *)((char *)this + v7 + 20) = v8;
    v7 += 4;
  }
  while (v7 != 288);
  if (*((float *)this + 76) > 0.9)
    return 0;
  v16 = **(NSObject ***)(Phase::Logger::GetInstancePtr(this) + 1184);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    v17 = 136315394;
    v18 = "DirectionalHistogramData.cpp";
    v19 = 1024;
    v20 = 247;
    v12 = "%25s:%-5d m_pdfSum[kNumGroups] <= 0.9f";
    v13 = v16;
    v14 = 18;
LABEL_17:
    _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v17, v14);
  }
  return 1;
}

uint64_t Phase::SpatialModeler::DirectionalHistogramData::getRandomSample(Phase::SpatialModeler::DirectionalHistogramData *this, float a2, float a3, float *a4, float *a5)
{
  float v5;
  float v6;
  unsigned int v7;
  float v8;
  float v9;
  unsigned int v10;

  if (a3 == 1.0)
    a3 = 0.0;
  if (a2 == 1.0)
    a2 = 0.0;
  v5 = *((float *)this + 4);
  if (a2 < v5)
    return 1;
  v6 = *((float *)this + 76);
  if (a2 >= v6)
    return 1;
  v7 = (float)((float)((float)(a2 - v5) / (float)(v6 - v5)) * 72.0);
  v8 = *((float *)this + v7 + 4);
  if (a2 < v8 || (v9 = *((float *)this + v7 + 5), a2 >= v9))
  {
    v7 = 0;
    v10 = 72;
    do
    {
      if (a2 < *((float *)this + ((v7 + v10) >> 1) + 4))
        v10 = (v7 + v10) >> 1;
      else
        v7 = (v7 + v10) >> 1;
    }
    while (v10 - v7 > 1);
    v8 = *((float *)this + v7 + 4);
    v9 = *((float *)this + v7 + 5);
  }
  *a4 = Phase::SpatialModeler::kRangeEle[v7 / 0xCuLL]
      + (float)((float)((float)(a2 - v8) / (float)(v9 - v8))
              * (float)(Phase::SpatialModeler::kRangeEle[v7 / 0xC + 1] - Phase::SpatialModeler::kRangeEle[v7 / 0xCuLL]));
  *a5 = Phase::SpatialModeler::kRangeAzi[v7 % 0xC]
      + (float)(a3 * (float)(Phase::SpatialModeler::kRangeAzi[v7 % 0xC + 1] - Phase::SpatialModeler::kRangeAzi[v7 % 0xC]));
  return 0;
}

uint64_t Phase::SpatialModeler::DirectionalHistogramData::allocateHistogramUniform(Phase::SpatialModeler::DirectionalHistogramData *this, int a2)
{
  int v4;
  void *v5;
  size_t v6;

  v4 = *(_DWORD *)this;
  v5 = (void *)*((_QWORD *)this + 1);
  if (v4 == a2)
  {
    if (v5)
    {
      v6 = 4 * (73 * a2);
LABEL_6:
      bzero(v5, v6);
      goto LABEL_7;
    }
  }
  else
  {
    free(v5);
    *((_QWORD *)this + 1) = 0;
  }
  v6 = 4 * (73 * a2);
  v5 = malloc_type_malloc(v6, 0x100004052888210uLL);
  *((_QWORD *)this + 1) = v5;
  *(_DWORD *)this = a2;
  if (v5)
    goto LABEL_6;
LABEL_7:
  *((_DWORD *)this + 76) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  return 0;
}

void Phase::SpatialModeler::DirectionalHistogramData::getNormalizedDirectionalDistribution(Phase::SpatialModeler::DirectionalHistogramData *this, float *a2, unsigned int a3)
{
  float *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;
  float *v15;
  uint64_t v16;
  float v17;

  v3 = a2;
  if (a3 >= 0x48)
    v5 = 72;
  else
    v5 = a3;
  bzero(a2, (4 * v5));
  v6 = *(unsigned int *)this;
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = *((_QWORD *)this + 1);
    do
    {
      if ((_DWORD)v5)
      {
        v10 = (float *)(v9 + 4 * v7);
        v11 = v3;
        v12 = v5;
        do
        {
          v13 = *v10++;
          *v11 = v13 + *v11;
          ++v11;
          --v12;
        }
        while (v12);
      }
      ++v8;
      v7 += 73;
    }
    while (v8 != v6);
  }
  if ((_DWORD)v5)
  {
    v14 = 0.0;
    v15 = v3;
    v16 = v5;
    do
    {
      v17 = *v15++;
      v14 = v14 + v17;
      --v16;
    }
    while (v16);
    if (v14 > 0.0)
    {
      do
      {
        *v3 = *v3 / v14;
        ++v3;
        --v5;
      }
      while (v5);
    }
  }
}

void Phase::SpatialModeler::DirectivityHistogram::~DirectivityHistogram(void **this)
{
  NSObject *v3;
  void *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *this = &off_24D57A7D8;
  if (!atomic_load((unsigned int *)&Phase::SpatialModeler::HistogramPtrStack::sIsClearingPoolFlag))
  {
    v3 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)this) + 1184);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315394;
      v6 = "DirectivityHistogram.cpp";
      v7 = 1024;
      v8 = 32;
      _os_log_impl(&dword_2164CC000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d DirectivityHistogram must only be destructed when free pool is cleared.\n", (uint8_t *)&v5, 0x12u);
    }
  }
  free(this[15]);
  v4 = this[11];
  if (v4)
  {
    this[12] = v4;
    operator delete(v4);
  }
  *this = &off_24D57C9E0;
  free(this[1]);
}

{
  Phase::SpatialModeler::DirectivityHistogram::~DirectivityHistogram(this);
  JUMPOUT(0x2199F9D70);
}

void sub_21655BB90(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t Phase::SpatialModeler::DirectivityHistogram::initDirectivityHistogram(Phase::SpatialModeler::DirectivityHistogram *this, float a2, int a3, float a4, float a5, float a6)
{
  Phase::Logger *v8;
  NSObject *v9;
  uint64_t result;
  void *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *i;
  int v24;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v8 = (Phase::Logger *)Phase::SpatialModeler::EnergyHistogram::resizeEnergyHistogram(this, a2, a3, a4, a5);
  if ((_DWORD)v8 == 1)
  {
    v9 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v8) + 1184);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v25 = 136315394;
      v26 = "DirectivityHistogram.cpp";
      v27 = 1024;
      v28 = 48;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not resize histogram.\n", (uint8_t *)&v25, 0x12u);
    }
    return 1;
  }
  else
  {
    v11 = (void *)*((_QWORD *)this + 1);
    if (v11)
      bzero(v11, 4 * (*((_DWORD *)this + 7) * *((_DWORD *)this + 6)));
    *((_BYTE *)this + 36) = 1;
    *((_DWORD *)this + 11) = 0;
    v12 = (char *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 12) = v12;
    v13 = *((unsigned int *)this + 6);
    if ((_DWORD)v13)
    {
      v14 = *((_QWORD *)this + 13) - (_QWORD)v12;
      if (v13 <= v14 >> 2)
      {
        bzero(v12, 4 * v13);
        *((_QWORD *)this + 12) = &v12[4 * v13];
      }
      else
      {
        v15 = v14 >> 1;
        if (v14 >> 1 <= v13)
          v15 = *((unsigned int *)this + 6);
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 104, v16);
        v19 = v18;
        bzero(v17, 4 * v13);
        v20 = &v17[4 * v13];
        v21 = &v17[4 * v19];
        v22 = (char *)*((_QWORD *)this + 11);
        for (i = (char *)*((_QWORD *)this + 12); i != v22; i -= 4)
        {
          v24 = *((_DWORD *)i - 1);
          *((_DWORD *)v17 - 1) = v24;
          v17 -= 4;
        }
        *((_QWORD *)this + 11) = v17;
        *((_QWORD *)this + 12) = v20;
        *((_QWORD *)this + 13) = v21;
        if (v22)
          operator delete(v22);
      }
    }
    result = Phase::SpatialModeler::DirectionalHistogramData::allocateHistogramUniform((Phase::SpatialModeler::DirectivityHistogram *)((char *)this + 112), *((_DWORD *)this + 6));
    *((_DWORD *)this + 20) = -1;
    *((float *)this + 8) = a6;
  }
  return result;
}

uint64_t Phase::SpatialModeler::DirectivityHistogram::resetDirectivityHistogram(Phase::SpatialModeler::DirectivityHistogram *this, int a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v4 = (void *)*((_QWORD *)this + 15);
  if (v4)
    bzero(v4, 4 * (73 * *((_DWORD *)this + 28)));
  v5 = (void *)*((_QWORD *)this + 11);
  v6 = *((_QWORD *)this + 12) - (_QWORD)v5;
  if (v6 >= 1)
    bzero(v5, 4 * (((unint64_t)v6 >> 2) - ((unint64_t)v6 > 3)) + 4);
  *((_DWORD *)this + 20) = -1;
  if (a2)
  {
    v7 = (void *)*((_QWORD *)this + 1);
    if (v7)
      bzero(v7, 4 * (*((_DWORD *)this + 7) * *((_DWORD *)this + 6)));
    *((_BYTE *)this + 36) = 1;
    *((_DWORD *)this + 11) = 0;
  }
  return 0;
}

uint64_t Phase::SpatialModeler::DirectivityHistogram::addEnergySphere(uint64_t a1, uint64_t a2, float a3, float a4, float a5)
{
  unsigned int v8;
  Phase::Logger *v9;
  float v10;
  int v11;
  unsigned int v12;
  NSObject *v15;
  uint64_t result;
  unsigned int v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v8 = (float)(a3 / *(float *)(a1 + 16));
  v10 = Phase::SpatialModeler::EnergyHistogram::addEnergy_TS(a1, v8, a2);
  if (v10 <= 1.1755e-38)
    return 1;
  v11 = (int)(float)((float)(a5 + 90.0) / 30.0) & ~((int)(float)((float)(a5 + 90.0) / 30.0) >> 31);
  v12 = ((5 - v11) & ((5 - v11) >> 31)) + v11;
  if (v12 > 5 || *(_DWORD *)(a1 + 112) <= v8 || (LODWORD(v10) & 0x7FFFFFFFu) >= 0x7F800000)
  {
    v15 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v9) + 1184);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v18 = 136315394;
      v19 = "DirectivityHistogram.cpp";
      v20 = 1024;
      v21 = 186;
      _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not add to histogram.", (uint8_t *)&v18, 0x12u);
    }
    return 1;
  }
  result = 0;
  v17 = (float)(a4 / 30.0) % 0xC + 12 * v12 + 73 * v8;
  *(float *)(*(_QWORD *)(a1 + 120) + 4 * v17) = v10 + *(float *)(*(_QWORD *)(a1 + 120) + 4 * v17);
  *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * v8) = 1;
  *(_BYTE *)(a1 + 36) = 0;
  return result;
}

uint64_t Phase::SpatialModeler::DirectivityHistogram::findImpactAngle_TS(Phase::SpatialModeler::DirectivityHistogram *this, unsigned int a2, float *a3, float *a4, float a5, float a6)
{
  uint64_t v8;
  Phase::Logger *RandomSample;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  NSObject *v17;
  os_log_type_t v18;
  Phase::Logger *v19;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)this + 11);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 12) - v8) >> 2))
  {
    *a3 = 90.0;
    *a4 = 90.0;
    v16 = **(NSObject ***)(Phase::Logger::GetInstancePtr(this) + 1184);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v21 = 136315394;
      v22 = "DirectivityHistogram.cpp";
      v23 = 1024;
      v24 = 309;
      v15 = "%25s:%-5d Step out of range.\n";
      v17 = v16;
      v18 = OS_LOG_TYPE_DEFAULT;
LABEL_15:
      _os_log_impl(&dword_2164CC000, v17, v18, v15, (uint8_t *)&v21, 0x12u);
      return 1;
    }
    return 1;
  }
  if (!*(_DWORD *)(v8 + 4 * a2))
  {
    *a3 = 90.0;
    *a4 = 90.0;
    return 1;
  }
  if (*((_DWORD *)this + 20) != a2)
  {
    v19 = (Phase::SpatialModeler::DirectivityHistogram *)((char *)this + 112);
    if (*((_DWORD *)this + 28) <= a2
      || (v19 = (Phase::Logger *)Phase::SpatialModeler::DirectionalHistogramData::computePDF(v19, a2), (_DWORD)v19))
    {
      *a3 = 90.0;
      *a4 = 90.0;
      v14 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v19) + 1184);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v21 = 136315394;
        v22 = "DirectivityHistogram.cpp";
        v23 = 1024;
        v24 = 327;
        v15 = "%25s:%-5d Error while preparing PDF.\n";
        goto LABEL_14;
      }
      return 1;
    }
    *((_DWORD *)this + 20) = a2;
  }
  RandomSample = (Phase::Logger *)Phase::SpatialModeler::DirectionalHistogramData::getRandomSample((Phase::SpatialModeler::DirectivityHistogram *)((char *)this + 112), a5, a6, a4, a3);
  if ((_DWORD)RandomSample == 1)
  {
    *a3 = 90.0;
    *a4 = 90.0;
    v14 = **(NSObject ***)(Phase::Logger::GetInstancePtr(RandomSample) + 1184);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v21 = 136315394;
      v22 = "DirectivityHistogram.cpp";
      v23 = 1024;
      v24 = 338;
      v15 = "%25s:%-5d Unknown error while resampling PDF.\n";
LABEL_14:
      v17 = v14;
      v18 = OS_LOG_TYPE_ERROR;
      goto LABEL_15;
    }
    return 1;
  }
  return 0;
}

void Phase::SpatialModeler::DirectivityHistogram::getNormalizedDirectionalDistribution(Phase::SpatialModeler::DirectivityHistogram *this, float *a2, unsigned int a3)
{
  NSObject *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a3 != 72)
  {
    v6 = **(NSObject ***)(Phase::Logger::GetInstancePtr(this) + 1184);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 136315394;
      v8 = "DirectivityHistogram.cpp";
      v9 = 1024;
      v10 = 353;
      _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d getNormalizedDirectionalDistribution: Mismatch of number of direction groups.\n", (uint8_t *)&v7, 0x12u);
    }
  }
  Phase::SpatialModeler::DirectionalHistogramData::getNormalizedDirectionalDistribution((Phase::SpatialModeler::DirectivityHistogram *)((char *)this + 112), a2, a3);
}

void Phase::SpatialModeler::DirectivityHistogram::updateWasHitVector(Phase::SpatialModeler::DirectivityHistogram *this)
{
  unint64_t v2;
  vDSP_Length v3;
  const float *v4;
  float __C;

  if (*((_DWORD *)this + 6))
  {
    v2 = 0;
    do
    {
      v3 = *((unsigned int *)this + 7);
      v4 = (const float *)(*((_QWORD *)this + 1) + 4 * v2 * v3);
      __C = -3.4028e38;
      vDSP_maxv(v4, 1, &__C, v3);
      *(_DWORD *)(*((_QWORD *)this + 11) + 4 * v2++) = __C > 1.0e-22;
    }
    while (v2 < *((unsigned int *)this + 6));
  }
}

Phase::SpatialModeler::EnergyHistogram *Phase::SpatialModeler::DirectivityHistogram::operator=(Phase::SpatialModeler::EnergyHistogram *this, uint64_t a2)
{
  if ((Phase::SpatialModeler::EnergyHistogram *)a2 != this)
  {
    Phase::SpatialModeler::EnergyHistogram::operator=((void **)this, a2);
    *((_DWORD *)this + 20) = *(_DWORD *)(a2 + 80);
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)this + 88, *(char **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 2);
    Phase::SpatialModeler::DirectionalHistogramData::operator=((void **)this + 14, a2 + 112);
  }
  return this;
}

uint64_t Phase::SpatialModeler::DirectivityHistogram::operator+=(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  float *v11;
  float *v12;
  float v13;

  Phase::SpatialModeler::EnergyHistogram::operator+=(a1, a2);
  v4 = *(_DWORD **)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96) - (_QWORD)v4;
  if (v5)
  {
    v6 = v5 >> 2;
    v7 = *(_DWORD **)(a2 + 88);
    v8 = (uint64_t)(*(_QWORD *)(a2 + 96) - (_QWORD)v7) >> 2;
    if (v6 <= 1)
      v6 = 1;
    do
    {
      if (!v8)
        break;
      if (*v7 == 1)
        *v4 = 1;
      ++v7;
      ++v4;
      --v8;
      --v6;
    }
    while (v6);
  }
  v9 = *(_DWORD *)(a2 + 112);
  if (v9 >= *(_DWORD *)(a1 + 112))
    v9 = *(_DWORD *)(a1 + 112);
  if (v9)
  {
    LODWORD(v10) = 73 * v9;
    v11 = *(float **)(a2 + 120);
    v12 = *(float **)(a1 + 120);
    if (v10 <= 1)
      v10 = 1;
    else
      v10 = v10;
    do
    {
      v13 = *v11++;
      *v12 = v13 + *v12;
      ++v12;
      --v10;
    }
    while (v10);
  }
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

void sub_21655C4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  Phase::Logger *v9;
  NSObject *v10;

  if (a2 == 1)
  {
    v9 = (Phase::Logger *)__cxa_begin_catch(exception_object);
    v10 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v9) + 1184);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "DirectivityHistogram.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 443;
      _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot add other histogram because of a size mismatch.\n", (uint8_t *)&a9, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x21655C49CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::SpatialModeler::DirectivityHistogram::MultiplyAdd(Phase::SpatialModeler::DirectivityHistogram *this, float **a2, float a3)
{
  uint64_t result;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float v17;

  result = Phase::SpatialModeler::EnergyHistogram::MultiplyAdd((uint64_t)this, (const Phase::SpatialModeler::EnergyHistogram *)a2, a3);
  v7 = (_DWORD *)*((_QWORD *)this + 11);
  v8 = *((_QWORD *)this + 12) - (_QWORD)v7;
  if (v8)
  {
    v9 = v8 >> 2;
    v10 = (char *)a2[11];
    v11 = ((char *)a2[12] - v10) >> 2;
    if (v9 <= 1)
      v9 = 1;
    do
    {
      if (!v11)
        break;
      v12 = *(_DWORD *)v10;
      v10 += 4;
      *v7++ |= v12;
      --v11;
      --v9;
    }
    while (v9);
  }
  v13 = *((_DWORD *)a2 + 28);
  if (v13 >= *((_DWORD *)this + 28))
    v13 = *((_DWORD *)this + 28);
  if (v13)
  {
    LODWORD(v14) = 73 * v13;
    v15 = a2[15];
    v16 = (float *)*((_QWORD *)this + 15);
    if (v14 <= 1)
      v14 = 1;
    else
      v14 = v14;
    do
    {
      v17 = *v15++;
      *v16 = *v16 + (float)(v17 * a3);
      ++v16;
      --v14;
    }
    while (v14);
  }
  *((_DWORD *)this + 20) = -1;
  return result;
}

void sub_21655C674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  Phase::Logger *v9;
  NSObject *v10;

  if (a2 == 1)
  {
    v9 = (Phase::Logger *)__cxa_begin_catch(exception_object);
    v10 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v9) + 1184);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "DirectivityHistogram.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 474;
      _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot add other histogram because of a size mismatch.\n", (uint8_t *)&a9, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x21655C644);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::SpatialModeler::DirectivityHistogram::operator*=(_QWORD *a1, float a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  float *v11;
  int64x2_t v12;
  int32x4_t v13;
  int32x2_t v14;
  int64x2_t v15;
  void *v16;
  uint64_t v17;

  v4 = *(_DWORD *)(Phase::SpatialModeler::EnergyHistogram::operator*=((uint64_t)a1, a2) + 112);
  if (v4)
  {
    v5 = 73 * v4;
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = v5;
    v7 = (v6 + 3) & 0x1FFFFFFFCLL;
    v8 = (uint64x2_t)vdupq_n_s64(v6 - 1);
    v9 = (int64x2_t)xmmword_2166F7AD0;
    v10 = (int64x2_t)xmmword_2166F7AE0;
    v11 = (float *)(a1[15] + 8);
    v12 = vdupq_n_s64(4uLL);
    do
    {
      v13 = (int32x4_t)vcgeq_u64(v8, (uint64x2_t)v10);
      *(int32x2_t *)v13.i8 = vmovn_s64((int64x2_t)v13);
      v14 = (int32x2_t)vmovn_s32(v13);
      if ((v14.i8[0] & 1) != 0)
      {
        *(float *)v14.i32 = *(v11 - 2) * a2;
        *(v11 - 2) = *(float *)v14.i32;
      }
      if ((vmovn_s32(v13).i8[2] & 1) != 0)
        *(v11 - 1) = *(v11 - 1) * a2;
      v15 = (int64x2_t)vcgeq_u64(v8, (uint64x2_t)v9);
      if ((vmovn_s32(vmovn_hight_s64(v14, v15)).i32[1] & 1) != 0)
        *v11 = *v11 * a2;
      if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v15, v15)).i8[6] & 1) != 0)
        v11[1] = v11[1] * a2;
      v9 = vaddq_s64(v9, v12);
      v10 = vaddq_s64(v10, v12);
      v11 += 4;
      v7 -= 4;
    }
    while (v7);
  }
  if (a2 == 0.0)
  {
    v16 = (void *)a1[11];
    v17 = a1[12] - (_QWORD)v16;
    if (v17 >= 1)
      bzero(v16, 4 * (((unint64_t)v17 >> 2) - ((unint64_t)v17 > 3)) + 4);
  }
  return a1;
}

uint64_t Phase::SpatialModeler::DirectivityHistogram::operator/=(uint64_t a1, float a2)
{
  float v2;
  uint64_t result;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  float *v11;
  int64x2_t v12;
  int32x4_t v13;
  int32x2_t v14;
  int64x2_t v15;

  v2 = 1.0 / a2;
  result = Phase::SpatialModeler::EnergyHistogram::operator*=(a1, 1.0 / a2);
  v4 = *(_DWORD *)(result + 112);
  if (v4)
  {
    v5 = 73 * v4;
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = v5;
    v7 = (v6 + 3) & 0x1FFFFFFFCLL;
    v8 = (uint64x2_t)vdupq_n_s64(v6 - 1);
    v9 = (int64x2_t)xmmword_2166F7AD0;
    v10 = (int64x2_t)xmmword_2166F7AE0;
    v11 = (float *)(*(_QWORD *)(result + 120) + 8);
    v12 = vdupq_n_s64(4uLL);
    do
    {
      v13 = (int32x4_t)vcgeq_u64(v8, (uint64x2_t)v10);
      *(int32x2_t *)v13.i8 = vmovn_s64((int64x2_t)v13);
      v14 = (int32x2_t)vmovn_s32(v13);
      if ((v14.i8[0] & 1) != 0)
      {
        *(float *)v14.i32 = v2 * *(v11 - 2);
        *(v11 - 2) = *(float *)v14.i32;
      }
      if ((vmovn_s32(v13).i8[2] & 1) != 0)
        *(v11 - 1) = v2 * *(v11 - 1);
      v15 = (int64x2_t)vcgeq_u64(v8, (uint64x2_t)v9);
      if ((vmovn_s32(vmovn_hight_s64(v14, v15)).i32[1] & 1) != 0)
        *v11 = v2 * *v11;
      if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v15, v15)).i8[6] & 1) != 0)
        v11[1] = v2 * v11[1];
      v9 = vaddq_s64(v9, v12);
      v10 = vaddq_s64(v10, v12);
      v11 += 4;
      v7 -= 4;
    }
    while (v7);
  }
  return result;
}

_QWORD *Phase::SpatialModeler::DirectPathTransmissionDebugger::BeginTrackingSource(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  unint64_t v6;
  unint64_t *v7;

  v6 = a2;
  v7 = &v6;
  v4 = std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>>>::__emplace_unique_key_args<Phase::Handle64,std::piecewise_construct_t const&,std::tuple<Phase::Handle64 const&>,std::tuple<>>((uint64_t **)(a1 + 8), &v6, (uint64_t)&std::piecewise_construct, &v7);
  return std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>::operator=(v4 + 7, a3);
}

_QWORD *std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *Phase::SpatialModeler::DirectPathTransmissionDebugger::EndTrackingSource(Phase::SpatialModeler::DirectPathTransmissionDebugger *this, Handle64 a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = (_QWORD *)*((_QWORD *)this + 2);
  result = (_QWORD *)((char *)this + 16);
  v3 = v4;
  if (v4)
  {
    v5 = result;
    do
    {
      v6 = v3[4];
      v7 = v6 >= a2.mData;
      if (v6 >= a2.mData)
        v8 = v3;
      else
        v8 = v3 + 1;
      if (v7)
        v5 = v3;
      v3 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != result && v5[4] <= a2.mData)
    {
      v9 = v5 + 7;
      result = (_QWORD *)v5[10];
      v5[10] = 0;
      if (result == v5 + 7)
      {
        v10 = 4;
        result = v9;
      }
      else
      {
        if (!result)
          return result;
        v10 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
    }
  }
  return result;
}

_QWORD *Phase::SpatialModeler::DirectPathTransmissionDebugger::BeginTrackingAudibleGeometry(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  unint64_t v6;
  unint64_t *v7;

  v6 = a2;
  v7 = &v6;
  v4 = std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>>>::__emplace_unique_key_args<Phase::Handle64,std::piecewise_construct_t const&,std::tuple<Phase::Handle64 const&>,std::tuple<>>((uint64_t **)(a1 + 8), &v6, (uint64_t)&std::piecewise_construct, &v7);
  return std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>::operator=(v4 + 11, a3);
}

_QWORD *std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *Phase::SpatialModeler::DirectPathTransmissionDebugger::EndTrackingAudibleGeometry(Phase::SpatialModeler::DirectPathTransmissionDebugger *this, Handle64 a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = (_QWORD *)*((_QWORD *)this + 2);
  result = (_QWORD *)((char *)this + 16);
  v3 = v4;
  if (v4)
  {
    v5 = result;
    do
    {
      v6 = v3[4];
      v7 = v6 >= a2.mData;
      if (v6 >= a2.mData)
        v8 = v3;
      else
        v8 = v3 + 1;
      if (v7)
        v5 = v3;
      v3 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != result && v5[4] <= a2.mData)
    {
      v9 = v5 + 11;
      result = (_QWORD *)v5[14];
      v5[14] = 0;
      if (result == v5 + 11)
      {
        v10 = 4;
        result = v9;
      }
      else
      {
        if (!result)
          return result;
        v10 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>>>::__emplace_unique_key_args<Phase::Handle64,std::piecewise_construct_t const&,std::tuple<Phase::Handle64 const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0x78uLL);
    v14[1] = v7;
    v12[4] = **a4;
    *((_OWORD *)v12 + 5) = 0u;
    *((_OWORD *)v12 + 6) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((_OWORD *)v12 + 4) = 0u;
    v12[5] = -1;
    *((_DWORD *)v12 + 12) = -1;
    *((_BYTE *)v12 + 52) = 1;
    v12[14] = 0;
    v15 = 1;
    std::__tree<Phase::SpatialCategory>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<Phase::Handle64 const,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,0>(v2 + 4);
    operator delete(v2);
  }
}

_QWORD *std::__destroy_at[abi:ne180100]<std::pair<Phase::Handle64 const,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,0>(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  v2 = a1 + 7;
  v3 = (_QWORD *)a1[10];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  result = (_QWORD *)a1[6];
  if (result == a1 + 3)
  {
    v6 = 4;
    result = a1 + 3;
  }
  else
  {
    if (!result)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

_QWORD *std::__function::__value_func<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_21655CF50(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__value_func<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_21655D0C4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

const char *Phase::SpatialModeler::DirectPathTransmissionErrorCategory::name(Phase::SpatialModeler::DirectPathTransmissionErrorCategory *this)
{
  return "Direct Path Transmission";
}

void Phase::SpatialModeler::DirectPathTransmissionErrorCategory::message(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v5;
  void *__p[2];
  char v7;

  if (a1 > 7)
  {
    if (a1 == 129)
    {
      v5 = "Scene queries submitted to the Geometry Layer failed";
    }
    else if (a1 == 128)
    {
      v5 = "Cannot generate source points from the SourceEntity";
    }
    else
    {
      v5 = "(unrecognized error)";
    }
    std::string::basic_string[abi:ne180100]<0>(a2, v5);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Direct path transmission ");
    Phase::SpatialModeler::ModelerErrorMessage(a1, (const void **)__p, (uint64_t)a2);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_21655D180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::DirectPathTransmissionErrorCategory::~DirectPathTransmissionErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x2199F9D70);
}

uint64_t (***Phase::SpatialModeler::DirectPathTransmissionImpl::RunCullQuery@<X0>(uint64_t (***result)(_QWORD)@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>))(_QWORD)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;

  v4 = a2[11];
  if (!v4 || *(_DWORD *)v4 != 1)
  {
    result = (uint64_t (***)(_QWORD))(**result)(result);
    v14 = 3;
LABEL_16:
    *(_QWORD *)a3 = v14;
    *(_QWORD *)(a3 + 8) = result;
    v13 = 2;
    goto LABEL_17;
  }
  v5 = a2[8];
  if (!v5)
  {
    result = (uint64_t (***)(_QWORD))(**result)(result);
    v14 = 5;
    goto LABEL_16;
  }
  v6 = *(_QWORD *)(v4 + 480);
  v7 = *(_DWORD *)(v5 + 136);
  if (v7 <= v6
    || (v8 = *(_QWORD *)(v5 + 120), *(_DWORD *)(v8 + 24 * v6 + 20) != HIDWORD(v6))
    || (v9 = *(_DWORD **)(v8 + 24 * *(_QWORD *)(v4 + 480))) == 0
    || *v9 != 2)
  {
    result = (uint64_t (***)(_QWORD))(**result)(result);
    v14 = 7;
    goto LABEL_16;
  }
  v10 = *(_QWORD *)(v4 + 336);
  if (v7 <= v10
    || (v11 = *(_QWORD *)(v4 + 336), *(_DWORD *)(v8 + 24 * v10 + 20) != HIDWORD(v10))
    || (v12 = *(_DWORD **)(v8 + 24 * v11)) == 0
    || *v12 != 3)
  {
    result = (uint64_t (***)(_QWORD))(**result)(result);
    v14 = 6;
    goto LABEL_16;
  }
  *(_DWORD *)(a2[12] + 8) = 0;
  v13 = 1;
LABEL_17:
  *(_DWORD *)(a3 + 24) = v13;
  return result;
}

uint64_t *Phase::SpatialModeler::DirectPathTransmissionImpl::RunClusterQuery@<X0>(uint64_t (***a1)(_QWORD)@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  Phase::Logger *v11;
  uint64_t v12;
  _QWORD *v13;
  Phase::Logger *v14;
  uint64_t v15;
  Phase::Logger *v16;
  uint64_t v17;
  uint64_t *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t (***v46)(_QWORD);
  uint64_t v47;
  Phase::Logger *v48;
  uint64_t (***v49)(_QWORD);
  Phase::Logger **v50;
  uint64_t *v51;
  Phase::Logger *v52;
  uint64_t v53;
  _QWORD v54[5];

  v54[4] = *MEMORY[0x24BDAC8D0];
  v5 = a2[11];
  if (v5 && *(_DWORD *)v5 == 3 && (v6 = a2[12]) != 0 && *(_DWORD *)v6 == 2)
  {
    v7 = a2[8];
    if (v7)
    {
      v8 = *(_QWORD *)(v5 + 152);
      if (*(_DWORD *)(v7 + 136) > v8
        && (v9 = *(_QWORD *)(v7 + 120), *(_DWORD *)(v9 + 24 * v8 + 20) == HIDWORD(v8))
        && (v10 = *(_DWORD **)(v9 + 24 * *(_QWORD *)(v5 + 152))) != 0
        && *v10 == 2)
      {
        v11 = *(Phase::Logger **)(v5 + 144);
        v47 = 16;
        v48 = v11;
        v49 = a1 + 5;
        v50 = &v48;
        v51 = &v47;
        v46 = a1 + 5;
        Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(v11, (uint64_t)&v49, (uint64_t *)&v46, (size_t *)&v53);
        v12 = v53;
        v53 = 0;
        v49 = (uint64_t (***)(_QWORD))v12;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v50, (uint64_t)v54);
        v52 = v11;
        std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v53);
        v13 = (_QWORD *)(v6 + 8);
        std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v6 + 8), (uint64_t *)&v49);
        *(_QWORD *)(v6 + 48) = v52;
        std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v49);
        v14 = *(Phase::Logger **)(v5 + 144);
        v47 = 1;
        v48 = v14;
        v49 = a1 + 5;
        v50 = &v48;
        v51 = &v47;
        v46 = a1 + 5;
        Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(v14, (uint64_t)&v49, (uint64_t *)&v46, &v53);
        v15 = v53;
        v53 = 0;
        v49 = (uint64_t (***)(_QWORD))v15;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v50, (uint64_t)v54);
        v52 = v14;
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v53);
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v6 + 56), (uint64_t *)&v49);
        *(_QWORD *)(v6 + 96) = v52;
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v49);
        v16 = *(Phase::Logger **)(v5 + 144);
        v47 = 8;
        v48 = v16;
        v49 = a1 + 5;
        v50 = &v48;
        v51 = &v47;
        v46 = a1 + 5;
        Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(v16, (uint64_t)&v49, (uint64_t *)&v46, &v53);
        v17 = v53;
        v53 = 0;
        v49 = (uint64_t (***)(_QWORD))v17;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v50, (uint64_t)v54);
        v52 = v16;
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v53);
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v6 + 104), (uint64_t *)&v49);
        *(_QWORD *)(v6 + 144) = v52;
        result = std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v49);
        if (!*(_QWORD *)(v6 + 144))
        {
          v44 = 1;
          goto LABEL_20;
        }
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = *(_QWORD *)(v5 + 104);
        while (1)
        {
          v24 = (unint64_t *)(*(_QWORD *)(v6 + 104) + v19);
          *v24 = v22;
          v24[1] = 0;
          *(_OWORD *)(*v13 + v20) = *(_OWORD *)(v23 + v21);
          v25 = *(_QWORD *)(v5 + 104) + v21;
          v26 = *v13 + v20;
          *(_QWORD *)(v26 + 16) = *(_QWORD *)(v25 + 144);
          v27 = *(_OWORD *)(v25 + 16);
          v28 = *(_OWORD *)(v25 + 32);
          v29 = *(_OWORD *)(v25 + 64);
          *(_OWORD *)(v26 + 224) = *(_OWORD *)(v25 + 48);
          *(_OWORD *)(v26 + 240) = v29;
          *(_OWORD *)(v26 + 192) = v27;
          *(_OWORD *)(v26 + 208) = v28;
          v30 = *(_OWORD *)(v25 + 80);
          v31 = *(_OWORD *)(v25 + 96);
          v32 = *(_OWORD *)(v25 + 128);
          *(_OWORD *)(v26 + 288) = *(_OWORD *)(v25 + 112);
          *(_OWORD *)(v26 + 304) = v32;
          *(_OWORD *)(v26 + 256) = v30;
          *(_OWORD *)(v26 + 272) = v31;
          v33 = (_OWORD *)(*(_QWORD *)(v5 + 104) + v21);
          v34 = *v13 + v20;
          v35 = v33[16];
          v36 = v33[17];
          v37 = v33[15];
          *(_OWORD *)(v34 + 120) = v33[14];
          *(_OWORD *)(v34 + 168) = v36;
          *(_OWORD *)(v34 + 152) = v35;
          *(_OWORD *)(v34 + 136) = v37;
          v38 = v33[10];
          v39 = v33[11];
          v40 = v33[12];
          *(_OWORD *)(v34 + 104) = v33[13];
          *(_OWORD *)(v34 + 88) = v40;
          *(_OWORD *)(v34 + 72) = v39;
          *(_OWORD *)(v34 + 56) = v38;
          *(_BYTE *)(*(_QWORD *)(v6 + 56) + v22) = 1;
          v23 = *(_QWORD *)(v5 + 104);
          v41 = *(_QWORD *)(v23 + v21 + 144);
          if (*(_DWORD *)(v7 + 136) <= v41)
            break;
          v42 = *(_QWORD *)(v7 + 120);
          result = (uint64_t *)*(unsigned int *)(v42 + 24 * v41 + 20);
          if ((_DWORD)result != HIDWORD(v41))
            break;
          v43 = *(_DWORD **)(v42 + 24 * *(_QWORD *)(v23 + v21 + 144));
          if (!v43 || *v43 != 3)
            break;
          ++v22;
          v20 += 336;
          v19 += 16;
          v21 += 304;
          v44 = 1;
          if (v22 >= *(_QWORD *)(v6 + 144))
            goto LABEL_20;
        }
        result = (uint64_t *)(**a1)(a1);
        v45 = 6;
      }
      else
      {
        result = (uint64_t *)(**a1)(a1);
        v45 = 7;
      }
    }
    else
    {
      result = (uint64_t *)(**a1)(a1);
      v45 = 5;
    }
  }
  else
  {
    result = (uint64_t *)(**a1)(a1);
    v45 = 3;
  }
  *(_QWORD *)a3 = v45;
  *(_QWORD *)(a3 + 8) = result;
  v44 = 2;
LABEL_20:
  *(_DWORD *)(a3 + 24) = v44;
  return result;
}

uint64_t Phase::SpatialModeler::DirectPathTransmissionImpl::AllocSpatialQueryState@<X0>(Phase::SpatialModeler::DirectPathTransmissionImpl *this@<X0>, Phase::SpatialModeler::DirectPathTransmission *a2@<X1>, Phase::SpatialModeler::Query *a3@<X2>, _QWORD *a4@<X8>)
{
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  char *v25;
  uint64_t v26;
  char *v27;
  _DWORD v28[6];
  _DWORD *v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v5 = (char *)this + 40;
  v6 = (char *)Phase::SystemAllocator::Alloc((Phase::SpatialModeler::DirectPathTransmissionImpl *)((char *)this + 40), (Phase::Logger *)0x1E0, (std::align_val_t)8uLL);
  v7 = 0;
  v8 = 0;
  v9 = 0;
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *((_OWORD *)v6 + 10) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_OWORD *)v6 + 12) = 0u;
  *((_OWORD *)v6 + 13) = 0u;
  *((_OWORD *)v6 + 14) = 0u;
  *((_OWORD *)v6 + 15) = 0u;
  *((_OWORD *)v6 + 18) = 0u;
  *((_OWORD *)v6 + 19) = 0u;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((_OWORD *)v6 + 27) = 0u;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  *((_QWORD *)v6 + 9) = 0xFFFFFFFFLL;
  v6[80] = 0x80;
  *(_QWORD *)(v6 + 84) = 0;
  *(_QWORD *)(v6 + 100) = 0;
  *(_QWORD *)(v6 + 92) = 0;
  *((_DWORD *)v6 + 27) = 0;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *((_QWORD *)v6 + 29) = _D1;
  *((_QWORD *)v6 + 45) = 0;
  *((_QWORD *)v6 + 46) = 0;
  *((_OWORD *)v6 + 15) = 0u;
  *((_OWORD *)v6 + 16) = 0u;
  *((_OWORD *)v6 + 16) = 0u;
  *((_OWORD *)v6 + 17) = 0u;
  *((_DWORD *)v6 + 68) = 0;
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 41) = 0;
  *((_DWORD *)v6 + 94) = -1;
  v6[380] = 1;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_DWORD *)v6 + 104) = 2139095039;
  v15 = v6 + 420;
  v27 = 0;
  v28[0] = 0;
  *(_QWORD *)(v6 + 420) = 0;
  *((_DWORD *)v6 + 107) = 0;
  do
  {
    if (v9 <= 2)
    {
      v8 = v9 + 1;
      *(_DWORD *)&v15[4 * v9++] = v28[v7 - 2];
    }
    ++v7;
  }
  while (v7 != 3);
  if (v8 <= 2)
    bzero(&v15[4 * v8], 12 - 4 * v8);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  *(_QWORD *)(v6 + 436) = 0;
  v19 = v6 + 436;
  *((_DWORD *)v6 + 108) = 0;
  v27 = 0;
  v28[0] = 0;
  *((_DWORD *)v6 + 111) = 0;
  do
  {
    if (v18 <= 2)
    {
      v17 = v18 + 1;
      *(_DWORD *)&v19[4 * v18++] = v28[v16 - 2];
    }
    ++v16;
  }
  while (v16 != 3);
  if (v17 <= 2)
    bzero(&v19[4 * v17], 12 - 4 * v17);
  *((_QWORD *)v6 + 56) = 0;
  *((_QWORD *)v6 + 57) = 0;
  *((_DWORD *)v6 + 118) = 0;
  *((_QWORD *)v6 + 58) = 0;
  v30[0] = &off_24D57A8D0;
  v30[1] = v5;
  v31 = v30;
  v20 = v28;
  v27 = v6;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v28, (uint64_t)v30);
  v21 = v31;
  if (v31 == v30)
  {
    v22 = 4;
    v21 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_18;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_18:
  v23 = v27;
  *((_QWORD *)v27 + 23) = Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryBegin;
  v27 = 0;
  *a4 = v23;
  result = std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v28);
  v25 = v27;
  v27 = 0;
  if (v25)
  {
    v30[0] = v25;
    if (!v29)
      std::__throw_bad_function_call[abi:ne180100]();
    result = (*(uint64_t (**)(_DWORD *, _QWORD *))(*(_QWORD *)v29 + 48))(v29, v30);
  }
  if (v29 == v28)
  {
    v26 = 4;
  }
  else
  {
    if (!v29)
      return result;
    v26 = 5;
    v20 = v29;
  }
  return (*(uint64_t (**)(_QWORD *))(*v20 + 8 * v26))(v20);
}

void sub_21655D9D4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryBegin(Phase::Logger *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, Phase::Logger *a4@<X8>)
{
  uint64_t InstancePtr;
  Phase::Logger *v9;
  Phase::Logger *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  int v34;
  float v35;
  float v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Phase::Logger *v45;
  Phase::Logger *v46;
  NSObject *v47;
  NSObject *v48;
  os_signpost_id_t v49;
  uint64_t v50;
  _QWORD *v51;
  _DWORD buf[8];
  _QWORD v53[3];
  int v54;
  _QWORD v55[3];
  int v56;
  _QWORD v57[3];
  int v58;
  _QWORD v59[3];
  int v60;
  _QWORD v61[3];
  int v62;
  os_signpost_id_t *v63;
  Phase::Logger *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  InstancePtr = Phase::Logger::GetInstancePtr(a1);
  v9 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 208));
  v64 = v9;
  v10 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v9);
  if (*((_BYTE *)v10 + 216))
  {
    v11 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10)
                                                                                        + 208)));
    v12 = v11;
    if ((unint64_t)v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
    {
      LOWORD(buf[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v12, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v9, "Phase_DirectPath_Spatial_Query_Begin", "DirectPathTransmission: Spatial Query Begin", (uint8_t *)buf, 2u);
    }

  }
  v63 = (os_signpost_id_t *)&v64;
  v13 = *(_QWORD *)(a2 + 88);
  if (!v13 || *(_DWORD *)v13 != 2)
  {
    v39 = (**(uint64_t (***)(Phase::Logger *))a1)(a1);
    v61[0] = 3;
    v61[1] = v39;
    v62 = 2;
    Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryBegin(Phase::SpatialModeler::DirectPathTransmission &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState &)::$_1::operator()(a4, &v63, (uint64_t)v61);
    v40 = v61;
LABEL_51:
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v40);
    return;
  }
  v14 = *(_QWORD *)(a2 + 64);
  if (!v14)
  {
    v42 = (**(uint64_t (***)(Phase::Logger *))a1)(a1);
    v59[0] = 5;
    v59[1] = v42;
    v60 = 2;
    Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryBegin(Phase::SpatialModeler::DirectPathTransmission &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState &)::$_1::operator()(a4, &v63, (uint64_t)v59);
    v40 = v59;
    goto LABEL_51;
  }
  v15 = *(_QWORD *)(v13 + 552);
  v16 = *(_DWORD *)(v14 + 136);
  if (v16 <= v15
    || (v17 = *(_QWORD *)(v14 + 120), *(_DWORD *)(v17 + 24 * v15 + 20) != HIDWORD(v15))
    || (v18 = *(_DWORD **)(v17 + 24 * *(_QWORD *)(v13 + 552))) == 0
    || *v18 != 2)
  {
    v41 = (**(uint64_t (***)(Phase::Logger *))a1)(a1);
    v57[0] = 7;
    v57[1] = v41;
    v58 = 2;
    Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryBegin(Phase::SpatialModeler::DirectPathTransmission &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState &)::$_1::operator()(a4, &v63, (uint64_t)v57);
    v40 = v57;
    goto LABEL_51;
  }
  v19 = *(_QWORD *)(v13 + 208);
  if (v16 <= v19
    || *(_DWORD *)(v17 + 24 * v19 + 20) != HIDWORD(v19)
    || (v20 = *(_QWORD *)(v17 + 24 * *(_QWORD *)(v13 + 208))) == 0
    || *(_DWORD *)v20 != 3)
  {
    v43 = (**(uint64_t (***)(Phase::Logger *))a1)(a1);
    v55[0] = 6;
    v55[1] = v43;
    v56 = 2;
    Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryBegin(Phase::SpatialModeler::DirectPathTransmission &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState &)::$_1::operator()(a4, &v63, (uint64_t)v55);
    v40 = v55;
    goto LABEL_51;
  }
  v22 = *(_QWORD **)(v20 + 120);
  v21 = *(_QWORD **)(v20 + 128);
  if (v22 != v21)
  {
    if (*(_DWORD *)(v14 + 112) <= *v22
      || (v23 = *(_QWORD *)(v14 + 96), *(_DWORD *)(v23 + 24 * *v22 + 20) != HIDWORD(*v22))
      || !*(_QWORD *)(v23 + 24 * *v22))
    {
      v44 = (**(uint64_t (***)(Phase::Logger *))a1)(a1);
      v53[0] = 6;
      v53[1] = v44;
      v54 = 2;
      Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryBegin(Phase::SpatialModeler::DirectPathTransmission &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState &)::$_1::operator()(a4, &v63, (uint64_t)v53);
      v40 = v53;
      goto LABEL_51;
    }
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  *(_QWORD *)(a3 + 192) = v19;
  v50 = *(_QWORD *)(v13 + 552);
  *(_QWORD *)(a3 + 200) = v50;
  v65 = *(_QWORD *)(v13 + 64);
  LODWORD(v66) = *(_DWORD *)(v13 + 72);
  *(_QWORD *)buf = 0;
  buf[2] = 0;
  do
  {
    if (v26 <= 2)
    {
      v25 = v26 + 1;
      buf[v26++] = *(_DWORD *)((char *)&v65 + v24);
    }
    v24 += 4;
  }
  while (v24 != 12);
  v51 = v21;
  if (v25 <= 2)
  {
    bzero(&buf[v25], 12 - 4 * v25);
    v21 = v51;
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = buf[2];
  *(_QWORD *)(a3 + 240) = *(_QWORD *)buf;
  *(_DWORD *)(a3 + 248) = v30;
  v65 = *(_QWORD *)(v13 + 384);
  LODWORD(v66) = *(_DWORD *)(v13 + 392);
  *(_QWORD *)buf = 0;
  buf[2] = 0;
  do
  {
    if (v29 <= 2)
    {
      v28 = v29 + 1;
      buf[v29++] = *(_DWORD *)((char *)&v65 + v27);
    }
    v27 += 4;
  }
  while (v27 != 12);
  if (v28 <= 2)
  {
    bzero(&buf[v28], 12 - 4 * v28);
    v21 = v51;
  }
  v31 = 0;
  v32 = buf[2];
  *(_QWORD *)(a3 + 252) = *(_QWORD *)buf;
  *(_DWORD *)(a3 + 260) = v32;
  v33 = *(_OWORD *)(v13 + 528);
  *(_QWORD *)(a3 + 472) = *(_QWORD *)(v13 + 544);
  *(_OWORD *)(a3 + 456) = v33;
  if (v22 == v21)
    v34 = 1;
  else
    v34 = 10;
  *(_DWORD *)(a3 + 376) = v34;
  do
  {
    switch(*(_DWORD *)(v13 + v31 + 248))
    {
      case 1:
        *(_QWORD *)(a3 + 208) = *(_QWORD *)(v13 + v31 + 256);
        break;
      case 2:
        *(_QWORD *)(a3 + 216) = *(_QWORD *)(v13 + v31 + 256);
        break;
      case 3:
        *(_QWORD *)(a3 + 224) = *(_QWORD *)(v13 + v31 + 256);
        break;
      case 4:
        v36 = *(double *)(v13 + v31 + 256);
        *(float *)(a3 + 232) = v36;
        break;
      case 5:
        v35 = *(double *)(v13 + v31 + 256);
        *(float *)(a3 + 236) = v35;
        break;
      default:
        break;
    }
    v31 += 16;
  }
  while (v31 != 128);
  *((_DWORD *)a4 + 6) = 0;
  if (v22 == v21)
  {
    Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryBeginPointSource((uint64_t)buf, (uint64_t)a1, a2, v14, (uint64_t)v18, (float *)v20, a3);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>>((uint64_t)a4, (uint64_t)buf);
    v45 = (Phase::Logger *)std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
  }
  else
  {
    v65 = 0;
    v66 = 0;
    Phase::SpatialModeler::DirectPathTransmission::GetHistory((uint64_t)a1, v19, v50, *(_QWORD *)(a3 + 208), (__int128 *)buf);
    std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)&v65, (__int128 *)buf);
    std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    v37 = v65;
    if (!v65)
      __assert_rtn("RunSpatialQueryBegin", "DirectPathTransmissionImpl.mm", 381, "nullptr != historyPtr");
    v38 = COERCE_DOUBLE(atomic_load((unint64_t *)(v65 + 176)));
    if ((double)std::chrono::steady_clock::now().__d_.__rep_ / 1000000000.0 - v38 >= 0.04)
    {
      std::shared_ptr<Phase::Controller::SpatialModelerInstance::SubmixInfo>::operator=[abi:ne180100]((_QWORD *)(a3 + 168), v65, v66);
      *(_QWORD *)(a3 + 184) = Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryWaitForToken;
      *(_QWORD *)buf = v37;
      std::variant<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>::operator=[abi:ne180100]<Phase::SpatialModeler::ClaimOrWaitOnToken,0,Phase::SpatialModeler::ClaimOrWaitOnToken,4ul,0>((uint64_t)a4, buf);
    }
    else
    {
      Phase::SpatialModeler::DirectPathTransmissionImpl::BuildOutput((uint64_t)buf, (uint64_t (***)(_QWORD, __n128))a1, a2, a3, v37);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>>((uint64_t)a4, (uint64_t)buf);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
    }
    v45 = (Phase::Logger *)std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&v65);
  }
  v46 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v45);
  if (*((_BYTE *)v46 + 216))
  {
    v47 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v46)
                                                                                        + 208)));
    v48 = v47;
    v49 = (os_signpost_id_t)v64;
    if ((unint64_t)v64 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v47))
    {
      LOWORD(buf[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v48, OS_SIGNPOST_INTERVAL_END, v49, "Phase_DirectPath_Spatial_Query_Begin", (const char *)&unk_21676613F, (uint8_t *)buf, 2u);
    }

  }
}

void sub_21655E088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQuery@<X0>(uint64_t (***a1)(_QWORD)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD *result;

  if (a2)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(a2 + 184))((_QWORD *)a3);
  result = (_QWORD *)(**a1)(a1);
  *(_QWORD *)a3 = 1;
  *(_QWORD *)(a3 + 8) = result;
  *(_DWORD *)(a3 + 24) = 2;
  return result;
}

uint64_t Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryBegin(Phase::SpatialModeler::DirectPathTransmission &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState &)::$_1::operator()(Phase::Logger *a1, os_signpost_id_t **a2, uint64_t a3)
{
  Phase::Logger *InstancePtr;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  uint8_t v11[16];

  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(a1);
  if (*((_BYTE *)InstancePtr + 216))
  {
    v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                       + 208)));
    v8 = v7;
    v9 = **a2;
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      *(_WORD *)v11 = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v8, OS_SIGNPOST_INTERVAL_END, v9, "Phase_DirectPath_Spatial_Query_Begin", (const char *)&unk_21676613F, v11, 2u);
    }

  }
  return std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, a3);
}

void Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryBeginPointSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, uint64_t a7)
{
  double v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  int32x2_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  float32x2_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  float32x2_t v45;
  float v46;
  float v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  float v51;
  float32x2_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  _QWORD *v67;
  int32x2_t v68;
  __int128 v69;
  uint64_t v70;
  float32x2_t v71;
  float v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v14 = (double)std::chrono::steady_clock::now().__d_.__rep_ / 1000000000.0;
  if (v14 - *(double *)(a7 + 456) < 0.04)
  {
    Phase::SpatialModeler::DirectPathTransmissionImpl::BuildOutputPointSource(a1, (uint64_t (***)(_QWORD))a2, a3, a7, *(float *)(a7 + 464), *(float *)(a7 + 468), *(float *)(a7 + 472));
    return;
  }
  v15 = *(_QWORD *)(a3 + 96);
  if (!v15 || *(_DWORD *)v15 != 3)
  {
    v39 = (**(uint64_t (***)(uint64_t))a2)(a2);
    *(_QWORD *)a1 = 4;
    *(_QWORD *)(a1 + 8) = v39;
    *(_DWORD *)(a1 + 24) = 2;
    return;
  }
  *(double *)(v15 + 192) = v14;
  v16 = *(float *)(a5 + 64);
  v17 = *(float *)(a5 + 68);
  v18 = *(float *)(a5 + 72);
  v19 = *(_QWORD *)(a7 + 208);
  v20 = Phase::Geometry::CalculateDirectivitySubbandGains<3ul>((Phase::Geometry::SystemState *)a4, a5, (uint64_t)a6, *(_QWORD *)(a7 + 216), *(_QWORD *)(a7 + 224));
  v22 = v21;
  v24 = v23;
  if (v20 <= 0.0)
    v20 = COERCE_FLOAT(1);
  v71.f32[0] = (float)((float)(logf(v20) * 8.6859) / 10.0) * 10.0;
  if (v22 <= 0.0)
    v25 = COERCE_FLOAT(1);
  else
    v25 = v22;
  v71.f32[1] = (float)((float)(logf(v25) * 8.6859) / 10.0) * 10.0;
  if (v24 <= 0.0)
    v26 = COERCE_FLOAT(1);
  else
    v26 = v24;
  v27 = logf(v26);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v72 = (float)((float)(v27 * 8.6859) / 10.0) * 10.0;
  *(_QWORD *)&v69 = 0;
  DWORD2(v69) = 0;
  do
  {
    if (v31 <= 2)
    {
      v30 = v31 + 1;
      *((_DWORD *)&v69 + v31++) = v71.i32[v29];
    }
    ++v29;
  }
  while (v29 != 3);
  if (v30 <= 2)
    bzero((char *)&v69 + 4 * v30, 12 - 4 * v30);
  v32 = (float32x2_t)v69;
  v33 = *((float *)&v69 + 2);
  *(_QWORD *)(a7 + 264) = v69;
  *(float *)(a7 + 272) = v33;
  v28.i32[0] = 0;
  if (*(_DWORD *)(a4 + 40) > v19)
  {
    v34 = *(_QWORD *)(a4 + 24);
    if (*(_DWORD *)(v34 + 24 * v19 + 20) == HIDWORD(v19))
    {
      v35 = *(_QWORD *)(v34 + 24 * v19);
      if (v35)
      {
        v36 = *(double *)(a5 + 152);
        v37 = fmaxf(v36, sqrtf((float)((float)((float)(v16 - a6[16]) * (float)(v16 - a6[16]))+ (float)((float)(v17 - a6[17]) * (float)(v17 - a6[17])))+ (float)((float)(v18 - a6[18]) * (float)(v18 - a6[18]))));
        if (*(_DWORD *)v35 == 2)
        {
          v40 = **(_QWORD **)(v35 + 40);
          if (v40)
          {
            v41 = Phase::Envelope<float>::operator()((float **)(v40 + 16), v37);
            if (v41 <= 0.0)
              v41 = COERCE_FLOAT(1);
            *(float *)v28.i32 = (float)((float)(logf(v41) * 8.6859) / 10.0) * 10.0;
            v32 = *(float32x2_t *)(a7 + 264);
            v33 = *(float *)(a7 + 272);
            goto LABEL_31;
          }
        }
        else
        {
          if (*(_DWORD *)v35 != 1)
            goto LABEL_31;
          v38 = **(_QWORD **)(v35 + 40);
          if (v38)
          {
            *(float *)v28.i32 = (float)(log2f(v37) * -6.0206) * *(float *)(v38 + 16);
            goto LABEL_31;
          }
        }
        std::terminate();
      }
    }
  }
LABEL_31:
  v42 = 0;
  v43 = 0;
  v44 = 0;
  *(_DWORD *)(a7 + 384) = v28.i32[0];
  v45 = *(float32x2_t *)(a7 + 240);
  v46 = *(float *)(a7 + 248);
  v47 = *(float *)(a7 + 260);
  v71 = vadd_f32(v32, *(float32x2_t *)(a7 + 252));
  v72 = v33 + v47;
  *(_QWORD *)&v69 = 0;
  DWORD2(v69) = 0;
  do
  {
    if (v44 <= 2)
    {
      v43 = v44 + 1;
      *((_DWORD *)&v69 + v44++) = v71.i32[v42];
    }
    ++v42;
  }
  while (v42 != 3);
  if (v43 <= 2)
  {
    v68 = v28;
    bzero((char *)&v69 + 4 * v43, 12 - 4 * v43);
    v28 = v68;
  }
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = *((float *)&v69 + 2);
  v52 = (float32x2_t)v69;
  v53 = a6[16];
  v54 = a6[17];
  v55 = a6[18];
  *(float *)(a7 + 388) = v53;
  *(float *)(a7 + 392) = v54;
  *(float *)(a7 + 396) = v55;
  v56 = v16 - v53;
  v57 = v17 - v54;
  v58 = v18 - v55;
  v59 = sqrtf((float)((float)(v56 * v56) + (float)(v57 * v57)) + (float)(v58 * v58));
  *(float *)(a7 + 404) = v56 / v59;
  *(float *)(a7 + 408) = v57 / v59;
  *(float *)(a7 + 412) = v58 / v59;
  *(_DWORD *)(a7 + 400) = 0;
  *(float *)(a7 + 416) = v59;
  v71 = vadd_f32((float32x2_t)vdup_lane_s32(v28, 0), v52);
  v72 = *(float *)v28.i32 + v51;
  *(_QWORD *)&v69 = 0;
  DWORD2(v69) = 0;
  do
  {
    if (v50 <= 2)
    {
      v49 = v50 + 1;
      *((_DWORD *)&v69 + v50++) = v71.i32[v48];
    }
    ++v48;
  }
  while (v48 != 3);
  if (v49 <= 2)
    bzero((char *)&v69 + 4 * v49, 12 - 4 * v49);
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v71 = vsub_f32(*(float32x2_t *)&v69, v45);
  v72 = *((float *)&v69 + 2) - v46;
  *(_QWORD *)&v69 = 0;
  DWORD2(v69) = 0;
  do
  {
    if (v62 <= 2)
    {
      v61 = v62 + 1;
      *((_DWORD *)&v69 + v62++) = v71.i32[v60];
    }
    ++v60;
  }
  while (v60 != 3);
  if (v61 <= 2)
    bzero((char *)&v69 + 4 * v61, 12 - 4 * v61);
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v71 = vmaxnm_f32(*(float32x2_t *)&v69, 0);
  v72 = fmaxf(*((float *)&v69 + 2), 0.0);
  *(_QWORD *)&v69 = 0;
  DWORD2(v69) = 0;
  do
  {
    if (v65 <= 2)
    {
      v64 = v65 + 1;
      *((_DWORD *)&v69 + v65++) = v71.i32[v63];
    }
    ++v63;
  }
  while (v63 != 3);
  if (v64 <= 2)
    bzero((char *)&v69 + 4 * v64, 12 - 4 * v64);
  v66 = DWORD2(v69);
  *(_QWORD *)(a7 + 420) = v69;
  *(_DWORD *)(a7 + 428) = v66;
  *(_DWORD *)(a7 + 432) = 1;
  *(_DWORD *)(a7 + 64) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a7 + 88) = a7 + 388;
  *(_QWORD *)(a7 + 96) = 0x4400000001;
  *(_QWORD *)(a7 + 184) = Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryHandleResultsPointSource;
  *(_QWORD *)(a7 + 72) = *(_QWORD *)(a2 + 24);
  v67 = operator new(8uLL);
  *v67 = a7;
  v70 = 0;
  v69 = 0uLL;
  std::vector<Phase::Geometry::SceneQueryBatch *>::__init_with_size[abi:ne180100]<Phase::Geometry::SceneQueryBatch **,Phase::Geometry::SceneQueryBatch **>(&v69, v67, (uint64_t)(v67 + 1), 1uLL);
  *(_OWORD *)a1 = v69;
  *(_QWORD *)(a1 + 16) = v70;
  v70 = 0;
  v69 = 0uLL;
  *(_DWORD *)(a1 + 24) = 3;
  operator delete(v67);
}

void sub_21655E87C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryWaitForToken(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t InstancePtr;
  Phase::Logger *v9;
  Phase::Logger *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint8_t *v28;
  unint64_t v29;
  unint64_t v30;
  float **v31;
  float v32;
  unint64_t v33;
  float *v34;
  float v35;
  float *v36;
  unint64_t v37;
  float v38;
  float v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  int *v46;
  int v47;
  unint64_t v48;
  float *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  float v53;
  float v54;
  float v55;
  float *v56;
  float v57;
  unint64_t v58;
  float v59;
  uint64_t v60;
  float *v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  float32x2_t *v67;
  uint64_t v68;
  float32x2_t *v69;
  uint64_t v70;
  float32x2_t v71;
  float v72;
  uint64_t v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  float32x2_t v89;
  float v90;
  float v91;
  float32x2_t v92;
  float v93;
  uint64_t v94;
  float32x2_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  float v101;
  float v102;
  float32x2_t v103;
  uint64_t v104;
  float v105;
  float32x2_t v106;
  int32x2_t v107;
  int32x2_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  Phase::Logger *v123;
  Phase::Logger *v124;
  NSObject *v125;
  NSObject *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  __int128 v131;
  uint64_t v132;
  int v133;
  __int128 v134;
  int v135;
  __int16 v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD v139[3];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE v143[32];
  uint64_t v144;
  char v145;
  _QWORD v146[3];
  _QWORD *v147;
  uint8_t buf[8];
  uint64_t v149;
  uint64_t v150[7];
  float32x2_t v151;
  float v152[8];
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;

  v156 = *MEMORY[0x24BDAC8D0];
  InstancePtr = Phase::Logger::GetInstancePtr((Phase::Logger *)a1);
  v9 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 208));
  v10 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v9);
  if (*((_BYTE *)v10 + 216))
  {
    v11 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10)
                                                                                        + 208)));
    v12 = v11;
    if ((unint64_t)v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v12, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v9, "Phase_DirectPath_Spatial_Query_Token_Wait", "DirectPathTransmission: Spatial Query Wait For Token", buf, 2u);
    }

  }
  *(_DWORD *)(a4 + 24) = 0;
  v13 = *(_QWORD *)(a3 + 168);
  v14 = atomic_load((unsigned int *)(a2 + 104));
  if (v14 != *(_DWORD *)(v13 + 64))
  {
    Phase::SpatialModeler::DirectPathTransmissionImpl::BuildOutput((uint64_t)buf, (uint64_t (***)(_QWORD, __n128))a1, a2, a3, *(_QWORD *)(a3 + 168));
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)buf);
    v28 = buf;
    goto LABEL_137;
  }
  HIDWORD(v134) = 0;
  v135 = 0;
  *(_QWORD *)&v134 = 0;
  v136 = 257;
  v137 = 0;
  v150[4] = 0;
  v150[5] = 0;
  v149 = 0;
  v150[0] = 0;
  v147 = 0;
  *(_QWORD *)buf = 0;
  *(_DWORD *)(a3 + 376) = 10;
  WORD4(v134) = 257;
  v15 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v15 + 2760))
    goto LABEL_20;
  v16 = Phase::Geometry::SystemDebugger::GetFromSystem(v15);
  if (!v16)
    goto LABEL_20;
  v19 = *(_QWORD **)(v16 + 24);
  v17 = v16 + 24;
  v18 = v19;
  if (!v19)
    goto LABEL_20;
  v20 = *(_QWORD *)(a3 + 192);
  v21 = (_QWORD *)v17;
  do
  {
    v22 = v18[4];
    v23 = v22 >= v20;
    if (v22 >= v20)
      v24 = v18;
    else
      v24 = v18 + 1;
    if (v23)
      v21 = v18;
    v18 = (_QWORD *)*v24;
  }
  while (*v24);
  if (v21 != (_QWORD *)v17 && v21[4] <= v20)
  {
    v42 = *((_DWORD *)v21 + 11);
    LODWORD(v134) = *((_DWORD *)v21 + 10);
    BYTE8(v134) = *((_BYTE *)v21 + 52);
    LODWORD(v26) = *((_DWORD *)v21 + 12);
    if (v42 >= 1)
      *(_DWORD *)(a3 + 376) = v42;
    if (v21[14])
    {
      std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>::operator=(v146, (uint64_t)(v21 + 11));
      v25 = v150;
    }
    else
    {
      v25 = 0;
    }
  }
  else
  {
LABEL_20:
    v25 = 0;
    LODWORD(v26) = -1;
  }
  v137 = v13 + 184;
  if (BYTE8(v134))
    v27 = BYTE9(v134) == 0;
  else
    v27 = 1;
  if (v27)
  {
    *(_BYTE *)(a3 + 380) = 0;
  }
  else
  {
    v29 = *(unsigned int *)(a3 + 376);
    if ((int)v29 < 2)
    {
      BYTE9(v134) = 0;
    }
    else
    {
      HIDWORD(v134) = *(_DWORD *)(a3 + 376);
      if ((v26 & 0x80000000) != 0)
      {
        v30 = *(_QWORD *)(v13 + 160);
        if (v30 != v29)
        {
          v31 = (float **)(v13 + 112);
          v32 = (float)v29;
          if (v30 >= v29)
            v33 = v29;
          else
            v33 = *(_QWORD *)(v13 + 160);
          v130 = (uint64_t *)(v13 + 112);
          if (!v33)
            goto LABEL_47;
          v34 = *v31;
          v35 = 0.0;
          v36 = *v31;
          v37 = v33;
          do
          {
            v38 = *v36++;
            v35 = v35 + v38;
            --v37;
          }
          while (v37);
          if (v35 > 0.0)
          {
            v39 = (float)((float)v30 / v32) / v35;
            v40 = v33;
            do
            {
              *v34 = v39 * *v34;
              ++v34;
              --v40;
            }
            while (v40);
            v41 = v33;
          }
          else
          {
LABEL_47:
            v41 = 0;
          }
          if (*(_QWORD *)(v13 + 152) < v29)
          {
            v151 = (float32x2_t)v29;
            v139[0] = 4;
            *(_QWORD *)&v153 = &v151;
            *((_QWORD *)&v153 + 1) = v139;
            Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float>(unsigned long,unsigned long)::{lambda(float*)#1} const&>(v29, (uint64_t)&v153, &v142);
            v43 = v142;
            v142 = 0;
            *(_QWORD *)&v153 = v43;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v153 + 8, (uint64_t)v143);
            v155 = v29;
            std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v142);
            v44 = *v130;
            if (v33)
            {
              v45 = (_DWORD *)v153;
              v46 = (int *)*v130;
              do
              {
                v47 = *v46++;
                *v45++ = v47;
                --v33;
              }
              while (v33);
            }
            *(_QWORD *)(v13 + 112) = 0;
            v142 = v44;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v143, v13 + 120);
            v144 = *(_QWORD *)(v13 + 152);
            std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100](v130, (uint64_t *)&v153);
            *(_QWORD *)(v13 + 152) = v155;
            std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)&v153, &v142);
            v155 = v144;
            std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v142);
            std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v153);
          }
          v48 = v29 - v41;
          if (v29 > v41)
          {
            v49 = (float *)(*v130 + 4 * v41);
            do
            {
              *v49++ = 1.0 / v32;
              --v48;
            }
            while (v48);
          }
          *(_QWORD *)(v13 + 160) = v29;
        }
        v26 = 0;
        v50 = *(_QWORD *)(v13 + 192);
        v51 = *(_QWORD *)(v13 + 184) ^ (*(_QWORD *)(v13 + 184) << 23);
        v52 = (v50 >> 26) ^ (v51 >> 17) ^ v50 ^ v51;
        v53 = *(float *)(v13 + 208);
        v54 = *(float *)(v13 + 212) - v53;
        *(_QWORD *)(v13 + 184) = v50;
        *(_QWORD *)(v13 + 192) = v52;
        v55 = v53 + (float)(v54 * (float)((float)(v52 + v50) * 5.421e-20));
        v56 = *(float **)(v13 + 112);
        v57 = 0.0;
        while (1)
        {
          v57 = v57 + v56[v26];
          if (v55 < v57)
            break;
          if (v29 == ++v26)
          {
            v58 = v29 - 1;
            LODWORD(v26) = v29 - 1;
            goto LABEL_62;
          }
        }
        v58 = v29 - 1;
LABEL_62:
        *(_QWORD *)(v13 + 168) = (int)v26;
        v59 = 9.0 / (float)v58;
        v60 = (int)v26;
        v61 = v56;
        do
        {
          if (v60)
            v62 = v59 + *v61;
          else
            v62 = v56[(int)v26];
          *v61++ = v62 * 0.1;
          --v60;
          --v29;
        }
        while (v29);
        v135 = v26;
        LODWORD(v29) = HIDWORD(v134);
      }
      else
      {
        v135 = v26;
        *(_BYTE *)(a3 + 380) = 0;
      }
      if ((int)v26 >= (int)v29)
        v135 = v29 - 1;
    }
  }
  v63 = *(_QWORD *)(a2 + 64);
  if (!v63)
  {
    v119 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v120 = 5;
    goto LABEL_130;
  }
  v64 = *(_QWORD *)(a3 + 200);
  v65 = *(_DWORD *)(v63 + 136);
  if (v65 <= v64
    || (v66 = *(_QWORD *)(v63 + 120), *(_DWORD *)(v66 + 24 * v64 + 20) != HIDWORD(v64))
    || (v67 = *(float32x2_t **)(v66 + 24 * *(_QWORD *)(a3 + 200))) == 0
    || v67->i32[0] != 2)
  {
    v119 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v120 = 7;
LABEL_130:
    *(_QWORD *)&v131 = v120;
    *((_QWORD *)&v131 + 1) = v119;
    v133 = 2;
    goto LABEL_131;
  }
  v68 = *(_QWORD *)(a3 + 192);
  if (v65 <= v68
    || *(_DWORD *)(v66 + 24 * v68 + 20) != HIDWORD(v68)
    || (v69 = *(float32x2_t **)(v66 + 24 * *(_QWORD *)(a3 + 192))) == 0
    || v69->i32[0] != 3)
  {
    v119 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v120 = 6;
    goto LABEL_130;
  }
  Phase::Geometry::GenerateSourcePoints(v63, (uint64_t)v69, v67, &v134, (uint64_t)v25, (uint64_t)&v142);
  v70 = v144;
  if (v144)
  {
    if (!v145)
      *(_DWORD *)(a3 + 376) = 1;
    v71 = v67[8];
    v72 = v67[9].f32[0];
    v73 = *(_QWORD *)(a3 + 208);
    v74 = Phase::Geometry::CalculateDirectivitySubbandGains<3ul>((Phase::Geometry::SystemState *)v63, (uint64_t)v67, (uint64_t)v69, *(_QWORD *)(a3 + 216), *(_QWORD *)(a3 + 224));
    v76 = v75;
    v78 = v77;
    if (v74 <= 0.0)
      v74 = COERCE_FLOAT(1);
    v151.f32[0] = (float)((float)(logf(v74) * 8.6859) / 10.0) * 10.0;
    if (v76 <= 0.0)
      v79 = COERCE_FLOAT(1);
    else
      v79 = v76;
    v151.f32[1] = (float)((float)(logf(v79) * 8.6859) / 10.0) * 10.0;
    if (v78 <= 0.0)
      v80 = COERCE_FLOAT(1);
    else
      v80 = v78;
    v81 = logf(v80);
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v152[0] = (float)((float)(v81 * 8.6859) / 10.0) * 10.0;
    *(_QWORD *)&v153 = 0;
    DWORD2(v153) = 0;
    do
    {
      if (v84 <= 2)
      {
        v83 = v84 + 1;
        *((_DWORD *)&v153 + v84++) = v151.i32[v82];
      }
      ++v82;
    }
    while (v82 != 3);
    v128 = v70;
    if (v83 <= 2)
      bzero((char *)&v153 + 4 * v83, 12 - 4 * v83);
    v85 = DWORD2(v153);
    *(_QWORD *)(a3 + 264) = v153;
    *(_DWORD *)(a3 + 272) = v85;
    Phase::Geometry::CalculateDistanceGainsInDecibels<Phase::SystemAllocator>((uint64_t)&v153, a1 + 40, v63, (uint64_t)v67, (uint64_t)v69, &v142, v73);
    std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a3 + 328), (uint64_t *)&v153);
    *(_QWORD *)(a3 + 368) = v155;
    std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v153);
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = *(float32x2_t *)(a3 + 240);
    v90 = *(float *)(a3 + 248);
    v91 = *(float *)(a3 + 260);
    v151 = vadd_f32(*(float32x2_t *)(a3 + 252), *(float32x2_t *)(a3 + 264));
    v152[0] = v91 + *(float *)(a3 + 272);
    *(_QWORD *)&v153 = 0;
    DWORD2(v153) = 0;
    do
    {
      if (v88 <= 2)
      {
        v87 = v88 + 1;
        *((_DWORD *)&v153 + v88++) = v151.i32[v86];
      }
      ++v86;
    }
    while (v86 != 3);
    if (v87 <= 2)
      bzero((char *)&v153 + 4 * v87, 12 - 4 * v87);
    v92 = (float32x2_t)v153;
    v93 = *((float *)&v153 + 2);
    v94 = v144;
    v140 = 4;
    v141 = v144;
    v139[0] = a1 + 40;
    v139[1] = &v141;
    v139[2] = &v140;
    v138 = a1 + 40;
    Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&>((Phase::Logger *)&v151, v144, (uint64_t)v139, &v138);
    v95 = v151;
    v151 = 0;
    *(float32x2_t *)&v153 = v95;
    std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v153 + 8, (uint64_t)v152);
    v155 = v94;
    std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v151);
    std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a3 + 104), (uint64_t *)&v153);
    *(_QWORD *)(a3 + 144) = v155;
    std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v153);
    v96 = 0;
    if (v128 <= 1)
      v97 = 1;
    else
      v97 = v128;
    v129 = v97;
    do
    {
      Phase::operator*<float>((float *)&v69[6], (float *)(v142 + 12 * v96), (float *)&v153);
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = v69[9].f32[1];
      v102 = (float)(v101 * *((float *)&v153 + 2)) + v69[9].f32[0];
      v103 = vadd_f32(vmul_n_f32(*(float32x2_t *)&v153, v101), v69[8]);
      v104 = *(_QWORD *)(a3 + 104) + 68 * v96;
      *(float32x2_t *)v104 = v103;
      v105 = v72 - v102;
      v106 = vsub_f32(v71, v103);
      *(float *)v107.i32 = sqrtf(vaddv_f32(vmul_f32(v106, v106)) + (float)(v105 * v105));
      *(float *)(v104 + 8) = v102;
      v108 = (int32x2_t)vdiv_f32(v106, (float32x2_t)vdup_lane_s32(v107, 0));
      *(int32x2_t *)(v104 + 16) = v108;
      *(_DWORD *)(v104 + 12) = 0;
      *(float *)(v104 + 24) = v105 / *(float *)v107.i32;
      *(_DWORD *)(v104 + 28) = v107.i32[0];
      v108.i32[0] = *(_DWORD *)(*(_QWORD *)(a3 + 328) + 4 * v96);
      v151 = vadd_f32(v92, (float32x2_t)vdup_lane_s32(v108, 0));
      v152[0] = v93 + *(float *)v108.i32;
      *(_QWORD *)&v153 = 0;
      DWORD2(v153) = 0;
      do
      {
        if (v100 <= 2)
        {
          v99 = v100 + 1;
          *((_DWORD *)&v153 + v100++) = v151.i32[v98];
        }
        ++v98;
      }
      while (v98 != 3);
      if (v99 <= 2)
        bzero((char *)&v153 + 4 * v99, 12 - 4 * v99);
      v109 = 0;
      v110 = 0;
      v111 = 0;
      v151 = vsub_f32(*(float32x2_t *)&v153, v89);
      v152[0] = *((float *)&v153 + 2) - v90;
      *(_QWORD *)&v153 = 0;
      DWORD2(v153) = 0;
      do
      {
        if (v111 <= 2)
        {
          v110 = v111 + 1;
          *((_DWORD *)&v153 + v111++) = v151.i32[v109];
        }
        ++v109;
      }
      while (v109 != 3);
      if (v110 <= 2)
        bzero((char *)&v153 + 4 * v110, 12 - 4 * v110);
      v112 = 0;
      v113 = 0;
      v114 = 0;
      v151 = vmaxnm_f32(*(float32x2_t *)&v153, 0);
      v152[0] = fmaxf(*((float *)&v153 + 2), 0.0);
      *(_QWORD *)&v153 = 0;
      DWORD2(v153) = 0;
      do
      {
        if (v114 <= 2)
        {
          v113 = v114 + 1;
          *((_DWORD *)&v153 + v114++) = v151.i32[v112];
        }
        ++v112;
      }
      while (v112 != 3);
      if (v113 <= 2)
        bzero((char *)&v153 + 4 * v113, 12 - 4 * v113);
      v115 = DWORD2(v153);
      *(_QWORD *)(v104 + 32) = v153;
      *(_DWORD *)(v104 + 40) = v115;
      *(_DWORD *)(v104 + 44) = 1;
      ++v96;
    }
    while (v96 != v129);
    v116 = *(_QWORD *)(a3 + 104);
    v117 = v144;
    *(_DWORD *)(a3 + 64) = *(_DWORD *)(a1 + 44);
    *(_QWORD *)(a3 + 88) = v116;
    *(_DWORD *)(a3 + 96) = v117;
    *(_DWORD *)(a3 + 100) = 68;
    *(_QWORD *)(a3 + 184) = Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryHandleResults;
    *(_QWORD *)&v153 = *(_QWORD *)(a3 + 280);
    *(_QWORD *)(a3 + 280) = 0;
    std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v153 + 8, a3 + 288);
    v155 = *(_QWORD *)(a3 + 320);
    std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a3 + 280), &v142);
    *(_QWORD *)(a3 + 320) = v144;
    std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](&v142, (uint64_t *)&v153);
    v144 = v155;
    std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v153);
    if (v147)
    {
      *(_QWORD *)buf = *(_QWORD *)(a3 + 192);
      v149 = 0;
      *(_QWORD *)&v153 = buf;
      (*(void (**)(_QWORD *, __int128 *))(*v147 + 48))(v147, &v153);
    }
    *(_QWORD *)(a3 + 72) = *(_QWORD *)(a1 + 24);
    v118 = operator new(8uLL);
    *v118 = a3;
    v154 = 0;
    v153 = 0uLL;
    std::vector<Phase::Geometry::SceneQueryBatch *>::__init_with_size[abi:ne180100]<Phase::Geometry::SceneQueryBatch **,Phase::Geometry::SceneQueryBatch **>(&v153, v118, (uint64_t)(v118 + 1), 1uLL);
    v131 = v153;
    v132 = v154;
    v154 = 0;
    v153 = 0uLL;
    v133 = 3;
    operator delete(v118);
  }
  else
  {
    v127 = (**(uint64_t (***)(uint64_t))a1)(a1);
    *(_QWORD *)&v131 = 128;
    *((_QWORD *)&v131 + 1) = v127;
    v133 = 2;
  }
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v142);
LABEL_131:
  v121 = v147;
  if (v147 == v146)
  {
    v122 = 4;
    v121 = v146;
    goto LABEL_135;
  }
  if (v147)
  {
    v122 = 5;
LABEL_135:
    (*(void (**)(void))(*v121 + 8 * v122))();
  }
  std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v150);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v131);
  v28 = (uint8_t *)&v131;
LABEL_137:
  v123 = (Phase::Logger *)std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v28);
  *(_QWORD *)(a3 + 72) = *(_QWORD *)(a1 + 24);
  v124 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v123);
  if (*((_BYTE *)v124 + 216))
  {
    v125 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v124)
                                                                                         + 208)));
    v126 = v125;
    if ((unint64_t)v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v125))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v126, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v9, "Phase_DirectPath_Spatial_Query_Token_Wait", (const char *)&unk_21676613F, buf, 2u);
    }

  }
}

void sub_21655F4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char *a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  char *v43;
  uint64_t v44;

  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&a28);
  v43 = a38;
  if (a38 == &a35)
  {
    v44 = 4;
    v43 = &a35;
  }
  else
  {
    if (!a38)
      goto LABEL_6;
    v44 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
LABEL_6:
  std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&a41);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor(v41);
  _Unwind_Resume(a1);
}

uint64_t std::variant<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>::operator=[abi:ne180100]<Phase::SpatialModeler::ClaimOrWaitOnToken,0,Phase::SpatialModeler::ClaimOrWaitOnToken,4ul,0>(uint64_t a1, _QWORD *a2)
{
  if (*(_DWORD *)(a1 + 24) == 4)
    *(_QWORD *)a1 = *a2;
  else
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__emplace[abi:ne180100]<4ul,Phase::SpatialModeler::ClaimOrWaitOnToken>(a1, a2);
  return a1;
}

void Phase::SpatialModeler::DirectPathTransmissionImpl::BuildOutput(uint64_t a1, uint64_t (***a2)(_QWORD, __n128), uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  Phase::Logger *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  float *v22;
  __int128 v23;
  __int128 v24;
  __n128 v25;
  uint64_t *v26;
  float v27;
  Phase::Logger *v28;
  int32x2_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  float32x2_t v33;
  float32x2_t v34;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  BOOL v53;
  float v54;
  unint64_t v55;
  float v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  float32x2_t *v60;
  Phase::Logger *v61;
  float v62;
  float32x2_t v63;
  float32x2_t v64;
  float v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  Phase::Logger *InstancePtr;
  Phase::Logger *v74;
  uint64_t v75;
  os_signpost_id_t v76;
  os_signpost_id_t v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  float *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  float v87;
  uint64_t *v88;
  _QWORD *v89;
  char *v90;
  float v91;
  float v92;
  uint64_t v93;
  _QWORD *v94;
  float v95[4];
  float v96;
  float v97;
  float v98;
  float v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _QWORD *v104;
  std::__shared_weak_count *v105;
  _BYTE buf[12];
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  double v110;
  __int16 v111;
  double v112;
  __int16 v113;
  double v114;
  __int16 v115;
  double v116;
  __int16 v117;
  double v118;
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  double v126;
  __int16 v127;
  double v128;
  __int16 v129;
  double v130;
  __int16 v131;
  double v132;
  __int16 v133;
  double v134;
  __int16 v135;
  double v136;
  __int16 v137;
  double v138;
  float32x2_t v139;
  float v140;
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  std::atomic_load[abi:ne180100]<Phase::SpatialModeler::DirectPathTransmission::SourceData>(&v104, (_QWORD *)(a5 + 96));
  v9 = v104;
  v10 = v104[5];
  if (v10)
  {
    v11 = 0;
    v12 = (uint64_t *)(*v104 + 40);
    do
    {
      v13 = *v12;
      v12 += 19;
      v11 = (Phase::Logger *)((char *)v11 + v13);
      --v10;
    }
    while (v10);
    if (v11)
    {
      v14 = *(_QWORD *)(a3 + 64);
      if (v14)
      {
        v15 = *(_QWORD *)(a4 + 192);
        v16 = *(_DWORD *)(v14 + 136);
        if (v16 > v15
          && (v17 = *(_QWORD *)(v14 + 120), *(_DWORD *)(v17 + 24 * v15 + 20) == HIDWORD(v15))
          && (v18 = *(_QWORD *)(v17 + 24 * *(_QWORD *)(a4 + 192))) != 0
          && *(_DWORD *)v18 == 3)
        {
          v19 = *(_QWORD *)(a4 + 200);
          if (v16 > v19
            && *(_DWORD *)(v17 + 24 * v19 + 20) == HIDWORD(v19)
            && (v20 = *(_QWORD *)(v17 + 24 * *(_QWORD *)(a4 + 200))) != 0
            && *(_DWORD *)v20 == 2)
          {
            v21 = *(_OWORD *)(v18 + 64);
            v102 = *(_OWORD *)(v18 + 48);
            v103 = v21;
            v23 = *(_OWORD *)(v20 + 48);
            v24 = *(_OWORD *)(v20 + 64);
            v22 = (float *)(v20 + 48);
            v100 = v23;
            v101 = v24;
            Phase::Inverse<float>((float32x2_t *)&v100, (uint64_t)buf);
            v25.n128_f32[0] = Phase::operator*<float>((float32x2_t *)buf, (float *)&v102, (uint64_t)v95);
            v26 = *(uint64_t **)(a3 + 96);
            if (v26 && *(_DWORD *)v26 == 3)
            {
              Phase::SpatialModeler::AllocMetadata<float,Phase::SystemAllocator>(v26, (uint64_t)(a2 + 5), v11, 3);
              v84 = a4;
              v85 = a1;
              v88 = v26;
              v83 = v22;
              v27 = 1.0 / (float)(unint64_t)v11;
              if (v27 <= 0.0)
                v27 = COERCE_FLOAT(1);
              *(float *)v29.i32 = logf(v27);
              v30 = v9[5];
              if (v30)
              {
                v31 = 0;
                v32 = 0;
                *(float *)v29.i32 = (float)((float)(*(float *)v29.i32 * 8.6859) / 10.0) * 10.0;
                v87 = *(float *)v29.i32;
                v33 = (float32x2_t)vdup_lane_s32(v29, 0);
                v34 = (float32x2_t)vdup_n_s32(0x3DEBC8E3u);
                __asm { FMOV            V11.2S, #10.0 }
                do
                {
                  v94 = (_QWORD *)(*v9 + 152 * v31);
                  if (v94[5])
                  {
                    v40 = 0;
                    v86 = v31;
                    v41 = (char *)v11 - v32;
                    if ((unint64_t)v11 < v32)
                      v41 = 0;
                    v89 = (_QWORD *)(*v9 + 152 * v31 + 48);
                    v90 = v41;
                    do
                    {
                      if (v40 == v90)
                        __assert_rtn("BuildOutput", "DirectPathTransmissionImpl.mm", 728, "outputIndex < totalPointCount");
                      v42 = v88[1];
                      v43 = v88[7];
                      v44 = v88[13];
                      v45 = *(_QWORD *)(v44 + 8);
                      v93 = v88[18];
                      Phase::operator*<float>(v95, (float *)(*v94 + 12 * (_QWORD)v40), (float *)buf);
                      v46 = (float)(v99 * *(float *)buf) + v96;
                      v47 = (float)(v99 * *(float *)&buf[4]) + v97;
                      v48 = (float)(v99 * *(float *)&buf[8]) + v98;
                      v49 = -v46;
                      if (v46 >= 0.0)
                        v49 = (float)(v99 * *(float *)buf) + v96;
                      if (v49 > 0.00000011921)
                        goto LABEL_35;
                      v50 = -v47;
                      if (v47 >= 0.0)
                        v50 = (float)(v99 * *(float *)&buf[4]) + v97;
                      if (v50 > 0.00000011921)
                        goto LABEL_35;
                      v51 = -v48;
                      if (v48 >= 0.0)
                        v51 = (float)(v99 * *(float *)&buf[8]) + v98;
                      v52 = 0.0;
                      v53 = v51 > 0.00000011921;
                      v54 = 0.0;
                      if (v53)
                      {
LABEL_35:
                        v52 = acosf(v47 / sqrtf((float)((float)(v46 * v46) + (float)(v47 * v47)) + (float)(v48 * v48)));
                        v54 = atan2f(v46, v48);
                      }
                      v55 = v42 + 12 * v32;
                      *(_DWORD *)v55 = 1065353216;
                      *(float *)(v55 + 4) = v52 * 57.296;
                      v56 = (float)((float)(180.0 - (float)(v54 * 57.296))
                                  - (float)(floorf((float)(180.0 - (float)(v54 * 57.296)) / 360.0) * 360.0))
                          + 0.0;
                      if (v56 >= 360.0)
                        v56 = nextafterf(360.0, 0.0);
                      v57 = 0;
                      v58 = 0;
                      v59 = 0;
                      *(float *)(v55 + 8) = v56;
                      *(_DWORD *)(v43 + 4 * v32) = 0;
                      v60 = (float32x2_t *)(*v89 + 12 * (_QWORD)v40);
                      v139 = vadd_f32(v33, *v60);
                      v61 = (Phase::Logger *)(v32 + 1);
                      v140 = v87 + v60[1].f32[0];
                      memset(buf, 0, sizeof(buf));
                      do
                      {
                        if (v59 <= 2)
                        {
                          v58 = v59 + 1;
                          *(_DWORD *)&buf[4 * v59++] = v139.i32[v57];
                        }
                        ++v57;
                      }
                      while (v57 != 3);
                      if (v58 <= 2)
                        bzero(&buf[4 * v58], 12 - 4 * v58);
                      v62 = *(float *)&buf[8];
                      v63 = vmul_f32(vdiv_f32(vmul_f32(*(float32x2_t *)buf, _D11), _D11), v34);
                      v91 = v63.f32[0];
                      v92 = expf(v63.f32[1]);
                      v64.f32[0] = expf(v91);
                      v64.f32[1] = v92;
                      v139 = v64;
                      v65 = expf((float)((float)(v62 * 10.0) / 10.0) * 0.11513);
                      v66 = 0;
                      v67 = 0;
                      v68 = 0;
                      v140 = v65;
                      memset(buf, 0, sizeof(buf));
                      do
                      {
                        if (v68 <= 2)
                        {
                          v67 = v68 + 1;
                          *(_DWORD *)&buf[4 * v68++] = v139.i32[v66];
                        }
                        ++v66;
                      }
                      while (v66 != 3);
                      if (v67 <= 2)
                        bzero(&buf[4 * v67], 12 - 4 * v67);
                      v69 = *(_DWORD *)&buf[8];
                      *(_QWORD *)(v44 + 4 * v45 * v32 + 16) = *(_QWORD *)buf;
                      *(_DWORD *)(v44 + 4 * v45 * v32 + 24) = v69;
                      *(_BYTE *)(v93 + v32) = 0;
                      ++v40;
                      ++v32;
                    }
                    while (v94[5] > (unint64_t)v40);
                    v30 = v9[5];
                    v32 = (unint64_t)v61;
                    v31 = v86;
                  }
                  else
                  {
                    v61 = (Phase::Logger *)v32;
                  }
                  ++v31;
                }
                while (v30 > v31);
              }
              else
              {
                v61 = 0;
              }
              InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(v28);
              a1 = v85;
              if (*((_BYTE *)InstancePtr + 216))
              {
                v74 = (Phase::Logger *)objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 208));
                v75 = Phase::Logger::GetInstancePtr(v74);
                v76 = os_signpost_id_generate(**(os_log_t **)(v75 + 208));
                if (v76 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v77 = v76;
                  if (os_signpost_enabled((os_log_t)v74))
                  {
                    v79 = *(_QWORD *)(v84 + 192);
                    v78 = *(_QWORD *)(v84 + 200);
                    *(_DWORD *)buf = 134222080;
                    *(_QWORD *)&buf[4] = v88;
                    v107 = 2048;
                    v108 = v78;
                    v109 = 2048;
                    v110 = *(float *)&v100;
                    v111 = 2048;
                    v112 = *((float *)&v100 + 1);
                    v113 = 2048;
                    v114 = *((float *)&v100 + 2);
                    v115 = 2048;
                    v116 = *((float *)&v100 + 3);
                    v117 = 2048;
                    v118 = *(float *)&v101;
                    v119 = 2048;
                    v120 = *((float *)&v101 + 1);
                    v121 = 2048;
                    v122 = *((float *)&v101 + 2);
                    v123 = 2048;
                    v124 = v79;
                    v125 = 2048;
                    v126 = *(float *)&v102;
                    v127 = 2048;
                    v128 = *((float *)&v102 + 1);
                    v129 = 2048;
                    v130 = *((float *)&v102 + 2);
                    v131 = 2048;
                    v132 = *((float *)&v102 + 3);
                    v133 = 2048;
                    v134 = *(float *)&v103;
                    v135 = 2048;
                    v136 = *((float *)&v103 + 1);
                    v137 = 2048;
                    v138 = *((float *)&v103 + 2);
                    _os_signpost_emit_with_name_impl(&dword_2164CC000, (os_log_t)v74, OS_SIGNPOST_EVENT, v77, "Phase_Spatial_Modeler_Output", "Metadata %p built for: Listener %llu: Rotation [%f, %f, %f, %f], Position [%f, %f, %f] \n Source %llu: Rotation [%f, %f, %f, %f], Position [%f, %f, %f] \n ", buf, 0xACu);
                  }
                }

              }
              Phase::Trace::PostDirectPathSpatialModelerOutput(*(Phase::Logger **)(v84 + 200), *(_QWORD *)(v84 + 192), v83);
              if (v61 != v11)
                __assert_rtn("BuildOutput", "DirectPathTransmissionImpl.mm", 781, "outputIndex == totalPointCount");
              goto LABEL_67;
            }
            v70 = (**a2)(a2, v25);
            v71 = 4;
          }
          else
          {
            v70 = ((uint64_t (*)(uint64_t (***)(_QWORD, __n128)))**a2)(a2);
            v71 = 7;
          }
        }
        else
        {
          v70 = ((uint64_t (*)(uint64_t (***)(_QWORD, __n128)))**a2)(a2);
          v71 = 6;
        }
      }
      else
      {
        v70 = ((uint64_t (*)(uint64_t (***)(_QWORD, __n128)))**a2)(a2);
        v71 = 5;
      }
      *(_QWORD *)a1 = v71;
      *(_QWORD *)(a1 + 8) = v70;
      v72 = 2;
      goto LABEL_68;
    }
  }
LABEL_67:
  v72 = 1;
LABEL_68:
  *(_DWORD *)(a1 + 24) = v72;
  v80 = v105;
  if (v105)
  {
    p_shared_owners = (unint64_t *)&v105->__shared_owners_;
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
}

void sub_21655FDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;

  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryHandleResults(Phase::Logger *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t InstancePtr;
  Phase::Logger *v6;
  Phase::Logger *v7;
  NSObject *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t (**v26)();
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  unint64_t *v30;
  char **v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t (***v34)();
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  double v47;
  char *v48;
  double v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t i;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  uint64_t v59;
  float32x2_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  float32x2_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  double *v74;
  uint64_t *v75;
  double v76;
  unint64_t v77;
  os_signpost_id_t v78;
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v80;
  Phase::Logger *v81;
  uint64_t v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t (**v89)();
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  __int128 v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _DWORD *v101;
  _DWORD *v102;
  float32x2_t *v103;
  int v104;
  char *v105;
  uint64_t v106;
  Phase::Logger *v107;
  NSObject *v108;
  NSObject *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  NSObject *v115;
  std::logic_error *exception;
  unint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  Phase::Logger *v120;
  _QWORD *v121;
  char *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  std::__shared_weak_count *v127;
  _QWORD *v128;
  std::__shared_weak_count *v129;
  _BYTE *v130;
  int v131;
  uint8_t buf[8];
  _BYTE v133[32];
  uint64_t (**v134)();
  uint64_t v135[6];
  uint64_t v136[8];
  _BYTE v137[24];
  uint64_t (**v138)();
  char *v139;
  float32x2_t v140;
  float v141;
  uint64_t (**v142)();
  uint64_t (**v143)();
  void **v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  InstancePtr = Phase::Logger::GetInstancePtr(a1);
  v6 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 208));
  v7 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v6);
  if (*((_BYTE *)v7 + 216))
  {
    v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7)
                                                                                       + 208)));
    v9 = v8;
    if ((unint64_t)v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v9, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v6, "Phase_DirectPath_Spatial_Query_Handle_Results", "DirectPathTransmission: Handle Query Results", buf, 2u);
    }

  }
  v10 = atomic_load((unsigned int *)a2);
  if (v10 != 3)
  {
    v24 = (**(uint64_t (***)(Phase::Logger *))a1)(a1);
    *(_QWORD *)a3 = 129;
    *(_QWORD *)(a3 + 8) = v24;
    *(_DWORD *)(a3 + 24) = 2;
    return;
  }
  v11 = *((_QWORD *)a1 + 2);
  if (!*(_QWORD *)(v11 + 2760))
    goto LABEL_23;
  v12 = Phase::Geometry::SystemDebugger::GetFromSystem(v11);
  if (!v12)
    goto LABEL_23;
  v15 = *(_QWORD **)(v12 + 24);
  v13 = v12 + 24;
  v14 = v15;
  if (!v15)
    goto LABEL_23;
  v16 = *(_QWORD *)(a2 + 192);
  v17 = (_QWORD *)v13;
  do
  {
    v18 = v14[4];
    v19 = v18 >= v16;
    if (v18 >= v16)
      v20 = v14;
    else
      v20 = v14 + 1;
    if (v19)
      v17 = v14;
    v14 = (_QWORD *)*v20;
  }
  while (*v20);
  if (v17 != (_QWORD *)v13)
  {
    v21 = v17[4];
    v22 = v17 + 5;
    if (v21 <= v16)
      v23 = v22;
    else
      v23 = 0;
  }
  else
  {
LABEL_23:
    v23 = 0;
  }
  v25 = *(_QWORD **)(a2 + 168);
  v26 = (uint64_t (**)())*(int *)(a2 + 376);
  std::atomic_load[abi:ne180100]<Phase::SpatialModeler::DirectPathTransmission::SourceData>(&v128, v25 + 12);
  v27 = v128;
  v28 = (char *)operator new(0x48uLL);
  v29 = v28;
  *((_QWORD *)v28 + 1) = 0;
  v30 = (unint64_t *)(v28 + 8);
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = &off_24D57A918;
  *(_OWORD *)(v28 + 24) = 0u;
  v31 = (char **)(v28 + 24);
  *(_OWORD *)(v28 + 40) = 0u;
  *(_OWORD *)(v28 + 56) = 0u;
  v127 = (std::__shared_weak_count *)v28;
  if (!(_DWORD)v26)
  {
    v115 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v28) + 112));
    if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v137 = 136315394;
      *(_QWORD *)&v137[4] = "ManagedPtr.hpp";
      *(_WORD *)&v137[12] = 1024;
      *(_DWORD *)&v137[14] = 229;
      _os_log_impl(&dword_2164CC000, v115, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v137, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  v32 = operator new(152 * (int)v26, (std::align_val_t)8uLL);
  v119 = v23;
  v120 = v6;
  v33 = v32;
  do
  {
    *v33 = 0;
    v33[5] = 0;
    v33[6] = 0;
    v33[4] = 0;
    v33[11] = 0;
    v33[12] = 0;
    v33[10] = 0;
    v33[17] = 0;
    v33[18] = 0;
    v33[16] = 0;
    v33 += 19;
  }
  while (v33 != &v32[19 * (int)v26]);
  v142 = &off_24D57A950;
  v143 = v26;
  v144 = (void **)&v142;
  *(_QWORD *)v137 = v32;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v137[8], (uint64_t)&v142);
  v34 = (uint64_t (***)())v144;
  if (v144 == (void **)&v142)
  {
    v35 = 4;
    v34 = &v142;
  }
  else
  {
    if (!v144)
      goto LABEL_32;
    v35 = 5;
  }
  (*v34)[v35]();
LABEL_32:
  v118 = a3;
  v36 = *(_QWORD *)v137;
  *(_QWORD *)v137 = 0;
  *(_QWORD *)buf = v36;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v133, (uint64_t)&v137[8]);
  v134 = v26;
  std::unique_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceFrame [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)v137);
  v37 = *(char **)buf;
  *(_QWORD *)buf = 0;
  v38 = *v31;
  *v31 = v37;
  if (v38)
  {
    *(_QWORD *)v137 = v38;
    v39 = v29[7];
    if (!v39)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v39 + 48))(v39, v137);
  }
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v29 + 4, (uint64_t)v133);
  v29[8] = v134;
  std::unique_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceFrame [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
  if (v27)
  {
    if (v27[5] < (unint64_t)v26)
      v26 = (uint64_t (**)())v27[5];
    if (v26)
    {
      v40 = 0;
      do
      {
        Phase::SpatialModeler::DirectPathTransmission::SourceFrame::operator=((uint64_t *)&(*v31)[v40], (_QWORD *)(*v27 + v40));
        v40 += 152;
        v26 = (uint64_t (**)())((char *)v26 - 1);
      }
      while (v26);
    }
  }
  v41 = (double)std::chrono::steady_clock::now().__d_.__rep_ / 1000000000.0;
  v42 = v29[8];
  if (!v42)
  {
    v45 = 0;
    v50 = a2;
LABEL_51:
    if (*(_BYTE *)(v50 + 380))
    {
      if (v25[21] >= v42)
        v45 = 0;
      else
        v45 = v25[21];
    }
    v51 = (uint64_t *)&(*v31)[152 * v45];
    v51[18] = 0;
    std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](v51 + 12);
    v51[17] = 0;
    std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](v51 + 6);
    v51[11] = 0;
    std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](v51);
    v51[5] = 0;
    v46 = 1;
    goto LABEL_56;
  }
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 1.79769313e308;
  do
  {
    v48 = &(*v31)[v43];
    v49 = *((double *)v48 + 18);
    if (v49 >= v41 + -10.0)
    {
      if (v49 < v47)
      {
        v45 = v44;
        v47 = *((double *)v48 + 18);
      }
    }
    else
    {
      *((_QWORD *)v48 + 18) = 0;
      std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)v48 + 12);
      *((_QWORD *)v48 + 17) = 0;
      std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)v48 + 6);
      *((_QWORD *)v48 + 11) = 0;
      std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)v48);
      *((_QWORD *)v48 + 5) = 0;
      ++v46;
      v42 = v29[8];
    }
    ++v44;
    v43 += 152;
  }
  while (v42 > v44);
  v50 = a2;
  if (!v46)
    goto LABEL_51;
LABEL_56:
  v52 = *(_QWORD *)(v50 + 320);
  if (v52 != *(_QWORD *)(v50 + 144))
    __assert_rtn("RunSpatialQueryHandleResults", "DirectPathTransmissionImpl.mm", 548, "sourcePointCount == inQueryState.mTraceQueries.Size()");
  v124 = v29;
  v121 = v25;
  Phase::SpatialModeler::DirectPathTransmission::SourceFrame::SourceFrame((Phase::SpatialModeler::DirectPathTransmission::SourceFrame *)buf, v52, v41);
  if (v52)
  {
    for (i = 0; i != v52; ++i)
    {
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v57 = (_DWORD *)(*(_QWORD *)(v50 + 280) + 12 * i);
      v58 = (_DWORD *)(*(_QWORD *)buf + 12 * i);
      v59 = *(_QWORD *)(v50 + 104);
      *v58 = *v57;
      v58[1] = v57[1];
      v58[2] = v57[2];
      v60 = (float32x2_t *)(v59 + 68 * i);
      v142 = (uint64_t (**)())vneg_f32(v60[6]);
      *(float *)&v143 = -v60[7].f32[0];
      *(_QWORD *)v137 = 0;
      *(_DWORD *)&v137[8] = 0;
      do
      {
        if (v56 <= 2)
        {
          v55 = v56 + 1;
          *(_DWORD *)&v137[4 * v56++] = *(_DWORD *)((char *)&v142 + v54);
        }
        v54 += 4;
      }
      while (v54 != 12);
      if (v55 <= 2)
        bzero(&v137[4 * v55], 12 - 4 * v55);
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = *(float32x2_t *)(v50 + 264);
      v142 = (uint64_t (**)())vadd_f32(*(float32x2_t *)v137, v64);
      *(float *)&v143 = *(float *)&v137[8] + *(float *)(v50 + 272);
      *(_QWORD *)v137 = 0;
      *(_DWORD *)&v137[8] = 0;
      do
      {
        if (v63 <= 2)
        {
          v62 = v63 + 1;
          *(_DWORD *)&v137[4 * v63++] = *(_DWORD *)((char *)&v142 + v61);
        }
        v61 += 4;
      }
      while (v61 != 12);
      if (v62 <= 2)
        bzero(&v137[4 * v62], 12 - 4 * v62);
      v65 = 0;
      v66 = 0;
      v67 = 0;
      v64.i32[0] = *(_DWORD *)(*(_QWORD *)(v50 + 328) + 4 * i);
      v142 = (uint64_t (**)())vadd_f32(*(float32x2_t *)v137, (float32x2_t)vdup_lane_s32((int32x2_t)v64, 0));
      *(float *)&v143 = *(float *)&v137[8] + v64.f32[0];
      *(_QWORD *)v137 = 0;
      *(_DWORD *)&v137[8] = 0;
      do
      {
        if (v67 <= 2)
        {
          v66 = v67 + 1;
          *(_DWORD *)&v137[4 * v67++] = *(_DWORD *)((char *)&v142 + v65);
        }
        v65 += 4;
      }
      while (v65 != 12);
      if (v66 <= 2)
        bzero(&v137[4 * v66], 12 - 4 * v66);
      v68 = *(_DWORD *)&v137[8];
      v69 = v135[0] + 12 * i;
      *(_QWORD *)v69 = *(_QWORD *)v137;
      *(_DWORD *)(v69 + 8) = v68;
      *(_DWORD *)(v136[0] + 4 * i) = *(_DWORD *)(v59 + 68 * i + 64);
    }
  }
  v70 = v29[8];
  if (!v70)
    goto LABEL_99;
  v71 = 0;
  v72 = 144;
  v73 = v25;
  do
  {
    v74 = (double *)&(*v31)[v72];
    v76 = *v74;
    v75 = (uint64_t *)(v74 - 18);
    if (v76 == 0.0)
    {
      if (v46 == 1)
      {
        Phase::SpatialModeler::DirectPathTransmission::SourceFrame::operator=(v75, (uint64_t *)buf);
      }
      else
      {
        if (!v46)
          __assert_rtn("RunSpatialQueryHandleResults", "DirectPathTransmissionImpl.mm", 571, "emptyCount != 0");
        Phase::SpatialModeler::DirectPathTransmission::SourceFrame::operator=(v75, buf);
      }
      v70 = v124[8];
      --v46;
      v50 = a2;
    }
    ++v71;
    v72 += 152;
  }
  while (v70 > v71);
  if (v46)
LABEL_99:
    __assert_rtn("RunSpatialQueryHandleResults", "DirectPathTransmissionImpl.mm", 584, "0 == emptyCount");
  do
    v77 = __ldxr(v30);
  while (__stxr(v77 + 1, v30));
  v78 = (os_signpost_id_t)v120;
  sp_mut = std::__get_sp_mut(v25 + 12);
  std::__sp_mut::lock(sp_mut);
  v80 = (std::__shared_weak_count *)v25[13];
  v121[12] = v31;
  v121[13] = v124;
  std::__sp_mut::unlock(sp_mut);
  v82 = v118;
  if (v80)
  {
    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  atomic_store(*(unint64_t *)&v41, v121 + 22);
  v85 = v124[8];
  if (v85)
  {
    v86 = 0;
    v87 = (uint64_t *)(*v31 + 40);
    do
    {
      v88 = *v87;
      v87 += 19;
      v86 += v88;
      --v85;
    }
    while (v85);
    if (!v119)
      goto LABEL_128;
LABEL_101:
    if (v119[5])
    {
      v138 = 0;
      v139 = 0;
      *(_QWORD *)v137 = *(_QWORD *)(v50 + 192);
      *(_QWORD *)&v137[8] = 0;
      *(_QWORD *)&v137[16] = v86;
      std::vector<Phase::Vector<float,3ul>>::vector(&v142, v86);
      v89 = v142;
      v138 = v142;
      if (v86)
      {
        if (v86 >> 57)
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        v90 = (char *)operator new(v86 << 7);
        bzero(v90, v86 << 7);
      }
      else
      {
        v90 = 0;
      }
      v117 = v86;
      v139 = v90;
      v123 = v124[8];
      if (v123)
      {
        v91 = 0;
        LODWORD(v92) = 0;
        v93 = *v31;
        v94 = 0uLL;
        v122 = *v31;
        do
        {
          v95 = &v93[152 * v91];
          if (*((_QWORD *)v95 + 5))
          {
            v96 = 0;
            v125 = v91;
            v97 = &v93[152 * v91 + 48];
            v92 = (int)v92;
            do
            {
              v98 = 0;
              v99 = 0;
              v100 = 0;
              v101 = (_DWORD *)(*(_QWORD *)v95 + 12 * v96);
              v102 = (_DWORD *)v89 + 3 * v92;
              *v102 = *v101;
              v102[1] = v101[1];
              v102[2] = v101[2];
              v103 = (float32x2_t *)(*(_QWORD *)v97 + 12 * v96);
              v140 = vneg_f32(*v103);
              v141 = -v103[1].f32[0];
              v130 = 0;
              v131 = 0;
              do
              {
                if (v100 <= 2)
                {
                  v99 = v100 + 1;
                  *((_DWORD *)&v130 + v100++) = v140.i32[v98];
                }
                ++v98;
              }
              while (v98 != 3);
              if (v99 <= 2)
              {
                bzero((char *)&v130 + 4 * v99, 12 - 4 * v99);
                v94 = 0uLL;
              }
              v104 = v131;
              v105 = &v90[128 * v92];
              *(_QWORD *)v105 = v130;
              *((_DWORD *)v105 + 2) = v104;
              *(_OWORD *)(v105 + 12) = v94;
              *(_OWORD *)(v105 + 28) = v94;
              *(_OWORD *)(v105 + 44) = v94;
              *(_OWORD *)(v105 + 60) = v94;
              *(_OWORD *)(v105 + 76) = v94;
              *(_OWORD *)(v105 + 92) = v94;
              *(_OWORD *)(v105 + 108) = v94;
              *((_DWORD *)v105 + 31) = 3;
              ++v92;
              ++v96;
            }
            while (*((_QWORD *)v95 + 5) > v96);
            v91 = v125;
            v50 = a2;
            v93 = v122;
          }
          ++v91;
        }
        while (v91 != v123);
      }
      else
      {
        LODWORD(v92) = 0;
      }
      if (v117 != (int)v92)
        __assert_rtn("RunSpatialQueryHandleResults", "DirectPathTransmissionImpl.mm", 627, "totalPointCount == debugIndex");
      v130 = v137;
      v78 = (os_signpost_id_t)v120;
      v106 = v119[5];
      v73 = v121;
      if (!v106)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, _BYTE **))(*(_QWORD *)v106 + 48))(v106, &v130);
      if (v90)
        operator delete(v90);
      v81 = (Phase::Logger *)v142;
      if (v142)
      {
        v143 = v142;
        operator delete(v142);
      }
      v82 = v118;
    }
    goto LABEL_128;
  }
  v86 = 0;
  if (v119)
    goto LABEL_101;
LABEL_128:
  *(_QWORD *)(v50 + 184) = Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryReturnOutput;
  v107 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v81);
  if (*((_BYTE *)v107 + 216))
  {
    v108 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v107)
                                                                                         + 208)));
    v109 = v108;
    if (v78 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v108))
    {
      *(_WORD *)v137 = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v109, OS_SIGNPOST_INTERVAL_END, v78, "Phase_DirectPath_Spatial_Query_Handle_Results", (const char *)&unk_21676613F, v137, 2u);
    }

  }
  *(_QWORD *)v82 = v73;
  *(_DWORD *)(v82 + 24) = 5;
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v136);
  std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v135);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
  if (v127)
  {
    v110 = (unint64_t *)&v127->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v112 = v129;
  if (v129)
  {
    v113 = (unint64_t *)&v129->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
}

void sub_216560A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;

  __cxa_free_exception(v27);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::atomic_load[abi:ne180100]<Phase::SpatialModeler::DirectPathTransmission::SourceData>(_QWORD *a1, _QWORD *a2)
{
  std::__sp_mut *sp_mut;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  sp_mut = std::__get_sp_mut(a2);
  std::__sp_mut::lock(sp_mut);
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::__sp_mut::unlock(sp_mut);
}

void Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryReturnOutput(Phase::Logger *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t InstancePtr;
  Phase::Logger *v9;
  Phase::Logger *v10;
  NSObject *v11;
  NSObject *v12;
  Phase::Logger *v13;
  Phase::Logger *v14;
  NSObject *v15;
  NSObject *v16;
  uint8_t v17[16];
  uint8_t buf[16];

  InstancePtr = Phase::Logger::GetInstancePtr(a1);
  v9 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 208));
  v10 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v9);
  if (*((_BYTE *)v10 + 216))
  {
    v11 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10)
                                                                                        + 208)));
    v12 = v11;
    if ((unint64_t)v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v12, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v9, "Phase_DirectPath_Spatial_Query_Return_Output", "DirectPathTransmission: Return Output", buf, 2u);
    }

  }
  Phase::SpatialModeler::DirectPathTransmissionImpl::BuildOutput(a4, (uint64_t (***)(_QWORD, __n128))a1, a2, a3, *(_QWORD *)(a3 + 168));
  v14 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v13);
  if (*((_BYTE *)v14 + 216))
  {
    v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v14)
                                                                                        + 208)));
    v16 = v15;
    if ((unint64_t)v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
    {
      *(_WORD *)v17 = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v16, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v9, "Phase_DirectPath_Spatial_Query_Return_Output", (const char *)&unk_21676613F, v17, 2u);
    }

  }
}

void sub_216560C98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::DirectPathTransmission::SourceFrame::~SourceFrame(Phase::SpatialModeler::DirectPathTransmission::SourceFrame *this)
{
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 12);
  std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 6);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this);
}

float Phase::operator*<float>@<S0>(float32x2_t *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  float v6;
  float result;
  float32x2_t v8;
  float v9;
  __int128 v10;
  float32x2_t v11;
  float v12;

  Phase::operator*<float>((float *)a1, a2, (float *)&v10);
  Phase::operator*<float>((float *)a1, a2 + 4, (float *)&v11);
  v6 = a1[3].f32[1];
  result = (float)(v6 * v12) + a1[3].f32[0];
  v8 = vadd_f32(vmul_n_f32(v11, v6), a1[2]);
  v9 = v6 * a2[7];
  *(_OWORD *)a3 = v10;
  *(float32x2_t *)(a3 + 16) = v8;
  *(float *)(a3 + 24) = result;
  *(float *)(a3 + 28) = v9;
  return result;
}

float32x2_t Phase::Inverse<float>@<D0>(float32x2_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int32 v3;
  unsigned int v4;
  float v5;
  float v6;
  float32x2_t result;
  float32x2_t v8;
  float v9;
  __int128 v10;

  v3 = a1[1].i32[1];
  *(float *)&v4 = -a1[1].f32[0];
  *(float32x2_t *)&v10 = vneg_f32(*a1);
  *((_QWORD *)&v10 + 1) = __PAIR64__(v3, v4);
  v5 = 1.0 / a1[3].f32[1];
  Phase::operator*<float>((float *)&v10, (float *)&a1[2], (float *)&v8);
  v6 = -(float)(v5 * v9);
  *(_OWORD *)a2 = v10;
  result = vmul_n_f32(v8, -v5);
  *(float32x2_t *)(a2 + 16) = result;
  *(float *)(a2 + 24) = v6;
  *(float *)(a2 + 28) = v5;
  return result;
}

float Phase::Geometry::CalculateDirectivitySubbandGains<3ul>(Phase::Geometry::SystemState *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  float v6;
  __int128 v12;
  __int128 v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _OWORD v67[2];
  _OWORD v68[2];
  uint64_t v69;
  std::__shared_weak_count *v70;
  unsigned int v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  _OWORD v78[2];
  _OWORD v79[2];
  uint64_t v80;
  std::__shared_weak_count *v81;
  unsigned int v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  void **v89;
  int v90;
  float v91[3];
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)a3 == 3 && *(_DWORD *)a2 == 2;
  v6 = 1.0;
  if (v5)
  {
    Phase::Geometry::SystemState::SystemState((Phase::Geometry::SystemState *)&v80, a1);
    v12 = *(_OWORD *)(a2 + 64);
    v79[0] = *(_OWORD *)(a2 + 48);
    v79[1] = v12;
    v13 = *(_OWORD *)(a3 + 64);
    v78[0] = *(_OWORD *)(a3 + 48);
    v78[1] = v13;
    _ZZN5Phase8Geometry32CalculateDirectivitySubbandGainsILm3EEENS_14PackedSubbandsIfXT_EEERNS0_11SystemStateERKNS0_6EntityES8_NS_8Handle64ES9_ENKUlT_bT0_T1_T2_E_clIS4_S9_NS_6AffineIfEESH_EEDaSA_bSB_SC_SD_(v80, v82, 1, a4, (float32x2_t *)v79, (float32x2_t *)v78);
    v6 = v14;
    v16 = v15;
    v18 = v17;
    v89 = (void **)&v88;
    std::vector<std::shared_ptr<Phase::Controller::Renderer>>::__destroy_vector::operator()[abi:ne180100](&v89);
    v19 = v87;
    if (v87)
    {
      p_shared_owners = (unint64_t *)&v87->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v86;
    if (v86)
    {
      v23 = (unint64_t *)&v86->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v85;
    if (v85)
    {
      v26 = (unint64_t *)&v85->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v84;
    if (v84)
    {
      v29 = (unint64_t *)&v84->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = v83;
    if (v83)
    {
      v32 = (unint64_t *)&v83->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = v81;
    if (v81)
    {
      v35 = (unint64_t *)&v81->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (*(_QWORD *)(a3 + 120) == *(_QWORD *)(a3 + 128))
    {
      Phase::Geometry::SystemState::SystemState((Phase::Geometry::SystemState *)&v69, a1);
      v37 = *(_OWORD *)(a2 + 64);
      v68[0] = *(_OWORD *)(a2 + 48);
      v68[1] = v37;
      v38 = *(_OWORD *)(a3 + 64);
      v67[0] = *(_OWORD *)(a3 + 48);
      v67[1] = v38;
      _ZZN5Phase8Geometry32CalculateDirectivitySubbandGainsILm3EEENS_14PackedSubbandsIfXT_EEERNS0_11SystemStateERKNS0_6EntityES8_NS_8Handle64ES9_ENKUlT_bT0_T1_T2_E_clIS4_S9_NS_6AffineIfEESH_EEDaSA_bSB_SC_SD_(v69, v71, 0, a5, (float32x2_t *)v68, (float32x2_t *)v67);
      v40 = v39;
      v42 = v41;
      v44 = v43;
      v89 = (void **)&v77;
      std::vector<std::shared_ptr<Phase::Controller::Renderer>>::__destroy_vector::operator()[abi:ne180100](&v89);
      v45 = v76;
      if (v76)
      {
        v46 = (unint64_t *)&v76->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = v75;
      if (v75)
      {
        v49 = (unint64_t *)&v75->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v74;
      if (v74)
      {
        v52 = (unint64_t *)&v74->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = v73;
      if (v73)
      {
        v55 = (unint64_t *)&v73->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = v72;
      if (v72)
      {
        v58 = (unint64_t *)&v72->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = v70;
      if (v70)
      {
        v61 = (unint64_t *)&v70->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v63 = 0;
      v64 = 0;
      v65 = 0;
      v91[0] = v6 * v40;
      v91[1] = v16 * v42;
      v91[2] = v18 * v44;
      v89 = 0;
      v90 = 0;
      do
      {
        if (v65 <= 2)
        {
          v64 = v65 + 1;
          *((float *)&v89 + v65++) = v91[v63];
        }
        ++v63;
      }
      while (v63 != 3);
      if (v64 <= 2)
        bzero((char *)&v89 + 4 * v64, 12 - 4 * v64);
      return *(float *)&v89;
    }
  }
  return v6;
}

void sub_216561288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  Phase::Geometry::SystemState::~SystemState((Phase::Geometry::SystemState *)va);
  _Unwind_Resume(a1);
}

void Phase::Geometry::CalculateDistanceGainsInDecibels<Phase::SystemAllocator>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  Phase::Logger *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  Phase::Logger *v40;
  uint64_t v41;
  float v42[8];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v13 = (Phase::Logger *)a6[5];
  v39 = 4;
  v40 = v13;
  v38[0] = a2;
  v38[1] = &v40;
  v38[2] = &v39;
  v37 = a2;
  Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(v13, (uint64_t)v38, &v37, &v41);
  v14 = v41;
  v41 = 0;
  *(_QWORD *)a1 = v14;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 8, (uint64_t)v42);
  *(_QWORD *)(a1 + 40) = v13;
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v41);
  v15 = *(_QWORD *)(a1 + 40);
  if (v15)
    bzero(*(void **)a1, 4 * v15);
  if (*(_DWORD *)(a3 + 40) > a7)
  {
    v16 = *(_QWORD *)(a3 + 24);
    if (*(_DWORD *)(v16 + 24 * a7 + 20) == HIDWORD(a7))
    {
      v17 = *(_QWORD *)(v16 + 24 * a7);
      if (v17)
      {
        v18 = *(_DWORD *)a4 == 2 ? a4 : 0;
        if (*(_DWORD *)a5 == 3 && *(_DWORD *)a4 == 2)
        {
          v19 = *(uint64_t **)(a5 + 120);
          v20 = 0.0;
          if (v19 != *(uint64_t **)(a5 + 128))
          {
            v21 = *v19;
            if (*(_DWORD *)(a3 + 112) > *v19)
            {
              v22 = *(_QWORD *)(a3 + 96);
              if (*(_DWORD *)(v22 + 24 * v21 + 20) == HIDWORD(v21))
              {
                v23 = *(float **)(v22 + 24 * v21);
                if (v23)
                  v20 = (float)(*(float *)(a5 + 76) * fmaxf(fmaxf(v23[9] - v23[6], v23[10] - v23[7]), v23[11] - v23[8]))
                      * 0.5;
              }
            }
          }
          v24 = a6[5];
          if (v24)
          {
            v25 = 0;
            v26 = 0;
            v27 = *(float *)(a4 + 64);
            v28 = *(float *)(a4 + 68);
            v29 = *(float *)(a4 + 72);
            v30 = *(double *)(v18 + 152);
            do
            {
              Phase::operator*<float>((float *)(a5 + 48), (float *)(*a6 + v25), (float *)&v41);
              v31 = *(float *)(a5 + 76);
              v32 = fmaxf(v30, v20+ sqrtf((float)((float)((float)(v27 - (float)((float)(v31 * *(float *)&v41) + *(float *)(a5 + 64)))* (float)(v27 - (float)((float)(v31 * *(float *)&v41) + *(float *)(a5 + 64))))+ (float)((float)(v28 - (float)((float)(v31 * *((float *)&v41 + 1)) + *(float *)(a5 + 68)))* (float)(v28 - (float)((float)(v31 * *((float *)&v41 + 1)) + *(float *)(a5 + 68)))))+ (float)((float)(v29 - (float)((float)(v31 * v42[0]) + *(float *)(a5 + 72)))* (float)(v29 - (float)((float)(v31 * v42[0]) + *(float *)(a5 + 72))))));
              if (*(_DWORD *)v17 == 2)
              {
                v35 = **(_QWORD **)(v17 + 40);
                if (!v35)
LABEL_28:
                  std::terminate();
                v36 = Phase::Envelope<float>::operator()((float **)(v35 + 16), v32);
                if (v36 <= 0.0)
                  v36 = COERCE_FLOAT(1);
                v33 = (float)((float)(logf(v36) * 8.6859) / 10.0) * 10.0;
              }
              else
              {
                v33 = 0.0;
                if (*(_DWORD *)v17 == 1)
                {
                  v34 = **(_QWORD **)(v17 + 40);
                  if (!v34)
                    goto LABEL_28;
                  v33 = (float)(log2f(v32 / (float)(v20 + 1.0)) * -6.0206) * *(float *)(v34 + 16);
                }
              }
              *(float *)(*(_QWORD *)a1 + 4 * v26++) = v33;
              v25 += 12;
            }
            while (v24 != v26);
          }
        }
      }
    }
  }
}

void sub_2165615DC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::DirectPathTransmissionImpl::BuildOutputPointSource(uint64_t a1, uint64_t (***a2)(_QWORD), uint64_t a3, uint64_t a4, float a5, float a6, float a7)
{
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v21;
  float *v22;
  __int128 v23;
  __int128 v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  _BYTE *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  Phase::Logger *v41;
  float v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  Phase::Logger *InstancePtr;
  Phase::Logger *v48;
  uint64_t v49;
  os_signpost_id_t v50;
  os_signpost_id_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  int v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  float v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE buf[12];
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  __int16 v80;
  double v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  double v85;
  __int16 v86;
  double v87;
  __int16 v88;
  double v89;
  __int16 v90;
  double v91;
  __int16 v92;
  double v93;
  __int16 v94;
  double v95;
  __int16 v96;
  double v97;
  _DWORD v98[3];
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a3 + 64);
  if (!v9)
  {
    result = (**a2)(a2);
    v56 = 5;
    goto LABEL_38;
  }
  v11 = *(_QWORD *)(a4 + 192);
  v12 = *(_DWORD *)(v9 + 136);
  if (v12 <= v11
    || (v13 = *(_QWORD *)(v9 + 120), *(_DWORD *)(v13 + 24 * v11 + 20) != HIDWORD(v11))
    || (v14 = *(_QWORD *)(v13 + 24 * *(_QWORD *)(a4 + 192))) == 0
    || *(_DWORD *)v14 != 3)
  {
    result = (**a2)(a2);
    v56 = 6;
LABEL_38:
    *(_QWORD *)a1 = v56;
    *(_QWORD *)(a1 + 8) = result;
    v55 = 2;
    goto LABEL_39;
  }
  v15 = *(_QWORD *)(a4 + 200);
  if (v12 <= v15
    || *(_DWORD *)(v13 + 24 * v15 + 20) != HIDWORD(v15)
    || (v16 = *(_QWORD *)(v13 + 24 * *(_QWORD *)(a4 + 200))) == 0
    || *(_DWORD *)v16 != 2)
  {
    result = (**a2)(a2);
    v56 = 7;
    goto LABEL_38;
  }
  v21 = *(_OWORD *)(v14 + 64);
  v63 = *(_OWORD *)(v14 + 48);
  v64 = v21;
  v23 = *(_OWORD *)(v16 + 48);
  v24 = *(_OWORD *)(v16 + 64);
  v22 = (float *)(v16 + 48);
  v61 = v23;
  v62 = v24;
  Phase::Inverse<float>((float32x2_t *)&v61, (uint64_t)buf);
  v25.n128_f32[0] = Phase::operator*<float>((float32x2_t *)buf, (float *)&v63, (uint64_t)&v57);
  v26 = *(_QWORD *)(a3 + 96);
  if (!v26 || *(_DWORD *)v26 != 3)
  {
    result = ((uint64_t (*)(uint64_t (***)(_QWORD), __n128))**a2)(a2, v25);
    v56 = 4;
    goto LABEL_38;
  }
  *(_BYTE *)(v26 + 200) = 1;
  Phase::SpatialModeler::AllocMetadata<float,Phase::SystemAllocator>((uint64_t *)v26, (uint64_t)(a2 + 5), (Phase::Logger *)1, 3);
  v27 = *(_QWORD *)(v26 + 8);
  v28 = *(_DWORD **)(v26 + 56);
  v29 = *(_QWORD *)(v26 + 104);
  v30 = *(_BYTE **)(v26 + 144);
  v31 = v58;
  v32 = v60;
  v33 = -v58;
  if (v58 >= 0.0)
    v33 = v58;
  if (v33 > 0.00000011921)
    goto LABEL_21;
  v34 = -v59;
  if (v59 >= 0.0)
    v34 = v59;
  if (v34 > 0.00000011921)
    goto LABEL_21;
  v35 = -v60;
  if (v60 >= 0.0)
    v35 = v60;
  if (v35 <= 0.00000011921)
  {
    v38 = 0.0;
    v39 = 180.0;
  }
  else
  {
LABEL_21:
    v36 = acosf(v59 / sqrtf((float)((float)(v58 * v58) + (float)(v59 * v59)) + (float)(v60 * v60)));
    v37 = atan2f(v31, v32);
    v38 = v36 * 57.296;
    v39 = 180.0 - (float)(v37 * 57.296);
  }
  *(_DWORD *)v27 = 1065353216;
  *(float *)(v27 + 4) = v38;
  v40 = (float)(v39 - (float)(floorf(v39 / 360.0) * 360.0)) + 0.0;
  if (v40 >= 360.0)
    v40 = nextafterf(360.0, 0.0);
  *(float *)(v27 + 8) = v40;
  *v28 = 0;
  v98[0] = expf((float)((float)(a5 * 10.0) / 10.0) * 0.11513);
  v98[1] = expf((float)((float)(a6 * 10.0) / 10.0) * 0.11513);
  v42 = expf((float)((float)(a7 * 10.0) / 10.0) * 0.11513);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  *(float *)&v98[2] = v42;
  memset(buf, 0, sizeof(buf));
  do
  {
    if (v45 <= 2)
    {
      v44 = v45 + 1;
      *(_DWORD *)&buf[4 * v45++] = v98[v43];
    }
    ++v43;
  }
  while (v43 != 3);
  if (v44 <= 2)
    bzero(&buf[4 * v44], 12 - 4 * v44);
  v46 = *(_DWORD *)&buf[8];
  *(_QWORD *)(v29 + 16) = *(_QWORD *)buf;
  *(_DWORD *)(v29 + 24) = v46;
  *v30 = 0;
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(v41);
  if (*((_BYTE *)InstancePtr + 216))
  {
    v48 = (Phase::Logger *)objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                             + 208)));
    v49 = Phase::Logger::GetInstancePtr(v48);
    v50 = os_signpost_id_generate(**(os_log_t **)(v49 + 208));
    if (v50 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v51 = v50;
      if (os_signpost_enabled((os_log_t)v48))
      {
        v53 = *(_QWORD *)(a4 + 192);
        v52 = *(_QWORD *)(a4 + 200);
        *(_DWORD *)buf = 134222080;
        *(_QWORD *)&buf[4] = v26;
        v66 = 2048;
        v67 = v52;
        v68 = 2048;
        v69 = *(float *)&v61;
        v70 = 2048;
        v71 = *((float *)&v61 + 1);
        v72 = 2048;
        v73 = *((float *)&v61 + 2);
        v74 = 2048;
        v75 = *((float *)&v61 + 3);
        v76 = 2048;
        v77 = *(float *)&v62;
        v78 = 2048;
        v79 = *((float *)&v62 + 1);
        v80 = 2048;
        v81 = *((float *)&v62 + 2);
        v82 = 2048;
        v83 = v53;
        v84 = 2048;
        v85 = *(float *)&v63;
        v86 = 2048;
        v87 = *((float *)&v63 + 1);
        v88 = 2048;
        v89 = *((float *)&v63 + 2);
        v90 = 2048;
        v91 = *((float *)&v63 + 3);
        v92 = 2048;
        v93 = *(float *)&v64;
        v94 = 2048;
        v95 = *((float *)&v64 + 1);
        v96 = 2048;
        v97 = *((float *)&v64 + 2);
        _os_signpost_emit_with_name_impl(&dword_2164CC000, (os_log_t)v48, OS_SIGNPOST_EVENT, v51, "Phase_Spatial_Modeler_Output", "Metadata %p built for: Listener %llu: Rotation [%f, %f, %f, %f], Position [%f, %f, %f] \n Source %llu: Rotation [%f, %f, %f, %f], Position [%f, %f, %f] \n ", buf, 0xACu);
      }
    }

  }
  result = Phase::Trace::PostDirectPathSpatialModelerOutput(*(Phase::Logger **)(a4 + 200), *(_QWORD *)(a4 + 192), v22);
  v55 = 1;
LABEL_39:
  *(_DWORD *)(a1 + 24) = v55;
  return result;
}

void sub_216561B38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::DirectPathTransmissionImpl::RunSpatialQueryHandleResultsPointSource(Phase::Logger *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t InstancePtr;
  Phase::Logger *v9;
  Phase::Logger *v10;
  NSObject *v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  float32x2_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  float32x2_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  Phase::Logger *v44;
  Phase::Logger *v45;
  NSObject *v46;
  NSObject *v47;
  float32x2_t v48;
  float v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  int v59;
  float32x2_t v60;
  __int128 v61;
  uint64_t *v62;
  float32x2_t *v63;
  float32x2_t *v64;
  float v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  InstancePtr = Phase::Logger::GetInstancePtr(a1);
  v9 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 208));
  v10 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v9);
  if (*((_BYTE *)v10 + 216))
  {
    v11 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10)
                                                                                        + 208)));
    v12 = v11;
    if ((unint64_t)v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
    {
      v48.i16[0] = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v12, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v9, "Phase_DirectPath_Spatial_Query_Handle_Results", "DirectPathTransmission: Handle Query Results", (uint8_t *)&v48, 2u);
    }

  }
  v13 = atomic_load((unsigned int *)a3);
  if (v13 == 3)
  {
    v14 = *((_QWORD *)a1 + 2);
    if (!*(_QWORD *)(v14 + 2760))
      goto LABEL_23;
    v15 = Phase::Geometry::SystemDebugger::GetFromSystem(v14);
    if (!v15)
      goto LABEL_23;
    v18 = *(_QWORD **)(v15 + 24);
    v16 = v15 + 24;
    v17 = v18;
    if (!v18)
      goto LABEL_23;
    v19 = *(_QWORD *)(a3 + 192);
    v20 = (_QWORD *)v16;
    do
    {
      v21 = v17[4];
      v22 = v21 >= v19;
      if (v21 >= v19)
        v23 = v17;
      else
        v23 = v17 + 1;
      if (v22)
        v20 = v17;
      v17 = (_QWORD *)*v23;
    }
    while (*v23);
    if (v20 != (_QWORD *)v16)
    {
      v24 = v20[4];
      v25 = v20 + 5;
      if (v24 <= v19)
        v26 = v25;
      else
        v26 = 0;
    }
    else
    {
LABEL_23:
      v26 = 0;
    }
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v60 = vneg_f32(*(float32x2_t *)(a3 + 436));
    *(float *)&v61 = -*(float *)(a3 + 444);
    v48 = 0;
    v49 = 0.0;
    do
    {
      if (v30 <= 2)
      {
        v29 = v30 + 1;
        v48.i32[v30++] = v60.i32[v28];
      }
      ++v28;
    }
    while (v28 != 3);
    if (v29 <= 2)
      bzero((char *)&v48 + 4 * v29, 12 - 4 * v29);
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = *(float32x2_t *)(a3 + 264);
    v60 = vadd_f32(v48, v34);
    *(float *)&v61 = v49 + *(float *)(a3 + 272);
    v48 = 0;
    v49 = 0.0;
    do
    {
      if (v33 <= 2)
      {
        v32 = v33 + 1;
        v48.i32[v33++] = v60.i32[v31];
      }
      ++v31;
    }
    while (v31 != 3);
    if (v32 <= 2)
      bzero((char *)&v48 + 4 * v32, 12 - 4 * v32);
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v34.i32[0] = *(_DWORD *)(a3 + 384);
    v60 = vadd_f32(v48, (float32x2_t)vdup_lane_s32((int32x2_t)v34, 0));
    *(float *)&v61 = v49 + v34.f32[0];
    v48 = 0;
    v49 = 0.0;
    do
    {
      if (v37 <= 2)
      {
        v36 = v37 + 1;
        v48.i32[v37++] = v60.i32[v35];
      }
      ++v35;
    }
    while (v35 != 3);
    if (v36 <= 2)
      bzero((char *)&v48 + 4 * v36, 12 - 4 * v36);
    v38 = v48;
    v39 = v49;
    if (v26)
    {
      v40 = v26[5];
      if (v40)
      {
        v41 = 0;
        v42 = 0;
        v43 = 0;
        v60 = *(float32x2_t *)(a3 + 192);
        v61 = xmmword_2166F7AE0;
        v58 = 0;
        v59 = 0;
        v62 = &v58;
        v63 = 0;
        *(float *)&v64 = -v48.f32[0];
        *((float *)&v64 + 1) = -v48.f32[1];
        v65 = -v49;
        v48 = 0;
        v49 = 0.0;
        do
        {
          if (v43 <= 2)
          {
            v42 = v43 + 1;
            v48.i32[v43++] = *(_DWORD *)((char *)&v64 + v41);
          }
          v41 += 4;
        }
        while (v41 != 12);
        if (v42 <= 2)
          bzero((char *)&v48 + 4 * v42, 12 - 4 * v42);
        v57 = 3;
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        v54 = 0u;
        v55 = 0u;
        v56 = 0u;
        v63 = &v48;
        v64 = &v60;
        (*(void (**)(uint64_t, float32x2_t **))(*(_QWORD *)v40 + 48))(v40, &v64);
      }
    }
    v44 = (Phase::Logger *)Phase::SpatialModeler::DirectPathTransmissionImpl::BuildOutputPointSource(a4, (uint64_t (***)(_QWORD))a1, a2, a3, v38.f32[0], v38.f32[1], v39);
    v45 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v44);
    if (*((_BYTE *)v45 + 216))
    {
      v46 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v45)
                                                                                          + 208)));
      v47 = v46;
      if ((unint64_t)v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v46))
      {
        v48.i16[0] = 0;
        _os_signpost_emit_with_name_impl(&dword_2164CC000, v47, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v9, "Phase_DirectPath_Spatial_Query_Handle_Results", (const char *)&unk_21676613F, (uint8_t *)&v48, 2u);
      }

    }
  }
  else
  {
    v27 = (**(uint64_t (***)(Phase::Logger *))a1)(a1);
    *(_QWORD *)a4 = 129;
    *(_QWORD *)(a4 + 8) = v27;
    *(_DWORD *)(a4 + 24) = 2;
  }
}

void sub_216561FFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24D57A830[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN5Phase14SpatialModeler13ReturnSuccessENSA_11ReturnErrorENSA_18WaitOnSceneQueriesENSA_18ClaimOrWaitOnTokenENSA_12ReleaseTokenEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS8_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24D57A830[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24D57A860[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN5Phase14SpatialModeler13ReturnSuccessENSA_11ReturnErrorENSA_18WaitOnSceneQueriesENSA_18ClaimOrWaitOnTokenENSA_12ReleaseTokenEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN5Phase14SpatialModeler13ReturnSuccessENSA_11ReturnErrorENSA_18WaitOnSceneQueriesENSA_18ClaimOrWaitOnTokenENSA_12ReleaseTokenEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN5Phase14SpatialModeler13ReturnSuccessENSA_11ReturnErrorENSA_18WaitOnSceneQueriesENSA_18ClaimOrWaitOnTokenENSA_12ReleaseTokenEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN5Phase14SpatialModeler13ReturnSuccessENSA_11ReturnErrorENSA_18WaitOnSceneQueriesENSA_18ClaimOrWaitOnTokenENSA_12ReleaseTokenEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 24);
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24D57A830[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24D57A890[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN5Phase14SpatialModeler13ReturnSuccessENSA_11ReturnErrorENSA_18WaitOnSceneQueriesENSA_18ClaimOrWaitOnTokenENSA_12ReleaseTokenEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24))
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__emplace[abi:ne180100]<0ul,std::monostate>(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN5Phase14SpatialModeler13ReturnSuccessENSA_11ReturnErrorENSA_18WaitOnSceneQueriesENSA_18ClaimOrWaitOnTokenENSA_12ReleaseTokenEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24) != 1)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__emplace[abi:ne180100]<1ul,Phase::SpatialModeler::ReturnSuccess>(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN5Phase14SpatialModeler13ReturnSuccessENSA_11ReturnErrorENSA_18WaitOnSceneQueriesENSA_18ClaimOrWaitOnTokenENSA_12ReleaseTokenEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24) != 2)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__emplace[abi:ne180100]<2ul,Phase::SpatialModeler::ReturnError>(result, a3);
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN5Phase14SpatialModeler13ReturnSuccessENSA_11ReturnErrorENSA_18WaitOnSceneQueriesENSA_18ClaimOrWaitOnTokenENSA_12ReleaseTokenEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__assign_alt[abi:ne180100]<3ul,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::WaitOnSceneQueries>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN5Phase14SpatialModeler13ReturnSuccessENSA_11ReturnErrorENSA_18WaitOnSceneQueriesENSA_18ClaimOrWaitOnTokenENSA_12ReleaseTokenEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24) != 4)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__emplace[abi:ne180100]<4ul,Phase::SpatialModeler::ClaimOrWaitOnToken>(result, a3);
  *a2 = *a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN5Phase14SpatialModeler13ReturnSuccessENSA_11ReturnErrorENSA_18WaitOnSceneQueriesENSA_18ClaimOrWaitOnTokenENSA_12ReleaseTokenEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24) != 5)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__emplace[abi:ne180100]<5ul,Phase::SpatialModeler::ReleaseToken>(result, a3);
  *a2 = *a3;
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__emplace[abi:ne180100]<0ul,std::monostate>(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24D57A830[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__emplace[abi:ne180100]<1ul,Phase::SpatialModeler::ReturnSuccess>(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24D57A830[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__emplace[abi:ne180100]<2ul,Phase::SpatialModeler::ReturnError>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24D57A830[v4])(&v6, a1);
  *(_DWORD *)(a1 + 24) = -1;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 2;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__assign_alt[abi:ne180100]<3ul,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::WaitOnSceneQueries>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  if (*(_DWORD *)(a1 + 24) == 3)
    std::vector<Phase::Geometry::SceneQueryBatch *>::__move_assign(a2, a3);
  else
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__emplace[abi:ne180100]<3ul,Phase::SpatialModeler::WaitOnSceneQueries>(a1, (uint64_t)a3);
}

__n128 std::vector<Phase::Geometry::SceneQueryBatch *>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__emplace[abi:ne180100]<3ul,Phase::SpatialModeler::WaitOnSceneQueries>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24D57A830[v4])(&v6, a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 3;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__emplace[abi:ne180100]<4ul,Phase::SpatialModeler::ClaimOrWaitOnToken>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24D57A830[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 4;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__emplace[abi:ne180100]<5ul,Phase::SpatialModeler::ReleaseToken>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24D57A830[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 5;
  return a1;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceFrame [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v7 = v2;
    v3 = a1[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7);
  }
  v4 = (uint64_t *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

uint64_t *std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](a1);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v3 = v1;
    v2 = result[4];
    if (!v2)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v3);
  }
  return result;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v7 = v2;
    v3 = a1[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7);
  }
  v4 = (uint64_t *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

_QWORD *std::vector<Phase::Geometry::SceneQueryBatch *>::__init_with_size[abi:ne180100]<Phase::Geometry::SceneQueryBatch **,Phase::Geometry::SceneQueryBatch **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<Phase::FrequencyBand<float>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2165627C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>>::reset[abi:ne180100](a1);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v3 = v1;
    v2 = result[4];
    if (!v2)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v3);
  }
  return result;
}

float Phase::Envelope<float>::operator()(float **a1, float a2)
{
  float *v3;
  float *v4;
  float v5;
  float v6;
  BOOL v7;
  float v8;

  v3 = *a1;
  v4 = a1[1];
  v5 = *v3;
  v6 = *(v4 - 10);
  v7 = v6 >= a2 && v5 <= a2;
  v8 = fminf(fmaxf(a2, v5), v6);
  if (!v7)
    a2 = v8;
  if (v4 != v3)
  {
    while (a2 < *v3 || a2 >= v3[2])
    {
      v3 += 12;
      if (v3 == v4)
        goto LABEL_14;
    }
  }
  if (v3 == v4)
  {
LABEL_14:
    if (a2 != *(v4 - 10))
      std::terminate();
    v3 = v4 - 12;
  }
  return Phase::Envelope<float>::SegmentInternal::operator()((uint64_t)v3, a2);
}

float Phase::Envelope<float>::SegmentInternal::operator()(uint64_t a1, float a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  float v9;

  v3 = *(float *)a1;
  v4 = *(float *)(a1 + 8);
  v5 = *(float *)a1 - v4;
  if (v5 < 0.0)
    v5 = -v5;
  if (v5 <= 0.001)
  {
    v6 = 0.0;
    if (v3 <= a2)
    {
      if (v3 >= a2)
        v6 = 0.5;
      else
        v6 = 1.0;
    }
  }
  else
  {
    v6 = fminf(fmaxf((float)(a2 - v3) / (float)(v4 - v3), 0.0), 1.0);
  }
  v9 = v6;
  v7 = *(_QWORD *)(a1 + 40);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return *(float *)(a1 + 4)
       + (float)(fminf(fmaxf((*(float (**)(uint64_t, float *))(*(_QWORD *)v7 + 48))(v7, &v9), 0.0), 1.0)
               * (float)(*(float *)(a1 + 12) - *(float *)(a1 + 4)));
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState*)#1} const&>(Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState*)#1} const&>(Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState*)#1} const&>(Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState*)#1} const&>(Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D57A8D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState*)#1} const&>(Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState*)#1} const&>(Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D57A8D0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState*)#1} const&>(Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState*)#1} const&>(Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::DirectPathTransmissionImpl::SpatialQueryState*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *(_QWORD **)a2;
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)(*(_QWORD *)a2 + 328));
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v2 + 35);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 21));
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 19));
  std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v2 + 13);
  v3 = (_QWORD *)v2[6];
  if (v3 == v2 + 3)
  {
    v4 = 4;
    v3 = v2 + 3;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 1));
  operator delete(v2);
}

_QWORD *Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float>(unsigned long,unsigned long)::{lambda(float*)#1} const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  _QWORD *result;
  uint64_t v6;
  NSObject *v7;
  std::logic_error *exception;
  _BYTE v9[12];
  __int16 v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 112));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v9 = 136315394;
      *(_QWORD *)&v9[4] = "ManagedPtr.hpp";
      v10 = 1024;
      v11 = 229;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v9, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  v4 = operator new(4 * **(_QWORD **)a2, **(std::align_val_t **)(a2 + 8));
  *(_QWORD *)v9 = &off_24D57A9E0;
  v9[8] = 0;
  v12 = v9;
  *a3 = v4;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a3 + 1), (uint64_t)v9);
  result = v12;
  if (v12 == v9)
  {
    v6 = 4;
    result = v9;
  }
  else
  {
    if (!v12)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_216562C68(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayIfRKZNS3_10AllocArrayIfEENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS5_IfEESD_mmEUlPS7_E_EESD_mOT0_OT1_EUlSA_E_NS_9allocatorISP_EESB_ED0Ev()
{
  JUMPOUT(0x2199F9D70);
}

_BYTE *_ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayIfRKZNS3_10AllocArrayIfEENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS5_IfEESD_mmEUlPS7_E_EESD_mOT0_OT1_EUlSA_E_NS_9allocatorISP_EESB_E7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24D57A9E0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayIfRKZNS3_10AllocArrayIfEENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS5_IfEESD_mmEUlPS7_E_EESD_mOT0_OT1_EUlSA_E_NS_9allocatorISP_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24D57A9E0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayIfRKZNS3_10AllocArrayIfEENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS5_IfEESD_mmEUlPS7_E_EESD_mOT0_OT1_EUlSA_E_NS_9allocatorISP_EESB_EclEOSA_(uint64_t a1, void **a2)
{
  operator delete(*a2);
}

void std::__shared_ptr_emplace<Phase::SpatialModeler::DirectPathTransmission::SourceData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D57A918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::SpatialModeler::DirectPathTransmission::SourceData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D57A918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

uint64_t *std::__shared_ptr_emplace<Phase::SpatialModeler::DirectPathTransmission::SourceData>::__on_zero_shared(uint64_t a1)
{
  return std::unique_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceFrame [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)(a1 + 24));
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_14SpatialModeler22DirectPathTransmission11SourceFrameERKZNS3_10AllocArrayIS7_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS8_IS7_EESG_mmEUlPSA_E_EESG_mOT0_OT1_EUlSD_E_NS_9allocatorISS_EESE_ED0Ev()
{
  JUMPOUT(0x2199F9D70);
}

__n128 _ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_14SpatialModeler22DirectPathTransmission11SourceFrameERKZNS3_10AllocArrayIS7_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS8_IS7_EESG_mmEUlPSA_E_EESG_mOT0_OT1_EUlSD_E_NS_9allocatorISS_EESE_E7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D57A950;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_14SpatialModeler22DirectPathTransmission11SourceFrameERKZNS3_10AllocArrayIS7_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS8_IS7_EESG_mmEUlPSA_E_EESG_mOT0_OT1_EUlSD_E_NS_9allocatorISS_EESE_E7__cloneEPNS0_6__baseISE_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D57A950;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_14SpatialModeler22DirectPathTransmission11SourceFrameERKZNS3_10AllocArrayIS7_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS8_IS7_EESG_mmEUlPSA_E_EESG_mOT0_OT1_EUlSD_E_NS_9allocatorISS_EESE_EclEOSD_(uint64_t a1, void **a2)
{
  void *v2;
  unint64_t v4;
  uint64_t *v5;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
  {
    v4 = 0;
    v5 = (uint64_t *)*a2;
    do
    {
      std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v5 + 12);
      std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v5 + 6);
      std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v5);
      ++v4;
      v5 += 19;
    }
    while (v4 < *(_QWORD *)(a1 + 8));
  }
  operator delete(v2);
}

_QWORD *std::vector<Phase::Vector<float,3ul>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Phase::Vector<float,3ul>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_216562E9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Phase::Vector<float,3ul>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1555555555555556)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Vector<float,3ul>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void _ZZN5Phase8Geometry32CalculateDirectivitySubbandGainsILm3EEENS_14PackedSubbandsIfXT_EEERNS0_11SystemStateERKNS0_6EntityES8_NS_8Handle64ES9_ENKUlT_bT0_T1_T2_E_clIS4_S9_NS_6AffineIfEESH_EEDaSA_bSB_SC_SD_(uint64_t a1, unsigned int a2, int a3, uint64_t a4, float32x2_t *a5, float32x2_t *a6)
{
  int *v6;
  int v7;
  uint64_t v8;
  float32x2_t *v9;
  float32x2_t *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float32x2_t *v17;
  float32x2_t *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float32x2_t *v25;
  float32x2_t *v26;
  float v27;
  float v28;
  float v29;
  float v30;

  if (a4 >= a2)
    return;
  if (*(_DWORD *)(a1 + 24 * a4 + 20) != HIDWORD(a4))
    return;
  v6 = *(int **)(a1 + 24 * a4);
  if (!v6)
    return;
  v7 = *v6;
  if (*v6 == 3)
  {
    v16 = **((_QWORD **)v6 + 5);
    if (!v16)
      goto LABEL_36;
    if (a3)
      v17 = a6;
    else
      v17 = a5;
    if (a3)
      v18 = a5;
    else
      v18 = a6;
    Phase::TransformPositionByInverse<float>(v18, v17 + 2, &v28);
    v19 = v28;
    v20 = v30;
    v21 = acosf(v29 / sqrtf((float)((float)(v19 * v19) + (float)(v29 * v29)) + (float)(v20 * v20)));
    v22 = atan2f(v19, v20) + 3.1416;
    v23 = (float)(v22 - (float)(floorf(v22 / 6.2832) * 6.2832)) + 0.0;
    if (v23 >= 6.2832)
      v23 = nextafterf(6.2832, 0.0);
    Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<3ul>(v16, v21, v23);
  }
  else
  {
    if (v7 != 2)
    {
      if (v7 != 1)
        return;
      v8 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 40);
      if (v8)
      {
        if (a3)
          v9 = a6;
        else
          v9 = a5;
        if (a3)
          v10 = a5;
        else
          v10 = a6;
        Phase::TransformPositionByInverse<float>(v10, v9 + 2, &v28);
        v11 = v28;
        v12 = v30;
        v13 = acosf(v29 / sqrtf((float)((float)(v11 * v11) + (float)(v29 * v29)) + (float)(v12 * v12)));
        v14 = atan2f(v11, v12) + 3.1416;
        v15 = (float)(v14 - (float)(floorf(v14 / 6.2832) * 6.2832)) + 0.0;
        if (v15 >= 6.2832)
          v15 = nextafterf(6.2832, 0.0);
        Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<3ul>(v8, v13, v15);
        return;
      }
LABEL_36:
      std::terminate();
    }
    v24 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 40);
    if (!v24)
      goto LABEL_36;
    if (a3)
      v25 = a6;
    else
      v25 = a5;
    if (a3)
      v26 = a5;
    else
      v26 = a6;
    Phase::TransformPositionByInverse<float>(v26, v25 + 2, &v28);
    v27 = acosf((float)-v30 / sqrtf((float)((float)(v28 * v28) + (float)(v29 * v29)) + (float)(v30 * v30)));
    Phase::Geometry::ConeDirectivity::CalculateSubbandGains<3ul>(v24, v27 + v27);
  }
}

void Phase::Geometry::SystemState::~SystemState(Phase::Geometry::SystemState *this)
{
  void **v2;

  v2 = (void **)((char *)this + 984);
  std::vector<std::shared_ptr<Phase::Controller::Renderer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

float Phase::TransformPositionByInverse<float>@<S0>(float32x2_t *a1@<X0>, float32x2_t *a2@<X1>, float *a3@<X8>)
{
  __int32 v3;
  unsigned int v4;
  int32x2_t v5;
  float v6;
  float32x2_t v8;
  float v9;
  _QWORD v10[2];

  v3 = a1[1].i32[1];
  *(float *)&v4 = -a1[1].f32[0];
  v5 = (int32x2_t)vneg_f32(*a1);
  v10[0] = v5;
  v10[1] = __PAIR64__(v3, v4);
  v5.i32[0] = a1[3].i32[1];
  v6 = (float)(a2[1].f32[0] - a1[3].f32[0]) / *(float *)v5.i32;
  v8 = vdiv_f32(vsub_f32(*a2, a1[2]), (float32x2_t)vdup_lane_s32(v5, 0));
  v9 = v6;
  return Phase::operator*<float>((float *)v10, (float *)&v8, a3);
}

void Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<3ul>(uint64_t a1, float a2, float a3)
{
  unsigned int v9;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  int v17;

  __asm { FMOV            V1.2S, #1.0 }
  v16 = _D1;
  v17 = 1065353216;
  if (*(_DWORD *)(a1 + 140) >= 3u)
    v9 = 3;
  else
    v9 = *(_DWORD *)(a1 + 140);
  if (v9)
  {
    v11 = sinf(a2);
    v12 = 0;
    v13 = v11 * cosf(a3);
    v14 = 4 * v9;
    do
    {
      v15 = (float)(1.0 - *(float *)(a1 + v12 + 144)) + (float)(v13 * *(float *)(a1 + v12 + 144));
      if (v15 < 0.0)
        v15 = -v15;
      *(float *)((char *)&v16 + v12) = powf(v15, *(float *)(a1 + v12 + 272));
      v12 += 4;
    }
    while (v14 != v12);
  }
}

float Phase::Geometry::ConeDirectivity::CalculateSubbandGains<3ul>(uint64_t a1, float a2)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v15;
  int v16;

  __asm { FMOV            V1.2S, #1.0 }
  v16 = 1065353216;
  if (*(_DWORD *)(a1 + 140) >= 3u)
    v7 = 3;
  else
    v7 = *(_DWORD *)(a1 + 140);
  if (!v7)
    return 1.0;
  v8 = 0;
  v9 = 4 * v7;
  do
  {
    v10 = *(float *)(a1 + v8 + 144);
    v11 = *(float *)(a1 + v8 + 272);
    v12 = v10 - v11;
    if ((float)(v10 - v11) < 0.0)
      v12 = -(float)(v10 - v11);
    if (v12 <= 0.001745)
    {
      v13 = 0.0;
      if (v10 <= a2)
      {
        if (v10 >= a2)
          v13 = 0.5;
        else
          v13 = 1.0;
      }
    }
    else
    {
      v13 = fminf(fmaxf((float)(a2 - v10) / (float)(v11 - v10), 0.0), 1.0);
    }
    *(float *)((char *)&v15 + v8) = (float)(1.0 - v13) + (float)(*(float *)(a1 + v8 + 400) * v13);
    v8 += 4;
  }
  while (v9 != v8);
  return *(float *)&v15;
}

float Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<3ul>(uint64_t a1, float a2, float a3)
{
  float v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v12;

  v3 = a2 + -1.5708;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = cosf(a3);
  v6 = cosf(v3);
  v7 = acosf(v5 * v6);
  v8 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 32)
                 + 8
                 * (((int)llroundf((float)(v7 * 57.296) / *(float *)(*(_QWORD *)v4 + 28))
                   % *(_DWORD *)(*(_QWORD *)v4 + 24)
                   + *(_DWORD *)(*(_QWORD *)v4 + 24))
                  % *(_DWORD *)(*(_QWORD *)v4 + 24)));
  do
  {
    v10 = *(double *)(v9 + 8 * v8);
    *(&v12 + v8++) = v10;
  }
  while (v8 != 3);
  return v12;
}

Phase::Geometry::SystemState *Phase::Geometry::SystemState::SystemState(Phase::Geometry::SystemState *this, Phase::Geometry::SystemState *a2)
{
  __int128 v4;
  __int128 v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100](this, (uint64_t *)a2);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 4) = 0;
  std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100]((_QWORD *)this + 3, (uint64_t *)a2 + 3);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 7) = 0;
  std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100]((_QWORD *)this + 6, (uint64_t *)a2 + 6);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 10) = 0;
  std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100]((_QWORD *)this + 9, (uint64_t *)a2 + 9);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 13) = 0;
  std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100]((_QWORD *)this + 12, (uint64_t *)a2 + 12);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_QWORD *)this + 16) = 0;
  std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100]((_QWORD *)this + 15, (uint64_t *)a2 + 15);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  memcpy((char *)this + 144, (char *)a2 + 144, 0x310uLL);
  v5 = *((_OWORD *)a2 + 58);
  v4 = *((_OWORD *)a2 + 59);
  *((_QWORD *)this + 120) = *((_QWORD *)a2 + 120);
  *((_OWORD *)this + 58) = v5;
  *((_OWORD *)this + 59) = v4;
  *(_OWORD *)((char *)this + 968) = *(_OWORD *)((char *)a2 + 968);
  *((_QWORD *)this + 123) = 0;
  *((_QWORD *)this + 125) = 0;
  *((_QWORD *)this + 124) = 0;
  v6 = (char *)*((_QWORD *)a2 + 123);
  v7 = (char *)*((_QWORD *)a2 + 124);
  if (v7 != v6)
  {
    std::vector<std::shared_ptr<Phase::Geometry::MpsCpuScene>>::__vallocate[abi:ne180100]((_QWORD *)this + 123, (v7 - v6) >> 4);
    v8 = (_QWORD *)*((_QWORD *)this + 124);
    do
    {
      *v8 = *(_QWORD *)v6;
      v9 = *((_QWORD *)v6 + 1);
      v8[1] = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v6 += 16;
      v8 += 2;
    }
    while (v6 != v7);
    *((_QWORD *)this + 124) = v8;
  }
  v12 = *((_OWORD *)a2 + 63);
  *((_QWORD *)this + 128) = *((_QWORD *)a2 + 128);
  *((_OWORD *)this + 63) = v12;
  return this;
}

void sub_216563660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  std::vector<std::shared_ptr<Phase::Controller::Renderer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v14);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v10);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<Phase::Geometry::MpsCpuScene>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

_QWORD *Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&>(Phase::Logger *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *result;
  uint64_t v20;
  NSObject *v21;
  std::logic_error *exception;
  _BYTE v23[18];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v21 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 112));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v23 = 136315394;
      *(_QWORD *)&v23[4] = "ManagedPtr.hpp";
      *(_WORD *)&v23[12] = 1024;
      *(_DWORD *)&v23[14] = 229;
      _os_log_impl(&dword_2164CC000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v23, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  v7 = (char *)Phase::SystemAllocator::Alloc(*(Phase::SystemAllocator **)a3, (Phase::Logger *)(68 * **(_QWORD **)(a3 + 8)), **(std::align_val_t **)(a3 + 16));
  v8 = &v7[68 * a2];
  v9 = v7;
  do
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *((_QWORD *)v9 + 3) = 0x7F7FFFFF00000000;
    *((_QWORD *)v9 + 4) = 0;
    v13 = v9 + 32;
    *(_QWORD *)v23 = 0;
    *(_DWORD *)&v23[8] = 0;
    *((_DWORD *)v9 + 10) = 0;
    do
    {
      if (v12 <= 2)
      {
        v11 = v12 + 1;
        *(_DWORD *)&v13[4 * v12++] = *(_DWORD *)&v23[v10];
      }
      v10 += 4;
    }
    while (v10 != 12);
    if (v11 <= 2)
      bzero(&v13[4 * v11], 12 - 4 * v11);
    v14 = 0;
    v15 = 0;
    v16 = 0;
    *((_DWORD *)v9 + 11) = 0;
    *((_QWORD *)v9 + 6) = 0;
    v17 = v9 + 48;
    *(_QWORD *)v23 = 0;
    *(_DWORD *)&v23[8] = 0;
    *((_DWORD *)v9 + 14) = 0;
    do
    {
      if (v16 <= 2)
      {
        v15 = v16 + 1;
        *(_DWORD *)&v17[4 * v16++] = *(_DWORD *)&v23[v14];
      }
      v14 += 4;
    }
    while (v14 != 12);
    if (v15 <= 2)
      bzero(&v17[4 * v15], 12 - 4 * v15);
    *((_DWORD *)v9 + 15) = 0;
    *((_DWORD *)v9 + 16) = 0;
    v9 += 68;
  }
  while (v9 != v8);
  v18 = *a4;
  *(_QWORD *)v23 = &off_24D57A998;
  *(_QWORD *)&v23[8] = v18;
  v24 = v23;
  *(_QWORD *)a1 = v7;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)a1 + 8, (uint64_t)v23);
  result = v24;
  if (v24 == v23)
  {
    v20 = 4;
    result = v23;
  }
  else
  {
    if (!v24)
      return result;
    v20 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v20))();
}

void sub_216563954(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D57A998;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D57A998;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::TraceWithEnergyQuery,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::TraceWithEnergyQuery*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  operator delete(*a2);
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::TraceWithEnergyQuery [],std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    v8 = v5;
    v6 = a1[4];
    if (!v6)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v8);
  }
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

Phase::SpatialModeler::DirectPathTransmission::SourceFrame *Phase::SpatialModeler::DirectPathTransmission::SourceFrame::SourceFrame(Phase::SpatialModeler::DirectPathTransmission::SourceFrame *this, uint64_t a2, double a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[32];
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 6) = 0;
  v6 = (uint64_t *)((char *)this + 48);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 12) = 0;
  v7 = (uint64_t *)((char *)this + 96);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = 0;
  v14 = 4;
  v15 = a2;
  v12 = &v15;
  v13 = &v14;
  Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>>(unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(a2, (uint64_t)&v12, &v19);
  v8 = v19;
  v19 = 0;
  v16 = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v20);
  v18 = a2;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v19);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)this, &v16);
  *((_QWORD *)this + 5) = v18;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v16);
  v12 = (uint64_t *)a2;
  v15 = 4;
  Phase::details::AllocArray<Phase::PackedSubbands<float,3ul>,std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::PackedSubbands<float,3ul>>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::PackedSubbands<float,3ul>>(unsigned long,unsigned long)::{lambda(Phase::PackedSubbands<float,3ul>*)#1} const&>((Phase::Logger *)&v19, a2, &v12, (std::align_val_t *)&v15);
  v9 = v19;
  v19 = 0;
  v16 = v9;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v20);
  v18 = a2;
  std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v19);
  std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](v6, &v16);
  *((_QWORD *)this + 11) = v18;
  std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v16);
  v14 = 4;
  v15 = a2;
  v12 = &v15;
  v13 = &v14;
  Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float>(unsigned long,unsigned long)::{lambda(float*)#1} const&>(a2, (uint64_t)&v12, &v19);
  v10 = v19;
  v19 = 0;
  v16 = v10;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v20);
  v18 = a2;
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v19);
  std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100](v7, &v16);
  *((_QWORD *)this + 17) = v18;
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v16);
  *((double *)this + 18) = a3;
  return this;
}

void sub_216563C44(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;

  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v2);
  std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v3);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *Phase::SpatialModeler::DirectPathTransmission::SourceFrame::operator=(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  _DWORD *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD v24[4];
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v4 = a2[5];
  if (v4)
  {
    v21 = 4;
    v22 = v4;
    v23 = &v22;
    v24[0] = &v21;
    Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>>(unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(v4, (uint64_t)&v23, &v26);
    v5 = v26;
    v26 = 0;
    v23 = (uint64_t *)v5;
    std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)v27);
    v25 = v4;
    std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v26);
    std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1, (uint64_t *)&v23);
    a1[5] = v25;
    std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v23);
    v6 = (_DWORD *)(*a1 + 8);
    v7 = (int *)(*a2 + 8);
    do
    {
      *(v6 - 2) = *(v7 - 2);
      *(v6 - 1) = *(v7 - 1);
      v8 = *v7;
      v7 += 3;
      *v6 = v8;
      v6 += 3;
      --v4;
    }
    while (v4);
    v9 = a2[5];
    if (v9)
    {
      v22 = 4;
      v23 = (uint64_t *)v9;
      Phase::details::AllocArray<Phase::PackedSubbands<float,3ul>,std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::PackedSubbands<float,3ul>>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::PackedSubbands<float,3ul>>(unsigned long,unsigned long)::{lambda(Phase::PackedSubbands<float,3ul>*)#1} const&>((Phase::Logger *)&v26, v9, &v23, (std::align_val_t *)&v22);
      v10 = v26;
      v26 = 0;
      v23 = (uint64_t *)v10;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)v27);
      v25 = v9;
      std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v26);
      std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 6, (uint64_t *)&v23);
      a1[11] = v25;
      std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v23);
      v11 = 0;
      do
      {
        v12 = (uint64_t *)(a2[6] + v11);
        v13 = a1[6] + v11;
        v14 = *v12;
        *(_DWORD *)(v13 + 8) = *((_DWORD *)v12 + 2);
        *(_QWORD *)v13 = v14;
        v11 += 12;
        --v9;
      }
      while (v9);
      v15 = a2[5];
      if (v15)
      {
        v21 = 4;
        v22 = v15;
        v23 = &v22;
        v24[0] = &v21;
        Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float>(unsigned long,unsigned long)::{lambda(float*)#1} const&>(v15, (uint64_t)&v23, &v26);
        v16 = v26;
        v26 = 0;
        v23 = (uint64_t *)v16;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)v27);
        v25 = v15;
        std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v26);
        std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 12, (uint64_t *)&v23);
        a1[17] = v25;
        std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v23);
        v17 = (int *)a2[12];
        v18 = (_DWORD *)a1[12];
        do
        {
          v19 = *v17++;
          *v18++ = v19;
          --v15;
        }
        while (v15);
      }
    }
  }
  a1[18] = a2[18];
  return a1;
}

uint64_t *Phase::SpatialModeler::DirectPathTransmission::SourceFrame::operator=(uint64_t *a1, uint64_t *a2)
{
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1, a2);
  a1[5] = a2[5];
  std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 6, a2 + 6);
  a1[11] = a2[11];
  std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 12, a2 + 12);
  a1[17] = a2[17];
  a1[18] = a2[18];
  return a1;
}

void Phase::SpatialModeler::DirectPathTransmission::GetSupportedQueryDescs(std::string **a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BYTE v18[32];
  char v19[24];
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  char v24[24];
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BYTE v28[32];
  __int128 v29;

  *(_QWORD *)&v29 = *MEMORY[0x24BDAC8D0];
  v14 = 4;
  strcpy((char *)&v13, "CULL");
  v15 = 0;
  v16 = 0x100000001;
  v17 = 1;
  memset(v18, 0, sizeof(v18));
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)v18, 5uLL);
  v3 = 0;
  v4 = *(_QWORD *)v18;
  do
  {
    *(_DWORD *)(v4 + v3) = *(_DWORD *)((char *)&constinit + v3);
    v3 += 4;
  }
  while (v3 != 20);
  v19[23] = 7;
  strcpy(v19, "CLUSTER");
  v20 = 1;
  v21 = 0x200000003;
  v22 = 1;
  memset(v23, 0, sizeof(v23));
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)v23, 5uLL);
  v5 = 0;
  v6 = *(_QWORD *)v23;
  do
  {
    *(_DWORD *)(v6 + v5 * 4) = Phase::SpatialModeler::DirectPathTransmissionPrivate::sClusterQueryPropertyUIDs[v5];
    ++v5;
  }
  while (v5 != 5);
  v24[23] = 7;
  strcpy(v24, "SPATIAL");
  v25 = 2;
  v26 = 0x300000002;
  v27 = 2;
  memset(v28, 0, sizeof(v28));
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)v28, 5uLL);
  v7 = 0;
  v8 = *(_QWORD *)v28;
  do
  {
    *(_DWORD *)(v8 + v7 * 4) = Phase::SpatialModeler::DirectPathTransmissionPrivate::sSpatialQueryPropertyUIDs[v7];
    ++v7;
  }
  while (v7 != 5);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v9 = (std::string *)operator new(0xF0uLL);
  *a1 = v9;
  a1[1] = v9;
  a1[2] = v9 + 10;
  v10 = 0;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::QueryDesc>,Phase::SpatialModeler::QueryDesc const*,Phase::SpatialModeler::QueryDesc const*,Phase::SpatialModeler::QueryDesc*>((uint64_t)(a1 + 2), &v13, &v29, v9);
  do
  {
    v11 = (char *)&v13 + v10;
    v12 = *(void **)&v28[v10];
    if (v12)
    {
      *((_QWORD *)v11 + 27) = v12;
      operator delete(v12);
    }
    if (v11[183] < 0)
      operator delete(*((void **)v11 + 20));
    v10 -= 80;
  }
  while (v10 != -240);
}

void sub_216564158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t i;

  *(_QWORD *)(v12 + 8) = v13;
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100](&a10);
  for (i = 160; i != -80; i -= 80)
    Phase::SpatialModeler::QueryDesc::~QueryDesc((Phase::SpatialModeler::QueryDesc *)(&a12 + i));
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::DirectPathTransmission::GetEntityShapeTemplates@<X0>(uint64_t *a1@<X8>)
{
  int *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  int v8;
  _OWORD v9[2];
  int v10;
  int v11;
  int v12;
  _OWORD v13[2];
  int v14;
  int v15;
  int v16;
  _OWORD v17[2];
  int v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  memset(v13, 0, sizeof(v13));
  v14 = 1065353216;
  v15 = 3;
  v12 = 1;
  v16 = 1;
  v18 = 1;
  Phase::UnorderedStringMap<Phase::OptionsValue>::Set((uint64_t)v13, (uint64_t)&Phase::Geometry::MeshOptions::SortPrimitives, (uint64_t)&v16);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v16);
  memset(v17, 0, sizeof(v17));
  v18 = 1065353216;
  v19 = 4;
  v16 = 2;
  memset(v9, 0, sizeof(v9));
  v10 = 1065353216;
  v11 = 5;
  v8 = 1;
  v3 = (int *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    v4 = (_DWORD *)std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__push_back_slow_path<Phase::SpatialModeler::EntityShapeTemplate const&>(a1, &v12);
  }
  else
  {
    *v3 = v12;
    std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map((uint64_t)(v3 + 2), (uint64_t)v13);
    v3[12] = v15;
    v4 = v3 + 14;
    a1[1] = (uint64_t)(v3 + 14);
  }
  a1[1] = (uint64_t)v4;
  if ((unint64_t)v4 >= a1[2])
  {
    v5 = (_DWORD *)std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__push_back_slow_path<Phase::SpatialModeler::EntityShapeTemplate const&>(a1, &v16);
  }
  else
  {
    *v4 = v16;
    std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map((uint64_t)(v4 + 2), (uint64_t)v17);
    v4[12] = v19;
    v5 = v4 + 14;
    a1[1] = (uint64_t)v5;
  }
  a1[1] = (uint64_t)v5;
  if ((unint64_t)v5 >= a1[2])
  {
    v6 = std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__push_back_slow_path<Phase::SpatialModeler::EntityShapeTemplate const&>(a1, &v8);
  }
  else
  {
    *v5 = v8;
    std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map((uint64_t)(v5 + 2), (uint64_t)v9);
    v5[12] = v11;
    v6 = (uint64_t)(v5 + 14);
    a1[1] = (uint64_t)(v5 + 14);
  }
  a1[1] = v6;
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)v9);
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)v17);
  return std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)v13);
}

void sub_2165643B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = v20;
  *(_QWORD *)(v16 + 8) = v21;
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(v19);
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(v18);
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(v17);
  a16 = (void **)v16;
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::DirectPathTransmission::Init(uint64_t a1, Phase::Geometry::System *a2)
{
  uint64_t result;

  result = Phase::SpatialModeler::TraceWithEnergyQuery::RegisterQuery(*(Phase::SpatialModeler::TraceWithEnergyQuery **)(a1 + 16), a2);
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

uint64_t Phase::SpatialModeler::DirectPathTransmission::RunQuery@<X0>(uint64_t (***a1)(_QWORD)@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  _DWORD *v5;
  char *v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;

  v4 = a2[10];
  if (v4 > 2)
  {
    if (a1)
    {
      result = (**a1)(a1);
      *(_QWORD *)a3 = 2;
      *(_QWORD *)(a3 + 8) = result;
      *(_DWORD *)(a3 + 24) = 2;
      return result;
    }
    goto LABEL_14;
  }
  v5 = (_DWORD *)a2[11];
  if (v5)
  {
    v6 = Phase::SpatialModeler::DirectPathTransmissionPrivate::QueryTable[v4];
    if (*((_DWORD *)v6 + 4) == *v5)
    {
      v7 = (_DWORD *)a2[12];
      if (v7 && *((_DWORD *)v6 + 5) == *v7)
        return (*((uint64_t (**)(void))v6 + 8))();
      if (a1)
      {
        result = (**a1)(a1);
        v9 = 4;
        goto LABEL_13;
      }
LABEL_14:
      std::terminate();
    }
  }
  if (!a1)
    goto LABEL_14;
  result = (**a1)(a1);
  v9 = 3;
LABEL_13:
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = result;
  *(_DWORD *)(a3 + 24) = 2;
  return result;
}

uint64_t Phase::SpatialModeler::DirectPathTransmission::AllocateQueryState@<X0>(uint64_t this@<X0>, Phase::SpatialModeler::Query *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t (*v4)(uint64_t);

  v3 = *((_QWORD *)a2 + 10);
  if (v3 <= 2)
  {
    v4 = (uint64_t (*)(uint64_t))*((_QWORD *)Phase::SpatialModeler::DirectPathTransmissionPrivate::QueryTable[v3]
                                          + 7);
    if (v4)
      return v4(this);
  }
  *a3 = 0;
  a3[4] = 0;
  return this;
}

uint64_t Phase::SpatialModeler::DirectPathTransmission::GetGraphDescription@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  switch(a1)
  {
    case 2:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x2199F99B0](a2, "DirectPathTransmissionSpatialQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 3uLL);
      v6 = *(_QWORD *)(a2 + 24);
      MEMORY[0x2199F99B0](v6, "BeginSpatialQueries");
      *(_QWORD *)(v6 + 24) |= 1uLL;
      v7 = *(_QWORD *)(a2 + 24);
      MEMORY[0x2199F99B0](v7 + 32, "RunSpatialSceneQueries");
      *(_QWORD *)(v7 + 56) |= 2uLL;
      v8 = *(_QWORD *)(a2 + 24);
      result = MEMORY[0x2199F99B0](v8 + 64, "FinishSpatialQueries");
      *(_QWORD *)(v8 + 88) |= 0xCuLL;
      return result;
    case 1:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x2199F99B0](a2, "DirectPathTransmissionClusterQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      v4 = *(_QWORD *)(a2 + 24);
      result = MEMORY[0x2199F99B0](v4, "FullClusterQueries");
      goto LABEL_7;
    case 0:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x2199F99B0](a2, "DirectPathTransmissionCullQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      v4 = *(_QWORD *)(a2 + 24);
      result = MEMORY[0x2199F99B0](v4, "FullCullQueries");
LABEL_7:
      *(_QWORD *)(v4 + 24) = 0xFFFFFFFFLL;
      return result;
  }
  *(_OWORD *)(a2 + 16) = 0uLL;
  *(_OWORD *)(a2 + 32) = 0uLL;
  *(_OWORD *)a2 = 0uLL;
  return result;
}

void sub_2165646A0(_Unwind_Exception *a1)
{
  void **v1;

  Phase::SpatialModeler::GraphDescription::~GraphDescription(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::DirectPathTransmission::GetErrorCategory(Phase::SpatialModeler::DirectPathTransmission *this)
{
  return (uint64_t)this + 48;
}

BOOL Phase::SpatialModeler::DirectPathTransmission::IsQueryIndexValid(Phase::SpatialModeler::DirectPathTransmission *this, unint64_t a2)
{
  return a2 < 3;
}

unsigned __int128 *Phase::SpatialModeler::DirectPathTransmission::GetHistory@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X8>)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Phase::Logger *v9;
  unint64_t *v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v21;
  uint64_t i;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 v27;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v28;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t *v46;
  unint64_t **v47;
  os_unfair_lock_s *v48;
  unint64_t v49;
  _BOOL4 v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  os_unfair_lock_s *v67;
  char v68;
  unint64_t v69;
  char v70;
  unint64_t *v71;
  unsigned int v72;
  unint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  char v84;
  int v85;
  char v86;
  unint64_t v87;
  int v88;
  unint64_t *v89;
  unint64_t v90;
  __int128 *v91;
  Phase::Logger *v92;
  unint64_t v93;
  Phase::Logger *v94;
  char v95;
  NSObject *v96;
  char v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  _BOOL4 v105;
  unint64_t *v106;
  os_unfair_lock_t lock;
  uint64_t v111;
  Phase::Logger *v112;
  std::__shared_weak_count *v114;
  std::__shared_weak_count *v115;
  int v116;
  _QWORD *v117;
  unsigned __int128 *v118;
  __int128 v119;
  _BYTE buf[12];
  __int16 v121;
  int v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  uint64_t v129;

  v5 = (_QWORD *)a1;
  v129 = *MEMORY[0x24BDAC8D0];
  v6 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995
       * ((0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * a2) ^ ((0xC6A4A7935BD1E995 * a2) >> 47)) + 3864292196u) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a3) ^ ((0xC6A4A7935BD1E995 * a3) >> 47))))
       + 3864292196u) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a4) ^ ((0xC6A4A7935BD1E995 * a4) >> 47))))
     + 3864292196u;
  v7 = a1 + 64;
  v118 = (unsigned __int128 *)(a1 + 320);
  caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal((unsigned __int128 *)(a1 + 320));
  *(_QWORD *)buf = v6;
  v8 = caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::key_le>(v7, buf, 0);
  v9 = 0;
  v112 = (Phase::Logger *)(v5 + 33);
  if (*(_QWORD *)(v8 + 16) == v6)
    v10 = (unint64_t *)v8;
  else
    v10 = v5 + 33;
  if (*((_BYTE *)v10 + 26) != 2)
  {
    v11 = atomic_load(v10 + 5);
    if ((v11 & 1) != 0)
      v9 = 0;
    else
      v9 = (Phase::Logger *)v10;
  }
  v116 = 0;
  v117 = v5;
  do
  {
    if (v9)
    {
      *(_QWORD *)a5 = *(_QWORD *)v9;
      v101 = *((_QWORD *)v9 + 1);
      *((_QWORD *)a5 + 1) = v101;
      if (v101)
      {
        v102 = (unint64_t *)(v101 + 8);
        do
          v103 = __ldxr(v102);
        while (__stxr(v103 + 1, v102));
      }
      return caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v118);
    }
    v12 = (std::__shared_weak_count *)operator new(0xF0uLL);
    v12->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24D57AC58;
    v12[1].__vftable = (std::__shared_weak_count_vtbl *)850045863;
    *(_OWORD *)&v12[1].__shared_owners_ = 0u;
    v12[2].std::__shared_count = 0u;
    *(_OWORD *)&v12[2].__shared_weak_owners_ = 0u;
    *(std::__shared_count *)((char *)&v12[3].std::__shared_count + 4) = 0u;
    v12[9].__shared_owners_ = 0;
    v12[4].std::__shared_count = 0u;
    *(_OWORD *)&v12[4].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v12[5].__shared_owners_ = 0u;
    v12[7].std::__shared_count = 0u;
    *(_OWORD *)&v12[7].__shared_weak_owners_ = 0u;
    v12[8].__shared_owners_ = 0;
    *(_OWORD *)&v12[8].__shared_weak_owners_ = xmmword_2166F7320;
    v12[9].__shared_weak_owners_ = 0x3F80000000000000;
    *(_QWORD *)&v119 = v12 + 1;
    *((_QWORD *)&v119 + 1) = v12;
    v14 = v6;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    if (v5[10] >= v6 || v5[35] <= v6)
    {
      __break(1u);
      goto LABEL_155;
    }
    caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal(v118);
    *(_QWORD *)buf = v6;
    v16 = caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::key_le>(v7, buf, 0);
    if (*(_QWORD *)(v16 + 16) == v6)
      goto LABEL_123;
    v18 = v16;
    v19 = v17;
    v114 = v12 + 1;
    v115 = v12;
    v20 = 0;
    v21 = 0;
    for (i = 1; i != 9; ++i)
    {
      if (i == 1)
      {
        v23 = caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::random_engine();
        v24 = v23;
        v25 = 0;
        while (1)
        {
          v26 = (unsigned __int8 *)&v23[628 * v25 + 626];
          do
            v27 = __ldaxr(v26);
          while (__stlxr(1u, v26));
          if ((v27 & 1) == 0)
            break;
          if (v25 == 3)
            v25 = 0;
          else
            ++v25;
        }
        v21 = v23[2513];
        v28 = v21 - v24[2512];
        if (v28)
        {
          v29 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)&v24[628 * v25];
          v30 = v28 + 1;
          if (v28 == -1)
          {
            v21 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)&v24[628 * v25]);
          }
          else
          {
            v31 = __clz(v30);
            v32 = 31;
            if (((v30 << v31) & 0x7FFFFFFF) != 0)
              v32 = 32;
            v33 = v32 - v31;
            v34 = v33 >> 5;
            if ((v33 & 0x1F) != 0)
              ++v34;
            if (v34 <= v33)
              v35 = 0xFFFFFFFF >> -(v33 / v34);
            else
              v35 = 0;
            do
              v36 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v29) & v35;
            while (v36 >= v30);
            v21 = v24[2512] + v36;
            v5 = v117;
          }
        }
        atomic_store(0, v26);
        v20 = 3;
      }
      if ((v20 & ~v21) != 0)
        break;
      v20 *= 4;
    }
    v37 = 0;
    v38 = (unint64_t *)(v5[42] + 80);
    do
    {
      v39 = caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[v37];
      if (v39 >= caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::node_sizes[i - 1])
      {
        v111 = v5[42];
        v41 = caulk::concurrent::stack<caulk::alloc::free_block,caulk::concurrent::intrusive_single_link_node<caulk::alloc::free_block>>::pop((unsigned __int128 *)v38 - 1);
        if (v41)
        {
          v40 = (uint64_t)v41;
          do
            v42 = __ldaxr(v38);
          while (__stlxr(v42 - 1, v38));
          goto LABEL_92;
        }
        v43 = v111;
        v44 = (unsigned int *)(v111 + 40);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 + 2049, v44));
        v46 = *(unint64_t **)(v111 + 24);
        if (!v46)
          v46 = *(unint64_t **)(v111 + 16);
        *(_DWORD *)buf = 0;
        v47 = (unint64_t **)(v111 + 16);
        v48 = (os_unfair_lock_s *)(v111 + 32);
        v49 = (v39 + 7) & 0xFFFFFFFFFFFFFFF8;
        if (v49)
          v50 = v39 > 0x3FF0;
        else
          v50 = 1;
        while (1)
        {
          while (1)
          {
            if (v46)
            {
              v51 = v46;
              while (1)
              {
                if (v50)
                  goto LABEL_58;
                v52 = v51[2];
                v53 = ~((_BYTE)v52 + (_BYTE)v51 + 39) & 7;
                v54 = v52 + v49 + v53;
                if (v54 > 0x3FE0)
                  goto LABEL_58;
                v55 = v51 + 2;
                v56 = __ldaxr(v51 + 2);
                if (v56 != v52)
                  break;
                if (__stlxr(v54, v55))
                  goto LABEL_66;
                v57 = 1;
LABEL_67:
                if ((v57 & 1) != 0)
                {
LABEL_89:
                  v40 = (uint64_t)v51 + v52 + v53 + 32;
                  if ((v40 & 7) == 0)
                  {
                    *(_QWORD *)(v43 + 24) = v51;
                    do
                      v72 = __ldaxr(v44);
                    while (__stlxr(v72 - 1, v44));
                    goto LABEL_92;
                  }
LABEL_155:
                  _os_assert_log();
                  _os_crash();
                  __break(1u);
                }
                while (1)
                {
                  v52 = v56;
                  v53 = ~((_BYTE)v56 + (_BYTE)v51 + 39) & 7;
                  v58 = v56 + v49 + v53;
                  if (v58 > 0x3FE0)
                    break;
                  v56 = __ldaxr(v55);
                  if (v56 == v52)
                  {
                    if (!__stlxr(v58, v55))
                      goto LABEL_89;
                  }
                  else
                  {
                    __clrex();
                  }
                }
LABEL_58:
                v51 = (unint64_t *)atomic_load(v51);
                if (!v51)
                  v51 = *v47;
                if (v46 == v51)
                  goto LABEL_74;
              }
              __clrex();
LABEL_66:
              v57 = 0;
              goto LABEL_67;
            }
LABEL_74:
            v105 = v50;
            v106 = (unint64_t *)v47;
            lock = v48;
            v59 = v46;
            if (os_unfair_lock_trylock(v48))
              break;
            caulk::concurrent::details::spinloop::spin((uint64_t)buf);
            v43 = v111;
            v47 = (unint64_t **)v106;
            v48 = lock;
            v46 = v59;
            v50 = v105;
          }
          v60 = (unint64_t *)caulk::alloc::details::caching_page_allocator_base::allocate(*(caulk::alloc::details::caching_page_allocator_base **)(v111 + 8));
          v61 = v60;
          v60[1] = v62;
          v60[2] = 0;
          __dmb(0xBu);
          v63 = v106;
          v64 = *v106;
          atomic_store(*v106, v60);
          v65 = __ldaxr(v63);
          if (v65 == v64)
          {
            v66 = __stlxr((unint64_t)v60, v106);
            v67 = lock;
            if (!v66)
            {
              v68 = 1;
              goto LABEL_81;
            }
          }
          else
          {
            __clrex();
            v67 = lock;
          }
          v68 = 0;
LABEL_81:
          if ((v68 & 1) == 0)
          {
            while (1)
            {
              atomic_store(v65, v61);
              v69 = __ldaxr(v106);
              if (v69 != v65)
                break;
              if (__stlxr((unint64_t)v61, v106))
                goto LABEL_86;
              v70 = 1;
LABEL_87:
              v65 = v69;
              if ((v70 & 1) != 0)
                goto LABEL_88;
            }
            __clrex();
LABEL_86:
            v70 = 0;
            goto LABEL_87;
          }
LABEL_88:
          v71 = v61;
          os_unfair_lock_unlock(v67);
          v47 = (unint64_t **)v106;
          v48 = lock;
          v46 = v71;
          v43 = v111;
          v50 = v105;
        }
      }
      v38 += 4;
      ++v37;
    }
    while (v37 != 10);
    v40 = 0;
LABEL_92:
    *(_BYTE *)(v40 + 24) = i;
    *(_WORD *)(v40 + 25) = 1;
    *(_BYTE *)(v40 + 27) = i;
    v14 = v6;
    *(_QWORD *)v40 = v114;
    *(_QWORD *)(v40 + 8) = v115;
    *(_QWORD *)(v40 + 16) = v6;
    *(_QWORD *)(v40 + 40) = 0;
    *(_QWORD *)(v40 + 48) = 0;
    *(_QWORD *)(v40 + 32) = 0;
    if ((_BYTE)i)
    {
      v73 = (unint64_t *)(v40 + 48);
      v74 = i;
      do
      {
        atomic_store(0, v73 - 1);
        atomic_store(0, v73);
        v73 += 2;
        --v74;
      }
      while (v74);
    }
    v75 = 0;
    __dmb(0xBu);
    while (1)
    {
      if (*(_QWORD *)(v18 + 16) == *(_QWORD *)(v40 + 16))
      {
        v76 = 0;
      }
      else
      {
        do
        {
          v77 = (unint64_t *)(v18 + 16 * v75 + 40);
          v78 = atomic_load(v77);
          if ((v78 & 2) != 0)
          {
            caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(v7, v75, v18, v78 & 0xFFFFFFFFFFFFFFFCLL);
          }
          else
          {
            atomic_store(v19, (unint64_t *)(v40 + 16 * v75 + 40));
            v79 = __ldaxr(v77);
            if (v79 == v19)
            {
              if (!__stlxr(v40, v77))
              {
                v76 = v40;
                goto LABEL_116;
              }
            }
            else
            {
              __clrex();
            }
            if ((v79 & 2) != 0)
              caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(v7, v75, v18, v79 & 0xFFFFFFFFFFFFFFFCLL);
            v80 = atomic_load(v77);
            if ((v80 & 1) != 0)
            {
              do
              {
                v18 = atomic_load((unint64_t *)(v18 + 16 * v75 + 48));
                v81 = atomic_load((unint64_t *)(v18 + 16 * v75 + 40));
              }
              while ((v81 & 1) != 0);
            }
          }
          v82 = *(_QWORD *)(v40 + 16);
          while (1)
          {
            v83 = atomic_load((unint64_t *)(v18 + 16 * v75 + 40));
            v19 = v83 & 0xFFFFFFFFFFFFFFFCLL;
            if (v82 < *(_QWORD *)((v83 & 0xFFFFFFFFFFFFFFFCLL) + 16))
              break;
            v84 = atomic_load((unint64_t *)(v19 + 40));
            if ((v84 & 1) != 0)
            {
              v18 = caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(v7, v75, v18, v19);
              if (!v85)
                caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(v7, v75, v18, v19);
            }
            else
            {
              v18 = v19;
            }
          }
        }
        while (*(_QWORD *)(v18 + 16) != *(_QWORD *)(v40 + 16));
        v76 = 0;
LABEL_116:
        v14 = v6;
      }
      if (!(v76 | v75))
        break;
      v86 = atomic_load((unint64_t *)(v40 + 40));
      if ((v86 & 1) != 0 || (++v75, v75 == i))
      {
        v12 = 0;
        v88 = 1;
        goto LABEL_124;
      }
      *(_QWORD *)buf = v14;
      v18 = caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::key_le>(v7, buf, v75);
      v19 = v87;
    }
    caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::free_node((caulk::alloc::base_allocator *)v118, v40);
    v12 = 0;
LABEL_123:
    v88 = 0;
LABEL_124:
    caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v118);
    if (!v12)
      goto LABEL_128;
    v89 = (unint64_t *)&v12->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v88)
        goto LABEL_131;
LABEL_129:
      v9 = 0;
      *a5 = v119;
      v91 = &v119;
LABEL_141:
      v97 = 0;
      *(_QWORD *)v91 = 0;
      *((_QWORD *)v91 + 1) = 0;
    }
    else
    {
LABEL_128:
      if (v88)
        goto LABEL_129;
LABEL_131:
      *(_QWORD *)buf = v14;
      v92 = (Phase::Logger *)caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::key_le>(v7, buf, 0);
      v93 = v14;
      v9 = 0;
      v94 = v112;
      if (*((_QWORD *)v92 + 2) == v93)
        v94 = v92;
      if (*((_BYTE *)v94 + 26) != 2)
      {
        v95 = atomic_load((unint64_t *)v94 + 5);
        if ((v95 & 1) != 0)
          v9 = 0;
        else
          v9 = v94;
      }
      if (v116 >= 1000)
      {
        v96 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v92) + 208);
        if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "DirectPathTransmissionModeler.cpp";
          v121 = 1024;
          v122 = 565;
          v123 = 2048;
          v124 = a2;
          v125 = 2048;
          v126 = a3;
          v127 = 2048;
          v128 = a4;
          _os_log_impl(&dword_2164CC000, v96, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to add or find a history entry for Source: %llu, Listener: %llu, DistanceModel: %llu.\n", buf, 0x30u);
        }
        v91 = a5;
        ++v116;
        goto LABEL_141;
      }
      v97 = 1;
      ++v116;
    }
    v98 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
    if (*((_QWORD *)&v119 + 1))
    {
      v99 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
  }
  while ((v97 & 1) != 0);
  return caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v118);
}

void sub_216565078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_unfair_lock_t lock, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  unsigned int *v31;
  unsigned int v33;

  if (a2)
  {
    os_unfair_lock_unlock(lock);
    do
      v33 = __ldaxr(v31);
    while (__stlxr(v33 - 1, v31));
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::DirectPathTransmission::~DirectPathTransmission(std::error_category *this)
{
  std::error_category *v2;

  this->__vftable = (std::error_category_vtbl *)&off_24D57AA28;
  v2 = this + 6;
  caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::~skiplist((uint64_t)&this[8]);
  std::error_category::~error_category(v2);
  this->__vftable = (std::error_category_vtbl *)&off_24D577480;
  std::error_category::~error_category(this + 1);
}

{
  std::error_category *v2;

  this->__vftable = (std::error_category_vtbl *)&off_24D57AA28;
  v2 = this + 6;
  caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::~skiplist((uint64_t)&this[8]);
  std::error_category::~error_category(v2);
  this->__vftable = (std::error_category_vtbl *)&off_24D577480;
  std::error_category::~error_category(this + 1);
  JUMPOUT(0x2199F9D70);
}

unsigned __int128 *caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(unsigned __int128 *result)
{
  uint64_t v1;
  int v2;
  unsigned __int128 v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int128 v9;
  int v10;

  do
  {
    v3 = __ldaxp(result);
    v2 = DWORD2(v3);
    v1 = v3;
  }
  while (__stlxp(v3, result));
  v4 = HIDWORD(*((_QWORD *)&v3 + 1));
  while (1)
  {
    v5 = v2 - 1;
    v6 = v2 - 1;
    v7 = v2 <= 1 ? 0 : v1;
    v8 = v2 | (unint64_t)(v4 << 32);
    do
    {
      while (1)
      {
        v9 = __ldaxp(result);
        v2 = DWORD2(v9);
        v10 = (_QWORD)v9 != v1;
        if (*((_QWORD *)&v9 + 1) != v8)
          ++v10;
        if (!v10)
          break;
        if (!__stlxp(v9, result))
          goto LABEL_13;
      }
    }
    while (__stlxp(__PAIR128__(v6, v7), result));
LABEL_13:
    if (!((unint64_t)v9 ^ v1 | *((_QWORD *)&v9 + 1) ^ v8))
      break;
    v4 = HIDWORD(*((_QWORD *)&v9 + 1));
    v1 = v9;
  }
  if (!v5)
  {
    if (v1)
      return (unsigned __int128 *)caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::free_node_chain_now((caulk::alloc::base_allocator *)result, v1);
  }
  return result;
}

caulk::alloc::base_allocator *caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::free_node_chain_now(caulk::alloc::base_allocator *result, uint64_t a2)
{
  uint64_t v2;
  caulk::alloc::base_allocator *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    v4 = (char *)result + 40;
    do
    {
      v5 = atomic_load((unint64_t *)(v2 + 32));
      v6 = *((_QWORD *)v3 + 4);
      if (*(_BYTE *)(v6 + 32))
      {
        if (!*(_BYTE *)(v2 + 26))
          (*(void (**)(char *, uint64_t))v6)(v4, v2);
      }
      result = caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::free_node(v3, v2);
      v2 = v5;
    }
    while (v5);
  }
  return result;
}

caulk::alloc::base_allocator *caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::free_node(caulk::alloc::base_allocator *result, uint64_t a2)
{
  caulk::alloc::base_allocator *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int128 v10;
  int v11;
  unsigned __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v3 = result;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a2 + 25))
    result = (caulk::alloc::base_allocator *)std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](a2);
  v5 = 0;
  v6 = (unsigned __int128 *)(*((_QWORD *)v3 + 2) + 64);
  while ((unint64_t)caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[v5] < caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::node_sizes[v4 - 1])
  {
    v6 += 2;
    if (++v5 == 10)
      caulk::alloc::base_allocator::bad_dealloc(result);
  }
  do
    v7 = __ldaxp(v6);
  while (__stlxp(v7, v6));
  atomic_store(v7, (unint64_t *)a2);
  do
  {
    while (1)
    {
      v10 = __ldaxp(v6);
      v9 = *((_QWORD *)&v10 + 1);
      v8 = v10;
      v11 = (_QWORD)v10 != (_QWORD)v7;
      if (*((_QWORD *)&v10 + 1) != *((_QWORD *)&v7 + 1))
        ++v11;
      if (!v11)
        break;
      if (!__stlxp(v10, v6))
        goto LABEL_15;
    }
  }
  while (__stlxp(__PAIR128__(*((_QWORD *)&v7 + 1) + 1, a2), v6));
LABEL_15:
  if ((_QWORD)v10 != (_QWORD)v7 || *((_QWORD *)&v10 + 1) != *((_QWORD *)&v7 + 1))
  {
    do
    {
      atomic_store(v8, (unint64_t *)a2);
      do
      {
        while (1)
        {
          v13 = __ldaxp(v6);
          v14 = (_QWORD)v13 != v8;
          if (*((_QWORD *)&v13 + 1) != v9)
            ++v14;
          if (!v14)
            break;
          if (!__stlxp(v13, v6))
            goto LABEL_26;
        }
      }
      while (__stlxp(__PAIR128__(v9 + 1, a2), v6));
LABEL_26:
      v15 = *((_QWORD *)&v13 + 1) ^ v9;
      v16 = v13 ^ v8;
      v9 = v13 >> 64;
      v8 = v13;
    }
    while (v16 | v15);
  }
  v17 = (unint64_t *)(v6 + 1);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  return result;
}

void caulk::alloc::base_allocator::bad_dealloc(caulk::alloc::base_allocator *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  caulk::alloc::alloc_error::alloc_error(exception, "deallocate() called for unowned block");
}

void sub_216565414(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *caulk::alloc::alloc_error::alloc_error(std::runtime_error *this, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(this, a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_24D57ABA0;
  return result;
}

void caulk::alloc::alloc_error::~alloc_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x2199F9D70);
}

uint64_t caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::~skiplist(uint64_t a1)
{
  unsigned __int128 *v2;
  unint64_t i;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int128 v17;
  uint64_t v19;

  v2 = (unsigned __int128 *)(a1 + 256);
  caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal((unsigned __int128 *)(a1 + 256));
  for (i = atomic_load((unint64_t *)(a1 + 40)); ; i = atomic_load((unint64_t *)(v4 + 40)))
  {
    v4 = i & 0xFFFFFFFFFFFFFFFCLL;
    if (a1 + 200 == (i & 0xFFFFFFFFFFFFFFFCLL))
      break;
    if (*(_BYTE *)(v4 + 26) != 2)
    {
      v5 = atomic_load((unint64_t *)(v4 + 40));
      if ((v5 & 1) == 0)
      {
        v6 = *(_QWORD *)(v4 + 16);
        caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal(v2);
        v19 = v6;
        v7 = -1;
        v8 = 56;
        do
        {
          v9 = atomic_load((unint64_t *)(a1 + v8));
          ++v7;
          v8 += 16;
        }
        while (*(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFFCLL) + 26) != 2);
        v10 = a1;
        if (v7)
        {
          v10 = a1;
          do
            v10 = caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::key_lt &>(a1, v7--, v10, &v19);
          while (v7);
        }
        v11 = caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::key_lt &>(a1, 0, v10, &v19);
        if (*(_QWORD *)(v12 + 16) == v6)
        {
          v13 = v12;
          v14 = caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, 0, v11, v12);
          v16 = v15;
          if (!(_DWORD)v15)
            caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, 0, v14, v13);
          if (v13)
          {
            if ((v16 & 0xFF00000000) != 0)
            {
              v19 = v6;
              caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::key_le>(a1, &v19, 0);
            }
          }
        }
        caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v2);
      }
    }
  }
  caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v2);
  if (*(_BYTE *)(a1 + 25))
    std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](a1);
  if (*(_BYTE *)(a1 + 225))
    std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](a1 + 200);
  do
    v17 = __ldaxp(v2);
  while (__stlxp(v17, v2));
  if ((_QWORD)v17)
    caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::free_node_chain_now((caulk::alloc::base_allocator *)v2, v17);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 288) + 24))(a1 + 296);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](a1 + 272);
  return a1;
}

unint64_t caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::key_le>(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v6 = -1;
  v7 = 56;
  do
  {
    do
    {
      ++v6;
      v8 = atomic_load((unint64_t *)(a1 + v7));
      v7 += 16;
    }
    while (v6 < a3);
  }
  while (*(_BYTE *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 26) != 2);
  v9 = a1;
  if (v6 > a3)
  {
    v9 = a1;
    do
      v9 = caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::key_le &>(a1, v6--, v9, a2);
    while (v6 > a3);
  }
  return caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::key_le &>(a1, a3, v9, a2);
}

unsigned __int128 *caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal(unsigned __int128 *result)
{
  unsigned __int128 v1;
  unint64_t v2;
  uint64_t v3;
  unsigned __int128 v4;
  int v5;
  unsigned __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  do
    v1 = __ldaxp(result);
  while (__stlxp(v1, result));
  do
  {
    while (1)
    {
      v4 = __ldaxp(result);
      v3 = *((_QWORD *)&v4 + 1);
      v2 = v4;
      v5 = (_QWORD)v4 != (_QWORD)v1;
      if (*((_QWORD *)&v4 + 1) != *((_QWORD *)&v1 + 1))
        ++v5;
      if (!v5)
        break;
      if (!__stlxp(v4, result))
        goto LABEL_8;
    }
  }
  while (__stlxp(__PAIR128__((DWORD2(v1) + 1), v1), result));
LABEL_8:
  if ((_QWORD)v4 != (_QWORD)v1 || *((_QWORD *)&v4 + 1) != *((_QWORD *)&v1 + 1))
  {
    while (1)
    {
      while (1)
      {
        v7 = __ldaxp(result);
        v8 = (_QWORD)v7 != v2;
        if (*((_QWORD *)&v7 + 1) != v3)
          ++v8;
        if (!v8)
          break;
        if (!__stlxp(v7, result))
          goto LABEL_18;
      }
      if (!__stlxp(__PAIR128__((v3 + 1), v2), result))
      {
LABEL_18:
        v9 = *((_QWORD *)&v7 + 1) ^ v3;
        v10 = v7 ^ v2;
        v3 = v7 >> 64;
        v2 = v7;
        if (!(v10 | v9))
          return result;
      }
    }
  }
  return result;
}

unint64_t caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::key_lt &>(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v10;
  int v11;
  unint64_t v12;

  v4 = a3;
  v5 = atomic_load((unint64_t *)(a3 + 16 * a2 + 40));
  v6 = v5 & 0xFFFFFFFFFFFFFFFCLL;
  if (*a4 > *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFCLL) + 16))
  {
    do
    {
      v10 = atomic_load((unint64_t *)(v6 + 40));
      if ((v10 & 1) != 0)
      {
        v4 = caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, a2, v4, v6);
        if (!v11)
          caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, a2, v4, v6);
      }
      else
      {
        v4 = v6;
      }
      v12 = atomic_load((unint64_t *)(v4 + 16 * a2 + 40));
      v6 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (*a4 > *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 16));
  }
  return v4;
}

unint64_t caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  int v18;

  v8 = a4 | 2;
  do
  {
    v9 = (unint64_t *)(a3 + 16 * a2 + 40);
    v10 = atomic_load(v9);
    if (v10 == v8)
      break;
    v11 = __ldaxr(v9);
    if (v11 == a4)
    {
      if (!__stlxr(v8, v9))
        return a3;
    }
    else
    {
      __clrex();
    }
    if (v11 == v8)
      break;
    v12 = atomic_load(v9);
    if ((v12 & 1) != 0)
    {
      do
      {
        a3 = atomic_load((unint64_t *)(a3 + 16 * a2 + 48));
        v13 = atomic_load((unint64_t *)(a3 + 16 * a2 + 40));
      }
      while ((v13 & 1) != 0);
    }
    v14 = *(_QWORD *)(a4 + 16);
    while (1)
    {
      v15 = atomic_load((unint64_t *)(a3 + 16 * a2 + 40));
      v16 = v15 & 0xFFFFFFFFFFFFFFFCLL;
      if (v14 <= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFCLL) + 16))
        break;
      v17 = atomic_load((unint64_t *)(v16 + 40));
      if ((v17 & 1) != 0)
      {
        a3 = caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, a2, a3, v16);
        if (!v18)
          caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, a2, a3, v16);
      }
      else
      {
        a3 = v16;
      }
    }
  }
  while (v16 == a4);
  return a3;
}

uint64_t caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int128 *v19;
  unsigned __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int128 v23;
  int v24;
  unsigned __int128 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  v7 = result;
  v8 = a4 + 16 * a2;
  v9 = (unint64_t *)(v8 + 40);
  atomic_store(a3, (unint64_t *)(v8 + 48));
  while (1)
  {
    v10 = atomic_load(v9);
    if ((v10 & 1) != 0)
      break;
    v11 = atomic_load(v9);
    v12 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = __ldaxr(v9);
    if (v13 == v12)
    {
      __stlxr(v12 | 1, v9);
      if ((v13 & 2) != 0)
LABEL_7:
        result = caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(v7, a2, a4, v13 & 0xFFFFFFFFFFFFFFFCLL);
    }
    else
    {
      __clrex();
      if ((v13 & 2) != 0)
        goto LABEL_7;
    }
  }
  v14 = atomic_load(v9);
  v15 = (unint64_t *)(a3 + 16 * a2 + 40);
  v16 = __ldaxr(v15);
  if (v16 == (a4 | 2))
  {
    if (!__stlxr(v14 & 0xFFFFFFFFFFFFFFFCLL, v15))
    {
      v17 = (unsigned __int8 *)(a4 + 27);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (v18 == 1)
      {
        v19 = (unsigned __int128 *)(v7 + 256);
        do
          v20 = __ldaxp(v19);
        while (__stlxp(v20, v19));
        atomic_store(v20, (unint64_t *)(a4 + 32));
        do
        {
          while (1)
          {
            v23 = __ldaxp(v19);
            v22 = *((_QWORD *)&v23 + 1);
            v21 = v23;
            v24 = (_QWORD)v23 != (_QWORD)v20;
            if (*((_QWORD *)&v23 + 1) != *((_QWORD *)&v20 + 1))
              ++v24;
            if (!v24)
              break;
            if (!__stlxp(v23, v19))
              goto LABEL_22;
          }
        }
        while (__stlxp(__PAIR128__(DWORD2(v20), a4), v19));
LABEL_22:
        if ((_QWORD)v23 != (_QWORD)v20 || *((_QWORD *)&v23 + 1) != *((_QWORD *)&v20 + 1))
        {
          do
          {
            atomic_store(v21, (unint64_t *)(a4 + 32));
            do
            {
              while (1)
              {
                v26 = __ldaxp(v19);
                v27 = (_QWORD)v26 != v21;
                if (*((_QWORD *)&v26 + 1) != v22)
                  ++v27;
                if (!v27)
                  break;
                if (!__stlxp(v26, v19))
                  goto LABEL_33;
              }
            }
            while (__stlxp(__PAIR128__(v22, a4), v19));
LABEL_33:
            v28 = *((_QWORD *)&v26 + 1) ^ v22;
            v29 = v26 ^ v21;
            v22 = *((_QWORD *)&v26 + 1);
            v21 = v26;
          }
          while (v29 | v28);
        }
      }
    }
  }
  else
  {
    __clrex();
  }
  return result;
}

unint64_t caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::key_le &>(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v10;
  int v11;
  unint64_t v12;

  v4 = a3;
  v5 = atomic_load((unint64_t *)(a3 + 16 * a2 + 40));
  v6 = v5 & 0xFFFFFFFFFFFFFFFCLL;
  if (*a4 >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFCLL) + 16))
  {
    do
    {
      v10 = atomic_load((unint64_t *)(v6 + 40));
      if ((v10 & 1) != 0)
      {
        v4 = caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, a2, v4, v6);
        if (!v11)
          caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, a2, v4, v6);
      }
      else
      {
        v4 = v6;
      }
      v12 = atomic_load((unint64_t *)(v4 + 16 * a2 + 40));
      v6 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (*a4 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 16));
  }
  return v4;
}

_QWORD *Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>>(unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v5;
  _QWORD *result;
  uint64_t v7;
  NSObject *v8;
  std::logic_error *exception;
  _BYTE v10[12];
  __int16 v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v8 = **(NSObject ***)(Phase::Logger::GetInstancePtr(0) + 112);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v10 = 136315394;
      *(_QWORD *)&v10[4] = "ManagedPtr.hpp";
      v11 = 1024;
      v12 = 229;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v10, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  v5 = operator new(12 * **(_QWORD **)a2, **(std::align_val_t **)(a2 + 8));
  bzero(v5, 12 * ((12 * a1 - 12) / 0xCuLL) + 12);
  *(_QWORD *)v10 = &off_24D57ABC8;
  v10[8] = 0;
  v13 = v10;
  *a3 = v5;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a3 + 1), (uint64_t)v10);
  result = v13;
  if (v13 == v10)
  {
    v7 = 4;
    result = v10;
  }
  else
  {
    if (!v13)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_216565D60(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_6VectorIfLm3EEERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_ED0Ev()
{
  JUMPOUT(0x2199F9D70);
}

_BYTE *_ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_6VectorIfLm3EEERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_E7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24D57ABC8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_6VectorIfLm3EEERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24D57ABC8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_6VectorIfLm3EEERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_EclEOSC_(uint64_t a1, void **a2)
{
  operator delete(*a2);
}

_QWORD *Phase::details::AllocArray<Phase::PackedSubbands<float,3ul>,std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::PackedSubbands<float,3ul>>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::PackedSubbands<float,3ul>>(unsigned long,unsigned long)::{lambda(Phase::PackedSubbands<float,3ul>*)#1} const&>(Phase::Logger *a1, uint64_t a2, _QWORD *a3, std::align_val_t *a4)
{
  void *v6;
  _QWORD *result;
  uint64_t v8;
  NSObject *v9;
  std::logic_error *exception;
  _BYTE v11[12];
  __int16 v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v9 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 112);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v11 = 136315394;
      *(_QWORD *)&v11[4] = "ManagedPtr.hpp";
      v12 = 1024;
      v13 = 229;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v11, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  v6 = operator new(12 * *a3, *a4);
  bzero(v6, 12 * ((12 * a2 - 12) / 0xCuLL) + 12);
  *(_QWORD *)v11 = &off_24D57AC10;
  v11[8] = 0;
  v14 = v11;
  *(_QWORD *)a1 = v6;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)a1 + 8, (uint64_t)v11);
  result = v14;
  if (v14 == v11)
  {
    v8 = 4;
    result = v11;
  }
  else
  {
    if (!v14)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_216565F84(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_14PackedSubbandsIfLm3EEERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_ED0Ev()
{
  JUMPOUT(0x2199F9D70);
}

_BYTE *_ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_14PackedSubbandsIfLm3EEERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_E7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24D57AC10;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_14PackedSubbandsIfLm3EEERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24D57AC10;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_14PackedSubbandsIfLm3EEERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_EclEOSC_(uint64_t a1, void **a2)
{
  operator delete(*a2);
}

uint64_t *std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::PackedSubbands<float,3ul>*,0>(a1, v4);
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t *std::unique_ptr<Phase::PackedSubbands<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::PackedSubbands<float,3ul>*,0>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v5;
  unsigned int *value;
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::QueryDesc>,Phase::SpatialModeler::QueryDesc const*,Phase::SpatialModeler::QueryDesc const*,Phase::SpatialModeler::QueryDesc*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      std::allocator<Phase::SpatialModeler::QueryDesc>::construct[abi:ne180100]<Phase::SpatialModeler::QueryDesc,Phase::SpatialModeler::QueryDesc const&>(v7, v4, v6);
      v6 += 5;
      v4 = (std::string *)((char *)v12 + 80);
      v12 = (std::string *)((char *)v12 + 80);
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::QueryDesc>,Phase::SpatialModeler::QueryDesc*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_216566270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::QueryDesc>,Phase::SpatialModeler::QueryDesc*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::QueryDesc>,Phase::SpatialModeler::QueryDesc*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::QueryDesc>,Phase::SpatialModeler::QueryDesc*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::QueryDesc>,Phase::SpatialModeler::QueryDesc*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 80;
      std::allocator<Phase::SpatialModeler::QueryDesc>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__push_back_slow_path<Phase::SpatialModeler::EntityShapeTemplate const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  _QWORD v14[2];
  _DWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::EntityShapeTemplate>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[14 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = (char *)&v10[14 * v9];
  *v11 = *a2;
  std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map((uint64_t)(v11 + 2), (uint64_t)(a2 + 2));
  v10[14 * v4 + 12] = a2[12];
  v15 += 14;
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<Phase::SpatialModeler::EntityShapeTemplate>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_216566428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Phase::SpatialModeler::EntityShapeTemplate>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v7 = *(_DWORD *)(v4 - 56);
    v4 -= 56;
    *(_DWORD *)(v6 - 56) = v7;
    v6 -= 56;
    result = (uint64_t *)std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__hash_table(v6 + 8, (uint64_t *)(v4 + 8));
    *(_DWORD *)(v6 + 48) = *(_DWORD *)(v4 + 48);
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void std::__shared_ptr_emplace<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D57AC58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D57AC58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

void std::__shared_ptr_emplace<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)(a1 + 136));
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](a1 + 120);
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void *caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::random_engine()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    caulk::multi_simple_random<unsigned int,4ul,std::uniform_int_distribution<unsigned int>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>::multi_simple_random((uint64_t)&caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::random_engine(void)::engine, 0, -1);
  }
  return &caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::random_engine(void)::engine;
}

void sub_2165665BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t caulk::multi_simple_random<unsigned int,4ul,std::uniform_int_distribution<unsigned int>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>::multi_simple_random(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t j;

  v4 = 0;
  v5 = a1;
  do
  {
    v6 = a1 + 2512 * v4;
    v7 = 5489;
    *(_DWORD *)v6 = 5489;
    for (i = 1; i != 624; ++i)
    {
      v7 = i + 1812433253 * (v7 ^ (v7 >> 30));
      *(_DWORD *)(v5 + 4 * i) = v7;
    }
    *(_QWORD *)(v6 + 2496) = 0;
    *(_BYTE *)(a1 + 2512 * v4++ + 2504) = 0;
    v5 += 2512;
  }
  while (v4 != 4);
  v9 = 0;
  *(_DWORD *)(a1 + 10048) = a2;
  *(_DWORD *)(a1 + 10052) = a3;
  v10 = a1;
  do
  {
    v11 = mach_absolute_time();
    *(_DWORD *)v10 = v11;
    for (j = 1; j != 624; ++j)
    {
      v11 = j + 1812433253 * (v11 ^ (v11 >> 30));
      *(_DWORD *)(v10 + 4 * j) = v11;
    }
    *(_QWORD *)(v10 + 2496) = 0;
    ++v9;
    v10 += 2512;
  }
  while (v9 != 4);
  return a1;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

unint64_t *caulk::concurrent::stack<caulk::alloc::free_block,caulk::concurrent::intrusive_single_link_node<caulk::alloc::free_block>>::pop(unsigned __int128 *a1)
{
  unint64_t *v1;
  uint64_t v2;
  unsigned __int128 v3;
  unint64_t v4;
  unsigned __int128 v5;
  int v6;

  do
  {
    v3 = __ldaxp(a1);
    v2 = *((_QWORD *)&v3 + 1);
    v1 = (unint64_t *)v3;
  }
  while (__stlxp(v3, a1));
  if ((_QWORD)v3)
  {
    do
    {
      v4 = atomic_load(v1);
      do
      {
        while (1)
        {
          v5 = __ldaxp(a1);
          v6 = (_QWORD)v5 != (_QWORD)v1;
          if (*((_QWORD *)&v5 + 1) != v2)
            ++v6;
          if (!v6)
            break;
          if (!__stlxp(v5, a1))
            goto LABEL_10;
        }
      }
      while (__stlxp(__PAIR128__(v2 + 1, v4), a1));
LABEL_10:
      if ((unint64_t *)v5 == v1 && *((_QWORD *)&v5 + 1) == v2)
        break;
      v2 = v5 >> 64;
      v1 = (unint64_t *)v5;
    }
    while ((_QWORD)v5);
  }
  return v1;
}

uint64_t caulk::concurrent::details::spinloop::spin(uint64_t this)
{
  int v1;
  _DWORD *v2;

  v1 = *(_DWORD *)this + 1;
  *(_DWORD *)this = v1;
  if (v1 == 100)
  {
    v2 = (_DWORD *)this;
    this = sched_yield();
    *v2 = 0;
  }
  return this;
}

uint64_t Phase::Dispatch::ClientTransactionManager::ClientTransactionManager(uint64_t a1, uint64_t a2, uint64_t a3, Phase::Dispatch::ExternalStreamClientInterface *a4, uint64_t a5, Phase::Dispatch::TapsClientInterface *a6, uint64_t a7, Phase::Controller::TaskManager *a8)
{
  uint64_t v14;

  v14 = Phase::Dispatch::GeometryClientCommandProcessor::GeometryClientCommandProcessor(a1, a3);
  Phase::ActionTreeClientCommandProcessor::ActionTreeClientCommandProcessor(v14 + 88, a2);
  Phase::Dispatch::TransactionExecutor<Phase::Dispatch::MiscServerMessageType>::TransactionExecutor(a1 + 176);
  *(_QWORD *)(a1 + 176) = &off_24D57BCD8;
  *(_QWORD *)(a1 + 256) = a5;
  Phase::Dispatch::ExternalStreamClientCommandProcessor::ExternalStreamClientCommandProcessor((Phase::Dispatch::ExternalStreamClientCommandProcessor *)(a1 + 264), a4);
  Phase::Dispatch::TapsClientCommandProcessor::TapsClientCommandProcessor((Phase::Dispatch::TapsClientCommandProcessor *)(a1 + 352), a6, a8);
  Phase::Dispatch::TransactionWriter<Phase::ActionTreeServerCommand>::TransactionWriter((std::vector<char> *)(a1 + 448), 0x20000uLL);
  return a1;
}

void sub_21656688C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;

  Phase::Dispatch::TapsClientCommandProcessor::~TapsClientCommandProcessor(v5);
  Phase::Dispatch::ExternalStreamClientCommandProcessor::~ExternalStreamClientCommandProcessor(v4);
  Phase::Dispatch::MiscClientCommandProcessor::~MiscClientCommandProcessor(v3);
  Phase::ActionTreeClientCommandProcessor::~ActionTreeClientCommandProcessor(v2);
  Phase::Dispatch::GeometryClientCommandProcessor::~GeometryClientCommandProcessor(v1);
  _Unwind_Resume(a1);
}

void Phase::Dispatch::TapsClientCommandProcessor::~TapsClientCommandProcessor(id *this)
{
  *this = &off_24D57AD08;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table((uint64_t)(this + 1));
}

{
  *this = &off_24D57AD08;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table((uint64_t)(this + 1));
  JUMPOUT(0x2199F9D70);
}

void Phase::Dispatch::ExternalStreamClientCommandProcessor::~ExternalStreamClientCommandProcessor(id *this)
{
  *this = &off_24D57AC90;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table((uint64_t)(this + 1));
}

{
  *this = &off_24D57AC90;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table((uint64_t)(this + 1));
  JUMPOUT(0x2199F9D70);
}

void Phase::Dispatch::MiscClientCommandProcessor::~MiscClientCommandProcessor(id *this)
{
  *this = &off_24D57ACE0;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table((uint64_t)(this + 1));
}

{
  *this = &off_24D57ACE0;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table((uint64_t)(this + 1));
  JUMPOUT(0x2199F9D70);
}

void Phase::Dispatch::GeometryClientCommandProcessor::~GeometryClientCommandProcessor(id *this)
{
  *this = &off_24D57ACB8;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table((uint64_t)(this + 1));
}

{
  *this = &off_24D57ACB8;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table((uint64_t)(this + 1));
  JUMPOUT(0x2199F9D70);
}

void Phase::Dispatch::ClientTransactionManager::AddTransaction(id *a1, uint64_t a2, void *a3)
{
  Phase::Logger *v5;
  Phase::Logger *v6;
  id v7;
  Phase::Logger *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  id *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = v5;
  if (v5 && (v5 = (Phase::Logger *)-[Phase::Logger length](v5, "length")) != 0)
  {
    switch(a2)
    {
      case 0:
        v7 = a1[20];
        v8 = v6;
        objc_sync_enter(v7);
        objc_msgSend(a1[20], "addObject:", v8);
        goto LABEL_11;
      case 1:
        v7 = a1[9];
        v8 = v6;
        objc_sync_enter(v7);
        objc_msgSend(a1[9], "addObject:", v8);
        goto LABEL_11;
      case 2:
        v7 = a1[31];
        v8 = v6;
        objc_sync_enter(v7);
        objc_msgSend(a1[31], "addObject:", v8);
        goto LABEL_11;
      case 3:
        v7 = a1[42];
        v8 = v6;
        objc_sync_enter(v7);
        objc_msgSend(a1[42], "addObject:", v8);
        goto LABEL_11;
      case 4:
        v7 = a1[53];
        v8 = v6;
        objc_sync_enter(v7);
        objc_msgSend(a1[53], "addObject:", v8);
LABEL_11:

        objc_sync_exit(v7);
        break;
      default:
        break;
    }
  }
  else
  {
    v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v5) + 832));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315650;
      v11 = "DispatcherClientTransactionManager.mm";
      v12 = 1024;
      v13 = 129;
      v14 = 2048;
      v15 = a1;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d ctm@%p: Error: trying to add empty transaction to manager!", (uint8_t *)&v10, 0x1Cu);
    }
  }

}

void sub_216566BCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void Phase::Dispatch::TransactionExecutor<Phase::Dispatch::GeometryServerMessageType>::ExecuteTransactions(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *(id *)(a1 + 72);
  objc_sync_enter(v2);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = *(id *)(a1 + 72);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v3);
        v7 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v6));
        v8 = objc_msgSend(v7, "bytes", (_QWORD)v10);
        v9 = objc_msgSend(v7, "length");
        *(_QWORD *)(a1 + 48) = v8;
        *(_QWORD *)(a1 + 56) = v9;
        *(_QWORD *)(a1 + 64) = 0;
        Phase::MessagePipeReader<Phase::Dispatch::GeometryServerMessageType>::Execute((uint64_t *)(a1 + 48), (_QWORD *)(a1 + 8));

        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

  objc_msgSend(*(id *)(a1 + 72), "removeAllObjects");
  objc_sync_exit(v2);

}

void sub_216566D68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void Phase::Dispatch::TransactionExecutor<Phase::Dispatch::MiscServerMessageType>::ExecuteTransactions(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *(id *)(a1 + 72);
  objc_sync_enter(v2);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = *(id *)(a1 + 72);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v3);
        v7 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v6));
        v8 = objc_msgSend(v7, "bytes", (_QWORD)v10);
        v9 = objc_msgSend(v7, "length");
        *(_QWORD *)(a1 + 48) = v8;
        *(_QWORD *)(a1 + 56) = v9;
        *(_QWORD *)(a1 + 64) = 0;
        Phase::MessagePipeReader<Phase::Dispatch::MiscServerMessageType>::Execute((uint64_t *)(a1 + 48), (_QWORD *)(a1 + 8));

        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

  objc_msgSend(*(id *)(a1 + 72), "removeAllObjects");
  objc_sync_exit(v2);

}

void sub_216566F00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void Phase::Dispatch::TransactionExecutor<Phase::Dispatch::ExternalStreamServerMessageType>::ExecuteTransactions(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *(id *)(a1 + 72);
  objc_sync_enter(v2);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = *(id *)(a1 + 72);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v3);
        v7 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v6));
        v8 = objc_msgSend(v7, "bytes", (_QWORD)v10);
        v9 = objc_msgSend(v7, "length");
        *(_QWORD *)(a1 + 48) = v8;
        *(_QWORD *)(a1 + 56) = v9;
        *(_QWORD *)(a1 + 64) = 0;
        Phase::MessagePipeReader<Phase::Dispatch::ExternalStreamServerMessageType>::Execute((uint64_t *)(a1 + 48), (_QWORD *)(a1 + 8));

        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

  objc_msgSend(*(id *)(a1 + 72), "removeAllObjects");
  objc_sync_exit(v2);

}

void sub_216567098(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void Phase::Dispatch::TransactionExecutor<Phase::Dispatch::TapsServerMessageType>::ExecuteTransactions(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *(id *)(a1 + 72);
  objc_sync_enter(v2);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = *(id *)(a1 + 72);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v3);
        v7 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v6));
        v8 = objc_msgSend(v7, "bytes", (_QWORD)v10);
        v9 = objc_msgSend(v7, "length");
        *(_QWORD *)(a1 + 48) = v8;
        *(_QWORD *)(a1 + 56) = v9;
        *(_QWORD *)(a1 + 64) = 0;
        Phase::MessagePipeReader<Phase::Dispatch::TapsServerMessageType>::Execute((uint64_t *)(a1 + 48), (_QWORD *)(a1 + 8));

        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

  objc_msgSend(*(id *)(a1 + 72), "removeAllObjects");
  objc_sync_exit(v2);

}

void sub_216567230(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

uint64_t Phase::Dispatch::TransactionExecutor<Phase::Dispatch::TapsServerMessageType>::~TransactionExecutor(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D57AD08;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  return a1;
}

{
  *(_QWORD *)a1 = &off_24D57AD08;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  return a1;
}

void Phase::Dispatch::TransactionExecutor<Phase::Dispatch::TapsServerMessageType>::~TransactionExecutor(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D57AD08;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Dispatch::TransactionExecutor<Phase::Dispatch::ExternalStreamServerMessageType>::~TransactionExecutor(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D57AC90;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  return a1;
}

{
  *(_QWORD *)a1 = &off_24D57AC90;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  return a1;
}

void Phase::Dispatch::TransactionExecutor<Phase::Dispatch::ExternalStreamServerMessageType>::~TransactionExecutor(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D57AC90;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Dispatch::TransactionExecutor<Phase::Dispatch::MiscServerMessageType>::~TransactionExecutor(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D57ACE0;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  return a1;
}

void Phase::Dispatch::TransactionExecutor<Phase::Dispatch::MiscServerMessageType>::~TransactionExecutor(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D57ACE0;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Dispatch::TransactionExecutor<Phase::Dispatch::GeometryServerMessageType>::~TransactionExecutor(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D57ACB8;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  return a1;
}

{
  *(_QWORD *)a1 = &off_24D57ACB8;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  return a1;
}

void Phase::Dispatch::TransactionExecutor<Phase::Dispatch::GeometryServerMessageType>::~TransactionExecutor(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D57ACB8;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  JUMPOUT(0x2199F9D70);
}

std::vector<char> *Phase::Dispatch::TransactionWriter<Phase::ActionTreeServerCommand>::TransactionWriter(std::vector<char> *this, std::vector<char>::size_type a2)
{
  char *begin;
  char *value;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  this[3].__end_ = 0;
  *(_OWORD *)&this->__begin_ = 0u;
  *(_OWORD *)&this->__end_cap_.__value_ = 0u;
  *(_OWORD *)&this[1].__end_ = 0u;
  this[2].__begin_ = 0;
  if (a2)
  {
    std::vector<char>::__append(this, a2);
    begin = this->__begin_;
    value = this->__end_cap_.__value_;
  }
  else
  {
    value = 0;
    begin = 0;
  }
  this[1].__begin_ = begin;
  this[1].__end_ = 0;
  this[1].__end_cap_.__value_ = (char *)(value - begin);
  this[2].__begin_ = (std::vector<char>::pointer)this;
  v8[0] = &off_24D576C98;
  v8[1] = Phase::Dispatch::sMessageWriterCallback;
  v9 = v8;
  std::function<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::operator=(&this[2].__end_, (uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_8;
  }
  if (v9)
  {
    v6 = 5;
LABEL_8:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return this;
}

void sub_216567578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  void *v17;

  v15 = *(_QWORD **)(v13 + 80);
  if (v15 == (_QWORD *)(v13 + 56))
  {
    v16 = 4;
    v15 = (_QWORD *)(v13 + 56);
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:
  v17 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void Phase::MessagePipeReader<Phase::Dispatch::GeometryServerMessageType>::Execute(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  unsigned int v19;
  _BYTE buf[12];
  __int16 v21;
  int v22;
  __int16 v23;
  unsigned int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v2 = a1[2];
  v4 = v2 + 8;
  if (v2 + 8 <= v3)
  {
    v6 = *a1;
    v7 = (unsigned int *)(*a1 + v2);
    v8 = v4 + v7[1];
    if (v8 <= v3)
    {
      a1[2] = v8;
      v19 = *v7;
      if (v19)
      {
        v10 = v6 + v4;
        do
        {
          v11 = std::__hash_table<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::GeometryServerMessageType>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,std::hash<Phase::Dispatch::GeometryServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>>>::find<Phase::Dispatch::GeometryServerMessageType>(a2, &v19);
          if (v11)
          {
            if (!v10 || (v12 = v11[6]) == 0)
              std::terminate();
            *(_QWORD *)buf = v10;
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 48))(v12, buf);
          }
          else
          {
            v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 848));
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "MessagePipe.hpp";
              v21 = 1024;
              v22 = 102;
              v23 = 1024;
              v24 = v19;
              _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d skipping unrecognized transaction message %d", buf, 0x18u);
            }
          }
          v15 = a1[1];
          v14 = a1[2];
          v16 = v14 + 8;
          if (v14 + 8 > v15)
            break;
          v17 = (unsigned int *)(*a1 + v14);
          v18 = v16 + v17[1];
          if (v18 > v15)
            break;
          v10 = *a1 + v16;
          a1[2] = v18;
          v19 = *v17;
        }
        while (v19);
      }
    }
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::GeometryServerMessageType>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,std::hash<Phase::Dispatch::GeometryServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>>>::find<Phase::Dispatch::GeometryServerMessageType>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

void Phase::MessagePipeReader<Phase::Dispatch::MiscServerMessageType>::Execute(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _BYTE buf[12];
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v2 = a1[2];
  v4 = v2 + 8;
  if (v2 + 8 <= v3)
  {
    v6 = *a1;
    v7 = *a1 + v2;
    v8 = v4 + *(unsigned int *)(v7 + 4);
    if (v8 <= v3)
    {
      a1[2] = v8;
      v19 = *(_DWORD *)v7;
      if (v19)
      {
        v10 = v6 + v4;
        do
        {
          v11 = std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::find<Phase::ActionTreeServerCommand>(a2, &v19);
          if (v11)
          {
            if (!v10 || (v12 = v11[6]) == 0)
              std::terminate();
            *(_QWORD *)buf = v10;
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 48))(v12, buf);
          }
          else
          {
            v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 848));
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "MessagePipe.hpp";
              v21 = 1024;
              v22 = 102;
              v23 = 1024;
              v24 = v19;
              _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d skipping unrecognized transaction message %d", buf, 0x18u);
            }
          }
          v15 = a1[1];
          v14 = a1[2];
          v16 = v14 + 8;
          if (v14 + 8 > v15)
            break;
          v17 = *a1 + v14;
          v18 = v16 + *(unsigned int *)(v17 + 4);
          if (v18 > v15)
            break;
          v10 = *a1 + v16;
          a1[2] = v18;
          v19 = *(_DWORD *)v17;
        }
        while (v19);
      }
    }
  }
}

void Phase::MessagePipeReader<Phase::Dispatch::ExternalStreamServerMessageType>::Execute(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _BYTE buf[12];
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v2 = a1[2];
  v4 = v2 + 8;
  if (v2 + 8 <= v3)
  {
    v6 = *a1;
    v7 = *a1 + v2;
    v8 = v4 + *(unsigned int *)(v7 + 4);
    if (v8 <= v3)
    {
      a1[2] = v8;
      v19 = *(_DWORD *)v7;
      if (v19)
      {
        v10 = v6 + v4;
        do
        {
          v11 = std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::find<Phase::ActionTreeServerCommand>(a2, &v19);
          if (v11)
          {
            if (!v10 || (v12 = v11[6]) == 0)
              std::terminate();
            *(_QWORD *)buf = v10;
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 48))(v12, buf);
          }
          else
          {
            v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 848));
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "MessagePipe.hpp";
              v21 = 1024;
              v22 = 102;
              v23 = 1024;
              v24 = v19;
              _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d skipping unrecognized transaction message %d", buf, 0x18u);
            }
          }
          v15 = a1[1];
          v14 = a1[2];
          v16 = v14 + 8;
          if (v14 + 8 > v15)
            break;
          v17 = *a1 + v14;
          v18 = v16 + *(unsigned int *)(v17 + 4);
          if (v18 > v15)
            break;
          v10 = *a1 + v16;
          a1[2] = v18;
          v19 = *(_DWORD *)v17;
        }
        while (v19);
      }
    }
  }
}

void Phase::MessagePipeReader<Phase::Dispatch::TapsServerMessageType>::Execute(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _BYTE buf[12];
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v2 = a1[2];
  v4 = v2 + 8;
  if (v2 + 8 <= v3)
  {
    v6 = *a1;
    v7 = *a1 + v2;
    v8 = v4 + *(unsigned int *)(v7 + 4);
    if (v8 <= v3)
    {
      a1[2] = v8;
      v19 = *(_DWORD *)v7;
      if (v19)
      {
        v10 = v6 + v4;
        do
        {
          v11 = std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::find<Phase::ActionTreeServerCommand>(a2, &v19);
          if (v11)
          {
            if (!v10 || (v12 = v11[6]) == 0)
              std::terminate();
            *(_QWORD *)buf = v10;
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 48))(v12, buf);
          }
          else
          {
            v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 848));
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "MessagePipe.hpp";
              v21 = 1024;
              v22 = 102;
              v23 = 1024;
              v24 = v19;
              _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d skipping unrecognized transaction message %d", buf, 0x18u);
            }
          }
          v15 = a1[1];
          v14 = a1[2];
          v16 = v14 + 8;
          if (v14 + 8 > v15)
            break;
          v17 = *a1 + v14;
          v18 = v16 + *(unsigned int *)(v17 + 4);
          if (v18 > v15)
            break;
          v10 = *a1 + v16;
          a1[2] = v18;
          v19 = *(_DWORD *)v17;
        }
        while (v19);
      }
    }
  }
}

Phase::Dispatch::ExternalStreamClientCommandProcessor *Phase::Dispatch::ExternalStreamClientCommandProcessor::ExternalStreamClientCommandProcessor(Phase::Dispatch::ExternalStreamClientCommandProcessor *this, Phase::Dispatch::ExternalStreamClientInterface *a2)
{
  float *v4;
  id v5;
  void *v6;
  uint64_t (*v8)(Phase::Dispatch::ExternalStreamClientCommandProcessor *, const void *);
  uint64_t v9;
  Phase::Dispatch::ExternalStreamClientCommandProcessor *v10;

  *(_QWORD *)this = &off_24D57AC90;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (float *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  v5 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v6 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v5;

  *(_QWORD *)this = &off_24D57AD30;
  *((_QWORD *)this + 10) = a2;
  v8 = (uint64_t (*)(Phase::Dispatch::ExternalStreamClientCommandProcessor *, const void *))Phase::Dispatch::ExternalStreamClientCommandProcessor::HandleAddStreamResponse;
  v9 = 0;
  v10 = this;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::ExternalStreamServerMessageType,Phase::Dispatch::ExternalStreamServerMessageType,std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 1, 1, (uint64_t)&v8);
  v8 = (uint64_t (*)(Phase::Dispatch::ExternalStreamClientCommandProcessor *, const void *))Phase::Dispatch::ExternalStreamClientCommandProcessor::HandleAddInputStreamResponse;
  v9 = 0;
  v10 = this;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::ExternalStreamServerMessageType,Phase::Dispatch::ExternalStreamServerMessageType,std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 2, 2, (uint64_t)&v8);
  v8 = (uint64_t (*)(Phase::Dispatch::ExternalStreamClientCommandProcessor *, const void *))Phase::Dispatch::ExternalStreamClientCommandProcessor::HandleRemoveStreamResponse;
  v9 = 0;
  v10 = this;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::ExternalStreamServerMessageType,Phase::Dispatch::ExternalStreamServerMessageType,std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 3, 3, (uint64_t)&v8);
  v8 = (uint64_t (*)(Phase::Dispatch::ExternalStreamClientCommandProcessor *, const void *))Phase::Dispatch::ExternalStreamClientCommandProcessor::HandleClaimStreamResponse;
  v9 = 0;
  v10 = this;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::ExternalStreamServerMessageType,Phase::Dispatch::ExternalStreamServerMessageType,std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 4, 4, (uint64_t)&v8);
  v8 = (uint64_t (*)(Phase::Dispatch::ExternalStreamClientCommandProcessor *, const void *))Phase::Dispatch::ExternalStreamClientCommandProcessor::HandleAbandonStreamResponse;
  v9 = 0;
  v10 = this;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::ExternalStreamServerMessageType,Phase::Dispatch::ExternalStreamServerMessageType,std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 5, 5, (uint64_t)&v8);
  v8 = (uint64_t (*)(Phase::Dispatch::ExternalStreamClientCommandProcessor *, const void *))Phase::Dispatch::ExternalStreamClientCommandProcessor::HandlePauseStreamResponse;
  v9 = 0;
  v10 = this;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::ExternalStreamServerMessageType,Phase::Dispatch::ExternalStreamServerMessageType,std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 14, 14, (uint64_t)&v8);
  v8 = (uint64_t (*)(Phase::Dispatch::ExternalStreamClientCommandProcessor *, const void *))Phase::Dispatch::ExternalStreamClientCommandProcessor::UpdateStreamStateForController;
  v9 = 0;
  v10 = this;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::ExternalStreamServerMessageType,Phase::Dispatch::ExternalStreamServerMessageType,std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 11, 11, (uint64_t)&v8);
  v8 = (uint64_t (*)(Phase::Dispatch::ExternalStreamClientCommandProcessor *, const void *))Phase::Dispatch::ExternalStreamClientCommandProcessor::UpdateControllerPauseState;
  v9 = 0;
  v10 = this;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::ExternalStreamServerMessageType,Phase::Dispatch::ExternalStreamServerMessageType,std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 6, 6, (uint64_t)&v8);
  v8 = (uint64_t (*)(Phase::Dispatch::ExternalStreamClientCommandProcessor *, const void *))Phase::Dispatch::ExternalStreamClientCommandProcessor::UpdateStreamPauseState;
  v9 = 0;
  v10 = this;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::ExternalStreamServerMessageType,Phase::Dispatch::ExternalStreamServerMessageType,std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 7, 7, (uint64_t)&v8);
  v8 = (uint64_t (*)(Phase::Dispatch::ExternalStreamClientCommandProcessor *, const void *))Phase::Dispatch::ExternalStreamClientCommandProcessor::PrepareRendering;
  v9 = 0;
  v10 = this;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::ExternalStreamServerMessageType,Phase::Dispatch::ExternalStreamServerMessageType,std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 8, 8, (uint64_t)&v8);
  v8 = Phase::Dispatch::ExternalStreamClientCommandProcessor::StartRendering;
  v9 = 0;
  v10 = this;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::ExternalStreamServerMessageType,Phase::Dispatch::ExternalStreamServerMessageType,std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 9, 9, (uint64_t)&v8);
  v8 = Phase::Dispatch::ExternalStreamClientCommandProcessor::StopRendering;
  v9 = 0;
  v10 = this;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::ExternalStreamServerMessageType,Phase::Dispatch::ExternalStreamServerMessageType,std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 10, 10, (uint64_t)&v8);
  v8 = (uint64_t (*)(Phase::Dispatch::ExternalStreamClientCommandProcessor *, const void *))Phase::Dispatch::ExternalStreamClientCommandProcessor::HandleInputMutedSpeechActivityResponse;
  v9 = 0;
  v10 = this;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::ExternalStreamServerMessageType,Phase::Dispatch::ExternalStreamServerMessageType,std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 13, 13, (uint64_t)&v8);
  return this;
}

void sub_21656805C(_Unwind_Exception *a1)
{
  uint64_t v1;

  Phase::Dispatch::TransactionExecutor<Phase::Dispatch::ExternalStreamServerMessageType>::~TransactionExecutor(v1);
  _Unwind_Resume(a1);
}

void sub_2165680A0()
{
  uint64_t v0;
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v1);
  JUMPOUT(0x216568098);
}

void Phase::Dispatch::ExternalStreamClientCommandProcessor::HandleAddStreamResponse(Phase::Dispatch::ExternalStreamClientCommandProcessor *this, _QWORD *a2)
{
  id v4;

  Phase::Dispatch::ExternalStreamResponseCodeToError(a2[8], a2[4], a2[5]);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, id))(**((_QWORD **)this + 10) + 128))(*((_QWORD *)this + 10), *a2, a2[1], a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], v4);

}

void sub_216568124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void Phase::Dispatch::ExternalStreamClientCommandProcessor::HandleAddInputStreamResponse(Phase::Dispatch::ExternalStreamClientCommandProcessor *this, double *a2)
{
  id v4;

  Phase::Dispatch::ExternalStreamResponseCodeToError(*((_QWORD *)a2 + 8), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, _QWORD, _DWORD, id))(**((_QWORD **)this + 10) + 136))(*((_QWORD *)this + 10), *(_QWORD *)a2, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6), a2[9], *((_QWORD *)a2 + 7), *((_DWORD *)a2 + 20), v4);

}

void sub_2165681B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void Phase::Dispatch::ExternalStreamClientCommandProcessor::HandleRemoveStreamResponse(Phase::Dispatch::ExternalStreamClientCommandProcessor *this, _QWORD *a2)
{
  id v4;

  Phase::Dispatch::ExternalStreamResponseCodeToError(a2[6], a2[4], a2[5]);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 144))(*((_QWORD *)this + 10), *a2, a2[1], a2[2], a2[3], a2[4], a2[5]);

}

void sub_216568228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void Phase::Dispatch::ExternalStreamClientCommandProcessor::HandleClaimStreamResponse(Phase::Dispatch::ExternalStreamClientCommandProcessor *this, _QWORD *a2)
{
  id v4;

  Phase::Dispatch::ExternalStreamResponseCodeToError(a2[4], a2[2], a2[3]);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 152))(*((_QWORD *)this + 10), *a2, a2[1], a2[2], a2[3]);

}

void sub_21656829C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void Phase::Dispatch::ExternalStreamClientCommandProcessor::HandleAbandonStreamResponse(Phase::Dispatch::ExternalStreamClientCommandProcessor *this, _QWORD *a2)
{
  id v4;

  Phase::Dispatch::ExternalStreamResponseCodeToError(a2[4], a2[2], a2[3]);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 160))(*((_QWORD *)this + 10), *a2, a2[1], a2[5], a2[6], a2[2], a2[3]);

}

void sub_216568314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void Phase::Dispatch::ExternalStreamClientCommandProcessor::HandlePauseStreamResponse(Phase::Dispatch::ExternalStreamClientCommandProcessor *this, _QWORD *a2)
{
  id v4;

  Phase::Dispatch::ExternalStreamResponseCodeToError(a2[6], a2[2], a2[3]);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 168))(*((_QWORD *)this + 10), *a2, a2[1], a2[2], a2[3], a2[4], a2[5]);

}

void sub_21656838C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t Phase::Dispatch::ExternalStreamClientCommandProcessor::UpdateStreamStateForController(Phase::Dispatch::ExternalStreamClientCommandProcessor *this, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 184))(*((_QWORD *)this + 10), a2[2], a2[3], a2[4], a2[5], a2[6]);
}

uint64_t Phase::Dispatch::ExternalStreamClientCommandProcessor::UpdateControllerPauseState(Phase::Dispatch::ExternalStreamClientCommandProcessor *this, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 192))(*((_QWORD *)this + 10), a2[2], a2[3], a2[4], a2[5], *((unsigned __int8 *)a2 + 48));
}

uint64_t Phase::Dispatch::ExternalStreamClientCommandProcessor::UpdateStreamPauseState(Phase::Dispatch::ExternalStreamClientCommandProcessor *this, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 200))(*((_QWORD *)this + 10), a2[2], a2[3], a2[4], a2[5], *((unsigned __int8 *)a2 + 48));
}

uint64_t Phase::Dispatch::ExternalStreamClientCommandProcessor::PrepareRendering(Phase::Dispatch::ExternalStreamClientCommandProcessor *this, double *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double))(**((_QWORD **)this + 10) + 208))(*((_QWORD *)this + 10), *((unsigned int *)a2 + 6), a2[2]);
}

uint64_t Phase::Dispatch::ExternalStreamClientCommandProcessor::StartRendering(Phase::Dispatch::ExternalStreamClientCommandProcessor *this, const void *a2)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 216))(*((_QWORD *)this + 10));
}

uint64_t Phase::Dispatch::ExternalStreamClientCommandProcessor::StopRendering(Phase::Dispatch::ExternalStreamClientCommandProcessor *this, const void *a2)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 224))(*((_QWORD *)this + 10));
}

uint64_t Phase::Dispatch::ExternalStreamClientCommandProcessor::HandleInputMutedSpeechActivityResponse(Phase::Dispatch::ExternalStreamClientCommandProcessor *this, char *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char *))(**((_QWORD **)this + 10) + 176))(*((_QWORD *)this + 10), *(_QWORD *)a2, *((_QWORD *)a2 + 1), a2 + 16);
}

void std::__hash_table<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::ExternalStreamServerMessageType,std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::ExternalStreamServerMessageType>,std::hash<Phase::Dispatch::ExternalStreamServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::ExternalStreamServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::ExternalStreamServerMessageType,Phase::Dispatch::ExternalStreamServerMessageType,std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>(float *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;

  v8 = a2;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t *)*i)
      {
        v13 = i[1];
        if (v13 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = operator new(0x38uLL);
  *v14 = 0;
  v14[1] = v8;
  *((_DWORD *)v14 + 4) = a3;
  v14[6] = 0;
  v15 = (char *)operator new(0x20uLL);
  *(_QWORD *)v15 = &off_24D57AD58;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)a4;
  *((_QWORD *)v15 + 3) = *(_QWORD *)(a4 + 16);
  v14[6] = v15;
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v25)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = a1 + 4;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_55:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v36 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v33 = *(_QWORD **)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v34)
  {
    *v14 = *v34;
LABEL_72:
    *v34 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v33[v4] = a1 + 4;
  if (*v14)
  {
    v35 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9)
        v35 %= v9;
    }
    else
    {
      v35 &= v9 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_2165688E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D57AD58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D57AD58;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::Dispatch::ExternalStreamClientCommandProcessor::*)(void const*),Phase::Dispatch::ExternalStreamClientCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

Phase::Dispatch::ExternalStreamClientDirectDispatcher *Phase::Dispatch::ExternalStreamClientDirectDispatcher::ExternalStreamClientDirectDispatcher(Phase::Dispatch::ExternalStreamClientDirectDispatcher *this, const Phase::Controller::TaskManager *a2)
{
  Phase::Logger *v4;
  uint64_t InstancePtr;
  Phase::Logger *v6;
  uint64_t v7;
  void *v8;

  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v4 = (Phase::Logger *)(id)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)this = off_24D57AEC8;
  InstancePtr = Phase::Logger::GetInstancePtr(v4);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::Commandable((uint64_t)this + 8, *(_QWORD *)(InstancePtr + 912), 1, 0x20000);
  *(_QWORD *)this = &off_24D57ADA0;
  *((_QWORD *)this + 1) = &unk_24D57AE98;
  *((_QWORD *)this + 6) = 0;
  v6 = v4;
  *((_QWORD *)this + 7) = v6;
  Phase::Controller::TaskManager::GetObjCService<ExternalStreamManager>(a2, 15);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v7;

  return this;
}

void sub_216568A60(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  _QWORD *v3;

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v3);
  _Unwind_Resume(a1);
}

void Phase::Dispatch::ExternalStreamClientDirectDispatcher::~ExternalStreamClientDirectDispatcher(id *this)
{

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this + 1);
}

{
  Phase::Dispatch::ExternalStreamClientDirectDispatcher::~ExternalStreamClientDirectDispatcher(this);
  JUMPOUT(0x2199F9D70);
}

void `non-virtual thunk to'Phase::Dispatch::ExternalStreamClientDirectDispatcher::~ExternalStreamClientDirectDispatcher(id *this)
{
  Phase::Dispatch::ExternalStreamClientDirectDispatcher::~ExternalStreamClientDirectDispatcher(this - 1);
}

{
  Phase::Dispatch::ExternalStreamClientDirectDispatcher::~ExternalStreamClientDirectDispatcher(this - 1);
  JUMPOUT(0x2199F9D70);
}

void Phase::Dispatch::ExternalStreamClientDirectDispatcher::AddExternalOutputStream(uint64_t a1, void *a2, void *a3, void *a4, char a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  _DWORD *v25;
  NSObject *v26;
  void *v27;
  Phase::Logger *InstancePtr;
  NSObject *v29;
  std::runtime_error *exception;
  void *v31;
  void *v32;
  id v33;
  BOOL v34;
  unint64_t v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  unint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a6;
  v17 = a7;
  v18 = *(id *)(a1 + 48);
  v19 = *(id *)(a1 + 56);
  v33 = v13;
  v20 = v14;
  v21 = v15;
  v31 = v16;
  v22 = _Block_copy(v16);
  v32 = v17;
  v23 = _Block_copy(v17);
  v24 = **(_QWORD **)(a1 + 16);
  v35 = 0;
  v34 = 1;
  v25 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v24, 72, &v35, &v34);
  if (!v25)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v29 = objc_retainAutorelease(**(id **)(v24 + 48));
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v37 = "CommandQueue.hpp";
      v38 = 1024;
      v39 = 100;
      _os_log_impl(&dword_2164CC000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v34)
  {
    v26 = objc_retainAutorelease(**(id **)(v24 + 48));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v37 = "CommandQueue.hpp";
      v38 = 1024;
      v39 = 89;
      v40 = 2048;
      v41 = v35;
      v42 = 2048;
      v43 = 72;
      _os_log_impl(&dword_2164CC000, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(_QWORD *)v25 = &off_24D57AFC0;
  *((_QWORD *)v25 + 1) = v18;
  *((_QWORD *)v25 + 2) = v19;
  v27 = v33;
  *((_QWORD *)v25 + 3) = v33;
  *((_QWORD *)v25 + 4) = v20;
  *((_QWORD *)v25 + 5) = v21;
  *((_BYTE *)v25 + 48) = a5;
  *((_QWORD *)v25 + 7) = v22;
  *((_QWORD *)v25 + 8) = v23;
  Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v24, 72);
  atomic_store(0, (unsigned __int8 *)(v24 + 40));

}

void sub_216568E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  uint64_t v21;

  if (a2)
  {
    __cxa_free_exception(v20);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v21 + 8);
    __cxa_end_catch();
    JUMPOUT(0x216568D24);
  }
  _Unwind_Resume(exception_object);
}

id *Phase::Dispatch::ExternalStreamClientDirectDispatcher::AddExternalOutputStream(NSUUID *,NSUUID *,PHASEExternalOutputStreamDefinition *,BOOL,int({block_pointer})(BOOL *,AudioTimeStamp const*,unsigned int,AudioBufferList *),void({block_pointer})(NSError *))::$_0::~$_0(id *a1)
{

  return a1;
}

void Phase::Dispatch::ExternalStreamClientDirectDispatcher::AddExternalInputStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  void (**v7)(id, Phase::Logger *);
  void *v8;
  Phase::Logger *v9;
  NSObject *v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  Phase::Logger *v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  v7 = a7;
  v17 = *MEMORY[0x24BDD0FC8];
  v18[0] = CFSTR("Error: input streams not supported for in-process clients");
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v18, &v17, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346924129, v8);
  v9 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
  v10 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v9) + 912));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    v11 = 136315650;
    v12 = "DispatcherExternalStreamClientDirect.mm";
    v13 = 1024;
    v14 = 78;
    v15 = 2112;
    v16 = v9;
    _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d %@", (uint8_t *)&v11, 0x1Cu);
  }
  v7[2](v7, v9);

}

void sub_21656908C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void Phase::Dispatch::ExternalStreamClientDirectDispatcher::RemoveExternalStream(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  Phase::Logger *InstancePtr;
  NSObject *v18;
  std::runtime_error *exception;
  BOOL v20;
  unint64_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(id *)(a1 + 48);
  v11 = v7;
  v12 = v8;
  v13 = _Block_copy(v9);
  v14 = **(_QWORD **)(a1 + 16);
  v21 = 0;
  v20 = 1;
  v15 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v14, 40, &v21, &v20);
  if (!v15)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v18 = objc_retainAutorelease(**(id **)(v14 + 48));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v23 = "CommandQueue.hpp";
      v24 = 1024;
      v25 = 100;
      _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v20)
  {
    v16 = objc_retainAutorelease(**(id **)(v14 + 48));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v23 = "CommandQueue.hpp";
      v24 = 1024;
      v25 = 89;
      v26 = 2048;
      v27 = v21;
      v28 = 2048;
      v29 = 40;
      _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *v15 = &off_24D57AFE8;
  v15[1] = v10;
  v15[2] = v11;
  v15[3] = v12;
  v15[4] = v13;
  Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v14, 40);
  atomic_store(0, (unsigned __int8 *)(v14 + 40));

}

void sub_216569344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v13;

  if (a2)
  {
    __cxa_free_exception(v13);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v12 + 8);
    __cxa_end_catch();
    JUMPOUT(0x216569244);
  }
  _Unwind_Resume(exception_object);
}

id *Phase::Dispatch::ExternalStreamClientDirectDispatcher::RemoveExternalStream(NSUUID *,NSUUID *,void({block_pointer})(NSError *))::$_0::~$_0(id *a1)
{

  return a1;
}

void Phase::Dispatch::ExternalStreamClientDirectDispatcher::ClaimControlOfExternalStreamUUID(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  Phase::Logger *InstancePtr;
  NSObject *v18;
  std::runtime_error *exception;
  BOOL v20;
  unint64_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(id *)(a1 + 48);
  v11 = v7;
  v12 = _Block_copy(v8);
  v13 = _Block_copy(v9);
  v14 = **(_QWORD **)(a1 + 16);
  v21 = 0;
  v20 = 1;
  v15 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v14, 48, &v21, &v20);
  if (!v15)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v18 = objc_retainAutorelease(**(id **)(v14 + 48));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v23 = "CommandQueue.hpp";
      v24 = 1024;
      v25 = 100;
      _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v20)
  {
    v16 = objc_retainAutorelease(**(id **)(v14 + 48));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v23 = "CommandQueue.hpp";
      v24 = 1024;
      v25 = 89;
      v26 = 2048;
      v27 = v21;
      v28 = 2048;
      v29 = 48;
      _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *v15 = &off_24D57B010;
  v15[1] = v10;
  v15[2] = v11;
  v15[3] = a1;
  v15[4] = v12;
  v15[5] = v13;
  Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v14, 48);
  atomic_store(0, (unsigned __int8 *)(v14 + 40));

}

void sub_21656969C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  void *v14;

  if (a2)
  {
    __cxa_free_exception(v14);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v13 + 8);
    __cxa_end_catch();
    JUMPOUT(0x216569598);
  }
  _Unwind_Resume(exception_object);
}

id *Phase::Dispatch::ExternalStreamClientDirectDispatcher::ClaimControlOfExternalStreamUUID(NSUUID *,void({block_pointer})(NSUUID *,NSUUID *,PHASEExternalStreamState),void({block_pointer})(Phase::UniqueObjectId,NSError *))::$_0::~$_0(id *a1)
{

  return a1;
}

void Phase::Dispatch::ExternalStreamClientDirectDispatcher::AbandonControlOfExternalStreamUUID(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  Phase::Logger *InstancePtr;
  NSObject *v16;
  std::runtime_error *exception;
  BOOL v18;
  unint64_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a5;
  v9 = *(id *)(a1 + 48);
  v10 = v7;
  v11 = _Block_copy(v8);
  v12 = **(_QWORD **)(a1 + 16);
  v19 = 0;
  v18 = 1;
  v13 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v12, 32, &v19, &v18);
  if (!v13)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v16 = objc_retainAutorelease(**(id **)(v12 + 48));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v21 = "CommandQueue.hpp";
      v22 = 1024;
      v23 = 100;
      _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v18)
  {
    v14 = objc_retainAutorelease(**(id **)(v12 + 48));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v21 = "CommandQueue.hpp";
      v22 = 1024;
      v23 = 89;
      v24 = 2048;
      v25 = v19;
      v26 = 2048;
      v27 = 32;
      _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *v13 = &off_24D57B060;
  v13[1] = v9;
  v13[2] = v10;
  v13[3] = v11;
  Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v12, 32);
  atomic_store(0, (unsigned __int8 *)(v12 + 40));

}

void sub_2165699BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  void *v12;

  if (a2)
  {
    __cxa_free_exception(v12);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v11 + 8);
    __cxa_end_catch();
    JUMPOUT(0x2165698C4);
  }
  _Unwind_Resume(exception_object);
}

id *Phase::Dispatch::ExternalStreamClientDirectDispatcher::AbandonControlOfExternalStreamUUID(NSUUID *,Phase::UniqueObjectId,void({block_pointer})(NSError *))::$_0::~$_0(id *a1)
{

  return a1;
}

void Phase::Dispatch::ExternalStreamClientDirectDispatcher::PauseExternalStream(uint64_t a1, void *a2, void *a3, char a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  _DWORD *v17;
  NSObject *v18;
  Phase::Logger *InstancePtr;
  NSObject *v20;
  std::runtime_error *exception;
  BOOL v22;
  unint64_t v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = *(id *)(a1 + 48);
  v13 = v9;
  v14 = v10;
  v15 = _Block_copy(v11);
  v16 = **(_QWORD **)(a1 + 16);
  v23 = 0;
  v22 = 1;
  v17 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v16, 48, &v23, &v22);
  if (!v17)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v20 = objc_retainAutorelease(**(id **)(v16 + 48));
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v25 = "CommandQueue.hpp";
      v26 = 1024;
      v27 = 100;
      _os_log_impl(&dword_2164CC000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v22)
  {
    v18 = objc_retainAutorelease(**(id **)(v16 + 48));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v25 = "CommandQueue.hpp";
      v26 = 1024;
      v27 = 89;
      v28 = 2048;
      v29 = v23;
      v30 = 2048;
      v31 = 48;
      _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(_QWORD *)v17 = &off_24D57B088;
  *((_QWORD *)v17 + 1) = v12;
  *((_QWORD *)v17 + 2) = v13;
  *((_QWORD *)v17 + 3) = v14;
  *((_BYTE *)v17 + 32) = a4;
  *((_QWORD *)v17 + 5) = v15;
  Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v16, 48);
  atomic_store(0, (unsigned __int8 *)(v16 + 40));

}

void sub_216569D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  void *v14;

  if (a2)
  {
    __cxa_free_exception(v14);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v13 + 8);
    __cxa_end_catch();
    JUMPOUT(0x216569C0CLL);
  }
  _Unwind_Resume(exception_object);
}

id *Phase::Dispatch::ExternalStreamClientDirectDispatcher::PauseExternalStream(NSUUID *,NSUUID *,BOOL,void({block_pointer})(NSError *))::$_0::~$_0(id *a1)
{

  return a1;
}

void Phase::Dispatch::ExternalStreamClientDirectDispatcher::GatherDebugInformation(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  Phase::Logger *InstancePtr;
  NSObject *v10;
  std::runtime_error *exception;
  BOOL v12;
  unint64_t v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = *(id *)(a1 + 48);
  v5 = _Block_copy(v3);
  v6 = **(_QWORD **)(a1 + 16);
  v13 = 0;
  v12 = 1;
  v7 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v6, 24, &v13, &v12);
  if (!v7)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v10 = objc_retainAutorelease(**(id **)(v6 + 48));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v15 = "CommandQueue.hpp";
      v16 = 1024;
      v17 = 100;
      _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v12)
  {
    v8 = objc_retainAutorelease(**(id **)(v6 + 48));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v15 = "CommandQueue.hpp";
      v16 = 1024;
      v17 = 89;
      v18 = 2048;
      v19 = v13;
      v20 = 2048;
      v21 = 24;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *v7 = &off_24D57B0B0;
  v7[1] = v4;
  v7[2] = v5;
  Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v6, 24);
  atomic_store(0, (unsigned __int8 *)(v6 + 40));

}

void sub_21656A004(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2 + 8);
    __cxa_end_catch();
    JUMPOUT(0x216569F18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Dispatch::ExternalStreamClientDirectDispatcher::Update(Phase::Dispatch::ExternalStreamClientDirectDispatcher *this)
{
  return Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this + 8);
}

uint64_t Phase::Dispatch::ExternalStreamClientDirectDispatcher::GetTransactionBuffer(Phase::Dispatch::ExternalStreamClientDirectDispatcher *this)
{
  return 0;
}

id *Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::AddExternalOutputStream(NSUUID *,NSUUID *,PHASEExternalOutputStreamDefinition *,BOOL,int({block_pointer})(BOOL *,AudioTimeStamp const*,unsigned int,AudioBufferList *),void({block_pointer})(NSError *))::$_0,void>::~LambdaFunction(id *a1)
{

  return a1;
}

void Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::AddExternalOutputStream(NSUUID *,NSUUID *,PHASEExternalOutputStreamDefinition *,BOOL,int({block_pointer})(BOOL *,AudioTimeStamp const*,unsigned int,AudioBufferList *),void({block_pointer})(NSError *))::$_0,void>::~LambdaFunction(id *a1)
{

  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::AddExternalOutputStream(NSUUID *,NSUUID *,PHASEExternalOutputStreamDefinition *,BOOL,int({block_pointer})(BOOL *,AudioTimeStamp const*,unsigned int,AudioBufferList *),void({block_pointer})(NSError *))::$_0,void>::operator()(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "addExternalOutputStreamGroupID:streamID:attributedTo:definition:startsPaused:renderBlock:withCallback:", *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

id *Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::RemoveExternalStream(NSUUID *,NSUUID *,void({block_pointer})(NSError *))::$_0,void>::~LambdaFunction(id *a1)
{

  return a1;
}

void Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::RemoveExternalStream(NSUUID *,NSUUID *,void({block_pointer})(NSError *))::$_0,void>::~LambdaFunction(id *a1)
{

  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::RemoveExternalStream(NSUUID *,NSUUID *,void({block_pointer})(NSError *))::$_0,void>::operator()(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "removeExternalOutputStreamGroupID:streamID:withCallback:", *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

id *Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::ClaimControlOfExternalStreamUUID(NSUUID *,void({block_pointer})(NSUUID *,NSUUID *,PHASEExternalStreamState),void({block_pointer})(Phase::UniqueObjectId,NSError *))::$_0,void>::~LambdaFunction(id *a1)
{

  return a1;
}

void Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::ClaimControlOfExternalStreamUUID(NSUUID *,void({block_pointer})(NSUUID *,NSUUID *,PHASEExternalStreamState),void({block_pointer})(Phase::UniqueObjectId,NSError *))::$_0,void>::~LambdaFunction(id *a1)
{

  JUMPOUT(0x2199F9D70);
}

void Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::ClaimControlOfExternalStreamUUID(NSUUID *,void({block_pointer})(NSUUID *,NSUUID *,PHASEExternalStreamState),void({block_pointer})(Phase::UniqueObjectId,NSError *))::$_0,void>::operator()(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v1 = *(void **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 56);
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 3221225472;
  v5[2] = ___ZZN5Phase8Dispatch36ExternalStreamClientDirectDispatcher32ClaimControlOfExternalStreamUUIDEP6NSUUIDU13block_pointerFvS3_S3_24PHASEExternalStreamStateEU13block_pointerFvNS_14UniqueObjectIdEP7NSErrorEENK3__0clEv_block_invoke;
  v5[3] = &unk_24D57B030;
  v6 = *(id *)(a1 + 40);
  objc_msgSend(v1, "claimControlOfExternalStreamGroupID:attributedTo:stateChangeBlock:withCallback:", v2, v4, v3, v5);

}

void sub_21656A380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void ___ZZN5Phase8Dispatch36ExternalStreamClientDirectDispatcher32ClaimControlOfExternalStreamUUIDEP6NSUUIDU13block_pointerFvS3_S3_24PHASEExternalStreamStateEU13block_pointerFvNS_14UniqueObjectIdEP7NSErrorEENK3__0clEv_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD v5[2];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  MEMORY[0x2199FA6B8](v5);
  (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v4 + 16))(v4, v5[0], v5[1], v3);

}

void sub_21656A3E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id *Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::AbandonControlOfExternalStreamUUID(NSUUID *,Phase::UniqueObjectId,void({block_pointer})(NSError *))::$_0,void>::~LambdaFunction(id *a1)
{

  return a1;
}

void Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::AbandonControlOfExternalStreamUUID(NSUUID *,Phase::UniqueObjectId,void({block_pointer})(NSError *))::$_0,void>::~LambdaFunction(id *a1)
{

  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::AbandonControlOfExternalStreamUUID(NSUUID *,Phase::UniqueObjectId,void({block_pointer})(NSError *))::$_0,void>::operator()(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "abandonControlOfExternalStreamGroupID:withCallback:", *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

id *Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::PauseExternalStream(NSUUID *,NSUUID *,BOOL,void({block_pointer})(NSError *))::$_0,void>::~LambdaFunction(id *a1)
{

  return a1;
}

void Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::PauseExternalStream(NSUUID *,NSUUID *,BOOL,void({block_pointer})(NSError *))::$_0,void>::~LambdaFunction(id *a1)
{

  JUMPOUT(0x2199F9D70);
}

void Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::PauseExternalStream(NSUUID *,NSUUID *,BOOL,void({block_pointer})(NSError *))::$_0,void>::operator()(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;

  v2 = *(void **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned __int8 *)(a1 + 32);
  v7 = 0;
  objc_msgSend(v2, "setPauseExternalOutputStreamGroupID:streamID:isPaused:error:", v3, v4, v5, &v7);
  v6 = v7;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_21656A574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::GatherDebugInformation(void({block_pointer})(NSDictionary *,NSError *))::$_0,void>::~LambdaFunction(uint64_t a1)
{

  return a1;
}

void Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::GatherDebugInformation(void({block_pointer})(NSDictionary *,NSError *))::$_0,void>::~LambdaFunction(uint64_t a1)
{

  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::LambdaFunction<Phase::Dispatch::ExternalStreamClientDirectDispatcher::GatherDebugInformation(void({block_pointer})(NSDictionary *,NSError *))::$_0,void>::operator()(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "gatherDebugInformation:", *(_QWORD *)(a1 + 16));
}

id Phase::Dispatch::ExternalStreamResponseCodeToError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[2];

  v3 = 0;
  v36[1] = *MEMORY[0x24BDAC8D0];
  v23 = a2;
  v24 = a3;
  if (a1 > 1346924645)
  {
    if (a1 == 1346924646)
    {
      v25 = *MEMORY[0x24BDD0FC8];
      v16 = (void *)MEMORY[0x24BDD17C8];
      v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", &v23);
      objc_msgSend(v16, "stringWithFormat:", CFSTR("failed to pause/resume stream %@"), v17, v23, v24, v25);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = v18;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
      v8 = objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346924646, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      goto LABEL_14;
    }
    if (a1 == 1346925413)
    {
      v33 = *MEMORY[0x24BDD0FC8];
      v19 = (void *)MEMORY[0x24BDD17C8];
      v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", &v23);
      objc_msgSend(v19, "stringWithFormat:", CFSTR("stream %@ already exists"), v20, v23, v24);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = v21;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1);
      v8 = objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346925413, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      goto LABEL_14;
    }
    v4 = 0;
    if (a1 == 1346925939)
    {
      v27 = *MEMORY[0x24BDD0FC8];
      v10 = (void *)MEMORY[0x24BDD17C8];
      v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", &v23);
      objc_msgSend(v10, "stringWithFormat:", CFSTR("stream %@ not claimed"), v11, v23, v24);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = v12;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
      v8 = objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346925939, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      goto LABEL_14;
    }
  }
  else
  {
    if (a1 == 1346921331)
    {
      v29 = *MEMORY[0x24BDD0FC8];
      v13 = (void *)MEMORY[0x24BDD17C8];
      v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", &v23);
      objc_msgSend(v13, "stringWithFormat:", CFSTR("stream %@ already claimed"), v14, v23, v24);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = v15;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
      v8 = objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346921331, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      goto LABEL_14;
    }
    if (a1 == 1346922849)
    {
      v35 = *MEMORY[0x24BDD0FC8];
      v36[0] = CFSTR("invalid arguments");
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v36, &v35, 1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346922849, v3);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v4 = 0;
      if (a1 == 1346924147)
      {
        v31 = *MEMORY[0x24BDD0FC8];
        v5 = (void *)MEMORY[0x24BDD17C8];
        v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", &v23);
        objc_msgSend(v5, "stringWithFormat:", CFSTR("stream %@ does not exist"), v6, v23, v24);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = v7;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
        v8 = objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346924147, v8);
        v9 = objc_claimAutoreleasedReturnValue();
LABEL_14:
        v4 = (void *)v9;
        v3 = (void *)v8;
      }
    }
  }

  return v4;
}

void sub_21656AA94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t Phase::Dispatch::GeometryClientCommandProcessor::GeometryClientCommandProcessor(uint64_t a1, uint64_t a2)
{
  float *v4;
  id v5;
  void *v6;
  uint64_t (*v8)(Phase::Dispatch::GeometryClientCommandProcessor *, _QWORD *);
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_24D57ACB8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (float *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v5 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v6 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v5;

  *(_QWORD *)a1 = &off_24D57B0D8;
  *(_QWORD *)(a1 + 80) = a2;
  v8 = Phase::Dispatch::GeometryClientCommandProcessor::BeginTrackingSourceCallback;
  v9 = 0;
  v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::GeometryServerMessageType>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,std::hash<Phase::Dispatch::GeometryServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::GeometryServerMessageType,Phase::Dispatch::GeometryServerMessageType,std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 1u, 1, (uint64_t)&v8);
  v8 = Phase::Dispatch::GeometryClientCommandProcessor::BeginTrackingAudibleGeometryCallback;
  v9 = 0;
  v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::GeometryServerMessageType>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,std::hash<Phase::Dispatch::GeometryServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::GeometryServerMessageType,Phase::Dispatch::GeometryServerMessageType,std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 2u, 2, (uint64_t)&v8);
  v8 = Phase::Dispatch::GeometryClientCommandProcessor::GetShapeInfoCallback;
  v9 = 0;
  v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::GeometryServerMessageType>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,std::hash<Phase::Dispatch::GeometryServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::GeometryServerMessageType,Phase::Dispatch::GeometryServerMessageType,std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 3u, 3, (uint64_t)&v8);
  v8 = Phase::Dispatch::GeometryClientCommandProcessor::GetVoxelsCallback;
  v9 = 0;
  v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::GeometryServerMessageType>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,std::hash<Phase::Dispatch::GeometryServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::GeometryServerMessageType,Phase::Dispatch::GeometryServerMessageType,std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 4u, 4, (uint64_t)&v8);
  v8 = Phase::Dispatch::GeometryClientCommandProcessor::BeginTrackingRayTraceIntersectionsCallback;
  v9 = 0;
  v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::GeometryServerMessageType>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,std::hash<Phase::Dispatch::GeometryServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::GeometryServerMessageType,Phase::Dispatch::GeometryServerMessageType,std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 5u, 5, (uint64_t)&v8);
  v8 = Phase::Dispatch::GeometryClientCommandProcessor::BeginTrackingEnergyHistogramCallback;
  v9 = 0;
  v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::GeometryServerMessageType>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,std::hash<Phase::Dispatch::GeometryServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::GeometryServerMessageType,Phase::Dispatch::GeometryServerMessageType,std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 6u, 6, (uint64_t)&v8);
  v8 = Phase::Dispatch::GeometryClientCommandProcessor::BeginTrackingImageSourceLocationsCallback;
  v9 = 0;
  v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::GeometryServerMessageType>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,std::hash<Phase::Dispatch::GeometryServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::GeometryServerMessageType,Phase::Dispatch::GeometryServerMessageType,std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 7u, 7, (uint64_t)&v8);
  v8 = Phase::Dispatch::GeometryClientCommandProcessor::BeginTrackingListenerEarlyResponseMetadataCallback;
  v9 = 0;
  v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::GeometryServerMessageType>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,std::hash<Phase::Dispatch::GeometryServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::GeometryServerMessageType,Phase::Dispatch::GeometryServerMessageType,std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 8u, 8, (uint64_t)&v8);
  v8 = Phase::Dispatch::GeometryClientCommandProcessor::BeginTrackingListenerLateReverbMetadataCallback;
  v9 = 0;
  v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::GeometryServerMessageType>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,std::hash<Phase::Dispatch::GeometryServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::GeometryServerMessageType,Phase::Dispatch::GeometryServerMessageType,std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 9u, 9, (uint64_t)&v8);
  return a1;
}

void sub_21656ACE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  Phase::Dispatch::TransactionExecutor<Phase::Dispatch::GeometryServerMessageType>::~TransactionExecutor(v1);
  _Unwind_Resume(a1);
}

void sub_21656AD14()
{
  uint64_t v0;
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v1);
  JUMPOUT(0x21656AD0CLL);
}

uint64_t Phase::Dispatch::GeometryClientCommandProcessor::BeginTrackingSourceCallback(Phase::Dispatch::GeometryClientCommandProcessor *this, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 336))(*((_QWORD *)this + 10), *a2, a2[1]);
}

uint64_t Phase::Dispatch::GeometryClientCommandProcessor::BeginTrackingAudibleGeometryCallback(Phase::Dispatch::GeometryClientCommandProcessor *this, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 360))(*((_QWORD *)this + 10), *a2, a2[1]);
}

uint64_t Phase::Dispatch::GeometryClientCommandProcessor::GetShapeInfoCallback(Phase::Dispatch::GeometryClientCommandProcessor *this, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 384))(*((_QWORD *)this + 10), *a2, a2[1]);
}

uint64_t Phase::Dispatch::GeometryClientCommandProcessor::GetVoxelsCallback(Phase::Dispatch::GeometryClientCommandProcessor *this, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 400))(*((_QWORD *)this + 10), *a2, a2[1]);
}

uint64_t Phase::Dispatch::GeometryClientCommandProcessor::BeginTrackingRayTraceIntersectionsCallback(Phase::Dispatch::GeometryClientCommandProcessor *this, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 424))(*((_QWORD *)this + 10), *a2, a2[1]);
}

uint64_t Phase::Dispatch::GeometryClientCommandProcessor::BeginTrackingEnergyHistogramCallback(Phase::Dispatch::GeometryClientCommandProcessor *this, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 448))(*((_QWORD *)this + 10), *a2, a2[1]);
}

uint64_t Phase::Dispatch::GeometryClientCommandProcessor::BeginTrackingImageSourceLocationsCallback(Phase::Dispatch::GeometryClientCommandProcessor *this, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 472))(*((_QWORD *)this + 10), *a2, a2[1]);
}

uint64_t Phase::Dispatch::GeometryClientCommandProcessor::BeginTrackingListenerEarlyResponseMetadataCallback(Phase::Dispatch::GeometryClientCommandProcessor *this, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 496))(*((_QWORD *)this + 10), *a2, a2[1]);
}

uint64_t Phase::Dispatch::GeometryClientCommandProcessor::BeginTrackingListenerLateReverbMetadataCallback(Phase::Dispatch::GeometryClientCommandProcessor *this, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 520))(*((_QWORD *)this + 10), *a2, a2[1]);
}

void std::__hash_table<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::hash<Phase::Dispatch::GeometryServerMessageType>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,true>,std::__unordered_map_equal<Phase::Dispatch::GeometryServerMessageType,std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>,std::equal_to<Phase::Dispatch::GeometryServerMessageType>,std::hash<Phase::Dispatch::GeometryServerMessageType>,true>,std::allocator<std::__hash_value_type<Phase::Dispatch::GeometryServerMessageType,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::Dispatch::GeometryServerMessageType,Phase::Dispatch::GeometryServerMessageType,std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>>(float *a1, unsigned int a2, int a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;

  v8 = a2;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & a2;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t *)*i)
      {
        v13 = i[1];
        if (v13 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = operator new(0x38uLL);
  *v14 = 0;
  v14[1] = v8;
  *((_DWORD *)v14 + 4) = a3;
  v14[6] = 0;
  v15 = (char *)operator new(0x20uLL);
  *(_QWORD *)v15 = &off_24D57B100;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)a4;
  *((_QWORD *)v15 + 3) = *(_QWORD *)(a4 + 16);
  v14[6] = v15;
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    v8 = v4;
    goto LABEL_64;
  }
  v18 = 1;
  if (v9 >= 3)
    v18 = (v9 & (v9 - 1)) != 0;
  v19 = v18 | (2 * v9);
  v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20)
    prime = (int8x8_t)v20;
  else
    prime = (int8x8_t)v19;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v9 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v9)
  {
    if (*(_QWORD *)&prime >= v9)
      goto LABEL_60;
    v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v9 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
    {
      v28 = std::__next_prime(v28);
    }
    else
    {
      v30 = 1 << -(char)__clz(v28 - 1);
      if (v28 >= 2)
        v28 = v30;
    }
    if (*(_QWORD *)&prime <= v28)
      prime = (int8x8_t)v28;
    if (*(_QWORD *)&prime >= v9)
    {
      v9 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v36 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v36)
        operator delete(v36);
      v9 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v22 = operator new(8 * *(_QWORD *)&prime);
  v23 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v22;
  if (v23)
    operator delete(v23);
  v24 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
  while (*(_QWORD *)&prime != v24);
  v25 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v25)
  {
    v26 = v25[1];
    v27 = (uint8x8_t)vcnt_s8(prime);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      if (v26 >= *(_QWORD *)&prime)
        v26 %= *(_QWORD *)&prime;
    }
    else
    {
      v26 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = a1 + 4;
    v31 = (_QWORD *)*v25;
    if (*v25)
    {
      do
      {
        v32 = v31[1];
        if (v27.u32[0] > 1uLL)
        {
          if (v32 >= *(_QWORD *)&prime)
            v32 %= *(_QWORD *)&prime;
        }
        else
        {
          v32 &= *(_QWORD *)&prime - 1;
        }
        if (v32 != v26)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
            goto LABEL_56;
          }
          *v25 = *v31;
          *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
          v31 = v25;
        }
        v32 = v26;
LABEL_56:
        v25 = v31;
        v31 = (_QWORD *)*v31;
        v26 = v32;
      }
      while (v31);
    }
  }
  v9 = (unint64_t)prime;
LABEL_60:
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= v8)
      v8 %= v9;
  }
  else
  {
    v8 = ((_DWORD)v9 - 1) & v8;
  }
LABEL_64:
  v33 = *(_QWORD **)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v34)
  {
    *v14 = *v34;
LABEL_72:
    *v34 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v33[v8] = a1 + 4;
  if (*v14)
  {
    v35 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9)
        v35 %= v9;
    }
    else
    {
      v35 &= v9 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_21656B294(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D57B100;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D57B100;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::Dispatch::GeometryClientCommandProcessor::*)(void const*),Phase::Dispatch::GeometryClientCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::ListenerManager>(Phase::Logger *a1, int a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  NSObject *v7;
  std::logic_error *exception;
  NSObject *v9;
  std::string *v10;
  std::logic_error *v11;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 7) - v3) >> 5))
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 112;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  v4 = *(uint64_t (**)(uint64_t))(v3 + 32 * a2);
  if (!v4)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 121;
      v17 = 1024;
      v18 = a2;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  v5 = v4(3);
  if (!v5)
    std::__throw_bad_any_cast[abi:ne180100]();
  return *(_QWORD *)v5;
}

void sub_21656B588(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21656B678(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_21656B698(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::CreateEntity(uint64_t a1, int a2)
{
  Phase::Logger *v4;
  uint64_t v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = (Phase::Logger *)Phase::Geometry::EntityFactory::Create(a2, 0, &v11);
  if (v11)
  {
    v5 = Phase::Geometry::SystemScheduler::AddToDatabase(*(_QWORD *)(a1 + 8) + 2352, &v11);
    if (a2 == 2)
      Phase::Controller::ListenerManager::AddListener(*(_QWORD *)(a1 + 16), v5);
  }
  else
  {
    v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4) + 832));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "DispatcherGeometryClientDirect.mm";
      v15 = 1024;
      v16 = 330;
      _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to create geo entity.", buf, 0x12u);
    }
    v5 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v5;
}

void sub_21656B80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::CreateMedium(uint64_t a1, uint64_t a2)
{
  Phase::Logger *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  int v9;
  void *v10;
  float v11;
  float v12;
  float v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t j;
  void *v20;
  int v21;
  void *v22;
  int v23;
  float *v24;
  void *v25;
  float *v26;
  float *v27;
  float v28;
  float v29;
  uint64_t v30;
  NSObject *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  _OWORD v39[2];
  int v40;
  void *__p[3];
  void *v42;
  void *v43;
  _BYTE buf[36];
  int v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  memset(v39, 0, sizeof(v39));
  v40 = 1065353216;
  v46 = "MediumDataMapSize";
  v47 = 17;
  *(_DWORD *)buf = 4;
  v45 = 1;
  Phase::UnorderedStringMap<Phase::OptionsValue>::Set((uint64_t)v39, (uint64_t)&v46, (uint64_t)buf);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
  v4 = (Phase::Logger *)Phase::Geometry::MediumFactory::Create(*(_QWORD *)(a1 + 8) + 496, 1u, &v37);
  if (v37)
  {
    v5 = **(_QWORD **)(v37 + 40);
    v6 = objc_msgSend(*(id *)a2, "count");
    v36 = a1;
    *(_OWORD *)(v5 + 124) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_DWORD *)(v5 + 140) = v6;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_OWORD *)(v5 + 208) = 0u;
    *(_OWORD *)(v5 + 224) = 0u;
    *(_OWORD *)(v5 + 240) = 0u;
    *(_OWORD *)(v5 + 252) = 0u;
    *(_DWORD *)(v5 + 268) = v6;
    if (v6)
    {
      for (i = 0; i != v6; ++i)
      {
        objc_msgSend(*(id *)a2, "objectAtIndexedSubscript:", i);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "frequency");
        *(_DWORD *)(v5 + 4 * i + 16) = v9;

        objc_msgSend(*(id *)a2, "objectAtIndexedSubscript:", i);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "value");
        v12 = v11;

        v13 = 0.0;
        if (v12 != 1.0)
        {
          v14 = 1;
          if (v12 > 0.0)
            *(float *)&v14 = v12;
          v13 = (float)((float)(logf(*(float *)&v14) * 8.6859) / 10.0) * -10.0;
        }
        *(float *)(v5 + 4 * i + 144) = v13;
      }
    }
    *(_DWORD *)(v5 + 272) = *(_DWORD *)(a2 + 8);
    v15 = 1;
    while (1)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v37 + 40) + 40 * v15);
      v17 = qword_2166F7D40[v15 - 1];
      v18 = objc_msgSend(*(id *)a2, "count", sGetFrequencies((uint64_t)buf, v17));
      std::vector<float>::vector(&v46, v18);
      std::vector<float>::vector(&v42, v18);
      if (v18)
      {
        for (j = 0; j != v18; ++j)
        {
          objc_msgSend(*(id *)a2, "objectAtIndexedSubscript:", j);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "frequency");
          *((_DWORD *)v46 + j) = v21;

          objc_msgSend(*(id *)a2, "objectAtIndexedSubscript:", j);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "value");
          *((_DWORD *)v42 + j) = v23;

        }
      }
      std::vector<float>::vector(__p, v17);
      Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Square<float>,&float Phase::SquareRoot<float>>((float *)v46, (float *)v47, (uint64_t)v42, (uint64_t)v43, *(float **)buf, *(float **)&buf[8], (uint64_t)__p[0]);
      *(_OWORD *)(v16 + 144) = 0u;
      v24 = (float *)(v16 + 144);
      *(_OWORD *)(v16 + 124) = 0u;
      *(_OWORD *)(v16 + 96) = 0u;
      *(_OWORD *)(v16 + 112) = 0u;
      *(_OWORD *)(v16 + 64) = 0u;
      *(_OWORD *)(v16 + 80) = 0u;
      *(_OWORD *)(v16 + 32) = 0u;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_OWORD *)(v16 + 16) = 0u;
      *(_DWORD *)(v16 + 140) = v17;
      *(_OWORD *)(v16 + 160) = 0u;
      *(_OWORD *)(v16 + 176) = 0u;
      *(_OWORD *)(v16 + 192) = 0u;
      *(_OWORD *)(v16 + 208) = 0u;
      *(_OWORD *)(v16 + 224) = 0u;
      *(_OWORD *)(v16 + 240) = 0u;
      *(_OWORD *)(v16 + 252) = 0u;
      *(_DWORD *)(v16 + 268) = v17;
      v25 = __p[0];
      if (v17)
        break;
      *(_DWORD *)(v16 + 272) = *(_DWORD *)(a2 + 8);
      if (v25)
        goto LABEL_22;
LABEL_23:
      if (v42)
      {
        v43 = v42;
        operator delete(v42);
      }
      if (v46)
      {
        v47 = (uint64_t)v46;
        operator delete(v46);
      }
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      if (++v15 == 4)
      {
        v30 = Phase::Geometry::SystemScheduler::AddToDatabase(*(_QWORD *)(v36 + 8) + 2352, &v37);
        goto LABEL_34;
      }
    }
    v26 = *(float **)buf;
    v27 = (float *)__p[0];
    do
    {
      *(v24 - 32) = *v26;
      v28 = 0.0;
      if (*v27 != 1.0)
      {
        LODWORD(v29) = 1;
        if (*v27 > 0.0)
          v29 = *v27;
        v28 = (float)((float)(logf(v29) * 8.6859) / 10.0) * -10.0;
      }
      *v24++ = v28;
      ++v27;
      ++v26;
      --v17;
    }
    while (v17);
    *(_DWORD *)(v16 + 272) = *(_DWORD *)(a2 + 8);
LABEL_22:
    __p[1] = v25;
    operator delete(v25);
    goto LABEL_23;
  }
  v31 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4) + 832));
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DispatcherGeometryClientDirect.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 356;
    _os_log_impl(&dword_2164CC000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to create geo material.", buf, 0x12u);
  }
  v30 = 0;
LABEL_34:
  v32 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)v39);
  return v30;
}

void sub_21656BCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint8_t buf,uint64_t a32)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::CreateMaterial(uint64_t a1, id *a2)
{
  Phase::Logger *v4;
  unint64_t *v5;
  uint64_t i;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  const char *v14;
  uint64_t v15;
  _OWORD v16[2];
  int v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  memset(v16, 0, sizeof(v16));
  v17 = 1065353216;
  v14 = "MaterialDataMapSize";
  v15 = 19;
  *(_DWORD *)buf = 4;
  v22 = 1;
  Phase::UnorderedStringMap<Phase::OptionsValue>::Set((uint64_t)v16, (uint64_t)&v14, (uint64_t)buf);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
  v4 = (Phase::Logger *)Phase::Geometry::MaterialFactory::Create(*(_QWORD *)(a1 + 8) + 952, 1u, &v14);
  if (v14)
  {
    Phase::Dispatch::sCopyMaterialData(a2, **((_QWORD **)v14 + 5));
    v5 = (unint64_t *)qword_2166F7D40;
    for (i = 40; i != 160; i += 40)
    {
      v7 = *v5++;
      Phase::Dispatch::sConvertMaterialData(a2, *(_QWORD *)(*((_QWORD *)v14 + 5) + i), v7);
    }
    v8 = Phase::Geometry::SystemScheduler::AddToDatabase(*(_QWORD *)(a1 + 8) + 2352, (uint64_t *)&v14);
  }
  else
  {
    v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4) + 832));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v19 = "DispatcherGeometryClientDirect.mm";
      v20 = 1024;
      v21 = 396;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to create geo material.", buf, 0x12u);
    }
    v8 = 0;
  }
  v10 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v11 = (unint64_t *)(v15 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)v16);
  return v8;
}

void sub_21656C024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_21656C060(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  Phase::Logger *v17;
  NSObject *v18;

  if (a2)
  {
    v17 = (Phase::Logger *)__cxa_begin_catch(a1);
    v18 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v17) + 832));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = "DispatcherGeometryClientDirect.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 415;
      _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to create geo material.", (uint8_t *)&buf, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x21656BFACLL);
  }
  JUMPOUT(0x21656C058);
}

void sub_21656C0E8()
{
  __cxa_end_catch();
  JUMPOUT(0x21656C030);
}

void sub_21656C0F4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x21656C058);
}

void Phase::Dispatch::sCopyMaterialData(id *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  void *v6;
  int v7;
  void *v8;
  float v9;
  float v10;
  float v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  uint64_t v24;
  uint64_t k;
  void *v26;
  void *v27;
  int v28;
  void *v29;
  void *v30;
  int v31;

  v4 = objc_msgSend(*a1, "count");
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 124) = 0u;
  *(_DWORD *)(a2 + 140) = v4;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 252) = 0u;
  *(_DWORD *)(a2 + 268) = v4;
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      objc_msgSend(*a1, "objectAtIndexedSubscript:", i);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "frequency");
      *(_DWORD *)(a2 + 4 * i + 16) = v7;

      objc_msgSend(*a1, "objectAtIndexedSubscript:", i);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "value");
      v10 = v9;

      v11 = 0.0;
      if (v10 != 1.0)
      {
        v12 = 1;
        if (v10 > 0.0)
          *(float *)&v12 = v10;
        v11 = (float)((float)(logf(*(float *)&v12) * 8.6859) / 10.0) * -10.0;
      }
      *(float *)(a2 + 4 * i + 144) = v11;
    }
  }
  objc_msgSend(a1[1], "measuredDepth");
  *(_DWORD *)(a2 + 272) = v13;
  objc_msgSend(a1[2], "absorptionCoefficients");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "count");

  *(_OWORD *)(a2 + 396) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_DWORD *)(a2 + 412) = v15;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_OWORD *)(a2 + 464) = 0u;
  *(_OWORD *)(a2 + 480) = 0u;
  *(_OWORD *)(a2 + 496) = 0u;
  *(_OWORD *)(a2 + 512) = 0u;
  *(_OWORD *)(a2 + 524) = 0u;
  *(_DWORD *)(a2 + 540) = v15;
  if (v15)
  {
    for (j = 0; j != v15; ++j)
    {
      objc_msgSend(a1[2], "absorptionCoefficients");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "objectAtIndexedSubscript:", j);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "frequency");
      *(_DWORD *)(a2 + 4 * j + 288) = v19;

      objc_msgSend(a1[2], "absorptionCoefficients");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "objectAtIndexedSubscript:", j);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "value");
      *(_DWORD *)(a2 + 4 * j + 416) = v22;

    }
  }
  objc_msgSend(a1[3], "scatteringCoefficients");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v23, "count");

  *(_OWORD *)(a2 + 652) = 0u;
  *(_OWORD *)(a2 + 624) = 0u;
  *(_OWORD *)(a2 + 640) = 0u;
  *(_OWORD *)(a2 + 592) = 0u;
  *(_OWORD *)(a2 + 608) = 0u;
  *(_OWORD *)(a2 + 560) = 0u;
  *(_OWORD *)(a2 + 576) = 0u;
  *(_OWORD *)(a2 + 544) = 0u;
  *(_DWORD *)(a2 + 668) = v24;
  *(_OWORD *)(a2 + 672) = 0u;
  *(_OWORD *)(a2 + 688) = 0u;
  *(_OWORD *)(a2 + 704) = 0u;
  *(_OWORD *)(a2 + 720) = 0u;
  *(_OWORD *)(a2 + 736) = 0u;
  *(_OWORD *)(a2 + 752) = 0u;
  *(_OWORD *)(a2 + 768) = 0u;
  *(_OWORD *)(a2 + 780) = 0u;
  *(_DWORD *)(a2 + 796) = v24;
  if (v24)
  {
    for (k = 0; k != v24; ++k)
    {
      objc_msgSend(a1[3], "scatteringCoefficients");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "objectAtIndexedSubscript:", k);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "frequency");
      *(_DWORD *)(a2 + 4 * k + 544) = v28;

      objc_msgSend(a1[3], "scatteringCoefficients");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "objectAtIndexedSubscript:", k);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "value");
      *(_DWORD *)(a2 + 4 * k + 672) = v31;

    }
  }
}

void sub_21656C3D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::Dispatch::sConvertMaterialData(id *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t i;
  void *v8;
  float v9;
  void *v10;
  int v11;
  float *v12;
  float *v13;
  unint64_t v14;
  float *v15;
  float v16;
  float v17;
  int v18;
  void *v19;
  unint64_t v20;
  uint64_t j;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  void *v26;
  int v27;
  _DWORD *v28;
  float *v29;
  unint64_t v30;
  int *v31;
  int v32;
  int v33;
  void *v34;
  unint64_t v35;
  uint64_t k;
  void *v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  int v42;
  uint64_t v43;
  float *v44;
  _DWORD *v45;
  uint64_t v46;
  void *__p[3];
  void *v48;
  void *v49;
  void *v50;
  float *v51;
  void *v52[3];
  void *v53;
  void *v54;
  void *v55;
  float *v56;
  void *v57[3];
  void *v58;
  void *v59;
  float *v60;
  float *v61;
  float *v62;
  float *v63;

  if (a3 <= 2)
    std::terminate();
  v6 = objc_msgSend(*a1, "count", sGetFrequencies((uint64_t)&v62, a3));
  std::vector<float>::vector(&v60, v6);
  std::vector<float>::vector(&v58, v6);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      objc_msgSend(*a1, "objectAtIndexedSubscript:", i);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "frequency");
      v60[i] = v9;

      objc_msgSend(*a1, "objectAtIndexedSubscript:", i);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "value");
      *((_DWORD *)v58 + i) = v11;

    }
  }
  std::vector<float>::vector(v57, a3);
  Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Square<float>,&float Phase::SquareRoot<float>>(v60, v61, (uint64_t)v58, (uint64_t)v59, v62, v63, (uint64_t)v57[0]);
  *(_OWORD *)(a2 + 144) = 0u;
  v12 = (float *)(a2 + 144);
  *(_OWORD *)(a2 + 124) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 140) = a3;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 252) = 0u;
  *(_DWORD *)(a2 + 268) = a3;
  v13 = v62;
  v14 = a3;
  v15 = (float *)v57[0];
  do
  {
    *(v12 - 32) = *v13;
    v16 = 0.0;
    if (*v15 != 1.0)
    {
      LODWORD(v17) = 1;
      if (*v15 > 0.0)
        v17 = *v15;
      v16 = (float)((float)(logf(v17) * 8.6859) / 10.0) * -10.0;
    }
    *v12++ = v16;
    ++v15;
    ++v13;
    --v14;
  }
  while (v14);
  objc_msgSend(a1[1], "measuredDepth");
  *(_DWORD *)(a2 + 272) = v18;
  objc_msgSend(a1[2], "absorptionCoefficients");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "count");

  std::vector<float>::vector(&v55, v20);
  std::vector<float>::vector(&v53, v20);
  if (v20)
  {
    for (j = 0; j != v20; ++j)
    {
      objc_msgSend(a1[2], "absorptionCoefficients");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "objectAtIndexedSubscript:", j);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "frequency");
      *((_DWORD *)v55 + j) = v24;

      objc_msgSend(a1[2], "absorptionCoefficients");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "objectAtIndexedSubscript:", j);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "value");
      *((_DWORD *)v53 + j) = v27;

    }
  }
  std::vector<float>::vector(v52, a3);
  Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Identity<float>,&float Phase::Identity<float>>((float *)v55, v56, (uint64_t)v53, (uint64_t)v54, v62, v63, (uint64_t)v52[0]);
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 396) = 0u;
  *(_DWORD *)(a2 + 412) = a3;
  v28 = (_DWORD *)(a2 + 416);
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_OWORD *)(a2 + 464) = 0u;
  *(_OWORD *)(a2 + 480) = 0u;
  *(_OWORD *)(a2 + 496) = 0u;
  *(_OWORD *)(a2 + 512) = 0u;
  *(_OWORD *)(a2 + 524) = 0u;
  *(_DWORD *)(a2 + 540) = a3;
  v29 = v62;
  v30 = a3;
  v31 = (int *)v52[0];
  do
  {
    v32 = *(_DWORD *)v29++;
    *(v28 - 32) = v32;
    v33 = *v31++;
    *v28++ = v33;
    --v30;
  }
  while (v30);
  objc_msgSend(a1[3], "scatteringCoefficients");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend(v34, "count");

  std::vector<float>::vector(&v50, v35);
  std::vector<float>::vector(&v48, v35);
  if (v35)
  {
    for (k = 0; k != v35; ++k)
    {
      objc_msgSend(a1[3], "scatteringCoefficients");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "objectAtIndexedSubscript:", k);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "frequency");
      *((_DWORD *)v50 + k) = v39;

      objc_msgSend(a1[3], "scatteringCoefficients");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "objectAtIndexedSubscript:", k);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "value");
      *((_DWORD *)v48 + k) = v42;

    }
  }
  std::vector<float>::vector(__p, a3);
  Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Identity<float>,&float Phase::Identity<float>>((float *)v50, v51, (uint64_t)v48, (uint64_t)v49, v62, v63, (uint64_t)__p[0]);
  v43 = 0;
  *(_OWORD *)(a2 + 624) = 0u;
  *(_OWORD *)(a2 + 640) = 0u;
  *(_OWORD *)(a2 + 592) = 0u;
  *(_OWORD *)(a2 + 608) = 0u;
  *(_OWORD *)(a2 + 560) = 0u;
  *(_OWORD *)(a2 + 576) = 0u;
  *(_OWORD *)(a2 + 544) = 0u;
  *(_OWORD *)(a2 + 652) = 0u;
  *(_DWORD *)(a2 + 668) = a3;
  *(_OWORD *)(a2 + 672) = 0u;
  *(_OWORD *)(a2 + 688) = 0u;
  *(_OWORD *)(a2 + 704) = 0u;
  *(_OWORD *)(a2 + 720) = 0u;
  *(_OWORD *)(a2 + 736) = 0u;
  *(_OWORD *)(a2 + 752) = 0u;
  *(_OWORD *)(a2 + 768) = 0u;
  *(_OWORD *)(a2 + 780) = 0u;
  *(_DWORD *)(a2 + 796) = a3;
  v44 = v62;
  v45 = __p[0];
  do
  {
    v46 = a2 + 4 * v43;
    *(float *)(v46 + 544) = v44[v43];
    *(_DWORD *)(v46 + 672) = v45[v43++];
  }
  while (a3 != v43);
  __p[1] = v45;
  operator delete(v45);
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (v50)
  {
    v51 = (float *)v50;
    operator delete(v50);
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v55)
  {
    v56 = (float *)v55;
    operator delete(v55);
  }
  if (v57[0])
  {
    v57[1] = v57[0];
    operator delete(v57[0]);
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
}

void sub_21656C8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v31;
  void *v33;
  void *v34;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  if (a24)
    operator delete(a24);
  if (a27)
    operator delete(a27);
  if (a30)
    operator delete(a30);
  v33 = *(void **)(v31 - 160);
  if (v33)
  {
    *(_QWORD *)(v31 - 152) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(v31 - 136);
  if (v34)
  {
    *(_QWORD *)(v31 - 128) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::CreateShape(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = Phase::Geometry::ShapeFactory::Create((uint64_t *)(*(_QWORD *)(a1 + 8) + 1200), a2, a3, a4, &v12);
  if (v12)
  {
    v6 = Phase::Geometry::SystemScheduler::AddToDatabase(*(_QWORD *)(a1 + 8) + 2352, &v12);
  }
  else
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v5) + 832));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v15 = "DispatcherGeometryClientDirect.mm";
      v16 = 1024;
      v17 = 434;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to create geo shape.", buf, 0x12u);
    }
    v6 = 0;
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v6;
}

void sub_21656CB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::CreateDirectivityModel(uint64_t a1, unsigned __int8 *a2, int a3)
{
  return Phase::Controller::CreateDirectivityModelHandle(a2, *(_QWORD *)(a1 + 8), a3);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::CreateDistanceModel(uint64_t a1, double *a2)
{
  return Phase::Controller::CreateDistanceModelHandle(a2, *(_QWORD *)(a1 + 8));
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::Copy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Phase::Geometry::SystemScheduler::Copy(*(_QWORD *)(a1 + 8) + 2352, a2, a3);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::GetSceneRoot(Phase::Dispatch::GeometryClientDirectDispatcher *this)
{
  Phase::Logger *v2;
  uint64_t v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = (Phase::Logger *)Phase::Geometry::CreateEntity<Phase::Geometry::Entity>(0, &v9);
  if (v9)
  {
    v3 = Phase::Geometry::SystemScheduler::AddToDatabase(*((_QWORD *)this + 1) + 2352, &v9);
    Phase::Geometry::SystemScheduler::AddChild(*((_QWORD *)this + 1) + 2352, *(_QWORD *)(*((_QWORD *)this + 1) + 1456), v3);
  }
  else
  {
    v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v2) + 832));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v12 = "DispatcherGeometryClientDirect.mm";
      v13 = 1024;
      v14 = 483;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to create client root.", buf, 0x12u);
    }
    v3 = 0;
  }
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v3;
}

void sub_21656CD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::SetMaterial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Phase::Geometry::SystemScheduler::SetMaterial(*(_QWORD *)(a1 + 8) + 2352, a2, a3, a4);
}

void Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(uint64_t a1, uint64_t a2, id *a3)
{
  id v6;
  id v7;
  id v8;
  Phase::Logger *v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  Phase::Logger *v15;
  _QWORD *v16;
  uint8_t *v17;
  uint64_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  _DWORD v24[7];

  *(_QWORD *)&v24[5] = *MEMORY[0x24BDAC8D0];
  v6 = *a3;
  v7 = a3[1];
  v8 = a3[2];
  v9 = (Phase::Logger *)a3[3];
  v10 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v9) + 848));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    v20 = "DispatcherGeometryClientDirect.mm";
    v21 = 1024;
    v22 = 544;
    v23 = 2048;
    *(_QWORD *)v24 = a2;
    _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Updating Material 0x%llx", buf, 0x1Cu);
  }
  v11 = *(_QWORD *)(a1 + 8);
  v12 = v6;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v16 = operator new(0x30uLL);
  *v16 = &off_24D57B3A0;
  v16[1] = v12;
  v16[2] = v13;
  v16[3] = v14;
  v16[4] = v15;
  v16[5] = a2;
  *(_QWORD *)&v24[1] = v16;
  Phase::Geometry::SystemScheduler::RunFunction(v11 + 2352, buf);
  v17 = *(uint8_t **)&v24[1];
  if (*(uint8_t **)&v24[1] == buf)
  {
    v18 = 4;
    v17 = buf;
    goto LABEL_7;
  }
  if (*(_QWORD *)&v24[1])
  {
    v18 = 5;
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
  }

}

void sub_21656CF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  Phase::Dispatch::ExternalStreamClientDirectDispatcher::RemoveExternalStream(NSUUID *,NSUUID *,void({block_pointer})(NSError *))::$_0::~$_0(&a10);
  _Unwind_Resume(a1);
}

void Phase::Dispatch::GeometryClientDirectDispatcher::AddShapes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Phase::Geometry::SystemScheduler::AddShapes(*(_QWORD *)(a1 + 8) + 2352, a2, a3);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::SetSourceGain(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8) + 2352;
  v6[0] = &off_24D57B3E8;
  v6[1] = a2;
  v6[2] = LODWORD(a3);
  v7 = v6;
  Phase::Geometry::SystemScheduler::RunFunction(v3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_21656D01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::SetListenerGain(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8) + 2352;
  v6[0] = &off_24D57B430;
  v6[1] = a2;
  v6[2] = LODWORD(a3);
  v7 = v6;
  Phase::Geometry::SystemScheduler::RunFunction(v3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_21656D0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTarget(uint64_t a1, const void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8) + 2352;
  v5 = operator new(0x2D0uLL);
  *v5 = &off_24D57B4C0;
  memcpy(v5 + 1, a2, 0x2C0uLL);
  v5[89] = v3;
  v9 = v5;
  Phase::Geometry::SystemScheduler::RunFunction(v4, v8);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_21656D204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::SetEnableRoomAcousticParametersTracking(Phase::Dispatch::GeometryClientDirectDispatcher *this, uint64_t a2)
{
  return Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTrackingMode((uint64_t)this, a2 << 63 >> 63);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTrackingMode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8) + 2352;
  v5[0] = &off_24D57B478;
  v5[1] = a2;
  v6 = v5;
  Phase::Geometry::SystemScheduler::RunFunction(v2, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_21656D2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t (***Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticMaximumReverbTime(Phase::Dispatch::GeometryClientDirectDispatcher *this, float a2))()
{
  uint64_t v2;
  uint64_t (***result)();
  uint64_t v4;
  uint64_t (**v5)();
  float v6;
  uint64_t (***v7)();
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 1) + 2352;
  v5 = &off_24D57B508;
  v6 = a2;
  v7 = &v5;
  Phase::Geometry::SystemScheduler::RunFunction(v2, &v5);
  result = v7;
  if (v7 == &v5)
  {
    v4 = 4;
    result = &v5;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (uint64_t (***)())(*result)[v4]();
}

void sub_21656D3BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t (***Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSoftLimiting(Phase::Dispatch::GeometryClientDirectDispatcher *this, char a2))()
{
  uint64_t v2;
  uint64_t (***result)();
  uint64_t v4;
  uint64_t (**v5)();
  char v6;
  uint64_t (***v7)();
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 1) + 2352;
  v5 = &off_24D57B550;
  v6 = a2;
  v7 = &v5;
  Phase::Geometry::SystemScheduler::RunFunction(v2, &v5);
  result = v7;
  if (v7 == &v5)
  {
    v4 = 4;
    result = &v5;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (uint64_t (***)())(*result)[v4]();
}

void sub_21656D498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t (***Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSmoothing(Phase::Dispatch::GeometryClientDirectDispatcher *this, float a2))()
{
  uint64_t v2;
  uint64_t (***result)();
  uint64_t v4;
  uint64_t (**v5)();
  float v6;
  uint64_t (***v7)();
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 1) + 2352;
  v5 = &off_24D57B598;
  v6 = a2;
  v7 = &v5;
  Phase::Geometry::SystemScheduler::RunFunction(v2, &v5);
  result = v7;
  if (v7 == &v5)
  {
    v4 = 4;
    result = &v5;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (uint64_t (***)())(*result)[v4]();
}

void sub_21656D574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPreset(Phase::Dispatch::GeometryClientDirectDispatcher *this, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 1) + 2352;
  v5[0] = &off_24D57B5E0;
  v5[1] = a2;
  v6 = v5;
  Phase::Geometry::SystemScheduler::RunFunction(v2, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_21656D64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPresetOrientation(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  char *v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8) + 2352;
  v4 = (char *)operator new(0x18uLL);
  *(_QWORD *)v4 = &off_24D57B628;
  *(_OWORD *)(v4 + 8) = *a2;
  v8 = v4;
  Phase::Geometry::SystemScheduler::RunFunction(v3, v7);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_21656D73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t (***Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendLevel(Phase::Dispatch::GeometryClientDirectDispatcher *this, float a2))()
{
  uint64_t v2;
  uint64_t (***result)();
  uint64_t v4;
  uint64_t (**v5)();
  float v6;
  uint64_t (***v7)();
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 1) + 2352;
  v5 = &off_24D57B670;
  v6 = a2;
  v7 = &v5;
  Phase::Geometry::SystemScheduler::RunFunction(v2, &v5);
  result = v7;
  if (v7 == &v5)
  {
    v4 = 4;
    result = &v5;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (uint64_t (***)())(*result)[v4]();
}

void sub_21656D818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::SetSceneClassification(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8) + 2352;
  v5[0] = &off_24D57B6B8;
  v5[1] = a2;
  v6 = v5;
  Phase::Geometry::SystemScheduler::RunFunction(v2, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_21656D8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::SetDefaultSceneReverbPreset(Phase::Dispatch::GeometryClientDirectDispatcher *this, uint64_t a2)
{
  NSObject *v4;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 848));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136315650;
    v7 = "DispatcherGeometryClientDirect.mm";
    v8 = 1024;
    v9 = 775;
    v10 = 2048;
    v11 = a2;
    _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting scene reverb preset 0x%llx", (uint8_t *)&v6, 0x1Cu);
  }
  return Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::Geometry::SystemExecutor,void,unsigned long long>(*((_QWORD *)this + 1) + 2352, 0, (uint64_t)Phase::Geometry::SystemExecutor::SetDefaultSceneReverbPreset, 0, a2);
}

void Phase::Dispatch::GeometryClientDirectDispatcher::SetDefaultSceneMedium(Phase::Logger *a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 848));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136315650;
    v6 = "DispatcherGeometryClientDirect.mm";
    v7 = 1024;
    v8 = 782;
    v9 = 2048;
    v10 = a2;
    _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting scene medium 0x%llx", (uint8_t *)&v5, 0x1Cu);
  }
  if (a2)
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::Geometry::SystemExecutor,void,Phase::Handle64>(*((_QWORD *)a1 + 1) + 2352, 0, (uint64_t)Phase::Geometry::SystemExecutor::SetDefaulSceneMedium, 0, a2);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::SetOccluderIsStatic(Phase::Logger *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  _BYTE v12[38];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 848));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = "false";
    *(_QWORD *)&v12[4] = "DispatcherGeometryClientDirect.mm";
    *(_WORD *)&v12[12] = 1024;
    *(_DWORD *)&v12[14] = 807;
    *(_DWORD *)v12 = 136315906;
    if (a3)
      v8 = "true";
    *(_WORD *)&v12[18] = 2080;
    *(_QWORD *)&v12[20] = v8;
    *(_WORD *)&v12[28] = 2048;
    *(_QWORD *)&v12[30] = a2;
    _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting isStatic to %s on occluder 0x%llx", v12, 0x26u);
  }
  v9 = *((_QWORD *)a1 + 1) + 2352;
  *(_QWORD *)v12 = &off_24D57B700;
  *(_QWORD *)&v12[8] = a2;
  *(_QWORD *)&v12[16] = v6;
  *(_QWORD *)&v12[24] = v12;
  Phase::Geometry::SystemScheduler::RunFunction(v9, v12);
  result = *(_QWORD **)&v12[24];
  if (*(_BYTE **)&v12[24] == v12)
  {
    v11 = 4;
    result = v12;
  }
  else
  {
    if (!*(_QWORD *)&v12[24])
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_21656DC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::SetListenerHeadTracking(uint64_t *a1, uint64_t a2, int a3)
{
  NSObject *v6;
  const char *v7;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 832));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = "false";
    v10 = "DispatcherGeometryClientDirect.mm";
    v11 = 1024;
    v12 = 815;
    v9 = 136315906;
    if (a3)
      v7 = "true";
    v13 = 2080;
    v14 = v7;
    v15 = 2048;
    v16 = a2;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting tracking to %s on listener 0x%llx", (uint8_t *)&v9, 0x26u);
  }
  return Phase::Controller::ListenerManager::SetTracking(a1[2], a2, a3);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::AddChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Phase::Geometry::SystemScheduler::AddChild(*(_QWORD *)(a1 + 8) + 2352, a2, a3);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::RemoveChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Phase::Geometry::SystemScheduler::RemoveChild(*(_QWORD *)(a1 + 8) + 2352, a2, a3);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::UpdateTransform(uint64_t a1, uint64_t a2, __int128 *a3, int a4)
{
  if (a4)
    return Phase::Controller::ListenerManager::UpdateTransform(*(_QWORD *)(a1 + 16), a2, a3);
  else
    return Phase::Geometry::SystemScheduler::UpdateTransform(*(_QWORD *)(a1 + 8) + 2352, a2, a3);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::ReleaseSceneRoot(uint64_t a1, uint64_t a2)
{
  return Phase::Geometry::SystemScheduler::ReleaseEntity(*(_QWORD *)(a1 + 8) + 2352, a2);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::ReleaseEntity(uint64_t a1, uint64_t a2)
{
  Phase::Controller::ListenerManager::RemoveListener(*(_QWORD *)(a1 + 16), a2);
  return Phase::Geometry::SystemScheduler::ReleaseEntity(*(_QWORD *)(a1 + 8) + 2352, a2);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::ReleaseMedium(uint64_t a1, uint64_t a2)
{
  return Phase::Geometry::SystemScheduler::ReleaseMedium(*(_QWORD *)(a1 + 8) + 2352, a2);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::ReleaseMaterial(uint64_t a1, uint64_t a2)
{
  return Phase::Geometry::SystemScheduler::ReleaseMaterial(*(_QWORD *)(a1 + 8) + 2352, a2);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::ReleaseShape(uint64_t a1, uint64_t a2)
{
  return Phase::Geometry::SystemScheduler::ReleaseShape(*(_QWORD *)(a1 + 8) + 2352, a2);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::ReleaseDirectivity(uint64_t a1, uint64_t a2)
{
  return Phase::Geometry::SystemScheduler::ReleaseDirectivity(*(_QWORD *)(a1 + 8) + 2352, a2);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::ReleaseDistanceModel(uint64_t a1, uint64_t a2)
{
  return Phase::Geometry::SystemScheduler::ReleaseDistanceModel(*(_QWORD *)(a1 + 8) + 2352, a2);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  v4 = v22;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v22, a3);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (uint64_t)v23;
  v16 = v21;
  v7 = v17;
  if (!v23)
    goto LABEL_4;
  if (v23 != v22)
  {
    v6 = (*(uint64_t (**)(void))(*v23 + 16))();
LABEL_4:
    v18 = (_QWORD *)v6;
    goto LABEL_6;
  }
  v18 = v17;
  (*(void (**)(_QWORD *, _QWORD *))(v22[0] + 24))(v22, v17);
LABEL_6:
  v20 = 0;
  v8 = operator new(0x30uLL);
  v9 = v8;
  v10 = v18;
  *v8 = &off_24D57B748;
  v8[1] = v16;
  if (!v10)
  {
    v11 = v8 + 5;
    goto LABEL_10;
  }
  if (v10 != v17)
  {
    v11 = &v18;
    v8[5] = v10;
LABEL_10:
    *v11 = 0;
    goto LABEL_12;
  }
  v8[5] = v8 + 2;
  (*(void (**)(_QWORD *))(v17[0] + 24))(v17);
LABEL_12:
  v20 = v9;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v5 + 2352, v19);
  result = v20;
  if (v20 == v19)
  {
    v13 = 4;
    result = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_17;
    v13 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
LABEL_17:
  if (v18 == v17)
  {
    v14 = 4;
  }
  else
  {
    if (!v18)
      goto LABEL_22;
    v14 = 5;
    v7 = v18;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8 * v14))(v7);
LABEL_22:
  if (v23 == v22)
  {
    v15 = 4;
  }
  else
  {
    if (!v23)
      return result;
    v15 = 5;
    v4 = v23;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8 * v15))(v4);
}

void sub_21656E034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8) + 2352;
  v5[0] = &off_24D57B790;
  v5[1] = a2;
  v6 = v5;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v2, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_21656E194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingAudibleGeometry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  v4 = v22;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v22, a3);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (uint64_t)v23;
  v16 = v21;
  v7 = v17;
  if (!v23)
    goto LABEL_4;
  if (v23 != v22)
  {
    v6 = (*(uint64_t (**)(void))(*v23 + 16))();
LABEL_4:
    v18 = (_QWORD *)v6;
    goto LABEL_6;
  }
  v18 = v17;
  (*(void (**)(_QWORD *, _QWORD *))(v22[0] + 24))(v22, v17);
LABEL_6:
  v20 = 0;
  v8 = operator new(0x30uLL);
  v9 = v8;
  v10 = v18;
  *v8 = &off_24D57B7D8;
  v8[1] = v16;
  if (!v10)
  {
    v11 = v8 + 5;
    goto LABEL_10;
  }
  if (v10 != v17)
  {
    v11 = &v18;
    v8[5] = v10;
LABEL_10:
    *v11 = 0;
    goto LABEL_12;
  }
  v8[5] = v8 + 2;
  (*(void (**)(_QWORD *))(v17[0] + 24))(v17);
LABEL_12:
  v20 = v9;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v5 + 2352, v19);
  result = v20;
  if (v20 == v19)
  {
    v13 = 4;
    result = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_17;
    v13 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
LABEL_17:
  if (v18 == v17)
  {
    v14 = 4;
  }
  else
  {
    if (!v18)
      goto LABEL_22;
    v14 = 5;
    v7 = v18;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8 * v14))(v7);
LABEL_22:
  if (v23 == v22)
  {
    v15 = 4;
  }
  else
  {
    if (!v23)
      return result;
    v15 = 5;
    v4 = v23;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8 * v15))(v4);
}

void sub_21656E394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingAudibleGeometry(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8) + 2352;
  v5[0] = &off_24D57B820;
  v5[1] = a2;
  v6 = v5;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v2, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_21656E4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::GetShapeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  v4 = v22;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v22, a3);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (uint64_t)v23;
  v16 = v21;
  v7 = v17;
  if (!v23)
    goto LABEL_4;
  if (v23 != v22)
  {
    v6 = (*(uint64_t (**)(void))(*v23 + 16))();
LABEL_4:
    v18 = (_QWORD *)v6;
    goto LABEL_6;
  }
  v18 = v17;
  (*(void (**)(_QWORD *, _QWORD *))(v22[0] + 24))(v22, v17);
LABEL_6:
  v20 = 0;
  v8 = operator new(0x30uLL);
  v9 = v8;
  v10 = v18;
  *v8 = &off_24D57B868;
  v8[1] = v16;
  if (!v10)
  {
    v11 = v8 + 5;
    goto LABEL_10;
  }
  if (v10 != v17)
  {
    v11 = &v18;
    v8[5] = v10;
LABEL_10:
    *v11 = 0;
    goto LABEL_12;
  }
  v8[5] = v8 + 2;
  (*(void (**)(_QWORD *))(v17[0] + 24))(v17);
LABEL_12:
  v20 = v9;
  Phase::Geometry::SystemScheduler::RunFunction(v5 + 2352, v19);
  result = v20;
  if (v20 == v19)
  {
    v13 = 4;
    result = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_17;
    v13 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
LABEL_17:
  if (v18 == v17)
  {
    v14 = 4;
  }
  else
  {
    if (!v18)
      goto LABEL_22;
    v14 = 5;
    v7 = v18;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8 * v14))(v7);
LABEL_22:
  if (v23 == v22)
  {
    v15 = 4;
  }
  else
  {
    if (!v23)
      return result;
    v15 = 5;
    v4 = v23;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8 * v15))(v4);
}

void sub_21656E6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::GetVoxels(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[3];
  _QWORD *v21;
  _QWORD v22[3];
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v24 = a2;
  *((_QWORD *)&v24 + 1) = a3;
  v25 = a4;
  v6 = v26;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v26, a5);
  v7 = *(_QWORD *)(a1 + 8);
  v18 = v24;
  v8 = (uint64_t)v27;
  v19 = v25;
  v9 = v20;
  if (!v27)
    goto LABEL_4;
  if (v27 != v26)
  {
    v8 = (*(uint64_t (**)(void))(*v27 + 16))();
LABEL_4:
    v21 = (_QWORD *)v8;
    goto LABEL_6;
  }
  v21 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(v26[0] + 24))(v26, v20);
LABEL_6:
  v23 = 0;
  v10 = (char *)operator new(0x40uLL);
  v11 = v10;
  *(_QWORD *)v10 = &off_24D57B8B0;
  *(_OWORD *)(v10 + 8) = v18;
  v12 = v21;
  *((_QWORD *)v10 + 3) = v19;
  if (!v12)
  {
    v13 = v10 + 56;
    goto LABEL_10;
  }
  if (v12 != v20)
  {
    v13 = &v21;
    *((_QWORD *)v10 + 7) = v12;
LABEL_10:
    *v13 = 0;
    goto LABEL_12;
  }
  *((_QWORD *)v10 + 7) = v10 + 32;
  (*(void (**)(_QWORD *))(v20[0] + 24))(v20);
LABEL_12:
  v23 = v11;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v7 + 2352, v22);
  result = v23;
  if (v23 == v22)
  {
    v15 = 4;
    result = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_17;
    v15 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
LABEL_17:
  if (v21 == v20)
  {
    v16 = 4;
  }
  else
  {
    if (!v21)
      goto LABEL_22;
    v16 = 5;
    v9 = v21;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 8 * v16))(v9);
LABEL_22:
  if (v27 == v26)
  {
    v17 = 4;
  }
  else
  {
    if (!v27)
      return result;
    v17 = 5;
    v6 = v27;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8 * v17))(v6);
}

void sub_21656E994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRayTraceIntersections(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  v4 = v19;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v19, a3);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (uint64_t)v20;
  v13 = v18;
  v7 = v14;
  if (!v20)
    goto LABEL_4;
  if (v20 != v19)
  {
    v6 = (*(uint64_t (**)(void))(*v20 + 16))();
LABEL_4:
    v15 = (_BYTE *)v6;
    goto LABEL_6;
  }
  v15 = v14;
  (*(void (**)(_QWORD *, _BYTE *))(v19[0] + 24))(v19, v14);
LABEL_6:
  v17 = 0;
  v8 = operator new(0x30uLL);
  *v8 = &off_24D57B8F8;
  v8[1] = v13;
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::__value_func[abi:ne180100]((uint64_t)(v8 + 2), (uint64_t)v14);
  v17 = v8;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v5 + 2352, v16);
  result = v17;
  if (v17 == v16)
  {
    v10 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v10 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
LABEL_11:
  if (v15 == v14)
  {
    v11 = 4;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v11 = 5;
    v7 = v15;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8 * v11))(v7);
LABEL_16:
  if (v20 == v19)
  {
    v12 = 4;
  }
  else
  {
    if (!v20)
      return result;
    v12 = 5;
    v4 = v20;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

void sub_21656EBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRayTraceIntersections(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8) + 2352;
  v5[0] = &off_24D57B940;
  v5[1] = a2;
  v6 = v5;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v2, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_21656ED34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingEnergyHistogram(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  v4 = v19;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v19, a3);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (uint64_t)v20;
  v13 = v18;
  v7 = v14;
  if (!v20)
    goto LABEL_4;
  if (v20 != v19)
  {
    v6 = (*(uint64_t (**)(void))(*v20 + 16))();
LABEL_4:
    v15 = (_BYTE *)v6;
    goto LABEL_6;
  }
  v15 = v14;
  (*(void (**)(_QWORD *, _BYTE *))(v19[0] + 24))(v19, v14);
LABEL_6:
  v17 = 0;
  v8 = operator new(0x30uLL);
  *v8 = &off_24D57B988;
  v8[1] = v13;
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::__value_func[abi:ne180100]((uint64_t)(v8 + 2), (uint64_t)v14);
  v17 = v8;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v5 + 2352, v16);
  result = v17;
  if (v17 == v16)
  {
    v10 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v10 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
LABEL_11:
  if (v15 == v14)
  {
    v11 = 4;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v11 = 5;
    v7 = v15;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8 * v11))(v7);
LABEL_16:
  if (v20 == v19)
  {
    v12 = 4;
  }
  else
  {
    if (!v20)
      return result;
    v12 = 5;
    v4 = v20;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

void sub_21656EF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingEnergyHistogram(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8) + 2352;
  v5[0] = &off_24D57B9D0;
  v5[1] = a2;
  v6 = v5;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v2, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_21656F050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingImageSourceLocations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  v4 = v19;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v19, a3);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (uint64_t)v20;
  v13 = v18;
  v7 = v14;
  if (!v20)
    goto LABEL_4;
  if (v20 != v19)
  {
    v6 = (*(uint64_t (**)(void))(*v20 + 16))();
LABEL_4:
    v15 = (_BYTE *)v6;
    goto LABEL_6;
  }
  v15 = v14;
  (*(void (**)(_QWORD *, _BYTE *))(v19[0] + 24))(v19, v14);
LABEL_6:
  v17 = 0;
  v8 = operator new(0x30uLL);
  *v8 = &off_24D57BA18;
  v8[1] = v13;
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::__value_func[abi:ne180100]((uint64_t)(v8 + 2), (uint64_t)v14);
  v17 = v8;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v5 + 2352, v16);
  result = v17;
  if (v17 == v16)
  {
    v10 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v10 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
LABEL_11:
  if (v15 == v14)
  {
    v11 = 4;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v11 = 5;
    v7 = v15;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8 * v11))(v7);
LABEL_16:
  if (v20 == v19)
  {
    v12 = 4;
  }
  else
  {
    if (!v20)
      return result;
    v12 = 5;
    v4 = v20;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

void sub_21656F21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingImageSourceLocations(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8) + 2352;
  v5[0] = &off_24D57BA60;
  v5[1] = a2;
  v6 = v5;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v2, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_21656F36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerEarlyResponseMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  v4 = v19;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v19, a3);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (uint64_t)v20;
  v13 = v18;
  v7 = v14;
  if (!v20)
    goto LABEL_4;
  if (v20 != v19)
  {
    v6 = (*(uint64_t (**)(void))(*v20 + 16))();
LABEL_4:
    v15 = (_BYTE *)v6;
    goto LABEL_6;
  }
  v15 = v14;
  (*(void (**)(_QWORD *, _BYTE *))(v19[0] + 24))(v19, v14);
LABEL_6:
  v17 = 0;
  v8 = operator new(0x30uLL);
  *v8 = &off_24D57BAA8;
  v8[1] = v13;
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::__value_func[abi:ne180100]((uint64_t)(v8 + 2), (uint64_t)v14);
  v17 = v8;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v5 + 2352, v16);
  result = v17;
  if (v17 == v16)
  {
    v10 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v10 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
LABEL_11:
  if (v15 == v14)
  {
    v11 = 4;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v11 = 5;
    v7 = v15;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8 * v11))(v7);
LABEL_16:
  if (v20 == v19)
  {
    v12 = 4;
  }
  else
  {
    if (!v20)
      return result;
    v12 = 5;
    v4 = v20;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

void sub_21656F538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerEarlyResponseMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8) + 2352;
  v5[0] = &off_24D57BAF0;
  v5[1] = a2;
  v6 = v5;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v2, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_21656F688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerLateReverbMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  v4 = v19;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v19, a3);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (uint64_t)v20;
  v13 = v18;
  v7 = v14;
  if (!v20)
    goto LABEL_4;
  if (v20 != v19)
  {
    v6 = (*(uint64_t (**)(void))(*v20 + 16))();
LABEL_4:
    v15 = (_BYTE *)v6;
    goto LABEL_6;
  }
  v15 = v14;
  (*(void (**)(_QWORD *, _BYTE *))(v19[0] + 24))(v19, v14);
LABEL_6:
  v17 = 0;
  v8 = operator new(0x30uLL);
  *v8 = &off_24D57BB38;
  v8[1] = v13;
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::__value_func[abi:ne180100]((uint64_t)(v8 + 2), (uint64_t)v14);
  v17 = v8;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v5 + 2352, v16);
  result = v17;
  if (v17 == v16)
  {
    v10 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v10 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
LABEL_11:
  if (v15 == v14)
  {
    v11 = 4;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v11 = 5;
    v7 = v15;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8 * v11))(v7);
LABEL_16:
  if (v20 == v19)
  {
    v12 = 4;
  }
  else
  {
    if (!v20)
      return result;
    v12 = 5;
    v4 = v20;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

void sub_21656F854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerLateReverbMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8) + 2352;
  v5[0] = &off_24D57BB80;
  v5[1] = a2;
  v6 = v5;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v2, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_21656F9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRoomData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  v4 = v19;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v19, a3);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (uint64_t)v20;
  v13 = v18;
  v7 = v14;
  if (!v20)
    goto LABEL_4;
  if (v20 != v19)
  {
    v6 = (*(uint64_t (**)(void))(*v20 + 16))();
LABEL_4:
    v15 = (_BYTE *)v6;
    goto LABEL_6;
  }
  v15 = v14;
  (*(void (**)(_QWORD *, _BYTE *))(v19[0] + 24))(v19, v14);
LABEL_6:
  v17 = 0;
  v8 = operator new(0x30uLL);
  *v8 = &off_24D57BBC8;
  v8[1] = v13;
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::__value_func[abi:ne180100]((uint64_t)(v8 + 2), (uint64_t)v14);
  v17 = v8;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v5 + 2352, v16);
  result = v17;
  if (v17 == v16)
  {
    v10 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v10 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
LABEL_11:
  if (v15 == v14)
  {
    v11 = 4;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v11 = 5;
    v7 = v15;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8 * v11))(v7);
LABEL_16:
  if (v20 == v19)
  {
    v12 = 4;
  }
  else
  {
    if (!v20)
      return result;
    v12 = 5;
    v4 = v20;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

void sub_21656FB6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRoomData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8) + 2352;
  v5[0] = &off_24D57BC10;
  v5[1] = a2;
  v6 = v5;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v2, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_21656FCBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomSimulationRuntimeDebugParameters(Phase::Dispatch::GeometryClientDirectDispatcher *this, RuntimeDebugParameters *a2)
{
  uint64_t v3;
  char *v4;
  __int128 v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 1) + 2352;
  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = &off_24D57BC58;
  v5 = *(_OWORD *)&a2->mLateReverbRayTraceComputeTimeLimit;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)&a2->mTailcorrectionEnabled;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)&a2->mRayTraceIntersectionHandleCounter;
  *((_QWORD *)v4 + 7) = *(_QWORD *)&a2->mEarlyScatteringAggregationCoef;
  v9 = v4;
  Phase::Geometry::SystemScheduler::RunDebugFunction(v3, v8);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_21656FDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Dispatch::GeometryClientDirectDispatcher::GetTransactionBuffer(Phase::Dispatch::GeometryClientDirectDispatcher *this)
{
  return 0;
}

void Phase::Dispatch::GeometryClientDirectDispatcher::~GeometryClientDirectDispatcher(Phase::Dispatch::GeometryClientDirectDispatcher *this)
{
  JUMPOUT(0x2199F9D70);
}

void sub_21656FEE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0>,void ()(Phase::Geometry::System *)>::~__func(id *a1)
{

  return a1;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0>,void ()(Phase::Geometry::System *)>::~__func(id *a1)
{

  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_24D57B3A0;
  std::__compressed_pair_elem<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D57B3A0;
  return std::__compressed_pair_elem<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0 const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0>,void ()(Phase::Geometry::System *)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0>,void ()(Phase::Geometry::System *)>::destroy[abi:ne180100]((id *)(a1 + 8));
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0>,void ()(Phase::Geometry::System *)>::destroy_deallocate(id *a1)
{
  std::__function::__alloc_func<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0>,void ()(Phase::Geometry::System *)>::destroy[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0>,void ()(Phase::Geometry::System *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int **UniqueSlot;
  unsigned int **v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  id *v14;
  Phase::Logger *v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  _BYTE v21[18];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  UniqueSlot = (unsigned int **)Phase::details::SharedSlotMap<Phase::Geometry::Material,Phase::Handle64>::GetUniqueSlot(*a2 + 744, *(_QWORD *)(a1 + 40));
  if (!UniqueSlot)
    goto LABEL_18;
  v5 = UniqueSlot;
  v6 = UniqueSlot[1];
  if (v6 && *((uint64_t *)v6 + 1) >= 1)
  {
    v7 = *(_QWORD *)(v3 + 944);
    if (!v7)
      std::terminate();
    v8 = *v5;
    Phase::Geometry::MaterialFactory::Create(v7, *v5, v21);
    if (*(_QWORD *)v21)
      *(_QWORD *)(*(_QWORD *)v21 + 8) = *((_QWORD *)v8 + 1);
    UniqueSlot = (unsigned int **)std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)v5, (__int128 *)v21);
    v9 = *(std::__shared_weak_count **)&v21[8];
    if (*(_QWORD *)&v21[8])
    {
      v10 = (unint64_t *)(*(_QWORD *)&v21[8] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v12 = *v5;
  if (!v12)
  {
LABEL_18:
    v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)UniqueSlot) + 832));
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)v21 = 136315394;
    *(_QWORD *)&v21[4] = "DispatcherGeometryClientDirect.mm";
    *(_WORD *)&v21[12] = 1024;
    *(_DWORD *)&v21[14] = 509;
    v20 = "%25s:%-5d Unable to find geo material to update.";
    goto LABEL_20;
  }
  v13 = **((_QWORD **)v12 + 5);
  if (v13)
  {
    v14 = (id *)(a1 + 8);
    Phase::Dispatch::sCopyMaterialData(v14, v13);
    v16 = (unint64_t *)qword_2166F7D40;
    v17 = 40;
    while (1)
    {
      v18 = *(_QWORD *)(*((_QWORD *)v12 + 5) + v17);
      if (!v18)
        break;
      Phase::Dispatch::sConvertMaterialData(v14, v18, *v16);
      v17 += 40;
      ++v16;
      if (v17 == 160)
        return;
    }
    v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15) + 832));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v21 = 136315394;
      *(_QWORD *)&v21[4] = "DispatcherGeometryClientDirect.mm";
      *(_WORD *)&v21[12] = 1024;
      *(_DWORD *)&v21[14] = 529;
      v20 = "%25s:%-5d Unable to find internal geo material map to update.";
      goto LABEL_20;
    }
  }
  else
  {
    v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)UniqueSlot) + 832));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v21 = 136315394;
      *(_QWORD *)&v21[4] = "DispatcherGeometryClientDirect.mm";
      *(_WORD *)&v21[12] = 1024;
      *(_DWORD *)&v21[14] = 517;
      v20 = "%25s:%-5d Unable to find user geo material map to update.";
LABEL_20:
      _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_ERROR, v20, v21, 0x12u);
    }
  }
}

void sub_216570294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  Phase::Logger *v9;
  NSObject *v10;

  if (a2)
  {
    v9 = (Phase::Logger *)__cxa_begin_catch(exception_object);
    v10 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v9) + 832));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "DispatcherGeometryClientDirect.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 538;
      _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to update geo material.", (uint8_t *)&a9, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x2165701A8);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__compressed_pair_elem<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0 const&,0ul>(_QWORD *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;

  *a1 = *(id *)a2;
  a1[1] = *(id *)(a2 + 8);
  a1[2] = *(id *)(a2 + 16);
  v4 = *(id *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  a1[3] = v4;
  a1[4] = v5;
  return a1;
}

void std::__function::__alloc_func<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::UpdateMaterial(Phase::Handle64,Phase::Dispatch::MaterialData const&)::$_0>,void ()(Phase::Geometry::System *)>::destroy[abi:ne180100](id *a1)
{

}

uint64_t Phase::details::SharedSlotMap<Phase::Geometry::Material,Phase::Handle64>::GetUniqueSlot(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 16) <= a2)
    return 0;
  v3 = a2;
  result = *(_QWORD *)a1 + 24 * a2;
  if (*(_DWORD *)(result + 20) != HIDWORD(a2))
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    if (*(uint64_t *)(v5 + 8) >= 1)
    {
      Phase::details::SharedSlotMap<Phase::Geometry::Material,Phase::Handle64>::Realloc((__int128 *)a1);
      return *(_QWORD *)a1 + 24 * v3;
    }
  }
  return result;
}

void Phase::details::SharedSlotMap<Phase::Geometry::Material,Phase::Handle64>::Realloc(__int128 *a1)
{
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 *v11;
  char v12;
  __int128 v13;

  v1 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v1)
  {
    Phase::details::SharedSlotMap<Phase::Geometry::Material,Phase::Handle64>::AllocSlots(v1, &v13);
    if (*((_DWORD *)a1 + 4))
    {
      v3 = 0;
      v4 = 16;
      do
      {
        v5 = (_QWORD *)(*(_QWORD *)a1 + v4);
        v6 = (_QWORD *)(v13 + v4);
        std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100]((_QWORD *)(v13 + v4 - 16), v5 - 2);
        *v6 = *v5;
        ++v3;
        v4 += 24;
      }
      while (v3 < *((unsigned int *)a1 + 4));
    }
    v11 = a1 + 2;
    v12 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 2));
    v7 = *a1;
    *a1 = v13;
    v13 = v7;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v11);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_216570538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Phase::details::SharedSlotMap<Phase::Geometry::Material,Phase::Handle64>::AllocSlots(unint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  if (a1)
  {
    is_mul_ok(a1, 0x18uLL);
    v4 = 24 * a1;
    v5 = (_QWORD *)operator new[]();
    *v5 = 24;
    v5[1] = a1;
    v6 = v5 + 2;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6 += 3;
      v4 -= 24;
    }
    while (v4);
    std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Material,Phase::Handle64>::Slot []>::shared_ptr[abi:ne180100]<Phase::SharedSlotMapState<Phase::Geometry::Material,Phase::Handle64>::Slot,void>(a2, (uint64_t)(v5 + 2));
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

_QWORD *std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Material,Phase::Handle64>::Slot []>::shared_ptr[abi:ne180100]<Phase::SharedSlotMapState<Phase::Geometry::Material,Phase::Handle64>::Slot,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D57BCA0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216570644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot,std::default_delete<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Geometry::Material,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Material,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Geometry::Material,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Geometry::Material,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Geometry::Material,Phase::Handle64>::Slot>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Geometry::Material,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Material,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Geometry::Material,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Geometry::Material,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Geometry::Material,Phase::Handle64>::Slot>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot []>::operator()[abi:ne180100]<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>(a1 + 24, *(_QWORD *)(a1 + 24));
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSourceGain(Phase::Handle64,float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSourceGain(Phase::Handle64,float)::$_0>,void ()(Phase::Geometry::System *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSourceGain(Phase::Handle64,float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSourceGain(Phase::Handle64,float)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D57B3E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSourceGain(Phase::Handle64,float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSourceGain(Phase::Handle64,float)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D57B3E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSourceGain(Phase::Handle64,float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSourceGain(Phase::Handle64,float)::$_0>,void ()(Phase::Geometry::System *)>::operator()(uint64_t a1, _QWORD *a2)
{
  double *v3;
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (*a2)
  {
    v3 = (double *)Phase::Geometry::GetUniqueEntityChecked<Phase::Geometry::Source>(*a2 + 1240, *(_QWORD *)(a1 + 8));
    if (v3)
    {
      v3[21] = *(float *)(a1 + 16);
    }
    else
    {
      v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 832));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5 = 136315394;
        v6 = "DispatcherGeometryClientDirect.mm";
        v7 = 1024;
        v8 = 567;
        _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Couldn't set gain on the source, geometry system doesn't have the source!", (uint8_t *)&v5, 0x12u);
      }
    }
  }
}

_DWORD *Phase::Geometry::GetUniqueEntityChecked<Phase::Geometry::Source>(uint64_t a1, uint64_t a2)
{
  _DWORD **UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA;
  _DWORD *result;
  uint64_t v4;

  v4 = a1;
  UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA = (_DWORD **)_ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(a1, a2, (uint64_t)&v4);
  if (!UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA)
    return 0;
  result = *UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA;
  if (!result || *result != 3)
    return 0;
  return result;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetListenerGain(Phase::Handle64,float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetListenerGain(Phase::Handle64,float)::$_0>,void ()(Phase::Geometry::System *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetListenerGain(Phase::Handle64,float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetListenerGain(Phase::Handle64,float)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D57B430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetListenerGain(Phase::Handle64,float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetListenerGain(Phase::Handle64,float)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D57B430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetListenerGain(Phase::Handle64,float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetListenerGain(Phase::Handle64,float)::$_0>,void ()(Phase::Geometry::System *)>::operator()(uint64_t a1, _QWORD *a2)
{
  double *v3;
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (*a2)
  {
    v3 = (double *)Phase::Geometry::GetUniqueEntityChecked<Phase::Geometry::Listener>(*a2 + 1240, *(_QWORD *)(a1 + 8));
    if (v3)
    {
      v3[22] = *(float *)(a1 + 16);
    }
    else
    {
      v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 832));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5 = 136315394;
        v6 = "DispatcherGeometryClientDirect.mm";
        v7 = 1024;
        v8 = 591;
        _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Couldn't set gain on the listener, geometry system doesn't have the listener!", (uint8_t *)&v5, 0x12u);
      }
    }
  }
}

_DWORD *Phase::Geometry::GetUniqueEntityChecked<Phase::Geometry::Listener>(uint64_t a1, uint64_t a2)
{
  _DWORD **UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA;
  _DWORD *result;
  uint64_t v4;

  v4 = a1;
  UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA = (_DWORD **)_ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(a1, a2, (uint64_t)&v4);
  if (!UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA)
    return 0;
  result = *UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA;
  if (!result || *result != 2)
    return 0;
  return result;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTrackingMode(PHASERoomAcousticTrackingMode)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTrackingMode(PHASERoomAcousticTrackingMode)::$_0>,void ()(Phase::Geometry::System *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTrackingMode(PHASERoomAcousticTrackingMode)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTrackingMode(PHASERoomAcousticTrackingMode)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D57B478;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTrackingMode(PHASERoomAcousticTrackingMode)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTrackingMode(PHASERoomAcousticTrackingMode)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D57B478;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTrackingMode(PHASERoomAcousticTrackingMode)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTrackingMode(PHASERoomAcousticTrackingMode)::$_0>,void ()(Phase::Geometry::System *)>::operator()(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)a2)
    *(_DWORD *)(*(_QWORD *)a2 + 1480) = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTarget(Phase::Geometry::TargetRoomAcousticParametersMultiBand const&)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTarget(Phase::Geometry::TargetRoomAcousticParametersMultiBand const&)::$_0>,void ()(Phase::Geometry::System *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTarget(Phase::Geometry::TargetRoomAcousticParametersMultiBand const&)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTarget(Phase::Geometry::TargetRoomAcousticParametersMultiBand const&)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1)
{
  const void *v1;
  _QWORD *v2;

  v1 = (const void *)(a1 + 8);
  v2 = operator new(0x2D0uLL);
  *v2 = &off_24D57B4C0;
  memcpy(v2 + 1, v1, 0x2C8uLL);
  return v2;
}

void *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTarget(Phase::Geometry::TargetRoomAcousticParametersMultiBand const&)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTarget(Phase::Geometry::TargetRoomAcousticParametersMultiBand const&)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D57B4C0;
  return memcpy(a2 + 1, (const void *)(a1 + 8), 0x2C8uLL);
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTarget(Phase::Geometry::TargetRoomAcousticParametersMultiBand const&)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticTarget(Phase::Geometry::TargetRoomAcousticParametersMultiBand const&)::$_0>,void ()(Phase::Geometry::System *)>::operator()(uint64_t a1, std::chrono::steady_clock::time_point **a2, double a3)
{
  const void *v4;
  std::chrono::steady_clock::time_point *v5;
  uint64_t v6;

  v4 = (const void *)(a1 + 8);
  v5 = *a2;
  if (*a2)
  {
    memcpy((char *)&v5[185].__d_.__rep_ + 4, v4, 0x2C0uLL);
    v5[274].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  }
  v6 = *(_QWORD *)(a1 + 712);
  if (v6)
    Phase::Controller::RoomCongruenceManager::SetTargetRoomAcousticParameters(v6, (uint64_t)v4, a3);
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticMaximumReverbTime(float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticMaximumReverbTime(float)::$_0>,void ()(Phase::Geometry::System *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_DWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticMaximumReverbTime(float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticMaximumReverbTime(float)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24D57B508;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticMaximumReverbTime(float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticMaximumReverbTime(float)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24D57B508;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

float std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticMaximumReverbTime(float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticMaximumReverbTime(float)::$_0>,void ()(Phase::Geometry::System *)>::operator()(uint64_t a1, uint64_t a2)
{
  float result;

  if (*(_QWORD *)a2)
  {
    result = *(float *)(a1 + 8);
    *(float *)(*(_QWORD *)a2 + 2200) = result;
  }
  return result;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSoftLimiting(BOOL)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSoftLimiting(BOOL)::$_0>,void ()(Phase::Geometry::System *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_BYTE *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSoftLimiting(BOOL)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSoftLimiting(BOOL)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24D57B550;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSoftLimiting(BOOL)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSoftLimiting(BOOL)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24D57B550;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSoftLimiting(BOOL)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSoftLimiting(BOOL)::$_0>,void ()(Phase::Geometry::System *)>::operator()(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)a2)
    *(_BYTE *)(*(_QWORD *)a2 + 2204) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSmoothing(float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSmoothing(float)::$_0>,void ()(Phase::Geometry::System *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_DWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSmoothing(float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSmoothing(float)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24D57B598;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSmoothing(float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSmoothing(float)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24D57B598;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

float std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSmoothing(float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomAcousticSmoothing(float)::$_0>,void ()(Phase::Geometry::System *)>::operator()(uint64_t a1, uint64_t a2)
{
  float result;

  if (*(_QWORD *)a2)
  {
    result = *(float *)(a1 + 8);
    *(float *)(*(_QWORD *)a2 + 2208) = result;
  }
  return result;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPreset(unsigned long long)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPreset(unsigned long long)::$_0>,void ()(Phase::Geometry::System *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPreset(unsigned long long)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPreset(unsigned long long)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D57B5E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPreset(unsigned long long)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPreset(unsigned long long)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D57B5E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPreset(unsigned long long)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPreset(unsigned long long)::$_0>,void ()(Phase::Geometry::System *)>::operator()(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)a2)
    *(_QWORD *)(*(_QWORD *)a2 + 2216) = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPresetOrientation(Phase::Quaternion<float>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPresetOrientation(Phase::Quaternion<float>)::$_0>,void ()(Phase::Geometry::System *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPresetOrientation(Phase::Quaternion<float>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPresetOrientation(Phase::Quaternion<float>)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D57B628;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

float std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPresetOrientation(Phase::Quaternion<float>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPresetOrientation(Phase::Quaternion<float>)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a2 = &off_24D57B628;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  result = *(float *)(a1 + 20);
  *(float *)(a2 + 20) = result;
  return result;
}

float std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPresetOrientation(Phase::Quaternion<float>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendTargetPresetOrientation(Phase::Quaternion<float>)::$_0>,void ()(Phase::Geometry::System *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float result;

  v2 = *a2;
  if (*a2)
  {
    *(_DWORD *)(v2 + 2224) = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(v2 + 2228) = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(v2 + 2232) = *(_DWORD *)(a1 + 16);
    result = *(float *)(a1 + 20);
    *(float *)(v2 + 2236) = result;
  }
  return result;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendLevel(float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendLevel(float)::$_0>,void ()(Phase::Geometry::System *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_DWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendLevel(float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendLevel(float)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24D57B670;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendLevel(float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendLevel(float)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24D57B670;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

float std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendLevel(float)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSpaceBlendLevel(float)::$_0>,void ()(Phase::Geometry::System *)>::operator()(uint64_t a1, uint64_t a2)
{
  float result;

  if (*(_QWORD *)a2)
  {
    result = *(float *)(a1 + 8);
    *(float *)(*(_QWORD *)a2 + 2240) = result;
  }
  return result;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSceneClassification(PHASESceneClassification)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSceneClassification(PHASESceneClassification)::$_0>,void ()(Phase::Geometry::System *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSceneClassification(PHASESceneClassification)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSceneClassification(PHASESceneClassification)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D57B6B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSceneClassification(PHASESceneClassification)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSceneClassification(PHASESceneClassification)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D57B6B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetSceneClassification(PHASESceneClassification)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetSceneClassification(PHASESceneClassification)::$_0>,void ()(Phase::Geometry::System *)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  char v3;

  if (*(_QWORD *)a2)
  {
    v2 = *(_QWORD *)(result + 8);
    if (v2 == 1935886702)
    {
      v3 = 0;
    }
    else
    {
      if (v2 != 1935888245)
        return result;
      v3 = 1;
    }
    *(_BYTE *)(*(_QWORD *)a2 + 2244) = v3;
  }
  return result;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetOccluderIsStatic(Phase::Handle64,BOOL)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetOccluderIsStatic(Phase::Handle64,BOOL)::$_0>,void ()(Phase::Geometry::System *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetOccluderIsStatic(Phase::Handle64,BOOL)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetOccluderIsStatic(Phase::Handle64,BOOL)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D57B700;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetOccluderIsStatic(Phase::Handle64,BOOL)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetOccluderIsStatic(Phase::Handle64,BOOL)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D57B700;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetOccluderIsStatic(Phase::Handle64,BOOL)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetOccluderIsStatic(Phase::Handle64,BOOL)::$_0>,void ()(Phase::Geometry::System *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  Phase::Logger *UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA;
  uint64_t v6;
  NSObject *v7;
  _BYTE v8[12];
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  if (*a2)
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)v8 = v2 + 1240;
    UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA = (Phase::Logger *)_ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(v2 + 1240, v4, (uint64_t)v8);
    if (UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA
      && (v6 = *(_QWORD *)UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA) != 0
      && *(_DWORD *)v6 == 4)
    {
      *(_BYTE *)(v6 + 156) = *(_BYTE *)(a1 + 16);
    }
    else
    {
      v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA)
                                                      + 832));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v8 = 136315394;
        *(_QWORD *)&v8[4] = "DispatcherGeometryClientDirect.mm";
        v9 = 1024;
        v10 = 797;
        _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Couldn't set isStatic on the occluder, geometry system doesn't have the occluder!", v8, 0x12u);
      }
    }
  }
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingSource(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingSource(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D57B748;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingSource(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingSource(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D57B748;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingSource(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingSource(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_24D57B748;
  v2[1] = v3;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_216571180(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingSource(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingSource(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24D57B748;
  a2[1] = v2;
  return std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingSource(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingSource(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingSource(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingSource(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingSource(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingSource(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v6, a1 + 16);
  Phase::SpatialModeler::DirectPathTransmissionDebugger::BeginTrackingSource(v2 + 8, v3, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_2165712D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingSource(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingSource(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingSource(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingSource(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D57B790;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingSource(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingSource(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D57B790;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingSource(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingSource(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(uint64_t a1, _QWORD *a2)
{
  Phase::SpatialModeler::DirectPathTransmissionDebugger *v2;
  Handle64 v3;

  v2 = (Phase::SpatialModeler::DirectPathTransmissionDebugger *)(*a2 + 8);
  v3.mData = *(_QWORD *)(a1 + 8);
  return Phase::SpatialModeler::DirectPathTransmissionDebugger::EndTrackingSource(v2, v3);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingAudibleGeometry(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingAudibleGeometry(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D57B7D8;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingAudibleGeometry(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingAudibleGeometry(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D57B7D8;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingAudibleGeometry(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingAudibleGeometry(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_24D57B7D8;
  v2[1] = v3;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_2165714A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingAudibleGeometry(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingAudibleGeometry(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24D57B7D8;
  a2[1] = v2;
  return std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingAudibleGeometry(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingAudibleGeometry(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingAudibleGeometry(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingAudibleGeometry(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingAudibleGeometry(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingAudibleGeometry(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v6, a1 + 16);
  Phase::SpatialModeler::DirectPathTransmissionDebugger::BeginTrackingAudibleGeometry(v2 + 8, v3, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_2165715F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingAudibleGeometry(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingAudibleGeometry(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingAudibleGeometry(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingAudibleGeometry(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D57B820;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingAudibleGeometry(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingAudibleGeometry(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D57B820;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingAudibleGeometry(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingAudibleGeometry(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(uint64_t a1, _QWORD *a2)
{
  Phase::SpatialModeler::DirectPathTransmissionDebugger *v2;
  Handle64 v3;

  v2 = (Phase::SpatialModeler::DirectPathTransmissionDebugger *)(*a2 + 8);
  v3.mData = *(_QWORD *)(a1 + 8);
  return Phase::SpatialModeler::DirectPathTransmissionDebugger::EndTrackingAudibleGeometry(v2, v3);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::GetShapeInfo(Phase::Handle64,std::function<void ()(unsigned int,void const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::GetShapeInfo(Phase::Handle64,std::function<void ()(unsigned int,void const*)>)::$_0>,void ()(Phase::Geometry::System *)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D57B868;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::GetShapeInfo(Phase::Handle64,std::function<void ()(unsigned int,void const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::GetShapeInfo(Phase::Handle64,std::function<void ()(unsigned int,void const*)>)::$_0>,void ()(Phase::Geometry::System *)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D57B868;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::GetShapeInfo(Phase::Handle64,std::function<void ()(unsigned int,void const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::GetShapeInfo(Phase::Handle64,std::function<void ()(unsigned int,void const*)>)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_24D57B868;
  v2[1] = v3;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_2165717C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::GetShapeInfo(Phase::Handle64,std::function<void ()(unsigned int,void const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::GetShapeInfo(Phase::Handle64,std::function<void ()(unsigned int,void const*)>)::$_0>,void ()(Phase::Geometry::System *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24D57B868;
  a2[1] = v2;
  return std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::GetShapeInfo(Phase::Handle64,std::function<void ()(unsigned int,void const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::GetShapeInfo(Phase::Handle64,std::function<void ()(unsigned int,void const*)>)::$_0>,void ()(Phase::Geometry::System *)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::GetShapeInfo(Phase::Handle64,std::function<void ()(unsigned int,void const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::GetShapeInfo(Phase::Handle64,std::function<void ()(unsigned int,void const*)>)::$_0>,void ()(Phase::Geometry::System *)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::GetShapeInfo(Phase::Handle64,std::function<void ()(unsigned int,void const*)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::GetShapeInfo(Phase::Handle64,std::function<void ()(unsigned int,void const*)>)::$_0>,void ()(Phase::Geometry::System *)>::operator()(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  Phase::Logger *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10[7];

  v10[6] = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  if (*a2)
  {
    v3 = result;
    v4 = result[1];
    if (*(_DWORD *)(v2 + 1008) > v4)
    {
      v5 = *(_QWORD *)(v2 + 992);
      if (*(_DWORD *)(v5 + 24 * v4 + 20) == HIDWORD(v4))
      {
        v6 = *(Phase::Logger **)(v5 + 24 * result[1]);
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
          {
            Phase::Geometry::GetVoxelTreeDebugInfo(v6, v10);
            v7 = v3[5];
            v9 = *(_DWORD *)v6;
            v8 = v10;
            if (!v7)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(uint64_t, int *, uint64_t **))(*(_QWORD *)v7 + 48))(v7, &v9, &v8);
            return std::unique_ptr<Phase::Geometry::VoxelTreeDebugInfo::VoxelSubtreeDebugInfo [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v10);
          }
        }
      }
    }
  }
  return result;
}

void sub_21657196C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<Phase::Geometry::VoxelTreeDebugInfo::VoxelSubtreeDebugInfo [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<Phase::Geometry::VoxelTreeDebugInfo::VoxelSubtreeDebugInfo [],std::function<void ()(void *)>>::reset[abi:ne180100](a1);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<Phase::Geometry::VoxelTreeDebugInfo::VoxelSubtreeDebugInfo [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v3 = v1;
    v2 = result[4];
    if (!v2)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v3);
  }
  return result;
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::GetVoxels(Phase::Handle64,unsigned long,unsigned long,std::function<void ()(unsigned long,Phase::Vector<unsigned short,3ul> *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::GetVoxels(Phase::Handle64,unsigned long,unsigned long,std::function<void ()(unsigned long,Phase::Vector<unsigned short,3ul> *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D57B8B0;
  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::GetVoxels(Phase::Handle64,unsigned long,unsigned long,std::function<void ()(unsigned long,Phase::Vector<unsigned short,3ul> *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::GetVoxels(Phase::Handle64,unsigned long,unsigned long,std::function<void ()(unsigned long,Phase::Vector<unsigned short,3ul> *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D57B8B0;
  v1 = a1 + 4;
  v2 = (_QWORD *)a1[7];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2199F9D70);
}

char *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::GetVoxels(Phase::Handle64,unsigned long,unsigned long,std::function<void ()(unsigned long,Phase::Vector<unsigned short,3ul> *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::GetVoxels(Phase::Handle64,unsigned long,unsigned long,std::function<void ()(unsigned long,Phase::Vector<unsigned short,3ul> *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24D57B8B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(v2 + 32), a1 + 32);
  return v2;
}

void sub_216571B48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::GetVoxels(Phase::Handle64,unsigned long,unsigned long,std::function<void ()(unsigned long,Phase::Vector<unsigned short,3ul> *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::GetVoxels(Phase::Handle64,unsigned long,unsigned long,std::function<void ()(unsigned long,Phase::Vector<unsigned short,3ul> *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24D57B8B0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100](a2 + 32, a1 + 32);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::GetVoxels(Phase::Handle64,unsigned long,unsigned long,std::function<void ()(unsigned long,Phase::Vector<unsigned short,3ul> *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::GetVoxels(Phase::Handle64,unsigned long,unsigned long,std::function<void ()(unsigned long,Phase::Vector<unsigned short,3ul> *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::GetVoxels(Phase::Handle64,unsigned long,unsigned long,std::function<void ()(unsigned long,Phase::Vector<unsigned short,3ul> *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::GetVoxels(Phase::Handle64,unsigned long,unsigned long,std::function<void ()(unsigned long,Phase::Vector<unsigned short,3ul> *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 32;
  v3 = (char *)*((_QWORD *)__p + 7);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::GetVoxels(Phase::Handle64,unsigned long,unsigned long,std::function<void ()(unsigned long,Phase::Vector<unsigned short,3ul> *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::GetVoxels(Phase::Handle64,unsigned long,unsigned long,std::function<void ()(unsigned long,Phase::Vector<unsigned short,3ul> *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(_QWORD *a1, Phase::Geometry::System ***a2)
{
  uint64_t v3;
  uint64_t v4;
  void *__p;
  _BYTE *v6;
  void *v7;
  unint64_t v8;

  Phase::Geometry::ShapeDebugger::GetVoxels(*a2, a1[1], a1[2], a1[3], (uint64_t)&v4);
  v3 = a1[7];
  v7 = __p;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)__p) >> 1);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, unint64_t *, void **))(*(_QWORD *)v3 + 48))(v3, &v8, &v7);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_216571C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRayTraceIntersections(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRayTraceIntersections(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D57B8F8;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRayTraceIntersections(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRayTraceIntersections(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D57B8F8;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRayTraceIntersections(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRayTraceIntersections(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_24D57B8F8;
  v2[1] = v3;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_216571DBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRayTraceIntersections(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRayTraceIntersections(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24D57B8F8;
  a2[1] = v2;
  return std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRayTraceIntersections(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRayTraceIntersections(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRayTraceIntersections(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRayTraceIntersections(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRayTraceIntersections(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRayTraceIntersections(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v6, a1 + 16);
  Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingIntersections(v2 + 40, v3, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_216571F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRayTraceIntersections(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRayTraceIntersections(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRayTraceIntersections(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRayTraceIntersections(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D57B940;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRayTraceIntersections(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRayTraceIntersections(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D57B940;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRayTraceIntersections(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRayTraceIntersections(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(uint64_t a1, _QWORD *a2)
{
  Phase::SpatialModeler::RoomSimulationDebugger *v2;
  Handle64 v3;

  v2 = (Phase::SpatialModeler::RoomSimulationDebugger *)(*a2 + 40);
  v3.mData = *(_QWORD *)(a1 + 8);
  return Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingIntersections(v2, v3);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingEnergyHistogram(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingEnergyHistogram(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D57B988;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingEnergyHistogram(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingEnergyHistogram(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D57B988;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingEnergyHistogram(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingEnergyHistogram(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_24D57B988;
  v2[1] = v3;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_216572140(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingEnergyHistogram(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingEnergyHistogram(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24D57B988;
  a2[1] = v2;
  return std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingEnergyHistogram(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingEnergyHistogram(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingEnergyHistogram(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingEnergyHistogram(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingEnergyHistogram(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingEnergyHistogram(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v6, a1 + 16);
  Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingEnergyHistogram(v2 + 40, v3, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_216572298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingEnergyHistogram(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingEnergyHistogram(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingEnergyHistogram(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingEnergyHistogram(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D57B9D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingEnergyHistogram(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingEnergyHistogram(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D57B9D0;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingEnergyHistogram(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingEnergyHistogram(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(uint64_t a1, _QWORD *a2)
{
  Phase::SpatialModeler::RoomSimulationDebugger *v2;
  Handle64 v3;

  v2 = (Phase::SpatialModeler::RoomSimulationDebugger *)(*a2 + 40);
  v3.mData = *(_QWORD *)(a1 + 8);
  return Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingEnergyHistogram(v2, v3);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingImageSourceLocations(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingImageSourceLocations(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D57BA18;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingImageSourceLocations(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingImageSourceLocations(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D57BA18;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingImageSourceLocations(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingImageSourceLocations(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_24D57BA18;
  v2[1] = v3;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_216572460(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingImageSourceLocations(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingImageSourceLocations(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24D57BA18;
  a2[1] = v2;
  return std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingImageSourceLocations(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingImageSourceLocations(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingImageSourceLocations(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingImageSourceLocations(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingImageSourceLocations(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingImageSourceLocations(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v6, a1 + 16);
  Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingImageSourceLocations(v2 + 40, v3, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_2165725B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingImageSourceLocations(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingImageSourceLocations(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingImageSourceLocations(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingImageSourceLocations(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D57BA60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingImageSourceLocations(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingImageSourceLocations(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D57BA60;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingImageSourceLocations(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingImageSourceLocations(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(uint64_t a1, _QWORD *a2)
{
  Phase::SpatialModeler::RoomSimulationDebugger *v2;
  Handle64 v3;

  v2 = (Phase::SpatialModeler::RoomSimulationDebugger *)(*a2 + 40);
  v3.mData = *(_QWORD *)(a1 + 8);
  return Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingImageSourceLocations(v2, v3);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerEarlyResponseMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerEarlyResponseMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D57BAA8;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerEarlyResponseMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerEarlyResponseMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D57BAA8;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerEarlyResponseMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerEarlyResponseMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_24D57BAA8;
  v2[1] = v3;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_216572780(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerEarlyResponseMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerEarlyResponseMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24D57BAA8;
  a2[1] = v2;
  return std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerEarlyResponseMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerEarlyResponseMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerEarlyResponseMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerEarlyResponseMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerEarlyResponseMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerEarlyResponseMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v6, a1 + 16);
  Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingListenerEarlyResponseMetadata(v2 + 40, v3, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_2165728D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerEarlyResponseMetadata(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerEarlyResponseMetadata(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerEarlyResponseMetadata(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerEarlyResponseMetadata(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D57BAF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerEarlyResponseMetadata(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerEarlyResponseMetadata(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D57BAF0;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerEarlyResponseMetadata(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerEarlyResponseMetadata(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(uint64_t a1, _QWORD *a2)
{
  Phase::SpatialModeler::RoomSimulationDebugger *v2;
  Handle64 v3;

  v2 = (Phase::SpatialModeler::RoomSimulationDebugger *)(*a2 + 40);
  v3.mData = *(_QWORD *)(a1 + 8);
  return Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingListenerEarlyResponseMetadata(v2, v3);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerLateReverbMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerLateReverbMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D57BB38;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerLateReverbMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerLateReverbMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D57BB38;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerLateReverbMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerLateReverbMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_24D57BB38;
  v2[1] = v3;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_216572AA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerLateReverbMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerLateReverbMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24D57BB38;
  a2[1] = v2;
  return std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerLateReverbMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerLateReverbMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerLateReverbMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerLateReverbMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerLateReverbMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingListenerLateReverbMetadata(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v6, a1 + 16);
  Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingListenerLateReverbMetadata(v2 + 40, v3, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_216572BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerLateReverbMetadata(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerLateReverbMetadata(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerLateReverbMetadata(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerLateReverbMetadata(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D57BB80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerLateReverbMetadata(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerLateReverbMetadata(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D57BB80;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerLateReverbMetadata(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingListenerLateReverbMetadata(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(uint64_t a1, _QWORD *a2)
{
  Phase::SpatialModeler::RoomSimulationDebugger *v2;
  Handle64 v3;

  v2 = (Phase::SpatialModeler::RoomSimulationDebugger *)(*a2 + 40);
  v3.mData = *(_QWORD *)(a1 + 8);
  return Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingListenerLateReverbMetadata(v2, v3);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRoomData(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRoomData(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D57BBC8;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRoomData(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRoomData(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D57BBC8;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRoomData(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRoomData(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_24D57BBC8;
  v2[1] = v3;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_216572DC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRoomData(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRoomData(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24D57BBC8;
  a2[1] = v2;
  return std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRoomData(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRoomData(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRoomData(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRoomData(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRoomData(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::BeginTrackingRoomData(Phase::Handle64,std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v6, a1 + 16);
  Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingRoomData(v2 + 40, v3, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_216572F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRoomData(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRoomData(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRoomData(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRoomData(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D57BC10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRoomData(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRoomData(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D57BC10;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRoomData(Phase::Handle64)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::EndTrackingRoomData(Phase::Handle64)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(uint64_t a1, _QWORD *a2)
{
  Phase::SpatialModeler::RoomSimulationDebugger *v2;
  Handle64 v3;

  v2 = (Phase::SpatialModeler::RoomSimulationDebugger *)(*a2 + 40);
  v3.mData = *(_QWORD *)(a1 + 8);
  return Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingRoomData(v2, v3);
}

void std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomSimulationRuntimeDebugParameters(Phase::SpatialModeler::RoomSimulationDebugger::RuntimeDebugParameters)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomSimulationRuntimeDebugParameters(Phase::SpatialModeler::RoomSimulationDebugger::RuntimeDebugParameters)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomSimulationRuntimeDebugParameters(Phase::SpatialModeler::RoomSimulationDebugger::RuntimeDebugParameters)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomSimulationRuntimeDebugParameters(Phase::SpatialModeler::RoomSimulationDebugger::RuntimeDebugParameters)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24D57BC58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomSimulationRuntimeDebugParameters(Phase::SpatialModeler::RoomSimulationDebugger::RuntimeDebugParameters)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomSimulationRuntimeDebugParameters(Phase::SpatialModeler::RoomSimulationDebugger::RuntimeDebugParameters)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24D57BC58;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomSimulationRuntimeDebugParameters(Phase::SpatialModeler::RoomSimulationDebugger::RuntimeDebugParameters)::$_0,std::allocator<Phase::Dispatch::GeometryClientDirectDispatcher::SetRoomSimulationRuntimeDebugParameters(Phase::SpatialModeler::RoomSimulationDebugger::RuntimeDebugParameters)::$_0>,void ()(Phase::Geometry::SystemDebugger *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *a2;
  result = *(__n128 *)(a1 + 8);
  v4 = *(_OWORD *)(a1 + 24);
  v5 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 88) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = v5;
  *(_OWORD *)(v2 + 56) = v4;
  *(__n128 *)(v2 + 40) = result;
  return result;
}

uint64_t Phase::Dispatch::TransactionExecutor<Phase::Dispatch::MiscServerMessageType>::TransactionExecutor(uint64_t a1)
{
  id v2;
  void *v3;

  *(_QWORD *)a1 = &off_24D57ACE0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v2 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v3 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v2;

  return a1;
}

void sub_216573104(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

Phase::Dispatch::MiscClientDirectDispatcher *Phase::Dispatch::MiscClientDirectDispatcher::MiscClientDirectDispatcher(Phase::Dispatch::MiscClientDirectDispatcher *this, Phase::Controller::TaskManager *a2, Phase::Controller::LoadBalancer *a3)
{
  uint64_t v5;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24D57BD00;
  v5 = Phase::Controller::TaskManager::GetService<Phase::Controller::VoiceManager>(a2, 8);
  *((_QWORD *)this + 1) = v5;
  if (!v5 || (*((_QWORD *)this + 2) = a3) == 0)
    std::terminate();
  return this;
}

_QWORD *Phase::Dispatch::MiscClientDirectDispatcher::GetGeometryPermutations@<X0>(Phase::Dispatch::MiscClientDirectDispatcher *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = **((_QWORD **)this + 1);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return std::vector<Phase::Controller::GeometryPermutation>::__init_with_size[abi:ne180100]<Phase::Controller::GeometryPermutation*,Phase::Controller::GeometryPermutation*>(a2, *(_QWORD *)(v2 + 624), *(_QWORD *)(v2 + 632), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v2 + 632) - *(_QWORD *)(v2 + 624)) >> 4));
}

uint64_t Phase::Dispatch::MiscClientDirectDispatcher::SetSpatialCategoryUpdateRate(unsigned __int8 ***a1, int a2, float a3)
{
  NSObject *v6;
  double v7;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 848));
  v7 = a3;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 136315906;
    v10 = "DispatcherMiscClientDirect.mm";
    v11 = 1024;
    v12 = 39;
    v13 = 1024;
    v14 = a2;
    v15 = 2048;
    v16 = v7;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting Spatial Category %d Update Rate: %f", (uint8_t *)&v9, 0x22u);
  }
  return Phase::Controller::VoiceManager::Implementation::SetSpatialCategoryUpdateRate(*a1[1], a2, v7);
}

uint64_t Phase::Dispatch::MiscClientDirectDispatcher::SetSpatialCategoryBandCount(unsigned __int8 ***a1, int a2, unint64_t a3)
{
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 848));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136315906;
    v9 = "DispatcherMiscClientDirect.mm";
    v10 = 1024;
    v11 = 47;
    v12 = 1024;
    v13 = a2;
    v14 = 2048;
    v15 = a3;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting Spatial Category %d Band Count: %zu", (uint8_t *)&v8, 0x22u);
  }
  return Phase::Controller::VoiceManager::Implementation::SetSpatialCategoryBandCount(*a1[1], a2, a3);
}

uint64_t Phase::Dispatch::MiscClientDirectDispatcher::SetSpatialCategoryMaxClusterCount(unsigned __int8 ***a1, int a2, unint64_t a3)
{
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 848));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136315906;
    v9 = "DispatcherMiscClientDirect.mm";
    v10 = 1024;
    v11 = 58;
    v12 = 1024;
    v13 = a2;
    v14 = 2048;
    v15 = a3;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting Spatial Category %d Max Cluster Count: %zu", (uint8_t *)&v8, 0x22u);
  }
  return Phase::Controller::VoiceManager::Implementation::SetSpatialCategoryMaxClusterCount(*a1[1], a2, a3);
}

void Phase::Dispatch::MiscClientDirectDispatcher::SetUnitsPerMeter(Phase::Dispatch::MiscClientDirectDispatcher *this, double a2)
{
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  double v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 848));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136315650;
    v6 = "DispatcherMiscClientDirect.mm";
    v7 = 1024;
    v8 = 66;
    v9 = 2048;
    v10 = a2;
    _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting Units Per Meter: %f", (uint8_t *)&v5, 0x1Cu);
  }
  Phase::Controller::SubmixSystem::SetUnitsPerMeter((Phase::Controller::SubmixSystem *)(**((_QWORD **)this + 1) + 224), a2);
}

uint64_t Phase::Dispatch::MiscClientDirectDispatcher::SetProfileOverride(Phase::Dispatch::MiscClientDirectDispatcher *this, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  NSObject *v8;
  uint64_t result;
  Phase::Logger *InstancePtr;
  NSObject *v11;
  std::runtime_error *exception;
  BOOL v13;
  unint64_t v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)this + 2);
  v6 = **(_QWORD **)(v5 + 8);
  v14 = 0;
  v13 = 1;
  v7 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v6, 32, &v14, &v13);
  if (!v7)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v11 = objc_retainAutorelease(**(id **)(v6 + 48));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v16 = "CommandQueue.hpp";
      v17 = 1024;
      v18 = 100;
      _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v13)
  {
    v8 = objc_retainAutorelease(**(id **)(v6 + 48));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v16 = "CommandQueue.hpp";
      v17 = 1024;
      v18 = 89;
      v19 = 2048;
      v20 = v14;
      v21 = 2048;
      v22 = 32;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(_QWORD *)v7 = &off_24D57BD70;
  *((_QWORD *)v7 + 1) = v5;
  *((_QWORD *)v7 + 2) = a2;
  *((double *)v7 + 3) = a3;
  result = Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v6, 32);
  atomic_store(0, (unsigned __int8 *)(v6 + 40));
  return result;
}

void sub_2165737DC(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x2165736F8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Dispatch::MiscClientDirectDispatcher::ClearProfileOverride(Phase::Dispatch::MiscClientDirectDispatcher *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  uint64_t result;
  Phase::Logger *InstancePtr;
  NSObject *v7;
  std::runtime_error *exception;
  BOOL v9;
  unint64_t v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 2);
  v2 = **(_QWORD **)(v1 + 8);
  v10 = 0;
  v9 = 1;
  v3 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v2, 16, &v10, &v9);
  if (!v3)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v7 = objc_retainAutorelease(**(id **)(v2 + 48));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v12 = "CommandQueue.hpp";
      v13 = 1024;
      v14 = 100;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v9)
  {
    v4 = objc_retainAutorelease(**(id **)(v2 + 48));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v12 = "CommandQueue.hpp";
      v13 = 1024;
      v14 = 89;
      v15 = 2048;
      v16 = v10;
      v17 = 2048;
      v18 = 16;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *v3 = &off_24D57BD98;
  v3[1] = v1;
  result = Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v2, 16);
  atomic_store(0, (unsigned __int8 *)(v2 + 40));
  return result;
}

void sub_216573A1C(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216573940);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Dispatch::MiscClientDirectDispatcher::GetTransactionBuffer(Phase::Dispatch::MiscClientDirectDispatcher *this)
{
  return 0;
}

void Phase::Dispatch::MiscClientDirectDispatcher::~MiscClientDirectDispatcher(Phase::Dispatch::MiscClientDirectDispatcher *this)
{
  JUMPOUT(0x2199F9D70);
}

void Phase::LambdaFunction<Phase::Dispatch::MiscClientDirectDispatcher::SetProfileOverride(unsigned long long,double)::$_0,void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

void Phase::LambdaFunction<Phase::Dispatch::MiscClientDirectDispatcher::SetProfileOverride(unsigned long long,double)::$_0,void>::operator()(uint64_t a1)
{
  Phase::Controller::LoadBalancer::SetProfileOverride(*(Phase::Controller::LoadBalancer **)(a1 + 8), *(_QWORD *)(a1 + 16), *(double *)(a1 + 24));
}

void Phase::LambdaFunction<Phase::Dispatch::MiscClientDirectDispatcher::ClearProfileOverride(void)::$_0,void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

void Phase::LambdaFunction<Phase::Dispatch::MiscClientDirectDispatcher::ClearProfileOverride(void)::$_0,void>::operator()(uint64_t a1)
{
  Phase::Controller::LoadBalancer::ClearProfileOverride(*(Phase::Controller::LoadBalancer **)(a1 + 8));
}

std::string **Phase::Controller::DSPVoiceManager::DSPVoiceManager(std::string **a1, __int128 *a2, __int128 *a3)
{
  std::string *v6;

  v6 = (std::string *)operator new();
  Phase::Controller::DSPVoiceManager::Implementation::Implementation(v6, a2, a3);
  *a1 = v6;
  return a1;
}

void sub_216573B4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10F2C4053184E0FLL);
  _Unwind_Resume(a1);
}

Phase::Controller::DSPVoiceManager::Implementation *std::unique_ptr<Phase::Controller::DSPVoiceManager::Implementation>::reset[abi:ne180100](Phase::Controller::DSPVoiceManager::Implementation **a1, Phase::Controller::DSPVoiceManager::Implementation *a2)
{
  Phase::Controller::DSPVoiceManager::Implementation *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::DSPVoiceManager::Implementation::~Implementation(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t Phase::Controller::DSPVoiceManager::ConfigureGeneratorWithRenderCallback(Phase::Logger *a1, unint64_t a2, unint64_t a3, int a4, char *a5, uint64_t *a6, _QWORD *a7)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  NSObject *v13;
  std::runtime_error *exception;
  NSObject *v15;
  uint64_t v16;
  std::runtime_error *v17;
  NSObject *v19;
  std::runtime_error *v20;
  NSObject *v22;
  std::runtime_error *v23;
  NSObject *v24;
  std::runtime_error *v25;
  unsigned int v26;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  _BYTE v34[10];
  _WORD v35[9];

  *(_QWORD *)&v35[5] = *MEMORY[0x24BDAC8D0];
  if (!a7[1])
  {
    v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 80));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "DSPVoiceManager.mm";
      v31 = 1024;
      v32 = 105;
      v33 = 2048;
      *(_QWORD *)v34 = a2;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [renderCallbackInfo.mRenderProc == nullptr is true]: \"Member .mRenderProc is nullptr in RenderCallbackInfo for generatorId %llu \\n\"", buf, 0x1Cu);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Member .mRenderProc is nullptr in RenderCallbackInfo for generatorId %llu \n");
  }
  v8 = a7[3];
  if (!v8)
  {
    v15 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 80));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = a7[3];
      *(_DWORD *)buf = 136315906;
      v30 = "DSPVoiceManager.mm";
      v31 = 1024;
      v32 = 112;
      v33 = 2048;
      *(_QWORD *)v34 = v16;
      *(_WORD *)&v34[8] = 2048;
      *(_QWORD *)v35 = a2;
      _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [renderCallbackInfo.mMaximumFrameCount <= 0 is true]: \"Invalid .mMaximumFrameCount count (= %zu) in RenderCallbackInfo for generatorId %llu \\n\"", buf, 0x26u);
    }
    v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v17, "Invalid .mMaximumFrameCount count (= %zu) in RenderCallbackInfo for generatorId %llu \n");
  }
  v9 = a7[2];
  if (!v9)
  {
    v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 80));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "DSPVoiceManager.mm";
      v31 = 1024;
      v32 = 118;
      v33 = 2048;
      *(_QWORD *)v34 = a2;
      _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [renderCallbackInfo.mBuffer == nullptr is true]: \"Member .mBuffer in RenderCallbackInfo is nullptr for generatorId %llu \\n\"", buf, 0x1Cu);
    }
    v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "Member .mBuffer in RenderCallbackInfo is nullptr for generatorId %llu \n");
  }
  if (!*(_QWORD *)(v9 + 16))
  {
    v22 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 80));
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "DSPVoiceManager.mm";
      v31 = 1024;
      v32 = 124;
      v33 = 2048;
      *(_QWORD *)v34 = a2;
      _os_log_impl(&dword_2164CC000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [renderCallbackInfo.mBuffer->mBuffers[0].mData == nullptr is true]: \"Member .mBuffer->mBuffers[0].mData in RenderCallbackInfo is nullptr for generatorId %llu \\n\"", buf, 0x1Cu);
    }
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Member .mBuffer->mBuffers[0].mData in RenderCallbackInfo is nullptr for generatorId %llu \n");
  }
  v10 = *(_DWORD *)(v9 + 12);
  if (v10 < 4 * (int)v8)
  {
    v26 = v10;
    v24 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 80));
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      v30 = "DSPVoiceManager.mm";
      v31 = 1024;
      v32 = 138;
      v33 = 1024;
      *(_DWORD *)v34 = v26;
      *(_WORD *)&v34[4] = 1024;
      *(_DWORD *)&v34[6] = 4 * v8;
      v35[0] = 2048;
      *(_QWORD *)&v35[1] = a2;
      _os_log_impl(&dword_2164CC000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [kCallbackBufferSize < kRequiredCallbackBufferSizeBytes is true]: \"Render callback size in bytes %u is less than the %u bytes requiredfor generatorId %llu \\n\"", buf, 0x28u);
    }
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Render callback size in bytes %u is less than the %u bytes requiredfor generatorId %llu \n");
  }
  return Phase::Controller::DVM::VoiceGraph::ConfigureGeneratorWithRenderCallback(*(_QWORD *)(*(_QWORD *)a1 + 72), a2, a3, a4, a5, a6, (uint64_t)a7);
}

void sub_216573FD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::DSPVoiceManager::Update(Phase::Controller::DSPVoiceManager *this)
{
  uint64_t InstancePtr;
  Phase::Logger *v3;
  Phase::Logger *v4;
  NSObject *v5;
  NSObject *v6;
  Phase::Logger *v7;
  Phase::Logger *v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  InstancePtr = Phase::Logger::GetInstancePtr(this);
  v3 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 896));
  v4 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v3);
  if (*((_BYTE *)v4 + 904))
  {
    v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                       + 896)));
    v6 = v5;
    if ((unint64_t)v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v6, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v3, "Phase_DVM_Update", "DVM Update", buf, 2u);
    }

  }
  Phase::Controller::DSPVoiceManager::Implementation::ProcessMessagesFromDvmRt(*(Phase::Controller::DSPVoiceManager::Implementation **)this);
  Phase::Controller::DSPVoiceManager::Implementation::Update(*(Phase::Controller::DSPVoiceManager::Implementation **)this);
  v8 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v7);
  if (*((_BYTE *)v8 + 904))
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v8)
                                                                                       + 896)));
    v10 = v9;
    if ((unint64_t)v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
    {
      *(_WORD *)v11 = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v10, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v3, "Phase_DVM_Update", (const char *)&unk_21676613F, v11, 2u);
    }

  }
}

uint64_t Phase::Controller::DSPVoiceManager::AddTap(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v11, a3);
  v7 = Phase::Controller::DSPVoiceManager::Implementation::AddTap(v6, a2, (uint64_t)v11, a4);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_2165741F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::DVM_RT::DVM_RT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  void (**v32)(uint64_t *, uint64_t, Phase::DspLayer::VoicePool *, uint64_t, int, uint64_t);

  v5 = 0;
  v6 = a1 + 2440320;
  v7 = (_QWORD *)(a1 + 1520752);
  v8 = (_QWORD *)(a1 + 601248);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  v9 = (_QWORD *)(a1 + 600960);
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = a1 + 376;
  do
  {
    v11 = a1 + v5;
    v12 = (_OWORD *)(a1 + v5 + 408);
    *v12 = 0uLL;
    v12[1] = 0uLL;
    *(_QWORD *)(v11 + 384) = 0;
    *(_QWORD *)(v11 + 392) = 0;
    *(_QWORD *)(v11 + 376) = 0;
    *(_DWORD *)(v11 + 440) = 1;
    v5 += 72;
  }
  while (v5 != 18432);
  bzero((void *)(a1 + 120), 0x4904uLL);
  *(_QWORD *)(a1 + 112) = v10;
  v13 = (_QWORD *)(a1 + 448);
  v14 = 255;
  do
  {
    *(v13 - 8) = v13;
    *v13 = v13 - 9;
    v13 += 9;
    --v14;
  }
  while (v14);
  *(_QWORD *)(a1 + 18736) = a1 + 18664;
  v15 = -8192;
  do
  {
    v16 = a1 + v15;
    *(_OWORD *)(v16 + 27272) = 0uLL;
    *(_QWORD *)(v16 + 27288) = 0;
    v15 += 32;
  }
  while (v15);
  bzero((void *)(a1 + 18824), 0x2104uLL);
  *(_QWORD *)(a1 + 18816) = a1 + 19080;
  v17 = (_QWORD *)(a1 + 19112);
  v18 = 255;
  do
  {
    *(v17 - 3) = v17;
    *v17 = v17 - 4;
    v17 += 4;
    --v18;
  }
  while (v18);
  v19 = 0;
  *(_QWORD *)(a1 + 27240) = a1 + 27208;
  v20 = a1 + 27800;
  do
  {
    v21 = a1 + v19;
    *(_OWORD *)(v21 + 27800) = 0uLL;
    *(_QWORD *)(v21 + 27816) = 0;
    v19 += 280;
  }
  while (v19 != 573440);
  bzero((void *)(a1 + 27288), 0x8C204uLL);
  *(_QWORD *)(a1 + 27280) = v20;
  v22 = 2047;
  do
  {
    *(_QWORD *)(v20 + 8) = v20 + 280;
    *(_QWORD *)(v20 + 280) = v20;
    v20 += 280;
    --v22;
  }
  while (v22);
  *v9 = a1 + 600680;
  v23 = a1 + 603304;
  do
  {
    v24 = (_QWORD *)(v23 + v22);
    *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    v22 += 56;
  }
  while (v22 != 917504);
  bzero((void *)(a1 + 601256), 0xE0804uLL);
  *v8 = v23;
  v25 = v8 + 264;
  v26 = 0x3FFFLL;
  do
  {
    *(v25 - 6) = v25;
    *v25 = v25 - 7;
    v25 += 7;
    --v26;
  }
  while (v26);
  v27 = 0;
  *v7 = a1 + 1520696;
  v28 = a1 + 1522872;
  do
  {
    v29 = (_QWORD *)(v28 + v27);
    *v29 = 0;
    v29[1] = 0;
    v29[2] = 0;
    v27 += 56;
  }
  while (v27 != 917504);
  bzero((void *)(a1 + 1520824), 0xE0804uLL);
  v7[8] = v28;
  v30 = v7 + 272;
  v31 = 0x3FFFLL;
  do
  {
    *(v30 - 6) = v30;
    *v30 = v30 - 7;
    v30 += 7;
    --v31;
  }
  while (v31);
  *(_QWORD *)v6 = a1 + 2440264;
  *(_DWORD *)(v6 + 64) = 0;
  *(_OWORD *)(a1 + 2440392) = 0u;
  *(_OWORD *)(a1 + 2440408) = 0u;
  *(_DWORD *)(v6 + 104) = 1065353216;
  *(_OWORD *)(a1 + 2440432) = 0u;
  *(_OWORD *)(a1 + 2440448) = 0u;
  *(_DWORD *)(v6 + 144) = 1065353216;
  *(_OWORD *)(a1 + 2440472) = 0u;
  *(_OWORD *)(a1 + 2440488) = 0u;
  v32 = (void (**)(uint64_t *, uint64_t, Phase::DspLayer::VoicePool *, uint64_t, int, uint64_t))(*(_QWORD *)(a1 + 16) + 74928);
  *v32 = Phase::Controller::VoiceEngineCallback;
  v32[1] = (void (*)(uint64_t *, uint64_t, Phase::DspLayer::VoicePool *, uint64_t, int, uint64_t))a1;
  return a1;
}

void Phase::Controller::DVM_RT::RtUpdate(Phase::Controller::DVM_RT *this)
{
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  int v10;
  int v11;
  char *v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _QWORD *v29;
  _DWORD *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v37;
  int v38;
  Phase::Logger *v39;
  NSObject *v40;
  uint64_t v41;
  const char *v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  char *v48;
  int v49;
  unint64_t v50;
  int v51;
  int v52;
  int v53;
  __int128 v54;
  uint64_t v55;
  uint64_t *i;
  int v57;
  int v58;
  int v59;
  Phase::PhaseOSCMessage *v60;
  __n128 v61;
  int v62;
  int v63;
  int *v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  Phase::PhaseOSCMessage *v69;
  __n128 v70;
  Phase::PhaseOSCMessage *v71;
  __n128 v72;
  Phase::LockFreeQueueSPSC *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t **v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  uint8_t buf[20];
  int v88;
  __int16 v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v86 = 0;
  v2 = Phase::LockFreeQueueSPSC::GetWriteBuffer(*((Phase::LockFreeQueueSPSC **)this + 1), 0x10000, &v86);
  if (!v2)
  {
    bzero(*(void **)(*((_QWORD *)this + 2) + 64), 4 * *(int *)(*((_QWORD *)this + 2) + 112));
    v40 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v39) + 80);
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      return;
    v41 = *(_QWORD *)(*((_QWORD *)this + 2) + 16);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "DVM_RT.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 240;
    *(_WORD *)&buf[18] = 1024;
    v88 = 0x10000;
    v89 = 2048;
    v90 = v41;
    v42 = "%25s:%-5d DVM_RT unable to reserve %iB in message pipe to DVM_NRT at Frame %llu, pipe is full! Did the main th"
          "read stop, pause, or stutter?";
    goto LABEL_69;
  }
  v3 = (_DWORD *)((char *)this + 2440376);
  v4 = v86;
  v5 = *((_QWORD *)this + 2);
  v6 = *(_QWORD *)(v5 + 16);
  *((_QWORD *)this + 3) = v2;
  *((_DWORD *)this + 8) = v4;
  *((_DWORD *)this + 9) = 20;
  *(_QWORD *)v2 = 0x656C646E756223;
  *((_QWORD *)v2 + 1) = v6;
  v2[4] = 20;
  v7 = *(_QWORD *)(v5 + 16);
  if (!(v7 % (uint64_t)*(double *)v5))
  {
    v9 = *(char **)(v5 + 32);
    v8 = *(char **)(v5 + 40);
    if (v9 == v8)
    {
      v10 = 0;
      v11 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = *(char **)(v5 + 32);
      do
      {
        v13 = *(_DWORD **)v12;
        v12 += 8;
        v11 += v13[3];
        v10 = v10 + v13[2] - v13[11] + 4;
      }
      while (v12 != v8);
      if (v9 != v8)
      {
        v14 = 0;
        v15 = 0;
        v84 = 0;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v85 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = *(_QWORD **)(v5 + 32);
        while (1)
        {
          v30 = (_DWORD *)*v29;
          v31 = *(_BYTE **)(*v29 + 48);
          if (!v31)
            goto LABEL_35;
          v32 = *v31;
          if (!*v31)
            goto LABEL_35;
          v33 = v31 + 1;
          v34 = 0xCBF29CE484222325;
          do
          {
            v34 = 0x100000001B3 * (v34 ^ v32);
            v35 = *v33++;
            v32 = v35;
          }
          while (v35);
          if (v34 > (uint64_t)0xF57EBABD1FFDD055)
          {
            if (v34 <= 0x20999FECD11286CCLL)
            {
              if (v34 == 0xF57EBABD1FFDD056)
              {
                v16 = v30[2];
                v18 += v30[3];
                v17 = v17 + v16 - v30[11] + 4;
                goto LABEL_35;
              }
              if (v34 == 0x15687F45806132E7)
                goto LABEL_30;
              goto LABEL_35;
            }
            if (v34 == 0x20999FECD11286CDLL)
            {
              v14 = v30[2];
              LODWORD(v84) = v30[3];
              v15 = v14 - v30[11] + 4;
              goto LABEL_35;
            }
            if (v34 == 0x235B3F2D33EB877ALL)
            {
              v19 = v30[2];
              v21 += v30[3];
              v20 = v20 + v19 - v30[11] + 4;
              goto LABEL_35;
            }
            v37 = 0x36265BBA99CF899FLL;
          }
          else
          {
            if (v34 > (uint64_t)0xC1F9D0B8A19AAC09)
            {
              if (v34 != 0xC1F9D0B8A19AAC0ALL)
              {
                if (v34 != 0xCFE1F9A8E823B67BLL && v34 != 0xE8CBC3A55AEFC3DALL)
                  goto LABEL_35;
LABEL_30:
                v38 = v30[2];
                v28 += v30[3];
                v27 = v27 + v38 - v30[11] + 4;
                v26 += v38;
                goto LABEL_35;
              }
LABEL_27:
              v22 = v30[2];
              v24 = v30[3];
              v23 = v22 - v30[11] + 4;
              goto LABEL_35;
            }
            if (v34 == 0x90B234A352A80E9BLL)
            {
              v85 = v30[3];
              v25 = v30[2];
              HIDWORD(v84) = v25 - v30[11] + 4;
              goto LABEL_35;
            }
            v37 = 0xC1F9CCB8A19AA53ELL;
          }
          if (v34 == v37)
            goto LABEL_27;
LABEL_35:
          if (++v29 == (_QWORD *)v8)
          {
            v3 = (_DWORD *)((char *)this + 2440376);
            goto LABEL_41;
          }
        }
      }
    }
    v28 = 0;
    v27 = 0;
    v26 = 0;
    v85 = 0;
    v84 = 0;
    v25 = 0;
    v24 = 0;
    v23 = 0;
    v22 = 0;
    v21 = 0;
    v20 = 0;
    v19 = 0;
    v18 = 0;
    v17 = 0;
    v16 = 0;
    v15 = 0;
    v14 = 0;
LABEL_41:
    v43 = v3 + 26;
    v44 = *((int *)this + 9);
    if (*((_DWORD *)this + 8) - (int)v44 - 4 >= 184)
    {
      v45 = *((_DWORD *)this + 150310);
      v46 = *((_DWORD *)this + 6818);
      v47 = *v3;
      v48 = (char *)v2 + v44;
      v49 = *((_DWORD *)this + 380202);
      v50 = v8 - v9;
      v52 = v3[26];
      v51 = v3[27];
      v53 = *((_DWORD *)this + 610118);
      *(_QWORD *)(v48 + 4) = 11;
      v54 = *(_OWORD *)((char *)this + 2440488);
      *((_DWORD *)v48 + 12) = v53;
      *((_DWORD *)v48 + 13) = v52;
      v3 = (_DWORD *)((char *)this + 2440376);
      *((_DWORD *)v48 + 18) = v51;
      *((_DWORD *)v48 + 19) = v49;
      *((_DWORD *)v48 + 20) = 0x4000;
      *((_DWORD *)v48 + 21) = v47;
      *((_DWORD *)v48 + 22) = 0x4000;
      *((_DWORD *)v48 + 23) = v28;
      *((_DWORD *)v48 + 24) = v27;
      *((_DWORD *)v48 + 25) = v26;
      *((_DWORD *)v48 + 26) = v21;
      *((_DWORD *)v48 + 27) = v20;
      *((_DWORD *)v48 + 28) = v19;
      *((_DWORD *)v48 + 29) = v18;
      *((_DWORD *)v48 + 30) = v17;
      *((_DWORD *)v48 + 31) = v16;
      *((_DWORD *)v48 + 32) = v46;
      *((_DWORD *)v48 + 33) = 256;
      *((_DWORD *)v48 + 34) = v85;
      *((_DWORD *)v48 + 35) = HIDWORD(v84);
      *((_DWORD *)v48 + 36) = v25;
      *((_DWORD *)v48 + 37) = v24;
      *((_DWORD *)v48 + 38) = v23;
      *((_DWORD *)v48 + 39) = v22;
      *((_DWORD *)v48 + 40) = v84;
      *((_DWORD *)v48 + 41) = v15;
      *((_DWORD *)v48 + 42) = v14;
      *((_DWORD *)v48 + 43) = v50 >> 3;
      *((_DWORD *)v48 + 44) = v45;
      memset(v48 + 44, 105, 3);
      *(_OWORD *)(v48 + 56) = v54;
      *(_QWORD *)&v54 = 0x6969696969696969;
      *((_QWORD *)&v54 + 1) = 0x6969696969696969;
      *(_OWORD *)(v48 + 12) = v54;
      *(_OWORD *)(v48 + 28) = v54;
      *((_DWORD *)v48 + 45) = v11;
      *((_DWORD *)v48 + 46) = v10;
      v55 = *((_QWORD *)this + 3);
      *(_DWORD *)(v55 + *((int *)this + 9)) = 184;
      *(_DWORD *)(v55 + 16) += 188;
      *((_DWORD *)this + 9) += 188;
      v5 = *((_QWORD *)this + 2);
    }
    v3[24] = 0;
    v43[1] = 0;
    v43[2] = 0;
    *v43 = 0;
    v7 = *(_QWORD *)(v5 + 16);
  }
  for (i = Phase::CalendarQueue<64,2048,Phase::Controller::DVM_RT::OSCData>::PopAtTime((uint64_t)this + 27280, v7);
        i;
        v3 = (_DWORD *)((char *)this + 2440376))
  {
    memset(buf, 0, sizeof(buf));
    v58 = *(_DWORD *)i;
    v57 = *(_DWORD *)i;
    *(_QWORD *)buf = (char *)i + 4;
    *(_DWORD *)&buf[8] = v58;
    *(_DWORD *)&buf[12] = (strlen((const char *)i + 12) & 0xFFFFFFFC) + 12;
    v59 = v3[31] + v57;
    ++v3[30];
    v3[31] = v59;
    Phase::Controller::DVM_RT::ProcessMessageFromNRT(this, (Phase::PhaseOSCMessage *)buf, v60, v61);
    i = Phase::CalendarQueue<64,2048,Phase::Controller::DVM_RT::OSCData>::PopAtTime((uint64_t)this + 27280, *(_QWORD *)(*((_QWORD *)this + 2) + 16));
  }
  if (Phase::LockFreeQueueSPSC::HasData(*(Phase::LockFreeQueueSPSC **)this))
  {
    v62 = 0;
    v63 = 0;
    do
    {
      v64 = (int *)(*(_QWORD *)(*(_QWORD *)this + 16) + *(int *)(*(_QWORD *)this + 4));
      v65 = *v64;
      if (*((_QWORD *)v64 + 2) == 0x656C646E756223)
      {
        v66 = 0;
        memset(buf, 0, sizeof(buf));
        if (v64[8] >= 21)
        {
          v66 = 0;
          v67 = 20;
          do
          {
            v68 = *(int *)((char *)v64 + v67 + 16);
            *(_QWORD *)buf = (char *)v64 + v67 + 20;
            *(_DWORD *)&buf[8] = v68;
            *(_DWORD *)&buf[12] = (strlen((const char *)(*(_QWORD *)buf + 8)) & 0xFFFFFFFC) + 12;
            *(_DWORD *)&buf[16] = 0;
            Phase::Controller::DVM_RT::ProcessMessageFromNRT(this, (Phase::PhaseOSCMessage *)buf, v69, v70);
            v67 += v68 + 4;
            ++v66;
          }
          while (v67 < v64[8]);
        }
      }
      else
      {
        *(_DWORD *)&buf[16] = 0;
        *(_QWORD *)buf = v64 + 4;
        *(_QWORD *)&buf[8] = v65;
        *(_DWORD *)&buf[12] = (strlen((const char *)v64 + 24) & 0xFFFFFFFC) + 12;
        *(_DWORD *)&buf[16] = 0;
        Phase::Controller::DVM_RT::ProcessMessageFromNRT(this, (Phase::PhaseOSCMessage *)buf, v71, v72);
        v66 = 1;
      }
      v63 += v65;
      v73 = *(Phase::LockFreeQueueSPSC **)this;
      *((_DWORD *)v73 + 1) = *(_DWORD *)(*(_QWORD *)this + 4)
                           + ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) + *(int *)(*(_QWORD *)this + 4)) + 15) & 0xFFFFFFF0)
                           + 16;
      v62 += v66;
    }
    while (Phase::LockFreeQueueSPSC::HasData(v73));
  }
  else
  {
    v63 = 0;
    v62 = 0;
  }
  *((_DWORD *)this + 610118) += v62;
  v74 = *((_DWORD *)this + 610122);
  v75 = *((_DWORD *)this + 610123);
  if (v74 <= v62)
    v74 = v62;
  if (v75 <= v63)
    v75 = v63;
  *((_DWORD *)this + 610122) = v74;
  *((_DWORD *)this + 610123) = v75;
  *((_DWORD *)this + 610120) += v63;
  v76 = *((_QWORD *)this + 2);
  v77 = (uint64_t **)*((_QWORD *)this + 305051);
  if (v77)
  {
    v78 = *(_QWORD *)(v76 + 16);
    do
    {
      (*(void (**)(uint64_t *, uint64_t))(*v77[2] + 40))(v77[2], v78);
      v77 = (uint64_t **)*v77;
    }
    while (v77);
    v76 = *((_QWORD *)this + 2);
  }
  Phase::DspLayer::VoiceEngine::Run((uint64_t **)v76);
  v79 = *((_QWORD *)this + 3);
  v80 = *(_DWORD *)(v79 + 16);
  if (v80 != 20)
  {
    *((_DWORD *)this + 610121) += v80;
    v81 = Phase::LockFreeQueueSPSC::CommitBytes(*((Phase::LockFreeQueueSPSC **)this + 1), *(_DWORD *)(v79 + 16));
    if ((v81 & 1) == 0)
    {
      v40 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v81) + 80);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        v82 = *(_DWORD *)(*((_QWORD *)this + 3) + 16);
        v83 = *(_QWORD *)(*((_QWORD *)this + 2) + 16);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "DVM_RT.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 534;
        *(_WORD *)&buf[18] = 1024;
        v88 = v82;
        v89 = 2048;
        v90 = v83;
        v42 = "%25s:%-5d DVM_RT unable to write %iB into message pipe to DVM_NRT at Frame %llu. Pipe is full!";
LABEL_69:
        _os_log_impl(&dword_2164CC000, v40, OS_LOG_TYPE_ERROR, v42, buf, 0x22u);
      }
    }
  }
}

uint64_t *Phase::CalendarQueue<64,2048,Phase::Controller::DVM_RT::OSCData>::PopAtTime(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *(uint64_t **)(a1 + 8 * (a2 & 0x3F) + 8);
  if (!v2)
    return 0;
  while (1)
  {
    v3 = v2[2];
    if (v3 >= a2)
      break;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      return 0;
  }
  if (v3 != a2)
    return 0;
  Phase::CalendarQueue<64,2048,Phase::Controller::DVM_RT::OSCData>::RemoveNode(a1, v2);
  return v2 + 3;
}

double Phase::Controller::DVM_RT::ProcessMessageFromNRT(Phase::Controller::DVM_RT *this, Phase::PhaseOSCMessage *a2, Phase::PhaseOSCMessage *a3, __n128 a4)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD **v14;
  _QWORD *v15;
  char *v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  char *p_p;
  unsigned int v21;
  Phase::DspLayer::VoicePool *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned __int32 v49;
  int v50;
  _QWORD *v51;
  int v52;
  int v53;
  Phase::DspLayer::VoicePool *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  Phase::DspLayer::VoicePool *v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  int v66;
  Phase::DspLayer::VoicePool *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  Phase::DspLayer::VoicePool *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  Phase::DspLayer::VoicePool *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  _QWORD *v104;
  int v105;
  _QWORD *v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  char v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  float v123;
  _QWORD *v124;
  int v125;
  _QWORD *v126;
  int v127;
  int v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  Phase::DspLayer::VoicePool *v136;
  uint64_t v137;
  uint64_t v138;
  Phase::DspLayer::VoicePool *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  unsigned int (*v150)(uint64_t, double *, _QWORD, uint64_t);
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  int v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  _QWORD *v165;
  __n128 v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  unsigned int v172;
  unsigned __int8 *v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  int v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  int v187;
  uint64_t *v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  __n128 v196;
  uint64_t v197;
  _QWORD *v198;
  char v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  BOOL v238;
  int v241;
  int v242;
  int v243;
  int v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  Phase::DspLayer::VoicePool *v248;
  uint64_t v249;
  void *__p;
  uint64_t v251;
  char v252;
  _QWORD v253[3];
  _QWORD *v254;
  _BYTE v255[24];
  _BYTE *v256;
  _BYTE v257[24];
  _BYTE *v258;
  _QWORD v259[3];
  _QWORD *v260;
  _QWORD v261[3];
  _QWORD *v262;
  uint64_t v263;

  v263 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD **)a2;
  v8 = *((int *)a2 + 3);
  v7 = *((int *)a2 + 4);
  v9 = *(unsigned int *)(*(_QWORD *)a2 + v8);
  v10 = v8 + 4;
  *((_DWORD *)a2 + 3) = v8 + 4;
  *((_DWORD *)a2 + 4) = v7 + 1;
  if ((int)v9 >= 1)
  {
    v11 = *(_QWORD *)(*((_QWORD *)this + 2) + 16) + v9;
    v12 = *((_QWORD *)this + 3410);
    v13 = *(_QWORD **)(v12 + 8);
    *((_QWORD *)this + 3410) = v13;
    if (v13)
      *v13 = 0;
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = v11;
    v14 = (_QWORD **)((char *)this + 8 * (v11 & 0x3F) + 27288);
    v15 = *v14;
    if (*v14)
    {
      if (v15[2] <= v11)
      {
        while (1)
        {
          v18 = v15;
          v15 = (_QWORD *)v15[1];
          if (!v15)
            break;
          if (v15[2] > v11)
          {
            *v15 = v12;
            *(_QWORD *)v12 = v18;
            *(_QWORD *)(v12 + 8) = v15;
            v18[1] = v12;
            goto LABEL_8;
          }
        }
        v18[1] = v12;
        *(_QWORD *)v12 = v18;
        goto LABEL_8;
      }
      *(_QWORD *)(v12 + 8) = v15;
      *v15 = v12;
    }
    *v14 = (_QWORD *)v12;
LABEL_8:
    ++*((_DWORD *)this + 150310);
    *(_DWORD *)(v12 + 24) = *((_DWORD *)a2 + 2);
    v16 = *(char **)a2;
    v17 = (strlen((const char *)(*(_QWORD *)a2 + 8)) & 0xFFFFFFFC) + 12;
    *((_DWORD *)a2 + 3) = v17;
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)&v16[v17] = 0;
    memcpy((void *)(v12 + 28), v16, *((int *)a2 + 2));
    return a4.n128_f64[0];
  }
  if ((_DWORD)v9)
  {
    Phase::Controller::DVM_RT::DVMRTOSCCommand_ToString((Phase::Controller::DVM_RT *)&__p, a2);
    v19 = (uint64_t *)((char *)this + 24);
    if (v252 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    v21 = 2;
LABEL_17:
    Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,char const*>(v19, v21, p_p);
    if (v252 < 0)
      operator delete(__p);
  }
  else
  {
    switch(*v6)
    {
      case 0:
        *(_QWORD *)(*((_QWORD *)this + 2) + 40) = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
        return a4.n128_f64[0];
      case 1:
        v22 = *(Phase::DspLayer::VoicePool **)((char *)v6 + v10);
        *((_DWORD *)a2 + 3) = v8 + 12;
        *((_DWORD *)a2 + 4) = v7 + 2;
        v23 = *(unsigned int *)((char *)v6 + v8 + 12);
        *((_DWORD *)a2 + 3) = v8 + 16;
        *((_DWORD *)a2 + 4) = v7 + 3;
        Phase::DspLayer::VoiceEngine::AddPool(*((Phase::DspLayer::VoiceEngine **)this + 2), v22, v23);
        return a4.n128_f64[0];
      case 2:
        v24 = *(_QWORD *)((char *)v6 + v10);
        *((_DWORD *)a2 + 3) = v8 + 12;
        *((_DWORD *)a2 + 4) = v7 + 2;
        Phase::DspLayer::VoiceEngine::RemovePool(*((_QWORD *)this + 2), v24);
        return a4.n128_f64[0];
      case 3:
        v86 = *(Phase::DspLayer::VoicePool **)((char *)v6 + v10);
        v87 = *(_QWORD *)((char *)v6 + v8 + 12);
        *((_DWORD *)a2 + 3) = v8 + 20;
        *((_DWORD *)a2 + 4) = v7 + 3;
        v248 = v86;
        v249 = v87;
        v261[0] = &off_24D57BDC0;
        v262 = v261;
        Phase::CalendarQueue<64,2048,Phase::Controller::DVM_RT::OSCData>::CancelAllEvents((uint64_t)this + 27280, (uint64_t)v261, (uint64_t)&v248);
        v88 = v262;
        if (v262 == v261)
        {
          v89 = 4;
          v88 = v261;
        }
        else
        {
          if (!v262)
            goto LABEL_194;
          v89 = 5;
        }
        (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_194:
        v195 = Phase::DspLayer::VoicePool::Play(v86, v87);
        if (v195)
          goto LABEL_195;
        v202 = 0;
        v203 = 0xCBF29CE484222325;
        __p = v86;
        v251 = v87;
        do
          v203 = 0x100000001B3 * (v203 ^ *((char *)&__p + v202++));
        while (v202 != 16);
        v204 = *((_QWORD *)this + v203 + 75157);
        if (!v204)
          goto LABEL_240;
        while (1)
        {
          v205 = *(_QWORD *)(v204 + 16);
          if (v205 >= v203)
            break;
          v204 = *(_QWORD *)(v204 + 8);
          if (!v204)
            goto LABEL_240;
        }
        if (v205 == v203)
        {
          do
          {
            v220 = *(_QWORD *)(v204 + 24);
            v221 = *(_QWORD *)(v204 + 32);
            v222 = (_QWORD *)(*(_QWORD *)(v220 + 72) + 8 * (int)(*(_DWORD *)(v220 + 56) & v221));
            while (1)
            {
              v222 = (_QWORD *)*v222;
              if (!v222)
                break;
              if (v222[2] == v221)
              {
                v223 = -1431655765 * (((unint64_t)v222 - *(_QWORD *)(v220 + 80)) >> 3);
                if ((v223 & 0x80000000) == 0 && *(_DWORD *)(v220 + 12) > v223)
                {
                  v196.n128_u32[0] = *(_DWORD *)(v204 + 52);
                  Phase::DspLayer::VoicePool::AddInput((Phase::DspLayer::VoicePool *)v220, v221, *(unsigned int *)(v204 + 40), v196);
                  Phase::DspLayer::VoicePool::UpdateParameters(*(Phase::DspLayer::VoicePool **)(v204 + 24), *(_QWORD *)(v204 + 32));
                }
                break;
              }
            }
            v224 = *(_QWORD *)(v204 + 8);
            if (!v224)
              break;
            v225 = *(_QWORD *)(v204 + 16);
            v204 = *(_QWORD *)(v204 + 8);
          }
          while (*(_QWORD *)(v224 + 16) == v225);
        }
LABEL_240:
        v226 = *((_QWORD *)this + v203 + 190103);
        if (v226)
        {
          while (1)
          {
            v227 = *(_QWORD *)(v226 + 16);
            if (v227 >= v203)
              break;
            v226 = *(_QWORD *)(v226 + 8);
            if (!v226)
              goto LABEL_195;
          }
          if (v227 == v203)
          {
            do
            {
              v228 = *(_QWORD *)(v226 + 24);
              v229 = *(_QWORD *)(v226 + 32);
              v230 = (_QWORD *)(*(_QWORD *)(v228 + 72) + 8 * (int)(*(_DWORD *)(v228 + 56) & v229));
              while (1)
              {
                v230 = (_QWORD *)*v230;
                if (!v230)
                  break;
                if (v230[2] == v229)
                {
                  v231 = -1431655765 * (((unint64_t)v230 - *(_QWORD *)(v228 + 80)) >> 3);
                  if ((v231 & 0x80000000) == 0 && *(_DWORD *)(v228 + 12) > v231)
                  {
                    v196.n128_u32[0] = *(_DWORD *)(v226 + 52);
                    Phase::DspLayer::VoicePool::AddInput(v86, v87, *(unsigned int *)(v226 + 40), v196);
                    Phase::DspLayer::VoicePool::UpdateParameters(v86, v87);
                  }
                  break;
                }
              }
              v232 = *(_QWORD *)(v226 + 8);
              if (!v232)
                break;
              v233 = *(_QWORD *)(v226 + 16);
              v226 = *(_QWORD *)(v226 + 8);
            }
            while (*(_QWORD *)(v232 + 16) == v233);
          }
        }
LABEL_195:
        v188 = (uint64_t *)((char *)this + 24);
        v189 = 2;
        v190 = (uint64_t)v86;
        v191 = v87;
        v187 = v195;
        goto LABEL_196;
      case 4:
        v90 = *(Phase::DspLayer::VoicePool **)((char *)v6 + v10);
        v91 = *(_QWORD *)((char *)v6 + v8 + 12);
        *((_DWORD *)a2 + 3) = v8 + 20;
        *((_DWORD *)a2 + 4) = v7 + 3;
        Phase::DspLayer::VoicePool::ClearInputs(v90, v91);
        Phase::DspLayer::VoicePool::UpdateParameters(v90, v91);
        v92 = Phase::DspLayer::VoicePool::Pause(v90, v91);
        if (v92)
          goto LABEL_230;
        v93 = 0;
        v94 = 0xCBF29CE484222325;
        __p = v90;
        v251 = v91;
        do
          v94 = 0x100000001B3 * (v94 ^ *((char *)&__p + v93++));
        while (v93 != 16);
        v95 = *((_QWORD *)this + v94 + 75157);
        if (!v95)
          goto LABEL_229;
        while (1)
        {
          v96 = *(_QWORD *)(v95 + 16);
          if (v96 >= v94)
            break;
          v95 = *(_QWORD *)(v95 + 8);
          if (!v95)
            goto LABEL_229;
        }
        if (v96 != v94)
        {
LABEL_229:
          v92 = 0;
          goto LABEL_230;
        }
        v92 = 0;
        do
        {
          v214 = *(_QWORD *)(v95 + 24);
          v215 = *(_QWORD *)(v95 + 32);
          v216 = (_QWORD *)(*(_QWORD *)(v214 + 72) + 8 * (int)(*(_DWORD *)(v214 + 56) & v215));
          while (1)
          {
            v216 = (_QWORD *)*v216;
            if (!v216)
              break;
            if (v216[2] == v215)
            {
              v217 = -1431655765 * (((unint64_t)v216 - *(_QWORD *)(v214 + 80)) >> 3);
              if ((v217 & 0x80000000) == 0 && *(_DWORD *)(v214 + 12) > v217)
              {
                v92 = Phase::DspLayer::VoicePool::RemoveInput((Phase::DspLayer::VoicePool *)v214, v215, *(unsigned int *)(v95 + 40));
                Phase::DspLayer::VoicePool::UpdateParameters(*(Phase::DspLayer::VoicePool **)(v95 + 24), *(_QWORD *)(v95 + 32));
              }
              break;
            }
          }
          v218 = *(_QWORD *)(v95 + 8);
          if (!v218)
            break;
          v219 = *(_QWORD *)(v95 + 16);
          v95 = *(_QWORD *)(v95 + 8);
        }
        while (*(_QWORD *)(v218 + 16) == v219);
LABEL_230:
        a4.n128_f64[0] = Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::DspLayer::VoicePool *,long long,Phase::DspLayer::VoicePoolErr>((uint64_t *)this + 3, 6u, (uint64_t)v90, v91, v92);
        return a4.n128_f64[0];
      case 5:
        v25 = 0;
        v26 = *(_QWORD *)((char *)v6 + v10);
        v27 = *(_QWORD *)((char *)v6 + v8 + 12);
        v28 = 0xCBF29CE484222325;
        *((_DWORD *)a2 + 3) = v8 + 20;
        *((_DWORD *)a2 + 4) = v7 + 3;
        __p = (void *)v26;
        v251 = v27;
        do
          v28 = 0x100000001B3 * (v28 ^ *((char *)&__p + v25++));
        while (v25 != 16);
        v29 = (_QWORD *)(*(_QWORD *)(v26 + 72) + 8 * (int)(*(_DWORD *)(v26 + 56) & v27));
        while (1)
        {
          v29 = (_QWORD *)*v29;
          if (!v29)
            break;
          if (v29[2] == v27)
          {
            v30 = -1431655765 * (((unint64_t)v29 - *(_QWORD *)(v26 + 80)) >> 3);
            if ((v30 & 0x80000000) == 0 && *(_DWORD *)(v26 + 12) > v30)
            {
              v31 = (char *)this + 8 * v28 + 601248;
              v34 = *((_QWORD *)v31 + 1);
              v33 = (uint64_t *)(v31 + 8);
              v32 = v34;
              if (v34)
              {
                do
                {
                  while (1)
                  {
                    v35 = *(_QWORD *)(v32 + 16);
                    if (v35 >= v28)
                      break;
                    v32 = *(_QWORD *)(v32 + 8);
                    if (!v32)
                      goto LABEL_44;
                  }
                  if (v35 != v28)
                    break;
                  Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::RemoveNode((uint64_t)this + 601248, (uint64_t *)v32);
                  v36 = *(_QWORD *)(v32 + 24);
                  v37 = *(_QWORD *)(v32 + 32);
                  v38 = (_QWORD *)(*(_QWORD *)(v36 + 72) + 8 * (int)(*(_DWORD *)(v36 + 56) & v37));
                  while (1)
                  {
                    v38 = (_QWORD *)*v38;
                    if (!v38)
                      break;
                    if (v38[2] == v37)
                    {
                      v39 = -1431655765 * (((unint64_t)v38 - *(_QWORD *)(v36 + 80)) >> 3);
                      if ((v39 & 0x80000000) == 0 && *(_DWORD *)(v36 + 12) > v39)
                      {
                        Phase::DspLayer::VoicePool::RemoveInput((Phase::DspLayer::VoicePool *)v36, v37, *(unsigned int *)(v32 + 40));
                        Phase::DspLayer::VoicePool::UpdateParameters(*(Phase::DspLayer::VoicePool **)(v32 + 24), *(_QWORD *)(v32 + 32));
                      }
                      break;
                    }
                  }
                  v32 = *v33;
                }
                while (*v33);
              }
            }
            break;
          }
        }
LABEL_44:
        __p = (void *)v26;
        v251 = v27;
        v259[0] = &off_24D57BE08;
        v260 = v259;
        Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::CancelAllEvents((uint64_t)this + 601248, (uint64_t)v259, (uint64_t)&__p);
        v40 = v260;
        if (v260 == v259)
        {
          v41 = 4;
          v40 = v259;
        }
        else
        {
          if (!v260)
            goto LABEL_185;
          v41 = 5;
        }
        (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_185:
        Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::CancelEvents((uint64_t)this + 1520816, v28);
        Phase::CalendarQueue<32,256,Phase::Controller::DVM_RT::SamplerState>::CancelEvents((uint64_t)this + 112, v28);
        Phase::CalendarQueue<32,256,std::function<void ()(float *,unsigned long)> *>::CancelEvents((uint64_t)this + 18816, v28);
        v187 = Phase::DspLayer::VoicePool::Stop((Phase::DspLayer::VoicePool *)v26, v27);
        v188 = (uint64_t *)((char *)this + 24);
        v189 = 4;
        v190 = v26;
        v191 = v27;
LABEL_196:
        a4.n128_f64[0] = Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::DspLayer::VoicePool *,long long,Phase::DspLayer::VoicePoolErr>(v188, v189, v190, v191, v187);
        return a4.n128_f64[0];
      case 6:
        v42 = *(_QWORD *)((char *)v6 + v10);
        v43 = *(_QWORD *)((char *)v6 + v8 + 12);
        v44 = *(_QWORD *)((char *)v6 + v8 + 20);
        v45 = *(_QWORD *)((char *)v6 + v8 + 28);
        *((_DWORD *)a2 + 3) = v8 + 36;
        *((_DWORD *)a2 + 4) = v7 + 5;
        v46 = *(unsigned int *)((char *)v6 + v8 + 36);
        v47 = *(_QWORD *)((char *)v6 + v8 + 40);
        *((_DWORD *)a2 + 3) = v8 + 48;
        *((_DWORD *)a2 + 4) = v7 + 7;
        v48 = *(_DWORD *)((char *)v6 + v8 + 48);
        v49 = *(_DWORD *)((char *)v6 + v8 + 52);
        *((_DWORD *)a2 + 3) = v8 + 56;
        *((_DWORD *)a2 + 4) = v7 + 9;
        v50 = *((unsigned __int8 *)v6 + v7 + 17);
        *((_DWORD *)a2 + 4) = v7 + 10;
        if (v50 == 84)
          goto LABEL_48;
        v176 = (int)(*(_DWORD *)(v42 + 56) & v43);
        v175 = *(_QWORD *)(v42 + 72);
        v177 = (_QWORD *)(v175 + 8 * v176);
        do
        {
          v177 = (_QWORD *)*v177;
          if (!v177)
            goto LABEL_164;
        }
        while (v177[2] != v43);
        v178 = -1431655765 * (((unint64_t)v177 - *(_QWORD *)(v42 + 80)) >> 3);
        if (v178 < 0 || *(_DWORD *)(v42 + 12) <= v178)
          goto LABEL_164;
LABEL_48:
        v51 = (_QWORD *)(*(_QWORD *)(v44 + 72) + 8 * (int)(*(_DWORD *)(v44 + 56) & v45));
        while (1)
        {
          v51 = (_QWORD *)*v51;
          if (!v51)
            break;
          if (v51[2] == v45)
          {
            v52 = -1431655765 * (((unint64_t)v51 - *(_QWORD *)(v44 + 80)) >> 3);
            if ((v52 & 0x80000000) == 0 && *(_DWORD *)(v44 + 12) > v52)
            {
              a4.n128_u32[0] = v49;
              v53 = Phase::DspLayer::VoicePool::AddInput((Phase::DspLayer::VoicePool *)v44, v45, v46, a4);
              if (v53)
              {
                Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long,Phase::DspLayer::VoicePool *,long long,int,Phase::DspLayer::VoiceEngine::BusId,int,Phase::DspLayer::VoicePoolErr>((uint64_t *)this + 3, 5u, v42, v43, v44, v45, v46, v47, v48, v53);
                return a4.n128_f64[0];
              }
            }
            break;
          }
        }
        if (v50 != 84)
        {
          v175 = *(_QWORD *)(v42 + 72);
          v176 = (int)(*(_DWORD *)(v42 + 56) & v43);
LABEL_164:
          v179 = (_QWORD *)(v175 + 8 * v176);
          while (1)
          {
            v179 = (_QWORD *)*v179;
            if (!v179)
              return a4.n128_f64[0];
            if (v179[2] == v43)
            {
              if (((-1431655765 * (((unint64_t)v179 - *(_QWORD *)(v42 + 80)) >> 3)) & 0x80000000) == 0)
              {
                v180 = (_QWORD *)(*(_QWORD *)(v44 + 72) + 8 * (int)(*(_DWORD *)(v44 + 56) & v45));
                while (1)
                {
                  v180 = (_QWORD *)*v180;
                  if (!v180)
                    break;
                  if (v180[2] == v45)
                  {
                    if (((-1431655765 * (((unint64_t)v180 - *(_QWORD *)(v44 + 80)) >> 3)) & 0x80000000) != 0)
                      return a4.n128_f64[0];
                    v181 = 0;
                    v182 = 0xCBF29CE484222325;
                    __p = (void *)v42;
                    v251 = v43;
                    v183 = 0xCBF29CE484222325;
                    do
                      v183 = 0x100000001B3 * (v183 ^ *((char *)&__p + v181++));
                    while (v181 != 16);
                    v184 = Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::ScheduleEvent((uint64_t)this + 601248, v183);
                    if (v184)
                    {
                      v185 = 0;
                      *v184 = v44;
                      v184[1] = v45;
                      *((_DWORD *)v184 + 4) = v46;
                      *((_DWORD *)v184 + 5) = v47;
                      *((_DWORD *)v184 + 6) = v48;
                      *((_DWORD *)v184 + 7) = v49;
                      __p = (void *)v44;
                      v251 = v45;
                      do
                        v182 = 0x100000001B3 * (v182 ^ *((char *)&__p + v185++));
                      while (v185 != 16);
                      v186 = Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::ScheduleEvent((uint64_t)this + 1520816, v182);
                      if (v186)
                      {
                        *v186 = v42;
                        v186[1] = v43;
                        *((_DWORD *)v186 + 4) = v46;
                        *((_DWORD *)v186 + 5) = v47;
                        *((_DWORD *)v186 + 6) = v48;
                        *((_DWORD *)v186 + 7) = v49;
                        return a4.n128_f64[0];
                      }
                      v206 = (uint64_t *)((char *)this + 24);
                      v241 = v48;
                      v213 = 7;
                    }
                    else
                    {
                      v206 = (uint64_t *)((char *)this + 24);
                      v241 = v48;
                      v213 = 6;
                    }
                    v207 = v42;
                    v208 = v43;
                    v209 = v44;
                    v210 = v45;
                    v211 = v46;
                    v212 = v47;
                    goto LABEL_216;
                  }
                }
              }
              return a4.n128_f64[0];
            }
          }
        }
        return a4.n128_f64[0];
      case 7:
        v248 = *(Phase::DspLayer::VoicePool **)((char *)v6 + v10);
        v97 = (uint64_t)v248;
        v247 = *(_QWORD *)((char *)v6 + v8 + 12);
        v98 = v247;
        v99 = *(void **)((char *)v6 + v8 + 20);
        v246 = v99;
        v100 = *(_QWORD *)((char *)v6 + v8 + 28);
        *((_DWORD *)a2 + 3) = v8 + 36;
        *((_DWORD *)a2 + 4) = v7 + 5;
        v245 = v100;
        v101 = *(unsigned int *)((char *)v6 + v8 + 36);
        *((_DWORD *)a2 + 3) = v8 + 40;
        *((_DWORD *)a2 + 4) = v7 + 6;
        v244 = v101;
        v102 = *(_DWORD *)((char *)v6 + v8 + 40);
        *((_DWORD *)a2 + 3) = v8 + 44;
        *((_DWORD *)a2 + 4) = v7 + 7;
        v243 = v102;
        v103 = *(_DWORD *)((char *)v6 + v8 + 44);
        *((_DWORD *)a2 + 3) = v8 + 48;
        *((_DWORD *)a2 + 4) = v7 + 8;
        v242 = v103;
        v104 = (_QWORD *)(*(_QWORD *)(v97 + 72) + 8 * (int)(*(_DWORD *)(v97 + 56) & v98));
        while (1)
        {
          v104 = (_QWORD *)*v104;
          if (!v104)
            break;
          if (v104[2] == v98)
          {
            v105 = -1431655765 * (((unint64_t)v104 - *(_QWORD *)(v97 + 80)) >> 3);
            if ((v105 & 0x80000000) == 0 && *(_DWORD *)(v97 + 12) > v105)
            {
              v106 = (_QWORD *)(*((_QWORD *)v99 + 9) + 8 * (int)(*((_DWORD *)v99 + 14) & v100));
              while (1)
              {
                v106 = (_QWORD *)*v106;
                if (!v106)
                  break;
                if (v106[2] == v100)
                {
                  v107 = -1431655765 * (((unint64_t)v106 - *((_QWORD *)v99 + 10)) >> 3);
                  if ((v107 & 0x80000000) == 0 && *((_DWORD *)v99 + 3) > v107)
                  {
                    v108 = Phase::DspLayer::VoicePool::RemoveInput((Phase::DspLayer::VoicePool *)v99, v100, v101);
                    if (v108)
                      Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long,Phase::DspLayer::VoicePool *,long long,int,Phase::DspLayer::VoiceEngine::BusId,int,Phase::DspLayer::VoicePoolErr>((uint64_t *)this + 3, 0xAu, v97, v98, (uint64_t)v99, v100, v101, v102, v103, v108);
                  }
                  goto LABEL_92;
                }
              }
            }
            break;
          }
        }
LABEL_92:
        v109 = 0;
        v110 = 0xCBF29CE484222325;
        __p = (void *)v97;
        v251 = v98;
        v111 = 0xCBF29CE484222325;
        do
          v111 = 0x100000001B3 * (v111 ^ *((char *)&__p + v109++));
        while (v109 != 16);
        v112 = operator new(0x30uLL);
        *v112 = &off_24D57BE50;
        v112[1] = &v246;
        v112[2] = &v245;
        v112[3] = &v244;
        v112[4] = &v243;
        v112[5] = &v242;
        v258 = v112;
        v113 = Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::CancelEvent((uint64_t)this + 601248, v111, (uint64_t)v112);
        v114 = v258;
        if (v258 == v257)
        {
          v115 = 4;
          v114 = v257;
        }
        else
        {
          if (!v258)
            goto LABEL_199;
          v115 = 5;
        }
        (*(void (**)(void))(*v114 + 8 * v115))();
LABEL_199:
        if ((v113 & 1) == 0)
          Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long,Phase::DspLayer::VoicePool *,long long,int,Phase::DspLayer::VoiceEngine::BusId,int>((uint64_t *)this + 3, 8u, v97, v98, (uint64_t)v246, v245, v244, v243, v242);
        v197 = 0;
        __p = v246;
        v251 = v245;
        do
          v110 = 0x100000001B3 * (v110 ^ *((char *)&__p + v197++));
        while (v197 != 16);
        v198 = operator new(0x30uLL);
        *v198 = &off_24D57BE98;
        v198[1] = &v248;
        v198[2] = &v247;
        v198[3] = &v244;
        v198[4] = &v243;
        v198[5] = &v242;
        v256 = v198;
        v199 = Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::CancelEvent((uint64_t)this + 1520816, v110, (uint64_t)v198);
        v200 = v256;
        if (v256 == v255)
        {
          v201 = 4;
          v200 = v255;
        }
        else
        {
          if (!v256)
            goto LABEL_214;
          v201 = 5;
        }
        (*(void (**)(void))(*v200 + 8 * v201))();
LABEL_214:
        if ((v199 & 1) == 0)
        {
          v206 = (uint64_t *)((char *)this + 24);
          v208 = v247;
          v207 = (uint64_t)v248;
          v210 = v245;
          v209 = (uint64_t)v246;
          v212 = v243;
          v211 = v244;
          v241 = v242;
          v213 = 9;
LABEL_216:
          Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long,Phase::DspLayer::VoicePool *,long long,int,Phase::DspLayer::VoiceEngine::BusId,int>(v206, v213, v207, v208, v209, v210, v211, v212, v241);
        }
        return a4.n128_f64[0];
      case 8:
        v116 = *(_QWORD *)((char *)v6 + v10);
        v117 = *(_QWORD *)((char *)v6 + v8 + 12);
        v118 = *(_QWORD *)((char *)v6 + v8 + 20);
        v119 = *(_QWORD *)((char *)v6 + v8 + 28);
        *((_DWORD *)a2 + 3) = v8 + 36;
        *((_DWORD *)a2 + 4) = v7 + 5;
        v120 = *(unsigned int *)((char *)v6 + v8 + 36);
        v121 = *(_QWORD *)((char *)v6 + v8 + 40);
        *((_DWORD *)a2 + 3) = v8 + 48;
        *((_DWORD *)a2 + 4) = v7 + 7;
        v122 = *(_DWORD *)((char *)v6 + v8 + 48);
        v123 = *(float *)((char *)v6 + v8 + 52);
        *((_DWORD *)a2 + 3) = v8 + 56;
        *((_DWORD *)a2 + 4) = v7 + 9;
        v124 = (_QWORD *)(*(_QWORD *)(v116 + 72) + 8 * (int)(*(_DWORD *)(v116 + 56) & v117));
        while (1)
        {
          v124 = (_QWORD *)*v124;
          if (!v124)
            break;
          if (v124[2] == v117)
          {
            v125 = -1431655765 * (((unint64_t)v124 - *(_QWORD *)(v116 + 80)) >> 3);
            if ((v125 & 0x80000000) == 0 && *(_DWORD *)(v116 + 12) > v125)
            {
              v126 = (_QWORD *)(*(_QWORD *)(v118 + 72) + 8 * (int)(*(_DWORD *)(v118 + 56) & v119));
              while (1)
              {
                v126 = (_QWORD *)*v126;
                if (!v126)
                  break;
                if (v126[2] == v119)
                {
                  v127 = -1431655765 * (((unint64_t)v126 - *(_QWORD *)(v118 + 80)) >> 3);
                  if ((v127 & 0x80000000) == 0 && *(_DWORD *)(v118 + 12) > v127)
                  {
                    a4.n128_f32[0] = v123;
                    v128 = Phase::DspLayer::VoicePool::SetInputGain((Phase::DspLayer::VoicePool *)v118, v119, v120, a4);
                    if (v128)
                      Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long,Phase::DspLayer::VoicePool *,long long,int,Phase::DspLayer::VoiceEngine::BusId,int,float,Phase::DspLayer::VoicePoolErr>((uint64_t *)this + 3, v116, v117, v118, v119, v120, v121, v122, v123, v128);
                  }
                  goto LABEL_109;
                }
              }
            }
            break;
          }
        }
LABEL_109:
        v129 = (_QWORD *)(*(_QWORD *)(v116 + 72) + 8 * (int)(*(_DWORD *)(v116 + 56) & v117));
        while (1)
        {
          v129 = (_QWORD *)*v129;
          if (!v129)
            break;
          if (v129[2] == v117)
          {
            if (((-1431655765 * (((unint64_t)v129 - *(_QWORD *)(v116 + 80)) >> 3)) & 0x80000000) == 0)
            {
              v130 = (_QWORD *)(*(_QWORD *)(v118 + 72) + 8 * (int)(*(_DWORD *)(v118 + 56) & v119));
              while (1)
              {
                v130 = (_QWORD *)*v130;
                if (!v130)
                  break;
                if (v130[2] == v119)
                {
                  if (((-1431655765 * (((unint64_t)v130 - *(_QWORD *)(v118 + 80)) >> 3)) & 0x80000000) != 0)
                    goto LABEL_148;
                  v131 = 0;
                  v132 = 0xCBF29CE484222325;
                  __p = (void *)v116;
                  v251 = v117;
                  v133 = 0xCBF29CE484222325;
                  do
                    v133 = 0x100000001B3 * (v133 ^ *((char *)&__p + v131++));
                  while (v131 != 16);
                  v134 = *((_QWORD *)this + v133 + 75157);
                  if (v134)
                  {
                    while (1)
                    {
                      v135 = *(_QWORD *)(v134 + 16);
                      if (v135 >= v133)
                        break;
                      v134 = *(_QWORD *)(v134 + 8);
                      if (!v134)
                        goto LABEL_266;
                    }
                    if (v135 == v133)
                    {
                      while (*(_QWORD *)(v134 + 24) != v118 || *(_QWORD *)(v134 + 32) != v119)
                      {
                        v134 = *(_QWORD *)(v134 + 8);
                        if (!v134 || *(_QWORD *)(v134 + 16) != v133)
                          goto LABEL_266;
                      }
                      *(float *)(v134 + 52) = v123;
                    }
                  }
LABEL_266:
                  v235 = 0;
                  __p = (void *)v118;
                  v251 = v119;
                  do
                    v132 = 0x100000001B3 * (v132 ^ *((char *)&__p + v235++));
                  while (v235 != 16);
                  v236 = *((_QWORD *)this + v132 + 190103);
                  if (v236)
                  {
                    while (1)
                    {
                      v237 = *(_QWORD *)(v236 + 16);
                      v238 = v237 == v132;
                      if (v237 >= v132)
                        break;
                      v236 = *(_QWORD *)(v236 + 8);
                      if (!v236)
                        return a4.n128_f64[0];
                    }
                    while (v238)
                    {
                      if (*(_QWORD *)(v236 + 24) == v116 && *(_QWORD *)(v236 + 32) == v117)
                      {
                        *(float *)(v236 + 52) = v123;
                        return a4.n128_f64[0];
                      }
                      v236 = *(_QWORD *)(v236 + 8);
                      if (!v236)
                        return a4.n128_f64[0];
                      v238 = *(_QWORD *)(v236 + 16) == v132;
                    }
                  }
                  return a4.n128_f64[0];
                }
              }
            }
            break;
          }
        }
LABEL_148:
        Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long,Phase::DspLayer::VoicePool *,long long,int,Phase::DspLayer::VoiceEngine::BusId,int,float,Phase::DspLayer::VoicePoolErr>((uint64_t *)this + 3, v116, v117, v118, v119, v120, v121, v122, v123, 2);
        return a4.n128_f64[0];
      case 9:
        v136 = *(Phase::DspLayer::VoicePool **)((char *)v6 + v10);
        v137 = *(_QWORD *)((char *)v6 + v8 + 12);
        *((_DWORD *)a2 + 3) = v8 + 20;
        *((_DWORD *)a2 + 4) = v7 + 3;
        v138 = *(unsigned int *)((char *)v6 + v8 + 20);
        *((_DWORD *)a2 + 3) = v8 + 32;
        *((_DWORD *)a2 + 4) = v7 + 5;
        *((_DWORD *)a2 + 3) = v8 + 36;
        *((_DWORD *)a2 + 4) = v7 + 6;
        Phase::DspLayer::VoicePool::SetOutput(v136, v137, v138);
        return a4.n128_f64[0];
      case 0xA:
        v54 = *(Phase::DspLayer::VoicePool **)((char *)v6 + v10);
        v55 = *(_QWORD *)((char *)v6 + v8 + 12);
        *((_DWORD *)a2 + 3) = v8 + 20;
        *((_DWORD *)a2 + 4) = v7 + 3;
        v248 = v54;
        v249 = v55;
        v253[0] = &off_24D57BEE0;
        v254 = v253;
        Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::CancelAllEvents((uint64_t)this + 601248, (uint64_t)v253, (uint64_t)&v248);
        v56 = v254;
        if (v254 == v253)
        {
          v57 = 4;
          v56 = v253;
        }
        else
        {
          if (!v254)
            goto LABEL_188;
          v57 = 5;
        }
        (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_188:
        v192 = 0;
        v193 = 0xCBF29CE484222325;
        __p = v54;
        v251 = v55;
        do
          v193 = 0x100000001B3 * (v193 ^ *((char *)&__p + v192++));
        while (v192 != 16);
        Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::CancelEvents((uint64_t)this + 1520816, v193);
        v194 = Phase::DspLayer::VoicePool::ClearInputs(v54, v55);
        if (v194)
          Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long,Phase::DspLayer::VoicePoolErr>((uint64_t *)this + 3, (uint64_t)v54, v55, v194);
        return a4.n128_f64[0];
      case 0xB:
        Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::Clear((uint64_t)this + 601248);
        Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::Clear((uint64_t)this + 1520816);
        v58 = *((_QWORD *)this + 2);
        v59 = *(uint64_t **)(v58 + 32);
        v60 = *(uint64_t **)(v58 + 40);
        while (v59 != v60)
        {
          v61 = *v59++;
          Phase::DspLayer::VoicePool::ClearInputsFromAllVoices(v61);
        }
        return a4.n128_f64[0];
      case 0xC:
        v62 = *(Phase::DspLayer::VoicePool **)((char *)v6 + v10);
        v63 = *(_QWORD *)((char *)v6 + v8 + 12);
        *((_DWORD *)a2 + 3) = v8 + 20;
        *((_DWORD *)a2 + 4) = v7 + 3;
        v64 = *(unsigned int *)((char *)v6 + v8 + 20);
        v65 = *(double *)((char *)v6 + v8 + 24);
        *((_DWORD *)a2 + 3) = v8 + 32;
        *((_DWORD *)a2 + 4) = v7 + 5;
        a4.n128_f64[0] = v65;
        v66 = Phase::DspLayer::VoicePool::SetParameter(v62, v63, v64, a4);
        if (v66)
          Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long,int,double,Phase::DspLayer::VoicePoolErr>((uint64_t *)this + 3, (uint64_t)v62, v63, v64, v66, v65);
        return a4.n128_f64[0];
      case 0xD:
        v67 = *(Phase::DspLayer::VoicePool **)((char *)v6 + v10);
        v68 = *(_QWORD *)((char *)v6 + v8 + 12);
        *((_DWORD *)a2 + 3) = v8 + 20;
        *((_DWORD *)a2 + 4) = v7 + 3;
        v69 = *(unsigned int *)((char *)v6 + v8 + 20);
        v70 = *(void **)((char *)v6 + v8 + 24);
        *((_DWORD *)a2 + 3) = v8 + 32;
        *((_DWORD *)a2 + 4) = v7 + 5;
        v71 = *(_DWORD *)((char *)v6 + v8 + 32);
        *((_DWORD *)a2 + 3) = v8 + 36;
        *((_DWORD *)a2 + 4) = v7 + 6;
        v72 = Phase::DspLayer::VoicePool::SetBuffer(v67, v68, v69, v70);
        if (v72)
          Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::DspLayer::VoicePool *,long long,void *,int,Phase::DspLayer::VoicePoolErr>((uint64_t *)this + 3, (uint64_t)v67, v68, (uint64_t)v70, v71, v72);
        return a4.n128_f64[0];
      case 0xF:
        v139 = *(Phase::DspLayer::VoicePool **)((char *)v6 + v10);
        v140 = *(_QWORD *)((char *)v6 + v8 + 12);
        *((_DWORD *)a2 + 3) = v8 + 20;
        *((_DWORD *)a2 + 4) = v7 + 3;
        goto LABEL_182;
      case 0x10:
        v141 = *(_QWORD *)((char *)v6 + v10);
        v142 = (char *)v6 + v8;
        v143 = *(_QWORD *)(v142 + 12);
        v144 = *(_QWORD *)(v142 + 20);
        v145 = *(_QWORD *)(v142 + 28);
        *((_DWORD *)a2 + 3) = v8 + 36;
        *((_DWORD *)a2 + 4) = v7 + 5;
        a4.n128_f64[0] = Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,long long,long long,long long,long long>((uint64_t *)this + 3, v141, v143, v144, v145);
        return a4.n128_f64[0];
      case 0x11:
        v146 = 0;
        v147 = 0xCBF29CE484222325;
        v148 = *(_QWORD **)((char *)v6 + v10);
        v149 = *(_QWORD *)((char *)v6 + v8 + 12);
        v150 = *(unsigned int (**)(uint64_t, double *, _QWORD, uint64_t))((char *)v6 + v8 + 20);
        v151 = *(_QWORD *)((char *)v6 + v8 + 28);
        v152 = *(_QWORD *)((char *)v6 + v8 + 36);
        v153 = *(_QWORD **)((char *)v6 + v8 + 44);
        *((_DWORD *)a2 + 3) = v8 + 52;
        *((_DWORD *)a2 + 4) = v7 + 7;
        v154 = *(_DWORD *)((char *)v6 + v8 + 52);
        *((_DWORD *)a2 + 3) = v8 + 56;
        *((_DWORD *)a2 + 4) = v7 + 8;
        v155 = 0xCBF29CE484222325;
        __p = v148;
        v251 = v149;
        do
          v155 = 0x100000001B3 * (v155 ^ *((char *)&__p + v146++));
        while (v146 != 16);
        v156 = (char *)this + 112;
        v157 = (char *)this + 8 * (v155 & 0x1F) + 112;
        while (1)
        {
          v157 = (char *)*((_QWORD *)v157 + 1);
          if (!v157)
            break;
          v158 = *((_QWORD *)v157 + 2);
          if (v158 >= v155)
          {
            if (v158 == v155)
            {
              Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long,BOOL (*)(void *,AudioTimeStamp const&,unsigned long,AudioBufferList *)>((uint64_t *)this + 3, (uint64_t)v148, v149, (uint64_t)v150);
              return a4.n128_f64[0];
            }
            break;
          }
        }
        v167 = v151;
        v168 = Phase::CalendarQueue<32,256,Phase::Controller::DVM_RT::SamplerState>::ScheduleEvent((uint64_t)v156, v155);
        if (!v168)
          return Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long>((uint64_t *)this + 3, 0xFu, (uint64_t)v148, v149);
        *((_DWORD *)v168 + 10) = v154;
        *v168 = v150;
        v168[1] = v167;
        v168[2] = v152;
        v168[3] = v153;
        if (v154 < 0)
        {
          v171 = (_BYTE *)v148[6];
          if (!v171)
            goto LABEL_156;
          v172 = *v171;
          if (!*v171)
            goto LABEL_156;
          v173 = v171 + 1;
          do
          {
            v147 = 0x100000001B3 * (v147 ^ v172);
            v174 = *v173++;
            v172 = v174;
          }
          while (v174);
          if (v147 != 0xE8CBC3A55AEFC3DALL)
          {
LABEL_156:
            Phase::Controller::DVM_RT::RenderAndSetNextSamplerBuffer((uint64_t)this, (Phase::DspLayer::VoicePool *)v148, v149, v169, v170, v167, v150, v152, v153);
            goto LABEL_181;
          }
        }
        return a4.n128_f64[0];
      case 0x12:
        v159 = 0;
        v160 = 0xCBF29CE484222325;
        v148 = *(_QWORD **)((char *)v6 + v10);
        v161 = (char *)v6 + v8;
        v149 = *(_QWORD *)(v161 + 12);
        v162 = *(_QWORD *)(v161 + 20);
        *((_DWORD *)a2 + 3) = v8 + 28;
        *((_DWORD *)a2 + 4) = v7 + 4;
        __p = v148;
        v251 = v149;
        do
          v160 = 0x100000001B3 * (v160 ^ *((char *)&__p + v159++));
        while (v159 != 16);
        v163 = (char *)this + 8 * (v160 & 0x1F) + 18816;
        break;
      case 0x13:
        v73 = *(_QWORD *)((char *)v6 + v10);
        v74 = *(_QWORD *)((char *)v6 + v8 + 12);
        *((_DWORD *)a2 + 3) = v8 + 20;
        *((_DWORD *)a2 + 4) = v7 + 3;
        v75 = Phase::Controller::ProcedureManager_RT::PlayProcedure((uint64_t)this + 2440384, v73, v74);
        v76 = (uint64_t *)((char *)this + 24);
        v77 = 3;
        goto LABEL_147;
      case 0x14:
        v73 = *(_QWORD *)((char *)v6 + v10);
        v74 = *(_QWORD *)((char *)v6 + v8 + 12);
        *((_DWORD *)a2 + 3) = v8 + 20;
        *((_DWORD *)a2 + 4) = v7 + 3;
        v75 = Phase::Controller::ProcedureManager_RT::StopProcedure((uint64_t)this + 2440384, v73);
        v76 = (uint64_t *)((char *)this + 24);
        v77 = 5;
        goto LABEL_147;
      case 0x15:
        v73 = *(_QWORD *)((char *)v6 + v10);
        v74 = *(_QWORD *)((char *)v6 + v8 + 12);
        *((_DWORD *)a2 + 3) = v8 + 20;
        *((_DWORD *)a2 + 4) = v7 + 3;
        v75 = Phase::Controller::ProcedureManager_RT::PauseProcedure((uint64_t)this + 2440384, v73, v74);
        v76 = (uint64_t *)((char *)this + 24);
        v77 = 7;
LABEL_147:
        Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM::ProcedureBase *,long long,BOOL>(v76, v77, v73, v74, v75);
        return a4.n128_f64[0];
      case 0x16:
        v78 = *(_QWORD *)((char *)v6 + v10);
        *((_DWORD *)a2 + 3) = v8 + 20;
        *((_DWORD *)a2 + 4) = v7 + 3;
        v79 = *(unsigned int *)((char *)v6 + v8 + 20);
        v80 = *(unsigned int *)((char *)v6 + v8 + 24);
        *((_DWORD *)a2 + 3) = v8 + 32;
        *((_DWORD *)a2 + 4) = v7 + 5;
        v81 = *(unsigned int *)((char *)v6 + v8 + 32);
        *((_DWORD *)a2 + 3) = v8 + 36;
        *((_DWORD *)a2 + 4) = v7 + 6;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v78 + 24))(v78, v79, v80, v81);
        return a4.n128_f64[0];
      case 0x17:
        v82 = *(_QWORD *)((char *)v6 + v10);
        *((_DWORD *)a2 + 3) = v8 + 20;
        *((_DWORD *)a2 + 4) = v7 + 3;
        v83 = *(unsigned int *)((char *)v6 + v8 + 20);
        v84 = *(double *)((char *)v6 + v8 + 24);
        *((_DWORD *)a2 + 3) = v8 + 32;
        *((_DWORD *)a2 + 4) = v7 + 5;
        *(float *)&v84 = v84;
        (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v82 + 16))(v82, v83, *(float *)&v84);
        return a4.n128_f64[0];
      case 0x18:
        v85 = *(_QWORD *)((char *)v6 + v10);
        *((_DWORD *)a2 + 3) = v8 + 12;
        *((_DWORD *)a2 + 4) = v7 + 2;
        (*(void (**)(uint64_t))(*(_QWORD *)v85 + 32))(v85);
        return a4.n128_f64[0];
      default:
        Phase::Controller::DVM_RT::DVMRTOSCCommand_ToString((Phase::Controller::DVM_RT *)&__p, a2);
        v19 = (uint64_t *)((char *)this + 24);
        if (v252 >= 0)
          p_p = (char *)&__p;
        else
          p_p = (char *)__p;
        v21 = 1;
        goto LABEL_17;
    }
    while (1)
    {
      v163 = (char *)*((_QWORD *)v163 + 1);
      if (!v163)
        break;
      v164 = *((_QWORD *)v163 + 2);
      if (v164 >= v160)
      {
        if (v164 == v160)
        {
          Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long,std::function<void ()(float *,unsigned long)> *>((uint64_t *)this + 3, (uint64_t)v148, v149, v162);
          Phase::CalendarQueue<32,256,std::function<void ()(float *,unsigned long)> *>::CancelEvents((uint64_t)this + 18816, v160);
        }
        break;
      }
    }
    v165 = Phase::CalendarQueue<32,256,std::function<void ()(float *,unsigned long)> *>::ScheduleEvent((uint64_t)this + 18816, v160);
    if (v165)
      *v165 = v162;
    else
      Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long>((uint64_t *)this + 3, 0x10u, (uint64_t)v148, v149);
    v166.n128_f64[0] = (double)(unint64_t)(*(_QWORD *)(*((_QWORD *)this + 2) + 16) - *((_QWORD *)this + 5));
    Phase::DspLayer::VoicePool::SetParameter((Phase::DspLayer::VoicePool *)v148, v149, 1, v166);
LABEL_181:
    v139 = (Phase::DspLayer::VoicePool *)v148;
    v140 = v149;
LABEL_182:
    Phase::DspLayer::VoicePool::UpdateParameters(v139, v140);
  }
  return a4.n128_f64[0];
}

void sub_2165768F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  char *v31;
  uint64_t v32;

  v31 = *(char **)(v29 + 24);
  if (v31 == &a25)
  {
    v32 = 4;
    v31 = &a25;
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t Phase::CalendarQueue<64,2048,Phase::Controller::DVM_RT::OSCData>::CancelAllEvents(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = *(uint64_t **)(v5 + 8 * v6 + 8);
    if (v8)
    {
      do
      {
        v9 = v8[2];
        v10 = *(_QWORD *)(a2 + 24);
        v12 = a3;
        v13 = v9;
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v10 + 48))(v10, &v13, v8 + 3, &v12);
        v11 = (uint64_t *)v8[1];
        if ((_DWORD)result)
        {
          result = Phase::CalendarQueue<64,2048,Phase::Controller::DVM_RT::OSCData>::RemoveNode(v5, v8);
          ++v7;
        }
        v8 = v11;
      }
      while (v11);
    }
    ++v6;
  }
  while (v6 != 64);
  return result;
}

double Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::DspLayer::VoicePool *,long long,Phase::DspLayer::VoicePoolErr>(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v5 = *((int *)a1 + 3);
  if (*((_DWORD *)a1 + 2) - (int)v5 >= 40)
  {
    v6 = *a1 + v5;
    *(_QWORD *)(v6 + 4) = a2;
    *(_QWORD *)(v6 + 16) = a3;
    *(_QWORD *)(v6 + 24) = a4;
    *(_QWORD *)&result = 6842480;
    *(_DWORD *)(v6 + 12) = 6842480;
    *(_QWORD *)(v6 + 32) = a5;
    v8 = *a1;
    *(_DWORD *)(v8 + *((int *)a1 + 3)) = 36;
    *(_DWORD *)(v8 + 16) += 40;
    *((_DWORD *)a1 + 3) += 40;
  }
  return result;
}

uint64_t *Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM::ProcedureBase *,long long,BOOL>(uint64_t *result, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v5 = *((int *)result + 3);
  if (*((_DWORD *)result + 2) - (int)v5 >= 32)
  {
    v6 = *result + v5;
    *(_QWORD *)(v6 + 4) = a2;
    *(_BYTE *)(v6 + 15) = 0;
    *(_WORD *)(v6 + 12) = 26736;
    *(_QWORD *)(v6 + 16) = a3;
    *(_QWORD *)(v6 + 24) = a4;
    if (a5)
      v7 = 84;
    else
      v7 = 70;
    *(_BYTE *)(v6 + 14) = v7;
    v8 = *result;
    *(_DWORD *)(v8 + *((int *)result + 3)) = 28;
    *(_DWORD *)(v8 + 16) += 32;
    *((_DWORD *)result + 3) += 32;
  }
  return result;
}

uint64_t Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::CancelAllEvents(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = *(uint64_t **)(v5 + 8 * v6 + 8);
    if (v8)
    {
      do
      {
        v9 = v8[2];
        v10 = *(_QWORD *)(a2 + 24);
        v12 = a3;
        v13 = v9;
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v10 + 48))(v10, &v13, v8 + 3, &v12);
        v11 = (uint64_t *)v8[1];
        if ((_DWORD)result)
        {
          result = Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::RemoveNode(v5, v8);
          ++v7;
        }
        v8 = v11;
      }
      while (v11);
    }
    ++v6;
  }
  while (v6 != 256);
  return result;
}

uint64_t Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::CancelEvents(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  v3 = *(uint64_t **)(result + 8 * a2 + 8);
  if (v3)
  {
    v4 = result;
    while (v3[2] < a2)
    {
      v3 = (uint64_t *)v3[1];
      if (!v3)
        return result;
    }
    do
    {
      if (v3[2] != a2)
        break;
      v5 = (uint64_t *)v3[1];
      result = Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::RemoveNode(v4, v3);
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t Phase::CalendarQueue<32,256,Phase::Controller::DVM_RT::SamplerState>::CancelEvents(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = result + 8 * (a2 & 0x1F);
  v5 = *(_QWORD **)(v2 + 8);
  v3 = (_QWORD *)(v2 + 8);
  v4 = v5;
  if (v5)
  {
    while (v4[2] < a2)
    {
      v4 = (_QWORD *)v4[1];
      if (!v4)
        return result;
    }
    do
    {
      if (v4[2] != a2)
        break;
      v6 = (_QWORD *)v4[1];
      if (*v4)
        v7 = (_QWORD *)(*v4 + 8);
      else
        v7 = v3;
      *v7 = v6;
      v8 = (_QWORD *)v4[1];
      if (v8)
        *v8 = *v4;
      v9 = *(_QWORD **)result;
      *v4 = 0;
      v4[1] = v9;
      if (v9)
        *v9 = v4;
      *(_QWORD *)result = v4;
      --*(_DWORD *)(result + 18696);
      v4 = v6;
    }
    while (v6);
  }
  return result;
}

uint64_t Phase::CalendarQueue<32,256,std::function<void ()(float *,unsigned long)> *>::CancelEvents(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = result + 8 * (a2 & 0x1F);
  v5 = *(_QWORD **)(v2 + 8);
  v3 = (_QWORD *)(v2 + 8);
  v4 = v5;
  if (v5)
  {
    while (v4[2] < a2)
    {
      v4 = (_QWORD *)v4[1];
      if (!v4)
        return result;
    }
    do
    {
      if (v4[2] != a2)
        break;
      v6 = (_QWORD *)v4[1];
      if (*v4)
        v7 = (_QWORD *)(*v4 + 8);
      else
        v7 = v3;
      *v7 = v6;
      v8 = (_QWORD *)v4[1];
      if (v8)
        *v8 = *v4;
      v9 = *(_QWORD **)result;
      *v4 = 0;
      v4[1] = v9;
      if (v9)
        *v9 = v4;
      *(_QWORD *)result = v4;
      --*(_DWORD *)(result + 8456);
      v4 = v6;
    }
    while (v6);
  }
  return result;
}

uint64_t *Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long,Phase::DspLayer::VoicePool *,long long,int,Phase::DspLayer::VoiceEngine::BusId,int,Phase::DspLayer::VoicePoolErr>(uint64_t *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9, int a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = *((int *)result + 3);
  if (*((_DWORD *)result + 2) - (int)v10 >= 88)
  {
    v11 = *result + v10;
    *(_QWORD *)(v11 + 4) = 9;
    *(_QWORD *)(v11 + 24) = a2;
    *(_QWORD *)(v11 + 32) = a3;
    *(_QWORD *)(v11 + 40) = a4;
    *(_QWORD *)(v11 + 48) = a5;
    *(_QWORD *)(v11 + 56) = a6;
    *(_DWORD *)(v11 + 64) = a7;
    *(_QWORD *)(v11 + 68) = a8;
    strcpy((char *)(v11 + 12), "hphphihih");
    *(_DWORD *)(v11 + 76) = a9;
    *(_QWORD *)(v11 + 80) = a10;
    v12 = *result;
    *(_DWORD *)(v12 + *((int *)result + 3)) = 84;
    *(_DWORD *)(v12 + 16) += 88;
    *((_DWORD *)result + 3) += 88;
  }
  return result;
}

_QWORD *Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::ScheduleEvent(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v3 = (_QWORD *)v2[1];
    *(_QWORD *)a1 = v3;
    if (v3)
      *v3 = 0;
    *v2 = 0;
    v2[1] = 0;
    v2[2] = a2;
    v4 = a1 + 8 * a2;
    v7 = *(_QWORD **)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v5 = v7;
    if (v7)
    {
      if (v5[2] <= a2)
      {
        while (1)
        {
          v9 = v5;
          v5 = (_QWORD *)v5[1];
          if (!v5)
            break;
          if (v5[2] > a2)
          {
            *v5 = v2;
            *v2 = v9;
            v2[1] = v5;
            v9[1] = v2;
            goto LABEL_8;
          }
        }
        v9[1] = v2;
        *v2 = v9;
        goto LABEL_8;
      }
      v2[1] = v5;
      *v5 = v2;
    }
    *v6 = v2;
LABEL_8:
    ++*(_DWORD *)(a1 + 919560);
    return v2 + 3;
  }
  return 0;
}

uint64_t *Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long,Phase::DspLayer::VoicePool *,long long,int,Phase::DspLayer::VoiceEngine::BusId,int>(uint64_t *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *((int *)result + 3);
  if (*((_DWORD *)result + 2) - (int)v9 >= 80)
  {
    v10 = *result + v9;
    *(_QWORD *)(v10 + 4) = 9;
    *(_QWORD *)(v10 + 24) = a2;
    *(_QWORD *)(v10 + 32) = a3;
    *(_QWORD *)(v10 + 40) = a4;
    *(_QWORD *)(v10 + 48) = a5;
    *(_QWORD *)(v10 + 56) = a6;
    *(_DWORD *)(v10 + 64) = a7;
    *(_QWORD *)(v10 + 68) = a8;
    strcpy((char *)(v10 + 12), "hphphihi");
    *(_DWORD *)(v10 + 76) = a9;
    v11 = *result;
    *(_DWORD *)(v11 + *((int *)result + 3)) = 76;
    *(_DWORD *)(v11 + 16) += 80;
    *((_DWORD *)result + 3) += 80;
  }
  return result;
}

uint64_t Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::CancelEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;

  v3 = *(uint64_t **)(a1 + 8 * a2 + 8);
  if (!v3)
    return 0;
  while (1)
  {
    v5 = v3[2];
    if (v5 >= a2)
      break;
    v3 = (uint64_t *)v3[1];
    if (!v3)
      return 0;
  }
  if (v5 != a2)
    return 0;
  if (!a3)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 48))(a3, v3 + 3);
  if ((_DWORD)result)
  {
    Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::RemoveNode(a1, v3);
    return 1;
  }
  return result;
}

uint64_t *Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long,Phase::DspLayer::VoicePool *,long long,int,Phase::DspLayer::VoiceEngine::BusId,int,float,Phase::DspLayer::VoicePoolErr>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, float a9, int a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = *((int *)result + 3);
  if (*((_DWORD *)result + 2) - (int)v10 >= 92)
  {
    v11 = *result + v10;
    *(_QWORD *)(v11 + 4) = 9;
    *(_QWORD *)(v11 + 24) = 12;
    *(_QWORD *)(v11 + 32) = a2;
    *(_QWORD *)(v11 + 40) = a3;
    *(_QWORD *)(v11 + 48) = a4;
    *(_QWORD *)(v11 + 56) = a5;
    *(_DWORD *)(v11 + 64) = a6;
    *(_QWORD *)(v11 + 68) = a7;
    strcpy((char *)(v11 + 12), "hphphihifh");
    *(_DWORD *)(v11 + 76) = a8;
    *(float *)(v11 + 80) = a9;
    *(_QWORD *)(v11 + 84) = a10;
    v12 = *result;
    *(_DWORD *)(v12 + *((int *)result + 3)) = 88;
    *(_DWORD *)(v12 + 16) += 92;
    *((_DWORD *)result + 3) += 92;
  }
  return result;
}

uint64_t *Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long,Phase::DspLayer::VoicePoolErr>(uint64_t *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *((int *)result + 3);
  if (*((_DWORD *)result + 2) - (int)v4 >= 52)
  {
    v5 = *result + v4;
    *(_QWORD *)(v5 + 4) = 9;
    *(_QWORD *)(v5 + 20) = 11;
    *(_QWORD *)(v5 + 28) = a2;
    *(_QWORD *)(v5 + 36) = a3;
    strcpy((char *)(v5 + 12), "hphh");
    *(_QWORD *)(v5 + 44) = a4;
    v6 = *result;
    *(_DWORD *)(v6 + *((int *)result + 3)) = 48;
    *(_DWORD *)(v6 + 16) += 52;
    *((_DWORD *)result + 3) += 52;
  }
  return result;
}

uint64_t Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::Clear(uint64_t result)
{
  uint64_t i;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  for (i = 0; i != 256; ++i)
  {
    v2 = result + 8 * i;
    v5 = *(_QWORD *)(v2 + 8);
    v3 = (_QWORD *)(v2 + 8);
    v4 = v5;
    if (v5)
    {
      v6 = v4;
      do
      {
        v7 = v6;
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6);
      v8 = *(_QWORD **)result;
      *(_QWORD *)(v7 + 8) = *(_QWORD *)result;
      if (v8)
        *v8 = v7;
      *(_QWORD *)result = v4;
    }
    *v3 = 0;
  }
  *(_DWORD *)(result + 919560) = 0;
  return result;
}

uint64_t *Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long,int,double,Phase::DspLayer::VoicePoolErr>(uint64_t *result, uint64_t a2, uint64_t a3, int a4, int a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *((int *)result + 3);
  if (*((_DWORD *)result + 2) - (int)v6 >= 64)
  {
    v7 = *result + v6;
    *(_QWORD *)(v7 + 4) = 9;
    *(_QWORD *)(v7 + 20) = 4;
    *(_QWORD *)(v7 + 28) = a2;
    *(_QWORD *)(v7 + 36) = a3;
    strcpy((char *)(v7 + 12), "hphidh");
    *(_DWORD *)(v7 + 44) = a4;
    *(double *)(v7 + 48) = a6;
    *(_QWORD *)(v7 + 56) = a5;
    v8 = *result;
    *(_DWORD *)(v8 + *((int *)result + 3)) = 60;
    *(_DWORD *)(v8 + 16) += 64;
    *((_DWORD *)result + 3) += 64;
  }
  return result;
}

uint64_t *Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::DspLayer::VoicePool *,long long,void *,int,Phase::DspLayer::VoicePoolErr>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *((int *)result + 3);
  if (*((_DWORD *)result + 2) - (int)v6 >= 56)
  {
    v7 = *result + v6;
    *(_QWORD *)(v7 + 4) = 0;
    *(_QWORD *)(v7 + 20) = a2;
    *(_QWORD *)(v7 + 28) = a3;
    *(_QWORD *)(v7 + 36) = a4;
    strcpy((char *)(v7 + 12), "phpih");
    *(_DWORD *)(v7 + 44) = a5;
    *(_QWORD *)(v7 + 48) = a6;
    v8 = *result;
    *(_DWORD *)(v8 + *((int *)result + 3)) = 52;
    *(_DWORD *)(v8 + 16) += 56;
    *((_DWORD *)result + 3) += 56;
  }
  return result;
}

double Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,long long,long long,long long,long long>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v5 = *((int *)a1 + 3);
  if (*((_DWORD *)a1 + 2) - (int)v5 >= 52)
  {
    v6 = *a1 + v5;
    *(_QWORD *)(v6 + 4) = 8;
    *(_QWORD *)(v6 + 20) = a2;
    *(_QWORD *)(v6 + 28) = a3;
    *(_QWORD *)(v6 + 36) = a4;
    result = 8.90874679e194;
    strcpy((char *)(v6 + 12), "hhhh");
    *(_QWORD *)(v6 + 44) = a5;
    v8 = *a1;
    *(_DWORD *)(v8 + *((int *)a1 + 3)) = 48;
    *(_DWORD *)(v8 + 16) += 52;
    *((_DWORD *)a1 + 3) += 52;
  }
  return result;
}

_QWORD *Phase::CalendarQueue<32,256,Phase::Controller::DVM_RT::SamplerState>::ScheduleEvent(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v3 = (_QWORD *)v2[1];
    *(_QWORD *)a1 = v3;
    if (v3)
      *v3 = 0;
    *v2 = 0;
    v2[1] = 0;
    v2[2] = a2;
    v4 = a1 + 8 * (a2 & 0x1F);
    v7 = *(_QWORD **)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v5 = v7;
    if (v7)
    {
      if (v5[2] <= a2)
      {
        while (1)
        {
          v9 = v5;
          v5 = (_QWORD *)v5[1];
          if (!v5)
            break;
          if (v5[2] > a2)
          {
            *v5 = v2;
            *v2 = v9;
            v2[1] = v5;
            v9[1] = v2;
            goto LABEL_8;
          }
        }
        v9[1] = v2;
        *v2 = v9;
        goto LABEL_8;
      }
      v2[1] = v5;
      *v5 = v2;
    }
    *v6 = v2;
LABEL_8:
    ++*(_DWORD *)(a1 + 18696);
    return v2 + 3;
  }
  return 0;
}

void Phase::Controller::DVM_RT::RenderAndSetNextSamplerBuffer(uint64_t a1, Phase::DspLayer::VoicePool *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int (*a7)(uint64_t, double *, _QWORD, uint64_t), uint64_t a8, _QWORD *a9)
{
  uint64_t v15;
  double v16;
  int v17;
  int v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  _QWORD *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = (double)(unint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(a1 + 40));
  v36 = *(double *)(a1 + 48) + v16;
  LODWORD(v40) = 1;
  v17 = *(_DWORD *)(a1 + 104);
  if ((v17 & 2) != 0)
  {
    *(_QWORD *)&v37 = *(_QWORD *)(a1 + 56) + (uint64_t)(v16 / *(double *)v15 * 24000000.0);
    LODWORD(v40) = 3;
    v18 = 7;
    if ((v17 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v18 = 5;
  if ((v17 & 4) != 0)
  {
LABEL_5:
    *((_QWORD *)&v37 + 1) = *(_QWORD *)(a1 + 64);
    LODWORD(v40) = v18;
  }
LABEL_6:
  v41 = a3;
  v19 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(a9, (unint64_t *)&v41);
  if (v19)
  {
    v20 = (void *)v19[3];
    v21 = *((unsigned __int8 *)v19 + 32);
    *((_BYTE *)v19 + 32) = 0;
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  if (*(_DWORD *)(a8 + 12) >> 2 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24))
    v22 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24);
  else
    v22 = *(_DWORD *)(a8 + 12) >> 2;
  v23 = (_BYTE *)*((_QWORD *)a2 + 6);
  if (!v23)
    goto LABEL_30;
  v24 = *v23;
  if (!*v23)
    goto LABEL_30;
  v25 = v23 + 1;
  v26 = 0xCBF29CE484222325;
  do
  {
    v26 = 0x100000001B3 * (v26 ^ v24);
    v27 = *v25++;
    v24 = v27;
  }
  while (v27);
  v28 = v26 == 0xCFE1F9A8E823B67BLL || v26 == 0xE8CBC3A55AEFC3DALL;
  if (!v28 && v26 != 0x15687F45806132E7)
  {
LABEL_30:
    Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long>((uint64_t *)(a1 + 24), 3u, (uint64_t)a2, a3);
    return;
  }
  if (v21)
    goto LABEL_28;
  if (a7(a6, &v36, v22, a8))
  {
    v41 = a3;
    v30 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(a9, (unint64_t *)&v41);
    if (!v30 || (v20 = (void *)v30[3], v31 = *((unsigned __int8 *)v30 + 32), *((_BYTE *)v30 + 32) = 0, !v31))
      __assert_rtn("RenderAndSetNextSamplerBuffer", "DVM_RT.cpp", 1439, "bufferState.second == true");
LABEL_28:
    if (!v20)
      __assert_rtn("RenderAndSetNextSamplerBuffer", "DVM_RT.cpp", 1463, "false && \"DVM_RT::RenderAndSetNextSamplerBuffer failed to find a buffer to set on a sampler.\"");
    Phase::DspLayer::VoicePool::SetBuffer(a2, a3, 0, v20);
    return;
  }
  if (v22 >= 48000)
    v32 = 48000;
  else
    v32 = v22;
  Phase::DspLayer::VoicePool::SetBuffer(a2, a3, 0, *(void **)(*(_QWORD *)(a1 + 16) + 74944));
  v33 = *(int *)(a1 + 36);
  if (*(_DWORD *)(a1 + 32) - (int)v33 >= 48)
  {
    v34 = *(_QWORD *)(a1 + 24) + v33;
    *(_QWORD *)(v34 + 4) = 9;
    *(_QWORD *)(v34 + 20) = 0;
    *(_QWORD *)(v34 + 28) = a2;
    *(_QWORD *)(v34 + 36) = a3;
    strcpy((char *)(v34 + 12), "hphi");
    *(_DWORD *)(v34 + 44) = v32;
    v35 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(v35 + *(int *)(a1 + 36)) = 44;
    *(_DWORD *)(v35 + 16) += 48;
    *(_DWORD *)(a1 + 36) += 48;
  }
}

double Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long>(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;

  v4 = *((int *)a1 + 3);
  if (*((_DWORD *)a1 + 2) - (int)v4 >= 40)
  {
    v5 = *a1 + v4;
    *(_QWORD *)(v5 + 4) = 9;
    *(_QWORD *)(v5 + 16) = a2;
    *(_QWORD *)(v5 + 24) = a3;
    *(_QWORD *)&result = 6844520;
    *(_DWORD *)(v5 + 12) = 6844520;
    *(_QWORD *)(v5 + 32) = a4;
    v7 = *a1;
    *(_DWORD *)(v7 + *((int *)a1 + 3)) = 36;
    *(_DWORD *)(v7 + 16) += 40;
    *((_DWORD *)a1 + 3) += 40;
  }
  return result;
}

uint64_t *Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long,BOOL (*)(void *,AudioTimeStamp const&,unsigned long,AudioBufferList *)>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *((int *)result + 3);
  if (*((_DWORD *)result + 2) - (int)v4 >= 52)
  {
    v5 = *result + v4;
    *(_QWORD *)(v5 + 4) = 9;
    *(_QWORD *)(v5 + 20) = 14;
    *(_QWORD *)(v5 + 28) = a2;
    *(_QWORD *)(v5 + 36) = a3;
    strcpy((char *)(v5 + 12), "hphp");
    *(_QWORD *)(v5 + 44) = a4;
    v6 = *result;
    *(_DWORD *)(v6 + *((int *)result + 3)) = 48;
    *(_DWORD *)(v6 + 16) += 52;
    *((_DWORD *)result + 3) += 52;
  }
  return result;
}

uint64_t *Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,Phase::DspLayer::VoicePool *,long long,std::function<void ()(float *,unsigned long)> *>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *((int *)result + 3);
  if (*((_DWORD *)result + 2) - (int)v4 >= 52)
  {
    v5 = *result + v4;
    *(_QWORD *)(v5 + 4) = 9;
    *(_QWORD *)(v5 + 20) = 13;
    *(_QWORD *)(v5 + 28) = a2;
    *(_QWORD *)(v5 + 36) = a3;
    strcpy((char *)(v5 + 12), "hphp");
    *(_QWORD *)(v5 + 44) = a4;
    v6 = *result;
    *(_DWORD *)(v6 + *((int *)result + 3)) = 48;
    *(_DWORD *)(v6 + 16) += 52;
    *((_DWORD *)result + 3) += 52;
  }
  return result;
}

uint64_t Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::Controller::DVM_RT::DVMRTError,char const*>(uint64_t *a1, unsigned int a2, char *__s)
{
  uint64_t v6;
  signed int v7;
  uint64_t result;
  uint64_t v9;
  void *v10;
  size_t v11;
  int v12;
  uint64_t v13;

  v6 = *((int *)a1 + 3);
  v7 = *((_DWORD *)a1 + 2) - v6 - 4;
  result = strlen(__s);
  if ((int)((result & 0xFFFFFFFC) + 24) <= v7)
  {
    v9 = *a1 + v6;
    *(_QWORD *)(v9 + 4) = 9;
    strcpy((char *)(v9 + 12), "hs");
    *(_QWORD *)(v9 + 16) = a2;
    v10 = (void *)(v9 + 24);
    v11 = strlen(__s);
    v12 = (v11 + 4) & 0xFFFFFFFC;
    result = (uint64_t)memcpy(v10, __s, v11 + 1);
    if (v12 >= -20)
    {
      v13 = *a1;
      *(_DWORD *)(v13 + *((int *)a1 + 3)) = v12 + 20;
      *(_DWORD *)(v13 + 16) += v12 + 24;
      *((_DWORD *)a1 + 3) += v12 + 24;
    }
  }
  return result;
}

_QWORD *Phase::Controller::DVM_RT::DVMRTOSCCommand_ToString(Phase::Controller::DVM_RT *this, Phase::PhaseOSCMessage *a2)
{
  int *v4;
  size_t v5;
  uint64_t v6;
  int v7;
  int v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  _QWORD *result;
  const char *v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  float v30;
  int v31;
  float v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  double v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  double v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  const char *v61;
  double v62;
  double v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  const char *v69;
  unint64_t v70;
  const char *v71;
  const char *v72;
  uint64_t v73;
  const char *v74;
  const char *v75;
  uint64_t v76;
  const char *v77;
  double v78;
  const char *v79;
  float v80;
  double v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  const char *v86;
  double v87;
  const char *v88;
  double v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  char __str[1024];
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v4 = *(int **)a2;
  v5 = strlen((const char *)(*(_QWORD *)a2 + 8)) & 0xFFFFFFFC;
  *((_DWORD *)a2 + 3) = v5 + 12;
  *((_DWORD *)a2 + 4) = 0;
  v6 = *(unsigned int *)((char *)v4 + (int)v5 + 12);
  v7 = *v4;
  v8 = v5 + 16;
  *((_DWORD *)a2 + 3) = v5 + 16;
  *((_DWORD *)a2 + 4) = 1;
  switch(v7)
  {
    case 0:
      v83 = v6;
      v9 = "ClearPools<%i>";
      goto LABEL_36;
    case 1:
      v10 = *(const char **)((char *)v4 + v8);
      *((_DWORD *)a2 + 3) = v5 + 24;
      *((_DWORD *)a2 + 4) = 2;
      v11 = *((_QWORD *)v10 + 6);
      v12 = (const char *)*(unsigned int *)((char *)v4 + (int)v5 + 24);
      *((_DWORD *)a2 + 3) = v5 + 28;
      *((_DWORD *)a2 + 4) = 3;
      v85 = v10;
      v86 = v12;
      v83 = v6;
      v84 = v11;
      v9 = "AddPool<%i> %s(%08x) idx:%i";
      goto LABEL_36;
    case 3:
      v14 = *(const char **)((char *)v4 + v8);
      v15 = *((_QWORD *)v14 + 6);
      v16 = *(const char **)((char *)v4 + (int)v5 + 24);
      *((_DWORD *)a2 + 3) = v5 + 32;
      *((_DWORD *)a2 + 4) = 3;
      v85 = v14;
      v86 = v16;
      v83 = v6;
      v84 = v15;
      v9 = "PlayVoice<%i> %s(%08x):%lli";
      goto LABEL_36;
    case 4:
      v17 = *(const char **)((char *)v4 + v8);
      v18 = *((_QWORD *)v17 + 6);
      v19 = *(const char **)((char *)v4 + (int)v5 + 24);
      *((_DWORD *)a2 + 3) = v5 + 32;
      *((_DWORD *)a2 + 4) = 3;
      v85 = v17;
      v86 = v19;
      v83 = v6;
      v84 = v18;
      v9 = "PauseVoice<%i> %s(%08x):%lli";
      goto LABEL_36;
    case 5:
      v20 = *(const char **)((char *)v4 + v8);
      v21 = *((_QWORD *)v20 + 6);
      v22 = *(const char **)((char *)v4 + (int)v5 + 24);
      *((_DWORD *)a2 + 3) = v5 + 32;
      *((_DWORD *)a2 + 4) = 3;
      v85 = v20;
      v86 = v22;
      v83 = v6;
      v84 = v21;
      v9 = "StopVoice<%i> %s(%08x):%lli";
      goto LABEL_36;
    case 6:
      v23 = *(const char **)((char *)v4 + v8);
      v24 = *(const char **)((char *)v4 + (int)v5 + 24);
      v25 = *(_QWORD *)((char *)v4 + (int)v5 + 32);
      v26 = *(_QWORD *)((char *)v4 + (int)v5 + 40);
      *((_DWORD *)a2 + 3) = v5 + 48;
      *((_DWORD *)a2 + 4) = 5;
      v27 = (const char *)*(unsigned int *)((char *)v4 + (int)v5 + 48);
      v28 = *(_QWORD *)((char *)v4 + (int)v5 + 52);
      *((_DWORD *)a2 + 3) = v5 + 60;
      *((_DWORD *)a2 + 4) = 7;
      v29 = (const char *)*(unsigned int *)((char *)v4 + (int)v5 + 60);
      v30 = *(float *)((char *)v4 + (int)v5 + 64);
      *((_DWORD *)a2 + 3) = v5 + 68;
      *((_DWORD *)a2 + 4) = 9;
      v31 = *((unsigned __int8 *)v4 + 17);
      *((_DWORD *)a2 + 4) = 10;
      if (v31 == 84)
      {
        v32 = log10f(v30);
        v90 = (const char *)v25;
        v91 = v26;
        v88 = v27;
        v89 = *(double *)(v25 + 48);
        v87 = (float)(v32 * 10.0);
        v9 = "AddVoiceInput<%i> Procedure(%08x):%lli ]- in:%i@%5.2fdB ->[%i %s(%08x):%lli";
        v85 = v24;
        v86 = v29;
        v84 = (uint64_t)v23;
      }
      else
      {
        v95 = *((_QWORD *)v23 + 6);
        if (v28 > 5)
          *(double *)&v79 = COERCE_DOUBLE("bus");
        else
          v79 = off_24D57BF18[(int)v28];
        v82 = log10f(v30);
        v92 = v25;
        v93 = v26;
        v90 = v27;
        v91 = *(_QWORD *)(v25 + 48);
        v89 = (float)(v82 * 10.0);
        v87 = *(double *)&v79;
        v88 = v29;
        v9 = "AddVoiceInput<%i> %s(%08x):%lli ]- %s:%i@%5.2fdB ->[%i %s(%08x):%lli";
        v85 = v23;
        v86 = v24;
        v84 = v95;
      }
      goto LABEL_35;
    case 8:
      v33 = *(const char **)((char *)v4 + v8);
      v34 = *(const char **)((char *)v4 + (int)v5 + 24);
      v35 = *(_QWORD *)((char *)v4 + (int)v5 + 32);
      v36 = *(_QWORD *)((char *)v4 + (int)v5 + 40);
      *((_DWORD *)a2 + 3) = v5 + 48;
      *((_DWORD *)a2 + 4) = 5;
      v37 = (const char *)*(unsigned int *)((char *)v4 + (int)v5 + 48);
      v38 = *(_QWORD *)((char *)v4 + (int)v5 + 52);
      *((_DWORD *)a2 + 3) = v5 + 60;
      *((_DWORD *)a2 + 4) = 7;
      v39 = (const char *)*(unsigned int *)((char *)v4 + (int)v5 + 60);
      v40 = *(float *)((char *)v4 + (int)v5 + 64);
      *((_DWORD *)a2 + 3) = v5 + 68;
      *((_DWORD *)a2 + 4) = 9;
      v41 = *((_QWORD *)v33 + 6);
      v94 = v33;
      v42 = v36;
      if (v38 > 5)
        *(double *)&v43 = COERCE_DOUBLE("bus");
      else
        v43 = off_24D57BF18[(int)v38];
      v80 = log10f(v40);
      v92 = v35;
      v93 = v42;
      v90 = v37;
      v91 = *(_QWORD *)(v35 + 48);
      v89 = (float)(v80 * 10.0);
      v87 = *(double *)&v43;
      v88 = v39;
      v9 = "SetVoiceInputGain<%i> %s(%08x):%lli ]- %s:%i@%5.2fdB ->[%i %s(%08x):%lli";
      v85 = v94;
      v86 = v34;
      v84 = v41;
      goto LABEL_35;
    case 9:
      v44 = *(const char **)((char *)v4 + v8);
      v45 = *((_QWORD *)v44 + 6);
      v46 = *(const char **)((char *)v4 + (int)v5 + 24);
      *((_DWORD *)a2 + 3) = v5 + 32;
      *((_DWORD *)a2 + 4) = 3;
      *(_QWORD *)&v47 = *(unsigned int *)((char *)v4 + (int)v5 + 32);
      v48 = *(_QWORD *)((char *)v4 + (int)v5 + 36);
      *((_DWORD *)a2 + 3) = v5 + 44;
      *((_DWORD *)a2 + 4) = 5;
      if (v48 > 5)
        v49 = "bus";
      else
        v49 = off_24D57BF18[(int)v48];
      *(_QWORD *)&v81 = *(unsigned int *)((char *)v4 + (int)v5 + 44);
      *((_DWORD *)a2 + 3) = v5 + 48;
      *((_DWORD *)a2 + 4) = 6;
      v88 = v49;
      v89 = v81;
      v86 = v46;
      v87 = v47;
      v9 = "SetVoiceOutput<%i> %s(%08x):%lli %i]->%s:%i";
      v84 = v45;
      v85 = v44;
      goto LABEL_35;
    case 10:
      v50 = *(const char **)((char *)v4 + v8);
      v51 = *((_QWORD *)v50 + 6);
      v52 = *(const char **)((char *)v4 + (int)v5 + 24);
      *((_DWORD *)a2 + 3) = v5 + 32;
      *((_DWORD *)a2 + 4) = 3;
      v85 = v50;
      v86 = v52;
      v83 = v6;
      v84 = v51;
      v9 = "RemoveAllVoiceInputs<%i> %s(%08x):%lli";
      goto LABEL_36;
    case 11:
      v83 = v6;
      v9 = "ClearAllVoiceInputs<%i>";
      goto LABEL_36;
    case 12:
      v53 = *(const char **)((char *)v4 + v8);
      v54 = *((_QWORD *)v53 + 6);
      v55 = *(const char **)((char *)v4 + (int)v5 + 24);
      *((_DWORD *)a2 + 3) = v5 + 32;
      *((_DWORD *)a2 + 4) = 3;
      v56 = *(const char **)((char *)v4 + (int)v5 + 36);
      *(_QWORD *)&v57 = *(unsigned int *)((char *)v4 + (int)v5 + 32);
      *((_DWORD *)a2 + 3) = v5 + 44;
      *((_DWORD *)a2 + 4) = 5;
      v88 = v56;
      v86 = v55;
      v87 = v57;
      v84 = v54;
      v85 = v53;
      v83 = v6;
      v9 = "SetParameter<%i> %s(%08x):%lli param:%i val:%g";
      goto LABEL_36;
    case 13:
      v58 = *(const char **)((char *)v4 + v8);
      v59 = *((_QWORD *)v58 + 6);
      v60 = *(const char **)((char *)v4 + (int)v5 + 24);
      *((_DWORD *)a2 + 3) = v5 + 32;
      *((_DWORD *)a2 + 4) = 3;
      v61 = *(const char **)((char *)v4 + (int)v5 + 36);
      *(_QWORD *)&v62 = *(unsigned int *)((char *)v4 + (int)v5 + 32);
      *((_DWORD *)a2 + 3) = v5 + 44;
      *((_DWORD *)a2 + 4) = 5;
      *(_QWORD *)&v63 = *(unsigned int *)((char *)v4 + (int)v5 + 44);
      *((_DWORD *)a2 + 3) = v5 + 48;
      *((_DWORD *)a2 + 4) = 6;
      v88 = v61;
      v89 = v63;
      v86 = v60;
      v87 = v62;
      v9 = "SetBuffer<%i> %s(%08x):%lli buff:%i %p len:%i";
      v84 = v59;
      v85 = v58;
LABEL_35:
      v83 = v6;
      goto LABEL_36;
    case 15:
      v64 = *(const char **)((char *)v4 + v8);
      v65 = *((_QWORD *)v64 + 6);
      v66 = *(const char **)((char *)v4 + (int)v5 + 24);
      *((_DWORD *)a2 + 3) = v5 + 32;
      *((_DWORD *)a2 + 4) = 3;
      v85 = v64;
      v86 = v66;
      v83 = v6;
      v84 = v65;
      v9 = "UpdateVoice<%i> %s(%08x):%lli";
      goto LABEL_36;
    case 16:
      v67 = *(_QWORD *)((char *)v4 + v8);
      v68 = *(const char **)((char *)v4 + (int)v5 + 24);
      v69 = *(const char **)((char *)v4 + (int)v5 + 32);
      v70 = *(_QWORD *)((char *)v4 + (int)v5 + 40);
      *((_DWORD *)a2 + 3) = v5 + 48;
      *((_DWORD *)a2 + 4) = 5;
      if (v70 > 3)
        *(double *)&v71 = COERCE_DOUBLE("???");
      else
        v71 = off_24D57BF48[v70];
      v86 = v69;
      v87 = *(double *)&v71;
      v84 = v67;
      v85 = v68;
      v83 = v6;
      v9 = "NodePlayState<%i> nodeid:%lli 0x%lli%lli %s";
      goto LABEL_36;
    case 17:
      v72 = *(const char **)((char *)v4 + v8);
      v73 = *((_QWORD *)v72 + 6);
      v74 = *(const char **)((char *)v4 + (int)v5 + 24);
      *((_DWORD *)a2 + 3) = v5 + 32;
      *((_DWORD *)a2 + 4) = 3;
      v85 = v72;
      v86 = v74;
      v83 = v6;
      v84 = v73;
      v9 = "ConfigureSampler<%i> %s(%08x):%lli";
      goto LABEL_36;
    case 18:
      v75 = *(const char **)((char *)v4 + v8);
      v76 = *((_QWORD *)v75 + 6);
      v77 = *(const char **)((char *)v4 + (int)v5 + 24);
      v78 = *(double *)((char *)v4 + (int)v5 + 32);
      *((_DWORD *)a2 + 3) = v5 + 40;
      *((_DWORD *)a2 + 4) = 4;
      v86 = v77;
      v87 = v78;
      v84 = v76;
      v85 = v75;
      v83 = v6;
      v9 = "SetTapperCallback<%i> %s(%08x):%lli callback@%p";
LABEL_36:
      snprintf(__str, 0x400uLL, v9, v83, v84, v85, v86, *(_QWORD *)&v87, v88, *(_QWORD *)&v89, v90, v91, v92, v93);
      *(_QWORD *)((char *)a2 + 12) = (strlen((const char *)(*(_QWORD *)a2 + 8)) & 0xFFFFFFFC) + 12;
      result = std::string::basic_string[abi:ne180100]<0>(this, __str);
      break;
    default:
      result = Phase::PhaseOSCMessage::ToString(a2, this);
      break;
  }
  return result;
}

uint64_t Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::DspLayer::VoicePool *,long long>(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *((int *)a1 + 3);
  if (*((_DWORD *)a1 + 2) - (int)v4 < 32)
    return 0xFFFFFFFFLL;
  v6 = *a1 + v4;
  *(_QWORD *)(v6 + 4) = a2;
  strcpy((char *)(v6 + 12), "ph");
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  v7 = *a1;
  v5 = 28;
  *(_DWORD *)(v7 + *((int *)a1 + 3)) = 28;
  *(_DWORD *)(v7 + 16) += 32;
  *((_DWORD *)a1 + 3) += 32;
  return v5;
}

_QWORD *Phase::PhaseOSCMessage::ToString@<X0>(Phase::PhaseOSCMessage *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  unsigned __int8 *v7;
  char *v8;
  size_t v9;
  char *v10;
  size_t v11;
  int v12;
  int v13;
  uint64_t v15;
  _QWORD *v16;
  char __str[1024];
  uint64_t v18;

  v16 = a2;
  v18 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)this;
  *((_DWORD *)this + 3) = (strlen((const char *)(*(_QWORD *)this + 8)) & 0xFFFFFFFC) + 12;
  *((_DWORD *)this + 4) = 0;
  v4 = snprintf(__str, 0x400uLL, "0x%08llX", *(_QWORD *)v3);
  v5 = *(_BYTE *)(v3 + 8);
  if (v5)
  {
    v6 = v4;
    v7 = (unsigned __int8 *)(v3 + 9);
    do
    {
      if (v5 <= 99)
      {
        if (v5 != 70 && v5 != 84)
          goto LABEL_18;
        v10 = &__str[v6];
        v11 = 1024 - v6;
        if (v5 == 84)
          v12 = snprintf(v10, v11, " true", v15, v16);
        else
          v12 = snprintf(v10, v11, " false");
      }
      else
      {
        switch(v5)
        {
          case 'd':
            v8 = &__str[v6];
            v9 = 1024 - v6;
            *(int32x2_t *)((char *)this + 12) = vadd_s32(*(int32x2_t *)((char *)this + 12), (int32x2_t)0x100000008);
            goto LABEL_14;
          case 'e':
          case 'g':
            goto LABEL_18;
          case 'f':
            v8 = &__str[v6];
            v9 = 1024 - v6;
            *(int32x2_t *)((char *)this + 12) = vadd_s32(*(int32x2_t *)((char *)this + 12), (int32x2_t)0x100000004);
LABEL_14:
            v12 = snprintf(v8, v9, " %g");
            break;
          case 'h':
            *(int32x2_t *)((char *)this + 12) = vadd_s32(*(int32x2_t *)((char *)this + 12), (int32x2_t)0x100000008);
            v12 = snprintf(&__str[v6], 1024 - v6, " %lli");
            break;
          case 'i':
            *(int32x2_t *)((char *)this + 12) = vadd_s32(*(int32x2_t *)((char *)this + 12), (int32x2_t)0x100000004);
            v12 = snprintf(&__str[v6], 1024 - v6, " %i");
            break;
          default:
            if (v5 != 112)
              goto LABEL_18;
            *(int32x2_t *)((char *)this + 12) = vadd_s32(*(int32x2_t *)((char *)this + 12), (int32x2_t)0x100000008);
            v12 = snprintf(&__str[v6], 1024 - v6, " %p");
            break;
        }
      }
      v6 += v12;
LABEL_18:
      v13 = *v7++;
      v5 = v13;
    }
    while (v13);
  }
  *(_QWORD *)((char *)this + 12) = (strlen((const char *)(*(_QWORD *)this + 8)) & 0xFFFFFFFC) + 12;
  return std::string::basic_string[abi:ne180100]<0>(v16, __str);
}

double Phase::Controller::DVM_RT::Reset(Phase::Controller::DVM_RT *this)
{
  _DWORD *v2;
  _DWORD *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t i;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  double result;
  int v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = (_DWORD *)((char *)this + 601240);
  v3 = (_DWORD *)((char *)this + 18808);
  v4 = **(NSObject ***)(Phase::Logger::GetInstancePtr(this) + 80);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 16);
    v27 = 136315650;
    v28 = "DVM_RT.cpp";
    v29 = 1024;
    v30 = 1671;
    v31 = 2048;
    v32 = v5;
    _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d DVM-RT is reset @ Frame %llu", (uint8_t *)&v27, 0x1Cu);
  }
  Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::Clear((uint64_t)this + 601248);
  Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::Clear((uint64_t)this + 1520816);
  for (i = 0; i != 64; ++i)
  {
    v7 = (char *)this + 8 * i;
    v8 = *((_QWORD *)v7 + 3411);
    if (v8)
    {
      v9 = *((_QWORD *)v7 + 3411);
      do
      {
        v10 = v9;
        v9 = *(_QWORD *)(v9 + 8);
      }
      while (v9);
      v11 = (_QWORD *)*((_QWORD *)this + 3410);
      *(_QWORD *)(v10 + 8) = v11;
      if (v11)
        *v11 = v10;
      *((_QWORD *)this + 3410) = v8;
    }
    *((_QWORD *)v7 + 3411) = 0;
  }
  v12 = 0;
  *v2 = 0;
  do
  {
    v13 = (char *)this + 8 * v12;
    v16 = *((_QWORD *)v13 + 15);
    v14 = v13 + 120;
    v15 = v16;
    if (v16)
    {
      v17 = v15;
      do
      {
        v18 = v17;
        v17 = *(_QWORD *)(v17 + 8);
      }
      while (v17);
      v19 = (_QWORD *)*((_QWORD *)this + 14);
      *(_QWORD *)(v18 + 8) = v19;
      if (v19)
        *v19 = v18;
      *((_QWORD *)this + 14) = v15;
    }
    *v14 = 0;
    ++v12;
  }
  while (v12 != 32);
  v20 = 0;
  *v3 = 0;
  do
  {
    v21 = (char *)this + 8 * v20;
    v22 = *((_QWORD *)v21 + 2353);
    if (v22)
    {
      v23 = *((_QWORD *)v21 + 2353);
      do
      {
        v24 = v23;
        v23 = *(_QWORD *)(v23 + 8);
      }
      while (v23);
      v25 = (_QWORD *)*((_QWORD *)this + 2352);
      *(_QWORD *)(v24 + 8) = v25;
      if (v25)
        *v25 = v24;
      *((_QWORD *)this + 2352) = v22;
    }
    *((_QWORD *)v21 + 2353) = 0;
    ++v20;
  }
  while (v20 != 32);
  v3[2116] = 0;
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)this + 305049);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)this + 305054);
  result = 0.0;
  *(_OWORD *)((char *)this + 2440472) = 0u;
  *(_OWORD *)((char *)this + 2440488) = 0u;
  return result;
}

uint64_t Phase::CalendarQueue<64,2048,Phase::Controller::DVM_RT::OSCData>::RemoveNode(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v4;

  v2 = *a2;
  if (!*a2)
    v2 = result + 8 * (a2[2] & 0x3F);
  *(_QWORD *)(v2 + 8) = a2[1];
  v3 = (uint64_t *)a2[1];
  if (v3)
    *v3 = *a2;
  v4 = *(uint64_t ***)result;
  *a2 = 0;
  a2[1] = (uint64_t)v4;
  if (v4)
    *v4 = a2;
  *(_QWORD *)result = a2;
  --*(_DWORD *)(result + 573960);
  return result;
}

void std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_0,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_0>,BOOL ()(long long,Phase::Controller::DVM_RT::OSCData &,void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_0,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_0>,BOOL ()(long long,Phase::Controller::DVM_RT::OSCData &,void *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D57BDC0;
  return result;
}

void std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_0,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_0>,BOOL ()(long long,Phase::Controller::DVM_RT::OSCData &,void *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D57BDC0;
}

BOOL std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_0,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_0>,BOOL ()(long long,Phase::Controller::DVM_RT::OSCData &,void *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  _BOOL8 result;

  v4 = a3 + 4;
  result = 0;
  if (*(_DWORD *)(a3 + 4) == 4)
  {
    v5 = *a4;
    v6 = strlen((const char *)(a3 + 12)) & 0xFFFFFFFC;
    if (*v5 == *(_QWORD *)(v4 + v6 + 16) && *(_QWORD *)(v4 + v6 + 24) == v5[1])
      return 1;
  }
  return result;
}

uint64_t Phase::CalendarQueue<256,16384,Phase::Controller::DVM_RT::VoiceConnectionData>::RemoveNode(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v4;

  v2 = *a2;
  if (!*a2)
    v2 = result + 8 * *((unsigned __int8 *)a2 + 16);
  *(_QWORD *)(v2 + 8) = a2[1];
  v3 = (uint64_t *)a2[1];
  if (v3)
    *v3 = *a2;
  v4 = *(uint64_t ***)result;
  *a2 = 0;
  a2[1] = (uint64_t)v4;
  if (v4)
    *v4 = a2;
  *(_QWORD *)result = a2;
  --*(_DWORD *)(result + 919560);
  return result;
}

void std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_1,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_1>,BOOL ()(long long,Phase::Controller::DVM_RT::VoiceConnectionData &,void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_1,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_1>,BOOL ()(long long,Phase::Controller::DVM_RT::VoiceConnectionData &,void *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D57BE08;
  return result;
}

void std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_1,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_1>,BOOL ()(long long,Phase::Controller::DVM_RT::VoiceConnectionData &,void *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D57BE08;
}

BOOL std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_1,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_1>,BOOL ()(long long,Phase::Controller::DVM_RT::VoiceConnectionData &,void *)>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return *a3 == **(_QWORD **)a4 && a3[1] == *(_QWORD *)(*(_QWORD *)a4 + 8);
}

void std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_2,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_2>,BOOL ()(Phase::Controller::DVM_RT::VoiceConnectionData &)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_2,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_2>,BOOL ()(Phase::Controller::DVM_RT::VoiceConnectionData &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D57BE50;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_2,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_2>,BOOL ()(Phase::Controller::DVM_RT::VoiceConnectionData &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D57BE50;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_2,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_2>,BOOL ()(Phase::Controller::DVM_RT::VoiceConnectionData &)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2 == **(_QWORD **)(a1 + 8)
      && *(_QWORD *)(a2 + 8) == **(_QWORD **)(a1 + 16)
      && *(_DWORD *)(a2 + 16) == **(_DWORD **)(a1 + 24)
      && *(_DWORD *)(a2 + 20) == **(_DWORD **)(a1 + 32)
      && *(_DWORD *)(a2 + 24) == **(_DWORD **)(a1 + 40);
}

void std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_3,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_3>,BOOL ()(Phase::Controller::DVM_RT::VoiceConnectionData &)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_3,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_3>,BOOL ()(Phase::Controller::DVM_RT::VoiceConnectionData &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D57BE98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_3,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_3>,BOOL ()(Phase::Controller::DVM_RT::VoiceConnectionData &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D57BE98;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_3,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_3>,BOOL ()(Phase::Controller::DVM_RT::VoiceConnectionData &)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2 == **(_QWORD **)(a1 + 8)
      && *(_QWORD *)(a2 + 8) == **(_QWORD **)(a1 + 16)
      && *(_DWORD *)(a2 + 16) == **(_DWORD **)(a1 + 24)
      && *(_DWORD *)(a2 + 20) == **(_DWORD **)(a1 + 32)
      && *(_DWORD *)(a2 + 24) == **(_DWORD **)(a1 + 40);
}

void std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_4,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_4>,BOOL ()(long long,Phase::Controller::DVM_RT::VoiceConnectionData &,void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_4,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_4>,BOOL ()(long long,Phase::Controller::DVM_RT::VoiceConnectionData &,void *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D57BEE0;
  return result;
}

void std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_4,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_4>,BOOL ()(long long,Phase::Controller::DVM_RT::VoiceConnectionData &,void *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D57BEE0;
}

BOOL std::__function::__func<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_4,std::allocator<Phase::Controller::DVM_RT::ProcessMessageFromNRT(unsigned long long,Phase::PhaseOSCMessage &,BOOL)::$_4>,BOOL ()(long long,Phase::Controller::DVM_RT::VoiceConnectionData &,void *)>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return *a3 == **(_QWORD **)a4 && a3[1] == *(_QWORD *)(*(_QWORD *)a4 + 8);
}

_QWORD *Phase::CalendarQueue<32,256,std::function<void ()(float *,unsigned long)> *>::ScheduleEvent(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v3 = (_QWORD *)v2[1];
    *(_QWORD *)a1 = v3;
    if (v3)
      *v3 = 0;
    *v2 = 0;
    v2[1] = 0;
    v2[2] = a2;
    v4 = a1 + 8 * (a2 & 0x1F);
    v7 = *(_QWORD **)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v5 = v7;
    if (v7)
    {
      if (v5[2] <= a2)
      {
        while (1)
        {
          v9 = v5;
          v5 = (_QWORD *)v5[1];
          if (!v5)
            break;
          if (v5[2] > a2)
          {
            *v5 = v2;
            *v2 = v9;
            v2[1] = v5;
            v9[1] = v2;
            goto LABEL_8;
          }
        }
        v9[1] = v2;
        *v2 = v9;
        goto LABEL_8;
      }
      v2[1] = v5;
      *v5 = v2;
    }
    *v6 = v2;
LABEL_8:
    ++*(_DWORD *)(a1 + 8456);
    return v2 + 3;
  }
  return 0;
}

void Phase::Controller::VoiceEngineCallback(uint64_t *a1, uint64_t a2, Phase::DspLayer::VoicePool *this, uint64_t a4, int a5, uint64_t a6)
{
  _BYTE *v6;
  unsigned int v7;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  NSObject *v31;
  uint64_t v32;
  const char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE buf[18];
  __int16 v40;
  Phase::DspLayer::VoicePool *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v6 = (_BYTE *)*((_QWORD *)this + 6);
  if (!v6)
    return;
  v7 = *v6;
  if (!*v6)
    return;
  v12 = 0xCBF29CE484222325;
  v13 = v6 + 1;
  v14 = 0xCBF29CE484222325;
  do
  {
    v14 = 0x100000001B3 * (v14 ^ v7);
    v15 = *v13++;
    v7 = v15;
  }
  while (v15);
  if (v14 <= (uint64_t)0xD1A51C852B332C80)
  {
    if (v14 == 0x90B234A352A80E9BLL)
    {
      if (!a5)
      {
        if (*(int *)a6 <= 0)
          __assert_rtn("GetPointer", "VoicePoolMessage.hpp", 68, "elemIndex >= 0 && elemIndex < mNumElements");
        v28 = *(_QWORD *)(a6 + 16);
        if (v28)
        {
          v29 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v28 + 40))(*(_QWORD *)(a6 + 16));
          v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 56))(v28);
          Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::DspLayer::VoicePool *,long long,int>(a1 + 3, (uint64_t)this, a4, v30 + v29);
          return;
        }
        v31 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 80);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          v32 = *(_QWORD *)(a2 + 16);
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "DVM_RT_VoiceEngineCallback.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 294;
          v40 = 2048;
          v41 = this;
          v42 = 2048;
          v43 = a4;
          v44 = 2048;
          v45 = v32;
          v33 = "%25s:%-5d VoiceEngineCallback: the IConvolver (%p):%llu is NULL @ Frame %llu";
          goto LABEL_72;
        }
      }
    }
    else if (v14 == 0xCFE1F9A8E823B67BLL && a5 == 0)
    {
      v21 = 0;
      *(_QWORD *)buf = this;
      *(_QWORD *)&buf[8] = a4;
      do
        v12 = 0x100000001B3 * (v12 ^ (char)buf[v21++]);
      while (v21 != 16);
      v18 = a1[(v12 & 0x1F) + 15];
      if (v18)
      {
        while (1)
        {
          v22 = *(_QWORD *)(v18 + 16);
          if (v22 >= v12)
            break;
          v18 = *(_QWORD *)(v18 + 8);
          if (!v18)
            goto LABEL_61;
        }
        if (v22 == v12)
        {
          v34 = *(_DWORD *)(v18 + 64);
          if (v34 < 2)
          {
            if (v34 != 1)
              return;
            goto LABEL_75;
          }
LABEL_60:
          *(_DWORD *)(v18 + 64) = v34 - 1;
          return;
        }
      }
LABEL_61:
      v31 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 80);
      if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        return;
      v36 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "DVM_RT_VoiceEngineCallback.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 155;
      v40 = 2048;
      v41 = this;
      v42 = 2048;
      v43 = a4;
      v44 = 2048;
      v45 = v36;
      v33 = "%25s:%-5d VoiceEngineCallback: the ResidentSampler (%p):%llu does not exist in DVM_RT.mSamplerMap @ Frame %llu";
LABEL_72:
      _os_log_impl(&dword_2164CC000, v31, OS_LOG_TYPE_ERROR, v33, buf, 0x30u);
    }
  }
  else
  {
    if (v14 != 0xD1A51C852B332C81)
    {
      if (v14 == 0xE8CBC3A55AEFC3DALL)
      {
        if (a5)
          return;
        v26 = 0;
        *(_QWORD *)buf = this;
        *(_QWORD *)&buf[8] = a4;
        do
          v12 = 0x100000001B3 * (v12 ^ (char)buf[v26++]);
        while (v26 != 16);
        v18 = a1[(v12 & 0x1F) + 15];
        if (v18)
        {
          while (1)
          {
            v27 = *(_QWORD *)(v18 + 16);
            if (v27 >= v12)
              break;
            v18 = *(_QWORD *)(v18 + 8);
            if (!v18)
              goto LABEL_70;
          }
          if (v27 == v12)
            goto LABEL_69;
        }
LABEL_70:
        v31 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 80);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          return;
        v38 = *(_QWORD *)(a2 + 16);
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "DVM_RT_VoiceEngineCallback.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 200;
        v40 = 2048;
        v41 = this;
        v42 = 2048;
        v43 = a4;
        v44 = 2048;
        v45 = v38;
        v33 = "%25s:%-5d VoiceEngineCallback: the PullStreamSampler (%p):%llu does not exist in DVM_RT.mSamplerMap @ Frame %llu";
      }
      else
      {
        if (v14 != 0x15687F45806132E7 || a5 != 0)
          return;
        v17 = 0;
        *(_QWORD *)buf = this;
        *(_QWORD *)&buf[8] = a4;
        do
          v12 = 0x100000001B3 * (v12 ^ (char)buf[v17++]);
        while (v17 != 16);
        v18 = a1[(v12 & 0x1F) + 15];
        if (v18)
        {
          while (1)
          {
            v19 = *(_QWORD *)(v18 + 16);
            if (v19 >= v12)
              break;
            v18 = *(_QWORD *)(v18 + 8);
            if (!v18)
              goto LABEL_56;
          }
          if (v19 == v12)
          {
            v34 = *(_DWORD *)(v18 + 64);
            if (v34 < 2)
            {
              if (!v34)
                return;
              if (v34 != 1)
              {
LABEL_69:
                Phase::Controller::DVM_RT::RenderAndSetNextSamplerBuffer((uint64_t)a1, this, a4, 0, 0, *(_QWORD *)(v18 + 32), *(unsigned int (**)(uint64_t, double *, _QWORD, uint64_t))(v18 + 24), *(_QWORD *)(v18 + 40), *(_QWORD **)(v18 + 48));
                Phase::DspLayer::VoicePool::UpdateParameters(this, a4);
                return;
              }
LABEL_75:
              *(_DWORD *)(v18 + 64) = 0;
              Phase::DspLayer::VoicePool::SetBuffer(this, a4, 0, *(void **)(a1[2] + 74944));
              Phase::DspLayer::VoicePool::UpdateParameters(this, a4);
              Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::DspLayer::VoicePool *,long long>(a1 + 3, 1, (uint64_t)this, a4);
              return;
            }
            goto LABEL_60;
          }
        }
LABEL_56:
        v31 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 80);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          return;
        v35 = *(_QWORD *)(a2 + 16);
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "DVM_RT_VoiceEngineCallback.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 93;
        v40 = 2048;
        v41 = this;
        v42 = 2048;
        v43 = a4;
        v44 = 2048;
        v45 = v35;
        v33 = "%25s:%-5d VoiceEngineCallback: the PushStreamSampler (%p):%llu does not exist in DVM_RT.mSamplerMap @ Frame %llu";
      }
      goto LABEL_72;
    }
    if (a5)
      return;
    v23 = 0;
    *(_QWORD *)buf = this;
    *(_QWORD *)&buf[8] = a4;
    do
      v12 = 0x100000001B3 * (v12 ^ (char)buf[v23++]);
    while (v23 != 16);
    v24 = (_QWORD *)a1[(v12 & 0x1F) + 2353];
    if (!v24)
      goto LABEL_66;
    while (1)
    {
      v25 = v24[2];
      if (v25 >= v12)
        break;
      v24 = (_QWORD *)v24[1];
      if (!v24)
        goto LABEL_66;
    }
    if (v25 != v12)
    {
LABEL_66:
      v31 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 80);
      if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        return;
      v37 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "DVM_RT_VoiceEngineCallback.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 245;
      v40 = 2048;
      v41 = this;
      v42 = 2048;
      v43 = a4;
      v44 = 2048;
      v45 = v37;
      v33 = "%25s:%-5d VoiceEngineCallback: the Tapper (%p):%llu does not exist in DVM_RT.mTapperMap @ Frame %llu";
      goto LABEL_72;
    }
    if (*(int *)a6 <= 0)
      __assert_rtn("GetBufferId", "VoicePoolMessage.hpp", 62, "elemIndex >= 0 && elemIndex < mNumElements");
    Phase::DspLayer::VoicePool::GetBuffer((uint64_t)this, a4, *(unsigned int *)(a6 + 16), (uint64_t)buf);
    std::function<void ()(float *,unsigned long)>::operator()(*(_QWORD *)(v24[3] + 24), *(uint64_t *)&buf[8], *(int *)(a1[2] + 24));
  }
}

uint64_t std::function<void ()(float *,unsigned long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a2;
  if (!a1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v5, &v4);
}

double Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMNRTOSCCommand,Phase::DspLayer::VoicePool *,long long,int>(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;

  v4 = *((int *)a1 + 3);
  if (*((_DWORD *)a1 + 2) - (int)v4 >= 36)
  {
    v5 = *a1 + v4;
    *(_QWORD *)(v5 + 4) = 10;
    *(_QWORD *)(v5 + 16) = a2;
    *(_QWORD *)(v5 + 24) = a3;
    *(_QWORD *)&result = 6908016;
    *(_DWORD *)(v5 + 12) = 6908016;
    *(_DWORD *)(v5 + 32) = a4;
    v7 = *a1;
    *(_DWORD *)(v7 + *((int *)a1 + 3)) = 32;
    *(_DWORD *)(v7 + 16) += 36;
    *((_DWORD *)a1 + 3) += 36;
  }
  return result;
}

void std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::resize(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;

  v5 = *a1;
  v4 = a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v7 = a2 - v6;
  if (a2 > v6)
  {
    v8 = (uint64_t)(a1 + 2);
    v9 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - v4) >> 3) >= v7)
    {
      v32 = &v4[24 * v7];
      v33 = 24 * a2 - 24 * v6;
      v34 = v4 + 8;
      do
      {
        *v34 = 0;
        v34[1] = 0;
        *(v34 - 1) = v34;
        v34 += 3;
        v33 -= 24;
      }
      while (v33);
      a1[1] = v32;
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v5) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a2)
      v11 = a2;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v8, v12);
    v15 = &v13[24 * v6];
    v16 = &v13[24 * a2];
    v17 = v15 + 8;
    v18 = 24 * a2 - 24 * v6;
    do
    {
      *v17 = 0;
      v17[1] = 0;
      *(v17 - 1) = v17;
      v17 += 3;
      v18 -= 24;
    }
    while (v18);
    v19 = &v13[24 * v14];
    v20 = *a1;
    v21 = a1[1];
    if (v21 == *a1)
    {
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (!v21)
        return;
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = &v15[v22];
        *((_QWORD *)v23 - 3) = *(_QWORD *)&v21[v22 - 24];
        v24 = &v21[v22 - 16];
        v25 = *(_QWORD *)v24;
        *(_QWORD *)&v15[v22 - 16] = *(_QWORD *)v24;
        v26 = (uint64_t)&v15[v22 - 16];
        v27 = *(_QWORD *)&v21[v22 - 8];
        *((_QWORD *)v23 - 1) = v27;
        if (v27)
        {
          *(_QWORD *)(v25 + 16) = v26;
          *(_QWORD *)&v21[v22 - 24] = v24;
          *(_QWORD *)v24 = 0;
          *(_QWORD *)&v21[v22 - 8] = 0;
        }
        else
        {
          *((_QWORD *)v23 - 3) = v26;
        }
        v22 -= 24;
      }
      while (&v21[v22] != v20);
      v21 = *a1;
      v28 = a1[1];
      *a1 = &v15[v22];
      a1[1] = v16;
      a1[2] = v19;
      if (v28 != v21)
      {
        do
        {
          v29 = v28 - 24;
          std::__tree<Phase::SpatialCategory>::destroy((uint64_t)(v28 - 24), *((_QWORD **)v28 - 2));
          v28 = v29;
        }
        while (v29 != v21);
      }
      if (!v21)
        return;
    }
    operator delete(v21);
    return;
  }
  if (a2 < v6)
  {
    v30 = &v5[24 * a2];
    if (v4 != v30)
    {
      do
      {
        v31 = v4 - 24;
        std::__tree<Phase::SpatialCategory>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v31;
      }
      while (v31 != v30);
    }
    a1[1] = v30;
  }
}

void std::vector<Phase::Controller::DVM::VoiceNode::BusChannelPair>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v16 = &v4[8 * a2];
    goto LABEL_18;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 3)
  {
    memset_pattern16(a1[1], &unk_2166F7E50, 8 * v6);
    v16 = &v3[8 * v6];
LABEL_18:
    a1[1] = v16;
    return;
  }
  if (a2 >> 61)
    std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v4;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v11 = (char *)operator new(8 * v10);
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  memset_pattern16(v12, &unk_2166F7E50, 8 * v6);
  v14 = &v12[8 * v6];
  if (v3 != v4)
  {
    do
    {
      v15 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v12 - 1) = v15;
      v12 -= 8;
    }
    while (v3 != v4);
    v3 = v4;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
    operator delete(v3);
}

_QWORD *Phase::Controller::DVM::VoicePoolNode::AddVoice(Phase::Controller::DVM::VoicePoolNode *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  Phase::Controller::DVM::VoiceNode *v14;
  uint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  _QWORD *v28;
  _QWORD *i;
  unint64_t v30;
  _QWORD *v31;
  float v32;
  float v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;

  v44 = a2;
  v5 = (uint64_t *)((char *)this + 32);
  v6 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)this + 4, &v44);
  if (v6)
  {
    result = (_QWORD *)v6[3];
    if (result)
      return result;
  }
  v8 = *((_DWORD *)this + 6);
  if (!v8)
  {
    v13 = (*(uint64_t (**)(Phase::Controller::DVM::VoicePoolNode *))(*(_QWORD *)this + 16))(this);
    v14 = (Phase::Controller::DVM::VoiceNode *)operator new();
    v15 = Phase::Controller::DVM::GenericVoiceNode::GenericVoiceNode((uint64_t)v14, v13, a2, 0);
    *(_QWORD *)v15 = &off_24D57C0F8;
    *(_BYTE *)(v15 + 208) = 0;
    *(_OWORD *)(v15 + 216) = 0u;
    *(_OWORD *)(v15 + 232) = 0u;
    *(_QWORD *)(v15 + 248) = 0;
    v16 = *((_QWORD *)this + 5);
    if (v16)
    {
      v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        v2 = a2;
        if (v16 <= a2)
          v2 = a2 % v16;
      }
      else
      {
        v2 = (v16 - 1) & a2;
      }
      v28 = *(_QWORD **)(*v5 + 8 * v2);
      if (v28)
      {
        for (i = (_QWORD *)*v28; i; i = (_QWORD *)*i)
        {
          v30 = i[1];
          if (v30 == a2)
          {
            if (i[2] == a2)
            {
              Phase::Controller::DVM::VoiceNode::~VoiceNode(v14);
              MEMORY[0x2199F9D70]();
              goto LABEL_82;
            }
          }
          else
          {
            if (v17.u32[0] > 1uLL)
            {
              if (v30 >= v16)
                v30 %= v16;
            }
            else
            {
              v30 &= v16 - 1;
            }
            if (v30 != v2)
              break;
          }
        }
      }
    }
    v31 = operator new(0x20uLL);
    *v31 = 0;
    v31[1] = a2;
    v31[2] = a2;
    v31[3] = v14;
    v32 = (float)(unint64_t)(*((_QWORD *)this + 7) + 1);
    v33 = *((float *)this + 16);
    if (!v16 || (float)(v33 * (float)v16) < v32)
    {
      v34 = 1;
      if (v16 >= 3)
        v34 = (v16 & (v16 - 1)) != 0;
      v35 = v34 | (2 * v16);
      v36 = vcvtps_u32_f32(v32 / v33);
      if (v35 <= v36)
        v37 = v36;
      else
        v37 = v35;
      std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v5, v37);
      v16 = *((_QWORD *)this + 5);
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v16 <= a2)
          v2 = a2 % v16;
        else
          v2 = a2;
      }
      else
      {
        v2 = (v16 - 1) & a2;
      }
    }
    v38 = *v5;
    v39 = *(_QWORD **)(*v5 + 8 * v2);
    if (v39)
    {
      *v31 = *v39;
    }
    else
    {
      *v31 = *((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = v31;
      *(_QWORD *)(v38 + 8 * v2) = (char *)this + 48;
      if (!*v31)
        goto LABEL_81;
      v40 = *(_QWORD *)(*v31 + 8);
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v40 >= v16)
          v40 %= v16;
      }
      else
      {
        v40 &= v16 - 1;
      }
      v39 = (_QWORD *)(*v5 + 8 * v40);
    }
    *v39 = v31;
    goto LABEL_81;
  }
  if (v8 == 1)
    std::terminate();
  v9 = (*(uint64_t (**)(Phase::Controller::DVM::VoicePoolNode *))(*(_QWORD *)this + 16))(this);
  v10 = operator new();
  Phase::Controller::DVM::GenericVoiceNode::GenericVoiceNode(v10, v9, a2, v8);
  v11 = *((_QWORD *)this + 5);
  if (!v11)
    goto LABEL_26;
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v2 = a2;
    if (v11 <= a2)
      v2 = a2 % v11;
  }
  else
  {
    v2 = (v11 - 1) & a2;
  }
  v18 = *(_QWORD **)(*v5 + 8 * v2);
  if (!v18 || (v19 = (_QWORD *)*v18) == 0)
  {
LABEL_26:
    v21 = operator new(0x20uLL);
    *v21 = 0;
    v21[1] = a2;
    v21[2] = a2;
    v21[3] = v10;
    v22 = (float)(unint64_t)(*((_QWORD *)this + 7) + 1);
    v23 = *((float *)this + 16);
    if (!v11 || (float)(v23 * (float)v11) < v22)
    {
      v24 = 1;
      if (v11 >= 3)
        v24 = (v11 & (v11 - 1)) != 0;
      v25 = v24 | (2 * v11);
      v26 = vcvtps_u32_f32(v22 / v23);
      if (v25 <= v26)
        v27 = v26;
      else
        v27 = v25;
      std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v5, v27);
      v11 = *((_QWORD *)this + 5);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v11 <= a2)
          v2 = a2 % v11;
        else
          v2 = a2;
      }
      else
      {
        v2 = (v11 - 1) & a2;
      }
    }
    v41 = *v5;
    v42 = *(_QWORD **)(*v5 + 8 * v2);
    if (v42)
    {
      *v21 = *v42;
LABEL_80:
      *v42 = v21;
      goto LABEL_81;
    }
    *v21 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v21;
    *(_QWORD *)(v41 + 8 * v2) = (char *)this + 48;
    if (*v21)
    {
      v43 = *(_QWORD *)(*v21 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v43 >= v11)
          v43 %= v11;
      }
      else
      {
        v43 &= v11 - 1;
      }
      v42 = (_QWORD *)(*v5 + 8 * v43);
      goto LABEL_80;
    }
LABEL_81:
    ++*((_QWORD *)this + 7);
    goto LABEL_82;
  }
  while (1)
  {
    v20 = v19[1];
    if (v20 == a2)
      break;
    if (v12.u32[0] > 1uLL)
    {
      if (v20 >= v11)
        v20 %= v11;
    }
    else
    {
      v20 &= v11 - 1;
    }
    if (v20 != v2)
      goto LABEL_26;
LABEL_25:
    v19 = (_QWORD *)*v19;
    if (!v19)
      goto LABEL_26;
  }
  if (v19[2] != a2)
    goto LABEL_25;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
LABEL_82:
  v44 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v5, &v44);
  if (result)
    return (_QWORD *)result[3];
  return result;
}

void sub_2165797F0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::DVM::VoicePoolNode::RemoveVoice(Phase::Controller::DVM::VoicePoolNode *this, unint64_t a2)
{
  std::__hash_table<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>>>::__erase_unique<long long>((_QWORD *)this + 4, a2);
}

void Phase::Controller::DVM::ProcedureVoicePoolNode::~ProcedureVoicePoolNode(Phase::Controller::DVM::ProcedureVoicePoolNode *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  *(_QWORD *)this = &off_24D57C018;
  v2 = (_QWORD *)((char *)this + 80);
  if (*((_QWORD *)this + 13))
  {
    std::__hash_table<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>>>::__deallocate_node(*((_QWORD **)this + 12));
    *((_QWORD *)this + 12) = 0;
    v3 = *((_QWORD *)this + 11);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v2 + 8 * i) = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
  std::__hash_table<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>>>::~__hash_table((uint64_t)v2);
  *(_QWORD *)this = off_24D57BF78;
  std::__hash_table<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>>>::~__hash_table((uint64_t)this + 32);
}

{
  Phase::Controller::DVM::ProcedureVoicePoolNode::~ProcedureVoicePoolNode(this);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::DVM::ProcedureVoicePoolNode::AddVoice(Phase::Controller::DVM::ProcedureVoicePoolNode *this, unint64_t a2)
{
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  void **v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                     + 80)));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    Phase::Controller::DVM::VoicePoolNode::GetDescription((Phase::Controller::DVM::VoicePoolNode *)__p, (uint64_t)this);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    v10 = "DVMGraph.mm";
    v11 = 1024;
    v12 = 175;
    v13 = 2080;
    v14 = v5;
    _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: creating a procedure node %s, with default params (unexpected)!", buf, 0x1Cu);
    if (v8 < 0)
      operator delete(__p[0]);
  }

  return Phase::Controller::DVM::ProcedureVoicePoolNode::AddVoice((uint64_t)this, a2, 64, 0);
}

void sub_216579A54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *Phase::Controller::DVM::VoicePoolNode::GetDescription(Phase::Controller::DVM::VoicePoolNode *this, uint64_t a2)
{
  char __str[512];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    snprintf(__str, 0x200uLL, "<voice %s [%llu, %p, #%d]>");
  }
  else
  {
    snprintf(__str, 0x200uLL, "<voice %s [%llu, #%d]>");
  }
  return std::string::basic_string[abi:ne180100]<0>(this, __str);
}

uint64_t Phase::Controller::DVM::ProcedureVoicePoolNode::AddVoice(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *i;
  unint64_t v17;
  int v18;
  Phase::Logger *v19;
  uint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  NSObject *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *j;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  float v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  int8x8_t prime;
  void *v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint8x8_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint8x8_t v55;
  _QWORD **v56;
  _QWORD *k;
  unint64_t v58;
  float v59;
  float v60;
  _BOOL8 v61;
  unint64_t v62;
  unint64_t v63;
  size_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  void *v70;
  uint64_t v71;
  _BYTE buf[12];
  __int16 v73;
  int v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)buf = a2;
  v9 = (uint64_t *)(a1 + 32);
  v10 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)(a1 + 32), (unint64_t *)buf);
  if (v10)
  {
    v11 = v10[3];
    if (v11)
      return v11;
  }
  v12 = *(int8x8_t *)(a1 + 88);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8(v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v14 = a2;
      if (*(_QWORD *)&v12 <= a2)
        v14 = a2 % *(_QWORD *)&v12;
    }
    else
    {
      v14 = (*(_QWORD *)&v12 - 1) & a2;
    }
    v15 = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 8 * v14);
    if (v15)
    {
      for (i = (_QWORD *)*v15; i; i = (_QWORD *)*i)
      {
        v17 = i[1];
        if (v17 == a2)
        {
          if (i[2] == a2)
          {
            if (!i[3])
              break;
LABEL_153:
            std::terminate();
          }
        }
        else
        {
          if (v13.u32[0] > 1uLL)
          {
            if (v17 >= *(_QWORD *)&v12)
              v17 %= *(_QWORD *)&v12;
          }
          else
          {
            v17 &= *(_QWORD *)&v12 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  if (a3 <= 1)
    v18 = 1;
  else
    v18 = a3;
  v19 = (Phase::Logger *)Phase::Controller::ProcedureRegistry::CreateProcedureInstance(*(_QWORD **)(a1 + 72), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8), v18, a4, &v71);
  v20 = v71;
  if (v71)
  {
    v71 = 0;
    v21 = *(_QWORD *)(a1 + 88);
    if (v21)
    {
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.u32[0] > 1uLL)
      {
        v4 = a2;
        if (v21 <= a2)
          v4 = a2 % v21;
      }
      else
      {
        v4 = (v21 - 1) & a2;
      }
      v25 = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 8 * v4);
      if (v25)
      {
        for (j = (_QWORD *)*v25; j; j = (_QWORD *)*j)
        {
          v27 = j[1];
          if (v27 == a2)
          {
            if (j[2] == a2)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
              std::terminate();
            }
          }
          else
          {
            if (v22.u32[0] > 1uLL)
            {
              if (v27 >= v21)
                v27 %= v21;
            }
            else
            {
              v27 &= v21 - 1;
            }
            if (v27 != v4)
              break;
          }
        }
      }
    }
    v28 = operator new(0x20uLL);
    v29 = (_QWORD *)(a1 + 96);
    *v28 = 0;
    v28[1] = a2;
    v28[2] = a2;
    v28[3] = v20;
    v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 104) + 1);
    v31 = *(float *)(a1 + 112);
    if (v21 && (float)(v31 * (float)v21) >= v30)
    {
LABEL_91:
      v48 = *(_QWORD *)(a1 + 80);
      v49 = *(_QWORD **)(v48 + 8 * v4);
      if (v49)
      {
        *v28 = *v49;
      }
      else
      {
        *v28 = *v29;
        *v29 = v28;
        *(_QWORD *)(v48 + 8 * v4) = v29;
        if (!*v28)
          goto LABEL_100;
        v50 = *(_QWORD *)(*v28 + 8);
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v50 >= v21)
            v50 %= v21;
        }
        else
        {
          v50 &= v21 - 1;
        }
        v49 = (_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v50);
      }
      *v49 = v28;
LABEL_100:
      ++*(_QWORD *)(a1 + 104);
      v51 = v28[3];
      v52 = operator new();
      v53 = *(_DWORD *)(a1 + 24);
      *(_BYTE *)(v52 + 8) = 0;
      *(_QWORD *)(v52 + 16) = a2;
      *(_DWORD *)(v52 + 24) = v53;
      *(_BYTE *)(v52 + 196) = 0;
      *(_OWORD *)(v52 + 28) = 0u;
      *(_OWORD *)(v52 + 44) = 0u;
      *(_OWORD *)(v52 + 60) = 0u;
      *(_OWORD *)(v52 + 76) = 0u;
      *(_OWORD *)(v52 + 92) = 0u;
      *(_OWORD *)(v52 + 108) = 0u;
      *(_OWORD *)(v52 + 124) = 0u;
      *(_OWORD *)(v52 + 136) = 0u;
      *(_QWORD *)(v52 + 184) = 0;
      *(_BYTE *)(v52 + 192) = 0;
      memset_pattern16((void *)(v52 + 152), &unk_2166F7E60, 0x20uLL);
      *(_QWORD *)v52 = &off_24D57C200;
      *(_QWORD *)(v52 + 200) = v51;
      if (v53 != 1)
        goto LABEL_153;
      v54 = *(_QWORD *)(a1 + 40);
      if (v54)
      {
        v55 = (uint8x8_t)vcnt_s8((int8x8_t)v54);
        v55.i16[0] = vaddlv_u8(v55);
        if (v55.u32[0] > 1uLL)
        {
          v21 = a2;
          if (v54 <= a2)
            v21 = a2 % v54;
        }
        else
        {
          v21 = (v54 - 1) & a2;
        }
        v56 = *(_QWORD ***)(*v9 + 8 * v21);
        if (v56)
        {
          for (k = *v56; k; k = (_QWORD *)*k)
          {
            v58 = k[1];
            if (v58 == a2)
            {
              if (k[2] == a2)
              {
                Phase::Controller::DVM::VoiceNode::~VoiceNode((Phase::Controller::DVM::VoiceNode *)v52);
                MEMORY[0x2199F9D70]();
                goto LABEL_140;
              }
            }
            else
            {
              if (v55.u32[0] > 1uLL)
              {
                if (v58 >= v54)
                  v58 %= v54;
              }
              else
              {
                v58 &= v54 - 1;
              }
              if (v58 != v21)
                break;
            }
          }
        }
      }
      k = operator new(0x20uLL);
      *k = 0;
      k[1] = a2;
      k[2] = a2;
      k[3] = v52;
      v59 = (float)(unint64_t)(*(_QWORD *)(a1 + 56) + 1);
      v60 = *(float *)(a1 + 64);
      if (!v54 || (float)(v60 * (float)v54) < v59)
      {
        v61 = 1;
        if (v54 >= 3)
          v61 = (v54 & (v54 - 1)) != 0;
        v62 = v61 | (2 * v54);
        v63 = vcvtps_u32_f32(v59 / v60);
        if (v62 <= v63)
          v64 = v63;
        else
          v64 = v62;
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v9, v64);
        v54 = *(_QWORD *)(a1 + 40);
        if ((v54 & (v54 - 1)) != 0)
        {
          if (v54 <= a2)
            v21 = a2 % v54;
          else
            v21 = a2;
        }
        else
        {
          v21 = (v54 - 1) & a2;
        }
      }
      v65 = *v9;
      v66 = *(_QWORD **)(*v9 + 8 * v21);
      if (v66)
      {
        *k = *v66;
      }
      else
      {
        *k = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = k;
        *(_QWORD *)(v65 + 8 * v21) = a1 + 48;
        if (!*k)
          goto LABEL_139;
        v67 = *(_QWORD *)(*k + 8);
        if ((v54 & (v54 - 1)) != 0)
        {
          if (v67 >= v54)
            v67 %= v54;
        }
        else
        {
          v67 &= v54 - 1;
        }
        v66 = (_QWORD *)(*v9 + 8 * v67);
      }
      *v66 = k;
LABEL_139:
      ++*(_QWORD *)(a1 + 56);
LABEL_140:
      v11 = k[3];
      goto LABEL_141;
    }
    v32 = 1;
    if (v21 >= 3)
      v32 = (v21 & (v21 - 1)) != 0;
    v33 = v32 | (2 * v21);
    v34 = vcvtps_u32_f32(v30 / v31);
    if (v33 <= v34)
      prime = (int8x8_t)v34;
    else
      prime = (int8x8_t)v33;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v21 = *(_QWORD *)(a1 + 88);
    }
    if (*(_QWORD *)&prime > v21)
      goto LABEL_57;
    if (*(_QWORD *)&prime < v21)
    {
      v42 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 104) / *(float *)(a1 + 112));
      if (v21 < 3 || (v43 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (*(_QWORD *)&prime <= v42)
        prime = (int8x8_t)v42;
      if (*(_QWORD *)&prime >= v21)
      {
        v21 = *(_QWORD *)(a1 + 88);
      }
      else
      {
        if (prime)
        {
LABEL_57:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v36 = operator new(8 * *(_QWORD *)&prime);
          v37 = *(void **)(a1 + 80);
          *(_QWORD *)(a1 + 80) = v36;
          if (v37)
            operator delete(v37);
          v38 = 0;
          *(int8x8_t *)(a1 + 88) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v38++) = 0;
          while (*(_QWORD *)&prime != v38);
          v39 = (_QWORD *)*v29;
          if (*v29)
          {
            v40 = v39[1];
            v41 = (uint8x8_t)vcnt_s8(prime);
            v41.i16[0] = vaddlv_u8(v41);
            if (v41.u32[0] > 1uLL)
            {
              if (v40 >= *(_QWORD *)&prime)
                v40 %= *(_QWORD *)&prime;
            }
            else
            {
              v40 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v40) = v29;
            v45 = (_QWORD *)*v39;
            if (*v39)
            {
              do
              {
                v46 = v45[1];
                if (v41.u32[0] > 1uLL)
                {
                  if (v46 >= *(_QWORD *)&prime)
                    v46 %= *(_QWORD *)&prime;
                }
                else
                {
                  v46 &= *(_QWORD *)&prime - 1;
                }
                if (v46 != v40)
                {
                  v47 = *(_QWORD *)(a1 + 80);
                  if (!*(_QWORD *)(v47 + 8 * v46))
                  {
                    *(_QWORD *)(v47 + 8 * v46) = v39;
                    goto LABEL_82;
                  }
                  *v39 = *v45;
                  *v45 = **(_QWORD **)(*(_QWORD *)(a1 + 80) + 8 * v46);
                  **(_QWORD **)(*(_QWORD *)(a1 + 80) + 8 * v46) = v45;
                  v45 = v39;
                }
                v46 = v40;
LABEL_82:
                v39 = v45;
                v45 = (_QWORD *)*v45;
                v40 = v46;
              }
              while (v45);
            }
          }
          v21 = (unint64_t)prime;
          goto LABEL_86;
        }
        v70 = *(void **)(a1 + 80);
        *(_QWORD *)(a1 + 80) = 0;
        if (v70)
          operator delete(v70);
        v21 = 0;
        *(_QWORD *)(a1 + 88) = 0;
      }
    }
LABEL_86:
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v21 <= a2)
        v4 = a2 % v21;
      else
        v4 = a2;
    }
    else
    {
      v4 = (v21 - 1) & a2;
    }
    goto LABEL_91;
  }
  v23 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v19) + 80));
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    v24 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "DVMGraph.mm";
    v73 = 1024;
    v74 = 196;
    v75 = 2048;
    v76 = v24;
    _os_log_impl(&dword_2164CC000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: could not create a procedure instance for Id %llu", buf, 0x1Cu);
  }
  v11 = 0;
LABEL_141:
  v68 = v71;
  v71 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  return v11;
}

void sub_21657A370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v12;

  v12 = v10[3];
  v10[3] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  operator delete(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

void Phase::Controller::DVM::ProcedureVoicePoolNode::RemoveVoice(Phase::Controller::DVM::ProcedureVoicePoolNode *this, unint64_t a2)
{
  std::__hash_table<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>>>::__erase_unique<long long>((_QWORD *)this + 4, a2);
}

uint64_t Phase::Controller::DVM::VoiceGraph::VoiceGraph(uint64_t a1, uint64_t a2, __int128 *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = a2;
  v9 = *a3;
  v10 = a3[1];
  v11 = *((_QWORD *)a3 + 4);
  *(_QWORD *)(a1 + 176) = &off_24D57C258;
  *(_QWORD *)(a1 + 40) = v11;
  *(_OWORD *)(a1 + 24) = v10;
  *(_OWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a5;
  *(_QWORD *)(a1 + 64) = a6;
  *(_QWORD *)(a1 + 72) = a7;
  *(_QWORD *)(a1 + 80) = a8;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_QWORD *)(a1 + 200) = a1 + 176;
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 850045863;
  *(_QWORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 1065353216;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 472) = 1065353216;
  *(_QWORD *)(a1 + 480) = a1 + 480;
  *(_QWORD *)(a1 + 488) = a1 + 480;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = a1 + 512;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 528) = a1 + 536;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_DWORD *)(a1 + 584) = 1065353216;
  Phase::Controller::DVM::ChannelAllocator::ChannelAllocator((Phase::Controller::DVM::ChannelAllocator *)(a1 + 592), *(_DWORD *)(a2 + 124));
  Phase::Controller::DVM::ChannelAllocator::ChannelAllocator((Phase::Controller::DVM::ChannelAllocator *)(a1 + 624), *(_DWORD *)(*(_QWORD *)a1 + 116));
  *(_QWORD *)(a1 + 656) = a1 + 656;
  *(_QWORD *)(a1 + 664) = a1 + 656;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 680) = a1 + 680;
  *(_QWORD *)(a1 + 688) = a1 + 680;
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_QWORD *)(a1 + 752) = a1 + 760;
  *(_QWORD *)(a1 + 784) = 0;
  *(_QWORD *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 776) = a1 + 784;
  if (!*(_QWORD *)(a1 + 80))
    std::terminate();
  return a1;
}

void sub_21657A5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void **v17;
  uint64_t v18;

  Phase::Controller::DVM::ChannelAllocator::~ChannelAllocator(v17);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::~__hash_table(v18);
  std::__tree<Phase::SpatialCategory>::destroy(v13 + 352, *(_QWORD **)(v12 + 536));
  std::__tree<Phase::SpatialCategory>::destroy(v13 + 328, *(_QWORD **)(v12 + 512));
  std::__list_imp<std::unique_ptr<Phase::Controller::DVM::VoicePoolNode>>::clear(v16);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>>>::~__hash_table(v15);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>>>::~__hash_table(v13 + 224);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>>>::~__hash_table(v13 + 184);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>>>::~__hash_table(v12 + 320);
  caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::~guarded_lookup_hash_table(v13);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>>>::~__hash_table(v14);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v12 + 96);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::DVM::VoiceGraph::AddSubmix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  void **v10;
  Phase::Logger *v11;
  NSObject *v12;
  uint64_t result;
  NSObject *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *j;
  unint64_t v25;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  int8x8_t prime;
  void *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  void *v49;
  _BYTE v50[18];
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v50 = a2;
  *(_QWORD *)&v50[8] = a3;
  v10 = (void **)(a1 + 136);
  v11 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 136), v50);
  if (v11)
  {
    v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11) + 80));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v50 = 136315906;
      *(_QWORD *)&v50[4] = "DVMGraph.mm";
      *(_WORD *)&v50[12] = 1024;
      *(_DWORD *)&v50[14] = 257;
      v51 = 2048;
      v52 = a1;
      v53 = 2048;
      v54 = a2;
      _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: submixId %llu already exists!", v50, 0x26u);
    }
    return 4;
  }
  if (a4 != 1 || a5 == 1)
  {
    v15 = operator new(0xA8uLL);
    *v15 = 0;
    v15[1] = 0;
    v15[2] = a2;
    v15[3] = a3;
    *((_DWORD *)v15 + 10) = 1;
    v15[6] = a2;
    v15[7] = a3;
    *((_BYTE *)v15 + 64) = 0;
    *((_DWORD *)v15 + 17) = 0;
    *((_BYTE *)v15 + 72) = 0;
    *((_BYTE *)v15 + 76) = 0;
    v15[4] = off_24D57C4D8;
    v15[10] = 0;
    v15[11] = a4;
    v15[12] = 0;
    std::vector<Phase::Controller::DVM::Submix::ChannelStrip>::vector(v15 + 13, a5);
    v16 = 0xCBF29CE484222325;
    *((_OWORD *)v15 + 8) = 0u;
    *((_OWORD *)v15 + 9) = 0u;
    *((_DWORD *)v15 + 40) = 1065353216;
    v17 = 16;
    v18 = 0xCBF29CE484222325;
    do
      v18 = 0x100000001B3 * (v18 ^ *((char *)v15 + v17++));
    while (v17 != 32);
    v15[1] = v18;
    for (i = 16; i != 32; ++i)
      v16 = 0x100000001B3 * (v16 ^ *((char *)v15 + i));
    v15[1] = v16;
    v20 = *(_QWORD *)(a1 + 144);
    if (v20)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v22 = v16;
        if (v20 <= v16)
          v22 = v16 % v20;
      }
      else
      {
        v22 = (v20 - 1) & v16;
      }
      v23 = (_QWORD *)*((_QWORD *)*v10 + v22);
      if (v23)
      {
        for (j = (_QWORD *)*v23; j; j = (_QWORD *)*j)
        {
          v25 = j[1];
          if (v25 == v16)
          {
            if (j[2] == v15[2] && j[3] == v15[3])
            {
              std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,void *>>>::operator()[abi:ne180100](1, (uint64_t)v15);
              return 0;
            }
          }
          else
          {
            if (v21.u32[0] > 1uLL)
            {
              if (v25 >= v20)
                v25 %= v20;
            }
            else
            {
              v25 &= v20 - 1;
            }
            if (v25 != v22)
              break;
          }
        }
      }
    }
    v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 160) + 1);
    v28 = *(float *)(a1 + 168);
    if (!v20 || (float)(v28 * (float)v20) < v27)
    {
      v29 = 1;
      if (v20 >= 3)
        v29 = (v20 & (v20 - 1)) != 0;
      v30 = v29 | (2 * v20);
      v31 = vcvtps_u32_f32(v27 / v28);
      if (v30 <= v31)
        prime = (int8x8_t)v31;
      else
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v20 = *(_QWORD *)(a1 + 144);
      }
      if (*(_QWORD *)&prime > v20)
        goto LABEL_101;
      if (*(_QWORD *)&prime >= v20)
        goto LABEL_75;
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 160) / *(float *)(a1 + 168));
      if (v20 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v20), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (*(_QWORD *)&prime <= v39)
        prime = (int8x8_t)v39;
      if (*(_QWORD *)&prime >= v20)
      {
        v20 = *(_QWORD *)(a1 + 144);
        goto LABEL_75;
      }
      if (prime)
      {
LABEL_101:
        if (*(_QWORD *)&prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v33 = operator new(8 * *(_QWORD *)&prime);
        v34 = *v10;
        *v10 = v33;
        if (v34)
          operator delete(v34);
        v35 = 0;
        *(int8x8_t *)(a1 + 144) = prime;
        do
          *((_QWORD *)*v10 + v35++) = 0;
        while (*(_QWORD *)&prime != v35);
        v36 = *(_QWORD **)(a1 + 152);
        if (v36)
        {
          v37 = v36[1];
          v38 = (uint8x8_t)vcnt_s8(prime);
          v38.i16[0] = vaddlv_u8(v38);
          if (v38.u32[0] > 1uLL)
          {
            if (v37 >= *(_QWORD *)&prime)
              v37 %= *(_QWORD *)&prime;
          }
          else
          {
            v37 &= *(_QWORD *)&prime - 1;
          }
          *((_QWORD *)*v10 + v37) = a1 + 152;
          v42 = (_QWORD *)*v36;
          if (*v36)
          {
            do
            {
              v43 = v42[1];
              if (v38.u32[0] > 1uLL)
              {
                if (v43 >= *(_QWORD *)&prime)
                  v43 %= *(_QWORD *)&prime;
              }
              else
              {
                v43 &= *(_QWORD *)&prime - 1;
              }
              if (v43 != v37)
              {
                if (!*((_QWORD *)*v10 + v43))
                {
                  *((_QWORD *)*v10 + v43) = v36;
                  goto LABEL_71;
                }
                *v36 = *v42;
                *v42 = **((_QWORD **)*v10 + v43);
                **((_QWORD **)*v10 + v43) = v42;
                v42 = v36;
              }
              v43 = v37;
LABEL_71:
              v36 = v42;
              v42 = (_QWORD *)*v42;
              v37 = v43;
            }
            while (v42);
          }
        }
        v20 = (unint64_t)prime;
      }
      else
      {
        v49 = *v10;
        *v10 = 0;
        if (v49)
          operator delete(v49);
        v20 = 0;
        *(_QWORD *)(a1 + 144) = 0;
      }
    }
LABEL_75:
    v44 = v15[1];
    v45 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v45.i16[0] = vaddlv_u8(v45);
    if (v45.u32[0] > 1uLL)
    {
      if (v44 >= v20)
        v44 %= v20;
    }
    else
    {
      v44 &= v20 - 1;
    }
    v46 = *v10;
    v47 = (_QWORD *)*((_QWORD *)*v10 + v44);
    if (v47)
    {
      *v15 = *v47;
    }
    else
    {
      *v15 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v15;
      v46[v44] = a1 + 152;
      if (!*v15)
      {
LABEL_88:
        result = 0;
        ++*(_QWORD *)(a1 + 160);
        return result;
      }
      v48 = *(_QWORD *)(*v15 + 8);
      if (v45.u32[0] > 1uLL)
      {
        if (v48 >= v20)
          v48 %= v20;
      }
      else
      {
        v48 &= v20 - 1;
      }
      v47 = (char *)*v10 + 8 * v48;
    }
    *v47 = v15;
    goto LABEL_88;
  }
  v14 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v50 = 136316418;
    *(_QWORD *)&v50[4] = "DVMGraph.mm";
    *(_WORD *)&v50[12] = 1024;
    *(_DWORD *)&v50[14] = 263;
    v51 = 2048;
    v52 = a1;
    v53 = 2048;
    v54 = a2;
    v55 = 2080;
    v56 = "PHASEMixerTypeSpatial";
    v57 = 1024;
    v58 = a5;
    _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: Spatial submixId %llu, type %s has invalid channel count (%i)!", v50, 0x36u);
  }
  return 1;
}

void sub_21657AC90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::DVM::VoiceGraph::InternalRemoveNode(uint64_t a1, int a2, unint64_t a3, unint64_t a4, int a5)
{
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  Phase::Logger *v22;
  Phase::Controller::DVM::VoiceNode *v23;
  Phase::Logger *v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  _QWORD *v28;
  Phase::Logger *v29;
  Phase::Logger *v30;
  uint64_t v31;
  NSObject *v33;
  const char *v34;
  int v35;
  _QWORD *v36;
  _QWORD *v37;
  Phase::Controller::DVM::VoiceNode *v38;
  Phase::Controller::DVM::VoiceGraph **v39;
  Phase::Controller::DVM::VoiceGraph **v40;
  uint64_t *v41;
  uint64_t *v42;
  int8x8_t v43;
  uint64_t v44;
  unint64_t v45;
  uint8x8_t v46;
  _QWORD *v47;
  uint64_t *v48;
  Phase::Controller::DVM::VoiceNode *v49;
  unint64_t *v50;
  unint64_t *v51;
  BOOL v52;
  Phase::Controller::DVM::VoiceGraph ***v53;
  Phase::Controller::DVM::VoiceGraph ***v54;
  Phase::Controller::DVM::VoiceGraph **v55;
  Phase::Controller::DVM::VoiceGraph **v56;
  _QWORD *v57;
  Phase::Controller::DVM::VoiceNode *v58;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v59;
  void *v60;
  Phase::Logger *v61;
  NSObject *v63;
  uint64_t v64;
  const char *v65;
  void *v66;
  _QWORD *j;
  NSObject *v68;
  char *v69;
  uint64_t *v70;
  int8x8_t v71;
  uint64_t v72;
  unint64_t v73;
  uint8x8_t v74;
  NSObject *v75;
  char v76;
  NSObject *v77;
  uint64_t *v78;
  int8x8_t v79;
  uint64_t v80;
  unint64_t v81;
  uint8x8_t v82;
  uint64_t *v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t SlotForKey;
  unsigned int *v101;
  unsigned int *v102;
  int v103;
  int v104;
  int v108;
  unsigned int v109;
  _QWORD *v110;
  int8x8_t v111;
  unint64_t v112;
  uint8x8_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  Phase::Controller::DVM::VoiceGraph **v120;
  Phase::Controller::DVM::VoiceGraph **v121;
  uint64_t *v122;
  int8x8_t v123;
  uint64_t v124;
  unint64_t v125;
  uint8x8_t v126;
  uint64_t *v127;
  uint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unsigned int v133;
  const std::error_category *v134;
  unsigned int v135;
  const std::error_category *v136;
  unsigned int v137;
  const std::error_category *v138;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v139;
  _QWORD *v140;
  int v141;
  int v142;
  _QWORD *v143;
  uint64_t v144;
  std::chrono::nanoseconds __ns;
  void *v146;
  _BYTE buf[28];
  __int16 v148;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  __int16 v150;
  void *v151;
  uint64_t v152;
  UniqueObjectId v153;

  v152 = *MEMORY[0x24BDAC8D0];
  v10 = (_BYTE *)(a1 + 656);
  *(_QWORD *)buf = buf;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0;
  v11 = *(_QWORD *)(a1 + 664);
  if (v11 != a1 + 656)
  {
    v12 = 0;
    do
    {
      if (*(_DWORD *)(v11 + 32) == a2 && *(_QWORD *)(v11 + 40) == a3 && *(_QWORD *)(v11 + 48) == a4)
      {
        for (i = *(_QWORD *)(v11 + 8); ; i = *(_QWORD *)(i + 8))
        {
          if ((_BYTE *)i == v10)
          {
            v14 = 1;
            i = a1 + 656;
            goto LABEL_18;
          }
          if (*(_DWORD *)(i + 32) != a2 || *(_QWORD *)(i + 40) != a3 || *(_QWORD *)(i + 48) != a4)
            break;
        }
        v14 = 0;
LABEL_18:
        if (v11 != i)
        {
          v15 = *(_QWORD *)i;
          if (buf != v10)
          {
            v16 = 1;
            if (v15 != v11)
            {
              v17 = v11;
              do
              {
                v17 = *(_QWORD *)(v17 + 8);
                ++v16;
              }
              while (v17 != v15);
            }
            *(_QWORD *)(a1 + 672) -= v16;
            v12 += v16;
            *(_QWORD *)&buf[16] = v12;
          }
          v18 = *(_QWORD *)v11;
          *(_QWORD *)(v18 + 8) = *(_QWORD *)(v15 + 8);
          **(_QWORD **)(v15 + 8) = v18;
          v19 = *(_QWORD *)buf;
          *(_QWORD *)(*(_QWORD *)buf + 8) = v11;
          *(_QWORD *)v11 = v19;
          *(_QWORD *)buf = v15;
          *(_QWORD *)(v15 + 8) = buf;
        }
        if ((v14 & 1) != 0)
          goto LABEL_14;
      }
      else
      {
        i = v11;
      }
      i = *(_QWORD *)(i + 8);
LABEL_14:
      v11 = i;
    }
    while ((_BYTE *)i != v10);
  }
  std::__list_imp<Phase::Controller::DVM::DspNodePlayStateCommand>::clear((uint64_t *)buf);
  v144 = 0;
  switch(a2)
  {
    case 0:
      v144 = *(_QWORD *)(Phase::Controller::DVM::VoiceGraph::GetGenerator((Phase::Controller::DVM::VoiceGraph *)a1, a3, a4)+ 48);
      Phase::Controller::DVM::VoiceGraph::InternalRemoveGenerator(a1, a3, a4);
      goto LABEL_266;
    case 1:
      v141 = a5;
      v153.mStorage[0] = a3;
      v153.mStorage[1] = a4;
      v144 = Phase::Controller::DVM::VoiceGraph::GetSubmix((Phase::Controller::DVM::VoiceGraph *)a1, v153)[6];
      __ns.__rep_ = a3;
      v146 = (void *)a4;
      *(_QWORD *)buf = a3;
      *(_QWORD *)&buf[8] = a4;
      v143 = (_QWORD *)(a1 + 136);
      if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 136), buf))
      {
        v47 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v143, &__ns);
        Phase::Controller::DVM::Submix::GetGeneratorIds((Phase::Controller::DVM::Submix *)(v47 + 4), (char **)buf);
        v50 = *(unint64_t **)buf;
        v51 = *(unint64_t **)&buf[8];
        v52 = *(_QWORD *)buf != *(_QWORD *)&buf[8];
        if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
        {
          do
          {
            Phase::Controller::DVM::VoiceGraph::InternalRemoveGenerator(a1, *v50, v50[1]);
            v50 += 2;
          }
          while (v50 != v51);
          v50 = *(unint64_t **)buf;
        }
        if (v50)
        {
          *(_QWORD *)&buf[8] = v50;
          operator delete(v50);
        }
        v53 = (Phase::Controller::DVM::VoiceGraph ***)v47[13];
        v54 = (Phase::Controller::DVM::VoiceGraph ***)v47[14];
        while (v53 != v54)
        {
          v56 = *v53;
          v55 = v53[1];
          if (*v53 != v55)
          {
            do
              v48 = (uint64_t *)Phase::Controller::DVM::VoiceGraph::ScheduleRemoveVoice(*v56++, v49);
            while (v56 != v55);
            v52 = 1;
          }
          v53 += 9;
        }
        if (v52)
          *(_QWORD *)(a1 + 88) |= 8uLL;
        for (j = *(_QWORD **)(a1 + 336); j; j = (_QWORD *)*j)
        {
          v48 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(j + 11, &__ns);
          if (v48)
            std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>>>::erase(j + 11, v48);
        }
        v68 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v48) + 80));
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        {
          v69 = Phase::Controller::DVM::kSubmixTypeStrings[v47[11]];
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "DVMGraph.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 446;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = a1;
          v148 = 2048;
          rep = __ns.__rep_;
          v150 = 2080;
          v151 = v69;
          _os_log_impl(&dword_2164CC000, v68, OS_LOG_TYPE_DEFAULT, "%25s:%-5d graph@%p: internal removed submixId %llu, type %s!", buf, 0x30u);
        }
        v70 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v143, &__ns);
        a5 = v141;
        if (v70)
        {
          v71 = *(int8x8_t *)(a1 + 144);
          v72 = *v70;
          v73 = v70[1];
          v74 = (uint8x8_t)vcnt_s8(v71);
          v74.i16[0] = vaddlv_u8(v74);
          if (v74.u32[0] > 1uLL)
          {
            if (v73 >= *(_QWORD *)&v71)
              v73 %= *(_QWORD *)&v71;
          }
          else
          {
            v73 &= *(_QWORD *)&v71 - 1;
          }
          v89 = *(uint64_t **)(*v143 + 8 * v73);
          do
          {
            v90 = v89;
            v89 = (uint64_t *)*v89;
          }
          while (v89 != v70);
          if (v90 == (uint64_t *)(a1 + 152))
            goto LABEL_174;
          v91 = v90[1];
          if (v74.u32[0] > 1uLL)
          {
            if (v91 >= *(_QWORD *)&v71)
              v91 %= *(_QWORD *)&v71;
          }
          else
          {
            v91 &= *(_QWORD *)&v71 - 1;
          }
          if (v91 != v73)
          {
LABEL_174:
            if (v72)
            {
              v96 = *(_QWORD *)(v72 + 8);
              if (v74.u32[0] > 1uLL)
              {
                v97 = *(_QWORD *)(v72 + 8);
                if (v96 >= *(_QWORD *)&v71)
                  v97 = v96 % *(_QWORD *)&v71;
              }
              else
              {
                v97 = v96 & (*(_QWORD *)&v71 - 1);
              }
              if (v97 == v73)
                goto LABEL_178;
            }
            *(_QWORD *)(*v143 + 8 * v73) = 0;
            v72 = *v70;
          }
          if (!v72)
          {
LABEL_184:
            *v90 = v72;
            *v70 = 0;
            --*(_QWORD *)(a1 + 160);
            std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,void *>>>::operator()[abi:ne180100](1, (uint64_t)v70);
            goto LABEL_266;
          }
          v96 = *(_QWORD *)(v72 + 8);
LABEL_178:
          if (v74.u32[0] > 1uLL)
          {
            if (v96 >= *(_QWORD *)&v71)
              v96 %= *(_QWORD *)&v71;
          }
          else
          {
            v96 &= *(_QWORD *)&v71 - 1;
          }
          if (v96 != v73)
          {
            *(_QWORD *)(*v143 + 8 * v96) = v90;
            v72 = *v70;
          }
          goto LABEL_184;
        }
      }
      else
      {
        v77 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
        if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "DVMGraph.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 407;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = a1;
          v148 = 2048;
          rep = a3;
          _os_log_impl(&dword_2164CC000, v77, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: submixId %llu does not exist!", buf, 0x26u);
        }
      }
      goto LABEL_266;
    case 2:
      v20 = a5;
      v144 = Phase::Controller::DVM::VoiceGraph::GetTap((Phase::Controller::DVM::VoiceGraph *)a1, a3)[6];
      v28 = (_QWORD *)(a1 + 320);
      v29 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(a1 + 320), a3);
      if (v29)
      {
        v30 = v29;
        v31 = *((_QWORD *)v29 + 8);
        if ((v31 & 0xFF00000000) == 0 || *((_QWORD *)v29 + 8) != 0)
        {
          v33 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v29) + 80));
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            if ((v31 & 0xFF00000000) != 0)
              v34 = Phase::Controller::DVM::kPlayStateStrings[(int)v31];
            else
              v34 = "none";
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "DVMGraph.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1557;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = a1;
            v148 = 2048;
            rep = a3;
            v150 = 2080;
            v151 = (void *)v34;
            _os_log_impl(&dword_2164CC000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: trying to remove tapId %llu that is not stopped (%s)!", buf, 0x30u);
          }
        }
        v98 = *((_QWORD *)v30 + 10);
        if (v98)
        {
          *(_QWORD *)(a1 + 88) |= 8uLL;
          Phase::Controller::DVM::VoiceNode::Disconnect(v98, 1);
          Phase::Controller::DVM::VoiceNode::Disconnect(v98, 0);
        }
        *(_QWORD *)buf = a1 + 256;
        buf[8] = 1;
        std::mutex::lock((std::mutex *)(a1 + 256));
        v99 = atomic_load((unint64_t *)(a1 + 216));
        if (v99)
        {
          SlotForKey = caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl::findSlotForKey((uint64_t *)v99, a3);
          if ((SlotForKey & 1) != 0)
          {
            v102 = v101;
            atomic_store(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)(v99 + 8 * HIDWORD(SlotForKey) + 16));
            if (v101)
            {
              v103 = atomic_load((unsigned int *)(a1 + 224));
              if (v103 >= 1)
              {
                do
                {
                  __ns.__rep_ = 50000;
                  std::this_thread::sleep_for (&__ns);
                  v104 = atomic_load((unsigned int *)(a1 + 224));
                }
                while (v104 > 0);
              }
              if ((unsigned __int16)atomic_load(v102))
              {
                std::unique_lock<std::mutex>::unlock((std::unique_lock<std::mutex> *)buf);
                while ((unsigned __int16)atomic_load(v102))
                {
                  __ns.__rep_ = 500000;
                  std::this_thread::sleep_for (&__ns);
                }
                std::unique_lock<std::mutex>::lock((std::unique_lock<std::mutex> *)buf);
                v99 = atomic_load((unint64_t *)(a1 + 216));
              }
              caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::element_t::release(v102);
              v108 = *(_DWORD *)(a1 + 208) - 1;
              *(_DWORD *)(a1 + 208) = v108;
              if (v99)
              {
                v109 = *(_DWORD *)(v99 + 8);
                if (v109 >= 9 && 16 * v108 / v109 <= 2)
                  caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::rehash((unint64_t *)(a1 + 176), v109 >> 1);
              }
            }
          }
        }
        caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::emptyReleasePool(a1 + 176);
        if (buf[8])
          std::mutex::unlock(*(std::mutex **)buf);
        v110 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(a1 + 320), a3);
        a5 = v20;
        if (v110)
        {
          v111 = *(int8x8_t *)(a1 + 328);
          v112 = v110[1];
          v113 = (uint8x8_t)vcnt_s8(v111);
          v113.i16[0] = vaddlv_u8(v113);
          if (v113.u32[0] > 1uLL)
          {
            if (v112 >= *(_QWORD *)&v111)
              v112 %= *(_QWORD *)&v111;
          }
          else
          {
            v112 &= *(_QWORD *)&v111 - 1;
          }
          v114 = *(_QWORD **)(*v28 + 8 * v112);
          do
          {
            v115 = v114;
            v114 = (_QWORD *)*v114;
          }
          while (v114 != v110);
          if (v115 == (_QWORD *)(a1 + 336))
            goto LABEL_222;
          v116 = v115[1];
          if (v113.u32[0] > 1uLL)
          {
            if (v116 >= *(_QWORD *)&v111)
              v116 %= *(_QWORD *)&v111;
          }
          else
          {
            v116 &= *(_QWORD *)&v111 - 1;
          }
          if (v116 != v112)
          {
LABEL_222:
            if (!*v110)
              goto LABEL_223;
            v117 = *(_QWORD *)(*v110 + 8);
            if (v113.u32[0] > 1uLL)
            {
              if (v117 >= *(_QWORD *)&v111)
                v117 %= *(_QWORD *)&v111;
            }
            else
            {
              v117 &= *(_QWORD *)&v111 - 1;
            }
            if (v117 != v112)
LABEL_223:
              *(_QWORD *)(*v28 + 8 * v112) = 0;
          }
          v118 = *v110;
          if (*v110)
          {
            v119 = *(_QWORD *)(v118 + 8);
            if (v113.u32[0] > 1uLL)
            {
              if (v119 >= *(_QWORD *)&v111)
                v119 %= *(_QWORD *)&v111;
            }
            else
            {
              v119 &= *(_QWORD *)&v111 - 1;
            }
            if (v119 != v112)
            {
              *(_QWORD *)(*v28 + 8 * v119) = v115;
              v118 = *v110;
            }
          }
          *v115 = v118;
          *v110 = 0;
          --*(_QWORD *)(a1 + 344);
          *(_QWORD *)buf = v110;
          *(_QWORD *)&buf[8] = a1 + 336;
          buf[16] = 1;
          std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,void *>>>>::reset[abi:ne180100]((uint64_t *)buf);
        }
        goto LABEL_266;
      }
      v75 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "DVMGraph.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1548;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = a1;
        v148 = 2048;
        rep = a3;
        _os_log_impl(&dword_2164CC000, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: TapId %llu does not exists!", buf, 0x26u);
      }
      v76 = 3;
      goto LABEL_94;
    case 3:
      v35 = a5;
      v144 = Phase::Controller::DVM::VoiceGraph::GetRenderer((Phase::Controller::DVM::VoiceGraph *)a1, a3)[6];
      *(_QWORD *)buf = a3;
      v36 = (_QWORD *)(a1 + 360);
      if (!std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)(a1 + 360), (unint64_t *)buf))
      {
        v76 = 0;
        goto LABEL_267;
      }
      v37 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(a1 + 360), a3);
      (*(void (**)(_BYTE *__return_ptr, _QWORD *))(v37[3] + 40))(buf, v37 + 3);
      v40 = *(Phase::Controller::DVM::VoiceGraph ***)buf;
      v39 = *(Phase::Controller::DVM::VoiceGraph ***)&buf[8];
      if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
      {
        do
        {
          *(_QWORD *)(a1 + 88) |= 8uLL;
          Phase::Controller::DVM::VoiceGraph::ScheduleRemoveVoice(*v40++, v38);
        }
        while (v40 != v39);
        v40 = *(Phase::Controller::DVM::VoiceGraph ***)buf;
      }
      a5 = v35;
      if (v40)
      {
        *(_QWORD *)&buf[8] = v40;
        operator delete(v40);
      }
      v41 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(a1 + 360), a3);
      if (!v41)
        goto LABEL_266;
      v42 = v41;
      v43 = *(int8x8_t *)(a1 + 368);
      v44 = *v41;
      v45 = v41[1];
      v46 = (uint8x8_t)vcnt_s8(v43);
      v46.i16[0] = vaddlv_u8(v46);
      if (v46.u32[0] > 1uLL)
      {
        if (v45 >= *(_QWORD *)&v43)
          v45 %= *(_QWORD *)&v43;
      }
      else
      {
        v45 &= *(_QWORD *)&v43 - 1;
      }
      v83 = *(uint64_t **)(*v36 + 8 * v45);
      do
      {
        v84 = v83;
        v83 = (uint64_t *)*v83;
      }
      while (v83 != v41);
      if (v84 != (uint64_t *)(a1 + 376))
      {
        v85 = v84[1];
        if (v46.u32[0] > 1uLL)
        {
          if (v85 >= *(_QWORD *)&v43)
            v85 %= *(_QWORD *)&v43;
        }
        else
        {
          v85 &= *(_QWORD *)&v43 - 1;
        }
        if (v85 == v45)
          goto LABEL_147;
      }
      if (v44)
      {
        v92 = *(_QWORD *)(v44 + 8);
        if (v46.u32[0] > 1uLL)
        {
          v93 = *(_QWORD *)(v44 + 8);
          if (v92 >= *(_QWORD *)&v43)
            v93 = v92 % *(_QWORD *)&v43;
        }
        else
        {
          v93 = v92 & (*(_QWORD *)&v43 - 1);
        }
        if (v93 == v45)
          goto LABEL_149;
      }
      *(_QWORD *)(*v36 + 8 * v45) = 0;
      v44 = *v41;
LABEL_147:
      if (v44)
      {
        v92 = *(_QWORD *)(v44 + 8);
LABEL_149:
        if (v46.u32[0] > 1uLL)
        {
          if (v92 >= *(_QWORD *)&v43)
            v92 %= *(_QWORD *)&v43;
        }
        else
        {
          v92 &= *(_QWORD *)&v43 - 1;
        }
        if (v92 != v45)
        {
          *(_QWORD *)(*v36 + 8 * v92) = v84;
          v44 = *v41;
        }
      }
      *v84 = v44;
      *v41 = 0;
      --*(_QWORD *)(a1 + 384);
      v41[3] = (uint64_t)off_24D57C2E0;
      *(_QWORD *)buf = v41 + 11;
      std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      operator delete(v42);
      goto LABEL_266;
    case 4:
      v20 = a5;
      v144 = Phase::Controller::DVM::VoiceGraph::GetMaster((Phase::Controller::DVM::VoiceGraph *)a1, a3)[6];
      *(_QWORD *)buf = a3;
      v21 = (_QWORD *)(a1 + 400);
      if (std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)(a1 + 400), (unint64_t *)buf))
      {
        v22 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(a1 + 400), a3);
        v24 = v22;
        v25 = *((_QWORD *)v22 + 8);
        if ((v25 & 0xFF00000000) == 0 || *((_QWORD *)v22 + 8))
        {
          v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v22) + 80));
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            if ((v25 & 0xFF00000000) != 0)
              v27 = Phase::Controller::DVM::kPlayStateStrings[(int)v25];
            else
              v27 = "none";
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "DVMGraph.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2139;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = a1;
            v148 = 2048;
            rep = a3;
            v150 = 2080;
            v151 = (void *)v27;
            _os_log_impl(&dword_2164CC000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: trying to remove masterId %llu that is not stopped (%s)!", buf, 0x30u);
          }
        }
        v120 = (Phase::Controller::DVM::VoiceGraph **)*((_QWORD *)v24 + 10);
        v121 = (Phase::Controller::DVM::VoiceGraph **)*((_QWORD *)v24 + 11);
        while (v120 != v121)
        {
          *(_QWORD *)(a1 + 88) |= 8uLL;
          Phase::Controller::DVM::VoiceGraph::ScheduleRemoveVoice(*v120++, v23);
        }
        v122 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(a1 + 400), a3);
        a5 = v20;
        if (v122)
        {
          v123 = *(int8x8_t *)(a1 + 408);
          v124 = *v122;
          v125 = v122[1];
          v126 = (uint8x8_t)vcnt_s8(v123);
          v126.i16[0] = vaddlv_u8(v126);
          if (v126.u32[0] > 1uLL)
          {
            if (v125 >= *(_QWORD *)&v123)
              v125 %= *(_QWORD *)&v123;
          }
          else
          {
            v125 &= *(_QWORD *)&v123 - 1;
          }
          v127 = *(uint64_t **)(*v21 + 8 * v125);
          do
          {
            v128 = v127;
            v127 = (uint64_t *)*v127;
          }
          while (v127 != v122);
          if (v128 == (uint64_t *)(a1 + 416))
            goto LABEL_255;
          v129 = v128[1];
          if (v126.u32[0] > 1uLL)
          {
            if (v129 >= *(_QWORD *)&v123)
              v129 %= *(_QWORD *)&v123;
          }
          else
          {
            v129 &= *(_QWORD *)&v123 - 1;
          }
          if (v129 != v125)
          {
LABEL_255:
            if (v124)
            {
              v130 = *(_QWORD *)(v124 + 8);
              if (v126.u32[0] > 1uLL)
              {
                v131 = *(_QWORD *)(v124 + 8);
                if (v130 >= *(_QWORD *)&v123)
                  v131 = v130 % *(_QWORD *)&v123;
              }
              else
              {
                v131 = v130 & (*(_QWORD *)&v123 - 1);
              }
              if (v131 == v125)
                goto LABEL_259;
            }
            *(_QWORD *)(*v21 + 8 * v125) = 0;
            v124 = *v122;
          }
          if (!v124)
          {
LABEL_265:
            *v128 = v124;
            *v122 = 0;
            --*(_QWORD *)(a1 + 424);
            std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,void *>>>::operator()[abi:ne180100](1, v122);
            goto LABEL_266;
          }
          v130 = *(_QWORD *)(v124 + 8);
LABEL_259:
          if (v126.u32[0] > 1uLL)
          {
            if (v130 >= *(_QWORD *)&v123)
              v130 %= *(_QWORD *)&v123;
          }
          else
          {
            v130 &= *(_QWORD *)&v123 - 1;
          }
          if (v130 != v125)
          {
            *(_QWORD *)(*v21 + 8 * v130) = v128;
            v124 = *v122;
          }
          goto LABEL_265;
        }
LABEL_266:
        v76 = 0;
      }
      else
      {
        v76 = 0;
LABEL_94:
        a5 = v20;
      }
LABEL_267:
      if (a5)
        v76 = a5;
      v132 = *(_QWORD *)(a1 + 72);
      if (v132)
      {
        switch(a2)
        {
          case 3:
            v137 = v76;
            v138 = std::generic_category();
            (*(void (**)(uint64_t, unint64_t, _QWORD, const std::error_category *))(*(_QWORD *)v132 + 32))(v132, a3, v137, v138);
            break;
          case 1:
            v135 = v76;
            v136 = std::generic_category();
            (*(void (**)(uint64_t, unint64_t, unint64_t, _QWORD, const std::error_category *))(*(_QWORD *)v132 + 24))(v132, a3, a4, v135, v136);
            break;
          case 0:
            v133 = v76;
            v134 = std::generic_category();
            (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t *, _QWORD, const std::error_category *))(*(_QWORD *)v132 + 16))(v132, a3, a4, &v144, v133, v134);
            break;
        }
      }
      return;
    case 5:
      if (!std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(a1 + 440), a3))goto LABEL_266;
      v142 = a5;
      v140 = (_QWORD *)(a1 + 440);
      v57 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(a1 + 440), a3);
      if (!v57)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      (*(void (**)(std::chrono::nanoseconds *__return_ptr, _QWORD *))(v57[3] + 40))(&__ns, v57 + 3);
      v59 = __ns.__rep_;
      v60 = v146;
      v139 = __ns.__rep_;
      if ((void *)__ns.__rep_ == v146)
      {
        v66 = (void *)__ns.__rep_;
      }
      else
      {
        do
        {
          v61 = *(Phase::Logger **)v59;
          if ((*(_QWORD *)(*(_QWORD *)v59 + 192) & 0xFF00000000) == 0
            || *(_QWORD *)(*(_QWORD *)v59 + 192) != 0)
          {
            v63 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v61) + 80));
            if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
            {
              v64 = *(_QWORD *)(*(_QWORD *)v59 + 192);
              if ((v64 & 0xFF00000000) != 0)
                v65 = Phase::Controller::DVM::kPlayStateStrings[(int)v64];
              else
                v65 = "none";
              *(_DWORD *)buf = 136316162;
              *(_QWORD *)&buf[4] = "DVMGraph.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 384;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = a1;
              v148 = 2048;
              rep = a3;
              v150 = 2080;
              v151 = (void *)v65;
              _os_log_impl(&dword_2164CC000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: trying to remove sinkId %llu that is not stopped (%s)!", buf, 0x30u);
            }
            v61 = *(Phase::Logger **)v59;
          }
          Phase::Controller::DVM::VoiceGraph::ScheduleRemoveVoice(v61, v58);
          v59 += 8;
        }
        while ((void *)v59 != v60);
        v66 = (void *)__ns.__rep_;
      }
      if (v66)
      {
        v146 = v66;
        operator delete(v66);
      }
      v78 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(v140, a3);
      if (!v78)
        goto LABEL_169;
      v79 = *(int8x8_t *)(a1 + 448);
      v80 = *v78;
      v81 = v78[1];
      v82 = (uint8x8_t)vcnt_s8(v79);
      v82.i16[0] = vaddlv_u8(v82);
      if (v82.u32[0] > 1uLL)
      {
        if (v81 >= *(_QWORD *)&v79)
          v81 %= *(_QWORD *)&v79;
      }
      else
      {
        v81 &= *(_QWORD *)&v79 - 1;
      }
      v86 = *(uint64_t **)(*v140 + 8 * v81);
      do
      {
        v87 = v86;
        v86 = (uint64_t *)*v86;
      }
      while (v86 != v78);
      if (v87 != (uint64_t *)(a1 + 456))
      {
        v88 = v87[1];
        if (v82.u32[0] > 1uLL)
        {
          if (v88 >= *(_QWORD *)&v79)
            v88 %= *(_QWORD *)&v79;
        }
        else
        {
          v88 &= *(_QWORD *)&v79 - 1;
        }
        if (v88 == v81)
          goto LABEL_160;
      }
      if (v80)
      {
        v94 = *(_QWORD *)(v80 + 8);
        if (v82.u32[0] > 1uLL)
        {
          v95 = *(_QWORD *)(v80 + 8);
          if (v94 >= *(_QWORD *)&v79)
            v95 = v94 % *(_QWORD *)&v79;
        }
        else
        {
          v95 = v94 & (*(_QWORD *)&v79 - 1);
        }
        if (v95 == v81)
          goto LABEL_162;
      }
      *(_QWORD *)(*v140 + 8 * v81) = 0;
      v80 = *v78;
LABEL_160:
      if (v80)
      {
        v94 = *(_QWORD *)(v80 + 8);
LABEL_162:
        if (v82.u32[0] > 1uLL)
        {
          if (v94 >= *(_QWORD *)&v79)
            v94 %= *(_QWORD *)&v79;
        }
        else
        {
          v94 &= *(_QWORD *)&v79 - 1;
        }
        if (v94 != v81)
        {
          *(_QWORD *)(*v140 + 8 * v94) = v87;
          v80 = *v78;
        }
      }
      *v87 = v80;
      *v78 = 0;
      --*(_QWORD *)(a1 + 464);
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,void *>>>::operator()[abi:ne180100](1, v78);
LABEL_169:
      v76 = 0;
      if ((void *)v139 != v60)
        *(_QWORD *)(a1 + 88) |= 8uLL;
      a5 = v142;
      goto LABEL_267;
    default:
      std::terminate();
      return;
  }
}

void sub_21657BE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::mutex *a19, uint64_t a20)
{
  if ((_BYTE)a20)
    std::mutex::unlock(a19);
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::DVM::VoiceGraph::GetGenerator(Phase::Controller::DVM::VoiceGraph *a1, unint64_t a2, unint64_t a3)
{
  _QWORD *SubmixForGenerator;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  UniqueObjectId v11;

  v9 = a2;
  v10 = a3;
  if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)a1 + 12, &v9))std::terminate();
  v11.mStorage[0] = a2;
  v11.mStorage[1] = a3;
  SubmixForGenerator = Phase::Controller::DVM::VoiceGraph::GetSubmixForGenerator(a1, v11);
  v9 = a2;
  v10 = a3;
  v7 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(SubmixForGenerator + 12, &v9);
  if (!v7 || (result = v7[4]) == 0)
    __assert_rtn("GetGenerator", "DVMGraph.hpp", 329, "pGenerator != nullptr");
  return result;
}

void Phase::Controller::DVM::VoiceGraph::InternalRemoveGenerator(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v6;
  uint64_t Generator;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  BOOL v24;
  NSObject *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *SubmixForGenerator;
  unint64_t v30[2];
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  _BYTE buf[18];
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  UniqueObjectId v41;

  v3 = a3;
  v4 = a2;
  v40 = *MEMORY[0x24BDAC8D0];
  v33 = a2;
  v34 = a3;
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  v6 = (_QWORD *)(a1 + 96);
  if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 96), buf))
  {
    Generator = Phase::Controller::DVM::VoiceGraph::GetGenerator((Phase::Controller::DVM::VoiceGraph *)a1, v4, v3);
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)Generator + 40))(buf);
    if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
    {
      v26 = *(uint64_t **)(a1 + 752);
      if (v26 != (uint64_t *)(a1 + 760))
      {
        do
        {
          if (v26[6] == v33 && v26[7] == v34)
          {
            v27 = std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>>>::__remove_node_pointer((uint64_t **)(a1 + 752), v26);
            operator delete(v26);
          }
          else
          {
            v28 = (uint64_t *)v26[1];
            if (v28)
            {
              do
              {
                v27 = v28;
                v28 = (uint64_t *)*v28;
              }
              while (v28);
            }
            else
            {
              do
              {
                v27 = (uint64_t *)v26[2];
                v24 = *v27 == (_QWORD)v26;
                v26 = v27;
              }
              while (!v24);
            }
          }
          v26 = v27;
        }
        while (v27 != (uint64_t *)(a1 + 760));
        v4 = v33;
        v3 = v34;
      }
    }
    else
    {
      (*(void (**)(unint64_t **__return_ptr, uint64_t))(*(_QWORD *)Generator + 40))(&v31, Generator);
      v8 = v31;
      v9 = v32;
      if (v31 != v32)
      {
        v10 = (uint64_t **)(a1 + 784);
        while (1)
        {
          v11 = *v8;
          if (*(_DWORD *)(*v8 + 188))
            std::terminate();
          *(_QWORD *)(a1 + 88) |= 8uLL;
          Phase::Controller::DVM::VoiceNode::Disconnect(v11, 1);
          Phase::Controller::DVM::VoiceNode::Disconnect(v11, 0);
          if (*(_DWORD *)(*v8 + 24))
            goto LABEL_7;
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)Generator + 56))(Generator))
            break;
          v12 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)*v8 + 16))(*v8);
          v13 = *(_QWORD *)(*v8 + 16);
          v30[0] = v12;
          v30[1] = v13;
          v14 = std::__tree<std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>,std::__map_value_compare<std::pair<unsigned long long,long long>,std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>,std::less<std::pair<unsigned long long,long long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>>>::find<std::pair<unsigned long long,long long>>(a1 + 752, v30);
          if ((uint64_t *)(a1 + 760) != v14)
          {
            std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>>>::__remove_node_pointer((uint64_t **)(a1 + 752), v14);
LABEL_12:
            operator delete(v14);
          }
LABEL_7:
          if (++v8 == v9)
          {
            v8 = v31;
            goto LABEL_38;
          }
        }
        if (!(*(unsigned int (**)(unint64_t))(*(_QWORD *)*v8 + 48))(*v8))
          goto LABEL_7;
        v15 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)*v8 + 16))(*v8);
        v16 = *v10;
        if (!*v10)
          goto LABEL_7;
        v17 = *(_QWORD *)(*v8 + 16);
        v14 = (uint64_t *)(a1 + 784);
        v18 = *v10;
        do
        {
          v19 = v18[4];
          if (v19 >= v15)
          {
            if (v19 <= v15)
            {
              if (v18[5] < v17)
                ++v18;
              else
                v14 = v18;
            }
            else
            {
              v14 = v18;
            }
          }
          else
          {
            ++v18;
          }
          v18 = (uint64_t *)*v18;
        }
        while (v18);
        if (v14 == (uint64_t *)v10)
          goto LABEL_7;
        v20 = v14[4];
        if (v20 > v15 || v20 >= v15 && v14[5] > v17)
          goto LABEL_7;
        v21 = (uint64_t *)v14[1];
        v22 = v14;
        if (v21)
        {
          do
          {
            v23 = v21;
            v21 = (uint64_t *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v23 = (uint64_t *)v22[2];
            v24 = *v23 == (_QWORD)v22;
            v22 = v23;
          }
          while (!v24);
        }
        if (*(uint64_t **)(a1 + 776) == v14)
          *(_QWORD *)(a1 + 776) = v23;
        --*(_QWORD *)(a1 + 792);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v16, v14);
        goto LABEL_12;
      }
LABEL_38:
      if (v8)
      {
        v32 = v8;
        operator delete(v8);
      }
    }
    v41.mStorage[0] = v4;
    v41.mStorage[1] = v3;
    SubmixForGenerator = Phase::Controller::DVM::VoiceGraph::GetSubmixForGenerator((Phase::Controller::DVM::VoiceGraph *)a1, v41);
    v31 = (unint64_t *)v4;
    v32 = (unint64_t *)v3;
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::DVM::Generator>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::DVM::Generator>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::DVM::Generator>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::DVM::Generator>>>>::__erase_unique<Phase::UniqueObjectId>(SubmixForGenerator + 12, &v31);
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>>>::__erase_unique<Phase::UniqueObjectId>(v6, &v33);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  else
  {
    v25 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 775;
      v36 = 2048;
      v37 = a1;
      v38 = 2048;
      v39 = v4;
      _os_log_impl(&dword_2164CC000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d graph@%p: generatorId %llu does not exist!", buf, 0x26u);
    }
  }
}

void sub_21657C358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Controller::DVM::VoiceGraph::GetSubmix(Phase::Controller::DVM::VoiceGraph *this, UniqueObjectId a2)
{
  _QWORD *v2;
  UniqueObjectId v4;
  UniqueObjectId v5;

  v4 = a2;
  v5 = a2;
  v2 = (_QWORD *)((char *)this + 136);
  if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)this + 17, &v5))std::terminate();
  return std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v2, &v4)+ 4;
}

_QWORD *Phase::Controller::DVM::VoiceGraph::GetRenderer(Phase::Controller::DVM::VoiceGraph *this, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v5;

  v5 = a2;
  v3 = (_QWORD *)((char *)this + 360);
  if (!std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)this + 45, &v5))__assert_rtn("GetRenderer", "DVMGraph.hpp", 349, "RendererIdExists(Id)");
  return std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(v3, a2)+ 3;
}

_QWORD *Phase::Controller::DVM::VoiceGraph::GetTap(Phase::Controller::DVM::VoiceGraph *this, unint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)((char *)this + 320);
  if (!std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)this + 40, a2))__assert_rtn("GetTap", "DVMGraph.hpp", 361, "TapIdExists(Id)");
  return std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(v3, a2)+ 3;
}

_QWORD *Phase::Controller::DVM::VoiceGraph::GetMaster(Phase::Controller::DVM::VoiceGraph *this, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v5;

  v5 = a2;
  v3 = (_QWORD *)((char *)this + 400);
  if (!std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)this + 50, &v5))__assert_rtn("GetMaster", "DVMGraph.hpp", 355, "MasterIdExists(Id)");
  return std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(v3, a2)+ 3;
}

uint64_t Phase::Controller::DVM::VoiceGraph::ScheduleRemoveVoice(Phase::Controller::DVM::VoiceGraph *this, Phase::Controller::DVM::VoiceNode *a2)
{
  if (!this)
    std::terminate();
  Phase::Controller::DVM::VoiceNode::Disconnect((unint64_t)this, 1);
  return Phase::Controller::DVM::VoiceNode::Disconnect((unint64_t)this, 0);
}

_QWORD *Phase::Controller::DVM::VoiceGraph::RemoveSubmix(Phase::Controller::DVM::VoiceGraph *a1, unint64_t a2, unint64_t a3)
{
  _QWORD *result;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)a1 + 17, v7);
  if (result)
    return (_QWORD *)Phase::Controller::DVM::VoiceGraph::SetSubmixPlayState(a1, a2, a3, 0);
  return result;
}

uint64_t Phase::Controller::DVM::VoiceGraph::SetSubmixPlayState(Phase::Controller::DVM::VoiceGraph *a1, unint64_t a2, unint64_t a3, int a4)
{
  _QWORD *Submix;
  int v9;
  NSObject *v11;
  char *v12;
  float v13;
  _QWORD *i;
  _BYTE v15[18];
  __int16 v16;
  Phase::Controller::DVM::VoiceGraph *v17;
  __int16 v18;
  char *v19;
  __int16 v20;
  unint64_t v21;
  uint64_t v22;
  UniqueObjectId v23;

  v22 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v15 = a2;
  *(_QWORD *)&v15[8] = a3;
  if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)a1 + 17, v15))
  {
    v23.mStorage[0] = a2;
    v23.mStorage[1] = a3;
    Submix = Phase::Controller::DVM::VoiceGraph::GetSubmix(a1, v23);
    v9 = Phase::Controller::DVM::VoiceGraph::PreprocessPlayStateChange((uint64_t)a1, (uint64_t)Submix, a4);
    if (v9 != 8)
    {
      if (v9 == 4)
        return 1;
      *((_QWORD *)a1 + 11) |= 8uLL;
      if (v9 == 2)
        v13 = 0.001;
      else
        v13 = 0.0;
      for (i = (_QWORD *)Submix[14]; i; i = (_QWORD *)*i)
        Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(a1, i[2], i[3], a4);
      Phase::Controller::DVM::VoiceGraph::SchedulePlayStateChange(a1, (uint64_t)Submix, a4, v13);
    }
    return 0;
  }
  else
  {
    v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = Phase::Controller::DVM::kPlayStateStrings[a4];
      *(_DWORD *)v15 = 136316162;
      *(_QWORD *)&v15[4] = "DVMGraph.mm";
      *(_WORD *)&v15[12] = 1024;
      *(_DWORD *)&v15[14] = 2495;
      v16 = 2048;
      v17 = a1;
      v18 = 2080;
      v19 = v12;
      v20 = 2048;
      v21 = a2;
      _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: state change request %s, submixId %llu does not exist!", v15, 0x30u);
    }
    return 3;
  }
}

uint64_t Phase::Controller::DVM::VoiceGraph::ConfigureSubmix(_QWORD *a1, unint64_t a2, unint64_t a3, int a4, _QWORD *a5)
{
  unint64_t v7;
  unint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  Phase::Logger *PlayStateTransitionStatus;
  NSObject *v13;
  char *v14;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  NSObject *v29;
  unint64_t v30;
  const char *v31;
  NSObject *v32;
  NSObject *v33;
  uint32_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  _DWORD *VoiceNode;
  unint64_t v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  Phase::Controller::DVM::VoiceNode *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  unint64_t v81;
  Phase::Controller::DVM::VoiceGraph **v82;
  Phase::Controller::DVM::VoiceGraph **v83;
  Phase::Controller::DVM::VoiceGraph *v84;
  Phase::Controller::DVM::VoiceGraph **v85;
  Phase::Controller::DVM::VoiceGraph **v86;
  NSObject *v87;
  char *v88;
  _QWORD *v89;
  unint64_t i;
  void *__p;
  Phase::Controller::DVM::VoiceGraph **v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _BYTE buf[18];
  __int16 v98;
  _QWORD *v99;
  __int16 v100;
  unint64_t v101;
  __int16 v102;
  unint64_t v103;
  uint64_t v104;

  v7 = a3;
  v8 = a2;
  v104 = *MEMORY[0x24BDAC8D0];
  v95 = a2;
  v96 = a3;
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  v10 = a1 + 17;
  if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(a1 + 17, buf))
  {
    v16 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 469;
      v98 = 2048;
      v99 = a1;
      v100 = 2048;
      v101 = v8;
      _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: submixId %llu does not exist!", buf, 0x26u);
    }
    return 3;
  }
  v11 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v10, &v95);
  v94 = v11[9];
  PlayStateTransitionStatus = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::GetPlayStateTransitionStatus((uint64_t)a1, (int *)&v94, a4);
  if ((_DWORD)PlayStateTransitionStatus == 4 || a4 == 3 || !a4)
  {
    v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(PlayStateTransitionStatus) + 80));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = Phase::Controller::DVM::kPlayStateStrings[a4];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 482;
      v98 = 2048;
      v99 = a1;
      v100 = 2048;
      v101 = v8;
      v102 = 2080;
      v103 = (unint64_t)v14;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: can't configure submixId %llu with invalid play state %s!", buf, 0x30u);
    }
    return 7;
  }
  v17 = a5[1];
  if (*a5 != v17)
  {
    v18 = *a5;
    while (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 3) == 0x8E38E38E38E38E39 * ((uint64_t)(v11[14] - v11[13]) >> 3))
    {
      v18 += 32;
      if (v18 == v17)
        goto LABEL_15;
    }
    v29 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(PlayStateTransitionStatus) + 80));
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v35 = Phase::Controller::DVM::kSubmixTypeStrings[v11[11]];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 491;
      v98 = 2048;
      v99 = a1;
      v100 = 2048;
      v101 = v8;
      v102 = 2080;
      v103 = (unint64_t)v35;
      v31 = "%25s:%-5d graph@%p: submixId %llu, type %s invalid effect voice count!";
      goto LABEL_35;
    }
    return 1;
  }
LABEL_15:
  v19 = (_QWORD *)v11[18];
  if (v19)
  {
    v20 = (_QWORD *)v11[18];
    while (1)
    {
      v21 = v20[4];
      v22 = *(_QWORD **)(v21 + 72);
      v23 = *(_QWORD **)(v21 + 80);
      if (v22 == v23)
        break;
      do
      {
        v24 = v22[2];
        if (v22[1] == v24)
          v25 = v22;
        else
          v25 = (_QWORD *)(v24 - 8);
        if (!*v25)
          goto LABEL_30;
        v22 += 4;
      }
      while (v22 != v23);
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_24;
    }
LABEL_30:
    v32 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(PlayStateTransitionStatus) + 80));
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      return 1;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "DVMGraph.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 500;
    v98 = 2048;
    v99 = a1;
    v100 = 2048;
    v101 = v8;
    v31 = "%25s:%-5d graph@%p: submixId %llu uninitialized sampler!";
LABEL_32:
    v33 = v32;
    v34 = 38;
LABEL_36:
    _os_log_impl(&dword_2164CC000, v33, OS_LOG_TYPE_ERROR, v31, buf, v34);
    return 1;
  }
LABEL_24:
  v26 = v11[11];
  switch(v26)
  {
    case 3:
      if (v19)
      {
        v27 = (char *)v11[13];
        v28 = (char *)v11[14];
        while (0x8E38E38E38E38E39 * ((v28 - v27) >> 3) == (uint64_t)(*(_QWORD *)(v19[4] + 80)
                                                                     - *(_QWORD *)(v19[4] + 72)) >> 5)
        {
          v19 = (_QWORD *)*v19;
          if (!v19)
            goto LABEL_57;
        }
        v32 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(PlayStateTransitionStatus) + 80));
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          return 1;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "DVMGraph.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 547;
        v98 = 2048;
        v99 = a1;
        v100 = 2048;
        v101 = v8;
        v31 = "%25s:%-5d graph@%p: submixId %llu, type PHASEMixerTypeChannel, invalid generator channel count!";
        goto LABEL_32;
      }
      v27 = (char *)v11[13];
      v28 = (char *)v11[14];
      break;
    case 2:
      if (v19)
      {
        v27 = (char *)v11[13];
        v28 = (char *)v11[14];
        while (0x8E38E38E38E38E39 * ((v28 - v27) >> 3) == (uint64_t)(*(_QWORD *)(v19[4] + 80)
                                                                     - *(_QWORD *)(v19[4] + 72)) >> 5)
        {
          v19 = (_QWORD *)*v19;
          if (!v19)
            goto LABEL_51;
        }
        v32 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(PlayStateTransitionStatus) + 80));
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          return 1;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "DVMGraph.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 526;
        v98 = 2048;
        v99 = a1;
        v100 = 2048;
        v101 = v8;
        v31 = "%25s:%-5d graph@%p: submixId %llu, type PHASEMixerTypeAmbient, invalid generator channel count!";
        goto LABEL_32;
      }
      v27 = (char *)v11[13];
      v28 = (char *)v11[14];
LABEL_51:
      if (v27 == v28)
        goto LABEL_140;
      v37 = v27;
      while (!*((_QWORD *)v37 + 8))
      {
        v37 += 72;
        if (v37 == v28)
          goto LABEL_140;
      }
      break;
    case 1:
      v27 = (char *)v11[13];
      v28 = (char *)v11[14];
      if (v28 - v27 != 72)
      {
        v29 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(PlayStateTransitionStatus) + 80));
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          v30 = 0x8E38E38E38E38E39 * ((uint64_t)(v11[14] - v11[13]) >> 3);
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "DVMGraph.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 512;
          v98 = 2048;
          v99 = a1;
          v100 = 2048;
          v101 = v8;
          v102 = 2048;
          v103 = v30;
          v31 = "%25s:%-5d graph@%p: submixId %llu, type PHASEMixerTypeSpatial, invalid submix channel count (%lu)!";
LABEL_35:
          v33 = v29;
          v34 = 48;
          goto LABEL_36;
        }
        return 1;
      }
      break;
    default:
      v29 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(PlayStateTransitionStatus) + 80));
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        return 1;
      v36 = Phase::Controller::DVM::kSubmixTypeStrings[v11[11]];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 556;
      v98 = 2048;
      v99 = a1;
      v100 = 2048;
      v101 = v8;
      v102 = 2080;
      v103 = (unint64_t)v36;
      v31 = "%25s:%-5d graph@%p: submixId %llu invalid submix type %s!";
      goto LABEL_35;
  }
LABEL_57:
  if (v27 != v28)
  {
    v38 = v27;
    while (*(_QWORD *)v38 == *((_QWORD *)v38 + 1))
    {
      v38 += 72;
      if (v38 == v28)
        goto LABEL_61;
    }
    goto LABEL_62;
  }
LABEL_61:
  if (*a5 == v17)
  {
LABEL_140:
    Phase::Controller::DVM::VoiceGraph::SetSubmixPlayState((Phase::Controller::DVM::VoiceGraph *)a1, v8, v7, a4);
    return 0;
  }
LABEL_62:
  a1[11] |= 8uLL;
  if (v27 == v28)
    goto LABEL_134;
  v39 = 0;
  v89 = a5;
  do
  {
    v40 = (uint64_t **)&v27[72 * v39];
    __p = 0;
    v92 = 0;
    v93 = 0;
    std::vector<Phase::Controller::DVM::VoiceNode *>::__init_with_size[abi:ne180100]<Phase::Controller::DVM::VoiceNode **,Phase::Controller::DVM::VoiceNode **>(&__p, *v40, (uint64_t)v40[1], v40[1] - *v40);
    v40[1] = *v40;
    v42 = *a5;
    v41 = a5[1];
    if (*a5 != v41)
    {
      v43 = 0;
      v44 = 0x200000;
      while (1)
      {
        v45 = v43;
        VoiceNode = Phase::Controller::DVM::VoiceGraph::CreateOrGetVoiceNode(a1, *(_QWORD *)v42, *(_QWORD *)(*(_QWORD *)(v42 + 8) + 104 * v39), 6, v44, 0);
        v43 = (uint64_t)VoiceNode;
        if (!VoiceNode)
          break;
        Phase::Controller::DVM::VoiceNode::Configure((uint64_t)VoiceNode, *(_QWORD *)(v42 + 8), *(_QWORD *)(v42 + 16), v39, v44, 0);
        if (v45 && !Phase::Controller::DVM::VoiceNode::ConnectToNode(v45, v43))
          goto LABEL_137;
        v48 = v40[1];
        v47 = (unint64_t)v40[2];
        if ((unint64_t)v48 >= v47)
        {
          v50 = v48 - *v40;
          if ((unint64_t)(v50 + 1) >> 61)
            std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
          v51 = v47 - (_QWORD)*v40;
          v52 = v51 >> 2;
          if (v51 >> 2 <= (unint64_t)(v50 + 1))
            v52 = v50 + 1;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
            v53 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v53 = v52;
          if (v53)
            v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v40 + 2), v53);
          else
            v54 = 0;
          v55 = (uint64_t *)&v54[8 * v50];
          *v55 = v43;
          v49 = (char *)(v55 + 1);
          v57 = (char *)*v40;
          v56 = (char *)v40[1];
          if (v56 != (char *)*v40)
          {
            do
            {
              v58 = *((_QWORD *)v56 - 1);
              v56 -= 8;
              *--v55 = v58;
            }
            while (v56 != v57);
            v56 = (char *)*v40;
          }
          *v40 = v55;
          v40[1] = (uint64_t *)v49;
          v40[2] = (uint64_t *)&v54[8 * v53];
          if (v56)
            operator delete(v56);
        }
        else
        {
          *v48 = v43;
          v49 = (char *)(v48 + 1);
        }
        ++v44;
        v40[1] = (uint64_t *)v49;
        v42 += 32;
        if (v42 == v41)
          goto LABEL_86;
      }
      v87 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
      if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
      {
        v88 = Phase::Controller::DVM::kSubmixTypeStrings[v11[11]];
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "DVMGraph.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 589;
        v98 = 2048;
        v99 = a1;
        v100 = 2048;
        v101 = v95;
        v102 = 2080;
        v103 = (unint64_t)v88;
        _os_log_impl(&dword_2164CC000, v87, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: submixId %llu, type %s, failed creating or getting an effect voice node!", buf, 0x30u);
      }
LABEL_137:
      if (__p)
      {
        v92 = (Phase::Controller::DVM::VoiceGraph **)__p;
        operator delete(__p);
      }
      return 8;
    }
LABEL_86:
    if (__p != v92)
    {
      v59 = (_QWORD *)v11[18];
      if (v59)
      {
        v60 = *(_QWORD *)__p;
        while (1)
        {
          v61 = v59[4];
          if (!v61)
            break;
          v62 = *(unint64_t **)(v61 + 72);
          v63 = *(unint64_t **)(v61 + 80);
          while (v62 != v63)
          {
            v64 = v62[2];
            if (v62[1] == v64)
              v65 = v62;
            else
              v65 = (unint64_t *)(v64 - 8);
            Phase::Controller::DVM::VoiceNode::DisconnectFromNode(*v65, 0, v60);
            v62 += 4;
          }
          v59 = (_QWORD *)*v59;
          if (!v59)
            goto LABEL_97;
        }
LABEL_146:
        std::terminate();
      }
    }
LABEL_97:
    Phase::Controller::DVM::Submix::ChannelStrip::GetHeadNodes(v40, buf);
    if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
    {
      v67 = (_QWORD *)v11[18];
      for (i = v39; v67; v39 = i)
      {
        v68 = v67[4];
        if (!v68)
          goto LABEL_146;
        v69 = v11[11];
        if ((unint64_t)(v69 - 2) >= 2)
        {
          if (v69 != 1)
            __assert_rtn("ConfigureSubmix", "DVMGraph.mm", 659, "false");
          v75 = *(unint64_t **)(v68 + 72);
          v76 = *(unint64_t **)(v68 + 80);
          while (v75 != v76)
          {
            v77 = v75[2];
            if (v75[1] == v77)
              v78 = v75;
            else
              v78 = (unint64_t *)(v77 - 8);
            v80 = *(uint64_t **)buf;
            v79 = *(uint64_t **)&buf[8];
            if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
            {
              v81 = *v78;
              do
                Phase::Controller::DVM::VoiceNode::ConnectToNode(v81, *v80++);
              while (v80 != v79);
            }
            v75 += 4;
          }
        }
        else
        {
          v70 = (unint64_t *)(*(_QWORD *)(v68 + 72) + 32 * v39);
          v71 = v70[2];
          if (v70[1] != v71)
            v70 = (unint64_t *)(v71 - 8);
          v72 = *(uint64_t **)buf;
          v73 = *(uint64_t **)&buf[8];
          if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
          {
            v74 = *v70;
            do
              Phase::Controller::DVM::VoiceNode::ConnectToNode(v74, *v72++);
            while (v72 != v73);
          }
        }
        v67 = (_QWORD *)*v67;
      }
    }
    v82 = (Phase::Controller::DVM::VoiceGraph **)__p;
    v83 = v92;
    while (v82 != v83)
    {
      v84 = *v82;
      v86 = (Phase::Controller::DVM::VoiceGraph **)*v40;
      v85 = (Phase::Controller::DVM::VoiceGraph **)v40[1];
      while (v86 != v85)
      {
        if (*v86 == v84)
          goto LABEL_125;
        ++v86;
      }
      v86 = (Phase::Controller::DVM::VoiceGraph **)v40[1];
LABEL_125:
      if (v85 == v86)
        Phase::Controller::DVM::VoiceGraph::ScheduleRemoveVoice(v84, v66);
      ++v82;
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    a5 = v89;
    if (__p)
    {
      v92 = (Phase::Controller::DVM::VoiceGraph **)__p;
      operator delete(__p);
    }
    ++v39;
    v27 = (char *)v11[13];
  }
  while (0x8E38E38E38E38E39 * ((uint64_t)(v11[14] - (_QWORD)v27) >> 3) > v39);
  v8 = v95;
  v7 = v96;
LABEL_134:
  Phase::Controller::DVM::VoiceGraph::SetSubmixPlayState((Phase::Controller::DVM::VoiceGraph *)a1, v8, v7, a4);
  return 0;
}

void sub_21657D2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::DVM::VoiceGraph::GetPlayStateTransitionStatus(uint64_t result, int *a2, int a3)
{
  int v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  char *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)a2 + 4))
    return 0;
  v5 = *a2;
  if (*a2 == a3)
    return 8;
  v6 = result;
  if (v5 == 3)
  {
    if (a3 == 1)
      goto LABEL_13;
    return 2;
  }
  if (v5 == 2)
  {
    result = a3 == 3;
    if (a3 != 1)
      return result;
    goto LABEL_13;
  }
  if (v5 == 1 && a3 != 3)
    return 2;
LABEL_13:
  v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result) + 80));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)a2 + 4))
      v8 = Phase::Controller::DVM::kPlayStateStrings[*a2];
    else
      v8 = "none";
    v9 = Phase::Controller::DVM::kPlayStateStrings[a3];
    v10 = 136316162;
    v11 = "DVMGraph.mm";
    v12 = 1024;
    v13 = 2382;
    v14 = 2048;
    v15 = v6;
    v16 = 2080;
    v17 = v8;
    v18 = 2080;
    v19 = v9;
    _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d graph@%p: state change request %s to %s is invalid!", (uint8_t *)&v10, 0x30u);
  }
  return 4;
}

_DWORD *Phase::Controller::DVM::VoiceGraph::CreateOrGetVoiceNode(uint64_t *a1, unint64_t a2, unint64_t a3, int a4, int a5, uint64_t a6)
{
  _DWORD *VoiceNode;
  _DWORD *v12;
  NSObject *v13;
  void **v14;
  uint64_t *v15;
  uint64_t **v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD **v29;
  _QWORD *v30;
  int v31;
  unint64_t v32;
  BOOL v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  NSObject *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Phase::DspLayer::VoiceEngine *v44;
  Phase::Controller::VoicePoolRegistry *v45;
  int v46;
  _QWORD *VoicePoolInstance;
  NSObject *v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t **v62;
  unint64_t v63;
  int64_t v64;
  uint64_t *v65;
  _QWORD *v66;
  NSObject *v68;
  void **v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD **v74;
  int64_t v75;
  void *__p[2];
  __int128 v78;
  _BYTE buf[40];
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  VoiceNode = Phase::Controller::DVM::VoiceGraph::GetVoiceNode((Phase::Controller::DVM::VoiceGraph *)a1, a2, a3);
  if (VoiceNode)
  {
    v12 = VoiceNode;
    if ((VoiceNode[7] ^ a5) < 0x10000)
      return v12;
    v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)VoiceNode)
                                                                                        + 80)));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::DVM::VoiceNode::GetDescription((Phase::Controller::DVM::VoiceNode *)__p, v12);
      v14 = (SBYTE7(v78) & 0x80u) == 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2972;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = a1;
      *(_WORD *)&buf[28] = 2080;
      *(_QWORD *)&buf[30] = v14;
      *(_WORD *)&buf[38] = 1024;
      v80 = a5;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: Error: found an existing voicenode with a different base order %s (expected order = 0x%x)!", buf, 0x2Cu);
      if (SBYTE7(v78) < 0)
        operator delete(__p[0]);
    }

  }
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  v74 = (_QWORD **)(a1 + 66);
  v75 = a3;
  v15 = std::__tree<std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>,std::__map_value_compare<std::pair<unsigned long long,long long>,std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>,std::less<std::pair<unsigned long long,long long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>>>::find<std::pair<unsigned long long,long long>>((uint64_t)(a1 + 66), (unint64_t *)buf);
  v16 = (uint64_t **)(a1 + 67);
  if (a1 + 67 == v15 || (v17 = (_QWORD *)v15[6]) == 0)
  {
    v73 = a6;
    memset(buf, 0, 24);
    v18 = (uint64_t *)a1[61];
    if (v18 == a1 + 60)
    {
      v17 = 0;
      a6 = v73;
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = v18[2];
        if (*(_QWORD *)(v20 + 16) == a2)
        {
          if ((unint64_t)v19 >= *(_QWORD *)&buf[16])
          {
            v21 = ((uint64_t)v19 - *(_QWORD *)buf) >> 3;
            if ((unint64_t)(v21 + 1) >> 61)
              std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
            v22 = (uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2;
            if (v22 <= v21 + 1)
              v22 = v21 + 1;
            if (*(_QWORD *)&buf[16] - *(_QWORD *)buf >= 0x7FFFFFFFFFFFFFF8uLL)
              v23 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v23 = v22;
            if (v23)
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&buf[16], v23);
            else
              v24 = 0;
            v25 = &v24[8 * v21];
            *(_QWORD *)v25 = v20;
            v19 = v25 + 8;
            v27 = *(char **)buf;
            v26 = *(char **)&buf[8];
            if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
            {
              do
              {
                v28 = *((_QWORD *)v26 - 1);
                v26 -= 8;
                *((_QWORD *)v25 - 1) = v28;
                v25 -= 8;
              }
              while (v26 != v27);
              v26 = *(char **)buf;
            }
            *(_QWORD *)buf = v25;
            *(_QWORD *)&buf[8] = v19;
            *(_QWORD *)&buf[16] = &v24[8 * v23];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *v19++ = v20;
          }
          *(_QWORD *)&buf[8] = v19;
        }
        v18 = (uint64_t *)v18[1];
      }
      while (v18 != a1 + 60);
      if (*(_QWORD **)buf == v19)
      {
        v17 = 0;
        a6 = v73;
      }
      else
      {
        v29 = *(_QWORD ***)buf;
        a6 = v73;
        do
        {
          v17 = *v29;
          if (!*v29)
            goto LABEL_111;
          v30 = (_QWORD *)v17[6];
          if (v30)
          {
            v31 = -1;
            do
            {
              if (v31 <= *(_DWORD *)(v30[3] + 28))
                v31 = *(_DWORD *)(v30[3] + 28);
              v30 = (_QWORD *)*v30;
            }
            while (v30);
          }
          else
          {
            v31 = -1;
          }
          v32 = v17[7];
          if (!v32)
            goto LABEL_55;
          v33 = v31 < a5;
          v34 = (v31 ^ a5) >> 16;
          v35 = !v33 && v34 == 0;
          if (v35 && (a4 == 1 || v32 < *((int *)a1 + 12)))
            goto LABEL_55;
          ++v29;
        }
        while (v29 != v19);
        v17 = 0;
      }
LABEL_55:
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
    }
  }
  if (a4 == 1)
  {
    if (!v17)
    {
      v36 = *a1;
      v37 = (_QWORD *)a1[8];
      v17 = (_QWORD *)operator new();
      v17[1] = v36;
      v17[2] = a2;
      *((_DWORD *)v17 + 6) = 1;
      *((_OWORD *)v17 + 2) = 0u;
      *((_OWORD *)v17 + 3) = 0u;
      *((_DWORD *)v17 + 16) = 1065353216;
      *v17 = &off_24D57C018;
      v17[9] = v37;
      *((_OWORD *)v17 + 5) = 0u;
      *((_OWORD *)v17 + 6) = 0u;
      *((_DWORD *)v17 + 28) = 1065353216;
      *(_QWORD *)buf = a2;
      if (!std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v37, (unint64_t *)buf))
      {
        v38 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "DVMGraph.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 161;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = a2;
          _os_log_impl(&dword_2164CC000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not find an entry in the registry for procedure Id %llu", buf, 0x1Cu);
        }
      }
      v39 = operator new(0x18uLL);
      v39[1] = a1 + 60;
      v39[2] = v17;
      v40 = a1[60];
      *v39 = v40;
      *(_QWORD *)(v40 + 8) = v39;
      a1[60] = (uint64_t)v39;
      ++a1[62];
    }
    v41 = (*(uint64_t (**)(_QWORD *))(*v17 + 40))(v17);
    if (!v41 || !a6 || (v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 24))(a6)) == 0)
LABEL_111:
      std::terminate();
    v43 = Phase::Controller::DVM::ProcedureVoicePoolNode::AddVoice(v41, v75, *(_DWORD *)(v42 + 60), *(_QWORD *)(v42 + 64));
  }
  else
  {
    if (!v17)
    {
      v44 = (Phase::DspLayer::VoiceEngine *)*a1;
      v45 = (Phase::Controller::VoicePoolRegistry *)a1[7];
      v17 = (_QWORD *)operator new();
      v46 = *((_DWORD *)a1 + 12);
      v17[1] = v44;
      v17[2] = a2;
      *((_DWORD *)v17 + 6) = a4;
      *((_OWORD *)v17 + 2) = 0u;
      *((_OWORD *)v17 + 3) = 0u;
      *((_DWORD *)v17 + 16) = 1065353216;
      *v17 = &off_24D57BFC8;
      *((_DWORD *)v17 + 18) = v46;
      v17[10] = 0;
      VoicePoolInstance = Phase::Controller::VoicePoolRegistry::CreateVoicePoolInstance(v45, a2, v44, v46);
      if (!VoicePoolInstance)
      {
        v48 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          v49 = *((_DWORD *)v17 + 18);
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "DVMGraph.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 147;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = a2;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v49;
          _os_log_impl(&dword_2164CC000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not create a voicepool for Id %llu, max voice count %d", buf, 0x22u);
        }
      }
      v50 = v17[10];
      v17[10] = VoicePoolInstance;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      v51 = operator new(0x18uLL);
      v51[1] = a1 + 60;
      v51[2] = v17;
      v52 = a1[60];
      *v51 = v52;
      *(_QWORD *)(v52 + 8) = v51;
      a1[60] = (uint64_t)v51;
      ++a1[62];
      if (!(*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17))
      {
        v68 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                            + 80)));
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          Phase::Controller::DVM::VoicePoolNode::GetDescription((Phase::Controller::DVM::VoicePoolNode *)__p, (uint64_t)v17);
          v69 = (SBYTE7(v78) & 0x80u) == 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "DVMGraph.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3047;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = a1;
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = v69;
          *(_WORD *)&buf[38] = 1024;
          v80 = a3;
          _os_log_impl(&dword_2164CC000, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: Error: could not create a voicepool for %s [vid %d]", buf, 0x2Cu);
          if (SBYTE7(v78) < 0)
            operator delete(__p[0]);
        }

        v70 = (uint64_t *)a1[60];
        v71 = *v70;
        *(_QWORD *)(v71 + 8) = v70[1];
        *(_QWORD *)v70[1] = v71;
        --a1[62];
        v72 = v70[2];
        v70[2] = 0;
        if (v72)
          (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
        operator delete(v70);
        return 0;
      }
    }
    v43 = (*(uint64_t (**)(_QWORD *, unint64_t))(*v17 + 48))(v17, a3);
  }
  v12 = (_DWORD *)v43;
  if (!v43)
    goto LABEL_111;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v43 + 32))(__p, v43);
  *(_OWORD *)buf = *(_OWORD *)__p;
  *(_OWORD *)&buf[16] = v78;
  *(_QWORD *)&buf[32] = v17;
  v53 = a1 + 64;
  v54 = (_QWORD *)a1[64];
  if (v54)
  {
    while (1)
    {
      while (1)
      {
        v55 = v54;
        v56 = (uint64_t)(v54 + 4);
        if (!std::operator<[abi:ne180100]<std::pair<Phase::DspLayer::VoicePool *,long long>,std::pair<Phase::Controller::DVM::ProcedureBase *,long long>>((uint64_t)buf, (uint64_t)(v54 + 4)))break;
        v54 = (_QWORD *)*v55;
        v53 = v55;
        if (!*v55)
          goto LABEL_84;
      }
      if (!std::operator<[abi:ne180100]<std::pair<Phase::DspLayer::VoicePool *,long long>,std::pair<Phase::Controller::DVM::ProcedureBase *,long long>>(v56, (uint64_t)buf))break;
      v53 = v55 + 1;
      v54 = (_QWORD *)v55[1];
      if (!v54)
        goto LABEL_84;
    }
    if (*v53)
      goto LABEL_87;
  }
  else
  {
    v55 = a1 + 64;
  }
LABEL_84:
  v57 = operator new(0x48uLL);
  v58 = *(_OWORD *)&buf[16];
  v57[2] = *(_OWORD *)buf;
  v57[3] = v58;
  *((_QWORD *)v57 + 8) = *(_QWORD *)&buf[32];
  *(_QWORD *)v57 = 0;
  *((_QWORD *)v57 + 1) = 0;
  *((_QWORD *)v57 + 2) = v55;
  *v53 = v57;
  v59 = *(_QWORD *)a1[63];
  if (v59)
  {
    a1[63] = v59;
    v57 = (_OWORD *)*v53;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[64], (uint64_t *)v57);
  ++a1[65];
LABEL_87:
  v60 = v17[2];
  v61 = *v16;
  v62 = (uint64_t **)(a1 + 67);
  if (!*v16)
    goto LABEL_96;
  do
  {
    while (1)
    {
      v62 = (uint64_t **)v61;
      v63 = v61[4];
      if (v63 <= v60)
        break;
LABEL_89:
      v61 = *v62;
      v16 = v62;
      if (!*v62)
        goto LABEL_96;
    }
    if (v63 >= v60)
    {
      v64 = (int64_t)v62[5];
      if (v64 > v75)
        goto LABEL_89;
      if (v64 >= v75)
        return v12;
    }
    v61 = v62[1];
  }
  while (v61);
  v16 = v62 + 1;
LABEL_96:
  v65 = (uint64_t *)operator new(0x38uLL);
  v65[4] = v60;
  v65[5] = v75;
  v65[6] = (uint64_t)v17;
  *v65 = 0;
  v65[1] = 0;
  v65[2] = (uint64_t)v62;
  *v16 = v65;
  v66 = (_QWORD *)**v74;
  if (v66)
  {
    *v74 = v66;
    v65 = *v16;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[67], v65);
  ++a1[68];
  return v12;
}

void sub_21657DD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::DVM::VoiceNode::Configure(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  _QWORD *v10;
  char *v11;
  const void **v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  double *v51;
  int v52;

  if (0x4EC4EC4EC4EC4EC5 * ((a3 - a2) >> 3) <= (unint64_t)a4
    || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 104 * a4))
  {
    goto LABEL_49;
  }
  v10 = (_QWORD *)(a1 + 104);
  v11 = *(char **)(a1 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = (const void **)(a2 + 104 * a4 + 80);
  if ((const void **)(a1 + 104) != v12)
  {
    v13 = *v12;
    v14 = *(_BYTE **)(a2 + 104 * a4 + 88);
    v15 = v14 - (_BYTE *)*v12;
    v16 = v15 >> 4;
    v17 = *(_QWORD *)(a1 + 120);
    if (v15 >> 4 > (unint64_t)((v17 - (uint64_t)v11) >> 4))
    {
      if (v11)
      {
        operator delete(v11);
        v17 = 0;
        *v10 = 0;
        *(_QWORD *)(a1 + 112) = 0;
        *(_QWORD *)(a1 + 120) = 0;
      }
      if (v15 < 0)
        std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
      v18 = v17 >> 3;
      if (v17 >> 3 <= v16)
        v18 = v15 >> 4;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v19 = 0xFFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      std::vector<Phase::Controller::DspParameterPair>::__vallocate[abi:ne180100]((_QWORD *)(a1 + 104), v19);
      v11 = *(char **)(a1 + 112);
    }
    if (v14 != v13)
      memmove(v11, v13, v15);
    *(_QWORD *)(a1 + 112) = &v11[16 * v16];
  }
  v21 = *(_QWORD *)(a1 + 128);
  v20 = *(_QWORD *)(a1 + 136);
  if (v20 != v21)
  {
    do
    {
      v22 = v20 - 32;
      std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v20 - 24);
      v20 = v22;
    }
    while (v22 != v21);
  }
  *(_QWORD *)(a1 + 136) = v21;
  v23 = (uint64_t *)(a2 + 104 * a4 + 8);
  if ((uint64_t *)(a1 + 128) == v23)
    goto LABEL_34;
  v24 = *v23;
  v25 = *(_QWORD *)(a2 + 104 * a4 + 16);
  v26 = v25 - *v23;
  v27 = v26 >> 5;
  v28 = *(_QWORD *)(a1 + 128);
  if (v26 >> 5 > (unint64_t)((*(_QWORD *)(a1 + 144) - v28) >> 5))
  {
    std::vector<Phase::Controller::VoiceBufferParameter>::__vdeallocate((void **)(a1 + 128));
    if (v26 < 0)
      std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
    v29 = *(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 128);
    v30 = v29 >> 4;
    if (v29 >> 4 <= v27)
      v30 = v26 >> 5;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0)
      v31 = 0x7FFFFFFFFFFFFFFLL;
    else
      v31 = v30;
    std::vector<Phase::Controller::VoiceBufferParameter>::__vallocate[abi:ne180100]((_QWORD *)(a1 + 128), v31);
    v32 = a1 + 128;
    v33 = v24;
    v34 = v25;
    goto LABEL_30;
  }
  v35 = (v21 - v28) >> 5;
  if (v35 < v27)
  {
    v36 = v24 + 32 * v35;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,Phase::Controller::VoiceBufferParameter *,Phase::Controller::VoiceBufferParameter *,Phase::Controller::VoiceBufferParameter *,0>(v24, v36, v28);
    v32 = a1 + 128;
    v33 = v36;
    v34 = v25;
LABEL_30:
    std::vector<Phase::Controller::VoiceBufferParameter>::__construct_at_end<Phase::Controller::VoiceBufferParameter*,Phase::Controller::VoiceBufferParameter*>(v32, v33, v34);
    goto LABEL_34;
  }
  v37 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,Phase::Controller::VoiceBufferParameter *,Phase::Controller::VoiceBufferParameter *,Phase::Controller::VoiceBufferParameter *,0>(v24, *(_QWORD *)(a2 + 104 * a4 + 16), v28);
  v38 = *(_QWORD *)(a1 + 136);
  if (v38 != v37)
  {
    do
    {
      v39 = v38 - 32;
      std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v38 - 24);
      v38 = v39;
    }
    while (v39 != v37);
  }
  *(_QWORD *)(a1 + 136) = v37;
LABEL_34:
  v40 = (_QWORD *)(a2 + 104 * a4 + 32);
  v41 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  if (v41)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v41 >> 3) != (uint64_t)(*(_QWORD *)(a2 + 104 * a4 + 40) - *v40) >> 4)
      goto LABEL_49;
  }
  else
  {
    std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::resize((char **)(a1 + 32), (uint64_t)(*(_QWORD *)(a2 + 104 * a4 + 40) - *v40) >> 4);
  }
  v42 = (_QWORD *)(a2 + 104 * a4 + 56);
  v43 = *(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56);
  if (v43)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v43 >> 3) != (uint64_t)(*(_QWORD *)(a2 + 104 * a4 + 64) - *v42) >> 4)
      goto LABEL_49;
  }
  else
  {
    v45 = a2 + 104 * a4;
    v47 = *(_QWORD *)(v45 + 64);
    v46 = (_QWORD *)(v45 + 64);
    v48 = v47 - *v42;
    if (v47 != *v42)
    {
      std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::resize((char **)(a1 + 56), v48 >> 4);
      std::vector<Phase::Controller::DVM::VoiceNode::BusChannelPair>::resize((char **)(a1 + 80), (uint64_t)(*v46 - *v42) >> 4);
      if (*v46 != *v42)
      {
        v49 = (uint64_t)(*v46 - *v42) >> 4;
        if (v49 <= 1)
          v49 = 1;
        v50 = (_DWORD *)(*(_QWORD *)(a1 + 80) + 4);
        v51 = (double *)(*v42 + 8);
        do
        {
          v52 = *((_DWORD *)v51 - 2);
          *(v50 - 1) = (int)*v51;
          *v50 = v52;
          v50 += 2;
          v51 += 2;
          --v49;
        }
        while (v49);
      }
    }
  }
  if (a5 < 0)
LABEL_49:
    std::terminate();
  *(_DWORD *)(a1 + 28) = a5;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a6);
}

uint64_t Phase::Controller::DVM::VoiceNode::ConnectToNode(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  int v10;
  char v11;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3) >= 0xAAAAAAAAAAAAAAABLL
                                                                                             * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3))
    v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3);
  else
    v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  if (!v2)
    return 1;
  v5 = 0;
  LODWORD(v6) = 1;
  do
  {
    v8 = a2;
    v9 = v5;
    v10 = 1065353216;
    v11 = 1;
    v6 = v6 & Phase::Controller::DVM::VoiceNode::Connect(a1, 0, v5++, (uint64_t)&v8);
  }
  while (v2 != v5);
  return v6;
}

void Phase::Controller::DVM::VoiceNode::DisconnectFromNode(unint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD **v13;
  BOOL v14;
  _QWORD **v15;
  _QWORD *v16[2];

  if (a2)
    v3 = 32;
  else
    v3 = 56;
  if (a2)
    v4 = a1 + 32;
  else
    v4 = a1 + 56;
  v5 = *(_QWORD *)(a1 + v3);
  if (*(_QWORD *)(v4 + 8) != v5)
  {
    v9 = 0;
    v10 = 1;
    do
    {
      std::set<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::set[abi:ne180100]((uint64_t)&v15, v5 + 24 * v9);
      v11 = v15;
      if (v15 != v16)
      {
        do
        {
          if (v11[4] == a3)
            v10 &= Phase::Controller::DVM::VoiceNode::Disconnect(a1, a2, v9, (uint64_t)(v11 + 4));
          v12 = (_QWORD *)v11[1];
          if (v12)
          {
            do
            {
              v13 = (_QWORD **)v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (_QWORD **)v11[2];
              v14 = *v13 == v11;
              v11 = v13;
            }
            while (!v14);
          }
          v11 = v13;
        }
        while (v13 != v16);
      }
      std::__tree<Phase::SpatialCategory>::destroy((uint64_t)&v15, v16[0]);
      ++v9;
      v5 = *(_QWORD *)(a1 + v3);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v4 + 8) - v5) >> 3) > v9);
  }
}

void sub_21657E424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<Phase::SpatialCategory>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::DVM::VoiceGraph::ConfigureAmbientSubmix(_QWORD *a1, unint64_t a2, unint64_t a3, uint64_t *a4, _QWORD *a5)
{
  _QWORD *v7;
  Phase::Logger *Submix;
  Phase::Logger *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Phase::Logger *v16;
  Phase::Logger *v17;
  uint64_t v18;
  NSObject *v20;
  NSObject *v21;
  void **v22;
  NSObject *v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  NSObject *v27;
  unint64_t v28;
  NSObject *v29;
  unint64_t v30;
  uint64_t v31;
  void *__p[2];
  char v36;
  unsigned __int8 uu[8];
  unint64_t v38;
  _BYTE buf[18];
  __int16 v40;
  _QWORD *v41;
  __int16 v42;
  unint64_t v43;
  __int16 v44;
  unint64_t v45;
  __int16 v46;
  uint64_t v47;
  char out[48];
  uint64_t v49;
  UniqueObjectId v50;

  v49 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)uu = a2;
  v38 = a3;
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  v7 = a1 + 17;
  if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(a1 + 17, buf))
  {
    v50.mStorage[0] = a2;
    v50.mStorage[1] = a3;
    Submix = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::GetSubmix((Phase::Controller::DVM::VoiceGraph *)a1, v50);
    v9 = Submix;
    v10 = *((_QWORD *)Submix + 5);
    if ((v10 & 0xFF00000000) != 0)
    {
      v12 = *a4;
      v11 = a4[1];
      if (0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)Submix + 10) - *((_QWORD *)Submix + 9)) >> 3) != (v11 - *a4) >> 4)
      {
        v23 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(Submix) + 80));
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          return 1;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "DVMGraph.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 704;
        v40 = 2048;
        v41 = a1;
        v42 = 2048;
        v43 = a2;
        v24 = "%25s:%-5d graph@%p: invalid channel count for ambient submixId %llu!";
        v25 = v23;
        v26 = 38;
LABEL_24:
        _os_log_impl(&dword_2164CC000, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
        return 1;
      }
      if (v11 != v12)
      {
        v13 = 0;
        v14 = 0;
        v15 = 0;
        while (1)
        {
          *(_OWORD *)buf = *(_OWORD *)(v12 + v13);
          if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v7, buf))
          {
            v27 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
            if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
              return 1;
            v28 = *(_QWORD *)(v12 + v13);
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "DVMGraph.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 720;
            v40 = 2048;
            v41 = a1;
            v42 = 2048;
            v43 = v28;
            v44 = 2048;
            v45 = a2;
            v24 = "%25s:%-5d graph@%p: unregistered child submix %llu for ambient submixId %llu!";
            v25 = v27;
            v26 = 48;
            goto LABEL_24;
          }
          v16 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::GetSubmix((Phase::Controller::DVM::VoiceGraph *)a1, *(UniqueObjectId *)(v12 + v13));
          v17 = v16;
          if (*((_QWORD *)v16 + 8))
            break;
          *((_QWORD *)v16 + 8) = v9;
          v18 = *((_QWORD *)v9 + 9) + v14;
          *(_OWORD *)(v18 + 48) = *(_OWORD *)(v12 + v13);
          *(_QWORD *)(v18 + 64) = v16;
          ++v15;
          v12 = *a4;
          v14 += 72;
          v13 += 16;
          if (v15 >= (a4[1] - *a4) >> 4)
          {
            v10 = *((_QWORD *)v9 + 5);
            goto LABEL_10;
          }
        }
        v29 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v16) + 80));
        if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          return 1;
        v30 = *(_QWORD *)(v12 + v13);
        v31 = *((_QWORD *)v17 + 8);
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "DVMGraph.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 727;
        v40 = 2048;
        v41 = a1;
        v42 = 2048;
        v43 = v30;
        v44 = 2048;
        v45 = a2;
        v46 = 2048;
        v47 = v31;
        v24 = "%25s:%-5d graph@%p: child submix %llu for ambient submixId %llu already has parent %p!";
        v25 = v29;
        v26 = 58;
        goto LABEL_24;
      }
LABEL_10:
      if ((v10 & 0xFF00000000) == 0)
        std::__throw_bad_optional_access[abi:ne180100]();
      return Phase::Controller::DVM::VoiceGraph::ConfigureSubmix(a1, a2, a3, v10, a5);
    }
    else
    {
      v21 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(Submix)
                                                                                          + 80)));
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        memset(out, 0, 37);
        uuid_unparse(uu, out);
        std::string::basic_string[abi:ne180100]<0>(__p, out);
        v22 = v36 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "DVMGraph.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 696;
        v40 = 2048;
        v41 = a1;
        v42 = 2080;
        v43 = (unint64_t)v22;
        _os_log_impl(&dword_2164CC000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: trying to configure an ambient submix with unconfigured parent submixId %s!", buf, 0x26u);
        if (v36 < 0)
          operator delete(__p[0]);
      }

      return 7;
    }
  }
  else
  {
    v20 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 685;
      v40 = 2048;
      v41 = a1;
      v42 = 2048;
      v43 = a2;
      _os_log_impl(&dword_2164CC000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: ambient submix with submixId %llu was not registered!", buf, 0x26u);
    }
    return 4;
  }
}

void sub_21657E8FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::DVM::VoiceGraph::AddGenerator(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6;
  uint64_t *v12;
  Phase::Logger *v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  const char *v18;
  uint64_t result;
  Phase::Logger *v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  NSObject *v26;
  _QWORD *v27;
  _QWORD *i;
  unint64_t v29;
  _QWORD *v31;
  __int128 v32;
  float v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE buf[18];
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  _BYTE v50[24];
  __int16 v51;
  const char *v52;
  __int16 v53;
  const char *v54;
  uint64_t v55;

  v6 = a6;
  v55 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v43 = a3;
  *((_QWORD *)&v43 + 1) = a4;
  *(_QWORD *)&v42 = a5;
  *((_QWORD *)&v42 + 1) = a6;
  *(_QWORD *)buf = a3;
  *(_QWORD *)&buf[8] = a4;
  v12 = (uint64_t *)(a1 + 96);
  v13 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 96), buf);
  if (v13
    || (*(_QWORD *)buf = a5,
        *(_QWORD *)&buf[8] = v6,
        (v13 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 136), buf)) == 0))
  {
    v14 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v13)
                                                                                        + 80)));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v44 = a3;
      v45 = a4;
      v15 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v12, &v44);
      v44 = a5;
      v45 = v6;
      v16 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 136), &v44);
      v17 = "generatorId already exists,";
      *(_DWORD *)buf = 136316930;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 748;
      if (!v15)
        v17 = "";
      v47 = 2048;
      v48 = a1;
      v49 = 1024;
      if (v16)
        v18 = "";
      else
        v18 = "submixId does not exist";
      *(_DWORD *)v50 = a2;
      *(_WORD *)&v50[4] = 2048;
      *(_QWORD *)&v50[6] = a3;
      *(_WORD *)&v50[14] = 2048;
      *(_QWORD *)&v50[16] = a5;
      v51 = 2080;
      v52 = v17;
      v53 = 2080;
      v54 = v18;
      _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: generatorType %d, generatorId %llu, submixId %llu: %s%s!", buf, 0x4Au);
    }

    return 3;
  }
  else
  {
    v20 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 136), &v42);
    if ((*((_QWORD *)v20 + 9) & 0xFF00000000) == 0 || *((_QWORD *)v20 + 9) != 0)
    {
      Phase::Controller::DVM::Submix::AddGenerator((uint64_t)v20 + 32, a2, a3, a4);
      v22 = 0;
      v23 = 0xCBF29CE484222325;
      do
        v23 = 0x100000001B3 * (v23 ^ *((char *)&v43 + v22++));
      while (v22 != 16);
      v24 = *(_QWORD *)(a1 + 104);
      if (v24)
      {
        v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          v6 = v23;
          if (v23 >= v24)
            v6 = v23 % v24;
        }
        else
        {
          v6 = (v24 - 1) & v23;
        }
        v27 = *(_QWORD **)(*v12 + 8 * v6);
        if (v27)
        {
          for (i = (_QWORD *)*v27; i; i = (_QWORD *)*i)
          {
            v29 = i[1];
            if (v29 == v23)
            {
              if (i[2] == a3 && i[3] == a4)
                return 0;
            }
            else
            {
              if (v25.u32[0] > 1uLL)
              {
                if (v29 >= v24)
                  v29 %= v24;
              }
              else
              {
                v29 &= v24 - 1;
              }
              if (v29 != v6)
                break;
            }
          }
        }
      }
      v31 = operator new(0x30uLL);
      *v31 = 0;
      v31[1] = v23;
      v32 = v42;
      v33 = (float)(unint64_t)(*(_QWORD *)(a1 + 120) + 1);
      *((_OWORD *)v31 + 1) = v43;
      *((_OWORD *)v31 + 2) = v32;
      v34 = *(float *)(a1 + 128);
      if ((((float)(v34 * (float)v24) >= v33) & ~(v24 == 0)) == 0)
      {
        v35 = 1;
        if (v24 >= 3)
          v35 = (v24 & (v24 - 1)) != 0;
        v36 = v35 | (2 * v24);
        v37 = vcvtps_u32_f32(v33 / v34);
        if (v36 <= v37)
          v38 = v37;
        else
          v38 = v36;
        std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>((uint64_t)v12, v38);
        v24 = *(_QWORD *)(a1 + 104);
        if ((v24 & (v24 - 1)) != 0)
        {
          if (v23 >= v24)
            v6 = v23 % v24;
          else
            v6 = v23;
        }
        else
        {
          v6 = (v24 - 1) & v23;
        }
      }
      v39 = *v12;
      v40 = *(_QWORD **)(*v12 + 8 * v6);
      if (v40)
      {
        *v31 = *v40;
      }
      else
      {
        *v31 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v31;
        *(_QWORD *)(v39 + 8 * v6) = a1 + 112;
        if (!*v31)
        {
LABEL_61:
          result = 0;
          ++*(_QWORD *)(a1 + 120);
          return result;
        }
        v41 = *(_QWORD *)(*v31 + 8);
        if ((v24 & (v24 - 1)) != 0)
        {
          if (v41 >= v24)
            v41 %= v24;
        }
        else
        {
          v41 &= v24 - 1;
        }
        v40 = (_QWORD *)(*v12 + 8 * v41);
      }
      *v40 = v31;
      goto LABEL_61;
    }
    v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v20) + 80));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 760;
      v47 = 2048;
      v48 = a1;
      v49 = 2048;
      *(_QWORD *)v50 = a3;
      *(_WORD *)&v50[8] = 2048;
      *(_QWORD *)&v50[10] = a5;
      _os_log_impl(&dword_2164CC000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: can't add a generatorId %llu, to a submixId %llu that is stopping!!", buf, 0x30u);
    }
    return 7;
  }
}

void sub_21657EDA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *Phase::Controller::DVM::VoiceGraph::GetSubmixForGenerator(Phase::Controller::DVM::VoiceGraph *this, UniqueObjectId a2)
{
  _QWORD *v3;
  _QWORD *v4;
  UniqueObjectId v6;
  UniqueObjectId v7;
  UniqueObjectId v8;

  v7 = a2;
  v8 = a2;
  v3 = (_QWORD *)((char *)this + 96);
  if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)this + 12, &v8))__assert_rtn("GetSubmixForGenerator", "DVMGraph.hpp", 335, "GeneratorIdExists(generatorId)");
  v6 = (UniqueObjectId)*((_OWORD *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v3, &v7)+ 2);
  v8 = v6;
  v4 = (_QWORD *)((char *)this + 136);
  if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v4, &v8))std::terminate();
  return std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v4, &v6)+ 4;
}

_QWORD *Phase::Controller::DVM::VoiceGraph::RemoveGenerator(Phase::Controller::DVM::VoiceGraph *a1, unint64_t a2, unint64_t a3)
{
  _QWORD *result;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)a1 + 12, v7);
  if (result)
    return (_QWORD *)Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(a1, a2, a3, 0);
  return result;
}

uint64_t Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(Phase::Controller::DVM::VoiceGraph *a1, unint64_t a2, unint64_t a3, int a4)
{
  int v6;
  NSObject *v8;
  char *v9;
  uint64_t *v10;
  float v11;
  unint64_t *v12;
  double v13;
  double v14;
  char **v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  char **VoiceNode;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  BOOL v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t Generator;
  unint64_t *v65;
  void **v68;
  _BYTE buf[28];
  __int16 v70;
  char *v71;
  __int16 v72;
  unint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)a1 + 12, buf))
  {
    Generator = Phase::Controller::DVM::VoiceGraph::GetGenerator(a1, a2, a3);
    v6 = Phase::Controller::DVM::VoiceGraph::PreprocessPlayStateChange((uint64_t)a1, Generator, a4);
    if (v6 != 8)
    {
      if (v6 == 4)
        return 1;
      v10 = (uint64_t *)a1;
      *((_QWORD *)a1 + 11) |= 8uLL;
      v11 = 0.0;
      if ((v6 - 1) <= 1u)
      {
        v11 = v6 == 2 ? 0.001 : 0.0;
        v12 = *(unint64_t **)(Generator + 72);
        v65 = *(unint64_t **)(Generator + 80);
        if (v12 != v65)
        {
          if (v6 == 1)
            v13 = 1.0;
          else
            v13 = 0.0;
          if (v6 == 1)
            v14 = 0.0;
          else
            v14 = 1.0;
          do
          {
            v15 = (char **)(v12 + 1);
            v16 = v12[2];
            if (v12[1] == v16)
              v17 = v12;
            else
              v17 = (unint64_t *)(v16 - 8);
            v18 = *v17;
            if (*(_DWORD *)(*v17 + 24) == 2)
            {
              v19 = *v17;
            }
            else
            {
              v20 = *(_DWORD *)(v18 + 28);
              v21 = (unint64_t *)v10[10];
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 + 1, v21));
              VoiceNode = (char **)Phase::Controller::DVM::VoiceGraph::CreateOrGetVoiceNode(v10, 0xF57EBABD1FFDD056, v22, 2, v20 + 1, 0);
              v19 = (unint64_t)VoiceNode;
              if (!VoiceNode
                || (std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::resize(VoiceNode + 4, 1uLL),
                    std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::resize((char **)(v19 + 56), 1uLL),
                    std::vector<Phase::Controller::DVM::VoiceNode::BusChannelPair>::resize((char **)(v19 + 80), 1uLL),
                    **(_QWORD **)(v19 + 80) = 1,
                    v20 <= -2))
              {
                std::terminate();
              }
              *(_DWORD *)(v19 + 28) = v20 + 1;
              memset(buf, 0, 24);
              std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::__init_with_size[abi:ne180100]<Phase::Controller::DVM::VoiceNode::IOChannel*,Phase::Controller::DVM::VoiceNode::IOChannel*>(buf, *(_QWORD *)(v18 + 56), *(_QWORD *)(v18 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v18 + 64) - *(_QWORD *)(v18 + 56)) >> 3));
              Phase::Controller::DVM::VoiceNode::Disconnect(v18, 0);
              v10 = (uint64_t *)a1;
              Phase::Controller::DVM::VoiceNode::ConnectToNode(v18, v19);
              v25 = *(_QWORD *)buf;
              v24 = *(_QWORD *)&buf[8];
              if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
              {
                v26 = 0;
                do
                {
                  v27 = (_QWORD *)(v25 + 24 * v26);
                  v30 = (_QWORD *)*v27;
                  v28 = v27 + 1;
                  v29 = v30;
                  if (v30 != v28)
                  {
                    do
                    {
                      Phase::Controller::DVM::VoiceNode::Connect(v19, 0, v26, (uint64_t)(v29 + 4));
                      v31 = (_QWORD *)v29[1];
                      if (v31)
                      {
                        do
                        {
                          v32 = v31;
                          v31 = (_QWORD *)*v31;
                        }
                        while (v31);
                      }
                      else
                      {
                        do
                        {
                          v32 = (_QWORD *)v29[2];
                          v33 = *v32 == (_QWORD)v29;
                          v29 = v32;
                        }
                        while (!v33);
                      }
                      v29 = v32;
                    }
                    while (v32 != v28);
                    v25 = *(_QWORD *)buf;
                    v24 = *(_QWORD *)&buf[8];
                  }
                  ++v26;
                }
                while (0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 3) > v26);
              }
              v34 = v12[3];
              v35 = (unint64_t *)v12[2];
              if ((unint64_t)v35 >= v34)
              {
                v37 = ((char *)v35 - *v15) >> 3;
                if ((unint64_t)(v37 + 1) >> 61)
                  std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
                v38 = v34 - (_QWORD)*v15;
                v39 = v38 >> 2;
                if (v38 >> 2 <= (unint64_t)(v37 + 1))
                  v39 = v37 + 1;
                if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                  v40 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v40 = v39;
                if (v40)
                  v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v12 + 3), v40);
                else
                  v41 = 0;
                v42 = (unint64_t *)&v41[8 * v37];
                *v42 = v19;
                v36 = v42 + 1;
                v44 = (char *)v12[1];
                v43 = (char *)v12[2];
                if (v43 != v44)
                {
                  do
                  {
                    v45 = *((_QWORD *)v43 - 1);
                    v43 -= 8;
                    *--v42 = v45;
                  }
                  while (v43 != v44);
                  v43 = *v15;
                }
                v12[1] = (unint64_t)v42;
                v12[2] = (unint64_t)v36;
                v12[3] = (unint64_t)&v41[8 * v40];
                if (v43)
                  operator delete(v43);
              }
              else
              {
                *v35 = v19;
                v36 = v35 + 1;
              }
              v12[2] = (unint64_t)v36;
              Phase::Controller::DVM::VoiceGraph::SchedulePlayStateChange((uint64_t)a1, (_QWORD *)v19, 1);
              if (a4 == 3)
                Phase::Controller::DVM::VoiceGraph::SchedulePlayStateChange((uint64_t)a1, (_QWORD *)v19, 2);
              v68 = (void **)buf;
              std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::__destroy_vector::operator()[abi:ne180100](&v68);
            }
            v47 = *(_QWORD *)(v19 + 104);
            v46 = *(_QWORD *)(v19 + 112);
            v48 = v46 - v47;
            if ((unint64_t)(v46 - v47) > 0x2F)
            {
              if (v48 != 48)
                *(_QWORD *)(v19 + 112) = v47 + 48;
            }
            else
            {
              v49 = 3 - (v48 >> 4);
              v50 = *(_QWORD *)(v19 + 120);
              if (v49 <= (v50 - v46) >> 4)
              {
                v62 = v46 + 16 * v49;
                do
                {
                  *(_DWORD *)v46 = 0x7FFFFFFF;
                  *(_QWORD *)(v46 + 8) = 0x7FEFFFFFFFFFFFFFLL;
                  v46 += 16;
                }
                while (v46 != v62);
                *(_QWORD *)(v19 + 112) = v62;
              }
              else
              {
                v51 = v50 - v47;
                v52 = (v50 - v47) >> 3;
                if (v52 <= 3)
                  v52 = 3;
                if (v51 >= 0x7FFFFFFFFFFFFFF0)
                  v53 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v53 = v52;
                v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>(v19 + 120, v53);
                v56 = (v48 >> 4) - 3;
                v57 = &v54[16 * (v48 >> 4) + 8];
                do
                {
                  *((_DWORD *)v57 - 2) = 0x7FFFFFFF;
                  *(_QWORD *)v57 = 0x7FEFFFFFFFFFFFFFLL;
                  v57 += 16;
                }
                while (!__CFADD__(v56++, 1));
                v59 = &v54[16 * (v48 >> 4)];
                v61 = *(char **)(v19 + 104);
                v60 = *(char **)(v19 + 112);
                if (v60 != v61)
                {
                  do
                  {
                    *((_OWORD *)v59 - 1) = *((_OWORD *)v60 - 1);
                    v59 -= 16;
                    v60 -= 16;
                  }
                  while (v60 != v61);
                  v60 = *(char **)(v19 + 104);
                }
                v10 = (uint64_t *)a1;
                *(_QWORD *)(v19 + 104) = v59;
                *(_QWORD *)(v19 + 112) = v54 + 48;
                *(_QWORD *)(v19 + 120) = &v54[16 * v55];
                if (v60)
                  operator delete(v60);
              }
            }
            v63 = *(_QWORD *)(v19 + 104);
            *(_DWORD *)v63 = 0;
            *(_QWORD *)(v63 + 8) = 0x3F50624DE0000000;
            *(_DWORD *)(v63 + 16) = 1;
            *(double *)(v63 + 24) = v14;
            *(_DWORD *)(v63 + 32) = 2;
            *(double *)(v63 + 40) = v13;
            v12 += 4;
          }
          while (v12 != v65);
        }
      }
      Phase::Controller::DVM::VoiceGraph::SchedulePlayStateChange(v10, Generator, a4, v11);
    }
    return 0;
  }
  else
  {
    v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = Phase::Controller::DVM::kPlayStateStrings[a4];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2395;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = a1;
      v70 = 2080;
      v71 = v9;
      v72 = 2048;
      v73 = a2;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: state change request %s, generatorId %llu does not exist!", buf, 0x30u);
    }
    return 3;
  }
}

void sub_21657F494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, char a15)
{
  a14 = (void **)&a15;
  std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::DVM::VoiceGraph::ConfigureGeneratorWithRenderCallback(uint64_t a1, unint64_t a2, unint64_t a3, int a4, char *a5, uint64_t *a6, uint64_t a7)
{
  Phase::Logger *v7;
  NSObject *v8;
  int v9;
  char *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  NSObject *v14;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t Generator;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *i;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  void *v35;
  NSObject *v36;
  int v37;
  NSObject *v39;
  int v40;
  int v41;
  char *v42;
  void *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  _DWORD *VoiceNode;
  unint64_t *v49;
  const void **v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  _DWORD *v62;
  Phase::Logger *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  Phase::Controller::DVM::VoiceGraph **v73;
  Phase::Controller::DVM::VoiceGraph **v74;
  Phase::Controller::DVM::VoiceGraph *v75;
  uint64_t v76;
  Phase::Controller::DVM::VoiceGraph **j;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t **v81;
  NSObject *v82;
  char *v83;
  int v84;
  char *v85;
  char v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  void *v91;
  uint64_t *k;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t **v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t **v114;
  uint64_t **v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  Phase::Logger *v122;
  char v123;
  int v124;
  unint64_t *SubmixForGenerator;
  unint64_t *v126;
  void *__p;
  Phase::Controller::DVM::VoiceGraph **v135;
  uint64_t v136;
  _BYTE buf[18];
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  _BYTE v141[14];
  __int16 v142;
  _BYTE v143[18];
  uint64_t v144;
  UniqueObjectId v145;

  v144 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  v7 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 96), buf);
  if (v7)
  {
    if ((a4 - 3) <= 0xFFFFFFFD)
    {
      v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7) + 80));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v9 = a5[40];
        v10 = Phase::Controller::DVM::kPlayStateStrings[a4];
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "DVMGraph.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 876;
        v138 = 2048;
        v139 = a1;
        v140 = 1024;
        *(_DWORD *)v141 = v9;
        *(_WORD *)&v141[4] = 2048;
        *(_QWORD *)&v141[6] = a2;
        v142 = 2080;
        *(_QWORD *)v143 = v10;
        v11 = "%25s:%-5d graph@%p: generatorType %d, generatorId %llu invalid play state %s!";
        v12 = v8;
        v13 = 54;
LABEL_37:
        _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
        return 1;
      }
      return 1;
    }
    if (a5[40] == 1)
    {
      v7 = (Phase::Logger *)(*(uint64_t (**)(char *))(*(_QWORD *)a5 + 24))(a5);
      if (v7 && *((_BYTE *)v7 + 56))
      {
        v124 = 1;
LABEL_15:
        if (a7)
        {
          v16 = (unsigned __int8 *)(*(uint64_t (**)(char *))(*(_QWORD *)a5 + 16))(a5);
          v17 = v16;
          if (a5[40] || !v16 || v16[56] - 1 >= 4)
          {
            v39 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v16) + 80));
            if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
              return 1;
            v40 = a5[40];
            if (v17)
              v41 = (char)v17[56];
            else
              v41 = -1;
            v44 = Phase::Controller::DVM::kPlayStateStrings[a4];
            *(_DWORD *)buf = 136316674;
            *(_QWORD *)&buf[4] = "DVMGraph.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 924;
            v138 = 2048;
            v139 = a1;
            v140 = 1024;
            *(_DWORD *)v141 = v40;
            *(_WORD *)&v141[4] = 2048;
            *(_QWORD *)&v141[6] = a2;
            v142 = 1024;
            *(_DWORD *)v143 = v41;
            *(_WORD *)&v143[4] = 2080;
            *(_QWORD *)&v143[6] = v44;
            v11 = "%25s:%-5d graph@%p: generatorType %d, generatorId %llu, sampler type %d, play state %s - render callba"
                  "ck is only supported on streaming samplers!";
            v12 = v39;
            v13 = 60;
            goto LABEL_37;
          }
        }
        *(_QWORD *)(a1 + 88) |= 8uLL;
        v145.mStorage[0] = a2;
        v145.mStorage[1] = a3;
        SubmixForGenerator = Phase::Controller::DVM::VoiceGraph::GetSubmixForGenerator((Phase::Controller::DVM::VoiceGraph *)a1, v145);
        Generator = Phase::Controller::DVM::VoiceGraph::GetGenerator((Phase::Controller::DVM::VoiceGraph *)a1, a2, a3);
        v19 = Generator;
        v20 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)a5 + 3) - *((_QWORD *)a5 + 2)) >> 3);
        v21 = *(char **)(Generator + 72);
        v22 = *(char **)(Generator + 80);
        v23 = (v22 - v21) >> 5;
        if (v20 <= v23)
        {
          i = (uint64_t *)a1;
          if (v20 < v23)
          {
            v42 = &v21[0xD89D89D89D89D8A0 * ((uint64_t)(*((_QWORD *)a5 + 3) - *((_QWORD *)a5 + 2)) >> 3)];
            while (v22 != v42)
            {
              v43 = (void *)*((_QWORD *)v22 - 3);
              if (v43)
              {
                *((_QWORD *)v22 - 2) = v43;
                operator delete(v43);
              }
              v22 -= 32;
            }
            *(_QWORD *)(v19 + 80) = v42;
          }
        }
        else
        {
          v24 = v20 - v23;
          v25 = *(_QWORD *)(Generator + 88);
          i = (uint64_t *)a1;
          if (v20 - v23 <= (v25 - (uint64_t)v22) >> 5)
          {
            bzero(*(void **)(Generator + 80), 32 * v24);
            *(_QWORD *)(v19 + 80) = &v22[32 * v24];
          }
          else
          {
            if (v20 >> 59)
              std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
            v27 = v25 - (_QWORD)v21;
            if (v27 >> 4 > v20)
              v20 = v27 >> 4;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
              v28 = 0x7FFFFFFFFFFFFFFLL;
            else
              v28 = v20;
            if (v28 >> 59)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v29 = (char *)operator new(32 * v28);
            v30 = &v29[32 * v23];
            v31 = &v29[32 * v28];
            bzero(v30, 32 * v24);
            v32 = &v30[32 * v24];
            if (v22 == v21)
            {
              *(_QWORD *)(v19 + 72) = v30;
              *(_QWORD *)(v19 + 80) = v32;
              *(_QWORD *)(v19 + 88) = v31;
              i = (uint64_t *)a1;
            }
            else
            {
              do
              {
                v33 = *((_OWORD *)v22 - 2);
                v22 -= 32;
                *((_OWORD *)v30 - 2) = v33;
                v30 -= 32;
                *((_QWORD *)v30 + 2) = *((_QWORD *)v22 + 2);
                *((_QWORD *)v30 + 3) = *((_QWORD *)v22 + 3);
                *((_QWORD *)v22 + 1) = 0;
                *((_QWORD *)v22 + 2) = 0;
                *((_QWORD *)v22 + 3) = 0;
              }
              while (v22 != v21);
              v22 = *(char **)(v19 + 72);
              v34 = *(char **)(v19 + 80);
              *(_QWORD *)(v19 + 72) = v30;
              *(_QWORD *)(v19 + 80) = v32;
              *(_QWORD *)(v19 + 88) = v31;
              for (i = (uint64_t *)a1; v34 != v22; v34 -= 32)
              {
                v35 = (void *)*((_QWORD *)v34 - 3);
                if (v35)
                {
                  *((_QWORD *)v34 - 2) = v35;
                  operator delete(v35);
                }
              }
            }
            if (v22)
              operator delete(v22);
          }
        }
        v45 = *(_QWORD *)(v19 + 72);
        if (*(_QWORD *)(v19 + 80) != v45)
        {
          v46 = 0;
          v47 = 0x100000;
          v123 = 1;
          while (1)
          {
            VoiceNode = Phase::Controller::DVM::VoiceGraph::CreateOrGetVoiceNode(i, *((_QWORD *)a5 + 1), *(_QWORD *)(*((_QWORD *)a5 + 2) + 104 * v46), v124, 0x100000, (uint64_t)a5);
            Phase::Controller::DVM::VoiceNode::Configure((uint64_t)VoiceNode, *((_QWORD *)a5 + 2), *((_QWORD *)a5 + 3), v46, v47, a7);
            v49 = (unint64_t *)(v45 + 32 * v46);
            v50 = (const void **)(v49 + 1);
            v52 = (uint64_t *)(v49 + 2);
            v51 = v49[2];
            if (v49[1] == v51)
              v53 = (unint64_t *)(v45 + 32 * v46);
            else
              v53 = (unint64_t *)(v51 - 8);
            if (*v53)
              Phase::Controller::DVM::VoiceNode::Disconnect(*v53, 0);
            v54 = *v49;
            if (*v49 && (_DWORD *)v54 != VoiceNode)
            {
              Phase::Controller::DVM::VoiceNode::Disconnect(*v49, 1);
              Phase::Controller::DVM::VoiceNode::Disconnect(v54, 0);
            }
            *v49 = (unint64_t)VoiceNode;
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v19 + 48))(v19, a5);
            __p = 0;
            v135 = 0;
            v136 = 0;
            std::vector<Phase::Controller::DVM::VoiceNode *>::__init_with_size[abi:ne180100]<Phase::Controller::DVM::VoiceNode **,Phase::Controller::DVM::VoiceNode **>(&__p, *v50, *v52, (*v52 - (uint64_t)*v50) >> 3);
            v126 = (unint64_t *)(v45 + 32 * v46);
            v56 = (char *)*v50;
            *v52 = (uint64_t)*v50;
            v57 = *a6;
            v58 = a6[1];
            if (*a6 == v58)
              break;
            v59 = (_QWORD *)(v45 + 32 * v46 + 24);
            while (1)
            {
              v60 = *(_QWORD *)(v57 + 8);
              if (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v57 + 16) - v60) >> 3) != (uint64_t)(*(_QWORD *)(v19 + 80)
                                                                                          - *(_QWORD *)(v19 + 72)) >> 5)
                goto LABEL_163;
              v61 = (unint64_t)VoiceNode;
              v62 = Phase::Controller::DVM::VoiceGraph::CreateOrGetVoiceNode((uint64_t *)a1, *(_QWORD *)v57, *(_QWORD *)(v60 + 104 * v46), 6, v47, 0);
              VoiceNode = v62;
              if (!v62)
                goto LABEL_108;
              Phase::Controller::DVM::VoiceNode::Configure((uint64_t)v62, *(_QWORD *)(v57 + 8), *(_QWORD *)(v57 + 16), v46, v47, 0);
              v63 = (Phase::Logger *)Phase::Controller::DVM::VoiceNode::ConnectToNode(v61, (uint64_t)VoiceNode);
              ++v47;
              if (!(_DWORD)v63)
                break;
              v64 = (char *)*v52;
              if ((unint64_t)*v52 >= *v59)
              {
                v65 = (v64 - (_BYTE *)*v50) >> 3;
                if ((unint64_t)(v65 + 1) >> 61)
                  std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
                v66 = *v59 - (_QWORD)*v50;
                v67 = v66 >> 2;
                if (v66 >> 2 <= (unint64_t)(v65 + 1))
                  v67 = v65 + 1;
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
                  v55 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v55 = v67;
                if (v55)
                  v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v59, v55);
                else
                  v68 = 0;
                v69 = &v68[8 * v65];
                *(_QWORD *)v69 = VoiceNode;
                v56 = v69 + 8;
                v70 = (char *)*v52;
                v71 = (char *)*v50;
                if ((const void *)*v52 != *v50)
                {
                  do
                  {
                    v72 = *((_QWORD *)v70 - 1);
                    v70 -= 8;
                    *((_QWORD *)v69 - 1) = v72;
                    v69 -= 8;
                  }
                  while (v70 != v71);
                  v70 = (char *)*v50;
                }
                *v50 = v69;
                *v52 = (uint64_t)v56;
                *v59 = &v68[8 * v55];
                if (v70)
                  operator delete(v70);
              }
              else
              {
                *(_QWORD *)v64 = VoiceNode;
                v56 = v64 + 8;
              }
              *v52 = (uint64_t)v56;
              v57 += 32;
              if (v57 == v58)
                goto LABEL_88;
            }
            v82 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v63) + 80));
            if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
            {
              v83 = Phase::Controller::DVM::kVoiceTypeStrings[*(int *)(v61 + 24)];
              v84 = a5[40];
              v85 = Phase::Controller::DVM::kVoiceTypeStrings[VoiceNode[6]];
              *(_DWORD *)buf = 136316674;
              *(_QWORD *)&buf[4] = "DVMGraph.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1001;
              v138 = 2048;
              i = (uint64_t *)a1;
              v139 = a1;
              v140 = 1024;
              *(_DWORD *)v141 = v84;
              *(_WORD *)&v141[4] = 2048;
              *(_QWORD *)&v141[6] = a2;
              v142 = 2080;
              *(_QWORD *)v143 = v83;
              *(_WORD *)&v143[8] = 2080;
              *(_QWORD *)&v143[10] = v85;
              _os_log_impl(&dword_2164CC000, v82, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: generatorType %d, generatorId %llu: unable to connect %s -> %s!", buf, 0x40u);
              v86 = 0;
              v123 = 8;
            }
            else
            {
LABEL_108:
              v86 = 0;
              v123 = 8;
              i = (uint64_t *)a1;
            }
LABEL_120:
            if (__p)
            {
              v135 = (Phase::Controller::DVM::VoiceGraph **)__p;
              operator delete(__p);
            }
            if ((v86 & 1) == 0)
              return v123;
            ++v46;
            v45 = *(_QWORD *)(v19 + 72);
            if (v46 >= (*(_QWORD *)(v19 + 80) - v45) >> 5)
              goto LABEL_124;
          }
LABEL_88:
          v73 = (Phase::Controller::DVM::VoiceGraph **)__p;
          v74 = v135;
          i = (uint64_t *)a1;
          if (__p != v135)
          {
            do
            {
              v75 = *v73;
              v76 = *v52;
              for (j = (Phase::Controller::DVM::VoiceGraph **)*v50; j != (Phase::Controller::DVM::VoiceGraph **)v76; ++j)
              {
                if (*j == v75)
                  goto LABEL_94;
              }
              j = (Phase::Controller::DVM::VoiceGraph **)*v52;
LABEL_94:
              if ((Phase::Controller::DVM::VoiceGraph **)v76 == j)
                Phase::Controller::DVM::VoiceGraph::ScheduleRemoveVoice(v75, (Phase::Controller::DVM::VoiceNode *)v55);
              ++v73;
            }
            while (v73 != v74);
            v56 = (char *)*v52;
          }
          v78 = v126;
          if (*v50 != v56)
            v78 = (unint64_t *)(v56 - 8);
          v79 = *v78;
          if (!*v78)
            __assert_rtn("ConfigureGeneratorWithRenderCallback", "DVMGraph.mm", 1022, "tailNode != nullptr");
          v80 = SubmixForGenerator[7];
          if (v80 == 3)
          {
            v89 = SubmixForGenerator[9];
            if (0x8E38E38E38E38E39 * ((uint64_t)(SubmixForGenerator[10] - v89) >> 3) != (uint64_t)(*(_QWORD *)(v19 + 80)
                                                                                                  - *(_QWORD *)(v19 + 72)) >> 5)
              goto LABEL_163;
            Phase::Controller::DVM::Submix::ChannelStrip::GetHeadNodes((uint64_t **)(v89 + 72 * v46), buf);
          }
          else
          {
            if (v80 == 2)
            {
              v87 = SubmixForGenerator[9];
              if (0x8E38E38E38E38E39 * ((uint64_t)(SubmixForGenerator[10] - v87) >> 3) != (uint64_t)(*(_QWORD *)(v19 + 80) - *(_QWORD *)(v19 + 72)) >> 5)
                goto LABEL_163;
              v88 = *(_QWORD *)(v87 + 72 * v46 + 64);
              if (!v88)
                goto LABEL_119;
              v81 = *(uint64_t ***)(v88 + 72);
              if (*(_QWORD *)(v88 + 80) - (_QWORD)v81 != 72)
                goto LABEL_163;
            }
            else
            {
              if (v80 != 1)
                __assert_rtn("ConfigureGeneratorWithRenderCallback", "DVMGraph.mm", 1055, "false");
              v81 = (uint64_t **)SubmixForGenerator[9];
              if (SubmixForGenerator[10] - (_QWORD)v81 != 72)
LABEL_163:
                std::terminate();
            }
            Phase::Controller::DVM::Submix::ChannelStrip::GetHeadNodes(v81, buf);
          }
          v91 = *(void **)buf;
          v90 = *(uint64_t **)&buf[8];
          for (k = *(uint64_t **)buf; k != v90; ++k)
            Phase::Controller::DVM::VoiceNode::ConnectToNode(v79, *k);
          if (v91)
            operator delete(v91);
LABEL_119:
          v86 = 1;
          goto LABEL_120;
        }
LABEL_124:
        Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState((Phase::Controller::DVM::VoiceGraph *)i, a2, a3, a4);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 56))(v19))
        {
          v93 = *(_QWORD **)(v19 + 72);
          v94 = *(_QWORD **)(v19 + 80);
          if (v93 != v94)
          {
            v95 = (_QWORD *)(a1 + 760);
            while (1)
            {
              v96 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v93 + 16))(*v93);
              v97 = v96;
              v98 = *(_QWORD *)(*v93 + 16);
              v99 = (_QWORD *)*v95;
              v100 = (_QWORD *)(a1 + 760);
              v101 = (_QWORD *)(a1 + 760);
              if (*v95)
                break;
LABEL_136:
              v104 = operator new(0x40uLL);
              v104[4] = v97;
              v104[5] = v98;
              *((_OWORD *)v104 + 3) = *(_OWORD *)(v19 + 16);
              *v104 = 0;
              v104[1] = 0;
              v104[2] = v101;
              *v100 = v104;
              v105 = **(_QWORD **)(a1 + 752);
              if (v105)
              {
                *(_QWORD *)(a1 + 752) = v105;
                v104 = (_QWORD *)*v100;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 760), v104);
              ++*(_QWORD *)(a1 + 768);
LABEL_139:
              v93 += 4;
              if (v93 == v94)
                goto LABEL_157;
            }
            while (1)
            {
              while (1)
              {
                v101 = v99;
                v102 = v99[4];
                if (v102 <= v96)
                  break;
LABEL_129:
                v99 = (_QWORD *)*v101;
                v100 = v101;
                if (!*v101)
                  goto LABEL_136;
              }
              if (v102 >= v96)
              {
                v103 = v101[5];
                if (v103 > v98)
                  goto LABEL_129;
                if (v103 >= v98)
                  goto LABEL_139;
              }
              v99 = (_QWORD *)v101[1];
              if (!v99)
              {
                v100 = v101 + 1;
                goto LABEL_136;
              }
            }
          }
          goto LABEL_157;
        }
        if (!a7 || (v106 = *(uint64_t **)(v19 + 72), v107 = *(uint64_t **)(v19 + 80), v106 == v107))
        {
LABEL_157:
          (*(void (**)(_BYTE *__return_ptr))(*SubmixForGenerator + 40))(buf);
          v120 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
          v121 = 0x8E38E38E38E38E39 * ((uint64_t)(SubmixForGenerator[10] - SubmixForGenerator[9]) >> 3);
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
            operator delete(*(void **)buf);
          }
          v122 = (Phase::Logger *)a1;
          if (v120 == v121)
            Phase::Controller::DVM::VoiceGraph::ConnectSubmixToTaps((Phase::Controller::DVM::VoiceGraph *)a1, SubmixForGenerator[2], SubmixForGenerator[3]);
          Phase::Logger::GetInstancePtr(v122);
          return 0;
        }
        v108 = (uint64_t **)(a1 + 784);
        while (1)
        {
          v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v106 + 16))(*v106);
          v110 = v109;
          v111 = *v106;
          v112 = *(_QWORD *)(*v106 + 16);
          v113 = *v108;
          v114 = (uint64_t **)(a1 + 784);
          v115 = (uint64_t **)(a1 + 784);
          if (*v108)
            break;
LABEL_153:
          v118 = (uint64_t *)operator new(0x38uLL);
          v118[4] = v110;
          v118[5] = v112;
          v118[6] = v111;
          *v118 = 0;
          v118[1] = 0;
          v118[2] = (uint64_t)v115;
          *v114 = v118;
          v119 = **(_QWORD **)(a1 + 776);
          if (v119)
          {
            *(_QWORD *)(a1 + 776) = v119;
            v118 = *v114;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 784), v118);
          ++*(_QWORD *)(a1 + 792);
LABEL_156:
          v106 += 4;
          if (v106 == v107)
            goto LABEL_157;
        }
        while (1)
        {
          while (1)
          {
            v115 = (uint64_t **)v113;
            v116 = v113[4];
            if (v116 <= v109)
              break;
LABEL_146:
            v113 = *v115;
            v114 = v115;
            if (!*v115)
              goto LABEL_153;
          }
          if (v116 >= v109)
          {
            v117 = (uint64_t)v115[5];
            if (v117 > v112)
              goto LABEL_146;
            if (v117 >= v112)
              goto LABEL_156;
          }
          v113 = v115[1];
          if (!v113)
          {
            v114 = v115 + 1;
            goto LABEL_153;
          }
        }
      }
    }
    else if (!a5[40])
    {
      v7 = (Phase::Logger *)(*(uint64_t (**)(char *))(*(_QWORD *)a5 + 16))(a5);
      if (v7)
      {
        v124 = 0;
        goto LABEL_15;
      }
    }
    v36 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7) + 80));
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v37 = a5[40];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 910;
      v138 = 2048;
      v139 = a1;
      v140 = 1024;
      *(_DWORD *)v141 = v37;
      *(_WORD *)&v141[4] = 2048;
      *(_QWORD *)&v141[6] = a2;
      v11 = "%25s:%-5d graph@%p: invalid generatorType %d, generatorId %llu!";
      v12 = v36;
      v13 = 44;
      goto LABEL_37;
    }
    return 1;
  }
  v14 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "DVMGraph.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 869;
    v138 = 2048;
    v139 = a1;
    v140 = 2048;
    *(_QWORD *)v141 = a2;
    _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: generatorId %llu does not exist!", buf, 0x26u);
  }
  return 3;
}

void sub_216580220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::DVM::VoiceNode::Disconnect(unint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v7;
  char v8;
  _QWORD **v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD **v12;
  BOOL v13;
  _QWORD **v15;
  _QWORD *v16[2];

  if (a2)
    v2 = 32;
  else
    v2 = 56;
  if (a2)
    v3 = a1 + 32;
  else
    v3 = a1 + 56;
  v4 = *(_QWORD *)(a1 + v2);
  if (*(_QWORD *)(v3 + 8) == v4)
  {
    v8 = 1;
  }
  else
  {
    v7 = 0;
    v8 = 1;
    do
    {
      std::set<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::set[abi:ne180100]((uint64_t)&v15, v4 + 24 * v7);
      v9 = v15;
      if (v15 != v16)
      {
        do
        {
          v10 = Phase::Controller::DVM::VoiceNode::Disconnect(a1, a2, v7, (uint64_t)(v9 + 4));
          v11 = v9[1];
          if (v11)
          {
            do
            {
              v12 = (_QWORD **)v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (_QWORD **)v9[2];
              v13 = *v12 == v9;
              v9 = v12;
            }
            while (!v13);
          }
          v8 &= v10;
          v9 = v12;
        }
        while (v12 != v16);
      }
      std::__tree<Phase::SpatialCategory>::destroy((uint64_t)&v15, v16[0]);
      ++v7;
      v4 = *(_QWORD *)(a1 + v2);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v3 + 8) - v4) >> 3) > v7);
  }
  return v8 & 1;
}

void sub_2165803A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<Phase::SpatialCategory>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void Phase::Controller::DVM::VoiceGraph::ConnectSubmixToTaps(Phase::Controller::DVM::VoiceGraph *a1, unint64_t a2, unint64_t a3)
{
  _QWORD *Submix;
  Phase::Logger *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  float *v11;
  Phase::Logger *v12;
  unsigned __int8 v13;
  NSObject *v14;
  void **v15;
  id v16;
  void **v17;
  NSObject *v18;
  void **v19;
  const char *v20;
  NSObject *v21;
  os_log_type_t v22;
  void **v23;
  void *__p[2];
  char v25;
  unsigned __int8 uu[8];
  unint64_t v27;
  _BYTE buf[18];
  __int16 v29;
  Phase::Controller::DVM::VoiceGraph *v30;
  __int16 v31;
  void **v32;
  __int16 v33;
  id v34;
  __int16 v35;
  void **v36;
  __int16 v37;
  int v38;
  char out[40];
  uint64_t v40;
  UniqueObjectId v41;

  v40 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)uu = a2;
  v27 = a3;
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)a1 + 17, buf))
  {
    v18 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                        + 80)));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      memset(out, 0, 37);
      uuid_unparse(uu, out);
      std::string::basic_string[abi:ne180100]<0>(__p, out);
      if (v25 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1331;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v19;
      v20 = "%25s:%-5d graph@%p: submixId %s does not exist";
      v21 = v18;
      v22 = OS_LOG_TYPE_ERROR;
LABEL_27:
      _os_log_impl(&dword_2164CC000, v21, v22, v20, buf, 0x26u);
      if (v25 < 0)
        operator delete(__p[0]);
    }
LABEL_29:

    return;
  }
  v41.mStorage[0] = a2;
  v41.mStorage[1] = a3;
  Submix = Phase::Controller::DVM::VoiceGraph::GetSubmix(a1, v41);
  v7 = (Phase::Logger *)(*(_QWORD *(**)(_BYTE *__return_ptr))(*Submix + 40))(buf);
  v8 = *(_QWORD *)buf;
  v9 = *(_QWORD *)&buf[8];
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  if (v8 == v9)
  {
    v18 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7)
                                                                                        + 80)));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      memset(out, 0, 37);
      uuid_unparse(uu, out);
      std::string::basic_string[abi:ne180100]<0>(__p, out);
      if (v25 >= 0)
        v23 = __p;
      else
        v23 = (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1339;
      v29 = 2048;
      v30 = a1;
      v31 = 2080;
      v32 = v23;
      v20 = "%25s:%-5d graph@%p: submixId %s exists, but has no valid voice nodes yet to connect to taps. No op.";
      v21 = v18;
      v22 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_27;
    }
    goto LABEL_29;
  }
  for (i = (_QWORD *)*((_QWORD *)a1 + 42); i; i = (_QWORD *)*i)
  {
    v11 = (float *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(i + 11, uu);
    if (v11)
    {
      v12 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::InternalConnectTapToSubmix(a1, i + 3, Submix, (_QWORD *)v11 + 4, v11[14]);
      v13 = v12;
      if ((_DWORD)v12)
      {
        v14 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v12)
                                                                                            + 80)));
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          v15 = (void **)i[5];
          GetTapTypeString(i[20]);
          v16 = (id)objc_claimAutoreleasedReturnValue();
          memset(out, 0, 37);
          uuid_unparse(uu, out);
          std::string::basic_string[abi:ne180100]<0>(__p, out);
          v17 = __p;
          if (v25 < 0)
            v17 = (void **)__p[0];
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)&buf[4] = "DVMGraph.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1359;
          v29 = 2048;
          v30 = a1;
          v31 = 2048;
          v32 = v15;
          v33 = 2112;
          v34 = v16;
          v35 = 2080;
          v36 = v17;
          v37 = 1024;
          v38 = v13;
          _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: failed to connect TapId %llu, type %@ to SubmixId %s with error %hhd", buf, 0x40u);
          if (v25 < 0)
            operator delete(__p[0]);

        }
      }
    }
  }
}

void sub_216580798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::DVM::VoiceGraph::AddTap(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v8;
  Phase::Logger *v9;
  NSObject *v10;
  _QWORD *v12;
  _DWORD *v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *i;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  NSObject *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t SlotForKey;
  _QWORD *v58;
  unint64_t v59;
  Phase::Logger *v60;
  NSObject *v61;
  void *v62;
  _BYTE v63[18];
  __int16 v64;
  _BYTE v65[18];
  __int16 v66;
  void *v67;
  _QWORD v68[4];

  v68[3] = *MEMORY[0x24BDAC8D0];
  v8 = (void **)(a1 + 320);
  v9 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(a1 + 320), a2);
  if (v9)
  {
    v10 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v9) + 944));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v63 = 136315906;
      *(_QWORD *)&v63[4] = "DVMGraph.mm";
      *(_WORD *)&v63[12] = 1024;
      *(_DWORD *)&v63[14] = 1125;
      v64 = 2048;
      *(_QWORD *)v65 = a1;
      *(_WORD *)&v65[8] = 2048;
      *(_QWORD *)&v65[10] = a2;
      _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d pre-spatialTap@%p: TapId %llu already exist", v63, 0x26u);
    }
    return 4;
  }
  v12 = (_QWORD *)(a1 + 336);
  v13 = operator new(0xA8uLL);
  *(_QWORD *)v63 = v13;
  *(_QWORD *)&v63[8] = a1 + 336;
  v13[8] = 2;
  *((_QWORD *)v13 + 5) = a2;
  *((_QWORD *)v13 + 6) = 0;
  *((_BYTE *)v13 + 56) = 0;
  v13[15] = 0;
  *((_BYTE *)v13 + 64) = 0;
  *((_BYTE *)v13 + 68) = 0;
  *((_QWORD *)v13 + 9) = 0;
  *((_QWORD *)v13 + 2) = a2;
  *((_QWORD *)v13 + 3) = &off_24D57C2A0;
  *((_OWORD *)v13 + 5) = 0u;
  *((_OWORD *)v13 + 6) = 0u;
  *((_QWORD *)v13 + 14) = 0;
  v13[30] = 1065353216;
  *((_QWORD *)v13 + 19) = 0;
  *((_QWORD *)v13 + 20) = 0;
  v63[16] = 1;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = a2;
  v14 = *(_QWORD *)(a1 + 328);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v16 = a2;
      if (v14 <= a2)
        v16 = a2 % v14;
    }
    else
    {
      v16 = (v14 - 1) & a2;
    }
    v17 = (_QWORD *)*((_QWORD *)*v8 + v16);
    if (v17)
    {
      for (i = (_QWORD *)*v17; i; i = (_QWORD *)*i)
      {
        v19 = i[1];
        if (v19 == a2)
        {
          if (i[2] == a2)
            goto LABEL_76;
        }
        else
        {
          if (v15.u32[0] > 1uLL)
          {
            if (v19 >= v14)
              v19 %= v14;
          }
          else
          {
            v19 &= v14 - 1;
          }
          if (v19 != v16)
            break;
        }
      }
    }
  }
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 344) + 1);
  v21 = *(float *)(a1 + 352);
  if (!v14 || (float)(v21 * (float)v14) < v20)
  {
    v22 = 1;
    if (v14 >= 3)
      v22 = (v14 & (v14 - 1)) != 0;
    v23 = v22 | (2 * v14);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v14 = *(_QWORD *)(a1 + 328);
    }
    if (*(_QWORD *)&prime > v14)
      goto LABEL_117;
    if (*(_QWORD *)&prime >= v14)
      goto LABEL_62;
    v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 344) / *(float *)(a1 + 352));
    if (v14 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
    {
      v32 = std::__next_prime(v32);
    }
    else
    {
      v34 = 1 << -(char)__clz(v32 - 1);
      if (v32 >= 2)
        v32 = v34;
    }
    if (*(_QWORD *)&prime <= v32)
      prime = (int8x8_t)v32;
    if (*(_QWORD *)&prime >= v14)
    {
      v14 = *(_QWORD *)(a1 + 328);
      goto LABEL_62;
    }
    if (prime)
    {
LABEL_117:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v26 = operator new(8 * *(_QWORD *)&prime);
      v27 = *v8;
      *v8 = v26;
      if (v27)
        operator delete(v27);
      v28 = 0;
      *(int8x8_t *)(a1 + 328) = prime;
      do
        *((_QWORD *)*v8 + v28++) = 0;
      while (*(_QWORD *)&prime != v28);
      v29 = (_QWORD *)*v12;
      if (*v12)
      {
        v30 = v29[1];
        v31 = (uint8x8_t)vcnt_s8(prime);
        v31.i16[0] = vaddlv_u8(v31);
        if (v31.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&prime)
            v30 %= *(_QWORD *)&prime;
        }
        else
        {
          v30 &= *(_QWORD *)&prime - 1;
        }
        *((_QWORD *)*v8 + v30) = v12;
        v35 = (_QWORD *)*v29;
        if (*v29)
        {
          do
          {
            v36 = v35[1];
            if (v31.u32[0] > 1uLL)
            {
              if (v36 >= *(_QWORD *)&prime)
                v36 %= *(_QWORD *)&prime;
            }
            else
            {
              v36 &= *(_QWORD *)&prime - 1;
            }
            if (v36 != v30)
            {
              if (!*((_QWORD *)*v8 + v36))
              {
                *((_QWORD *)*v8 + v36) = v29;
                goto LABEL_58;
              }
              *v29 = *v35;
              *v35 = **((_QWORD **)*v8 + v36);
              **((_QWORD **)*v8 + v36) = v35;
              v35 = v29;
            }
            v36 = v30;
LABEL_58:
            v29 = v35;
            v35 = (_QWORD *)*v35;
            v30 = v36;
          }
          while (v35);
        }
      }
      v14 = (unint64_t)prime;
    }
    else
    {
      v48 = *v8;
      *v8 = 0;
      if (v48)
        operator delete(v48);
      v14 = 0;
      *(_QWORD *)(a1 + 328) = 0;
    }
  }
LABEL_62:
  v37 = *((_QWORD *)v13 + 1);
  v38 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
  v38.i16[0] = vaddlv_u8(v38);
  if (v38.u32[0] > 1uLL)
  {
    if (v37 >= v14)
      v37 %= v14;
  }
  else
  {
    v37 &= v14 - 1;
  }
  v39 = *v8;
  v40 = (_QWORD *)*((_QWORD *)*v8 + v37);
  if (v40)
  {
    *(_QWORD *)v13 = *v40;
LABEL_74:
    *v40 = v13;
    goto LABEL_75;
  }
  *(_QWORD *)v13 = *v12;
  *v12 = v13;
  v39[v37] = v12;
  if (*(_QWORD *)v13)
  {
    v41 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if (v38.u32[0] > 1uLL)
    {
      if (v41 >= v14)
        v41 %= v14;
    }
    else
    {
      v41 &= v14 - 1;
    }
    v40 = (char *)*v8 + 8 * v41;
    goto LABEL_74;
  }
LABEL_75:
  ++*(_QWORD *)(a1 + 344);
  *(_QWORD *)v63 = 0;
LABEL_76:
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,void *>>>>::reset[abi:ne180100]((uint64_t *)v63);
  v42 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(v8, a2);
  if (v42)
  {
    v43 = v42;
    std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v63, a3);
    v44 = v43 + 16;
    if (v63 != (_BYTE *)(v43 + 16))
    {
      v45 = *(_QWORD *)&v65[4];
      v46 = (_QWORD *)v43[19];
      if (*(_BYTE **)&v65[4] == v63)
      {
        if (v46 == v44)
        {
          (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v63 + 24))(v63, v68);
          (*(void (**)(_QWORD))(**(_QWORD **)&v65[4] + 32))(*(_QWORD *)&v65[4]);
          *(_QWORD *)&v65[4] = 0;
          (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)v43[19] + 24))(v43[19], v63);
          (*(void (**)(_QWORD))(*(_QWORD *)v43[19] + 32))(v43[19]);
          v43[19] = 0;
          *(_QWORD *)&v65[4] = v63;
          (*(void (**)(_QWORD *, _QWORD *))(v68[0] + 24))(v68, v43 + 16);
          (*(void (**)(_QWORD *))(v68[0] + 32))(v68);
        }
        else
        {
          (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v63 + 24))(v63, v43 + 16);
          (*(void (**)(_QWORD))(**(_QWORD **)&v65[4] + 32))(*(_QWORD *)&v65[4]);
          *(_QWORD *)&v65[4] = v43[19];
        }
        v43[19] = v44;
      }
      else if (v46 == v44)
      {
        (*(void (**)(_QWORD *, _BYTE *))(*v44 + 24))(v43 + 16, v63);
        (*(void (**)(_QWORD))(*(_QWORD *)v43[19] + 32))(v43[19]);
        v43[19] = *(_QWORD *)&v65[4];
        *(_QWORD *)&v65[4] = v63;
      }
      else
      {
        *(_QWORD *)&v65[4] = v43[19];
        v43[19] = v45;
      }
    }
    v49 = *(_QWORD **)&v65[4];
    if (*(_BYTE **)&v65[4] == v63)
    {
      v50 = 4;
      v49 = v63;
    }
    else
    {
      if (!*(_QWORD *)&v65[4])
        goto LABEL_103;
      v50 = 5;
    }
    (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_103:
    v43[20] = a4;
    std::mutex::lock((std::mutex *)(a1 + 256));
    v51 = (uint64_t *)atomic_load((unint64_t *)(a1 + 216));
    v52 = *(_DWORD *)(a1 + 208) + 1;
    *(_DWORD *)(a1 + 208) = v52;
    if (v51)
    {
      v53 = 16 * v52;
      v54 = *((_DWORD *)v51 + 2);
      if (v53 / v54 < 0xB)
      {
LABEL_108:
        SlotForKey = caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl::findSlotForKey(v51, a2);
        v58 = v43 + 3;
        if ((SlotForKey & 1) != 0)
        {
          *(_QWORD *)(v56 + 16) = v58;
          --*(_DWORD *)(a1 + 208);
        }
        else
        {
          v59 = operator new();
          *(_DWORD *)v59 = 0x10000;
          *(_QWORD *)(v59 + 8) = a2;
          *(_QWORD *)(v59 + 16) = v58;
          atomic_store(v59, (unint64_t *)&v51[HIDWORD(SlotForKey) + 2]);
          caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::emptyReleasePool(a1 + 176);
        }
        std::mutex::unlock((std::mutex *)(a1 + 256));
        v61 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v60)
                                                                                            + 944)));
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        {
          GetTapTypeString(a4);
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v63 = 136316162;
          *(_QWORD *)&v63[4] = "DVMGraph.mm";
          *(_WORD *)&v63[12] = 1024;
          *(_DWORD *)&v63[14] = 1141;
          v64 = 2048;
          *(_QWORD *)v65 = a1;
          *(_WORD *)&v65[8] = 2048;
          *(_QWORD *)&v65[10] = a2;
          v66 = 2112;
          v67 = v62;
          _os_log_impl(&dword_2164CC000, v61, OS_LOG_TYPE_DEFAULT, "%25s:%-5d pre-spatialTap@%p: TapId %llu, type %@ added!", v63, 0x30u);

        }
        return 0;
      }
      v55 = 2 * v54;
    }
    else
    {
      v55 = 8;
    }
    v51 = caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::rehash((unint64_t *)(a1 + 176), v55);
    goto LABEL_108;
  }
  v47 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
  if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "DVMGraph.mm";
    *(_WORD *)&v63[12] = 1024;
    *(_DWORD *)&v63[14] = 1134;
    v64 = 2048;
    *(_QWORD *)v65 = a1;
    *(_WORD *)&v65[8] = 2048;
    *(_QWORD *)&v65[10] = a2;
    _os_log_impl(&dword_2164CC000, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: Error adding TapId %llu!", v63, 0x26u);
  }
  return 3;
}

void sub_216581048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::DVM::VoiceGraph::ConfigureTap(uint64_t *a1, unint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  Phase::Logger *v9;
  Phase::Logger *v10;
  NSObject *v11;
  void *v12;
  char *v13;
  NSObject *v15;
  unint64_t *v16;
  _DWORD *VoiceNode;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t *v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v8 = a1 + 40;
  v9 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(a1 + 40, a2);
  if (v9)
  {
    if ((a3 - 3) <= 0xFFFFFFFD)
    {
      v10 = v9;
      v11 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v9)
                                                                                          + 80)));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        GetTapTypeString(*((_QWORD *)v10 + 20));
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = Phase::Controller::DVM::kPlayStateStrings[a3];
        v23 = 136316418;
        v24 = "DVMGraph.mm";
        v25 = 1024;
        v26 = 1157;
        v27 = 2048;
        v28 = a1;
        v29 = 2048;
        v30 = a2;
        v31 = 2112;
        v32 = v12;
        v33 = 2080;
        v34 = v13;
        _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: TapId %llu, type %@ invalid play state %s!", (uint8_t *)&v23, 0x3Au);

      }
      return 1;
    }
    v16 = *(unint64_t **)(a4 + 8);
    if (*(_QWORD *)(a4 + 16) - (_QWORD)v16 != 104)
      std::terminate();
    VoiceNode = Phase::Controller::DVM::VoiceGraph::CreateOrGetVoiceNode(a1, *(_QWORD *)a4, *v16, 5, 3145728, 0);
    if (VoiceNode)
    {
      v18 = (uint64_t)VoiceNode;
      a1[11] |= 8uLL;
      v19 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(v8, a2);
      v20 = (uint64_t)(v19 + 3);
      Phase::Controller::DVM::VoiceNode::Configure(v18, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), 0, 3145728, 0);
      v21 = v19[10];
      if (v21 && v21 != v18)
      {
        Phase::Controller::DVM::VoiceNode::Disconnect(v19[10], 1);
        Phase::Controller::DVM::VoiceNode::Disconnect(v21, 0);
      }
      v19[10] = v18;
      v22 = Phase::Controller::DVM::VoiceGraph::PreprocessPlayStateChange((uint64_t)a1, v20, a3);
      if (v22 != 8)
      {
        if (v22 == 4)
          return 1;
        Phase::Controller::DVM::VoiceGraph::SchedulePlayStateChange(a1, v20, a3, 0.0);
      }
      return 0;
    }
    else
    {
      return 8;
    }
  }
  else
  {
    v15 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v23 = 136315906;
      v24 = "DVMGraph.mm";
      v25 = 1024;
      v26 = 1150;
      v27 = 2048;
      v28 = a1;
      v29 = 2048;
      v30 = a2;
      _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: TapId %llu does not exists!", (uint8_t *)&v23, 0x26u);
    }
    return 3;
  }
}

void sub_216581350(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::DVM::VoiceGraph::PreprocessPlayStateChange(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t PlayStateTransitionStatus;
  Phase::Logger *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  char *v13;
  uint64_t v15;
  _BYTE buf[18];
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 40);
  v15 = v6;
  PlayStateTransitionStatus = Phase::Controller::DVM::VoiceGraph::GetPlayStateTransitionStatus(a1, (int *)&v15, a3);
  if (PlayStateTransitionStatus <= 2)
  {
    v8 = (Phase::Logger *)(*(_QWORD *(**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 40))(buf, a2);
    v9 = *(_QWORD *)buf;
    v10 = *(_QWORD *)&buf[8];
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    if (v9 == v10)
    {
      v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v8) + 80));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        if ((v6 & 0xFF00000000) != 0)
          v12 = Phase::Controller::DVM::kPlayStateStrings[(int)v6];
        else
          v12 = "none";
        v13 = Phase::Controller::DVM::kPlayStateStrings[a3];
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "DVMGraph.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2309;
        v17 = 2048;
        v18 = a1;
        v19 = 2080;
        v20 = v12;
        v21 = 2080;
        v22 = v13;
        _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d graph@%p: Empty DSPNode, processing state transition from %s to %s immediately!", buf, 0x30u);
      }
      *(_BYTE *)(a2 + 44) = 1;
      *(_BYTE *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 36) = a3;
      *(_DWORD *)(a2 + 40) = a3;
      if (!a3)
        Phase::Controller::DVM::VoiceGraph::InternalRemoveNode(a1, *(_DWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), 0);
      return 8;
    }
  }
  return PlayStateTransitionStatus;
}

void Phase::Controller::DVM::VoiceGraph::SchedulePlayStateChange(_QWORD *a1, uint64_t a2, int a3, float a4)
{
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  Phase::Logger *v23;
  NSObject *v24;
  char *v25;
  char *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  uint32_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  _QWORD *v49;
  _QWORD *v50;
  const char *v51;
  Phase::Logger *PlayStateTransitionStatus;
  NSObject *v53;
  char *v54;
  char *v55;
  double v56;
  char *v57;
  NSObject *v58;
  os_log_type_t v59;
  const char *v60;
  uint32_t v61;
  int v62;
  float *v63;
  __int128 v64;
  uint64_t v65;
  int v66;
  float *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  char *v72;
  char *v73;
  double v74;
  char *v75;
  BOOL v76;
  int v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  char *v81;
  void *__p;
  uint64_t *v83;
  _BYTE buf[12];
  __int16 v85;
  int v86;
  __int16 v87;
  void *v88;
  __int16 v89;
  char *v90;
  __int16 v91;
  char *v92;
  __int16 v93;
  double v94;
  __int16 v95;
  char *v96;
  __int16 v97;
  double v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 32))(&__p, a2);
  v8 = a1 + 82;
  v9 = a1[83];
  if ((_QWORD *)v9 != a1 + 82)
  {
    do
    {
      v10 = *(_DWORD *)(v9 + 32);
      if (v10 == *(_DWORD *)(a2 + 8)
        && *(_QWORD *)(v9 + 40) == *(_QWORD *)(a2 + 16)
        && *(_QWORD *)(v9 + 48) == *(_QWORD *)(a2 + 24))
      {
        if (a4 < *(float *)(v9 + 28))
          a4 = *(float *)(v9 + 28);
      }
      else if (__p != v83)
      {
        v11 = (uint64_t *)__p;
        do
        {
          v12 = *v11;
          if (!*v11)
            std::terminate();
          if (v10 == *(_DWORD *)(v12 + 8)
            && *(_QWORD *)(v9 + 40) == *(_QWORD *)(v12 + 16)
            && *(_QWORD *)(v9 + 48) == *(_QWORD *)(v12 + 24)
            && a4 < *(float *)(v9 + 28))
          {
            a4 = *(float *)(v9 + 28);
          }
          ++v11;
        }
        while (v11 != v83);
      }
      v9 = *(_QWORD *)(v9 + 8);
    }
    while ((_QWORD *)v9 != v8);
  }
  if (a3 == 2)
  {
    v77 = 0;
    if (!*(_DWORD *)(a2 + 36) && a4 == 0.0)
    {
      v13 = (char *)operator new(0x38uLL);
      v14 = *(_DWORD *)(a2 + 8);
      v77 = 1;
      *((_DWORD *)v13 + 6) = 1;
      *((float *)v13 + 7) = a4;
      *((_QWORD *)v13 + 1) = v8;
      *((_QWORD *)v13 + 2) = &off_24D57C3A0;
      *((_DWORD *)v13 + 8) = v14;
      *(_OWORD *)(v13 + 40) = *(_OWORD *)(a2 + 16);
      v15 = a1[82];
      *(_QWORD *)v13 = v15;
      *(_QWORD *)(v15 + 8) = v13;
      a1[82] = v13;
      ++a1[84];
    }
  }
  else
  {
    v77 = 0;
  }
  v16 = (char *)operator new(0x38uLL);
  v17 = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v16 + 6) = a3;
  *((float *)v16 + 7) = a4;
  *((_QWORD *)v16 + 1) = v8;
  *((_QWORD *)v16 + 2) = &off_24D57C3A0;
  *((_DWORD *)v16 + 8) = v17;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a2 + 16);
  v18 = a1[82];
  *(_QWORD *)v16 = v18;
  *(_QWORD *)(v18 + 8) = v16;
  a1[82] = v16;
  ++a1[84];
  v20 = a4 > 0.0 && a3 == 0;
  *(_DWORD *)(a2 + 40) = a3;
  *(_BYTE *)(a2 + 44) = 1;
  v76 = v20;
  *(_BYTE *)(a2 + 32) = v20;
  v22 = (uint64_t *)__p;
  v21 = v83;
  if (__p != v83)
  {
    while (1)
    {
      v23 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::PreprocessPlayStateChange((uint64_t)a1, *v22, a3);
      if (v23 < 3)
        break;
      v24 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v23) + 80));
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = Phase::Controller::DVM::kPlayStateStrings[a3];
        v26 = Phase::Controller::DVM::kDspNodeTypeStrings[*(int *)(*v22 + 8)];
        v27 = *(char **)(*v22 + 16);
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "DVMGraph.mm";
        v85 = 1024;
        v86 = 2241;
        v87 = 2080;
        v88 = v25;
        v89 = 2080;
        v90 = v26;
        v91 = 2048;
        v92 = v27;
        v28 = v24;
        v29 = OS_LOG_TYPE_ERROR;
        v30 = "%25s:%-5d NRT state transition to %s is invalid for DspNode type %s, id %llu \n";
        v31 = 48;
LABEL_37:
        _os_log_impl(&dword_2164CC000, v28, v29, v30, buf, v31);
      }
LABEL_38:
      if (++v22 == v21)
        goto LABEL_39;
    }
    if (v77)
    {
      v32 = *v22;
      v33 = (char *)operator new(0x38uLL);
      v34 = *(_DWORD *)(v32 + 8);
      v35 = *(_OWORD *)(v32 + 16);
      *((_DWORD *)v33 + 6) = 1;
      *((float *)v33 + 7) = a4;
      *((_QWORD *)v33 + 1) = v8;
      *((_QWORD *)v33 + 2) = &off_24D57C3A0;
      *((_DWORD *)v33 + 8) = v34;
      *(_OWORD *)(v33 + 40) = v35;
      v36 = a1[82];
      *(_QWORD *)v33 = v36;
      *(_QWORD *)(v36 + 8) = v33;
      a1[82] = v33;
      ++a1[84];
    }
    v37 = *v22;
    v38 = (char *)operator new(0x38uLL);
    v39 = *(_DWORD *)(v37 + 8);
    v40 = *(_OWORD *)(v37 + 16);
    *((_DWORD *)v38 + 6) = a3;
    *((float *)v38 + 7) = a4;
    *((_QWORD *)v38 + 1) = v8;
    *((_QWORD *)v38 + 2) = &off_24D57C3A0;
    *((_DWORD *)v38 + 8) = v39;
    *(_OWORD *)(v38 + 40) = v40;
    v41 = a1[82];
    *(_QWORD *)v38 = v41;
    *(_QWORD *)(v41 + 8) = v38;
    a1[82] = v38;
    ++a1[84];
    v42 = *v22;
    *(_DWORD *)(v42 + 40) = a3;
    *(_BYTE *)(v42 + 44) = 1;
    *(_BYTE *)(v42 + 32) = v76;
    v43 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v38) + 80));
    if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      goto LABEL_38;
    v44 = Phase::Controller::DVM::kPlayStateStrings[a3];
    v45 = Phase::Controller::DVM::kDspNodeTypeStrings[*(int *)(*v22 + 8)];
    v46 = *(char **)(*v22 + 16);
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "DVMGraph.mm";
    v85 = 1024;
    v86 = 2255;
    v87 = 2080;
    v88 = v44;
    v89 = 2080;
    v90 = v45;
    v91 = 2048;
    v92 = v46;
    v93 = 2048;
    v94 = a4;
    v28 = v43;
    v29 = OS_LOG_TYPE_DEFAULT;
    v30 = "%25s:%-5d NRT state set to %s, for DspNode type %s, id %llu with %.3f sec. delay.";
    v31 = 58;
    goto LABEL_37;
  }
LABEL_39:
  (*(void (**)(char **__return_ptr, uint64_t))(*(_QWORD *)a2 + 40))(&v80, a2);
  v47 = v80;
  v48 = v81;
  if (v80 == v81)
    goto LABEL_54;
  v49 = a1 + 85;
  do
  {
    v50 = *(_QWORD **)v47;
    if (*(_DWORD *)(*(_QWORD *)v47 + 24) == 1)
    {
      v51 = "Procedure";
    }
    else
    {
      v51 = *(const char **)((*(uint64_t (**)(_QWORD *))(*v50 + 16))(v50) + 48);
      v50 = *(_QWORD **)v47;
    }
    *(_QWORD *)buf = v50[24];
    PlayStateTransitionStatus = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::GetPlayStateTransitionStatus((uint64_t)a1, (int *)buf, a3);
    if (PlayStateTransitionStatus >= 3)
    {
      v53 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(PlayStateTransitionStatus) + 80));
      if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        goto LABEL_52;
      v54 = Phase::Controller::DVM::kDspNodeTypeStrings[*(int *)(a2 + 8)];
      v55 = *(char **)(*(_QWORD *)v47 + 16);
      v56 = *(double *)(a2 + 16);
      v57 = Phase::Controller::DVM::kPlayStateStrings[a3];
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      v85 = 1024;
      v86 = 2267;
      v87 = 2080;
      v88 = (void *)v51;
      v89 = 2048;
      v90 = v55;
      v91 = 2080;
      v92 = v54;
      v93 = 2048;
      v94 = v56;
      v95 = 2080;
      v96 = v57;
      v58 = v53;
      v59 = OS_LOG_TYPE_ERROR;
      v60 = "%25s:%-5d NRT transition stat for %s vid %llu (on %sId %llu) to %s is invalid! \n";
      v61 = 68;
      goto LABEL_51;
    }
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)v47 + 32))(&v78);
    if (v77)
    {
      v62 = *(_DWORD *)(*(_QWORD *)v47 + 24);
      v63 = (float *)operator new(0x48uLL);
      *((_DWORD *)v63 + 6) = 1;
      v63[7] = a4;
      *((_QWORD *)v63 + 1) = v49;
      *((_QWORD *)v63 + 2) = &off_24D57C3C8;
      v64 = v79;
      *((_OWORD *)v63 + 2) = v78;
      *((_OWORD *)v63 + 3) = v64;
      *((_DWORD *)v63 + 16) = v62;
      v65 = a1[85];
      *(_QWORD *)v63 = v65;
      *(_QWORD *)(v65 + 8) = v63;
      a1[85] = v63;
      ++a1[87];
    }
    v66 = *(_DWORD *)(*(_QWORD *)v47 + 24);
    v67 = (float *)operator new(0x48uLL);
    *((_DWORD *)v67 + 6) = a3;
    v67[7] = a4;
    *((_QWORD *)v67 + 1) = v49;
    *((_QWORD *)v67 + 2) = &off_24D57C3C8;
    v68 = v79;
    *((_OWORD *)v67 + 2) = v78;
    *((_OWORD *)v67 + 3) = v68;
    *((_DWORD *)v67 + 16) = v66;
    v69 = a1[85];
    *(_QWORD *)v67 = v69;
    *(_QWORD *)(v69 + 8) = v67;
    a1[85] = v67;
    ++a1[87];
    v70 = *(_QWORD *)v47;
    *(_BYTE *)(v70 + 8) = v76;
    *(_DWORD *)(v70 + 192) = a3;
    *(_BYTE *)(v70 + 196) = 1;
    v71 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v67) + 80));
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
    {
      v72 = *(char **)(*(_QWORD *)v47 + 16);
      v73 = Phase::Controller::DVM::kDspNodeTypeStrings[*(int *)(a2 + 8)];
      v74 = *(double *)(a2 + 16);
      v75 = Phase::Controller::DVM::kPlayStateStrings[a3];
      *(_DWORD *)buf = 136316930;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      v85 = 1024;
      v86 = 2282;
      v87 = 2080;
      v88 = (void *)v51;
      v89 = 2048;
      v90 = v72;
      v91 = 2080;
      v92 = v73;
      v93 = 2048;
      v94 = v74;
      v95 = 2080;
      v96 = v75;
      v97 = 2048;
      v98 = a4;
      v58 = v71;
      v59 = OS_LOG_TYPE_DEFAULT;
      v60 = "%25s:%-5d NRT set %s vid %llu (on %sId %llu) to %s with %.3f sec. delay.";
      v61 = 78;
LABEL_51:
      _os_log_impl(&dword_2164CC000, v58, v59, v60, buf, v61);
    }
LABEL_52:
    v47 += 8;
  }
  while (v47 != v48);
  v47 = v80;
LABEL_54:
  if (v47)
  {
    v81 = v47;
    operator delete(v47);
  }
  if (__p)
  {
    v83 = (uint64_t *)__p;
    operator delete(__p);
  }
}

void sub_216581CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::DVM::VoiceGraph::InternalConnectTapToSubmix(Phase::Logger *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, float a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Phase::Logger *v12;
  Phase::Logger *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  UniqueObjectId *v19;
  UniqueObjectId *v20;
  UniqueObjectId v21;
  Phase::Logger *Submix;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned int v29;
  NSObject *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  float v39;
  int v40;
  _BOOL8 v41;
  BOOL v42;
  NSObject *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  NSObject *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  void *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  void *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  void *v66;
  uint64_t v69;
  int v70;
  float v71;
  char v72;
  void *__p[3];
  void *v74;
  Phase::Logger *v75;
  uint64_t v76;
  _BYTE buf[18];
  __int16 v78;
  Phase::Logger *v79;
  __int16 v80;
  unint64_t v81;
  __int16 v82;
  char *v83;
  __int16 v84;
  _BYTE v85[28];
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v8 = a3[9];
  v7 = a3[10];
  v9 = 0x8E38E38E38E38E39 * ((v7 - v8) >> 3);
  if (v9 != (uint64_t)(a4[1] - *a4) >> 2)
  {
    v30 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1)
                                                                                        + 80)));
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v31 = a3[2];
      v32 = Phase::Controller::DVM::kSubmixTypeStrings[a3[7]];
      v33 = a2[2];
      GetTapTypeString(a2[17]);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1214;
      v78 = 2048;
      v79 = a1;
      v80 = 2048;
      v81 = v31;
      v82 = 2080;
      v83 = v32;
      v84 = 2048;
      *(_QWORD *)v85 = v33;
      *(_WORD *)&v85[8] = 2112;
      *(_QWORD *)&v85[10] = v34;
      _os_log_impl(&dword_2164CC000, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d graph@%p: invalid channel and gain pairs for submixId %llu, type %s and tapId %llu, type %@. No op.", buf, 0x44u);

    }
    return 0;
  }
  v74 = 0;
  v75 = 0;
  v76 = 0;
  if (v7 == v8)
  {
    v13 = 0;
  }
  else
  {
    std::vector<Phase::Controller::DVM::VoiceNode *>::__vallocate[abi:ne180100](&v74, 0x8E38E38E38E38E39 * ((v7 - v8) >> 3));
    v12 = v75;
    bzero(v75, 8 * v9);
    v13 = (Phase::Logger *)((char *)v12 + 8 * v9);
    v75 = v13;
    v14 = a3[9];
    if (a3[10] != v14)
    {
      v15 = 0;
      while (1)
      {
        v16 = (uint64_t *)(v14 + 72 * v15);
        v18 = *v16;
        v17 = v16[1];
        if (v18 == v17)
        {
          if (a3[7] != 2)
          {
            v50 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v13)
                                                                                                + 80)));
            if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
            {
              v55 = a3[2];
              v56 = Phase::Controller::DVM::kSubmixTypeStrings[a3[7]];
              v57 = a2[2];
              GetTapTypeString(a2[17]);
              v58 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136316674;
              *(_QWORD *)&buf[4] = "DVMGraph.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1244;
              v78 = 2048;
              v79 = a1;
              v80 = 2048;
              v81 = v55;
              v82 = 2080;
              v83 = v56;
              v84 = 2048;
              *(_QWORD *)v85 = v57;
              *(_WORD *)&v85[8] = 2112;
              *(_QWORD *)&v85[10] = v58;
              _os_log_impl(&dword_2164CC000, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: can't connect submixId %llu, type %s to tapId %llu, type %@. Submix has no effects!", buf, 0x44u);

            }
            goto LABEL_48;
          }
          v19 = (UniqueObjectId *)(v14 + 72 * v15);
          v21 = v19[3];
          v20 = v19 + 3;
          *(UniqueObjectId *)buf = v21;
          if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)a1 + 17, buf))
          {
            v50 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                                + 80)));
            if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
            {
              v59 = v20->mStorage[0];
              v60 = (char *)a3[2];
              v61 = a2[2];
              GetTapTypeString(a2[17]);
              v62 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136316674;
              *(_QWORD *)&buf[4] = "DVMGraph.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1255;
              v78 = 2048;
              v79 = a1;
              v80 = 2048;
              v81 = v59;
              v82 = 2048;
              v83 = v60;
              v84 = 2048;
              *(_QWORD *)v85 = v61;
              *(_WORD *)&v85[8] = 2112;
              *(_QWORD *)&v85[10] = v62;
              _os_log_impl(&dword_2164CC000, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: can't connect unregistered child submixId %llu for ambient submixId %llu to tapId %llu, type %@!", buf, 0x44u);

            }
            goto LABEL_48;
          }
          Submix = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::GetSubmix(a1, *v20);
          v23 = (_QWORD *)*((_QWORD *)Submix + 9);
          v17 = v23[1];
          if (*v23 == v17)
          {
            v50 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(Submix)
                                                                                                + 80)));
            if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
            {
              v63 = v20->mStorage[0];
              v64 = (char *)a3[2];
              v65 = a2[2];
              GetTapTypeString(a2[17]);
              v66 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136316674;
              *(_QWORD *)&buf[4] = "DVMGraph.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1267;
              v78 = 2048;
              v79 = a1;
              v80 = 2048;
              v81 = v63;
              v82 = 2048;
              v83 = v64;
              v84 = 2048;
              *(_QWORD *)v85 = v65;
              *(_WORD *)&v85[8] = 2112;
              *(_QWORD *)&v85[10] = v66;
              _os_log_impl(&dword_2164CC000, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: can't connect child submix %llu for ambient submixId %llu to tapId %llu, type %@! Child submix has no effects!", buf, 0x44u);

            }
LABEL_48:
            v35 = 1;
            goto LABEL_49;
          }
        }
        v24 = *(_QWORD *)(v17 - 8);
        v13 = (Phase::Logger *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
        v25 = (_BYTE *)*((_QWORD *)v13 + 6);
        if (!v25)
          goto LABEL_38;
        v26 = *v25;
        if (!*v25)
          goto LABEL_38;
        v27 = v25 + 1;
        v28 = 0xCBF29CE484222325;
        do
        {
          v28 = 0x100000001B3 * (v28 ^ v26);
          v29 = *v27++;
          v26 = v29;
        }
        while (v29);
        if (v28 != 0x235B3F2D33EB877ALL)
        {
LABEL_38:
          v50 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v13)
                                                                                              + 80)));
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            v51 = a3[2];
            v52 = Phase::Controller::DVM::kSubmixTypeStrings[a3[7]];
            v53 = a2[2];
            GetTapTypeString(a2[17]);
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136316930;
            *(_QWORD *)&buf[4] = "DVMGraph.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1283;
            v78 = 2048;
            v79 = a1;
            v80 = 2048;
            v81 = v51;
            v82 = 2080;
            v83 = v52;
            v84 = 1024;
            *(_DWORD *)v85 = v15;
            *(_WORD *)&v85[4] = 2048;
            *(_QWORD *)&v85[6] = v53;
            *(_WORD *)&v85[14] = 2112;
            *(_QWORD *)&v85[16] = v54;
            _os_log_impl(&dword_2164CC000, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: unsupported effect type in the tail of submixId %llu, type %s, channel %d trying to connect to tapId %llu, type %@.", buf, 0x4Au);

          }
          v35 = 8;
LABEL_49:

LABEL_50:
          v13 = (Phase::Logger *)v74;
          if (v74)
            goto LABEL_51;
          return v35;
        }
        *((_QWORD *)v74 + v15++) = v24;
        v14 = a3[9];
        if (0x8E38E38E38E38E39 * ((a3[10] - v14) >> 3) <= v15)
        {
          v13 = v75;
          break;
        }
      }
    }
  }
  *((_QWORD *)a1 + 11) |= 8uLL;
  v36 = v74;
  if (v13 != v74)
  {
    v37 = 0;
    while (1)
    {
      v38 = v36[v37];
      v39 = *(float *)(*a4 + 4 * v37);
      (*(void (**)(void **__return_ptr, _QWORD *))(*a2 + 40))(__p, a2);
      if (a2[17])
        v40 = 2;
      else
        v40 = 3;
      v69 = v38;
      v70 = v40;
      v71 = v39 * a5;
      v72 = 1;
      v41 = Phase::Controller::DVM::VoiceNode::Connect(*(_QWORD *)__p[0], 1, 0, (uint64_t)&v69);
      v42 = v41;
      if (!v41)
      {
        v43 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v41)
                                                                                            + 80)));
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          v44 = a2[2];
          GetTapTypeString(a2[17]);
          v45 = (char *)objc_claimAutoreleasedReturnValue();
          v46 = Phase::Controller::DVM::kVoiceTypeStrings[*(int *)(v38 + 24)];
          v47 = *(_QWORD *)(*(_QWORD *)__p[0] + 16);
          v48 = *(_QWORD *)(v38 + 16);
          *(_DWORD *)buf = 136316930;
          *(_QWORD *)&buf[4] = "DVMGraph.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1312;
          v78 = 2048;
          v79 = a1;
          v80 = 2048;
          v81 = v44;
          v82 = 2112;
          v83 = v45;
          v84 = 2048;
          *(_QWORD *)v85 = v47;
          *(_WORD *)&v85[8] = 2080;
          *(_QWORD *)&v85[10] = v46;
          *(_WORD *)&v85[18] = 2048;
          *(_QWORD *)&v85[20] = v48;
          _os_log_impl(&dword_2164CC000, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: TapId %llu, type %@ failed to connect tapper vid %llu input to submix node %s, vid %llu output. Undoing all previously connected channels!", buf, 0x4Eu);

        }
        if (v37)
        {
          for (i = 0; i != v37; ++i)
            Phase::Controller::DVM::VoiceNode::DisconnectFromNode(*(_QWORD *)__p[0], 1, *((_QWORD *)v74 + i));
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (!v42)
        break;
      ++v37;
      v36 = v74;
      if (v37 >= (v75 - (Phase::Logger *)v74) >> 3)
      {
        v35 = 0;
        goto LABEL_50;
      }
    }
    v35 = 8;
    goto LABEL_50;
  }
  v35 = 0;
  if (v13)
  {
LABEL_51:
    v75 = v13;
    operator delete(v13);
  }
  return v35;
}

void sub_2165825C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL Phase::Controller::DVM::VoiceNode::Connect(unint64_t a1, int a2, int a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  Phase::Logger *inserted;
  uint64_t **v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  _OWORD *v25;
  _BOOL8 result;
  NSObject *v27;
  const char *v28;
  NSObject *v29;
  NSObject *v30;
  __int128 v31;
  uint64_t v32;
  _BYTE buf[12];
  __int16 v34;
  int v35;
  __int16 v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 56;
  if (a2)
    v5 = 32;
  else
    v5 = 56;
  if (a2)
    v4 = a1 + 32;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)(a1 + v5)) >> 3) <= a3)
    return 0;
  v9 = *(_DWORD *)(a4 + 12);
  v10 = *(_BYTE *)(a4 + 16);
  *(_QWORD *)&v31 = a1;
  *((_QWORD *)&v31 + 1) = __PAIR64__(v9, a3);
  LOBYTE(v32) = v10;
  v11 = *(_QWORD *)a4;
  v12 = *(_QWORD *)a4 + 32;
  if (a2 == 1)
    v13 = 56;
  else
    v13 = 32;
  if (a2 == 1)
    v12 = *(_QWORD *)a4 + 56;
  v14 = *(int *)(a4 + 8);
  v15 = *(_QWORD *)(v12 + 8);
  v16 = *(_QWORD *)(v11 + v13);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3) < v14)
    return 0;
  if (!a1)
  {
    v27 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    result = os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "DVMVoiceNode.hpp";
    v34 = 1024;
    v35 = 475;
    v36 = 2048;
    v37 = 0;
    v28 = "%25s:%-5d DvmVoiceNode@%p: trying to add a connection to a nullptr node (thisConn.mNode).";
    v29 = v27;
LABEL_24:
    _os_log_impl(&dword_2164CC000, v29, OS_LOG_TYPE_ERROR, v28, buf, 0x1Cu);
    return 0;
  }
  std::__tree<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::__erase_unique<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>((uint64_t **)(v16 + 24 * (int)v14), a1, a3);
  v17 = (uint64_t **)(*(_QWORD *)(v11 + v13) + 24 * *(int *)(a4 + 8));
  inserted = (Phase::Logger *)std::__tree<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::__find_equal<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>((uint64_t)v17, buf, (unint64_t *)&v31);
  v19 = (uint64_t **)inserted;
  if (!*(_QWORD *)inserted)
  {
    v20 = operator new(0x38uLL);
    v20[2] = v31;
    v21 = *(_QWORD *)buf;
    *((_QWORD *)v20 + 6) = v32;
    inserted = (Phase::Logger *)std::__tree<Phase::SpatialCategory>::__insert_node_at(v17, v21, v19, (uint64_t *)v20);
  }
  if (!*(_QWORD *)a4)
  {
    v30 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(inserted) + 80));
    result = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "DVMVoiceNode.hpp";
    v34 = 1024;
    v35 = 486;
    v36 = 2048;
    v37 = a1;
    v28 = "%25s:%-5d DvmVoiceNode@%p: trying to add a connection to a nullptr node (conn.mNode).";
    v29 = v30;
    goto LABEL_24;
  }
  v22 = 3 * a3;
  std::__tree<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::__erase_unique<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>((uint64_t **)(*(_QWORD *)(a1 + v5) + 8 * v22), *(_QWORD *)a4, *(_DWORD *)(a4 + 8));
  v23 = (uint64_t **)(*(_QWORD *)(a1 + v5) + 8 * v22);
  v24 = std::__tree<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::__find_equal<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>((uint64_t)v23, buf, (unint64_t *)a4);
  if (!*v24)
  {
    v25 = operator new(0x38uLL);
    v25[2] = *(_OWORD *)a4;
    *((_QWORD *)v25 + 6) = *(_QWORD *)(a4 + 16);
    std::__tree<Phase::SpatialCategory>::__insert_node_at(v23, *(uint64_t *)buf, (uint64_t **)v24, (uint64_t *)v25);
  }
  return 1;
}

uint64_t Phase::Controller::DVM::VoiceGraph::ConnectTapToSubmixes(Phase::Controller::DVM::VoiceGraph *this, unint64_t a2)
{
  unint64_t v2;
  Phase::Logger *v4;
  Phase::Logger *v5;
  uint64_t *v6;
  _BYTE *Submix;
  Phase::Logger *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t i;
  unint64_t v14;
  uint8x8_t v15;
  _QWORD *v16;
  _QWORD *j;
  unint64_t v18;
  _QWORD *v20;
  __int128 v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  NSObject *v30;
  int v31;
  void **v32;
  uint64_t v33;
  void *v34;
  void **v35;
  int v36;
  void **v37;
  uint64_t v38;
  void **v39;
  int v40;
  Phase::Logger *v41;
  uint64_t *v42;
  char v43;
  _QWORD *v44;
  NSObject *v45;
  NSObject *v46;
  void *v47;
  NSObject *v48;
  void *v49;
  unint64_t v51;
  Phase::Logger *v53;
  void *__p[2];
  char v55;
  unsigned __int8 uu[16];
  __int128 v57;
  __int128 v58;
  float v59;
  _BYTE buf[18];
  __int16 v61;
  Phase::Controller::DVM::VoiceGraph *v62;
  __int16 v63;
  unint64_t v64;
  __int16 v65;
  unint64_t v66;
  __int16 v67;
  uint64_t v68;
  char out[40];
  uint64_t v70;
  UniqueObjectId v71;

  v70 = *MEMORY[0x24BDAC8D0];
  v4 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)this + 40, a2);
  if (v4)
  {
    v5 = v4;
    if (*((_QWORD *)v4 + 10))
    {
      v51 = *((_QWORD *)v4 + 10);
      v57 = 0u;
      v58 = 0u;
      v59 = 1.0;
      v6 = (uint64_t *)*((_QWORD *)v4 + 13);
      if (v6)
      {
        v53 = v4;
        while (1)
        {
          *(_OWORD *)uu = *((_OWORD *)v6 + 1);
          v71.mStorage[0] = *(_QWORD *)uu;
          v71.mStorage[1] = v6[3];
          Submix = Phase::Controller::DVM::VoiceGraph::GetSubmix(this, v71);
          *(_OWORD *)buf = *((_OWORD *)v6 + 1);
          v8 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)this + 17, buf);
          if (!v8)
            break;
          if (!Submix[44])
          {
            v30 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v8)
                                                                                                + 80)));
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              memset(out, 0, 37);
              v2 = (unint64_t)buf;
              uuid_unparse(uu, out);
              std::string::basic_string[abi:ne180100]<0>(__p, out);
              v36 = v55;
              v37 = (void **)__p[0];
              GetTapTypeString(*((_QWORD *)v5 + 20));
              v38 = objc_claimAutoreleasedReturnValue();
              v34 = (void *)v38;
              *(_DWORD *)buf = 136316418;
              v39 = __p;
              if (v36 < 0)
                v39 = v37;
              *(_QWORD *)&buf[4] = "DVMGraph.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1410;
              v61 = 2048;
              v62 = this;
              v63 = 2080;
              v64 = (unint64_t)v39;
              v65 = 2048;
              v66 = a2;
              v67 = 2112;
              v68 = v38;
              _os_log_impl(&dword_2164CC000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: submixId %s is not configured. Failed to connect to tapId %llu, type %@", buf, 0x3Au);
              if (v55 < 0)
                operator delete(__p[0]);
              goto LABEL_67;
            }
            goto LABEL_68;
          }
          (*(void (**)(_BYTE *__return_ptr, _BYTE *))(*(_QWORD *)Submix + 40))(buf, Submix);
          v10 = *(_QWORD *)buf;
          v9 = *(_QWORD *)&buf[8];
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
            operator delete(*(void **)buf);
          }
          v11 = v6;
          if (v10 != v9)
          {
            do
            {
              v12 = 0xCBF29CE484222325;
              for (i = 16; i != 32; ++i)
                v12 = 0x100000001B3 * (v12 ^ *((char *)v11 + i));
              v14 = *((_QWORD *)&v57 + 1);
              if (*((_QWORD *)&v57 + 1))
              {
                v15 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v57 + 8));
                v15.i16[0] = vaddlv_u8(v15);
                if (v15.u32[0] > 1uLL)
                {
                  v2 = v12;
                  if (v12 >= *((_QWORD *)&v57 + 1))
                    v2 = v12 % *((_QWORD *)&v57 + 1);
                }
                else
                {
                  v2 = (*((_QWORD *)&v57 + 1) - 1) & v12;
                }
                v16 = *(_QWORD **)(v57 + 8 * v2);
                if (v16)
                {
                  for (j = (_QWORD *)*v16; j; j = (_QWORD *)*j)
                  {
                    v18 = j[1];
                    if (v18 == v12)
                    {
                      if (j[2] == v11[2] && j[3] == v11[3])
                        goto LABEL_54;
                    }
                    else
                    {
                      if (v15.u32[0] > 1uLL)
                      {
                        if (v18 >= *((_QWORD *)&v57 + 1))
                          v18 %= *((_QWORD *)&v57 + 1);
                      }
                      else
                      {
                        v18 &= *((_QWORD *)&v57 + 1) - 1;
                      }
                      if (v18 != v2)
                        break;
                    }
                  }
                }
              }
              v20 = operator new(0x40uLL);
              *v20 = 0;
              v20[1] = v12;
              v21 = *((_OWORD *)v11 + 1);
              v20[4] = 0;
              *((_OWORD *)v20 + 1) = v21;
              v20[5] = 0;
              v20[6] = 0;
              std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v20 + 4, (const void *)v11[4], v11[5], (v11[5] - v11[4]) >> 2);
              *((_DWORD *)v20 + 14) = *((_DWORD *)v11 + 14);
              v22 = (float)(unint64_t)(*((_QWORD *)&v58 + 1) + 1);
              if (!v14 || (float)(v59 * (float)v14) < v22)
              {
                v23 = (v14 & (v14 - 1)) != 0;
                if (v14 < 3)
                  v23 = 1;
                v24 = v23 | (2 * v14);
                v25 = vcvtps_u32_f32(v22 / v59);
                if (v24 <= v25)
                  v26 = v25;
                else
                  v26 = v24;
                std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)&v57, v26);
                v14 = *((_QWORD *)&v57 + 1);
                if ((*((_QWORD *)&v57 + 1) & (*((_QWORD *)&v57 + 1) - 1)) != 0)
                {
                  if (v12 >= *((_QWORD *)&v57 + 1))
                    v2 = v12 % *((_QWORD *)&v57 + 1);
                  else
                    v2 = v12;
                }
                else
                {
                  v2 = (*((_QWORD *)&v57 + 1) - 1) & v12;
                }
              }
              v27 = v57;
              v28 = *(_QWORD **)(v57 + 8 * v2);
              if (v28)
              {
                *v20 = *v28;
              }
              else
              {
                *v20 = v58;
                *(_QWORD *)&v58 = v20;
                *(_QWORD *)(v27 + 8 * v2) = &v58;
                if (!*v20)
                  goto LABEL_53;
                v29 = *(_QWORD *)(*v20 + 8);
                if ((v14 & (v14 - 1)) != 0)
                {
                  if (v29 >= v14)
                    v29 %= v14;
                }
                else
                {
                  v29 &= v14 - 1;
                }
                v28 = (_QWORD *)(v57 + 8 * v29);
              }
              *v28 = v20;
LABEL_53:
              ++*((_QWORD *)&v58 + 1);
LABEL_54:
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
LABEL_69:
          v6 = (uint64_t *)*v6;
          v5 = v53;
          if (!v6)
            goto LABEL_70;
        }
        v30 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                            + 80)));
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          memset(out, 0, 37);
          v2 = (unint64_t)buf;
          uuid_unparse(uu, out);
          std::string::basic_string[abi:ne180100]<0>(__p, out);
          v31 = v55;
          v32 = (void **)__p[0];
          GetTapTypeString(*((_QWORD *)v5 + 20));
          v33 = objc_claimAutoreleasedReturnValue();
          v34 = (void *)v33;
          *(_DWORD *)buf = 136316418;
          v35 = __p;
          if (v31 < 0)
            v35 = v32;
          *(_QWORD *)&buf[4] = "DVMGraph.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1401;
          v61 = 2048;
          v62 = this;
          v63 = 2080;
          v64 = (unint64_t)v35;
          v65 = 2048;
          v66 = a2;
          v67 = 2112;
          v68 = v33;
          _os_log_impl(&dword_2164CC000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: submixId %s does not exist. Impossible to connect to tapId %llu, type %@", buf, 0x3Au);
          if (v55 < 0)
            operator delete(__p[0]);
LABEL_67:

        }
LABEL_68:

        goto LABEL_69;
      }
LABEL_70:
      v40 = Phase::Controller::DVM::VoiceNode::Disconnect(v51, 1);
      v41 = (Phase::Logger *)Phase::Controller::DVM::VoiceNode::Disconnect(v51, 0);
      if ((v40 & v41 & 1) != 0)
      {
        *((_QWORD *)this + 11) |= 8uLL;
        v42 = (uint64_t *)v58;
        if ((_QWORD)v58)
        {
          v43 = 0;
          do
          {
            v44 = Phase::Controller::DVM::VoiceGraph::GetSubmix(this, *((UniqueObjectId *)v42 + 1));
            if (Phase::Controller::DVM::VoiceGraph::InternalConnectTapToSubmix(this, (_QWORD *)v5 + 3, v44, v42 + 4, *((float *)v42 + 14)))v43 = 8;
            v42 = (uint64_t *)*v42;
          }
          while (v42);
        }
        else
        {
          v43 = 0;
        }
      }
      else
      {
        v48 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v41)
                                                                                            + 80)));
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          GetTapTypeString(*((_QWORD *)v5 + 20));
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "DVMGraph.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1428;
          v61 = 2048;
          v62 = this;
          v63 = 2048;
          v64 = a2;
          v65 = 2112;
          v66 = (unint64_t)v49;
          _os_log_impl(&dword_2164CC000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: failed to disconnect parent nodes from input of TapId %llu, type %@", buf, 0x30u);

        }
        v43 = 8;
      }
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>>>::~__hash_table((uint64_t)&v57);
    }
    else
    {
      v46 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                          + 80)));
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        GetTapTypeString(*((_QWORD *)v5 + 20));
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "DVMGraph.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1382;
        v61 = 2048;
        v62 = this;
        v63 = 2048;
        v64 = a2;
        v65 = 2112;
        v66 = (unint64_t)v47;
        _os_log_impl(&dword_2164CC000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: failed to connect tap to submix. VoiceNode for TapId %llu, type %@ is a nullptr!", buf, 0x30u);

      }
      return 8;
    }
  }
  else
  {
    v45 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1372;
      v61 = 2048;
      v62 = this;
      v63 = 2048;
      v64 = a2;
      _os_log_impl(&dword_2164CC000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: TapId %llu does not exists!", buf, 0x26u);
    }
    return 3;
  }
  return v43;
}

void sub_216583154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>>>::~__hash_table((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::DVM::VoiceGraph::AddSubmixToTap(Phase::Controller::DVM::VoiceGraph *a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  _QWORD *v11;
  float *v12;
  uint64_t *v13;
  uint64_t result;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  _QWORD *Submix;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint8x8_t v24;
  NSObject *v25;
  _QWORD *v26;
  _QWORD *i;
  unint64_t v28;
  _QWORD *v30;
  float v31;
  float v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  __int128 v40;
  _BYTE buf[18];
  __int16 v42;
  Phase::Controller::DVM::VoiceGraph *v43;
  __int16 v44;
  unint64_t v45;
  uint64_t v46;
  UniqueObjectId v47;

  v46 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v40 = a3;
  *((_QWORD *)&v40 + 1) = a4;
  v11 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)a1 + 40, a2);
  if (!v11)
  {
    v15 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      return 3;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "DVMGraph.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1460;
    v42 = 2048;
    v43 = a1;
    v44 = 2048;
    v45 = a2;
    v16 = "%25s:%-5d graph@%p: TapId %llu does not exists!";
    v17 = v15;
    v18 = OS_LOG_TYPE_ERROR;
LABEL_6:
    _os_log_impl(&dword_2164CC000, v17, v18, v16, buf, 0x26u);
    return 3;
  }
  v12 = (float *)v11;
  v13 = v11 + 11;
  if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v11 + 11, &v40))
  {
    return 4;
  }
  *(_QWORD *)buf = a3;
  *(_QWORD *)&buf[8] = a4;
  if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)a1 + 17, buf))
  {
    v25 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      return 3;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "DVMGraph.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1471;
    v42 = 2048;
    v43 = a1;
    v44 = 2048;
    v45 = a3;
    v16 = "%25s:%-5d graph@%p: submixId %llu not added yet";
    v17 = v25;
    v18 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_6;
  }
  v47.mStorage[0] = a3;
  v47.mStorage[1] = a4;
  Submix = Phase::Controller::DVM::VoiceGraph::GetSubmix(a1, v47);
  if (Submix[7] == 2)
  {
    v20 = Submix[9];
    if (v20 == Submix[10] || !*(_QWORD *)(v20 + 64))
      return 3;
  }
  v21 = 0;
  v22 = 0xCBF29CE484222325;
  do
    v22 = 0x100000001B3 * (v22 ^ (char)buf[v21++ - 16]);
  while (v21 != 16);
  v23 = *((_QWORD *)v12 + 12);
  if (v23)
  {
    v24 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      v5 = v22;
      if (v22 >= v23)
        v5 = v22 % v23;
    }
    else
    {
      v5 = (v23 - 1) & v22;
    }
    v26 = *(_QWORD **)(*v13 + 8 * v5);
    if (v26)
    {
      for (i = (_QWORD *)*v26; i; i = (_QWORD *)*i)
      {
        v28 = i[1];
        if (v28 == v22)
        {
          if (i[2] == a3 && i[3] == a4)
            return 0;
        }
        else
        {
          if (v24.u32[0] > 1uLL)
          {
            if (v28 >= v23)
              v28 %= v23;
          }
          else
          {
            v28 &= v23 - 1;
          }
          if (v28 != v5)
            break;
        }
      }
    }
  }
  v30 = operator new(0x40uLL);
  *v30 = 0;
  v30[1] = v22;
  *((_OWORD *)v30 + 1) = v40;
  v30[5] = 0;
  v30[6] = 0;
  v30[4] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v30 + 4, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  *((_DWORD *)v30 + 14) = *(_DWORD *)(a5 + 24);
  v31 = (float)(unint64_t)(*((_QWORD *)v12 + 14) + 1);
  v32 = v12[30];
  if (!v23 || (float)(v32 * (float)v23) < v31)
  {
    v33 = 1;
    if (v23 >= 3)
      v33 = (v23 & (v23 - 1)) != 0;
    v34 = v33 | (2 * v23);
    v35 = vcvtps_u32_f32(v31 / v32);
    if (v34 <= v35)
      v36 = v35;
    else
      v36 = v34;
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v13, v36);
    v23 = *((_QWORD *)v12 + 12);
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v22 >= v23)
        v5 = v22 % v23;
      else
        v5 = v22;
    }
    else
    {
      v5 = (v23 - 1) & v22;
    }
  }
  v37 = *v13;
  v38 = *(_QWORD **)(*v13 + 8 * v5);
  if (v38)
  {
    *v30 = *v38;
LABEL_57:
    *v38 = v30;
    goto LABEL_58;
  }
  *v30 = *((_QWORD *)v12 + 13);
  *((_QWORD *)v12 + 13) = v30;
  *(_QWORD *)(v37 + 8 * v5) = v12 + 26;
  if (*v30)
  {
    v39 = *(_QWORD *)(*v30 + 8);
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v39 >= v23)
        v39 %= v23;
    }
    else
    {
      v39 &= v23 - 1;
    }
    v38 = (_QWORD *)(*v13 + 8 * v39);
    goto LABEL_57;
  }
LABEL_58:
  result = 0;
  ++*((_QWORD *)v12 + 14);
  return result;
}

void sub_21658362C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::DVM::VoiceGraph::RemoveSubmixFromTap(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD v15[2];
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  unint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v15[0] = a3;
  v15[1] = a4;
  v7 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(a1 + 320), a2);
  if (v7)
  {
    v8 = v7 + 11;
    v9 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v7 + 11, v15);
    if (v9)
    {
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>>>::erase(v8, v9);
      return 0;
    }
    v14 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v17 = "DVMGraph.mm";
      v18 = 1024;
      v19 = 1506;
      v20 = 2048;
      v21 = a1;
      v22 = 2048;
      v23 = a3;
      v12 = "%25s:%-5d graph@%p: SubmixTapGains for submixId %llu not found!";
      v13 = v14;
      goto LABEL_8;
    }
  }
  else
  {
    v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v17 = "DVMGraph.mm";
      v18 = 1024;
      v19 = 1499;
      v20 = 2048;
      v21 = a1;
      v22 = 2048;
      v23 = a2;
      v12 = "%25s:%-5d graph@%p: TapId %llu does not exists!";
      v13 = v11;
LABEL_8:
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, v12, buf, 0x26u);
    }
  }
  return 3;
}

uint64_t Phase::Controller::DVM::VoiceGraph::RemoveTap(Phase::Controller::DVM::VoiceGraph *this, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  NSObject *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  Phase::Controller::DVM::VoiceGraph *v14;
  __int16 v15;
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)this + 40, a2);
  if (v4)
  {
    v5 = (uint64_t)(v4 + 3);
    v6 = Phase::Controller::DVM::VoiceGraph::PreprocessPlayStateChange((uint64_t)this, (uint64_t)(v4 + 3), 0);
    if (v6 != 8)
    {
      if (v6 == 4)
        return 1;
      *((_QWORD *)this + 11) |= 8uLL;
      Phase::Controller::DVM::VoiceGraph::SchedulePlayStateChange(this, v5, 0, 0.0);
    }
    return 0;
  }
  else
  {
    v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315906;
      v10 = "DVMGraph.mm";
      v11 = 1024;
      v12 = 1520;
      v13 = 2048;
      v14 = this;
      v15 = 2048;
      v16 = a2;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: TapId %llu does not exists!", (uint8_t *)&v9, 0x26u);
    }
    return 3;
  }
}

_QWORD *Phase::Controller::DVM::Tap::GetAllValidVoiceNodes@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v4;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = this[7];
  if (v2)
  {
    v4 = operator new(8uLL);
    *a2 = v4;
    *v4 = v2;
    this = v4 + 1;
    a2[1] = this;
    a2[2] = this;
  }
  return this;
}

uint64_t Phase::Controller::DVM::VoiceGraph::AddRenderer(Phase::Controller::DVM::VoiceGraph *this, unint64_t a2, unint64_t a3)
{
  void **v6;
  Phase::Logger *v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  const char *v12;
  uint64_t result;
  _DWORD *v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *i;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  void *v43;
  unint64_t v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;
  __int16 v48;
  Phase::Controller::DVM::VoiceGraph *v49;
  __int16 v50;
  unint64_t v51;
  __int16 v52;
  unint64_t v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  const char *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)buf = a2;
  v6 = (void **)((char *)this + 360);
  v7 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)this + 45, (unint64_t *)buf);
  if (!v7)
  {
    *(_QWORD *)buf = a3;
    v7 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)this + 50, (unint64_t *)buf);
    if (v7)
    {
      v14 = operator new(0x78uLL);
      v14[8] = 3;
      *((_QWORD *)v14 + 5) = a2;
      *((_QWORD *)v14 + 6) = 0;
      *((_BYTE *)v14 + 56) = 0;
      v14[15] = 0;
      *((_BYTE *)v14 + 64) = 0;
      *((_BYTE *)v14 + 68) = 0;
      *((_QWORD *)v14 + 2) = a2;
      *((_QWORD *)v14 + 3) = off_24D57C2E0;
      *((_QWORD *)v14 + 9) = 0;
      *((_QWORD *)v14 + 10) = a3;
      *((_QWORD *)v14 + 12) = 0;
      *((_QWORD *)v14 + 13) = 0;
      *((_QWORD *)v14 + 11) = 0;
      v14[28] = 0;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = a2;
      v15 = *((_QWORD *)this + 46);
      if (v15)
      {
        v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          v17 = a2;
          if (v15 <= a2)
            v17 = a2 % v15;
        }
        else
        {
          v17 = (v15 - 1) & a2;
        }
        v18 = (_QWORD *)*((_QWORD *)*v6 + v17);
        if (v18)
        {
          for (i = (_QWORD *)*v18; i; i = (_QWORD *)*i)
          {
            v20 = i[1];
            if (v20 == a2)
            {
              if (i[2] == a2)
              {
                std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,void *>>>::operator()[abi:ne180100](1, (char *)v14);
                return 0;
              }
            }
            else
            {
              if (v16.u32[0] > 1uLL)
              {
                if (v20 >= v15)
                  v20 %= v15;
              }
              else
              {
                v20 &= v15 - 1;
              }
              if (v20 != v17)
                break;
            }
          }
        }
      }
      v21 = (float)(unint64_t)(*((_QWORD *)this + 48) + 1);
      v22 = *((float *)this + 98);
      if (!v15 || (float)(v22 * (float)v15) < v21)
      {
        v23 = 1;
        if (v15 >= 3)
          v23 = (v15 & (v15 - 1)) != 0;
        v24 = v23 | (2 * v15);
        v25 = vcvtps_u32_f32(v21 / v22);
        if (v24 <= v25)
          prime = (int8x8_t)v25;
        else
          prime = (int8x8_t)v24;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          v15 = *((_QWORD *)this + 46);
        }
        if (*(_QWORD *)&prime > v15)
          goto LABEL_93;
        if (*(_QWORD *)&prime >= v15)
          goto LABEL_67;
        v33 = vcvtps_u32_f32((float)*((unint64_t *)this + 48) / *((float *)this + 98));
        if (v15 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
        {
          v33 = std::__next_prime(v33);
        }
        else
        {
          v35 = 1 << -(char)__clz(v33 - 1);
          if (v33 >= 2)
            v33 = v35;
        }
        if (*(_QWORD *)&prime <= v33)
          prime = (int8x8_t)v33;
        if (*(_QWORD *)&prime >= v15)
        {
          v15 = *((_QWORD *)this + 46);
          goto LABEL_67;
        }
        if (prime)
        {
LABEL_93:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v27 = operator new(8 * *(_QWORD *)&prime);
          v28 = *v6;
          *v6 = v27;
          if (v28)
            operator delete(v28);
          v29 = 0;
          *((int8x8_t *)this + 46) = prime;
          do
            *((_QWORD *)*v6 + v29++) = 0;
          while (*(_QWORD *)&prime != v29);
          v30 = (_QWORD *)*((_QWORD *)this + 47);
          if (v30)
          {
            v31 = v30[1];
            v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(_QWORD *)&prime)
                v31 %= *(_QWORD *)&prime;
            }
            else
            {
              v31 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)*v6 + v31) = (char *)this + 376;
            v36 = (_QWORD *)*v30;
            if (*v30)
            {
              do
              {
                v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&prime)
                    v37 %= *(_QWORD *)&prime;
                }
                else
                {
                  v37 &= *(_QWORD *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*((_QWORD *)*v6 + v37))
                  {
                    *((_QWORD *)*v6 + v37) = v30;
                    goto LABEL_63;
                  }
                  *v30 = *v36;
                  *v36 = **((_QWORD **)*v6 + v37);
                  **((_QWORD **)*v6 + v37) = v36;
                  v36 = v30;
                }
                v37 = v31;
LABEL_63:
                v30 = v36;
                v36 = (_QWORD *)*v36;
                v31 = v37;
              }
              while (v36);
            }
          }
          v15 = (unint64_t)prime;
        }
        else
        {
          v43 = *v6;
          *v6 = 0;
          if (v43)
            operator delete(v43);
          v15 = 0;
          *((_QWORD *)this + 46) = 0;
        }
      }
LABEL_67:
      v38 = *((_QWORD *)v14 + 1);
      v39 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
      v39.i16[0] = vaddlv_u8(v39);
      if (v39.u32[0] > 1uLL)
      {
        if (v38 >= v15)
          v38 %= v15;
      }
      else
      {
        v38 &= v15 - 1;
      }
      v40 = *v6;
      v41 = (_QWORD *)*((_QWORD *)*v6 + v38);
      if (v41)
      {
        *(_QWORD *)v14 = *v41;
      }
      else
      {
        *(_QWORD *)v14 = *((_QWORD *)this + 47);
        *((_QWORD *)this + 47) = v14;
        v40[v38] = (char *)this + 376;
        if (!*(_QWORD *)v14)
        {
LABEL_80:
          result = 0;
          ++*((_QWORD *)this + 48);
          return result;
        }
        v42 = *(_QWORD *)(*(_QWORD *)v14 + 8);
        if (v39.u32[0] > 1uLL)
        {
          if (v42 >= v15)
            v42 %= v15;
        }
        else
        {
          v42 &= v15 - 1;
        }
        v41 = (char *)*v6 + 8 * v42;
      }
      *v41 = v14;
      goto LABEL_80;
    }
  }
  v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7)
                                                                                     + 80)));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    v44 = a2;
    v9 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v6, &v44);
    v44 = a3;
    v10 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)this + 50, &v44);
    *(_QWORD *)&buf[4] = "DVMGraph.mm";
    v11 = "rendererId already exists,";
    v46 = 1024;
    v47 = 1587;
    v12 = "";
    *(_DWORD *)buf = 136316674;
    v49 = this;
    v48 = 2048;
    if (!v9)
      v11 = "";
    v50 = 2048;
    if (!v10)
      v12 = " masterId does not exist";
    v51 = a2;
    v52 = 2048;
    v53 = a3;
    v54 = 2080;
    v55 = v11;
    v56 = 2080;
    v57 = v12;
    _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: rendererId %llu, masterId %llu: %s%s!", buf, 0x44u);
  }

  return 3;
}

void sub_216583EF0(_Unwind_Exception *a1)
{
  char *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

_QWORD *Phase::Controller::DVM::VoiceGraph::RemoveRenderer(Phase::Controller::DVM::VoiceGraph *this, unint64_t a2)
{
  _QWORD *result;
  unint64_t v5;

  v5 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)this + 45, &v5);
  if (result)
    return (_QWORD *)Phase::Controller::DVM::VoiceGraph::SetRendererPlayState((uint64_t)this, a2, 0, 0);
  return result;
}

uint64_t Phase::Controller::DVM::VoiceGraph::SetRendererPlayState(uint64_t a1, unint64_t a2, int a3, char a4)
{
  _QWORD *Renderer;
  int v9;
  NSObject *v11;
  char *v12;
  float v13;
  float v14;
  _BYTE __p[18];
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  char *v19;
  __int16 v20;
  unint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)__p = a2;
  if (std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)(a1 + 360), (unint64_t *)__p))
  {
    Renderer = Phase::Controller::DVM::VoiceGraph::GetRenderer((Phase::Controller::DVM::VoiceGraph *)a1, a2);
    v9 = Phase::Controller::DVM::VoiceGraph::PreprocessPlayStateChange(a1, (uint64_t)Renderer, a3);
    if (v9 != 8)
    {
      if (v9 == 4)
        return 1;
      *(_QWORD *)(a1 + 88) |= 8uLL;
      v13 = 0.0;
      if ((a3 & 0xFFFFFFFD) == 0 && (a4 & 1) == 0)
      {
        (*(void (**)(_BYTE *__return_ptr, _QWORD *, float))(*Renderer + 40))(__p, Renderer, 0.0);
        v14 = (double)(*(int (**)(_QWORD))(***(_QWORD ***)__p + 40))(**(_QWORD **)__p)
            / *(double *)(a1 + 8);
        if (*(_QWORD *)__p)
        {
          *(_QWORD *)&__p[8] = *(_QWORD *)__p;
          operator delete(*(void **)__p);
        }
        v13 = v14 + 0.001;
      }
      Phase::Controller::DVM::VoiceGraph::SchedulePlayStateChange((_QWORD *)a1, (uint64_t)Renderer, a3, v13);
    }
    return 0;
  }
  else
  {
    v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = Phase::Controller::DVM::kPlayStateStrings[a3];
      *(_DWORD *)__p = 136316162;
      *(_QWORD *)&__p[4] = "DVMGraph.mm";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 2537;
      v16 = 2048;
      v17 = a1;
      v18 = 2080;
      v19 = v12;
      v20 = 2048;
      v21 = a2;
      _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: state change request %s, rendererId %llu does not exist!", __p, 0x30u);
    }
    return 3;
  }
}

void sub_21658414C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::DVM::VoiceGraph::ConfigureRenderer(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  Phase::Logger *v5;
  uint64_t v6;
  uint64_t v7;
  Phase::Logger *v8;
  Phase::Logger *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t result;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  Phase::Logger *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _DWORD *VoiceNode;
  _QWORD *v36;
  uint64_t v37;
  Phase::Controller::DVM::Renderer::ChannelStrip *v38;
  unint64_t v39;
  BOOL v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t **v48;
  const void *v49;
  uint64_t **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t HeadNode;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _BOOL8 v82;
  NSObject *v83;
  char *v84;
  int v85;
  char *v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t *v89;
  unint64_t *v90;
  _QWORD *v91;
  uint64_t *v92;
  uint64_t *i;
  int v94;
  NSObject *v95;
  char *v96;
  char *v97;
  NSObject *v98;
  NSObject *v99;
  char *v100;
  char *v101;
  Phase::Logger *v102;
  unsigned __int8 v103;
  NSObject *v104;
  uint64_t v105;
  uint64_t *v106;
  unsigned int v107;
  NSObject *v108;
  NSObject *v109;
  unint64_t v110;
  void **v111;
  _QWORD *v112;
  _QWORD *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  char *v119;
  unint64_t v120;
  uint8x8_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float v125;
  _BOOL8 v126;
  _QWORD *v127;
  _QWORD *j;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  int8x8_t prime;
  void *v133;
  void *v134;
  uint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  uint8x8_t v138;
  unint64_t v139;
  uint8x8_t v140;
  uint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  unint64_t v144;
  uint8x8_t v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  char **v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  _DWORD *v156;
  _DWORD *v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  unint64_t *v173;
  unint64_t *k;
  unint64_t v175;
  unint64_t v176;
  void *v177;
  uint64_t *v178;
  _QWORD *v179;
  Phase::Logger *v180;
  int v183;
  uint64_t v185;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *__p;
  uint64_t v192;
  uint64_t v193;
  _BYTE buf[38];
  __int16 v195;
  const char *v196;
  __int16 v197;
  _BYTE v198[14];
  __int16 v199;
  int v200;
  uint64_t v201;

  v201 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)buf = a2;
  v179 = (_QWORD *)(a1 + 360);
  v5 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)(a1 + 360), (unint64_t *)buf);
  if (!v5)
  {
    v17 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1639;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = a1;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = a2;
      _os_log_impl(&dword_2164CC000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: rendererId %llu does not exist!", buf, 0x26u);
    }
    return 3;
  }
  if (!a3)
  {
    v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v5) + 80));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1646;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = a1;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = a2;
      v195 = 2080;
      v196 = "Stopped";
      v20 = "%25s:%-5d graph@%p: rendererId %llu invalid play state %s!";
      v21 = v19;
      v22 = 48;
LABEL_24:
      _os_log_impl(&dword_2164CC000, v21, OS_LOG_TYPE_ERROR, v20, buf, v22);
    }
    return 1;
  }
  v7 = *a5;
  v6 = a5[1];
  v8 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(v179, a2);
  v9 = v8;
  v11 = (char *)*((_QWORD *)v8 + 11);
  v10 = (char *)*((_QWORD *)v8 + 12);
  if (v11 != v10)
  {
    v12 = v10 - v11;
    v13 = (unint64_t *)a4;
    v14 = *(_QWORD *)(a4 + 8);
    v15 = *(_QWORD *)(a4 + 16);
    if (0x4EC4EC4EC4EC4EC5 * ((v15 - v14) >> 3) == v12 >> 5)
    {
      v16 = a1;
      goto LABEL_28;
    }
    v31 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v8) + 80));
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = (uint64_t)(*((_QWORD *)v9 + 12) - *((_QWORD *)v9 + 11)) >> 5;
      v33 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8)) >> 3);
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1667;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = a1;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = a2;
      v195 = 2048;
      v196 = (const char *)v32;
      v197 = 2048;
      *(_QWORD *)v198 = v33;
      v20 = "%25s:%-5d graph@%p: rendererId %llu and DspNode voice count mismatch [%zu,%zu]!";
      v21 = v31;
      v22 = 58;
      goto LABEL_24;
    }
    return 1;
  }
  v23 = *(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8);
  v16 = a1;
  if (v23)
  {
    v24 = 0x4EC4EC4EC4EC4EC5 * (v23 >> 3);
    v25 = *((_QWORD *)v8 + 13) - (_QWORD)v11;
    if (v24 <= v25 >> 5)
    {
      bzero(*((void **)v8 + 11), 32 * v24);
      *((_QWORD *)v9 + 12) = &v11[32 * v24];
    }
    else
    {
      if (v24 >> 59)
        std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
      v26 = v8;
      v27 = v25 >> 4;
      if (v25 >> 4 <= v24)
        v27 = v24;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
        v28 = 0x7FFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v29 = (char *)operator new(32 * v28);
      bzero(v29, 32 * v24);
      v30 = &v29[32 * v28];
      v9 = v26;
      *((_QWORD *)v26 + 11) = v29;
      *((_QWORD *)v26 + 12) = &v29[32 * v24];
      *((_QWORD *)v26 + 13) = v30;
      v16 = a1;
      if (v11)
        operator delete(v11);
    }
  }
  v13 = (unint64_t *)a4;
  v14 = *(_QWORD *)(a4 + 8);
  v15 = *(_QWORD *)(a4 + 16);
LABEL_28:
  v180 = v9;
  *((_DWORD *)v9 + 28) = (*(_QWORD *)(v14 + 64) - *(_QWORD *)(v14 + 56)) >> 4;
  *(_QWORD *)(v16 + 88) |= 8uLL;
  if (v15 != v14)
  {
    v34 = 0;
    v183 = ((unint64_t)(v6 - v7) >> 5) + 0x400000;
    while (1)
    {
      VoiceNode = Phase::Controller::DVM::VoiceGraph::CreateOrGetVoiceNode((uint64_t *)a1, *v13, *(_QWORD *)(v14 + 104 * v34), 7, v183, 0);
      v36 = VoiceNode;
      if (!VoiceNode)
        break;
      v37 = *((_QWORD *)v180 + 11);
      Phase::Controller::DVM::VoiceNode::Configure((uint64_t)VoiceNode, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), v34, v183, 0);
      v38 = (Phase::Controller::DVM::Renderer::ChannelStrip *)(v37 + 32 * v34);
      v39 = *(_QWORD *)v38;
      if (*(_QWORD *)v38)
        v40 = v39 == (_QWORD)v36;
      else
        v40 = 1;
      if (!v40)
      {
        v41 = *(_QWORD **)(v39 + 32);
        v44 = (_QWORD *)*v41;
        v42 = v41 + 1;
        v43 = v44;
        if (v44 != v42)
        {
          do
          {
            Phase::Controller::DVM::VoiceNode::Connect((unint64_t)v36, 1, 0, (uint64_t)(v43 + 4));
            v45 = (_QWORD *)v43[1];
            if (v45)
            {
              do
              {
                v46 = v45;
                v45 = (_QWORD *)*v45;
              }
              while (v45);
            }
            else
            {
              do
              {
                v46 = (_QWORD *)v43[2];
                v40 = *v46 == (_QWORD)v43;
                v43 = v46;
              }
              while (!v40);
            }
            v43 = v46;
          }
          while (v46 != v42);
          v39 = *(_QWORD *)v38;
        }
        Phase::Controller::DVM::VoiceNode::Disconnect(v39, 1);
        Phase::Controller::DVM::VoiceNode::Disconnect(v39, 0);
        Phase::Controller::DVM::VoiceGraph::SchedulePlayStateChange(a1, *(_QWORD **)v38, 0);
        Phase::Controller::DVM::VoiceGraph::SchedulePlayStateChange(a1, v36, a3);
      }
      *(_QWORD *)v38 = v36;
      v47 = v37 + 32 * v34;
      __p = 0;
      v192 = 0;
      v193 = 0;
      v49 = *(const void **)(v47 + 8);
      v48 = (uint64_t **)(v47 + 8);
      v50 = v48 + 1;
      std::vector<Phase::Controller::DVM::VoiceNode *>::__init_with_size[abi:ne180100]<Phase::Controller::DVM::VoiceNode **,Phase::Controller::DVM::VoiceNode **>(&__p, v49, (uint64_t)v48[1], ((char *)v48[1] - (_BYTE *)v49) >> 3);
      if (__p == (void *)v192)
      {
        v188 = 0;
        v189 = 0;
        v190 = 0;
      }
      else
      {
        v51 = *(_QWORD *)__p;
        v188 = 0;
        v189 = 0;
        v190 = 0;
        std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::__init_with_size[abi:ne180100]<Phase::Controller::DVM::VoiceNode::IOChannel*,Phase::Controller::DVM::VoiceNode::IOChannel*>(&v188, *(_QWORD *)(v51 + 32), *(_QWORD *)(v51 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v51 + 40) - *(_QWORD *)(v51 + 32)) >> 3));
      }
      *v50 = *v48;
      v52 = *a5;
      v53 = a5[1];
      if (*a5 == v53)
      {
LABEL_71:
        HeadNode = Phase::Controller::DVM::Renderer::ChannelStrip::GetHeadNode(v38);
        v74 = HeadNode;
        if (!HeadNode)
          goto LABEL_248;
        if (__p != (void *)v192 && *(_QWORD *)__p != HeadNode)
        {
          if (v188 == v189)
LABEL_248:
            std::terminate();
          Phase::Controller::DVM::VoiceNode::Disconnect(HeadNode, 1);
          v76 = v188;
          v75 = v189;
          if (v189 != v188)
          {
            v77 = 0;
            do
            {
              v78 = (_QWORD *)(v76 + 24 * v77);
              v81 = (_QWORD *)*v78;
              v79 = v78 + 1;
              v80 = v81;
              if (v81 != v79)
              {
                do
                {
                  v82 = Phase::Controller::DVM::VoiceNode::Connect(v74, 1, v77, (uint64_t)(v80 + 4));
                  if (!v82)
                  {
                    v83 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v82)
                                                                     + 80));
                    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
                    {
                      v84 = Phase::Controller::DVM::kVoiceTypeStrings[*(int *)(v80[4] + 24)];
                      v85 = *((_DWORD *)v80 + 10);
                      v86 = Phase::Controller::DVM::kVoiceTypeStrings[*(int *)(v74 + 24)];
                      *(_DWORD *)buf = 136316930;
                      *(_QWORD *)&buf[4] = "DVMGraph.mm";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 1796;
                      *(_WORD *)&buf[18] = 2048;
                      *(_QWORD *)&buf[20] = a1;
                      *(_WORD *)&buf[28] = 2048;
                      *(_QWORD *)&buf[30] = a2;
                      v195 = 2080;
                      v196 = v84;
                      v197 = 1024;
                      *(_DWORD *)v198 = v85;
                      *(_WORD *)&v198[4] = 2080;
                      *(_QWORD *)&v198[6] = v86;
                      v199 = 1024;
                      v200 = v77;
                      _os_log_impl(&dword_2164CC000, v83, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: rendererId %llu: unable to bridge connection(s) %s[%d] -> %s[%d]!", buf, 0x46u);
                    }
                  }
                  v87 = (_QWORD *)v80[1];
                  if (v87)
                  {
                    do
                    {
                      v88 = v87;
                      v87 = (_QWORD *)*v87;
                    }
                    while (v87);
                  }
                  else
                  {
                    do
                    {
                      v88 = (_QWORD *)v80[2];
                      v40 = *v88 == (_QWORD)v80;
                      v80 = v88;
                    }
                    while (!v40);
                  }
                  v80 = v88;
                }
                while (v88 != v79);
                v76 = v188;
                v75 = v189;
              }
              ++v77;
            }
            while (0xAAAAAAAAAAAAAAABLL * ((v75 - v76) >> 3) > v77);
          }
        }
        v89 = (unint64_t *)__p;
        v90 = (unint64_t *)v192;
        while (v89 != v90)
        {
          v91 = (_QWORD *)*v89;
          v92 = *v50;
          for (i = *v48; i != v92; ++i)
          {
            if ((_QWORD *)*i == v91)
              goto LABEL_96;
          }
          i = *v50;
LABEL_96:
          if (v92 == i)
          {
            Phase::Controller::DVM::VoiceNode::Disconnect(*v89, 1);
            Phase::Controller::DVM::VoiceNode::Disconnect((unint64_t)v91, 0);
            Phase::Controller::DVM::VoiceGraph::SchedulePlayStateChange(a1, v91, 0);
          }
          ++v89;
        }
        v94 = 1;
      }
      else
      {
        v178 = (uint64_t *)(v37 + 32 * v34);
        v54 = 0;
        v55 = v178 + 3;
        v56 = 0x400000;
        do
        {
          v57 = *(_QWORD *)(v52 + 8);
          if (*(_QWORD *)(v52 + 16) - v57 != *(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8))
            goto LABEL_248;
          v58 = v54;
          v59 = Phase::Controller::DVM::VoiceGraph::CreateOrGetVoiceNode((uint64_t *)a1, *(_QWORD *)v52, *(_QWORD *)(v57 + 104 * v34), 6, v56, 0);
          v54 = (uint64_t)v59;
          if (!v59)
            goto LABEL_105;
          Phase::Controller::DVM::VoiceNode::Configure((uint64_t)v59, *(_QWORD *)(v52 + 8), *(_QWORD *)(v52 + 16), v34, v56, 0);
          if (v58)
          {
            v60 = Phase::Controller::DVM::VoiceNode::ConnectToNode(v58, v54);
            if ((v60 & 1) == 0)
            {
              v95 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v60) + 80));
              if (!os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
                goto LABEL_105;
              v96 = Phase::Controller::DVM::kVoiceTypeStrings[*(int *)(v58 + 24)];
              v97 = Phase::Controller::DVM::kVoiceTypeStrings[*(int *)(v54 + 24)];
              *(_DWORD *)buf = 136316418;
              *(_QWORD *)&buf[4] = "DVMGraph.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1758;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = a1;
              *(_WORD *)&buf[28] = 2048;
              *(_QWORD *)&buf[30] = a2;
              v195 = 2080;
              v196 = v96;
              v197 = 2080;
              *(_QWORD *)v198 = v97;
              v98 = v95;
              goto LABEL_104;
            }
          }
          v61 = *v50;
          if ((unint64_t)*v50 >= *v55)
          {
            v63 = v61 - *v48;
            if ((unint64_t)(v63 + 1) >> 61)
              std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
            v64 = *v55 - (_QWORD)*v48;
            v65 = v64 >> 2;
            if (v64 >> 2 <= (unint64_t)(v63 + 1))
              v65 = v63 + 1;
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
              v66 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v66 = v65;
            if (v66)
              v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v55, v66);
            else
              v67 = 0;
            v68 = (uint64_t *)&v67[8 * v63];
            *v68 = v54;
            v62 = v68 + 1;
            v69 = *v50;
            v70 = *v48;
            if (*v50 != *v48)
            {
              do
              {
                v71 = *--v69;
                *--v68 = v71;
              }
              while (v69 != v70);
              v69 = *v48;
            }
            *v48 = v68;
            *v50 = v62;
            *v55 = &v67[8 * v66];
            if (v69)
              operator delete(v69);
          }
          else
          {
            *v61 = v54;
            v62 = v61 + 1;
          }
          ++v56;
          *v50 = v62;
          v52 += 32;
        }
        while (v52 != v53);
        v38 = (Phase::Controller::DVM::Renderer::ChannelStrip *)v178;
        v72 = Phase::Controller::DVM::VoiceNode::ConnectToNode(*(v62 - 1), *v178);
        if ((v72 & 1) != 0)
          goto LABEL_71;
        v99 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v72) + 80));
        if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
        {
          v100 = Phase::Controller::DVM::kVoiceTypeStrings[*(int *)(*(v62 - 1) + 24)];
          v101 = Phase::Controller::DVM::kVoiceTypeStrings[*(int *)(*v178 + 24)];
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "DVMGraph.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1772;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = a1;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = a2;
          v195 = 2080;
          v196 = v100;
          v197 = 2080;
          *(_QWORD *)v198 = v101;
          v98 = v99;
LABEL_104:
          _os_log_impl(&dword_2164CC000, v98, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: rendererId %llu: unable to connect %s -> %s!", buf, 0x3Au);
        }
LABEL_105:
        v94 = 0;
      }
      *(_QWORD *)buf = &v188;
      std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (__p)
      {
        v192 = (uint64_t)__p;
        operator delete(__p);
      }
      if (!v94)
        return 8;
      ++v34;
      v13 = (unint64_t *)a4;
      v14 = *(_QWORD *)(a4 + 8);
      if (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a4 + 16) - v14) >> 3) <= v34)
        goto LABEL_110;
    }
    v109 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1692;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = a1;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = a2;
      v195 = 1024;
      LODWORD(v196) = v34;
      _os_log_impl(&dword_2164CC000, v109, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: rendererId %llu could not create a voice for input channel %d! ChannelStrips from this channel and above won't be configured!", buf, 0x2Cu);
    }
    return 8;
  }
LABEL_110:
  v102 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::SetRendererPlayState(a1, a2, a3, 1);
  v103 = v102;
  if ((_DWORD)v102)
  {
    v104 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v102) + 224));
    if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1819;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v103;
      _os_log_impl(&dword_2164CC000, v104, OS_LOG_TYPE_ERROR, "%25s:%-5d RenderGroupMgr:: VoiceGraph::SetRendererPlayState returned retval %d", buf, 0x18u);
    }
  }
  *(_QWORD *)buf = a2;
  if (std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v179, (unint64_t *)buf))
  {
    v105 = a1;
    v106 = *(uint64_t **)(a1 + 376);
    if (v106)
    {
      v107 = 0;
      do
      {
        if (*((_DWORD *)v106 + 28) > (signed int)v107)
          v107 = *((_DWORD *)v106 + 28);
        v106 = (uint64_t *)*v106;
      }
      while (v106);
    }
    else
    {
      v107 = 0;
    }
    if (*(_QWORD *)(a1 + 800) == v107)
      goto LABEL_238;
    v110 = v107;
    v111 = (void **)(a1 + 440);
    if (*(_QWORD *)(a1 + 464))
    {
      v112 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(a1 + 440), 0xCuLL);
      if (!v112)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v113 = v112;
      v114 = 0;
      while (1)
      {
        v115 = *(_QWORD **)(v113[10] + 8 * v114);
        v116 = v115[24];
        v117 = v116 & 0xFF00000000;
        if (v114 >= v110)
        {
          if (!v117)
            std::__throw_bad_optional_access[abi:ne180100]();
          if ((_DWORD)v116 == 2)
            goto LABEL_138;
          v118 = 2;
        }
        else
        {
          if (!v117)
            std::__throw_bad_optional_access[abi:ne180100]();
          if ((_DWORD)v116 != 2)
            goto LABEL_138;
          v118 = 3;
        }
        Phase::Controller::DVM::VoiceGraph::SchedulePlayStateChange(v105, v115, v118);
        v105 = a1;
LABEL_138:
        if (++v114 == 12)
          goto LABEL_237;
      }
    }
    v119 = (char *)operator new(0x68uLL);
    *((_DWORD *)v119 + 8) = 5;
    *(_OWORD *)(v119 + 40) = xmmword_2166F7E30;
    v119[56] = 0;
    *((_DWORD *)v119 + 15) = 0;
    v119[64] = 0;
    v119[68] = 0;
    *((_QWORD *)v119 + 9) = 0;
    *((_QWORD *)v119 + 10) = 0;
    *((_QWORD *)v119 + 2) = 12;
    *((_QWORD *)v119 + 3) = &off_24D57C360;
    *((_QWORD *)v119 + 11) = 0;
    *((_QWORD *)v119 + 12) = 0;
    *(_OWORD *)v119 = xmmword_2166F7E40;
    v120 = *(_QWORD *)(a1 + 448);
    if (v120)
    {
      v121 = (uint8x8_t)vcnt_s8((int8x8_t)v120);
      v121.i16[0] = vaddlv_u8(v121);
      v122 = v121.u32[0];
      if (v121.u32[0] > 1uLL)
      {
        v123 = 12;
        if (v120 <= 0xC)
          v123 = 0xCu % *(_QWORD *)(a1 + 448);
      }
      else
      {
        v123 = ((_BYTE)v120 - 1) & 0xC;
      }
      v127 = (_QWORD *)*((_QWORD *)*v111 + v123);
      if (v127)
      {
        for (j = (_QWORD *)*v127; j; j = (_QWORD *)*j)
        {
          v129 = j[1];
          if (v129 == 12)
          {
            if (j[2] == 12)
            {
              std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,void *>>>::operator()[abi:ne180100](1, v119);
LABEL_211:
              v149 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(v111, 0xCuLL);
              if (!v149)
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              v150 = v149;
              memset(buf, 0, 32);
              std::vector<Phase::Controller::DspNodeVoice>::resize((uint64_t *)&buf[8], 0xCuLL);
              v151 = 0;
              v185 = (uint64_t)(v150 + 3);
              *(_QWORD *)buf = 0x20999FECD11286CDLL;
              v152 = (char **)(v150 + 10);
              do
              {
                v153 = *(unint64_t **)(a1 + 80);
                do
                  v154 = __ldaxr(v153);
                while (__stlxr(v154 + 1, v153));
                v155 = *(_QWORD *)&buf[8] + 104 * v151;
                *(_QWORD *)v155 = v154;
                std::vector<Phase::Controller::DspChannelIdBusValuePair>::resize((void **)(v155 + 32));
                std::vector<Phase::Controller::DspChannelIdBusValuePair>::resize((void **)(*(_QWORD *)&buf[8]
                                                                                         + 104 * v151
                                                                                         + 56));
                v156 = Phase::Controller::DVM::VoiceGraph::CreateOrGetVoiceNode((uint64_t *)a1, 0x20999FECD11286CDuLL, *(_QWORD *)(*(_QWORD *)&buf[8] + 104 * v151), 8, 6291456, 0);
                v157 = v156;
                if (!v156)
                  goto LABEL_248;
                Phase::Controller::DVM::VoiceNode::Configure((uint64_t)v156, *(uint64_t *)&buf[8], *(uint64_t *)&buf[16], v151, 6291456, 0);
                v159 = (_QWORD *)v150[11];
                v158 = v150[12];
                if ((unint64_t)v159 >= v158)
                {
                  v161 = ((char *)v159 - *v152) >> 3;
                  if ((unint64_t)(v161 + 1) >> 61)
                    std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
                  v162 = v158 - (_QWORD)*v152;
                  v163 = v162 >> 2;
                  if (v162 >> 2 <= (unint64_t)(v161 + 1))
                    v163 = v161 + 1;
                  if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF8)
                    v164 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v164 = v163;
                  if (v164)
                    v165 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v150 + 12), v164);
                  else
                    v165 = 0;
                  v166 = &v165[8 * v161];
                  *(_QWORD *)v166 = v157;
                  v160 = v166 + 8;
                  v168 = (char *)v150[10];
                  v167 = (char *)v150[11];
                  if (v167 != v168)
                  {
                    do
                    {
                      v169 = *((_QWORD *)v167 - 1);
                      v167 -= 8;
                      *((_QWORD *)v166 - 1) = v169;
                      v166 -= 8;
                    }
                    while (v167 != v168);
                    v167 = *v152;
                  }
                  v150[10] = v166;
                  v150[11] = v160;
                  v150[12] = &v165[8 * v164];
                  if (v167)
                    operator delete(v167);
                }
                else
                {
                  *v159 = v157;
                  v160 = v159 + 1;
                }
                v150[11] = v160;
                ++v151;
              }
              while (v151 != 12);
              v105 = a1;
              Phase::Controller::DVM::VoiceGraph::SchedulePlayStateChange((_QWORD *)a1, v185, 1, 0.0);
              if ((int)v110 <= 11)
              {
                v170 = v110;
                do
                  Phase::Controller::DVM::VoiceGraph::SchedulePlayStateChange(a1, *(_QWORD **)&(*v152)[8 * v170++], 2);
                while ((_DWORD)v170 != 12);
              }
              __p = &buf[8];
              std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_237:
              *(_QWORD *)(v105 + 800) = v110;
LABEL_238:
              v171 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(v105 + 440), 0xCuLL);
              if (!v171)
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              (*(void (**)(_BYTE *__return_ptr, _QWORD *))(v171[3] + 40))(buf, v171 + 3);
              v172 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(v179, a2);
              v173 = (unint64_t *)v172[11];
              for (k = (unint64_t *)v172[12]; v173 != k; v173 += 4)
              {
                v175 = *v173;
                if (*(_QWORD *)(*v173 + 64) != *(_QWORD *)(*v173 + 56))
                {
                  v176 = 0;
                  do
                  {
                    __p = *(void **)(*(_QWORD *)buf + 8 * v176);
                    v192 = 0x3F80000000000000;
                    LOBYTE(v193) = 1;
                    Phase::Controller::DVM::VoiceNode::Connect(v175, 0, v176++, (uint64_t)&__p);
                  }
                  while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v175 + 64) - *(_QWORD *)(v175 + 56)) >> 3) > v176);
                }
              }
              if (*(_QWORD *)buf)
              {
                *(_QWORD *)&buf[8] = *(_QWORD *)buf;
                operator delete(*(void **)buf);
              }
              return 0;
            }
          }
          else
          {
            if (v121.u32[0] > 1uLL)
            {
              if (v129 >= v120)
                v129 %= v120;
            }
            else
            {
              v129 &= v120 - 1;
            }
            if (v129 != v123)
              break;
          }
        }
      }
      v125 = *(float *)(a1 + 472);
      if ((float)(v125 * (float)v120) >= 1.0)
        goto LABEL_197;
      v124 = 2 * v120;
      v126 = v122 > 1;
      if (v120 < 3)
        v126 = 1;
    }
    else
    {
      v124 = 0;
      v125 = *(float *)(a1 + 472);
      v126 = 1;
    }
    v130 = v126 | v124;
    v131 = vcvtps_u32_f32(1.0 / v125);
    if (v130 <= v131)
      prime = (int8x8_t)v131;
    else
      prime = (int8x8_t)v130;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v120 = *(_QWORD *)(a1 + 448);
    }
    if (*(_QWORD *)&prime > v120)
      goto LABEL_270;
    if (*(_QWORD *)&prime >= v120)
      goto LABEL_197;
    v139 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 464) / *(float *)(a1 + 472));
    if (v120 < 3 || (v140 = (uint8x8_t)vcnt_s8((int8x8_t)v120), v140.i16[0] = vaddlv_u8(v140), v140.u32[0] > 1uLL))
    {
      v139 = std::__next_prime(v139);
    }
    else
    {
      v141 = 1 << -(char)__clz(v139 - 1);
      if (v139 >= 2)
        v139 = v141;
    }
    if (*(_QWORD *)&prime <= v139)
      prime = (int8x8_t)v139;
    if (*(_QWORD *)&prime >= v120)
    {
      v120 = *(_QWORD *)(a1 + 448);
      goto LABEL_197;
    }
    if (prime)
    {
LABEL_270:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v133 = operator new(8 * *(_QWORD *)&prime);
      v134 = *v111;
      *v111 = v133;
      if (v134)
        operator delete(v134);
      v135 = 0;
      *(int8x8_t *)(a1 + 448) = prime;
      do
        *((_QWORD *)*v111 + v135++) = 0;
      while (*(_QWORD *)&prime != v135);
      v136 = *(_QWORD **)(a1 + 456);
      if (v136)
      {
        v137 = v136[1];
        v138 = (uint8x8_t)vcnt_s8(prime);
        v138.i16[0] = vaddlv_u8(v138);
        if (v138.u32[0] > 1uLL)
        {
          if (v137 >= *(_QWORD *)&prime)
            v137 %= *(_QWORD *)&prime;
        }
        else
        {
          v137 &= *(_QWORD *)&prime - 1;
        }
        *((_QWORD *)*v111 + v137) = a1 + 456;
        v142 = (_QWORD *)*v136;
        if (*v136)
        {
          do
          {
            v143 = v142[1];
            if (v138.u32[0] > 1uLL)
            {
              if (v143 >= *(_QWORD *)&prime)
                v143 %= *(_QWORD *)&prime;
            }
            else
            {
              v143 &= *(_QWORD *)&prime - 1;
            }
            if (v143 != v137)
            {
              if (!*((_QWORD *)*v111 + v143))
              {
                *((_QWORD *)*v111 + v143) = v136;
                goto LABEL_193;
              }
              *v136 = *v142;
              *v142 = **((_QWORD **)*v111 + v143);
              **((_QWORD **)*v111 + v143) = v142;
              v142 = v136;
            }
            v143 = v137;
LABEL_193:
            v136 = v142;
            v142 = (_QWORD *)*v142;
            v137 = v143;
          }
          while (v142);
        }
      }
      v120 = (unint64_t)prime;
    }
    else
    {
      v177 = *v111;
      *v111 = 0;
      if (v177)
        operator delete(v177);
      v120 = 0;
      *(_QWORD *)(a1 + 448) = 0;
    }
LABEL_197:
    v144 = *((_QWORD *)v119 + 1);
    v145 = (uint8x8_t)vcnt_s8((int8x8_t)v120);
    v145.i16[0] = vaddlv_u8(v145);
    if (v145.u32[0] > 1uLL)
    {
      if (v144 >= v120)
        v144 %= v120;
    }
    else
    {
      v144 &= v120 - 1;
    }
    v146 = *v111;
    v147 = (_QWORD *)*((_QWORD *)*v111 + v144);
    if (v147)
    {
      *(_QWORD *)v119 = *v147;
    }
    else
    {
      *(_QWORD *)v119 = *(_QWORD *)(a1 + 456);
      *(_QWORD *)(a1 + 456) = v119;
      v146[v144] = a1 + 456;
      if (!*(_QWORD *)v119)
      {
LABEL_210:
        ++*(_QWORD *)(a1 + 464);
        goto LABEL_211;
      }
      v148 = *(_QWORD *)(*(_QWORD *)v119 + 8);
      if (v145.u32[0] > 1uLL)
      {
        if (v148 >= v120)
          v148 %= v120;
      }
      else
      {
        v148 &= v120 - 1;
      }
      v147 = (char *)*v111 + 8 * v148;
    }
    *v147 = v119;
    goto LABEL_210;
  }
  v108 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
  result = os_log_type_enabled(v108, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "DVMGraph.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1831;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = a1;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = a2;
    _os_log_impl(&dword_2164CC000, v108, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: rendererId %llu does not exist!", buf, 0x26u);
    return 0;
  }
  return result;
}

void sub_2165855C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _QWORD *v30;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,void *>>>::operator()[abi:ne180100](1, v30);
  _Unwind_Resume(a1);
}

void Phase::Controller::DVM::VoiceGraph::SchedulePlayStateChange(uint64_t a1, _QWORD *a2, int a3)
{
  int v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  uint64_t v12;
  char *v13;
  _BYTE v14[38];
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a2 + 32))(v14, a2);
  v6 = *((_DWORD *)a2 + 6);
  v7 = operator new(0x48uLL);
  *((_DWORD *)v7 + 6) = a3;
  *((_DWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 1) = a1 + 680;
  *((_QWORD *)v7 + 2) = &off_24D57C3C8;
  v8 = *(_OWORD *)&v14[16];
  *((_OWORD *)v7 + 2) = *(_OWORD *)v14;
  *((_OWORD *)v7 + 3) = v8;
  *((_DWORD *)v7 + 16) = v6;
  v9 = *(_QWORD *)(a1 + 680);
  *(_QWORD *)v7 = v9;
  *(_QWORD *)(v9 + 8) = v7;
  *(_QWORD *)(a1 + 680) = v7;
  ++*(_QWORD *)(a1 + 696);
  *((_BYTE *)a2 + 8) = 0;
  *((_DWORD *)a2 + 48) = a3;
  *((_BYTE *)a2 + 196) = 1;
  if (v6 == 1)
  {
    v10 = "Procedure";
  }
  else
  {
    v7 = (void *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
    v10 = (const char *)*((_QWORD *)v7 + 6);
  }
  v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v7) + 80));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = a2[2];
    v13 = Phase::Controller::DVM::kPlayStateStrings[a3];
    *(_DWORD *)v14 = 136316162;
    *(_QWORD *)&v14[4] = "DVMGraph.mm";
    *(_WORD *)&v14[12] = 1024;
    *(_DWORD *)&v14[14] = 2292;
    *(_WORD *)&v14[18] = 2080;
    *(_QWORD *)&v14[20] = v10;
    *(_WORD *)&v14[28] = 2048;
    *(_QWORD *)&v14[30] = v12;
    v15 = 2080;
    v16 = v13;
    _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d NRT set %s vid %llu to %s. \n", v14, 0x30u);
  }
}

uint64_t Phase::Controller::DVM::Renderer::ChannelStrip::GetHeadNode(Phase::Controller::DVM::Renderer::ChannelStrip *this)
{
  uint64_t *v1;
  uint64_t result;

  v1 = (uint64_t *)*((_QWORD *)this + 1);
  if (v1 == *((uint64_t **)this + 2))
    return *(_QWORD *)this;
  result = *v1;
  if (!*v1)
    __assert_rtn("GetHeadNode", "DVMDspNode.hpp", 346, "mPreEffects.front() != nullptr");
  return result;
}

void std::vector<Phase::Controller::DspNodeVoice>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x4EC4EC4EC4EC4EC5 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<Phase::Controller::DspNodeVoice>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 104 * a2;
    while (v3 != v7)
    {
      v3 -= 104;
      std::allocator<Phase::Controller::DspNodeVoice>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void std::vector<Phase::Controller::DspChannelIdBusValuePair>::resize(void **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;

  v2 = (char *)a1[1];
  if (v2 != *a1)
  {
    if ((unint64_t)(v2 - (_BYTE *)*a1) < 0x11)
      return;
    v3 = (uint64_t)*a1 + 16;
    goto LABEL_6;
  }
  v4 = (uint64_t)(a1 + 2);
  if (a1[2] != v2)
  {
    *(_DWORD *)v2 = 0x7FFFFFFF;
    *((_QWORD *)v2 + 1) = 0x7FEFFFFFFFFFFFFFLL;
    v3 = (uint64_t)(v2 + 16);
LABEL_6:
    a1[1] = (void *)v3;
    return;
  }
  v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>(v4, 1uLL);
  v7 = (char *)*a1;
  v6 = (char *)a1[1];
  *(_DWORD *)v5 = 0x7FFFFFFF;
  *((_QWORD *)v5 + 1) = 0x7FEFFFFFFFFFFFFFLL;
  v8 = v5 + 16;
  v10 = &v5[16 * v9];
  if (v6 != v7)
  {
    do
    {
      *((_OWORD *)v5 - 1) = *((_OWORD *)v6 - 1);
      v5 -= 16;
      v6 -= 16;
    }
    while (v6 != v7);
    v6 = (char *)*a1;
  }
  *a1 = v5;
  a1[1] = v8;
  a1[2] = v10;
  if (v6)
    operator delete(v6);
}

uint64_t Phase::Controller::DVM::VoiceGraph::ConnectSubmixToRenderer(Phase::Controller::DVM::VoiceGraph *a1, unint64_t a2, unint64_t a3, unint64_t a4, double a5)
{
  _QWORD *Submix;
  _QWORD *v11;
  uint64_t v12;
  Phase::Logger *Renderer;
  Phase::Logger *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  unsigned int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float v32;
  uint64_t i;
  unint64_t HeadNode;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t result;
  NSObject *v38;
  const char *v39;
  NSObject *v40;
  NSObject *v41;
  char *v42;
  const char *v43;
  NSObject *v44;
  uint32_t v45;
  NSObject *v46;
  _BOOL4 v47;
  char *v48;
  NSObject *v49;
  NSObject *v50;
  NSObject *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  const char *v55;
  NSObject *v56;
  os_log_type_t v57;
  uint32_t v58;
  NSObject *v59;
  char *v60;
  char *v61;
  NSObject *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  float v70;
  char v71;
  _BYTE buf[18];
  __int16 v73;
  Phase::Controller::DVM::VoiceGraph *v74;
  __int16 v75;
  unint64_t v76;
  __int16 v77;
  char *v78;
  __int16 v79;
  _BYTE v80[18];
  __int16 v81;
  unint64_t v82;
  __int16 v83;
  double v84;
  uint64_t v85;
  UniqueObjectId v86;

  v85 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)a1 + 17, buf))
  {
    v38 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      return 3;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "DVMGraph.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1932;
    v73 = 2048;
    v74 = a1;
    v75 = 2048;
    v76 = a2;
    v39 = "%25s:%-5d graph@%p: submixId %llu does not exist";
    v40 = v38;
LABEL_24:
    _os_log_impl(&dword_2164CC000, v40, OS_LOG_TYPE_ERROR, v39, buf, 0x26u);
    return 3;
  }
  v86.mStorage[0] = a2;
  v86.mStorage[1] = a3;
  Submix = Phase::Controller::DVM::VoiceGraph::GetSubmix(a1, v86);
  v11 = Submix;
  v12 = Submix[5];
  if ((v12 & 0xFF00000000) == 0)
  {
    v41 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)Submix) + 80));
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      v42 = Phase::Controller::DVM::kSubmixTypeStrings[v11[7]];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1941;
      v73 = 2048;
      v74 = a1;
      v75 = 2048;
      v76 = a2;
      v77 = 2080;
      v78 = v42;
      v43 = "%25s:%-5d graph@%p: submixId %llu, type %s is not configured";
      v44 = v41;
      v45 = 48;
LABEL_33:
      _os_log_impl(&dword_2164CC000, v44, OS_LOG_TYPE_ERROR, v43, buf, v45);
    }
    return 5;
  }
  if (!(_DWORD)v12)
  {
    v46 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)Submix) + 80));
    v47 = os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v47)
    {
      v48 = Phase::Controller::DVM::kSubmixTypeStrings[v11[7]];
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1951;
      v73 = 2048;
      v74 = a1;
      v75 = 2048;
      v76 = a2;
      v77 = 2080;
      v78 = v48;
      v79 = 2048;
      *(_QWORD *)v80 = a4;
      _os_log_impl(&dword_2164CC000, v46, OS_LOG_TYPE_DEFAULT, "%25s:%-5d graph@%p: trying to connect submixId %llu, type %s in Stopped state to rendererId %llu. No-op.", buf, 0x3Au);
      return 0;
    }
    return result;
  }
  *(_QWORD *)buf = a4;
  if (!std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)a1 + 45, (unint64_t *)buf))
  {
    v50 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      return 3;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "DVMGraph.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1957;
    v73 = 2048;
    v74 = a1;
    v75 = 2048;
    v76 = a4;
    v39 = "%25s:%-5d graph@%p: rendererId %llu does not exist";
    v40 = v50;
    goto LABEL_24;
  }
  Renderer = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::GetRenderer(a1, a4);
  v14 = Renderer;
  v15 = *((_QWORD *)Renderer + 8);
  v16 = *((_QWORD *)Renderer + 9);
  if (v15 == v16 || !*((_BYTE *)Renderer + 44))
  {
    v49 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(Renderer) + 80));
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1965;
      v73 = 2048;
      v74 = a1;
      v75 = 2048;
      v76 = a4;
      v43 = "%25s:%-5d graph@%p: rendererId %llu is not configured";
      v44 = v49;
      v45 = 38;
      goto LABEL_33;
    }
    return 5;
  }
  v17 = v16 - v15;
  v18 = v11[9];
  v19 = v11[10];
  if (0x8E38E38E38E38E39 * ((v19 - v18) >> 3) == v17 >> 5)
  {
    if (v19 == v18)
    {
      result = 0;
      *((_QWORD *)a1 + 11) |= 8uLL;
      return result;
    }
    v20 = 0;
    do
    {
      v21 = (uint64_t *)(v18 + 72 * v20);
      v23 = *v21;
      v22 = v21[1];
      if (v23 == v22)
      {
        v59 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(Renderer) + 80));
        if (!os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
          return 8;
        v61 = Phase::Controller::DVM::kSubmixTypeStrings[v11[7]];
        *(_DWORD *)buf = 136316674;
        *(_QWORD *)&buf[4] = "DVMGraph.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1986;
        v73 = 2048;
        v74 = a1;
        v75 = 2048;
        v76 = a2;
        v77 = 2080;
        v78 = v61;
        v79 = 1024;
        *(_DWORD *)v80 = v20;
        *(_WORD *)&v80[4] = 2048;
        *(_QWORD *)&v80[6] = a4;
        v55 = "%25s:%-5d graph@%p: trying to connect an empty submixId %llu, type %s, channel %d to rendererId %llu.";
        goto LABEL_45;
      }
      Renderer = (Phase::Logger *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v22 - 8) + 16))(*(_QWORD *)(v22 - 8));
      v24 = (_BYTE *)*((_QWORD *)Renderer + 6);
      if (!v24)
        goto LABEL_41;
      v25 = *v24;
      if (!*v24)
        goto LABEL_41;
      v26 = v24 + 1;
      v27 = 0xCBF29CE484222325;
      do
      {
        v27 = 0x100000001B3 * (v27 ^ v25);
        v28 = *v26++;
        v25 = v28;
      }
      while (v28);
      if (v27 != 0x235B3F2D33EB877ALL)
      {
LABEL_41:
        v59 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(Renderer) + 80));
        if (!os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
          return 8;
        v60 = Phase::Controller::DVM::kSubmixTypeStrings[v11[7]];
        *(_DWORD *)buf = 136316674;
        *(_QWORD *)&buf[4] = "DVMGraph.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1997;
        v73 = 2048;
        v74 = a1;
        v75 = 2048;
        v76 = a2;
        v77 = 2080;
        v78 = v60;
        v79 = 1024;
        *(_DWORD *)v80 = v20;
        *(_WORD *)&v80[4] = 2048;
        *(_QWORD *)&v80[6] = a4;
        v55 = "%25s:%-5d graph@%p: trying to connect submixId %llu, type %s, channel %d to rendererId %llu without a Subm"
              "ixGain voice as effect tail.";
LABEL_45:
        v56 = v59;
        v57 = OS_LOG_TYPE_ERROR;
        v58 = 64;
        goto LABEL_46;
      }
      ++v20;
      v18 = v11[9];
      v29 = v11[10];
    }
    while (0x8E38E38E38E38E39 * ((v29 - v18) >> 3) > v20);
    *((_QWORD *)a1 + 11) |= 8uLL;
    if (v29 == v18)
      return 0;
    v30 = 0;
    v31 = 0;
    for (i = 8; ; i += 72)
    {
      HeadNode = Phase::Controller::DVM::Renderer::ChannelStrip::GetHeadNode((Phase::Controller::DVM::Renderer::ChannelStrip *)(*((_QWORD *)v14 + 8) + v30));
      v35 = *(_QWORD *)(*(_QWORD *)(v11[9] + i) - 8);
      v68 = v35;
      v69 = 3;
      v32 = a5;
      v70 = v32;
      v71 = 1;
      v36 = Phase::Controller::DVM::VoiceNode::Connect(HeadNode, 1, 0, (uint64_t)&v68);
      if (!v36)
        break;
      result = 0;
      ++v31;
      v30 += 32;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v11[10] - v11[9]) >> 3) <= v31)
        return result;
    }
    v62 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v36) + 80));
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      v63 = Phase::Controller::DVM::kSubmixTypeStrings[v11[7]];
      v64 = *(_QWORD *)(v35 + 16);
      v65 = *(_QWORD *)(HeadNode + 16);
      *(_DWORD *)buf = 136317186;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2020;
      v73 = 2048;
      v74 = a1;
      v75 = 2048;
      v76 = a2;
      v77 = 2080;
      v78 = v63;
      v79 = 2048;
      *(_QWORD *)v80 = v64;
      *(_WORD *)&v80[8] = 2048;
      *(_QWORD *)&v80[10] = a4;
      v81 = 2048;
      v82 = v65;
      v83 = 2048;
      v84 = a5;
      _os_log_impl(&dword_2164CC000, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: Failed to connect submixId %llu, type %s tail node (voiceId %llu) -> rendererId %llu head node (voiceId %llu) with gain = %f. Undoing all previously connected channels!", buf, 0x58u);
    }
    if (v31)
    {
      v66 = 0;
      do
      {
        v67 = Phase::Controller::DVM::Renderer::ChannelStrip::GetHeadNode((Phase::Controller::DVM::Renderer::ChannelStrip *)(*((_QWORD *)v14 + 8) + v66));
        Phase::Controller::DVM::VoiceNode::DisconnectFromNode(v67, 1, *(_QWORD *)(*(_QWORD *)(v11[9] + i) - 8));
        v66 += 32;
        --v31;
      }
      while (v31);
    }
  }
  else
  {
    v51 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(Renderer) + 80));
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      v52 = Phase::Controller::DVM::kSubmixTypeStrings[v11[7]];
      v53 = (uint64_t)(*((_QWORD *)v14 + 9) - *((_QWORD *)v14 + 8)) >> 5;
      v54 = 0x8E38E38E38E38E39 * ((uint64_t)(v11[10] - v11[9]) >> 3);
      *(_DWORD *)buf = 136316930;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1974;
      v73 = 2048;
      v74 = a1;
      v75 = 2048;
      v76 = a2;
      v77 = 2080;
      v78 = v52;
      v79 = 2048;
      *(_QWORD *)v80 = a4;
      *(_WORD *)&v80[8] = 2048;
      *(_QWORD *)&v80[10] = v53;
      v81 = 2048;
      v82 = v54;
      v55 = "%25s:%-5d graph@%p: channel mistmatch trying to connect submixId %llu, type %s to rendererId %llu [%lu,%lu].";
      v56 = v51;
      v57 = OS_LOG_TYPE_DEFAULT;
      v58 = 78;
LABEL_46:
      _os_log_impl(&dword_2164CC000, v56, v57, v55, buf, v58);
    }
  }
  return 8;
}

uint64_t Phase::Controller::DVM::VoiceGraph::UpdateSubmixToRendererConnectionGain(Phase::Controller::DVM::VoiceGraph *this, UniqueObjectId *a2, unint64_t *a3, double a4)
{
  Phase::Logger *Submix;
  Phase::Logger *v9;
  Phase::Logger *Renderer;
  Phase::Logger *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float **v16;
  float *v17;
  Phase::Controller::DVM::Renderer::ChannelStrip *v18;
  Phase::Controller::DVM::Renderer::ChannelStrip *v19;
  float *v20;
  float **v21;
  BOOL v22;
  NSObject *v23;
  Phase::Controller::DVM::VoiceGraph *v24;
  char *v25;
  unint64_t v26;
  uint64_t result;
  NSObject *v28;
  unint64_t v29;
  const char *v30;
  NSObject *v31;
  NSObject *v32;
  unint64_t v33;
  char *v34;
  const char *v35;
  NSObject *v36;
  uint32_t v37;
  NSObject *v38;
  unint64_t v39;
  NSObject *v40;
  unint64_t v41;
  float v42;
  unint64_t v43;
  float **v44;
  _BYTE buf[18];
  __int16 v46;
  Phase::Controller::DVM::VoiceGraph *v47;
  __int16 v48;
  unint64_t v49;
  __int16 v50;
  unint64_t v51;
  __int16 v52;
  double v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  *(UniqueObjectId *)buf = *a2;
  if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)this + 17, buf))
  {
    v28 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = a2->mStorage[0];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2041;
      v46 = 2048;
      v47 = this;
      v48 = 2048;
      v49 = v29;
      v30 = "%25s:%-5d graph@%p: submixId %llu does not exist";
      v31 = v28;
LABEL_38:
      _os_log_impl(&dword_2164CC000, v31, OS_LOG_TYPE_ERROR, v30, buf, 0x26u);
    }
    return 3;
  }
  Submix = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::GetSubmix(this, *a2);
  v9 = Submix;
  if (!*((_BYTE *)Submix + 44))
  {
    v32 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(Submix) + 80));
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v33 = a2->mStorage[0];
      v34 = Phase::Controller::DVM::kSubmixTypeStrings[*((_QWORD *)v9 + 7)];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2050;
      v46 = 2048;
      v47 = this;
      v48 = 2048;
      v49 = v33;
      v50 = 2080;
      v51 = (unint64_t)v34;
      v35 = "%25s:%-5d graph@%p: submixId %llu, type %s is not configured";
      v36 = v32;
      v37 = 48;
LABEL_34:
      _os_log_impl(&dword_2164CC000, v36, OS_LOG_TYPE_ERROR, v35, buf, v37);
    }
    return 5;
  }
  *(_QWORD *)buf = *a3;
  if (!std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)this + 45, (unint64_t *)buf))
  {
    v40 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v41 = *a3;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2056;
      v46 = 2048;
      v47 = this;
      v48 = 2048;
      v49 = v41;
      v30 = "%25s:%-5d graph@%p: rendererId %llu does not exist";
      v31 = v40;
      goto LABEL_38;
    }
    return 3;
  }
  Renderer = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::GetRenderer(this, *a3);
  v11 = Renderer;
  if (*((_QWORD *)Renderer + 8) == *((_QWORD *)Renderer + 9) || !*((_BYTE *)Renderer + 44))
  {
    v38 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(Renderer) + 80));
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      v39 = *a3;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2064;
      v46 = 2048;
      v47 = this;
      v48 = 2048;
      v49 = v39;
      v35 = "%25s:%-5d graph@%p: rendererId %llu is not configured";
      v36 = v38;
      v37 = 38;
      goto LABEL_34;
    }
    return 5;
  }
  if (!*((_BYTE *)v9 + 44))
    std::terminate();
  v13 = *((_QWORD *)v9 + 9);
  v12 = *((_QWORD *)v9 + 10);
  if (v12 != v13)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v13 + 72 * v14 + 8) - 8);
      v16 = *(float ***)(v15 + 56);
      v44 = *(float ***)(v15 + 64);
      if (v16 != v44)
      {
        v43 = v14;
        do
        {
          v17 = *v16;
          if (*v16 != (float *)(v16 + 1))
          {
            do
            {
              v18 = (Phase::Controller::DVM::Renderer::ChannelStrip *)*((_QWORD *)v11 + 8);
              v19 = (Phase::Controller::DVM::Renderer::ChannelStrip *)*((_QWORD *)v11 + 9);
              while (v18 != v19)
              {
                Renderer = (Phase::Logger *)Phase::Controller::DVM::Renderer::ChannelStrip::GetHeadNode(v18);
                if (Renderer == *((Phase::Logger **)v17 + 4))
                {
                  result = 0;
                  if (v17[11] != a4)
                  {
                    v42 = a4;
                    v17[11] = v42;
                    *((_BYTE *)v17 + 48) = 1;
                    *((_QWORD *)this + 11) |= 4uLL;
                  }
                  return result;
                }
                v18 = (Phase::Controller::DVM::Renderer::ChannelStrip *)((char *)v18 + 32);
              }
              v20 = (float *)*((_QWORD *)v17 + 1);
              if (v20)
              {
                do
                {
                  v21 = (float **)v20;
                  v20 = *(float **)v20;
                }
                while (v20);
              }
              else
              {
                do
                {
                  v21 = (float **)*((_QWORD *)v17 + 2);
                  v22 = *v21 == v17;
                  v17 = (float *)v21;
                }
                while (!v22);
              }
              v17 = (float *)v21;
            }
            while (v21 != v16 + 1);
          }
          v16 += 3;
        }
        while (v16 != v44);
        v13 = *((_QWORD *)v9 + 9);
        v12 = *((_QWORD *)v9 + 10);
        v14 = v43;
      }
      ++v14;
    }
    while (0x8E38E38E38E38E39 * ((v12 - v13) >> 3) > v14);
  }
  v23 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(Renderer) + 80));
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    v24 = (Phase::Controller::DVM::VoiceGraph *)a2->mStorage[0];
    v25 = Phase::Controller::DVM::kSubmixTypeStrings[*((_QWORD *)v9 + 7)];
    v26 = *a3;
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "DVMGraph.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2103;
    v46 = 2048;
    v47 = v24;
    v48 = 2080;
    v49 = (unint64_t)v25;
    v50 = 2048;
    v51 = v26;
    v52 = 2048;
    v53 = a4;
    _os_log_impl(&dword_2164CC000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d No connection found from submixId %llu, type %s to rendererId %llu. Connection gain won't be updated to %f", buf, 0x3Au);
  }
  return 1;
}

uint64_t Phase::Controller::DVM::VoiceGraph::AddMaster(Phase::Controller::DVM::VoiceGraph *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  void **v5;
  Phase::Logger *v6;
  NSObject *v7;
  uint64_t result;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  void *v36;
  _BYTE v37[12];
  __int16 v38;
  int v39;
  __int16 v40;
  Phase::Controller::DVM::VoiceGraph *v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;

  v3 = a2;
  v44 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v37 = a2;
  v5 = (void **)((char *)this + 400);
  v6 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)this + 50, (unint64_t *)v37);
  if (!v6)
  {
    v9 = *((_QWORD *)this + 51);
    if (v9)
    {
      v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        v2 = v3;
        if (v9 <= v3)
          v2 = v3 % v9;
      }
      else
      {
        v2 = (v9 - 1) & v3;
      }
      v11 = (_QWORD *)*((_QWORD *)*v5 + v2);
      if (v11)
      {
        for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
        {
          v13 = i[1];
          if (v13 == v3)
          {
            if (i[2] == v3)
              return 0;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v2)
              break;
          }
        }
      }
    }
    v14 = operator new(0x68uLL);
    v15 = (_QWORD *)((char *)this + 416);
    *v14 = 0;
    v14[1] = v3;
    *((_DWORD *)v14 + 8) = 4;
    v14[5] = v3;
    v14[6] = 0;
    *((_BYTE *)v14 + 56) = 0;
    *((_DWORD *)v14 + 15) = 0;
    *((_BYTE *)v14 + 64) = 0;
    *((_BYTE *)v14 + 68) = 0;
    v14[9] = 0;
    v14[10] = 0;
    v14[2] = v3;
    v14[3] = &off_24D57C320;
    v16 = (float)(unint64_t)(*((_QWORD *)this + 53) + 1);
    v14[11] = 0;
    v14[12] = 0;
    v17 = *((float *)this + 108);
    if ((((float)(v17 * (float)v9) >= v16) & ~(v9 == 0)) != 0)
    {
      v3 = v2;
      goto LABEL_67;
    }
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)this + 51);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_34;
    if (*(_QWORD *)&prime < v9)
    {
      v28 = vcvtps_u32_f32((float)*((unint64_t *)this + 53) / *((float *)this + 108));
      if (v9 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)this + 51);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *v5;
          *v5 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *((int8x8_t *)this + 51) = prime;
          do
            *((_QWORD *)*v5 + v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*v15;
          if (*v15)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)*v5 + v26) = v15;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*((_QWORD *)*v5 + v32))
                  {
                    *((_QWORD *)*v5 + v32) = v25;
                    goto LABEL_59;
                  }
                  *v25 = *v31;
                  *v31 = **((_QWORD **)*v5 + v32);
                  **((_QWORD **)*v5 + v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_59:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_63;
        }
        v36 = *v5;
        *v5 = 0;
        if (v36)
          operator delete(v36);
        v9 = 0;
        *((_QWORD *)this + 51) = 0;
      }
    }
LABEL_63:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v3)
        v3 %= v9;
    }
    else
    {
      v3 &= v9 - 1;
    }
LABEL_67:
    v33 = *v5;
    v34 = (_QWORD *)*((_QWORD *)*v5 + v3);
    if (v34)
    {
      *v14 = *v34;
    }
    else
    {
      *v14 = *v15;
      *v15 = v14;
      v33[v3] = v15;
      if (!*v14)
      {
LABEL_76:
        result = 0;
        ++*((_QWORD *)this + 53);
        return result;
      }
      v35 = *(_QWORD *)(*v14 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v35 >= v9)
          v35 %= v9;
      }
      else
      {
        v35 &= v9 - 1;
      }
      v34 = (char *)*v5 + 8 * v35;
    }
    *v34 = v14;
    goto LABEL_76;
  }
  v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v6) + 80));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v37 = 136315906;
    *(_QWORD *)&v37[4] = "DVMGraph.mm";
    v38 = 1024;
    v39 = 2116;
    v40 = 2048;
    v41 = this;
    v42 = 2048;
    v43 = v3;
    _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: masterId %llu already exists!", v37, 0x26u);
  }
  return 4;
}

void sub_216586C3C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

_QWORD *Phase::Controller::DVM::VoiceGraph::RemoveMaster(Phase::Controller::DVM::VoiceGraph *this, unint64_t a2)
{
  _QWORD *result;
  unint64_t v5;

  v5 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)this + 50, &v5);
  if (result)
    return (_QWORD *)Phase::Controller::DVM::VoiceGraph::SetMasterPlayState(this, a2, 0);
  return result;
}

uint64_t Phase::Controller::DVM::VoiceGraph::SetMasterPlayState(Phase::Controller::DVM::VoiceGraph *a1, unint64_t a2, int a3)
{
  _QWORD *Master;
  int v7;
  NSObject *v9;
  char *v10;
  _BYTE v11[12];
  __int16 v12;
  int v13;
  __int16 v14;
  Phase::Controller::DVM::VoiceGraph *v15;
  __int16 v16;
  char *v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v11 = a2;
  if (std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)a1 + 50, (unint64_t *)v11))
  {
    Master = Phase::Controller::DVM::VoiceGraph::GetMaster(a1, a2);
    v7 = Phase::Controller::DVM::VoiceGraph::PreprocessPlayStateChange((uint64_t)a1, (uint64_t)Master, a3);
    if (v7 != 8)
    {
      if (v7 == 4)
        return 1;
      *((_QWORD *)a1 + 11) |= 8uLL;
      Phase::Controller::DVM::VoiceGraph::SchedulePlayStateChange(a1, (uint64_t)Master, a3, 0.0);
    }
    return 0;
  }
  else
  {
    v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = Phase::Controller::DVM::kPlayStateStrings[a3];
      *(_DWORD *)v11 = 136316162;
      *(_QWORD *)&v11[4] = "DVMGraph.mm";
      v12 = 1024;
      v13 = 2583;
      v14 = 2048;
      v15 = a1;
      v16 = 2080;
      v17 = v10;
      v18 = 2048;
      v19 = a2;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: state change request %s, masterId %llu does not exist!", v11, 0x30u);
    }
    return 3;
  }
}

uint64_t Phase::Controller::DVM::VoiceGraph::SetParameters(Phase::Controller::DVM::VoiceGraph *a1, unint64_t a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *VoiceNode;
  uint64_t result;

  if (*a4 == a4[1])
    return 0;
  VoiceNode = Phase::Controller::DVM::VoiceGraph::GetVoiceNode(a1, a2, a3);
  if (!VoiceNode)
    return 3;
  Phase::Controller::DVM::VoiceNode::SetParameters(VoiceNode, (uint64_t)a4);
  result = 0;
  *((_QWORD *)a1 + 11) |= 2uLL;
  return result;
}

_QWORD *Phase::Controller::DVM::VoiceGraph::GetVoiceNode(Phase::Controller::DVM::VoiceGraph *this, unint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  unint64_t v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v5 = std::__tree<std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>,std::__map_value_compare<std::pair<unsigned long long,long long>,std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>,std::less<std::pair<unsigned long long,long long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>>>::find<std::pair<unsigned long long,long long>>((uint64_t)this + 528, v8);
  if ((_QWORD *)((char *)this + 536) == v5)
    return 0;
  v6 = v5[6];
  if (!v6)
    return 0;
  v8[0] = a3;
  result = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)(v6 + 32), v8);
  if (result)
    return (_QWORD *)result[3];
  return result;
}

void Phase::Controller::DVM::VoiceNode::SetParameters(_QWORD *a1, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  void **v5;
  _QWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  _DWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v2 = *(_DWORD **)a2;
  v3 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v3)
  {
    v5 = (void **)(a1 + 13);
    v6 = a1 + 15;
    do
    {
      v7 = (_OWORD *)a1[13];
      v8 = (_OWORD *)a1[14];
      if (v7 == v8)
      {
        v9 = (_DWORD *)a1[13];
      }
      else
      {
        v9 = (_DWORD *)a1[13];
        while (*v9 != *v2)
        {
          v9 += 4;
          if (v9 == (_DWORD *)v8)
            goto LABEL_11;
        }
      }
      if (v9 == (_DWORD *)v8)
      {
LABEL_11:
        if ((unint64_t)v8 >= *v6)
        {
          v11 = v8 - v7;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 60)
            std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
          v13 = *v6 - (_QWORD)v7;
          if (v13 >> 3 > v12)
            v12 = v13 >> 3;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
            v14 = 0xFFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)v6, v14);
          else
            v15 = 0;
          v16 = &v15[16 * v11];
          *(_OWORD *)v16 = *(_OWORD *)v2;
          v18 = (char *)a1[13];
          v17 = (char *)a1[14];
          v19 = v16;
          if (v17 != v18)
          {
            do
            {
              *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
              v19 -= 16;
              v17 -= 16;
            }
            while (v17 != v18);
            v17 = (char *)*v5;
          }
          v10 = v16 + 16;
          a1[13] = v19;
          a1[14] = v16 + 16;
          a1[15] = &v15[16 * v14];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v8 = *(_OWORD *)v2;
          v10 = v8 + 1;
        }
        a1[14] = v10;
      }
      else
      {
        *(_OWORD *)v9 = *(_OWORD *)v2;
      }
      v2 += 4;
    }
    while (v2 != v3);
  }
}

uint64_t Phase::Controller::DVM::VoiceGraph::SetBufferParameters(Phase::Controller::DVM::VoiceGraph *a1, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  _QWORD *VoiceNode;
  uint64_t result;

  if (*a4 == a4[1])
    return 0;
  VoiceNode = Phase::Controller::DVM::VoiceGraph::GetVoiceNode(a1, a2, a3);
  if (!VoiceNode)
    return 3;
  Phase::Controller::DVM::VoiceNode::SetBufferParameters((uint64_t)VoiceNode, a4);
  result = 0;
  *((_QWORD *)a1 + 11) |= 2uLL;
  return result;
}

uint64_t Phase::Controller::DVM::VoiceNode::SetBufferParameters(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = (_QWORD *)result;
    v5 = (uint64_t *)(result + 128);
    do
    {
      v7 = v4[16];
      v6 = v4[17];
      if (v7 != v6)
      {
        while (*(_DWORD *)v7 != *(_DWORD *)v2)
        {
          v7 += 32;
          if (v7 == v6)
            goto LABEL_9;
        }
      }
      if (v7 == v6)
      {
LABEL_9:
        if (v6 >= v4[18])
        {
          result = std::vector<Phase::Controller::VoiceBufferParameter>::__push_back_slow_path<Phase::Controller::VoiceBufferParameter const&>(v5, v2);
        }
        else
        {
          *(_DWORD *)v6 = *(_DWORD *)v2;
          v8 = *(_QWORD *)(v2 + 16);
          *(_QWORD *)(v6 + 8) = *(_QWORD *)(v2 + 8);
          *(_QWORD *)(v6 + 16) = v8;
          if (v8)
          {
            v9 = (unint64_t *)(v8 + 8);
            do
              v10 = __ldxr(v9);
            while (__stxr(v10 + 1, v9));
          }
          *(_BYTE *)(v6 + 24) = *(_BYTE *)(v2 + 24);
          result = v6 + 32;
        }
        v4[17] = result;
      }
      else
      {
        *(_DWORD *)v7 = *(_DWORD *)v2;
        result = (uint64_t)std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100]((_QWORD *)(v7 + 8), (uint64_t *)(v2 + 8));
        *(_BYTE *)(v7 + 24) = *(_BYTE *)(v2 + 24);
      }
      v2 += 32;
    }
    while (v2 != v3);
  }
  return result;
}

void Phase::Controller::DVM::VoiceGraph::CallbackPlayStateChanged(Phase::Controller::DVM::VoiceGraph *a1, int a2, unint64_t a3, unint64_t a4, int a5, _QWORD *a6, int a7)
{
  Phase::Logger *Generator;
  Phase::Logger *v15;
  Phase::Logger *InstancePtr;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  _BYTE v20[22];
  uint64_t v21;
  UniqueObjectId v22;

  v21 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 0:
      *(_QWORD *)v20 = a3;
      *(_QWORD *)&v20[8] = a4;
      if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)a1 + 12, v20))return;
      Generator = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::GetGenerator(a1, a3, a4);
      break;
    case 1:
      *(_QWORD *)v20 = a3;
      *(_QWORD *)&v20[8] = a4;
      if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)a1 + 17, v20))return;
      v22.mStorage[0] = a3;
      v22.mStorage[1] = a4;
      Generator = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::GetSubmix(a1, v22);
      break;
    case 2:
      if (!std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)a1 + 40, a3))return;
      Generator = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::GetTap(a1, a3);
      break;
    case 3:
      *(_QWORD *)v20 = a3;
      if (!std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)a1 + 45, (unint64_t *)v20))return;
      Generator = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::GetRenderer(a1, a3);
      break;
    case 4:
      *(_QWORD *)v20 = a3;
      if (!std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)a1 + 50, (unint64_t *)v20))return;
      Generator = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::GetMaster(a1, a3);
      break;
    case 5:
      Generator = (Phase::Logger *)std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)a1 + 55, a3);
      if (!Generator)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v15 = (Phase::Logger *)((char *)Generator + 24);
      goto LABEL_15;
    default:
      std::terminate();
      return;
  }
  v15 = Generator;
LABEL_15:
  if (a5 != 1 || *((_DWORD *)v15 + 9))
  {
    *((_DWORD *)v15 + 9) = a5;
    if (!a5)
    {
      (*(void (**)(Phase::Logger *))(*(_QWORD *)v15 + 24))(v15);
      Phase::Controller::DVM::VoiceGraph::InternalRemoveNode((uint64_t)a1, *((_DWORD *)v15 + 2), *((_QWORD *)v15 + 2), *((_QWORD *)v15 + 3), a7);
    }
  }
  else
  {
    *((_QWORD *)v15 + 6) = *a6;
    if (!a2)
    {
      InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(Generator);
      if (*((_BYTE *)InstancePtr + 696))
      {
        v17 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                            + 688)));
        v18 = v17;
        if (a3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
        {
          v19 = *a6;
          *(_DWORD *)v20 = 134218240;
          *(_QWORD *)&v20[4] = a3;
          *(_WORD *)&v20[12] = 2048;
          *(_QWORD *)&v20[14] = v19;
          _os_signpost_emit_with_name_impl(&dword_2164CC000, v18, OS_SIGNPOST_INTERVAL_END, a3, "Phase_Generator_Start", "Generator ID %llu IO Start Time: %llu", v20, 0x16u);
        }

      }
    }
    *((_DWORD *)v15 + 9) = 1;
  }
}

void Phase::Controller::DVM::VoiceGraph::CallbackPlayStateChanged(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t **v9;
  Phase::Logger *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *VoiceNode;
  _QWORD *v16;
  uint64_t v17;
  Phase::Logger *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  int v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  NSObject *v26;
  uint64_t v27;
  void **v28;
  char *v29;
  NSObject *v30;
  void **v31;
  NSObject *v32;
  uint64_t *v33;
  BOOL v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  void **v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  void *__p[2];
  uint64_t v55;
  _BYTE buf[12];
  __int16 v57;
  int v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  void **v62;
  __int16 v63;
  char *v64;
  __int16 v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v9 = (uint64_t **)(a1 + 504);
  v10 = (Phase::Logger *)std::__tree<std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>,std::__map_value_compare<Phase::Controller::DVM::VoiceIOContext,std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>,std::less<Phase::Controller::DVM::VoiceIOContext>,true>,std::allocator<std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>>>::find<Phase::Controller::DVM::VoiceIOContext>(a1 + 504, a2);
  v11 = (uint64_t *)(a1 + 512);
  if ((Phase::Logger *)(a1 + 512) != v10
    && (v12 = *((_QWORD *)v10 + 8)) != 0
    && (*(_QWORD *)buf = *(_QWORD *)(a2 + 24),
        (v10 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)(v12 + 32), (unint64_t *)buf)) != 0)&& (v13 = *((_QWORD *)v10 + 3)) != 0)
  {
    *(_DWORD *)(v13 + 188) = a3;
    if (!a3)
    {
      v14 = std::__tree<std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>,std::__map_value_compare<Phase::Controller::DVM::VoiceIOContext,std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>,std::less<Phase::Controller::DVM::VoiceIOContext>,true>,std::allocator<std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>>>::find<Phase::Controller::DVM::VoiceIOContext>((uint64_t)v9, a2);
      VoiceNode = Phase::Controller::DVM::VoiceGraph::GetVoiceNode((Phase::Controller::DVM::VoiceGraph *)a1, *(_QWORD *)(v14[8] + 16), *(_QWORD *)(a2 + 24));
      if (VoiceNode)
      {
        v16 = VoiceNode;
        Phase::Controller::DVM::VoiceNode::Disconnect((unint64_t)VoiceNode, 1);
        Phase::Controller::DVM::VoiceNode::Disconnect((unint64_t)v16, 0);
        v17 = v16[2];
        (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v16 + 32))(buf, v16);
        v18 = (Phase::Logger *)std::__tree<std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>,std::__map_value_compare<Phase::Controller::DVM::VoiceIOContext,std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>,std::less<Phase::Controller::DVM::VoiceIOContext>,true>,std::allocator<std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>>>::find<Phase::Controller::DVM::VoiceIOContext>((uint64_t)v9, (uint64_t)buf);
        if (v11 == (uint64_t *)v18 || (v19 = (_QWORD *)*((_QWORD *)v18 + 8)) == 0)
        {
          v30 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v18)
                                                                                              + 80)));
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            Phase::Controller::DVM::VoiceNode::GetDescription((Phase::Controller::DVM::VoiceNode *)__p, v16);
            v31 = v55 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "DVMGraph.mm";
            v57 = 1024;
            v58 = 3090;
            v59 = 2048;
            v60 = a1;
            v61 = 2080;
            v62 = v31;
            _os_log_impl(&dword_2164CC000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: Trying to remove a voice node %s from a nullptr VoicePoolNode!", buf, 0x26u);
            if (SHIBYTE(v55) < 0)
              operator delete(__p[0]);
          }

        }
        else
        {
          (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v16 + 32))(buf, v16);
          v20 = (_QWORD *)*v11;
          if (*v11)
          {
            v21 = (uint64_t *)(a1 + 512);
            do
            {
              v22 = std::operator<[abi:ne180100]<std::pair<Phase::DspLayer::VoicePool *,long long>,std::pair<Phase::Controller::DVM::ProcedureBase *,long long>>((uint64_t)(v20 + 4), (uint64_t)buf);
              v23 = v20 + 1;
              if (!v22)
              {
                v23 = v20;
                v21 = v20;
              }
              v20 = (_QWORD *)*v23;
            }
            while (*v23);
            if (v21 != v11
              && (std::operator<[abi:ne180100]<std::pair<Phase::DspLayer::VoicePool *,long long>,std::pair<Phase::Controller::DVM::ProcedureBase *,long long>>((uint64_t)buf, (uint64_t)(v21 + 4)) & 1) == 0)
            {
              v24 = (uint64_t *)v21[1];
              if (v24)
              {
                do
                {
                  v25 = v24;
                  v24 = (uint64_t *)*v24;
                }
                while (v24);
              }
              else
              {
                v33 = v21;
                do
                {
                  v25 = (uint64_t *)v33[2];
                  v34 = *v25 == (_QWORD)v33;
                  v33 = v25;
                }
                while (!v34);
              }
              if (*v9 == v21)
                *v9 = v25;
              --*(_QWORD *)(a1 + 520);
              std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 512), v21);
              operator delete(v21);
            }
          }
          v35 = *(uint64_t **)(a1 + 536);
          if (v35)
          {
            v36 = v19[2];
            v37 = (uint64_t *)(a1 + 536);
            v38 = *(uint64_t **)(a1 + 536);
            do
            {
              v39 = v38[4];
              if (v39 >= v36)
              {
                if (v39 <= v36)
                {
                  if (v38[5] < v17)
                    ++v38;
                  else
                    v37 = v38;
                }
                else
                {
                  v37 = v38;
                }
              }
              else
              {
                ++v38;
              }
              v38 = (uint64_t *)*v38;
            }
            while (v38);
            if (v37 != (uint64_t *)(a1 + 536))
            {
              v40 = v37[4];
              if (v40 <= v36 && (v40 < v36 || v37[5] <= v17))
              {
                v41 = (uint64_t *)v37[1];
                if (v41)
                {
                  do
                  {
                    v42 = v41;
                    v41 = (uint64_t *)*v41;
                  }
                  while (v41);
                }
                else
                {
                  v43 = v37;
                  do
                  {
                    v42 = (uint64_t *)v43[2];
                    v34 = *v42 == (_QWORD)v43;
                    v43 = v42;
                  }
                  while (!v34);
                }
                if (*(uint64_t **)(a1 + 528) == v37)
                  *(_QWORD *)(a1 + 528) = v42;
                --*(_QWORD *)(a1 + 544);
                std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v35, v37);
                operator delete(v37);
              }
            }
          }
          v44 = (void **)(a1 + 680);
          __p[0] = __p;
          __p[1] = __p;
          v55 = 0;
          v45 = *(_QWORD **)(a1 + 688);
          if (v45 != (_QWORD *)(a1 + 680))
          {
            do
            {
              v46 = std::operator==[abi:ne180100]<std::pair<Phase::DspLayer::VoicePool *,long long>,std::pair<Phase::Controller::DVM::ProcedureBase *,long long>>((uint64_t)(v45 + 4), (uint64_t)buf);
              v47 = v45[1];
              if (v46)
              {
                if ((void **)v47 == v44)
                {
                  LOBYTE(v48) = 1;
LABEL_70:
                  v47 = a1 + 680;
                }
                else
                {
                  while (1)
                  {
                    v48 = std::operator==[abi:ne180100]<std::pair<Phase::DspLayer::VoicePool *,long long>,std::pair<Phase::Controller::DVM::ProcedureBase *,long long>>(v47 + 32, (uint64_t)buf);
                    if (!v48)
                      break;
                    v47 = *(_QWORD *)(v47 + 8);
                    if ((void **)v47 == v44)
                      goto LABEL_70;
                  }
                }
                if (v45 != (_QWORD *)v47)
                {
                  v49 = *(_QWORD **)v47;
                  if (__p != v44)
                  {
                    v50 = 1;
                    if (v49 != v45)
                    {
                      v51 = v45;
                      do
                      {
                        v51 = (_QWORD *)v51[1];
                        ++v50;
                      }
                      while (v51 != v49);
                    }
                    *(_QWORD *)(a1 + 696) -= v50;
                    v55 += v50;
                  }
                  v52 = *v45;
                  *(_QWORD *)(v52 + 8) = v49[1];
                  *(_QWORD *)v49[1] = v52;
                  v53 = __p[0];
                  *((_QWORD *)__p[0] + 1) = v45;
                  *v45 = v53;
                  __p[0] = v49;
                  v49[1] = __p;
                }
                if ((v48 & 1) == 0)
                  v47 = *(_QWORD *)(v47 + 8);
              }
              v45 = (_QWORD *)v47;
            }
            while ((void **)v47 != v44);
          }
          std::__list_imp<Phase::Controller::DVM::DspNodePlayStateCommand>::clear((uint64_t *)__p);
          (*(void (**)(_QWORD *, uint64_t))(*v19 + 56))(v19, v17);
          *(_QWORD *)(a1 + 88) |= 8uLL;
        }
      }
      else
      {
        v32 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "DVMGraph.mm";
          v57 = 1024;
          v58 = 3078;
          v59 = 2048;
          v60 = a1;
          _os_log_impl(&dword_2164CC000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d graph@%p: Trying to remove a nullptr VoiceNode!", buf, 0x1Cu);
        }
      }
    }
  }
  else if (a3)
  {
    v26 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10)
                                                                                        + 80)));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      if (*(_DWORD *)(a2 + 16))
        std::terminate();
      v27 = *(_QWORD *)a2;
      v28 = *(void ***)(a2 + 8);
      v29 = Phase::Controller::DVM::kPlayStateStrings[a3];
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      v57 = 1024;
      v58 = 2784;
      v59 = 2048;
      v60 = v27;
      v61 = 2048;
      v62 = v28;
      v63 = 2080;
      v64 = v29;
      v65 = 1024;
      v66 = a5;
      _os_log_impl(&dword_2164CC000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d VoiceGraph::CallbackPlayStateChanged vNode [VoicePool(%p):%llu] is null but PlayState is not stopped (%s). Operation result: %hhi", buf, 0x36u);
    }

  }
}

void sub_2165879F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::DVM::VoiceGraph::CallbackVoiceFinishedPlaying(Phase::Controller::DVM::VoiceGraph *this, Phase::DspLayer::VoicePool *a2, unint64_t a3)
{
  unint64_t *v4;
  unint64_t v6[2];

  v6[0] = (unint64_t)a2;
  v6[1] = a3;
  v4 = std::__tree<std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>,std::__map_value_compare<std::pair<unsigned long long,long long>,std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>,std::less<std::pair<unsigned long long,long long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>>>::find<std::pair<unsigned long long,long long>>((uint64_t)this + 752, v6);
  if ((unint64_t *)((char *)this + 760) == v4)
    std::terminate();
  return Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(this, v4[6], v4[7], 0);
}

void Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(Phase::Controller::DVM::VoiceGraph *this@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  Phase::Logger *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char **v15;
  char *v16;
  const char **v17;
  size_t v18;
  _QWORD *i;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *j;
  uint64_t **k;
  _QWORD *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  Phase::Logger *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  char v59;
  _BYTE v60[152];
  char *v61;
  char *v62;
  _QWORD v63[3];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v63[0] = this;
  v63[1] = a2;
  if (*((_QWORD *)this + 20))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 19);
    if (v2)
    {
      v50 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v52 = (void *)*MEMORY[0x24BEDB7F0];
      v48 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v46 = MEMORY[0x24BEDB848] + 16;
      do
      {
        Phase::Controller::DVM::Submix::GetAllValidVoiceNodes((Phase::Controller::DVM::Submix *)(v2 + 4), &v61);
        Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)const::$_0::operator()(v63, (uint64_t)v61, (uint64_t)v62);
        if ((*(_BYTE *)(*(_QWORD *)(Phase::Logger::GetInstancePtr(v3) + 80) + 8) & 2) != 0)
        {
          v4 = v61;
          v5 = v62;
          if (v61 == v62)
          {
            v10 = 0;
            v8 = 0;
          }
          else
          {
            v6 = 0;
            v7 = 0;
            v8 = 0;
            do
            {
              v9 = Phase::Controller::DVM::kVoiceTypeStrings[*(int *)(*(_QWORD *)v4 + 24)];
              if (v6 >= v7)
              {
                v11 = (v6 - v8) >> 3;
                v12 = v11 + 1;
                if ((unint64_t)(v11 + 1) >> 61)
                  std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
                if ((v7 - v8) >> 2 > v12)
                  v12 = (v7 - v8) >> 2;
                if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFF8)
                  v13 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v13 = v12;
                if (v13)
                {
                  if (v13 >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v14 = (char *)operator new(8 * v13);
                }
                else
                {
                  v14 = 0;
                }
                v15 = (char **)&v14[8 * v11];
                *v15 = v9;
                v10 = (char *)(v15 + 1);
                if (v6 != v8)
                {
                  do
                  {
                    v16 = (char *)*((_QWORD *)v6 - 1);
                    v6 -= 8;
                    *--v15 = v16;
                  }
                  while (v6 != v8);
                  v6 = v8;
                }
                v8 = (char *)v15;
                v7 = &v14[8 * v13];
                if (v6)
                  operator delete(v6);
              }
              else
              {
                *(_QWORD *)v6 = v9;
                v10 = v6 + 8;
              }
              v4 += 8;
              v6 = v10;
            }
            while (v4 != v5);
          }
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v54);
          if (v8 != v10)
          {
            v17 = (const char **)v8;
            do
            {
              v18 = strlen(*v17);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)*v17, v18);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)", ", 2);
              ++v17;
            }
            while (v17 != (const char **)v10);
          }
          v54 = v52;
          *(void **)((char *)&v54 + *((_QWORD *)v52 - 3)) = v50;
          v56 = v48;
          v57 = v46;
          if (v59 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x2199F9CD4](v60);
          if (v8)
            operator delete(v8);
        }
        if (v61)
        {
          v62 = v61;
          operator delete(v61);
        }
        v2 = (_QWORD *)*v2;
      }
      while (v2);
    }
  }
  if (*((_QWORD *)this + 43))
  {
    for (i = (_QWORD *)*((_QWORD *)this + 42); i; i = (_QWORD *)*i)
    {
      v20 = i[10];
      if (v20)
      {
        v21 = operator new(8uLL);
        *v21 = v20;
        v22 = (uint64_t)(v21 + 1);
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
      Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)const::$_0::operator()(v63, (uint64_t)v21, v22);
      if (v21)
        operator delete(v21);
    }
  }
  if (*((_QWORD *)this + 48))
  {
    for (j = (_QWORD *)*((_QWORD *)this + 47); j; j = (_QWORD *)*j)
    {
      Phase::Controller::DVM::Renderer::GetAllValidVoiceNodes((Phase::Controller::DVM::Renderer *)(j + 3), &v54);
      Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)const::$_0::operator()(v63, (uint64_t)v54, (uint64_t)v55);
      if (v54)
      {
        v55 = v54;
        operator delete(v54);
      }
    }
  }
  if (*((_QWORD *)this + 53))
  {
    for (k = (uint64_t **)*((_QWORD *)this + 52); k; k = (uint64_t **)*k)
    {
      v54 = 0;
      v55 = 0;
      v56 = 0;
      std::vector<Phase::Controller::DVM::VoiceNode *>::__init_with_size[abi:ne180100]<Phase::Controller::DVM::VoiceNode **,Phase::Controller::DVM::VoiceNode **>(&v54, k[10], (uint64_t)k[11], k[11] - k[10]);
      Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)const::$_0::operator()(v63, (uint64_t)v54, (uint64_t)v55);
      if (v54)
      {
        v55 = v54;
        operator delete(v54);
      }
    }
  }
  if (*((_QWORD *)this + 58))
  {
    v25 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)this + 55, 0xCuLL);
    if (!v25)
      std::terminate();
    (*(void (**)(void **__return_ptr, _QWORD *))(v25[3] + 40))(&v54, v25 + 3);
    Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)const::$_0::operator()(v63, (uint64_t)v54, (uint64_t)v55);
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
  }
  v26 = (uint64_t *)a2[1];
  v27 = 126 - 2 * __clz(((uint64_t)v26 - *a2) >> 3);
  if (v26 == (uint64_t *)*a2)
    v28 = 0;
  else
    v28 = v27;
  v29 = (Phase::Logger *)std::__introsort<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **,false>(*a2, v26, v28, 1);
  if ((*(_BYTE *)(*(_QWORD *)(Phase::Logger::GetInstancePtr(v29) + 80) + 8) & 1) != 0)
  {
    v30 = *a2;
    v53 = a2[1];
    if (v53 != *a2)
    {
      v49 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v51 = (void *)*MEMORY[0x24BEDB7F0];
      v47 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v45 = MEMORY[0x24BEDB848] + 16;
      do
      {
        v31 = *(_QWORD **)(*(_QWORD *)v30 + 48);
        if (v31)
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          do
          {
            if (v33 >= v34)
            {
              v36 = (v33 - v32) >> 3;
              v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 61)
                std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
              if ((v34 - v32) >> 2 > v37)
                v37 = (v34 - v32) >> 2;
              if ((unint64_t)(v34 - v32) >= 0x7FFFFFFFFFFFFFF8)
                v38 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v38 = v37;
              if (v38)
              {
                if (v38 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v39 = (char *)operator new(8 * v38);
              }
              else
              {
                v39 = 0;
              }
              v40 = &v39[8 * v36];
              *(_QWORD *)v40 = v31[2];
              v35 = v40 + 8;
              while (v33 != v32)
              {
                v41 = *((_QWORD *)v33 - 1);
                v33 -= 8;
                *((_QWORD *)v40 - 1) = v41;
                v40 -= 8;
              }
              v34 = &v39[8 * v38];
              if (v32)
                operator delete(v32);
              v32 = v40;
            }
            else
            {
              *(_QWORD *)v33 = v31[2];
              v35 = v33 + 8;
            }
            v31 = (_QWORD *)*v31;
            v33 = v35;
          }
          while (v31);
        }
        else
        {
          v32 = 0;
          v35 = 0;
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v54);
        if (v32 != v35)
        {
          v42 = v32;
          do
          {
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)" ", 1);
            v42 += 8;
          }
          while (v42 != v35);
        }
        v54 = v51;
        *(void **)((char *)&v54 + *((_QWORD *)v51 - 3)) = v49;
        v56 = v47;
        v57 = v45;
        if (v59 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x2199F9CD4](v60);
        if (v32)
          operator delete(v32);
        v30 += 8;
      }
      while (v30 != v53);
    }
  }
}

void sub_21658805C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v20;

  if (__p)
    operator delete(__p);
  v20 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)const::$_0::operator()(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char **v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD v26[4];

  if (a2 != a3)
  {
    v4 = a2;
    v6 = *a1 + 504;
    v7 = *a1 + 512;
    do
    {
      (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v4 + 32))(v26);
      v8 = std::__tree<std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>,std::__map_value_compare<Phase::Controller::DVM::VoiceIOContext,std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>,std::less<Phase::Controller::DVM::VoiceIOContext>,true>,std::allocator<std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>>>::find<Phase::Controller::DVM::VoiceIOContext>(v6, (uint64_t)v26);
      if ((_QWORD *)v7 == v8 || (v9 = v8[8]) == 0)
        std::terminate();
      v10 = (char **)a1[1];
      v11 = *v10;
      v12 = v10[1];
      if (*v10 == v12)
      {
LABEL_9:
        v13 = v10[1];
      }
      else
      {
        v13 = *v10;
        v14 = *v10;
        while (*(_QWORD *)v14 != v9)
        {
          v14 += 8;
          v13 += 8;
          if (v14 == v12)
            goto LABEL_9;
        }
      }
      if (v12 == v13)
      {
        v15 = (unint64_t)v10[2];
        if ((unint64_t)v12 >= v15)
        {
          v17 = (v12 - v11) >> 3;
          if ((unint64_t)(v17 + 1) >> 61)
            std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
          v18 = v15 - (_QWORD)v11;
          v19 = v18 >> 2;
          if (v18 >> 2 <= (unint64_t)(v17 + 1))
            v19 = v17 + 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          if (v20)
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v10 + 2), v20);
          else
            v21 = 0;
          v22 = &v21[8 * v17];
          *(_QWORD *)v22 = v9;
          v16 = v22 + 8;
          v24 = *v10;
          v23 = v10[1];
          if (v23 != *v10)
          {
            do
            {
              v25 = *((_QWORD *)v23 - 1);
              v23 -= 8;
              *((_QWORD *)v22 - 1) = v25;
              v22 -= 8;
            }
            while (v23 != v24);
            v23 = *v10;
          }
          *v10 = v22;
          v10[1] = v16;
          v10[2] = &v21[8 * v20];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(_QWORD *)v12 = v9;
          v16 = v12 + 8;
        }
        v10[1] = v16;
      }
      v4 += 8;
    }
    while (v4 != a3);
  }
}

void Phase::Controller::DVM::Renderer::GetAllValidVoiceNodes(Phase::Controller::DVM::Renderer *this@<X0>, void **a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 8);
  v3 = (uint64_t *)*((_QWORD *)this + 9);
  if (v2 != v3)
  {
    v5 = (uint64_t)(a2 + 2);
    do
    {
      std::vector<Phase::Controller::DVM::VoiceNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Phase::Controller::DVM::VoiceNode * const*>,std::__wrap_iter<Phase::Controller::DVM::VoiceNode * const*>>((uint64_t)a2, (uint64_t)a2[1], (char *)v2[1], (char *)v2[2], (v2[2] - v2[1]) >> 3);
      v6 = *v2;
      if (*v2)
      {
        v8 = a2[1];
        v7 = (unint64_t)a2[2];
        if ((unint64_t)v8 >= v7)
        {
          v10 = ((char *)v8 - (_BYTE *)*a2) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
            std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
          v11 = v7 - (_QWORD)*a2;
          v12 = v11 >> 2;
          if (v11 >> 2 <= (unint64_t)(v10 + 1))
            v12 = v10 + 1;
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
          {
            v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5, v13);
            v6 = *v2;
          }
          else
          {
            v14 = 0;
          }
          v15 = &v14[8 * v10];
          *(_QWORD *)v15 = v6;
          v9 = v15 + 8;
          v17 = (char *)*a2;
          v16 = (char *)a2[1];
          if (v16 != *a2)
          {
            do
            {
              v18 = *((_QWORD *)v16 - 1);
              v16 -= 8;
              *((_QWORD *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            v16 = (char *)*a2;
          }
          *a2 = v15;
          a2[1] = v9;
          a2[2] = &v14[8 * v13];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v8 = v6;
          v9 = v8 + 1;
        }
        a2[1] = v9;
      }
      v2 += 4;
    }
    while (v2 != v3);
  }
}

void sub_2165883F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::Controller::DVM::Master::GetAllValidVoiceNodes@<X0>(Phase::Controller::DVM::Master *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<Phase::Controller::DVM::VoiceNode *>::__init_with_size[abi:ne180100]<Phase::Controller::DVM::VoiceNode **,Phase::Controller::DVM::VoiceNode **>(a2, *((const void **)this + 7), *((_QWORD *)this + 8), (uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
}

_QWORD *Phase::Controller::DVM::VoiceNode::GetDescription(Phase::Controller::DVM::VoiceNode *this, _DWORD *a2)
{
  const char *v4;
  int v5;
  void **v6;
  void *v8[4];
  void *__p[2];
  char v10;
  char __str[256];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = Phase::Controller::DVM::kVoiceTypeStrings[a2[6]];
  v5 = a2[4];
  (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)a2 + 32))(v8, a2);
  Phase::Controller::DVM::VoiceIOContext::GetDescription((Phase::Controller::DVM::VoiceIOContext *)__p, (uint64_t)v8);
  if (v10 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  snprintf(__str, 0x100uLL, "<voice %sId %d, %s, order 0x%x>", v4, v5, (const char *)v6, a2[7]);
  if (v10 < 0)
    operator delete(__p[0]);
  return std::string::basic_string[abi:ne180100]<0>(this, __str);
}

BOOL Phase::Controller::DVM::VoiceGraph::RouteConnections(uint64_t a1, uint64_t **a2)
{
  uint64_t *i;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *j;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  NSObject *v34;
  _DWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  NSObject *v44;
  int v45;
  _BOOL8 result;
  NSObject *v47;
  const char *v48;
  NSObject *v49;
  uint32_t v50;
  const char *v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  char *v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t **v61;
  _BYTE buf[18];
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  char *v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  const char *v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  for (i = *a2; i != a2[1]; ++i)
  {
    if (!*i)
    {
      v47 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 80));
      result = os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3122;
      v48 = "%25s:%-5d VoicePoolNode is nullptr!";
LABEL_70:
      v49 = v47;
      v50 = 18;
      goto LABEL_77;
    }
    v4 = 0;
    v5 = 0;
    v6 = (_QWORD *)(*i + 48);
    while (1)
    {
      v6 = (_QWORD *)*v6;
      if (!v6)
        break;
      v7 = v4;
      v4 = v6[3];
      if (!v4)
      {
        v47 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 80));
        result = os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "DVMGraph.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3131;
        v48 = "%25s:%-5d Voice Node is nullptr!";
        goto LABEL_70;
      }
      v8 = *(_DWORD *)(v4 + 28) < v5;
      v5 = *(_DWORD *)(v4 + 28);
      if (v8)
      {
        if (v7)
        {
          v51 = Phase::Controller::DVM::kVoiceTypeStrings[*(int *)(v7 + 24)];
          v52 = *(_QWORD *)(v7 + 16);
        }
        else
        {
          v52 = -1;
          v51 = "nullptr";
        }
        v53 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 80));
        result = os_log_type_enabled(v53, OS_LOG_TYPE_ERROR);
        if (result)
        {
          v54 = *(_QWORD *)(v4 + 16);
          v55 = Phase::Controller::DVM::kVoiceTypeStrings[*(int *)(v4 + 24)];
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "DVMGraph.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3142;
          v63 = 2048;
          v64 = v54;
          v65 = 2080;
          v66 = v55;
          v67 = 2048;
          v68 = v52;
          v69 = 2080;
          v70 = v51;
          v48 = "%25s:%-5d Voice node with vid %llu, type %s is in wrong order! Prev. node vid %llu and type %s";
          v49 = v53;
          v50 = 58;
          goto LABEL_77;
        }
        return result;
      }
    }
  }
  bzero(*(void **)(a1 + 592), 8 * (*(_DWORD *)(a1 + 612) / 64));
  bzero(*(void **)(a1 + 600), 4 * *(int *)(a1 + 612));
  *(_QWORD *)(a1 + 616) = 0;
  bzero(*(void **)(a1 + 624), 8 * (*(_DWORD *)(a1 + 644) / 64));
  bzero(*(void **)(a1 + 632), 4 * *(int *)(a1 + 644));
  *(_QWORD *)(a1 + 648) = 0;
  v10 = *a2;
  v11 = a2[1];
  if (*a2 != v11)
  {
    v61 = a2;
    v12 = *a2;
    do
    {
      for (j = *(_QWORD **)(*v12 + 48); j; j = (_QWORD *)*j)
      {
        v14 = (_QWORD *)j[3];
        v15 = v14[8] - v14[7];
        if (v15)
        {
          v16 = v15 / 24;
          v17 = (_QWORD *)v14[10];
          if (v16 <= 1)
            v16 = 1;
          do
          {
            *v17++ = 1;
            --v16;
          }
          while (v16);
        }
      }
      ++v12;
    }
    while (v12 != v11);
    do
    {
      if (*(_DWORD *)(*v10 + 24) == 1)
      {
        v18 = *(_QWORD **)(*v10 + 48);
        if (v18)
        {
          while (1)
          {
            v19 = v18[3];
            if (*(_DWORD *)(v19 + 24) != 1 || *(_QWORD *)(v19 + 32) != *(_QWORD *)(v19 + 40))
              goto LABEL_83;
            if (*(_QWORD *)(v19 + 64) != *(_QWORD *)(v19 + 56))
              break;
LABEL_34:
            v18 = (_QWORD *)*v18;
            if (!v18)
              goto LABEL_35;
          }
          v20 = 0;
          v21 = 0;
          while (1)
          {
            if ((v21 & 0x80000000) != 0
              || (v22 = *(_QWORD *)(v19 + 80),
                  v21 >= (unint64_t)((*(_QWORD *)(v19 + 88) - v22) >> 3)))
            {
              __assert_rtn("GetOutputChannel", "DVMVoiceNode.hpp", 618, "outputIndex >= 0 && outputIndex < mOutputChannels.size()");
            }
            v23 = *(_QWORD *)(v22 + 8 * v21);
            if ((_DWORD)v23 != 1 && (_DWORD)v23 != 3)
              break;
            v9 = Phase::Controller::DVM::ChannelAllocator::ReserveChannel((Phase::Controller::DVM::ChannelAllocator *)(a1 + 592), 1);
            v25 = (_DWORD *)(*(_QWORD *)(v19 + 80) + v20);
            *v25 = 3;
            v25[1] = v9;
            ++v21;
            v20 += 8;
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v19 + 64) - *(_QWORD *)(v19 + 56)) >> 3) <= v21)
              goto LABEL_34;
          }
LABEL_83:
          std::terminate();
        }
      }
LABEL_35:
      ++v10;
    }
    while (v10 != v11);
    v26 = *v61;
    v58 = v61[1];
    if (*v61 != v58)
    {
      while (1)
      {
        v59 = v26;
        v27 = *v26;
        v28 = *(_DWORD *)(*v26 + 24);
        if (v28 != 1 && v28 != 8)
        {
          v30 = *(_QWORD **)(v27 + 48);
          if (v30)
            break;
        }
LABEL_50:
        v26 = v59 + 1;
        if (v59 + 1 == v58)
          goto LABEL_51;
      }
      while (1)
      {
        v31 = v30[3];
        if (*(_DWORD *)(v31 + 24) == 1)
          goto LABEL_83;
        if (*(_QWORD *)(v31 + 64) != *(_QWORD *)(v31 + 56))
        {
          v32 = 0;
          v33 = 0;
          do
          {
            v9 = Phase::Controller::DVM::ChannelAllocator::ReserveChannel((Phase::Controller::DVM::ChannelAllocator *)(a1 + 624), 1);
            if ((v9 & 0x80000000) != 0)
            {
              v34 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v9) + 80));
              v9 = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
              if ((_DWORD)v9)
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "DVMGraph.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3257;
                _os_log_impl(&dword_2164CC000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d No more channels are available on the mix bus. Reserved channels will be reused in order to prevent a crash. Audio output will have errors.", buf, 0x12u);
                v9 = 0;
              }
            }
            v35 = (_DWORD *)(*(_QWORD *)(v31 + 80) + v32);
            *v35 = 1;
            v35[1] = v9;
            ++v33;
            v32 += 8;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v31 + 64) - *(_QWORD *)(v31 + 56)) >> 3) > v33);
        }
        v30 = (_QWORD *)*v30;
        if (!v30)
          goto LABEL_50;
      }
    }
  }
LABEL_51:
  if (!*(_QWORD *)(a1 + 464))
  {
LABEL_65:
    v44 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v9)
                                                                                        + 80)));
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      v45 = *(_DWORD *)(a1 + 648);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "DVMGraph.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3387;
      v63 = 1024;
      LODWORD(v64) = v45;
      _os_log_impl(&dword_2164CC000, v44, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Routed connections: %d mix busses used!", buf, 0x18u);
    }

    return 1;
  }
  if (std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(a1 + 440), 0xCuLL))
  {
    v36 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(a1 + 440), 0xCuLL);
    if (!v36)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    (*(void (**)(_BYTE *__return_ptr, _QWORD *))(v36[3] + 40))(buf, v36 + 3);
    v9 = *(_QWORD *)buf;
    v37 = *(_QWORD *)&buf[8];
    if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
    {
      v38 = 0;
      v39 = *(_QWORD *)buf;
      do
      {
        v40 = *(_QWORD *)(*(_QWORD *)v39 + 64) - *(_QWORD *)(*(_QWORD *)v39 + 56);
        if (v40)
        {
          v41 = v40 / 24;
          if (v41 <= 1)
            v42 = 1;
          else
            v42 = v41;
          v43 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v39 + 80) + 4);
          do
          {
            *(v43 - 1) = 0;
            *v43 = v38++;
            v43 += 2;
            --v42;
          }
          while (v42);
        }
        v39 += 8;
      }
      while (v39 != v37);
    }
    if (v9)
    {
      *(_QWORD *)&buf[8] = v9;
      operator delete((void *)v9);
    }
    goto LABEL_65;
  }
  v56 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
  result = os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v57 = *(_QWORD *)(a1 + 800);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "DVMGraph.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3372;
    v63 = 2048;
    v64 = v57;
    v48 = "%25s:%-5d Sink Id %llu doesn't exist!";
    v49 = v56;
    v50 = 28;
LABEL_77:
    _os_log_impl(&dword_2164CC000, v49, OS_LOG_TYPE_ERROR, v48, buf, v50);
    return 0;
  }
  return result;
}

uint64_t Phase::Controller::DVM::VoicePoolNode::HasVoicePool(Phase::Controller::DVM::VoicePoolNode *this)
{
  return 0;
}

uint64_t Phase::Controller::DVM::VoicePoolNode::AsGenericVoicePoolNode(Phase::Controller::DVM::VoicePoolNode *this)
{
  return 0;
}

uint64_t Phase::Controller::DVM::VoicePoolNode::AsProcedureVoicePoolNode(Phase::Controller::DVM::VoicePoolNode *this)
{
  return 0;
}

void Phase::Controller::DVM::ProcedureVoicePoolNode::GetVoicePool(Phase::Controller::DVM::ProcedureVoicePoolNode *this)
{
  std::terminate();
}

uint64_t Phase::Controller::DVM::ProcedureVoicePoolNode::HasVoicePool(Phase::Controller::DVM::ProcedureVoicePoolNode *this)
{
  return 0;
}

void Phase::Controller::DVM::GenericVoicePoolNode::~GenericVoicePoolNode(Phase::Controller::DVM::GenericVoicePoolNode *this)
{
  Phase::Controller::DVM::GenericVoicePoolNode::~GenericVoicePoolNode(this);
  JUMPOUT(0x2199F9D70);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24D57BFC8;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_24D57BF78;
  std::__hash_table<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>>>::~__hash_table((uint64_t)this + 32);
}

uint64_t Phase::Controller::DVM::GenericVoicePoolNode::GetVoicePool(Phase::Controller::DVM::GenericVoicePoolNode *this)
{
  return *((_QWORD *)this + 10);
}

BOOL Phase::Controller::DVM::GenericVoicePoolNode::HasVoicePool(Phase::Controller::DVM::GenericVoicePoolNode *this)
{
  return *((_QWORD *)this + 10) != 0;
}

void std::__list_imp<std::unique_ptr<Phase::Controller::DVM::VoicePoolNode>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v5 = v3[2];
        v3[2] = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
}

void std::__list_imp<Phase::Controller::DVM::DspNodePlayStateCommand>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        (*(void (**)(uint64_t *))v3[2])(v3 + 2);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,Phase::Controller::VoiceBufferParameter *,Phase::Controller::VoiceBufferParameter *,Phase::Controller::VoiceBufferParameter *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_DWORD *)a3 = *(_DWORD *)v5;
      std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100]((_QWORD *)(a3 + 8), (uint64_t *)(v5 + 8));
      *(_BYTE *)(a3 + 24) = *(_BYTE *)(v5 + 24);
      a3 += 32;
      v5 += 32;
    }
    while (v5 != a2);
  }
  return a3;
}

BOOL Phase::Controller::DVM::VoiceNode::Disconnect(unint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Phase::Logger *v12;
  _BOOL8 result;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  NSObject *v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v4 = 32;
  else
    v4 = 56;
  if (a3 > 0x17)
    return 0;
  v6 = *(_QWORD *)a4 + 32;
  v7 = 32;
  if (a2 == 1)
  {
    v7 = 56;
    v6 = *(_QWORD *)a4 + 56;
  }
  v8 = *(int *)(a4 + 8);
  v9 = *(_QWORD *)(*(_QWORD *)a4 + v7);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v6 + 8) - v9) >> 3) < v8)
    return 0;
  if (!a1)
  {
    v14 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 80));
    result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v18 = 136315650;
    v19 = "DVMVoiceNode.hpp";
    v20 = 1024;
    v21 = 538;
    v22 = 2048;
    v23 = 0;
    v15 = "%25s:%-5d DvmVoiceNode@%p: trying to disconnect a nullptr node (thisConn.mNode).";
    v16 = v14;
    goto LABEL_15;
  }
  std::__tree<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::__erase_unique<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>((uint64_t **)(v9 + 24 * (int)v8), a1, a3);
  if (*(_QWORD *)a4)
  {
    std::__tree<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::__erase_unique<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>((uint64_t **)(*(_QWORD *)(a1 + v4) + 24 * a3), *(_QWORD *)a4, *(_DWORD *)(a4 + 8));
    return 1;
  }
  v17 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v12) + 80));
  result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v18 = 136315650;
    v19 = "DVMVoiceNode.hpp";
    v20 = 1024;
    v21 = 545;
    v22 = 2048;
    v23 = a1;
    v15 = "%25s:%-5d DvmVoiceNode@%p: trying to disconnect from a nullptr node (conn.mNode).";
    v16 = v17;
LABEL_15:
    _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v18, 0x1Cu);
    return 0;
  }
  return result;
}

uint64_t std::set<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::set[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  std::set<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::insert[abi:ne180100]<std::__tree_const_iterator<Phase::Controller::DVM::VoiceNode::IOChannel::Connection,std::__tree_node<Phase::Controller::DVM::VoiceNode::IOChannel::Connection,void *> *,long>>((_OWORD *)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_216589064(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<Phase::SpatialCategory>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::set<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::insert[abi:ne180100]<std::__tree_const_iterator<Phase::Controller::DVM::VoiceNode::IOChannel::Connection,std::__tree_node<Phase::Controller::DVM::VoiceNode::IOChannel::Connection,void *> *,long>>(_OWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)result + 1;
    do
    {
      result = std::__tree<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::__emplace_hint_unique_key_args<Phase::Controller::DVM::VoiceNode::IOChannel::Connection,Phase::Controller::DVM::VoiceNode::IOChannel::Connection const&>(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *std::__tree<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::__emplace_hint_unique_key_args<Phase::Controller::DVM::VoiceNode::IOChannel::Connection,Phase::Controller::DVM::VoiceNode::IOChannel::Connection const&>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t *v10;
  uint64_t *v11;

  v6 = std::__tree<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::__find_equal<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    std::__tree<Phase::SpatialCategory>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::__find_equal<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t *v17;
  unint64_t v18;

  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_3;
  v5 = *(_QWORD *)a5;
  v6 = a2[4];
  if (*(_QWORD *)a5 < v6)
    goto LABEL_3;
  if (*(_QWORD *)a5 != v6)
  {
    if (v6 < v5)
    {
LABEL_10:
      v10 = a2[1];
      if (v10)
      {
        v11 = (uint64_t *)a2[1];
        do
        {
          a4 = (uint64_t **)v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        v17 = a2;
        do
        {
          a4 = (uint64_t **)v17[2];
          v13 = *a4 == v17;
          v17 = (uint64_t *)a4;
        }
        while (!v13);
      }
      if (a4 != a1 + 1)
      {
        v18 = (unint64_t)a4[4];
        if (v5 >= v18 && (v5 != v18 || *(_DWORD *)(a5 + 8) >= *((_DWORD *)a4 + 10)))
          return std::__tree<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::__find_equal<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>((uint64_t)a1, a3, (unint64_t *)a5);
      }
      if (v10)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
LABEL_26:
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  v15 = *(_DWORD *)(a5 + 8);
  v16 = *((_DWORD *)a2 + 10);
  if (v15 >= v16)
  {
    if (v16 < v15)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_3:
  v7 = (uint64_t *)*a2;
  if (*a1 == a2)
  {
    v9 = a2;
  }
  else
  {
    if (v7)
    {
      v8 = (uint64_t *)*a2;
      do
      {
        v9 = v8;
        v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      v12 = a2;
      do
      {
        v9 = (uint64_t *)v12[2];
        v13 = *v9 == (_QWORD)v12;
        v12 = v9;
      }
      while (v13);
    }
    v14 = v9[4];
    if (v14 >= *(_QWORD *)a5 && (v14 != *(_QWORD *)a5 || *((_DWORD *)v9 + 10) >= *(_DWORD *)(a5 + 8)))
      return std::__tree<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::__find_equal<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>((uint64_t)a1, a3, (unint64_t *)a5);
  }
  if (v7)
  {
    *a3 = v9;
    return v9 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

uint64_t *std::__tree<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::__find_equal<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  int v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = *((_DWORD *)a3 + 2);
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = v4[4];
        if (v6 >= v9)
          break;
LABEL_4:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_14;
      }
      if (v6 == v9)
      {
        v10 = *((_DWORD *)v8 + 10);
        if (v7 < v10)
          goto LABEL_4;
        if (v10 >= v7)
          goto LABEL_14;
      }
      else if (v9 >= v6)
      {
        goto LABEL_14;
      }
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
      if (!v4)
        goto LABEL_14;
    }
  }
  v8 = result;
LABEL_14:
  *a2 = v8;
  return result;
}

void std::__tree<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::__erase_unique<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>(uint64_t **a1, unint64_t a2, int a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v5 = (uint64_t *)(a1 + 1);
  v4 = a1[1];
  if (v4)
  {
    v6 = v5;
    v7 = v4;
    do
    {
      v8 = v7[4];
      if (v8 >= a2)
      {
        if (v8 == a2)
        {
          if (*((_DWORD *)v7 + 10) < a3)
            ++v7;
          else
            v6 = v7;
        }
        else
        {
          v6 = v7;
        }
      }
      else
      {
        ++v7;
      }
      v7 = (uint64_t *)*v7;
    }
    while (v7);
    if (v6 != v5)
    {
      v9 = v6[4];
      if (v9 <= a2 && (v9 != a2 || *((_DWORD *)v6 + 10) <= a3))
      {
        v10 = (uint64_t *)v6[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
        else
        {
          v12 = v6;
          do
          {
            v11 = (uint64_t *)v12[2];
            v13 = *v11 == (_QWORD)v12;
            v12 = v11;
          }
          while (!v13);
        }
        if (*a1 == v6)
          *a1 = v11;
        a1[2] = (uint64_t *)((char *)a1[2] - 1);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v4, v6);
        operator delete(v6);
      }
    }
  }
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t std::vector<Phase::Controller::VoiceBufferParameter>::__push_back_slow_path<Phase::Controller::VoiceBufferParameter const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v17[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[32 * v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *((_QWORD *)v11 + 1) = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)v11 + 2) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v11[24] = *(_BYTE *)(a2 + 24);
  v17[2] = v11 + 32;
  std::vector<Phase::Controller::VoiceBufferParameter>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<Phase::Controller::VoiceBufferParameter>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_2165898E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Phase::Controller::VoiceBufferParameter>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>,std::__map_value_compare<Phase::Controller::DVM::VoiceIOContext,std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>,std::less<Phase::Controller::DVM::VoiceIOContext>,true>,std::allocator<std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>>>::find<Phase::Controller::DVM::VoiceIOContext>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = std::operator<[abi:ne180100]<std::pair<Phase::DspLayer::VoicePool *,long long>,std::pair<Phase::Controller::DVM::ProcedureBase *,long long>>((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || std::operator<[abi:ne180100]<std::pair<Phase::DspLayer::VoicePool *,long long>,std::pair<Phase::Controller::DVM::ProcedureBase *,long long>>(a2, (uint64_t)(v5 + 4)))
  {
    return v2;
  }
  return v5;
}

uint64_t std::operator<[abi:ne180100]<std::pair<Phase::DspLayer::VoicePool *,long long>,std::pair<Phase::Controller::DVM::ProcedureBase *,long long>>(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  char v5;
  char *v6;

  v2 = *(_DWORD *)(a2 + 16);
  if (v2 == -1)
    return 0;
  v3 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v3 == -1 || v3 < v2)
    return 1;
  if (v3 > v2)
    return 0;
  v6 = &v5;
  return ((uint64_t (*)(char **, uint64_t, uint64_t))off_24D57C0C8[v3])(&v6, a1, a2);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::less<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::pair<Phase::DspLayer::VoicePool *,long long>,std::__variant_detail::_Trait<std::pair::Controller::DVM::ProcedureBase *,long long>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::pair<Phase::DspLayer::VoicePool *,long long>,std::__variant_detail::_Trait<std::pair::Controller::DVM::ProcedureBase *,long long>> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a2 < *a3)
    return 1;
  if (*a3 >= *a2)
    return a2[1] < a3[1];
  return 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::less<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::pair<Phase::DspLayer::VoicePool *,long long>,std::__variant_detail::_Trait<std::pair::Controller::DVM::ProcedureBase *,long long>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::pair<Phase::DspLayer::VoicePool *,long long>,std::__variant_detail::_Trait<std::pair::Controller::DVM::ProcedureBase *,long long>> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a2 < *a3)
    return 1;
  if (*a3 >= *a2)
    return a2[1] < a3[1];
  return 0;
}

char *std::vector<Phase::Controller::DVM::VoiceNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Phase::Controller::DVM::VoiceNode * const*>,std::__wrap_iter<Phase::Controller::DVM::VoiceNode * const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<Phase::Controller::DVM::VoiceNode *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_216589C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<Phase::Controller::DVM::VoiceNode *>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

_QWORD *Phase::Controller::DVM::VoiceIOContext::GetDescription(Phase::Controller::DVM::VoiceIOContext *this, uint64_t a2)
{
  int v3;
  char __str[256];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a2 + 16);
  if (v3)
  {
    if (v3 != 1)
      std::terminate();
    snprintf(__str, 0x100uLL, "<iocontext: procedure [%p, %d]>");
  }
  else
  {
    snprintf(__str, 0x100uLL, "<iocontext: voice [%p, %d]>");
  }
  return std::string::basic_string[abi:ne180100]<0>(this, __str);
}

_QWORD *std::__tree<std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>,std::__map_value_compare<std::pair<unsigned long long,long long>,std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>,std::less<std::pair<unsigned long long,long long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>>>::find<std::pair<unsigned long long,long long>>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v6 = *a2;
  v5 = a2[1];
  v7 = v2;
  do
  {
    v8 = v3[4];
    if (v8 >= v6)
    {
      if (v6 >= v8)
      {
        if (v3[5] < v5)
          ++v3;
        else
          v7 = v3;
      }
      else
      {
        v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  if (v7 == v2)
    return v2;
  v9 = v7[4];
  if (v6 < v9 || v9 >= v6 && v5 < v7[5])
    return v2;
  return v7;
}

uint64_t std::operator==[abi:ne180100]<std::pair<Phase::DspLayer::VoicePool *,long long>,std::pair<Phase::Controller::DVM::ProcedureBase *,long long>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t result;
  BOOL v9;
  char v10;
  char *v11;

  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(_DWORD *)(a2 + 16);
  v6 = v5 == v4;
  v9 = v5 == -1;
  v7 = v5 == -1;
  if (v9)
    v6 = 0;
  if ((_DWORD)v4 == -1)
    result = v7;
  else
    result = v6;
  v9 = (_DWORD)v4 == -1 || !v6;
  if (!v9)
  {
    v11 = &v10;
    return ((uint64_t (*)(char **, uint64_t))off_24D57C0D8[v4])(&v11, a1);
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::pair<Phase::DspLayer::VoicePool *,long long>,std::__variant_detail::_Trait<std::pair::Controller::DVM::ProcedureBase *,long long>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::pair<Phase::DspLayer::VoicePool *,long long>,std::__variant_detail::_Trait<std::pair::Controller::DVM::ProcedureBase *,long long>> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3 && a2[1] == a3[1];
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::pair<Phase::DspLayer::VoicePool *,long long>,std::__variant_detail::_Trait<std::pair::Controller::DVM::ProcedureBase *,long long>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::pair<Phase::DspLayer::VoicePool *,long long>,std::__variant_detail::_Trait<std::pair::Controller::DVM::ProcedureBase *,long long>> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3 && a2[1] == a3[1];
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[4];
      if (v4)
      {
        v2[5] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::vector<Phase::Controller::DVM::VoiceNode *>::__init_with_size[abi:ne180100]<Phase::Controller::DVM::VoiceNode **,Phase::Controller::DVM::VoiceNode **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<Phase::Controller::DVM::VoiceNode *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216589FC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Phase::Controller::DVM::VoiceNode *>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<Phase::SpatialCategory>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[3];
      v2[3] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t Phase::Controller::DVM::GenericVoiceNode::GenericVoiceNode(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 196) = 0;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  memset_pattern16((void *)(a1 + 152), &unk_2166F7E60, 0x20uLL);
  *(_QWORD *)a1 = &off_24D57C150;
  *(_QWORD *)(a1 + 200) = a2;
  if (a4 == 1 || !a2)
    std::terminate();
  return a1;
}

void Phase::Controller::DVM::SamplerVoiceNode::~SamplerVoiceNode(Phase::Controller::DVM::SamplerVoiceNode *this)
{
  Phase::Controller::DVM::VoiceNode::~VoiceNode(this);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::DVM::GenericVoiceNode::GetVoicePool(Phase::Controller::DVM::GenericVoiceNode *this)
{
  return *((_QWORD *)this + 25);
}

void Phase::Controller::DVM::GenericVoiceNode::GetProcedure(Phase::Controller::DVM::GenericVoiceNode *this)
{
  std::terminate();
}

uint64_t Phase::Controller::DVM::GenericVoiceNode::GetVoiceIOContext@<X0>(Phase::Controller::DVM::GenericVoiceNode *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(Phase::Controller::DVM::GenericVoiceNode *))(*(_QWORD *)this + 16))(this);
  v5 = *((_QWORD *)this + 2);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v5;
  return result;
}

uint64_t Phase::Controller::DVM::VoiceNode::GetConnectedNodesTailInFrames(Phase::Controller::DVM::VoiceNode *this)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v2 = (_QWORD *)*((_QWORD *)this + 7);
  v3 = (_QWORD *)*((_QWORD *)this + 8);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = (_QWORD *)*v2;
      if ((_QWORD *)*v2 != v2 + 1)
      {
        do
        {
          v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v5[4] + 40))(v5[4]);
          if (v6 > v4)
            v4 = v6;
          v7 = (_QWORD *)v5[1];
          if (v7)
          {
            do
            {
              v8 = v7;
              v7 = (_QWORD *)*v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              v8 = (_QWORD *)v5[2];
              v9 = *v8 == (_QWORD)v5;
              v5 = v8;
            }
            while (!v9);
          }
          v5 = v8;
        }
        while (v8 != v2 + 1);
      }
      v2 += 3;
    }
    while (v2 != v3);
  }
  return (*((_DWORD *)this + 46) + v4);
}

uint64_t Phase::Controller::DVM::SamplerVoiceNode::HasRenderCallback(Phase::Controller::DVM::SamplerVoiceNode *this)
{
  return *((unsigned __int8 *)this + 208);
}

uint64_t Phase::Controller::DVM::SamplerVoiceNode::GetRenderCallbackInfo(Phase::Controller::DVM::SamplerVoiceNode *this)
{
  if (*((_BYTE *)this + 208))
    return (uint64_t)this + 216;
  else
    return 0;
}

__n128 Phase::Controller::DVM::SamplerVoiceNode::SetRenderCallbackInfo(uint64_t a1, _QWORD *a2)
{
  __n128 result;
  __int128 v3;

  if (!a2 || *(_BYTE *)(a1 + 208))
  {
    if (*(_BYTE *)(a1 + 208)
      && (!a2
       || *(_QWORD *)(a1 + 216) != *a2
       || *(_QWORD *)(a1 + 224) != a2[1]
       || *(_QWORD *)(a1 + 232) != a2[2]
       || *(_QWORD *)(a1 + 240) != a2[3]
       || *(_QWORD *)(a1 + 248) != a2[4]))
    {
      std::terminate();
    }
  }
  else
  {
    result = *(__n128 *)a2;
    v3 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 248) = a2[4];
    *(_OWORD *)(a1 + 232) = v3;
    *(__n128 *)(a1 + 216) = result;
    *(_BYTE *)(a1 + 208) = 1;
  }
  return result;
}

void Phase::Controller::DVM::GenericVoiceNode::~GenericVoiceNode(Phase::Controller::DVM::GenericVoiceNode *this)
{
  Phase::Controller::DVM::VoiceNode::~VoiceNode(this);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::DVM::VoiceNode::HasRenderCallback(Phase::Controller::DVM::VoiceNode *this)
{
  return 0;
}

uint64_t Phase::Controller::DVM::VoiceNode::GetRenderCallbackInfo(Phase::Controller::DVM::VoiceNode *this)
{
  return 0;
}

void Phase::Controller::DVM::VoiceNode::SetRenderCallbackInfo(uint64_t a1, uint64_t a2)
{
  if (a2)
    std::terminate();
}

void Phase::Controller::DVM::VoiceNode::~VoiceNode(Phase::Controller::DVM::VoiceNode *this)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = off_24D57C1A8;
  v4 = (void **)((char *)this + 128);
  std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 56);
  std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 32);
  std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void std::__hash_table<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::VoiceNode>>>>::__erase_unique<long long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD ***)(*a1 + 8 * v4);
  if (!v5)
    return;
  v6 = *v5;
  if (!*v5)
    return;
  v7 = *(_QWORD *)&v2 - 1;
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v3.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v2)
        v8 %= *(_QWORD *)&v2;
    }
    else
    {
      v8 &= v7;
    }
    if (v8 != v4)
      return;
LABEL_17:
    v6 = (_QWORD *)*v6;
    if (!v6)
      return;
  }
  if (v6[2] != a2)
    goto LABEL_17;
  v9 = (_QWORD *)*v6;
  if (v3.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v2)
      v8 %= *(_QWORD *)&v2;
  }
  else
  {
    v8 &= v7;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v8);
  do
  {
    v11 = v10;
    v10 = (_QWORD *)*v10;
  }
  while (v10 != v6);
  if (v11 == a1 + 2)
    goto LABEL_36;
  v12 = v11[1];
  if (v3.u32[0] > 1uLL)
  {
    if (v12 >= *(_QWORD *)&v2)
      v12 %= *(_QWORD *)&v2;
  }
  else
  {
    v12 &= v7;
  }
  if (v12 == v8)
  {
LABEL_38:
    if (v9)
    {
      v13 = v9[1];
      goto LABEL_40;
    }
  }
  else
  {
LABEL_36:
    if (!v9)
      goto LABEL_37;
    v13 = v9[1];
    if (v3.u32[0] > 1uLL)
    {
      v14 = v9[1];
      if (v13 >= *(_QWORD *)&v2)
        v14 = v13 % *(_QWORD *)&v2;
    }
    else
    {
      v14 = v13 & v7;
    }
    if (v14 != v8)
    {
LABEL_37:
      *(_QWORD *)(*a1 + 8 * v8) = 0;
      v9 = (_QWORD *)*v6;
      goto LABEL_38;
    }
LABEL_40:
    if (v3.u32[0] > 1uLL)
    {
      if (v13 >= *(_QWORD *)&v2)
        v13 %= *(_QWORD *)&v2;
    }
    else
    {
      v13 &= v7;
    }
    if (v13 != v8)
    {
      *(_QWORD *)(*a1 + 8 * v13) = v11;
      v9 = (_QWORD *)*v6;
    }
  }
  *v11 = v9;
  *v6 = 0;
  --a1[3];
  v15 = v6[3];
  v6[3] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  operator delete(v6);
}

uint64_t std::__hash_table<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unique_ptr<Phase::Controller::DVM::ProcedureBase>>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = v1[3];
      v1[3] = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void Phase::Controller::DVM::ProcedureVoiceNode::~ProcedureVoiceNode(Phase::Controller::DVM::ProcedureVoiceNode *this)
{
  Phase::Controller::DVM::VoiceNode::~VoiceNode(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::DVM::ProcedureVoiceNode::GetVoicePool(Phase::Controller::DVM::ProcedureVoiceNode *this)
{
  std::terminate();
}

uint64_t Phase::Controller::DVM::ProcedureVoiceNode::GetProcedure(Phase::Controller::DVM::ProcedureVoiceNode *this)
{
  return *((_QWORD *)this + 25);
}

uint64_t Phase::Controller::DVM::ProcedureVoiceNode::GetVoiceIOContext@<X0>(Phase::Controller::DVM::ProcedureVoiceNode *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(Phase::Controller::DVM::ProcedureVoiceNode *))(*(_QWORD *)this + 24))(this);
  v5 = *((_QWORD *)this + 2);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = v5;
  return result;
}

void std::__function::__func<std::hash<unsigned long long>,std::allocator<std::hash<unsigned long long>>,unsigned int ()(unsigned long long)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::hash<unsigned long long>,std::allocator<std::hash<unsigned long long>>,unsigned int ()(unsigned long long)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D57C258;
  return result;
}

void std::__function::__func<std::hash<unsigned long long>,std::allocator<std::hash<unsigned long long>>,unsigned int ()(unsigned long long)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D57C258;
}

uint64_t std::__function::__func<std::hash<unsigned long long>,std::allocator<std::hash<unsigned long long>>,unsigned int ()(unsigned long long)>::operator()(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      *((_QWORD *)v2 + 4) = off_24D57C4D8;
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::~__hash_table((uint64_t)(v2 + 128));
      v4 = (void **)(v2 + 104);
      std::vector<Phase::Controller::DVM::Submix::ChannelStrip>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::vector<Phase::Controller::DVM::Submix::ChannelStrip>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<Phase::Controller::DVM::Submix::ChannelStrip>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<Phase::Controller::DVM::Submix::ChannelStrip>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::~guarded_lookup_hash_table(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  void **v8;

  if (!atomic_load((unsigned int *)(a1 + 48)))
  {
    v3 = atomic_load((unint64_t *)(a1 + 40));
    if (v3)
    {
      v4 = caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl::~table_impl(v3);
      MEMORY[0x2199F9D70](v4, 0x1060C402CF69088);
    }
    std::mutex::~mutex((std::mutex *)(a1 + 80));
    v8 = (void **)(a1 + 56);
    std::vector<std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl>>>::__destroy_vector::operator()[abi:ne180100](&v8);
    v5 = *(_QWORD **)(a1 + 24);
    if (v5 == (_QWORD *)a1)
    {
      v6 = 4;
      v5 = (_QWORD *)a1;
    }
    else
    {
      if (!v5)
        return a1;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
    return a1;
  }
  _os_assert_log();
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl::~table_impl(uint64_t a1)
{
  uint64_t v2;
  unsigned int **v3;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v3 = (unsigned int **)(a1 + 16);
    do
    {
      if ((unint64_t)*v3 + 1 >= 2)
        caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::element_t::release(*v3);
      ++v3;
      --v2;
    }
    while (v2);
  }
  return a1;
}

unsigned int *caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::element_t::release(unsigned int *result)
{
  unsigned int v1;

  do
    v1 = __ldaxr(result);
  while (__stlxr(v1 - 0x10000, result));
  if ((v1 & 0xFFFF0000) == 0x10000)
  {
    if (atomic_load(result))
    {
      _os_assert_log();
      _os_crash();
      __break(1u);
    }
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void std::vector<std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl>>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl::~table_impl(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      Phase::Controller::DVM::Tap::~Tap((Phase::Controller::DVM::Tap *)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void Phase::Controller::DVM::Tap::~Tap(Phase::Controller::DVM::Tap *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24D57C2A0;
  v2 = (char *)this + 104;
  v3 = (char *)*((_QWORD *)this + 16);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>>>::~__hash_table((uint64_t)this + 64);
}

{
  Phase::Controller::DVM::Tap::~Tap(this);
  JUMPOUT(0x2199F9D70);
}

_QWORD *Phase::Controller::DVM::DspNodeBase::GetDescription@<X0>(Phase::Controller::DVM::DspNodeBase *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const char *v4;
  char __str[512];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 5);
  if ((v3 & 0xFF00000000) != 0)
    v4 = Phase::Controller::DVM::kPlayStateStrings[(int)v3];
  else
    v4 = "-";
  snprintf(__str, 0x200uLL, "<node %sId %llu (%s, IO %s)>", Phase::Controller::DVM::kDspNodeTypeStrings[*((int *)this + 2)], *((_QWORD *)this + 2), v4, Phase::Controller::DVM::kPlayStateStrings[*((int *)this + 9)]);
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

uint64_t Phase::Controller::DVM::Tap::Reset(uint64_t this)
{
  *(_QWORD *)(this + 56) = 0;
  return this;
}

void Phase::Controller::DVM::DspNodeBase::GetAllValidDspNodes(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      *((_QWORD *)v2 + 3) = off_24D57C2E0;
      v4 = (void **)(v2 + 88);
      std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void Phase::Controller::DVM::Renderer::~Renderer(Phase::Controller::DVM::Renderer *this)
{
  void **v1;

  *(_QWORD *)this = off_24D57C2E0;
  v1 = (void **)((char *)this + 64);
  std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_24D57C2E0;
  v2 = (void **)((char *)this + 64);
  std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x2199F9D70](this, 0x10A1C40B315E06FLL);
}

uint64_t Phase::Controller::DVM::Renderer::Reset(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;

  *(_DWORD *)(this + 36) = 0;
  if (*(_BYTE *)(this + 44))
    *(_BYTE *)(this + 44) = 0;
  v1 = *(_QWORD **)(this + 64);
  v2 = *(_QWORD **)(this + 72);
  while (v1 != v2)
  {
    v1[2] = v1[1];
    *v1 = 0;
    v1 += 4;
  }
  return this;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v2[3] = &off_24D57C320;
      v4 = (void *)v2[10];
      if (v4)
      {
        v2[11] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void Phase::Controller::DVM::Master::~Master(Phase::Controller::DVM::Master *this)
{
  void *v2;

  *(_QWORD *)this = &off_24D57C320;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24D57C320;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::DVM::Master::Reset(uint64_t this)
{
  *(_DWORD *)(this + 36) = 0;
  if (*(_BYTE *)(this + 44))
    *(_BYTE *)(this + 44) = 0;
  *(_QWORD *)(this + 64) = *(_QWORD *)(this + 56);
  return this;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v2[3] = &off_24D57C360;
      v4 = (void *)v2[10];
      if (v4)
      {
        v2[11] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void Phase::Controller::DVM::Sink::~Sink(Phase::Controller::DVM::Sink *this)
{
  void *v2;

  *(_QWORD *)this = &off_24D57C360;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24D57C360;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::DVM::Sink::Reset(uint64_t this)
{
  *(_DWORD *)(this + 36) = 0;
  if (*(_BYTE *)(this + 44))
    *(_BYTE *)(this + 44) = 0;
  *(_QWORD *)(this + 64) = *(_QWORD *)(this + 56);
  return this;
}

_QWORD *Phase::Controller::DVM::Sink::GetAllValidVoiceNodes@<X0>(Phase::Controller::DVM::Sink *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<Phase::Controller::DVM::VoiceNode *>::__init_with_size[abi:ne180100]<Phase::Controller::DVM::VoiceNode **,Phase::Controller::DVM::VoiceNode **>(a2, *((const void **)this + 7), *((_QWORD *)this + 8), (uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,void *>>>::operator()[abi:ne180100](char a1, uint64_t a2)
{
  void **v3;

  if (a1)
  {
    *(_QWORD *)(a2 + 32) = off_24D57C4D8;
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::~__hash_table(a2 + 128);
    v3 = (void **)(a2 + 104);
    std::vector<Phase::Controller::DVM::Submix::ChannelStrip>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    __p[3] = &off_24D57C360;
    v3 = (void *)__p[10];
    if (v3)
    {
      __p[11] = v3;
      operator delete(v3);
    }
  }
  operator delete(__p);
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>>>::erase(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  v3 = *a2;
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v2)
      v4 %= *(_QWORD *)&v2;
  }
  else
  {
    v4 &= *(_QWORD *)&v2 - 1;
  }
  v6 = *(uint64_t **)(*a1 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (uint64_t *)*v6;
  }
  while (v6 != a2);
  if (v7 != a1 + 2)
  {
    v8 = v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v2)
        v8 %= *(_QWORD *)&v2;
    }
    else
    {
      v8 &= *(_QWORD *)&v2 - 1;
    }
    if (v8 == v4)
    {
LABEL_20:
      if (!v3)
        goto LABEL_27;
      goto LABEL_21;
    }
  }
  if (!v3)
    goto LABEL_19;
  v9 = *(_QWORD *)(v3 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v9 >= *(_QWORD *)&v2)
      v9 %= *(_QWORD *)&v2;
  }
  else
  {
    v9 &= *(_QWORD *)&v2 - 1;
  }
  if (v9 != v4)
  {
LABEL_19:
    *(_QWORD *)(*a1 + 8 * v4) = 0;
    v3 = *a2;
    goto LABEL_20;
  }
LABEL_21:
  v10 = *(_QWORD *)(v3 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(_QWORD *)&v2)
      v10 %= *(_QWORD *)&v2;
  }
  else
  {
    v10 &= *(_QWORD *)&v2 - 1;
  }
  if (v10 != v4)
  {
    *(_QWORD *)(*a1 + 8 * v10) = v7;
    v3 = *a2;
  }
LABEL_27:
  *v7 = v3;
  *a2 = 0;
  --a1[3];
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,void *>>>::operator()[abi:ne180100](1, a2);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixTapGains>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    v3 = (void *)__p[4];
    if (v3)
    {
      __p[5] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
      Phase::Controller::DVM::Tap::~Tap((Phase::Controller::DVM::Tap *)(v1 + 24));
    operator delete((void *)v1);
  }
}

uint64_t *caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::rehash(unint64_t *a1, unsigned int a2)
{
  unint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  unint64_t SlotForKey;
  unsigned int v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  char *v22;
  unint64_t v23;
  uint64_t *v24;

  v4 = a1 + 5;
  v5 = atomic_load(a1 + 5);
  v6 = (uint64_t *)operator new(8 * (a2 - 1) + 24);
  *v6 = (uint64_t)a1;
  *((_DWORD *)v6 + 2) = a2;
  bzero(v6 + 2, 8 * a2);
  if (v5)
  {
    v7 = *(unsigned int *)(v5 + 8);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(_QWORD *)(v5 + 8 * i + 16);
        if (v9 + 1 >= 2)
        {
          SlotForKey = caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl::findSlotForKey(v6, *(_QWORD *)(v9 + 8));
          if ((SlotForKey & 1) == 0)
          {
            do
              v11 = __ldaxr((unsigned int *)v9);
            while (__stlxr(v11 + 0x10000, (unsigned int *)v9));
            atomic_store(v9, (unint64_t *)&v6[HIDWORD(SlotForKey) + 2]);
          }
        }
      }
    }
    atomic_store((unint64_t)v6, a1 + 5);
    v13 = (uint64_t *)a1[8];
    v12 = a1[9];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (_QWORD *)a1[7];
      v16 = v13 - v15;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v20 = (char *)operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = (unint64_t *)&v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        a1[7] = (unint64_t)v21;
        a1[8] = (unint64_t)v14;
        a1[9] = (unint64_t)v22;
      }
      else
      {
        do
        {
          v23 = *--v13;
          *v13 = 0;
          *--v21 = v23;
        }
        while (v13 != v15);
        v13 = (uint64_t *)a1[7];
        v24 = (uint64_t *)a1[8];
        a1[7] = (unint64_t)v21;
        a1[8] = (unint64_t)v14;
        a1[9] = (unint64_t)v22;
        while (v24 != v13)
          std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl>>::reset[abi:ne180100](--v24, 0);
      }
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v13 = v5;
      v14 = v13 + 1;
    }
    a1[8] = (unint64_t)v14;
  }
  else
  {
    atomic_store((unint64_t)v6, v4);
  }
  return v6;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::emptyReleasePool(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t *v4;

  v1 = atomic_load((unsigned int *)(result + 48));
  if (v1 <= 0)
  {
    v2 = result;
    v4 = *(uint64_t **)(result + 56);
    for (i = *(uint64_t **)(result + 64);
          i != v4;
          result = std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl>>::reset[abi:ne180100](i, 0))
    {
      --i;
    }
    *(_QWORD *)(v2 + 64) = v4;
  }
  return result;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl::findSlotForKey(uint64_t *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v17;

  v3 = *((_DWORD *)a1 + 2);
  v4 = *a1;
  v17 = a2;
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    goto LABEL_24;
  v7 = (*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v17) % *((_DWORD *)a1 + 2);
  if ((int)v7 >= 3)
    v8 = 0;
  else
    v8 = v3;
  v9 = (v7 + v8 - 3);
  v10 = 0xFFFFFFFFLL;
  v11 = 1;
  v12 = v7;
  while (1)
  {
    v13 = v9;
    v14 = atomic_load((unint64_t *)&a1[v12 + 2]);
    if (v14 != -1)
      break;
    if ((int)v10 >= 0)
      v10 = v10;
    else
      v10 = v12;
LABEL_13:
    if ((int)v9 >= 3)
      v15 = 0;
    else
      v15 = v3;
    v9 = (v9 + v15 - 3);
    v12 = v13;
    if ((_DWORD)v13 == (_DWORD)v7)
    {
      if ((v10 & 0x80000000) == 0)
      {
        v11 = 0;
        v12 = v10;
        return v11 | (v12 << 32);
      }
      __break(1u);
LABEL_24:
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
  if (v14)
  {
    if (*(_QWORD *)(v14 + 8) == a2)
      return v11 | (v12 << 32);
    goto LABEL_13;
  }
  v11 = 0;
  if ((int)v10 >= 0)
    v12 = v10;
  else
    v12 = v12;
  return v11 | (v12 << 32);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,void *>>>::operator()[abi:ne180100](char a1, char *__p)
{
  void **v3;

  if (a1)
  {
    *((_QWORD *)__p + 3) = off_24D57C2E0;
    v3 = (void **)(__p + 88);
    std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  operator delete(__p);
}

_QWORD *std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::__init_with_size[abi:ne180100]<Phase::Controller::DVM::VoiceNode::IOChannel*,Phase::Controller::DVM::VoiceNode::IOChannel*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Controller::DVM::VoiceNode::IOChannel>,Phase::Controller::DVM::VoiceNode::IOChannel*,Phase::Controller::DVM::VoiceNode::IOChannel*,Phase::Controller::DVM::VoiceNode::IOChannel*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_21658B768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Controller::DVM::VoiceNode::IOChannel>,Phase::Controller::DVM::VoiceNode::IOChannel*,Phase::Controller::DVM::VoiceNode::IOChannel*,Phase::Controller::DVM::VoiceNode::IOChannel*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::set<Phase::Controller::DVM::VoiceNode::IOChannel::Connection>::set[abi:ne180100](v4, v6);
      v6 += 24;
      v4 = v11 + 24;
      v11 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::DVM::VoiceNode::IOChannel>,Phase::Controller::DVM::VoiceNode::IOChannel*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_21658B864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::DVM::VoiceNode::IOChannel>,Phase::Controller::DVM::VoiceNode::IOChannel*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::DVM::VoiceNode::IOChannel>,Phase::Controller::DVM::VoiceNode::IOChannel*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::DVM::VoiceNode::IOChannel>,Phase::Controller::DVM::VoiceNode::IOChannel*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::DVM::VoiceNode::IOChannel>,Phase::Controller::DVM::VoiceNode::IOChannel*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      v3 = v1 - 24;
      std::__tree<Phase::SpatialCategory>::destroy(v1 - 24, *(_QWORD **)(v1 - 16));
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void **std::vector<Phase::Controller::DspNodeVoice>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (uint64_t)*(result - 1);
  if (0x4EC4EC4EC4EC4EC5 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 104 * a2;
      do
      {
        *(_QWORD *)v7 = 0x7FFFFFFFFFFFFFFFLL;
        *(_OWORD *)(v7 + 8) = 0uLL;
        *(_OWORD *)(v7 + 24) = 0uLL;
        *(_OWORD *)(v7 + 40) = 0uLL;
        *(_OWORD *)(v7 + 56) = 0uLL;
        *(_OWORD *)(v7 + 72) = 0uLL;
        *(_OWORD *)(v7 + 88) = 0uLL;
        v7 += 104;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x4EC4EC4EC4EC4EC5 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x276276276276276)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v10 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x13B13B13B13B13BLL)
      v11 = 0x276276276276276;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::DspNodeVoice>>((uint64_t)result, v11);
    else
      v12 = 0;
    v14 = &v12[104 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[104 * v11];
    v15 = &v14[104 * a2];
    do
    {
      *(_QWORD *)v14 = 0x7FFFFFFFFFFFFFFFLL;
      *(_OWORD *)(v14 + 8) = 0uLL;
      *(_OWORD *)(v14 + 24) = 0uLL;
      *(_OWORD *)(v14 + 40) = 0uLL;
      *(_OWORD *)(v14 + 56) = 0uLL;
      *(_OWORD *)(v14 + 72) = 0uLL;
      *(_OWORD *)(v14 + 88) = 0uLL;
      v14 += 104;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<Phase::Controller::DspNodeVoice>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<Phase::Controller::DspNodeVoice>::~__split_buffer(v16);
  }
  return result;
}

void sub_21658BA70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Phase::Controller::DspNodeVoice>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    __p[3] = &off_24D57C320;
    v3 = (void *)__p[10];
    if (v3)
    {
      __p[11] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void Phase::Controller::DVM::DspNodePlayStateCommand::~DspNodePlayStateCommand(Phase::Controller::DVM::DspNodePlayStateCommand *this)
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *Phase::Controller::DVM::DspNodePlayStateCommand::GetDescription@<X0>(Phase::Controller::DVM::DspNodePlayStateCommand *this@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  uint64_t v4;
  void **v5;
  void *__p[2];
  char v8;
  char __str[256];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = Phase::Controller::DVM::kDspNodeTypeStrings[*((int *)this + 4)];
  v4 = *((_QWORD *)this + 3);
  snprintf(__str, 0x100uLL, "%s, %f s", Phase::Controller::DVM::kPlayStateStrings[*((int *)this + 2)], *((float *)this + 3));
  std::string::basic_string[abi:ne180100]<0>(__p, __str);
  if (v8 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  snprintf(__str, 0x100uLL, "<cmd node %sId %llu, %s>", v3, v4, (const char *)v5);
  if (v8 < 0)
    operator delete(__p[0]);
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

void Phase::Controller::DVM::VoicePlayStateCommand::~VoicePlayStateCommand(Phase::Controller::DVM::VoicePlayStateCommand *this)
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *Phase::Controller::DVM::VoicePlayStateCommand::GetDescription@<X0>(Phase::Controller::DVM::VoicePlayStateCommand *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  void **v5;
  void **v6;
  void **v7;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;
  char __s[256];
  char __str[256];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  Phase::Controller::DVM::VoiceIOContext::GetDescription((Phase::Controller::DVM::VoiceIOContext *)v11, (uint64_t)this + 16);
  v4 = v12;
  v5 = (void **)v11[0];
  snprintf(__str, 0x100uLL, "%s, %f s", Phase::Controller::DVM::kPlayStateStrings[*((int *)this + 2)], *((float *)this + 3));
  std::string::basic_string[abi:ne180100]<0>(__p, __str);
  v6 = v11;
  if (v4 < 0)
    v6 = v5;
  if (v10 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  snprintf(__s, 0x100uLL, "<cmd voice [%s], %s>", (const char *)v6, (const char *)v7);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  return std::string::basic_string[abi:ne180100]<0>(a2, __s);
}

void sub_21658BD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>>>::__erase_unique<void *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)std::__hash_table<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>>>::find<void *>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::remove(a1, (_QWORD *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>>>::find<void *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  int v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  int v53;
  _QWORD *v54;
  BOOL v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  _QWORD *v59;
  int v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  int v66;
  _QWORD *v67;
  _QWORD *v68;
  int v69;
  uint64_t *v70;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  int v80;
  _QWORD *v81;
  _QWORD *v82;
  int v83;
  uint64_t v84;
  int v85;
  _QWORD *v86;
  _QWORD *v87;
  int v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  int v93;
  uint64_t *v94;
  BOOL v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  _QWORD *v100;
  int v101;
  uint64_t v102;
  _QWORD *v103;
  int v104;
  uint64_t *v105;
  _QWORD *v106;
  int v107;
  _QWORD *v108;
  int v109;
  int64_t v110;
  int64_t v111;
  int64_t v112;
  uint64_t v113;
  uint64_t *v114;
  _QWORD *v115;
  int v116;
  uint64_t v117;
  _QWORD *v118;
  int v119;
  uint64_t v120;
  _QWORD *v121;
  int v122;
  uint64_t v123;
  _QWORD *v124;
  int v125;
  uint64_t *v126;
  uint64_t v127;
  _QWORD *v128;
  int v129;
  uint64_t v130;
  _QWORD *v131;
  int v132;
  _QWORD *v133;
  int v134;
  _QWORD *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  int v145;
  int v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  _QWORD *v151;
  int v152;
  uint64_t v153;
  _QWORD *v154;
  int v155;
  uint64_t *v156;
  _QWORD *v157;
  int v158;
  _QWORD *v159;
  int v160;
  uint64_t *v162;
  uint64_t v163;
  _QWORD *v164;
  int v165;
  uint64_t v166;
  _QWORD *v167;
  int v168;
  uint64_t *v169;
  _QWORD *v170;
  int v171;
  _QWORD *v172;
  int v173;
  _QWORD *v174;
  int v175;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v90 = *(a2 - 1);
        v91 = *v9;
        v92 = *(_QWORD **)(v90 + 48);
        if (v92)
        {
          v93 = -1;
          do
          {
            if (v93 <= *(_DWORD *)(v92[3] + 28))
              v93 = *(_DWORD *)(v92[3] + 28);
            v92 = (_QWORD *)*v92;
          }
          while (v92);
        }
        else
        {
          v93 = -1;
        }
        v174 = *(_QWORD **)(v91 + 48);
        if (v174)
        {
          v175 = -1;
          do
          {
            if (v175 <= *(_DWORD *)(v174[3] + 28))
              v175 = *(_DWORD *)(v174[3] + 28);
            v174 = (_QWORD *)*v174;
          }
          while (v174);
        }
        else
        {
          v175 = -1;
        }
        if (v93 < v175)
        {
          *v9 = v90;
          *(a2 - 1) = v91;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return (uint64_t)std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **,0>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 <= 191)
        {
          v94 = v9 + 1;
          v96 = v9 == a2 || v94 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v96)
            {
              v97 = v9;
              do
              {
                v98 = v94;
                v99 = v97[1];
                v100 = *(_QWORD **)(v99 + 48);
                if (v100)
                {
                  v101 = -1;
                  do
                  {
                    if (v101 <= *(_DWORD *)(v100[3] + 28))
                      v101 = *(_DWORD *)(v100[3] + 28);
                    v100 = (_QWORD *)*v100;
                  }
                  while (v100);
                }
                else
                {
                  v101 = -1;
                }
                v102 = *v97;
                v103 = *(_QWORD **)(*v97 + 48);
                if (v103)
                {
                  v104 = -1;
                  do
                  {
                    if (v104 <= *(_DWORD *)(v103[3] + 28))
                      v104 = *(_DWORD *)(v103[3] + 28);
                    v103 = (_QWORD *)*v103;
                  }
                  while (v103);
                }
                else
                {
                  v104 = -1;
                }
                if (v101 < v104)
                {
                  v105 = v98;
                  while (1)
                  {
                    *v105 = v102;
                    if (v97 == v9)
                      break;
                    v105 = v97;
                    v106 = *(_QWORD **)(v99 + 48);
                    if (v106)
                    {
                      v107 = -1;
                      do
                      {
                        if (v107 <= *(_DWORD *)(v106[3] + 28))
                          v107 = *(_DWORD *)(v106[3] + 28);
                        v106 = (_QWORD *)*v106;
                      }
                      while (v106);
                    }
                    else
                    {
                      v107 = -1;
                    }
                    v97 = v105 - 1;
                    v102 = *(v105 - 1);
                    v108 = *(_QWORD **)(v102 + 48);
                    if (v108)
                    {
                      v109 = -1;
                      do
                      {
                        if (v109 <= *(_DWORD *)(v108[3] + 28))
                          v109 = *(_DWORD *)(v108[3] + 28);
                        v108 = (_QWORD *)*v108;
                      }
                      while (v108);
                    }
                    else
                    {
                      v109 = -1;
                    }
                    if (v107 >= v109)
                      goto LABEL_250;
                  }
                  v105 = v9;
LABEL_250:
                  *v105 = v99;
                }
                v94 = v98 + 1;
                v97 = v98;
              }
              while (v98 + 1 != a2);
            }
          }
          else if (!v96)
          {
            do
            {
              v162 = v94;
              v163 = v7[1];
              v164 = *(_QWORD **)(v163 + 48);
              if (v164)
              {
                v165 = -1;
                do
                {
                  if (v165 <= *(_DWORD *)(v164[3] + 28))
                    v165 = *(_DWORD *)(v164[3] + 28);
                  v164 = (_QWORD *)*v164;
                }
                while (v164);
              }
              else
              {
                v165 = -1;
              }
              v166 = *v7;
              v167 = *(_QWORD **)(*v7 + 48);
              if (v167)
              {
                v168 = -1;
                do
                {
                  if (v168 <= *(_DWORD *)(v167[3] + 28))
                    v168 = *(_DWORD *)(v167[3] + 28);
                  v167 = (_QWORD *)*v167;
                }
                while (v167);
              }
              else
              {
                v168 = -1;
              }
              if (v165 < v168)
              {
                v169 = v162;
                do
                {
                  *v169 = v166;
                  v169 = v7;
                  v170 = *(_QWORD **)(v163 + 48);
                  if (v170)
                  {
                    v171 = -1;
                    do
                    {
                      if (v171 <= *(_DWORD *)(v170[3] + 28))
                        v171 = *(_DWORD *)(v170[3] + 28);
                      v170 = (_QWORD *)*v170;
                    }
                    while (v170);
                  }
                  else
                  {
                    v171 = -1;
                  }
                  --v7;
                  v166 = *(v169 - 1);
                  v172 = *(_QWORD **)(v166 + 48);
                  if (v172)
                  {
                    v173 = -1;
                    do
                    {
                      if (v173 <= *(_DWORD *)(v172[3] + 28))
                        v173 = *(_DWORD *)(v172[3] + 28);
                      v172 = (_QWORD *)*v172;
                    }
                    while (v172);
                  }
                  else
                  {
                    v173 = -1;
                  }
                }
                while (v171 < v173);
                *v169 = v163;
              }
              v94 = v162 + 1;
              v7 = v162;
            }
            while (v162 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v110 = (v11 - 2) >> 1;
            v111 = v110;
            do
            {
              v112 = v111;
              if (v110 >= v111)
              {
                v113 = (2 * v111) | 1;
                v114 = &v9[v113];
                if (2 * v112 + 2 < (uint64_t)v11)
                {
                  v115 = *(_QWORD **)(*v114 + 48);
                  if (v115)
                  {
                    v116 = -1;
                    do
                    {
                      if (v116 <= *(_DWORD *)(v115[3] + 28))
                        v116 = *(_DWORD *)(v115[3] + 28);
                      v115 = (_QWORD *)*v115;
                    }
                    while (v115);
                  }
                  else
                  {
                    v116 = -1;
                  }
                  v117 = v114[1];
                  ++v114;
                  v118 = *(_QWORD **)(v117 + 48);
                  if (v118)
                  {
                    v119 = -1;
                    do
                    {
                      if (v119 <= *(_DWORD *)(v118[3] + 28))
                        v119 = *(_DWORD *)(v118[3] + 28);
                      v118 = (_QWORD *)*v118;
                    }
                    while (v118);
                  }
                  else
                  {
                    v119 = -1;
                  }
                  if (v116 < v119)
                    v113 = 2 * v112 + 2;
                  else
                    v114 = &v9[v113];
                }
                v120 = *v114;
                v121 = *(_QWORD **)(*v114 + 48);
                if (v121)
                {
                  v122 = -1;
                  do
                  {
                    if (v122 <= *(_DWORD *)(v121[3] + 28))
                      v122 = *(_DWORD *)(v121[3] + 28);
                    v121 = (_QWORD *)*v121;
                  }
                  while (v121);
                }
                else
                {
                  v122 = -1;
                }
                result = (uint64_t)&v9[v112];
                v123 = *(_QWORD *)result;
                v124 = *(_QWORD **)(*(_QWORD *)result + 48);
                if (v124)
                {
                  v125 = -1;
                  do
                  {
                    if (v125 <= *(_DWORD *)(v124[3] + 28))
                      v125 = *(_DWORD *)(v124[3] + 28);
                    v124 = (_QWORD *)*v124;
                  }
                  while (v124);
                }
                else
                {
                  v125 = -1;
                }
                if (v122 >= v125)
                {
                  do
                  {
                    v126 = v114;
                    *(_QWORD *)result = v120;
                    if (v110 < v113)
                      break;
                    v127 = (2 * v113) | 1;
                    v114 = &v9[v127];
                    if (2 * v113 + 2 >= (uint64_t)v11)
                    {
                      v113 = (2 * v113) | 1;
                    }
                    else
                    {
                      v128 = *(_QWORD **)(*v114 + 48);
                      if (v128)
                      {
                        v129 = -1;
                        do
                        {
                          if (v129 <= *(_DWORD *)(v128[3] + 28))
                            v129 = *(_DWORD *)(v128[3] + 28);
                          v128 = (_QWORD *)*v128;
                        }
                        while (v128);
                      }
                      else
                      {
                        v129 = -1;
                      }
                      v130 = v114[1];
                      ++v114;
                      v131 = *(_QWORD **)(v130 + 48);
                      if (v131)
                      {
                        v132 = -1;
                        do
                        {
                          if (v132 <= *(_DWORD *)(v131[3] + 28))
                            v132 = *(_DWORD *)(v131[3] + 28);
                          v131 = (_QWORD *)*v131;
                        }
                        while (v131);
                      }
                      else
                      {
                        v132 = -1;
                      }
                      if (v129 < v132)
                      {
                        v113 = 2 * v113 + 2;
                      }
                      else
                      {
                        v114 = &v9[v127];
                        v113 = (2 * v113) | 1;
                      }
                    }
                    v120 = *v114;
                    v133 = *(_QWORD **)(*v114 + 48);
                    if (v133)
                    {
                      v134 = -1;
                      do
                      {
                        if (v134 <= *(_DWORD *)(v133[3] + 28))
                          v134 = *(_DWORD *)(v133[3] + 28);
                        v133 = (_QWORD *)*v133;
                      }
                      while (v133);
                    }
                    else
                    {
                      v134 = -1;
                    }
                    v135 = *(_QWORD **)(v123 + 48);
                    if (v135)
                    {
                      v136 = -1;
                      do
                      {
                        if (v136 <= *(_DWORD *)(v135[3] + 28))
                          v136 = *(_DWORD *)(v135[3] + 28);
                        v135 = (_QWORD *)*v135;
                      }
                      while (v135);
                    }
                    else
                    {
                      v136 = -1;
                    }
                    result = (uint64_t)v126;
                  }
                  while (v134 >= v136);
                  *v126 = v123;
                }
              }
              v111 = v112 - 1;
            }
            while (v112);
            v137 = (unint64_t)v10 >> 3;
            do
            {
              v138 = 0;
              v139 = *v9;
              v140 = v9;
              do
              {
                v141 = &v140[v138 + 1];
                v142 = (2 * v138) | 1;
                v143 = 2 * v138 + 2;
                if (v143 < v137)
                {
                  v144 = *(_QWORD **)(*v141 + 48);
                  if (v144)
                  {
                    v145 = -1;
                    do
                    {
                      if (v145 <= *(_DWORD *)(v144[3] + 28))
                        v145 = *(_DWORD *)(v144[3] + 28);
                      v144 = (_QWORD *)*v144;
                    }
                    while (v144);
                  }
                  else
                  {
                    v145 = -1;
                  }
                  result = *(_QWORD *)(v141[1] + 48);
                  if (result)
                  {
                    v146 = -1;
                    do
                    {
                      if (v146 <= *(_DWORD *)(*(_QWORD *)(result + 24) + 28))
                        v146 = *(_DWORD *)(*(_QWORD *)(result + 24) + 28);
                      result = *(_QWORD *)result;
                    }
                    while (result);
                  }
                  else
                  {
                    v146 = -1;
                  }
                  if (v145 < v146)
                  {
                    ++v141;
                    v142 = v143;
                  }
                }
                *v140 = *v141;
                v140 = v141;
                v138 = v142;
              }
              while (v142 <= (uint64_t)((unint64_t)(v137 - 2) >> 1));
              if (v141 == --a2)
              {
                *v141 = v139;
              }
              else
              {
                *v141 = *a2;
                *a2 = v139;
                v147 = (char *)v141 - (char *)v9 + 8;
                if (v147 >= 9)
                {
                  v148 = (((unint64_t)v147 >> 3) - 2) >> 1;
                  v149 = &v9[v148];
                  v150 = *v149;
                  v151 = *(_QWORD **)(*v149 + 48);
                  if (v151)
                  {
                    v152 = -1;
                    do
                    {
                      if (v152 <= *(_DWORD *)(v151[3] + 28))
                        v152 = *(_DWORD *)(v151[3] + 28);
                      v151 = (_QWORD *)*v151;
                    }
                    while (v151);
                  }
                  else
                  {
                    v152 = -1;
                  }
                  v153 = *v141;
                  v154 = *(_QWORD **)(*v141 + 48);
                  if (v154)
                  {
                    v155 = -1;
                    do
                    {
                      if (v155 <= *(_DWORD *)(v154[3] + 28))
                        v155 = *(_DWORD *)(v154[3] + 28);
                      v154 = (_QWORD *)*v154;
                    }
                    while (v154);
                  }
                  else
                  {
                    v155 = -1;
                  }
                  if (v152 < v155)
                  {
                    do
                    {
                      v156 = v149;
                      *v141 = v150;
                      if (!v148)
                        break;
                      v148 = (v148 - 1) >> 1;
                      v149 = &v9[v148];
                      v150 = *v149;
                      v157 = *(_QWORD **)(*v149 + 48);
                      if (v157)
                      {
                        v158 = -1;
                        do
                        {
                          if (v158 <= *(_DWORD *)(v157[3] + 28))
                            v158 = *(_DWORD *)(v157[3] + 28);
                          v157 = (_QWORD *)*v157;
                        }
                        while (v157);
                      }
                      else
                      {
                        v158 = -1;
                      }
                      v159 = *(_QWORD **)(v153 + 48);
                      if (v159)
                      {
                        v160 = -1;
                        do
                        {
                          if (v160 <= *(_DWORD *)(v159[3] + 28))
                            v160 = *(_DWORD *)(v159[3] + 28);
                          v159 = (_QWORD *)*v159;
                        }
                        while (v159);
                      }
                      else
                      {
                        v160 = -1;
                      }
                      v141 = v156;
                    }
                    while (v158 < v160);
                    *v156 = v153;
                  }
                }
              }
            }
            while (v137-- > 2);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &v9[v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **>(&v7[v11 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **>(v7, &v7[v11 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **>(v7 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **>(v7 + 2, &v7[v12 + 1], a2 - 3);
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **>(v13 - 1, v13, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *v7;
        if ((a4 & 1) == 0)
        {
          v17 = *(_QWORD **)(*(v7 - 1) + 48);
          if (v17)
          {
            v18 = -1;
            do
            {
              if (v18 <= *(_DWORD *)(v17[3] + 28))
                v18 = *(_DWORD *)(v17[3] + 28);
              v17 = (_QWORD *)*v17;
            }
            while (v17);
            v19 = (_QWORD *)(v15 + 48);
            v16 = *(_QWORD **)(v15 + 48);
            if (!v16)
            {
LABEL_105:
              v16 = 0;
              v56 = *v8;
              v57 = -1;
              LOBYTE(v58) = 1;
              goto LABEL_110;
            }
          }
          else
          {
            v19 = (_QWORD *)(v15 + 48);
            v16 = *(_QWORD **)(v15 + 48);
            if (!v16)
              goto LABEL_105;
            v18 = -1;
          }
          v20 = -1;
          v21 = v16;
          do
          {
            if (v20 <= *(_DWORD *)(v21[3] + 28))
              v20 = *(_DWORD *)(v21[3] + 28);
            v21 = (_QWORD *)*v21;
          }
          while (v21);
          if (v18 < v20)
            goto LABEL_25;
          v56 = *v8;
          v57 = -1;
          v58 = v16;
          do
          {
            if (v57 <= *(_DWORD *)(v58[3] + 28))
              v57 = *(_DWORD *)(v58[3] + 28);
            v58 = (_QWORD *)*v58;
          }
          while (v58);
LABEL_110:
          v59 = *(_QWORD **)(v56 + 48);
          if (v59)
          {
            v60 = -1;
            do
            {
              if (v60 <= *(_DWORD *)(v59[3] + 28))
                v60 = *(_DWORD *)(v59[3] + 28);
              v59 = (_QWORD *)*v59;
            }
            while (v59);
          }
          else
          {
            v60 = -1;
          }
          v9 = v7;
          if (v57 >= v60)
          {
            do
            {
              if (++v9 >= a2)
                break;
              v66 = -1;
              if ((v58 & 1) == 0)
              {
                v67 = v16;
                do
                {
                  if (v66 <= *(_DWORD *)(v67[3] + 28))
                    v66 = *(_DWORD *)(v67[3] + 28);
                  v67 = (_QWORD *)*v67;
                }
                while (v67);
              }
              v68 = *(_QWORD **)(*v9 + 48);
              if (v68)
              {
                v69 = -1;
                do
                {
                  if (v69 <= *(_DWORD *)(v68[3] + 28))
                    v69 = *(_DWORD *)(v68[3] + 28);
                  v68 = (_QWORD *)*v68;
                }
                while (v68);
              }
              else
              {
                v69 = -1;
              }
            }
            while (v66 >= v69);
          }
          else
          {
            v9 = v7;
            do
            {
              v61 = -1;
              if ((v58 & 1) == 0)
              {
                v62 = v16;
                do
                {
                  if (v61 <= *(_DWORD *)(v62[3] + 28))
                    v61 = *(_DWORD *)(v62[3] + 28);
                  v62 = (_QWORD *)*v62;
                }
                while (v62);
              }
              v63 = v9[1];
              ++v9;
              v64 = *(_QWORD **)(v63 + 48);
              if (v64)
              {
                v65 = -1;
                do
                {
                  if (v65 <= *(_DWORD *)(v64[3] + 28))
                    v65 = *(_DWORD *)(v64[3] + 28);
                  v64 = (_QWORD *)*v64;
                }
                while (v64);
              }
              else
              {
                v65 = -1;
              }
            }
            while (v61 >= v65);
          }
          v70 = a2;
          if (v9 < a2)
          {
            v70 = a2;
            do
            {
              v71 = -1;
              if ((v58 & 1) == 0)
              {
                v72 = v16;
                do
                {
                  if (v71 <= *(_DWORD *)(v72[3] + 28))
                    v71 = *(_DWORD *)(v72[3] + 28);
                  v72 = (_QWORD *)*v72;
                }
                while (v72);
              }
              v73 = *--v70;
              v74 = *(_QWORD **)(v73 + 48);
              if (v74)
              {
                v75 = -1;
                do
                {
                  if (v75 <= *(_DWORD *)(v74[3] + 28))
                    v75 = *(_DWORD *)(v74[3] + 28);
                  v74 = (_QWORD *)*v74;
                }
                while (v74);
              }
              else
              {
                v75 = -1;
              }
            }
            while (v71 < v75);
          }
          if (v9 < v70)
          {
            v76 = *v9;
            v77 = *v70;
            do
            {
              *v9 = v77;
              *v70 = v76;
              v78 = (_QWORD *)*v19;
              do
              {
                v79 = v9[1];
                ++v9;
                v76 = v79;
                v80 = -1;
                if (v78)
                {
                  v81 = (_QWORD *)*v19;
                  do
                  {
                    if (v80 <= *(_DWORD *)(v81[3] + 28))
                      v80 = *(_DWORD *)(v81[3] + 28);
                    v81 = (_QWORD *)*v81;
                  }
                  while (v81);
                }
                v82 = *(_QWORD **)(v76 + 48);
                if (v82)
                {
                  v83 = -1;
                  do
                  {
                    if (v83 <= *(_DWORD *)(v82[3] + 28))
                      v83 = *(_DWORD *)(v82[3] + 28);
                    v82 = (_QWORD *)*v82;
                  }
                  while (v82);
                }
                else
                {
                  v83 = -1;
                }
              }
              while (v80 >= v83);
              do
              {
                v84 = *--v70;
                v77 = v84;
                v85 = -1;
                if (v78)
                {
                  v86 = (_QWORD *)*v19;
                  do
                  {
                    if (v85 <= *(_DWORD *)(v86[3] + 28))
                      v85 = *(_DWORD *)(v86[3] + 28);
                    v86 = (_QWORD *)*v86;
                  }
                  while (v86);
                }
                v87 = *(_QWORD **)(v77 + 48);
                if (v87)
                {
                  v88 = -1;
                  do
                  {
                    if (v88 <= *(_DWORD *)(v87[3] + 28))
                      v88 = *(_DWORD *)(v87[3] + 28);
                    v87 = (_QWORD *)*v87;
                  }
                  while (v87);
                }
                else
                {
                  v88 = -1;
                }
              }
              while (v85 < v88);
            }
            while (v9 < v70);
          }
          v89 = v9 - 1;
          if (v9 - 1 != v7)
            *v7 = *v89;
          a4 = 0;
          *v89 = v15;
          continue;
        }
        v16 = *(_QWORD **)(v15 + 48);
LABEL_25:
        v22 = v7;
        do
        {
          v23 = v22;
          v25 = v22[1];
          ++v22;
          v24 = v25;
          v26 = *(_QWORD **)(v25 + 48);
          if (v26)
          {
            v27 = -1;
            do
            {
              if (v27 <= *(_DWORD *)(v26[3] + 28))
                v27 = *(_DWORD *)(v26[3] + 28);
              v26 = (_QWORD *)*v26;
            }
            while (v26);
          }
          else
          {
            v27 = -1;
          }
          v28 = -1;
          if (v16)
          {
            v29 = v16;
            do
            {
              if (v28 <= *(_DWORD *)(v29[3] + 28))
                v28 = *(_DWORD *)(v29[3] + 28);
              v29 = (_QWORD *)*v29;
            }
            while (v29);
          }
        }
        while (v27 < v28);
        v30 = a2;
        if (v23 == v7)
        {
          v30 = a2;
          do
          {
            if (v22 >= v30)
              break;
            v36 = *--v30;
            v37 = *(_QWORD **)(v36 + 48);
            if (v37)
            {
              v38 = -1;
              do
              {
                if (v38 <= *(_DWORD *)(v37[3] + 28))
                  v38 = *(_DWORD *)(v37[3] + 28);
                v37 = (_QWORD *)*v37;
              }
              while (v37);
            }
            else
            {
              v38 = -1;
            }
            v39 = -1;
            if (v16)
            {
              v40 = v16;
              do
              {
                if (v39 <= *(_DWORD *)(v40[3] + 28))
                  v39 = *(_DWORD *)(v40[3] + 28);
                v40 = (_QWORD *)*v40;
              }
              while (v40);
            }
          }
          while (v38 >= v39);
        }
        else
        {
          do
          {
            v31 = *--v30;
            v32 = *(_QWORD **)(v31 + 48);
            if (v32)
            {
              v33 = -1;
              do
              {
                if (v33 <= *(_DWORD *)(v32[3] + 28))
                  v33 = *(_DWORD *)(v32[3] + 28);
                v32 = (_QWORD *)*v32;
              }
              while (v32);
            }
            else
            {
              v33 = -1;
            }
            v34 = -1;
            if (v16)
            {
              v35 = v16;
              do
              {
                if (v34 <= *(_DWORD *)(v35[3] + 28))
                  v34 = *(_DWORD *)(v35[3] + 28);
                v35 = (_QWORD *)*v35;
              }
              while (v35);
            }
          }
          while (v33 >= v34);
        }
        if (v22 < v30)
        {
          v41 = *v30;
          v42 = v22;
          v43 = v30;
          do
          {
            *v42 = v41;
            *v43 = v24;
            v44 = *(_QWORD *)(v15 + 48);
            do
            {
              v23 = v42;
              v45 = v42[1];
              ++v42;
              v24 = v45;
              v46 = *(_QWORD **)(v45 + 48);
              if (v46)
              {
                v47 = -1;
                do
                {
                  if (v47 <= *(_DWORD *)(v46[3] + 28))
                    v47 = *(_DWORD *)(v46[3] + 28);
                  v46 = (_QWORD *)*v46;
                }
                while (v46);
              }
              else
              {
                v47 = -1;
              }
              v48 = -1;
              if (v44)
              {
                v49 = *(_QWORD **)(v15 + 48);
                do
                {
                  if (v48 <= *(_DWORD *)(v49[3] + 28))
                    v48 = *(_DWORD *)(v49[3] + 28);
                  v49 = (_QWORD *)*v49;
                }
                while (v49);
              }
            }
            while (v47 < v48);
            do
            {
              v50 = *--v43;
              v41 = v50;
              v51 = *(_QWORD **)(v50 + 48);
              if (v51)
              {
                v52 = -1;
                do
                {
                  if (v52 <= *(_DWORD *)(v51[3] + 28))
                    v52 = *(_DWORD *)(v51[3] + 28);
                  v51 = (_QWORD *)*v51;
                }
                while (v51);
              }
              else
              {
                v52 = -1;
              }
              v53 = -1;
              if (v44)
              {
                v54 = *(_QWORD **)(v15 + 48);
                do
                {
                  if (v53 <= *(_DWORD *)(v54[3] + 28))
                    v53 = *(_DWORD *)(v54[3] + 28);
                  v54 = (_QWORD *)*v54;
                }
                while (v54);
              }
            }
            while (v52 >= v53);
          }
          while (v42 < v43);
        }
        if (v23 != v7)
          *v7 = *v23;
        *v23 = v15;
        if (v22 < v30)
        {
LABEL_104:
          result = std::__introsort<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **,false>(v7, v23, a3, a4 & 1);
          a4 = 0;
          v9 = v23 + 1;
          continue;
        }
        v55 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **>(v7, v23);
        v9 = v23 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **>(v23 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v55)
            continue;
          goto LABEL_104;
        }
        a2 = v23;
        if (!v55)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  _QWORD *v29;
  int v30;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **>(a1, a2, a3, a4);
  v11 = *a4;
  v12 = *(_QWORD **)(*a5 + 48);
  if (v12)
  {
    v13 = -1;
    do
    {
      if (v13 <= *(_DWORD *)(v12[3] + 28))
        v13 = *(_DWORD *)(v12[3] + 28);
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v13 = -1;
  }
  v14 = *(_QWORD **)(v11 + 48);
  if (v14)
  {
    v15 = -1;
    do
    {
      if (v15 <= *(_DWORD *)(v14[3] + 28))
        v15 = *(_DWORD *)(v14[3] + 28);
      v14 = (_QWORD *)*v14;
    }
    while (v14);
  }
  else
  {
    v15 = -1;
  }
  if (v13 < v15)
  {
    *a4 = *a5;
    *a5 = v11;
    v16 = *a3;
    v17 = *(_QWORD **)(*a4 + 48);
    if (v17)
    {
      v18 = -1;
      do
      {
        if (v18 <= *(_DWORD *)(v17[3] + 28))
          v18 = *(_DWORD *)(v17[3] + 28);
        v17 = (_QWORD *)*v17;
      }
      while (v17);
    }
    else
    {
      v18 = -1;
    }
    v19 = *(_QWORD **)(v16 + 48);
    if (v19)
    {
      v20 = -1;
      do
      {
        if (v20 <= *(_DWORD *)(v19[3] + 28))
          v20 = *(_DWORD *)(v19[3] + 28);
        v19 = (_QWORD *)*v19;
      }
      while (v19);
    }
    else
    {
      v20 = -1;
    }
    if (v18 < v20)
    {
      *a3 = *a4;
      *a4 = v16;
      v21 = *a2;
      v22 = *(_QWORD **)(*a3 + 48);
      if (v22)
      {
        v23 = -1;
        do
        {
          if (v23 <= *(_DWORD *)(v22[3] + 28))
            v23 = *(_DWORD *)(v22[3] + 28);
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        v23 = -1;
      }
      v24 = *(_QWORD **)(v21 + 48);
      if (v24)
      {
        v25 = -1;
        do
        {
          if (v25 <= *(_DWORD *)(v24[3] + 28))
            v25 = *(_DWORD *)(v24[3] + 28);
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        v25 = -1;
      }
      if (v23 < v25)
      {
        *a2 = *a3;
        *a3 = v21;
        v26 = *a1;
        v27 = *(_QWORD **)(*a2 + 48);
        if (v27)
        {
          v28 = -1;
          do
          {
            if (v28 <= *(_DWORD *)(v27[3] + 28))
              v28 = *(_DWORD *)(v27[3] + 28);
            v27 = (_QWORD *)*v27;
          }
          while (v27);
        }
        else
        {
          v28 = -1;
        }
        v29 = *(_QWORD **)(v26 + 48);
        if (v29)
        {
          v30 = -1;
          do
          {
            if (v30 <= *(_DWORD *)(v29[3] + 28))
              v30 = *(_DWORD *)(v29[3] + 28);
            v29 = (_QWORD *)*v29;
          }
          while (v29);
        }
        else
        {
          v30 = -1;
        }
        if (v28 < v30)
        {
          *a1 = *a2;
          *a2 = v26;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  int k;
  int m;
  int i;
  int j;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;
  int v24;

  v3 = *a2;
  v4 = *result;
  v5 = *(_QWORD **)(*a2 + 48);
  if (v5)
  {
    v6 = -1;
    v7 = *(_QWORD **)(*a2 + 48);
    do
    {
      if (v6 <= *(_DWORD *)(v7[3] + 28))
        v6 = *(_DWORD *)(v7[3] + 28);
      v7 = (_QWORD *)*v7;
    }
    while (v7);
  }
  else
  {
    v6 = -1;
  }
  v8 = *(_QWORD **)(v4 + 48);
  if (v8)
  {
    v9 = -1;
    do
    {
      if (v9 <= *(_DWORD *)(v8[3] + 28))
        v9 = *(_DWORD *)(v8[3] + 28);
      v8 = (_QWORD *)*v8;
    }
    while (v8);
  }
  else
  {
    v9 = -1;
  }
  v10 = *a3;
  v11 = *(_QWORD **)(*a3 + 48);
  if (v6 >= v9)
  {
    for (i = -1; v11; v11 = (_QWORD *)*v11)
    {
      if (i <= *(_DWORD *)(v11[3] + 28))
        i = *(_DWORD *)(v11[3] + 28);
    }
    for (j = -1; v5; v5 = (_QWORD *)*v5)
    {
      if (j <= *(_DWORD *)(v5[3] + 28))
        j = *(_DWORD *)(v5[3] + 28);
    }
    if (i < j)
    {
      *a2 = v10;
      *a3 = v3;
      v16 = *result;
      v17 = *(_QWORD **)(*a2 + 48);
      if (v17)
      {
        v18 = -1;
        do
        {
          if (v18 <= *(_DWORD *)(v17[3] + 28))
            v18 = *(_DWORD *)(v17[3] + 28);
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        v18 = -1;
      }
      v21 = *(_QWORD **)(v16 + 48);
      if (v21)
      {
        v22 = -1;
        do
        {
          if (v22 <= *(_DWORD *)(v21[3] + 28))
            v22 = *(_DWORD *)(v21[3] + 28);
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        v22 = -1;
      }
      if (v18 < v22)
      {
        *result = *a2;
        *a2 = v16;
      }
    }
  }
  else
  {
    for (k = -1; v11; v11 = (_QWORD *)*v11)
    {
      if (k <= *(_DWORD *)(v11[3] + 28))
        k = *(_DWORD *)(v11[3] + 28);
    }
    for (m = -1; v5; v5 = (_QWORD *)*v5)
    {
      if (m <= *(_DWORD *)(v5[3] + 28))
        m = *(_DWORD *)(v5[3] + 28);
    }
    if (k < m)
    {
      *result = v10;
LABEL_67:
      *a3 = v4;
      return result;
    }
    *result = v3;
    *a2 = v4;
    v19 = *(_QWORD **)(*a3 + 48);
    if (v19)
    {
      v20 = -1;
      do
      {
        if (v20 <= *(_DWORD *)(v19[3] + 28))
          v20 = *(_DWORD *)(v19[3] + 28);
        v19 = (_QWORD *)*v19;
      }
      while (v19);
    }
    else
    {
      v20 = -1;
    }
    v23 = *(_QWORD **)(v4 + 48);
    if (v23)
    {
      v24 = -1;
      do
      {
        if (v24 <= *(_DWORD *)(v23[3] + 28))
          v24 = *(_DWORD *)(v23[3] + 28);
        v23 = (_QWORD *)*v23;
      }
      while (v23);
    }
    else
    {
      v24 = -1;
    }
    if (v20 < v24)
    {
      *a2 = *a3;
      goto LABEL_67;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t *v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  int v23;
  _QWORD *v24;
  int v25;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *(_QWORD **)(v6 + 48);
      if (v8)
      {
        v9 = -1;
        do
        {
          if (v9 <= *(_DWORD *)(v8[3] + 28))
            v9 = *(_DWORD *)(v8[3] + 28);
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        v9 = -1;
      }
      v24 = *(_QWORD **)(v7 + 48);
      if (v24)
      {
        v25 = -1;
        do
        {
          if (v25 <= *(_DWORD *)(v24[3] + 28))
            v25 = *(_DWORD *)(v24[3] + 28);
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        v25 = -1;
      }
      if (v9 < v25)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **>(a1, a1 + 1, a1 + 2);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *v11;
    v14 = *(_QWORD **)(*v11 + 48);
    if (v14)
    {
      v15 = -1;
      do
      {
        if (v15 <= *(_DWORD *)(v14[3] + 28))
          v15 = *(_DWORD *)(v14[3] + 28);
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v15 = -1;
    }
    v16 = *v10;
    v17 = *(_QWORD **)(*v10 + 48);
    if (v17)
    {
      v18 = -1;
      do
      {
        if (v18 <= *(_DWORD *)(v17[3] + 28))
          v18 = *(_DWORD *)(v17[3] + 28);
        v17 = (_QWORD *)*v17;
      }
      while (v17);
    }
    else
    {
      v18 = -1;
    }
    if (v15 < v18)
    {
      v19 = v11;
      while (1)
      {
        *v19 = v16;
        if (v10 == a1)
          break;
        v19 = v10;
        v20 = *(_QWORD **)(v13 + 48);
        if (v20)
        {
          v21 = -1;
          do
          {
            if (v21 <= *(_DWORD *)(v20[3] + 28))
              v21 = *(_DWORD *)(v20[3] + 28);
            v20 = (_QWORD *)*v20;
          }
          while (v20);
        }
        else
        {
          v21 = -1;
        }
        --v10;
        v16 = *(v19 - 1);
        v22 = *(_QWORD **)(v16 + 48);
        if (v22)
        {
          v23 = -1;
          do
          {
            if (v23 <= *(_DWORD *)(v22[3] + 28))
              v23 = *(_DWORD *)(v22[3] + 28);
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          v23 = -1;
        }
        if (v21 >= v23)
          goto LABEL_44;
      }
      v19 = a1;
LABEL_44:
      *v19 = v13;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11++;
    if (v11 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  int v23;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes(void)::$_1 &,Phase::Controller::DVM::VoicePoolNode **>(a1, a2, a3);
  v9 = *a3;
  v10 = *(_QWORD **)(*a4 + 48);
  if (v10)
  {
    v11 = -1;
    do
    {
      if (v11 <= *(_DWORD *)(v10[3] + 28))
        v11 = *(_DWORD *)(v10[3] + 28);
      v10 = (_QWORD *)*v10;
    }
    while (v10);
  }
  else
  {
    v11 = -1;
  }
  v12 = *(_QWORD **)(v9 + 48);
  if (v12)
  {
    v13 = -1;
    do
    {
      if (v13 <= *(_DWORD *)(v12[3] + 28))
        v13 = *(_DWORD *)(v12[3] + 28);
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v13 = -1;
  }
  if (v11 < v13)
  {
    *a3 = *a4;
    *a4 = v9;
    v14 = *a2;
    v15 = *(_QWORD **)(*a3 + 48);
    if (v15)
    {
      v16 = -1;
      do
      {
        if (v16 <= *(_DWORD *)(v15[3] + 28))
          v16 = *(_DWORD *)(v15[3] + 28);
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
    else
    {
      v16 = -1;
    }
    v17 = *(_QWORD **)(v14 + 48);
    if (v17)
    {
      v18 = -1;
      do
      {
        if (v18 <= *(_DWORD *)(v17[3] + 28))
          v18 = *(_DWORD *)(v17[3] + 28);
        v17 = (_QWORD *)*v17;
      }
      while (v17);
    }
    else
    {
      v18 = -1;
    }
    if (v16 < v18)
    {
      *a2 = *a3;
      *a3 = v14;
      v19 = *a1;
      v20 = *(_QWORD **)(*a2 + 48);
      if (v20)
      {
        v21 = -1;
        do
        {
          if (v21 <= *(_DWORD *)(v20[3] + 28))
            v21 = *(_DWORD *)(v20[3] + 28);
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        v21 = -1;
      }
      v22 = *(_QWORD **)(v19 + 48);
      if (v22)
      {
        v23 = -1;
        do
        {
          if (v23 <= *(_DWORD *)(v22[3] + 28))
            v23 = *(_DWORD *)(v22[3] + 28);
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        v23 = -1;
      }
      if (v21 < v23)
      {
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

std::string *Phase::Controller::DSPVoiceManager::Implementation::Implementation(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::string::value_type *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char v24;
  std::string *v25;
  size_t v27;
  std::string *v28;
  void *__p[2];
  char v30;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *a3;
  v7 = a3[1];
  v8 = a3[2];
  this[3].__r_.__value_.__r.__words[0] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v7;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = v8;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  v28 = this;
  std::string::basic_string[abi:ne180100]<0>(__p, "VoiceEngine-DVM");
  Phase::DspLayer::VoiceEngine::VoiceEngine((uint64_t)&this[3].__r_.__value_.__l.__size_, (__int128 *)__p);
  v9 = &this[3126].__r_.__value_.__s.__data_[8];
  if (v30 < 0)
    operator delete(__p[0]);
  *(_QWORD *)v9 = 0x40E7700000000000;
  *(_OWORD *)&this[3126].__r_.__value_.__r.__words[2] = xmmword_2166F7E70;
  this[3127].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[3127].__r_.__value_.__r.__words[2]) = 0;
  *(_OWORD *)&this[3128].__r_.__value_.__l.__data_ = xmmword_2166F7500;
  this[3129].__r_.__value_.__r.__words[0] = 0;
  LODWORD(this[3128].__r_.__value_.__r.__words[2]) = 0;
  *(_OWORD *)&this[3129].__r_.__value_.__r.__words[1] = xmmword_2166F7E80;
  v10 = malloc_type_malloc(0x100000uLL, 0xED83EC4BuLL);
  this[3130].__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  this[3130].__r_.__value_.__l.__size_ = (std::string::size_type)v10;
  this[3130].__r_.__value_.__s.__data_[16] = 0;
  bzero(v10, SLODWORD(this[3129].__r_.__value_.__r.__words[1]));
  *(_OWORD *)&this[3131].__r_.__value_.__l.__data_ = xmmword_2166F7E80;
  v11 = malloc_type_malloc(0x100000uLL, 0xED83EC4BuLL);
  this[3131].__r_.__value_.__r.__words[2] = (std::string::size_type)v11;
  this[3132].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  this[3132].__r_.__value_.__s.__data_[8] = 0;
  bzero(v11, SLODWORD(this[3131].__r_.__value_.__l.__data_));
  this[3133].__r_.__value_.__l.__size_ = 0;
  this[3133].__r_.__value_.__r.__words[2] = 0;
  this[3134].__r_.__value_.__r.__words[0] = 0;
  Phase::Controller::DSPVoiceManager::Implementation::_Configure((Phase::Controller::DSPVoiceManager::Implementation *)this);
  v12 = LODWORD(this[3129].__r_.__value_.__r.__words[1]) - 32;
  v13 = *((_QWORD *)v9 + 21);
  v14 = (char *)*((_QWORD *)v9 + 22);
  v15 = v12 - (_QWORD)&v14[-v13];
  if (v12 <= (unint64_t)&v14[-v13])
  {
    v25 = v28;
    if (v12 < (unint64_t)&v14[-v13])
      *((_QWORD *)v9 + 22) = v13 + v12;
  }
  else
  {
    v16 = *((_QWORD *)v9 + 23);
    if (v16 - (uint64_t)v14 >= v15)
    {
      bzero(*((void **)v9 + 22), v12 - (_QWORD)&v14[-v13]);
      *((_QWORD *)v9 + 22) = v12 + v13;
      v25 = v28;
    }
    else
    {
      if ((v12 & 0x80000000) != 0)
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      v17 = v16 - v13;
      v18 = 2 * v17;
      if (2 * v17 <= v12)
        v18 = *((_DWORD *)v9 + 18) - 32;
      if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
        v19 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      v27 = v19;
      v20 = (char *)operator new(v19);
      v21 = &v20[v27];
      v22 = &v20[v12];
      bzero(&v14[(_QWORD)v20 - v13], v15);
      if (v14 == (char *)v13)
      {
        v20 = &v14[(_QWORD)v20 - v13];
      }
      else
      {
        v23 = &v14[~v13];
        do
        {
          v24 = *--v14;
          (v23--)[(_QWORD)v20] = v24;
        }
        while (v14 != (char *)v13);
        v14 = (char *)*((_QWORD *)v9 + 21);
      }
      v25 = v28;
      *((_QWORD *)v9 + 21) = v20;
      *((_QWORD *)v9 + 22) = v22;
      *((_QWORD *)v9 + 23) = v21;
      if (v14)
        operator delete(v14);
    }
  }
  *(_OWORD *)&v25[3135].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v25[3136].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&v25[3134].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&v25[3135].__r_.__value_.__l.__data_ = 0u;
  return v25;
}

void sub_21658D7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t *a11, Phase::DspLayer::VoiceEngine *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  Phase::Controller::DVM::VoiceGraph **v21;

  Phase::LockFreeQueueSPSC::~LockFreeQueueSPSC(a10);
  std::unique_ptr<Phase::Controller::DVM_RT>::reset[abi:ne180100](a11, 0);
  Phase::DspLayer::VoiceEngine::~VoiceEngine(a12);
  std::unique_ptr<Phase::Controller::DVM::VoiceGraph>::reset[abi:ne180100](v21, 0);
  if (*(char *)(a15 + 23) < 0)
    operator delete(*(void **)a15);
  _Unwind_Resume(a1);
}

void Phase::Controller::DSPVoiceManager::Implementation::_Configure(Phase::Controller::DSPVoiceManager::Implementation *this)
{
  char *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  Phase::Controller::DVM::VoiceGraph *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  Phase::Controller::DSPVoiceManager::Implementation *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)this + 75032;
  v3 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 80));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_QWORD *)this + 3);
    v5 = *((_DWORD *)this + 9);
    v6 = *((_DWORD *)this + 10);
    v11 = 136316418;
    v12 = "DVMImplementation.mm";
    v13 = 1024;
    v14 = 70;
    v15 = 2048;
    v16 = this;
    v17 = 2048;
    v18 = v4;
    v19 = 1024;
    v20 = v5;
    v21 = 1024;
    v22 = v6;
    _os_log_impl(&dword_2164CC000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: configuring with sample rate %.f Hz, channels [out %d, in %d]", (uint8_t *)&v11, 0x32u);
  }
  *(_QWORD *)v2 = *((_QWORD *)this + 3);
  *((_DWORD *)v2 + 2) = *((_DWORD *)this + 8);
  *((_DWORD *)v2 + 3) = 12;
  *((_DWORD *)v2 + 4) = *((_DWORD *)this + 10) + 64;
  *((_DWORD *)v2 + 5) = 4096;
  Phase::DspLayer::VoiceEngine::Configure((uint64_t)this + 80, v2);
  v7 = Phase::Controller::TaskManager::GetService<Phase::Controller::VoicePoolRegistry>(*((Phase::Logger **)this + 7), 3);
  v8 = Phase::Controller::TaskManager::GetService<Phase::Controller::ProcedureRegistry>(*((Phase::Logger **)this + 7), 4);
  v9 = (Phase::Controller::DVM::VoiceGraph *)operator new();
  Phase::Controller::DVM::VoiceGraph::VoiceGraph((uint64_t)v9, (uint64_t)this + 80, (__int128 *)v2, 256, v7, v8, *((_QWORD *)this + 6), *((_QWORD *)this + 8));
  std::unique_ptr<Phase::Controller::DVM::VoiceGraph>::reset[abi:ne180100]((Phase::Controller::DVM::VoiceGraph **)this + 9, v9);
  v10 = operator new();
  Phase::Controller::DVM_RT::DVM_RT(v10, (uint64_t)this + 75104, (uint64_t)this + 75144, (uint64_t)this + 80);
  std::unique_ptr<Phase::Controller::DVM_RT>::reset[abi:ne180100]((uint64_t *)v2 + 8, v10);
  Phase::Controller::ProcedureManager_RT::Initialize((Phase::Controller::ProcedureManager_RT *)(*((_QWORD *)v2 + 8) + 2440384), 64);
}

void sub_21658DA44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10F0C4068E752D1);
  _Unwind_Resume(a1);
}

void Phase::Controller::DSPVoiceManager::Implementation::~Implementation(Phase::Controller::DSPVoiceManager::Implementation *this)
{
  char *v2;
  void *v3;

  v2 = (char *)this + 75200;
  v3 = (void *)*((_QWORD *)this + 9400);
  if (v3)
  {
    *((_QWORD *)v2 + 1) = v3;
    operator delete(v3);
  }
  Phase::LockFreeQueueSPSC::~LockFreeQueueSPSC((void **)this + 9393);
  Phase::LockFreeQueueSPSC::~LockFreeQueueSPSC((void **)this + 9388);
  std::unique_ptr<Phase::Controller::DVM_RT>::reset[abi:ne180100]((uint64_t *)this + 9387, 0);
  Phase::DspLayer::VoiceEngine::~VoiceEngine((Phase::Controller::DSPVoiceManager::Implementation *)((char *)this + 80));
  std::unique_ptr<Phase::Controller::DVM::VoiceGraph>::reset[abi:ne180100]((Phase::Controller::DVM::VoiceGraph **)this + 9, 0);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void Phase::Controller::DSPVoiceManager::Implementation::Reset(Phase::Controller::DSPVoiceManager::Implementation *this)
{
  Phase::Controller::DSPVoiceManager::Implementation *v1;
  char *v2;
  Phase::Controller::DVM::VoiceGraph **v3;
  uint64_t v4;
  uint64_t v5;
  Phase::Controller::DVM::VoiceGraph *v6;

  v1 = this;
  v2 = (char *)this + 80;
  *((_QWORD *)this + 15) = *((_QWORD *)this + 14);
  Phase::CalendarQueue<128,1024,Phase::DspLayer::VoiceEngine::Action>::Clear((uint64_t)this + 240);
  v3 = (Phase::Controller::DVM::VoiceGraph **)((char *)v1 + 72);
  std::unique_ptr<Phase::Controller::DVM::VoiceGraph>::reset[abi:ne180100]((Phase::Controller::DVM::VoiceGraph **)v1 + 9, 0);
  v4 = Phase::Controller::TaskManager::GetService<Phase::Controller::VoicePoolRegistry>(*((Phase::Logger **)v1 + 7), 3);
  v5 = Phase::Controller::TaskManager::GetService<Phase::Controller::ProcedureRegistry>(*((Phase::Logger **)v1 + 7), 4);
  v6 = (Phase::Controller::DVM::VoiceGraph *)operator new();
  Phase::Controller::DVM::VoiceGraph::VoiceGraph((uint64_t)v6, (uint64_t)v2, (__int128 *)((char *)v1 + 75032), 256, v4, v5, *((_QWORD *)v1 + 6), *((_QWORD *)v1 + 8));
  v1 = (Phase::Controller::DSPVoiceManager::Implementation *)((char *)v1 + 75096);
  std::unique_ptr<Phase::Controller::DVM::VoiceGraph>::reset[abi:ne180100](v3, v6);
  Phase::Controller::DVM_RT::Reset(*(Phase::Controller::DVM_RT **)v1);
  *((_DWORD *)v1 + 5) = 0;
  *((_DWORD *)v1 + 3) = 0;
  **((_DWORD **)v1 + 4) = 0;
  *((_DWORD *)v1 + 15) = 0;
  *((_DWORD *)v1 + 13) = 0;
  **((_DWORD **)v1 + 9) = 0;
}

void sub_21658DC08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10B0C40DC91DD83);
  _Unwind_Resume(a1);
}

Phase::Controller::DVM::VoiceGraph *std::unique_ptr<Phase::Controller::DVM::VoiceGraph>::reset[abi:ne180100](Phase::Controller::DVM::VoiceGraph **a1, Phase::Controller::DVM::VoiceGraph *a2)
{
  Phase::Controller::DVM::VoiceGraph *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::DVM::VoiceGraph::~VoiceGraph(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void Phase::Controller::DSPVoiceManager::Implementation::Update(Phase::Controller::DSPVoiceManager::Implementation *this)
{
  char *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  void **v18;
  uint64_t v19;
  char *v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  Phase::Logger *v24;
  NSObject *v25;
  Phase::Logger *v26;
  Phase::Controller::DSPVoiceManager::Implementation *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  Phase::Logger *v32;
  Phase::Logger *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  Phase::Controller::DSPVoiceManager::Implementation *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  double v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  Phase::DspLayer::VoicePool *v48;
  unint64_t v49;
  uint64_t *v50;
  unsigned int v51;
  uint64_t v52;
  _QWORD *v53;
  Phase::Controller::DVM::VoiceGraph *v54;
  _QWORD *VoiceNode;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  Phase::Logger *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  int *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  NSObject *v92;
  const char *v93;
  const char *v94;
  _BYTE *v95;
  uint64_t v96;
  int *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  int *v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  int *v119;
  int *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int *v130;
  int *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t v136;
  unint64_t *p_shared_owners;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint8x8_t v142;
  _QWORD *v143;
  _QWORD *i;
  unint64_t v145;
  _QWORD *v146;
  float v147;
  float v148;
  _BOOL8 v149;
  unint64_t v150;
  unint64_t v151;
  int8x8_t prime;
  void *v153;
  void *v154;
  uint64_t v155;
  _QWORD *v156;
  unint64_t v157;
  uint8x8_t v158;
  unint64_t v159;
  uint8x8_t v160;
  uint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  void *v176;
  double *v177;
  int *v178;
  int v179;
  BOOL v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  double v185;
  unsigned int *v186;
  unsigned int v187;
  uint64_t *v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *j;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  int *v213;
  _QWORD *v214;
  uint64_t v215;
  _BOOL4 v216;
  uint64_t *v217;
  unint64_t v218;
  uint64_t v219;
  void *__p;
  char *v221;
  uint64_t v222;
  _BYTE buf[18];
  __int16 v224;
  Phase::Controller::DSPVoiceManager::Implementation *v225;
  __int16 v226;
  uint64_t v227;
  __int16 v228;
  const char *v229;
  __int16 v230;
  char *v231;
  __int16 v232;
  const char *v233;
  uint64_t v234;

  v234 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)this + 75104;
  v3 = *((_QWORD *)this + 9400);
  *((_QWORD *)this + 9398) = v3;
  v4 = (uint64_t *)((char *)this + 75184);
  *((_DWORD *)this + 18798) = *((_DWORD *)this + 18776) - 32;
  *((_DWORD *)this + 18799) = 20;
  *(_OWORD *)v3 = xmmword_2166F7E90;
  *(_DWORD *)(v3 + 16) = 20;
  v5 = *((_QWORD *)this + 9);
  v217 = v4;
  if ((*(_BYTE *)(v5 + 88) & 8) == 0)
  {
    if (*(_QWORD *)(v5 + 496) < (unint64_t)((uint64_t)(*(_QWORD *)(v5 + 736) - *(_QWORD *)(v5 + 728)) >> 3))
      goto LABEL_317;
    goto LABEL_50;
  }
  Phase::Controller::DVM::VoiceGraph::GetOrderedVoicePoolNodes((Phase::Controller::DVM::VoiceGraph *)v5, (uint64_t *)&__p);
  v6 = Phase::Controller::DVM::VoiceGraph::RouteConnections(*((_QWORD *)this + 9), (uint64_t **)&__p);
  v7 = v6;
  if (v6)
  {
    *(_QWORD *)(*((_QWORD *)this + 9) + 736) = *(_QWORD *)(*((_QWORD *)this + 9) + 728);
    v8 = *((_QWORD *)this + 9);
    v216 = v6;
    if ((void **)(v8 + 728) == &__p)
      goto LABEL_29;
    v10 = (char *)__p;
    v9 = v221;
    v11 = v221 - (_BYTE *)__p;
    v12 = (v221 - (_BYTE *)__p) >> 3;
    v13 = *(_QWORD *)(v8 + 744);
    v14 = *(char **)(v8 + 728);
    if (v12 <= (v13 - (uint64_t)v14) >> 3)
    {
      v18 = (void **)(v8 + 736);
      v21 = *(_BYTE **)(v8 + 736);
      v22 = (v21 - v14) >> 3;
      if (v22 >= v12)
      {
        if (v221 != __p)
          memmove(*(void **)(v8 + 728), __p, v221 - (_BYTE *)__p);
        v4 = v217;
        goto LABEL_28;
      }
      v23 = (char *)__p + 8 * v22;
      if (v21 != v14)
      {
        memmove(*(void **)(v8 + 728), __p, v21 - v14);
        v14 = (char *)*v18;
      }
      v4 = v217;
      v11 = v9 - v23;
      if (v9 == v23)
      {
LABEL_28:
        *v18 = &v14[v11];
LABEL_29:
        if (*(_QWORD *)(*v4 + 8) != 1)
          goto LABEL_317;
        v24 = (Phase::Logger *)Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMRTOSCCommand,int>(v4, 0);
        if ((int)v24 <= 0)
          goto LABEL_317;
        v25 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v24) + 80));
        v26 = (Phase::Logger *)os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v26)
        {
          v27 = (Phase::Controller::DSPVoiceManager::Implementation *)*((_QWORD *)this + 12);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "DVMImplementation.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 136;
          v224 = 2048;
          v225 = v27;
          _os_log_impl(&dword_2164CC000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d === Adding voice pools: frame %llu ===", buf, 0x1Cu);
        }
        v28 = *((_QWORD *)this + 9);
        v29 = *(_QWORD **)(v28 + 728);
        v30 = *(_QWORD **)(v28 + 736);
        if (v29 != v30)
        {
          v31 = 0;
          do
          {
            if (!*v29)
              goto LABEL_317;
            v26 = (Phase::Logger *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v29 + 24))(*v29);
            if ((_DWORD)v26)
            {
              v32 = (Phase::Logger *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v29 + 16))(*v29);
              v33 = v32;
              if (!v32)
                goto LABEL_317;
              if (*(_QWORD *)(*v217 + 8) != 1)
                goto LABEL_317;
              v34 = *((int *)v2 + 23);
              if (*((_DWORD *)v2 + 22) - (int)v34 <= 31)
                goto LABEL_317;
              v35 = *v217 + v34;
              *(_QWORD *)(v35 + 4) = 1;
              *(_DWORD *)(v35 + 16) = 0;
              *(_QWORD *)(v35 + 20) = v32;
              *(_DWORD *)(v35 + 12) = 6910057;
              *(_DWORD *)(v35 + 28) = v31;
              v36 = *((_QWORD *)v2 + 10);
              *(_DWORD *)(v36 + *((int *)v2 + 23)) = 28;
              *(_DWORD *)(v36 + 16) += 32;
              *((_DWORD *)v2 + 23) += 32;
              v37 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v32)
                                                                                                  + 80)));
              if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
              {
                v38 = (Phase::Controller::DSPVoiceManager::Implementation *)*((_QWORD *)v33 + 6);
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "DVMImplementation.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 146;
                v224 = 2080;
                v225 = v38;
                _os_log_impl(&dword_2164CC000, v37, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     %s \n", buf, 0x1Cu);
              }

              ++v31;
            }
            ++v29;
          }
          while (v29 != v30);
        }
        v39 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v26) + 80));
        v4 = v217;
        v7 = v216;
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "DVMImplementation.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 149;
          _os_log_impl(&dword_2164CC000, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d === \n", buf, 0x12u);
        }
        goto LABEL_46;
      }
      v17 = v14;
      v20 = v23;
    }
    else
    {
      if (v14)
      {
        *(_QWORD *)(v8 + 736) = v14;
        operator delete(v14);
        v13 = 0;
        *(_QWORD *)(v8 + 728) = 0;
        *(_QWORD *)(v8 + 736) = 0;
        *(_QWORD *)(v8 + 744) = 0;
      }
      if ((v11 & 0x8000000000000000) != 0)
        goto LABEL_321;
      v15 = v13 >> 2;
      if (v13 >> 2 <= v12)
        v15 = v12;
      v16 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v15;
      if (v16 >> 61)
LABEL_321:
        std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v8 + 744, v16);
      v4 = v217;
      v14 = v17;
      *(_QWORD *)(v8 + 728) = v17;
      v18 = (void **)(v8 + 736);
      *(_QWORD *)(v8 + 736) = v17;
      *(_QWORD *)(v8 + 744) = &v17[8 * v19];
      if (v9 == v10)
        goto LABEL_28;
      v20 = v10;
    }
    memmove(v17, v20, v11);
    goto LABEL_28;
  }
  Phase::Controller::DSPVoiceManager::Implementation::EndMessageBundle(this);
LABEL_46:
  if (__p)
  {
    v221 = (char *)__p;
    operator delete(__p);
  }
  if (!v7)
    return;
  v5 = *((_QWORD *)this + 9);
LABEL_50:
  v40 = v5 + 680;
  v41 = *(_QWORD *)(v5 + 688);
  if (v41 != v5 + 680)
  {
    while (2)
    {
      v42 = *(_DWORD *)(v41 + 64);
      v43 = *((double *)this + 3) * *(float *)(v41 + 28);
      v44 = (int)v43;
      v45 = *(_DWORD *)(v41 + 48);
      if (v42 == 1)
      {
        if (v45 == 1 && *(_QWORD *)(*v217 + 8) == 1)
        {
          v46 = *(_QWORD *)(v41 + 32);
          if (v46)
          {
            switch(*(_DWORD *)(v41 + 24))
            {
              case 0:
                v47 = 20;
                goto LABEL_65;
              case 1:
              case 3:
                v47 = 19;
                goto LABEL_65;
              case 2:
                v47 = 21;
LABEL_65:
                if (!Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMRTOSCCommand,int,Phase::DspLayer::VoicePool const*,long long>(v217, v47, (int)v43, v46, *(_QWORD *)(v41 + 40)))goto LABEL_317;
                goto LABEL_77;
              default:
                goto LABEL_317;
            }
          }
        }
        goto LABEL_317;
      }
      if (v45)
        goto LABEL_317;
      if (*(_QWORD *)(*v217 + 8) != 1)
        goto LABEL_317;
      v48 = *(Phase::DspLayer::VoicePool **)(v41 + 32);
      if (!v48)
        goto LABEL_317;
      v49 = *(_QWORD *)(v41 + 40);
      switch(*(_DWORD *)(v41 + 24))
      {
        case 0:
          v50 = v217;
          v51 = 5;
          goto LABEL_68;
        case 1:
        case 3:
          v50 = v217;
          v51 = 3;
          goto LABEL_68;
        case 2:
          v50 = v217;
          v51 = 4;
LABEL_68:
          if ((int)Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMRTOSCCommand,int,Phase::DspLayer::VoicePool const*,long long>(v50, v51, (int)v43, *(_QWORD *)(v41 + 32), *(_QWORD *)(v41 + 40)) <= 0)goto LABEL_317;
          if (!v42 && *(_DWORD *)(v41 + 24) == 1)
          {
            v52 = *((_QWORD *)this + 9) + 752;
            *(_QWORD *)buf = v48;
            *(_QWORD *)&buf[8] = v49;
            v53 = std::__tree<std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>,std::__map_value_compare<std::pair<unsigned long long,long long>,std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>,std::less<std::pair<unsigned long long,long long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long long,long long>,Phase::Controller::DVM::VoicePoolNode *>>>::find<std::pair<unsigned long long,long long>>(v52, (unint64_t *)buf);
            v54 = (Phase::Controller::DVM::VoiceGraph *)*((_QWORD *)this + 9);
            if ((_QWORD *)((char *)v54 + 760) == v53)
            {
              VoiceNode = Phase::Controller::DVM::VoiceGraph::GetVoiceNode(v54, v48, v49);
              v56 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*VoiceNode + 56))(VoiceNode);
              if (v56)
              {
                Phase::Controller::DSPVoiceManager::Implementation::SendConfigureSamplerMessage((uint64_t)this, (uint64_t)v48, v49, -1, v56[1], *v56, v56[2], v56[4], v44);
                v57 = Phase::Controller::DVM::VoiceGraph::GetVoiceNode(*((Phase::Controller::DVM::VoiceGraph **)this + 9), v48, v49);
                v59 = v57[16];
                v58 = v57[17];
                if (v58 != v59)
                {
                  do
                  {
                    v60 = v58 - 32;
                    std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v58 - 24);
                    v58 = v60;
                  }
                  while (v60 != v59);
                }
                v57[17] = v59;
              }
              else
              {
                Phase::Controller::DSPVoiceManager::Implementation::SendConfigureSamplerMessage((uint64_t)this, (uint64_t)v48, v49, 0, 0, 0, 0, 0, v44);
              }
            }
            else
            {
              Phase::Controller::DSPVoiceManager::Implementation::SendConfigureSamplerMessage((uint64_t)this, (uint64_t)v48, v49, 1, 0, 0, 0, 0, v44);
            }
          }
LABEL_77:
          v41 = *(_QWORD *)(v41 + 8);
          if (v41 != v40)
            continue;
          v5 = *((_QWORD *)this + 9);
          v4 = v217;
          break;
        default:
          goto LABEL_317;
      }
      break;
    }
  }
  v61 = *(_QWORD *)(v5 + 664);
  if (v61 != v5 + 656)
  {
    v62 = *v4;
    do
    {
      if (*(_QWORD *)(v62 + 8) != 1)
        goto LABEL_317;
      v63 = *((int *)v2 + 23);
      if (*((_DWORD *)v2 + 22) - (int)v63 <= 55)
        goto LABEL_317;
      v64 = (int)(*((double *)this + 3) * *(float *)(v61 + 28));
      v65 = *(int *)(v61 + 32);
      v66 = *(int *)(v61 + 24);
      v67 = *(_OWORD *)(v61 + 40);
      v68 = v62 + v63;
      *(_QWORD *)(v68 + 4) = 16;
      *(_DWORD *)(v68 + 20) = v64;
      *(_QWORD *)(v68 + 24) = v65;
      strcpy((char *)(v68 + 12), "ihhhh");
      *(_OWORD *)(v68 + 32) = v67;
      *(_QWORD *)(v68 + 48) = v66;
      v62 = *((_QWORD *)v2 + 10);
      *(_DWORD *)(v62 + *((int *)v2 + 23)) = 52;
      *(_DWORD *)(v62 + 16) += 56;
      *((_DWORD *)v2 + 23) += 56;
      v61 = *(_QWORD *)(v61 + 8);
    }
    while (v61 != v5 + 656);
    v5 = *((_QWORD *)this + 9);
  }
  std::__list_imp<Phase::Controller::DVM::DspNodePlayStateCommand>::clear((uint64_t *)(v5 + 656));
  std::__list_imp<Phase::Controller::DVM::DspNodePlayStateCommand>::clear((uint64_t *)(*((_QWORD *)this + 9) + 680));
  *(_QWORD *)(*((_QWORD *)this + 9) + 712) = *(_QWORD *)(*((_QWORD *)this + 9) + 704);
  v69 = *((_QWORD *)this + 9);
  if ((*(_BYTE *)(v69 + 88) & 8) != 0)
  {
    if (*(_QWORD *)(*v4 + 8) != 1
      || (int)Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMRTOSCCommand,int>(v4, 0xBu) <= 0)
    {
      goto LABEL_317;
    }
    v69 = *((_QWORD *)this + 9);
  }
  v70 = *(_QWORD **)(v69 + 728);
  v209 = *(_QWORD **)(v69 + 736);
  if (v70 == v209)
    goto LABEL_315;
  do
  {
    if (!*v70)
      goto LABEL_317;
    v71 = (Phase::Logger *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v70 + 24))(*v70);
    if ((_DWORD)v71)
    {
      v71 = (Phase::Logger *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v70 + 16))(*v70);
      v72 = (uint64_t)v71;
    }
    else
    {
      v72 = 0;
    }
    v73 = *(_QWORD **)(*v70 + 48);
    v210 = v70;
    v219 = v72;
    if (v73)
    {
      do
      {
        v211 = v73;
        v74 = v73[3];
        if (!v74)
          goto LABEL_317;
        v75 = *(_QWORD *)(v74 + 16);
        v212 = *(int *)(v74 + 24);
        v76 = *(_QWORD *)(v74 + 192);
        if ((v76 & 0xFF00000000) == 0 || !(_DWORD)v76 && !*(_BYTE *)(v74 + 8))
        {
          v92 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v71)
                                                                                              + 80)));
          if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
          {
            v93 = "Procedure ";
            if ((_DWORD)v212 != 1)
              v93 = *(const char **)(v72 + 48);
            if ((v76 & 0xFF00000000) != 0)
              v94 = Phase::Controller::DVM::kPlayStateStrings[(int)v76];
            else
              v94 = "none";
            v200 = Phase::Controller::DVM::kVoiceTypeStrings[v212];
            *(_DWORD *)buf = 136316674;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 257;
            v224 = 2048;
            v225 = this;
            v226 = 2048;
            v227 = v75;
            v228 = 2080;
            v229 = v93;
            v230 = 2080;
            v231 = v200;
            v232 = 2080;
            v233 = v94;
            _os_log_impl(&dword_2164CC000, v92, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: DVM update won't config a voiceId %llu, in a %s voice pool (type %s) without valid play state (%s)", buf, 0x44u);
          }

          goto LABEL_304;
        }
        __p = 0;
        v221 = 0;
        v222 = 0;
        std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::__init_with_size[abi:ne180100]<Phase::Controller::DVM::VoiceNode::IOChannel*,Phase::Controller::DVM::VoiceNode::IOChannel*>(&__p, *(_QWORD *)(v74 + 56), *(_QWORD *)(v74 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v74 + 64) - *(_QWORD *)(v74 + 56)) >> 3));
        if ((_DWORD)v212 == 1)
        {
          v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 24))(v74);
          if (!v77)
            goto LABEL_317;
          v78 = __p;
          if (v221 != __p)
          {
            v76 = 0;
            do
            {
              if ((*(_BYTE *)(*((_QWORD *)this + 9) + 88) & 8) != 0)
              {
                if (*(_QWORD *)(*v217 + 8) != 1)
                  goto LABEL_317;
                v79 = *((int *)v2 + 23);
                if (*((_DWORD *)v2 + 22) - (int)v79 >= 56)
                {
                  v80 = (int *)(*(_QWORD *)(v74 + 80) + 8 * v76);
                  v81 = *v80;
                  LODWORD(v80) = v80[1];
                  v82 = *v217 + v79;
                  *(_QWORD *)(v82 + 4) = 22;
                  *(_DWORD *)(v82 + 20) = 0;
                  *(_QWORD *)(v82 + 24) = v77;
                  *(_QWORD *)(v82 + 32) = v75;
                  strcpy((char *)(v82 + 12), "iphihi");
                  *(_DWORD *)(v82 + 40) = v76;
                  *(_QWORD *)(v82 + 44) = v81;
                  *(_DWORD *)(v82 + 52) = (_DWORD)v80;
                  v83 = *((_QWORD *)v2 + 10);
                  *(_DWORD *)(v83 + *((int *)v2 + 23)) = 52;
                  *(_DWORD *)(v83 + 16) += 56;
                  *((_DWORD *)v2 + 23) += 56;
                  v78 = __p;
                }
                v84 = &v78[24 * v76];
                v87 = (_QWORD *)*v84;
                v85 = v84 + 1;
                v86 = v87;
                if (v87 != v85)
                {
                  do
                  {
                    v88 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v86[4] + 16))(v86[4]);
                    if (!v88)
                      goto LABEL_317;
                    v89 = *(_QWORD *)(v86[4] + 16);
                    if (v89 < 0)
                      goto LABEL_317;
                    Phase::Controller::DSPVoiceManager::Implementation::SendAddVoiceInputMessage((uint64_t)this, v77, v75, v88, v89, *((_DWORD *)v86 + 10), *(_DWORD *)(*(_QWORD *)(v74 + 80) + 8 * v76), *(_DWORD *)(*(_QWORD *)(v74 + 80) + 8 * v76 + 4), *((float *)v86 + 11), 1);
                    v90 = (_QWORD *)v86[1];
                    if (v90)
                    {
                      do
                      {
                        v91 = v90;
                        v90 = (_QWORD *)*v90;
                      }
                      while (v90);
                    }
                    else
                    {
                      do
                      {
                        v91 = (_QWORD *)v86[2];
                        v180 = *v91 == (_QWORD)v86;
                        v86 = v91;
                      }
                      while (!v180);
                    }
                    v86 = v91;
                  }
                  while (v91 != v85);
                  v78 = __p;
                }
              }
              ++v76;
            }
            while (0xAAAAAAAAAAAAAAABLL * ((v221 - v78) >> 3) > v76);
            goto LABEL_153;
          }
LABEL_155:
          v118 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 24))(v74);
          if (!v118)
            goto LABEL_317;
          v119 = *(int **)(v74 + 104);
          v120 = *(int **)(v74 + 112);
          if (v119 != v120)
          {
            v121 = *v217;
            while (*(_QWORD *)(v121 + 8) == 1)
            {
              v122 = *((int *)v2 + 23);
              if (*((_DWORD *)v2 + 22) - (int)v122 >= 52)
              {
                v123 = *v119;
                v124 = *((_QWORD *)v119 + 1);
                v125 = v121 + v122;
                *(_QWORD *)(v125 + 4) = 23;
                *(_DWORD *)(v125 + 20) = 0;
                *(_QWORD *)(v125 + 24) = v118;
                *(_QWORD *)(v125 + 32) = v75;
                strcpy((char *)(v125 + 12), "iphid");
                *(_DWORD *)(v125 + 40) = v123;
                *(_QWORD *)(v125 + 44) = v124;
                v121 = *((_QWORD *)v2 + 10);
                *(_DWORD *)(v121 + *((int *)v2 + 23)) = 48;
                *(_DWORD *)(v121 + 16) += 52;
                *((_DWORD *)v2 + 23) += 52;
              }
              v119 += 4;
              if (v119 == v120)
                goto LABEL_162;
            }
LABEL_317:
            std::terminate();
          }
          goto LABEL_162;
        }
        if (!v72 || v75 < 0)
          goto LABEL_317;
        v95 = __p;
        if (v221 == __p)
          goto LABEL_153;
        v76 = 0;
        do
        {
          if ((*(_BYTE *)(*((_QWORD *)this + 9) + 88) & 8) != 0)
          {
            if (*(_QWORD *)(*v217 + 8) != 1)
              goto LABEL_317;
            v96 = *((int *)v2 + 23);
            if (*((_DWORD *)v2 + 22) - (int)v96 <= 55)
              goto LABEL_317;
            v97 = (int *)(*(_QWORD *)(v74 + 80) + 8 * v76);
            v98 = *v97;
            LODWORD(v97) = v97[1];
            v99 = *v217 + v96;
            *(_QWORD *)(v99 + 4) = 9;
            *(_DWORD *)(v99 + 20) = 0;
            *(_QWORD *)(v99 + 24) = v219;
            *(_QWORD *)(v99 + 32) = v75;
            strcpy((char *)(v99 + 12), "iphihi");
            *(_DWORD *)(v99 + 40) = v76;
            *(_QWORD *)(v99 + 44) = v98;
            *(_DWORD *)(v99 + 52) = (_DWORD)v97;
            v100 = *((_QWORD *)v2 + 10);
            *(_DWORD *)(v100 + *((int *)v2 + 23)) = 52;
            *(_DWORD *)(v100 + 16) += 56;
            *((_DWORD *)v2 + 23) += 56;
            v95 = __p;
          }
          v101 = &v95[24 * v76];
          v104 = (_QWORD *)*v101;
          v102 = v101 + 1;
          v103 = v104;
          if (v104 == v102)
            goto LABEL_152;
          do
          {
            v105 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v103[4] + 16))(v103[4]);
            if (!v105)
              goto LABEL_317;
            v106 = *(_QWORD *)(v103[4] + 16);
            if (v106 < 0)
              goto LABEL_317;
            v107 = *((_DWORD *)v103 + 10);
            v108 = *(_QWORD *)(*((_QWORD *)this + 9) + 88);
            if ((v108 & 8) != 0)
            {
              Phase::Controller::DSPVoiceManager::Implementation::SendAddVoiceInputMessage((uint64_t)this, v219, v75, v105, v106, v107, *(_DWORD *)(*(_QWORD *)(v74 + 80) + 8 * v76), *(_DWORD *)(*(_QWORD *)(v74 + 80) + 8 * v76 + 4), *((float *)v103 + 11), 0);
              v109 = v103 + 6;
            }
            else
            {
              if ((v108 & 4) == 0)
                goto LABEL_145;
              v109 = v103 + 6;
              if (!*((_BYTE *)v103 + 48))
                goto LABEL_145;
              if (*(_QWORD *)(*v217 + 8) != 1)
                goto LABEL_317;
              if (v105 == v219)
                goto LABEL_317;
              v110 = *((int *)v2 + 23);
              if (*((_DWORD *)v2 + 22) - (int)v110 <= 79)
                goto LABEL_317;
              v111 = (int *)(*(_QWORD *)(v74 + 80) + 8 * v76);
              v112 = *v111;
              LODWORD(v111) = v111[1];
              v113 = *((_DWORD *)v103 + 11);
              v114 = *v217 + v110;
              *(_QWORD *)(v114 + 4) = 8;
              *(_DWORD *)(v114 + 24) = 0;
              *(_QWORD *)(v114 + 28) = v219;
              *(_QWORD *)(v114 + 36) = v75;
              *(_QWORD *)(v114 + 44) = v105;
              *(_QWORD *)(v114 + 52) = v106;
              *(_DWORD *)(v114 + 60) = v107;
              *(_QWORD *)(v114 + 64) = v112;
              strcpy((char *)(v114 + 12), "iphphihif");
              *(_DWORD *)(v114 + 72) = (_DWORD)v111;
              *(_DWORD *)(v114 + 76) = v113;
              v115 = *((_QWORD *)v2 + 10);
              *(_DWORD *)(v115 + *((int *)v2 + 23)) = 76;
              *(_DWORD *)(v115 + 16) += 80;
              *((_DWORD *)v2 + 23) += 80;
            }
            *v109 = 0;
LABEL_145:
            v116 = (_QWORD *)v103[1];
            if (v116)
            {
              do
              {
                v117 = v116;
                v116 = (_QWORD *)*v116;
              }
              while (v116);
            }
            else
            {
              do
              {
                v117 = (_QWORD *)v103[2];
                v180 = *v117 == (_QWORD)v103;
                v103 = v117;
              }
              while (!v180);
            }
            v103 = v117;
          }
          while (v117 != v102);
          v95 = __p;
LABEL_152:
          ++v76;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v221 - v95) >> 3) > v76);
LABEL_153:
        if ((_DWORD)v212)
        {
          if ((_DWORD)v212 == 1)
            goto LABEL_155;
LABEL_179:
          v131 = *(int **)(v74 + 128);
          v213 = *(int **)(v74 + 136);
          v132 = v217;
          v133 = v219;
          if (v131 != v213)
          {
            while (2)
            {
              if (*((_BYTE *)v131 + 24))
              {
                v134 = *((_QWORD *)this + 9);
                v135 = (std::__shared_weak_count *)*((_QWORD *)v131 + 2);
                v136 = **((_QWORD **)v131 + 1);
                v215 = *((_QWORD *)v131 + 1);
                if (v135)
                {
                  p_shared_owners = (unint64_t *)&v135->__shared_owners_;
                  do
                    v138 = __ldxr(p_shared_owners);
                  while (__stxr(v138 + 1, p_shared_owners));
                }
                v139 = 0x9DDFEA08EB382D69 * (((8 * v136) + 8) ^ HIDWORD(v136));
                v140 = 0x9DDFEA08EB382D69 * (HIDWORD(v136) ^ (v139 >> 47) ^ v139);
                v218 = 0x9DDFEA08EB382D69 * (v140 ^ (v140 >> 47));
                v141 = *(_QWORD *)(v134 + 560);
                if (v141)
                {
                  v142 = (uint8x8_t)vcnt_s8((int8x8_t)v141);
                  v142.i16[0] = vaddlv_u8(v142);
                  if (v142.u32[0] > 1uLL)
                  {
                    v76 = 0x9DDFEA08EB382D69 * (v140 ^ (v140 >> 47));
                    if (v218 >= v141)
                      v76 = v218 % v141;
                  }
                  else
                  {
                    v76 = (v141 - 1) & v218;
                  }
                  v143 = *(_QWORD **)(*(_QWORD *)(v134 + 552) + 8 * v76);
                  if (v143)
                  {
                    for (i = (_QWORD *)*v143; i; i = (_QWORD *)*i)
                    {
                      v145 = i[1];
                      if (v145 == v218)
                      {
                        if (i[2] == v136)
                        {
                          if (v135)
                          {
                            v174 = (unint64_t *)&v135->__shared_owners_;
                            do
                              v175 = __ldaxr(v174);
                            while (__stlxr(v175 - 1, v174));
                            if (!v175)
                            {
                              ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                              std::__shared_weak_count::__release_weak(v135);
                            }
                          }
                          goto LABEL_255;
                        }
                      }
                      else
                      {
                        if (v142.u32[0] > 1uLL)
                        {
                          if (v145 >= v141)
                            v145 %= v141;
                        }
                        else
                        {
                          v145 &= v141 - 1;
                        }
                        if (v145 != v76)
                          break;
                      }
                    }
                  }
                }
                v146 = operator new(0x28uLL);
                *(_QWORD *)buf = v146;
                *(_QWORD *)&buf[8] = v134 + 568;
                v214 = (_QWORD *)(v134 + 568);
                *v146 = 0;
                v146[1] = v218;
                v146[2] = v136;
                v146[3] = v215;
                v146[4] = v135;
                buf[16] = 1;
                v147 = (float)(unint64_t)(*(_QWORD *)(v134 + 576) + 1);
                v148 = *(float *)(v134 + 584);
                if (!v141 || (float)(v148 * (float)v141) < v147)
                {
                  v149 = (v141 & (v141 - 1)) != 0;
                  if (v141 < 3)
                    v149 = 1;
                  v150 = v149 | (2 * v141);
                  v151 = vcvtps_u32_f32(v147 / v148);
                  if (v150 <= v151)
                    prime = (int8x8_t)v151;
                  else
                    prime = (int8x8_t)v150;
                  if (*(_QWORD *)&prime == 1)
                  {
                    prime = (int8x8_t)2;
                  }
                  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                  {
                    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                  }
                  v141 = *(_QWORD *)(v134 + 560);
                  if (*(_QWORD *)&prime <= v141)
                  {
                    if (*(_QWORD *)&prime >= v141)
                      goto LABEL_241;
                    v159 = vcvtps_u32_f32((float)*(unint64_t *)(v134 + 576) / *(float *)(v134 + 584));
                    if (v141 < 3
                      || (v160 = (uint8x8_t)vcnt_s8((int8x8_t)v141), v160.i16[0] = vaddlv_u8(v160), v160.u32[0] > 1uLL))
                    {
                      v159 = std::__next_prime(v159);
                    }
                    else
                    {
                      v161 = 1 << -(char)__clz(v159 - 1);
                      if (v159 >= 2)
                        v159 = v161;
                    }
                    if (*(_QWORD *)&prime <= v159)
                      prime = (int8x8_t)v159;
                    if (*(_QWORD *)&prime >= v141)
                    {
                      v141 = *(_QWORD *)(v134 + 560);
                      goto LABEL_241;
                    }
                    if (prime)
                      goto LABEL_212;
                    v176 = *(void **)(v134 + 552);
                    *(_QWORD *)(v134 + 552) = 0;
                    v76 = v218;
                    if (v176)
                      operator delete(v176);
                    v141 = 0;
                    *(_QWORD *)(v134 + 560) = 0;
                  }
                  else
                  {
LABEL_212:
                    if (*(_QWORD *)&prime >> 61)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v153 = operator new(8 * *(_QWORD *)&prime);
                    v154 = *(void **)(v134 + 552);
                    *(_QWORD *)(v134 + 552) = v153;
                    if (v154)
                      operator delete(v154);
                    v155 = 0;
                    *(int8x8_t *)(v134 + 560) = prime;
                    do
                      *(_QWORD *)(*(_QWORD *)(v134 + 552) + 8 * v155++) = 0;
                    while (*(_QWORD *)&prime != v155);
                    v156 = (_QWORD *)*v214;
                    if (*v214)
                    {
                      v157 = v156[1];
                      v158 = (uint8x8_t)vcnt_s8(prime);
                      v158.i16[0] = vaddlv_u8(v158);
                      if (v158.u32[0] > 1uLL)
                      {
                        if (v157 >= *(_QWORD *)&prime)
                          v157 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v157 &= *(_QWORD *)&prime - 1;
                      }
                      *(_QWORD *)(*(_QWORD *)(v134 + 552) + 8 * v157) = v214;
                      v162 = (_QWORD *)*v156;
                      if (*v156)
                      {
                        do
                        {
                          v163 = v162[1];
                          if (v158.u32[0] > 1uLL)
                          {
                            if (v163 >= *(_QWORD *)&prime)
                              v163 %= *(_QWORD *)&prime;
                          }
                          else
                          {
                            v163 &= *(_QWORD *)&prime - 1;
                          }
                          if (v163 != v157)
                          {
                            v164 = *(_QWORD *)(v134 + 552);
                            if (!*(_QWORD *)(v164 + 8 * v163))
                            {
                              *(_QWORD *)(v164 + 8 * v163) = v156;
                              goto LABEL_237;
                            }
                            *v156 = *v162;
                            *v162 = **(_QWORD **)(*(_QWORD *)(v134 + 552) + 8 * v163);
                            **(_QWORD **)(*(_QWORD *)(v134 + 552) + 8 * v163) = v162;
                            v162 = v156;
                          }
                          v163 = v157;
LABEL_237:
                          v156 = v162;
                          v162 = (_QWORD *)*v162;
                          v157 = v163;
                        }
                        while (v162);
                      }
                    }
                    v141 = (unint64_t)prime;
LABEL_241:
                    v76 = v218;
                  }
                  if ((v141 & (v141 - 1)) != 0)
                  {
                    if (v76 >= v141)
                      v76 %= v141;
                  }
                  else
                  {
                    v76 &= v141 - 1;
                  }
                }
                v165 = *(_QWORD **)(*(_QWORD *)(v134 + 552) + 8 * v76);
                if (v165)
                {
                  **(_QWORD **)buf = *v165;
                  *v165 = *(_QWORD *)buf;
                }
                else
                {
                  **(_QWORD **)buf = *(_QWORD *)(v134 + 568);
                  *(_QWORD *)(v134 + 568) = *(_QWORD *)buf;
                  *(_QWORD *)(*(_QWORD *)(v134 + 552) + 8 * v76) = v214;
                  if (**(_QWORD **)buf)
                  {
                    v166 = *(_QWORD *)(**(_QWORD **)buf + 8);
                    if ((v141 & (v141 - 1)) != 0)
                    {
                      if (v166 >= v141)
                        v166 %= v141;
                    }
                    else
                    {
                      v166 &= v141 - 1;
                    }
                    *(_QWORD *)(*(_QWORD *)(v134 + 552) + 8 * v166) = *(_QWORD *)buf;
                  }
                }
                *(_QWORD *)buf = 0;
                ++*(_QWORD *)(v134 + 576);
                std::unique_ptr<std::__hash_node<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf, 0);
LABEL_255:
                v132 = v217;
                v133 = v219;
              }
              if (*(_QWORD *)(*v132 + 8) != 1)
                goto LABEL_317;
              if (!v133)
                goto LABEL_317;
              v167 = (uint64_t *)*((_QWORD *)v131 + 1);
              v168 = *v167;
              if (!*v167)
                goto LABEL_317;
              v169 = *((int *)v2 + 23);
              if (*((_DWORD *)v2 + 22) - (int)v169 <= 55)
                goto LABEL_317;
              v170 = *v131;
              v131 += 8;
              v171 = *((_DWORD *)v167 + 2);
              v172 = *v132 + v169;
              *(_QWORD *)(v172 + 4) = 13;
              *(_DWORD *)(v172 + 20) = 0;
              *(_QWORD *)(v172 + 24) = v133;
              *(_QWORD *)(v172 + 32) = v75;
              strcpy((char *)(v172 + 12), "iphipi");
              *(_DWORD *)(v172 + 40) = v170;
              *(_QWORD *)(v172 + 44) = v168;
              *(_DWORD *)(v172 + 52) = v171;
              v173 = *((_QWORD *)v2 + 10);
              *(_DWORD *)(v173 + *((int *)v2 + 23)) = 52;
              *(_DWORD *)(v173 + 16) += 56;
              *((_DWORD *)v2 + 23) += 56;
              if (v131 == v213)
                break;
              continue;
            }
          }
          v177 = *(double **)(v74 + 104);
          v178 = *(int **)(v74 + 112);
          while (v177 != (double *)v178)
          {
            v179 = *(_DWORD *)v177;
            v180 = *(_DWORD *)(v74 + 24) == 5 && v179 == 0;
            if (v180)
            {
              v184 = *((_QWORD *)this + 9);
              v185 = v177[1];
              v186 = (unsigned int *)(v184 + 224);
              do
                v187 = __ldaxr(v186);
              while (__stlxr(v187 + 1, v186));
              v188 = (uint64_t *)atomic_load((unint64_t *)(v184 + 216));
              if (!v188
                || (caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::table_impl::findSlotForKey(v188, (unint64_t)v185), !v189))
              {
                do
                  v208 = __ldaxr(v186);
                while (__stlxr(v208 - 1, v186));
                __assert_rtn("IOGetTapCallback", "DVMGraph.hpp", 161, "false");
              }
              do
                v190 = __ldaxr((unsigned int *)v189);
              while (__stlxr(v190 + 1, (unsigned int *)v189));
              v191 = *(_QWORD *)(v189 + 16);
              do
                v192 = __ldaxr(v186);
              while (__stlxr(v192 - 1, v186));
              v193 = v191 + 104;
              do
                v194 = __ldaxr((unsigned int *)v189);
              while (__stlxr(v194 - 1, (unsigned int *)v189));
              if (*(_QWORD *)(*v217 + 8) != 1)
                goto LABEL_317;
              v182 = v219;
              if (!v219)
                goto LABEL_317;
              v195 = *((int *)v2 + 23);
              if (*((_DWORD *)v2 + 22) - (int)v195 <= 47)
                goto LABEL_317;
              v196 = *v217 + v195;
              *(_QWORD *)(v196 + 4) = 18;
              *(_DWORD *)(v196 + 20) = 0;
              *(_QWORD *)(v196 + 24) = v219;
              *(_QWORD *)(v196 + 32) = v75;
              strcpy((char *)(v196 + 12), "iphp");
              *(_QWORD *)(v196 + 40) = v193;
              v181 = *((_QWORD *)v2 + 10);
              *(_DWORD *)(v181 + *((int *)v2 + 23)) = 44;
              *(_DWORD *)(v181 + 16) += 48;
              v183 = *((_DWORD *)v2 + 23) + 48;
              *((_DWORD *)v2 + 23) = v183;
              if (*(_QWORD *)(v181 + 8) != 1)
                goto LABEL_317;
              v179 = *(_DWORD *)v177;
            }
            else
            {
              v181 = *v217;
              v182 = v219;
              if (*(_QWORD *)(*v217 + 8) != 1 || !v219)
                goto LABEL_317;
              v183 = *((_DWORD *)v2 + 23);
            }
            if (*((_DWORD *)v2 + 22) - v183 <= 51)
              goto LABEL_317;
            v197 = *((_QWORD *)v177 + 1);
            v198 = v181 + v183;
            *(_QWORD *)(v198 + 4) = 12;
            *(_DWORD *)(v198 + 20) = 0;
            *(_QWORD *)(v198 + 24) = v182;
            *(_QWORD *)(v198 + 32) = v75;
            strcpy((char *)(v198 + 12), "iphid");
            *(_DWORD *)(v198 + 40) = v179;
            *(_QWORD *)(v198 + 44) = v197;
            v199 = *((_QWORD *)v2 + 10);
            *(_DWORD *)(v199 + *((int *)v2 + 23)) = 48;
            *(_DWORD *)(v199 + 16) += 52;
            *((_DWORD *)v2 + 23) += 52;
            v177 += 2;
          }
        }
        else
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v74 + 48))(v74))
            goto LABEL_179;
          v130 = *(unsigned int **)(v74 + 128);
          if (v130 == *(unsigned int **)(v74 + 136))
            goto LABEL_179;
          if (!v219)
            goto LABEL_317;
          Phase::DspLayer::VoicePool::GetBuffer(v219, *(_QWORD *)(v74 + 16), *v130, (uint64_t)buf);
          if (*(_DWORD *)buf || *(_QWORD *)&buf[8])
            goto LABEL_179;
        }
LABEL_162:
        v70 = v210;
        v72 = v219;
        if ((*(_BYTE *)(*((_QWORD *)this + 9) + 88) & 0xC) != 0
          || *(_QWORD *)(v74 + 136) != *(_QWORD *)(v74 + 128)
          || *(_QWORD *)(v74 + 112) != *(_QWORD *)(v74 + 104))
        {
          if ((_DWORD)v212 == 1)
          {
            v126 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 24))(v74);
            if (*(_QWORD *)(*v217 + 8) != 1)
              goto LABEL_317;
            if (!v126)
              goto LABEL_317;
            v127 = *((int *)v2 + 23);
            if (*((_DWORD *)v2 + 22) - (int)v127 <= 27)
              goto LABEL_317;
            v128 = *v217 + v127;
            *(_QWORD *)(v128 + 4) = 24;
            strcpy((char *)(v128 + 12), "ip");
            *(_DWORD *)(v128 + 16) = 0;
            *(_QWORD *)(v128 + 20) = v126;
            v129 = *((_QWORD *)v2 + 10);
            *(_DWORD *)(v129 + *((int *)v2 + 23)) = 24;
            *(_DWORD *)(v129 + 16) += 28;
            *((_DWORD *)v2 + 23) += 28;
          }
          else if (*(_QWORD *)(*v217 + 8) != 1
                 || !v219
                 || (int)Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMRTOSCCommand,int,Phase::DspLayer::VoicePool const*,long long>(v217, 0xFu, 0, v219, v75) <= 0)
          {
            goto LABEL_317;
          }
        }
        *(_QWORD *)buf = &__p;
        std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_304:
        v73 = (_QWORD *)*v211;
      }
      while (*v211);
    }
    ++v70;
  }
  while (v70 != v209);
  v69 = *((_QWORD *)this + 9);
  v201 = *(_QWORD *)(v69 + 728);
  v202 = *(_QWORD *)(v69 + 736);
  if (v201 == v202)
    goto LABEL_315;
  do
  {
    if (!*(_QWORD *)v201)
      goto LABEL_317;
    for (j = *(_QWORD **)(*(_QWORD *)v201 + 48); j; j = (_QWORD *)*j)
    {
      v204 = (_QWORD *)j[3];
      if (!v204)
        goto LABEL_317;
      v204[14] = v204[13];
      v206 = v204[16];
      v205 = v204[17];
      if (v205 != v206)
      {
        do
        {
          v207 = v205 - 32;
          std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v205 - 24);
          v205 = v207;
        }
        while (v207 != v206);
      }
      v204[17] = v206;
    }
    v201 += 8;
  }
  while (v201 != v202);
  v69 = *((_QWORD *)this + 9);
LABEL_315:
  *(_QWORD *)(v69 + 88) = (unint64_t)*(unsigned int *)(v69 + 92) << 32;
  Phase::Controller::DSPVoiceManager::Implementation::EndMessageBundle(this);
}

void sub_21658F470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **p_p,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  p_p = &__p;
  std::vector<Phase::Controller::DVM::VoiceNode::IOChannel>::__destroy_vector::operator()[abi:ne180100](&p_p);
  _Unwind_Resume(a1);
}

void Phase::Controller::DSPVoiceManager::Implementation::EndMessageBundle(Phase::Controller::DSPVoiceManager::Implementation *this)
{
  const void **v1;
  uint64_t v3;
  Phase::LockFreeQueueSPSC *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  unint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v1 = (const void **)((char *)this + 75184);
  if (*(_DWORD *)(*((_QWORD *)this + 9398) + 16) != 20)
  {
    v3 = mach_absolute_time();
    v17 = 0;
    v4 = (Phase::Controller::DSPVoiceManager::Implementation *)((char *)this + 75104);
    while (1)
    {
      v5 = Phase::LockFreeQueueSPSC::GetWriteBuffer(v4, *((_DWORD *)*v1 + 4), &v17);
      if (v5)
        break;
      sched_yield();
      v6 = mach_absolute_time();
      v7 = __udivti3();
      if (v6 >= v3)
        v8 = v7;
      else
        v8 = -v7;
      if (v8 >= 10000000)
      {
        v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v7) + 80));
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          return;
        v10 = *((_DWORD *)*v1 + 4);
        *(_DWORD *)buf = 136316162;
        v19 = "DVMImplementation.mm";
        v20 = 1024;
        v21 = 723;
        v22 = 1024;
        v23 = v10;
        v24 = 2048;
        v25 = v8 / 0xF4240uLL;
        v26 = 2048;
        v27 = v17;
        v11 = "%25s:%-5d DVM_NRT unable to reserve %iB in message pipe to DVM_RT after %llims. Pipe has only %zuB availab"
              "le, will stop trying.";
        v12 = v9;
        v13 = 44;
        goto LABEL_13;
      }
    }
    memcpy(v5, *v1, *((int *)*v1 + 4));
    v14 = Phase::LockFreeQueueSPSC::CommitBytes(v4, *((_DWORD *)*v1 + 4));
    if ((v14 & 1) == 0)
    {
      v15 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v14) + 80));
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = *((_DWORD *)*v1 + 4);
        *(_DWORD *)buf = 136315650;
        v19 = "DVMImplementation.mm";
        v20 = 1024;
        v21 = 738;
        v22 = 1024;
        v23 = v16;
        v11 = "%25s:%-5d DVM_NRT unable to write %iB into message pipe to DVM_RT. Pipe is full!";
        v12 = v15;
        v13 = 24;
LABEL_13:
        _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
      }
    }
  }
}

void sub_21658F774(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::DSPVoiceManager::Implementation::SendConfigureSamplerMessage(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)(result + 75184);
  if (*(_QWORD *)(v9 + 8) != 1
    || !a2
    || (v10 = *(int *)(result + 75196), *(_DWORD *)(result + 75192) - (int)v10 <= 79))
  {
    std::terminate();
  }
  v11 = v9 + v10;
  *(_QWORD *)(v11 + 4) = 17;
  *(_DWORD *)(v11 + 24) = a9;
  *(_QWORD *)(v11 + 28) = a2;
  *(_QWORD *)(v11 + 36) = a3;
  *(_QWORD *)(v11 + 44) = a5;
  *(_QWORD *)(v11 + 52) = a6;
  *(_QWORD *)(v11 + 60) = a7;
  *(_QWORD *)(v11 + 68) = a8;
  strcpy((char *)(v11 + 12), "iphppppi");
  *(_DWORD *)(v11 + 76) = a4;
  v12 = *(_QWORD *)(result + 75184);
  *(_DWORD *)(v12 + *(int *)(result + 75196)) = 76;
  *(_DWORD *)(v12 + 16) += 80;
  *(_DWORD *)(result + 75196) += 80;
  return result;
}

_QWORD *Phase::Controller::DVM::VoiceGraph::GetVoiceNode(Phase::Controller::DVM::VoiceGraph *this, Phase::DspLayer::VoicePool *a2, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  unint64_t v8[2];
  int v9;
  unint64_t v10;

  v8[0] = (unint64_t)a2;
  v8[1] = a3;
  v9 = 0;
  v10 = a3;
  v5 = std::__tree<std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>,std::__map_value_compare<Phase::Controller::DVM::VoiceIOContext,std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>,std::less<Phase::Controller::DVM::VoiceIOContext>,true>,std::allocator<std::__value_type<Phase::Controller::DVM::VoiceIOContext,Phase::Controller::DVM::VoicePoolNode *>>>::find<Phase::Controller::DVM::VoiceIOContext>((uint64_t)this + 504, (uint64_t)v8);
  if ((_QWORD *)((char *)this + 512) == v5)
    return 0;
  v6 = v5[8];
  if (!v6)
    return 0;
  v8[0] = a3;
  result = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)(v6 + 32), v8);
  if (result)
    return (_QWORD *)result[3];
  return result;
}

uint64_t Phase::Controller::DSPVoiceManager::Implementation::SendAddVoiceInputMessage(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, float a9, char a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v10 = *(_QWORD *)(result + 75184);
  if (*(_QWORD *)(v10 + 8) != 1
    || a4 == a2
    || (v11 = *(int *)(result + 75196), *(_DWORD *)(result + 75192) - (int)v11 <= 79))
  {
    std::terminate();
  }
  v12 = v10 + v11;
  *(_QWORD *)(v12 + 4) = 6;
  *(_BYTE *)(v12 + 22) = 0;
  *(_DWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 28) = a2;
  *(_QWORD *)(v12 + 36) = a3;
  *(_QWORD *)(v12 + 44) = a4;
  *(_QWORD *)(v12 + 52) = a5;
  *(_DWORD *)(v12 + 60) = a6;
  *(_QWORD *)(v12 + 64) = a7;
  *(_QWORD *)(v12 + 12) = 0x6968696870687069;
  *(_DWORD *)(v12 + 72) = a8;
  *(_BYTE *)(v12 + 20) = 102;
  *(float *)(v12 + 76) = a9;
  if (a10)
    v13 = 84;
  else
    v13 = 70;
  *(_BYTE *)(v12 + 21) = v13;
  v14 = *(_QWORD *)(result + 75184);
  *(_DWORD *)(v14 + *(int *)(result + 75196)) = 76;
  *(_DWORD *)(v14 + 16) += 80;
  *(_DWORD *)(result + 75196) += 80;
  return result;
}

uint64_t Phase::Controller::DSPVoiceManager::Implementation::AddTap(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 72);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v11, a3);
  v7 = Phase::Controller::DVM::VoiceGraph::AddTap(v6, a2, (uint64_t)v11, a4);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_21658FA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL Phase::Controller::DSPVoiceManager::Implementation::ProcessMessagesFromDvmRt(Phase::Controller::DSPVoiceManager::Implementation *this)
{
  Phase::LockFreeQueueSPSC *v2;
  _BOOL8 result;
  int *v4;
  int *v5;
  unsigned int v6;
  _QWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v2 = (Phase::Controller::DSPVoiceManager::Implementation *)((char *)this + 75144);
  result = Phase::LockFreeQueueSPSC::HasData((Phase::Controller::DSPVoiceManager::Implementation *)((char *)this + 75144));
  if (result)
  {
    v4 = (int *)((char *)this + 75148);
    do
    {
      v5 = (int *)(*((_QWORD *)this + 9395) + *v4);
      v7 = v5 + 4;
      v6 = *v5;
      if (!*v5)
        std::terminate();
      if (*v7 == 0x656C646E756223)
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        if (v5[8] >= 21)
        {
          v8 = 20;
          do
          {
            v9 = *(_DWORD *)((char *)v7 + v8);
            v10 = (uint64_t)v5 + v8 + 20;
            LODWORD(v11) = v9;
            HIDWORD(v11) = (strlen((const char *)(v10 + 8)) & 0xFFFFFFFC) + 12;
            v12 = 0;
            v8 += v9 + 4;
            Phase::Controller::DSPVoiceManager::Implementation::ProcessMessageFromDvmRt(this, *((_QWORD *)v5 + 3), (Phase::PhaseOSCMessage *)&v10);
          }
          while (v8 < v5[8]);
        }
      }
      else
      {
        v12 = 0;
        v10 = (uint64_t)(v5 + 4);
        v11 = v6;
        HIDWORD(v11) = (strlen((const char *)v5 + 24) & 0xFFFFFFFC) + 12;
        v12 = 0;
        Phase::Controller::DSPVoiceManager::Implementation::ProcessMessageFromDvmRt(this, 1, (Phase::PhaseOSCMessage *)&v10);
      }
      *v4 += ((*(_DWORD *)(*((_QWORD *)this + 9395) + *v4) + 15) & 0xFFFFFFF0) + 16;
      result = Phase::LockFreeQueueSPSC::HasData(v2);
    }
    while (result);
  }
  return result;
}

void Phase::Controller::DSPVoiceManager::Implementation::ProcessMessageFromDvmRt(Phase::Controller::DSPVoiceManager::Implementation *this, uint64_t a2, Phase::PhaseOSCMessage *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  Phase::Logger *v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int32x2_t v79;
  uint64_t v80;
  Phase::DspLayer::VoicePool *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int32x2_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unsigned int v93;
  char v94;
  int32x2_t v95;
  uint64_t v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  Phase::Controller::DVM::VoiceGraph *v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  Phase::DspLayer::VoicePool *v105;
  int v106;
  _QWORD *VoiceNode;
  NSObject *v108;
  void **v109;
  uint64_t v110;
  NSObject *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  int v144;
  float v145;
  uint64_t v146;
  const char *v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void **v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  const char *v170;
  uint64_t v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  const char *v199;
  uint64_t v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  uint64_t v227;
  void *__p[2];
  char v229;
  _BYTE buf[20];
  _BYTE v231[70];
  _BYTE v232[10];
  __int16 v233;
  _BYTE v234[10];
  uint64_t v235;
  _BYTE v236[10];
  __int16 v237;
  int v238;
  __int16 v239;
  int v240;
  __int16 v241;
  int v242;
  __int16 v243;
  int v244;
  __int16 v245;
  int v246;
  __int16 v247;
  int v248;
  __int16 v249;
  int v250;
  __int16 v251;
  int v252;
  __int16 v253;
  int v254;
  __int16 v255;
  int v256;
  __int16 v257;
  int v258;
  __int16 v259;
  int v260;
  __int16 v261;
  int v262;
  __int16 v263;
  int v264;
  __int16 v265;
  int v266;
  __int16 v267;
  int v268;
  __int16 v269;
  int v270;
  __int16 v271;
  int v272;
  uint64_t v273;

  v273 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)a3;
  switch(**(_DWORD **)a3)
  {
    case 0:
      v6 = *((_DWORD *)a3 + 4);
      v7 = *((int *)a3 + 3);
      v9 = *(_QWORD *)(v5 + v7);
      v8 = *(_QWORD *)(v5 + v7 + 8);
      v10 = *(_QWORD *)(v5 + v7 + 16);
      *((_DWORD *)a3 + 3) = v7 + 24;
      *((_DWORD *)a3 + 4) = v6 + 3;
      v11 = *(_DWORD *)(v5 + v7 + 24);
      v12 = *(_DWORD *)(v5 + v7 + 28);
      *((_DWORD *)a3 + 3) = v7 + 36;
      *((_DWORD *)a3 + 4) = v6 + 5;
      v13 = (_QWORD *)(*((_QWORD *)this + 9) + 552);
      *(_QWORD *)buf = v10;
      v14 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>>>::__erase_unique<void *>(v13, buf);
      if (v12)
      {
        v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v14)
                                                                                            + 80)));
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          v16 = *(_QWORD *)(v9 + 48);
          v17 = Phase::DspLayer::VoicePoolErr_ToString(v12);
          *(_DWORD *)buf = 136317186;
          *(_QWORD *)&buf[4] = "DVMImplementation.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1244;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)v231 = v10;
          *(_WORD *)&v231[8] = 1024;
          *(_DWORD *)&v231[10] = v11;
          *(_WORD *)&v231[14] = 2080;
          *(_QWORD *)&v231[16] = v16;
          *(_WORD *)&v231[24] = 2048;
          *(_QWORD *)&v231[26] = v9;
          *(_WORD *)&v231[34] = 2048;
          *(_QWORD *)&v231[36] = v8;
          *(_WORD *)&v231[44] = 2080;
          *(_QWORD *)&v231[46] = v17;
          *(_WORD *)&v231[54] = 2048;
          *(_QWORD *)&v231[56] = a2;
          _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Error while setting buffer %p[%i] on Voice %s(%p):%llu: \"%s\" @ Frame %llu", buf, 0x54u);
        }
        goto LABEL_40;
      }
      break;
    case 1:
      v79 = vadd_s32(*(int32x2_t *)((char *)a3 + 12), (int32x2_t)0x200000010);
      v80 = v5 + (int)*(_QWORD *)((char *)a3 + 12);
      v81 = *(Phase::DspLayer::VoicePool **)v80;
      v82 = *(_QWORD *)(v80 + 8);
      *(int32x2_t *)((char *)a3 + 12) = v79;
      Phase::Controller::DVM::VoiceGraph::CallbackVoiceFinishedPlaying(*((Phase::Controller::DVM::VoiceGraph **)this + 9), v81, v82);
      break;
    case 2:
      v18 = (uint64_t *)(v5 + (int)*(_QWORD *)((char *)a3 + 12));
      v19 = *v18;
      v20 = v18[1];
      v21 = *((_DWORD *)v18 + 4);
      *(int32x2_t *)((char *)a3 + 12) = vadd_s32(*(int32x2_t *)((char *)a3 + 12), (int32x2_t)0x300000018);
      *(_QWORD *)buf = v19;
      *(_QWORD *)&buf[8] = v20;
      *(_DWORD *)&buf[16] = 0;
      *(_QWORD *)&v231[4] = v20;
      v22 = *((_QWORD *)this + 9);
      __p[0] = *((void **)this + 9404);
      if ((v21 - 1) > 8)
        v23 = 8;
      else
        v23 = byte_2166F7F10[v21 - 1];
      Phase::Controller::DVM::VoiceGraph::CallbackPlayStateChanged(v22, (uint64_t)buf, 1, (uint64_t)__p, v23);
      break;
    case 3:
      v24 = *((int *)a3 + 3);
      v25 = *((int *)a3 + 4);
      v27 = *(_QWORD *)(v5 + v24);
      v26 = *(_QWORD *)(v5 + v24 + 8);
      *((_DWORD *)a3 + 3) = v24 + 16;
      *((_DWORD *)a3 + 4) = v25 + 2;
      LODWORD(v24) = *(unsigned __int8 *)(v5 + v25 + 2 + 8) != 84;
      *((_DWORD *)a3 + 4) = v25 + 3;
      *(_QWORD *)buf = v27;
      *(_QWORD *)&buf[8] = v26;
      *(_DWORD *)&buf[16] = 1;
      *(_QWORD *)&v231[4] = v26;
      v28 = *((_QWORD *)this + 9);
      __p[0] = *((void **)this + 9404);
      Phase::Controller::DVM::VoiceGraph::CallbackPlayStateChanged(v28, (uint64_t)buf, 1, (uint64_t)__p, 8 * v24);
      break;
    case 4:
      v29 = (uint64_t *)(v5 + (int)*(_QWORD *)((char *)a3 + 12));
      v30 = *v29;
      v31 = v29[1];
      v32 = *((_DWORD *)v29 + 4);
      *(int32x2_t *)((char *)a3 + 12) = vadd_s32(*(int32x2_t *)((char *)a3 + 12), (int32x2_t)0x300000018);
      *(_QWORD *)buf = v30;
      *(_QWORD *)&buf[8] = v31;
      *(_DWORD *)&buf[16] = 0;
      *(_QWORD *)&v231[4] = v31;
      v33 = *((_QWORD *)this + 9);
      __p[0] = *((void **)this + 9404);
      if ((v32 - 1) > 8)
        v34 = 8;
      else
        v34 = byte_2166F7F10[v32 - 1];
      Phase::Controller::DVM::VoiceGraph::CallbackPlayStateChanged(v33, (uint64_t)buf, 0, (uint64_t)__p, v34);
      break;
    case 5:
      v83 = *((int *)a3 + 3);
      v84 = *((int *)a3 + 4);
      v86 = *(_QWORD *)(v5 + v83);
      v85 = *(_QWORD *)(v5 + v83 + 8);
      *((_DWORD *)a3 + 3) = v83 + 16;
      *((_DWORD *)a3 + 4) = v84 + 2;
      LODWORD(v83) = *(unsigned __int8 *)(v5 + v84 + 2 + 8) != 84;
      *((_DWORD *)a3 + 4) = v84 + 3;
      *(_QWORD *)buf = v86;
      *(_QWORD *)&buf[8] = v85;
      *(_DWORD *)&buf[16] = 1;
      *(_QWORD *)&v231[4] = v85;
      v87 = *((_QWORD *)this + 9);
      __p[0] = *((void **)this + 9404);
      Phase::Controller::DVM::VoiceGraph::CallbackPlayStateChanged(v87, (uint64_t)buf, 0, (uint64_t)__p, 8 * v83);
      break;
    case 6:
      v88 = vadd_s32(*(int32x2_t *)((char *)a3 + 12), (int32x2_t)0x300000018);
      v89 = v5 + (int)*(_QWORD *)((char *)a3 + 12);
      v90 = *(_QWORD *)(v89 + 8);
      *(_QWORD *)buf = *(_QWORD *)v89;
      *(_QWORD *)&buf[8] = v90;
      *(_DWORD *)&buf[16] = 0;
      *(_QWORD *)&v231[4] = v90;
      v91 = *(_DWORD *)(v89 + 16);
      *(int32x2_t *)((char *)a3 + 12) = v88;
      v92 = *((_QWORD *)this + 9);
      __p[0] = *((void **)this + 9404);
      v93 = v91 - 1;
      if (v93 > 8)
        v94 = 8;
      else
        v94 = byte_2166F7F10[v93];
      Phase::Controller::DVM::VoiceGraph::CallbackPlayStateChanged(v92, (uint64_t)buf, 2, (uint64_t)__p, v94);
      break;
    case 7:
      v35 = *((int *)a3 + 3);
      v36 = *((int *)a3 + 4);
      v38 = *(_QWORD *)(v5 + v35);
      v37 = *(_QWORD *)(v5 + v35 + 8);
      *((_DWORD *)a3 + 3) = v35 + 16;
      *((_DWORD *)a3 + 4) = v36 + 2;
      LODWORD(v35) = *(unsigned __int8 *)(v5 + v36 + 2 + 8) != 84;
      *((_DWORD *)a3 + 4) = v36 + 3;
      *(_QWORD *)buf = v38;
      *(_QWORD *)&buf[8] = v37;
      *(_DWORD *)&buf[16] = 1;
      *(_QWORD *)&v231[4] = v37;
      v39 = *((_QWORD *)this + 9);
      __p[0] = *((void **)this + 9404);
      Phase::Controller::DVM::VoiceGraph::CallbackPlayStateChanged(v39, (uint64_t)buf, 2, (uint64_t)__p, 8 * v35);
      break;
    case 8:
      v95 = vadd_s32(*(int32x2_t *)((char *)a3 + 12), (int32x2_t)0x400000020);
      v96 = v5 + (int)*(_QWORD *)((char *)a3 + 12);
      v97 = *(_DWORD *)v96;
      v98 = *(_QWORD *)(v96 + 8);
      v99 = *(_QWORD *)(v96 + 16);
      v100 = *(_DWORD *)(v96 + 24);
      *(int32x2_t *)((char *)a3 + 12) = v95;
      v101 = (Phase::Controller::DVM::VoiceGraph *)*((_QWORD *)this + 9);
      *(_QWORD *)buf = *((_QWORD *)this + 9404);
      Phase::Controller::DVM::VoiceGraph::CallbackPlayStateChanged(v101, v97, v98, v99, v100, buf, 0);
      break;
    case 9:
      v40 = *((_DWORD *)a3 + 4);
      v41 = *((int *)a3 + 3);
      v42 = *(_DWORD *)(v5 + v41);
      v43 = v41 + 8;
      *((_DWORD *)a3 + 3) = v41 + 8;
      *((_DWORD *)a3 + 4) = v40 + 1;
      switch(v42)
      {
        case 0:
          v44 = *(_QWORD *)(v5 + v43);
          v45 = *(_QWORD *)(v41 + v5 + 16);
          *((_DWORD *)a3 + 3) = v41 + 24;
          *((_DWORD *)a3 + 4) = v40 + 3;
          v46 = *(_DWORD *)(v5 + v41 + 24);
          *((_DWORD *)a3 + 3) = v41 + 28;
          *((_DWORD *)a3 + 4) = v40 + 4;
          v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                              + 80)));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v47 = *(_QWORD *)(v44 + 48);
            *(_DWORD *)buf = 136316674;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1367;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)v231 = v47;
            *(_WORD *)&v231[8] = 2048;
            *(_QWORD *)&v231[10] = v44;
            *(_WORD *)&v231[18] = 2048;
            *(_QWORD *)&v231[20] = v45;
            *(_WORD *)&v231[28] = 1024;
            *(_DWORD *)&v231[30] = v46;
            *(_WORD *)&v231[34] = 2048;
            *(_QWORD *)&v231[36] = a2;
            _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Client render callback has failed to return a valid buffer to %s(%p):%llu. Will use a zero buffer and call back again in %i frames @ Frame %llu", buf, 0x40u);
          }
          goto LABEL_40;
        case 1:
          v111 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                               + 80)));
          if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1326;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)v231 = Phase::PhaseOSCMessage::GetNextString(a3);
            *(_WORD *)&v231[8] = 2048;
            *(_QWORD *)&v231[10] = a2;
            _os_log_impl(&dword_2164CC000, v111, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Unknown DVM-RT command: %s @ Frame %llu", buf, 0x26u);
          }
          goto LABEL_44;
        case 2:
          v111 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                               + 80)));
          if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1333;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)v231 = Phase::PhaseOSCMessage::GetNextString(a3);
            *(_WORD *)&v231[8] = 2048;
            *(_QWORD *)&v231[10] = a2;
            _os_log_impl(&dword_2164CC000, v111, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Message cannot be scheduled for execution in the past: %s @ Frame %llu", buf, 0x26u);
          }
LABEL_44:

          break;
        case 3:
          v112 = *(_QWORD *)(v5 + v43);
          v113 = *(_QWORD *)(v41 + v5 + 16);
          *((_DWORD *)a3 + 3) = v41 + 24;
          *((_DWORD *)a3 + 4) = v40 + 3;
          v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                              + 80)));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v114 = *(_QWORD *)(v112 + 48);
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1342;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)v231 = v114;
            *(_WORD *)&v231[8] = 2048;
            *(_QWORD *)&v231[10] = v112;
            *(_WORD *)&v231[18] = 2048;
            *(_QWORD *)&v231[20] = v113;
            *(_WORD *)&v231[28] = 2048;
            *(_QWORD *)&v231[30] = a2;
            _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Unknown Voice type to set buffer on callback %s(%p):%llu @ Frame %llu", buf, 0x3Au);
          }
          goto LABEL_40;
        case 4:
          v115 = *(_QWORD *)(v5 + v43);
          v116 = *(_QWORD *)(v41 + v5 + 16);
          *((_DWORD *)a3 + 3) = v41 + 24;
          *((_DWORD *)a3 + 4) = v40 + 3;
          v117 = *(_DWORD *)(v5 + v41 + 24);
          v118 = *(_QWORD *)(v41 + v5 + 28);
          v119 = *(_QWORD *)(v41 + v5 + 36);
          *((_DWORD *)a3 + 3) = v41 + 44;
          *((_DWORD *)a3 + 4) = v40 + 6;
          v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                              + 80)));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v120 = *(_QWORD *)(v115 + 48);
            *(_DWORD *)buf = 136317186;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1355;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)v231 = v117;
            *(_WORD *)&v231[4] = 2048;
            *(_QWORD *)&v231[6] = v118;
            *(_WORD *)&v231[14] = 2080;
            *(_QWORD *)&v231[16] = v120;
            *(_WORD *)&v231[24] = 2048;
            *(_QWORD *)&v231[26] = v115;
            *(_WORD *)&v231[34] = 2048;
            *(_QWORD *)&v231[36] = v116;
            *(_WORD *)&v231[44] = 2080;
            *(_QWORD *)&v231[46] = Phase::DspLayer::VoicePoolErr_ToString(v119);
            *(_WORD *)&v231[54] = 2048;
            *(_QWORD *)&v231[56] = a2;
            _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Unable to set parameter %d with value %g on Voice %s(%p):%llu with VoicePoolErr \"%s\" @ Frame %llu", buf, 0x54u);
          }
          goto LABEL_40;
        case 5:
          v162 = *(_QWORD *)(v5 + v43);
          v164 = *(_QWORD *)(v41 + v5 + 16);
          v163 = *(_QWORD *)(v41 + v5 + 24);
          v165 = *(_QWORD *)(v41 + v5 + 32);
          *((_DWORD *)a3 + 3) = v41 + 40;
          *((_DWORD *)a3 + 4) = v40 + 5;
          v166 = *(_DWORD *)(v5 + v41 + 40);
          *((_DWORD *)a3 + 3) = v41 + 44;
          *((_DWORD *)a3 + 4) = v40 + 6;
          v167 = *(int *)(v5 + v41 + 44);
          *((_DWORD *)a3 + 3) = v41 + 48;
          *((_DWORD *)a3 + 4) = v40 + 7;
          v168 = *(_DWORD *)(v5 + v41 + 48);
          v169 = *(_QWORD *)(v41 + v5 + 52);
          *((_DWORD *)a3 + 3) = v41 + 60;
          *((_DWORD *)a3 + 4) = v40 + 9;
          v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                              + 80)));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v170 = Phase::DspLayer::VoicePoolErr_ToString(v169);
            v171 = *(_QWORD *)(v162 + 48);
            if (v167 > 5)
              v172 = "bus";
            else
              v172 = off_24D57C430[v167];
            v210 = *(_QWORD *)(v163 + 48);
            *(_DWORD *)buf = 136318210;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1385;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)v231 = v170;
            *(_WORD *)&v231[8] = 2080;
            *(_QWORD *)&v231[10] = v171;
            *(_WORD *)&v231[18] = 2048;
            *(_QWORD *)&v231[20] = v162;
            *(_WORD *)&v231[28] = 2048;
            *(_QWORD *)&v231[30] = v164;
            *(_WORD *)&v231[38] = 2080;
            *(_QWORD *)&v231[40] = v172;
            *(_WORD *)&v231[48] = 1024;
            *(_DWORD *)&v231[50] = v168;
            *(_WORD *)&v231[54] = 1024;
            *(_DWORD *)&v231[56] = v166;
            *(_WORD *)&v231[60] = 2080;
            *(_QWORD *)&v231[62] = v210;
            *(_WORD *)v232 = 2048;
            *(_QWORD *)&v232[2] = v163;
            v233 = 2048;
            *(_QWORD *)v234 = v165;
            *(_WORD *)&v234[8] = 2048;
            v235 = a2;
            _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Unable to add input connection to Voice with VoicePoolErr \"%s\". %s(%p):%llu] -%s:%i> %i[%s(%p):%llu @ Frame %llu", buf, 0x78u);
          }
          goto LABEL_40;
        case 6:
          v173 = *(_QWORD *)(v5 + v43);
          v175 = *(_QWORD *)(v41 + v5 + 16);
          v174 = *(_QWORD *)(v41 + v5 + 24);
          v176 = *(_QWORD *)(v41 + v5 + 32);
          *((_DWORD *)a3 + 3) = v41 + 40;
          *((_DWORD *)a3 + 4) = v40 + 5;
          v177 = *(_DWORD *)(v5 + v41 + 40);
          *((_DWORD *)a3 + 3) = v41 + 44;
          *((_DWORD *)a3 + 4) = v40 + 6;
          v178 = *(int *)(v5 + v41 + 44);
          *((_DWORD *)a3 + 3) = v41 + 48;
          *((_DWORD *)a3 + 4) = v40 + 7;
          v179 = *(_DWORD *)(v5 + v41 + 48);
          *((_DWORD *)a3 + 3) = v41 + 52;
          *((_DWORD *)a3 + 4) = v40 + 8;
          v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                              + 80)));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v180 = *(_QWORD *)(v173 + 48);
            if (v178 > 5)
              v181 = "bus";
            else
              v181 = off_24D57C430[v178];
            v211 = *(_QWORD *)(v174 + 48);
            *(_DWORD *)buf = 136317954;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1401;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)v231 = v180;
            *(_WORD *)&v231[8] = 2048;
            *(_QWORD *)&v231[10] = v173;
            *(_WORD *)&v231[18] = 2048;
            *(_QWORD *)&v231[20] = v175;
            *(_WORD *)&v231[28] = 2080;
            *(_QWORD *)&v231[30] = v181;
            *(_WORD *)&v231[38] = 1024;
            *(_DWORD *)&v231[40] = v179;
            *(_WORD *)&v231[44] = 1024;
            *(_DWORD *)&v231[46] = v177;
            *(_WORD *)&v231[50] = 2080;
            *(_QWORD *)&v231[52] = v211;
            *(_WORD *)&v231[60] = 2048;
            *(_QWORD *)&v231[62] = v174;
            *(_WORD *)v232 = 2048;
            *(_QWORD *)&v232[2] = v176;
            v233 = 2048;
            *(_QWORD *)v234 = a2;
            _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Unable to add connection to child map. No more space in map. %s(%p):%llu] -%s:%i> %i[%s(%p):%llu @ Frame %llu", buf, 0x6Eu);
          }
          goto LABEL_40;
        case 7:
          v121 = *(_QWORD *)(v5 + v43);
          v123 = *(_QWORD *)(v41 + v5 + 16);
          v122 = *(_QWORD *)(v41 + v5 + 24);
          v124 = *(_QWORD *)(v41 + v5 + 32);
          *((_DWORD *)a3 + 3) = v41 + 40;
          *((_DWORD *)a3 + 4) = v40 + 5;
          v125 = *(_DWORD *)(v5 + v41 + 40);
          *((_DWORD *)a3 + 3) = v41 + 44;
          *((_DWORD *)a3 + 4) = v40 + 6;
          v126 = *(int *)(v5 + v41 + 44);
          *((_DWORD *)a3 + 3) = v41 + 48;
          *((_DWORD *)a3 + 4) = v40 + 7;
          v127 = *(_DWORD *)(v5 + v41 + 48);
          *((_DWORD *)a3 + 3) = v41 + 52;
          *((_DWORD *)a3 + 4) = v40 + 8;
          v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                              + 80)));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v128 = *(_QWORD *)(v121 + 48);
            if (v126 > 5)
              v129 = "bus";
            else
              v129 = off_24D57C430[v126];
            v207 = *(_QWORD *)(v122 + 48);
            *(_DWORD *)buf = 136317954;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1417;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)v231 = v128;
            *(_WORD *)&v231[8] = 2048;
            *(_QWORD *)&v231[10] = v121;
            *(_WORD *)&v231[18] = 2048;
            *(_QWORD *)&v231[20] = v123;
            *(_WORD *)&v231[28] = 2080;
            *(_QWORD *)&v231[30] = v129;
            *(_WORD *)&v231[38] = 1024;
            *(_DWORD *)&v231[40] = v127;
            *(_WORD *)&v231[44] = 1024;
            *(_DWORD *)&v231[46] = v125;
            *(_WORD *)&v231[50] = 2080;
            *(_QWORD *)&v231[52] = v207;
            *(_WORD *)&v231[60] = 2048;
            *(_QWORD *)&v231[62] = v122;
            *(_WORD *)v232 = 2048;
            *(_QWORD *)&v232[2] = v124;
            v233 = 2048;
            *(_QWORD *)v234 = a2;
            _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Unable to add connection to parent map. No more space in map. %s(%p):%llu] -%s:%i> %i[%s(%p):%llu @ Frame %llu", buf, 0x6Eu);
          }
          goto LABEL_40;
        case 8:
          v182 = *(_QWORD *)(v5 + v43);
          v184 = *(_QWORD *)(v41 + v5 + 16);
          v183 = *(_QWORD *)(v41 + v5 + 24);
          v185 = *(_QWORD *)(v41 + v5 + 32);
          *((_DWORD *)a3 + 3) = v41 + 40;
          *((_DWORD *)a3 + 4) = v40 + 5;
          v186 = *(_DWORD *)(v5 + v41 + 40);
          *((_DWORD *)a3 + 3) = v41 + 44;
          *((_DWORD *)a3 + 4) = v40 + 6;
          v187 = *(int *)(v5 + v41 + 44);
          *((_DWORD *)a3 + 3) = v41 + 48;
          *((_DWORD *)a3 + 4) = v40 + 7;
          v188 = *(_DWORD *)(v5 + v41 + 48);
          *((_DWORD *)a3 + 3) = v41 + 52;
          *((_DWORD *)a3 + 4) = v40 + 8;
          v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                              + 80)));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v189 = *(_QWORD *)(v182 + 48);
            if (v187 > 5)
              v190 = "bus";
            else
              v190 = off_24D57C430[v187];
            v212 = *(_QWORD *)(v183 + 48);
            *(_DWORD *)buf = 136317954;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1434;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)v231 = v189;
            *(_WORD *)&v231[8] = 2048;
            *(_QWORD *)&v231[10] = v182;
            *(_WORD *)&v231[18] = 2048;
            *(_QWORD *)&v231[20] = v184;
            *(_WORD *)&v231[28] = 2080;
            *(_QWORD *)&v231[30] = v190;
            *(_WORD *)&v231[38] = 1024;
            *(_DWORD *)&v231[40] = v188;
            *(_WORD *)&v231[44] = 1024;
            *(_DWORD *)&v231[46] = v186;
            *(_WORD *)&v231[50] = 2080;
            *(_QWORD *)&v231[52] = v212;
            *(_WORD *)&v231[60] = 2048;
            *(_QWORD *)&v231[62] = v183;
            *(_WORD *)v232 = 2048;
            *(_QWORD *)&v232[2] = v185;
            v233 = 2048;
            *(_QWORD *)v234 = a2;
            _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Unable to remove connection from child map. Connection does not exist. %s(%p):%llu] -%s:%i> %i[%s(%p):%llu @ Frame %llu", buf, 0x6Eu);
          }
          goto LABEL_40;
        case 9:
          v130 = *(_QWORD *)(v5 + v43);
          v132 = *(_QWORD *)(v41 + v5 + 16);
          v131 = *(_QWORD *)(v41 + v5 + 24);
          v133 = *(_QWORD *)(v41 + v5 + 32);
          *((_DWORD *)a3 + 3) = v41 + 40;
          *((_DWORD *)a3 + 4) = v40 + 5;
          v134 = *(_DWORD *)(v5 + v41 + 40);
          v135 = *(_QWORD *)(v41 + v5 + 44);
          *((_DWORD *)a3 + 3) = v41 + 52;
          *((_DWORD *)a3 + 4) = v40 + 7;
          v136 = *(_DWORD *)(v5 + v41 + 52);
          *((_DWORD *)a3 + 3) = v41 + 56;
          *((_DWORD *)a3 + 4) = v40 + 8;
          v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                              + 80)));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v137 = *(_QWORD *)(v130 + 48);
            if (v135 > 5)
              v138 = "bus";
            else
              v138 = off_24D57C430[(int)v135];
            v208 = *(_QWORD *)(v131 + 48);
            *(_DWORD *)buf = 136317954;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1451;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)v231 = v137;
            *(_WORD *)&v231[8] = 2048;
            *(_QWORD *)&v231[10] = v130;
            *(_WORD *)&v231[18] = 2048;
            *(_QWORD *)&v231[20] = v132;
            *(_WORD *)&v231[28] = 2080;
            *(_QWORD *)&v231[30] = v138;
            *(_WORD *)&v231[38] = 1024;
            *(_DWORD *)&v231[40] = v136;
            *(_WORD *)&v231[44] = 1024;
            *(_DWORD *)&v231[46] = v134;
            *(_WORD *)&v231[50] = 2080;
            *(_QWORD *)&v231[52] = v208;
            *(_WORD *)&v231[60] = 2048;
            *(_QWORD *)&v231[62] = v131;
            *(_WORD *)v232 = 2048;
            *(_QWORD *)&v232[2] = v133;
            v233 = 2048;
            *(_QWORD *)v234 = a2;
            _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Unable to remove connection from parent map. Connection does not exist. %s(%p):%llu] -%s:%i> %i[%s(%p):%llu @ Frame %llu", buf, 0x6Eu);
          }
          goto LABEL_40;
        case 10:
          v191 = *(_QWORD *)(v5 + v43);
          v193 = *(_QWORD *)(v41 + v5 + 16);
          v192 = *(_QWORD *)(v41 + v5 + 24);
          v194 = *(_QWORD *)(v41 + v5 + 32);
          *((_DWORD *)a3 + 3) = v41 + 40;
          *((_DWORD *)a3 + 4) = v40 + 5;
          v195 = *(_DWORD *)(v5 + v41 + 40);
          v196 = *(_QWORD *)(v41 + v5 + 44);
          *((_DWORD *)a3 + 3) = v41 + 52;
          *((_DWORD *)a3 + 4) = v40 + 7;
          v197 = *(_DWORD *)(v5 + v41 + 52);
          v198 = *(_QWORD *)(v41 + v5 + 56);
          *((_DWORD *)a3 + 3) = v41 + 64;
          *((_DWORD *)a3 + 4) = v40 + 9;
          v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                              + 80)));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v199 = Phase::DspLayer::VoicePoolErr_ToString(v198);
            v200 = *(_QWORD *)(v191 + 48);
            if (v196 > 5)
              v201 = "bus";
            else
              v201 = off_24D57C430[(int)v196];
            v213 = *(_QWORD *)(v192 + 48);
            *(_DWORD *)buf = 136318210;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1470;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)v231 = v199;
            *(_WORD *)&v231[8] = 2080;
            *(_QWORD *)&v231[10] = v200;
            *(_WORD *)&v231[18] = 2048;
            *(_QWORD *)&v231[20] = v191;
            *(_WORD *)&v231[28] = 2048;
            *(_QWORD *)&v231[30] = v193;
            *(_WORD *)&v231[38] = 2080;
            *(_QWORD *)&v231[40] = v201;
            *(_WORD *)&v231[48] = 1024;
            *(_DWORD *)&v231[50] = v197;
            *(_WORD *)&v231[54] = 1024;
            *(_DWORD *)&v231[56] = v195;
            *(_WORD *)&v231[60] = 2080;
            *(_QWORD *)&v231[62] = v213;
            *(_WORD *)v232 = 2048;
            *(_QWORD *)&v232[2] = v192;
            v233 = 2048;
            *(_QWORD *)v234 = v194;
            *(_WORD *)&v234[8] = 2048;
            v235 = a2;
            _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Failed to remove input from child Voice with VoicePoolErr \"%s\". There is no record of this connection. %s(%p):%llu] -%s:%i> %i[%s(%p):%llu @ Frame %llu", buf, 0x78u);
          }
          goto LABEL_40;
        case 11:
          *((_DWORD *)a3 + 3) = v41 + 32;
          *((_DWORD *)a3 + 4) = v40 + 4;
          break;
        case 12:
          v139 = *(_QWORD *)(v5 + v43);
          v141 = *(_QWORD *)(v41 + v5 + 16);
          v140 = *(_QWORD *)(v41 + v5 + 24);
          v227 = *(_QWORD *)(v41 + v5 + 32);
          *((_DWORD *)a3 + 3) = v41 + 40;
          *((_DWORD *)a3 + 4) = v40 + 5;
          v142 = *(_DWORD *)(v5 + v41 + 40);
          v143 = *(_QWORD *)(v41 + v5 + 44);
          *((_DWORD *)a3 + 3) = v41 + 52;
          *((_DWORD *)a3 + 4) = v40 + 7;
          v144 = *(_DWORD *)(v5 + v41 + 52);
          v145 = *(float *)(v41 + v5 + 56);
          v146 = *(_QWORD *)(v41 + v5 + 60);
          *((_DWORD *)a3 + 3) = v41 + 68;
          *((_DWORD *)a3 + 4) = v40 + 10;
          v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                              + 80)));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v147 = Phase::DspLayer::VoicePoolErr_ToString(v146);
            v148 = *(_QWORD *)(v139 + 48);
            if (v143 > 5)
              v149 = "bus";
            else
              v149 = off_24D57C430[(int)v143];
            v209 = *(_QWORD *)(v140 + 48);
            *(_DWORD *)buf = 136318466;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1490;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)v231 = v147;
            *(_WORD *)&v231[8] = 2080;
            *(_QWORD *)&v231[10] = v148;
            *(_WORD *)&v231[18] = 2048;
            *(_QWORD *)&v231[20] = v139;
            *(_WORD *)&v231[28] = 2048;
            *(_QWORD *)&v231[30] = v141;
            *(_WORD *)&v231[38] = 2080;
            *(_QWORD *)&v231[40] = v149;
            *(_WORD *)&v231[48] = 1024;
            *(_DWORD *)&v231[50] = v144;
            *(_WORD *)&v231[54] = 2048;
            *(double *)&v231[56] = v145;
            *(_WORD *)&v231[64] = 1024;
            *(_DWORD *)&v231[66] = v142;
            *(_WORD *)v232 = 2080;
            *(_QWORD *)&v232[2] = v209;
            v233 = 2048;
            *(_QWORD *)v234 = v140;
            *(_WORD *)&v234[8] = 2048;
            v235 = v227;
            *(_WORD *)v236 = 2048;
            *(_QWORD *)&v236[2] = a2;
            _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Failed to set Voice input connection gain with VoicePoolErr \"%s\". There is no record of this connection. %s(%p):%llu] -%s:%i(%f)> %i[%s(%p):%llu @ Frame %llu", buf, 0x82u);
          }
          goto LABEL_40;
        case 13:
          v202 = *(_QWORD *)(v5 + v43);
          v203 = v41 + v5;
          v205 = *(_QWORD *)(v203 + 16);
          v204 = *(_QWORD *)(v203 + 24);
          *((_DWORD *)a3 + 3) = v41 + 32;
          *((_DWORD *)a3 + 4) = v40 + 4;
          v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                              + 80)));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v206 = *(_QWORD *)(v202 + 48);
            *(_DWORD *)buf = 136316674;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1517;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)v231 = v206;
            *(_WORD *)&v231[8] = 2048;
            *(_QWORD *)&v231[10] = v202;
            *(_WORD *)&v231[18] = 2048;
            *(_QWORD *)&v231[20] = v205;
            *(_WORD *)&v231[28] = 2048;
            *(_QWORD *)&v231[30] = v204;
            *(_WORD *)&v231[38] = 2048;
            *(_QWORD *)&v231[40] = a2;
            _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Tapper %s(%p):%llu configured with multiple callbacks %p @ Frame %llu", buf, 0x44u);
          }
          goto LABEL_40;
        case 14:
          v150 = *(_QWORD *)(v5 + v43);
          v151 = v41 + v5;
          v153 = *(_QWORD *)(v151 + 16);
          v152 = *(_QWORD *)(v151 + 24);
          *((_DWORD *)a3 + 3) = v41 + 32;
          *((_DWORD *)a3 + 4) = v40 + 4;
          v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                              + 80)));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v154 = *(_QWORD *)(v150 + 48);
            *(_DWORD *)buf = 136316674;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1527;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)v231 = v154;
            *(_WORD *)&v231[8] = 2048;
            *(_QWORD *)&v231[10] = v150;
            *(_WORD *)&v231[18] = 2048;
            *(_QWORD *)&v231[20] = v153;
            *(_WORD *)&v231[28] = 2048;
            *(_QWORD *)&v231[30] = v152;
            *(_WORD *)&v231[38] = 2048;
            *(_QWORD *)&v231[40] = a2;
            _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Sampler %s(%p):%llu configured with multiple callbacks %p @ Frame %llu", buf, 0x44u);
          }
          goto LABEL_40;
        case 15:
          v155 = *(_QWORD *)(v5 + v43);
          v156 = *(_QWORD *)(v41 + v5 + 16);
          *((_DWORD *)a3 + 3) = v41 + 24;
          *((_DWORD *)a3 + 4) = v40 + 3;
          v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                              + 80)));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v157 = *(_QWORD *)(v155 + 48);
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1536;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)v231 = v157;
            *(_WORD *)&v231[8] = 2048;
            *(_QWORD *)&v231[10] = v155;
            *(_WORD *)&v231[18] = 2048;
            *(_QWORD *)&v231[20] = v156;
            *(_WORD *)&v231[28] = 2048;
            *(_QWORD *)&v231[30] = a2;
            _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Sampler map out of memory when configuring %s(%p):%llu @ Frame %llu", buf, 0x3Au);
          }
          goto LABEL_40;
        case 16:
          v158 = *(_QWORD *)(v5 + v43);
          v159 = *(_QWORD *)(v41 + v5 + 16);
          *((_DWORD *)a3 + 3) = v41 + 24;
          *((_DWORD *)a3 + 4) = v40 + 3;
          v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                              + 80)));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v160 = *(_QWORD *)(v158 + 48);
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1545;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)v231 = v160;
            *(_WORD *)&v231[8] = 2048;
            *(_QWORD *)&v231[10] = v158;
            *(_WORD *)&v231[18] = 2048;
            *(_QWORD *)&v231[20] = v159;
            *(_WORD *)&v231[28] = 2048;
            *(_QWORD *)&v231[30] = a2;
            _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Tapper map out of memory when configuring %s(%p):%llu @ Frame %llu", buf, 0x3Au);
          }
          goto LABEL_40;
        default:
          v108 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                               + 80)));
          if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
          {
            Phase::PhaseOSCMessage::ToString(a3, __p);
            v161 = v229 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "DVMImplementation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1550;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)v231 = v161;
            *(_WORD *)&v231[8] = 2048;
            *(_QWORD *)&v231[10] = a2;
            _os_log_impl(&dword_2164CC000, v108, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: %s @ Frame %llu", buf, 0x26u);
            if (v229 < 0)
              operator delete(__p[0]);
          }
          goto LABEL_31;
      }
      break;
    case 0xA:
      v102 = *((_DWORD *)a3 + 4);
      v103 = *((int *)a3 + 3);
      v105 = *(Phase::DspLayer::VoicePool **)(v5 + v103);
      v104 = *(_QWORD *)(v5 + v103 + 8);
      *((_DWORD *)a3 + 3) = v103 + 16;
      *((_DWORD *)a3 + 4) = v102 + 2;
      v106 = *(_DWORD *)(v5 + v103 + 16);
      *((_DWORD *)a3 + 3) = v103 + 20;
      *((_DWORD *)a3 + 4) = v102 + 3;
      VoiceNode = Phase::Controller::DVM::VoiceGraph::GetVoiceNode(*((Phase::Controller::DVM::VoiceGraph **)this + 9), v105, v104);
      if (VoiceNode)
      {
        *((_DWORD *)VoiceNode + 46) = v106;
      }
      else
      {
        v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                            + 80)));
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          v110 = *((_QWORD *)v105 + 6);
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "DVMImplementation.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1268;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)v231 = v110;
          *(_WORD *)&v231[8] = 2048;
          *(_QWORD *)&v231[10] = v105;
          *(_WORD *)&v231[18] = 2048;
          *(_QWORD *)&v231[20] = v104;
          *(_WORD *)&v231[28] = 2048;
          *(_QWORD *)&v231[30] = a2;
          _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Setting tail length failed! No VoiceNode found for Voice %s(%p):%llu @ Frame %llu", buf, 0x3Au);
        }
LABEL_40:

      }
      break;
    case 0xB:
      v48 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 80));
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        v49 = *(_QWORD *)a3;
        v50 = *((_DWORD *)a3 + 4);
        v51 = *((int *)a3 + 3);
        v52 = *(_DWORD *)(*(_QWORD *)a3 + v51);
        *((_DWORD *)a3 + 3) = v51 + 4;
        *((_DWORD *)a3 + 4) = v50 + 1;
        v225 = *(_DWORD *)(v49 + v51 + 4);
        v226 = v52;
        *((_DWORD *)a3 + 3) = v51 + 8;
        *((_DWORD *)a3 + 4) = v50 + 2;
        v53 = *(_DWORD *)(v49 + v51 + 8);
        *((_DWORD *)a3 + 3) = v51 + 12;
        *((_DWORD *)a3 + 4) = v50 + 3;
        v223 = *(_DWORD *)(v49 + v51 + 12);
        v224 = v53;
        *((_DWORD *)a3 + 3) = v51 + 16;
        *((_DWORD *)a3 + 4) = v50 + 4;
        v54 = *(_DWORD *)(v49 + v51 + 16);
        *((_DWORD *)a3 + 3) = v51 + 20;
        *((_DWORD *)a3 + 4) = v50 + 5;
        v221 = *(_DWORD *)(v49 + v51 + 20);
        v222 = v54;
        *((_DWORD *)a3 + 3) = v51 + 24;
        *((_DWORD *)a3 + 4) = v50 + 6;
        v55 = *(_DWORD *)(v49 + v51 + 24);
        *((_DWORD *)a3 + 3) = v51 + 28;
        *((_DWORD *)a3 + 4) = v50 + 7;
        v219 = *(_DWORD *)(v49 + v51 + 28);
        v220 = v55;
        *((_DWORD *)a3 + 3) = v51 + 32;
        *((_DWORD *)a3 + 4) = v50 + 8;
        v56 = *(_DWORD *)(v49 + v51 + 32);
        *((_DWORD *)a3 + 3) = v51 + 36;
        *((_DWORD *)a3 + 4) = v50 + 9;
        v217 = *(_DWORD *)(v49 + v51 + 36);
        v218 = v56;
        *((_DWORD *)a3 + 3) = v51 + 40;
        *((_DWORD *)a3 + 4) = v50 + 10;
        v57 = *(_DWORD *)(v49 + v51 + 40);
        *((_DWORD *)a3 + 3) = v51 + 44;
        *((_DWORD *)a3 + 4) = v50 + 11;
        v215 = *(_DWORD *)(v49 + v51 + 44);
        v216 = v57;
        *((_DWORD *)a3 + 3) = v51 + 48;
        *((_DWORD *)a3 + 4) = v50 + 12;
        v214 = *(_DWORD *)(v49 + v51 + 48);
        *((_DWORD *)a3 + 3) = v51 + 52;
        *((_DWORD *)a3 + 4) = v50 + 13;
        v58 = *(_DWORD *)(v49 + v51 + 52);
        *((_DWORD *)a3 + 3) = v51 + 56;
        *((_DWORD *)a3 + 4) = v50 + 14;
        v59 = *(_DWORD *)(v49 + v51 + 56);
        *((_DWORD *)a3 + 3) = v51 + 60;
        *((_DWORD *)a3 + 4) = v50 + 15;
        v60 = *(_DWORD *)(v49 + v51 + 60);
        *((_DWORD *)a3 + 3) = v51 + 64;
        *((_DWORD *)a3 + 4) = v50 + 16;
        v61 = *(_DWORD *)(v49 + v51 + 64);
        *((_DWORD *)a3 + 3) = v51 + 68;
        *((_DWORD *)a3 + 4) = v50 + 17;
        v62 = *(_DWORD *)(v49 + v51 + 68);
        *((_DWORD *)a3 + 3) = v51 + 72;
        *((_DWORD *)a3 + 4) = v50 + 18;
        v63 = *(_DWORD *)(v49 + v51 + 72);
        *((_DWORD *)a3 + 3) = v51 + 76;
        *((_DWORD *)a3 + 4) = v50 + 19;
        v64 = *(_DWORD *)(v49 + v51 + 76);
        *((_DWORD *)a3 + 3) = v51 + 80;
        *((_DWORD *)a3 + 4) = v50 + 20;
        v65 = *(_DWORD *)(v49 + v51 + 80);
        *((_DWORD *)a3 + 3) = v51 + 84;
        *((_DWORD *)a3 + 4) = v50 + 21;
        v66 = *(_DWORD *)(v49 + v51 + 84);
        *((_DWORD *)a3 + 3) = v51 + 88;
        *((_DWORD *)a3 + 4) = v50 + 22;
        v67 = *(_DWORD *)(v49 + v51 + 88);
        *((_DWORD *)a3 + 3) = v51 + 92;
        *((_DWORD *)a3 + 4) = v50 + 23;
        v68 = *(_DWORD *)(v49 + v51 + 92);
        *((_DWORD *)a3 + 3) = v51 + 96;
        *((_DWORD *)a3 + 4) = v50 + 24;
        v69 = *(_DWORD *)(v49 + v51 + 96);
        *((_DWORD *)a3 + 3) = v51 + 100;
        *((_DWORD *)a3 + 4) = v50 + 25;
        v70 = *(_DWORD *)(v49 + v51 + 100);
        *((_DWORD *)a3 + 3) = v51 + 104;
        *((_DWORD *)a3 + 4) = v50 + 26;
        v71 = *(_DWORD *)(v49 + v51 + 104);
        *((_DWORD *)a3 + 3) = v51 + 108;
        *((_DWORD *)a3 + 4) = v50 + 27;
        v72 = *(_DWORD *)(v49 + v51 + 108);
        *((_DWORD *)a3 + 3) = v51 + 112;
        *((_DWORD *)a3 + 4) = v50 + 28;
        v73 = *(_DWORD *)(v49 + v51 + 112);
        *((_DWORD *)a3 + 3) = v51 + 116;
        *((_DWORD *)a3 + 4) = v50 + 29;
        v74 = *(_DWORD *)(v49 + v51 + 116);
        *((_DWORD *)a3 + 4) = v50 + 30;
        *((_DWORD *)a3 + 3) = v51 + 120;
        v75 = *(_DWORD *)(v49 + v51 + 120);
        *((_DWORD *)a3 + 4) = v50 + 31;
        *((_DWORD *)a3 + 3) = v51 + 124;
        v76 = *(_DWORD *)(v49 + v51 + 124);
        *((_DWORD *)a3 + 3) = v51 + 128;
        *((_DWORD *)a3 + 4) = v50 + 32;
        v77 = *(_DWORD *)(v49 + v51 + 128);
        *((_DWORD *)a3 + 3) = v51 + 132;
        *((_DWORD *)a3 + 4) = v50 + 33;
        v78 = *(_DWORD *)(v49 + v51 + 132);
        *((_DWORD *)a3 + 4) = v50 + 34;
        *((_DWORD *)a3 + 3) = v51 + 136;
        LODWORD(v49) = *(_DWORD *)(v49 + v51 + 136);
        *((_DWORD *)a3 + 3) = v51 + 140;
        *((_DWORD *)a3 + 4) = v50 + 35;
        *(_DWORD *)((char *)&v235 + 2) = v59;
        *(_DWORD *)&v236[6] = v61;
        v240 = v63;
        v244 = v65;
        v248 = v67;
        v252 = v69;
        v256 = v71;
        v260 = v73;
        v264 = v75;
        v268 = v77;
        v272 = v49;
        *(_QWORD *)&buf[4] = "DVMImplementation.mm";
        *(_DWORD *)&buf[14] = 1313;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)v231 = a2;
        *(_DWORD *)&v231[10] = v226;
        *(_DWORD *)&v231[16] = v225;
        *(_DWORD *)&v231[22] = v224;
        *(_DWORD *)&v231[28] = v223;
        *(_DWORD *)&v231[34] = v222;
        *(_DWORD *)&v231[40] = v221;
        *(_DWORD *)&v231[46] = v220;
        *(_DWORD *)&v231[52] = v219;
        *(_DWORD *)&v231[58] = v218;
        *(_DWORD *)&v231[64] = v217;
        *(_DWORD *)v232 = v216;
        *(_DWORD *)&v232[6] = v215;
        *(_DWORD *)v234 = v214;
        *(_DWORD *)&v234[6] = v58;
        *(_DWORD *)v236 = v60;
        v238 = v62;
        v242 = v64;
        v246 = v66;
        v250 = v68;
        v254 = v70;
        v258 = v72;
        v262 = v74;
        v266 = v76;
        v270 = v78;
        *(_WORD *)&buf[12] = 1024;
        *(_WORD *)&v231[8] = 1024;
        *(_WORD *)&v231[14] = 1024;
        *(_WORD *)&v231[20] = 1024;
        *(_WORD *)&v231[26] = 1024;
        *(_WORD *)&v231[32] = 1024;
        *(_WORD *)&v231[38] = 1024;
        *(_WORD *)&v231[44] = 1024;
        *(_WORD *)&v231[50] = 1024;
        *(_WORD *)&v231[56] = 1024;
        *(_WORD *)&v231[62] = 1024;
        *(_WORD *)&v231[68] = 1024;
        *(_WORD *)&v232[4] = 1024;
        v233 = 1024;
        *(_WORD *)&v234[4] = 1024;
        LOWORD(v235) = 1024;
        HIWORD(v235) = 1024;
        *(_WORD *)&v236[4] = 1024;
        v237 = 1024;
        v239 = 1024;
        v241 = 1024;
        v243 = 1024;
        v245 = 1024;
        v247 = 1024;
        v249 = 1024;
        v251 = 1024;
        v253 = 1024;
        v255 = 1024;
        v257 = 1024;
        v259 = 1024;
        v261 = 1024;
        v263 = 1024;
        v265 = 1024;
        v267 = 1024;
        v269 = 1024;
        v271 = 1024;
        *(_DWORD *)buf = 136324610;
        _os_log_impl(&dword_2164CC000, v48, OS_LOG_TYPE_DEFAULT, "%25s:%-5d \n=== DVM-RT Statistics @ Frame %llu ===\n* NRT->RT: %i Mes./s (%i B/s)\n* NRT->RT: max. %i Mes. (%i B/s)\n* Scheduled Messages: %i Mes. (%i B/s)\n* RT->NRT: %i B/s\n* Num. Child Connections: %i/%i\n* Num. Parent Connections: %i/%i\n* Num. Sampler (a/p/t): %i/%i/%i\n* Num. SubmixGain (a/p/t): %i/%i/%i\n* Num. LinFade (a/p/t): %i/%i/%i\n* Num. Tapper: (a/t): %i/%i\n* Num. Convolver (a/p/t): %i/%i/%i\n* Num. Matrix Mixer (a/p/t): %i/%i/%i\n* Num. NullMixer (a/p/t): %i/%i/%i\n* Num. VoicePools: %i\n"
          "* Num. Currently Scheduled Messages: %i\n"
          "* Voice Count (a/p): %i/%i",
          buf,
          0xEEu);
      }
      break;
    default:
      v108 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                           + 80)));
      if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
      {
        Phase::PhaseOSCMessage::ToString(a3, __p);
        v109 = v229 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "DVMImplementation.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1560;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)v231 = v109;
        *(_WORD *)&v231[8] = 2048;
        *(_QWORD *)&v231[10] = a2;
        _os_log_impl(&dword_2164CC000, v108, OS_LOG_TYPE_ERROR, "%25s:%-5d DVM-RT Error: Unknown DVM-NRT command: %s @ Frame %llu", buf, 0x26u);
        if (v229 < 0)
          operator delete(__p[0]);
      }
LABEL_31:

      break;
  }
}

void sub_216591804(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMRTOSCCommand,int>(uint64_t *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((int *)a1 + 3);
  if (*((_DWORD *)a1 + 2) - (int)v2 < 20)
    return 0xFFFFFFFFLL;
  v4 = *a1 + v2;
  *(_QWORD *)(v4 + 4) = a2;
  *(_WORD *)(v4 + 12) = 105;
  *(_DWORD *)(v4 + 16) = 0;
  v5 = *a1;
  v3 = 16;
  *(_DWORD *)(v5 + *((int *)a1 + 3)) = 16;
  *(_DWORD *)(v5 + 16) += 20;
  *((_DWORD *)a1 + 3) += 20;
  return v3;
}

uint64_t Phase::PhaseOSCBundle::WriteNextMessage<Phase::Controller::DVM_RT::DVMRTOSCCommand,int,Phase::DspLayer::VoicePool const*,long long>(uint64_t *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *((int *)a1 + 3);
  if (*((_DWORD *)a1 + 2) - (int)v5 < 36)
    return 0xFFFFFFFFLL;
  v7 = *a1 + v5;
  *(_QWORD *)(v7 + 4) = a2;
  *(_DWORD *)(v7 + 16) = a3;
  *(_QWORD *)(v7 + 20) = a4;
  *(_DWORD *)(v7 + 12) = 6844521;
  *(_QWORD *)(v7 + 28) = a5;
  v8 = *a1;
  v6 = 32;
  *(_DWORD *)(v8 + *((int *)a1 + 3)) = 32;
  *(_DWORD *)(v8 + 16) += 36;
  *((_DWORD *)a1 + 3) += 36;
  return v6;
}

const char *Phase::DspLayer::VoicePoolErr_ToString(unsigned int a1)
{
  if (a1 > 0xC)
    return "Unknown VoicePoolErr";
  else
    return off_24D57C460[a1];
}

const char *Phase::PhaseOSCMessage::GetNextString(Phase::PhaseOSCMessage *this)
{
  uint64_t v2;
  const char *v3;
  int v4;
  int v5;

  v2 = *((int *)this + 3);
  v3 = (const char *)(*(_QWORD *)this + v2);
  v4 = strlen(v3);
  v5 = *((_DWORD *)this + 4) + 1;
  *((_DWORD *)this + 3) = v2 + (v4 & 0xFFFFFFFC) + 4;
  *((_DWORD *)this + 4) = v5;
  return v3;
}

uint64_t *std::unique_ptr<Phase::Controller::DVM_RT>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v2 + 2440432);
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v2 + 2440392);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void Phase::Controller::DVM::VoiceGraph::~VoiceGraph(Phase::Controller::DVM::VoiceGraph *this)
{
  void *v2;
  void *v3;

  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*((_QWORD **)this + 98));
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*((_QWORD **)this + 95));
  v2 = (void *)*((_QWORD *)this + 91);
  if (v2)
  {
    *((_QWORD *)this + 92) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 88);
  if (v3)
  {
    *((_QWORD *)this + 89) = v3;
    operator delete(v3);
  }
  std::__list_imp<Phase::Controller::DVM::DspNodePlayStateCommand>::clear((uint64_t *)this + 85);
  std::__list_imp<Phase::Controller::DVM::DspNodePlayStateCommand>::clear((uint64_t *)this + 82);
  free(*((void **)this + 78));
  free(*((void **)this + 79));
  free(*((void **)this + 74));
  free(*((void **)this + 75));
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::~__hash_table((uint64_t)this + 552);
  std::__tree<Phase::SpatialCategory>::destroy((uint64_t)this + 528, *((_QWORD **)this + 67));
  std::__tree<Phase::SpatialCategory>::destroy((uint64_t)this + 504, *((_QWORD **)this + 64));
  std::__list_imp<std::unique_ptr<Phase::Controller::DVM::VoicePoolNode>>::clear((uint64_t *)this + 60);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Sink>>>::~__hash_table((uint64_t)this + 440);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Master>>>::~__hash_table((uint64_t)this + 400);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Renderer>>>::~__hash_table((uint64_t)this + 360);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::DVM::Tap>>>::~__hash_table((uint64_t)this + 320);
  caulk::concurrent::guarded_lookup_hash_table<unsigned long long,Phase::Controller::DVM::Tap *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long long)>>::~guarded_lookup_hash_table((uint64_t)this + 176);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::DVM::Submix>>>::~__hash_table((uint64_t)this + 136);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 96);
}

void std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void Phase::Controller::DVM::Submix::Reset(Phase::Controller::DVM::Submix *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t j;
  uint64_t v6;

  *((_DWORD *)this + 9) = 0;
  if (*((_BYTE *)this + 44))
    *((_BYTE *)this + 44) = 0;
  if (*((_QWORD *)this + 15))
  {
    v2 = (_QWORD *)((char *)this + 96);
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::__deallocate_node((_DWORD)this + 96, *((_QWORD **)this + 14));
    *((_QWORD *)this + 14) = 0;
    v3 = *((_QWORD *)this + 13);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v2 + 8 * i) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  v6 = *((_QWORD *)this + 9);
  for (j = *((_QWORD *)this + 10);
        j != v6;
        std::allocator<Phase::Controller::DVM::Submix::ChannelStrip>::destroy[abi:ne180100]((uint64_t)this + 88, j))
  {
    j -= 72;
  }
  *((_QWORD *)this + 10) = v6;
}

void Phase::Controller::DVM::Submix::AddGenerator(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  uint8x8_t v15;
  _QWORD *v16;
  _QWORD *i;
  unint64_t v18;
  _QWORD *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  float v31;
  float v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;

  if (a2 != 1)
  {
    if (a2)
      std::terminate();
    v8 = 0xCBF29CE484222325;
    v9 = operator new();
    v10 = 0;
    *(_DWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = a3;
    *(_QWORD *)(v9 + 24) = a4;
    *(_BYTE *)(v9 + 32) = 0;
    *(_DWORD *)(v9 + 36) = 0;
    *(_BYTE *)(v9 + 40) = 0;
    *(_BYTE *)(v9 + 44) = 0;
    *(_QWORD *)(v9 + 48) = 0;
    *(_BYTE *)(v9 + 56) = 0;
    *(_QWORD *)(v9 + 64) = 1;
    *(_QWORD *)(v9 + 72) = 0;
    *(_QWORD *)(v9 + 80) = 0;
    *(_QWORD *)(v9 + 88) = 0;
    *(_QWORD *)v9 = &off_24D57C518;
    *(_BYTE *)(v9 + 96) = 0;
    *(_QWORD *)&v39 = a3;
    *((_QWORD *)&v39 + 1) = a4;
    v40 = v9;
    do
      v8 = 0x100000001B3 * (v8 ^ *((char *)&v39 + v10++));
    while (v10 != 16);
    v11 = (uint64_t *)(a1 + 96);
    v12 = *(_QWORD *)(a1 + 104);
    if (v12)
    {
      v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        v4 = v8;
        if (v8 >= v12)
          v4 = v8 % v12;
      }
      else
      {
        v4 = (v12 - 1) & v8;
      }
      v16 = *(_QWORD **)(*v11 + 8 * v4);
      if (v16)
      {
        for (i = (_QWORD *)*v16; i; i = (_QWORD *)*i)
        {
          v18 = i[1];
          if (v18 == v8)
          {
            if (i[2] == a3 && i[3] == a4)
              goto LABEL_78;
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v18 >= v12)
                v18 %= v12;
            }
            else
            {
              v18 &= v12 - 1;
            }
            if (v18 != v4)
              break;
          }
        }
      }
    }
    v20 = operator new(0x28uLL);
    *v20 = 0;
    v20[1] = v8;
    *((_OWORD *)v20 + 1) = v39;
    v20[4] = v9;
    v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 120) + 1);
    v22 = *(float *)(a1 + 128);
    if (!v12 || (float)(v22 * (float)v12) < v21)
    {
      v23 = 1;
      if (v12 >= 3)
        v23 = (v12 & (v12 - 1)) != 0;
      v24 = v23 | (2 * v12);
      v25 = vcvtps_u32_f32(v21 / v22);
      if (v24 <= v25)
        v26 = v25;
      else
        v26 = v24;
LABEL_63:
      std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1 + 96, v26);
      v12 = *(_QWORD *)(a1 + 104);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v8 >= v12)
          v4 = v8 % v12;
        else
          v4 = v8;
      }
      else
      {
        v4 = (v12 - 1) & v8;
      }
      goto LABEL_68;
    }
    goto LABEL_68;
  }
  v8 = 0xCBF29CE484222325;
  v9 = operator new();
  v14 = 0;
  *(_DWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  *(_BYTE *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 36) = 0;
  *(_BYTE *)(v9 + 40) = 0;
  *(_BYTE *)(v9 + 44) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)v9 = &off_24D57C5B8;
  *(_BYTE *)(v9 + 56) = 1;
  *(_QWORD *)(v9 + 64) = 1;
  *(_QWORD *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_BYTE *)(v9 + 96) = 1;
  *(_QWORD *)&v39 = a3;
  *((_QWORD *)&v39 + 1) = a4;
  v40 = v9;
  do
    v8 = 0x100000001B3 * (v8 ^ *((char *)&v39 + v14++));
  while (v14 != 16);
  v11 = (uint64_t *)(a1 + 96);
  v12 = *(_QWORD *)(a1 + 104);
  if (!v12)
    goto LABEL_56;
  v15 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    v4 = v8;
    if (v8 >= v12)
      v4 = v8 % v12;
  }
  else
  {
    v4 = (v12 - 1) & v8;
  }
  v27 = *(_QWORD **)(*v11 + 8 * v4);
  if (!v27 || (v28 = (_QWORD *)*v27) == 0)
  {
LABEL_56:
    v20 = operator new(0x28uLL);
    *v20 = 0;
    v20[1] = v8;
    *((_OWORD *)v20 + 1) = v39;
    v20[4] = v9;
    v31 = (float)(unint64_t)(*(_QWORD *)(a1 + 120) + 1);
    v32 = *(float *)(a1 + 128);
    if (!v12 || (float)(v32 * (float)v12) < v31)
    {
      v33 = 1;
      if (v12 >= 3)
        v33 = (v12 & (v12 - 1)) != 0;
      v34 = v33 | (2 * v12);
      v35 = vcvtps_u32_f32(v31 / v32);
      if (v34 <= v35)
        v26 = v35;
      else
        v26 = v34;
      goto LABEL_63;
    }
LABEL_68:
    v36 = *v11;
    v37 = *(_QWORD **)(*v11 + 8 * v4);
    if (v37)
    {
      *v20 = *v37;
    }
    else
    {
      *v20 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v20;
      *(_QWORD *)(v36 + 8 * v4) = a1 + 112;
      if (!*v20)
      {
LABEL_77:
        ++*(_QWORD *)(a1 + 120);
        return;
      }
      v38 = *(_QWORD *)(*v20 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12)
          v38 %= v12;
      }
      else
      {
        v38 &= v12 - 1;
      }
      v37 = (_QWORD *)(*v11 + 8 * v38);
    }
    *v37 = v20;
    goto LABEL_77;
  }
  while (1)
  {
    v29 = v28[1];
    if (v29 == v8)
      break;
    if (v15.u32[0] > 1uLL)
    {
      if (v29 >= v12)
        v29 %= v12;
    }
    else
    {
      v29 &= v12 - 1;
    }
    if (v29 != v4)
      goto LABEL_56;
LABEL_55:
    v28 = (_QWORD *)*v28;
    if (!v28)
      goto LABEL_56;
  }
  if (v28[2] != a3 || v28[3] != a4)
    goto LABEL_55;
LABEL_78:
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

void sub_21659208C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[4];
  v1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::DVM::Submix::GetGeneratorIds(Phase::Controller::DVM::Submix *this@<X0>, char **a2@<X8>)
{
  _QWORD *v2;
  char *v4;
  _QWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 14);
  if (v2)
  {
    v4 = 0;
    v5 = a2 + 2;
    do
    {
      v6 = v2 + 2;
      if ((unint64_t)v4 >= *v5)
      {
        v7 = (v4 - *a2) >> 4;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
        v8 = *v5 - (_QWORD)*a2;
        v9 = v8 >> 3;
        if (v8 >> 3 <= (unint64_t)(v7 + 1))
          v9 = v7 + 1;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)v5, v10);
        else
          v11 = 0;
        v12 = &v11[16 * v7];
        *(_OWORD *)v12 = *v6;
        v14 = *a2;
        v13 = a2[1];
        v15 = v12;
        if (v13 != *a2)
        {
          do
          {
            *((_OWORD *)v15 - 1) = *((_OWORD *)v13 - 1);
            v15 -= 16;
            v13 -= 16;
          }
          while (v13 != v14);
          v13 = *a2;
        }
        v4 = v12 + 16;
        *a2 = v15;
        a2[1] = v12 + 16;
        a2[2] = &v11[16 * v10];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_OWORD *)v4 = *v6;
        v4 += 16;
      }
      a2[1] = v4;
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
}

void sub_2165921FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::DVM::Submix::GetAllValidDspNodes(Phase::Controller::DVM::Submix *this@<X0>, char **a2@<X8>)
{
  _QWORD *v2;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 14);
  if (v2)
  {
    v4 = 0;
    do
    {
      v5 = v2[4];
      v6 = (unint64_t)a2[2];
      if ((unint64_t)v4 >= v6)
      {
        v8 = *a2;
        v9 = (v4 - *a2) >> 3;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<Phase::Controller::DVM::Submix::ChannelStrip>::__throw_length_error[abi:ne180100]();
        v11 = v6 - (_QWORD)v8;
        if (v11 >> 2 > v10)
          v10 = v11 >> 2;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
        {
          if (v12 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v13 = (char *)operator new(8 * v12);
        }
        else
        {
          v13 = 0;
        }
        v14 = &v13[8 * v9];
        *(_QWORD *)v14 = v5;
        v7 = v14 + 8;
        if (v4 != v8)
        {
          do
          {
            v15 = *((_QWORD *)v4 - 1);
            v4 -= 8;
            *((_QWORD *)v14 - 1) = v15;
            v14 -= 8;
          }
          while (v4 != v8);
          v4 = *a2;
        }
        *a2 = v14;
        a2[1] = v7;
        a2[2] = &v13[8 * v12];
        if (v4)
          operator delete(v4);
      }
      else
      {
        *(_QWORD *)v4 = v5;
        v7 = v4 + 8;
      }
      a2[1] = v7;
      v2 = (_QWORD *)*v2;
      v4 = v7;
    }
    while (v2);
  }
}

void sub_21659233C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::DVM::Submix::GetAllValidVoiceNodes(Phase::Controller::DVM::Submix *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *i;
  uint64_t v5;
  char **v6;
  char **v7;
  void *__p;
  char *v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  for (i = (_QWORD *)*((_QWORD *)this + 14); i; i = (_QWORD *)*i)
  {
    v5 = i[4];
    if (!v5)
      std::terminate();
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v5 + 40))(&__p);
    std::vector<Phase::Controller::DVM::VoiceNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Phase::Controller::DVM::VoiceNode **>,std::__wrap_iter<Phase::Controller::DVM::VoiceNode **>>((uint64_t)a2, a2[1], (char *)__p, v9, (v9 - (_BYTE *)__p) >> 3);
    if (__p)
    {
      v9 = (char *)__p;
      operator delete(__p);
    }
  }
  v7 = (char **)*((_QWORD *)this + 9);
  v6 = (char **)*((_QWORD *)this + 10);
  while (v7 != v6)
  {
    std::vector<Phase::Controller::DVM::VoiceNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Phase::Controller::DVM::VoiceNode * const*>,std::__wrap_iter<Phase::Controller::DVM::VoiceNode * const*>>((uint64_t)a2, a2[1], *v7, v7[1], (v7[1] - *v7) >> 3);
    v7 += 9;
  }
}

void sub_216592418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **Phase::Controller::DVM::Submix::ChannelStrip::GetHeadNodes@<X0>(uint64_t **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;

  while (this[6] || this[7])
  {
    v3 = this[8];
    if (!v3)
      __assert_rtn("GetHeadNodes", "DVMSubmixNode.mm", 132, "nullptr != mChildSubmix.second");
    if (v3[7] != 1)
      __assert_rtn("GetHeadNodes", "DVMSubmixNode.mm", 133, "mChildSubmix.second->mSubmixType == PHASEMixerTypeSpatial");
    this = (uint64_t **)v3[9];
    if (v3[10] - (_QWORD)this != 72)
      __assert_rtn("GetHeadNodes", "DVMSubmixNode.mm", 134, "mChildSubmix.second->mChannelStrips.size() == 1");
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *this;
  if (*this != this[1])
  {
    v5 = *v4;
    if (!*v4)
      __assert_rtn("GetHeadNodes", "DVMSubmixNode.mm", 143, "mEffects.front() != nullptr");
    v6 = operator new(8uLL);
    *a2 = v6;
    *v6 = v5;
    this = (uint64_t **)(v6 + 1);
    a2[1] = this;
    a2[2] = this;
  }
  return this;
}

void Phase::Controller::DVM::Submix::~Submix(Phase::Controller::DVM::Submix *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_24D57C4D8;
  v1 = (void **)((char *)this + 72);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::~__hash_table((uint64_t)this + 96);
  v2 = v1;
  std::vector<Phase::Controller::DVM::Submix::ChannelStrip>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = off_24D57C4D8;
  v2 = (void **)((char *)this + 72);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::~__hash_table((uint64_t)this + 96);
  v3 = v2;
  std::vector<Phase::Controller::DVM::Submix::ChannelStrip>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x2199F9D70](this, 0x10E1C404699A41BLL);
}

_QWORD *std::vector<Phase::Controller::DVM::Submix::ChannelStrip>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Phase::Controller::DVM::Submix::ChannelStrip>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_216592690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Phase::Controller::DVM::Submix::ChannelStrip>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<Phase::Controller::DVM::Submix::ChannelStrip>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    std::vector<Phase::Controller::DVM::Submix::ChannelStrip>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::DVM::Submix::ChannelStrip>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void std::vector<Phase::Controller::DVM::Submix::ChannelStrip>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::DVM::Submix::ChannelStrip>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a2);
}

void Phase::Controller::DVM::Sampler::~Sampler(Phase::Controller::DVM::Sampler *this)
{
  void **v1;

  *(_QWORD *)this = &off_24D57C568;
  v1 = (void **)((char *)this + 72);
  std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_24D57C568;
  v1 = (void **)((char *)this + 72);
  std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::DVM::Generator::Reset(Phase::Controller::DVM::Generator *this)
{
  *((_DWORD *)this + 9) = 0;
  if (*((_BYTE *)this + 44))
    *((_BYTE *)this + 44) = 0;
  std::vector<Phase::VoiceDescriptor>::__clear[abi:ne180100]((uint64_t *)this + 9);
}

char *Phase::Controller::DVM::Generator::GetAllValidVoiceNodes@<X0>(char *this@<X0>, void **a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 9);
  v3 = (uint64_t *)*((_QWORD *)this + 10);
  if (v2 != v3)
  {
    v5 = (uint64_t)(a2 + 2);
    do
    {
      v6 = *v2;
      if (!*v2)
        std::terminate();
      v8 = (char *)a2[1];
      v7 = (unint64_t)a2[2];
      if ((unint64_t)v8 >= v7)
      {
        v10 = (v8 - (_BYTE *)*a2) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
        v11 = v7 - (_QWORD)*a2;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
        {
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5, v13);
          v6 = *v2;
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = v6;
        v9 = (uint64_t)(v15 + 8);
        v17 = (char *)*a2;
        v16 = (char *)a2[1];
        if (v16 != *a2)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = (char *)*a2;
        }
        *a2 = v15;
        a2[1] = (void *)v9;
        a2[2] = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v8 = v6;
        v9 = (uint64_t)(v8 + 8);
      }
      a2[1] = (void *)v9;
      this = std::vector<Phase::Controller::DVM::VoiceNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Phase::Controller::DVM::VoiceNode * const*>,std::__wrap_iter<Phase::Controller::DVM::VoiceNode * const*>>((uint64_t)a2, v9, (char *)v2[1], (char *)v2[2], (v2[2] - v2[1]) >> 3);
      v2 += 4;
    }
    while (v2 != v3);
  }
  return this;
}

void sub_216592938(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::DVM::Sampler::Configure(Phase::Controller::DVM::Sampler *this, const Phase::Controller::DspGeneratorNode *a2)
{
  uint64_t result;

  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 6);
  result = (*(uint64_t (**)(const Phase::Controller::DspGeneratorNode *))(*(_QWORD *)a2 + 16))(a2);
  if (!result)
    std::terminate();
  *((_BYTE *)this + 96) = *(_BYTE *)(result + 56);
  return result;
}

BOOL Phase::Controller::DVM::Sampler::IsOneShot(Phase::Controller::DVM::Sampler *this)
{
  return !*((_BYTE *)this + 96) && *((_QWORD *)this + 8) == 0;
}

void Phase::Controller::DVM::Generator::~Generator(Phase::Controller::DVM::Generator *this)
{
  void **v1;

  *(_QWORD *)this = &off_24D57C568;
  v1 = (void **)((char *)this + 72);
  std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_24D57C568;
  v1 = (void **)((char *)this + 72);
  std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::DVM::Generator::Configure(uint64_t this, const Phase::Controller::DspGeneratorNode *a2)
{
  *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 6);
  return this;
}

BOOL Phase::Controller::DVM::Generator::IsOneShot(Phase::Controller::DVM::Generator *this)
{
  return *((_QWORD *)this + 8) == 0;
}

void Phase::Controller::DVM::Procedure::~Procedure(Phase::Controller::DVM::Procedure *this)
{
  void **v1;

  *(_QWORD *)this = &off_24D57C568;
  v1 = (void **)((char *)this + 72);
  std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_24D57C568;
  v1 = (void **)((char *)this + 72);
  std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::DVM::Procedure::Configure(Phase::Controller::DVM::Procedure *this, const Phase::Controller::DspGeneratorNode *a2)
{
  uint64_t result;
  int v4;

  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 6);
  result = (*(uint64_t (**)(const Phase::Controller::DspGeneratorNode *))(*(_QWORD *)a2 + 24))(a2);
  if (!result || (v4 = *(unsigned __int8 *)(result + 56), *((_BYTE *)this + 96) = v4, !v4))
    std::terminate();
  return result;
}

uint64_t Phase::Controller::DVM::Procedure::IsOneShot(Phase::Controller::DVM::Procedure *this)
{
  if (!*((_QWORD *)this + 8))
    std::terminate();
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::DVM::Generator>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::DVM::Generator>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::DVM::Generator>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::DVM::Generator>>>>::__erase_unique<Phase::UniqueObjectId>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

char *std::vector<Phase::Controller::DVM::VoiceNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Phase::Controller::DVM::VoiceNode **>,std::__wrap_iter<Phase::Controller::DVM::VoiceNode **>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<Phase::Controller::DVM::VoiceNode *>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<Phase::Controller::DVM::VoiceNode *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_216592D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::SpatialModeler::ERClustering::GetTotalEnergySumOverBands(_QWORD *result)
{
  float v1;
  uint64_t v2;
  float *v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  float v7;

  v1 = 0.0;
  if (result && *result)
  {
    v2 = 0;
    v3 = (float *)(result + 2);
    v4 = result[1];
    do
    {
      v5 = v3;
      v6 = result[1];
      if (v4)
      {
        do
        {
          v7 = *v5++;
          v1 = v1 + (float)(v7 * v7);
          --v6;
        }
        while (v6);
      }
      ++v2;
      v3 += v4;
    }
    while (v2 != *result);
  }
  return result;
}

char *Phase::SpatialModeler::ERClustering::DetectEarlyReflections(Phase::SpatialModeler::EarlyReflectionDetector *a1, int a2, float a3)
{
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a1)
    return Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(a1, a2, 1, a3);
  v4 = **(NSObject ***)(Phase::Logger::GetInstancePtr(0) + 1184);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = 136315394;
    v6 = "EarlyReflectionClustering.cpp";
    v7 = 1024;
    v8 = 52;
    _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d     No detector available for source handle.\n", (uint8_t *)&v5, 0x12u);
  }
  return 0;
}

float Phase::SpatialModeler::ERClustering::ExtractPerceptualAttributes(uint64_t a1, _QWORD *a2)
{
  float result;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  float *v7;
  unint64_t v8;
  float *v9;
  float v10;
  uint64_t v11;
  float *v12;
  float v13;
  float v14;
  uint64_t v15;
  float *v16;
  float v17;
  float *v18;
  unint64_t v19;
  float v20;
  float v21;

  result = 1000.0;
  *(_QWORD *)a1 = 0xC35C0000447A0000;
  v3 = (_QWORD *)a2[13];
  if (v3)
  {
    v6 = *v3;
    v5 = v3[1];
    if (!*v3)
    {
      if (!v5)
        return result;
      v21 = 1.1755e-38;
      goto LABEL_16;
    }
    v7 = (float *)a2[7];
    v8 = a2[12];
    if (v8 >= 2)
    {
      v9 = v7 + 1;
      v10 = *v7;
      v11 = 4 * v8 - 4;
      v12 = v7 + 1;
      do
      {
        v13 = *v12++;
        v14 = v13;
        if (v13 < v10)
        {
          v10 = v14;
          v7 = v9;
        }
        v9 = v12;
        v11 -= 4;
      }
      while (v11);
    }
    result = *v7 / 0.01;
    *(float *)a1 = result;
    if (v5)
    {
      v15 = 0;
      v16 = (float *)(v3 + 2);
      v17 = 0.0;
      do
      {
        v18 = v16;
        v19 = v5;
        do
        {
          v20 = *v18++;
          v17 = v17 + (float)(v20 * v20);
          --v19;
        }
        while (v19);
        ++v15;
        v16 += v5;
        v17 = v17 / (float)v5;
      }
      while (v15 != v6);
      v21 = v17 + 1.1755e-38;
LABEL_16:
      result = log10f(v21) * 10.0;
      *(float *)(a1 + 4) = result;
    }
  }
  return result;
}

void Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(_QWORD *a1, double a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  unint64_t *v14;
  uint64_t *v15;
  float v16;
  float v17;
  float v18;
  int v19;
  int v20;
  uint64_t InstancePtr;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  double v26;
  double v27;
  double v28;
  double v29;
  unint64_t *v30;
  unint64_t v31;
  float v32;
  float *v33;
  float *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unsigned int v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  float v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  char v52;
  float v53;
  char v54;
  float v55;
  float v56;
  int v57;
  float v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  char v64;
  float v65;
  char v66;
  float v67;
  float v68;
  char *v69;
  char *v70;
  _DWORD *v71;
  int *v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  std::vector<unsigned int>::pointer end;
  char *v77;
  unsigned int *v78;
  int v79;
  int32x2_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::vector<unsigned int>::pointer begin;
  char *v84;
  float *v85;
  uint64_t v86;
  unsigned int v87;
  float *v88;
  float v89;
  float v90;
  unint64_t v91;
  float32x2_t *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int64_t v98;
  BOOL v99;
  uint64_t v100;
  char v101;
  char v102;
  Phase::Logger *v103;
  uint64_t v104;
  unint64_t v105;
  NSObject *v106;
  float *v107;
  double v108;
  double v109;
  uint64_t v110;
  unint64_t v111;
  NSObject *v112;
  double v113;
  double v114;
  float *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  uint64_t v119;
  unint64_t v120;
  std::vector<unsigned int>::pointer v121;
  std::vector<unsigned int>::pointer v122;
  int64_t v123;
  unint64_t v124;
  int64_t v125;
  unint64_t v126;
  char *v127;
  unsigned int *v128;
  unsigned int v129;
  uint64_t v130;
  std::vector<unsigned int>::pointer v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t *v135;
  _QWORD *v136;
  _OWORD *v137;
  uint64_t v138;
  int v139;
  std::vector<unsigned int>::pointer v140;
  _QWORD *v141;
  Phase::Logger *TotalEnergySumOverBands;
  float v143;
  float v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  float v148;
  float v149;
  float v150;
  double *v151;
  unint64_t v152;
  unint64_t *v153;
  NSObject *v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v158;
  _QWORD *v159;
  uint64_t *v160;
  float v161;
  _QWORD *v162;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  std::vector<unsigned int> v167;
  _QWORD v168[5];
  void *__p[2];
  __int128 v170;
  int v171;
  void *v172;
  _BYTE *v173;
  uint64_t v174;
  void *v175;
  char *v176;
  uint64_t v177;
  _BYTE v178[32];
  int v179;
  void *v180;
  _BYTE *v181;
  _QWORD v182[3];
  void *v183[3];
  char *v184;
  __int128 v185;
  void *v186;
  __int128 v187;
  int v188;
  std::vector<unsigned int> v189;
  uint8_t buf[48];
  uint64_t v191;
  uint64_t v192[6];
  uint64_t v193[5];
  uint64_t v194[6];
  __int128 v195;
  uint64_t v196;

  v196 = *MEMORY[0x24BDAC8D0];
  v10 = -1227133513 * ((uint64_t)(a1[1] - *a1) >> 3);
  if (v10 >= a4)
    v11 = a4;
  else
    v11 = v10;
  v158 = v11;
  std::vector<unsigned long long>::vector(v183, -1227133513 * ((uint64_t)(a1[1] - *a1) >> 3));
  std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::vector(v182, v10);
  v156 = a7;
  v165 = v10;
  std::vector<Phase::Vector<float,2ul>>::vector(&v180, v10);
  memset(v178, 0, sizeof(v178));
  v179 = 1065353216;
  if (v10)
  {
    v12 = 0;
    v13 = a2;
    v161 = v13;
    do
    {
      v14 = (unint64_t *)((char *)v183[0] + 8 * v12);
      *v14 = *(_QWORD *)(*a1 + 56 * v12);
      Phase::SpatialModeler::RayTracerState::GetSourceListenerResult((Phase::SpatialModeler::RayTracerState *)a5, v14, (uint64_t)buf);
      v15 = (uint64_t *)Phase::SpatialModeler::ERClustering::DetectEarlyReflections(*(Phase::SpatialModeler::EarlyReflectionDetector **)buf, *(_QWORD *)(a5 + 88), *(float *)(a5 + 464));
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v170 = 0;
      if (v15)
        std::vector<Phase::SpatialModeler::AudibleEarlyReflection>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::AudibleEarlyReflection*,Phase::SpatialModeler::AudibleEarlyReflection*>(__p, *v15, v15[1], 0x8E38E38E38E38E39 * ((v15[1] - *v15) >> 5));
      if (*(_QWORD *)&buf[16])
        v16 = *(float *)(*(_QWORD *)&buf[16] + 40);
      else
        v16 = 0.0;
      v17 = *(float *)(a5 + 464);
      v18 = *(float *)(a5 + 104);
      v19 = *(unsigned __int8 *)(a5 + 134);
      v20 = *(_DWORD *)(a5 + 8);
      InstancePtr = Phase::Logger::GetInstancePtr((Phase::Logger *)v15);
      if (v19)
        v22 = 0;
      else
        v22 = (int)(v16 * a2);
      v23 = v16 * v17;
      if (v16 <= 0.0)
        v23 = 1.0;
      v24 = log10f((float)((float)(1.0 / (float)(v23 * v23)) * v18) + 1.0e-15) * 10.0;
      v25 = expf((float)((float)(*(float *)(InstancePtr + 1204) * 10.0) / 10.0) * 0.11513);
      *(float *)&v26 = v17;
      *(float *)&v27 = v161;
      *(float *)&v28 = v24;
      LODWORD(v29) = v20;
      Phase::SpatialModeler::generateDirectionalMetadataER(__p, v26, v27, v28, v29, v25, a5 + 22776, v22, v182[0] + 208 * v12, a6);
      Phase::SpatialModeler::ERClustering::ExtractPerceptualAttributes((uint64_t)&v189, (_QWORD *)(v182[0] + 208 * v12));
      v30 = (unint64_t *)((char *)v183[0] + 8 * v12);
      v31 = *v30;
      *((float *)&v189.__begin_ + 1) = *((float *)&v189.__begin_ + 1) + (float)((float)((float)*v30 * 5.421e-20) * 0.1);
      v32 = *((float *)&v189.__begin_ + 1);
      v33 = (float *)((char *)v180 + 8 * v12);
      *v33 = *(float *)&v189.__begin_;
      v33[1] = v32;
      v34 = (float *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Vector<float,2ul>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Vector<float,2ul>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Vector<float,2ul>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Vector<float,2ul>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v178, v31, v30);
      v34[6] = *v33;
      v34[7] = v33[1];
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v35 = *(std::__shared_weak_count **)&buf[24];
      if (*(_QWORD *)&buf[24])
      {
        v36 = (unint64_t *)(*(_QWORD *)&buf[24] + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v39 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      ++v12;
    }
    while (v12 != v165);
  }
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  *(_OWORD *)__p = 0u;
  v170 = 0u;
  v171 = 1065353216;
  std::unordered_map<unsigned long long,Phase::Vector<float,2ul>>::unordered_map((uint64_t)v168, (uint64_t)v178);
  v41 = v158;
  Phase::SpatialModeler::getPerceptualCoordinatesFromNewDataAndPastAssignments(a5, v168, (uint64_t)&v175, (uint64_t)&v172, (float *)__p);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v168);
  v42 = (uint8_t *)(v156 + 40);
  if ((void **)(v156 + 40) != &v175)
    std::vector<Phase::Vector<float,2ul>>::__assign_with_size[abi:ne180100]<Phase::Vector<float,2ul>*,Phase::Vector<float,2ul>*>((_QWORD *)(v156 + 40), v175, v176, (v176 - (_BYTE *)v175) >> 3);
  if ((void **)(v156 + 88) != &v172)
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((char *)(v156 + 88), (char *)v172, (uint64_t)v173, (v173 - (_BYTE *)v172) >> 3);
  v166 = 0x3F8000003B03126FLL;
  v186 = 0;
  v187 = 0uLL;
  if (*(_QWORD *)(v156 + 48) == *(_QWORD *)(v156 + 40))
  {
    v188 = 1;
    std::vector<Phase::Vector<float,2ul>>::vector(&v184, v158);
    memset(buf, 0, 24);
    std::vector<unsigned int>::vector(&v189, (v181 - (_BYTE *)v180) >> 3);
    v57 = 0;
    v58 = 3.4028e38;
    do
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      std::__sample[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<Phase::Vector<float,2ul> const*>,std::__wrap_iter<Phase::Vector<float,2ul> const*>,std::back_insert_iterator<std::vector<Phase::Vector<float,2ul>>>,long,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(v180, (uint64_t)v181, (uint64_t)buf, v158, (uint64_t)&v188);
      Phase::SpatialModeler::kmeans<2ul>::AssignClusterIndices(&v189, (uint64_t *)&v180, (uint64_t *)buf);
      if (v181 == v180)
      {
        v68 = 0.0;
      }
      else
      {
        v59 = 0;
        v60 = (v181 - (_BYTE *)v180) >> 3;
        if (v60 <= 1)
          v61 = 1;
        else
          v61 = (v181 - (_BYTE *)v180) >> 3;
        v62 = 0.0;
        do
        {
          v63 = 0;
          v64 = 1;
          v65 = 0.0;
          do
          {
            v66 = v64;
            v67 = *((float *)v180 + 2 * v59 + v63) - *(float *)(*(_QWORD *)buf + 8 * v189.__begin_[v59] + 4 * v63);
            v65 = v65 + (float)(v67 * v67);
            v63 = 1;
            v64 = 0;
          }
          while ((v66 & 1) != 0);
          v62 = v62 + sqrtf(v65);
          ++v59;
        }
        while (v59 != v61);
        v68 = v62 / (float)v60;
      }
      if (v68 < v58)
      {
        std::vector<Phase::Vector<float,2ul>>::__assign_with_size[abi:ne180100]<Phase::Vector<float,2ul>*,Phase::Vector<float,2ul>*>(&v184, *(_DWORD **)buf, *(_DWORD **)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
        v58 = v68;
      }
      ++v57;
    }
    while (v57 != 5);
    if (v189.__begin_)
    {
      v189.__end_ = v189.__begin_;
      operator delete(v189.__begin_);
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    if (v186)
    {
      *(_QWORD *)&v187 = v186;
      operator delete(v186);
    }
    v69 = v184;
    v186 = v184;
    v187 = v185;
    v70 = (char *)v185;
  }
  else
  {
    LODWORD(v184) = 1;
    std::vector<Phase::Vector<float,2ul>>::resize(&v186, v158);
    memset(buf, 0, 24);
    std::vector<unsigned int>::vector(&v189, (v181 - (_BYTE *)v180) >> 3);
    v43 = *(_QWORD *)(v156 + 40);
    v44 = v158 - ((unint64_t)(*(_QWORD *)(v156 + 48) - v43) >> 3);
    if ((int)v44 < 1)
    {
      if ((_DWORD)v158)
      {
        v71 = (char *)v186 + 4;
        v72 = (int *)(v43 + 4);
        v73 = v158;
        do
        {
          *(v71 - 1) = *(v72 - 1);
          v74 = *v72;
          v72 += 2;
          *v71 = v74;
          v71 += 2;
          --v73;
        }
        while (v73);
      }
    }
    else
    {
      v45 = 0;
      v46 = 3.4028e38;
      do
      {
        if (buf != v42)
          std::vector<Phase::Vector<float,2ul>>::__assign_with_size[abi:ne180100]<Phase::Vector<float,2ul>*,Phase::Vector<float,2ul>*>(buf, *(_DWORD **)(v156 + 40), *(_DWORD **)(v156 + 48), (uint64_t)(*(_QWORD *)(v156 + 48) - *(_QWORD *)(v156 + 40)) >> 3);
        std::__sample[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<Phase::Vector<float,2ul> const*>,std::__wrap_iter<Phase::Vector<float,2ul> const*>,std::back_insert_iterator<std::vector<Phase::Vector<float,2ul>>>,long,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(v180, (uint64_t)v181, (uint64_t)buf, v44, (uint64_t)&v184);
        Phase::SpatialModeler::kmeans<2ul>::AssignClusterIndices(&v189, (uint64_t *)&v180, (uint64_t *)buf);
        if (v181 == v180)
        {
          v56 = 0.0;
        }
        else
        {
          v47 = 0;
          v48 = (v181 - (_BYTE *)v180) >> 3;
          if (v48 <= 1)
            v49 = 1;
          else
            v49 = (v181 - (_BYTE *)v180) >> 3;
          v50 = 0.0;
          do
          {
            v51 = 0;
            v52 = 1;
            v53 = 0.0;
            do
            {
              v54 = v52;
              v55 = *((float *)v180 + 2 * v47 + v51) - *(float *)(*(_QWORD *)buf + 8 * v189.__begin_[v47] + 4 * v51);
              v53 = v53 + (float)(v55 * v55);
              v51 = 1;
              v52 = 0;
            }
            while ((v54 & 1) != 0);
            v50 = v50 + sqrtf(v53);
            ++v47;
          }
          while (v47 != v49);
          v56 = v50 / (float)v48;
        }
        if (v56 < v46)
        {
          std::vector<Phase::Vector<float,2ul>>::__assign_with_size[abi:ne180100]<Phase::Vector<float,2ul>*,Phase::Vector<float,2ul>*>(&v186, *(_DWORD **)buf, *(_DWORD **)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
          v46 = v56;
        }
        ++v45;
      }
      while (v45 != 5);
    }
    if (v189.__begin_)
    {
      v189.__end_ = v189.__begin_;
      operator delete(v189.__begin_);
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    v69 = (char *)v186;
    v70 = (char *)v187;
    v41 = v158;
  }
  memset(&v189, 0, sizeof(v189));
  if (v70 != v69)
  {
    std::vector<Phase::Vector<float,2ul>>::__vallocate[abi:ne180100](&v189, (v70 - v69) >> 3);
    v75 = 0;
    end = v189.__end_;
    do
    {
      v77 = &v69[v75 * 4];
      v78 = &end[v75];
      *v78 = *(_DWORD *)&v69[v75 * 4];
      v78[1] = *(_DWORD *)&v69[v75 * 4 + 4];
      v75 += 2;
    }
    while (v77 + 8 != v70);
    v189.__end_ = &end[v75];
  }
  std::vector<unsigned int>::vector(&v167, (v181 - (_BYTE *)v180) >> 3);
  v79 = 0;
  while (2)
  {
    Phase::SpatialModeler::kmeans<2ul>::AssignClusterIndices(&v167, (uint64_t *)&v180, (uint64_t *)&v186);
    std::vector<Phase::Vector<float,2ul>>::resize(&v186, v158);
    bzero(v186, 8 * v41);
    memset(buf, 0, 24);
    if ((_DWORD)v158)
    {
      std::vector<Phase::Vector<float,2ul>>::__vallocate[abi:ne180100](buf, v158);
      bzero(*(void **)&buf[8], 8 * v41);
      v81 = *(unint64_t **)buf;
    }
    else
    {
      v81 = 0;
    }
    if (v181 != v180)
    {
      v82 = (v181 - (_BYTE *)v180) >> 3;
      begin = v167.__begin_;
      v84 = (char *)v186;
      if (v82 <= 1)
        v82 = 1;
      v85 = (float *)((char *)v180 + 4);
      do
      {
        v87 = *begin++;
        v86 = v87;
        v88 = (float *)&v84[8 * v87];
        v89 = v88[1];
        *v88 = *(v85 - 1) + *v88;
        v90 = *v85;
        v85 += 2;
        v88[1] = v90 + v89;
        ++v81[v86];
        --v82;
      }
      while (v82);
    }
    v91 = v158;
    if ((_DWORD)v158)
    {
      v92 = (float32x2_t *)v186;
      v93 = v81;
      do
      {
        v95 = *v93++;
        v94 = v95;
        if (v95 >= 2)
        {
          *(float *)v80.i32 = (float)v94;
          v80 = (int32x2_t)vdiv_f32(*v92, (float32x2_t)vdup_lane_s32(v80, 0));
          *v92 = (float32x2_t)v80;
        }
        ++v92;
        --v91;
      }
      while (v91);
    }
    else if (!v81)
    {
      goto LABEL_102;
    }
    *(_QWORD *)&buf[8] = v81;
    operator delete(v81);
LABEL_102:
    if (v189.__end_ != v189.__begin_)
    {
      v96 = 0;
      v97 = ((char *)v189.__end_ - (char *)v189.__begin_) >> 3;
      if (v97 <= 1)
        v98 = 1;
      else
        v98 = ((char *)v189.__end_ - (char *)v189.__begin_) >> 3;
      v99 = 1;
LABEL_107:
      v100 = 0;
      v101 = 1;
      while (vabds_f32(*(float *)&v189.__begin_[2 * v96 + v100], *((float *)v186 + 2 * v96 + v100)) <= *((float *)&v166 + v100))
      {
        v102 = v101;
        v101 = 0;
        v100 = 1;
        if ((v102 & 1) == 0)
        {
          v99 = ++v96 < v97;
          if (v96 != v98)
            goto LABEL_107;
          goto LABEL_114;
        }
      }
      if (v99)
      {
        std::vector<Phase::Vector<float,2ul>>::__assign_with_size[abi:ne180100]<Phase::Vector<float,2ul>*,Phase::Vector<float,2ul>*>(&v189, v186, (_DWORD *)v187, (uint64_t)(v187 - (_QWORD)v186) >> 3);
        if (++v79 != 100)
          continue;
      }
    }
    break;
  }
LABEL_114:
  if (&v186 != (void **)v42)
    std::vector<Phase::Vector<float,2ul>>::__assign_with_size[abi:ne180100]<Phase::Vector<float,2ul>*,Phase::Vector<float,2ul>*>((_QWORD *)(v156 + 40), v186, (_DWORD *)v187, (uint64_t)(v187 - (_QWORD)v186) >> 3);
  if (v189.__begin_)
  {
    v189.__end_ = v189.__begin_;
    operator delete(v189.__begin_);
  }
  v103 = (Phase::Logger *)v186;
  if (v186)
  {
    *(_QWORD *)&v187 = v186;
    operator delete(v186);
  }
  if (*(_QWORD *)(v156 + 48) != *(_QWORD *)(v156 + 40))
  {
    v104 = 0;
    v105 = 0;
    do
    {
      v106 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v103) + 1184);
      v103 = (Phase::Logger *)os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v103)
      {
        v107 = (float *)(*(_QWORD *)v42 + v104);
        v108 = *v107;
        v109 = v107[1];
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "EarlyReflectionClustering.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 218;
        *(_WORD *)&buf[18] = 2048;
        *(double *)&buf[20] = v108;
        *(_WORD *)&buf[28] = 2048;
        *(double *)&buf[30] = v109;
        _os_log_impl(&dword_2164CC000, v106, OS_LOG_TYPE_DEFAULT, "%25s:%-5d kmeans, centroids begin %f %f", buf, 0x26u);
      }
      ++v105;
      v104 += 8;
    }
    while (v105 < (uint64_t)(*(_QWORD *)(v156 + 48) - *(_QWORD *)(v156 + 40)) >> 3);
  }
  if (v181 != v180)
  {
    v110 = 0;
    v111 = 0;
    do
    {
      v112 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v103) + 1184);
      v103 = (Phase::Logger *)os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v103)
      {
        v113 = *(float *)((char *)v180 + v110);
        v114 = *(float *)((char *)v180 + v110 + 4);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "EarlyReflectionClustering.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 224;
        *(_WORD *)&buf[18] = 2048;
        *(double *)&buf[20] = v113;
        *(_WORD *)&buf[28] = 2048;
        *(double *)&buf[30] = v114;
        _os_log_impl(&dword_2164CC000, v112, OS_LOG_TYPE_DEFAULT, "%25s:%-5d kmeans, data begin %f %f", buf, 0x26u);
      }
      ++v111;
      v110 += 8;
    }
    while (v111 < (v181 - (_BYTE *)v180) >> 3);
  }
  v115 = (float *)v156;
  v155 = (_QWORD *)(v156 + 64);
  std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::resize((uint64_t **)(v156 + 64), v158);
  v116 = v165;
  if ((_DWORD)v158)
  {
    v117 = 0;
    do
    {
      v118 = 0;
      v119 = 0;
      memset(&v189, 0, sizeof(v189));
      v120 = v158;
      do
      {
        if (v117 == v167.__begin_[v119])
        {
          std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v115, *((_QWORD *)v183[0] + v119), (_QWORD *)v183[0] + v119)[3] = v117;
          v121 = v189.__end_;
          if (v189.__end_ >= v189.__end_cap_.__value_)
          {
            v122 = v189.__begin_;
            v123 = v189.__end_ - v189.__begin_;
            v124 = v123 + 1;
            if ((unint64_t)(v123 + 1) >> 62)
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            v125 = (char *)v189.__end_cap_.__value_ - (char *)v189.__begin_;
            if (((char *)v189.__end_cap_.__value_ - (char *)v189.__begin_) >> 1 > v124)
              v124 = v125 >> 1;
            if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFFCLL)
              v126 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v126 = v124;
            if (v126)
            {
              v127 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v189.__end_cap_, v126);
              v122 = v189.__begin_;
              v121 = v189.__end_;
            }
            else
            {
              v127 = 0;
            }
            v128 = (unsigned int *)&v127[4 * v123];
            *v128 = v119;
            v118 = v128 + 1;
            while (v121 != v122)
            {
              v129 = *--v121;
              *--v128 = v129;
            }
            v189.__begin_ = v128;
            v189.__end_ = v118;
            v189.__end_cap_.__value_ = (unsigned int *)&v127[4 * v126];
            if (v122)
              operator delete(v122);
          }
          else
          {
            *v189.__end_ = v119;
            v118 = v121 + 1;
          }
          v189.__end_ = v118;
          v116 = v165;
        }
        ++v119;
      }
      while (v119 != v116);
      if (v118 != v189.__begin_)
      {
        *(_QWORD *)buf = &v180;
        std::__introsort<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>,false>(v118, v118, (uint64_t)v189.__begin_, v189.__begin_, (uint64_t **)buf, 126 - 2 * __clz(v118 - v189.__begin_), 1);
        v130 = *v155 + 208 * v117;
        v131 = v189.__end_;
        if (v189.__end_ == v189.__begin_)
        {
          v140 = v189.__end_;
        }
        else
        {
          v132 = 0;
          v133 = *v155 + 208 * v117;
          v162 = (_QWORD *)(v133 + 48);
          v164 = (uint64_t *)(v133 + 8);
          v159 = (_QWORD *)(v133 + 96);
          v160 = (uint64_t *)(v133 + 56);
          v134 = (uint64_t *)(v133 + 104);
          v135 = (uint64_t *)(v133 + 144);
          v136 = (_QWORD *)(v133 + 184);
          v137 = (_OWORD *)(v133 + 192);
          v131 = v189.__begin_;
          do
          {
            v138 = v182[0] + 208 * v131[v132++];
            Phase::SpatialModeler::MorphDirectionalMetadata(v138, v130, (uint64_t)buf, 1.0 / (float)v132, 1.0 - (float)(1.0 / (float)v132));
            v139 = *(_DWORD *)buf;
            *(_BYTE *)(v130 + 4) = buf[4];
            *(_DWORD *)v130 = v139;
            std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](v164, (uint64_t *)&buf[8]);
            *v162 = v191;
            std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100](v160, v192);
            *v159 = v192[5];
            std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100](v134, v193);
            std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100](v135, v194);
            *v136 = v194[5];
            *v137 = v195;
            std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v194);
            std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v193);
            std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v192);
            std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&buf[8]);
            v131 = v189.__begin_;
            v140 = v189.__end_;
          }
          while (v132 < v189.__end_ - v189.__begin_);
          v115 = (float *)v156;
          v120 = v158;
        }
        v141 = *(_QWORD **)(v130 + 104);
        TotalEnergySumOverBands = (Phase::Logger *)Phase::SpatialModeler::ERClustering::GetTotalEnergySumOverBands(v141);
        v144 = v143;
        if (v141)
          v145 = v141[1];
        else
          v145 = 0;
        if ((double)v145 * 0.000000001 >= v143)
        {
          if (v140 != v131)
          {
            v152 = 0;
            do
            {
              v153 = (unint64_t *)((char *)v183[0] + 8 * v131[v152]);
              TotalEnergySumOverBands = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v115, *v153, v153);
              *((_QWORD *)TotalEnergySumOverBands + 4) = 0;
              ++v152;
              v131 = v189.__begin_;
            }
            while (v152 < v189.__end_ - v189.__begin_);
          }
          v154 = **(NSObject ***)(Phase::Logger::GetInstancePtr(TotalEnergySumOverBands) + 1184);
          if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "EarlyReflectionClustering.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 298;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v117;
            *(_WORD *)&buf[24] = 2048;
            *(double *)&buf[26] = v144;
            _os_log_impl(&dword_2164CC000, v154, OS_LOG_TYPE_ERROR, "%25s:%-5d Early Reflection Cluster (%i) has no energy (%f).", buf, 0x22u);
          }
        }
        else if (v140 != v131)
        {
          v146 = 0;
          do
          {
            v147 = v131[v146];
            Phase::SpatialModeler::ERClustering::GetTotalEnergySumOverBands(*(_QWORD **)(v182[0]
                                                                                       + 208 * v147
                                                                                       + 104));
            v149 = v148;
            v150 = *(float *)(a5 + 144);
            v151 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v115, *((_QWORD *)v183[0] + v147), (_QWORD *)v183[0] + v147);
            v151[4] = fminf(fmaxf(log10f((float)(v149 / v144) + 1.1755e-38) * 10.0, -3.4028e38), v150);
            ++v146;
            v131 = v189.__begin_;
          }
          while (v146 < v189.__end_ - v189.__begin_);
        }
        v118 = v189.__begin_;
        v116 = v165;
      }
      if (v118)
      {
        v189.__end_ = v118;
        operator delete(v118);
        v116 = v165;
      }
      ++v117;
    }
    while (v117 != v120);
  }
  if (v167.__begin_)
  {
    v167.__end_ = v167.__begin_;
    operator delete(v167.__begin_);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)__p);
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
  if (v175)
  {
    v176 = (char *)v175;
    operator delete(v175);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v178);
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  *(_QWORD *)buf = v182;
  std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v183[0])
  {
    v183[1] = v183[0];
    operator delete(v183[0]);
  }
}

void sub_216594008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t a64;
  void *a66;
  uint64_t a67;
  void *v68;

  v68 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v68;
    operator delete(v68);
  }
  if (a63)
  {
    a64 = (uint64_t)a63;
    operator delete(a63);
  }
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&a37);
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&a49);
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  a49 = (uint64_t)&a57;
  std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  if (a60)
  {
    a61 = (uint64_t)a60;
    operator delete(a60);
  }
  _Unwind_Resume(a1);
}

void std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::resize(uint64_t **a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0x4EC4EC4EC4EC4EC5 * (((char *)v5 - (char *)*a1) >> 4);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v30 = &v4[26 * a2];
      while (v5 != v30)
      {
        v5 -= 26;
        std::allocator<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v5);
      }
      a1[1] = v30;
    }
  }
  else
  {
    v8 = a1[2];
    if (0x4EC4EC4EC4EC4EC5 * (((char *)v8 - (char *)v5) >> 4) >= v7)
    {
      v31 = &v5[26 * v7];
      do
      {
        *(_DWORD *)v5 = 3;
        *((_BYTE *)v5 + 4) = 1;
        v5[1] = 0;
        *((_DWORD *)v5 + 51) = 0;
        v5[6] = 0;
        v5[7] = 0;
        v5[5] = 0;
        v5[12] = 0;
        v5[13] = 0;
        v5[11] = 0;
        v5[17] = 0;
        v5[18] = 0;
        v5[23] = 0;
        v5[24] = 0;
        v5[22] = 0;
        *((_WORD *)v5 + 100) = 0;
        v5 += 26;
      }
      while (v5 != v31);
      a1[1] = v31;
    }
    else
    {
      if (a2 > 0x13B13B13B13B13BLL)
        std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__throw_length_error[abi:ne180100]();
      v9 = 0x4EC4EC4EC4EC4EC5 * (((char *)v8 - (char *)v4) >> 4);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x9D89D89D89D89DLL)
        v11 = 0x13B13B13B13B13BLL;
      else
        v11 = v10;
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::DirectionalMetadataOutput<float>>>(v11);
      v14 = &v12[208 * v6];
      v15 = &v12[208 * a2];
      v16 = v14;
      do
      {
        *(_DWORD *)v16 = 3;
        v16[4] = 1;
        *((_QWORD *)v16 + 1) = 0;
        *((_DWORD *)v16 + 51) = 0;
        *((_QWORD *)v16 + 6) = 0;
        *((_QWORD *)v16 + 7) = 0;
        *((_QWORD *)v16 + 5) = 0;
        *((_QWORD *)v16 + 12) = 0;
        *((_QWORD *)v16 + 13) = 0;
        *((_QWORD *)v16 + 11) = 0;
        *((_QWORD *)v16 + 17) = 0;
        *((_QWORD *)v16 + 18) = 0;
        *((_QWORD *)v16 + 23) = 0;
        *((_QWORD *)v16 + 24) = 0;
        *((_QWORD *)v16 + 22) = 0;
        *((_WORD *)v16 + 100) = 0;
        v16 += 208;
      }
      while (v16 != v15);
      v17 = &v12[208 * v13];
      v19 = *a1;
      v18 = a1[1];
      if (v18 == *a1)
      {
        *a1 = (uint64_t *)v14;
        a1[1] = (uint64_t *)v15;
        a1[2] = (uint64_t *)v17;
      }
      else
      {
        v20 = 0;
        do
        {
          v21 = &v14[v20 * 8];
          v22 = &v18[v20];
          *((_QWORD *)v21 - 26) = v18[v20 - 26];
          v23 = v18[v20 - 25];
          v18[v20 - 25] = 0;
          *((_QWORD *)v21 - 25) = v23;
          std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v14[v20 * 8 - 192], (uint64_t)&v18[v20 - 24]);
          v24 = v18[v20 - 20];
          v25 = v18[v20 - 19];
          *(v22 - 19) = 0;
          *((_QWORD *)v21 - 20) = v24;
          *((_QWORD *)v21 - 19) = v25;
          std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v14[v20 * 8 - 144], (uint64_t)&v18[v20 - 18]);
          v26 = v18[v20 - 14];
          v27 = v18[v20 - 13];
          *(v22 - 13) = 0;
          *((_QWORD *)v21 - 14) = v26;
          *((_QWORD *)v21 - 13) = v27;
          std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v14[v20 * 8 - 96], (uint64_t)&v18[v20 - 12]);
          v28 = v18[v20 - 8];
          *(v22 - 8) = 0;
          *((_QWORD *)v21 - 8) = v28;
          std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v14[v20 * 8 - 56], (uint64_t)&v18[v20 - 7]);
          *((_QWORD *)v21 - 3) = v18[v20 - 3];
          *((_OWORD *)v21 - 1) = *(_OWORD *)&v18[v20 - 2];
          v20 -= 26;
        }
        while (&v18[v20] != v19);
        v18 = *a1;
        v29 = a1[1];
        *a1 = (uint64_t *)&v14[v20 * 8];
        a1[1] = (uint64_t *)v15;
        a1[2] = (uint64_t *)v17;
        while (v29 != v18)
        {
          v29 -= 26;
          std::allocator<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v29);
        }
      }
      if (v18)
        operator delete(v18);
    }
  }
}

void Phase::SpatialModeler::ERClustering::AssignSourcesToExistingRenderers(unsigned int a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  float v29;
  float v30;
  float v31;
  int v32;
  int v33;
  uint64_t InstancePtr;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  __int128 v44;
  float v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  float *v56;
  Phase::SpatialModeler::ClusterPreProcessData *v57;
  Phase::Logger *v58;
  float v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  _QWORD *v85;
  _OWORD *v86;
  uint64_t v87;
  int v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  float v92;
  float v93;
  unint64_t v94;
  unint64_t v95;
  float v96;
  float v97;
  double *v98;
  unint64_t v99;
  NSObject *v100;
  const char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v107;
  unsigned int v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  _QWORD *v112;
  float v113;
  uint64_t *v114;
  _QWORD *v116;
  uint64_t *v118;
  void *v119;
  _BYTE *v120;
  uint64_t v121;
  _QWORD v122[5];
  void *__p[2];
  void *v124[2];
  __int128 v125;
  _OWORD v126[2];
  int v127;
  void *v128;
  char *v129;
  char *v130;
  _BYTE v131[32];
  int v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  char *v136;
  char *v137;
  unint64_t v138[2];
  __int128 v139;
  int v140;
  _BYTE buf[38];
  uint64_t v142;
  uint64_t v143[6];
  uint64_t v144[5];
  uint64_t v145[6];
  __int128 v146;
  uint64_t v147;

  v147 = *MEMORY[0x24BDAC8D0];
  v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 18936) - *(_QWORD *)(a3 + 18928)) >> 3);
  if (v9 >= a1)
    v10 = a1;
  else
    v10 = v9;
  v109 = v10;
  v11 = -1227133513 * ((uint64_t)(*(_QWORD *)(a3 + 18936) - *(_QWORD *)(a3 + 18928)) >> 3);
  std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::vector(&v133, v11);
  v128 = 0;
  v129 = 0;
  v130 = 0;
  if (v11)
  {
    v128 = operator new(40 * v11);
    v130 = (char *)v128 + 40 * v11;
    v12 = 40 * ((40 * v11 - 40) / 0x28) + 40;
    bzero(v128, v12);
    v129 = (char *)v128 + v12;
  }
  v108 = a1;
  memset(v131, 0, sizeof(v131));
  v132 = 1065353216;
  v13 = *(_QWORD *)(a3 + 18936) - *(_QWORD *)(a3 + 18928);
  if (v13)
  {
    v14 = 0;
    v15 = v13 / 56;
    v16 = a6;
    v113 = v16;
    if (v15 <= 1)
      v15 = 1;
    v110 = v15;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a3 + 18928) + 56 * v14);
      v138[0] = v17;
      v18 = a2[18];
      v19 = a2[13];
      v20 = 0;
      if (v18)
      {
        v21 = 0;
        v22 = *(_QWORD *)(a3 + 22576);
        v23 = v19 + 160;
        do
        {
          if (Phase::SpatialModeler::GetSoundSourceHash(*(_QWORD *)(v23 - 16), v22, v23) == v17)
            v20 = v21;
          ++v21;
          v23 += 304;
        }
        while (v18 != v21);
      }
      v24 = *(_QWORD *)(v19 + 304 * v20 + 288);
      v25 = a2[12];
      if (v25)
        v26 = v24 >= v25;
      else
        v26 = 1;
      if (v26)
        v27 = 0;
      else
        v27 = *(_QWORD *)(a2[7] + 336 * v24);
      Phase::SpatialModeler::RayTracerState::GetSourceListenerResult((Phase::SpatialModeler::RayTracerState *)a3, v138, (uint64_t)buf);
      v28 = (uint64_t *)Phase::SpatialModeler::ERClustering::DetectEarlyReflections(*(Phase::SpatialModeler::EarlyReflectionDetector **)buf, *(_QWORD *)(a3 + 88), *(float *)(a3 + 464));
      __p[0] = 0;
      __p[1] = 0;
      v124[0] = 0;
      if (v28)
        std::vector<Phase::SpatialModeler::AudibleEarlyReflection>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::AudibleEarlyReflection*,Phase::SpatialModeler::AudibleEarlyReflection*>(__p, *v28, v28[1], 0x8E38E38E38E38E39 * ((v28[1] - *v28) >> 5));
      if (*(_QWORD *)&buf[16])
        v29 = *(float *)(*(_QWORD *)&buf[16] + 40);
      else
        v29 = 0.0;
      v30 = *(float *)(a3 + 464);
      v31 = *(float *)(a3 + 104);
      v32 = *(unsigned __int8 *)(a3 + 134);
      v33 = *(_DWORD *)(a3 + 8);
      InstancePtr = Phase::Logger::GetInstancePtr((Phase::Logger *)v28);
      if (v32)
        v35 = 0;
      else
        v35 = (int)(v29 * a6);
      v36 = v29 * v30;
      if (v29 <= 0.0)
        v36 = 1.0;
      v37 = log10f((float)((float)(1.0 / (float)(v36 * v36)) * v31) + 1.0e-15) * 10.0;
      v38 = expf((float)((float)(*(float *)(InstancePtr + 1204) * 10.0) / 10.0) * 0.11513);
      *(float *)&v39 = v30;
      *(float *)&v40 = v113;
      *(float *)&v41 = v37;
      LODWORD(v42) = v33;
      Phase::SpatialModeler::generateDirectionalMetadataER(__p, v39, v40, v41, v42, v38, a3 + 22776, v35, v133 + 208 * v14, a4);
      Phase::SpatialModeler::ERClustering::ExtractPerceptualAttributes((uint64_t)&v135, (_QWORD *)(v133 + 208 * v14));
      v43 = *(_QWORD *)(a3 + 18928) + 56 * v14;
      *(_QWORD *)&v44 = *(_QWORD *)(v43 + 24);
      DWORD2(v44) = *(_DWORD *)(v43 + 32);
      HIDWORD(v44) = (_DWORD)v135;
      *((float *)&v135 + 1) = (float)((float)((float)v17 * 5.421e-20) * 0.1) + *((float *)&v135 + 1);
      v45 = *((float *)&v135 + 1);
      v46 = (char *)v128;
      v47 = (char *)v128 + 40 * v14;
      *(_QWORD *)v47 = v17;
      *(_OWORD *)(v47 + 8) = v44;
      *((float *)v47 + 6) = v45;
      *((_QWORD *)v47 + 4) = v27;
      v48 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Vector<float,2ul>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Vector<float,2ul>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Vector<float,2ul>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Vector<float,2ul>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v131, v17, v138);
      v49 = &v46[40 * v14];
      *((_DWORD *)v48 + 6) = *((_DWORD *)v49 + 5);
      *((_DWORD *)v48 + 7) = *((_DWORD *)v49 + 6);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v50 = *(std::__shared_weak_count **)&buf[24];
      if (*(_QWORD *)&buf[24])
      {
        v51 = (unint64_t *)(*(_QWORD *)&buf[24] + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v54 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      ++v14;
    }
    while (v14 != v110);
  }
  memset(v126, 0, sizeof(v126));
  *(_OWORD *)v124 = 0u;
  v125 = 0u;
  *(_OWORD *)__p = 0u;
  v127 = 1065353216;
  std::unordered_map<unsigned long long,Phase::Vector<float,2ul>>::unordered_map((uint64_t)v122, (uint64_t)v131);
  v56 = (float *)a5;
  Phase::SpatialModeler::getPerceptualCoordinatesFromNewDataAndPastAssignments(a3, v122, (uint64_t)__p, (uint64_t)&v124[1], (float *)v126);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v122);
  Phase::SpatialModeler::getAttackQueryAssignments((uint64_t *)&v128, (const Phase::SpatialModeler::SourcePreProcessData *)__p, v57);
  if ((void **)(a5 + 40) != __p)
    std::vector<Phase::Vector<float,2ul>>::__assign_with_size[abi:ne180100]<Phase::Vector<float,2ul>*,Phase::Vector<float,2ul>*>((_QWORD *)(a5 + 40), (_DWORD *)__p[0], (_DWORD *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if ((void **)(a5 + 88) != &v124[1])
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((char *)(a5 + 88), (char *)v124[1], v125, (uint64_t)(v125 - (unint64_t)v124[1]) >> 3);
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v58 = (Phase::Logger *)Phase::SpatialModeler::AssignSourcesToRenderers(v108, (uint64_t *)&v128, __p, &v119);
  v59 = *(float *)(a3 + 144);
  *(_OWORD *)v138 = 0u;
  v139 = 0u;
  v140 = 1065353216;
  v60 = (unint64_t *)v119;
  if (v119 == v120)
  {
    v62 = 0;
    v61 = v109;
  }
  else
  {
    v61 = v109;
    do
    {
      v58 = (Phase::Logger *)std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v138, v60, v60);
      ++v60;
    }
    while (v60 != (unint64_t *)v120);
    v62 = *((_QWORD *)&v139 + 1);
  }
  if (v62 >= v61)
    v63 = v61;
  else
    v63 = v62;
  if (!v63)
  {
    v100 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v58) + 1184);
    if (!os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
      goto LABEL_109;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "EarlyReflectionClustering.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 411;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = *((_QWORD *)&v139 + 1);
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = v61;
    v101 = "%25s:%-5d GenerateClusterMetadataFromResults - number of unique assigned clusters is %zu, inMaxExpectedNumClu"
           "sters %zu, nothing to do, returning";
    goto LABEL_108;
  }
  v64 = v133;
  v65 = v134;
  v66 = 0x4EC4EC4EC4EC4EC5 * ((v134 - v133) >> 4);
  if (v66 == ((char *)v60 - (_BYTE *)v119) >> 3)
  {
    v105 = (_QWORD *)(a5 + 64);
    std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::resize((uint64_t **)(a5 + 64), v63);
    v67 = 0;
    v102 = v65;
    v103 = v66;
    v107 = v63;
    v104 = v64;
    while (1)
    {
      v135 = 0;
      v136 = 0;
      v137 = 0;
      if (v65 != v64)
        break;
LABEL_102:
      if (++v67 == v63)
        goto LABEL_109;
    }
    v68 = 0;
    v69 = 0;
    v70 = 0;
    do
    {
      v71 = *((_QWORD *)v128 + 5 * v69);
      *(_QWORD *)buf = v71;
      if (*((_QWORD *)v119 + v69) == v67)
      {
        std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v56, v71, buf)[3] = v67;
        v72 = v136;
        if (v136 >= v137)
        {
          v73 = (char *)v135;
          v74 = (v136 - (_BYTE *)v135) >> 2;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 62)
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          v76 = v137 - (_BYTE *)v135;
          if ((v137 - (_BYTE *)v135) >> 1 > v75)
            v75 = v76 >> 1;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
            v77 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          if (v77)
          {
            v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v137, v77);
            v73 = (char *)v135;
            v72 = v136;
          }
          else
          {
            v78 = 0;
          }
          v79 = &v78[4 * v74];
          *(_DWORD *)v79 = v70;
          v68 = v79 + 4;
          while (v72 != v73)
          {
            v80 = *((_DWORD *)v72 - 1);
            v72 -= 4;
            *((_DWORD *)v79 - 1) = v80;
            v79 -= 4;
          }
          v135 = v79;
          v136 = v68;
          v137 = &v78[4 * v77];
          if (v73)
            operator delete(v73);
        }
        else
        {
          *(_DWORD *)v136 = v70;
          v68 = v72 + 4;
        }
        v136 = v68;
      }
      v69 = ++v70;
    }
    while (v66 > v70);
    if (v68 == v135)
    {
      v90 = v65;
      goto LABEL_100;
    }
    *(_QWORD *)buf = &v128;
    std::__introsort<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>,false>(v68, (unsigned int *)v68, (uint64_t)v135, (unsigned int *)v135, (uint64_t **)buf, 126 - 2 * __clz((v68 - (_BYTE *)v135) >> 2), 1);
    v81 = *v105 + 208 * v67;
    v68 = v136;
    if (v136 == v135)
    {
      v90 = v65;
      v89 = v136;
    }
    else
    {
      v82 = 0;
      v83 = *v105 + 208 * v67;
      v118 = (uint64_t *)(v83 + 8);
      v116 = (_QWORD *)(v83 + 48);
      v114 = (uint64_t *)(v83 + 56);
      v112 = (_QWORD *)(v83 + 96);
      v111 = (uint64_t *)(v83 + 104);
      v84 = (uint64_t *)(v83 + 144);
      v85 = (_QWORD *)(v83 + 184);
      v86 = (_OWORD *)(v83 + 192);
      v68 = (char *)v135;
      do
      {
        v87 = v133 + 208 * *(unsigned int *)&v68[4 * v82++];
        Phase::SpatialModeler::MorphDirectionalMetadata(v87, v81, (uint64_t)buf, 1.0 / (float)v82, 1.0 - (float)(1.0 / (float)v82));
        v88 = *(_DWORD *)buf;
        *(_BYTE *)(v81 + 4) = buf[4];
        *(_DWORD *)v81 = v88;
        std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](v118, (uint64_t *)&buf[8]);
        *v116 = v142;
        std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100](v114, v143);
        *v112 = v143[5];
        std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100](v111, v144);
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100](v84, v145);
        *v85 = v145[5];
        *v86 = v146;
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v145);
        std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v144);
        std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v143);
        std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&buf[8]);
        v68 = (char *)v135;
        v89 = v136;
      }
      while (v82 < (v136 - (_BYTE *)v135) >> 2);
      v56 = (float *)a5;
      v90 = v102;
      v66 = v103;
    }
    v91 = *(_QWORD **)(v81 + 104);
    Phase::SpatialModeler::ERClustering::GetTotalEnergySumOverBands(v91);
    v93 = v92;
    if (v91)
      v94 = v91[1];
    else
      v94 = 0;
    if ((double)v94 * 0.000000001 >= v92)
    {
      if (v89 != v68)
      {
        v99 = 0;
        v64 = v104;
        do
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)buf = *((_QWORD *)v128 + 5 * *(unsigned int *)&v68[4 * v99]);
          std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v56, *(unint64_t *)buf, buf)[4] = 0;
          ++v99;
          v68 = (char *)v135;
        }
        while (v99 < (v136 - (_BYTE *)v135) >> 2);
LABEL_100:
        v65 = v90;
        v63 = v107;
        if (v68)
        {
          v136 = v68;
          operator delete(v68);
        }
        goto LABEL_102;
      }
    }
    else if (v89 != v68)
    {
      v95 = 0;
      v64 = v104;
      do
      {
        Phase::SpatialModeler::ERClustering::GetTotalEnergySumOverBands(*(_QWORD **)(v133
                                                                                   + 208
                                                                                   * *(unsigned int *)&v68[4 * v95]
                                                                                   + 104));
        v97 = v96;
        *(_QWORD *)buf = 0;
        *(_QWORD *)buf = *((_QWORD *)v128 + 5 * *(unsigned int *)&v68[4 * v95]);
        v98 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v56, *(unint64_t *)buf, buf);
        v98[4] = fminf(fmaxf(log10f((float)(v97 / v93) + 1.1755e-38) * 10.0, -3.4028e38), v59);
        ++v95;
        v68 = (char *)v135;
      }
      while (v95 < (v136 - (_BYTE *)v135) >> 2);
      goto LABEL_100;
    }
    v64 = v104;
    goto LABEL_100;
  }
  v100 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v58) + 1184);
  if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "EarlyReflectionClustering.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 420;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = (v120 - (_BYTE *)v119) >> 3;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = v66;
    v101 = "%25s:%-5d GenerateClusterMetadataFromResults - number , inClusterIndices.size() [%zu] != numSources [%zu], returning";
LABEL_108:
    _os_log_impl(&dword_2164CC000, v100, OS_LOG_TYPE_ERROR, v101, buf, 0x26u);
  }
LABEL_109:
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v138);
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v126);
  if (v124[1])
  {
    *(void **)&v125 = v124[1];
    operator delete(v124[1]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v131);
  if (v128)
  {
    v129 = (char *)v128;
    operator delete(v128);
  }
  *(_QWORD *)buf = &v133;
  std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_216595050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t a69;

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&a63);
  if (__p)
    operator delete(__p);
  Phase::SpatialModeler::ClusterPreProcessData::~ClusterPreProcessData((Phase::SpatialModeler::ClusterPreProcessData *)&a37);
  Phase::SpatialModeler::SourcePreProcessData::~SourcePreProcessData((Phase::SpatialModeler::SourcePreProcessData *)&a49);
  a69 = (uint64_t)&a57;
  std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::ClusterPreProcessData::~ClusterPreProcessData(Phase::SpatialModeler::ClusterPreProcessData *this)
{
  void *v2;
  void *v3;

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 48);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void Phase::SpatialModeler::SourcePreProcessData::~SourcePreProcessData(Phase::SpatialModeler::SourcePreProcessData *this)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 24);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

_QWORD *std::vector<unsigned long long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_216595208(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::DirectionalMetadataOutput<float>>>(a2);
    *a1 = v4;
    a1[1] = v4;
    a1[2] = &v4[208 * v5];
    v6 = &v4[208 * a2];
    do
    {
      *(_DWORD *)v4 = 3;
      v4[4] = 1;
      *((_QWORD *)v4 + 1) = 0;
      *((_DWORD *)v4 + 51) = 0;
      *((_QWORD *)v4 + 6) = 0;
      *((_QWORD *)v4 + 7) = 0;
      *((_QWORD *)v4 + 5) = 0;
      *((_QWORD *)v4 + 12) = 0;
      *((_QWORD *)v4 + 13) = 0;
      *((_QWORD *)v4 + 11) = 0;
      *((_QWORD *)v4 + 17) = 0;
      *((_QWORD *)v4 + 18) = 0;
      *((_QWORD *)v4 + 23) = 0;
      *((_QWORD *)v4 + 24) = 0;
      *((_QWORD *)v4 + 22) = 0;
      *((_WORD *)v4 + 100) = 0;
      v4 += 208;
    }
    while (v4 != v6);
    a1[1] = v6;
  }
  return a1;
}

void sub_2165952C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::DirectionalMetadataOutput<float>>>(unint64_t a1)
{
  if (a1 >= 0x13B13B13B13B13CLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(208 * a1);
}

void std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 26;
        std::allocator<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::allocator<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::destroy[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](a2 + 18);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](a2 + 13);
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](a2 + 7);
  return std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](a2 + 1);
}

_QWORD *std::vector<Phase::Vector<float,2ul>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Phase::Vector<float,2ul>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_21659544C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Phase::Vector<float,2ul>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<Phase::SpatialModeler::AudibleEarlyReflection>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::AudibleEarlyReflection*,Phase::SpatialModeler::AudibleEarlyReflection*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<Phase::SpatialModeler::AudibleEarlyReflection>::__vallocate[abi:ne180100](a1, a4);
    std::vector<Phase::SpatialModeler::AudibleEarlyReflection>::__construct_at_end<Phase::SpatialModeler::AudibleEarlyReflection*,Phase::SpatialModeler::AudibleEarlyReflection*>((uint64_t)a1, a2, a3);
  }
}

void sub_2165954F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Phase::SpatialModeler::AudibleEarlyReflection>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xE38E38E38E38E4)
    std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::AudibleEarlyReflection>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[288 * v4];
  return result;
}

void std::vector<Phase::SpatialModeler::AudibleEarlyReflection>::__construct_at_end<Phase::SpatialModeler::AudibleEarlyReflection*,Phase::SpatialModeler::AudibleEarlyReflection*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::allocator<Phase::SpatialModeler::AudibleEarlyReflection>::construct[abi:ne180100]<Phase::SpatialModeler::AudibleEarlyReflection,Phase::SpatialModeler::AudibleEarlyReflection&>(a1 + 16, v4 + v7, a2 + v7);
      v7 += 288;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_2165955D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::AudibleEarlyReflection>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E4)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(288 * a2);
}

float std::allocator<Phase::SpatialModeler::AudibleEarlyReflection>::construct[abi:ne180100]<Phase::SpatialModeler::AudibleEarlyReflection,Phase::SpatialModeler::AudibleEarlyReflection&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  float result;

  v3 = 0;
  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v4;
  v5 = *(_OWORD *)(a3 + 32);
  v6 = *(_OWORD *)(a3 + 48);
  v7 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)(a2 + 48) = v6;
  v8 = *(_OWORD *)(a3 + 96);
  v9 = *(_OWORD *)(a3 + 112);
  v10 = *(_OWORD *)(a3 + 128);
  *(_DWORD *)(a2 + 144) = *(_DWORD *)(a3 + 144);
  *(_OWORD *)(a2 + 112) = v9;
  *(_OWORD *)(a2 + 128) = v10;
  *(_OWORD *)(a2 + 96) = v8;
  v11 = a3 + 148;
  do
  {
    v12 = (_DWORD *)(a2 + 168 + v3);
    *(v12 - 5) = *(_DWORD *)(v11 + v3);
    *(v12 - 4) = *(_DWORD *)(v11 + v3 + 4);
    *(v12 - 3) = *(_DWORD *)(v11 + v3 + 8);
    *(v12 - 2) = *(_DWORD *)(v11 + v3 + 12);
    *(v12 - 1) = *(_DWORD *)(v11 + v3 + 16);
    *v12 = *(_DWORD *)(v11 + v3 + 20);
    v3 += 24;
  }
  while (v3 != 72);
  *(_DWORD *)(a2 + 220) = *(_DWORD *)(a3 + 220);
  *(_DWORD *)(a2 + 224) = *(_DWORD *)(a3 + 224);
  *(_DWORD *)(a2 + 228) = *(_DWORD *)(a3 + 228);
  *(_DWORD *)(a2 + 232) = *(_DWORD *)(a3 + 232);
  *(_DWORD *)(a2 + 236) = *(_DWORD *)(a3 + 236);
  *(_DWORD *)(a2 + 240) = *(_DWORD *)(a3 + 240);
  *(_DWORD *)(a2 + 244) = *(_DWORD *)(a3 + 244);
  *(_DWORD *)(a2 + 248) = *(_DWORD *)(a3 + 248);
  *(_DWORD *)(a2 + 252) = *(_DWORD *)(a3 + 252);
  v13 = *(_QWORD *)(a3 + 256);
  *(_DWORD *)(a2 + 264) = *(_DWORD *)(a3 + 264);
  *(_QWORD *)(a2 + 256) = v13;
  *(_DWORD *)(a2 + 268) = *(_DWORD *)(a3 + 268);
  *(_DWORD *)(a2 + 272) = *(_DWORD *)(a3 + 272);
  *(_DWORD *)(a2 + 276) = *(_DWORD *)(a3 + 276);
  result = *(float *)(a3 + 280);
  *(float *)(a2 + 280) = result;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Vector<float,2ul>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Vector<float,2ul>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Vector<float,2ul>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Vector<float,2ul>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_21659591C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned long long,Phase::Vector<float,2ul>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      v8 = v5[2];
      if (v7)
      {
        v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v2 = v5[2];
          if (v7 <= v8)
            v2 = v8 % v7;
        }
        else
        {
          v2 = (v7 - 1) & v8;
        }
        v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        if (v10)
        {
          for (i = (_QWORD *)*v10; i; i = (_QWORD *)*i)
          {
            v12 = i[1];
            if (v12 == v8)
            {
              if (i[2] == v8)
                goto LABEL_41;
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v7)
                  v12 %= v7;
              }
              else
              {
                v12 &= v7 - 1;
              }
              if (v12 != v2)
                break;
            }
          }
        }
      }
      v13 = operator new(0x20uLL);
      *v13 = 0;
      v13[1] = v8;
      v13[2] = v5[2];
      *((_DWORD *)v13 + 6) = *((_DWORD *)v5 + 6);
      *((_DWORD *)v13 + 7) = *((_DWORD *)v5 + 7);
      v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v15 = *(float *)(a1 + 32);
      if (!v7 || (float)(v15 * (float)v7) < v14)
      {
        v16 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v16 = 1;
        v17 = v16 | (2 * v7);
        v18 = vcvtps_u32_f32(v14 / v15);
        if (v17 <= v18)
          v19 = v18;
        else
          v19 = v17;
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v19);
        v7 = *(_QWORD *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v8)
            v2 = v8 % v7;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v7 - 1) & v8;
        }
      }
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v21)
      {
        *v13 = *v21;
      }
      else
      {
        *v13 = *v6;
        *v6 = v13;
        *(_QWORD *)(v20 + 8 * v2) = v6;
        if (!*v13)
          goto LABEL_40;
        v22 = *(_QWORD *)(*v13 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v22 >= v7)
            v22 %= v7;
        }
        else
        {
          v22 &= v7 - 1;
        }
        v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
      }
      *v21 = v13;
LABEL_40:
      ++*(_QWORD *)(a1 + 24);
LABEL_41:
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_216595B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

char *std::vector<Phase::Vector<float,2ul>>::__assign_with_size[abi:ne180100]<Phase::Vector<float,2ul>*,Phase::Vector<float,2ul>*>(_QWORD *a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  _DWORD *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  _DWORD *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    v17 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v17;
    v18 = (v17 - result) >> 3;
    if (v18 >= a4)
    {
      v22 = result;
      if (a2 != a3)
      {
        v23 = result;
        do
        {
          *(_DWORD *)v23 = *v6;
          *((_DWORD *)v23 + 1) = v6[1];
          v22 += 8;
          v6 += 2;
          v23 += 8;
        }
        while (v6 != a3);
      }
      v16 = (char *)(v22 - result);
      v12 = result;
    }
    else
    {
      v19 = &a2[2 * v18];
      if (v12 != result)
      {
        do
        {
          *(_DWORD *)result = *v6;
          *((_DWORD *)result + 1) = v6[1];
          v6 += 2;
          result += 8;
        }
        while (v6 != v19);
      }
      v20 = v12;
      if (v19 != a3)
      {
        v21 = v12;
        do
        {
          *(_DWORD *)v21 = *v19;
          *((_DWORD *)v21 + 1) = v19[1];
          v20 += 8;
          v19 += 2;
          v21 += 8;
        }
        while (v19 != a3);
      }
      v16 = (char *)(v20 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<Phase::Vector<float,2ul>>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        *(_DWORD *)v15 = *v6;
        *((_DWORD *)v15 + 1) = v6[1];
        v15 += 8;
        v6 += 2;
      }
      while (v6 != a3);
    }
    v16 = (char *)(v15 - v12);
  }
  *v13 = &v16[(_QWORD)v12];
  return result;
}

void Phase::SpatialModeler::kmeans<2ul>::AssignClusterIndices(std::vector<unsigned int> *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::vector<unsigned int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  uint64_t v20;
  float v21;
  char v22;
  char v23;
  float v24;
  float v25;

  std::vector<unsigned int>::resize(a1, (a2[1] - *a2) >> 3);
  v6 = *a2;
  v7 = a2[1];
  v8 = v7 - *a2;
  if (v7 != *a2)
  {
    v9 = 0;
    v10 = *a3;
    v11 = a3[1] - *a3;
    v12 = v11 & 0x7FFFFFFF8;
    begin = a1->__begin_;
    v14 = v8 >> 3;
    v15 = (v11 >> 3);
    if (v14 <= 1)
      v16 = 1;
    else
      v16 = v14;
    do
    {
      if (v12)
      {
        v17 = 0;
        v18 = 0;
        v19 = 3.4028e38;
        do
        {
          v20 = 0;
          v21 = 0.0;
          v22 = 1;
          do
          {
            v23 = v22;
            v24 = *(float *)(v6 + 8 * v9 + 4 * v20) - *(float *)(v10 + 8 * v17 + 4 * v20);
            v21 = v21 + (float)(v24 * v24);
            v20 = 1;
            v22 = 0;
          }
          while ((v23 & 1) != 0);
          v25 = sqrtf(v21);
          if (v25 < v19)
          {
            v19 = v25;
            v18 = v17;
          }
          ++v17;
        }
        while (v17 != v15);
      }
      else
      {
        v18 = 0;
      }
      begin[v9++] = v18;
    }
    while (v9 != v16);
  }
}

uint64_t std::__sample[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<Phase::Vector<float,2ul> const*>,std::__wrap_iter<Phase::Vector<float,2ul> const*>,std::back_insert_iterator<std::vector<Phase::Vector<float,2ul>>>,long,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  _BYTE v27[64];

  v6 = (a2 - (uint64_t)a1) >> 3;
  if ((uint64_t)v6 >= a4)
    v7 = a4;
  else
    v7 = (a2 - (uint64_t)a1) >> 3;
  if (v7)
  {
    v9 = a1;
    do
    {
      v10 = v6 - 1;
      if (v6 == 1)
      {
        v13 = 0;
      }
      else if (v6)
      {
        v11 = __clz(v6);
        if (((v6 << v11) & 0x7FFFFFFFFFFFFFFFLL) != 0)
          v12 = 64;
        else
          v12 = 63;
        std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v27, a5, v12 - v11);
        do
          v13 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v27);
        while (v13 >= v6);
      }
      else
      {
        std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v27, a5, 0x40uLL);
        v13 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v27);
      }
      if (v13 < v7)
      {
        v15 = *(_DWORD **)(a3 + 8);
        v14 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v15 >= v14)
        {
          v17 = *(_DWORD **)a3;
          v18 = ((uint64_t)v15 - *(_QWORD *)a3) >> 3;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61)
            std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__throw_length_error[abi:ne180100]();
          v20 = v14 - (_QWORD)v17;
          if (v20 >> 2 > v19)
            v19 = v20 >> 2;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a3 + 16, v21);
            v17 = *(_DWORD **)a3;
            v15 = *(_DWORD **)(a3 + 8);
          }
          else
          {
            v22 = 0;
          }
          v23 = &v22[8 * v18];
          *(_DWORD *)v23 = *v9;
          *((_DWORD *)v23 + 1) = v9[1];
          v24 = v23;
          while (v15 != v17)
          {
            v25 = *(v15 - 2);
            v15 -= 2;
            *((_DWORD *)v24 - 2) = v25;
            v24 -= 8;
            *((_DWORD *)v24 + 1) = v15[1];
          }
          v16 = v23 + 8;
          *(_QWORD *)a3 = v24;
          *(_QWORD *)(a3 + 8) = v23 + 8;
          *(_QWORD *)(a3 + 16) = &v22[8 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v15 = *v9;
          v15[1] = v9[1];
          v16 = v15 + 2;
        }
        *(_QWORD *)(a3 + 8) = v16;
        --v7;
      }
      v9 += 2;
      v6 = v10;
    }
    while (v7);
  }
  return a3;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (a3 % 0x1E)
    v3 = a3 / 0x1E + 1;
  else
    v3 = a3 / 0x1E;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  v5 = (-1 << (a3 / v3)) & 0x7FFFFFFE;
  if (a3 / v3 >= 0x40)
    v5 = 0;
  *(_QWORD *)(result + 40) = v5;
  if ((v5 ^ 0x7FFFFFFE) > v5 / v3)
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      *(_QWORD *)(result + 32) = v3 + v4 * v3 - a3;
      *(_QWORD *)(result + 40) = 0;
      LODWORD(v4) = 64;
      goto LABEL_16;
    }
    *(_QWORD *)(result + 40) = (-1 << v4) & 0x7FFFFFFE;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 >= 0x3F)
  {
LABEL_16:
    *(_QWORD *)(result + 48) = 0;
    v8 = -(int)v4;
    v7 = -1;
    *(_DWORD *)(result + 56) = 0xFFFFFFFF >> v8;
    goto LABEL_17;
  }
  *(_QWORD *)(result + 48) = 0x3FFFFFFFuLL >> v4 << (v4 + 1);
  v6 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v6 = 0;
  *(_DWORD *)(result + 56) = v6;
  if (v4 >= 0x1F)
    v7 = -1;
  else
    v7 = 0xFFFFFFFF >> ~(_BYTE)v4;
LABEL_17:
  *(_DWORD *)(result + 60) = v7;
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    result = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 16);
    v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        v7 = v6 / 0xADC8;
        v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        v9 = v8 >= v7;
        v10 = v8 - v7;
        if (v9)
          v11 = 0;
        else
          v11 = 0x7FFFFFFF;
        v6 = v11 + v10;
        v12 = v6 - 1;
      }
      while (*(_QWORD *)(a1 + 40) <= v12);
      v13 = result << v5;
      if (v5 >= 0x40)
        v13 = 0;
      result = v13 + (v12 & *(_DWORD *)(a1 + 56));
      ++v4;
    }
    while (v4 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    result = 0;
  }
  v14 = *(_QWORD *)(a1 + 24);
  if (v2 < v14)
  {
    v15 = *(unsigned int **)a1;
    v16 = *(_QWORD *)(a1 + 48);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_DWORD *)(a1 + 60);
    v19 = *v15;
    while (1)
    {
      v20 = v19 / 0xADC8;
      v21 = 48271 * (v19 % 0xADC8);
      v20 *= 3399;
      v9 = v21 >= v20;
      v22 = v21 - v20;
      if (v9)
        v23 = 0;
      else
        v23 = 0x7FFFFFFF;
      v19 = v23 + v22;
      v24 = v19 - 1;
      if (v16 > v24)
      {
        v25 = result << (v17 + 1);
        if (v17 >= 0x3F)
          v25 = 0;
        result = v25 + (v24 & v18);
        if (++v2 == v14)
          break;
      }
    }
    *v15 = v19;
  }
  return result;
}

void std::vector<Phase::Vector<float,2ul>>::resize(_QWORD *a1, unint64_t a2)
{
  _DWORD *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;

  v3 = (_DWORD *)*a1;
  v4 = (char *)a1[1];
  v5 = (uint64_t)&v4[-*a1] >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v20 = (char *)&v3[2 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 3)
  {
    bzero(v4, 8 * v6);
    v20 = &v4[8 * v6];
LABEL_15:
    a1[1] = v20;
    return;
  }
  if (a2 >> 61)
    std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__throw_length_error[abi:ne180100]();
  v9 = v8 - (_QWORD)v3;
  v10 = v9 >> 2;
  if (v9 >> 2 <= a2)
    v10 = a2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v11 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v7, v11);
  v13 = (_DWORD *)*a1;
  v14 = (_DWORD *)a1[1];
  v15 = &v12[8 * v5];
  v17 = &v12[8 * v16];
  bzero(v15, 8 * v6);
  v18 = &v15[8 * v6];
  while (v14 != v13)
  {
    v19 = *(v14 - 2);
    v14 -= 2;
    *((_DWORD *)v15 - 2) = v19;
    v15 -= 8;
    *((_DWORD *)v15 + 1) = v14[1];
  }
  *a1 = v15;
  a1[1] = v18;
  a1[2] = v17;
  if (v13)
    operator delete(v13);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_216596348(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SubmixRoutingOutput>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = -1;
  i[4] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v14 = 1;
  if (v7 >= 3)
    v14 = (v7 & (v7 - 1)) != 0;
  v15 = v14 | (2 * v7);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v30)
  {
    *i = *v30;
LABEL_72:
    *v30 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v29[v5] = a1 + 4;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_216596740(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>,false>(_DWORD *a1, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t **a5, uint64_t a6, char a7)
{
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  unsigned int *v25;
  unsigned int *v26;
  float v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  float v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  char *v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t *v85;
  unsigned int *v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float v96;
  unsigned int *v97;
  unsigned int *v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  float v106;
  unsigned int *v107;
  uint64_t v109;

LABEL_1:
  v12 = a2;
LABEL_2:
  v109 = (uint64_t)a1;
  v13 = (uint64_t)a1;
  a2 = v12;
  while (2)
  {
    v14 = (char *)a2 - (char *)a4;
    v15 = a2 - a4;
    switch(v15)
    {
      case 0:
      case 1:
        return;
      case 2:
        v45 = *a4;
        v46 = *(a2 - 1);
        if (*(float *)(**a5 + 8 * v45 + 4) < *(float *)(**a5 + 8 * v46 + 4))
        {
          *(a2 - 1) = v45;
          *a4 = v46;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(v109, (uint64_t)a2, (uint64_t)(a2 - 1), (uint64_t)(a2 - 1), a3, (uint64_t)(a4 + 1), **a5);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(v109, (uint64_t)a2, (uint64_t)(a2 - 1), (uint64_t)(a2 - 1), (uint64_t)(a2 - 2), (uint64_t)(a2 - 2), a3, (uint64_t)(a4 + 1), a5);
        return;
      case 5:
        v47 = a2 - 1;
        v48 = a2 - 2;
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(v109, (uint64_t)a2, (uint64_t)(a2 - 1), (uint64_t)(a2 - 1), (uint64_t)(a2 - 2), (uint64_t)(a2 - 2), (uint64_t)(a2 - 3), (uint64_t)(a2 - 3), a5);
        v49 = *a4;
        v50 = *(a2 - 4);
        v51 = **a5;
        if (*(float *)(v51 + 8 * v49 + 4) < *(float *)(v51 + 8 * v50 + 4))
        {
          *(a2 - 4) = v49;
          *a4 = v50;
          v52 = *(a2 - 4);
          v53 = *(a2 - 3);
          v54 = *(float *)(v51 + 8 * v52 + 4);
          if (v54 < *(float *)(v51 + 8 * v53 + 4))
          {
            *(a2 - 4) = v53;
            *(a2 - 3) = v52;
            v55 = *(a2 - 2);
            if (v54 < *(float *)(v51 + 8 * v55 + 4))
            {
              *v48 = v52;
              *(a2 - 3) = v55;
              v56 = *v47;
              if (v54 < *(float *)(v51 + 8 * v56 + 4))
              {
                *v47 = v52;
                *v48 = v56;
              }
            }
          }
        }
        return;
      default:
        if (v14 <= 95)
        {
          if ((a7 & 1) != 0)
          {
            if (a2 != a4)
            {
              v57 = a2 - 1;
              if (a2 - 1 != a4)
              {
                v58 = 0;
                v59 = **a5;
                v60 = a2 - 1;
                do
                {
                  v62 = *--v60;
                  v61 = v62;
                  v63 = *v57;
                  v64 = *(float *)(v59 + 8 * v62 + 4);
                  if (v64 < *(float *)(v59 + 8 * v63 + 4))
                  {
                    v65 = v58;
                    do
                    {
                      v66 = (char *)a2 + v65;
                      *(unsigned int *)((char *)a2 + v65 - 8) = v63;
                      if (!v65)
                        break;
                      v63 = *(unsigned int *)((char *)a2 + v65);
                      v65 += 4;
                    }
                    while (v64 < *(float *)(v59 + 8 * v63 + 4));
                    *((_DWORD *)v66 - 1) = v61;
                  }
                  v58 -= 4;
                  v57 = v60;
                }
                while (v60 != a4);
              }
            }
          }
          else if (a2 != a4)
          {
            v99 = a2 - 1;
            if (a2 - 1 != a4)
            {
              v100 = **a5;
              v101 = a2 - 2;
              v102 = a2 - 1;
              do
              {
                v104 = *--v102;
                v103 = v104;
                v105 = *v99;
                v106 = *(float *)(v100 + 8 * v104 + 4);
                if (v106 < *(float *)(v100 + 8 * v105 + 4))
                {
                  v107 = v101;
                  do
                  {
                    *v107 = v105;
                    v105 = v107[2];
                    ++v107;
                  }
                  while (v106 < *(float *)(v100 + 8 * v105 + 4));
                  *v107 = v103;
                }
                --v101;
                v99 = v102;
              }
              while (v102 != a4);
            }
          }
          return;
        }
        if (!a6)
        {
          if (a2 != a4)
          {
            v67 = (unint64_t)(v15 - 2) >> 1;
            v68 = v67;
            do
            {
              v69 = v68;
              v70 = 4 * v68;
              if (v67 >= v70 >> 2)
              {
                v71 = v70 >> 1;
                v72 = v71 | 1;
                v73 = &a2[-(v71 | 1)];
                v74 = v71 + 2;
                v75 = **a5;
                if (v74 < v15 && *(float *)(v75 + 8 * *(v73 - 1) + 4) < *(float *)(v75 + 8 * *(v73 - 2) + 4))
                {
                  --v73;
                  v72 = v74;
                }
                v76 = &a2[-v69];
                v77 = *(v73 - 1);
                v78 = *(v76 - 1);
                v79 = *(float *)(v75 + 8 * v78 + 4);
                if (*(float *)(v75 + 8 * v77 + 4) >= v79)
                {
                  do
                  {
                    *(v76 - 1) = v77;
                    v76 = v73;
                    if (v67 < v72)
                      break;
                    v80 = 2 * v72;
                    v72 = (2 * v72) | 1;
                    v73 = &a2[-v72];
                    v81 = v80 + 2;
                    if (v81 < v15 && *(float *)(v75 + 8 * *(v73 - 1) + 4) < *(float *)(v75 + 8 * *(v73 - 2) + 4))
                    {
                      --v73;
                      v72 = v81;
                    }
                    v77 = *(v73 - 1);
                  }
                  while (*(float *)(v75 + 8 * v77 + 4) >= v79);
                  *(v76 - 1) = v78;
                }
              }
              v68 = v69 - 1;
            }
            while (v69);
            v82 = (unint64_t)v14 >> 2;
            do
            {
              v83 = 0;
              v84 = *(a2 - 1);
              v85 = *a5;
              v86 = a2;
              do
              {
                v87 = v86;
                v86 += ~v83;
                v88 = 2 * v83;
                v83 = (2 * v83) | 1;
                v89 = v88 + 2;
                if (v89 < v82 && *(float *)(*v85 + 8 * *(v86 - 1) + 4) < *(float *)(*v85 + 8 * *(v86 - 2) + 4))
                {
                  --v86;
                  v83 = v89;
                }
                *(v87 - 1) = *(v86 - 1);
              }
              while (v83 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
              v90 = (char *)(v86 - 1);
              if (v86 == a4 + 1)
              {
                *(_DWORD *)v90 = v84;
              }
              else
              {
                *(_DWORD *)v90 = *a4;
                *a4 = v84;
                if ((char *)a2 - v90 >= 5)
                {
                  v91 = (((unint64_t)((char *)a2 - v90) >> 2) - 2) >> 1;
                  v92 = &a2[-v91];
                  v93 = *(v92 - 1);
                  v94 = *(unsigned int *)v90;
                  v95 = *v85;
                  v96 = *(float *)(v95 + 8 * v94 + 4);
                  if (*(float *)(v95 + 8 * v93 + 4) < v96)
                  {
                    do
                    {
                      v97 = v92;
                      *(v86 - 1) = v93;
                      if (!v91)
                        break;
                      v91 = (v91 - 1) >> 1;
                      v92 = &a2[-v91];
                      v93 = *(v92 - 1);
                      v86 = v97;
                    }
                    while (*(float *)(v95 + 8 * v93 + 4) < v96);
                    *(v97 - 1) = v94;
                  }
                }
              }
              ++a4;
            }
            while (v82-- > 2);
          }
          return;
        }
        v16 = (unint64_t)v15 >> 1;
        v17 = (uint64_t)&a2[-((unint64_t)v15 >> 1)];
        v18 = **a5;
        if ((unint64_t)v14 < 0x201)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(v17, v17, v13, (uint64_t)a2, (uint64_t)(a4 + 1), (uint64_t)(a4 + 1), v18);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(v13, (uint64_t)a2, v17, v17, (uint64_t)(a4 + 1), (uint64_t)(a4 + 1), v18);
          v19 = (uint64_t)&a2[1 - v16];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>((uint64_t)(a2 - 1), (uint64_t)(a2 - 1), v19, v19, (uint64_t)(a4 + 2), (uint64_t)(a4 + 2), **a5);
          v20 = (uint64_t)&a2[~v16];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>((uint64_t)(a2 - 2), (uint64_t)(a2 - 2), v20, v20, (uint64_t)(a4 + 3), (uint64_t)(a4 + 3), **a5);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(v19, v19, v17, v17, v20, v20, **a5);
          v21 = *(a2 - 1);
          *(a2 - 1) = *(_DWORD *)(v17 - 4);
          *(_DWORD *)(v17 - 4) = v21;
        }
        --a6;
        if ((a7 & 1) == 0)
        {
          v22 = *(a2 - 1);
          v23 = **a5;
          v24 = *(float *)(v23 + 8 * v22 + 4);
          if (*(float *)(v23 + 8 * *a2 + 4) < v24)
            goto LABEL_30;
          if (v24 >= *(float *)(v23 + 8 * *a4 + 4))
          {
            v28 = a2 - 1;
            do
            {
              v26 = v28;
              if (v28 <= a4)
                break;
              --v28;
            }
            while (v24 >= *(float *)(v23 + 8 * *(v26 - 1) + 4));
          }
          else
          {
            v25 = a2;
            do
            {
              v26 = v25 - 1;
              v27 = *(float *)(v23 + 8 * *(v25 - 2) + 4);
              --v25;
            }
            while (v24 >= v27);
          }
          v29 = a4;
          if (v26 > a4)
          {
            v29 = a4;
            do
              v30 = *v29++;
            while (v24 < *(float *)(v23 + 8 * v30 + 4));
          }
          while (v29 < v26)
          {
            v31 = *(v26 - 1);
            *(v26 - 1) = *(v29 - 1);
            *(v29 - 1) = v31;
            do
            {
              v32 = *(v26 - 2);
              --v26;
            }
            while (v24 >= *(float *)(v23 + 8 * v32 + 4));
            do
              v33 = *v29++;
            while (v24 < *(float *)(v23 + 8 * v33 + 4));
          }
          if (v26 + 1 != a2)
            *(a2 - 1) = *v26;
          a7 = 0;
          *v26 = v22;
          a2 = v26;
          continue;
        }
        v22 = *(a2 - 1);
        v23 = **a5;
        v24 = *(float *)(v23 + 8 * v22 + 4);
LABEL_30:
        v34 = 0;
        do
        {
          v35 = *(float *)(v23 + 8 * a2[v34 - 2] + 4);
          --v34;
        }
        while (v35 < v24);
        v36 = &a2[v34];
        v37 = a4;
        if (v34 == -1)
        {
          v37 = a4;
          do
          {
            if (v37 >= v36)
              break;
            v39 = *v37++;
          }
          while (*(float *)(v23 + 8 * v39 + 4) >= v24);
        }
        else
        {
          do
            v38 = *v37++;
          while (*(float *)(v23 + 8 * v38 + 4) >= v24);
        }
        v12 = &a2[v34];
        if (v37 < v36)
        {
          v40 = v37;
          do
          {
            v41 = *(v12 - 1);
            *(v12 - 1) = *(v40 - 1);
            *(v40 - 1) = v41;
            do
            {
              v42 = *(v12 - 2);
              --v12;
            }
            while (*(float *)(v23 + 8 * v42 + 4) < v24);
            do
              v43 = *v40++;
            while (*(float *)(v23 + 8 * v43 + 4) >= v24);
          }
          while (v40 < v12);
        }
        if (v12 + 1 != a2)
          *(a2 - 1) = *v12;
        *v12 = v22;
        if (v37 < v36)
        {
LABEL_49:
          std::__introsort<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>,false>(v13, a2, v12 + 1, v12 + 1, a5, a6, a7 & 1);
          a7 = 0;
          a1 = v12 + 1;
          goto LABEL_2;
        }
        v44 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(v13, (uint64_t)a2, (uint64_t)(v12 + 1), v12 + 1, a5);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>((uint64_t)v12, (uint64_t)v12, a3, a4, a5))
        {
          a1 = v12 + 1;
          if ((v44 & 1) != 0)
            goto LABEL_2;
          goto LABEL_49;
        }
        a3 = (uint64_t)(v12 + 1);
        a4 = v12 + 1;
        a1 = (_DWORD *)v109;
        if ((v44 & 1) == 0)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 5;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v47 = *(_QWORD *)v8;
        if (*(_QWORD *)(a2 - 32) < *(_QWORD *)v8)
        {
          v48 = *(_DWORD *)(v8 + 16);
          v49 = *(_QWORD *)(v8 + 8);
          v126 = *(_QWORD *)(v8 + 20);
          v134 = *(_DWORD *)(v8 + 28);
          *(_QWORD *)v8 = *(_QWORD *)(a2 - 32);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 - 24);
          *(_DWORD *)(v8 + 12) = *(_DWORD *)(a2 - 20);
          *(_DWORD *)(v8 + 16) = *(_DWORD *)(a2 - 16);
          v50 = *(_QWORD *)(a2 - 12);
          *(_DWORD *)(v8 + 28) = *(_DWORD *)(a2 - 4);
          *(_QWORD *)(v8 + 20) = v50;
          *(_QWORD *)(a2 - 32) = v47;
          *(_QWORD *)(a2 - 24) = v49;
          *(_DWORD *)(a2 - 16) = v48;
          *(_DWORD *)(a2 - 4) = v134;
          *(_QWORD *)(a2 - 12) = v126;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Geometry::SortPrimitivesByMortonNumber(Phase::Geometry::System &,Phase::Geometry::Mesh *,Phase::Geometry::MeshOptions::PrimitiveSortType)::$_0 &,Phase::Geometry::PrimitiveSortEntry *>((unint64_t *)v8, (unint64_t *)(v8 + 32), (unint64_t *)(a2 - 32));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Geometry::SortPrimitivesByMortonNumber(Phase::Geometry::System &,Phase::Geometry::Mesh *,Phase::Geometry::MeshOptions::PrimitiveSortType)::$_0 &,Phase::Geometry::PrimitiveSortEntry *>(v8, v8 + 32, v8 + 64, a2 - 32);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Geometry::SortPrimitivesByMortonNumber(Phase::Geometry::System &,Phase::Geometry::Mesh *,Phase::Geometry::MeshOptions::PrimitiveSortType)::$_0 &,Phase::Geometry::PrimitiveSortEntry *,0>(v8, v8 + 32, v8 + 64, v8 + 96, a2 - 32);
        return;
      default:
        if (v9 <= 767)
        {
          v51 = v8 + 32;
          v53 = v8 == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v53)
            {
              v54 = 0;
              v55 = v8;
              do
              {
                v56 = v51;
                v57 = *(_QWORD *)(v55 + 32);
                if (v57 < *(_QWORD *)v55)
                {
                  v58 = *(_QWORD *)(v55 + 40);
                  v59 = *(_DWORD *)(v55 + 48);
                  v127 = *(_QWORD *)(v55 + 52);
                  v135 = *(_DWORD *)(v55 + 60);
                  v60 = *(_QWORD *)v55;
                  v61 = v54;
                  while (1)
                  {
                    v62 = v8 + v61;
                    v63 = *(_QWORD *)(v8 + v61 + 8);
                    *(_QWORD *)(v62 + 32) = v60;
                    *(_QWORD *)(v62 + 40) = v63;
                    *(_DWORD *)(v62 + 48) = *(_DWORD *)(v8 + v61 + 16);
                    *(_QWORD *)(v62 + 52) = *(_QWORD *)(v8 + v61 + 20);
                    *(_DWORD *)(v62 + 60) = *(_DWORD *)(v8 + v61 + 28);
                    if (!v61)
                      break;
                    v60 = *(_QWORD *)(v62 - 32);
                    v61 -= 32;
                    if (v57 >= v60)
                    {
                      v64 = v8 + v61 + 32;
                      goto LABEL_72;
                    }
                  }
                  v64 = v8;
LABEL_72:
                  *(_QWORD *)v64 = v57;
                  *(_QWORD *)(v64 + 8) = v58;
                  *(_DWORD *)(v64 + 16) = v59;
                  *(_DWORD *)(v62 + 28) = v135;
                  *(_QWORD *)(v62 + 20) = v127;
                }
                v51 = v56 + 32;
                v54 += 32;
                v55 = v56;
              }
              while (v56 + 32 != a2);
            }
          }
          else if (!v53)
          {
            v107 = v8 + 52;
            do
            {
              v108 = v51;
              v109 = *(_QWORD *)(a1 + 32);
              if (v109 < *(_QWORD *)a1)
              {
                v110 = *(_QWORD *)(a1 + 40);
                v111 = *(_DWORD *)(a1 + 48);
                v130 = *(_QWORD *)(a1 + 52);
                v138 = *(_DWORD *)(a1 + 60);
                v112 = *(_QWORD *)a1;
                v113 = v107;
                do
                {
                  v114 = v113;
                  *(_QWORD *)(v113 - 20) = v112;
                  *(_QWORD *)(v113 - 12) = *(_QWORD *)(v113 - 44);
                  v115 = *(_DWORD *)(v113 - 36);
                  v116 = *(_QWORD *)(v113 - 32);
                  v113 -= 32;
                  *(_DWORD *)(v114 - 4) = v115;
                  *(_QWORD *)v114 = v116;
                  *(_DWORD *)(v114 + 8) = *(_DWORD *)(v114 - 24);
                  v112 = *(_QWORD *)(v114 - 84);
                }
                while (v109 < v112);
                *(_QWORD *)(v113 - 20) = v109;
                *(_QWORD *)(v113 - 12) = v110;
                *(_DWORD *)(v113 - 4) = v111;
                *(_DWORD *)(v113 + 8) = v138;
                *(_QWORD *)v113 = v130;
              }
              v51 = v108 + 32;
              v107 += 32;
              a1 = v108;
            }
            while (v108 + 32 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v65 = (v10 - 2) >> 1;
            v66 = v65;
            do
            {
              v67 = v66;
              if (v65 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = v8 + 32 * v68;
                if (2 * v67 + 2 >= (uint64_t)v10)
                {
                  v70 = *(_QWORD *)v69;
                }
                else
                {
                  v70 = *(_QWORD *)(v69 + 32);
                  v71 = *(_QWORD *)v69 >= v70;
                  if (*(_QWORD *)v69 > v70)
                    v70 = *(_QWORD *)v69;
                  if (!v71)
                  {
                    v69 += 32;
                    v68 = 2 * v67 + 2;
                  }
                }
                v72 = v8 + 32 * v67;
                v73 = *(_QWORD *)v72;
                if (v70 >= *(_QWORD *)v72)
                {
                  v74 = v8 + 32 * v67;
                  v75 = *(_QWORD *)(v74 + 8);
                  v76 = *(_DWORD *)(v74 + 16);
                  v136 = *(_DWORD *)(v74 + 28);
                  v128 = *(_QWORD *)(v74 + 20);
                  do
                  {
                    v77 = v72;
                    v72 = v69;
                    *(_QWORD *)v77 = v70;
                    *(_DWORD *)(v77 + 8) = *(_DWORD *)(v69 + 8);
                    *(_DWORD *)(v77 + 12) = *(_DWORD *)(v69 + 12);
                    *(_DWORD *)(v77 + 16) = *(_DWORD *)(v69 + 16);
                    v79 = v69 + 20;
                    v78 = *(_QWORD *)(v69 + 20);
                    *(_DWORD *)(v77 + 28) = *(_DWORD *)(v79 + 8);
                    *(_QWORD *)(v77 + 20) = v78;
                    if (v65 < v68)
                      break;
                    v80 = (2 * v68) | 1;
                    v69 = v8 + 32 * v80;
                    v68 = 2 * v68 + 2;
                    if (v68 >= (uint64_t)v10)
                    {
                      v70 = *(_QWORD *)v69;
                      v68 = v80;
                    }
                    else
                    {
                      v70 = *(_QWORD *)v69;
                      v81 = *(_QWORD *)(v69 + 32);
                      if (*(_QWORD *)v69 <= v81)
                        v70 = *(_QWORD *)(v69 + 32);
                      if (*(_QWORD *)v69 >= v81)
                        v68 = v80;
                      else
                        v69 += 32;
                    }
                  }
                  while (v70 >= v73);
                  *(_QWORD *)v72 = v73;
                  *(_QWORD *)(v72 + 8) = v75;
                  *(_DWORD *)(v72 + 16) = v76;
                  *(_QWORD *)v79 = v128;
                  *(_DWORD *)(v79 + 8) = v136;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            v82 = (unint64_t)v9 >> 5;
            do
            {
              v83 = 0;
              v84 = *(_QWORD *)v8;
              v86 = *(_DWORD *)(v8 + 8);
              v85 = *(_DWORD *)(v8 + 12);
              v87 = *(_DWORD *)(v8 + 16);
              v119 = *(_QWORD *)(v8 + 20);
              v122 = *(_DWORD *)(v8 + 28);
              v88 = v8;
              do
              {
                v89 = v88 + 32 * v83 + 32;
                v90 = (2 * v83) | 1;
                v83 = 2 * v83 + 2;
                if (v83 >= v82)
                {
                  v91 = *(_QWORD *)v89;
                  v83 = v90;
                }
                else
                {
                  v91 = *(_QWORD *)v89;
                  v92 = *(_QWORD *)(v89 + 32);
                  if (*(_QWORD *)v89 <= v92)
                    v91 = *(_QWORD *)(v89 + 32);
                  if (*(_QWORD *)v89 >= v92)
                    v83 = v90;
                  else
                    v89 += 32;
                }
                *(_QWORD *)v88 = v91;
                *(_DWORD *)(v88 + 8) = *(_DWORD *)(v89 + 8);
                *(_DWORD *)(v88 + 12) = *(_DWORD *)(v89 + 12);
                *(_DWORD *)(v88 + 16) = *(_DWORD *)(v89 + 16);
                v93 = (uint64_t *)(v89 + 20);
                v94 = *(_QWORD *)(v89 + 20);
                *(_DWORD *)(v88 + 28) = *(_DWORD *)(v89 + 28);
                *(_QWORD *)(v88 + 20) = v94;
                v88 = v89;
              }
              while (v83 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
              if (v89 == a2 - 32)
              {
                *(_QWORD *)v89 = v84;
                *(_DWORD *)(v89 + 8) = v86;
                *(_DWORD *)(v89 + 12) = v85;
                *(_DWORD *)(v89 + 16) = v87;
                *(_DWORD *)(v89 + 28) = v122;
                *v93 = v119;
              }
              else
              {
                *(_QWORD *)v89 = *(_QWORD *)(a2 - 32);
                *(_DWORD *)(v89 + 8) = *(_DWORD *)(a2 - 24);
                *(_DWORD *)(v89 + 12) = *(_DWORD *)(a2 - 20);
                *(_DWORD *)(v89 + 16) = *(_DWORD *)(a2 - 16);
                v95 = *(_QWORD *)(a2 - 12);
                *(_DWORD *)(v89 + 28) = *(_DWORD *)(a2 - 4);
                *v93 = v95;
                *(_QWORD *)(a2 - 32) = v84;
                *(_DWORD *)(a2 - 24) = v86;
                *(_DWORD *)(a2 - 20) = v85;
                *(_DWORD *)(a2 - 16) = v87;
                *(_DWORD *)(a2 - 4) = v122;
                *(_QWORD *)(a2 - 12) = v119;
                v96 = v89 - v8 + 32;
                if (v96 >= 33)
                {
                  v97 = (((unint64_t)v96 >> 5) - 2) >> 1;
                  v98 = v8 + 32 * v97;
                  v99 = *(_QWORD *)v98;
                  v100 = *(_QWORD *)v89;
                  if (*(_QWORD *)v98 < *(_QWORD *)v89)
                  {
                    v101 = *(_QWORD *)(v89 + 8);
                    v102 = *(_DWORD *)(v89 + 16);
                    v137 = *(_DWORD *)(v89 + 28);
                    v129 = *v93;
                    do
                    {
                      v103 = v89;
                      v89 = v98;
                      *(_QWORD *)v103 = v99;
                      *(_DWORD *)(v103 + 8) = *(_DWORD *)(v98 + 8);
                      *(_DWORD *)(v103 + 12) = *(_DWORD *)(v98 + 12);
                      *(_DWORD *)(v103 + 16) = *(_DWORD *)(v98 + 16);
                      v104 = v98 + 20;
                      v105 = *(_QWORD *)(v98 + 20);
                      *(_DWORD *)(v103 + 28) = *(_DWORD *)(v104 + 8);
                      *(_QWORD *)(v103 + 20) = v105;
                      if (!v97)
                        break;
                      v97 = (v97 - 1) >> 1;
                      v98 = v8 + 32 * v97;
                      v99 = *(_QWORD *)v98;
                    }
                    while (*(_QWORD *)v98 < v100);
                    *(_QWORD *)v89 = v100;
                    *(_QWORD *)(v89 + 8) = v101;
                    *(_DWORD *)(v89 + 16) = v102;
                    *(_QWORD *)v104 = v129;
                    *(_DWORD *)(v104 + 8) = v137;
                  }
                }
              }
              a2 -= 32;
            }
            while (v82-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = v8 + 32 * (v10 >> 1);
        if ((unint64_t)v9 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Geometry::SortPrimitivesByMortonNumber(Phase::Geometry::System &,Phase::Geometry::Mesh *,Phase::Geometry::MeshOptions::PrimitiveSortType)::$_0 &,Phase::Geometry::PrimitiveSortEntry *>((unint64_t *)(a1 + 32 * (v10 >> 1)), (unint64_t *)a1, (unint64_t *)(a2 - 32));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Geometry::SortPrimitivesByMortonNumber(Phase::Geometry::System &,Phase::Geometry::Mesh *,Phase::Geometry::MeshOptions::PrimitiveSortType)::$_0 &,Phase::Geometry::PrimitiveSortEntry *>((unint64_t *)a1, (unint64_t *)(a1 + 32 * (v10 >> 1)), (unint64_t *)(a2 - 32));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Geometry::SortPrimitivesByMortonNumber(Phase::Geometry::System &,Phase::Geometry::Mesh *,Phase::Geometry::MeshOptions::PrimitiveSortType)::$_0 &,Phase::Geometry::PrimitiveSortEntry *>((unint64_t *)(a1 + 32), (unint64_t *)(v12 - 32), (unint64_t *)(a2 - 64));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Geometry::SortPrimitivesByMortonNumber(Phase::Geometry::System &,Phase::Geometry::Mesh *,Phase::Geometry::MeshOptions::PrimitiveSortType)::$_0 &,Phase::Geometry::PrimitiveSortEntry *>((unint64_t *)(a1 + 64), (unint64_t *)(a1 + 32 + 32 * v11), (unint64_t *)(a2 - 96));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Geometry::SortPrimitivesByMortonNumber(Phase::Geometry::System &,Phase::Geometry::Mesh *,Phase::Geometry::MeshOptions::PrimitiveSortType)::$_0 &,Phase::Geometry::PrimitiveSortEntry *>((unint64_t *)(v12 - 32), (unint64_t *)v12, (unint64_t *)(a1 + 32 + 32 * v11));
          v13 = *(_QWORD *)a1;
          v14 = *(_DWORD *)(a1 + 16);
          v15 = *(_QWORD *)(a1 + 8);
          v123 = *(_QWORD *)(a1 + 20);
          v131 = *(_DWORD *)(a1 + 28);
          *(_QWORD *)a1 = *(_QWORD *)v12;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(v12 + 8);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 + 16);
          v16 = *(_DWORD *)(v12 + 28);
          *(_QWORD *)(a1 + 20) = *(_QWORD *)(v12 + 20);
          *(_DWORD *)(a1 + 28) = v16;
          *(_QWORD *)v12 = v13;
          *(_QWORD *)(v12 + 8) = v15;
          *(_DWORD *)(v12 + 16) = v14;
          *(_QWORD *)(v12 + 20) = v123;
          *(_DWORD *)(v12 + 28) = v131;
        }
        --a3;
        v17 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 32) >= v17)
        {
          v34 = *(_QWORD *)(a1 + 8);
          v35 = *(_DWORD *)(a1 + 16);
          v118 = *(_QWORD *)(a1 + 20);
          v121 = *(_DWORD *)(a1 + 28);
          if (v17 >= *(_QWORD *)(a2 - 32))
          {
            v37 = a1 + 32;
            do
            {
              v8 = v37;
              if (v37 >= a2)
                break;
              v37 += 32;
            }
            while (v17 >= *(_QWORD *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v36 = *(_QWORD *)(v8 + 32);
              v8 += 32;
            }
            while (v17 >= v36);
          }
          v38 = a2;
          if (v8 < a2)
          {
            v38 = a2;
            do
            {
              v39 = *(_QWORD *)(v38 - 32);
              v38 -= 32;
            }
            while (v17 < v39);
          }
          if (v8 < v38)
          {
            v40 = *(_QWORD *)v8;
            do
            {
              v41 = *(_DWORD *)(v8 + 16);
              v42 = *(_QWORD *)(v8 + 8);
              v133 = *(_DWORD *)(v8 + 28);
              v125 = *(_QWORD *)(v8 + 20);
              *(_QWORD *)v8 = *(_QWORD *)v38;
              *(_DWORD *)(v8 + 8) = *(_DWORD *)(v38 + 8);
              *(_DWORD *)(v8 + 12) = *(_DWORD *)(v38 + 12);
              *(_DWORD *)(v8 + 16) = *(_DWORD *)(v38 + 16);
              v43 = *(_QWORD *)(v38 + 20);
              *(_DWORD *)(v8 + 28) = *(_DWORD *)(v38 + 28);
              *(_QWORD *)(v8 + 20) = v43;
              *(_QWORD *)v38 = v40;
              *(_QWORD *)(v38 + 8) = v42;
              *(_DWORD *)(v38 + 16) = v41;
              *(_QWORD *)(v38 + 20) = v125;
              *(_DWORD *)(v38 + 28) = v133;
              do
              {
                v44 = *(_QWORD *)(v8 + 32);
                v8 += 32;
                v40 = v44;
              }
              while (v17 >= v44);
              do
              {
                v45 = *(_QWORD *)(v38 - 32);
                v38 -= 32;
              }
              while (v17 < v45);
            }
            while (v8 < v38);
          }
          if (v8 - 32 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v8 - 32);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v8 - 24);
            *(_DWORD *)(a1 + 12) = *(_DWORD *)(v8 - 20);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v8 - 16);
            v46 = *(_QWORD *)(v8 - 12);
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(v8 - 4);
            *(_QWORD *)(a1 + 20) = v46;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 32) = v17;
          *(_QWORD *)(v8 - 24) = v34;
          *(_DWORD *)(v8 - 16) = v35;
          *(_DWORD *)(v8 - 4) = v121;
          *(_QWORD *)(v8 - 12) = v118;
          continue;
        }
        v18 = 0;
        v19 = *(_QWORD *)(a1 + 8);
        v20 = *(_DWORD *)(a1 + 16);
        v117 = *(_QWORD *)(a1 + 20);
        v120 = *(_DWORD *)(a1 + 28);
        do
        {
          v21 = *(_QWORD *)(a1 + v18 + 32);
          v18 += 32;
        }
        while (v21 < v17);
        v22 = a1 + v18;
        v23 = a2;
        if (v18 == 32)
        {
          v23 = a2;
          do
          {
            if (v22 >= v23)
              break;
            v25 = *(_QWORD *)(v23 - 32);
            v23 -= 32;
          }
          while (v25 >= v17);
        }
        else
        {
          do
          {
            v24 = *(_QWORD *)(v23 - 32);
            v23 -= 32;
          }
          while (v24 >= v17);
        }
        v8 = a1 + v18;
        if (v22 < v23)
        {
          v26 = v23;
          do
          {
            v27 = *(_DWORD *)(v8 + 16);
            v28 = *(_QWORD *)(v8 + 8);
            v132 = *(_DWORD *)(v8 + 28);
            v124 = *(_QWORD *)(v8 + 20);
            *(_QWORD *)v8 = *(_QWORD *)v26;
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v26 + 8);
            *(_DWORD *)(v8 + 12) = *(_DWORD *)(v26 + 12);
            *(_DWORD *)(v8 + 16) = *(_DWORD *)(v26 + 16);
            v29 = *(_QWORD *)(v26 + 20);
            *(_DWORD *)(v8 + 28) = *(_DWORD *)(v26 + 28);
            *(_QWORD *)(v8 + 20) = v29;
            *(_QWORD *)v26 = v21;
            *(_QWORD *)(v26 + 8) = v28;
            *(_DWORD *)(v26 + 16) = v27;
            *(_QWORD *)(v26 + 20) = v124;
            *(_DWORD *)(v26 + 28) = v132;
            do
            {
              v30 = *(_QWORD *)(v8 + 32);
              v8 += 32;
              v21 = v30;
            }
            while (v30 < v17);
            do
            {
              v31 = *(_QWORD *)(v26 - 32);
              v26 -= 32;
            }
            while (v31 >= v17);
          }
          while (v8 < v26);
        }
        if (v8 - 32 != a1)
        {
          *(_QWORD *)a1 = *(_QWORD *)(v8 - 32);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v8 - 24);
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(v8 - 20);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v8 - 16);
          v32 = *(_QWORD *)(v8 - 12);
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(v8 - 4);
          *(_QWORD *)(a1 + 20) = v32;
        }
        *(_QWORD *)(v8 - 32) = v17;
        *(_QWORD *)(v8 - 24) = v19;
        *(_DWORD *)(v8 - 16) = v20;
        *(_DWORD *)(v8 - 4) = v120;
        *(_QWORD *)(v8 - 12) = v117;
        if (v22 < v23)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,Phase::Geometry::SortPrimitivesByMortonNumber(Phase::Geometry::System &,Phase::Geometry::Mesh *,Phase::Geometry::MeshOptions::PrimitiveSortType)::$_0 &,Phase::Geometry::PrimitiveSortEntry *,false>(a1, v8 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Geometry::SortPrimitivesByMortonNumber(Phase::Geometry::System &,Phase::Geometry::Mesh *,Phase::Geometry::MeshOptions::PrimitiveSortType)::$_0 &,Phase::Geometry::PrimitiveSortEntry *>(a1, v8 - 32);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Geometry::SortPrimitivesByMortonNumber(Phase::Geometry::System &,Phase::Geometry::Mesh *,Phase::Geometry::MeshOptions::PrimitiveSortType)::$_0 &,Phase::Geometry::PrimitiveSortEntry *>(v8, a2))
        {
          if (v33)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 32;
        if (!v33)
          goto LABEL_1;
        return;
    }
  }
}

  v7 = a2;
  v8 = a2 - 3;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (char *)v7 - (char *)v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * (v7 - v9);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v31 = *(a2 - 3);
        v71 = a2 - 3;
        if (v31 < *a1)
        {
          v32 = (uint64_t)a1;
          v33 = (uint64_t)v71;
          goto LABEL_61;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, a1 + 3, v8);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, a1 + 3, a1 + 6, v8);
        return;
      case 5:
        v34 = a1 + 6;
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, a1 + 3, a1 + 6, a1 + 9);
        v35 = *(a2 - 3);
        v72 = (uint64_t)(a2 - 3);
        if (v35 < a1[9])
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)(a1 + 9), v72);
          if (a1[9] < *v34)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)(a1 + 6), (uint64_t)(a1 + 9));
            if (*v34 < a1[3])
            {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)(a1 + 3), (uint64_t)(a1 + 6));
              if (a1[3] < *a1)
              {
                v32 = (uint64_t)a1;
                v33 = (uint64_t)(a1 + 3);
LABEL_61:
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>(v32, v33);
              }
            }
          }
        }
        return;
      default:
        if (v10 > 575)
        {
          if (!a3)
          {
            if (a1 != v7)
            {
              v46 = (unint64_t)(v11 - 2) >> 1;
              v47 = v46;
              do
              {
                v48 = v47;
                if (v46 >= v47)
                {
                  v49 = (2 * v47) | 1;
                  v50 = &a1[3 * v49];
                  if (2 * v47 + 2 >= v11)
                  {
                    v51 = *v50;
                  }
                  else
                  {
                    v51 = *v50;
                    v52 = v50[3];
                    if (*v50 <= v52)
                      v51 = v50[3];
                    if (*v50 < v52)
                    {
                      v50 += 3;
                      v49 = 2 * v48 + 2;
                    }
                  }
                  v53 = &a1[3 * v48];
                  if (v51 >= *v53)
                  {
                    Phase::StringId::StringId((uint64_t)&v76, (uint64_t)&a1[3 * v48]);
                    do
                    {
                      v54 = (uint64_t)v50;
                      Phase::StringId::operator=((uint64_t)v53, (uint64_t)v50);
                      if (v46 < v49)
                        break;
                      v50 = &a1[3 * ((2 * v49) | 1)];
                      if (2 * v49 + 2 >= v11)
                      {
                        v55 = *v50;
                        v49 = (2 * v49) | 1;
                      }
                      else
                      {
                        v55 = *v50;
                        v56 = v50[3];
                        if (*v50 <= v56)
                          v55 = v50[3];
                        if (*v50 >= v56)
                        {
                          v49 = (2 * v49) | 1;
                        }
                        else
                        {
                          v50 += 3;
                          v49 = 2 * v49 + 2;
                        }
                      }
                      v53 = (unint64_t *)v54;
                    }
                    while (v55 >= v76);
                    Phase::StringId::operator=(v54, (uint64_t)&v76);
                    if (!v78)
                      free(v77);
                  }
                }
                v47 = v48 - 1;
              }
              while (v48);
              v57 = v10 / 0x18uLL;
              do
              {
                Phase::StringId::StringId((uint64_t)v73, (uint64_t)a1);
                v58 = 0;
                v59 = (uint64_t)a1;
                do
                {
                  v60 = (char *)(v59 + 24 * v58 + 24);
                  v61 = 2 * v58;
                  v58 = (2 * v58) | 1;
                  if (v61 + 2 < v57 && *(_QWORD *)v60 < *((_QWORD *)v60 + 3))
                  {
                    v60 += 24;
                    v58 = v61 + 2;
                  }
                  Phase::StringId::operator=(v59, (uint64_t)v60);
                  v59 = (uint64_t)v60;
                }
                while (v58 <= (uint64_t)((unint64_t)(v57 - 2) >> 1));
                v62 = (uint64_t)(a2 - 3);
                v37 = v60 == (char *)(a2 - 3);
                a2 -= 3;
                if (v37)
                {
                  Phase::StringId::operator=((uint64_t)v60, (uint64_t)v73);
                }
                else
                {
                  Phase::StringId::operator=((uint64_t)v60, v62);
                  Phase::StringId::operator=((uint64_t)a2, (uint64_t)v73);
                  v63 = v60 - (char *)a1 + 24;
                  if (v63 >= 25)
                  {
                    v64 = (v63 / 0x18uLL - 2) >> 1;
                    v65 = &a1[3 * v64];
                    if (*v65 < *(_QWORD *)v60)
                    {
                      Phase::StringId::StringId((uint64_t)&v76, (uint64_t)v60);
                      do
                      {
                        v66 = (uint64_t)v65;
                        Phase::StringId::operator=((uint64_t)v60, (uint64_t)v65);
                        if (!v64)
                          break;
                        v64 = (v64 - 1) >> 1;
                        v65 = &a1[3 * v64];
                        v60 = (char *)v66;
                      }
                      while (*v65 < v76);
                      Phase::StringId::operator=(v66, (uint64_t)&v76);
                      if (!v78)
                        free(v77);
                    }
                  }
                }
                if (!v75)
                  free(v74);
              }
              while (v57-- > 2);
            }
            return;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &a1[3 * ((unint64_t)v11 >> 1)];
          if ((unint64_t)v10 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(v13, a1, v8);
            v7 = a2;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, v13, v8);
            v14 = 3 * v12;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1 + 3, &a1[v14 - 3], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1 + 6, &a1[v14 + 3], a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(&a1[v14 - 3], v13, &a1[v14 + 3]);
            Phase::StringId::StringId((uint64_t)&v76, (uint64_t)a1);
            Phase::StringId::operator=((uint64_t)a1, (uint64_t)v13);
            Phase::StringId::operator=((uint64_t)v13, (uint64_t)&v76);
            v7 = a2;
            if (!v78)
              free(v77);
          }
          --a3;
          if ((a4 & 1) == 0 && *(a1 - 3) >= *a1)
          {
            Phase::StringId::StringId((uint64_t)&v76, (uint64_t)a1);
            if (v76 >= *v8)
            {
              v26 = a1 + 3;
              do
              {
                v9 = v26;
                if (v26 >= v7)
                  break;
                v26 += 3;
              }
              while (v76 >= *v9);
            }
            else
            {
              v9 = a1;
              do
              {
                v25 = v9[3];
                v9 += 3;
              }
              while (v76 >= v25);
            }
            v27 = (unint64_t)v7;
            if (v9 < v7)
            {
              v27 = (unint64_t)v7;
              do
              {
                v28 = *(_QWORD *)(v27 - 24);
                v27 -= 24;
              }
              while (v76 < v28);
            }
            while ((unint64_t)v9 < v27)
            {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)v9, v27);
              do
              {
                v29 = v9[3];
                v9 += 3;
              }
              while (v76 >= v29);
              do
              {
                v30 = *(_QWORD *)(v27 - 24);
                v27 -= 24;
              }
              while (v76 < v30);
            }
            if (v9 - 3 != a1)
              Phase::StringId::operator=((uint64_t)a1, (uint64_t)(v9 - 3));
            Phase::StringId::operator=((uint64_t)(v9 - 3), (uint64_t)&v76);
            if (!v78)
              free(v77);
            goto LABEL_36;
          }
          Phase::StringId::StringId((uint64_t)&v76, (uint64_t)a1);
          v15 = 0;
          do
          {
            v16 = a1[v15 + 3];
            v15 += 3;
          }
          while (v16 < v76);
          v17 = &a1[v15];
          if (v15 == 3)
          {
            v7 = a2;
            do
            {
              if (v17 >= v7)
                break;
              v19 = *(v7 - 3);
              v7 -= 3;
            }
            while (v19 >= v76);
          }
          else
          {
            do
            {
              v18 = *(v7 - 3);
              v7 -= 3;
            }
            while (v18 >= v76);
          }
          if (v17 >= v7)
          {
            v9 = &a1[v15];
          }
          else
          {
            v20 = (unint64_t)v7;
            v9 = &a1[v15];
            do
            {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)v9, v20);
              do
              {
                v21 = v9[3];
                v9 += 3;
              }
              while (v21 < v76);
              do
              {
                v22 = *(_QWORD *)(v20 - 24);
                v20 -= 24;
              }
              while (v22 >= v76);
            }
            while ((unint64_t)v9 < v20);
          }
          if (v9 - 3 != a1)
            Phase::StringId::operator=((uint64_t)a1, (uint64_t)(v9 - 3));
          Phase::StringId::operator=((uint64_t)(v9 - 3), (uint64_t)&v76);
          if (!v78)
            free(v77);
          v23 = v17 >= v7;
          v7 = a2;
          if (!v23)
            goto LABEL_35;
          v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, v9 - 3);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(v9, a2))
          {
            if ((v24 & 1) != 0)
              continue;
LABEL_35:
            std::__introsort<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *,false>(a1, v9 - 3, a3, a4 & 1);
LABEL_36:
            a4 = 0;
            continue;
          }
          a2 = v9 - 3;
          if ((v24 & 1) != 0)
            return;
          goto LABEL_1;
        }
        v36 = (uint64_t)(a1 + 3);
        v37 = a1 == v7 || v36 == (_QWORD)v7;
        v38 = v37;
        if ((a4 & 1) != 0)
        {
          if ((v38 & 1) == 0)
          {
            v39 = 0;
            v40 = a1;
            do
            {
              v41 = v40[3];
              v42 = *v40;
              v40 = (unint64_t *)v36;
              if (v41 < v42)
              {
                Phase::StringId::StringId((uint64_t)&v76, v36);
                v43 = v39;
                while (1)
                {
                  Phase::StringId::operator=((uint64_t)a1 + v43 + 24, (uint64_t)a1 + v43);
                  if (!v43)
                    break;
                  v44 = *(unint64_t *)((char *)a1 + v43 - 24);
                  v43 -= 24;
                  if (v76 >= v44)
                  {
                    v45 = (uint64_t)a1 + v43 + 24;
                    goto LABEL_84;
                  }
                }
                v45 = (uint64_t)a1;
LABEL_84:
                Phase::StringId::operator=(v45, (uint64_t)&v76);
                if (!v78)
                  free(v77);
              }
              v36 = (uint64_t)(v40 + 3);
              v39 += 24;
            }
            while (v40 + 3 != a2);
          }
        }
        else if ((v38 & 1) == 0)
        {
          do
          {
            v68 = (unint64_t *)v36;
            if (a1[3] < *a1)
            {
              Phase::StringId::StringId((uint64_t)&v76, v36);
              do
              {
                Phase::StringId::operator=((uint64_t)(a1 + 3), (uint64_t)a1);
                v69 = *(a1 - 3);
                a1 -= 3;
              }
              while (v76 < v69);
              Phase::StringId::operator=((uint64_t)(a1 + 3), (uint64_t)&v76);
              if (!v78)
                free(v77);
            }
            v36 = (uint64_t)(v68 + 3);
            a1 = v68;
          }
          while (v68 + 3 != a2);
        }
        return;
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = *(unsigned int *)(a4 - 4);
  v8 = *(unsigned int *)(a2 - 4);
  v9 = *(float *)(a7 + 8 * v7 + 4);
  v10 = *(float *)(a7 + 8 * v8 + 4);
  v11 = *(unsigned int *)(a6 - 4);
  v12 = *(float *)(a7 + 8 * v11 + 4);
  if (v9 >= v10)
  {
    if (v12 < v9)
    {
      *(_DWORD *)(a4 - 4) = v11;
      *(_DWORD *)(a6 - 4) = v7;
      v13 = *(unsigned int *)(a4 - 4);
      v14 = *(unsigned int *)(a2 - 4);
      if (*(float *)(a7 + 8 * v13 + 4) < *(float *)(a7 + 8 * v14 + 4))
      {
        *(_DWORD *)(a2 - 4) = v13;
        *(_DWORD *)(a4 - 4) = v14;
      }
    }
  }
  else
  {
    if (v12 >= v9)
    {
      *(_DWORD *)(a2 - 4) = v7;
      *(_DWORD *)(a4 - 4) = v8;
      v15 = *(unsigned int *)(a6 - 4);
      if (*(float *)(a7 + 8 * v15 + 4) >= v10)
        return;
      *(_DWORD *)(a4 - 4) = v15;
    }
    else
    {
      *(_DWORD *)(a2 - 4) = v11;
    }
    *(_DWORD *)(a6 - 4) = v8;
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t **a5)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  unsigned int v17;
  float v18;
  _DWORD *v19;
  _DWORD *v20;
  float v21;
  char v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;

  v8 = 1;
  switch((a2 - (uint64_t)a4) >> 2)
  {
    case 0:
    case 1:
      return v8 & 1;
    case 2:
      v9 = *a4;
      v10 = *(unsigned int *)(a2 - 4);
      if (*(float *)(**a5 + 8 * v9 + 4) < *(float *)(**a5 + 8 * v10 + 4))
      {
        *(_DWORD *)(a2 - 4) = v9;
        *a4 = v10;
      }
      goto LABEL_22;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(a1, a2, a2 - 4, a2 - 4, a3, (uint64_t)(a4 + 1), **a5);
      goto LABEL_22;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8, a3, (uint64_t)(a4 + 1), a5);
      goto LABEL_22;
    case 5:
      v23 = (_DWORD *)(a2 - 4);
      v24 = (_DWORD *)(a2 - 8);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8, a2 - 12, a2 - 12, a5);
      v25 = *a4;
      v26 = *(unsigned int *)(a2 - 16);
      v27 = **a5;
      if (*(float *)(v27 + 8 * v25 + 4) < *(float *)(v27 + 8 * v26 + 4))
      {
        *(_DWORD *)(a2 - 16) = v25;
        *a4 = v26;
        v28 = *(unsigned int *)(a2 - 16);
        v29 = *(unsigned int *)(a2 - 12);
        v30 = *(float *)(v27 + 8 * v28 + 4);
        if (v30 < *(float *)(v27 + 8 * v29 + 4))
        {
          *(_DWORD *)(a2 - 16) = v29;
          *(_DWORD *)(a2 - 12) = v28;
          v31 = *(unsigned int *)(a2 - 8);
          if (v30 < *(float *)(v27 + 8 * v31 + 4))
          {
            *v24 = v28;
            *(_DWORD *)(a2 - 12) = v31;
            v32 = *v23;
            if (v30 < *(float *)(v27 + 8 * v32 + 4))
            {
              *v23 = v28;
              *v24 = v32;
            }
          }
        }
      }
LABEL_22:
      v8 = 1;
      return v8 & 1;
    default:
      v11 = a2 - 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8, **a5);
      v13 = (_DWORD *)(a2 - 12);
      if ((_DWORD *)(a2 - 12) == a4)
        goto LABEL_15;
      v12 = 0;
      v14 = **a5;
      v15 = (_DWORD *)(a2 - 12);
      break;
  }
  while (1)
  {
    v17 = *--v15;
    v16 = v17;
    v18 = *(float *)(v14 + 8 * v17 + 4);
    if (v18 < *(float *)(v14 + 8 * *(unsigned int *)(v11 - 4) + 4))
    {
      v19 = v13;
      while (1)
      {
        *(v19 - 1) = *v19;
        if (v19 + 1 == (_DWORD *)a2)
          break;
        v20 = v19 + 1;
        v21 = *(float *)(v14 + 8 * v19[1] + 4);
        ++v19;
        if (v18 >= v21)
          goto LABEL_13;
      }
      v20 = (_DWORD *)a2;
LABEL_13:
      *(v20 - 1) = v16;
      if (++v12 == 8)
        break;
    }
    v11 = (uint64_t)v13;
    v13 = v15;
    if (v15 == a4)
    {
LABEL_15:
      v22 = 1;
      goto LABEL_25;
    }
  }
  v22 = 0;
  LOBYTE(v12) = v15 == a4;
LABEL_25:
  v8 = v22 | v12;
  return v8 & 1;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t **a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters(std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource> const&,Phase::Handle64,unsigned int,Phase::SpatialModeler::RayTracerState const&,double,unsigned long,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(a1, a2, a3, a4, a5, a6, **a9);
  v13 = *(unsigned int *)(a8 - 4);
  v14 = *(unsigned int *)(a6 - 4);
  v15 = **a9;
  if (*(float *)(v15 + 8 * v13 + 4) < *(float *)(v15 + 8 * v14 + 4))
  {
    *(_DWORD *)(a6 - 4) = v13;
    *(_DWORD *)(a8 - 4) = v14;
    v16 = *(unsigned int *)(a6 - 4);
    v17 = *(unsigned int *)(a4 - 4);
    if (*(float *)(v15 + 8 * v16 + 4) < *(float *)(v15 + 8 * v17 + 4))
    {
      *(_DWORD *)(a4 - 4) = v16;
      *(_DWORD *)(a6 - 4) = v17;
      v18 = *(unsigned int *)(a4 - 4);
      v19 = *(unsigned int *)(a2 - 4);
      if (*(float *)(v15 + 8 * v18 + 4) < *(float *)(v15 + 8 * v19 + 4))
      {
        *(_DWORD *)(a2 - 4) = v18;
        *(_DWORD *)(a4 - 4) = v19;
      }
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>,false>(_DWORD *a1, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t **a5, uint64_t a6, uint64_t a7)
{
  uint64_t **v9;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  float v30;
  unsigned int *v31;
  unsigned int *v32;
  float v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  float v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  float v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  float v67;
  uint64_t v68;
  char *v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t *v88;
  unsigned int *v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  unint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  float v99;
  unsigned int *v100;
  unsigned int *v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  float v109;
  unsigned int *v110;
  uint64_t v112;
  uint64_t v113;
  char v114;

  v9 = a5;
LABEL_2:
  v12 = (uint64_t)(a4 + 1);
  v13 = a2;
LABEL_3:
  v112 = (uint64_t)a1;
  v14 = (uint64_t)a1;
  a2 = v13;
  while (2)
  {
    v15 = (char *)a2 - (char *)a4;
    v16 = a2 - a4;
    switch(v16)
    {
      case 0:
      case 1:
        return;
      case 2:
        v50 = *(a2 - 1);
        if (*(float *)(**v9 + 40 * *a4 + 24) < *(float *)(**v9 + 40 * v50 + 24))
        {
          *(a2 - 1) = *a4;
          *a4 = v50;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(v112, (uint64_t)a2, (uint64_t)(a2 - 1), (uint64_t)(a2 - 1), a3, (uint64_t)(a4 + 1), **v9);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(v112, (uint64_t)a2, (uint64_t)(a2 - 1), (uint64_t)(a2 - 1), (uint64_t)(a2 - 2), (uint64_t)(a2 - 2), a3, (uint64_t)(a4 + 1), v9);
        return;
      case 5:
        v51 = a2 - 1;
        v52 = a2 - 2;
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(v112, (uint64_t)a2, (uint64_t)(a2 - 1), (uint64_t)(a2 - 1), (uint64_t)(a2 - 2), (uint64_t)(a2 - 2), (uint64_t)(a2 - 3), (uint64_t)(a2 - 3), v9);
        v53 = *(a2 - 4);
        v54 = **v9;
        if (*(float *)(v54 + 40 * *a4 + 24) < *(float *)(v54 + 40 * v53 + 24))
        {
          *(a2 - 4) = *a4;
          *a4 = v53;
          v55 = *(a2 - 4);
          v56 = *(a2 - 3);
          v57 = *(float *)(v54 + 40 * v55 + 24);
          if (v57 < *(float *)(v54 + 40 * v56 + 24))
          {
            *(a2 - 4) = v56;
            *(a2 - 3) = v55;
            v58 = *(a2 - 2);
            if (v57 < *(float *)(v54 + 40 * v58 + 24))
            {
              *v52 = v55;
              *(a2 - 3) = v58;
              v59 = *v51;
              if (v57 < *(float *)(v54 + 40 * *v51 + 24))
              {
                *v51 = v55;
                *v52 = v59;
              }
            }
          }
        }
        return;
      default:
        if (v15 <= 95)
        {
          if ((a7 & 1) != 0)
          {
            if (a2 != a4)
            {
              v60 = a2 - 1;
              if (a2 - 1 != a4)
              {
                v61 = 0;
                v62 = **v9;
                v63 = a2 - 1;
                do
                {
                  v65 = *--v63;
                  v64 = v65;
                  v66 = *v60;
                  v67 = *(float *)(v62 + 40 * v65 + 24);
                  if (v67 < *(float *)(v62 + 40 * v66 + 24))
                  {
                    v68 = v61;
                    do
                    {
                      v69 = (char *)a2 + v68;
                      *(unsigned int *)((char *)a2 + v68 - 8) = v66;
                      if (!v68)
                        break;
                      v66 = *(unsigned int *)((char *)a2 + v68);
                      v68 += 4;
                    }
                    while (v67 < *(float *)(v62 + 40 * v66 + 24));
                    *((_DWORD *)v69 - 1) = v64;
                  }
                  v61 -= 4;
                  v60 = v63;
                }
                while (v63 != a4);
              }
            }
          }
          else if (a2 != a4)
          {
            v102 = a2 - 1;
            if (a2 - 1 != a4)
            {
              v103 = **v9;
              v104 = a2 - 2;
              v105 = a2 - 1;
              do
              {
                v107 = *--v105;
                v106 = v107;
                v108 = *v102;
                v109 = *(float *)(v103 + 40 * v107 + 24);
                if (v109 < *(float *)(v103 + 40 * v108 + 24))
                {
                  v110 = v104;
                  do
                  {
                    *v110 = v108;
                    v108 = v110[2];
                    ++v110;
                  }
                  while (v109 < *(float *)(v103 + 40 * v108 + 24));
                  *v110 = v106;
                }
                --v104;
                v102 = v105;
              }
              while (v105 != a4);
            }
          }
          return;
        }
        if (!a6)
        {
          if (a2 != a4)
          {
            v70 = (unint64_t)(v16 - 2) >> 1;
            v71 = v70;
            do
            {
              v72 = v71;
              v73 = 4 * v71;
              if (v70 >= v73 >> 2)
              {
                v74 = v73 >> 1;
                v75 = v74 | 1;
                v76 = &a2[-(v74 | 1)];
                v77 = v74 + 2;
                v78 = **v9;
                if (v77 < v16 && *(float *)(v78 + 40 * *(v76 - 1) + 24) < *(float *)(v78 + 40 * *(v76 - 2) + 24))
                {
                  --v76;
                  v75 = v77;
                }
                v79 = &a2[-v72];
                v80 = *(v76 - 1);
                v81 = *(v79 - 1);
                v82 = *(float *)(v78 + 40 * v81 + 24);
                if (*(float *)(v78 + 40 * v80 + 24) >= v82)
                {
                  do
                  {
                    *(v79 - 1) = v80;
                    v79 = v76;
                    if (v70 < v75)
                      break;
                    v83 = 2 * v75;
                    v75 = (2 * v75) | 1;
                    v76 = &a2[-v75];
                    v84 = v83 + 2;
                    if (v84 < v16
                      && *(float *)(v78 + 40 * *(v76 - 1) + 24) < *(float *)(v78 + 40 * *(v76 - 2) + 24))
                    {
                      --v76;
                      v75 = v84;
                    }
                    v80 = *(v76 - 1);
                  }
                  while (*(float *)(v78 + 40 * v80 + 24) >= v82);
                  *(v79 - 1) = v81;
                }
              }
              v71 = v72 - 1;
            }
            while (v72);
            v85 = (unint64_t)v15 >> 2;
            do
            {
              v86 = 0;
              v87 = *(a2 - 1);
              v88 = *v9;
              v89 = a2;
              do
              {
                v90 = v89;
                v89 += ~v86;
                v91 = 2 * v86;
                v86 = (2 * v86) | 1;
                v92 = v91 + 2;
                if (v92 < v85 && *(float *)(*v88 + 40 * *(v89 - 1) + 24) < *(float *)(*v88 + 40 * *(v89 - 2) + 24))
                {
                  --v89;
                  v86 = v92;
                }
                *(v90 - 1) = *(v89 - 1);
              }
              while (v86 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
              v93 = v89 - 1;
              if (v89 == a4 + 1)
              {
                *v93 = v87;
              }
              else
              {
                *v93 = *a4;
                *a4 = v87;
                if ((char *)a2 - (char *)v93 >= 5)
                {
                  v94 = (((unint64_t)((char *)a2 - (char *)v93) >> 2) - 2) >> 1;
                  v95 = &a2[-v94];
                  v96 = *(v95 - 1);
                  v97 = *v93;
                  v98 = *v88;
                  v99 = *(float *)(v98 + 40 * v97 + 24);
                  if (*(float *)(v98 + 40 * v96 + 24) < v99)
                  {
                    do
                    {
                      v100 = v95;
                      *(v89 - 1) = v96;
                      if (!v94)
                        break;
                      v94 = (v94 - 1) >> 1;
                      v95 = &a2[-v94];
                      v96 = *(v95 - 1);
                      v89 = v100;
                    }
                    while (*(float *)(v98 + 40 * v96 + 24) < v99);
                    *(v100 - 1) = v97;
                  }
                }
              }
              ++a4;
            }
            while (v85-- > 2);
          }
          return;
        }
        v17 = (unint64_t)v16 >> 1;
        v18 = (uint64_t)&a2[-((unint64_t)v16 >> 1)];
        v19 = **v9;
        if ((unint64_t)v15 < 0x201)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(v18, v18, v14, (uint64_t)a2, v12, v12, v19);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(v14, (uint64_t)a2, v18, v18, v12, v12, v19);
          v113 = a6;
          v20 = a7;
          v21 = v12;
          v22 = v14;
          v23 = (uint64_t)&a2[1 - v17];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>((uint64_t)(a2 - 1), (uint64_t)(a2 - 1), v23, v23, (uint64_t)(a4 + 2), (uint64_t)(a4 + 2), **v9);
          v24 = (uint64_t)&a2[~v17];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>((uint64_t)(a2 - 2), (uint64_t)(a2 - 2), v24, v24, (uint64_t)(a4 + 3), (uint64_t)(a4 + 3), **v9);
          v25 = v23;
          v26 = v23;
          v14 = v22;
          v12 = v21;
          a7 = v20;
          a6 = v113;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(v25, v26, v18, v18, v24, v24, **v9);
          v27 = *(a2 - 1);
          *(a2 - 1) = *(_DWORD *)(v18 - 4);
          *(_DWORD *)(v18 - 4) = v27;
        }
        --a6;
        if ((a7 & 1) == 0)
        {
          v28 = *(a2 - 1);
          v9 = a5;
          v29 = **a5;
          v30 = *(float *)(v29 + 40 * v28 + 24);
          if (*(float *)(v29 + 40 * *a2 + 24) < v30)
            goto LABEL_31;
          if (v30 >= *(float *)(v29 + 40 * *a4 + 24))
          {
            v34 = a2 - 1;
            do
            {
              v32 = v34;
              if (v34 <= a4)
                break;
              --v34;
            }
            while (v30 >= *(float *)(v29 + 40 * *(v32 - 1) + 24));
          }
          else
          {
            v31 = a2;
            do
            {
              v32 = v31 - 1;
              v33 = *(float *)(v29 + 40 * *(v31 - 2) + 24);
              --v31;
            }
            while (v30 >= v33);
          }
          v35 = a4;
          if (v32 > a4)
          {
            v35 = a4;
            do
              v36 = *v35++;
            while (v30 < *(float *)(v29 + 40 * v36 + 24));
          }
          while (v35 < v32)
          {
            v37 = *(v32 - 1);
            *(v32 - 1) = *(v35 - 1);
            *(v35 - 1) = v37;
            do
            {
              v38 = *(v32 - 2);
              --v32;
            }
            while (v30 >= *(float *)(v29 + 40 * v38 + 24));
            do
              v39 = *v35++;
            while (v30 < *(float *)(v29 + 40 * v39 + 24));
          }
          if (v32 + 1 != a2)
            *(a2 - 1) = *v32;
          a7 = 0;
          *v32 = v28;
          a2 = v32;
          continue;
        }
        v28 = *(a2 - 1);
        v9 = a5;
        v29 = **a5;
        v30 = *(float *)(v29 + 40 * v28 + 24);
LABEL_31:
        v40 = 0;
        do
        {
          v41 = *(float *)(v29 + 40 * a2[v40 - 2] + 24);
          --v40;
        }
        while (v41 < v30);
        v42 = &a2[v40];
        v43 = a4;
        if (v40 == -1)
        {
          v43 = a4;
          do
          {
            if (v43 >= v42)
              break;
            v45 = *v43++;
          }
          while (*(float *)(v29 + 40 * v45 + 24) >= v30);
        }
        else
        {
          do
            v44 = *v43++;
          while (*(float *)(v29 + 40 * v44 + 24) >= v30);
        }
        v13 = &a2[v40];
        if (v43 < v42)
        {
          v46 = v43;
          do
          {
            v47 = *(v13 - 1);
            *(v13 - 1) = *(v46 - 1);
            *(v46 - 1) = v47;
            do
            {
              v48 = *(v13 - 2);
              --v13;
            }
            while (*(float *)(v29 + 40 * v48 + 24) < v30);
            do
              v49 = *v46++;
            while (*(float *)(v29 + 40 * v49 + 24) >= v30);
          }
          while (v46 < v13);
        }
        if (v13 + 1 != a2)
          *(a2 - 1) = *v13;
        *v13 = v28;
        if (v43 < v42)
        {
LABEL_50:
          std::__introsort<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>,false>(v14, a2, v13 + 1, v13 + 1, v9, a6, a7 & 1);
          a7 = 0;
          a1 = v13 + 1;
          goto LABEL_3;
        }
        v114 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(v14, (uint64_t)a2, (uint64_t)(v13 + 1), v13 + 1, v9);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>((uint64_t)v13, (uint64_t)v13, a3, a4, v9))
        {
          a1 = v13 + 1;
          if ((v114 & 1) != 0)
            goto LABEL_3;
          goto LABEL_50;
        }
        a3 = (uint64_t)(v13 + 1);
        a4 = v13 + 1;
        a1 = (_DWORD *)v112;
        if ((v114 & 1) == 0)
          goto LABEL_2;
        return;
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  unsigned int v8;
  float v9;
  float v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v7 = *(_DWORD *)(a4 - 4);
  v8 = *(_DWORD *)(a2 - 4);
  v9 = *(float *)(a7 + 40 * v7 + 24);
  v10 = *(float *)(a7 + 40 * v8 + 24);
  v11 = *(_DWORD *)(a6 - 4);
  v12 = *(float *)(a7 + 40 * v11 + 24);
  if (v9 >= v10)
  {
    if (v12 < v9)
    {
      *(_DWORD *)(a4 - 4) = v11;
      *(_DWORD *)(a6 - 4) = v7;
      v13 = *(_DWORD *)(a4 - 4);
      v14 = *(_DWORD *)(a2 - 4);
      if (*(float *)(a7 + 40 * v13 + 24) < *(float *)(a7 + 40 * v14 + 24))
      {
        *(_DWORD *)(a2 - 4) = v13;
        *(_DWORD *)(a4 - 4) = v14;
      }
    }
  }
  else
  {
    if (v12 >= v9)
    {
      *(_DWORD *)(a2 - 4) = v7;
      *(_DWORD *)(a4 - 4) = v8;
      v15 = *(_DWORD *)(a6 - 4);
      if (*(float *)(a7 + 40 * v15 + 24) >= v10)
        return;
      *(_DWORD *)(a4 - 4) = v15;
    }
    else
    {
      *(_DWORD *)(a2 - 4) = v11;
    }
    *(_DWORD *)(a6 - 4) = v8;
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t **a5)
{
  char v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  float v17;
  unsigned int *v18;
  _DWORD *v19;
  float v20;
  char v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  float v28;
  unsigned int v29;
  unsigned int v30;

  v8 = 1;
  switch((a2 - (uint64_t)a4) >> 2)
  {
    case 0:
    case 1:
      return v8 & 1;
    case 2:
      v9 = *(_DWORD *)(a2 - 4);
      if (*(float *)(**a5 + 40 * *a4 + 24) < *(float *)(**a5 + 40 * v9 + 24))
      {
        *(_DWORD *)(a2 - 4) = *a4;
        *a4 = v9;
      }
      goto LABEL_22;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(a1, a2, a2 - 4, a2 - 4, a3, (uint64_t)(a4 + 1), **a5);
      goto LABEL_22;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8, a3, (uint64_t)(a4 + 1), a5);
      goto LABEL_22;
    case 5:
      v22 = (unsigned int *)(a2 - 4);
      v23 = (unsigned int *)(a2 - 8);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8, a2 - 12, a2 - 12, a5);
      v24 = *(_DWORD *)(a2 - 16);
      v25 = **a5;
      if (*(float *)(v25 + 40 * *a4 + 24) < *(float *)(v25 + 40 * v24 + 24))
      {
        *(_DWORD *)(a2 - 16) = *a4;
        *a4 = v24;
        v26 = *(_DWORD *)(a2 - 16);
        v27 = *(_DWORD *)(a2 - 12);
        v28 = *(float *)(v25 + 40 * v26 + 24);
        if (v28 < *(float *)(v25 + 40 * v27 + 24))
        {
          *(_DWORD *)(a2 - 16) = v27;
          *(_DWORD *)(a2 - 12) = v26;
          v29 = *(_DWORD *)(a2 - 8);
          if (v28 < *(float *)(v25 + 40 * v29 + 24))
          {
            *v23 = v26;
            *(_DWORD *)(a2 - 12) = v29;
            v30 = *v22;
            if (v28 < *(float *)(v25 + 40 * *v22 + 24))
            {
              *v22 = v26;
              *v23 = v30;
            }
          }
        }
      }
LABEL_22:
      v8 = 1;
      return v8 & 1;
    default:
      v10 = a2 - 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8, **a5);
      v12 = (unsigned int *)(a2 - 12);
      if ((unsigned int *)(a2 - 12) == a4)
        goto LABEL_15;
      v11 = 0;
      v13 = **a5;
      v14 = (unsigned int *)(a2 - 12);
      break;
  }
  while (1)
  {
    v16 = *--v14;
    v15 = v16;
    v17 = *(float *)(v13 + 40 * v16 + 24);
    if (v17 < *(float *)(v13 + 40 * *(unsigned int *)(v10 - 4) + 24))
    {
      v18 = v12;
      while (1)
      {
        *(v18 - 1) = *v18;
        if (v18 + 1 == (unsigned int *)a2)
          break;
        v19 = v18 + 1;
        v20 = *(float *)(v13 + 40 * v18[1] + 24);
        ++v18;
        if (v17 >= v20)
          goto LABEL_13;
      }
      v19 = (_DWORD *)a2;
LABEL_13:
      *(v19 - 1) = v15;
      if (++v11 == 8)
        break;
    }
    v10 = (uint64_t)v12;
    v12 = v14;
    if (v14 == a4)
    {
LABEL_15:
      v21 = 1;
      goto LABEL_25;
    }
  }
  v21 = 0;
  LOBYTE(v11) = v14 == a4;
LABEL_25:
  v8 = v21 | v11;
  return v8 & 1;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t **a9)
{
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::ERClustering::GenerateClusterMetadataFromResults(unsigned long,Phase::SpatialModeler::SourcePreProcessData const&,std::vector<unsigned long long> const&,float,std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>> &,Phase::SpatialModeler::ClusteringResult &)::$_0 &,std::reverse_iterator<std::__wrap_iter<unsigned int *>>>(a1, a2, a3, a4, a5, a6, **a9);
  v13 = *(_DWORD *)(a8 - 4);
  v14 = *(_DWORD *)(a6 - 4);
  v15 = **a9;
  if (*(float *)(v15 + 40 * v13 + 24) < *(float *)(v15 + 40 * v14 + 24))
  {
    *(_DWORD *)(a6 - 4) = v13;
    *(_DWORD *)(a8 - 4) = v14;
    v16 = *(_DWORD *)(a6 - 4);
    v17 = *(_DWORD *)(a4 - 4);
    if (*(float *)(v15 + 40 * v16 + 24) < *(float *)(v15 + 40 * v17 + 24))
    {
      *(_DWORD *)(a4 - 4) = v16;
      *(_DWORD *)(a6 - 4) = v17;
      v18 = *(_DWORD *)(a4 - 4);
      v19 = *(_DWORD *)(a2 - 4);
      if (*(float *)(v15 + 40 * v18 + 24) < *(float *)(v15 + 40 * v19 + 24))
      {
        *(_DWORD *)(a2 - 4) = v18;
        *(_DWORD *)(a4 - 4) = v19;
      }
    }
  }
}

void Phase::SpatialModeler::ExecuteEarlyReflectionDebugCallbacks(Phase::SpatialModeler *this, Phase::SpatialModeler::RayTracerState *a2, Phase::Geometry::System *a3, Phase::Geometry::SystemState *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  __n128 v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  BOOL v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *EarlyReflections;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float v42;
  float v43;
  float v44;
  __float2 v45;
  __float2 v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  float v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t ClusterHash;
  int8x8_t v63;
  uint8x8_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float32x2_t *v71;
  __n128 v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  float *v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  __float2 v85;
  __float2 v86;
  float v87;
  float v88;
  float v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int32 *v94;
  unsigned __int32 *v95;
  unsigned __int32 v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  Phase::Geometry::System *v111;
  uint64_t *v112;
  uint64_t *v113;
  _QWORD *v114;
  _QWORD *v115;
  __int128 v116;
  void *__p;
  void *v118;
  unint64_t v119;
  __int128 v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  Phase::SpatialModeler::EarlyReflectionDetector *v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count *v163;
  unint64_t v164[2];

  if (!*((_QWORD *)a2 + 345))
    return;
  if (*((_QWORD *)this + 2367) == *((_QWORD *)this + 2366))
    return;
  v6 = Phase::Geometry::SystemDebugger::GetFromSystem((uint64_t)a2);
  if (!v6)
    return;
  v7 = *((_QWORD *)this + 2366);
  if (*((_QWORD *)this + 2367) == v7)
    return;
  v8 = 0;
  v9 = (_QWORD *)(v6 + 112);
  v110 = (_QWORD *)(v6 + 112);
  v111 = a3;
  while (1)
  {
    v10 = (unint64_t *)(v7 + 56 * v8);
    v164[0] = *v10;
    v11 = (_QWORD *)*v9;
    if (*v9)
      break;
    v21.n128_f32[0] = Phase::SpatialModeler::RayTracerState::GetSourceListenerResult(this, v164, (uint64_t)&v161);
LABEL_111:
    v98 = v163;
    if (v163)
    {
      p_shared_owners = (unint64_t *)&v163->__shared_owners_;
      do
        v100 = __ldaxr(p_shared_owners);
      while (__stlxr(v100 - 1, p_shared_owners));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v98->__on_zero_shared)(v98, v21);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v101 = v162;
    if (v162)
    {
      v102 = (unint64_t *)&v162->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v101->__on_zero_shared)(v101, v21);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    ++v8;
    v7 = *((_QWORD *)this + 2366);
    if (v8 >= 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 2367) - v7) >> 3))
      return;
  }
  v112 = (uint64_t *)(v7 + 56 * v8);
  v12 = v10[6];
  v113 = (uint64_t *)(v10 + 6);
  v13 = v9;
  v14 = (_QWORD *)*v9;
  do
  {
    v15 = v14[4];
    v16 = v15 >= v12;
    if (v15 >= v12)
      v17 = v14;
    else
      v17 = v14 + 1;
    if (v16)
      v13 = v14;
    v14 = (_QWORD *)*v17;
  }
  while (*v17);
  if (v13 == v9)
  {
    v20 = 0;
  }
  else
  {
    v18 = v13[4];
    v19 = v13 + 5;
    if (v18 <= v12)
      v20 = v19;
    else
      v20 = 0;
  }
  v22 = *((_QWORD *)this + 2822);
  v23 = v9;
  do
  {
    v24 = v11[4];
    v25 = v24 >= v22;
    if (v24 >= v22)
      v26 = v11;
    else
      v26 = v11 + 1;
    if (v25)
      v23 = v11;
    v11 = (_QWORD *)*v26;
  }
  while (*v26);
  v115 = v20;
  if (v23 == v9)
  {
    v114 = 0;
  }
  else
  {
    v27 = v23[4];
    v28 = v23 + 5;
    if (v27 <= v22)
      v29 = v28;
    else
      v29 = 0;
    v114 = v29;
  }
  v21.n128_f32[0] = Phase::SpatialModeler::RayTracerState::GetSourceListenerResult(this, v164, (uint64_t)&v161);
  if (!v115 || !v115[13])
    goto LABEL_68;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v136 = 0;
  v137 = 0;
  v135 = 0;
  v140 = 0;
  v141 = 0;
  v139 = 0;
  v143 = 0u;
  v144 = 0u;
  v145 = 0u;
  v146 = 0u;
  v147 = 0u;
  v148 = 0u;
  v149 = 0u;
  v150 = 0u;
  v151 = 0u;
  v152 = 0u;
  v153 = 0u;
  v154 = 0u;
  v159 = 0u;
  v160 = 0u;
  v157 = 0u;
  v158 = 0u;
  v155 = 0u;
  v156 = 0u;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  v30 = *((_QWORD *)this + 2822);
  if (*((_DWORD *)a3 + 34) <= v30)
    goto LABEL_123;
  v31 = *((_QWORD *)a3 + 15);
  if (*(_DWORD *)(v31 + 24 * v30 + 20) != HIDWORD(v30))
    goto LABEL_123;
  v32 = *(_QWORD *)(v31 + 24 * *((_QWORD *)this + 2822));
  if (!v32 || *(_DWORD *)v32 != 2)
    goto LABEL_123;
  v127 = *(_QWORD *)(v32 + 64);
  v128 = *(_DWORD *)(v32 + 72);
  v140 = 0;
  EarlyReflections = (uint64_t *)Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(v161, *((_DWORD *)this + 22), 0, 343.0);
  v124 = 0;
  v125 = 0;
  v126 = 0;
  std::vector<Phase::SpatialModeler::AudibleEarlyReflection>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::AudibleEarlyReflection*,Phase::SpatialModeler::AudibleEarlyReflection*>(&v124, *EarlyReflections, EarlyReflections[1], 0x8E38E38E38E38E39 * ((EarlyReflections[1] - *EarlyReflections) >> 5));
  LODWORD(v120) = 0;
  *(_QWORD *)((char *)&v120 + 4) = 0;
  v122 = 0;
  v123 = 0;
  v121 = 0;
  if (v125 != v124)
  {
    *(_QWORD *)&v120 = *(_QWORD *)((char *)v124 + 220);
    DWORD2(v120) = *((_DWORD *)v124 + 57);
    v122 = std::vector<Phase::Vector<float,3ul>>::__push_back_slow_path<Phase::Vector<float,3ul> const&>((uint64_t *)&v121, (_DWORD *)v124 + 58);
    v34 = v140;
    if (v140 < v141)
      goto LABEL_45;
LABEL_46:
    v37 = std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__push_back_slow_path<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource const&>(&v139, (uint64_t)&v120);
    goto LABEL_47;
  }
  v35 = v7 + 56 * v8;
  v36 = *(_DWORD *)(v35 + 32);
  *(_QWORD *)&v120 = *(_QWORD *)(v35 + 24);
  DWORD2(v120) = v36;
  v122 = std::vector<Phase::Vector<float,3ul>>::__push_back_slow_path<Phase::Vector<float,3ul> const&>((uint64_t *)&v121, &v127);
  v34 = v140;
  if (v140 >= v141)
    goto LABEL_46;
LABEL_45:
  std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__construct_one_at_end[abi:ne180100]<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource const&>((uint64_t)&v139, (uint64_t)&v120);
  v37 = v34 + 40;
LABEL_47:
  v140 = v37;
  v38 = (char *)v124;
  if ((int)(954437177 * ((unint64_t)(v125 - (_BYTE *)v124) >> 5)) >= 1)
  {
    v39 = 0;
    v40 = 0;
    do
    {
      LODWORD(v116) = 0;
      *(_QWORD *)((char *)&v116 + 4) = 0;
      v118 = 0;
      v119 = 0;
      __p = 0;
      v41 = (float *)&v38[288 * v40];
      v42 = v41[3];
      v43 = *((float *)this + 116);
      v44 = v41[1] * 0.017453;
      v45 = __sincosf_stret((float)(90.0 - v41[2]) * 0.017453);
      v46 = __sincosf_stret(v44);
      if (*(int *)v41 >= 1)
      {
        v47 = 0;
        v48 = 0;
        v49 = v39;
        do
        {
          v50 = &v38[v49];
          v51 = &v38[v49 + 148];
          if ((unint64_t)v47 >= v119)
          {
            v47 = (_DWORD *)std::vector<Phase::Vector<float,3ul>>::__push_back_slow_path<Phase::Vector<float,3ul> const&>((uint64_t *)&__p, v51);
            v38 = (char *)v124;
          }
          else
          {
            *v47 = *(_DWORD *)v51;
            v47[1] = *((_DWORD *)v50 + 38);
            v47[2] = *((_DWORD *)v50 + 39);
            v47 += 3;
          }
          v118 = v47;
          ++v48;
          v49 += 24;
        }
        while (v48 < *(int *)&v38[288 * v40]);
      }
      v52 = (float)(v42 * v43) * v45.__sinval;
      v53 = (float *)&v38[288 * v40];
      v54 = (float)(v46.__sinval * v52) + v53[58];
      v55 = (float)((float)(v42 * v43) * v45.__cosval) + v53[59];
      v56 = (float)(v46.__cosval * v52) + v53[60];
      *(float *)&v116 = v54;
      *((float *)&v116 + 1) = v55;
      *((float *)&v116 + 2) = v56;
      v57 = v140;
      if (v140 >= v141)
      {
        v58 = std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__push_back_slow_path<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource const&>(&v139, (uint64_t)&v116);
      }
      else
      {
        std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__construct_one_at_end[abi:ne180100]<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource const&>((uint64_t)&v139, (uint64_t)&v116);
        v58 = v57 + 40;
      }
      v140 = v58;
      if (__p)
      {
        v118 = __p;
        operator delete(__p);
      }
      ++v40;
      v38 = (char *)v124;
      v39 += 288;
    }
    while (v40 < (int)(954437177 * ((unint64_t)(v125 - (_BYTE *)v124) >> 5)));
    v37 = v140;
    v9 = v110;
    a3 = v111;
  }
  v130 = *v113;
  v131 = 0;
  v138 = 0xCCCCCCCCCCCCCCCDLL * ((v37 - v139) >> 3);
  *(_QWORD *)&v116 = &v129;
  v59 = v115[13];
  if (!v59)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v59 + 48))(v59, &v116);
  if (v121)
  {
    v122 = (uint64_t)v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::~RoomSimulationDebugView((Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)&v129);
LABEL_68:
  if (!v114 || !v114[17])
    goto LABEL_111;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v136 = 0;
  v137 = 0;
  v135 = 0;
  v140 = 0;
  v141 = 0;
  v139 = 0;
  v143 = 0u;
  v144 = 0u;
  v145 = 0u;
  v146 = 0u;
  v147 = 0u;
  v148 = 0u;
  v149 = 0u;
  v150 = 0u;
  v151 = 0u;
  v152 = 0u;
  v153 = 0u;
  v154 = 0u;
  v159 = 0u;
  v160 = 0u;
  v157 = 0u;
  v158 = 0u;
  v155 = 0u;
  v156 = 0u;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  v60 = *v112;
  v61 = operator new(8uLL);
  *v61 = v60;
  *((_QWORD *)&v120 + 1) = v61 + 1;
  v121 = v61 + 1;
  *(_QWORD *)&v120 = v61;
  ClusterHash = Phase::SpatialModeler::GetClusterHash((uint64_t **)&v120, *((_QWORD *)this + 2822));
  operator delete(v61);
  v63 = *(int8x8_t *)((char *)this + 19392);
  if (!*(_QWORD *)&v63)
    goto LABEL_87;
  v64 = (uint8x8_t)vcnt_s8(v63);
  v64.i16[0] = vaddlv_u8(v64);
  if (v64.u32[0] > 1uLL)
  {
    v65 = ClusterHash;
    if (*(_QWORD *)&v63 <= ClusterHash)
      v65 = ClusterHash % *(_QWORD *)&v63;
  }
  else
  {
    v65 = (*(_QWORD *)&v63 - 1) & ClusterHash;
  }
  v66 = *(_QWORD **)(*((_QWORD *)this + 2423) + 8 * v65);
  if (v66)
  {
    v67 = (_QWORD *)*v66;
    if (*v66)
    {
      do
      {
        v68 = v67[1];
        if (v68 == ClusterHash)
        {
          if (v67[2] == ClusterHash)
            break;
        }
        else
        {
          if (v64.u32[0] > 1uLL)
          {
            if (v68 >= *(_QWORD *)&v63)
              v68 %= *(_QWORD *)&v63;
          }
          else
          {
            v68 &= *(_QWORD *)&v63 - 1;
          }
          if (v68 != v65)
            goto LABEL_87;
        }
        v67 = (_QWORD *)*v67;
      }
      while (v67);
    }
  }
  else
  {
LABEL_87:
    v67 = 0;
  }
  v69 = *((_QWORD *)this + 2822);
  if (*((_DWORD *)a3 + 34) > v69)
  {
    v70 = *((_QWORD *)a3 + 15);
    if (*(_DWORD *)(v70 + 24 * v69 + 20) == HIDWORD(v69))
    {
      v71 = *(float32x2_t **)(v70 + 24 * *((_QWORD *)this + 2822));
      if (v71)
      {
        if (v71->i32[0] == 2)
        {
          v72.n128_u64[0] = (unint64_t)Phase::Inverse<float>(v71 + 6, (uint64_t)&v120);
          if (v67)
          {
            v73 = v67[14];
            *(_QWORD *)&v116 = 0;
            DWORD2(v116) = 0;
            std::vector<Phase::Vector<float,3ul>>::assign((char **)&v143, v73, &v116);
            LODWORD(v116) = 0;
            std::vector<float>::assign((char **)&v144 + 1, v73, &v116);
            v74 = v67[21];
            if (v74)
              v75 = *(_QWORD *)(v74 + 8);
            else
              v75 = 0;
            LODWORD(v124) = 0;
            std::vector<float>::vector(&v116, v75, &v124);
            std::vector<std::vector<float>>::assign((uint64_t *)&v146, v73, (uint64_t)&v116);
            if ((_QWORD)v116)
            {
              *((_QWORD *)&v116 + 1) = v116;
              operator delete((void *)v116);
            }
            LOBYTE(v116) = 0;
            std::vector<unsigned char>::assign((char **)&v147 + 1, v73, (char *)&v116);
            v76 = *((_QWORD *)this + 2822);
            v142 = v73;
            v131 = v76;
            v130 = *v113;
            if (v73)
            {
              v77 = 0;
              for (i = 0; i != v73; ++i)
              {
                v79 = (float *)(v67[9] + 12 * i);
                v80 = *v79;
                v81 = v79[1];
                v82 = (float)((float)(180.0 - v79[2]) - (float)(floorf((float)(180.0 - v79[2]) / 360.0) * 360.0)) + 0.0;
                if (v82 >= 360.0)
                  v82 = nextafterf(360.0, 0.0);
                v83 = v81 * 0.017453;
                v84 = v82 * 0.017453;
                v85 = __sincosf_stret(v83);
                v86 = __sincosf_stret(v84);
                *(float *)&v124 = (float)(v80 * v85.__sinval) * v86.__sinval;
                *((float *)&v124 + 1) = v80 * v85.__cosval;
                *(float *)&v125 = (float)(v80 * v85.__sinval) * v86.__cosval;
                Phase::operator*<float>((float *)&v120, (float *)&v124, (float *)&v116);
                v87 = *(float *)&v116;
                v88 = *((float *)&v116 + 2);
                v89 = sqrtf((float)((float)(v87 * v87) + (float)(*((float *)&v116 + 1) * *((float *)&v116 + 1)))+ (float)(v88 * v88));
                v90 = acosf(*((float *)&v116 + 1) / v89);
                v72.n128_f32[0] = atan2f(v87, v88);
                v72.n128_f32[0] = (float)((float)(180.0 - (float)(v72.n128_f32[0] * 57.296))
                                        - (float)(floorf((float)(180.0 - (float)(v72.n128_f32[0] * 57.296)) / 360.0)
                                                * 360.0))
                                + 0.0;
                if (v72.n128_f32[0] >= 360.0)
                  v72.n128_f32[0] = nextafterf(360.0, 0.0);
                v91 = v143 + 12 * i;
                *(float *)v91 = v89;
                *(float *)(v91 + 4) = v90 * 57.296;
                *(_DWORD *)(v91 + 8) = v72.n128_u32[0];
                v72.n128_u32[0] = *(_DWORD *)(v67[15] + 4 * i);
                *(_DWORD *)(*((_QWORD *)&v144 + 1) + 4 * i) = v72.n128_u32[0];
                *(_BYTE *)(*((_QWORD *)&v147 + 1) + i) = *(_BYTE *)(v67[26] + i);
                v92 = v67[21];
                v93 = *(_QWORD *)(v92 + 8);
                if (v93)
                {
                  v94 = *(unsigned __int32 **)(v146 + 24 * i);
                  v95 = (unsigned __int32 *)(v92 + v93 * v77 + 16);
                  do
                  {
                    v96 = *v95++;
                    v72.n128_u32[0] = v96;
                    *v94++ = v96;
                    --v93;
                  }
                  while (v93);
                }
                v77 += 4;
              }
            }
          }
          else
          {
            v131 = *((_QWORD *)this + 2822);
            v130 = *v113;
            v142 = 0;
          }
          *(_QWORD *)&v116 = &v129;
          v97 = v114[17];
          if (!v97)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, __int128 *, __n128))(*(_QWORD *)v97 + 48))(v97, &v116, v72);
          a3 = v111;
          Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::~RoomSimulationDebugView((Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)&v129);
          v9 = v110;
          goto LABEL_111;
        }
      }
    }
  }
LABEL_123:
  Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::~RoomSimulationDebugView((Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)&v129);
  v104 = v163;
  if (v163)
  {
    v105 = (unint64_t *)&v163->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v162;
  if (v162)
  {
    v108 = (unint64_t *)&v162->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
}

void sub_216598C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::~RoomSimulationDebugView((Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)&a40);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v40 - 184);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v40 - 200);
  _Unwind_Resume(a1);
}

char *std::vector<Phase::Vector<float,3ul>>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  char *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  BOOL v17;
  unint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 2) >= a2)
  {
    v13 = a1[1];
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - result) >> 2);
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - result) >> 2);
    if (v15)
    {
      v16 = result;
      do
      {
        *(_DWORD *)v16 = *a3;
        *((_DWORD *)v16 + 1) = a3[1];
        *((_DWORD *)v16 + 2) = a3[2];
        v16 += 12;
        --v15;
      }
      while (v15);
    }
    v17 = a2 >= v14;
    v18 = a2 - v14;
    if (v18 == 0 || !v17)
    {
      a1[1] = &result[12 * a2];
      return result;
    }
    v12 = &v13[12 * v18];
    do
    {
      *(_DWORD *)v13 = *a3;
      *((_DWORD *)v13 + 1) = a3[1];
      *((_DWORD *)v13 + 2) = a3[2];
      v13 += 12;
    }
    while (v13 != v12);
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 > 0x1555555555555555)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 2);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v9;
    result = std::vector<Phase::Vector<float,3ul>>::__vallocate[abi:ne180100](a1, v10);
    v11 = a1[1];
    v12 = &v11[12 * a2];
    do
    {
      *(_DWORD *)v11 = *a3;
      *((_DWORD *)v11 + 1) = a3[1];
      *((_DWORD *)v11 + 2) = a3[2];
      v11 += 12;
    }
    while (v11 != v12);
  }
  a1[1] = v12;
  return result;
}

char *std::vector<float>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 2;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 2;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_DWORD *)v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      v17 = &v13[4 * (a2 - v14)];
      v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<float>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[4 * a2];
    v12 = 4 * a2;
    do
    {
      *(_DWORD *)v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void std::vector<std::vector<float>>::assign(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;

  v6 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= a2)
  {
    v13 = (a1[1] - (uint64_t)v6) / 24;
    if (v13 >= a2)
      v14 = a2;
    else
      v14 = (a1[1] - (uint64_t)v6) / 24;
    for (; v14; --v14)
    {
      if (v6 != (char *)a3)
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v6, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 24;
    }
    if (a2 <= v13)
    {
      v18 = a1[1];
      v19 = *a1 + 24 * a2;
      if (v18 != v19)
      {
        v20 = a1[1];
        do
        {
          v22 = *(void **)(v20 - 24);
          v20 -= 24;
          v21 = v22;
          if (v22)
          {
            *(_QWORD *)(v18 - 16) = v21;
            operator delete(v21);
          }
          v18 = v20;
        }
        while (v20 != v19);
      }
      a1[1] = v19;
    }
    else
    {
      v15 = (_QWORD *)a1[1];
      v16 = &v15[3 * (a2 - v13)];
      v17 = -24 * v13 + 24 * a2;
      do
      {
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v15, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
        v15 += 3;
        v17 -= 24;
      }
      while (v17);
      a1[1] = (uint64_t)v16;
    }
  }
  else
  {
    std::vector<std::vector<float>>::__vdeallocate(a1);
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v7 <= a2)
      v7 = a2;
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    else
      v8 = v7;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, v8);
    v9 = (_QWORD *)a1[1];
    v10 = 3 * a2;
    v11 = &v9[3 * a2];
    v12 = 8 * v10;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v9 += 3;
      v12 -= 24;
    }
    while (v12);
    a1[1] = (uint64_t)v11;
  }
}

void sub_216599134(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<unsigned char>::assign(char **a1, unint64_t a2, char *a3)
{
  unint64_t v4;
  unint64_t v6;
  char *result;
  uint64_t v8;
  size_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  char *v16;
  char *v17;

  v4 = a2;
  v6 = (unint64_t)a1[2];
  result = *a1;
  if (v6 - (unint64_t)result >= a2)
  {
    v12 = a1[1] - result;
    if (v12 >= a2)
      v13 = a2;
    else
      v13 = a1[1] - result;
    for (; v13; --v13)
      *result++ = *a3;
    v14 = a2 >= v12;
    v15 = a2 - v12;
    if (v15 != 0 && v14)
    {
      v16 = a1[1];
      v17 = &v16[v15];
      do
      {
        *v16++ = *a3;
        --v15;
      }
      while (v15);
      a1[1] = v17;
    }
    else
    {
      a1[1] = &(*a1)[a2];
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v8 = 2 * v6;
    if (2 * v6 <= v4)
      v8 = v4;
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[v4];
    do
    {
      *v10++ = *a3;
      --v4;
    }
    while (v4);
    a1[1] = v11;
  }
  return result;
}

void Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::~RoomSimulationDebugView(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void **v14;

  v2 = (void *)*((_QWORD *)this + 53);
  if (v2)
  {
    *((_QWORD *)this + 54) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 50);
  if (v3)
  {
    *((_QWORD *)this + 51) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 47);
  if (v4)
  {
    *((_QWORD *)this + 48) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 44);
  if (v5)
  {
    *((_QWORD *)this + 45) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 39);
  if (v6)
  {
    *((_QWORD *)this + 40) = v6;
    operator delete(v6);
  }
  v14 = (void **)((char *)this + 288);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v7 = (void *)*((_QWORD *)this + 33);
  if (v7)
  {
    *((_QWORD *)this + 34) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 30);
  if (v8)
  {
    *((_QWORD *)this + 31) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 26);
  if (v9)
  {
    *((_QWORD *)this + 27) = v9;
    operator delete(v9);
  }
  v14 = (void **)((char *)this + 184);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v10 = (void *)*((_QWORD *)this + 20);
  if (v10)
  {
    *((_QWORD *)this + 21) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 17);
  if (v11)
  {
    *((_QWORD *)this + 18) = v11;
    operator delete(v11);
  }
  v14 = (void **)((char *)this + 104);
  std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__destroy_vector::operator()[abi:ne180100](&v14);
  v12 = (void *)*((_QWORD *)this + 9);
  if (v12)
  {
    *((_QWORD *)this + 10) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 4);
  if (v13)
  {
    *((_QWORD *)this + 5) = v13;
    operator delete(v13);
  }
}

void std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<Phase::Vector<float,3ul>>::__push_back_slow_path<Phase::Vector<float,3ul> const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *__p;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xAAAAAAAAAAAAAAALL)
    v9 = 0x1555555555555555;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Vector<float,3ul>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[12 * v4];
  __p = v10;
  v15 = v11;
  v17 = &v10[12 * v9];
  *(_DWORD *)v11 = *a2;
  *((_DWORD *)v11 + 1) = a2[1];
  *((_DWORD *)v11 + 2) = a2[2];
  v16 = v11 + 12;
  std::vector<Phase::Vector<float,3ul>>::__swap_out_circular_buffer(a1, &__p);
  v12 = a1[1];
  if (v16 != v15)
    v16 = &v15[(v16 - v15 - 12) % 0xCuLL];
  if (__p)
    operator delete(__p);
  return v12;
}

void sub_216599514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__construct_one_at_end[abi:ne180100]<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v3 = *(_DWORD *)a2;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = std::vector<Phase::Vector<float,3ul>>::__init_with_size[abi:ne180100]<Phase::Vector<float,3ul>*,Phase::Vector<float,3ul>*>((char *)(v3 + 16), *(_DWORD **)(a2 + 16), *(_DWORD **)(a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2));
  *(_QWORD *)(a1 + 8) = v3 + 40;
  return result;
}

void sub_2165995CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__push_back_slow_path<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v20;
  char *v21;
  _BYTE v22[24];
  _QWORD *v23;
  _QWORD v24[3];
  char i;
  __int128 v26;
  __int128 v27;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  v23 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v8 = &v7[40 * v3];
  v21 = v7;
  *(_QWORD *)v22 = v8;
  *(_QWORD *)&v22[8] = v8;
  *(_QWORD *)&v22[16] = &v7[40 * v6];
  *(_DWORD *)v8 = *(_DWORD *)a2;
  *((_DWORD *)v8 + 1) = *(_DWORD *)(a2 + 4);
  v9 = *(_DWORD *)(a2 + 8);
  *((_QWORD *)v8 + 2) = 0;
  v8 += 16;
  *((_DWORD *)v8 - 2) = v9;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  std::vector<Phase::Vector<float,3ul>>::__init_with_size[abi:ne180100]<Phase::Vector<float,3ul>*,Phase::Vector<float,3ul>*>(v8, *(_DWORD **)(a2 + 16), *(_DWORD **)(a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2));
  v10 = *(_QWORD *)v22;
  *(_QWORD *)&v22[8] += 40;
  v12 = *a1;
  v11 = a1[1];
  *(_QWORD *)&v27 = *(_QWORD *)v22;
  *((_QWORD *)&v27 + 1) = *(_QWORD *)v22;
  v26 = v27;
  v24[0] = a1 + 2;
  v24[1] = &v26;
  v24[2] = &v27;
  for (i = 0; v11 != v12; *((_QWORD *)&v27 + 1) -= 40)
  {
    v13 = *(_DWORD *)(v11 - 40);
    v11 -= 40;
    *(_DWORD *)(v10 - 40) = v13;
    *(_DWORD *)(v10 - 36) = *(_DWORD *)(v11 + 4);
    v14 = *(_DWORD *)(v11 + 8);
    *(_QWORD *)(v10 - 24) = 0;
    v15 = v10 - 24;
    *(_DWORD *)(v15 - 8) = v14;
    *(_QWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 16) = 0;
    std::vector<Phase::Vector<float,3ul>>::__init_with_size[abi:ne180100]<Phase::Vector<float,3ul>*,Phase::Vector<float,3ul>*>((char *)v15, *(_DWORD **)(v11 + 16), *(_DWORD **)(v11 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v11 + 24) - *(_QWORD *)(v11 + 16)) >> 2));
    v10 = *((_QWORD *)&v27 + 1) - 40;
  }
  i = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>,std::reverse_iterator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v24);
  v16 = a1[2];
  v17 = *(_OWORD *)&v22[8];
  v20 = *(_QWORD *)&v22[8];
  v18 = *(_OWORD *)a1;
  *a1 = v10;
  *(_OWORD *)v22 = v18;
  *(_OWORD *)(a1 + 1) = v17;
  *(_QWORD *)&v22[16] = v16;
  v21 = (char *)v18;
  std::__split_buffer<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::~__split_buffer((uint64_t)&v21);
  return v20;
}

void sub_2165997AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<Phase::Vector<float,3ul>>::__init_with_size[abi:ne180100]<Phase::Vector<float,3ul>*,Phase::Vector<float,3ul>*>(char *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<Phase::Vector<float,3ul>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v7[1] = a2[1];
      v7[2] = a2[2];
      v7 += 3;
      a2 += 3;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_21659983C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>,std::reverse_iterator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    for (i = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8); i != v3; i += 40)
    {
      v5 = *(void **)(i + 16);
      if (v5)
      {
        *(_QWORD *)(i + 24) = v5;
        operator delete(v5);
      }
    }
  }
  return a1;
}

uint64_t std::__split_buffer<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 40;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2165999BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

Phase::SpatialModeler::EarlyReflectionDetector *Phase::SpatialModeler::EarlyReflectionDetector::EarlyReflectionDetector(Phase::SpatialModeler::EarlyReflectionDetector *this, const Phase::SpatialModeler::EarlyReflectionDetector *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)std::unordered_map<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>::unordered_map((uint64_t)this, (uint64_t)a2);
  v4[5] = 0;
  v4[6] = 0;
  v4 += 5;
  v4[2] = 0;
  std::vector<Phase::SpatialModeler::AudibleEarlyReflection>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::AudibleEarlyReflection*,Phase::SpatialModeler::AudibleEarlyReflection*>(v4, *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 5));
  *((_QWORD *)this + 16) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return this;
}

void sub_216599AB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

float Phase::SpatialModeler::EarlyReflectionDetector::GetLastPathAngleError(Phase::SpatialModeler::EarlyReflectionDetector *this, const Phase::SpatialModeler::AudibleEarlyReflection *a2)
{
  float *v2;
  float v3;
  float v4;
  float v5;
  float result;

  v2 = (float *)((char *)this + 24 * *(int *)this);
  v3 = *((float *)this + 55) - v2[31];
  v4 = *((float *)this + 56) - v2[32];
  v5 = *((float *)this + 57) - v2[33];
  result = (float)((float)((float)(v3 * *((float *)this + 61)) + (float)(v4 * *((float *)this + 62)))
                 + (float)(v5 * *((float *)this + 63)))
         / (float)(sqrtf((float)((float)(v3 * v3) + (float)(v4 * v4)) + (float)(v5 * v5))
                 * sqrtf((float)((float)(*((float *)this + 61) * *((float *)this + 61))+ (float)(*((float *)this + 62) * *((float *)this + 62)))+ (float)(*((float *)this + 63) * *((float *)this + 63))));
  if (result < -1.0 || result > 1.0)
    return -1.0;
  return result;
}

void Phase::SpatialModeler::EarlyReflectionDetector::AddToScoreBoard(Phase::SpatialModeler::EarlyReflectionDetector *this, const Phase::SpatialModeler::AudibleEarlyReflection *a2)
{
  uint64_t v4;
  uint64_t v5;
  Phase::SpatialModeler::AudibleEarlyReflection *v6;
  unsigned int *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;

  if (*(int *)a2 < 1)
  {
    v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = (const Phase::SpatialModeler::AudibleEarlyReflection *)((char *)a2 + 160);
    do
    {
      ++v4;
      v5 += Phase::SpatialModeler::AudibleEarlyReflection::sPlaneHashWithBucketNormal(v6, (float *)v6 - 3) * v4;
      v6 = (Phase::SpatialModeler::AudibleEarlyReflection *)((char *)v6 + 24);
    }
    while (v4 < *(int *)a2);
  }
  v14 = v5;
  v7 = (unsigned int *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(this, (unint64_t *)&v14);
  if (v7)
  {
    Phase::SpatialModeler::AudibleEarlyReflection::operator+=(v7 + 8, (unsigned int *)a2, v8, v9, v10, v11, v12, v13);
  }
  else
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,Phase::SpatialModeler::AudibleEarlyReflection const&>((uint64_t)this, (unint64_t *)&v14, &v14, (uint64_t)a2);
    if (*((_QWORD *)this + 3) >= 0x64uLL)
      Phase::SpatialModeler::EarlyReflectionDetector::AutoSizeLimit(this);
  }
}

_QWORD *Phase::SpatialModeler::EarlyReflectionDetector::AutoSizeLimit(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  float *v3;
  uint64_t *i;

  v1 = this;
  v2 = this[2];
  while (v2)
  {
    if (*(float *)(v2 + 176) >= 0.001)
    {
      v2 = *(_QWORD *)v2;
    }
    else
    {
      this = (_QWORD *)std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(v1, (uint64_t *)v2);
      v2 = (uint64_t)this;
    }
  }
  if (v1[3] >= 0x65uLL)
  {
    do
    {
      v3 = (float *)v1[2];
      for (i = (uint64_t *)v3; v3; v3 = *(float **)v3)
      {
        if (v3[44] < *((float *)i + 44))
          i = (uint64_t *)v3;
      }
      this = (_QWORD *)std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(v1, i);
    }
    while (v1[3] > 0x64uLL);
  }
  return this;
}

char *Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(Phase::SpatialModeler::EarlyReflectionDetector *this, int a2, int a3, float a4)
{
  _BYTE *v6;
  _BYTE *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  __int16 v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int16 v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  float v83;
  float v84;
  float v85;
  unint64_t v86;
  float *v87;
  float *v88;
  float *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  float *v99;
  float *v100;
  unint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  double v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _DWORD *v112;
  _DWORD *v113;
  _DWORD *v114;
  _DWORD *v115;
  unsigned int *v116;
  unsigned int *v117;
  float v118;
  unsigned int *v119;
  unsigned int *v120;
  float v121;
  double v122;
  float32x2_t v123;
  float32x2_t v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  void *__p[2];
  char *v144;
  char *v145;
  char *v146;

  if (!a3)
    return (char *)this + 40;
  if (*((_QWORD *)this + 3))
  {
    v6 = (_BYTE *)*((_QWORD *)this + 8);
    if ((*((_QWORD *)this + 10) - (_QWORD)v6) >> 4 <= 0x9AAuLL)
    {
      v7 = (_BYTE *)*((_QWORD *)this + 9);
      v8 = (char *)operator new(0x9AB0uLL);
      v9 = &v8[(v7 - v6) & 0xFFFFFFFFFFFFFFF8];
      v10 = v9;
      if (v7 != v6)
      {
        v10 = &v8[(v7 - v6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v11 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v10 - 1) = v11;
          v10 -= 8;
        }
        while (v7 != v6);
      }
      *((_QWORD *)this + 8) = v10;
      *((_QWORD *)this + 9) = v9;
      *((_QWORD *)this + 10) = v8 + 39600;
      if (v6)
        operator delete(v6);
    }
    v12 = (_BYTE *)*((_QWORD *)this + 14);
    if (*((_QWORD *)this + 16) - (_QWORD)v12 <= 0x63FuLL)
    {
      v13 = (_BYTE *)*((_QWORD *)this + 15);
      v14 = (char *)operator new(0x640uLL);
      v15 = &v14[(v13 - v12) & 0xFFFFFFFFFFFFFFF0];
      v16 = v15;
      if (v13 != v12)
      {
        v17 = &v14[(v13 - v12) & 0xFFFFFFFFFFFFFFF0];
        do
        {
          v16 = v17 - 16;
          *((_OWORD *)v17 - 1) = *((_OWORD *)v13 - 1);
          v13 -= 16;
          v17 -= 16;
        }
        while (v13 != v12);
      }
      *((_QWORD *)this + 14) = v16;
      *((_QWORD *)this + 15) = v15;
      *((_QWORD *)this + 16) = v14 + 1600;
      if (v12)
        operator delete(v12);
    }
    v19 = (uint64_t *)((char *)this + 88);
    v18 = *((_QWORD *)this + 11);
    if (0x8E38E38E38E38E39 * ((*((_QWORD *)this + 13) - v18) >> 5) <= 0x63)
    {
      v20 = *((_QWORD *)this + 12) - v18;
      v146 = (char *)this + 104;
      __p[0] = operator new(0x7080uLL);
      __p[1] = (char *)__p[0] + v20;
      v144 = (char *)__p[0] + v20;
      v145 = (char *)__p[0] + 28800;
      std::vector<Phase::SpatialModeler::AudibleEarlyReflection>::__swap_out_circular_buffer((uint64_t *)this + 11, __p);
      if (__p[0])
        operator delete(__p[0]);
      v18 = *v19;
    }
    *((_QWORD *)this + 12) = v18;
    *((_QWORD *)this + 15) = *((_QWORD *)this + 14);
    *((_QWORD *)this + 9) = *((_QWORD *)this + 8);
    v21 = (float *)*((_QWORD *)this + 2);
    if (v21)
    {
      do
      {
        v22 = *((unsigned int *)v21 + 43);
        if ((_DWORD)v22)
        {
          v23 = v21 + 12;
          v24 = 0.0;
          do
          {
            v25 = *v23++;
            v24 = v24 + (float)(v25 * v25);
            --v22;
          }
          while (v22);
        }
        else
        {
          v24 = 0.0;
        }
        v21[78] = v21[44] * (float)(v24 / (float)(v21[11] * v21[11]));
        v26 = v21[66] - v21[63];
        v27 = v21[67] - v21[64];
        v21[74] = sqrtf((float)((float)(v26 * v26) + (float)(v27 * v27))+ (float)((float)(v21[68] - v21[65]) * (float)(v21[68] - v21[65])))/ a4;
        Phase::SpatialModeler::AudibleEarlyReflection::updateISPositionEstimate((Phase::SpatialModeler::AudibleEarlyReflection *)(v21 + 8), a4);
        if (v21[44] > 0.000001)
        {
          v29 = *((_QWORD *)this + 12);
          v28 = *((_QWORD *)this + 13);
          if (v29 >= v28)
          {
            v31 = 0x8E38E38E38E38E39 * ((uint64_t)(v29 - *v19) >> 5);
            v32 = v31 + 1;
            if (v31 + 1 > 0xE38E38E38E38E3)
LABEL_162:
              std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__throw_length_error[abi:ne180100]();
            v33 = 0x8E38E38E38E38E39 * ((uint64_t)(v28 - *v19) >> 5);
            if (2 * v33 > v32)
              v32 = 2 * v33;
            if (v33 >= 0x71C71C71C71C71)
              v34 = 0xE38E38E38E38E3;
            else
              v34 = v32;
            v146 = (char *)this + 104;
            if (v34)
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::AudibleEarlyReflection>>((uint64_t)this + 104, v34);
            else
              v35 = 0;
            v36 = &v35[288 * v31];
            __p[0] = v35;
            __p[1] = v36;
            v145 = &v35[288 * v34];
            std::allocator<Phase::SpatialModeler::AudibleEarlyReflection>::construct[abi:ne180100]<Phase::SpatialModeler::AudibleEarlyReflection,Phase::SpatialModeler::AudibleEarlyReflection const&>((uint64_t)v36, (uint64_t)(v21 + 8));
            v144 = v36 + 288;
            std::vector<Phase::SpatialModeler::AudibleEarlyReflection>::__swap_out_circular_buffer((uint64_t *)this + 11, __p);
            v30 = *((_QWORD *)this + 12);
            if (__p[0])
              operator delete(__p[0]);
          }
          else
          {
            std::allocator<Phase::SpatialModeler::AudibleEarlyReflection>::construct[abi:ne180100]<Phase::SpatialModeler::AudibleEarlyReflection,Phase::SpatialModeler::AudibleEarlyReflection const&>(*((_QWORD *)this + 12), (uint64_t)(v21 + 8));
            v30 = v29 + 288;
          }
          *((_QWORD *)this + 12) = v30;
          v37 = v30 - 288;
          v39 = (char *)*((_QWORD *)this + 15);
          v38 = *((_QWORD *)this + 16);
          if ((unint64_t)v39 >= v38)
          {
            v41 = (char *)*((_QWORD *)this + 14);
            v42 = (v39 - v41) >> 4;
            v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 60)
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            v44 = v38 - (_QWORD)v41;
            if (v44 >> 3 > v43)
              v43 = v44 >> 3;
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
              v45 = 0xFFFFFFFFFFFFFFFLL;
            else
              v45 = v43;
            if (v45)
            {
              if (v45 >> 60)
LABEL_161:
                std::__throw_bad_array_new_length[abi:ne180100]();
              v46 = (char *)operator new(16 * v45);
            }
            else
            {
              v46 = 0;
            }
            v47 = &v46[16 * v42];
            *(_QWORD *)v47 = v37;
            *((_DWORD *)v47 + 2) = 0;
            v48 = v47;
            if (v39 != v41)
            {
              do
              {
                *((_OWORD *)v48 - 1) = *((_OWORD *)v39 - 1);
                v48 -= 16;
                v39 -= 16;
              }
              while (v39 != v41);
              v39 = (char *)*((_QWORD *)this + 14);
            }
            v40 = v47 + 16;
            *((_QWORD *)this + 14) = v48;
            *((_QWORD *)this + 15) = v47 + 16;
            *((_QWORD *)this + 16) = &v46[16 * v45];
            if (v39)
              operator delete(v39);
          }
          else
          {
            *(_QWORD *)v39 = v37;
            *((_DWORD *)v39 + 2) = 0;
            v40 = v39 + 16;
          }
          *((_QWORD *)this + 15) = v40;
        }
        v21 = *(float **)v21;
      }
      while (v21);
      v49 = (char *)*((_QWORD *)this + 14);
      v50 = (char *)*((_QWORD *)this + 15);
      v51 = v50 - v49;
      if (v50 != v49)
      {
        v52 = &v49[v51 & 0xFFFFFFFFFFFFFFF0];
        if (v51 >= 17)
        {
          v53 = (unint64_t)((v51 >> 4) - 2) >> 1;
          v54 = v53 + 1;
          v55 = &v49[16 * v53];
          do
          {
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_0 &,std::__wrap_iter<Phase::SpatialModeler::EarlyReflectionDetector::AudibleEarlyReflectionWithStatus *>>((uint64_t)v49, v51 >> 4, v55);
            v55 -= 16;
            --v54;
          }
          while (v54);
        }
        if (v52 != v50)
        {
          v56 = &v49[v51 & 0xFFFFFFFFFFFFFFF0];
          do
          {
            if (*(float *)(*(_QWORD *)v49 + 280) < *(float *)(*(_QWORD *)v56 + 280))
            {
              v57 = *(_OWORD *)v56;
              *(_OWORD *)v56 = *(_OWORD *)v49;
              *(_OWORD *)v49 = v57;
              std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_0 &,std::__wrap_iter<Phase::SpatialModeler::EarlyReflectionDetector::AudibleEarlyReflectionWithStatus *>>((uint64_t)v49, v51 >> 4, v49);
            }
            v56 += 16;
          }
          while (v56 != v50);
        }
        if (v51 >= 17)
        {
          v58 = (unint64_t)v51 >> 4;
          do
          {
            v59 = 0;
            *(_OWORD *)__p = *(_OWORD *)v49;
            v60 = v49;
            do
            {
              v61 = v60;
              v60 += 16 * v59 + 16;
              v62 = 2 * v59;
              v59 = (2 * v59) | 1;
              v63 = v62 + 2;
              if (v63 < v58 && *(float *)(*((_QWORD *)v60 + 2) + 280) < *(float *)(*(_QWORD *)v60 + 280))
              {
                v60 += 16;
                v59 = v63;
              }
              *(_OWORD *)v61 = *(_OWORD *)v60;
            }
            while (v59 <= (uint64_t)((unint64_t)(v58 - 2) >> 1));
            v52 -= 16;
            if (v60 == v52)
            {
              *(_OWORD *)v60 = *(_OWORD *)__p;
            }
            else
            {
              *(_OWORD *)v60 = *(_OWORD *)v52;
              *(_OWORD *)v52 = *(_OWORD *)__p;
              v64 = v60 - v49 + 16;
              if (v64 >= 17)
              {
                v65 = (((unint64_t)v64 >> 4) - 2) >> 1;
                v66 = &v49[16 * v65];
                v67 = *(_QWORD *)v60;
                if (*(float *)(*(_QWORD *)v60 + 280) < *(float *)(*(_QWORD *)v66 + 280))
                {
                  v68 = *((_QWORD *)v60 + 1);
                  do
                  {
                    v69 = v60;
                    v60 = v66;
                    *(_OWORD *)v69 = *(_OWORD *)v66;
                    if (!v65)
                      break;
                    v65 = (v65 - 1) >> 1;
                    v66 = &v49[16 * v65];
                  }
                  while (*(float *)(v67 + 280) < *(float *)(*(_QWORD *)v66 + 280));
                  *(_QWORD *)v60 = v67;
                  *((_QWORD *)v60 + 1) = v68;
                }
              }
            }
          }
          while (v58-- > 2);
        }
      }
    }
    v72 = *((_QWORD *)this + 14);
    v71 = *((_QWORD *)this + 15);
    v73 = 1.5 / a4;
    if (v71 != v72)
    {
      v74 = 0;
      v75 = 0;
      do
      {
        v76 = (unsigned __int16)(v75 + 1);
        v77 = (v71 - v72) >> 4;
        v78 = v76;
        v79 = v75 + 1;
        if (v77 > v76)
        {
          do
          {
            v80 = *(_QWORD *)(v72 + 16 * v74);
            v81 = *(_QWORD *)(v72 + 16 * v78);
            if (*(_DWORD *)v80 == *(_DWORD *)v81)
            {
              v82 = *(float *)(v80 + 12) - *(float *)(v81 + 12);
              if (v82 < 0.0)
                v82 = -v82;
              if (v82 <= v73)
              {
                v83 = *(float *)(v80 + 268) - *(float *)(v81 + 268);
                v84 = *(float *)(v80 + 272) - *(float *)(v81 + 272);
                v85 = (float)((float)(v83 * v83) + (float)(v84 * v84))
                    + (float)((float)(*(float *)(v80 + 276) - *(float *)(v81 + 276))
                            * (float)(*(float *)(v80 + 276) - *(float *)(v81 + 276)));
                if (v85 < 2.25)
                {
                  v87 = (float *)*((_QWORD *)this + 9);
                  v86 = *((_QWORD *)this + 10);
                  if ((unint64_t)v87 >= v86)
                  {
                    v89 = (float *)*((_QWORD *)this + 8);
                    v90 = ((char *)v87 - (char *)v89) >> 3;
                    v91 = v90 + 1;
                    if ((unint64_t)(v90 + 1) >> 61)
                      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
                    v92 = v86 - (_QWORD)v89;
                    if (v92 >> 2 > v91)
                      v91 = v92 >> 2;
                    if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
                      v93 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v93 = v91;
                    if (v93)
                    {
                      if (v93 >> 61)
                        goto LABEL_161;
                      v94 = (char *)operator new(8 * v93);
                    }
                    else
                    {
                      v94 = 0;
                    }
                    v95 = &v94[8 * v90];
                    *(float *)v95 = v85;
                    *((_WORD *)v95 + 2) = v75;
                    *((_WORD *)v95 + 3) = v79;
                    v96 = v95;
                    if (v87 != v89)
                    {
                      do
                      {
                        v97 = *((_QWORD *)v87 - 1);
                        v87 -= 2;
                        *((_QWORD *)v96 - 1) = v97;
                        v96 -= 8;
                      }
                      while (v87 != v89);
                      v87 = (float *)*((_QWORD *)this + 8);
                    }
                    v98 = &v94[8 * v93];
                    v88 = (float *)(v95 + 8);
                    *((_QWORD *)this + 8) = v96;
                    *((_QWORD *)this + 9) = v95 + 8;
                    *((_QWORD *)this + 10) = v98;
                    if (v87)
                      operator delete(v87);
                  }
                  else
                  {
                    *v87 = v85;
                    *((_WORD *)v87 + 2) = v75;
                    v88 = v87 + 2;
                    *((_WORD *)v87 + 3) = v79;
                  }
                  *((_QWORD *)this + 9) = v88;
                  v72 = *((_QWORD *)this + 14);
                  v71 = *((_QWORD *)this + 15);
                }
              }
            }
            v78 = ++v79;
          }
          while (v79 < (unint64_t)((v71 - v72) >> 4));
          v77 = (v71 - v72) >> 4;
        }
        v74 = (unsigned __int16)++v75;
      }
      while (v77 > v76);
    }
    v99 = (float *)*((_QWORD *)this + 8);
    v100 = (float *)*((_QWORD *)this + 9);
    v101 = 126 - 2 * __clz(((char *)v100 - (char *)v99) >> 3);
    if (v100 == v99)
      v102 = 0;
    else
      v102 = v101;
    std::__introsort<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *,false>(v99, v100, v102, 1);
    v108 = *((_QWORD *)this + 8);
    v107 = *((_QWORD *)this + 9);
    if (v107 != v108)
    {
      v109 = 0;
      v110 = 0;
      do
      {
        v111 = *((_QWORD *)this + 14);
        v112 = (_DWORD *)(v111 + 16 * *(unsigned __int16 *)(v108 + v109 + 4));
        v113 = v112 + 2;
        if (v112[2] != 2)
        {
          v114 = (_DWORD *)(v111 + 16 * *(unsigned __int16 *)(v108 + v109 + 6));
          v115 = v114 + 2;
          if (v114[2] != 2)
          {
            v116 = *(unsigned int **)v112;
            v117 = *(unsigned int **)v114;
            v118 = *(float *)(*(_QWORD *)v112 + 12) - *(float *)(*(_QWORD *)v114 + 12);
            if (v118 < 0.0)
              v118 = -v118;
            if (v118 <= v73)
            {
              v119 = &v116[6 * *v116];
              v120 = &v117[6 * *v117];
              v121 = *((float *)v119 + 33) - *((float *)v120 + 33);
              v122 = *(double *)(v120 + 31);
              v123 = vsub_f32(*(float32x2_t *)(v119 + 31), *(float32x2_t *)&v122);
              v124 = vmul_f32(v123, v123);
              v124.f32[0] = vaddv_f32(v124);
              *(float *)&v103 = v124.f32[0] + (float)(v121 * v121);
              if (*(float *)&v103 < 2.25)
              {
                Phase::SpatialModeler::AudibleEarlyReflection::operator+=(v116, v117, v103, *(double *)&v124, v122, v104, v105, v106);
                *v113 = 1;
                *v115 = 2;
                v108 = *((_QWORD *)this + 8);
                v107 = *((_QWORD *)this + 9);
              }
            }
          }
        }
        ++v110;
        v109 += 8;
      }
      while (v110 < (v107 - v108) >> 3);
    }
    v125 = (_QWORD *)((char *)this + 40);
    v126 = *((_QWORD *)this + 5);
    v127 = *((_QWORD *)this + 14);
    v128 = (uint64_t *)*((_QWORD *)this + 15);
    if ((uint64_t *)v127 == v128)
    {
      *((_QWORD *)this + 6) = v126;
    }
    else
    {
      v129 = *((_QWORD *)this + 6);
      v130 = (uint64_t *)*((_QWORD *)this + 14);
      do
      {
        if (*((_DWORD *)v130 + 2) != 2)
        {
          v131 = *v130;
          if (v126 == v129)
          {
            v132 = v126;
          }
          else
          {
            v132 = v126;
            while (*(_QWORD *)(v132 + 256) != *(_QWORD *)(v131 + 256))
            {
              v132 += 288;
              if (v132 == v129)
              {
                v132 = v129;
                break;
              }
            }
          }
          if (v132 != v129)
          {
            v133 = v126 + 32 * ((uint64_t)(v132 - v126) >> 5);
            *(float *)(v131 + 12) = *(float *)(v133 + 12)
                                  + (float)((float)(*(float *)(v131 + 12) - *(float *)(v133 + 12)) * 0.05);
            *(float *)(v131 + 264) = *(float *)(v133 + 264)
                                   + (float)((float)(*(float *)(v131 + 264) - *(float *)(v133 + 264)) * 0.05);
          }
        }
        v130 += 2;
      }
      while (v130 != v128);
      *((_QWORD *)this + 6) = v126;
      v134 = (unint64_t *)((char *)this + 56);
      do
      {
        if (*(_DWORD *)(v127 + 8) != 2)
        {
          v135 = *(_QWORD *)v127;
          if (v126 >= *v134)
          {
            v136 = 0x8E38E38E38E38E39 * ((uint64_t)(v126 - *v125) >> 5);
            v137 = v136 + 1;
            if (v136 + 1 > 0xE38E38E38E38E3)
              goto LABEL_162;
            if (0x1C71C71C71C71C72 * ((uint64_t)(*v134 - *v125) >> 5) > v137)
              v137 = 0x1C71C71C71C71C72 * ((uint64_t)(*v134 - *v125) >> 5);
            if (0x8E38E38E38E38E39 * ((uint64_t)(*v134 - *v125) >> 5) >= 0x71C71C71C71C71)
              v138 = 0xE38E38E38E38E3;
            else
              v138 = v137;
            v146 = (char *)this + 56;
            if (v138)
              v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::AudibleEarlyReflection>>((uint64_t)this + 56, v138);
            else
              v139 = 0;
            v140 = &v139[288 * v136];
            __p[0] = v139;
            __p[1] = v140;
            v145 = &v139[288 * v138];
            std::allocator<Phase::SpatialModeler::AudibleEarlyReflection>::construct[abi:ne180100]<Phase::SpatialModeler::AudibleEarlyReflection,Phase::SpatialModeler::AudibleEarlyReflection const&>((uint64_t)v140, v135);
            v144 = v140 + 288;
            std::vector<Phase::SpatialModeler::AudibleEarlyReflection>::__swap_out_circular_buffer((uint64_t *)this + 5, __p);
            v126 = *((_QWORD *)this + 6);
            if (__p[0])
              operator delete(__p[0]);
          }
          else
          {
            std::allocator<Phase::SpatialModeler::AudibleEarlyReflection>::construct[abi:ne180100]<Phase::SpatialModeler::AudibleEarlyReflection,Phase::SpatialModeler::AudibleEarlyReflection const&>(v126, *(_QWORD *)v127);
            v126 += 288;
          }
          *((_QWORD *)this + 6) = v126;
        }
        v127 += 16;
      }
      while ((uint64_t *)v127 != v128);
    }
    return (char *)this + 40;
  }
  v141 = (char *)this + 88;
  *((_QWORD *)this + 12) = *((_QWORD *)this + 11);
  return v141;
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *a1 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x2199F9A28](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x2199F9CD4](a1 + 52);
  return a1;
}

uint64_t std::unordered_map<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,Phase::SpatialModeler::AudibleEarlyReflection> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_21659A860(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,Phase::SpatialModeler::AudibleEarlyReflection> const&>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (char *)operator new(0x140uLL);
  i = v12;
  v13 = 0;
  v14 = *a3;
  *((_QWORD *)v12 + 1) = v6;
  *((_QWORD *)v12 + 2) = v14;
  *((_DWORD *)v12 + 44) = *((_DWORD *)a3 + 40);
  *(_QWORD *)v12 = 0;
  v15 = *((_OWORD *)a3 + 8);
  *((_OWORD *)v12 + 8) = *((_OWORD *)a3 + 7);
  *((_OWORD *)v12 + 9) = v15;
  *((_OWORD *)v12 + 10) = *((_OWORD *)a3 + 9);
  v16 = *((_OWORD *)a3 + 4);
  *((_OWORD *)v12 + 4) = *((_OWORD *)a3 + 3);
  *((_OWORD *)v12 + 5) = v16;
  v17 = *((_OWORD *)a3 + 6);
  *((_OWORD *)v12 + 6) = *((_OWORD *)a3 + 5);
  *((_OWORD *)v12 + 7) = v17;
  v18 = *((_OWORD *)a3 + 2);
  *((_OWORD *)v12 + 2) = *((_OWORD *)a3 + 1);
  *((_OWORD *)v12 + 3) = v18;
  do
  {
    v19 = &v12[v13 * 8];
    *(_OWORD *)(v19 + 180) = *(_OWORD *)((char *)&a3[v13 + 20] + 4);
    *(_QWORD *)(v19 + 196) = *(uint64_t *)((char *)&a3[v13 + 22] + 4);
    v13 += 3;
  }
  while (v13 != 9);
  *(_OWORD *)(v12 + 252) = *(_OWORD *)((char *)a3 + 236);
  *(_OWORD *)(v12 + 268) = *(_OWORD *)((char *)a3 + 252);
  *((_DWORD *)v12 + 71) = *((_DWORD *)a3 + 67);
  *((_QWORD *)v12 + 36) = a3[34];
  *((_DWORD *)v12 + 74) = *((_DWORD *)a3 + 70);
  *(_OWORD *)(v12 + 300) = *(_OWORD *)((char *)a3 + 284);
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v7 || (float)(v21 * (float)v7) < v20)
  {
    v22 = 1;
    if (v7 >= 3)
      v22 = (v7 & (v7 - 1)) != 0;
    v23 = v22 | (2 * v7);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v25);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *i = *v27;
LABEL_40:
    *v27 = i;
    goto LABEL_41;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v26 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v28 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v28 >= v7)
        v28 %= v7;
    }
    else
    {
      v28 &= v7 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_21659AB0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::AudibleEarlyReflection>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,Phase::SpatialModeler::AudibleEarlyReflection const&>(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = *a3;
  v14 = (char *)operator new(0x140uLL);
  i = v14;
  v15 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_QWORD *)v14 + 2) = v13;
  *((_DWORD *)v14 + 44) = *(_DWORD *)(a4 + 144);
  *(_QWORD *)v14 = 0;
  v16 = *(_OWORD *)(a4 + 112);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(a4 + 96);
  *((_OWORD *)v14 + 9) = v16;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(a4 + 128);
  v17 = *(_OWORD *)(a4 + 48);
  *((_OWORD *)v14 + 4) = *(_OWORD *)(a4 + 32);
  *((_OWORD *)v14 + 5) = v17;
  v18 = *(_OWORD *)(a4 + 80);
  *((_OWORD *)v14 + 6) = *(_OWORD *)(a4 + 64);
  *((_OWORD *)v14 + 7) = v18;
  v19 = *(_OWORD *)(a4 + 16);
  *((_OWORD *)v14 + 2) = *(_OWORD *)a4;
  *((_OWORD *)v14 + 3) = v19;
  do
  {
    v20 = &v14[v15];
    *(_OWORD *)(v20 + 180) = *(_OWORD *)(a4 + v15 + 148);
    *(_QWORD *)(v20 + 196) = *(_QWORD *)(a4 + v15 + 164);
    v15 += 24;
  }
  while (v15 != 72);
  *(_OWORD *)(v14 + 252) = *(_OWORD *)(a4 + 220);
  *(_OWORD *)(v14 + 268) = *(_OWORD *)(a4 + 236);
  *((_DWORD *)v14 + 71) = *(_DWORD *)(a4 + 252);
  *((_QWORD *)v14 + 36) = *(_QWORD *)(a4 + 256);
  *((_DWORD *)v14 + 74) = *(_DWORD *)(a4 + 264);
  *(_OWORD *)(v14 + 300) = *(_OWORD *)(a4 + 268);
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v8 || (float)(v22 * (float)v8) < v21)
  {
    v23 = 1;
    if (v8 >= 3)
      v23 = (v8 & (v8 - 1)) != 0;
    v24 = v23 | (2 * v8);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v26);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *i = *v28;
LABEL_40:
    *v28 = i;
    goto LABEL_41;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v27 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v29 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v29 >= v8)
        v29 %= v8;
    }
    else
    {
      v29 &= v8 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_21659ADBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<Phase::SpatialModeler::AudibleEarlyReflection>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 288;
    v4 -= 288;
    std::allocator<Phase::SpatialModeler::AudibleEarlyReflection>::construct[abi:ne180100]<Phase::SpatialModeler::AudibleEarlyReflection,Phase::SpatialModeler::AudibleEarlyReflection const&>(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

float std::allocator<Phase::SpatialModeler::AudibleEarlyReflection>::construct[abi:ne180100]<Phase::SpatialModeler::AudibleEarlyReflection,Phase::SpatialModeler::AudibleEarlyReflection const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  float result;

  v2 = 0;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 112);
  v9 = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 96) = v7;
  v10 = a2 + 148;
  do
  {
    v11 = (_DWORD *)(a1 + 168 + v2);
    *(v11 - 5) = *(_DWORD *)(v10 + v2);
    *(v11 - 4) = *(_DWORD *)(v10 + v2 + 4);
    *(v11 - 3) = *(_DWORD *)(v10 + v2 + 8);
    *(v11 - 2) = *(_DWORD *)(v10 + v2 + 12);
    *(v11 - 1) = *(_DWORD *)(v10 + v2 + 16);
    *v11 = *(_DWORD *)(v10 + v2 + 20);
    v2 += 24;
  }
  while (v2 != 72);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  v12 = *(_QWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v12;
  *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 268);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  result = *(float *)(a2 + 280);
  *(float *)(a1 + 280) = result;
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_0 &,std::__wrap_iter<Phase::SpatialModeler::EarlyReflectionDetector::AudibleEarlyReflectionWithStatus *>>(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 >= 2)
  {
    v3 = (uint64_t)a3 - result;
    v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 4)
    {
      v5 = v3 >> 3;
      v6 = (v3 >> 3) | 1;
      v7 = (_QWORD *)(result + 16 * v6);
      v8 = v5 + 2;
      if (v8 < a2 && *(float *)(v7[2] + 280) < *(float *)(*v7 + 280))
      {
        v7 += 2;
        v6 = v8;
      }
      v9 = *a3;
      if (*(float *)(*a3 + 280) >= *(float *)(*v7 + 280))
      {
        v10 = a3[1];
        do
        {
          v11 = a3;
          a3 = v7;
          *v11 = *(_OWORD *)v7;
          if (v4 < v6)
            break;
          v12 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (_QWORD *)(result + 16 * v6);
          v13 = v12 + 2;
          if (v13 < a2 && *(float *)(v7[2] + 280) < *(float *)(*v7 + 280))
          {
            v7 += 2;
            v6 = v13;
          }
        }
        while (*(float *)(v9 + 280) >= *(float *)(*v7 + 280));
        *a3 = v9;
        a3[1] = v10;
      }
    }
  }
  return result;
}

float *std::__introsort<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *,false>(float *result, float *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  int v16;
  float v17;
  unint64_t v18;
  float *v19;
  float v20;
  float v21;
  float *v22;
  uint64_t v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  unint64_t v28;
  float *v29;
  float v30;
  int v31;
  uint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  float *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  float *v48;
  float v49;
  int v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  int64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  float *v58;
  float *v59;
  float v60;
  int v61;
  float *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float *v68;
  float *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  float *v74;
  float v75;
  int v76;
  float *v77;
  uint64_t v79;
  float v80;
  int v81;
  float *v82;
  uint64_t v83;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 2) < *(float *)v8)
        {
          v35 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v35;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>((float *)v8, (float *)(v8 + 8), a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>((float *)v8, (float *)(v8 + 8), (float *)(v8 + 16), (_QWORD *)a2 - 1);
      case 5uLL:
        v36 = (float *)(v8 + 16);
        v37 = (uint64_t *)(v8 + 24);
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>((float *)v8, (float *)(v8 + 8), (float *)(v8 + 16), (_QWORD *)(v8 + 24));
        if (*(a2 - 2) < *(float *)(v8 + 24))
        {
          v38 = *v37;
          *v37 = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v38;
          if (*(float *)v37 < *v36)
          {
            v39 = *(_QWORD *)v36;
            v40 = *v37;
            *(_QWORD *)v36 = *v37;
            *v37 = v39;
            if (*(float *)(v8 + 8) > *(float *)&v40)
            {
              v41 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = v40;
              *(_QWORD *)(v8 + 16) = v41;
              if (*(float *)v8 > *(float *)&v40)
              {
                v42 = *(_QWORD *)v8;
                *(_QWORD *)v8 = v40;
                *(_QWORD *)(v8 + 8) = v42;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v43 = (float *)(v8 + 8);
          v45 = (float *)v8 == a2 || v43 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v45)
            {
              v46 = 0;
              v47 = v8;
              do
              {
                v48 = v43;
                v49 = *(float *)(v47 + 8);
                if (v49 < *(float *)v47)
                {
                  v50 = *(_DWORD *)(v47 + 12);
                  v51 = v46;
                  while (1)
                  {
                    *(_QWORD *)(v8 + v51 + 8) = *(_QWORD *)(v8 + v51);
                    if (!v51)
                      break;
                    v52 = *(float *)(v8 + v51 - 8);
                    v51 -= 8;
                    if (v52 <= v49)
                    {
                      v53 = v8 + v51 + 8;
                      goto LABEL_78;
                    }
                  }
                  v53 = v8;
LABEL_78:
                  *(float *)v53 = v49;
                  *(_DWORD *)(v53 + 4) = v50;
                }
                v43 = v48 + 2;
                v46 += 8;
                v47 = (unint64_t)v48;
              }
              while (v48 + 2 != a2);
            }
          }
          else if (!v45)
          {
            do
            {
              v79 = (uint64_t)v43;
              v80 = *(float *)(v7 + 8);
              if (v80 < *(float *)v7)
              {
                v81 = *(_DWORD *)(v7 + 12);
                do
                {
                  v82 = v43;
                  v83 = *((_QWORD *)v43 - 1);
                  v43 -= 2;
                  *(_QWORD *)v82 = v83;
                }
                while (*(v82 - 4) > v80);
                *v43 = v80;
                *((_DWORD *)v43 + 1) = v81;
              }
              v43 = (float *)(v79 + 8);
              v7 = v79;
            }
            while ((float *)(v79 + 8) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((float *)v8 != a2)
          {
            v54 = (v10 - 2) >> 1;
            v55 = v54;
            do
            {
              v56 = v55;
              if (v54 >= v55)
              {
                v57 = (2 * v55) | 1;
                v58 = (float *)(v8 + 8 * v57);
                if (2 * v56 + 2 < (uint64_t)v10 && *v58 < v58[2])
                {
                  v58 += 2;
                  v57 = 2 * v56 + 2;
                }
                v59 = (float *)(v8 + 8 * v56);
                v60 = *v59;
                if (*v58 >= *v59)
                {
                  v61 = *((_DWORD *)v59 + 1);
                  do
                  {
                    v62 = v59;
                    v59 = v58;
                    *(_QWORD *)v62 = *(_QWORD *)v58;
                    if (v54 < v57)
                      break;
                    v63 = 2 * v57;
                    v57 = (2 * v57) | 1;
                    v58 = (float *)(v8 + 8 * v57);
                    v64 = v63 + 2;
                    if (v64 < (uint64_t)v10 && *v58 < v58[2])
                    {
                      v58 += 2;
                      v57 = v64;
                    }
                  }
                  while (*v58 >= v60);
                  *v59 = v60;
                  *((_DWORD *)v59 + 1) = v61;
                }
              }
              v55 = v56 - 1;
            }
            while (v56);
            v65 = (unint64_t)v9 >> 3;
            do
            {
              v66 = 0;
              v67 = *(_QWORD *)v8;
              v68 = (float *)v8;
              do
              {
                v69 = v68;
                v68 += 2 * v66 + 2;
                v70 = 2 * v66;
                v66 = (2 * v66) | 1;
                v71 = v70 + 2;
                if (v71 < v65 && *v68 < v68[2])
                {
                  v68 += 2;
                  v66 = v71;
                }
                *(_QWORD *)v69 = *(_QWORD *)v68;
              }
              while (v66 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
              a2 -= 2;
              if (v68 == a2)
              {
                *(_QWORD *)v68 = v67;
              }
              else
              {
                *(_QWORD *)v68 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v67;
                v72 = (uint64_t)v68 - v8 + 8;
                if (v72 >= 9)
                {
                  v73 = (((unint64_t)v72 >> 3) - 2) >> 1;
                  v74 = (float *)(v8 + 8 * v73);
                  v75 = *v68;
                  if (*v74 < *v68)
                  {
                    v76 = *((_DWORD *)v68 + 1);
                    do
                    {
                      v77 = v68;
                      v68 = v74;
                      *(_QWORD *)v77 = *(_QWORD *)v74;
                      if (!v73)
                        break;
                      v73 = (v73 - 1) >> 1;
                      v74 = (float *)(v8 + 8 * v73);
                    }
                    while (*v74 < v75);
                    *v68 = v75;
                    *((_DWORD *)v68 + 1) = v76;
                  }
                }
              }
            }
            while (v65-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = (float *)(v8 + 8 * (v10 >> 1));
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>((float *)(v7 + 8 * (v10 >> 1)), (float *)v7, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>((float *)v7, (float *)(v7 + 8 * (v10 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>((float *)(v7 + 8), v12 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>((float *)(v7 + 16), (float *)(v7 + 8 + 8 * v11), a2 - 6);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>(v12 - 2, v12, (float *)(v7 + 8 + 8 * v11));
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = *(float *)v7;
          if (*(float *)(v7 - 8) < *(float *)v7)
            goto LABEL_12;
          if (*(a2 - 2) <= v14)
          {
            v28 = v7 + 8;
            do
            {
              v8 = v28;
              if (v28 >= (unint64_t)a2)
                break;
              v28 += 8;
            }
            while (*(float *)v8 <= v14);
          }
          else
          {
            v8 = v7;
            do
            {
              v27 = *(float *)(v8 + 8);
              v8 += 8;
            }
            while (v27 <= v14);
          }
          v29 = a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = a2;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v30 > v14);
          }
          v31 = *(_DWORD *)(v7 + 4);
          while (v8 < (unint64_t)v29)
          {
            v32 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v29;
            *(_QWORD *)v29 = v32;
            do
            {
              v33 = *(float *)(v8 + 8);
              v8 += 8;
            }
            while (v33 <= v14);
            do
            {
              v34 = *(v29 - 2);
              v29 -= 2;
            }
            while (v34 > v14);
          }
          if (v8 - 8 != v7)
            *(_QWORD *)v7 = *(_QWORD *)(v8 - 8);
          a4 = 0;
          *(float *)(v8 - 8) = v14;
          *(_DWORD *)(v8 - 4) = v31;
          continue;
        }
        v14 = *(float *)v7;
LABEL_12:
        v15 = 0;
        v16 = *(_DWORD *)(v7 + 4);
        do
        {
          v17 = *(float *)(v7 + v15 + 8);
          v15 += 8;
        }
        while (v17 < v14);
        v18 = v7 + v15;
        v19 = a2;
        if (v15 == 8)
        {
          v19 = a2;
          do
          {
            if (v18 >= (unint64_t)v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (v20 >= v14);
        }
        v8 = v7 + v15;
        if (v18 < (unint64_t)v19)
        {
          v22 = v19;
          do
          {
            v23 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v22;
            *(_QWORD *)v22 = v23;
            do
            {
              v24 = *(float *)(v8 + 8);
              v8 += 8;
            }
            while (v24 < v14);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
            }
            while (v25 >= v14);
          }
          while (v8 < (unint64_t)v22);
        }
        if (v8 - 8 != v7)
          *(_QWORD *)v7 = *(_QWORD *)(v8 - 8);
        *(float *)(v8 - 8) = v14;
        *(_DWORD *)(v8 - 4) = v16;
        if (v18 < (unint64_t)v19)
        {
LABEL_31:
          result = (float *)std::__introsort<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *,false>(v7, v8 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>(v7, v8 - 8);
        result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>(v8, (uint64_t)a2);
        if (!(_DWORD)result)
        {
          if (v26)
            continue;
          goto LABEL_31;
        }
        a2 = (float *)(v8 - 8);
        if (!v26)
          goto LABEL_2;
        return result;
    }
  }
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *result)
  {
    if (v4 < v3)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      if (*a2 < *result)
      {
        v7 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v7;
      }
    }
  }
  else
  {
    v5 = *(_QWORD *)result;
    if (v4 >= v3)
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v5;
      if (*a3 >= *(float *)&v5)
        return result;
      *(_QWORD *)a2 = *(_QWORD *)a3;
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a3;
    }
    *(_QWORD *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  int v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)a1)
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (_QWORD *)(a2 - 8));
      return 1;
    case 5:
      v16 = (float *)(a1 + 16);
      v17 = (uint64_t *)(a1 + 24);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (_QWORD *)(a1 + 24));
      if (*(float *)(a2 - 8) < *(float *)(a1 + 24))
      {
        v18 = *v17;
        *v17 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v18;
        if (*(float *)v17 < *v16)
        {
          v19 = *(_QWORD *)v16;
          v20 = *v17;
          *(_QWORD *)v16 = *v17;
          *v17 = v19;
          if (*(float *)(a1 + 8) > *(float *)&v20)
          {
            v21 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v20;
            *(_QWORD *)(a1 + 16) = v21;
            if (*(float *)a1 > *(float *)&v20)
            {
              v22 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v20;
              *(_QWORD *)(a1 + 8) = v22;
            }
          }
        }
      }
      return 1;
    default:
      v7 = (float *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v8 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
    {
      v12 = *(_DWORD *)(v8 + 4);
      v13 = v9;
      while (1)
      {
        *(_QWORD *)(a1 + v13 + 24) = *(_QWORD *)(a1 + v13 + 16);
        if (v13 == -16)
          break;
        v14 = *(float *)(a1 + v13 + 8);
        v13 -= 8;
        if (v14 <= v11)
        {
          v15 = a1 + v13 + 24;
          goto LABEL_13;
        }
      }
      v15 = a1;
LABEL_13:
      *(float *)v15 = v11;
      *(_DWORD *)(v15 + 4) = v12;
      if (++v10 == 8)
        return v8 + 8 == a2;
    }
    v7 = (float *)v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2)
      return 1;
  }
}

float *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>(float *a1, float *a2, float *a3, _QWORD *a4)
{
  float *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(int,BOOL,float)::$_1 &,Phase::SpatialModeler::EarlyReflectionDetector::AERpair *>(a1, a2, a3);
  if (*(float *)a4 < *a3)
  {
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v9;
    if (*a3 < *a2)
    {
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      if (*a2 < *a1)
      {
        v11 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v11;
      }
    }
  }
  return result;
}

uint64_t *Phase::SpatialModeler::EarlyReflectionsSimulationImpl::AllocClusterQueryState@<X0>(Phase::SpatialModeler::EarlyReflectionsSimulationImpl *this@<X0>, Phase::SpatialModeler::EarlyReflectionsSimulation *a2@<X1>, uint64_t *a3@<X8>)
{
  char *v6;
  char *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  _BYTE v14[32];
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*((_QWORD *)a2 + 11) + 48))
    v6 = (char *)this + 26640;
  else
    v6 = (char *)this + 1344;
  v7 = v6 + 25256;
  v8 = (void *)Phase::SpatialModeler::SingleBlockAllocator::Alloc((Phase::SpatialModeler::SingleBlockAllocator *)(v6 + 25256), 137856, 0x10uLL);
  bzero(v8, 0x21A80uLL);
  Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState::ClusterQueryState((Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState *)v8);
  v15[0] = &off_24D57C668;
  v15[1] = v7;
  v16 = v15;
  v13 = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v15);
  v9 = v16;
  if (v16 == v15)
  {
    v10 = 4;
    v9 = v15;
    goto LABEL_8;
  }
  if (v16)
  {
    v10 = 5;
LABEL_8:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v11 = (uint64_t)v13;
  v13[9] = *((_QWORD *)this + 3);
  *(_QWORD *)(v11 + 137808) = Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationBegin;
  v13 = 0;
  *a3 = v11;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a3 + 1), (uint64_t)v14);
  return std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v13);
}

uint64_t Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationBegin@<X0>(float32x2_t *this@<X0>, Phase::SpatialModeler::RoomSimulation *a2@<X1>, Phase::SpatialModeler::Query *a3@<X2>, Phase::Logger *a4@<X8>)
{
  uint64_t InstancePtr;
  Phase::Logger *v10;
  Phase::Logger *v11;
  NSObject *v12;
  NSObject *v13;
  _BYTE *v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  Phase::SpatialModeler::RayTracerState *v18;
  float32x2_t *v19;
  uint64_t v20;
  Phase::Logger *v21;
  Phase::Logger *v23;
  uint64_t v24;
  float32x2_t *v25;
  int v26;
  BOOL v27;
  NSObject *v28;
  void **v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  std::align_val_t v40;
  void *v41;
  void *v42;
  uint64_t *v43;
  void *v44;
  float32x2_t *v45;
  Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t i;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  BOOL v66;
  NSObject *v67;
  float32x2_t *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  float32x2_t v87;
  float v88;
  float v89;
  uint64_t v90;
  float *v91;
  float v92;
  float v93;
  float v94;
  unint64_t v95;
  uint64_t NextAvailable;
  uint64_t *v97;
  Phase::Logger *v98;
  _OWORD *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  NSObject *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  float v114;
  float v115;
  double v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  float v124;
  NSObject *v125;
  int v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  char *v134;
  __int128 v135;
  void *v136;
  uint64_t v137;
  std::align_val_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t *v146;
  _QWORD v147[3];
  int v148;
  _BYTE v149[32];
  _BYTE v150[32];
  _QWORD v151[3];
  int v152;
  _BYTE v153[32];
  _BYTE v154[32];
  _BYTE v155[32];
  _BYTE v156[24];
  int v157;
  os_signpost_id_t *v158;
  Phase::Logger *v159;
  _BYTE v160[24];
  int v161;
  std::align_val_t v162[2];
  uint64_t v163;
  uint64_t v164;
  std::align_val_t *v165;
  float v166[8];
  unint64_t v167;
  void *__p[2];
  char v169;
  unint64_t v170;
  _BYTE buf[48];
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  _OWORD v177[2];
  uint64_t v178;

  v178 = *MEMORY[0x24BDAC8D0];
  InstancePtr = Phase::Logger::GetInstancePtr((Phase::Logger *)this);
  v10 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 208));
  v159 = v10;
  v11 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v10);
  if (*((_BYTE *)v11 + 1192))
  {
    v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11)
                                                                                        + 1184)));
    v13 = v12;
    if ((unint64_t)v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v13, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v10, "Phase_RoomSimulation_EarlyReflectionsBegin", "EarlyReflectionsBegin", buf, 2u);
    }

  }
  v158 = (os_signpost_id_t *)&v159;
  Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationBeginInitCommon((Phase::SpatialModeler::RoomSimulationImpl *)this, a2, a3, (uint64_t)v156);
  if (v157 == 2)
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v155, (uint64_t)v156);
    Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationBegin(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, &v158, (uint64_t)v155);
    v14 = v155;
LABEL_20:
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v14);
    return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v156);
  }
  v15 = (float *)((char *)a3 + 112804);
  v16 = *((_QWORD *)a2 + 8);
  v17 = *((_QWORD *)a2 + 11);
  Phase::SpatialModeler::RoomSimulationImpl::ParseOptionalProperties((uint64_t)this, v16, v17, (uint64_t *)a3 + 16940, (float *)a3 + 28218, (float *)a3 + 28215, (uint64_t)buf);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>>((uint64_t)v156, (uint64_t)buf);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
  if (v157 == 2)
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v154, (uint64_t)v156);
    Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationBegin(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, &v158, (uint64_t)v154);
    v14 = v154;
    goto LABEL_20;
  }
  if (*(_BYTE *)(v17 + 48))
    v19 = this + 3340;
  else
    v19 = this + 178;
  if (*v15 <= 0.0)
  {
    Phase::SpatialModeler::RayTracerState::State::operator=((uint64_t)&v19[62], (uint64_t)a3 + 113248);
    Phase::SpatialModeler::EarlyReflectionsSimulationImpl::ClusterEarlyReflections((Phase::SpatialModeler::EarlyReflectionsSimulationImpl *)v153, (Phase::SpatialModeler::RoomSimulation *)this, a2, a3);
    Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationBegin(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, &v158, (uint64_t)v153);
    v14 = v153;
    goto LABEL_20;
  }
  if (*(_BYTE *)(v17 + 48))
  {
    v20 = (*(uint64_t (**)(float32x2_t *, float))(*(_QWORD *)this + 104))(this, *v15);
    if (v20 && *(_QWORD *)(v20 + 19408))
    {
      Phase::SpatialModeler::RayTracerState::operator=((uint64_t)&this[3340], v20);
      v21 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationImpl::CheckClusterQueryInput((uint64_t)this, a2, (uint64_t)v160);
      if (v161 == 2)
      {
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v151, (uint64_t)v160);
LABEL_153:
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v160);
        Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationBegin(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, &v158, (uint64_t)v151);
        v14 = v151;
        goto LABEL_20;
      }
      if (this[5766])
      {
        v143 = *((_QWORD *)a2 + 8);
        v32 = *((_QWORD *)a2 + 11);
        v33 = (uint64_t *)*((_QWORD *)a2 + 12);
        v34 = (int)*(double *)(v32 + 40);
        *(_QWORD *)&v35 = 0x101010101010101;
        *((_QWORD *)&v35 + 1) = 0x101010101010101;
        v177[0] = v35;
        v177[1] = v35;
        v36 = *(_QWORD *)(v32 + 144);
        v37 = *(_QWORD *)(v32 + 96);
        if (v34 <= 1)
          v38 = 1;
        else
          v38 = v34;
        v162[0] = *(std::align_val_t *)(v32 + 144);
        v164 = 8;
        v165 = v162;
        *(_QWORD *)v166 = &v164;
        Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput>(unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(v36, (uint64_t)&v165, __p);
        v39 = ((v38 - (v36 + v37)) & ((v38 - ((int)v36 + (int)v37)) >> 31)) + v36;
        v142 = v37;
        v140 = v39 & ~(v39 >> 31);
        v40 = v37 + v140;
        v41 = __p[0];
        __p[0] = 0;
        *(_QWORD *)buf = v41;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&__p[1]);
        *(_QWORD *)&buf[40] = v36;
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)__p);
        v141 = v33 + 13;
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::operator=[abi:ne180100](v33 + 13, (uint64_t *)buf);
        v33[18] = *(_QWORD *)&buf[40];
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
        v165 = (std::align_val_t *)v40;
        v162[0] = 16;
        Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup>(unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>((Phase::Logger *)__p, v40, &v165, v162);
        v42 = __p[0];
        __p[0] = 0;
        *(_QWORD *)buf = v42;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&__p[1]);
        *(_QWORD *)&buf[40] = v40;
        std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)__p);
        v146 = v33 + 1;
        std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100](v33 + 1, (uint64_t *)buf);
        v33[6] = *(_QWORD *)&buf[40];
        std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
        v162[0] = v40;
        v164 = 1;
        v165 = v162;
        *(_QWORD *)v166 = &v164;
        Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL>(unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(v40, (uint64_t)&v165, __p);
        v43 = v33;
        v44 = __p[0];
        __p[0] = 0;
        *(_QWORD *)buf = v44;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&__p[1]);
        v138 = v40;
        *(_QWORD *)&buf[40] = v40;
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)__p);
        v145 = v33 + 7;
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100](v33 + 7, (uint64_t *)buf);
        v33[12] = *(_QWORD *)&buf[40];
        v45 = (float32x2_t *)std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
        v47 = *(_QWORD *)(v32 + 96);
        v139 = v33;
        if (v47)
        {
          v48 = v33[6];
          if (v47 >= v48)
            v49 = v33[6];
          else
            v49 = *(_QWORD *)(v32 + 96);
          if (v49)
          {
            v50 = 0;
            for (i = 0; i != v49; ++i)
            {
              v52 = (__int128 *)(*(_QWORD *)(v32 + 56) + v50);
              v53 = *v146 + v50;
              v54 = *v52;
              *(_QWORD *)(v53 + 16) = *((_QWORD *)v52 + 2);
              *(_OWORD *)v53 = v54;
              *(_DWORD *)(v53 + 24) = *((_DWORD *)v52 + 6);
              *(_DWORD *)(v53 + 28) = *((_DWORD *)v52 + 7);
              *(_DWORD *)(v53 + 32) = *((_DWORD *)v52 + 8);
              *(_DWORD *)(v53 + 36) = *((_DWORD *)v52 + 9);
              *(_DWORD *)(v53 + 40) = *((_DWORD *)v52 + 10);
              *(_DWORD *)(v53 + 44) = *((_DWORD *)v52 + 11);
              *(_DWORD *)(v53 + 48) = *((_DWORD *)v52 + 12);
              *(_DWORD *)(v53 + 52) = *((_DWORD *)v52 + 13);
              v45 = (float32x2_t *)memcpy((void *)(v53 + 56), (char *)v52 + 56, 0x109uLL);
              v55 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + v50);
              if (v55 <= 0x1F)
                *((_BYTE *)v177 + v55) = 0;
              *(_BYTE *)(*v145 + i) = 0;
              v50 += 336;
            }
            v43 = v33;
            v48 = v33[6];
          }
          if (v49 < v48)
          {
            v56 = 336 * v49;
            do
            {
              v57 = (_QWORD *)(v43[1] + v56);
              *v57 = 0;
              v57[1] = 0;
              *(_BYTE *)(v43[7] + v49++) = 0;
              v56 += 336;
            }
            while (v49 < v43[6]);
          }
          if (*(_QWORD *)(v32 + 96))
          {
            v58 = 0;
            v59 = 0;
            do
            {
              v60 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v45)
                                                               + 1184));
              v45 = (float32x2_t *)os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG);
              if ((_DWORD)v45)
              {
                v61 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + v58);
                v62 = *(_QWORD *)(v32 + 96);
                *(_DWORD *)buf = 136316162;
                *(_QWORD *)&buf[4] = "EarlyReflectionsSimulationImpl.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 751;
                *(_WORD *)&buf[18] = 2048;
                *(_QWORD *)&buf[20] = v59;
                *(_WORD *)&buf[28] = 2048;
                *(_QWORD *)&buf[30] = v61;
                *(_WORD *)&buf[38] = 2048;
                *(_QWORD *)&buf[40] = v62;
                _os_log_impl(&dword_2164CC000, v60, OS_LOG_TYPE_DEBUG, "%25s:%-5d ClusterCachedEarlyReflections Previous render group exists; input render group index %zu id "
                  "%llu, number of previous render groups %zu",
                  buf,
                  0x30u);
              }
              ++v59;
              v58 += 336;
            }
            while (v59 < *(_QWORD *)(v32 + 96));
          }
        }
        else
        {
          Phase::SpatialModeler::getRendererIdsInERClusteringResults((Phase::SpatialModeler *)&this[3340], (char **)buf);
          v70 = v33[6];
          v45 = *(float32x2_t **)buf;
          v71 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 4;
          if (v71 >= v70)
            v71 = v33[6];
          if (v71)
          {
            v72 = 0;
            v73 = 0;
            v74 = v71;
            do
            {
              *(_OWORD *)(*v146 + v72) = *(_OWORD *)v45[v73].f32;
              v45 = *(float32x2_t **)buf;
              v75 = *(_QWORD *)(*(_QWORD *)buf + v73 * 8);
              if (v75 <= 0x1F)
                *((_BYTE *)v177 + v75) = 0;
              v72 += 336;
              v73 += 2;
              --v74;
            }
            while (v74);
            v70 = v33[6];
          }
          if (v71 < v70)
          {
            v76 = 336 * v71;
            do
            {
              v77 = (_QWORD *)(v33[1] + v76);
              *v77 = 0;
              v77[1] = 0;
              ++v71;
              v76 += 336;
            }
            while (v71 < v33[6]);
            v45 = *(float32x2_t **)buf;
          }
          if (v45)
          {
            *(_QWORD *)&buf[8] = v45;
            operator delete(v45);
          }
        }
        if (!*(_QWORD *)(v32 + 144))
        {
          v79 = 0;
          v80 = v139;
LABEL_144:
          if (v79 <= v142 - 1)
            v127 = v142 - 1;
          else
            v127 = v79;
          if (v127 < v80[6])
          {
            v165 = (std::align_val_t *)(v127 + 1);
            v162[0] = 16;
            Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup>(unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>((Phase::Logger *)buf, v127 + 1, &v165, v162);
            v128 = *(void **)buf;
            *(_QWORD *)buf = 0;
            __p[0] = v128;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&__p[1], (uint64_t)&buf[8]);
            v170 = v127 + 1;
            std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
            v163 = 1;
            v164 = v127 + 1;
            v162[0] = (std::align_val_t)&v164;
            v162[1] = (std::align_val_t)&v163;
            Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL>(unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(v127 + 1, (uint64_t)v162, buf);
            v129 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            v165 = (std::align_val_t *)v129;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v166, (uint64_t)&buf[8]);
            v167 = v127 + 1;
            std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
            v130 = 0;
            v131 = v127 + 1;
            v132 = 56;
            do
            {
              v133 = (_QWORD *)(*v146 + v132);
              v134 = (char *)__p[0] + v132;
              v135 = *(_OWORD *)(v133 - 7);
              *((_QWORD *)v134 - 5) = *(v133 - 5);
              *(_OWORD *)(v134 - 56) = v135;
              *((_DWORD *)v134 - 8) = *((_DWORD *)v133 - 8);
              *((_DWORD *)v134 - 7) = *((_DWORD *)v133 - 7);
              *((_DWORD *)v134 - 6) = *((_DWORD *)v133 - 6);
              *((_DWORD *)v134 - 5) = *((_DWORD *)v133 - 5);
              *((_DWORD *)v134 - 4) = *((_DWORD *)v133 - 4);
              *((_DWORD *)v134 - 3) = *((_DWORD *)v133 - 3);
              *((_DWORD *)v134 - 2) = *((_DWORD *)v133 - 2);
              *((_DWORD *)v134 - 1) = *((_DWORD *)v133 - 1);
              memcpy(v134, v133, 0x109uLL);
              *((_BYTE *)v165 + v130) = *(_BYTE *)(*v145 + v130);
              ++v130;
              v132 += 336;
            }
            while (v131 != v130);
            v136 = __p[0];
            __p[0] = 0;
            *(_QWORD *)buf = v136;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&__p[1]);
            *(_QWORD *)&buf[40] = v170;
            std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)__p, v146);
            v170 = v139[6];
            std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100](v146, (uint64_t *)buf);
            v139[6] = *(_QWORD *)&buf[40];
            std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
            v137 = (uint64_t)v165;
            v165 = 0;
            *(_QWORD *)buf = v137;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)v166);
            *(_QWORD *)&buf[40] = v167;
            std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)&v165, v145);
            v167 = v139[12];
            std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100](v145, (uint64_t *)buf);
            v139[12] = *(_QWORD *)&buf[40];
            std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
            std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v165);
            std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)__p);
          }
          Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryCleanupCommon((Phase::SpatialModeler::RoomSimulationImpl *)this, a2, a3, v46);
          v126 = 1;
          goto LABEL_152;
        }
        v78 = 0;
        v79 = 0;
        v144 = 16;
        v80 = v139;
        v81 = v143;
        while (1)
        {
          v82 = *(_QWORD *)(v32 + 104);
          v83 = v82 + 304 * v78;
          v84 = *(_QWORD *)(v83 + 144);
          if (*(_DWORD *)(v81 + 136) <= v84)
            break;
          v85 = *(_QWORD *)(v143 + 120);
          if (*(_DWORD *)(v85 + 24 * v84 + 20) != HIDWORD(v84))
            break;
          v45 = *(float32x2_t **)(v85 + 24 * *(_QWORD *)(v83 + 144));
          if (!v45 || v45->i32[0] != 3)
            break;
          v86 = this[6190].f32[0] - v45[9].f32[0];
          v87 = vsub_f32(this[6189], v45[8]);
          v88 = sqrtf(vaddv_f32(vmul_f32(v87, v87)) + (float)(v86 * v86));
          if (v88 <= 1000000.0)
            v89 = v88;
          else
            v89 = 1000000.0;
          v90 = *(unsigned int *)(v83 + 140);
          if ((_DWORD)v90)
          {
            v91 = (float *)(v82 + v144);
            v92 = -3.4028e38;
            do
            {
              v93 = *v91++;
              v94 = v93;
              if (v92 < v93)
                v92 = v94;
              --v90;
            }
            while (v90);
          }
          else
          {
            v92 = -3.4028e38;
          }
          v162[0] = *(std::align_val_t *)(*(_QWORD *)&this[5765] + 16);
          *(_OWORD *)__p = xmmword_2166F8020;
          LODWORD(v164) = 0;
          LODWORD(v163) = 2139095039;
          Phase::SpatialModeler::getClosestERClusterToSourceInClusteringResults(v45, &this[3340], v162, __p, &v164, (float *)&v163);
          if ((int)v140 < 1 || *(float *)&v163 < 0.005)
          {
            v109 = v80[13];
            v111 = (unint64_t *)(v109 + 16 * v78);
            *v111 = 0;
            v112 = v80[6];
            if (v112)
            {
              v110 = 0;
              v113 = *v146;
              while (*(void **)v113 != __p[0] || *(void **)(v113 + 8) != __p[1])
              {
                ++v110;
                v113 += 336;
                if (v112 == v110)
                  goto LABEL_124;
              }
              *(_BYTE *)(*v145 + v110) = 0;
              *(_BYTE *)(v113 + 320) = 1;
              *v111 = v110;
              if (v79 <= v110)
                v79 = v110;
            }
            else
            {
LABEL_124:
              v110 = 0;
            }
          }
          else if (v142 >= v138)
          {
            v109 = *v141;
            *(_QWORD *)(*v141 + 16 * v78) = v79;
            v110 = v79;
          }
          else
          {
            v95 = v79;
            NextAvailable = Phase::SpatialModeler::IndexStore<32ul,1ull,0ull>::GetNextAvailable((uint64_t)v177);
            v97 = (uint64_t *)(*v146 + 336 * v142);
            *v97 = NextAvailable;
            v97[1] = 0;
            *(_QWORD *)(*v141 + 16 * v78) = v142;
            if (v79 <= v142)
              v95 = v142;
            *(float *)&v165 = v92;
            *((float *)&v165 + 1) = v92;
            v166[0] = v92;
            v98 = (Phase::Logger *)Phase::Subbands<float>::Subbands((uint64_t)buf, &v165, 3);
            v99 = (_OWORD *)(*v146 + 336 * v142);
            v100 = *(_OWORD *)buf;
            v101 = *(_OWORD *)&buf[16];
            v102 = v172;
            v99[14] = *(_OWORD *)&buf[32];
            v99[15] = v102;
            v99[12] = v100;
            v99[13] = v101;
            v103 = v173;
            v104 = v174;
            v105 = v176;
            v99[18] = v175;
            v99[19] = v105;
            v99[16] = v103;
            v99[17] = v104;
            v106 = *v146 + 336 * v142;
            *(std::align_val_t *)(v106 + 184) = v162[0];
            *(_BYTE *)(v106 + 320) = 1;
            *(_BYTE *)(*v145 + v142) = 1;
            v107 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v98) + 1184));
            v79 = v95;
            v45 = (float32x2_t *)os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG);
            if ((_DWORD)v45)
            {
              v108 = *(_QWORD *)(*v146 + 336 * v142);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "EarlyReflectionsSimulationImpl.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 866;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v108;
              *(_WORD *)&buf[28] = 2048;
              *(_QWORD *)&buf[30] = v78;
              _os_log_impl(&dword_2164CC000, v107, OS_LOG_TYPE_DEBUG, "%25s:%-5d ClusterCachedEarlyReflections setting NEW render group ID %llu to submix %llu", buf, 0x26u);
            }
            ++v142;
            v109 = *v141;
            v110 = *(_QWORD *)(*v141 + 16 * v78);
            LODWORD(v140) = v140 - 1;
            v80 = v139;
          }
          v114 = (float)(fmaxf(v89, 1.0) * -0.5) + -6.0;
          if (v114 >= *(float *)&v164)
            v115 = *(float *)&v164;
          else
            v115 = (float)(v114 + *(float *)&v164) * 0.5;
          v116 = v115;
          *(double *)(v109 + 16 * v78 + 8) = v116;
          if (v110 < v80[6])
          {
            v117 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v45)
                                                              + 1184));
            v45 = (float32x2_t *)os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG);
            v80 = v139;
            if ((_DWORD)v45)
            {
              v118 = *(_QWORD *)(*(_QWORD *)(v32 + 104) + 304 * v78);
              v119 = (uint64_t *)(*v141 + 16 * v78);
              v121 = *v119;
              v120 = v119[1];
              v122 = *(_QWORD *)(*v146 + 336 * v121);
              v123 = *(unsigned __int8 *)(v32 + 48);
              *(_DWORD *)buf = 136316674;
              *(_QWORD *)&buf[4] = "EarlyReflectionsSimulationImpl.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 892;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v118;
              *(_WORD *)&buf[28] = 2048;
              *(_QWORD *)&buf[30] = v122;
              *(_WORD *)&buf[38] = 2048;
              *(_QWORD *)&buf[40] = v121;
              LOWORD(v172) = 2048;
              *(_QWORD *)((char *)&v172 + 2) = v120;
              WORD5(v172) = 1024;
              HIDWORD(v172) = v123;
              _os_log_impl(&dword_2164CC000, v117, OS_LOG_TYPE_DEBUG, "%25s:%-5d ClusterCachedEarlyReflections end Submix %llu assigned to render group %llu at index %lu, send level %f attack query %d", buf, 0x40u);
            }
            v109 = *v141;
            v116 = *(double *)(*v141 + 16 * v78 + 8);
          }
          v124 = v116;
          v81 = v143;
          if (*(_QWORD *)(v143 + 904))
            v124 = v124 + (float)(*(float *)(v143 + 928) * (float)(0.0 - v124));
          *(double *)(v109 + 16 * v78++ + 8) = v124;
          v144 += 304;
          if (v78 >= *(_QWORD *)(v32 + 144))
            goto LABEL_144;
        }
        v125 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v45) + 1184));
        if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "EarlyReflectionsSimulationImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 785;
          _os_log_impl(&dword_2164CC000, v125, OS_LOG_TYPE_ERROR, "%25s:%-5d ClusterCachedEarlyReflections: Query input source not found in Geo Layer", buf, 0x12u);
        }
        v68 = this + 9;
        v69 = 6;
      }
      else
      {
        v67 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v21) + 1184));
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "EarlyReflectionsSimulationImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 700;
          _os_log_impl(&dword_2164CC000, v67, OS_LOG_TYPE_ERROR, "%25s:%-5d ER attack graph called ClusterCachedEarlyReflections but mERClusteringResults is empty", buf, 0x12u);
        }
        v68 = this + 9;
        v69 = 4;
      }
      v151[0] = v69;
      v151[1] = v68;
      v126 = 2;
LABEL_152:
      v152 = v126;
      goto LABEL_153;
    }
  }
  else
  {
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationBeginHandleSustainQueryCommon((Phase::SpatialModeler::RoomSimulationImpl *)this, a2, a3, (Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState *)&this[178], v18);
    v24 = 0;
    v25 = this + 3029;
    do
    {
      v26 = v25->u8[v24];
      if (v25->i8[v24])
        v27 = 1;
      else
        v27 = v24 == 18;
      ++v24;
    }
    while (!v27);
    if (v26)
      goto LABEL_31;
    if (this[202].i8[3])
      goto LABEL_40;
    v63 = 0;
    v64 = (char *)&this[3031] + 3;
    do
    {
      v65 = v64[v63];
      if (v64[v63])
        v66 = 1;
      else
        v66 = v63 == 18;
      ++v63;
    }
    while (!v66);
    if (v65)
    {
LABEL_31:
      if (!this[3308].i8[0] || this[193].f32[0] != *((float *)a3 + 28218) || this[184].f32[1] != *v15)
      {
        v28 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v23)
                                                                                            + 1184)));
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          Phase::SpatialModeler::RoomSimulationLogging::MakeInfoString((uint64_t)&this[178], this[4].i32[0]);
          v29 = v169 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "EarlyReflectionsSimulationImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 203;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v29;
          _os_log_impl(&dword_2164CC000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
          if (v169 < 0)
            operator delete(__p[0]);
        }

      }
    }
    else
    {
LABEL_40:
      Phase::SpatialModeler::RayTracerState::State::operator=((uint64_t)&this[240], (uint64_t)a3 + 113248);
      Phase::SpatialModeler::EarlyReflectionsSimulationImpl::ClusterEarlyReflections((Phase::SpatialModeler::EarlyReflectionsSimulationImpl *)v149, (Phase::SpatialModeler::RoomSimulation *)this, a2, a3);
      Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationBegin(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()((Phase::Logger *)v150, &v158, (uint64_t)v149);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v150);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v149);
    }
  }
  v30 = *(_DWORD *)(v16 + 168)
     && !*(_BYTE *)(v16 + 932)
     && *(_QWORD *)&this[6] <= (unint64_t)((uint64_t)(*(_QWORD *)&v19[2617] - *(_QWORD *)&v19[2616]) >> 2);
  Phase::SpatialModeler::RoomSimulationImpl::PrepareRayTrace(a3, (Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState *)v19, (Phase::SpatialModeler::RayTracerState *)this[7].u32[1], v30);
  v31 = operator new(8uLL);
  *v31 = a3;
  memset(buf, 0, 24);
  std::vector<Phase::Geometry::SceneQueryBatch *>::__init_with_size[abi:ne180100]<Phase::Geometry::SceneQueryBatch **,Phase::Geometry::SceneQueryBatch **>(buf, v31, (uint64_t)(v31 + 1), 1uLL);
  operator delete(v31);
  memset(v147, 0, sizeof(v147));
  std::vector<Phase::Geometry::SceneQueryBatch *>::__init_with_size[abi:ne180100]<Phase::Geometry::SceneQueryBatch **,Phase::Geometry::SceneQueryBatch **>(v147, *(const void **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
  v148 = 3;
  Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationBegin(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, &v158, (uint64_t)v147);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v147);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v156);
}

void sub_21659CD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&STACK[0x210]);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a60);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RunCullQuery(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(*(_QWORD *)(a1 + 96) + 8) = 0;
  *(_DWORD *)(a2 + 24) = 1;
}

void Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RunClusterQuery(Phase::Logger *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v8;
  uint64_t (**v9)(Phase::Logger *, uint64_t, uint64_t);
  uint64_t InstancePtr;
  Phase::Logger *v11;
  Phase::Logger *v12;
  NSObject *v13;
  NSObject *v14;
  os_signpost_id_t v15;
  Phase::Logger *v16;
  Phase::Logger *v17;
  NSObject *v18;
  NSObject *v19;
  os_signpost_id_t v20;
  uint8_t v21[16];
  uint8_t buf[16];

  if (a3)
  {
    if (*(_BYTE *)(*(_QWORD *)(a2 + 88) + 48))
      v8 = (char *)a1 + 26640;
    else
      v8 = (char *)a1 + 1344;
    v9 = (uint64_t (**)(Phase::Logger *, uint64_t, uint64_t))(a3 + 137808);
    if (*(uint64_t (**)@<X0>(float32x2_t *@<X0>, Phase::SpatialModeler::RoomSimulation *@<X1>, Phase::SpatialModeler::Query *@<X2>, Phase::Logger *@<X8>))(a3 + 137808) == Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationBegin)
    {
      InstancePtr = Phase::Logger::GetInstancePtr(a1);
      v11 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 208));
      *((_QWORD *)v8 + 2966) = v11;
      v12 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v11);
      if (*((_BYTE *)v12 + 1192))
      {
        v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v12)
                                                                                            + 1184)));
        v14 = v13;
        v15 = *((_QWORD *)v8 + 2966);
        if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_2164CC000, v14, OS_SIGNPOST_INTERVAL_BEGIN, v15, "Phase_RoomSimulation_ERClusterQuery", "EarlyReflectionsClusterQuery", buf, 2u);
        }

      }
    }
    v16 = (Phase::Logger *)(*v9)(a1, a2, a3);
    if (*(_DWORD *)(a4 + 24) == 1)
    {
      v17 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v16);
      if (*((_BYTE *)v17 + 1192))
      {
        v18 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v17)
                                                                                            + 1184)));
        v19 = v18;
        v20 = *((_QWORD *)v8 + 2966);
        if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
        {
          *(_WORD *)v21 = 0;
          _os_signpost_emit_with_name_impl(&dword_2164CC000, v19, OS_SIGNPOST_INTERVAL_END, v20, "Phase_RoomSimulation_ERClusterQuery", (const char *)&unk_21676613F, v21, 2u);
        }

      }
    }
  }
  else
  {
    *(_QWORD *)a4 = 1;
    *(_QWORD *)(a4 + 8) = (char *)a1 + 72;
    *(_DWORD *)(a4 + 24) = 2;
  }
}

void sub_21659D044(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RunSpatialQuery(uint64_t a1@<X0>, Phase::SpatialModeler::RoomSimulation *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t InstancePtr;
  Phase::Logger *v7;
  Phase::Logger *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  Phase::Logger *v12;
  Phase::Logger *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  Phase::Logger *v17;
  Phase::Logger *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  const Phase::SpatialModeler::RayTracerState *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x2_t *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  float v40;
  NSObject *v41;
  Phase::Logger *v42;
  int8x8_t v43;
  unint64_t v44;
  uint8x8_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  NSObject *v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  Phase::Logger *v54;
  Phase::Geometry::SystemState *v55;
  uint64_t v56;
  float v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  BOOL v63;
  __int32 v64;
  float v65;
  char v66;
  Phase::Logger *v67;
  Phase::Logger *v68;
  NSObject *v69;
  NSObject *v70;
  Phase::Logger *v71;
  Phase::Logger *v72;
  NSObject *v73;
  NSObject *v74;
  Phase::Logger *v75;
  uint64_t v76;
  Phase::Logger *v77;
  Phase::Logger *v78;
  _BYTE *v79;
  uint64_t v80;
  _BYTE *v81;
  NSObject *v82;
  _BOOL8 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  unsigned int v93;
  vDSP_Length *v95;
  vDSP_Length v96;
  vDSP_Length v97;
  uint64_t v98;
  vDSP_Length v99;
  NSObject *v100;
  uint64_t v101;
  float *v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  float32x2_t *v106;
  _BYTE v107[24];
  int v108;
  _BYTE v109[128];
  _BYTE buf[124];
  unsigned int v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  InstancePtr = Phase::Logger::GetInstancePtr((Phase::Logger *)a1);
  v7 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 208));
  v8 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v7);
  if (*((_BYTE *)v8 + 216))
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v8)
                                                                                       + 208)));
    v10 = v9;
    if ((unint64_t)v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v10, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v7, "Phase_LateReverb_Spatial_Query_Begin", "EarlyReflectionsSimulation: Spatial Query Begin", buf, 2u);
    }

  }
  v11 = Phase::Logger::GetInstancePtr(v8);
  v12 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(v11 + 208));
  v13 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v12);
  if (*((_BYTE *)v13 + 1192))
  {
    v14 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v13)
                                                                                        + 1184)));
    v15 = v14;
    if ((unint64_t)v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v15, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v12, "Phase_RoomSimulation_ERSpatialQuery", "EarlyReflectionsSpatialQuery", buf, 2u);
    }

  }
  v16 = Phase::Logger::GetInstancePtr(v13);
  v17 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(v16 + 416));
  v18 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v17);
  if (*((_BYTE *)v18 + 1192))
  {
    v19 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v18)
                                                                                        + 1184)));
    v20 = v19;
    if ((unint64_t)v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v20, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v17, "Phase_RoomSimulation_HandleResultsEarlyReflections", "EarlyReflectionsHandleResults", buf, 2u);
    }

  }
  v21 = Phase::SpatialModeler::RoomSimulationImpl::CheckSpatialQueryInput(a1, a2, (uint64_t)v107);
  if (v108 == 2)
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor(a3, (uint64_t)v107);
    goto LABEL_89;
  }
  v23 = *((_QWORD *)a2 + 8);
  v24 = *((_QWORD *)a2 + 11);
  v25 = *(_QWORD *)(v24 + 552);
  if (*(_DWORD *)(v23 + 136) <= v25
    || (v26 = *(_QWORD *)(v23 + 120), *(_DWORD *)(v26 + 24 * v25 + 20) != HIDWORD(v25))
    || (v27 = *(float32x2_t **)(v26 + 24 * *(_QWORD *)(v24 + 552))) == 0
    || v27->i32[0] != 2)
  {
    v27 = 0;
  }
  v106 = v27;
  v28 = *((_QWORD *)a2 + 12);
  if (*(_QWORD *)(v24 + 208))
  {
    v29 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v21) + 1184));
    v21 = os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v21)
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "EarlyReflectionsSimulationImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 955;
      _os_log_impl(&dword_2164CC000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d ER Spatial Query is called with an individual source but must be called with a cluster key.", buf, 0x12u);
    }
  }
  if (*(_BYTE *)(v24 + 48))
    v30 = a1 + 26720;
  else
    v30 = a1 + 1424;
  v31 = (_DWORD *)(v30 + 19016);
  if (*(float *)(v30 + 19512) > 0.0 && *v31)
  {
    if (!*(_BYTE *)(v30 + 168))
      goto LABEL_133;
    v32 = 0;
    v33 = v30 + 22808;
    do
    {
      v34 = *(unsigned __int8 *)(v33 + v32);
      if (*(_BYTE *)(v33 + v32))
        v35 = 1;
      else
        v35 = v32 == 18;
      ++v32;
    }
    while (!v35);
    if (v34)
      goto LABEL_133;
    v36 = 0;
    v37 = v30 + 22827;
    do
    {
      v38 = *(unsigned __int8 *)(v37 + v36);
      if (*(_BYTE *)(v37 + v36))
        v39 = 1;
      else
        v39 = v36 == 18;
      ++v36;
    }
    while (!v39);
    if (v38)
    {
LABEL_133:
      v40 = (float)(*(float *)(v30 + 19308) / (float)(*v31 - *(_DWORD *)(v30 + 64))) * 100.0;
      if (v40 > 3.0)
      {
        v41 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v21) + 1184));
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "EarlyReflectionsSimulationImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 971;
          *(_WORD *)&buf[18] = 2048;
          *(double *)&buf[20] = v40;
          _os_log_impl(&dword_2164CC000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d High energy loss: %.1f%%.\n", buf, 0x1Cu);
        }
      }
    }
  }
  Phase::SpatialModeler::RoomSimulationLogging::logInvalidIntersections((Phase::SpatialModeler::RoomSimulationLogging *)v30, v22);
  v43 = *(int8x8_t *)(v30 + 19392);
  if (!*(_QWORD *)&v43)
    goto LABEL_65;
  v44 = *(_QWORD *)(v24 + 376);
  v45 = (uint8x8_t)vcnt_s8(v43);
  v45.i16[0] = vaddlv_u8(v45);
  if (v45.u32[0] > 1uLL)
  {
    v46 = *(_QWORD *)(v24 + 376);
    if (*(_QWORD *)&v43 <= v44)
      v46 = v44 % *(_QWORD *)&v43;
  }
  else
  {
    v46 = (*(_QWORD *)&v43 - 1) & v44;
  }
  v47 = *(_QWORD **)(*(_QWORD *)(v30 + 19384) + 8 * v46);
  if (!v47 || (v48 = (_QWORD *)*v47) == 0)
  {
LABEL_65:
    if (*(_QWORD *)(v24 + 208))
    {
      v50 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v42) + 1184));
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        goto LABEL_71;
      v51 = *(_QWORD *)(v24 + 376);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "EarlyReflectionsSimulationImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1058;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v51;
      v52 = "%25s:%-5d No early directional metadata found for given cluster key %llu.";
    }
    else
    {
      v50 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v42) + 1184));
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        goto LABEL_71;
      v53 = *(_QWORD *)(v24 + 208);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "EarlyReflectionsSimulationImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1053;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v53;
      v52 = "%25s:%-5d No early directional metadata found for given sound source handle %llu.";
    }
    _os_log_impl(&dword_2164CC000, v50, OS_LOG_TYPE_ERROR, v52, buf, 0x1Cu);
    goto LABEL_71;
  }
  while (1)
  {
    v49 = v48[1];
    if (v49 == v44)
      break;
    if (v45.u32[0] > 1uLL)
    {
      if (v49 >= *(_QWORD *)&v43)
        v49 %= *(_QWORD *)&v43;
    }
    else
    {
      v49 &= *(_QWORD *)&v43 - 1;
    }
    if (v49 != v46)
      goto LABEL_65;
LABEL_64:
    v48 = (_QWORD *)*v48;
    if (!v48)
      goto LABEL_65;
  }
  if (v48[2] != v44)
    goto LABEL_64;
  v75 = (Phase::Logger *)Phase::SpatialModeler::CopyMetadata<float>((uint64_t)(v48 + 8), v28);
  v76 = *(_QWORD *)(a1 + 48);
  memset(buf, 0, sizeof(buf));
  v111 = v76;
  v77 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v75);
  if (*(_QWORD *)(a1 + 48) == (uint64_t)(*((_QWORD *)v77 + 182) - *((_QWORD *)v77 + 181)) >> 2)
  {
    v78 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v77);
    v79 = (_BYTE *)*((_QWORD *)v78 + 181);
    v80 = Phase::Logger::GetInstancePtr(v78);
    v81 = *(_BYTE **)(v80 + 1456);
    if (v81 != v79)
      v80 = (uint64_t)memmove(buf, v79, v81 - v79);
  }
  else
  {
    if (v111)
      bzero(buf, 4 * v111);
    v82 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v77)
                                                                                        + 1184)));
    v83 = os_log_type_enabled(v82, OS_LOG_TYPE_ERROR);
    if (v83)
    {
      v84 = Phase::Logger::GetInstancePtr((Phase::Logger *)v83);
      v85 = (uint64_t)(*(_QWORD *)(v84 + 1456) - *(_QWORD *)(v84 + 1448)) >> 2;
      v86 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)v109 = 136315906;
      *(_QWORD *)&v109[4] = "EarlyReflectionsSimulationImpl.mm";
      *(_WORD *)&v109[12] = 1024;
      *(_DWORD *)&v109[14] = 1005;
      *(_WORD *)&v109[18] = 2048;
      *(_QWORD *)&v109[20] = v85;
      *(_WORD *)&v109[28] = 2048;
      *(_QWORD *)&v109[30] = v86;
      _os_log_impl(&dword_2164CC000, v82, OS_LOG_TYPE_ERROR, "%25s:%-5d Error setting phase_room_eq_er: Its sub-band count of %zu does not match the modeler internal sub-band count of %zu", v109, 0x26u);
    }

  }
  if ((*(_DWORD *)(v23 + 168) | 2) != 3)
    goto LABEL_113;
  v80 = Phase::Logger::GetInstancePtr((Phase::Logger *)v80);
  if (!*(_BYTE *)(v80 + 1440) || *(_BYTE *)(v23 + 932))
    goto LABEL_113;
  v87 = *(_QWORD *)(a1 + 48);
  switch(v87)
  {
    case 31:
      v88 = *(_OWORD *)(v23 + 584);
      *(_OWORD *)&v109[64] = *(_OWORD *)(v23 + 568);
      *(_OWORD *)&v109[80] = v88;
      *(_OWORD *)&v109[96] = *(_OWORD *)(v23 + 600);
      *(_OWORD *)&v109[108] = *(_OWORD *)(v23 + 612);
      v89 = *(_OWORD *)(v23 + 520);
      *(_OWORD *)v109 = *(_OWORD *)(v23 + 504);
      *(_OWORD *)&v109[16] = v89;
      v90 = *(_OWORD *)(v23 + 552);
      *(_OWORD *)&v109[32] = *(_OWORD *)(v23 + 536);
      *(_OWORD *)&v109[48] = v90;
      *(_DWORD *)&v109[124] = 31;
LABEL_112:
      Phase::Subbands<float>::operator+=((float32x4_t *)buf, (float32x4_t *)v109);
      goto LABEL_113;
    case 10:
      v91 = *(_OWORD *)(v23 + 276);
      *(_OWORD *)v109 = *(_OWORD *)(v23 + 260);
      *(_OWORD *)&v109[16] = v91;
      *(_QWORD *)&v109[32] = *(_QWORD *)(v23 + 292);
      memset(&v109[40], 0, 80);
      *(_QWORD *)&v109[120] = 0xA00000000;
      goto LABEL_112;
    case 3:
      *(_QWORD *)v109 = *(_QWORD *)(v23 + 184);
      *(_DWORD *)&v109[8] = *(_DWORD *)(v23 + 192);
      *(_DWORD *)&v109[124] = 3;
      memset(&v109[12], 0, 112);
      goto LABEL_112;
  }
  v103 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v80) + 1184));
  v80 = os_log_type_enabled(v103, OS_LOG_TYPE_ERROR);
  if ((_DWORD)v80)
  {
    v104 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)v109 = 136315650;
    *(_QWORD *)&v109[4] = "EarlyReflectionsSimulationImpl.mm";
    *(_WORD *)&v109[12] = 1024;
    *(_DWORD *)&v109[14] = 1034;
    *(_WORD *)&v109[18] = 2048;
    *(_QWORD *)&v109[20] = v104;
    _os_log_impl(&dword_2164CC000, v103, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported sub-band count: %zu\n", v109, 0x1Cu);
  }
LABEL_113:
  if (*(_QWORD *)(a1 + 48))
  {
    v92 = 0;
    v93 = 1;
    do
    {
      *(float *)&buf[4 * v92] = __exp10f(*(float *)&buf[4 * v92] / 20.0);
      v92 = v93;
    }
    while (*(_QWORD *)(a1 + 48) > (unint64_t)v93++);
  }
  v105 = a3;
  v95 = *(vDSP_Length **)(v28 + 104);
  if (v95)
  {
    v96 = *v95;
    if (*v95)
    {
      v97 = v95[1];
      if (v97)
      {
        if (v97 == v111)
        {
          if (v96 <= 4 * v97)
          {
            v101 = 0;
            do
            {
              v102 = (float *)(*(_QWORD *)(v28 + 104) + 4 * *(_QWORD *)(*(_QWORD *)(v28 + 104) + 8) * v101 + 16);
              vDSP_vmul(v102, 1, (const float *)buf, 1, v102, 1, v97);
              ++v101;
            }
            while (v96 != v101);
          }
          else
          {
            v98 = 0;
            v99 = v95[1];
            do
            {
              vDSP_vsmul((const float *)(*(_QWORD *)(v28 + 104) + v98 + 16), v97, (const float *)&buf[v98], (float *)(*(_QWORD *)(v28 + 104) + v98 + 16), v97, v96);
              v98 += 4;
              --v99;
            }
            while (v99);
          }
        }
        else
        {
          v100 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v80) + 224));
          if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v109 = 136315394;
            *(_QWORD *)&v109[4] = "SpatialModelerQueryOutput.hpp";
            *(_WORD *)&v109[12] = 1024;
            *(_DWORD *)&v109[14] = 415;
            _os_log_impl(&dword_2164CC000, v100, OS_LOG_TYPE_ERROR, "%25s:%-5d Error in EqualizeMetadata: Given metadata and gains have different subband count.", v109, 0x12u);
          }
        }
      }
    }
  }
  a3 = v105;
LABEL_71:
  Phase::SpatialModeler::SortMetadataByDelay<float>(v28);
  v56 = *(_QWORD *)(v23 + 904);
  if (v56)
  {
    v57 = *(float *)(v23 + 928);
    if (v57 > 0.0)
    {
      v58 = *(uint64_t **)(a1 + 1280);
      v59 = Phase::Logger::GetInstancePtr(v54);
      Phase::SpatialModeler::SpaceBlending((unint64_t *)(v23 + 904), (float *)(v23 + 912), v58, 0, *(_DWORD *)(v59 + 1228), v28, *(_QWORD *)(a1 + 48), v57, -144.0, 1.0);
      *(_DWORD *)(a1 + 1296) = *(_DWORD *)(v23 + 928);
      v56 = *(_QWORD *)(v23 + 904);
    }
  }
  v60 = 0;
  *(_QWORD *)(a1 + 1288) = v56;
  v61 = v30 + 22846;
  do
  {
    v62 = *(unsigned __int8 *)(v61 + v60);
    if (*(_BYTE *)(v61 + v60))
      v63 = 1;
    else
      v63 = v60 == 18;
    ++v60;
  }
  while (!v63);
  if (v62)
  {
    v64 = v106[7].i32[1];
    v65 = -v106[7].f32[0];
    *(float32x2_t *)buf = vneg_f32(v106[6]);
    *(float *)&buf[8] = v65;
    *(_DWORD *)&buf[12] = v64;
    Phase::SpatialModeler::RotateMetadata<float>(v28, (float *)buf);
    v66 = 1;
  }
  else
  {
    v66 = 0;
  }
  *(_BYTE *)(v28 + 4) = v66;
  Phase::SpatialModeler::ExecuteEarlyReflectionDebugCallbacks((Phase::SpatialModeler *)v30, *(Phase::SpatialModeler::RayTracerState **)(a1 + 16), (Phase::Geometry::System *)v23, v55);
  *(_DWORD *)&buf[24] = 1;
  v68 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v67);
  if (*((_BYTE *)v68 + 1192))
  {
    v69 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v68)
                                                                                        + 1184)));
    v70 = v69;
    if ((unint64_t)v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v69))
    {
      *(_WORD *)v109 = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v70, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v17, "Phase_RoomSimulation_HandleResultsEarlyReflections", (const char *)&unk_21676613F, v109, 2u);
    }

  }
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor(a3, (uint64_t)buf);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
LABEL_89:
  v71 = (Phase::Logger *)std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v107);
  v72 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v71);
  if (*((_BYTE *)v72 + 1192))
  {
    v73 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v72)
                                                                                        + 1184)));
    v74 = v73;
    if ((unint64_t)v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v73))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v74, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v12, "Phase_RoomSimulation_ERSpatialQuery", (const char *)&unk_21676613F, buf, 2u);
    }

  }
}

void sub_21659DC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RayTracerState::State::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = 0;
  v5 = 12;
  do
  {
    v6 = 0;
    v7 = a1 + v5;
    v8 = a2 + v5;
    do
    {
      v9 = v7 + v6;
      *(_DWORD *)(v9 - 12) = *(_DWORD *)(v8 + v6 - 12);
      *(_DWORD *)(v9 - 8) = *(_DWORD *)(v8 + v6 - 8);
      *(_DWORD *)(v9 - 4) = *(_DWORD *)(v8 + v6 - 4);
      *(_DWORD *)(v7 + v6) = *(_DWORD *)(v8 + v6);
      *(_DWORD *)(v9 + 4) = *(_DWORD *)(v8 + v6 + 4);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v8 + v6 + 8);
      v6 += 24;
    }
    while (v6 != 72);
    ++v4;
    v5 += 72;
  }
  while (v4 != 256);
  if (a1 != a2)
  {
    std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>::__assign_with_size[abi:ne180100]<Phase::SpatialModeler::PhaseRoomSimulationSoundSource*,Phase::SpatialModeler::PhaseRoomSimulationSoundSource*>((_QWORD *)(a1 + 18432), *(_QWORD *)(a2 + 18432), *(_QWORD *)(a2 + 18440), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 18440) - *(_QWORD *)(a2 + 18432)) >> 3));
    std::vector<Phase::SpatialModeler::DirectivityHistogram *>::__assign_with_size[abi:ne180100]<Phase::SpatialModeler::DirectivityHistogram **,Phase::SpatialModeler::DirectivityHistogram **>((char *)(a1 + 18456), *(char **)(a2 + 18456), *(_QWORD *)(a2 + 18464), (uint64_t)(*(_QWORD *)(a2 + 18464) - *(_QWORD *)(a2 + 18456)) >> 3);
    std::vector<Phase::SpatialModeler::DirectivityHistogram *>::__assign_with_size[abi:ne180100]<Phase::SpatialModeler::DirectivityHistogram **,Phase::SpatialModeler::DirectivityHistogram **>((char *)(a1 + 18480), *(char **)(a2 + 18480), *(_QWORD *)(a2 + 18488), (uint64_t)(*(_QWORD *)(a2 + 18488) - *(_QWORD *)(a2 + 18480)) >> 3);
  }
  memcpy((void *)(a1 + 18512), (const void *)(a2 + 18512), 0x160uLL);
  return a1;
}

uint64_t Phase::SpatialModeler::RoomChangeDetector::IncrementResultsFromTracerStates(Phase::SpatialModeler::RoomChangeDetector *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  float *v7;
  float *v8;
  float v9;
  float v10;
  unsigned int v11;
  float *v12;
  float v13;
  uint64_t v14;
  float v15;
  int v16;
  _OWORD v18[7];
  __int128 v19;
  uint64_t v20;
  int v21;

  v2 = *((_OWORD *)a2 + 1227);
  v3 = *((_OWORD *)a2 + 1225);
  v18[4] = *((_OWORD *)a2 + 1224);
  v18[5] = v3;
  v18[6] = *((_OWORD *)a2 + 1226);
  v19 = v2;
  v4 = *((_OWORD *)a2 + 1221);
  v18[0] = *((_OWORD *)a2 + 1220);
  v18[1] = v4;
  v5 = *((_OWORD *)a2 + 1223);
  v18[2] = *((_OWORD *)a2 + 1222);
  v18[3] = v5;
  v6 = HIDWORD(v2);
  if (HIDWORD(v2))
  {
    v7 = (float *)*((_QWORD *)a2 + 2616);
    if ((uint64_t)(*((_QWORD *)a2 + 2617) - (_QWORD)v7) >> 2 == HIDWORD(v19))
    {
      v8 = (float *)v18;
      do
      {
        v9 = *v7++;
        *v8 = *v8 / v9;
        ++v8;
        --v6;
      }
      while (v6);
    }
  }
  v10 = *((float *)a2 + 4876);
  v11 = *((_DWORD *)a2 + 4911);
  if (v11)
  {
    v12 = (float *)((char *)a2 + 19520);
    v13 = 0.0;
    v14 = *((unsigned int *)a2 + 4911);
    do
    {
      v15 = *v12++;
      v13 = v13 + v15;
      --v14;
    }
    while (v14);
    if (v11 >= 2)
      v13 = v13 / (float)v11;
  }
  else
  {
    v13 = 0.0;
  }
  v16 = *((_DWORD *)a2 + 5700);
  v20 = *((_QWORD *)a2 + 2849);
  v21 = v16;
  return Phase::SpatialModeler::RoomChangeDetector::IncrementResultInternal<0ul,1ul,2ul,float,float,Phase::Vector<float,3ul>>(v10, v13, (uint64_t)this, (int *)this, (uint64_t)&v20);
}

uint64_t Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  _DWORD **v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  if (a1 != a2)
  {
    std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugIntersection>::__assign_with_size[abi:ne180100]<Phase::SpatialModeler::RoomSimulationDebugger::DebugIntersection*,Phase::SpatialModeler::RoomSimulationDebugger::DebugIntersection*>((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2));
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 72), *(char **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
    v5 = *(_DWORD ***)(a2 + 104);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__assign_with_size[abi:ne180100]<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*>((uint64_t *)(a1 + 104), v5, *(_DWORD ***)(a2 + 112), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 112) - (_QWORD)v5) >> 3));
    v6 = *(_DWORD **)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    std::vector<Phase::Vector<float,3ul>>::__assign_with_size[abi:ne180100]<Phase::Vector<float,3ul>*,Phase::Vector<float,3ul>*>((_QWORD *)(a1 + 136), v6, *(_DWORD **)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - (_QWORD)v6) >> 2));
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 160), *(char **)(a2 + 160), *(_QWORD *)(a2 + 168), (uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 2);
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(a1 + 184, *(_QWORD *)(a2 + 184), *(_QWORD *)(a2 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 192) - *(_QWORD *)(a2 + 184)) >> 3));
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(a1 + 208), *(char **)(a2 + 208), *(char **)(a2 + 216), *(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208));
    v7 = *(_DWORD **)(a2 + 240);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    std::vector<Phase::Vector<float,3ul>>::__assign_with_size[abi:ne180100]<Phase::Vector<float,3ul>*,Phase::Vector<float,3ul>*>((_QWORD *)(a1 + 240), v7, *(_DWORD **)(a2 + 248), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 248) - (_QWORD)v7) >> 2));
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 264), *(char **)(a2 + 264), *(_QWORD *)(a2 + 272), (uint64_t)(*(_QWORD *)(a2 + 272) - *(_QWORD *)(a2 + 264)) >> 2);
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(a1 + 288, *(_QWORD *)(a2 + 288), *(_QWORD *)(a2 + 296), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 3));
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(a1 + 312), *(char **)(a2 + 312), *(char **)(a2 + 320), *(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312));
    v8 = *(_QWORD *)(a2 + 336);
    *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 336) = v8;
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 352), *(char **)(a2 + 352), *(_QWORD *)(a2 + 360), (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 376), *(char **)(a2 + 376), *(_QWORD *)(a2 + 384), (uint64_t)(*(_QWORD *)(a2 + 384) - *(_QWORD *)(a2 + 376)) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 400), *(char **)(a2 + 400), *(_QWORD *)(a2 + 408), (uint64_t)(*(_QWORD *)(a2 + 408) - *(_QWORD *)(a2 + 400)) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 424), *(char **)(a2 + 424), *(_QWORD *)(a2 + 432), (uint64_t)(*(_QWORD *)(a2 + 432) - *(_QWORD *)(a2 + 424)) >> 2);
  }
  return a1;
}

uint64_t Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationBegin(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(Phase::Logger *a1, os_signpost_id_t **a2, uint64_t a3)
{
  Phase::Logger *InstancePtr;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  uint8_t v11[16];

  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(a1);
  if (*((_BYTE *)InstancePtr + 1192))
  {
    v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                       + 1184)));
    v8 = v7;
    v9 = **a2;
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      *(_WORD *)v11 = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v8, OS_SIGNPOST_INTERVAL_END, v9, "Phase_RoomSimulation_EarlyReflectionsBegin", (const char *)&unk_21676613F, v11, 2u);
    }

  }
  return std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, a3);
}

uint64_t Phase::SpatialModeler::EarlyReflectionsSimulationImpl::ClusterEarlyReflections(Phase::SpatialModeler::EarlyReflectionsSimulationImpl *this, Phase::SpatialModeler::RoomSimulation *a2, Phase::SpatialModeler::Query *a3, Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Phase::Logger *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t SoundSourceHash;
  uint8x8_t v45;
  unint64_t v46;
  uint64_t **v47;
  uint64_t *i;
  unint64_t v49;
  _QWORD *v50;
  NSObject *v51;
  uint64_t v52;
  _QWORD *v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  float v60;
  unint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  unsigned int v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  double v85;
  _QWORD *v86;
  float v87;
  uint64_t v88;
  float *v89;
  float v90;
  float v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  unint64_t ClusterHash;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  char *v104;
  _QWORD *v105;
  char *v106;
  Phase::SpatialModeler::RayTracerState *v107;
  Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState *v108;
  NSObject *v109;
  uint64_t v110;
  NSObject *v111;
  uint64_t v112;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  Phase::SpatialModeler::Query *v117;
  Phase::SpatialModeler::RoomSimulation *v118;
  Phase::SpatialModeler::EarlyReflectionsSimulationImpl *v119;
  uint64_t v120;
  Phase::SpatialModeler::RoomSimulationImpl *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  void *__p;
  uint64_t *v127;
  uint64_t *v128;
  _OWORD v129[2];
  int v130;
  void *v131[2];
  __int128 v132;
  __int128 v133;
  void *v134[3];
  _BYTE v135[24];
  int v136;
  uint64_t v137;
  unint64_t v138;
  float v139;
  _BYTE buf[48];
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  int v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  v8 = Phase::SpatialModeler::RoomSimulationImpl::CheckClusterQueryInput((uint64_t)a2, a3, (uint64_t)v135);
  if (v136 == 2)
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)this, (uint64_t)v135);
  }
  else
  {
    v117 = a4;
    v118 = a3;
    v119 = this;
    v124 = *((_QWORD *)a3 + 8);
    v9 = *((_QWORD *)a3 + 11);
    v121 = a2;
    v122 = (uint64_t *)*((_QWORD *)a3 + 12);
    v10 = *(_QWORD *)(v9 + 144);
    if (v10)
    {
      v11 = 0;
      v12 = 288;
      do
      {
        if (*(_QWORD *)(*(_QWORD *)(v9 + 104) + v12) < *(_QWORD *)(v9 + 96))
        {
          v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v8) + 1184));
          v8 = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
          if ((_DWORD)v8)
          {
            v14 = (uint64_t *)(*(_QWORD *)(v9 + 104) + v12);
            v15 = *(v14 - 36);
            v16 = *v14;
            v17 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 336 * v16);
            v18 = *(unsigned __int8 *)(v9 + 48);
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "EarlyReflectionsSimulationImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 447;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v15;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v17;
            *(_WORD *)&buf[38] = 2048;
            *(_QWORD *)&buf[40] = v16;
            LOWORD(v141) = 1024;
            *(_DWORD *)((char *)&v141 + 2) = v18;
            _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d ClusterEarlyReflections begin Submix %llu assigned to render group %llu at index %lu, attack query %d", buf, 0x36u);
          }
          v10 = *(_QWORD *)(v9 + 144);
        }
        ++v11;
        v12 += 304;
      }
      while (v11 < v10);
    }
    v19 = (char *)v121 + 26720;
    if (!*(_BYTE *)(v9 + 48))
      v19 = (char *)v121 + 1424;
    v125 = (uint64_t)v19;
    v20 = *((_QWORD *)v19 + 2367) - *((_QWORD *)v19 + 2366);
    if (v20)
    {
      v21 = fmax(*(double *)(*((_QWORD *)a3 + 11) + 40), 1.0);
      v22 = (unint64_t)v21;
      v23 = 0x6DB6DB6DB6DB6DB7 * (v20 >> 3);
      if (v23 >= (unint64_t)v21)
        v24 = (unint64_t)v21;
      else
        v24 = v23;
      memset(v129, 0, sizeof(v129));
      v130 = 1065353216;
      *(_OWORD *)v131 = 0u;
      v132 = 0u;
      v133 = 0u;
      memset(v134, 0, sizeof(v134));
      if (*(_BYTE *)(Phase::Logger::GetInstancePtr((Phase::Logger *)v8) + 1496))
        Phase::SpatialModeler::ERClustering::AssignSourcesToExistingRenderers(v24, (_QWORD *)v9, v125, *((_QWORD *)v121 + 6), (uint64_t)v129, *((double *)v121 + 5));
      else
        Phase::SpatialModeler::ERClustering::FindEarlyReflectionClusters((_QWORD *)(v125 + 18928), *((double *)v121 + 5), *(_QWORD *)(v125 + 22576), v24, v125, *((_QWORD *)v121 + 6), (uint64_t)v129);
      if ((_DWORD)v24)
      {
        if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v133 - *((_QWORD *)&v132 + 1)) >> 4) == (int)v24)
          v27 = v24;
        else
          v27 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v133 - *((_QWORD *)&v132 + 1)) >> 4);
        v28 = *((_QWORD *)v121 + 2);
        if (*(_QWORD *)(v28 + 2760)
          && (v29 = Phase::Geometry::SystemDebugger::GetFromSystem(v28)) != 0
          && *(_BYTE *)(v29 + 80)
          || *(_BYTE *)(v125 + 72))
        {
          Phase::SpatialModeler::GenerateEarlyScattering((Phase::Logger *)v129, (uint64_t *)&v132 + 1, (Phase::SpatialModeler::RayTracerState *)v125, *((double *)v121 + 5), v125 + 22568, v9, *((_QWORD *)v121 + 6));
        }
        v30 = *(_QWORD *)(v125 + 22496);
        if (v30 <= (int)v27)
          v30 = (int)v27;
        if (v30 >= v22)
          v31 = (void *)v22;
        else
          v31 = (void *)v30;
        __p = v31;
        v138 = 16;
        Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup>(unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>((Phase::Logger *)&v146, (uint64_t)v31, &__p, (std::align_val_t *)&v138);
        v32 = v122;
        v33 = v146;
        *(_QWORD *)&v146 = 0;
        *(_QWORD *)buf = v33;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v146 + 8);
        *(_QWORD *)&buf[40] = v31;
        std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v146);
        std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100](v122 + 1, (uint64_t *)buf);
        v122[6] = *(_QWORD *)&buf[40];
        std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
        v34 = v122[6];
        v137 = 1;
        v138 = v34;
        __p = &v138;
        v127 = &v137;
        Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL>(unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(v34, (uint64_t)&__p, &v146);
        v35 = v146;
        *(_QWORD *)&v146 = 0;
        *(_QWORD *)buf = v35;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v146 + 8);
        *(_QWORD *)&buf[40] = v34;
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v146);
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100](v122 + 7, (uint64_t *)buf);
        v122[12] = *(_QWORD *)&buf[40];
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
        Phase::SpatialModeler::evaluateRendererKeepAliveFlagsAndUpdateState(v125, (int)v27, v22, v32 + 1, v32 + 7, (uint64_t)v134, 15.0);
        v36 = *(_QWORD *)(v9 + 144);
        v137 = 8;
        v138 = v36;
        __p = &v138;
        v127 = &v137;
        Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput>(unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(v36, (uint64_t)&__p, &v146);
        v114 = (int)v27;
        v115 = v27;
        v123 = v122 + 1;
        v37 = v146;
        *(_QWORD *)&v146 = 0;
        *(_QWORD *)buf = v37;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v146 + 8);
        *(_QWORD *)&buf[40] = v36;
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v146);
        v38 = (_QWORD **)(v122 + 13);
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::operator=[abi:ne180100](v122 + 13, (uint64_t *)buf);
        v122[18] = *(_QWORD *)&buf[40];
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
        v39 = v122[18];
        if (v39)
        {
          v40 = *v38;
          do
          {
            *v40 = -1;
            v40 += 2;
            --v39;
          }
          while (v39);
        }
        v41 = (uint64_t *)(v9 + 104);
        if (*(_QWORD *)(v9 + 144))
        {
          v42 = 0;
          do
          {
            v43 = *v41 + 304 * v42;
            SoundSourceHash = Phase::SpatialModeler::GetSoundSourceHash(*(_QWORD *)(v43 + 144), *(_QWORD *)(v125 + 22576), v43 + 160);
            if (*((_QWORD *)&v129[0] + 1))
            {
              v45 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v129 + 8));
              v45.i16[0] = vaddlv_u8(v45);
              if (v45.u32[0] > 1uLL)
              {
                v46 = SoundSourceHash;
                if (SoundSourceHash >= *((_QWORD *)&v129[0] + 1))
                  v46 = SoundSourceHash % *((_QWORD *)&v129[0] + 1);
              }
              else
              {
                v46 = (*((_QWORD *)&v129[0] + 1) - 1) & SoundSourceHash;
              }
              v47 = *(uint64_t ***)(*(_QWORD *)&v129[0] + 8 * v46);
              if (v47)
              {
                for (i = *v47; i; i = (uint64_t *)*i)
                {
                  v49 = i[1];
                  if (v49 == SoundSourceHash)
                  {
                    if (i[2] == SoundSourceHash)
                    {
                      *(_OWORD *)&(*v38)[2 * v42] = *(_OWORD *)(i + 3);
                      v53 = *v38;
                      v59 = (uint64_t)&(*v38)[2 * v42];
                      v60 = *(double *)(v59 + 8);
                      if (*(_QWORD *)(v124 + 904))
                        v60 = v60 + (float)(*(float *)(v124 + 928) * (float)(0.0 - v60));
                      *(double *)(v59 + 8) = v60;
                      goto LABEL_60;
                    }
                  }
                  else
                  {
                    if (v45.u32[0] > 1uLL)
                    {
                      if (v49 >= *((_QWORD *)&v129[0] + 1))
                        v49 %= *((_QWORD *)&v129[0] + 1);
                    }
                    else
                    {
                      v49 &= *((_QWORD *)&v129[0] + 1) - 1;
                    }
                    if (v49 != v46)
                      break;
                  }
                }
              }
            }
            v50 = &(*v38)[2 * v42];
            *v50 = -1;
            v50[1] = 0;
            v51 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)SoundSourceHash)
                                                             + 1184));
            SoundSourceHash = os_log_type_enabled(v51, OS_LOG_TYPE_ERROR);
            if ((_DWORD)SoundSourceHash)
            {
              v52 = *(_QWORD *)(v43 + 144);
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "EarlyReflectionsSimulationImpl.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 574;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v52;
              _os_log_impl(&dword_2164CC000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d Query input source (%llu) not found in clustering results.", buf, 0x1Cu);
            }
            v53 = *v38;
LABEL_60:
            if (v53[2 * v42] < (unint64_t)v122[6])
            {
              v54 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)SoundSourceHash)
                                                               + 1184));
              if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
              {
                v55 = *(_QWORD *)(*(_QWORD *)(v9 + 104) + 304 * v42);
                v56 = (*v38)[2 * v42];
                v57 = *(_QWORD *)(*v123 + 336 * v56);
                v58 = *(unsigned __int8 *)(v9 + 48);
                *(_DWORD *)buf = 136316418;
                *(_QWORD *)&buf[4] = "EarlyReflectionsSimulationImpl.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 584;
                *(_WORD *)&buf[18] = 2048;
                *(_QWORD *)&buf[20] = v55;
                *(_WORD *)&buf[28] = 2048;
                *(_QWORD *)&buf[30] = v57;
                *(_WORD *)&buf[38] = 2048;
                *(_QWORD *)&buf[40] = v56;
                LOWORD(v141) = 1024;
                *(_DWORD *)((char *)&v141 + 2) = v58;
                _os_log_impl(&dword_2164CC000, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d ClusterEarlyReflections end Submix %llu assigned to render group %llu at index %lu, attack query %d", buf, 0x36u);
              }
            }
            ++v42;
          }
          while (v42 < *(_QWORD *)(v9 + 144));
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::clear(v125 + 19384);
        if (v115 << 32)
        {
          v61 = 0;
          v62 = v114;
          if (v114 <= 1)
            v62 = 1;
          v116 = v62;
          v63 = 0uLL;
          v120 = v125 + 19384;
          do
          {
            __p = 0;
            v127 = 0;
            v128 = 0;
            v146 = v63;
            v147 = v63;
            v148 = 1065353216;
            if (*(_QWORD *)(v9 + 144))
            {
              v64 = 0;
              v65 = 0;
              v66 = -3.4028e38;
              while (1)
              {
                v67 = *v41;
                v68 = *v41 + 304 * v64;
                if ((*v38)[2 * v64] == v61)
                {
                  v138 = 0;
                  v69 = (uint64_t *)Phase::SpatialModeler::GetSoundSourceHash(*(_QWORD *)(v68 + 144), *(_QWORD *)(v125 + 22576), v68 + 160);
                  v70 = (unint64_t)v69;
                  v138 = (unint64_t)v69;
                  v71 = v127;
                  if (v127 >= v128)
                  {
                    v69 = (uint64_t *)__p;
                    v73 = ((char *)v127 - (_BYTE *)__p) >> 3;
                    v74 = v73 + 1;
                    if ((unint64_t)(v73 + 1) >> 61)
                      std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
                    v75 = (char *)v128 - (_BYTE *)__p;
                    if (((char *)v128 - (_BYTE *)__p) >> 2 > v74)
                      v74 = v75 >> 2;
                    if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
                      v76 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v76 = v74;
                    if (v76)
                    {
                      v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v128, v76);
                      v69 = (uint64_t *)__p;
                      v71 = v127;
                      v70 = v138;
                    }
                    else
                    {
                      v77 = 0;
                    }
                    v78 = (unint64_t *)&v77[8 * v73];
                    *v78 = v70;
                    v72 = (uint64_t *)(v78 + 1);
                    while (v71 != v69)
                    {
                      v79 = *--v71;
                      *--v78 = v79;
                    }
                    __p = v78;
                    v127 = v72;
                    v128 = (uint64_t *)&v77[8 * v76];
                    if (v69)
                      operator delete(v69);
                  }
                  else
                  {
                    *v127 = (uint64_t)v69;
                    v72 = v71 + 1;
                  }
                  v127 = v72;
                  v80 = *(_QWORD *)(v68 + 144);
                  if (*(_DWORD *)(v124 + 136) <= v80
                    || (v81 = *(_QWORD *)(v124 + 120), *(_DWORD *)(v81 + 24 * v80 + 20) != HIDWORD(v80))
                    || (v82 = *(_QWORD *)(v81 + 24 * *(_QWORD *)(v68 + 144))) == 0
                    || *(_DWORD *)v82 != 3)
                  {
                    v111 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v69)
                                                                      + 1184));
                    if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
                    {
                      v112 = *(_QWORD *)(v68 + 144);
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = "EarlyReflectionsSimulationImpl.mm";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 616;
                      *(_WORD *)&buf[18] = 2048;
                      *(_QWORD *)&buf[20] = v112;
                      _os_log_impl(&dword_2164CC000, v111, OS_LOG_TYPE_ERROR, "%25s:%-5d Query input source (%llu) not found in Geo Layer.", buf, 0x1Cu);
                    }
                    *(_QWORD *)v119 = 6;
                    *((_QWORD *)v119 + 1) = (char *)v121 + 72;
                    *((_DWORD *)v119 + 6) = 2;
                    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v146);
                    if (__p)
                    {
                      v127 = (uint64_t *)__p;
                      operator delete(__p);
                    }
                    goto LABEL_125;
                  }
                  v83 = *(_QWORD *)(v82 + 64);
                  v84 = *(_DWORD *)(v82 + 72);
                  v85 = *(double *)&(*v38)[2 * v64 + 1];
                  *(_QWORD *)buf = &v138;
                  v86 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)&v146, &v138, (uint64_t)&std::piecewise_construct, (_QWORD **)buf);
                  v87 = v85;
                  v86[3] = v83;
                  *((_DWORD *)v86 + 8) = v84;
                  *((float *)v86 + 9) = v87;
                  v32 = v122;
                }
                v88 = *(unsigned int *)(v68 + 140);
                if ((_DWORD)v88)
                {
                  v89 = (float *)(v67 + 304 * v65 + 16);
                  do
                  {
                    v90 = *v89++;
                    v91 = v90;
                    if (v66 < v90)
                      v66 = v91;
                    --v88;
                  }
                  while (v88);
                }
                v64 = ++v65;
                if (*(_QWORD *)(v9 + 144) <= (unint64_t)v65)
                  goto LABEL_104;
              }
            }
            v66 = -3.4028e38;
LABEL_104:
            *(float *)&v138 = v66;
            *((float *)&v138 + 1) = v66;
            v139 = v66;
            Phase::Subbands<float>::Subbands((uint64_t)buf, &v138, 3);
            v92 = (_OWORD *)(*v123 + 336 * v61);
            v93 = *(_OWORD *)buf;
            v94 = *(_OWORD *)&buf[16];
            v95 = v141;
            v92[14] = *(_OWORD *)&buf[32];
            v92[15] = v95;
            v92[12] = v93;
            v92[13] = v94;
            v96 = v142;
            v97 = v143;
            v98 = v145;
            v92[18] = v144;
            v92[19] = v98;
            v92[16] = v96;
            v92[17] = v97;
            v138 = 0;
            if (v127 == __p)
            {
              ClusterHash = 0;
            }
            else
            {
              ClusterHash = Phase::SpatialModeler::GetClusterHash((uint64_t **)&__p, *(_QWORD *)(v125 + 22576));
              v138 = ClusterHash;
            }
            *(_QWORD *)(*v123 + 336 * v61 + 184) = ClusterHash;
            *(_QWORD *)buf = &v138;
            v100 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v120, &v138, (uint64_t)&std::piecewise_construct, (_QWORD **)buf);
            if (v100 + 3 != (_QWORD *)&v146)
            {
              *((_DWORD *)v100 + 14) = v148;
              std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,void *> *>>(v100 + 3, (uint64_t *)v147, 0);
            }
            v101 = *((_QWORD *)&v132 + 1);
            *(_QWORD *)buf = &v138;
            v102 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v120, &v138, (uint64_t)&std::piecewise_construct, (_QWORD **)buf);
            Phase::SpatialModeler::CopyMetadata<float>(v101 + 208 * v61, (uint64_t)(v102 + 8));
            v103 = *v123;
            *(_QWORD *)buf = &v138;
            *((_OWORD *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v120, &v138, (uint64_t)&std::piecewise_construct, (_QWORD **)buf)+ 17) = *(_OWORD *)(v103 + 336 * v61);
            v104 = (char *)v131[0];
            if (v61 < ((char *)v131[1] - (char *)v131[0]) >> 3)
            {
              *(_QWORD *)buf = &v138;
              v105 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v120, &v138, (uint64_t)&std::piecewise_construct, (_QWORD **)buf);
              v106 = &v104[8 * v61];
              *((_DWORD *)v105 + 72) = *(_DWORD *)v106;
              *((_DWORD *)v105 + 73) = *((_DWORD *)v106 + 1);
            }
            std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v146);
            if (__p)
            {
              v127 = (uint64_t *)__p;
              operator delete(__p);
            }
            ++v61;
            v63 = 0uLL;
          }
          while (v61 != v116);
        }
        if (!*(_BYTE *)(v9 + 48))
        {
          (*(void (**)(Phase::SpatialModeler::RoomSimulationImpl *, uint64_t))(*(_QWORD *)v121 + 96))(v121, v125);
          if (!*(_BYTE *)(v125 + 195))
          {
            Phase::SpatialModeler::RoomSimulation::StoreRayTracerStateToERtoLRModelerCache((Phase::SpatialModeler::RoomSimulation *)v125, v107);
            Phase::SpatialModeler::RoomSimulationLogging::logInQuerySources((Phase::Logger *)(v9 + 104), (uint64_t)"Cluster ER - ER after Store", 27);
            Phase::SpatialModeler::RoomSimulationLogging::logRayTracerStateStatus((Phase::Logger *)v125, (uint64_t)"Cluster ER - ER after Store", 27);
          }
        }
        Phase::SpatialModeler::checkSubmixRendererChange(v9, v32);
        Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryCleanupCommon(v121, v118, v117, v108);
        *((_DWORD *)v119 + 6) = 1;
        goto LABEL_125;
      }
      v109 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v25) + 1184));
      if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
      {
        v110 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v125 + 18936) - *(_QWORD *)(v125 + 18928)) >> 3);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "EarlyReflectionsSimulationImpl.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 490;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v110;
        _os_log_impl(&dword_2164CC000, v109, OS_LOG_TYPE_ERROR, "%25s:%-5d FindEarlyReflectionClusters: numClusters 0 after processing %zu sources, this is invalid output, returning", buf, 0x1Cu);
      }
      *(_QWORD *)v119 = 4;
      *((_QWORD *)v119 + 1) = (char *)v121 + 72;
      *((_DWORD *)v119 + 6) = 2;
LABEL_125:
      if (v134[0])
      {
        v134[1] = v134[0];
        operator delete(v134[0]);
      }
      *(_QWORD *)buf = (char *)&v132 + 8;
      std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (v131[0])
      {
        v131[1] = v131[0];
        operator delete(v131[0]);
      }
      std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v129);
    }
    else
    {
      v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v8) + 1184));
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "EarlyReflectionsSimulationImpl.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 458;
        _os_log_impl(&dword_2164CC000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d ClusterEarlyReflections: persistingTracerState.mState.mSources.size() == 0, no simulated sources", buf, 0x12u);
      }
      *(_QWORD *)v119 = 3;
      *((_QWORD *)v119 + 1) = (char *)v121 + 72;
      *((_DWORD *)v119 + 6) = 2;
    }
  }
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v135);
}

void sub_21659EFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  Phase::SpatialModeler::ClusteringResult::~ClusteringResult((Phase::SpatialModeler::ClusteringResult *)&a31);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a45);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationFinish@<X0>(float32x2_t *this@<X0>, Phase::Geometry::SystemState **a2@<X1>, Phase::SpatialModeler::Query *a3@<X2>, Phase::Logger *a4@<X8>)
{
  uint64_t InstancePtr;
  Phase::Logger *v10;
  Phase::Logger *v11;
  NSObject *v12;
  NSObject *v13;
  uint8_t *v14;
  unsigned int *v15;
  Phase::Geometry::SystemState *v16;
  Phase::SpatialModeler::RayTracerState *v17;
  float *v18;
  Phase::Logger *v19;
  NSObject *v20;
  __int32 v21;
  Phase::SpatialModeler::RoomChangeDetector *v22;
  int v23;
  _BOOL8 v24;
  Phase::SpatialModeler::RayTracerState *v25;
  Phase::Logger *v27;
  _BYTE v28[32];
  _BYTE v29[32];
  uint8_t v30[32];
  uint8_t buf[24];
  int v32;
  os_signpost_id_t *v33;
  Phase::Logger *v34;
  uint8_t v35[4];
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  __int32 v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  InstancePtr = Phase::Logger::GetInstancePtr((Phase::Logger *)this);
  v10 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 416));
  v34 = v10;
  v11 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v10);
  if (*((_BYTE *)v11 + 1192))
  {
    v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11)
                                                                                        + 1184)));
    v13 = v12;
    if ((unint64_t)v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v13, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v10, "Phase_RoomSimulation_EarlyReflectionsFinish", "EarlyReflectionsFinish", buf, 2u);
    }

  }
  v33 = (os_signpost_id_t *)&v34;
  Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationFinishCommonPreProcess((Phase::SpatialModeler::RoomSimulationImpl *)this, a2, (std::chrono::steady_clock::time_point *)a3, (uint64_t)buf);
  if (v32 == 2)
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v30, (uint64_t)buf);
    v14 = v30;
    Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationFinish(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, &v33, (uint64_t)v30);
    goto LABEL_26;
  }
  v27 = a4;
  v15 = (unsigned int *)((char *)a3 + 131768);
  v16 = a2[8];
  if (*((_BYTE *)a2[11] + 48))
    v17 = (Phase::SpatialModeler::RayTracerState *)&this[3340];
  else
    v17 = (Phase::SpatialModeler::RayTracerState *)&this[178];
  if (*((_BYTE *)a2[11] + 48))
  {
    Phase::SpatialModeler::RayTracerState::operator=((uint64_t)&this[3340], (uint64_t)a3 + 112752);
LABEL_22:
    if (*((_DWORD *)v16 + 42))
      v24 = *((_BYTE *)v16 + 932) == 0;
    else
      v24 = 0;
    Phase::SpatialModeler::RayTracerState::UpdateLaunchedRayHistory(v17, *v15);
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationFinishHandleMatchReverbTimes((Phase::SpatialModeler::RoomSimulationImpl *)v24, (Phase::SpatialModeler::Query *)((char *)a3 + 112752), v17, v25);
    Phase::SpatialModeler::EarlyReflectionsSimulationImpl::ClusterEarlyReflections((Phase::SpatialModeler::EarlyReflectionsSimulationImpl *)v28, (Phase::SpatialModeler::RoomSimulation *)this, (Phase::SpatialModeler::Query *)a2, a3);
    v14 = v28;
    Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationFinish(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(v27, &v33, (uint64_t)v28);
    goto LABEL_26;
  }
  v18 = (float *)((char *)a3 + 112872);
  if (!Phase::SpatialModeler::SimulationController::ShouldEnableListenerOutsideMitigation((Phase::SpatialModeler::SimulationController *)&this[10], (Phase::SpatialModeler::Query *)((char *)a3 + 112752), (Phase::SpatialModeler::RayTracerState *)&this[178], *((_BYTE *)v16 + 932))|| !*((_BYTE *)a3 + 112945))
  {
    Phase::SpatialModeler::SimulationController::AdjustAggregationCoefficientsDefault(*v18, *v18, (uint64_t)&this[10], (float *)a3 + 28190);
    if (this[199].i8[0] && this[199].i8[1])
      Phase::SpatialModeler::SimulationController::AdjustAggregationCoefficientsDynamic(this + 10, (uint64_t)&this[3029], (float *)a3 + 28190, *v18, *v18, this[2806].f32[1], (float)*v15);
    Phase::SpatialModeler::RoomChangeDetector::IncrementResultsFromTracerStates((Phase::SpatialModeler::RoomChangeDetector *)&this[84], (Phase::SpatialModeler::Query *)((char *)a3 + 112752));
    Phase::SpatialModeler::GetRoomChangeProbabilityEstimate((Phase::SpatialModeler *)&this[84], v22);
    *((_DWORD *)a3 + 33447) = v23;
    Phase::SpatialModeler::RayTracerState::AggregateResultData((Phase::SpatialModeler::RayTracerState *)&this[178], (Phase::SpatialModeler::Query *)((char *)a3 + 112752), v16);
    Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::operator=((uint64_t)&this[3078], (uint64_t)a3 + 135952);
    goto LABEL_22;
  }
  Phase::SpatialModeler::RayTracerState::UpdateResultData((Phase::SpatialModeler::RayTracerState *)&this[178], (Phase::SpatialModeler::Query *)((char *)a3 + 112752), v16);
  v20 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v19) + 1184));
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    v21 = this[2807].i32[0];
    *(_DWORD *)v35 = 136315650;
    v36 = "EarlyReflectionsSimulationImpl.mm";
    v37 = 1024;
    v38 = 241;
    v39 = 1024;
    v40 = v21;
    _os_log_impl(&dword_2164CC000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d listenerOutsideMitigation ER: Listener is outside, mitigating by skipping aggregation, counter %u", v35, 0x18u);
  }
  Phase::SpatialModeler::EarlyReflectionsSimulationImpl::ClusterEarlyReflections((Phase::SpatialModeler::EarlyReflectionsSimulationImpl *)v29, (Phase::SpatialModeler::RoomSimulation *)this, (Phase::SpatialModeler::Query *)a2, a3);
  v14 = v29;
  Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationFinish(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(v27, &v33, (uint64_t)v29);
LABEL_26:
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v14);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
}

void sub_21659F3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationFinish(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(Phase::Logger *a1, os_signpost_id_t **a2, uint64_t a3)
{
  Phase::Logger *InstancePtr;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  uint8_t v11[16];

  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(a1);
  if (*((_BYTE *)InstancePtr + 1192))
  {
    v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                       + 1184)));
    v8 = v7;
    v9 = **a2;
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      *(_WORD *)v11 = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v8, OS_SIGNPOST_INTERVAL_END, v9, "Phase_RoomSimulation_EarlyReflectionsFinish", (const char *)&unk_21676613F, v11, 2u);
    }

  }
  return std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, a3);
}

uint64_t Phase::SpatialModeler::CopyMetadata<float>(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  int *v24;
  _DWORD *v25;
  uint64_t i;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD v31[4];
  uint64_t v32;
  uint64_t *v33;
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(result + 104);
  if (v2)
  {
    v3 = *v2;
    if (*v2)
    {
      v5 = result;
      *(_DWORD *)(a2 + 204) = *(_DWORD *)(result + 204);
      v28 = 4;
      v29 = v3;
      v30 = &v29;
      v31[0] = &v28;
      Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>>(unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(v3, (uint64_t)&v30, &v33);
      v6 = v33;
      v33 = 0;
      v30 = v6;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v31, (uint64_t)v34);
      v32 = v3;
      std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v33);
      std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a2 + 8), (uint64_t *)&v30);
      *(_QWORD *)(a2 + 48) = v32;
      std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v30);
      v28 = 4;
      v29 = v3;
      v30 = &v29;
      v31[0] = &v28;
      Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float>(unsigned long,unsigned long)::{lambda(float*)#1} const&>(v3, (uint64_t)&v30, &v33);
      v7 = v33;
      v33 = 0;
      v30 = v7;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v31, (uint64_t)v34);
      v32 = v3;
      std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v33);
      std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a2 + 56), (uint64_t *)&v30);
      *(_QWORD *)(a2 + 96) = v32;
      std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v30);
      v8 = *(_QWORD *)(v5 + 104);
      if (v8)
        v9 = *(_QWORD *)(v8 + 8);
      else
        v9 = 0;
      Phase::AllocPackedSubbandArray<float>(v3, v9, (void **)&v30);
      std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a2 + 104), (uint64_t *)&v30);
      std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v30);
      v28 = 1;
      v29 = v3;
      v30 = &v29;
      v31[0] = &v28;
      Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL>(unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(v3, (uint64_t)&v30, &v33);
      v10 = v33;
      v33 = 0;
      v30 = v10;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v31, (uint64_t)v34);
      v32 = v3;
      std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v33);
      std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a2 + 144), (uint64_t *)&v30);
      *(_QWORD *)(a2 + 184) = v32;
      std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v30);
      v11 = 0;
      v12 = *(_QWORD *)(v5 + 8);
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(_QWORD *)(v5 + 56);
      v15 = *(_QWORD *)(a2 + 56);
      v16 = *(_QWORD *)(v5 + 104);
      v17 = (int *)(v16 + 16);
      v18 = *(_QWORD *)(v16 + 8);
      v19 = *(_QWORD *)(a2 + 104) + 16;
      v20 = *(_QWORD *)(v5 + 144);
      v21 = *(_QWORD *)(a2 + 144);
      result = 4 * *(_QWORD *)(*(_QWORD *)(a2 + 104) + 8);
      do
      {
        v22 = (_DWORD *)(v12 + 12 * v11);
        v23 = (_DWORD *)(v13 + 12 * v11);
        *v23 = *v22;
        v23[1] = v22[1];
        v23[2] = v22[2];
        *(_DWORD *)(v15 + 4 * v11) = *(_DWORD *)(v14 + 4 * v11);
        v24 = v17;
        v25 = (_DWORD *)v19;
        for (i = v18; i; --i)
        {
          v27 = *v24++;
          *v25++ = v27;
        }
        *(_BYTE *)(v21 + v11) = *(_BYTE *)(v20 + v11);
        ++v11;
        v19 += result;
        v17 += v18;
      }
      while (v11 != v3);
      *(_BYTE *)(a2 + 201) = *(_BYTE *)(v5 + 201);
    }
  }
  return result;
}

void Phase::SpatialModeler::ClusteringResult::~ClusteringResult(Phase::SpatialModeler::ClusteringResult *this)
{
  void *v2;
  void *v3;
  void **v4;

  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  v4 = (void **)((char *)this + 64);
  std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this);
}

uint64_t Phase::SpatialModeler::IndexStore<32ul,1ull,0ull>::GetNextAvailable(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  for (result = 1; result != 32; ++result)
  {
    if (*(_BYTE *)(a1 + result) == 1)
    {
      *(_BYTE *)(a1 + result) = 0;
      return result;
    }
  }
  v3 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)0x20) + 1184));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = 136315650;
    v5 = "RayTracingTypes.hpp";
    v6 = 1024;
    v7 = 700;
    v8 = 2048;
    v9 = 0;
    _os_log_impl(&dword_2164CC000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d IndexStore: no indexes available, returning invalid value %llu", (uint8_t *)&v4, 0x1Cu);
  }
  return 0;
}

float32_t Phase::Subbands<float>::operator+=(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float *v13;
  float v14;

  v2 = a1[7].u32[3];
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == 10)
    {
      v4 = vaddq_f32(*a1, *a2);
      v11 = vaddq_f32(a1[1], a2[1]);
      v12 = vaddq_f32(a1[2], a2[2]);
      *a1 = v4;
      a1[1] = v11;
      a1[2] = v12;
    }
    else if ((_DWORD)v2 == 31)
    {
      v3 = vaddq_f32(a1[1], a2[1]);
      v4 = vaddq_f32(*a1, *a2);
      v5 = vaddq_f32(a1[3], a2[3]);
      v6 = vaddq_f32(a1[2], a2[2]);
      v7 = vaddq_f32(a1[5], a2[5]);
      v8 = vaddq_f32(a1[4], a2[4]);
      v9 = vaddq_f32(a1[6], a2[6]);
      v10 = vaddq_f32(a1[7], a2[7]);
      v10.i32[3] = HIDWORD(*(_OWORD *)&a1[7]);
      *a1 = v4;
      a1[1] = v3;
      a1[2] = v6;
      a1[3] = v5;
      a1[4] = v8;
      a1[5] = v7;
      a1[6] = v9;
      a1[7] = v10;
    }
    else
    {
      v13 = (float *)a1;
      do
      {
        v14 = a2->f32[0];
        a2 = (float32x4_t *)((char *)a2 + 4);
        v4.f32[0] = v14 + *v13;
        *v13++ = v4.f32[0];
        --v2;
      }
      while (v2);
    }
  }
  return v4.f32[0];
}

void Phase::SpatialModeler::SortMetadataByDelay<float>(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  int *v32;
  _DWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *__p;
  uint64_t *v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48[4];
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  _BYTE v56[32];
  uint64_t *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v1 = *(unint64_t **)(a1 + 104);
  if (v1)
  {
    v2 = (uint64_t *)*v1;
    if (*v1 >= 2)
    {
      std::vector<unsigned long>::vector(&__p, *v1);
      v4 = (uint64_t *)__p;
      v5 = v40;
      if (__p != v40)
      {
        v6 = 0;
        v7 = (uint64_t *)__p;
        do
          *v7++ = v6++;
        while (v7 != v5);
      }
      v8 = 126 - 2 * __clz(v5 - v4);
      v55 = a1;
      if (v5 == v4)
        v9 = 0;
      else
        v9 = v8;
      std::__introsort<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,false>((uint64_t)v4, v5, &v55, v9, 1);
      v44 = v2;
      v47 = 4;
      v49 = (uint64_t *)&v44;
      v50 = &v47;
      Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>>(unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>((uint64_t)v2, (uint64_t)&v49, &v55);
      v10 = v55;
      v55 = 0;
      v52 = v10;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v53, (uint64_t)v56);
      v54 = v2;
      std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v55);
      v47 = (uint64_t)v2;
      v41[0] = 4;
      v44 = &v47;
      v45 = v41;
      Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float>(unsigned long,unsigned long)::{lambda(float*)#1} const&>((uint64_t)v2, (uint64_t)&v44, &v55);
      v11 = v55;
      v55 = 0;
      v49 = (uint64_t *)v11;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v50, (uint64_t)v56);
      v51 = v2;
      std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v55);
      v12 = *(_QWORD *)(a1 + 104);
      if (v12)
        v13 = *(_QWORD *)(v12 + 8);
      else
        v13 = 0;
      Phase::AllocPackedSubbandArray<float>((uint64_t)v2, v13, (void **)&v47);
      v42 = 1;
      v43 = v2;
      v41[0] = &v43;
      v41[1] = &v42;
      Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL>(unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>((uint64_t)v2, (uint64_t)v41, &v55);
      v14 = v55;
      v55 = 0;
      v44 = (uint64_t *)v14;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v45, (uint64_t)v56);
      v46 = v2;
      std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v55);
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 8);
      v17 = __p;
      v18 = v52;
      v19 = *(_QWORD *)(a1 + 56);
      v20 = (uint64_t)v49;
      v21 = *(_QWORD *)(a1 + 104);
      v22 = v21 + 16;
      v23 = *(_QWORD *)(v21 + 8);
      v24 = (char *)(v47 + 16);
      v25 = *(_QWORD *)(a1 + 144);
      v26 = (uint64_t)v44;
      if ((unint64_t)v2 <= 1)
        v27 = 1;
      else
        v27 = (uint64_t)v2;
      v28 = 4 * *(_QWORD *)(v47 + 8);
      do
      {
        v29 = v17[v15];
        v30 = (_DWORD *)(v16 + 12 * v29);
        v31 = (_DWORD *)(v18 + 12 * v15);
        *v31 = *v30;
        v31[1] = v30[1];
        v31[2] = v30[2];
        *(_DWORD *)(v20 + 4 * v15) = *(_DWORD *)(v19 + 4 * v29);
        if (v23)
        {
          v32 = (int *)(v22 + 4 * v29 * v23);
          v33 = v24;
          v34 = v23;
          do
          {
            v35 = *v32++;
            *v33++ = v35;
            --v34;
          }
          while (v34);
        }
        *(_BYTE *)(v26 + v15++) = *(_BYTE *)(v25 + v29);
        v24 += v28;
      }
      while (v15 != v27);
      *(_QWORD *)(a1 + 8) = 0;
      v55 = v16;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v56, a1 + 16);
      v57 = *(uint64_t **)(a1 + 48);
      std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 8), &v52);
      *(_QWORD *)(a1 + 48) = v54;
      std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](&v52, &v55);
      v54 = v57;
      std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v55);
      v36 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;
      v55 = v36;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v56, a1 + 64);
      v57 = *(uint64_t **)(a1 + 96);
      std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 56), (uint64_t *)&v49);
      *(_QWORD *)(a1 + 96) = v51;
      std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)&v49, &v55);
      v51 = v57;
      std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v55);
      v37 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v47;
      v47 = v37;
      std::__function::__value_func<void ()(void *)>::swap[abi:ne180100]((_QWORD *)(a1 + 112), v48);
      v38 = *(_QWORD *)(a1 + 144);
      *(_QWORD *)(a1 + 144) = 0;
      v55 = v38;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v56, a1 + 152);
      v57 = *(uint64_t **)(a1 + 184);
      std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 144), (uint64_t *)&v44);
      *(_QWORD *)(a1 + 184) = v46;
      std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)&v44, &v55);
      v46 = v57;
      std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v55);
      *(_BYTE *)(a1 + 201) = 1;
      std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v44);
      std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v47);
      std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v49);
      std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v52);
      if (__p)
      {
        v40 = (uint64_t *)__p;
        operator delete(__p);
      }
    }
  }
}

void sub_21659FD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;

  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&a23);
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&a28);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)(v28 - 152));
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::RotateMetadata<float>(uint64_t a1, float *a2)
{
  _QWORD *v2;
  int v5;
  uint64_t v6;
  unint64_t i;
  _QWORD *v8;
  float *v9;
  float v10[3];

  v2 = *(_QWORD **)(a1 + 104);
  if (v2 && *v2)
  {
    v5 = *(_DWORD *)(a1 + 204);
    if (!v5)
      Phase::SpatialModeler::ConvertMetadataSphericalToCartesian<float>(a1);
    v6 = 0;
    for (i = 0; ; ++i)
    {
      v8 = *(_QWORD **)(a1 + 104);
      if (v8)
        v8 = (_QWORD *)*v8;
      if (i >= (unint64_t)v8)
        break;
      Phase::operator*<float>(a2, (float *)(*(_QWORD *)(a1 + 8) + v6), v10);
      v9 = (float *)(*(_QWORD *)(a1 + 8) + v6);
      *v9 = v10[0];
      v9[1] = v10[1];
      v9[2] = v10[2];
      v6 += 12;
    }
    if (!v5)
      Phase::SpatialModeler::ConvertMetadataCartesianToSpherical<float>(a1);
  }
}

uint64_t std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>::__assign_with_size[abi:ne180100]<Phase::SpatialModeler::PhaseRoomSimulationSoundSource*,Phase::SpatialModeler::PhaseRoomSimulationSoundSource*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = (void *)*a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *a1) >> 3) >= a4)
  {
    v14 = a1 + 1;
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - (_QWORD)v10) >> 3) >= a4)
    {
      result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::SpatialModeler::PhaseRoomSimulationSoundSource *,Phase::SpatialModeler::PhaseRoomSimulationSoundSource *,Phase::SpatialModeler::PhaseRoomSimulationSoundSource *>((uint64_t)&v21, a2, a3, (uint64_t)v10);
      v18 = v19 - (_QWORD)v10;
      goto LABEL_15;
    }
    v17 = a2 + 8 * ((uint64_t)(a1[1] - (_QWORD)v10) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::SpatialModeler::PhaseRoomSimulationSoundSource *,Phase::SpatialModeler::PhaseRoomSimulationSoundSource *,Phase::SpatialModeler::PhaseRoomSimulationSoundSource *>((uint64_t)&v20, a2, v17, (uint64_t)v10);
    v10 = (void *)*v14;
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>,Phase::SpatialModeler::PhaseRoomSimulationSoundSource*,Phase::SpatialModeler::PhaseRoomSimulationSoundSource*,Phase::SpatialModeler::PhaseRoomSimulationSoundSource*>(v9, v17, a3, *v14);
  }
  else
  {
    if (v10)
    {
      a1[1] = v10;
      operator delete(v10);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x492492492492492)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v11 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= a4)
      v12 = a4;
    if (v11 >= 0x249249249249249)
      v13 = 0x492492492492492;
    else
      v13 = v12;
    std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>::__vallocate[abi:ne180100](a1, v13);
    v15 = a1[1];
    v14 = a1 + 1;
    v10 = (void *)v15;
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>,Phase::SpatialModeler::PhaseRoomSimulationSoundSource*,Phase::SpatialModeler::PhaseRoomSimulationSoundSource*,Phase::SpatialModeler::PhaseRoomSimulationSoundSource*>(v9, a2, a3, v15);
  }
  v18 = result - (_QWORD)v10;
LABEL_15:
  *v14 = (uint64_t)v10 + v18;
  return result;
}

void sub_2165A0034(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = v2;
  _Unwind_Resume(a1);
}

char *std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::EntityShapeTemplate>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>,Phase::SpatialModeler::PhaseRoomSimulationSoundSource*,Phase::SpatialModeler::PhaseRoomSimulationSoundSource*,Phase::SpatialModeler::PhaseRoomSimulationSoundSource*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = a4;
  while (a2 != a3)
  {
    *(_QWORD *)result = *(_QWORD *)a2;
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
    *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
    result += 56;
    a2 += 56;
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::SpatialModeler::PhaseRoomSimulationSoundSource *,Phase::SpatialModeler::PhaseRoomSimulationSoundSource *,Phase::SpatialModeler::PhaseRoomSimulationSoundSource *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2 == a3)
    return a2;
  result = a3;
  do
  {
    *(_QWORD *)a4 = *(_QWORD *)a2;
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a4 + 12) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a4 + 20) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a4 + 24) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a4 + 28) = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a4 + 32) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a4 + 36) = *(_DWORD *)(a2 + 36);
    *(_OWORD *)(a4 + 40) = *(_OWORD *)(a2 + 40);
    a4 += 56;
    a2 += 56;
  }
  while (a2 != a3);
  return result;
}

char *std::vector<Phase::SpatialModeler::DirectivityHistogram *>::__assign_with_size[abi:ne180100]<Phase::SpatialModeler::DirectivityHistogram **,Phase::SpatialModeler::DirectivityHistogram **>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<Phase::FrequencyBand<float>>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t Phase::SpatialModeler::RoomChangeDetector::IncrementResultInternal<0ul,1ul,2ul,float,float,Phase::Vector<float,3ul>>(float a1, float a2, uint64_t a3, int *a4, uint64_t a5)
{
  double v8;
  uint64_t v9;
  double v10;
  double v11;

  *(float *)&a4[a4[8]] = a1;
  Phase::SpatialModeler::ParameterHistory<float,8>::Increment((uint64_t)a4);
  *(float *)&a4[a4[22] + 14] = a2;
  Phase::SpatialModeler::ParameterHistory<float,8>::Increment((uint64_t)(a4 + 14));
  LODWORD(v8) = *(_DWORD *)(a5 + 8);
  v9 = (uint64_t)&a4[3 * a4[34] + 28];
  v10 = *(double *)a5;
  *(_QWORD *)v9 = *(_QWORD *)a5;
  *(_DWORD *)(v9 + 8) = LODWORD(v8);
  return Phase::SpatialModeler::ParameterHistory<Phase::Vector<float,3ul>,2>::Increment((uint64_t)(a4 + 28), v8, v10, v11);
}

float Phase::SpatialModeler::ParameterHistory<float,8>::Increment(uint64_t a1)
{
  int v1;
  uint64_t v2;
  float v3;
  int v4;
  float result;

  v1 = ((*(_DWORD *)(a1 + 52) - (*(_DWORD *)(a1 + 48) + 1)) & ((*(_DWORD *)(a1 + 52) - (*(_DWORD *)(a1 + 48) + 1)) >> 31))
     + *(_DWORD *)(a1 + 48)
     + 1;
  *(_DWORD *)(a1 + 48) = v1;
  v2 = *(int *)(a1 + 32);
  v3 = (float)v1;
  v4 = (v2 + 1) & 7;
  if ((int)v2 + 1 <= 0)
    v4 = -(-(v2 + 1) & 7);
  result = *(float *)(a1 + 44) + (float)((float)(*(float *)(a1 + 4 * v2) - *(float *)(a1 + 44)) / v3);
  *(float *)(a1 + 44) = result;
  *(_DWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 36) = v2;
  *(_DWORD *)(a1 + 40) += ((7 - *(_DWORD *)(a1 + 40)) & ((7 - *(_DWORD *)(a1 + 40)) >> 31)) + 1;
  return result;
}

uint64_t Phase::SpatialModeler::ParameterHistory<Phase::Vector<float,3ul>,2>::Increment(uint64_t result, double a2, double a3, double a4)
{
  int v4;
  int v5;
  float32x2_t *v6;
  float v7;
  float v8;
  int v9;

  v4 = ((*(_DWORD *)(result + 52) - (*(_DWORD *)(result + 48) + 1)) & ((*(_DWORD *)(result + 52)
                                                                      - (*(_DWORD *)(result + 48)
                                                                       + 1)) >> 31))
     + *(_DWORD *)(result + 48)
     + 1;
  *(_DWORD *)(result + 48) = v4;
  v5 = *(_DWORD *)(result + 24);
  v6 = (float32x2_t *)(result + 12 * v5);
  v7 = *(float *)(result + 44);
  *(float *)&a4 = (float)v4;
  v8 = (float)(v6[1].f32[0] - v7) / (float)v4;
  *(float32x2_t *)(result + 36) = vadd_f32(*(float32x2_t *)(result + 36), vdiv_f32(vsub_f32(*v6, *(float32x2_t *)(result + 36)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0)));
  *(float *)(result + 44) = v7 + v8;
  v9 = (v5 + 1) & 1;
  if (v5 < -1)
    v9 = -v9;
  *(_DWORD *)(result + 24) = v9;
  *(_DWORD *)(result + 28) = v5;
  *(_DWORD *)(result + 32) += ((1 - *(_DWORD *)(result + 32)) & ((1 - *(_DWORD *)(result + 32)) >> 31)) + 1;
  return result;
}

char *std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugIntersection>::__assign_with_size[abi:ne180100]<Phase::SpatialModeler::RoomSimulationDebugger::DebugIntersection*,Phase::SpatialModeler::RoomSimulationDebugger::DebugIntersection*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(_QWORD *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x924924924924924)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x492492492492492)
      v12 = 0x924924924924924;
    else
      v12 = v11;
    result = std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugIntersection>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 2) >= a4)
    goto LABEL_16;
  v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugIntersection>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x924924924924925)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugIntersection>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[28 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugIntersection>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(28 * a2);
}

void std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__assign_with_size[abi:ne180100]<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*>(uint64_t *a1, _DWORD **a2, _DWORD **a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char v18;
  char v19;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__vdeallocate(a1);
    if (a4 > 0x666666666666666)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v10 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v10;
    std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*>(v8, (uint64_t)a2, (uint64_t)a3, a1[1]);
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - v9) >> 3) < a4)
  {
    v13 = &a2[(a1[1] - v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource *,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource *,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource *>((uint64_t)&v18, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*>(v8, (uint64_t)v13, (uint64_t)a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource *,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource *,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource *>((uint64_t)&v19, a2, a3, v9);
  v15 = v14;
  v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      v17 = *(void **)(v16 - 24);
      if (v17)
      {
        *(_QWORD *)(v16 - 16) = v17;
        operator delete(v17);
      }
      v16 -= 40;
    }
    while (v16 != v15);
  }
  a1[1] = v15;
}

void sub_2165A0754(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2165A075C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a4;
  v12 = a4;
  v13 = a4;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_DWORD *)v4 = *(_DWORD *)v6;
      *(_DWORD *)(v4 + 4) = *(_DWORD *)(v6 + 4);
      v7 = *(_DWORD *)(v6 + 8);
      *(_QWORD *)(v4 + 16) = 0;
      v8 = v4 + 16;
      *(_DWORD *)(v8 - 8) = v7;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      std::vector<Phase::Vector<float,3ul>>::__init_with_size[abi:ne180100]<Phase::Vector<float,3ul>*,Phase::Vector<float,3ul>*>((char *)v8, *(_DWORD **)(v6 + 16), *(_DWORD **)(v6 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 2));
      v4 = v13 + 40;
      v13 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_2165A08AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 - 24);
    if (v3)
    {
      *(_QWORD *)(v1 - 16) = v3;
      operator delete(v3);
    }
    v1 -= 40;
  }
}

_DWORD **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource *,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource *,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource *>(uint64_t a1, _DWORD **a2, _DWORD **a3, uint64_t a4)
{
  _DWORD **v5;
  _DWORD **v6;
  _DWORD **v7;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 2;
  do
  {
    v7 = v6 - 2;
    *(_DWORD *)a4 = *((_DWORD *)v6 - 4);
    *(_DWORD *)(a4 + 4) = *((_DWORD *)v6 - 3);
    *(_DWORD *)(a4 + 8) = *((_DWORD *)v6 - 2);
    if ((_DWORD **)a4 != v6 - 2)
      std::vector<Phase::Vector<float,3ul>>::__assign_with_size[abi:ne180100]<Phase::Vector<float,3ul>*,Phase::Vector<float,3ul>*>((_QWORD *)(a4 + 16), *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (v6[1] - *v6));
    a4 += 40;
    v6 += 5;
  }
  while (v7 + 5 != v5);
  return v5;
}

char *std::vector<Phase::Vector<float,3ul>>::__assign_with_size[abi:ne180100]<Phase::Vector<float,3ul>*,Phase::Vector<float,3ul>*>(_QWORD *a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  _DWORD *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  _DWORD *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 2) >= a4)
  {
    v18 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v18;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 2);
    if (v19 >= a4)
    {
      v23 = result;
      if (a2 != a3)
      {
        v24 = result;
        do
        {
          *(_DWORD *)v24 = *v6;
          *((_DWORD *)v24 + 1) = v6[1];
          *((_DWORD *)v24 + 2) = v6[2];
          v23 += 12;
          v6 += 3;
          v24 += 12;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v23 - result);
      v13 = result;
    }
    else
    {
      v20 = &a2[3 * v19];
      if (v13 != result)
      {
        do
        {
          *(_DWORD *)result = *v6;
          *((_DWORD *)result + 1) = v6[1];
          *((_DWORD *)result + 2) = v6[2];
          v6 += 3;
          result += 12;
        }
        while (v6 != v20);
      }
      v21 = v13;
      if (v20 != a3)
      {
        v22 = v13;
        do
        {
          *(_DWORD *)v22 = *v20;
          *((_DWORD *)v22 + 1) = v20[1];
          *((_DWORD *)v22 + 2) = v20[2];
          v21 += 12;
          v20 += 3;
          v22 += 12;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v21 - v13);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1555555555555555)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v11;
    result = std::vector<Phase::Vector<float,3ul>>::__vallocate[abi:ne180100](a1, v12);
    v15 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v15;
    v16 = v15;
    if (v6 != a3)
    {
      v16 = v13;
      do
      {
        *(_DWORD *)v16 = *v6;
        *((_DWORD *)v16 + 1) = v6[1];
        *((_DWORD *)v16 + 2) = v6[2];
        v16 += 12;
        v6 += 3;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v16 - v13);
  }
  *v14 = &v17[(_QWORD)v13];
  return result;
}

void std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v20, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_2165A0D30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2165A0D38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2165A0DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_2165A1018(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24D57C5F8[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24D57C628[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN5Phase14SpatialModeler13ReturnSuccessENSA_11ReturnErrorENSA_18WaitOnSceneQueriesENSA_18ClaimOrWaitOnTokenENSA_12ReleaseTokenEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS8_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN5Phase14SpatialModeler13ReturnSuccessENSA_11ReturnErrorENSA_18WaitOnSceneQueriesENSA_18ClaimOrWaitOnTokenENSA_12ReleaseTokenEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS8_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<Phase::Geometry::SceneQueryBatch *>::__init_with_size[abi:ne180100]<Phase::Geometry::SceneQueryBatch **,Phase::Geometry::SceneQueryBatch **>(a2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN5Phase14SpatialModeler13ReturnSuccessENSA_11ReturnErrorENSA_18WaitOnSceneQueriesENSA_18ClaimOrWaitOnTokenENSA_12ReleaseTokenEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS8_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN5Phase14SpatialModeler13ReturnSuccessENSA_11ReturnErrorENSA_18WaitOnSceneQueriesENSA_18ClaimOrWaitOnTokenENSA_12ReleaseTokenEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS8_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState *Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState::ClusterQueryState(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState *this)
{
  uint64_t v2;
  char *v3;
  int32x2_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int32x2_t v8;
  char *v9;

  v2 = 0;
  v3 = (char *)this + 137808;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 9) = 0xFFFFFFFFLL;
  *((_BYTE *)this + 80) = 0x80;
  *(_QWORD *)((char *)this + 92) = 0;
  *(_QWORD *)((char *)this + 84) = 0;
  v4 = vdup_n_s32(0x7F7FFFFFu);
  *((_DWORD *)this + 25) = 0;
  do
  {
    v5 = (char *)this + v2;
    *((_QWORD *)v5 + 14) = 0;
    *((_QWORD *)v5 + 15) = 0;
    *((_DWORD *)v5 + 34) = 0;
    *((_QWORD *)v5 + 16) = 0;
    *(int32x2_t *)(v5 + 140) = v4;
    *((_DWORD *)v5 + 37) = -1;
    *((_QWORD *)v5 + 20) = 0;
    *((_QWORD *)v5 + 21) = 0;
    *((_QWORD *)v5 + 19) = 0;
    *((_DWORD *)v5 + 44) = 0;
    *(_QWORD *)(v5 + 180) = -1;
    v5[188] = 0;
    *((_DWORD *)v5 + 48) = 1065353216;
    *((_OWORD *)v5 + 13) = 0uLL;
    *((_OWORD *)v5 + 14) = 0uLL;
    *((_OWORD *)v5 + 15) = 0uLL;
    *((_OWORD *)v5 + 16) = 0uLL;
    *((_OWORD *)v5 + 17) = 0uLL;
    *((_OWORD *)v5 + 18) = 0uLL;
    *((_OWORD *)v5 + 19) = 0uLL;
    *((_OWORD *)v5 + 20) = 0uLL;
    *((_OWORD *)v5 + 21) = 0uLL;
    *((_OWORD *)v5 + 22) = 0uLL;
    *((_OWORD *)v5 + 23) = 0uLL;
    *((_OWORD *)v5 + 24) = 0uLL;
    *((_OWORD *)v5 + 25) = 0uLL;
    *((_OWORD *)v5 + 26) = 0uLL;
    v2 += 352;
    *((_OWORD *)v5 + 27) = 0uLL;
    *((_OWORD *)v5 + 28) = 0uLL;
  }
  while (v2 != 90112);
  v6 = 0;
  v7 = 256;
  v8 = vdup_n_s32(0x7F7FFFFFu);
  do
  {
    v9 = (char *)this + v6 + 90260;
    *(_QWORD *)(v9 - 28) = 0;
    *(_QWORD *)(v9 - 36) = 0;
    *((_DWORD *)v9 - 3) = 0;
    *(_QWORD *)(v9 - 20) = 0;
    *((int32x2_t *)v9 - 1) = v8;
    *(_DWORD *)v9 = -1;
    *(_QWORD *)(v9 + 12) = 0;
    *(_QWORD *)(v9 + 4) = 0;
    *(_QWORD *)(v9 + 20) = -1;
    *((_DWORD *)v9 + 7) = 0;
    *(_QWORD *)(v9 + 44) = 0;
    v6 += 88;
    *(_QWORD *)(v9 + 36) = 0;
    --v7;
  }
  while (v7);
  Phase::SpatialModeler::RayTracerState::RayTracerState((Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState *)((char *)this + 112752));
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 3) = 0;
  *(_OWORD *)(v3 + 8) = xmmword_2166F7320;
  *((_QWORD *)v3 + 4) = 0x3F80000000000000;
  return this;
}

void sub_2165A1254(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 48);
  if (v3 == (_QWORD *)(v1 + 24))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 24);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::SingleBlockAllocator::Alloc(Phase::SpatialModeler::SingleBlockAllocator *this, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v4;
  std::logic_error *exception;

  if (a3 > 0x10)
    std::terminate();
  do
    v4 = __ldaxr((unsigned __int8 *)this);
  while (__stlxr(1u, (unsigned __int8 *)this));
  if ((v4 & 1) != 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "SingleBlockAllocator::Alloc does not support concurrent allocations.");
  }
  std::vector<unsigned __int128>::resize((uint64_t)this + 8, (unint64_t)(a2 + 15) >> 4);
  return *((_QWORD *)this + 1);
}

void sub_2165A1318(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<unsigned __int128>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<unsigned __int128>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned __int128>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 4);
    if (v10 >> 60)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 4;
    v12 = v5 - v8;
    if (v12 >> 3 > v10)
      v10 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[16 * v11];
    v16 = &v14[16 * v13];
    bzero(v15, 16 * a2);
    v17 = &v15[16 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 2);
      v19 = *((_QWORD *)v7 - 1);
      v7 -= 16;
      *((_QWORD *)v15 - 2) = v18;
      *((_QWORD *)v15 - 1) = v19;
      v15 -= 16;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

Phase::SpatialModeler::RayTracerState *Phase::SpatialModeler::RayTracerState::RayTracerState(Phase::SpatialModeler::RayTracerState *this)
{
  char *v2;
  char *v3;
  char *v4;
  __int128 v5;
  int32x4_t v6;

  *(_OWORD *)((char *)this + 8) = xmmword_2166F7FB0;
  v2 = (char *)this + 23664;
  v3 = (char *)this + 22568;
  *(_OWORD *)((char *)this + 24) = xmmword_2166F7FC0;
  v4 = (char *)this + 19416;
  *(_OWORD *)((char *)this + 40) = xmmword_2166F7FD0;
  *((int32x2_t *)this + 7) = vdup_n_s32(0x3E4CCCCDu);
  *((_QWORD *)this + 8) = 0x800000000100;
  *((_BYTE *)this + 72) = 0;
  *((_DWORD *)this + 19) = 1000593162;
  *((_OWORD *)this + 5) = xmmword_2166F7FE0;
  *((_QWORD *)this + 12) = 1000;
  *(_OWORD *)((char *)this + 104) = xmmword_2166F7FF0;
  *((_QWORD *)this + 15) = 0x4040000040800000;
  *((_DWORD *)this + 32) = 1167867904;
  *((_DWORD *)this + 33) = 0x1000000;
  *(_OWORD *)((char *)this + 136) = xmmword_2166F8000;
  *((_DWORD *)this + 38) = 4;
  *((_BYTE *)this + 156) = 1;
  *((_QWORD *)this + 20) = 0xC2700000C1D00000;
  *((_DWORD *)this + 42) = 16777473;
  *(_QWORD *)((char *)this + 172) = 0x4E20000003E8;
  *((_BYTE *)this + 180) = 1;
  *((_QWORD *)this + 23) = 0x430300003DDB22D1;
  *((_DWORD *)this + 48) = 256;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 116) = 1135312896;
  *((_QWORD *)this + 59) = 0;
  *((_DWORD *)this + 120) = 1065353216;
  *((_DWORD *)this + 4756) = 0;
  *((_OWORD *)this + 1188) = 0u;
  *((_OWORD *)this + 1190) = 0u;
  *((_OWORD *)this + 1191) = 0u;
  *((_OWORD *)this + 1192) = 0u;
  *((_OWORD *)this + 1193) = 0u;
  *((_OWORD *)this + 1194) = 0u;
  *((_OWORD *)this + 1195) = 0u;
  *((_OWORD *)this + 1196) = 0u;
  *((_OWORD *)this + 1197) = 0u;
  *((_OWORD *)this + 1198) = 0u;
  *((_OWORD *)this + 1199) = 0u;
  *((_OWORD *)this + 1200) = 0u;
  *((_OWORD *)this + 1201) = 0u;
  *((_OWORD *)this + 1202) = 0u;
  *((_OWORD *)this + 1203) = 0u;
  *((_OWORD *)this + 1204) = 0u;
  *((_OWORD *)this + 1205) = 0u;
  *((_OWORD *)this + 1206) = 0u;
  *((_OWORD *)this + 1207) = 0u;
  *((_OWORD *)this + 1208) = 0u;
  *((_OWORD *)this + 1209) = 0u;
  bzero((char *)this + 496, 0x4848uLL);
  *((_QWORD *)this + 2422) = 0;
  *((_QWORD *)this + 2421) = 0;
  *((_QWORD *)this + 2420) = (char *)this + 19368;
  *(_OWORD *)((char *)this + 19384) = 0u;
  *(_OWORD *)((char *)this + 19400) = 0u;
  *(_DWORD *)v4 = 1065353216;
  *((_OWORD *)this + 1214) = 0u;
  *((_OWORD *)this + 1215) = 0u;
  *((_DWORD *)v4 + 10) = 1065353216;
  *(_OWORD *)((char *)this + 19464) = 0u;
  *(_OWORD *)((char *)this + 19480) = 0u;
  *((_DWORD *)v4 + 20) = 1065353216;
  *((_QWORD *)this + 2438) = 0;
  *((_DWORD *)v4 + 24) = 0;
  *((_QWORD *)this + 2621) = 0;
  *((_QWORD *)this + 2620) = 0;
  bzero((char *)this + 19520, 0x598uLL);
  *((_QWORD *)this + 2619) = (char *)this + 20960;
  *((_OWORD *)this + 1311) = 0u;
  *((_OWORD *)this + 1312) = 0u;
  *((_QWORD *)this + 2679) = 0;
  *((_DWORD *)v4 + 506) = 0;
  *((_DWORD *)v4 + 508) = 0;
  v4[2036] = 0;
  *((_QWORD *)this + 2682) = 0;
  *(_QWORD *)((char *)this + 22164) = 0;
  bzero((char *)this + 21472, 0x2A4uLL);
  *((_QWORD *)this + 2812) = 0;
  *((_QWORD *)this + 2811) = 0;
  *(_OWORD *)((char *)this + 21032) = 0u;
  *(_OWORD *)((char *)this + 21048) = 0u;
  *(_OWORD *)((char *)this + 21064) = 0u;
  *(_OWORD *)((char *)this + 21080) = 0u;
  *(_OWORD *)((char *)this + 21096) = 0u;
  *(_OWORD *)((char *)this + 21112) = 0u;
  *(_OWORD *)((char *)this + 21128) = 0u;
  *(_OWORD *)((char *)this + 21144) = 0u;
  *(_OWORD *)((char *)this + 21160) = 0u;
  *(_OWORD *)((char *)this + 21176) = 0u;
  *(_OWORD *)((char *)this + 21192) = 0u;
  *(_OWORD *)((char *)this + 21208) = 0u;
  *(_OWORD *)((char *)this + 21224) = 0u;
  *(_OWORD *)((char *)this + 21240) = 0u;
  *(_OWORD *)((char *)this + 21256) = 0u;
  *(_OWORD *)((char *)this + 21272) = 0u;
  *(_OWORD *)((char *)this + 21288) = 0u;
  *(_OWORD *)((char *)this + 21304) = 0u;
  *(_OWORD *)((char *)this + 21320) = 0u;
  *(_OWORD *)((char *)this + 21336) = 0u;
  *(_OWORD *)((char *)this + 21352) = 0u;
  *(_OWORD *)((char *)this + 21368) = 0u;
  *(_OWORD *)((char *)this + 21384) = 0u;
  *(_OWORD *)((char *)this + 21400) = 0u;
  *((_QWORD *)this + 2677) = 0;
  *((_QWORD *)this + 2810) = (char *)this + 22488;
  *((_QWORD *)this + 2815) = 0;
  *((_QWORD *)this + 2814) = 0;
  *((_QWORD *)this + 2813) = (char *)this + 22512;
  v4[3112] = 1;
  *((_DWORD *)v4 + 779) = 1097859072;
  *(_QWORD *)&v5 = 0x101010101010101;
  *((_QWORD *)&v5 + 1) = 0x101010101010101;
  *(_OWORD *)((char *)this + 22536) = v5;
  *(_OWORD *)((char *)this + 22552) = v5;
  *(_DWORD *)v3 = 2;
  *((_QWORD *)this + 2823) = 0;
  *((_QWORD *)this + 2822) = 0;
  *((_DWORD *)v3 + 6) = 0;
  *(_QWORD *)(v3 + 28) = 1065353216;
  *(_QWORD *)(v3 + 36) = 0;
  *(_OWORD *)(v3 + 44) = xmmword_2166F8010;
  *(_QWORD *)(v3 + 60) = 1065353216;
  *(_QWORD *)(v3 + 68) = 0;
  *((_DWORD *)v3 + 19) = 1065353216;
  v3[80] = 0;
  *((_QWORD *)this + 2838) = 0;
  *((_OWORD *)this + 1418) = 0u;
  *((_OWORD *)this + 1417) = 0u;
  *((_OWORD *)this + 1416) = 0u;
  *((_QWORD *)this + 2839) = 0xFFFFFFFFLL;
  *((_QWORD *)this + 2840) = 0x3FB999999999999ALL;
  *((_DWORD *)v3 + 40) = 0;
  *(_QWORD *)(v3 + 164) = 0;
  *((_QWORD *)this + 2843) = 0x3FF0000000000000;
  *((_OWORD *)this + 1422) = 0u;
  *((_OWORD *)this + 1423) = 0u;
  *((_DWORD *)v3 + 54) = 0;
  *(_QWORD *)(v3 + 220) = 1065353216;
  *(_QWORD *)(v3 + 228) = 0;
  *((_DWORD *)v3 + 59) = 1065353216;
  *(_OWORD *)((char *)this + 22808) = 0u;
  *(_OWORD *)((char *)this + 22824) = 0u;
  *(_OWORD *)((char *)this + 22840) = 0u;
  *(_OWORD *)((char *)this + 22856) = 0u;
  *(_OWORD *)((char *)this + 22870) = 0u;
  *((_OWORD *)this + 1446) = 0u;
  *((_OWORD *)this + 1445) = 0u;
  *((_OWORD *)this + 1444) = 0u;
  *((_OWORD *)this + 1443) = 0u;
  *((_OWORD *)this + 1442) = 0u;
  *((_OWORD *)this + 1441) = 0u;
  *((_OWORD *)this + 1440) = 0u;
  *((_OWORD *)this + 1439) = 0u;
  *((_OWORD *)this + 1438) = 0u;
  *((_OWORD *)this + 1437) = 0u;
  *((_OWORD *)this + 1436) = 0u;
  *((_OWORD *)this + 1435) = 0u;
  *((_OWORD *)this + 1434) = 0u;
  *((_OWORD *)this + 1433) = 0u;
  *((_OWORD *)this + 1432) = 0u;
  *((_OWORD *)this + 1431) = 0u;
  *((_DWORD *)v3 + 146) = 1;
  *((_QWORD *)this + 2896) = 0;
  *((_DWORD *)v3 + 152) = 1065353216;
  *((_QWORD *)this + 2905) = 0;
  *((_QWORD *)this + 2904) = 0;
  *((_QWORD *)this + 2906) = 0;
  *((_QWORD *)this + 2910) = 0;
  *((_QWORD *)this + 2909) = 0;
  *((_QWORD *)this + 2911) = 0;
  *((_QWORD *)this + 2914) = 0;
  *((_QWORD *)this + 2913) = 0;
  *((_QWORD *)this + 2915) = 0;
  *(_OWORD *)((char *)this + 23416) = 0u;
  *(_OWORD *)((char *)this + 23400) = 0u;
  *(_OWORD *)((char *)this + 23384) = 0u;
  *(_OWORD *)((char *)this + 23368) = 0u;
  *(_OWORD *)((char *)this + 23352) = 0u;
  *(_OWORD *)((char *)this + 23336) = 0u;
  *((_OWORD *)this + 1470) = 0u;
  *((_OWORD *)this + 1469) = 0u;
  *((_OWORD *)this + 1468) = 0u;
  *((_OWORD *)this + 1467) = 0u;
  *((_OWORD *)this + 1466) = 0u;
  *((_OWORD *)this + 1465) = 0u;
  *((_OWORD *)this + 1477) = 0u;
  *((_OWORD *)this + 1476) = 0u;
  *((_OWORD *)this + 1475) = 0u;
  *((_OWORD *)this + 1474) = 0u;
  *((_OWORD *)this + 1473) = 0u;
  *((_OWORD *)this + 1472) = 0u;
  *v2 = 0;
  *((_QWORD *)this + 2902) = 0;
  *((_OWORD *)this + 1450) = 0u;
  *((_OWORD *)this + 1449) = 0u;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v2 + 4) = v6;
  *(int32x4_t *)(v2 + 20) = v6;
  *(int32x4_t *)(v2 + 36) = v6;
  *(int32x4_t *)(v2 + 52) = v6;
  *(_QWORD *)(v2 + 68) = v6.i64[0];
  bzero((char *)this + 23744, 0x508uLL);
  *((_WORD *)v2 + 688) = 0;
  *((_QWORD *)this + 3131) = 0;
  return this;
}

void Phase::Geometry::Listener::~Listener(Phase::Geometry::Listener *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
}

void Phase::SpatialModeler::RendererStates::~RendererStates(Phase::SpatialModeler::RendererStates *this)
{
  std::__tree<Phase::SpatialCategory>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  std::__tree<Phase::SpatialCategory>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

void Phase::SpatialModeler::RayTracerState::Results::~Results(Phase::SpatialModeler::RayTracerState::Results *this)
{
  void *v2;

  std::__tree<Phase::SpatialCategory>::destroy((uint64_t)this + 1592, *((_QWORD **)this + 200));
  v2 = (void *)*((_QWORD *)this + 196);
  if (v2)
  {
    *((_QWORD *)this + 197) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::~__hash_table((uint64_t)this + 104);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::~__hash_table((uint64_t)this + 64);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::~__hash_table((uint64_t)this + 24);
  std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

void Phase::SpatialModeler::RayTracerState::State::~State(Phase::SpatialModeler::RayTracerState::State *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 2310);
  if (v2)
  {
    *((_QWORD *)this + 2311) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2307);
  if (v3)
  {
    *((_QWORD *)this + 2308) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 2304);
  if (v4)
  {
    *((_QWORD *)this + 2305) = v4;
    operator delete(v4);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 8));
      std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::SpatialModeler::SingleERClusterResult>,0>(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::SpatialModeler::SingleERClusterResult>,0>(uint64_t *a1)
{
  uint64_t v2;

  v2 = (uint64_t)(a1 + 1);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](a1 + 24);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](a1 + 19);
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](a1 + 13);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](a1 + 7);
  return std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v2);
}

void std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::destroy(a1, a2[1]);
    std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 7));
    std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&>(Phase::SpatialModeler::SingleBlockAllocator&&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&>(Phase::SpatialModeler::SingleBlockAllocator&&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&>(Phase::SpatialModeler::SingleBlockAllocator&&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&>(Phase::SpatialModeler::SingleBlockAllocator&&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D57C668;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&>(Phase::SpatialModeler::SingleBlockAllocator&&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&>(Phase::SpatialModeler::SingleBlockAllocator&&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D57C668;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&>(Phase::SpatialModeler::SingleBlockAllocator&&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&>(Phase::SpatialModeler::SingleBlockAllocator&&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&>(Phase::SpatialModeler::SingleBlockAllocator&&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&)::{lambda(void *)#1} &,void *>((unsigned __int8 **)(a1 + 8), a2);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&>(Phase::SpatialModeler::SingleBlockAllocator&&,std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>> Phase::details::Alloc<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,Phase::SpatialModeler::SingleBlockAllocator>(Phase::SpatialModeler::SingleBlockAllocator &,unsigned long)::{lambda(Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState*)#1} const&)::{lambda(void *)#1} &,void *>(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a2;
  Phase::SpatialModeler::RayTracerState::~RayTracerState((void **)(*a2 + 112752));
  v4 = *(_QWORD **)(v3 + 48);
  if (v4 == (_QWORD *)(v3 + 24))
  {
    v5 = 4;
    v4 = (_QWORD *)(v3 + 24);
    goto LABEL_5;
  }
  if (v4)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  result = std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v3 + 8);
  atomic_store(0, *a1);
  return result;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>>::reset[abi:ne180100](a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

_QWORD *Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup>(unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(Phase::Logger *a1, uint64_t a2, _QWORD *a3, std::align_val_t *a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  _QWORD *result;
  uint64_t v12;
  NSObject *v13;
  std::logic_error *exception;
  _BYTE v15[12];
  __int16 v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 112));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v15 = 136315394;
      *(_QWORD *)&v15[4] = "ManagedPtr.hpp";
      v16 = 1024;
      v17 = 229;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v15, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  v6 = (char *)operator new(336 * *a3, *a4);
  v7 = &v6[336 * a2];
  v8 = v6;
  do
  {
    v9 = 0;
    *((_DWORD *)v8 + 8) = 0;
    *(_OWORD *)v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    *(_QWORD *)(v8 + 36) = 1065353216;
    *(_QWORD *)(v8 + 44) = 0;
    *((_DWORD *)v8 + 13) = 1065353216;
    do
    {
      v10 = &v8[v9];
      *((_DWORD *)v10 + 14) = 0;
      *((_QWORD *)v10 + 8) = 0;
      v9 += 16;
    }
    while (v9 != 128);
    *((_QWORD *)v8 + 23) = 0;
    memset(v15, 0, sizeof(v15));
    Phase::Subbands<float>::Subbands((uint64_t)(v8 + 192), v15, 3);
    v8[320] = 0;
    v8 += 336;
  }
  while (v8 != v7);
  *(_QWORD *)v15 = &off_24D57C6B0;
  v15[8] = 0;
  v18 = v15;
  *(_QWORD *)a1 = v6;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)a1 + 8, (uint64_t)v15);
  result = v18;
  if (v18 == v15)
  {
    v12 = 4;
    result = v15;
  }
  else
  {
    if (!v18)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_2165A1F48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_14SpatialModeler11RenderGroupERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_ED0Ev()
{
  JUMPOUT(0x2199F9D70);
}

_BYTE *_ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_14SpatialModeler11RenderGroupERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_E7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24D57C6B0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_14SpatialModeler11RenderGroupERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24D57C6B0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_14SpatialModeler11RenderGroupERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_EclEOSC_(uint64_t a1, void **a2)
{
  operator delete(*a2);
}

_QWORD *Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL>(unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  _QWORD *result;
  uint64_t v6;
  NSObject *v7;
  std::logic_error *exception;
  _BYTE v9[12];
  __int16 v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 112));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v9 = 136315394;
      *(_QWORD *)&v9[4] = "ManagedPtr.hpp";
      v10 = 1024;
      v11 = 229;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v9, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  v4 = operator new(**(_QWORD **)a2, **(std::align_val_t **)(a2 + 8));
  *(_QWORD *)v9 = &off_24D57C788;
  v9[8] = 0;
  v12 = v9;
  *a3 = v4;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a3 + 1), (uint64_t)v9);
  result = v12;
  if (v12 == v9)
  {
    v6 = 4;
    result = v9;
  }
  else
  {
    if (!v12)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_2165A2134(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayIbRKZNS3_10AllocArrayIbEENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS5_IbEESD_mmEUlPS7_E_EESD_mOT0_OT1_EUlSA_E_NS_9allocatorISP_EESB_ED0Ev()
{
  JUMPOUT(0x2199F9D70);
}

_BYTE *_ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayIbRKZNS3_10AllocArrayIbEENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS5_IbEESD_mmEUlPS7_E_EESD_mOT0_OT1_EUlSA_E_NS_9allocatorISP_EESB_E7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24D57C788;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayIbRKZNS3_10AllocArrayIbEENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS5_IbEESD_mmEUlPS7_E_EESD_mOT0_OT1_EUlSA_E_NS_9allocatorISP_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24D57C788;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayIbRKZNS3_10AllocArrayIbEENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS5_IbEESD_mmEUlPS7_E_EESD_mOT0_OT1_EUlSA_E_NS_9allocatorISP_EESB_EclEOSA_(uint64_t a1, void **a2)
{
  operator delete(*a2);
}

_QWORD *Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput>(unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  NSObject *v9;
  std::logic_error *exception;
  _BYTE v11[12];
  __int16 v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 112));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v11 = 136315394;
      *(_QWORD *)&v11[4] = "ManagedPtr.hpp";
      v12 = 1024;
      v13 = 229;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v11, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  v5 = operator new(16 * **(_QWORD **)a2, **(std::align_val_t **)(a2 + 8));
  v6 = v5;
  do
  {
    *v6 = -1;
    v6[1] = 0;
    v6 += 2;
  }
  while (v6 != &v5[2 * a1]);
  *(_QWORD *)v11 = &off_24D57C6F8;
  v11[8] = 0;
  v14 = v11;
  *a3 = v5;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a3 + 1), (uint64_t)v11);
  result = v14;
  if (v14 == v11)
  {
    v8 = 4;
    result = v11;
  }
  else
  {
    if (!v14)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_2165A2340(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_14SpatialModeler19SubmixRoutingOutputERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_ED0Ev()
{
  JUMPOUT(0x2199F9D70);
}

_BYTE *_ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_14SpatialModeler19SubmixRoutingOutputERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_E7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24D57C6F8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_14SpatialModeler19SubmixRoutingOutputERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24D57C6F8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_14SpatialModeler19SubmixRoutingOutputERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_EclEOSC_(uint64_t a1, void **a2)
{
  operator delete(*a2);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_2165A2634(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x128uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_QWORD *)v14 + 2) = **a4;
  *((_QWORD *)v14 + 35) = 0;
  *(_OWORD *)(v14 + 248) = 0u;
  *(_OWORD *)(v14 + 232) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 184) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 264) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  *((_DWORD *)v14 + 16) = 3;
  v14[68] = 1;
  *((_QWORD *)v14 + 14) = 0;
  *((_QWORD *)v14 + 15) = 0;
  *((_QWORD *)v14 + 13) = 0;
  *((_QWORD *)v14 + 20) = 0;
  *((_QWORD *)v14 + 21) = 0;
  *((_QWORD *)v14 + 19) = 0;
  *((_QWORD *)v14 + 25) = 0;
  *((_QWORD *)v14 + 26) = 0;
  *((_QWORD *)v14 + 30) = 0;
  *((_QWORD *)v14 + 31) = 0;
  *((_QWORD *)v14 + 32) = 0;
  *((_WORD *)v14 + 132) = 0;
  *((_QWORD *)v14 + 36) = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_2165A290C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = *(uint64_t **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::SpatialModeler::SingleERClusterResult>,0>(v2 + 2);
    operator delete(v2);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *inserted;
  uint64_t *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v9 = a2[2];
      v8[2] = v9;
      *((_DWORD *)v8 + 6) = *((_DWORD *)a2 + 6);
      *((_DWORD *)v8 + 7) = *((_DWORD *)a2 + 7);
      *((_DWORD *)v8 + 8) = *((_DWORD *)a2 + 8);
      *((_DWORD *)v8 + 9) = *((_DWORD *)a2 + 9);
      v10 = (uint64_t *)*v8;
      v8[1] = v9;
      inserted = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v8 + 2);
      std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (uint64_t *)*a2;
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v12 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__emplace_multi<std::pair<unsigned long long const,Phase::SpatialModeler::ClusteredSourceInfo> const&>(a1, (uint64_t)(a2 + 2));
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_2165A2A5C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_2165A2A7C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && v16[2] == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__emplace_multi<std::pair<unsigned long long const,Phase::SpatialModeler::ClusteredSourceInfo> const&>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  _QWORD *inserted;

  v4 = (char *)operator new(0x28uLL);
  v5 = *(_QWORD *)a2;
  *((_QWORD *)v4 + 2) = *(_QWORD *)a2;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = v5;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__node_insert_multi_prepare((uint64_t)a1, v5, (_QWORD *)v4 + 2);
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_2165A2E98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *Phase::AllocPackedSubbandArray<float>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v9[0] = &off_24D57C740;
  v10 = v9;
  *a3 = operator new(4 * a1 * a2 + 16, (std::align_val_t)8uLL);
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a3 + 1), (uint64_t)v9);
  result = v10;
  if (v10 == v9)
  {
    v7 = 4;
    result = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  v8 = *a3;
  *v8 = a1;
  v8[1] = a2;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>>(unsigned long,unsigned long)::{lambda(Phase::PackedSubbandArray<float>*)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>>(unsigned long,unsigned long)::{lambda(Phase::PackedSubbandArray<float>*)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>>(unsigned long,unsigned long)::{lambda(Phase::PackedSubbandArray<float>*)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>>(unsigned long,unsigned long)::{lambda(Phase::PackedSubbandArray<float>*)#1}>,void ()(void *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D57C740;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>>(unsigned long,unsigned long)::{lambda(Phase::PackedSubbandArray<float>*)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>>(unsigned long,unsigned long)::{lambda(Phase::PackedSubbandArray<float>*)#1}>,void ()(void *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D57C740;
}

void std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>>(unsigned long,unsigned long)::{lambda(Phase::PackedSubbandArray<float>*)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>>(unsigned long,unsigned long)::{lambda(Phase::PackedSubbandArray<float>*)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  operator delete(*a2);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Phase::Vector<float,2ul>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2165A3030(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,false>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (*(float *)(*(_QWORD *)(*a3 + 56) + 4 * v20) < *(float *)(*(_QWORD *)(*a3 + 56) + 4 * *v9))
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, v9 + 1, a2 - 1, (uint64_t)a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, v9 + 1, v9 + 2, a2 - 1, (uint64_t)a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, (uint64_t)a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, a2, (uint64_t)a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, a2, (uint64_t)a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(&v9[v13 >> 1], v9, a2 - 1, (uint64_t)a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, &v9[v13 >> 1], a2 - 1, (uint64_t)a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9 + 1, v15 - 1, a2 - 2, (uint64_t)a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9 + 2, &v9[v14 + 1], a2 - 3, (uint64_t)a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v15 - 1, v15, &v9[v14 + 1], (uint64_t)a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(float *)(*(_QWORD *)(*a3 + 56) + 4 * *(v9 - 1)) >= *(float *)(*(_QWORD *)(*a3 + 56) + 4 * *v9))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &>(v9, a2, (uint64_t)a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &>(v9, a2, (uint64_t)a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, v17, (uint64_t)a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v17 + 1, a2, (uint64_t)a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *>(v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = *(_QWORD *)(*(_QWORD *)a3 + 56);
      v5 = 8;
      v6 = result;
      do
      {
        v8 = *v6;
        v7 = v6[1];
        v6 = v3;
        v9 = *(float *)(v4 + 4 * v7);
        if (v9 < *(float *)(v4 + 4 * v8))
        {
          v10 = v5;
          while (1)
          {
            *(uint64_t *)((char *)result + v10) = v8;
            v11 = v10 - 8;
            if (v10 == 8)
              break;
            v8 = *(uint64_t *)((char *)result + v10 - 16);
            v10 -= 8;
            if (v9 >= *(float *)(v4 + 4 * v8))
            {
              v12 = (uint64_t *)((char *)result + v11);
              goto LABEL_10;
            }
          }
          v12 = result;
LABEL_10:
          *v12 = v7;
        }
        v3 = v6 + 1;
        v5 += 8;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = *(_QWORD *)(*(_QWORD *)a3 + 56);
      do
      {
        v6 = *result;
        v5 = result[1];
        result = v3;
        v7 = *(float *)(v4 + 4 * v5);
        if (v7 < *(float *)(v4 + 4 * v6))
        {
          do
          {
            *v3 = v6;
            v6 = *(v3 - 2);
            --v3;
          }
          while (v7 < *(float *)(v4 + 4 * v6));
          *v3 = v5;
        }
        v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  v6 = *(_QWORD *)(*(_QWORD *)a4 + 56);
  v7 = *(float *)(v6 + 4 * *a2);
  v8 = *(float *)(v6 + 4 * *a1);
  v9 = *a3;
  v10 = *(float *)(v6 + 4 * *a3);
  if (v7 < v8)
  {
    if (v10 < v7)
    {
      *a1 = v9;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    if (*(float *)(v6 + 4 * *a3) >= v8)
      return 1;
    *a2 = *a3;
    *a3 = v5;
    return 2;
  }
  if (v10 < v7)
  {
    *a2 = v9;
    *a3 = v4;
    v11 = *a1;
    if (*(float *)(v6 + 4 * *a2) >= *(float *)(v6 + 4 * *a1))
      return 1;
    *a1 = *a2;
    *a2 = v11;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*(_QWORD *)a3 + 56);
  v5 = *(float *)(v4 + 4 * *a1);
  if (v5 >= *(float *)(v4 + 4 * *(a2 - 1)))
  {
    v8 = a1 + 1;
    do
    {
      v6 = v8;
      if (v8 >= a2)
        break;
      ++v8;
    }
    while (v5 >= *(float *)(v4 + 4 * *v6));
  }
  else
  {
    v6 = a1;
    do
    {
      v7 = v6[1];
      ++v6;
    }
    while (v5 >= *(float *)(v4 + 4 * v7));
  }
  if (v6 < a2)
  {
    do
      v9 = *--a2;
    while (v5 < *(float *)(v4 + 4 * v9));
  }
  if (v6 < a2)
  {
    v10 = *v6;
    v11 = *a2;
    do
    {
      *v6 = v11;
      *a2 = v10;
      do
      {
        v12 = v6[1];
        ++v6;
        v10 = v12;
      }
      while (v5 >= *(float *)(v4 + 4 * v12));
      do
      {
        v13 = *--a2;
        v11 = v13;
      }
      while (v5 < *(float *)(v4 + 4 * v13));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v3;
  return v6;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = 0;
  v4 = *a1;
  v5 = *(_QWORD *)(*(_QWORD *)a3 + 56);
  v6 = *(float *)(v5 + 4 * *a1);
  do
    v7 = a1[++v3];
  while (*(float *)(v5 + 4 * v7) < v6);
  v8 = &a1[v3];
  v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2)
        break;
      v11 = *--a2;
    }
    while (*(float *)(v5 + 4 * v11) >= v6);
  }
  else
  {
    do
      v10 = *--a2;
    while (*(float *)(v5 + 4 * v10) >= v6);
  }
  if (v8 < a2)
  {
    v12 = *a2;
    v13 = &a1[v3];
    v14 = a2;
    do
    {
      *v13 = v12;
      *v14 = v7;
      do
      {
        v15 = v13[1];
        ++v13;
        v7 = v15;
      }
      while (*(float *)(v5 + 4 * v15) < v6);
      do
      {
        v16 = *--v14;
        v12 = v16;
      }
      while (*(float *)(v5 + 4 * v16) >= v6);
    }
    while (v13 < v14);
    v9 = v13 - 1;
  }
  if (v9 != a1)
    *a1 = *v9;
  *v9 = v4;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(*(_QWORD *)(*(_QWORD *)a3 + 56) + 4 * v8) < *(float *)(*(_QWORD *)(*(_QWORD *)a3 + 56)
                                                                             + 4 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)a3 + 56);
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(float *)(v13 + 4 * *v11);
    if (v17 < *(float *)(v13 + 4 * *v10))
    {
      v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        v19 = v18 - 8;
        if (v18 == 8)
          break;
        v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v18 -= 8;
        if (v17 >= *(float *)(v13 + 4 * v16))
        {
          v20 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a2, a3, a5);
  v11 = *a3;
  v12 = *(_QWORD *)(*(_QWORD *)a5 + 56);
  if (*(float *)(v12 + 4 * *a4) < *(float *)(v12 + 4 * *a3))
  {
    *a3 = *a4;
    *a4 = v11;
    v13 = *a2;
    if (*(float *)(v12 + 4 * *a3) < *(float *)(v12 + 4 * *a2))
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *a1;
      if (*(float *)(v12 + 4 * *a2) < *(float *)(v12 + 4 * *a1))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a2, a3, a4, a6);
  v13 = *a4;
  v14 = *(_QWORD *)(*(_QWORD *)a6 + 56);
  if (*(float *)(v14 + 4 * *a5) < *(float *)(v14 + 4 * *a4))
  {
    *a4 = *a5;
    *a5 = v13;
    v15 = *a3;
    if (*(float *)(v14 + 4 * *a4) < *(float *)(v14 + 4 * *a3))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (*(float *)(v14 + 4 * *a3) < *(float *)(v14 + 4 * *a2))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *a1;
        if (*(float *)(v14 + 4 * *a2) < *(float *)(v14 + 4 * *a1))
        {
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        if (*(float *)(*(_QWORD *)(*a4 + 56) + 4 * *v14) < *(float *)(*(_QWORD *)(*a4 + 56) + 4 * *a1))
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      v17 = a2 - 1;
      do
      {
        v18 = *a1;
        v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a4, v16);
        if (v17 == v19)
        {
          *v19 = v18;
        }
        else
        {
          *v19 = *v17;
          *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>((uint64_t)a1, (uint64_t)(v19 + 1), (uint64_t)a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (uint64_t *)(result + 8 * v7);
      v9 = v6 + 2;
      v10 = *a2;
      if (v9 >= a3)
      {
        v11 = *(_QWORD *)(v10 + 56);
      }
      else
      {
        v11 = *(_QWORD *)(v10 + 56);
        if (*(float *)(v11 + 4 * *v8) < *(float *)(v11 + 4 * v8[1]))
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *v8;
      v13 = *a4;
      v14 = *(float *)(v11 + 4 * *a4);
      if (*(float *)(v11 + 4 * *v8) >= v14)
      {
        do
        {
          v15 = v8;
          *a4 = v12;
          if (v5 < v7)
            break;
          v16 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (uint64_t *)(result + 8 * v7);
          v17 = v16 + 2;
          if (v17 < a3 && *(float *)(v11 + 4 * *v8) < *(float *)(v11 + 4 * v8[1]))
          {
            ++v8;
            v7 = v17;
          }
          v12 = *v8;
          a4 = v15;
        }
        while (*(float *)(v11 + 4 * *v8) >= v14);
        *v15 = v13;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(_QWORD *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  v6 = *a2;
  do
  {
    v7 = result;
    result += v3 + 1;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3
      && *(float *)(*(_QWORD *)(v6 + 56) + 4 * *result) < *(float *)(*(_QWORD *)(v6 + 56) + 4 * result[1]))
    {
      ++result;
      v3 = v9;
    }
    *v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,void Phase::SpatialModeler::SortMetadataByDelay<float>(Phase::SpatialModeler::DirectionalMetadataOutput<float> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _QWORD *v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (_QWORD *)(result + 8 * v4);
    v6 = *v5;
    v9 = *(_QWORD *)(a2 - 8);
    v7 = (_QWORD *)(a2 - 8);
    v8 = v9;
    v10 = *(_QWORD *)(*(_QWORD *)a3 + 56);
    v11 = *(float *)(v10 + 4 * v9);
    if (*(float *)(v10 + 4 * *v5) < v11)
    {
      do
      {
        v12 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (_QWORD *)(result + 8 * v4);
        v6 = *v5;
        v7 = v12;
      }
      while (*(float *)(v10 + 4 * *v5) < v11);
      *v12 = v8;
    }
  }
  return result;
}

_QWORD *std::__function::__value_func<void ()(void *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

