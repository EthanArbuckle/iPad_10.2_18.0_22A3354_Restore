void sub_216616B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,void *a36,uint64_t a37,void *a38)
{

  Phase::ActionTreeBuilder::~ActionTreeBuilder((Phase::ActionTreeBuilder *)&STACK[0x208]);
  _Unwind_Resume(a1);
}

uint64_t Phase::ReadString(uint64_t a1, void *a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  id v11;
  void *v12;
  const char *v13;
  id v14;
  uint64_t v15;

  v11 = a3;
  objc_msgSend(a2, "objectForKeyedSubscript:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (objc_msgSend(v12, "lengthOfBytesUsingEncoding:", 4) <= a5)
      {
        objc_msgSend(v12, "getCString:maxLength:encoding:", a4, a5, 4);
        if (!a6 || (Phase::AddStringToPool(a1, a6, v12) & 1) != 0)
        {
          v15 = 1;
          goto LABEL_8;
        }
        strncpy((char *)(a1 + 8), (const char *)objc_msgSend(objc_retainAutorelease(v12), "UTF8String"), 0x80uLL);
      }
      else
      {
        v13 = (const char *)objc_msgSend(objc_retainAutorelease(v11), "UTF8String");
        v14 = objc_retainAutorelease(v12);
        objc_msgSend(v14, "UTF8String");
        strlen((const char *)objc_msgSend(objc_retainAutorelease(v14), "UTF8String"));
        Phase::ParserSetParseError(a1, 1346924645, "", v13, "Field too long: %s must be length %d or shorter. Current size: %d");
      }
    }
    else
    {
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(objc_retainAutorelease(v11), "UTF8String"), "Field should be a string");
    }
  }
  else
  {
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)objc_msgSend(objc_retainAutorelease(v11), "UTF8String"), "");
  }
  v15 = 0;
LABEL_8:

  return v15;
}

void sub_2166170E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::BuildParameters(uint64_t a1, void *a2, char **a3, uint64_t a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned __int8 *v10;
  id v11;
  __CFString *v12;
  void *v13;
  id v14;
  int v15;
  id v16;
  __CFString *v17;
  void *v18;
  id v19;
  int v20;
  char PhaseIdWithDefault;
  char ChildDictionary;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char PhaseId;
  char FloatTypeWith;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  const char *v46;
  char *v47;
  __CFString *v48;
  __CFString *v49;
  __CFString *v50;
  __CFString *v51;
  uint64_t v52;
  uint64_t v53;
  __CFString *v54;
  const char *v55;
  __CFString *v56;
  __CFString *v58;
  const char *v59;
  __CFString *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  id obj;
  void *v65;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  id v71;
  void *__p[2];
  char v73;
  _OWORD __src[29];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _OWORD v79[2];
  int v80;
  char v81[128];
  char __s[128];
  _BYTE v83[128];
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v65 = v6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(CFSTR("Parameters"), "UTF8String"), "Parameter array object must be an array");
    v44 = 0;
    goto LABEL_116;
  }
  memset(v79, 0, sizeof(v79));
  v80 = 1065353216;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  obj = v6;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v83, 16);
  if (!v7)
  {
    v44 = 1;
    goto LABEL_115;
  }
  v63 = *(_QWORD *)v76;
  while (2)
  {
    v8 = 0;
    v62 = v7;
    do
    {
      if (*(_QWORD *)v76 != v63)
        objc_enumerationMutation(obj);
      v9 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * v8);
      memset(__src, 0, sizeof(__src));
      if ((Phase::ReadString(a1, v9, CFSTR("Name"), (uint64_t)__s, 0x80uLL, 0) & 1) == 0)
      {
        *(_OWORD *)(a1 + 72) = xmmword_21673963B;
        *(_OWORD *)(a1 + 88) = unk_21673964B;
        *(_OWORD *)(a1 + 104) = xmmword_21673965B;
        *(_OWORD *)(a1 + 120) = unk_21673966B;
        strcpy((char *)(a1 + 8), "<ParameterStruct>");
        *(_WORD *)(a1 + 26) = unk_21673960D;
        *(_DWORD *)(a1 + 28) = unk_21673960F;
        *(_QWORD *)(a1 + 32) = unk_216739613;
        *(_OWORD *)(a1 + 40) = xmmword_21673961B;
        *(_OWORD *)(a1 + 56) = unk_21673962B;
        goto LABEL_114;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, __s);
      v10 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v79, (unsigned __int8 *)__p);
      if (v73 < 0)
        operator delete(__p[0]);
      if (v10)
      {
        Phase::ParserSetParseError(a1, 1346924646, "MetaParameters", __s, "Mixer array contains multiple mixers named the same thing");
        goto LABEL_114;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, __s);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v79, (unsigned __int8 *)__p, (uint64_t)__p);
      if (v73 < 0)
        operator delete(__p[0]);
      if ((Phase::ReadPhaseId(a1, v9, CFSTR("Name"), __src, a4) & 1) == 0)
        goto LABEL_113;
      v11 = v9;
      v12 = CFSTR("Type");
      objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("Type"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v13)
      {
        v48 = objc_retainAutorelease(CFSTR("Type"));
        Phase::ParserSetParseError(a1, 1346924642, "", (const char *)objc_msgSend(CFSTR("Type"), "UTF8String"), "");
        goto LABEL_98;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v49 = objc_retainAutorelease(CFSTR("Type"));
        Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(CFSTR("Type"), "UTF8String"), "Field should be a string");
        goto LABEL_98;
      }
      v14 = v13;
      if ((objc_msgSend(v14, "isEqualToString:", CFSTR("input")) & 1) != 0)
      {
        v15 = 1;
      }
      else if ((objc_msgSend(v14, "isEqualToString:", CFSTR("mapped_range")) & 1) != 0)
      {
        v15 = 2;
      }
      else
      {
        if ((objc_msgSend(v14, "isEqualToString:", CFSTR("mapped_discrete")) & 1) == 0)
        {

          v58 = objc_retainAutorelease(CFSTR("Type"));
          v59 = (const char *)objc_msgSend(CFSTR("Type"), "UTF8String");
          v60 = objc_retainAutorelease(CFSTR("Type"));
          objc_msgSend(CFSTR("Type"), "UTF8String");
          objc_msgSend(objc_retainAutorelease(v14), "UTF8String");
          Phase::ParserSetParseError(a1, 1346924643, "", v59, "Field is bad %s - %s");
LABEL_98:

          goto LABEL_113;
        }
        v15 = 3;
      }

      DWORD2(__src[0]) = v15;
      v16 = v11;
      v17 = CFSTR("InputType");
      objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("InputType"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v18)
      {
        v50 = objc_retainAutorelease(CFSTR("InputType"));
        Phase::ParserSetParseError(a1, 1346924642, "", (const char *)objc_msgSend(CFSTR("InputType"), "UTF8String"), "");
        goto LABEL_112;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v51 = objc_retainAutorelease(CFSTR("InputType"));
        Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(CFSTR("InputType"), "UTF8String"), "Field should be a string");
        goto LABEL_112;
      }
      v19 = v18;
      if ((objc_msgSend(v19, "isEqualToString:", CFSTR("float")) & 1) != 0)
      {
        v20 = 1;
        goto LABEL_28;
      }
      if ((objc_msgSend(v19, "isEqualToString:", CFSTR("string")) & 1) == 0)
      {

        v54 = objc_retainAutorelease(CFSTR("InputType"));
        v55 = (const char *)objc_msgSend(CFSTR("InputType"), "UTF8String");
        v56 = objc_retainAutorelease(CFSTR("InputType"));
        objc_msgSend(CFSTR("InputType"), "UTF8String");
        objc_msgSend(objc_retainAutorelease(v19), "UTF8String");
        Phase::ParserSetParseError(a1, 1346924643, "", v55, "Field is bad %s - %s");
LABEL_112:

LABEL_113:
        strncpy((char *)(a1 + 8), __s, 0x80uLL);
        goto LABEL_114;
      }
      v20 = 2;
LABEL_28:

      HIDWORD(__src[0]) = v20;
      if (v15 == 3)
      {
        if ((Phase::ReadEnumWithoutDefault<Phase::OutputMetaParamType>(a1, v16, &__src[1]) & 1) == 0
          || (Phase::ReadPhaseId(a1, v16, CFSTR("LinkedInputParameter"), (_QWORD *)&__src[1] + 1, a4) & 1) == 0)
        {
          goto LABEL_113;
        }
        objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("DiscreteValues"));
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v25 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
        {
          Phase::ParserSetParseError(a1, 1346924643, __s, (const char *)objc_msgSend(CFSTR("DiscreteValues"), "UTF8String"), "Range array object must be an array");

          goto LABEL_114;
        }
        DWORD2(__src[3]) = 0;
        v61 = v25;
        if ((unint64_t)objc_msgSend(v61, "count") >= 0x10)
        {
          objc_msgSend(v61, "count");
          Phase::ParserSetParseError(a1, 1346924646, __s, __s, "Discrete value range has too many segments %d > %d");
          goto LABEL_110;
        }
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v23 = v61;
        v26 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v67, v81, 16);
        if (!v26)
        {

LABEL_122:
          Phase::ParserSetParseError(a1, 1346924641, __s, "", "Mapped param doesn't have any ranges");
LABEL_110:

LABEL_114:
          v44 = 0;
          goto LABEL_115;
        }
        v27 = 0;
        v28 = *(_QWORD *)v68;
LABEL_49:
        v29 = 0;
        while (2)
        {
          if (*(_QWORD *)v68 != v28)
            objc_enumerationMutation(v23);
          v30 = *(void **)(*((_QWORD *)&v67 + 1) + 8 * v29);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v45 = (char *)objc_msgSend(CFSTR("DiscreteValues"), "UTF8String");
            v46 = "Range array object must be a structure";
            v47 = __s;
LABEL_107:
            v53 = a1;
            v52 = 1346924643;
LABEL_108:
            Phase::ParserSetParseError(v53, v52, v47, v45, v46);
LABEL_109:

            goto LABEL_110;
          }
          if (HIDWORD(__src[0]) == 2)
          {
            PhaseId = Phase::ReadPhaseId(a1, v30, CFSTR("InputValue"), &__src[v27 + 4], a4);
          }
          else
          {
            if (HIDWORD(__src[0]) != 1)
            {
              v47 = "";
              v46 = "Invalid input type for dicrete mapped parameter";
LABEL_106:
              v45 = __s;
              goto LABEL_107;
            }
            PhaseId = Phase::ReadFloatType<double>(a1, v30, CFSTR("InputValue"), (double *)&__src[v27 + 4]);
          }
          if ((PhaseId & 1) == 0)
          {
LABEL_92:
            strncpy((char *)(a1 + 8), __s, 0x80uLL);
            goto LABEL_109;
          }
          switch(LODWORD(__src[1]))
          {
            case 1:
              if ((Phase::ReadFloatType<double>(a1, v30, CFSTR("OutputValue"), (double *)&__src[DWORD2(__src[3]) + 4] + 1) & 1) == 0)goto LABEL_92;
              FloatTypeWith = Phase::ReadFloatTypeWithDefault<double>(a1, v16, CFSTR("DefaultValue"), (double *)&__src[3], 0.0, -INFINITY, INFINITY);
              goto LABEL_63;
            case 2:
              if ((Phase::ReadPhaseId(a1, v30, CFSTR("OutputValue"), (_QWORD *)&__src[DWORD2(__src[3]) + 4] + 1, a4) & 1) == 0)
                goto LABEL_92;
              FloatTypeWith = Phase::ReadPhaseIdWithDefault(a1, v16, CFSTR("DefaultValue"), &__src[3], a4);
LABEL_63:
              if ((FloatTypeWith & 1) == 0)
                goto LABEL_92;
              v27 = ++DWORD2(__src[3]);
              if (v26 != ++v29)
                continue;
              v26 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v67, v81, 16);
              if (v26)
                goto LABEL_49;

              if (!v27)
                goto LABEL_122;

              break;
            case 3:
              v52 = 1346924649;
              v47 = "";
              v46 = "ParamSet params are not yet implemented";
              goto LABEL_104;
            case 4:
              v52 = 1346924649;
              v47 = "";
              v46 = "InsertFx params are not yet implemented";
LABEL_104:
              v45 = __s;
              v53 = a1;
              goto LABEL_108;
            default:
              v47 = "";
              v46 = "Invalid output type for mapped range parameter";
              goto LABEL_106;
          }
          goto LABEL_41;
        }
      }
      if (v15 == 2)
      {
        if ((Phase::ReadEnumWithoutDefault<Phase::OutputMetaParamType>(a1, v16, &__src[1]) & 1) == 0
          || (Phase::ReadPhaseId(a1, v16, CFSTR("LinkedInputParameter"), (_QWORD *)&__src[1] + 1, a4) & 1) == 0)
        {
          goto LABEL_113;
        }
        if (*(_QWORD *)((char *)__src + 12) != 0x100000001)
          Phase::ParserSetParseError(a1, 1346924643, "", __s, "Invalid input/output type for mapped range parameter");
        v71 = 0;
        ChildDictionary = Phase::GetChildDictionary(a1, v16, &v71);
        v23 = v71;
        if ((ChildDictionary & 1) == 0 || (Phase::ParseEnvelope(a1, v23, __s, (uint64_t)&__src[3] + 8) & 1) == 0)
        {
          strncpy((char *)(a1 + 8), __s, 0x80uLL);

          goto LABEL_114;
        }
        v24 = *((_QWORD *)&__src[5] + 3 * (DWORD2(__src[4]) - 1));
        *(_QWORD *)&__src[2] = *((_QWORD *)&__src[3] + 1);
        *((_QWORD *)&__src[2] + 1) = v24;
LABEL_41:

        goto LABEL_70;
      }
      if (v20 == 2)
      {
        PhaseIdWithDefault = Phase::ReadPhaseIdWithDefault(a1, v16, CFSTR("DefaultValue"), &__src[3], a4);
      }
      else
      {
        if ((Phase::ReadFloatTypeWithDefault<double>(a1, v16, CFSTR("RangeMin"), (double *)&__src[2], -INFINITY, -INFINITY, INFINITY) & 1) == 0|| (Phase::ReadFloatTypeWithDefault<double>(a1, v16, CFSTR("RangeMax"), (double *)&__src[2] + 1, INFINITY, -INFINITY, INFINITY) & 1) == 0)
        {
          goto LABEL_113;
        }
        PhaseIdWithDefault = Phase::ReadFloatTypeWithDefault<double>(a1, v16, CFSTR("DefaultValue"), (double *)&__src[3], 0.0, -INFINITY, INFINITY);
      }
      if ((PhaseIdWithDefault & 1) == 0)
        goto LABEL_113;
LABEL_70:
      v34 = a3[1];
      v33 = (unint64_t)a3[2];
      if ((unint64_t)v34 >= v33)
      {
        v36 = *a3;
        v37 = 0x34F72C234F72C235 * ((v34 - *a3) >> 4);
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) > 0x8D3DCB08D3DCB0)
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        v39 = 0x34F72C234F72C235 * ((uint64_t)(v33 - (_QWORD)v36) >> 4);
        if (2 * v39 > v38)
          v38 = 2 * v39;
        if (v39 >= 0x469EE58469EE58)
          v40 = 0x8D3DCB08D3DCB0;
        else
          v40 = v38;
        if (v40)
        {
          if (v40 > 0x8D3DCB08D3DCB0)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v41 = (char *)operator new(464 * v40);
        }
        else
        {
          v41 = 0;
        }
        v42 = &v41[464 * v37];
        memcpy(v42, __src, 0x1D0uLL);
        v43 = v42;
        if (v34 != v36)
        {
          do
          {
            v34 -= 464;
            v43 -= 464;
            memcpy(v43, v34, 0x1D0uLL);
          }
          while (v34 != v36);
          v34 = *a3;
        }
        v35 = v42 + 464;
        *a3 = v43;
        a3[1] = v42 + 464;
        a3[2] = &v41[464 * v40];
        if (v34)
          operator delete(v34);
      }
      else
      {
        memcpy(a3[1], __src, 0x1D0uLL);
        v35 = v34 + 464;
      }
      a3[1] = v35;
      ++v8;
    }
    while (v8 != v62);
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v83, 16);
    v44 = 1;
    if (v7)
      continue;
    break;
  }
LABEL_115:

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v79);
LABEL_116:

  return v44;
}

void sub_216617E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25)
{

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&STACK[0x300]);
  _Unwind_Resume(a1);
}

void *Phase::BuildObjArray<Phase::MetaParameter>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  void *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = a1[1] - *a1;
  if (v3)
  {
    is_mul_ok(0x34F72C234F72C235 * (v3 >> 4), 0x1D0uLL);
    v5 = operator new[]();
    result = (void *)*a2;
    *a2 = v5;
    if (result)
      result = (void *)MEMORY[0x2199F9D4C](result, 0x1000C80D9B47DDELL);
    v7 = *a1;
    if (a1[1] != *a1)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        result = memcpy((void *)(*a2 + v8), (const void *)(v7 + v8), 0x1D0uLL);
        ++v9;
        v7 = *a1;
        v8 += 464;
      }
      while (v9 < 0x34F72C234F72C235 * ((a1[1] - *a1) >> 4));
    }
  }
  else
  {
    result = (void *)*a2;
    *a2 = 0;
    if (result)
      JUMPOUT(0x2199F9D4CLL);
  }
  return result;
}

uint64_t Phase::BuildObjArray<unsigned long long>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
  {
    result = *a2;
    *a2 = 0;
    if (result)
      JUMPOUT(0x2199F9D4CLL);
  }
  else
  {
    v4 = operator new[]();
    result = *a2;
    *a2 = v4;
    if (result)
      result = MEMORY[0x2199F9D4C](result, 0x1000C8000313F17);
    v6 = *(uint64_t **)a1;
    v7 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    if (v7)
    {
      v8 = v7 >> 3;
      v9 = (_QWORD *)*a2;
      if (v8 <= 1)
        v8 = 1;
      do
      {
        v10 = *v6++;
        *v9++ = v10;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t Phase::ReadPhaseId(uint64_t a1, void *a2, void *a3, _QWORD *a4, uint64_t a5)
{
  id v9;
  id v10;
  Phase *v11;
  NSString *v12;
  uint64_t v13;

  v9 = a2;
  v10 = a3;
  objc_msgSend(v9, "objectForKeyedSubscript:", v10);
  v11 = (Phase *)objc_claimAutoreleasedReturnValue();
  if (!v11)
  {
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)objc_msgSend(objc_retainAutorelease(v10), "UTF8String"), "");
LABEL_8:
    v13 = 0;
    goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(objc_retainAutorelease(v10), "UTF8String"), "Field should be a string");
    goto LABEL_8;
  }
  *a4 = Phase::GetStringHashId(v11, v12);
  if (a5 && (Phase::AddStringToPool(a1, a5, v11) & 1) == 0)
  {
    strncpy((char *)(a1 + 8), (const char *)-[Phase UTF8String](objc_retainAutorelease(v11), "UTF8String"), 0x80uLL);
    goto LABEL_8;
  }
  v13 = 1;
LABEL_9:

  return v13;
}

void sub_216618324(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t Phase::ReadAudioChannelLayoutTag(uint64_t a1, void *a2, void *a3, unsigned int *a4)
{
  id v7;
  void *v8;
  unsigned int LayoutTagFromString;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  void *__p[2];
  char v16;

  v7 = a3;
  objc_msgSend(a2, "objectForKeyedSubscript:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)objc_msgSend(objc_retainAutorelease(v7), "UTF8String"), "");
LABEL_12:
    v10 = 0;
    goto LABEL_13;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v11 = (const char *)objc_msgSend(objc_retainAutorelease(v7), "UTF8String");
    v12 = 1346924643;
    v13 = "Field should be a stringified channel layout tag.";
LABEL_11:
    Phase::ParserSetParseError(a1, v12, "", v11, v13);
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"));
  LayoutTagFromString = Phase::ChannelLayout::GetLayoutTagFromString((uint64_t)__p);
  *a4 = LayoutTagFromString;
  if (v16 < 0)
  {
    operator delete(__p[0]);
    LayoutTagFromString = *a4;
  }
  if (LayoutTagFromString > 0xFFFEFFFF || (LayoutTagFromString & 0xFFFF0000) == 0x930000)
  {
    v11 = (const char *)objc_msgSend(objc_retainAutorelease(v7), "UTF8String");
    v12 = 1346924646;
    v13 = "Invalid Channel Layout name";
    goto LABEL_11;
  }
  v10 = 1;
LABEL_13:

  return v10;
}

void sub_2166184AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t Phase::ReadFloatTypeWithDefault<double>(uint64_t a1, void *a2, void *a3, double *a4, double a5, double a6, double a7)
{
  id v13;
  id v14;
  Phase::Logger *v15;
  Phase::Logger *v16;
  double v17;
  NSObject *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v14 = a3;
  objc_msgSend(v13, "objectForKeyedSubscript:", v14);
  v15 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (v15)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(objc_retainAutorelease(v14), "UTF8String"), "Field should be a number");
      v21 = 0;
      goto LABEL_11;
    }
    v15 = (Phase::Logger *)-[Phase::Logger doubleValue](v16, "doubleValue");
    a5 = v17;
  }
  *a4 = a5;
  if (a5 < a6 || a5 > a7)
  {
    v18 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15)
                                                                                        + 16)));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = objc_msgSend(objc_retainAutorelease(v14), "UTF8String");
      v20 = *a4;
      v23 = 136316418;
      v24 = "ParserCore.mm";
      v25 = 1024;
      v26 = 617;
      v27 = 2080;
      v28 = v19;
      v29 = 2048;
      v30 = v20;
      v31 = 2048;
      v32 = a6;
      v33 = 2048;
      v34 = a7;
      _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d WARNING: %s %f is out of range [%f, %f]. Clamping...", (uint8_t *)&v23, 0x3Au);
    }

    *a4 = fmin(fmax(*a4, a6), a7);
  }
  v21 = 1;
LABEL_11:

  return v21;
}

void sub_2166186D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id Phase::GetNSErrorFromParserError(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  void *v8;
  void *v9;
  void *v10;
  Phase::Logger *v11;
  NSObject *v12;
  unint64_t v13;
  const char *v14;
  void *v15;
  void *v16;
  uint64_t v18;
  void *v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 136;
  if (*(_BYTE *)(a1 + 136))
  {
    v3 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("%s : Struct: %s Field: %s"), &stru_24D582B00, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", v5, a1 + 264, a1 + 8, v2);
    v6 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = *(_BYTE *)(a1 + 8) == 0;
    v8 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v9;
    if (v7)
    {
      objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("%s"), &stru_24D582B00, 0);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "stringWithFormat:", v5, a1 + 264);
    }
    else
    {
      objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("%s : Struct: %s"), &stru_24D582B00, 0);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "stringWithFormat:", v5, a1 + 264, a1 + 8);
    }
    v6 = objc_claimAutoreleasedReturnValue();
  }
  v10 = (void *)v6;

  v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11)
                                                                                      + 16)));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = *(_QWORD *)a1 - 1346924642;
    if (v13 > 7)
      v14 = "Parse Error";
    else
      v14 = off_24D57F150[v13];
    *(_DWORD *)buf = 136315906;
    v21 = "ParserCore.mm";
    v22 = 1024;
    v23 = 3306;
    v24 = 2080;
    v25 = v14;
    v26 = 2080;
    v27 = objc_msgSend(objc_retainAutorelease(v10), "UTF8String");
    _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: %s - %s", buf, 0x26u);
  }

  v18 = *MEMORY[0x24BDD0FC8];
  v19 = v10;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346924648, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

void sub_2166189BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void Phase::MakeDataBundle(_BYTE *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  id v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  __CFString *v44;
  void *v45;
  id v46;
  uint64_t v47;
  id v48;
  __CFString *v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  id v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  id v61;
  id v62;
  __CFString *v63;
  void *v64;
  _BYTE *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  _QWORD *v75;
  id v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  void *v82;
  float v83;
  uint64_t v84;
  void *v85;
  char v86;
  void *v87;
  _QWORD *v88;
  void *v89;
  void *v90;
  __CFString *v91;
  __CFString *v92;
  void *v93;
  __CFString *v94;
  __CFString *v95;
  void *v96;
  void *v97;
  _QWORD *v98;
  const char *v99;
  const char *v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  id v114;
  _QWORD *v115;
  void *v116;
  id v117;
  id v118;
  id v120;
  void *v121;
  id obj;
  id obja;
  _QWORD *objb;
  id v126;
  _QWORD *v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  char v141[8];
  _DWORD v142[6];
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _BYTE v150[128];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  char __src[8];
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;

  v162 = *MEMORY[0x24BDAC8D0];
  v126 = a2;
  v6 = operator new();
  *(_QWORD *)(v6 + 64) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  v128 = (_QWORD *)v6;
  if (a1 && (v7 = *a1, *a1))
  {
    v8 = a1 + 1;
    v9 = 0xCBF29CE484222325;
    do
    {
      v9 = 0x100000001B3 * (v9 ^ v7);
      v10 = *v8++;
      v7 = v10;
    }
    while (v10);
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)v6 = v9;
  if (a4)
    *a4 = 0;
  objc_msgSend(v126, "objectForKeyedSubscript:", CFSTR("ActionTrees"));
  v11 = v128;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(obj, "count");
  v13 = v12;
  v14 = v128 + 2;
  v128[1] = 0;
  if (v12)
  {
    is_mul_ok(v12, 0x78uLL);
    v15 = 120 * v12;
    v16 = (_QWORD *)operator new[]();
    *v16 = 120;
    v16[1] = v13;
    v17 = v16 + 8;
    do
    {
      *(v17 - 4) = 0;
      *(v17 - 2) = 0;
      v17[3] = 0;
      v17[5] = 0;
      v17[7] = 0;
      *((_BYTE *)v17 + 64) = 0;
      *v17 = 0;
      v17[1] = 0;
      v17 += 15;
      v15 -= 120;
    }
    while (v15);
    *(_QWORD *)&v151 = v16 + 2;
    v155 = 0u;
    v156 = 0u;
    v157 = 0u;
    v158 = 0u;
    v18 = obj;
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v155, __src, 16);
    if (v19)
    {
      v20 = 0;
      v21 = *(_QWORD *)v156;
      while (2)
      {
        v22 = 0;
        v23 = v20;
        v24 = 120 * v20;
        do
        {
          if (*(_QWORD *)v156 != v21)
            objc_enumerationMutation(v18);
          v25 = *(id *)(*((_QWORD *)&v155 + 1) + 8 * v22);
          v26 = Phase::BuildActionTree((uint64_t)v141);

          if ((v26 & 1) == 0)
          {

            v29 = 0;
            goto LABEL_23;
          }
          ++v22;
          v24 += 120;
        }
        while (v19 != v22);
        v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v155, __src, 16);
        v20 = v23 + v22;
        if (v19)
          continue;
        break;
      }
    }

    v27 = v151;
    *(_QWORD *)&v151 = 0;
    v28 = v11[2];
    v11[1] = v13;
    v11[2] = v27;
    if (v28)
    {
      std::default_delete<Phase::ActionTree []>::operator()[abi:ne180100]<Phase::ActionTree>((uint64_t)(v11 + 2), v28);
      v29 = 1;
LABEL_23:
      v30 = v151;
      *(_QWORD *)&v151 = 0;
      if (v30)
        std::default_delete<Phase::ActionTree []>::operator()[abi:ne180100]<Phase::ActionTree>((uint64_t)&v151, v30);
      if ((v29 & 1) == 0)
      {

        Phase::GetNSErrorFromParserError((uint64_t)v141);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = v31;
        if (a4)
          *a4 = objc_retainAutorelease(v31);
        goto LABEL_28;
      }
    }
  }
  else
  {
    v33 = *v14;
    *v14 = 0;
    if (v33)
      std::default_delete<Phase::ActionTree []>::operator()[abi:ne180100]<Phase::ActionTree>((uint64_t)(v11 + 2), v33);
  }

  objc_msgSend(v126, "objectForKeyedSubscript:", CFSTR("SoundAssets"));
  v34 = v128;
  v120 = (id)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend(v120, "count");
  v36 = v35;
  v128[3] = 0;
  if (!v35)
  {
    v53 = v34[4];
    v34[4] = 0;
    if (!v53)
      goto LABEL_63;
    goto LABEL_62;
  }
  v115 = v34;
  is_mul_ok(v35, 0x428uLL);
  v37 = operator new[]();
  v153 = 0u;
  v154 = 0u;
  v151 = 0u;
  v152 = 0u;
  obja = v120;
  v38 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v151, &v155, 16);
  if (!v38)
    goto LABEL_59;
  v39 = 0;
  v117 = *(id *)v152;
  do
  {
    v40 = 0;
    v113 = v39;
    v41 = 1064 * v39;
    do
    {
      if (*(id *)v152 != v117)
        objc_enumerationMutation(obja);
      v42 = *(id *)(*((_QWORD *)&v151 + 1) + 8 * v40);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        Phase::ParserSetParseError((uint64_t)v141, 1346924643, "<AssetDefinition>", "", "Asset definition object must be a structure");
LABEL_121:

        MEMORY[0x2199F9D4C](v37, 0x1000C8039DDB5B0);
        Phase::GetNSErrorFromParserError((uint64_t)v141);
        v93 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = v93;
        if (a4)
          *a4 = objc_retainAutorelease(v93);
LABEL_28:
        *a5 = 0;

        goto LABEL_139;
      }
      if ((Phase::ReadString((uint64_t)v141, v42, CFSTR("Name"), (uint64_t)__src, 0x80uLL, 0) & 1) == 0)
      {
        v146 = xmmword_2167396BC;
        v147 = unk_2167396CC;
        v148 = xmmword_2167396DC;
        v149 = unk_2167396EC;
        strcpy((char *)v142, "<AssetDefinition>");
        HIWORD(v142[4]) = unk_21673968E;
        v142[5] = unk_216739690;
        v143 = unk_216739694;
        v144 = xmmword_21673969C;
        v145 = unk_2167396AC;
        goto LABEL_121;
      }
      if ((Phase::ReadPhaseId((uint64_t)v141, v42, CFSTR("Name"), (_QWORD *)(v37 + v41), a3) & 1) == 0
        || (Phase::ReadString((uint64_t)v141, v42, CFSTR("Path"), v37 + v41 + 8, 0x400uLL, a3) & 1) == 0)
      {
        goto LABEL_120;
      }
      v43 = v42;
      v44 = CFSTR("AssetType");
      objc_msgSend(v43, "objectForKeyedSubscript:", CFSTR("AssetType"));
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      if (v45)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v91 = objc_retainAutorelease(CFSTR("AssetType"));
          Phase::ParserSetParseError((uint64_t)v141, 1346924643, "", (const char *)objc_msgSend(CFSTR("AssetType"), "UTF8String"), "Field should be a string");

LABEL_120:
          strncpy((char *)v142, __src, 0x80uLL);
          goto LABEL_121;
        }
        v46 = v45;
        if ((objc_msgSend(v46, "isEqualToString:", CFSTR("resident")) & 1) != 0)
          v47 = 0;
        else
          v47 = objc_msgSend(v46, "isEqualToString:", CFSTR("streamed"));

      }
      else
      {
        v47 = 0;
      }
      *(_QWORD *)(v37 + v41 + 1032) = v47;

      v48 = v43;
      v49 = CFSTR("NormalizationMode");
      objc_msgSend(v48, "objectForKeyedSubscript:", CFSTR("NormalizationMode"));
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v50)
      {
        v52 = 0;
        goto LABEL_55;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v92 = objc_retainAutorelease(CFSTR("NormalizationMode"));
        Phase::ParserSetParseError((uint64_t)v141, 1346924643, "", (const char *)objc_msgSend(CFSTR("NormalizationMode"), "UTF8String"), "Field should be a string");

        goto LABEL_120;
      }
      v51 = v50;
      if ((objc_msgSend(v51, "isEqualToString:", CFSTR("none")) & 1) != 0)
        v52 = 0;
      else
        v52 = objc_msgSend(v51, "isEqualToString:", CFSTR("dynamic"));

LABEL_55:
      *(_QWORD *)(v37 + v41 + 1040) = v52;

      if ((Phase::ReadAudioChannelLayoutTag((uint64_t)v141, v48, CFSTR("ChannelLayout"), (unsigned int *)(v37 + v41 + 1056)) & 1) == 0|| (Phase::ReadFloatTypeWithDefault<double>((uint64_t)v141, v48, CFSTR("TargetLKFS"), (double *)(v37 + v41 + 1048), -12.0, -100.0, 0.0) & 1) == 0)
      {
        goto LABEL_120;
      }

      ++v40;
      v41 += 1064;
    }
    while (v38 != v40);
    v38 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v151, &v155, 16);
    v39 = v113 + v40;
  }
  while (v38);
LABEL_59:

  v53 = v115[4];
  v115[3] = v36;
  v115[4] = v37;
  if (v53)
LABEL_62:
    MEMORY[0x2199F9D4C](v53, 0x1000C8039DDB5B0);
LABEL_63:

  objc_msgSend(v126, "objectForKeyedSubscript:", CFSTR("ChannelMappings"));
  v54 = v128;
  v55 = (id)objc_claimAutoreleasedReturnValue();
  v56 = objc_msgSend(v55, "count");
  v57 = v56;
  v128[5] = 0;
  if (!v56)
  {
    v84 = v54[6];
    v54[6] = 0;
    if (!v84)
      goto LABEL_107;
    goto LABEL_106;
  }
  is_mul_ok(v56, 0x498uLL);
  objb = (_QWORD *)operator new[]();
  v131 = 0u;
  v132 = 0u;
  v129 = 0u;
  v130 = 0u;
  v118 = v55;
  v58 = objc_msgSend(v118, "countByEnumeratingWithState:objects:count:", &v129, v150, 16);
  if (!v58)
    goto LABEL_103;
  LODWORD(v59) = 0;
  v60 = (char *)(objb + 3);
  v109 = *(_QWORD *)v130;
  while (2)
  {
    v112 = 0;
    v59 = (int)v59;
    v110 = &v60[1176 * (int)v59];
    while (2)
    {
      if (*(_QWORD *)v130 != v109)
        objc_enumerationMutation(v118);
      v61 = *(id *)(*((_QWORD *)&v129 + 1) + 8 * v112);
      v116 = v61;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        Phase::ParserSetParseError((uint64_t)v141, 1346924643, "<ChannelMapping>", "", "ChannelMapping object must be a structure");

        goto LABEL_136;
      }
      if ((Phase::ReadString((uint64_t)v141, v61, CFSTR("Name"), (uint64_t)__src, 0x80uLL, 0) & 1) == 0)
      {
        v146 = xmmword_21673973D;
        v147 = unk_21673974D;
        v148 = xmmword_21673975D;
        v149 = unk_21673976D;
        strcpy((char *)v142, "<ChannelMapping>");
        BYTE1(v142[4]) = unk_21673970E;
        HIWORD(v142[4]) = unk_21673970F;
        v142[5] = unk_216739711;
        v143 = unk_216739715;
        v144 = xmmword_21673971D;
        v145 = unk_21673972D;
        goto LABEL_132;
      }
      if ((Phase::ReadPhaseId((uint64_t)v141, v61, CFSTR("Name"), &objb[147 * v59], a3) & 1) == 0)
        goto LABEL_131;
      v62 = v61;
      v63 = CFSTR("NumInputChannels");
      v121 = v62;
      objc_msgSend(v62, "objectForKeyedSubscript:", CFSTR("NumInputChannels"));
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v64)
      {
        v94 = objc_retainAutorelease(CFSTR("NumInputChannels"));
        Phase::ParserSetParseError((uint64_t)v141, 1346924642, "", (const char *)objc_msgSend(CFSTR("NumInputChannels"), "UTF8String"), "");
LABEL_130:

LABEL_131:
        strncpy((char *)v142, __src, 0x80uLL);
LABEL_132:

        goto LABEL_136;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v95 = objc_retainAutorelease(CFSTR("NumInputChannels"));
        Phase::ParserSetParseError((uint64_t)v141, 1346924643, "", (const char *)objc_msgSend(CFSTR("NumInputChannels"), "UTF8String"), "Field should be a number");
        goto LABEL_130;
      }
      v65 = &objb[147 * v59 + 1];
      *v65 = objc_msgSend(v64, "longLongValue");

      if ((Phase::ReadPhaseId((uint64_t)v141, v121, CFSTR("OutputConfiguration"), &objb[147 * v59 + 2], a3) & 1) == 0)
        goto LABEL_131;
      objc_msgSend(v121, "objectForKeyedSubscript:", CFSTR("Matrix"));
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v66 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
      {
        Phase::ParserSetParseError((uint64_t)v141, 1346924643, __src, (const char *)objc_msgSend(CFSTR("Matrix"), "UTF8String"), "Matrix object must be an array");
        goto LABEL_135;
      }
      if (objc_msgSend(v66, "count") != *v65)
      {
        Phase::ParserSetParseError((uint64_t)v141, 1346924641, __src, (const char *)objc_msgSend(CFSTR("NumInputChannels"), "UTF8String"), "The NumInputChannels and number of rows in the matrix do not match");
        goto LABEL_135;
      }
      if ((unint64_t)objc_msgSend(v66, "count") >= 0xD)
      {
        Phase::ParserSetParseError((uint64_t)v141, 1346924641, __src, (const char *)objc_msgSend(CFSTR("NumInputChannels"), "UTF8String"), "Exceeded maximum number of input channels");
LABEL_135:

LABEL_136:
        MEMORY[0x2199F9D4C](objb, 0x1000C80281E3F58);

        Phase::GetNSErrorFromParserError((uint64_t)v141);
        v96 = (void *)objc_claimAutoreleasedReturnValue();
        v97 = v96;
        if (a4)
          *a4 = objc_retainAutorelease(v96);
        *a5 = 0;

        goto LABEL_139;
      }
      v139 = 0u;
      v140 = 0u;
      v137 = 0u;
      v138 = 0u;
      v114 = v66;
      v67 = objc_msgSend(v114, "countByEnumeratingWithState:objects:count:", &v137, &v155, 16);
      if (!v67)
        goto LABEL_101;
      LODWORD(v68) = 0;
      v106 = *(_QWORD *)v138;
      v111 = 0xFFFFFFFFLL;
      v102 = v55;
      while (2)
      {
        v103 = v67;
        v68 = (int)v68;
        v107 = &v110[96 * (int)v68];
        v108 = 0;
        while (2)
        {
          if (*(_QWORD *)v138 != v106)
            objc_enumerationMutation(v114);
          v69 = *(void **)(*((_QWORD *)&v137 + 1) + 8 * v108);
          if (!v69 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
          {
            Phase::ParserSetParseError((uint64_t)v141, 1346924643, __src, (const char *)objc_msgSend(CFSTR("Matrix"), "UTF8String"), "Matrix row object must be an array");
LABEL_115:

            goto LABEL_136;
          }
          if (v111 == 0xFFFFFFFFLL)
          {
            v70 = objc_msgSend(v69, "count");
            goto LABEL_89;
          }
          v71 = objc_msgSend(v69, "count");
          v70 = v111;
          if (v71 != v111)
          {
            v99 = (const char *)objc_msgSend(CFSTR("Matrix"), "UTF8String");
            v100 = "Inconsistant number of columns in matrix";
            goto LABEL_144;
          }
LABEL_89:
          v111 = v70;
          if (v70 >= 0xD)
          {
            v99 = (const char *)objc_msgSend(CFSTR("OutputConfiguration"), "UTF8String");
            v100 = "Exceeded maximum number of output channels";
LABEL_144:
            Phase::ParserSetParseError((uint64_t)v141, 1346924641, __src, v99, v100);
            goto LABEL_115;
          }
          v105 = v68;
          v72 = v58;
          v73 = v60;
          v74 = v57;
          v75 = v54;
          v135 = 0u;
          v136 = 0u;
          v133 = 0u;
          v134 = 0u;
          v76 = v69;
          v77 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v133, &v151, 16);
          if (v77)
          {
            v78 = 0;
            v79 = *(_QWORD *)v134;
            v101 = v59;
            while (2)
            {
              v80 = 0;
              v104 = v78;
              v81 = &v107[8 * v78];
              do
              {
                if (*(_QWORD *)v134 != v79)
                  objc_enumerationMutation(v76);
                v82 = *(void **)(*((_QWORD *)&v133 + 1) + 8 * v80);
                if (!v82 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
                {
                  Phase::ParserSetParseError((uint64_t)v141, 1346924643, __src, (const char *)objc_msgSend(CFSTR("Matrix"), "UTF8String"), "Matrix object is not a number");

                  goto LABEL_115;
                }
                objc_msgSend(v82, "floatValue");
                *(double *)&v81[8 * v80++] = v83;
              }
              while (v77 != v80);
              v77 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v133, &v151, 16);
              v78 = v104 + v80;
              v59 = v101;
              if (v77)
                continue;
              break;
            }
          }

          v55 = v102;
          v54 = v75;
          v57 = v74;
          v60 = v73;
          v58 = v72;
          v68 = v105 + 1;
          v107 += 96;
          if (++v108 != v103)
            continue;
          break;
        }
        v67 = objc_msgSend(v114, "countByEnumeratingWithState:objects:count:", &v137, &v155, 16);
        if (v67)
          continue;
        break;
      }
LABEL_101:

      ++v59;
      v110 += 1176;
      if (++v112 != v58)
        continue;
      break;
    }
    v58 = objc_msgSend(v118, "countByEnumeratingWithState:objects:count:", &v129, v150, 16);
    if (v58)
      continue;
    break;
  }
LABEL_103:

  v84 = v54[6];
  v54[5] = v57;
  v54[6] = objb;
  if (v84)
LABEL_106:
    MEMORY[0x2199F9D4C](v84, 0x1000C80281E3F58);
LABEL_107:

  *(_QWORD *)__src = 0;
  v160 = 0;
  v161 = 0;
  objc_msgSend(v126, "objectForKeyedSubscript:", CFSTR("Parameters"));
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  v86 = Phase::BuildParameters((uint64_t)v141, v85, (char **)__src, a3);

  if ((v86 & 1) != 0)
  {
    Phase::BuildObjArray<Phase::MetaParameter>((uint64_t *)__src, v128 + 8);
    v87 = *(void **)__src;
    v88 = v128;
    v128[7] = 0x34F72C234F72C235 * ((v160 - *(_QWORD *)__src) >> 4);
    v128 = 0;
    *a5 = v88;
    if (!v87)
      goto LABEL_139;
LABEL_113:
    operator delete(v87);
    goto LABEL_139;
  }
  Phase::GetNSErrorFromParserError((uint64_t)v141);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = v89;
  if (a4)
    *a4 = objc_retainAutorelease(v89);
  *a5 = 0;

  v87 = *(void **)__src;
  if (*(_QWORD *)__src)
    goto LABEL_113;
LABEL_139:
  v98 = v128;
  v128 = 0;
  if (v98)
    std::default_delete<Phase::DataBundle>::operator()[abi:ne180100]((uint64_t)&v128, v98);

}

void sub_216619B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,_QWORD *a32)
{
  _QWORD *v33;

  MEMORY[0x2199F9D4C](a28, 0x1000C80281E3F58);
  v33 = a32;
  a32 = 0;
  if (v33)
    std::default_delete<Phase::DataBundle>::operator()[abi:ne180100]((uint64_t)&a32, v33);

  _Unwind_Resume(a1);
}

void Phase::MakeActionTree(void *a1@<X0>, void *a2@<X2>, _QWORD *a3@<X3>, uint64_t *a4@<X8>)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  _BYTE v12[520];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v8 = a2;
  if (a3)
    *a3 = 0;
  v9 = operator new();
  *(_QWORD *)(v9 + 112) = 0;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)v9 = 0u;
  if ((Phase::BuildActionTree((uint64_t)v12) & 1) != 0)
  {
    *a4 = v9;
  }
  else
  {
    Phase::GetNSErrorFromParserError((uint64_t)v12);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (a3)
      *a3 = objc_retainAutorelease(v10);
    *a4 = 0;

    Phase::ActionTree::~ActionTree((Phase::ActionTree *)v9);
    MEMORY[0x2199F9D70]();
  }

}

void sub_216619F14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<Phase::ActionTree>::reset[abi:ne180100]((Phase::ActionTree **)va, 0);

  _Unwind_Resume(a1);
}

void Phase::MakeGlobalMetaParameters(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  id v7;
  void *v8;
  void *v9;
  void *__p[3];
  _BYTE v11[520];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  memset(__p, 0, sizeof(__p));
  if (a3)
    *a3 = 0;
  if ((Phase::BuildParameters((uint64_t)v11, v7, (char **)__p, a2) & 1) != 0)
  {
    *a4 = 0;
    Phase::BuildObjArray<Phase::MetaParameter>((uint64_t *)__p, a4);
  }
  else
  {
    Phase::GetNSErrorFromParserError((uint64_t)v11);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (a3)
      *a3 = objc_retainAutorelease(v8);
    *a4 = 0;

  }
  if (__p[0])
    operator delete(__p[0]);

}

void sub_21661A02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  void *v10;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t Phase::GetStringHashId(Phase *this, NSString *a2)
{
  Phase *v2;
  _BYTE *v3;
  unsigned int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;

  v2 = objc_retainAutorelease(this);
  v3 = (_BYTE *)-[Phase cStringUsingEncoding:](v2, "cStringUsingEncoding:", 4);
  if (v3 && (v4 = *v3, *v3))
  {
    v5 = v3 + 1;
    v6 = 0xCBF29CE484222325;
    do
    {
      v6 = 0x100000001B3 * (v6 ^ v4);
      v7 = *v5++;
      v4 = v7;
    }
    while (v7);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_21661A0F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::AddStringToPool(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *__p[2];
  char v7;

  v4 = a3;
  if (objc_msgSend(v4, "length"))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v4), "UTF8String"));
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a2, (unsigned __int8 *)__p, (uint64_t)__p);
    if (v7 < 0)
      operator delete(__p[0]);
  }

  return 1;
}

void sub_21661A188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    Phase::ParserSetParseError(v16, 1346924644, "", "", "Out of memory");
    __cxa_end_catch();
    JUMPOUT(0x21661A16CLL);
  }

  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v17 = operator new(0x28uLL);
  *v17 = 0;
  v17[1] = v9;
  *((_OWORD *)v17 + 1) = *(_OWORD *)a3;
  v17[4] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *v17 = *v25;
LABEL_38:
    *v25 = v17;
    goto LABEL_39;
  }
  *v17 = *v16;
  *v16 = v17;
  *(_QWORD *)(v24 + 8 * v3) = v16;
  if (*v17)
  {
    v26 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10)
        v26 %= v10;
    }
    else
    {
      v26 &= v10 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
}

void sub_21661A454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t Phase::ReadParamIdx(uint64_t a1, void *a2, void *a3, Phase *a4, _BYTE *a5, uint64_t a6)
{
  id v11;
  id v12;
  Phase *v13;
  NSString *v14;
  Phase::ActionTreeBuilder *StringHashId;
  signed __int8 *v16;
  uint64_t v17;
  Phase *v18;
  NSString *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  const char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  NSString *v34;
  Phase::ActionTreeBuilder *v35;
  signed __int8 *v36;
  uint64_t v38;

  v11 = a2;
  v12 = a3;
  objc_msgSend(v11, "objectForKeyedSubscript:", v12);
  v13 = (Phase *)objc_claimAutoreleasedReturnValue();
  if (!v13)
  {
    *a5 = -1;
    goto LABEL_8;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(objc_retainAutorelease(v12), "UTF8String"), "Field should be a string");
    goto LABEL_39;
  }
  StringHashId = (Phase::ActionTreeBuilder *)Phase::GetStringHashId(v13, v14);
  if ((Phase::GetParamIndex(a4, StringHashId, a5, v16) & 1) == 0)
  {
    v18 = v13;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (-[Phase length](v18, "length"))
      {
        v20 = Phase::GetStringHashId(v18, v19);
        if (v20)
        {
          v21 = (uint64_t *)*((_QWORD *)a4 + 17);
          v22 = (uint64_t *)*((_QWORD *)a4 + 18);
          v23 = v21;
          if (v21 != v22)
          {
            while (*v23 != v20)
            {
              if (++v23 == v22)
              {
                v23 = (uint64_t *)*((_QWORD *)a4 + 18);
                break;
              }
            }
          }
          if (v23 == v22)
          {
            v24 = *((_QWORD *)a4 + 19);
            if ((unint64_t)v22 >= v24)
            {
              v38 = v22 - v21;
              if ((unint64_t)(v38 + 1) >> 61)
                std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
              v27 = v24 - (_QWORD)v21;
              v28 = (uint64_t)(v24 - (_QWORD)v21) >> 2;
              if (v28 <= v38 + 1)
                v28 = v38 + 1;
              if (v27 >= 0x7FFFFFFFFFFFFFF8)
                v29 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v29 = v28;
              if (v29)
              {
                v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)a4 + 152, v29);
                v21 = (uint64_t *)*((_QWORD *)a4 + 17);
                v22 = (uint64_t *)*((_QWORD *)a4 + 18);
              }
              else
              {
                v30 = 0;
              }
              v31 = (uint64_t *)&v30[8 * v38];
              v32 = &v30[8 * v29];
              *v31 = v20;
              v25 = v31 + 1;
              while (v22 != v21)
              {
                v33 = *--v22;
                *--v31 = v33;
              }
              *((_QWORD *)a4 + 17) = v31;
              *((_QWORD *)a4 + 18) = v25;
              *((_QWORD *)a4 + 19) = v32;
              if (v21)
                operator delete(v21);
            }
            else
            {
              *v22 = v20;
              v25 = v22 + 1;
            }
            *((_QWORD *)a4 + 18) = v25;
          }
        }
      }

      v35 = (Phase::ActionTreeBuilder *)Phase::GetStringHashId(v18, v34);
      if ((Phase::GetParamIndex(a4, v35, a5, v36) & 1) != 0)
        goto LABEL_4;
      v26 = (const char *)objc_msgSend(objc_retainAutorelease(v12), "UTF8String");
      -[Phase UTF8String](objc_retainAutorelease(v18), "UTF8String");
    }
    else
    {
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)-[Phase UTF8String](objc_retainAutorelease(v18), "UTF8String"), "Parameter name should be a string");

      v26 = (const char *)objc_msgSend(objc_retainAutorelease(v12), "UTF8String");
      -[Phase UTF8String](objc_retainAutorelease(v18), "UTF8String");
    }
    Phase::ParserSetParseError(a1, 1346924643, "", v26, "Failed to parse %s as a param index");
    goto LABEL_39;
  }
LABEL_4:
  if (a6 && (Phase::AddStringToPool(a1, a6, v13) & 1) == 0)
  {
    strncpy((char *)(a1 + 8), (const char *)-[Phase UTF8String](objc_retainAutorelease(v13), "UTF8String"), 0x80uLL);
LABEL_39:
    v17 = 0;
    goto LABEL_40;
  }
LABEL_8:
  v17 = 1;
LABEL_40:

  return v17;
}

uint64_t Phase::ParseDirectivityModelParams(uint64_t a1, void *a2, char *a3, double *a4, int a5)
{
  id v9;
  __CFString *v10;
  id v11;
  __CFString *v12;
  void *v13;
  char DirectivityModelType;
  int v15;
  __CFString *v16;
  char OptionalChildArray;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  double *v22;
  uint64_t i;
  void *v24;
  unsigned int v25;
  __CFString *v26;
  __CFString *v27;
  char OptionalChildDictionary;
  __CFString *v29;
  char v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  uint64_t j;
  void *v38;
  uint64_t v39;
  double *v40;
  double *v41;
  uint64_t FloatTypeWith;
  double v43;
  double v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  void *v49;
  char *__src;
  NSObject *log;
  id obj;
  id obja;
  id v54;
  id v55;
  int v56;
  id v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  id v67;
  uint8_t buf[4];
  const char *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  double v73;
  __int16 v74;
  double v75;
  _BYTE v76[128];
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  bzero(a4, 0x3F0uLL);
  v56 = a5;
  if (a5)
    v10 = CFSTR("ListenerDirectivityModelType");
  else
    v10 = CFSTR("SourceDirectivityModelType");
  v11 = v9;
  v12 = v10;
  objc_msgSend(v11, "objectForKeyedSubscript:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v26 = objc_retainAutorelease(v12);
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)-[__CFString UTF8String](v26, "UTF8String"), "Field should be a string");

      strncpy((char *)(a1 + 8), a3, 0x80uLL);
LABEL_66:
      v45 = 0;
      goto LABEL_67;
    }
    DirectivityModelType = GetDirectivityModelType((NSString *)v13);
  }
  else
  {
    DirectivityModelType = 0;
  }
  *(_BYTE *)a4 = DirectivityModelType;

  v15 = *(unsigned __int8 *)a4;
  if (v15 == 3)
  {
    if (v56)
      v27 = CFSTR("ListenerSphericalCapDirectivityParameters");
    else
      v27 = CFSTR("SourceSphericalCapDirectivityParameters");
    v57 = 0;
    OptionalChildDictionary = Phase::GetOptionalChildDictionary(a1, v11, v27, &v57);
    v19 = v57;
    if ((OptionalChildDictionary & 1) != 0)
    {
      if ((Phase::ReadFloatTypeWithDefault<double>(a1, v19, CFSTR("SphereRadius"), a4 + 1, 0.3, 0.001, 10.0) & 1) != 0
        && (Phase::ReadFloatTypeWithDefault<double>(a1, v19, CFSTR("CapOpeningAngle"), a4 + 2, 30.0, 0.01, 360.0) & 1) != 0)
      {

        goto LABEL_58;
      }
      strncpy((char *)(a1 + 8), a3, 0x80uLL);
    }
    else
    {
      Phase::ParserSetParseError(a1, 1346924643, a3, (const char *)-[__CFString UTF8String](objc_retainAutorelease(v27), "UTF8String"), "Submix %s directivity parameters object must be a dictionary");
    }
LABEL_65:

    goto LABEL_66;
  }
  if (v15 != 2)
  {
    if (v15 != 1)
      goto LABEL_58;
    *((_DWORD *)a4 + 2) = 0;
    if (v56)
      v16 = CFSTR("ListenerCardioidDirectivitySubbands");
    else
      v16 = CFSTR("SourceCardioidDirectivitySubbands");
    v67 = 0;
    OptionalChildArray = Phase::GetOptionalChildArray(a1, v11, v16, &v67);
    v18 = v67;
    v19 = v18;
    if ((OptionalChildArray & 1) != 0)
    {
      v54 = v11;
      v66 = 0u;
      v64 = 0u;
      v65 = 0u;
      v63 = 0u;
      v20 = v18;
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v63, v77, 16);
      if (v21)
      {
        obj = *(id *)v64;
        v22 = a4 + 2;
        while (2)
        {
          for (i = 0; i != v21; ++i)
          {
            if (*(id *)v64 != obj)
              objc_enumerationMutation(v20);
            v24 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * i);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              Phase::ParserSetParseError(a1, 1346924643, a3, (const char *)objc_msgSend(CFSTR("EnvelopeSegments"), "UTF8String"), "Submix %s directivity subband object must be a dictionary");
              goto LABEL_72;
            }
            v25 = *((_DWORD *)a4 + 2);
            if (v25 >= 0x20)
            {
              Phase::ParserSetParseError(a1, 1346924646, a3, (const char *)objc_msgSend(CFSTR("EnvelopeSegments"), "UTF8String"), "Too many submix %s directivity subbands.  Max = %d");
              goto LABEL_72;
            }
            if ((Phase::ReadFloatTypeWithDefault<double>(a1, v24, CFSTR("Frequency"), &v22[3 * v25], 1000.0, 20.0, 20000.0) & 1) == 0|| (Phase::ReadFloatTypeWithDefault<double>(a1, v24, CFSTR("Pattern"), &v22[3 * v25 + 1], 0.0, 0.0, 1.0) & 1) == 0|| (Phase::ReadFloatTypeWithDefault<double>(a1, v24, CFSTR("Sharpness"), &v22[3 * v25 + 2], 1.0, 1.0, 1.79769313e308) & 1) == 0)
            {
              strncpy((char *)(a1 + 8), a3, 0x80uLL);
LABEL_72:
              v11 = v54;

              goto LABEL_66;
            }
            ++*((_DWORD *)a4 + 2);
          }
          v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v63, v77, 16);
          if (v21)
            continue;
          break;
        }
      }

      v11 = v54;
      goto LABEL_58;
    }
    Phase::ParserSetParseError(a1, 1346924643, a3, (const char *)objc_msgSend(CFSTR("EnvelopeSegments"), "UTF8String"), "Submix %s directivity subband array object must be an array");
    goto LABEL_65;
  }
  *((_DWORD *)a4 + 2) = 0;
  if (v56)
    v29 = CFSTR("ListenerConeDirectivitySubbands");
  else
    v29 = CFSTR("SourceConeDirectivitySubbands");
  v62 = 0;
  v30 = Phase::GetOptionalChildArray(a1, v11, v29, &v62);
  v31 = v62;
  v32 = v31;
  if ((v30 & 1) == 0)
  {
    v46 = (const char *)objc_msgSend(CFSTR("EnvelopeSegments"), "UTF8String");
    v47 = "source";
    if (v56)
      v47 = "listener";
    Phase::ParserSetParseError(a1, 1346924643, a3, v46, "Submix %s directivity subband array object must be an array", v47);

    goto LABEL_66;
  }
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v33 = v31;
  v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v58, v76, 16);
  if (!v34)
    goto LABEL_57;
  v35 = a4 + 2;
  v36 = *(_QWORD *)v59;
  obja = v33;
  v55 = v11;
  __src = a3;
  while (2)
  {
    for (j = 0; j != v34; ++j)
    {
      if (*(_QWORD *)v59 != v36)
        objc_enumerationMutation(obja);
      v38 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * j);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v49 = obja;
        Phase::ParserSetParseError(a1, 1346924643, __src, (const char *)objc_msgSend(CFSTR("EnvelopeSegments"), "UTF8String"), "Submix %s directivity subband object must be a dictionary");
        goto LABEL_76;
      }
      v39 = *((unsigned int *)a4 + 2);
      if (v39 >= 0x20)
      {
        v49 = obja;
        Phase::ParserSetParseError(a1, 1346924646, __src, (const char *)objc_msgSend(CFSTR("EnvelopeSegments"), "UTF8String"), "Too many submix %s directivity subbands.  Max = %d");
        goto LABEL_76;
      }
      if ((Phase::ReadFloatTypeWithDefault<double>(a1, v38, CFSTR("Frequency"), &v35[4 * v39], 1000.0, 20.0, 20000.0) & 1) == 0
        || (v40 = &v35[4 * v39 + 1],
            (Phase::ReadFloatTypeWithDefault<double>(a1, v38, CFSTR("InnerAngle"), v40, 360.0, 0.0, 360.0) & 1) == 0)
        || (v41 = &v35[4 * v39 + 2],
            FloatTypeWith = Phase::ReadFloatTypeWithDefault<double>(a1, v38, CFSTR("OuterAngle"), v41, 360.0, 0.0, 360.0), (FloatTypeWith & 1) == 0))
      {
        strncpy((char *)(a1 + 8), __src, 0x80uLL);
        v49 = obja;
        v11 = v55;
LABEL_76:

        goto LABEL_66;
      }
      if (*v40 > *v41)
      {
        log = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)FloatTypeWith)
                                                         + 16));
        if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
        {
          v43 = *v40;
          v44 = *v41;
          *(_DWORD *)buf = 136315906;
          v69 = "ParserCore.mm";
          v70 = 1024;
          v71 = 2480;
          v72 = 2048;
          v73 = v43;
          v74 = 2048;
          v75 = v44;
          _os_log_impl(&dword_2164CC000, log, OS_LOG_TYPE_ERROR, "%25s:%-5d WARNING: subband.mInnerAngleInDegrees %f is greater than subband.mOuterAngleInDegrees %f. Clamping subband.mInnerAngleInDegrees to subband.mOuterAngleInDegrees.", buf, 0x26u);
        }
        *v40 = *v41;
      }
      v11 = v55;
      if ((Phase::ReadFloatTypeWithDefault<double>(a1, v38, CFSTR("OuterGain"), &v35[4 * v39 + 3], 1.0, 0.0, 1.0) & 1) == 0)
      {
        strncpy((char *)(a1 + 8), __src, 0x80uLL);
        v49 = obja;
        goto LABEL_76;
      }
      ++*((_DWORD *)a4 + 2);
    }
    v33 = obja;
    v34 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v58, v76, 16);
    if (v34)
      continue;
    break;
  }
LABEL_57:

LABEL_58:
  v45 = 1;
LABEL_67:

  return v45;
}

void sub_21661B270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{

  _Unwind_Resume(a1);
}

uint64_t Phase::GetOptionalChildArray(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;

  v7 = a2;
  v8 = a3;
  objc_msgSend(v7, "objectForKeyedSubscript:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"), "Field should be an array");
      v10 = 0;
      goto LABEL_7;
    }
    *a4 = objc_retainAutorelease(v9);
  }
  else
  {
    *a4 = 0;
  }
  v10 = 1;
LABEL_7:

  return v10;
}

void sub_21661B3E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t Phase::GetOptionalChildDictionary(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;

  v7 = a2;
  v8 = a3;
  objc_msgSend(v7, "objectForKeyedSubscript:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"), "Field should be a dictionary");
      v10 = 0;
      goto LABEL_7;
    }
    *a4 = objc_retainAutorelease(v9);
  }
  else
  {
    *a4 = 0;
  }
  v10 = 1;
LABEL_7:

  return v10;
}

void sub_21661B4D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL Phase::ReadAVAudioChannelLayout(uint64_t a1, void *a2, id *a3)
{
  id v5;
  __CFString *v6;
  id v7;
  id v8;
  _BOOL8 v9;
  unsigned int v11;

  v5 = a2;
  v6 = CFSTR("ChannelLayout");
  v11 = 0;
  v9 = Phase::ReadAudioChannelLayoutTag(a1, v5, CFSTR("ChannelLayout"), &v11)
    && (v7 = objc_alloc(MEMORY[0x24BDB17E8]),
        v8 = (id)objc_msgSend(v7, "initWithLayoutTag:", v11),
        (*a3 = v8) != 0)
    && !*(_DWORD *)(objc_msgSend(v8, "layout") + 8)
    && *(_DWORD *)(objc_msgSend(*a3, "layout") + 4) == 0;

  return v9;
}

void sub_21661B5B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t Phase::GetParamIndex(Phase *this, Phase::ActionTreeBuilder *a2, _BYTE *a3, signed __int8 *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if ((Phase::ActionTreeBuilder *)Phase::GetStringHashId((Phase *)CFSTR("auto_distance"), (NSString *)a2) == a2)
  {
    result = 1;
    LOBYTE(v8) = -2;
  }
  else
  {
    v10 = *((_QWORD *)this + 17);
    v9 = *((_QWORD *)this + 18);
    v11 = v9 - v10;
    if (v9 == v10)
    {
LABEL_8:
      result = 0;
      LOBYTE(v8) = -1;
    }
    else
    {
      v8 = 0;
      v12 = v11 >> 3;
      if (v12 <= 1)
        v12 = 1;
      while (*(Phase::ActionTreeBuilder **)(v10 + 8 * v8) != a2)
      {
        if (v12 == ++v8)
          goto LABEL_8;
      }
      result = 1;
    }
  }
  *a3 = v8;
  return result;
}

uint64_t Phase::ReadEnumWithDefault<PHASECurveType>(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  __CFString *v6;
  NSString *v7;
  uint64_t v8;
  __CFString *v9;

  v5 = a2;
  v6 = CFSTR("CurveType");
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("CurveType"));
  v7 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v9 = objc_retainAutorelease(CFSTR("CurveType"));
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(CFSTR("CurveType"), "UTF8String"), "Field should be a string");
      v8 = 0;
      goto LABEL_7;
    }
    *a3 = GetCurveType(v7);
  }
  else
  {
    *a3 = 1668435054;
  }
  v8 = 1;
LABEL_7:

  return v8;
}

void sub_21661B850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t Phase::ReadPhaseIdWithDefault(uint64_t a1, void *a2, void *a3, _QWORD *a4, uint64_t a5)
{
  id v9;
  id v10;
  void *v11;
  NSString *v12;
  uint64_t v13;

  v9 = a2;
  v10 = a3;
  objc_msgSend(v9, "objectForKeyedSubscript:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v11)
  {
    *a4 = 0;
    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(objc_retainAutorelease(v10), "UTF8String"), "Field should be a string");
LABEL_10:
    v13 = 0;
    goto LABEL_11;
  }
  if (a5 && (Phase::AddStringToPool(a1, a5, v11) & 1) == 0)
  {
    strncpy((char *)(a1 + 8), (const char *)objc_msgSend(objc_retainAutorelease(v11), "UTF8String"), 0x80uLL);
    goto LABEL_10;
  }
  *a4 = Phase::GetStringHashId((Phase *)v11, v12);
LABEL_7:
  v13 = 1;
LABEL_11:

  return v13;
}

void sub_21661BA08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t Phase::ReadEnumWithoutDefault<Phase::OutputMetaParamType>(uint64_t a1, void *a2, _DWORD *a3)
{
  id v5;
  __CFString *v6;
  Phase *v7;
  NSString *v8;
  int OutputParamType;
  uint64_t v10;
  __CFString *v11;
  __CFString *v12;
  __CFString *v13;
  const char *v14;
  __CFString *v15;

  v5 = a2;
  v6 = CFSTR("OutputType");
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("OutputType"));
  v7 = (Phase *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    v11 = objc_retainAutorelease(CFSTR("OutputType"));
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)objc_msgSend(CFSTR("OutputType"), "UTF8String"), "");
LABEL_8:
    v10 = 0;
    goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v12 = objc_retainAutorelease(CFSTR("OutputType"));
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(CFSTR("OutputType"), "UTF8String"), "Field should be a string");
    goto LABEL_8;
  }
  OutputParamType = Phase::GetOutputParamType(v7, v8);
  *a3 = OutputParamType;
  if (!OutputParamType)
  {
    v13 = objc_retainAutorelease(CFSTR("OutputType"));
    v14 = (const char *)objc_msgSend(CFSTR("OutputType"), "UTF8String");
    v15 = objc_retainAutorelease(CFSTR("OutputType"));
    objc_msgSend(CFSTR("OutputType"), "UTF8String");
    -[Phase UTF8String](objc_retainAutorelease(v7), "UTF8String");
    Phase::ParserSetParseError(a1, 1346924643, "", v14, "Field is bad %s - %s");
    goto LABEL_8;
  }
  v10 = 1;
LABEL_9:

  return v10;
}

void sub_21661BBC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::GetOutputParamType(Phase *this, NSString *a2)
{
  Phase *v2;
  uint64_t v3;

  v2 = this;
  if ((-[Phase isEqualToString:](v2, "isEqualToString:", CFSTR("float")) & 1) != 0)
  {
    v3 = 1;
  }
  else if ((-[Phase isEqualToString:](v2, "isEqualToString:", CFSTR("string")) & 1) != 0)
  {
    v3 = 2;
  }
  else if ((-[Phase isEqualToString:](v2, "isEqualToString:", CFSTR("paramset")) & 1) != 0)
  {
    v3 = 3;
  }
  else if (-[Phase isEqualToString:](v2, "isEqualToString:", CFSTR("insertfx")))
  {
    v3 = 4;
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_21661BC7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::GetChildDictionary(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  __CFString *v6;
  void *v7;
  uint64_t v8;
  __CFString *v9;
  __CFString *v10;

  v5 = a2;
  v6 = CFSTR("Envelope");
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("Envelope"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    v9 = objc_retainAutorelease(CFSTR("Envelope"));
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)objc_msgSend(CFSTR("Envelope"), "UTF8String"), "");
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v10 = objc_retainAutorelease(CFSTR("Envelope"));
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(CFSTR("Envelope"), "UTF8String"), "Field should be a dictionary");
    goto LABEL_6;
  }
  *a3 = objc_retainAutorelease(v7);
  v8 = 1;
LABEL_7:

  return v8;
}

void sub_21661BDA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::ParseEnvelope(uint64_t a1, void *a2, char *a3, uint64_t a4)
{
  id v7;
  char OptionalChildArray;
  id v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  unsigned int v21;
  void *v22;
  id obj;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  if ((Phase::ReadFloatType<double>(a1, v7, CFSTR("StartInputValue"), (double *)a4) & 1) != 0
    && (Phase::ReadFloatType<double>(a1, v7, CFSTR("StartOutputValue"), (double *)(a4 + 8)) & 1) != 0)
  {
    *(_DWORD *)(a4 + 16) = 0;
    v29 = 0;
    OptionalChildArray = Phase::GetOptionalChildArray(a1, v7, CFSTR("Segments"), &v29);
    v9 = v29;
    v10 = v9;
    if ((OptionalChildArray & 1) != 0)
    {
      if ((unint64_t)objc_msgSend(v9, "count") >= 0x11)
      {
        objc_msgSend(v10, "count");
        Phase::ParserSetParseError(a1, 1346924646, a3, a3, "Envelope has too many segments %d > %d");
LABEL_9:
        v11 = 0;
LABEL_10:

        goto LABEL_11;
      }
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      obj = v10;
      v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
      if (v17)
      {
        v18 = a4 + 24;
        v24 = *(_QWORD *)v26;
        v22 = v10;
        while (2)
        {
          for (i = 0; i != v17; ++i)
          {
            if (*(_QWORD *)v26 != v24)
              objc_enumerationMutation(obj);
            v20 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v10 = v22;
              Phase::ParserSetParseError(a1, 1346924643, a3, (const char *)objc_msgSend(CFSTR("Segments"), "UTF8String"), "Envelope segment object must be a dictionary");
              goto LABEL_27;
            }
            v21 = *(_DWORD *)(a4 + 16);
            if ((Phase::ReadFloatType<double>(a1, v20, CFSTR("InputValue"), (double *)(v18 + 24 * v21)) & 1) == 0
              || (Phase::ReadFloatType<double>(a1, v20, CFSTR("OutputValue"), (double *)(v18 + 24 * v21 + 8)) & 1) == 0
              || (Phase::ReadEnumWithDefault<PHASECurveType>(a1, v20, (_QWORD *)(v18 + 24 * v21 + 16)) & 1) == 0)
            {
              strncpy((char *)(a1 + 8), a3, 0x80uLL);
              v10 = v22;
LABEL_27:

              goto LABEL_9;
            }
            ++*(_DWORD *)(a4 + 16);
          }
          v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
          v10 = v22;
          if (v17)
            continue;
          break;
        }
      }

      if (*(_DWORD *)(a4 + 16))
      {
        v11 = 1;
        goto LABEL_10;
      }
      v15 = 1346924641;
      v12 = "";
      v13 = "Envelope doesn't have any segments";
      v14 = a1;
    }
    else
    {
      v12 = (const char *)objc_msgSend(CFSTR("Segments"), "UTF8String");
      v13 = "Envelope segment array object must be an array";
      v14 = a1;
      v15 = 1346924643;
    }
    Phase::ParserSetParseError(v14, v15, a3, v12, v13);
    goto LABEL_9;
  }
  strncpy((char *)(a1 + 8), a3, 0x80uLL);
  v11 = 0;
LABEL_11:

  return v11;
}

void sub_21661C0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t Phase::ReadFloatType<double>(uint64_t a1, void *a2, void *a3, double *a4)
{
  id v7;
  id v8;
  void *v9;
  Phase::Logger *v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  double v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  objc_msgSend(v7, "objectForKeyedSubscript:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"), "");
LABEL_11:
    v15 = 0;
    goto LABEL_12;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"), "Field should be a number");
    goto LABEL_11;
  }
  v10 = (Phase::Logger *)objc_msgSend(v9, "doubleValue");
  *a4 = v11;
  if (v11 < -1.79769313e308 || v11 > 1.79769313e308)
  {
    v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10)
                                                                                        + 16)));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = objc_msgSend(objc_retainAutorelease(v8), "UTF8String");
      v14 = *a4;
      v17 = 136316418;
      v18 = "ParserCore.mm";
      v19 = 1024;
      v20 = 583;
      v21 = 2080;
      v22 = v13;
      v23 = 2048;
      v24 = v14;
      v25 = 2048;
      v26 = 0xFFEFFFFFFFFFFFFFLL;
      v27 = 2048;
      v28 = 0x7FEFFFFFFFFFFFFFLL;
      _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d WARNING: %s %f is out of range [%f, %f]. Clamping...", (uint8_t *)&v17, 0x3Au);
    }

    *a4 = fmin(fmax(*a4, -1.79769313e308), 1.79769313e308);
  }
  v15 = 1;
LABEL_12:

  return v15;
}

void sub_21661C370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t Phase::GetNodeType(Phase *this, NSString *a2)
{
  Phase *v2;
  uint64_t v3;

  v2 = this;
  if ((-[Phase isEqualToString:](v2, "isEqualToString:", CFSTR("sampler")) & 1) != 0)
  {
    v3 = 1;
  }
  else if ((-[Phase isEqualToString:](v2, "isEqualToString:", CFSTR("blend")) & 1) != 0)
  {
    v3 = 2;
  }
  else if ((-[Phase isEqualToString:](v2, "isEqualToString:", CFSTR("random")) & 1) != 0)
  {
    v3 = 3;
  }
  else if ((-[Phase isEqualToString:](v2, "isEqualToString:", CFSTR("switch")) & 1) != 0)
  {
    v3 = 4;
  }
  else if ((-[Phase isEqualToString:](v2, "isEqualToString:", CFSTR("container")) & 1) != 0)
  {
    v3 = 5;
  }
  else if ((-[Phase isEqualToString:](v2, "isEqualToString:", CFSTR("pushstream")) & 1) != 0)
  {
    v3 = 6;
  }
  else if ((-[Phase isEqualToString:](v2, "isEqualToString:", CFSTR("procedure")) & 1) != 0)
  {
    v3 = 7;
  }
  else if ((-[Phase isEqualToString:](v2, "isEqualToString:", CFSTR("externaloutputpullstream")) & 1) != 0)
  {
    v3 = 8;
  }
  else if (-[Phase isEqualToString:](v2, "isEqualToString:", CFSTR("pullstream")))
  {
    v3 = 9;
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_21661C4C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double Phase::MsgBuffer::Init(Phase::MsgBuffer *this)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = operator new[]();
  v3 = *(_QWORD *)this;
  *(_QWORD *)this = v2;
  if (v3)
    MEMORY[0x2199F9D4C](v3, 0x1000C8077774924);
  *(_QWORD *)&result = 0x2000;
  *(_OWORD *)((char *)this + 8) = xmmword_216739C90;
  return result;
}

uint64_t Phase::TraverseNode(uint64_t a1, void *a2, void *a3, _QWORD *a4, Phase *a5, uint64_t a6, void *a7, uint64_t a8)
{
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  NSString *v21;
  char v22;
  uint64_t v23;

  v15 = a2;
  v16 = a3;
  v17 = a7;
  objc_msgSend(v16, "objectForKeyedSubscript:", v15);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = v18;
  if (!v18)
  {
    Phase::ParserSetParseError(a1, 1346924641, "NodeName", (const char *)objc_msgSend(objc_retainAutorelease(v15), "UTF8String"), "Node not found.");
    v23 = 0;
    goto LABEL_10;
  }
  objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("Type"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    switch(Phase::GetNodeType((Phase *)v20, v21))
    {
      case 1u:
        v22 = Phase::ParseSampler(a1, v19, a4, (uint64_t)a5, a6);
        break;
      case 2u:
        v22 = Phase::ParseBlend(a1, v19, v16, a4, a5, a6, v17);
        break;
      case 3u:
        v22 = Phase::ParseRandom(a1, v19, v16, a4, (uint64_t)a5, a6, v17);
        break;
      case 4u:
        v22 = Phase::ParseSwitch(a1, v19, v16, a4, a5, a6, v17);
        break;
      case 5u:
        v22 = Phase::ParseContainer(a1, v19, v16, (uint64_t)a4, (uint64_t)a5, a6, v17, a8);
        break;
      case 6u:
        v22 = Phase::ParsePushStream(a1, v19, a4, (uint64_t)a5, a6, v17, a8);
        break;
      case 7u:
        v22 = Phase::ParseProcedure(a1, v19, a4, (uint64_t)a5, a6);
        break;
      case 8u:
        v22 = Phase::ParseExternalOutputPullStream(a1, v19, a4, (uint64_t)a5, a6, a8);
        break;
      case 9u:
        v22 = Phase::ParsePullStream(a1, v19, a4, (uint64_t)a5, a6, v17, a8);
        break;
      default:
        objc_msgSend(objc_retainAutorelease(v20), "UTF8String");
        Phase::ParserSetParseError(a1, 1346924646, "", "", "Unknown node type %s");
        goto LABEL_7;
    }
    if ((v22 & 1) != 0)
    {
      v23 = 1;
      goto LABEL_8;
    }
  }
  else
  {
    Phase::ParserSetParseError(a1, 1346924643, (char *)objc_msgSend(objc_retainAutorelease(v15), "UTF8String"), "NodeType", "Child node type not a string");
  }
LABEL_7:
  v23 = 0;
LABEL_8:

LABEL_10:
  return v23;
}

void sub_21661C828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t Phase::ParseSampler(uint64_t a1, void *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  Phase::ActionTreeBuilder *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  char __src[128];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  if ((Phase::ReadString(a1, v9, CFSTR("Name"), (uint64_t)__src, 0x80uLL, 0) & 1) == 0)
  {
    v10 = 0;
    *(_OWORD *)(a1 + 72) = xmmword_2167397BE;
    *(_OWORD *)(a1 + 88) = unk_2167397CE;
    *(_OWORD *)(a1 + 104) = xmmword_2167397DE;
    *(_OWORD *)(a1 + 120) = unk_2167397EE;
    strcpy((char *)(a1 + 8), "<SamplerStruct>");
    *(_OWORD *)(a1 + 24) = unk_21673978E;
    *(_OWORD *)(a1 + 40) = xmmword_21673979E;
    *(_OWORD *)(a1 + 56) = unk_2167397AE;
    goto LABEL_13;
  }
  if ((Phase::ReadPhaseId(a1, v9, CFSTR("Name"), &v12, a5) & 1) == 0
    || (Phase::ReadPhaseId(a1, v9, CFSTR("Asset"), &v13, a5) & 1) == 0
    || (Phase::ReadEnumWithDefault<PHASEPlaybackMode>(a1, v9, &v16) & 1) == 0)
  {
    goto LABEL_11;
  }
  *(_BYTE *)(a4 + 400) = v16 == 0;
  if (!Phase::ParseLeafNode(a1, v9, __src, &v14, (Phase *)a4, a5))
  {
LABEL_12:
    v10 = 0;
    goto LABEL_13;
  }
  if ((Phase::ReadEnumWithDefault<PHASECullOption>(a1, v9, &v15) & 1) == 0)
    goto LABEL_11;
  if ((Phase::AddLeafNodeName((Phase *)a4, v12, *(unsigned __int16 *)(a4 + 272)) & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924646, __src, "name", "Name %s is not a valid name", __src);
    goto LABEL_12;
  }
  if (!Phase::MsgBuffer::WriteMsg(a3, a1, 0, &v12, 0x50uLL))
  {
LABEL_11:
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
    goto LABEL_12;
  }
  v10 = 1;
LABEL_13:

  return v10;
}

void sub_21661CA64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::ParseBlend(uint64_t a1, void *a2, void *a3, _QWORD *a4, _QWORD *a5, uint64_t a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  uint64_t ChildArray;
  id v17;
  void *v18;
  char ChildDictionary;
  char v20;
  void *v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  id v43;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  id obj;
  void *v49;
  uint64_t i;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  id v63;
  char v64;
  uint64_t v65;
  char v66[8];
  char v67[128];
  char __src[128];
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v14 = a3;
  v15 = a7;
  if ((Phase::ReadString(a1, v13, CFSTR("Name"), (uint64_t)__src, 0x80uLL, 0) & 1) == 0)
  {
    ChildArray = 0;
    *(_OWORD *)(a1 + 72) = xmmword_21673983F;
    *(_OWORD *)(a1 + 88) = unk_21673984F;
    *(_OWORD *)(a1 + 104) = xmmword_21673985F;
    *(_OWORD *)(a1 + 120) = unk_21673986F;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)"<BlendStruct>";
    *(_OWORD *)(a1 + 24) = unk_21673980F;
    *(_OWORD *)(a1 + 40) = xmmword_21673981F;
    *(_OWORD *)(a1 + 56) = unk_21673982F;
    goto LABEL_68;
  }
  v65 = 0;
  if ((Phase::ReadPhaseId(a1, v13, CFSTR("Name"), &v65, a6) & 1) == 0
    || (v64 = 0, (Phase::ReadParamIdx(a1, v13, CFSTR("BlendParameter"), (Phase *)a5, &v64, a6) & 1) == 0))
  {
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
    ChildArray = 0;
    goto LABEL_68;
  }
  v63 = 0;
  ChildArray = Phase::GetChildArray(a1, v13, &v63);
  v17 = v63;
  v49 = v17;
  if (!(_DWORD)ChildArray)
  {
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
    goto LABEL_67;
  }
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  obj = v17;
  v46 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v67, 16);
  if (!v46)
  {
    ChildArray = 1;
    goto LABEL_66;
  }
  v47 = *(_QWORD *)v60;
  v45 = a5 + 22;
  while (2)
  {
    for (i = 0; i != v46; ++i)
    {
      if (*(_QWORD *)v60 != v47)
        objc_enumerationMutation(obj);
      v18 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * i);
      if (!v18 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
      {
        Phase::ParserSetParseError(a1, 1346924643, __src, (const char *)objc_msgSend(CFSTR("Children"), "UTF8String"), "");
        goto LABEL_65;
      }
      v54 = 0;
      v55 = v65;
      v56 = v64;
      ChildDictionary = Phase::GetChildDictionary(a1, v18, &v54);
      v51 = v54;
      if ((ChildDictionary & 1) == 0 || !Phase::ParseEnvelope(a1, v51, __src, (uint64_t)&v57))
      {
        strncpy((char *)(a1 + 8), __src, 0x80uLL);

        goto LABEL_65;
      }
      v53 = 0;
      v20 = Phase::ReadString(a1, v18, &v53, a6);
      v52 = v53;
      if ((v20 & 1) == 0)
        goto LABEL_60;
      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("BlendParameter"));
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "isEqualToString:", CFSTR("auto_distance"));

      if (v22)
      {
        if ((Phase::ReadPhaseId(a1, v13, CFSTR("DistanceSubmixName"), &v58, a6) & 1) == 0)
          goto LABEL_60;
        v23 = (_QWORD *)a5[47];
        v24 = a5[48] - (_QWORD)v23;
        if (!v24)
          goto LABEL_59;
        v25 = v58;
        v26 = v24 / 5944;
        if (v26 <= 1)
          v27 = 1;
        else
          v27 = v26;
        if (*v23 != v58)
        {
          v28 = 0;
          v29 = v23 + 743;
          v30 = v27 - 1;
          while (v30 != v28)
          {
            v31 = *v29;
            v29 += 743;
            ++v28;
            if (v31 == v58)
            {
              if (v26 <= v28)
                break;
              goto LABEL_26;
            }
          }
LABEL_59:
          objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DistanceSubmixName"));
          v43 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          Phase::ParserSetParseError(a1, 1346924646, __src, "submix", "Submix %s was not found in the sound event asset", (const char *)objc_msgSend(v43, "UTF8String"));

LABEL_61:
LABEL_65:
          ChildArray = 0;
          goto LABEL_66;
        }
LABEL_26:
        v32 = (char *)a5[20];
        v33 = (char *)a5[21];
        v34 = v32;
        if (v32 != v33)
        {
          while (*(_QWORD *)v34 != v58)
          {
            v34 += 8;
            if (v34 == v33)
            {
              v34 = (char *)a5[21];
              break;
            }
          }
        }
        if (v34 == v33)
        {
          if ((unint64_t)v33 >= *v45)
          {
            v36 = (v33 - v32) >> 3;
            v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 61)
              std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
            v38 = *v45 - (_QWORD)v32;
            if (v38 >> 2 > v37)
              v37 = v38 >> 2;
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
              v39 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v39 = v37;
            if (v39)
            {
              v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v45, v39);
              v32 = (char *)a5[20];
              v33 = (char *)a5[21];
            }
            else
            {
              v40 = 0;
            }
            v41 = &v40[8 * v36];
            *(_QWORD *)v41 = v25;
            v35 = v41 + 8;
            while (v33 != v32)
            {
              v42 = *((_QWORD *)v33 - 1);
              v33 -= 8;
              *((_QWORD *)v41 - 1) = v42;
              v41 -= 8;
            }
            a5[20] = v41;
            a5[21] = v35;
            a5[22] = &v40[8 * v39];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *(_QWORD *)v33 = v58;
            v35 = v33 + 8;
          }
          a5[21] = v35;
        }
      }
      else
      {
        v58 = 0;
      }
      if (!Phase::MsgBuffer::WriteMsg(a4, a1, 1, &v55, 0x1B0uLL))
      {
LABEL_60:
        strncpy((char *)(a1 + 8), __src, 0x80uLL);
        goto LABEL_61;
      }
      if (!Phase::TraverseNode(a1, v52, v14, a4, a5, a6, v15, 0))
        goto LABEL_61;
      if (!Phase::MsgBuffer::WriteMsg(a4, a1, 2, v66, 8uLL))
      {
        strncpy((char *)(a1 + 8), __src, 0x80uLL);

        goto LABEL_65;
      }

    }
    ChildArray = 1;
    v46 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v67, 16);
    if (v46)
      continue;
    break;
  }
LABEL_66:

LABEL_67:
LABEL_68:

  return ChildArray;
}

void sub_21661D0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t Phase::ParseRandom(uint64_t a1, void *a2, void *a3, _QWORD *a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  uint64_t ChildArray;
  id v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  uint64_t v23;
  void *j;
  void *v25;
  char v26;
  id v27;
  id v29;
  void *v30;
  id obj;
  id obja;
  uint64_t v33;
  uint64_t v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  id v44;
  uint64_t v45;
  int v46;
  char v47;
  _BYTE v48[8];
  _BYTE v49[128];
  double v50;
  char v51[128];
  char __src[128];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v14 = a3;
  v15 = a7;
  if ((Phase::ReadString(a1, v13, CFSTR("Name"), (uint64_t)__src, 0x80uLL, 0) & 1) != 0)
  {
    if ((Phase::ReadPhaseId(a1, v13, CFSTR("Name"), &v45, a6) & 1) != 0
      && (Phase::ReadIntTypeWithDefault<int>(a1, v13, CFSTR("UniqueSelectionQueueLength"), &v46, 0, 0, 128) & 1) != 0)
    {
      v44 = 0;
      ChildArray = Phase::GetChildArray(a1, v13, &v44);
      v17 = v44;
      v18 = v17;
      if ((_DWORD)ChildArray)
      {
        v19 = objc_msgSend(v17, "count");
        if (v19 >= 0xFF)
          __assert_rtn("ParseRandom", "ParserCore.mm", 1759, "childCount < UCHAR_MAX");
        v47 = v19;
        if (v19 <= v46)
        {
          Phase::ParserSetParseError(a1, 1346924646, __src, (const char *)objc_msgSend(CFSTR("UniqueSelectionQueueLength"), "UTF8String"), "UniqueSelectionQueueLength must be less than the number of child nodes");
        }
        else
        {
          if (Phase::MsgBuffer::WriteMsg(a4, a1, 5, &v45, 0x10uLL))
          {
            v42 = 0u;
            v43 = 0u;
            v40 = 0u;
            v41 = 0u;
            v30 = v18;
            obj = v18;
            v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v51, 16);
            if (v20)
            {
              v33 = *(_QWORD *)v41;
              while (2)
              {
                for (i = 0; i != v20; ++i)
                {
                  if (*(_QWORD *)v41 != v33)
                    objc_enumerationMutation(obj);
                  v22 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
                  if (!v22 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
                  {
                    Phase::ParserSetParseError(a1, 1346924643, __src, (const char *)objc_msgSend(CFSTR("Children"), "UTF8String"), "");
LABEL_38:

                    v18 = v30;
                    goto LABEL_39;
                  }
                  if ((Phase::ReadFloatTypeWithDefault<double>(a1, v22, CFSTR("Weight"), &v50, 1.0, 1.0, 8.98846567e307) & 1) == 0|| !Phase::MsgBuffer::WriteMsg(a4, a1, 6, &v50, 8uLL))
                  {
                    strncpy((char *)(a1 + 8), __src, 0x80uLL);
                    goto LABEL_38;
                  }
                }
                v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v51, 16);
                if (v20)
                  continue;
                break;
              }
            }

            v18 = v30;
            v38 = 0u;
            v39 = 0u;
            v36 = 0u;
            v37 = 0u;
            v29 = obj;
            v23 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v36, v49, 16);
            if (v23)
            {
              obja = (id)v23;
              v34 = *(_QWORD *)v37;
              while (2)
              {
                for (j = 0; j != obja; j = (char *)j + 1)
                {
                  if (*(_QWORD *)v37 != v34)
                    objc_enumerationMutation(v29);
                  v25 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)j);
                  v35 = 0;
                  v26 = Phase::ReadString(a1, v25, &v35, a6);
                  v27 = v35;
                  if ((v26 & 1) == 0 || !Phase::MsgBuffer::WriteMsg(a4, a1, 7, &v50, 8uLL))
                  {
                    strncpy((char *)(a1 + 8), __src, 0x80uLL);
LABEL_44:

                    v18 = v30;
LABEL_46:
                    ChildArray = 0;
                    goto LABEL_47;
                  }
                  if (!Phase::TraverseNode(a1, v27, v14, a4, a5, a6, v15, 0))
                    goto LABEL_44;
                  v18 = v30;
                  if (!Phase::MsgBuffer::WriteMsg(a4, a1, 8, v48, 8uLL))
                  {
                    strncpy((char *)(a1 + 8), __src, 0x80uLL);

                    goto LABEL_46;
                  }

                }
                ChildArray = 1;
                obja = (id)objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v36, v49, 16);
                if (obja)
                  continue;
                break;
              }
            }
            else
            {
              ChildArray = 1;
            }
LABEL_47:

            goto LABEL_40;
          }
          strncpy((char *)(a1 + 8), __src, 0x80uLL);
        }
LABEL_39:
        ChildArray = 0;
      }
      else
      {
        strncpy((char *)(a1 + 8), __src, 0x80uLL);
      }
LABEL_40:

      goto LABEL_41;
    }
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
    ChildArray = 0;
  }
  else
  {
    ChildArray = 0;
    *(_OWORD *)(a1 + 72) = xmmword_2167398C0;
    *(_OWORD *)(a1 + 88) = unk_2167398D0;
    *(_OWORD *)(a1 + 104) = xmmword_2167398E0;
    *(_OWORD *)(a1 + 120) = unk_2167398F0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)"<RandomStruct>";
    *(_OWORD *)(a1 + 24) = *(_OWORD *)&algn_21673988F[1];
    *(_OWORD *)(a1 + 40) = xmmword_2167398A0;
    *(_OWORD *)(a1 + 56) = unk_2167398B0;
  }
LABEL_41:

  return ChildArray;
}

void sub_21661D690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t Phase::ParseSwitch(uint64_t a1, void *a2, void *a3, _QWORD *a4, Phase *a5, uint64_t a6, void *a7)
{
  id v13;
  id v14;
  int ChildArray;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  id v21;
  uint64_t v22;
  char v23;
  id v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  uint64_t v29;
  id obj;
  Phase *v31;
  id v32;
  id v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  id v41;
  char v42;
  uint64_t v43;
  _BYTE v44[8];
  char v45[128];
  char __src[128];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v32 = a3;
  v14 = a7;
  if ((Phase::ReadString(a1, v13, CFSTR("Name"), (uint64_t)__src, 0x80uLL, 0) & 1) == 0)
  {
    v25 = 0;
    *(_OWORD *)(a1 + 72) = xmmword_216739941;
    *(_OWORD *)(a1 + 88) = unk_216739951;
    *(_OWORD *)(a1 + 104) = xmmword_216739961;
    *(_OWORD *)(a1 + 120) = unk_216739971;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)"<SwitchStruct>";
    *(_OWORD *)(a1 + 24) = unk_216739911;
    *(_OWORD *)(a1 + 40) = xmmword_216739921;
    *(_OWORD *)(a1 + 56) = unk_216739931;
    goto LABEL_23;
  }
  v43 = 0;
  if ((Phase::ReadPhaseId(a1, v13, CFSTR("Name"), &v43, a6) & 1) == 0
    || (v42 = 0, (Phase::ReadParamIdx(a1, v13, CFSTR("SwitchParameter"), a5, &v42, a6) & 1) == 0))
  {
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
LABEL_22:
    v25 = 0;
    goto LABEL_23;
  }
  v41 = 0;
  ChildArray = Phase::GetChildArray(a1, v13, &v41);
  v31 = a5;
  v16 = v41;
  v17 = v16;
  if (!ChildArray)
  {
    strncpy((char *)(a1 + 8), __src, 0x80uLL);

    goto LABEL_22;
  }
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  obj = v16;
  v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
  if (!v18)
  {
    v25 = 1;
    goto LABEL_31;
  }
  v29 = *(_QWORD *)v38;
  v28 = v43;
  v27 = v42;
  while (2)
  {
    for (i = 0; i != v18; ++i)
    {
      if (*(_QWORD *)v38 != v29)
        objc_enumerationMutation(obj);
      v20 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
      if (!v20 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
      {
        Phase::ParserSetParseError(a1, 1346924643, __src, (const char *)objc_msgSend(CFSTR("Children"), "UTF8String"), "");
        goto LABEL_30;
      }
      v21 = v14;
      v22 = v18;
      v33 = 0;
      v23 = Phase::ReadString(a1, v20, &v33, a6);
      v24 = v33;
      if ((v23 & 1) == 0
        || (v34 = v28, v35 = v27, !Phase::ReadPhaseId(a1, v20, CFSTR("SwitchValue"), &v36, a6))
        || !Phase::MsgBuffer::WriteMsg(a4, a1, 3, &v34, 0x18uLL))
      {
        strncpy((char *)(a1 + 8), __src, 0x80uLL);
LABEL_27:

        v14 = v21;
LABEL_30:
        v25 = 0;
        goto LABEL_31;
      }
      if (!Phase::TraverseNode(a1, v24, v32, a4, v31, a6, v21, 0))
        goto LABEL_27;
      v18 = v22;
      v14 = v21;
      if (!Phase::MsgBuffer::WriteMsg(a4, a1, 4, v44, 8uLL))
      {
        strncpy((char *)(a1 + 8), __src, 0x80uLL);

        goto LABEL_30;
      }

    }
    v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
    v25 = 1;
    if (v18)
      continue;
    break;
  }
LABEL_31:

LABEL_23:
  return v25;
}

void sub_21661DAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t Phase::ParseContainer(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  id v15;
  id v16;
  int ChildArray;
  id v18;
  void *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  void *v27;
  id obj;
  void *v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  id v35;
  _BYTE v36[128];
  char v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  v30 = a3;
  v16 = a7;
  v29 = v15;
  if ((Phase::ReadString(a1, v15, CFSTR("Name"), (uint64_t)v37, 0x80uLL, 0) & 1) != 0)
  {
    v35 = 0;
    ChildArray = Phase::GetChildArray(a1, v15, &v35);
    v18 = v35;
    v19 = v18;
    if (v18)
      v20 = ChildArray;
    else
      v20 = 0;
    if (v20 == 1)
    {
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      obj = v18;
      v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
      v27 = v19;
      if (v21)
      {
        v22 = *(_QWORD *)v32;
        while (2)
        {
          for (i = 0; i != v21; ++i)
          {
            if (*(_QWORD *)v32 != v22)
              objc_enumerationMutation(obj);
            v24 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * i);
            if (!v24 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
            {
              Phase::ParserSetParseError(a1, 1346924643, "", v37, "Container node child name was not a string", v27);
LABEL_20:
              v25 = 0;
              goto LABEL_22;
            }
            if (!Phase::TraverseNode(a1, v24, v30, a4, a5, a6, v16, a8))
              goto LABEL_20;
          }
          v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
          v25 = 1;
          if (v21)
            continue;
          break;
        }
      }
      else
      {
        v25 = 1;
      }
LABEL_22:

      v19 = v27;
    }
    else
    {
      v25 = 0;
      *(_OWORD *)(a1 + 72) = xmmword_216739A43;
      *(_OWORD *)(a1 + 88) = unk_216739A53;
      *(_OWORD *)(a1 + 104) = xmmword_216739A63;
      *(_OWORD *)(a1 + 120) = unk_216739A73;
      strcpy((char *)(a1 + 8), "<ContainerNode>");
      *(_OWORD *)(a1 + 24) = unk_216739A13;
      *(_OWORD *)(a1 + 40) = xmmword_216739A23;
      *(_OWORD *)(a1 + 56) = unk_216739A33;
    }

  }
  else
  {
    v25 = 0;
    *(_OWORD *)(a1 + 72) = xmmword_2167399C2;
    *(_OWORD *)(a1 + 88) = unk_2167399D2;
    *(_OWORD *)(a1 + 104) = xmmword_2167399E2;
    *(_OWORD *)(a1 + 120) = unk_2167399F2;
    strcpy((char *)(a1 + 8), "<ContainerStruct>");
    *(_WORD *)(a1 + 26) = 0;
    *(_DWORD *)(a1 + 28) = 0;
    *(_QWORD *)(a1 + 32) = unk_21673999A;
    *(_OWORD *)(a1 + 40) = xmmword_2167399A2;
    *(_OWORD *)(a1 + 56) = unk_2167399B2;
  }

  return v25;
}

void sub_21661DDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t Phase::ParsePushStream(uint64_t a1, void *a2, _QWORD *a3, uint64_t a4, uint64_t a5, void *a6, char a7)
{
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  id v20;
  Phase::ActionTreeBuilder *v21;
  double v22;
  _BYTE v23[8];
  double v24;
  char __src[128];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v14 = a6;
  if ((Phase::ReadString(a1, v13, CFSTR("Name"), (uint64_t)__src, 0x80uLL, 0) & 1) == 0)
  {
    v15 = 0;
    *(_OWORD *)(a1 + 72) = xmmword_216739AC4;
    *(_OWORD *)(a1 + 88) = unk_216739AD4;
    *(_OWORD *)(a1 + 104) = xmmword_216739AE4;
    *(_OWORD *)(a1 + 120) = unk_216739AF4;
    strcpy((char *)(a1 + 8), "<PushStreamStruct>");
    *(_BYTE *)(a1 + 27) = unk_216739A97;
    *(_DWORD *)(a1 + 28) = unk_216739A98;
    *(_QWORD *)(a1 + 32) = unk_216739A9C;
    *(_OWORD *)(a1 + 40) = xmmword_216739AA4;
    *(_OWORD *)(a1 + 56) = unk_216739AB4;
    goto LABEL_16;
  }
  if ((a7 & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924646, __src, "", "PushStreamNode cannot be a child of switch, random, or blend nodes");
    goto LABEL_15;
  }
  if ((Phase::ReadPhaseId(a1, v13, CFSTR("Name"), &v21, a5) & 1) == 0)
    goto LABEL_14;
  *(_BYTE *)(a4 + 400) = 0;
  if (!Phase::ParseLeafNode(a1, v13, __src, &v22, (Phase *)a4, a5))
  {
LABEL_15:
    v15 = 0;
    goto LABEL_16;
  }
  if ((Phase::AddLeafNodeName((Phase *)a4, v21, *(unsigned __int16 *)(a4 + 272)) & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924646, __src, "name", "Name %s is not a valid name");
    goto LABEL_15;
  }
  if ((Phase::ReadBoolWithDefault(a1, v13, v23) & 1) == 0
    || (Phase::ReadFloatTypeWithDefault<double>(a1, v13, CFSTR("TargetLKFS"), &v24, -12.0, -100.0, 0.0) & 1) == 0
    || !Phase::MsgBuffer::WriteMsg(a3, a1, 9, &v21, 0x48uLL))
  {
LABEL_14:
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
    goto LABEL_15;
  }
  v20 = 0;
  v15 = Phase::ReadAVAudioFormat(a1, v13, &v20);
  v16 = v20;
  if ((v15 & 1) != 0)
  {
    objc_msgSend(v14, "streamNodeFormats");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("Name"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setObject:forKey:", v16, v18);

  }
  else
  {
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
  }

LABEL_16:
  return v15;
}

void sub_21661E0C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t Phase::ParseProcedure(uint64_t a1, void *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  Phase::ActionTreeBuilder *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE v18[8];
  uint64_t v19;
  char __src[128];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  if ((Phase::ReadString(a1, v9, CFSTR("Name"), (uint64_t)__src, 0x80uLL, 0) & 1) == 0)
  {
    v10 = 0;
    *(_OWORD *)(a1 + 72) = xmmword_216739B45;
    *(_OWORD *)(a1 + 88) = unk_216739B55;
    *(_OWORD *)(a1 + 104) = xmmword_216739B65;
    *(_OWORD *)(a1 + 120) = unk_216739B75;
    strcpy((char *)(a1 + 8), "<ProcedureStruct>");
    *(_WORD *)(a1 + 26) = unk_216739B17;
    *(_DWORD *)(a1 + 28) = unk_216739B19;
    *(_QWORD *)(a1 + 32) = unk_216739B1D;
    *(_OWORD *)(a1 + 40) = xmmword_216739B25;
    *(_OWORD *)(a1 + 56) = unk_216739B35;
    goto LABEL_17;
  }
  if ((Phase::ReadPhaseId(a1, v9, CFSTR("Name"), &v12, a5) & 1) == 0
    || (Phase::ReadEnumWithDefault<PHASEPlaybackMode>(a1, v9, &v15) & 1) == 0)
  {
    goto LABEL_15;
  }
  *(_BYTE *)(a4 + 400) = v15 == 0;
  if (!Phase::ParseLeafNode(a1, v9, __src, &v13, (Phase *)a4, a5))
  {
LABEL_16:
    v10 = 0;
    goto LABEL_17;
  }
  if ((Phase::ReadEnumWithDefault<PHASECullOption>(a1, v9, &v14) & 1) == 0
    || (Phase::ReadIntTypeWithDefault<int>(a1, v9, CFSTR("ProcedureMaxPolyphony"), &v16, 16, 1, 0x7FFFFFFF) & 1) == 0
    || (Phase::ReadEnumWithDefault<PHASEVoiceStealingType>(a1, v9, &v17) & 1) == 0
    || (Phase::ReadEnumWithDefault<Phase::ProcedureMsg::Type>(a1, v9, v18) & 1) == 0)
  {
    goto LABEL_15;
  }
  if (v18[0] == 1 && !Phase::ParseWaterProcedureParams(a1, v9, __src, (uint64_t)&v19, (Phase *)a4, a5))
    goto LABEL_16;
  if ((Phase::AddLeafNodeName((Phase *)a4, v12, *(unsigned __int16 *)(a4 + 272)) & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924646, __src, "name", "Name %s is not a valid name", __src);
    goto LABEL_16;
  }
  if (!Phase::MsgBuffer::WriteMsg(a3, a1, 10, &v12, 0xB8uLL))
  {
LABEL_15:
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
    goto LABEL_16;
  }
  v10 = 1;
LABEL_17:

  return v10;
}

void sub_21661E370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::ParseExternalOutputPullStream(uint64_t a1, void *a2, _QWORD *a3, uint64_t a4, uint64_t a5, char a6)
{
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  double v15;
  Phase::ActionTreeBuilder *v17;
  __int128 v18;
  double v19;
  double v20;
  _BYTE v21[8];
  double v22;
  unsigned int v23;
  char v24[128];
  char __src[128];
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  if ((Phase::ReadString(a1, v11, CFSTR("Name"), (uint64_t)__src, 0x80uLL, 0) & 1) != 0)
  {
    if ((a6 & 1) == 0)
    {
      Phase::ParserSetParseError(a1, 1346924646, __src, "", "ExternalOutputPullStreamNode cannot be a child of switch, random, or blend nodes");
      v14 = 0;
      goto LABEL_20;
    }
    if ((Phase::ReadString(a1, v11, CFSTR("UUID"), (uint64_t)v24, 0x80uLL, 0) & 1) != 0)
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%s"), v24);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v12);
      v26 = 0uLL;
      objc_msgSend(v13, "getUUIDBytes:", &v26);
      v18 = v26;
      if ((Phase::ReadPhaseId(a1, v11, CFSTR("Name"), &v17, a5) & 1) != 0)
      {
        *(_BYTE *)(a4 + 400) = 0;
        if (!Phase::ParseLeafNode(a1, v11, __src, &v19, (Phase *)a4, a5))
        {
LABEL_18:
          v14 = 0;
          goto LABEL_19;
        }
        if (v20 != 1.0)
        {
          Phase::ParserSetParseError(a1, 1346924646, __src, "rate", "Rate %f is not a valid rate for a pullstream.  Must be 1.0", v20);
          goto LABEL_18;
        }
        if ((Phase::AddLeafNodeName((Phase *)a4, v17, *(unsigned __int16 *)(a4 + 272)) & 1) == 0)
        {
          Phase::ParserSetParseError(a1, 1346924646, __src, "name", "Name %s is not a valid name", v15);
          goto LABEL_18;
        }
        if ((Phase::ReadBoolWithDefault(a1, v11, v21) & 1) != 0
          && (Phase::ReadFloatTypeWithDefault<double>(a1, v11, CFSTR("TargetLKFS"), &v22, -12.0, -100.0, 0.0) & 1) != 0
          && (Phase::ReadAudioChannelLayoutTag(a1, v11, CFSTR("ChannelLayoutTag"), &v23) & 1) != 0
          && Phase::MsgBuffer::WriteMsg(a3, a1, 11, &v17, 0x60uLL))
        {
          v14 = 1;
LABEL_19:

          goto LABEL_20;
        }
      }
      strncpy((char *)(a1 + 8), __src, 0x80uLL);
      goto LABEL_18;
    }
  }
  v14 = 0;
  *(_OWORD *)(a1 + 72) = xmmword_216739BC6;
  *(_OWORD *)(a1 + 88) = unk_216739BD6;
  *(_OWORD *)(a1 + 104) = xmmword_216739BE6;
  *(_OWORD *)(a1 + 120) = unk_216739BF6;
  strcpy((char *)(a1 + 8), "<ExternalOutputPullStreamStruct>");
  *(_BYTE *)(a1 + 41) = unk_216739BA7;
  *(_WORD *)(a1 + 42) = unk_216739BA8;
  *(_DWORD *)(a1 + 44) = unk_216739BAA;
  *(_QWORD *)(a1 + 48) = unk_216739BAE;
  *(_OWORD *)(a1 + 56) = unk_216739BB6;
LABEL_20:

  return v14;
}

void sub_21661E674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t Phase::ParsePullStream(uint64_t a1, void *a2, _QWORD *a3, uint64_t a4, uint64_t a5, void *a6, char a7)
{
  id v13;
  id v14;
  uint64_t v15;
  double v16;
  id v17;
  void *v18;
  void *v19;
  id v21;
  Phase::ActionTreeBuilder *v22;
  double v23;
  double v24;
  _BYTE v25[8];
  double v26;
  char __src[128];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v14 = a6;
  if ((Phase::ReadString(a1, v13, CFSTR("Name"), (uint64_t)__src, 0x80uLL, 0) & 1) != 0)
  {
    if ((a7 & 1) == 0)
    {
      Phase::ParserSetParseError(a1, 1346924646, __src, "", "PullStreamNode cannot be a child of switch, random, or blend nodes");
      goto LABEL_17;
    }
    if ((Phase::ReadPhaseId(a1, v13, CFSTR("Name"), &v22, a5) & 1) == 0)
      goto LABEL_16;
    *(_BYTE *)(a4 + 400) = 0;
    if (!Phase::ParseLeafNode(a1, v13, __src, &v23, (Phase *)a4, a5))
    {
LABEL_17:
      v15 = 0;
      goto LABEL_18;
    }
    if (v24 != 1.0)
    {
      Phase::ParserSetParseError(a1, 1346924646, __src, "rate", "Rate %f is not a valid rate for a pullstream.  Must be 1.0", v24);
      goto LABEL_17;
    }
    if ((Phase::AddLeafNodeName((Phase *)a4, v22, *(unsigned __int16 *)(a4 + 272)) & 1) == 0)
    {
      Phase::ParserSetParseError(a1, 1346924646, __src, "name", "Name %s is not a valid name", v16);
      goto LABEL_17;
    }
    if ((Phase::ReadBoolWithDefault(a1, v13, v25) & 1) == 0
      || (Phase::ReadFloatTypeWithDefault<double>(a1, v13, CFSTR("TargetLKFS"), &v26, -12.0, -100.0, 0.0) & 1) == 0
      || !Phase::MsgBuffer::WriteMsg(a3, a1, 12, &v22, 0x50uLL))
    {
LABEL_16:
      strncpy((char *)(a1 + 8), __src, 0x80uLL);
      goto LABEL_17;
    }
    v21 = 0;
    v15 = Phase::ReadAVAudioFormat(a1, v13, &v21);
    v17 = v21;
    if ((v15 & 1) != 0)
    {
      objc_msgSend(v14, "streamNodeFormats");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("Name"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "setObject:forKey:", v17, v19);

    }
    else
    {
      strncpy((char *)(a1 + 8), __src, 0x80uLL);
    }

  }
  else
  {
    v15 = 0;
    *(_OWORD *)(a1 + 72) = xmmword_216739C47;
    *(_OWORD *)(a1 + 88) = unk_216739C57;
    *(_OWORD *)(a1 + 104) = xmmword_216739C67;
    *(_OWORD *)(a1 + 120) = unk_216739C77;
    strcpy((char *)(a1 + 8), "<PullStreamStruct>");
    *(_BYTE *)(a1 + 27) = unk_216739C1A;
    *(_DWORD *)(a1 + 28) = unk_216739C1B;
    *(_QWORD *)(a1 + 32) = unk_216739C1F;
    *(_OWORD *)(a1 + 40) = xmmword_216739C27;
    *(_OWORD *)(a1 + 56) = unk_216739C37;
  }
LABEL_18:

  return v15;
}

void sub_21661E978(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t Phase::ReadEnumWithDefault<PHASEPlaybackMode>(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  __CFString *v6;
  NSString *v7;
  uint64_t v8;
  __CFString *v9;

  v5 = a2;
  v6 = CFSTR("PlaybackMode");
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("PlaybackMode"));
  v7 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v9 = objc_retainAutorelease(CFSTR("PlaybackMode"));
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(CFSTR("PlaybackMode"), "UTF8String"), "Field should be a string");
      v8 = 0;
      goto LABEL_7;
    }
    *a3 = GetPlaybackMode(v7);
  }
  else
  {
    *a3 = 0;
  }
  v8 = 1;
LABEL_7:

  return v8;
}

void sub_21661EA9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::ParseLeafNode(uint64_t a1, void *a2, char *a3, double *a4, Phase *a5, uint64_t a6)
{
  id v11;
  char *v12;
  char *v13;
  int64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  __CFString *v19;
  void *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  __CFString *v28;
  uint64_t v29;
  char FloatTypeWith;
  uint64_t v31;

  v11 = a2;
  if ((Phase::ReadPhaseId(a1, v11, CFSTR("Submix"), a4, a6) & 1) == 0)
    goto LABEL_36;
  v13 = (char *)*((_QWORD *)a5 + 47);
  v12 = (char *)*((_QWORD *)a5 + 48);
  v14 = v12 - v13;
  if (v12 == v13)
  {
LABEL_15:
    objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("Submix"));
    v27 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    Phase::ParserSetParseError(a1, 1346924646, a3, "submix", "Submix %s was not found in the sound event asset", (const char *)objc_msgSend(v27, "UTF8String"));

LABEL_37:
    v31 = 0;
    goto LABEL_38;
  }
  v15 = *a4;
  v16 = v14 / 5944;
  if (v16 <= 1)
    v17 = 1;
  else
    v17 = v16;
  if (*(_QWORD *)v13 != *(_QWORD *)&v15)
  {
    v23 = 0;
    v24 = (uint64_t *)(v13 + 5944);
    v25 = v17 - 1;
    while (v25 != v23)
    {
      v26 = *v24;
      v24 += 743;
      ++v23;
      if (v26 == *(_QWORD *)&v15)
      {
        if (v16 > v23)
          goto LABEL_7;
        goto LABEL_15;
      }
    }
    goto LABEL_15;
  }
LABEL_7:
  v18 = v11;
  v19 = CFSTR("CalibrationMode");
  objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("CalibrationMode"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v28 = objc_retainAutorelease(CFSTR("CalibrationMode"));
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(CFSTR("CalibrationMode"), "UTF8String"), "Field should be a string");

      goto LABEL_36;
    }
    v21 = v20;
    if ((objc_msgSend(v21, "isEqualToString:", CFSTR("none")) & 1) != 0)
    {
      v22 = 0;
    }
    else if ((objc_msgSend(v21, "isEqualToString:", CFSTR("relative_spl")) & 1) != 0)
    {
      v22 = 1;
    }
    else if (objc_msgSend(v21, "isEqualToString:", CFSTR("absolute_spl")))
    {
      v22 = 2;
    }
    else
    {
      v22 = 0;
    }

  }
  else
  {
    v22 = 0;
  }
  *((_QWORD *)a4 + 1) = v22;

  v29 = *((_QWORD *)a4 + 1);
  switch(v29)
  {
    case 2:
      FloatTypeWith = Phase::ReadFloatTypeWithDefault<double>(a1, v18, CFSTR("Level"), a4 + 2, 85.0, 0.0, 120.0);
      goto LABEL_30;
    case 1:
      FloatTypeWith = Phase::ReadFloatTypeWithDefault<double>(a1, v18, CFSTR("Level"), a4 + 2, 0.0, -200.0, 12.0);
LABEL_30:
      if ((FloatTypeWith & 1) != 0)
        break;
LABEL_36:
      strncpy((char *)(a1 + 8), a3, 0x80uLL);
      goto LABEL_37;
    case 0:
      FloatTypeWith = Phase::ReadFloatTypeWithDefault<double>(a1, v18, CFSTR("Level"), a4 + 2, 1.0, 0.0, 1.0);
      goto LABEL_30;
  }
  if ((Phase::ReadFloatTypeWithDefault<double>(a1, v18, CFSTR("Rate"), a4 + 3, 1.0, 0.25, 4.0) & 1) == 0
    || (Phase::ReadPhaseIdWithDefault(a1, v18, CFSTR("Group"), (_QWORD *)a4 + 4, a6) & 1) == 0
    || (Phase::ReadParamIdx(a1, v18, CFSTR("GainParameterName"), a5, (_BYTE *)a4 + 40, a6) & 1) == 0
    || (Phase::ReadParamIdx(a1, v18, CFSTR("RateParameterName"), a5, (_BYTE *)a4 + 41, a6) & 1) == 0)
  {
    goto LABEL_36;
  }
  v31 = 1;
LABEL_38:

  return v31;
}

void sub_21661EE70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t Phase::ReadEnumWithDefault<PHASECullOption>(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  __CFString *v6;
  NSString *v7;
  uint64_t v8;
  __CFString *v9;

  v5 = a2;
  v6 = CFSTR("CullOption");
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("CullOption"));
  v7 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v9 = objc_retainAutorelease(CFSTR("CullOption"));
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(CFSTR("CullOption"), "UTF8String"), "Field should be a string");
      v8 = 0;
      goto LABEL_7;
    }
    *a3 = GetCullOption(v7);
  }
  else
  {
    *a3 = 0;
  }
  v8 = 1;
LABEL_7:

  return v8;
}

void sub_21661EFA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::AddLeafNodeName(Phase *this, Phase::ActionTreeBuilder *a2, int a3)
{
  char *v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  _DWORD *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;

  if (!a2)
    return 0;
  v6 = (char *)this + 200;
  v7 = *((_QWORD *)this + 25);
  v8 = (char *)*((_QWORD *)this + 24);
  if ((unint64_t)v8 >= v7)
  {
    v10 = (char *)*((_QWORD *)this + 23);
    v11 = (v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
    v12 = v7 - (_QWORD)v10;
    v13 = (uint64_t)(v7 - (_QWORD)v10) >> 2;
    if (v13 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v6, v14);
      v10 = (char *)*((_QWORD *)this + 23);
      v8 = (char *)*((_QWORD *)this + 24);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v9 = v16 + 8;
    while (v8 != v10)
    {
      v18 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v16 - 1) = v18;
      v16 -= 8;
    }
    *((_QWORD *)this + 23) = v16;
    *((_QWORD *)this + 24) = v9;
    *((_QWORD *)this + 25) = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_QWORD *)v8 = a2;
    v9 = v8 + 8;
  }
  v19 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 24) = v9;
  v20 = (char *)*((_QWORD *)this + 27);
  if ((unint64_t)v20 >= v19)
  {
    v22 = (char *)*((_QWORD *)this + 26);
    v23 = (v20 - v22) >> 2;
    if ((unint64_t)(v23 + 1) >> 62)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v24 = v19 - (_QWORD)v22;
    v25 = (uint64_t)(v19 - (_QWORD)v22) >> 1;
    if (v25 <= v23 + 1)
      v25 = v23 + 1;
    if (v24 >= 0x7FFFFFFFFFFFFFFCLL)
      v26 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v26 = v25;
    if (v26)
    {
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 224, v26);
      v22 = (char *)*((_QWORD *)this + 26);
      v20 = (char *)*((_QWORD *)this + 27);
    }
    else
    {
      v27 = 0;
    }
    v28 = &v27[4 * v23];
    v29 = &v27[4 * v26];
    *(_DWORD *)v28 = a3;
    v21 = v28 + 4;
    while (v20 != v22)
    {
      v30 = *((_DWORD *)v20 - 1);
      v20 -= 4;
      *((_DWORD *)v28 - 1) = v30;
      v28 -= 4;
    }
    *((_QWORD *)this + 26) = v28;
    *((_QWORD *)this + 27) = v21;
    *((_QWORD *)this + 28) = v29;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *(_DWORD *)v20 = a3;
    v21 = v20 + 4;
  }
  *((_QWORD *)this + 27) = v21;
  return 1;
}

BOOL Phase::MsgBuffer::WriteMsg(_QWORD *a1, uint64_t a2, int a3, void *__src, size_t __n)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  v6 = a1[1];
  v5 = a1[2];
  v7 = v5 + __n + 8;
  if (v7 >= v6)
  {
    Phase::ParserSetParseError(a2, 1346924644, "", "", "");
  }
  else
  {
    v9 = __n;
    v10 = (_DWORD *)(*a1 + v5);
    *v10 = a3;
    v10[1] = __n;
    v11 = a1[2] + 8;
    a1[2] = v11;
    memcpy((void *)(*a1 + v11), __src, __n);
    a1[2] += v9;
  }
  return v7 < v6;
}

uint64_t Phase::GetChildArray(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  __CFString *v6;
  void *v7;
  uint64_t v8;
  __CFString *v9;
  __CFString *v10;

  v5 = a2;
  v6 = CFSTR("Children");
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("Children"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    v9 = objc_retainAutorelease(CFSTR("Children"));
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)objc_msgSend(CFSTR("Children"), "UTF8String"), "");
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v10 = objc_retainAutorelease(CFSTR("Children"));
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(CFSTR("Children"), "UTF8String"), "Field should be an array");
    goto LABEL_6;
  }
  *a3 = objc_retainAutorelease(v7);
  v8 = 1;
LABEL_7:

  return v8;
}

void sub_21661F34C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::ReadString(uint64_t a1, void *a2, _QWORD *a3, uint64_t a4)
{
  id v7;
  __CFString *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  __CFString *v13;
  __CFString *v14;

  v7 = a2;
  v8 = CFSTR("SubTreeNodeName");
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("SubTreeNodeName"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    v13 = objc_retainAutorelease(CFSTR("SubTreeNodeName"));
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)objc_msgSend(CFSTR("SubTreeNodeName"), "UTF8String"), "");
LABEL_8:
    v12 = 0;
    goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v14 = objc_retainAutorelease(CFSTR("SubTreeNodeName"));
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(CFSTR("SubTreeNodeName"), "UTF8String"), "Field should be a string");
    goto LABEL_8;
  }
  v10 = objc_retainAutorelease(v9);
  *a3 = v10;
  if (a4)
  {
    v11 = v10;
    if ((Phase::AddStringToPool(a1, a4, v10) & 1) == 0)
    {
      strncpy((char *)(a1 + 8), (const char *)objc_msgSend(objc_retainAutorelease(v11), "UTF8String"), 0x80uLL);
      goto LABEL_8;
    }
  }
  v12 = 1;
LABEL_9:

  return v12;
}

void sub_21661F4D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::ReadIntTypeWithDefault<int>(uint64_t a1, void *a2, void *a3, int *a4, int a5, int a6, int a7)
{
  id v13;
  id v14;
  Phase::Logger *v15;
  Phase::Logger *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v14 = a3;
  objc_msgSend(v13, "objectForKeyedSubscript:", v14);
  v15 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (v15)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(objc_retainAutorelease(v14), "UTF8String"), "Field should be a number");
      v21 = 0;
      goto LABEL_13;
    }
    v15 = (Phase::Logger *)-[Phase::Logger longLongValue](v16, "longLongValue");
    a5 = (int)v15;
  }
  *a4 = a5;
  if (a5 < a6 || a5 > a7)
  {
    v17 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15)
                                                                                        + 16)));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = objc_msgSend(objc_retainAutorelease(v14), "UTF8String");
      v19 = *a4;
      v23 = 136316418;
      v24 = "ParserCore.mm";
      v25 = 1024;
      v26 = 549;
      v27 = 2080;
      v28 = v18;
      v29 = 2048;
      v30 = v19;
      v31 = 2048;
      v32 = a6;
      v33 = 2048;
      v34 = a7;
      _os_log_impl(&dword_2164CC000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d WARNING: %s %lld is out of range [%lld, %lld]. Clamping...", (uint8_t *)&v23, 0x3Au);
    }

    v20 = *a4;
    if (*a4 <= a6)
      v20 = a6;
    *a4 = ((a7 - v20) & ((a7 - v20) >> 31)) + v20;
  }
  v21 = 1;
LABEL_13:

  return v21;
}

void sub_21661F6FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t Phase::ReadBoolWithDefault(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  __CFString *v6;
  void *v7;
  char v8;
  uint64_t v9;
  __CFString *v10;

  v5 = a2;
  v6 = CFSTR("Normalize");
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("Normalize"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v10 = objc_retainAutorelease(CFSTR("Normalize"));
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(CFSTR("Normalize"), "UTF8String"), "Field should be a number");
      v9 = 0;
      goto LABEL_7;
    }
    v8 = objc_msgSend(v7, "BOOLValue");
  }
  else
  {
    v8 = 0;
  }
  *a3 = v8;
  v9 = 1;
LABEL_7:

  return v9;
}

void sub_21661F818(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::ReadAVAudioFormat(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  __CFString *v6;
  void *v7;
  uint64_t v8;
  __CFString *v9;
  __CFString *v10;

  v5 = a2;
  v6 = CFSTR("Format");
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("Format"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    v9 = objc_retainAutorelease(CFSTR("Format"));
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)objc_msgSend(CFSTR("Format"), "UTF8String"), "");
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v10 = objc_retainAutorelease(CFSTR("Format"));
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(CFSTR("Format"), "UTF8String"), "Field should be AVAudioFormat");
    goto LABEL_6;
  }
  *a3 = objc_retainAutorelease(v7);
  v8 = 1;
LABEL_7:

  return v8;
}

void sub_21661F958(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::ReadEnumWithDefault<PHASEVoiceStealingType>(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  __CFString *v6;
  NSString *v7;
  uint64_t v8;
  __CFString *v9;

  v5 = a2;
  v6 = CFSTR("ProcedureVoiceStealingType");
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("ProcedureVoiceStealingType"));
  v7 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v9 = objc_retainAutorelease(CFSTR("ProcedureVoiceStealingType"));
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(CFSTR("ProcedureVoiceStealingType"), "UTF8String"), "Field should be a string");
      v8 = 0;
      goto LABEL_7;
    }
    *a3 = GetVoiceStealingType(v7);
  }
  else
  {
    *a3 = 0;
  }
  v8 = 1;
LABEL_7:

  return v8;
}

void sub_21661FA64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::ReadEnumWithDefault<Phase::ProcedureMsg::Type>(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  __CFString *v6;
  NSString *v7;
  uint64_t v8;
  __CFString *v9;

  v5 = a2;
  v6 = CFSTR("ProcedureType");
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("ProcedureType"));
  v7 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v9 = objc_retainAutorelease(CFSTR("ProcedureType"));
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)objc_msgSend(CFSTR("ProcedureType"), "UTF8String"), "Field should be a string");
      v8 = 0;
      goto LABEL_7;
    }
    *a3 = GetProcedureType(v7);
  }
  else
  {
    *a3 = 0;
  }
  v8 = 1;
LABEL_7:

  return v8;
}

void sub_21661FB70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::ParseWaterProcedureParams(uint64_t a1, void *a2, const char *a3, uint64_t a4, Phase *a5, uint64_t a6)
{
  id v11;
  uint64_t v12;

  v11 = a2;
  if ((Phase::ReadFloatTypeWithDefault<double>(a1, v11, CFSTR("FallRate"), (double *)a4, 1000.0, 0.1, 48000.0) & 1) != 0
    && Phase::ReadFloatTypeWithDefault<double>(a1, v11, CFSTR("AverageDropDiameter"), (double *)(a4 + 8), 1.0, 0.1, 5.0)&& Phase::ReadFloatTypeWithDefault<double>(a1, v11, CFSTR("MaxDropDiameter"), (double *)(a4 + 16), 5.0, 5.0, 20.0)&& Phase::ReadFloatTypeWithDefault<double>(a1, v11, CFSTR("ImpulseShape"),
                       (double *)(a4 + 24),
                       1.0,
                       0.1,
                       10.0)
    && Phase::ReadFloatTypeWithDefault<double>(a1, v11, CFSTR("ImpulseGainExponent"), (double *)(a4 + 32), 4.0, 4.0, 7.0)&& Phase::ReadFloatTypeWithDefault<double>(a1, v11, CFSTR("ImpulseGain"), (double *)(a4 + 40), 1.0, 0.0, 1.0)&& Phase::ReadFloatTypeWithDefault<double>(a1, v11, CFSTR("ChirpRiseRate"),
                       (double *)(a4 + 48),
                       0.1,
                       0.01,
                       10.0)
    && Phase::ReadFloatTypeWithDefault<double>(a1, v11, CFSTR("BaseFrequencyMultiplier"), (double *)(a4 + 56), 3.0, 0.1, 10.0)&& Phase::ReadFloatTypeWithDefault<double>(a1, v11, CFSTR("BubbleGain"), (double *)(a4 + 64), 1.0, 0.0, 1.0)&& Phase::ReadParamIdx(a1, v11, CFSTR("FallRateParameterName"), a5, (_BYTE *)(a4 + 72), a6)&& Phase::ReadParamIdx(a1, v11, CFSTR("AverageDropDiameterParameterName"), a5, (_BYTE *)(a4 + 73), a6)&& Phase::ReadParamIdx(a1, v11, CFSTR("MaxDropDiameterParameterName"), a5, (_BYTE *)(a4 + 74), a6)&& Phase::ReadParamIdx(a1, v11, CFSTR("ImpulseShapeParameterName"), a5, (_BYTE *)(a4 + 75), a6)
    && Phase::ReadParamIdx(a1, v11, CFSTR("ImpulseGainExponentParameterName"), a5, (_BYTE *)(a4 + 76), a6)
    && Phase::ReadParamIdx(a1, v11, CFSTR("ImpulseGainParameterName"), a5, (_BYTE *)(a4 + 77), a6)
    && Phase::ReadParamIdx(a1, v11, CFSTR("ChirpRiseRateParameterName"), a5, (_BYTE *)(a4 + 78), a6)
    && Phase::ReadParamIdx(a1, v11, CFSTR("BaseFrequencyMultiplierParameterName"), a5, (_BYTE *)(a4 + 79), a6)&& (Phase::ReadParamIdx(a1, v11, CFSTR("BubbleGainParameterName"), a5, (_BYTE *)(a4 + 80), a6) & 1) != 0)
  {
    v12 = 1;
  }
  else
  {
    strncpy((char *)(a1 + 8), a3, 0x80uLL);
    v12 = 0;
  }

  return v12;
}

void sub_21661FEC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::ActionTreeBuilder::~ActionTreeBuilder(Phase::ActionTreeBuilder *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = (void *)*((_QWORD *)this + 47);
  if (v2)
  {
    *((_QWORD *)this + 48) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 44);
  if (v3)
  {
    *((_QWORD *)this + 45) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 41);
  if (v4)
  {
    *((_QWORD *)this + 42) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 38);
  if (v5)
  {
    *((_QWORD *)this + 39) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 35);
  if (v6)
  {
    *((_QWORD *)this + 36) = v6;
    operator delete(v6);
  }
  v7 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v7)
    MEMORY[0x2199F9D4C](v7, 0x1000C8077774924);
  v8 = (void *)*((_QWORD *)this + 29);
  if (v8)
  {
    *((_QWORD *)this + 30) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 26);
  if (v9)
  {
    *((_QWORD *)this + 27) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 23);
  if (v10)
  {
    *((_QWORD *)this + 24) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 20);
  if (v11)
  {
    *((_QWORD *)this + 21) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 17);
  if (v12)
  {
    *((_QWORD *)this + 18) = v12;
    operator delete(v12);
  }
}

void std::default_delete<Phase::DataBundle>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    v3 = a2[8];
    a2[8] = 0;
    if (v3)
      MEMORY[0x2199F9D4C](v3, 0x1000C80D9B47DDELL);
    v4 = a2[6];
    a2[6] = 0;
    if (v4)
      MEMORY[0x2199F9D4C](v4, 0x1000C80281E3F58);
    v5 = a2[4];
    a2[4] = 0;
    if (v5)
      MEMORY[0x2199F9D4C](v5, 0x1000C8039DDB5B0);
    v6 = a2[2];
    a2[2] = 0;
    if (v6)
      std::default_delete<Phase::ActionTree []>::operator()[abi:ne180100]<Phase::ActionTree>((uint64_t)(a2 + 2), v6);
    JUMPOUT(0x2199F9D70);
  }
}

void std::default_delete<Phase::ActionTree []>::operator()[abi:ne180100]<Phase::ActionTree>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v2 = *(_QWORD *)(a2 - 8);
    if (v2)
    {
      v3 = 120 * v2;
      v4 = a2 - 120;
      do
      {
        Phase::ActionTree::~ActionTree((Phase::ActionTree *)(v4 + v3));
        v3 -= 120;
      }
      while (v3);
    }
    JUMPOUT(0x2199F9D4CLL);
  }
}

void Phase::ActionTree::~ActionTree(Phase::ActionTree *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    MEMORY[0x2199F9D4C](v2, 0x1000C809937E4EELL);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    MEMORY[0x2199F9D4C](v3, 0x1000C8077774924);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    MEMORY[0x2199F9D4C](v4, 0x1000C80D9B47DDELL);
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    MEMORY[0x2199F9D4C](v5, 0x1000C8052888210);
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    MEMORY[0x2199F9D4C](v6, 0x1000C8000313F17);
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
    MEMORY[0x2199F9D4C](v7, 0x1000C8000313F17);
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    MEMORY[0x2199F9D4C](v8, 0x1000C8000313F17);
}

Phase::ActionTree *std::unique_ptr<Phase::ActionTree>::reset[abi:ne180100](Phase::ActionTree **a1, Phase::ActionTree *a2)
{
  Phase::ActionTree *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::ActionTree::~ActionTree(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void sub_216620260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21662032C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2166203F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21662044C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216620514(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216620674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166206CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166207FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216620CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::deque<int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::deque<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a16);
  std::deque<int>::~deque[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_216620E50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216620EA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216621084(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166210DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166211D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166212D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21662141C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_216621460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21662155C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216622DE0()
{
  __cxa_end_catch();
  JUMPOUT(0x216622C78);
}

void sub_216622DF4()
{
  void *v0;

  JUMPOUT(0x216622FF8);
}

void sub_216622E00()
{
  JUMPOUT(0x216622E0CLL);
}

void sub_216622E60()
{
  void *v0;

  __cxa_end_catch();

  JUMPOUT(0x216622ED0);
}

void sub_216622E78()
{
  void *v0;

  JUMPOUT(0x216622E88);
}

void sub_216622E84()
{
  void *v0;

  objc_sync_exit(v0);

  JUMPOUT(0x216623028);
}

void sub_216622E9C()
{
  JUMPOUT(0x216623020);
}

void sub_216622EA8()
{
  id *v0;

  operator delete(v0);
  JUMPOUT(0x216622F20);
}

void sub_216622ED8()
{
  uint64_t v0;

  if (*(char *)(v0 - 169) < 0)
    JUMPOUT(0x216622FC0);
  JUMPOUT(0x216622FE0);
}

void sub_216622EF8()
{
  JUMPOUT(0x216622FA8);
}

void sub_216622F10()
{
  JUMPOUT(0x216622F1CLL);
}

void sub_216622F70()
{
  void *v0;

  __cxa_end_catch();

  JUMPOUT(0x216622FDCLL);
}

void sub_216622F88(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_216622F98()
{
  JUMPOUT(0x216622FE0);
}

void sub_216622FC8()
{
  JUMPOUT(0x216623028);
}

void sub_21662334C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, Phase::Logger *a14, __int128 buf, __int128 a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  void *v22;
  void *v23;
  Phase::Logger *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;

  if (a2 == 1)
  {
    v22 = __cxa_begin_catch(a1);
    v23 = (void *)MEMORY[0x24BDD17C8];
    (*(void (**)(void *))(*(_QWORD *)v22 + 16))(v22);
    objc_msgSend(v23, "stringWithFormat:", CFSTR("Error Creating Sound Asset: %s"));
    v24 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    v25 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v24)
                                                                                        + 816)));
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = -[Phase::Logger UTF8String](objc_retainAutorelease(v24), "UTF8String");
      LODWORD(buf) = 136315906;
      *(_QWORD *)((char *)&buf + 4) = "PHASEAssetRegistry.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 883;
      WORD1(a16) = 2048;
      *(_QWORD *)((char *)&a16 + 4) = a11;
      WORD6(a16) = 2080;
      *(_QWORD *)((char *)&a16 + 14) = v26;
      _os_log_impl(&dword_2164CC000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", (uint8_t *)&buf, 0x26u);
    }

    if (v20)
    {
      a13 = *MEMORY[0x24BDD0FC8];
      a14 = v24;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &a14, &a13, 1);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920805, v27);
      *v20 = (id)objc_claimAutoreleasedReturnValue();

    }
    __cxa_end_catch();
    JUMPOUT(0x21662327CLL);
  }

  _Unwind_Resume(a1);
}

void sub_216623650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216623744(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216623838(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_2166239D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

double PHASEGetPropertyBounded<double>(void *a1, void *a2, double a3, double a4, double a5)
{
  id v9;
  Phase::Logger *v10;
  Phase::Logger *v11;
  NSObject *v13;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v9 = a1;
  v10 = a2;
  v11 = v10;
  if (a3 < a4 || a3 > a5)
  {
    v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10)
                                                                                        + 432)));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      v15 = 136316674;
      v16 = "PHASEGetProperty.h";
      v17 = 1024;
      v18 = 28;
      v19 = 2080;
      v20 = objc_msgSend(objc_retainAutorelease(v9), "UTF8String");
      v21 = 2080;
      v22 = -[Phase::Logger UTF8String](objc_retainAutorelease(v11), "UTF8String");
      v23 = 2048;
      v24 = a3;
      v25 = 2048;
      v26 = a4;
      v27 = 2048;
      v28 = a5;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s:%s Value is out of bounds. Clamping %f to range [%f, %f]", (uint8_t *)&v15, 0x44u);
    }

    a3 = fmin(fmax(a3, a4), a5);
  }

  return a3;
}

void sub_216623B90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216623C70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216623D58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216623E3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216624190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_2166244B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_2166245AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_2166246B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_2166247AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216624B90(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, Phase::Logger *a16, __int128 buf, __int128 a18)
{
  void *v18;
  void *v19;
  _QWORD *v20;
  void *v22;
  void *v23;
  Phase::Logger *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;

  if (a2 == 1)
  {
    v22 = __cxa_begin_catch(a1);
    v23 = (void *)MEMORY[0x24BDD17C8];
    (*(void (**)(void *))(*(_QWORD *)v22 + 16))(v22);
    objc_msgSend(v23, "stringWithFormat:", CFSTR("Error Creating Sound Asset: %s"));
    v24 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    v25 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v24)
                                                                                        + 816)));
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = -[Phase::Logger UTF8String](objc_retainAutorelease(v24), "UTF8String");
      LODWORD(buf) = 136315906;
      *(_QWORD *)((char *)&buf + 4) = "PHASEAssetRegistry.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1298;
      WORD1(a18) = 2048;
      *(_QWORD *)((char *)&a18 + 4) = a10;
      WORD6(a18) = 2080;
      *(_QWORD *)((char *)&a18 + 14) = v26;
      _os_log_impl(&dword_2164CC000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", (uint8_t *)&buf, 0x26u);
    }

    if (v20)
    {
      a15 = *MEMORY[0x24BDD0FC8];
      a16 = v24;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &a16, &a15, 1);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920805, v27);
      *v20 = (id)objc_claimAutoreleasedReturnValue();

    }
    __cxa_end_catch();
    JUMPOUT(0x216624A54);
  }

  _Unwind_Resume(a1);
}

void sub_216624F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216625244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a5);

  objc_sync_exit(v9);
  MEMORY[0x2199F9D70](v8, 0x1000C40D9B47DDELL);
  MEMORY[0x2199F9D4C](a3, 0x1000C80D9B47DDELL);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_216625644(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  Phase::ActionTree *v12;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v12 = va_arg(va1, Phase::ActionTree *);

  std::unique_ptr<Phase::ActionTree>::reset[abi:ne180100]((Phase::ActionTree **)va, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_21662572C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216625870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_216625970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216625A20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_216625D80(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216625BE4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::AssetUnloader>(Phase::Logger *a1, int a2)
{
  uint64_t v3;
  Phase::Logger *v4;
  uint64_t (**v5)(uint64_t, _QWORD, _QWORD, _QWORD, void *);
  NSObject *v7;
  std::logic_error *exception;
  NSObject *v9;
  std::string *v10;
  std::logic_error *v11;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 7) - v3) >> 5))
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 112;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(_QWORD *)v4)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 121;
      v17 = 1024;
      v18 = a2;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  v5 = std::any_cast[abi:ne180100]<Phase::Controller::AssetUnloader * const>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v4);
  if (!v5)
    std::__throw_bad_any_cast[abi:ne180100]();
  return (uint64_t)*v5;
}

void sub_216626030(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_216626120(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_216626140(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_216626200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_216626374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_21662672C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, _QWORD *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  void **v22;

  v22 = a20;
  a20 = 0;
  if (v22)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](a9, v22);

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (a14)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920806, 0);
      *a14 = (id)objc_claimAutoreleasedReturnValue();
    }
    __cxa_end_catch();
    JUMPOUT(0x2166266C4);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_2166267F0()
{
  __cxa_end_catch();
  JUMPOUT(0x216626768);
}

void sub_216626990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216626B58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216627004()
{
  __cxa_end_catch();
  JUMPOUT(0x216626F08);
}

void sub_2166273B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_216627800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216627938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2166279EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_216627AD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_216627C4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216627D28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216627FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_216629BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_21662A2D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_21662AAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_21662B008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_21662B67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_21662BE78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_21662CF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,void *a30,uint64_t a31,void *a32,void *a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void *a42)
{
  void *v42;
  void *v43;

  _Unwind_Resume(a1);
}

uint64_t std::deque<int>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::deque<int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::deque<int>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::deque<int>::~deque[abi:ne180100]((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void std::default_delete<Phase::StringPool>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    if (v3)
      MEMORY[0x2199F9D4C](v3, 0x1000C8077774924);
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v4)
      MEMORY[0x2199F9D4C](v4, 0x1050C80C058ABA2);
    JUMPOUT(0x2199F9D70);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>>>::__erase_unique<unsigned long long>(_QWORD *a1, unint64_t a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(a1, a2);
  if (result)
    return (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>>>::erase(a1, result);
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>>>::erase(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8x8_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = (int8x8_t)a1[1];
  v5 = *a2;
  v4 = a2[1];
  v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v7 = *(uint64_t **)(*a1 + 8 * v4);
  do
  {
    v8 = v7;
    v7 = (uint64_t *)*v7;
  }
  while (v7 != a2);
  if (v8 != a1 + 2)
  {
    v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    v10 = *a2;
    if (v9 == v4)
    {
LABEL_20:
      if (!v10)
        goto LABEL_27;
      goto LABEL_21;
    }
  }
  if (!v5)
    goto LABEL_19;
  v11 = *(_QWORD *)(v5 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v11 >= *(_QWORD *)&v3)
      v11 %= *(_QWORD *)&v3;
  }
  else
  {
    v11 &= *(_QWORD *)&v3 - 1;
  }
  v10 = *a2;
  if (v11 != v4)
  {
LABEL_19:
    *(_QWORD *)(*a1 + 8 * v4) = 0;
    v10 = *a2;
    goto LABEL_20;
  }
LABEL_21:
  v12 = *(_QWORD *)(v10 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v12 >= *(_QWORD *)&v3)
      v12 %= *(_QWORD *)&v3;
  }
  else
  {
    v12 &= *(_QWORD *)&v3 - 1;
  }
  if (v12 != v4)
  {
    *(_QWORD *)(*a1 + 8 * v12) = v8;
    v10 = *a2;
  }
LABEL_27:
  *v8 = v10;
  *a2 = 0;
  --a1[3];

  operator delete(a2);
  return v5;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::unique_ptr<Phase::StringPool>>>(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  void *v37;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return 0;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = a1 + 2;
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v5;
  v14 = *a3;
  v15 = a3[1];
  a3[1] = 0;
  v13[2] = v14;
  v13[3] = v15;
  v16 = (float)(unint64_t)(a1[3] + 1);
  v17 = *((float *)a1 + 8);
  if (v7 && (float)(v17 * (float)v7) >= v16)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v18 = 1;
  if (v7 >= 3)
    v18 = (v7 & (v7 - 1)) != 0;
  v19 = v18 | (2 * v7);
  v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20)
    prime = (int8x8_t)v20;
  else
    prime = (int8x8_t)v19;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = a1[1];
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
    {
      v28 = std::__next_prime(v28);
    }
    else
    {
      v30 = 1 << -(char)__clz(v28 - 1);
      if (v28 >= 2)
        v28 = v30;
    }
    if (*(_QWORD *)&prime <= v28)
      prime = (int8x8_t)v28;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v37 = (void *)*a1;
      *a1 = 0;
      if (v37)
        operator delete(v37);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v22 = operator new(8 * *(_QWORD *)&prime);
  v23 = (void *)*a1;
  *a1 = (uint64_t)v22;
  if (v23)
    operator delete(v23);
  v24 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(_QWORD *)(*a1 + 8 * v24++) = 0;
  while (*(_QWORD *)&prime != v24);
  v25 = (_QWORD *)*v12;
  if (*v12)
  {
    v26 = v25[1];
    v27 = (uint8x8_t)vcnt_s8(prime);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      if (v26 >= *(_QWORD *)&prime)
        v26 %= *(_QWORD *)&prime;
    }
    else
    {
      v26 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*a1 + 8 * v26) = v12;
    v31 = (_QWORD *)*v25;
    if (*v25)
    {
      do
      {
        v32 = v31[1];
        if (v27.u32[0] > 1uLL)
        {
          if (v32 >= *(_QWORD *)&prime)
            v32 %= *(_QWORD *)&prime;
        }
        else
        {
          v32 &= *(_QWORD *)&prime - 1;
        }
        if (v32 != v26)
        {
          if (!*(_QWORD *)(*a1 + 8 * v32))
          {
            *(_QWORD *)(*a1 + 8 * v32) = v25;
            goto LABEL_56;
          }
          *v25 = *v31;
          *v31 = **(_QWORD **)(*a1 + 8 * v32);
          **(_QWORD **)(*a1 + 8 * v32) = v31;
          v31 = v25;
        }
        v32 = v26;
LABEL_56:
        v25 = v31;
        v31 = (_QWORD *)*v31;
        v26 = v32;
      }
      while (v31);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v33 = *a1;
  v34 = *(_QWORD **)(*a1 + 8 * v5);
  if (v34)
  {
    *v13 = *v34;
LABEL_72:
    *v34 = v13;
    goto LABEL_73;
  }
  *v13 = *v12;
  *v12 = v13;
  *(_QWORD *)(v33 + 8 * v5) = v12;
  if (*v13)
  {
    v35 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v35 >= v7)
        v35 %= v7;
    }
    else
    {
      v35 &= v7 - 1;
    }
    v34 = (_QWORD *)(*a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return 1;
}

void sub_21662DAA8(_Unwind_Exception *a1)
{
  char *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,void *>>>::operator()[abi:ne180100](char a1, char *__p)
{
  char *v3;
  uint64_t v4;

  if (a1)
  {
    v3 = __p + 24;
    v4 = *((_QWORD *)__p + 3);
    *((_QWORD *)__p + 3) = 0;
    if (v4)
      std::default_delete<Phase::StringPool>::operator()[abi:ne180100]((uint64_t)v3, v4);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,PHASEDataBundleAsset * {__strong}&>(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == a2)
        {
          if (i[2] == a2)
            return 0;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = a2;
  v14[2] = a3;
  v14[3] = a4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= a2)
        v4 = a2 % v9;
      else
        v4 = a2;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v14 = *v22;
LABEL_38:
    *v22 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    v23 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void sub_21662DD20(_Unwind_Exception *a1)
{
  id *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>>>::__erase_unique<unsigned long long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v4;
  unint64_t v5;
  char **v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v5 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v6 = *(char ***)(*a1 + 8 * v5);
  if (!v6)
    return;
  v7 = *v6;
  if (!*v6)
    return;
  v8 = *(_QWORD *)&v2 - 1;
  while (1)
  {
    v9 = *((_QWORD *)v7 + 1);
    if (v9 == a2)
      break;
    if (v4.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v2)
        v9 %= *(_QWORD *)&v2;
    }
    else
    {
      v9 &= v8;
    }
    if (v9 != v5)
      return;
LABEL_17:
    v7 = *(char **)v7;
    if (!v7)
      return;
  }
  if (*((_QWORD *)v7 + 2) != a2)
    goto LABEL_17;
  v10 = *(char **)v7;
  if (v4.u32[0] > 1uLL)
  {
    if (v9 >= *(_QWORD *)&v2)
      v9 %= *(_QWORD *)&v2;
  }
  else
  {
    v9 &= v8;
  }
  v11 = *(char **)(*a1 + 8 * v9);
  do
  {
    v12 = v11;
    v11 = *(char **)v11;
  }
  while (v11 != v7);
  if (v12 == a1 + 2)
    goto LABEL_36;
  v13 = v12[1];
  if (v4.u32[0] > 1uLL)
  {
    if (v13 >= *(_QWORD *)&v2)
      v13 %= *(_QWORD *)&v2;
  }
  else
  {
    v13 &= v8;
  }
  if (v13 == v9)
  {
LABEL_38:
    if (v10)
    {
      v14 = *((_QWORD *)v10 + 1);
      goto LABEL_40;
    }
  }
  else
  {
LABEL_36:
    if (!v10)
      goto LABEL_37;
    v14 = *((_QWORD *)v10 + 1);
    if (v4.u32[0] > 1uLL)
    {
      v15 = *((_QWORD *)v10 + 1);
      if (v14 >= *(_QWORD *)&v2)
        v15 = v14 % *(_QWORD *)&v2;
    }
    else
    {
      v15 = v14 & v8;
    }
    if (v15 != v9)
    {
LABEL_37:
      *(_QWORD *)(*a1 + 8 * v9) = 0;
      v10 = *(char **)v7;
      goto LABEL_38;
    }
LABEL_40:
    if (v4.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v2)
        v14 %= *(_QWORD *)&v2;
    }
    else
    {
      v14 &= v8;
    }
    if (v14 != v9)
    {
      *(_QWORD *)(*a1 + 8 * v14) = v12;
      v10 = *(char **)v7;
    }
  }
  *v12 = v10;
  *(_QWORD *)v7 = 0;
  --a1[3];
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,void *>>>::operator()[abi:ne180100](1, v7);
}

uint64_t *std::unique_ptr<Phase::Controller::ResidentSoundAssetInfo>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  void *v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *(void **)(v1 + 48);
    *(_QWORD *)(v1 + 48) = 0;

    JUMPOUT(0x2199F9D70);
  }
  return result;
}

Phase::Controller::StreamedSoundAssetInfo *std::unique_ptr<Phase::Controller::StreamedSoundAssetInfo>::reset[abi:ne180100](Phase::Controller::StreamedSoundAssetInfo **a1)
{
  Phase::Controller::StreamedSoundAssetInfo *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    Phase::Controller::StreamedSoundAssetInfo::~StreamedSoundAssetInfo(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::GlobalMetaParameterManager,BOOL,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5)
{
  uint64_t v10;
  _DWORD *v11;
  NSObject *v12;
  uint64_t result;
  NSObject *v14;
  std::logic_error *exception;
  Phase::Logger *InstancePtr;
  NSObject *v17;
  std::runtime_error *v18;
  BOOL v19;
  unint64_t v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*(int *)(a1 + 16) <= 0)
  {
    v14 = objc_retainAutorelease(**(id **)(a1 + 24));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v22 = "Commandable.hpp";
      v23 = 1024;
      v24 = 132;
      _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.");
  }
  v10 = **(_QWORD **)(a1 + 8);
  v20 = 0;
  v19 = 1;
  v11 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v10, 64, &v20, &v19);
  if (!v11)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v17 = objc_retainAutorelease(**(id **)(v10 + 48));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v22 = "CommandQueue.hpp";
      v23 = 1024;
      v24 = 100;
      _os_log_impl(&dword_2164CC000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v18, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v19)
  {
    v12 = objc_retainAutorelease(**(id **)(v10 + 48));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v22 = "CommandQueue.hpp";
      v23 = 1024;
      v24 = 89;
      v25 = 2048;
      v26 = v20;
      v27 = 2048;
      v28 = 64;
      _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(_QWORD *)v11 = &off_24D57F1C8;
  *((_QWORD *)v11 + 1) = a1;
  *((_QWORD *)v11 + 2) = Phase::GlobalMetaParameterManager::SetGlobalMetaParameter;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = a2;
  v11[10] = a3;
  *((_QWORD *)v11 + 6) = a4;
  *((double *)v11 + 7) = a5;
  result = Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v10, 64);
  atomic_store(0, (unsigned __int8 *)(v10 + 40));
  return result;
}

void sub_21662E24C(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x21662E0C8);
  }
  _Unwind_Resume(exception_object);
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::GlobalMetaParameterManager,BOOL,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double>(int,BOOL (Phase::GlobalMetaParameterManager::*)(unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double),unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double)::{lambda(void)#1},void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::GlobalMetaParameterManager,BOOL,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double>(int,BOOL (Phase::GlobalMetaParameterManager::*)(unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double),unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double)::{lambda(void)#1},void>::operator()(uint64_t a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD, _QWORD, _QWORD, double);
  uint64_t v2;
  _QWORD *v3;

  v1 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, double))(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 8) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, double))(*v3 + v1);
  return v1(v3, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), *(_QWORD *)(a1 + 48), *(double *)(a1 + 56));
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Controller::AssetUnloader * const>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::AssetUnloader *>::__id);
    else
      return 0;
  }
  return result;
}

void sub_21662E3F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21662E4A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21662E610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21662E6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21662E744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21662E848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21662EA0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21662EAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21662EB24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21662EBF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21662EC94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21662ED4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21662EDEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21662EF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21662EFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21662F080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21662F0CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21662F1B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_21662F218(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21662F384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21662F3E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21662F8B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_21662F9F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216630018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_2166303B0(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x2166302C4);
  }
  _Unwind_Resume(exception_object);
}

void sub_216630688(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x2166305A0);
  }
  _Unwind_Resume(exception_object);
}

void sub_2166308B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166309A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void GetDefaultClientEngineMode(void)
{
  unsigned __int8 v0;
  Phase::Logger *v1;

  if ((v0 & 1) == 0)
  {
    if ((_DWORD)v1)
    {
      GetDefaultClientEngineMode(void)::$_0::operator()(v1);
    }
  }
}

void sub_216630A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_216630B4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216630C04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216630F38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21663110C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2166311B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216631270(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2166314B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

PHASEEngineImpl *std::unique_ptr<PHASEEngineImpl>::reset[abi:ne180100](PHASEEngineImpl **a1, PHASEEngineImpl *a2)
{
  PHASEEngineImpl *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    PHASEEngineImpl::~PHASEEngineImpl(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void sub_21663159C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;

  objc_sync_exit(v9);

  a9.receiver = v9;
  a9.super_class = (Class)PHASEEngine;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_2166316FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_216631804(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_216631910(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_216631B3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216631E3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_216632328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_216632494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216632EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{

  if (__p)
    operator delete(__p);
  if (a37)
    operator delete(a37);
  if (a40)
    operator delete(a40);
  if (a43)
    operator delete(a43);
  if (a46)
    operator delete(a46);

  _Unwind_Resume(a1);
}

void Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,float const*,float *,&float Phase::Identity<float>,&float Phase::Identity<float>>(float *a1, float *a2, uint64_t a3, float *a4, float *a5, uint64_t a6)
{
  uint64_t v9;
  float *i;
  float v11;
  float v12;
  float *j;
  float v14;
  float v15;
  float *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  float v24;
  float v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  float *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  float *v41;
  int v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  float *v52;
  float v53;
  float *v54;
  float v55;
  float *v56;
  unint64_t v57;
  float v58;
  float v59;
  float *v60;
  float v61;
  float v62;
  float *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  float *v69;
  int v70;
  double v71;
  float *v72;
  float v73;
  float v74;
  uint64_t v75;
  float *v77;
  float *v78;
  float *v79;
  void *v80;
  char *v81;
  char *v82;
  void *__p;
  float *v84;
  float *v85;
  void *v86[3];
  void *v87[4];

  v9 = (char *)a2 - (char *)a1;
  if (a2 != a1)
  {
    for (i = a1 + 1; i != a2; ++i)
    {
      v12 = *(i - 1);
      v11 = *i;
      if (v11 < v12)
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 262, "std::is_sorted(inFrequenciesFirst, inFrequenciesLast)");
    }
  }
  if (a4 != a5)
  {
    for (j = a4 + 1; j != a5; ++j)
    {
      v15 = *(j - 1);
      v14 = *j;
      if (v14 < v15)
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 263, "std::is_sorted(inOutputFrequenciesFirst, inOutputFrequenciesLast)");
    }
  }
  Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<float *>,float>(a1, a2, (float **)v87, 22000.0);
  Phase::GetBandsFromCenterFrequencies<float const*,float>(a4, a5, (float **)v86, 22000.0);
  __p = 0;
  v84 = 0;
  v85 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v77 = 0;
  v79 = 0;
  if ((char *)a5 - (char *)a4 > 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = a5 - a4;
    v21 = v9 >> 2;
    v22 = (v9 >> 2) - 1;
    if (v20 <= 1)
      v20 = 1;
    v75 = v20;
    do
    {
      v23 = (float *)((char *)v86[0] + 8 * v19);
      v24 = *v23;
      v25 = v23[1];
      v84 = (float *)__p;
      v81 = v17;
      v78 = v16;
      if (v18 < v21)
      {
        v26 = (float *)((char *)v87[0] + 8 * v18);
        v27 = *v26;
        v28 = v26[1];
        if (v25 < v28)
          v28 = v25;
        if (v27 >= v24)
          v29 = *v26;
        else
          v29 = v24;
        v30 = fmaxf(v28 - v29, 0.0);
        v31 = v25;
        v32 = v18;
        if (v30 == 0.0)
        {
LABEL_62:
          v18 -= v27 != v31;
        }
        else
        {
          while (1)
          {
            v33 = v84;
            if (v84 >= v85)
            {
              v35 = (float *)__p;
              v36 = ((char *)v84 - (_BYTE *)__p) >> 2;
              v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v38 = (char *)v85 - (_BYTE *)__p;
              if (((char *)v85 - (_BYTE *)__p) >> 1 > v37)
                v37 = v38 >> 1;
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
                v39 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v39 = v37;
              if (v39)
              {
                v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v85, v39);
                v35 = (float *)__p;
                v33 = v84;
              }
              else
              {
                v40 = 0;
              }
              v41 = (float *)&v40[4 * v36];
              *v41 = v30;
              v34 = v41 + 1;
              while (v33 != v35)
              {
                v42 = *((_DWORD *)v33-- - 1);
                *((_DWORD *)v41-- - 1) = v42;
              }
              __p = v41;
              v84 = v34;
              v85 = (float *)&v40[4 * v39];
              if (v35)
                operator delete(v35);
            }
            else
            {
              *v84 = v30;
              v34 = v33 + 1;
            }
            v84 = v34;
            v43 = v81;
            if (v81 >= v82)
            {
              v44 = (char *)v80;
              v45 = (v81 - (_BYTE *)v80) >> 3;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 61)
                std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
              v47 = v82 - (_BYTE *)v80;
              if ((v82 - (_BYTE *)v80) >> 2 > v46)
                v46 = v47 >> 2;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
                v48 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v82, v48);
                v44 = (char *)v80;
                v43 = v81;
              }
              else
              {
                v49 = 0;
              }
              v50 = (uint64_t *)&v49[8 * v45];
              *v50 = v18;
              v17 = (char *)(v50 + 1);
              while (v43 != v44)
              {
                v51 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *--v50 = v51;
              }
              v80 = v50;
              v81 = v17;
              v82 = &v49[8 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_QWORD *)v81 = v18;
              v17 = v43 + 8;
            }
            v81 = v17;
            if (v18 == v22)
              v32 = v18;
            if (++v18 == v21)
              break;
            v52 = (float *)((char *)v87[0] + 8 * v18);
            v27 = *v52;
            v53 = v52[1];
            v54 = (float *)((char *)v86[0] + 8 * v19);
            v55 = *v54;
            v31 = v54[1];
            if (v31 < v53)
              v53 = v54[1];
            if (v27 >= v55)
              v55 = v27;
            v30 = fmaxf(v53 - v55, 0.0);
            if (v30 == 0.0)
              goto LABEL_62;
          }
          v18 = v32;
        }
      }
      v56 = v78;
      if (v17 == v80)
      {
        v59 = 0.0;
      }
      else
      {
        v57 = 0;
        v58 = v25 - v24;
        v59 = 0.0;
        v60 = v78;
        v17 = (char *)v80;
        do
        {
          v61 = *((float *)__p + v57) / v58;
          v62 = v61 * *(float *)(a3 + 4 * *(_QWORD *)&v17[8 * v57]);
          if (v60 >= v79)
          {
            v63 = v77;
            v64 = v60 - v77;
            v65 = v64 + 1;
            if ((unint64_t)(v64 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v66 = (char *)v79 - (char *)v77;
            if (((char *)v79 - (char *)v77) >> 1 > v65)
              v65 = v66 >> 1;
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
              v67 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v67 = v65;
            if (v67)
            {
              v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v79, v67);
              v63 = v77;
              v60 = v78;
            }
            else
            {
              v68 = 0;
            }
            v69 = (float *)&v68[4 * v64];
            *v69 = v62;
            v56 = v69 + 1;
            while (v60 != v63)
            {
              v70 = *((_DWORD *)v60-- - 1);
              *((_DWORD *)v69-- - 1) = v70;
            }
            v77 = v69;
            v79 = (float *)&v68[4 * v67];
            if (v63)
              operator delete(v63);
          }
          else
          {
            *v60 = v62;
            v56 = v60 + 1;
          }
          v78 = v56;
          v59 = v59 + v61;
          ++v57;
          v17 = (char *)v80;
          v60 = v56;
        }
        while (v57 < (v81 - (_BYTE *)v80) >> 3);
      }
      v16 = v77;
      v71 = 0.0;
      if (v77 != v56)
      {
        v72 = v77;
        do
        {
          v73 = *v72++;
          v71 = v71 + v73;
        }
        while (v72 != v56);
      }
      v74 = v71;
      v22 = (v9 >> 2) - 1;
      *(float *)(a6 + 4 * v19++) = v74 / v59;
    }
    while (v19 != v75);
    if (v77)
    {
      operator delete(v77);
      v17 = (char *)v80;
    }
    if (v17)
    {
      v81 = v17;
      operator delete(v17);
    }
  }
  if (__p)
  {
    v84 = (float *)__p;
    operator delete(__p);
  }
  if (v86[0])
  {
    v86[1] = v86[0];
    operator delete(v86[0]);
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
}

void sub_216633500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2166339BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *GetReverbPresetName(uint64_t a1)
{
  const __CFString *result;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  int v37;
  const char *v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  result = 0;
  v41 = *MEMORY[0x24BDAC8D0];
  if (a1 <= 1917152816)
  {
    if (a1 <= 1916890724)
    {
      switch(a1)
      {
        case 1:
          goto LABEL_82;
        case 2:
          goto LABEL_41;
        case 3:
          goto LABEL_91;
        case 4:
LABEL_11:
          v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            return CFSTR("LargeRoom");
          v37 = 136315394;
          v38 = "PHASEEngine.mm";
          v39 = 1024;
          v40 = 126;
          v5 = "%25s:%-5d Setting reverb to LargeRoom";
          goto LABEL_137;
        case 5:
LABEL_76:
          v17 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            v37 = 136315394;
            v38 = "PHASEEngine.mm";
            v39 = 1024;
            v40 = 135;
            _os_log_impl(&dword_2164CC000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to LargeRoom2", (uint8_t *)&v37, 0x12u);
          }
          return CFSTR("LargeRoom2");
        case 6:
          goto LABEL_68;
        case 7:
          goto LABEL_47;
        case 8:
          goto LABEL_85;
        case 9:
          goto LABEL_88;
        case 10:
          goto LABEL_53;
        case 11:
          goto LABEL_79;
        case 12:
          goto LABEL_73;
        default:
          return result;
      }
    }
    if (a1 > 1917023335)
    {
      if (a1 > 1917137200)
      {
        if (a1 == 1917137201)
        {
          v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            v37 = 136315394;
            v38 = "PHASEEngine.mm";
            v39 = 1024;
            v40 = 345;
            v5 = "%25s:%-5d Setting reverb to LargeRoom. In the future, return Environment11";
LABEL_137:
            _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v37, 0x12u);
          }
          return CFSTR("LargeRoom");
        }
        else if (a1 == 1917137202)
        {
          v14 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            v37 = 136315394;
            v38 = "PHASEEngine.mm";
            v39 = 1024;
            v40 = 351;
            _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment12", (uint8_t *)&v37, 0x12u);
          }
          return CFSTR("Environment12");
        }
      }
      else if (a1 == 1917023336)
      {
LABEL_82:
        v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          v37 = 136315394;
          v38 = "PHASEEngine.mm";
          v39 = 1024;
          v40 = 99;
          _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Cathedral", (uint8_t *)&v37, 0x12u);
        }
        return CFSTR("Cathedral");
      }
      else if (a1 == 1917137200)
      {
        v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v37 = 136315394;
          v38 = "PHASEEngine.mm";
          v39 = 1024;
          v40 = 338;
          _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment10", (uint8_t *)&v37, 0x12u);
        }
        return CFSTR("Environment10");
      }
    }
    else if (a1 > 1917020525)
    {
      if (a1 == 1917020526)
      {
        v35 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          v37 = 136315394;
          v38 = "PHASEEngine.mm";
          v39 = 1024;
          v40 = 268;
          _os_log_impl(&dword_2164CC000, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Cinema", (uint8_t *)&v37, 0x12u);
        }
        return CFSTR("Cinema");
      }
      else if (a1 == 1917022062)
      {
        v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          v37 = 136315394;
          v38 = "PHASEEngine.mm";
          v39 = 1024;
          v40 = 212;
          _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to ConcertHall", (uint8_t *)&v37, 0x12u);
        }
        return CFSTR("ConcertHall");
      }
    }
    else if (a1 == 1916890725)
    {
      v31 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        v37 = 136315394;
        v38 = "PHASEEngine.mm";
        v39 = 1024;
        v40 = 357;
        _os_log_impl(&dword_2164CC000, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Anechoic", (uint8_t *)&v37, 0x12u);
      }
      return CFSTR("Anechoic");
    }
    else if (a1 == 1916952948)
    {
      v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v37 = 136315394;
        v38 = "PHASEEngine.mm";
        v39 = 1024;
        v40 = 254;
        _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Bathroom", (uint8_t *)&v37, 0x12u);
      }
      return CFSTR("Bathroom");
    }
  }
  else if (a1 <= 1917604400)
  {
    if (a1 > 1917547629)
    {
      if (a1 > 1917601840)
      {
        if (a1 == 1917601841)
        {
LABEL_91:
          v22 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            v37 = 136315394;
            v38 = "PHASEEngine.mm";
            v39 = 1024;
            v40 = 117;
            _os_log_impl(&dword_2164CC000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to LargeHall", (uint8_t *)&v37, 0x12u);
          }
          return CFSTR("LargeHall");
        }
        else if (a1 == 1917601842)
        {
LABEL_68:
          v15 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            v37 = 136315394;
            v38 = "PHASEEngine.mm";
            v39 = 1024;
            v40 = 144;
            _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to LargeHall2", (uint8_t *)&v37, 0x12u);
          }
          return CFSTR("LargeHall2");
        }
      }
      else if (a1 == 1917547630)
      {
        v32 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          v37 = 136315394;
          v38 = "PHASEEngine.mm";
          v39 = 1024;
          v40 = 247;
          _os_log_impl(&dword_2164CC000, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Kitchen", (uint8_t *)&v37, 0x12u);
        }
        return CFSTR("Kitchen");
      }
      else if (a1 == 1917600616)
      {
LABEL_41:
        v10 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v37 = 136315394;
          v38 = "PHASEEngine.mm";
          v39 = 1024;
          v40 = 108;
          _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to LargeChamber", (uint8_t *)&v37, 0x12u);
        }
        return CFSTR("LargeChamber");
      }
    }
    else
    {
      switch(a1)
      {
        case 1917152817:
          v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            v37 = 136315394;
            v38 = "PHASEEngine.mm";
            v39 = 1024;
            v40 = 275;
            _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment01", (uint8_t *)&v37, 0x12u);
          }
          result = CFSTR("Environment01");
          break;
        case 1917152818:
          v24 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            v37 = 136315394;
            v38 = "PHASEEngine.mm";
            v39 = 1024;
            v40 = 282;
            _os_log_impl(&dword_2164CC000, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment02", (uint8_t *)&v37, 0x12u);
          }
          result = CFSTR("Environment02");
          break;
        case 1917152819:
          v25 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            v37 = 136315394;
            v38 = "PHASEEngine.mm";
            v39 = 1024;
            v40 = 289;
            _os_log_impl(&dword_2164CC000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment03", (uint8_t *)&v37, 0x12u);
          }
          result = CFSTR("Environment03");
          break;
        case 1917152820:
          v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            v37 = 136315394;
            v38 = "PHASEEngine.mm";
            v39 = 1024;
            v40 = 296;
            _os_log_impl(&dword_2164CC000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment04", (uint8_t *)&v37, 0x12u);
          }
          result = CFSTR("Environment04");
          break;
        case 1917152821:
          v27 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            v37 = 136315394;
            v38 = "PHASEEngine.mm";
            v39 = 1024;
            v40 = 303;
            _os_log_impl(&dword_2164CC000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment05", (uint8_t *)&v37, 0x12u);
          }
          result = CFSTR("Environment05");
          break;
        case 1917152822:
          v28 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            v37 = 136315394;
            v38 = "PHASEEngine.mm";
            v39 = 1024;
            v40 = 310;
            _os_log_impl(&dword_2164CC000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment06", (uint8_t *)&v37, 0x12u);
          }
          result = CFSTR("Environment06");
          break;
        case 1917152823:
          v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            return CFSTR("LargeRoom");
          v37 = 136315394;
          v38 = "PHASEEngine.mm";
          v39 = 1024;
          v40 = 317;
          v5 = "%25s:%-5d Setting reverb to LargeRoom. In the future, return Environment07";
          goto LABEL_137;
        case 1917152824:
          v29 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            v37 = 136315394;
            v38 = "PHASEEngine.mm";
            v39 = 1024;
            v40 = 324;
            _os_log_impl(&dword_2164CC000, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment08", (uint8_t *)&v37, 0x12u);
          }
          result = CFSTR("Environment08");
          break;
        case 1917152825:
          v30 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            v37 = 136315394;
            v38 = "PHASEEngine.mm";
            v39 = 1024;
            v40 = 331;
            _os_log_impl(&dword_2164CC000, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment09", (uint8_t *)&v37, 0x12u);
          }
          result = CFSTR("Environment09");
          break;
        default:
          return result;
      }
    }
  }
  else if (a1 > 1917667376)
  {
    if (a1 <= 1917669996)
    {
      switch(a1)
      {
        case 1917667377:
LABEL_85:
          v20 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            v37 = 136315394;
            v38 = "PHASEEngine.mm";
            v39 = 1024;
            v40 = 162;
            _os_log_impl(&dword_2164CC000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to MediumHall", (uint8_t *)&v37, 0x12u);
          }
          return CFSTR("MediumHall");
        case 1917667378:
LABEL_88:
          v21 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            v37 = 136315394;
            v38 = "PHASEEngine.mm";
            v39 = 1024;
            v40 = 171;
            _os_log_impl(&dword_2164CC000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to MediumHall2", (uint8_t *)&v37, 0x12u);
          }
          return CFSTR("MediumHall2");
        case 1917667379:
LABEL_53:
          v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            v37 = 136315394;
            v38 = "PHASEEngine.mm";
            v39 = 1024;
            v40 = 180;
            _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to MediumHall3", (uint8_t *)&v37, 0x12u);
          }
          return CFSTR("MediumHall3");
      }
    }
    else if (a1 > 1917810035)
    {
      if (a1 == 1917810036)
      {
        v36 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          v37 = 136315394;
          v38 = "PHASEEngine.mm";
          v39 = 1024;
          v40 = 205;
          _os_log_impl(&dword_2164CC000, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Outside", (uint8_t *)&v37, 0x12u);
        }
        return CFSTR("Outside");
      }
      else if (a1 == 1918063213)
      {
LABEL_73:
        v16 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          v37 = 136315394;
          v38 = "PHASEEngine.mm";
          v39 = 1024;
          v40 = 198;
          _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to SmallRoom", (uint8_t *)&v37, 0x12u);
        }
        return CFSTR("SmallRoom");
      }
    }
    else if (a1 == 1917669997)
    {
LABEL_79:
      v18 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v37 = 136315394;
        v38 = "PHASEEngine.mm";
        v39 = 1024;
        v40 = 189;
        _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to MediumRoom", (uint8_t *)&v37, 0x12u);
      }
      return CFSTR("MediumRoom");
    }
    else if (a1 == 1917678445)
    {
      v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v37 = 136315394;
        v38 = "PHASEEngine.mm";
        v39 = 1024;
        v40 = 233;
        _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Museum", (uint8_t *)&v37, 0x12u);
      }
      return CFSTR("Museum");
    }
  }
  else if (a1 > 1917612652)
  {
    switch(a1)
    {
      case 1917612653:
        v33 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          v37 = 136315394;
          v38 = "PHASEEngine.mm";
          v39 = 1024;
          v40 = 261;
          _os_log_impl(&dword_2164CC000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to ListeningRoom", (uint8_t *)&v37, 0x12u);
        }
        return CFSTR("ListeningRoom");
      case 1917613682:
        v34 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          v37 = 136315394;
          v38 = "PHASEEngine.mm";
          v39 = 1024;
          v40 = 240;
          _os_log_impl(&dword_2164CC000, v34, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to LivingRoom", (uint8_t *)&v37, 0x12u);
        }
        return CFSTR("LivingRoom");
      case 1917666152:
LABEL_47:
        v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v37 = 136315394;
          v38 = "PHASEEngine.mm";
          v39 = 1024;
          v40 = 153;
          _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to MediumChamber", (uint8_t *)&v37, 0x12u);
        }
        return CFSTR("MediumChamber");
    }
  }
  else
  {
    switch(a1)
    {
      case 1917604401:
        goto LABEL_11;
      case 1917604402:
        goto LABEL_76;
      case 1917604403:
        v3 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          v37 = 136315394;
          v38 = "PHASEEngine.mm";
          v39 = 1024;
          v40 = 219;
          _os_log_impl(&dword_2164CC000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to LargeRoom3", (uint8_t *)&v37, 0x12u);
        }
        result = CFSTR("LargeRoom3");
        break;
      case 1917604404:
        v23 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          v37 = 136315394;
          v38 = "PHASEEngine.mm";
          v39 = 1024;
          v40 = 226;
          _os_log_impl(&dword_2164CC000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to LargeRoom4", (uint8_t *)&v37, 0x12u);
        }
        result = CFSTR("LargeRoom4");
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_216634EEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216635184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216635380(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_216635748(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216635654);
  }
  _Unwind_Resume(exception_object);
}

void sub_216635950(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_2166359FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  void *v10;

  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_216635A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  void *v10;

  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_216635B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_216635BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216635C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_216635CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216635D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_216635DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_216635ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_216635FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_216636094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_2166363D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166366A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166369C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216636B58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216636E5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21663728C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216637398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void GetDefaultClientEngineMode(void)::$_0::operator()(Phase::Logger *a1)
{
  NSObject *v1;
  int v2;
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v1 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 432));
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    v2 = 136315906;
    v3 = "PHASEEngine.mm";
    v4 = 1024;
    v5 = 455;
    v6 = 2080;
    v7 = "";
    v8 = 2080;
    v9 = "default";
    _os_log_impl(&dword_2164CC000, v1, OS_LOG_TYPE_DEBUG, "%25s:%-5d Phase %smode = %s", (uint8_t *)&v2, 0x26u);
  }
}

void Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,float const*,float *,&float Phase::DecibelsToEnergy<float>,&float Phase::EnergyToDecibels<float>>(float *a1, float *a2, uint64_t a3, float *a4, float *a5, uint64_t a6)
{
  uint64_t v9;
  float *i;
  float v11;
  float v12;
  float *j;
  float v14;
  float v15;
  float *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  float v23;
  float v24;
  float *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  float *v32;
  float *v33;
  float *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  float *v40;
  int v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  float *v51;
  float v52;
  float *v53;
  float v54;
  float *v55;
  unint64_t v56;
  float v57;
  float v58;
  float *v59;
  float v60;
  float v61;
  float *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  float *v68;
  int v69;
  double v70;
  float *v71;
  float v72;
  float v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  float *v79;
  float *v80;
  float *v81;
  void *v82;
  char *v83;
  char *v84;
  void *__p;
  float *v86;
  float *v87;
  void *v88[3];
  void *v89[4];

  v9 = (char *)a2 - (char *)a1;
  if (a2 != a1)
  {
    for (i = a1 + 1; i != a2; ++i)
    {
      v12 = *(i - 1);
      v11 = *i;
      if (v11 < v12)
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 262, "std::is_sorted(inFrequenciesFirst, inFrequenciesLast)");
    }
  }
  if (a4 != a5)
  {
    for (j = a4 + 1; j != a5; ++j)
    {
      v15 = *(j - 1);
      v14 = *j;
      if (v14 < v15)
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 263, "std::is_sorted(inOutputFrequenciesFirst, inOutputFrequenciesLast)");
    }
  }
  Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<float *>,float>(a1, a2, (float **)v89, 22000.0);
  Phase::GetBandsFromCenterFrequencies<float const*,float>(a4, a5, (float **)v88, 22000.0);
  __p = 0;
  v86 = 0;
  v87 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v79 = 0;
  v81 = 0;
  if ((char *)a5 - (char *)a4 > 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = a5 - a4;
    v21 = v9 >> 2;
    v78 = (v9 >> 2) - 1;
    if (v20 <= 1)
      v20 = 1;
    v75 = v20;
    v76 = v9 >> 2;
    do
    {
      v22 = (float *)((char *)v88[0] + 8 * v19);
      v23 = *v22;
      v24 = v22[1];
      v86 = (float *)__p;
      v83 = v17;
      v80 = v16;
      if (v18 < v21)
      {
        v25 = (float *)((char *)v89[0] + 8 * v18);
        v26 = *v25;
        v27 = v25[1];
        if (v24 < v27)
          v27 = v24;
        if (v26 >= v23)
          v28 = *v25;
        else
          v28 = v23;
        v29 = fmaxf(v27 - v28, 0.0);
        v30 = v24;
        v31 = v18;
        if (v29 == 0.0)
        {
LABEL_62:
          v18 -= v26 != v30;
        }
        else
        {
          while (1)
          {
            v32 = v86;
            if (v86 >= v87)
            {
              v34 = (float *)__p;
              v35 = ((char *)v86 - (_BYTE *)__p) >> 2;
              v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v37 = (char *)v87 - (_BYTE *)__p;
              if (((char *)v87 - (_BYTE *)__p) >> 1 > v36)
                v36 = v37 >> 1;
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                v38 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v38 = v36;
              if (v38)
              {
                v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v87, v38);
                v34 = (float *)__p;
                v32 = v86;
              }
              else
              {
                v39 = 0;
              }
              v40 = (float *)&v39[4 * v35];
              *v40 = v29;
              v33 = v40 + 1;
              while (v32 != v34)
              {
                v41 = *((_DWORD *)v32-- - 1);
                *((_DWORD *)v40-- - 1) = v41;
              }
              __p = v40;
              v86 = v33;
              v87 = (float *)&v39[4 * v38];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *v86 = v29;
              v33 = v32 + 1;
            }
            v86 = v33;
            v42 = v83;
            if (v83 >= v84)
            {
              v43 = (char *)v82;
              v44 = (v83 - (_BYTE *)v82) >> 3;
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 61)
                std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
              v46 = v84 - (_BYTE *)v82;
              if ((v84 - (_BYTE *)v82) >> 2 > v45)
                v45 = v46 >> 2;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
                v47 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v47 = v45;
              if (v47)
              {
                v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v84, v47);
                v43 = (char *)v82;
                v42 = v83;
              }
              else
              {
                v48 = 0;
              }
              v49 = (uint64_t *)&v48[8 * v44];
              *v49 = v18;
              v17 = (char *)(v49 + 1);
              while (v42 != v43)
              {
                v50 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *--v49 = v50;
              }
              v82 = v49;
              v83 = v17;
              v84 = &v48[8 * v47];
              if (v43)
                operator delete(v43);
            }
            else
            {
              *(_QWORD *)v83 = v18;
              v17 = v42 + 8;
            }
            v83 = v17;
            if (v18 == v78)
              v31 = v18;
            if (++v18 == v21)
              break;
            v51 = (float *)((char *)v89[0] + 8 * v18);
            v26 = *v51;
            v52 = v51[1];
            v53 = (float *)((char *)v88[0] + 8 * v19);
            v54 = *v53;
            v30 = v53[1];
            if (v30 < v52)
              v52 = v53[1];
            if (v26 >= v54)
              v54 = v26;
            v29 = fmaxf(v52 - v54, 0.0);
            if (v29 == 0.0)
              goto LABEL_62;
          }
          v18 = v31;
        }
      }
      v55 = v80;
      if (v17 == v82)
      {
        v58 = 0.0;
      }
      else
      {
        v56 = 0;
        v57 = v24 - v23;
        v58 = 0.0;
        v59 = v80;
        v17 = (char *)v82;
        do
        {
          v60 = *((float *)__p + v56) / v57;
          v61 = v60 * expf((float)((float)(*(float *)(a3 + 4 * *(_QWORD *)&v17[8 * v56]) * 10.0) / 10.0) * 0.23026);
          if (v59 >= v81)
          {
            v62 = v79;
            v63 = v59 - v79;
            v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v65 = (char *)v81 - (char *)v79;
            if (((char *)v81 - (char *)v79) >> 1 > v64)
              v64 = v65 >> 1;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
              v66 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v66 = v64;
            if (v66)
            {
              v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v81, v66);
              v62 = v79;
              v59 = v80;
            }
            else
            {
              v67 = 0;
            }
            v68 = (float *)&v67[4 * v63];
            *v68 = v61;
            v55 = v68 + 1;
            while (v59 != v62)
            {
              v69 = *((_DWORD *)v59-- - 1);
              *((_DWORD *)v68-- - 1) = v69;
            }
            v79 = v68;
            v81 = (float *)&v67[4 * v66];
            if (v62)
              operator delete(v62);
          }
          else
          {
            *v59 = v61;
            v55 = v59 + 1;
          }
          v58 = v58 + v60;
          v80 = v55;
          ++v56;
          v17 = (char *)v82;
          v59 = v55;
        }
        while (v56 < (v83 - (_BYTE *)v82) >> 3);
      }
      v16 = v79;
      v70 = 0.0;
      if (v79 != v55)
      {
        v71 = v79;
        do
        {
          v72 = *v71++;
          v70 = v70 + v72;
        }
        while (v71 != v55);
      }
      v73 = v70;
      v74 = v73 / v58;
      if (v74 <= 0.0)
        v74 = COERCE_FLOAT(1);
      v21 = v76;
      *(float *)(a6 + 4 * v19++) = (float)((float)(logf(v74) * 4.3429) / 10.0) * 10.0;
    }
    while (v19 != v75);
    if (v79)
    {
      operator delete(v79);
      v17 = (char *)v82;
    }
    if (v17)
    {
      v83 = v17;
      operator delete(v17);
    }
  }
  if (__p)
  {
    v86 = (float *)__p;
    operator delete(__p);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
  if (v89[0])
  {
    v89[1] = v89[0];
    operator delete(v89[0]);
  }
}

void sub_216637A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t PHASEEngineImpl::PHASEEngineImpl(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, double a7)
{
  id v13;
  id v14;
  void **v15;
  Phase::Logger *InstancePtr;
  uint64_t v17;
  id WeakRetained;
  id v19;
  uint64_t v20;
  uint64_t *v21;
  void ***v22;
  id v23;
  void **v24;
  Phase::Controller::ClientTapRegistryProxy *v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  Phase::Controller::GroupManager *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  id *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  const char **v50;
  Phase::Dispatch::MiscClientDirectDispatcher *v51;
  uint64_t v52;
  Phase::Dispatch::ExternalStreamClientDirectDispatcher *v53;
  uint64_t v54;
  Phase::Dispatch::TapsClientDirectDispatcher *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Phase::Dispatch::ExternalStreamClientInterface *v61;
  Phase::Dispatch::TapsClientInterface *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Phase::ActionTreeServerCommandProcessor *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  NSObject *v76;
  std::logic_error *exception;
  Phase::Logger *v78;
  void *v79;
  Phase::Controller::ClientTapRegistryProxy **v80;
  const char ***v81;
  _QWORD v82[3];
  _QWORD *v83;
  uint8_t *v84;
  id v85;
  uint8_t buf[32];
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v14 = a5;
  v79 = v13;
  objc_initWeak((id *)a1, v13);
  *(double *)(a1 + 8) = a7;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  Phase::Controller::TaskManager::TaskManager((Phase::Controller::TaskManager *)(a1 + 48));
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  v81 = (const char ***)(a1 + 272);
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  v80 = (Phase::Controller::ClientTapRegistryProxy **)(a1 + 472);
  *(_QWORD *)(a1 + 504) = a3;
  *(_QWORD *)(a1 + 512) = a6;
  v78 = (Phase::Logger *)v14;
  *(_QWORD *)(a1 + 520) = v78;
  *(_BYTE *)(a1 + 528) = 0;
  v15 = (void **)(a1 + 544);
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(v78);
  v17 = *(_QWORD *)(a1 + 16);
  *((_QWORD *)InstancePtr + 195) = v17;
  if (v17)
  {
    v76 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 480));
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "PHASEEngineImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 207;
      _os_log_impl(&dword_2164CC000, v76, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Invalid engine mode\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid engine mode");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  if (*(_QWORD *)(a1 + 512) == 1)
    *(_DWORD *)(Phase::Logger::GetInstancePtr(InstancePtr) + 1208) = 1;
  PHASEEngineImpl::ServerInit((PHASEEngineImpl *)a1);
  WeakRetained = objc_loadWeakRetained((id *)a1);
  objc_msgSend(WeakRetained, "assetRegistry", v14, a1 + 432, a1 + 352, a1 + 336, a1 + 320, a1 + 304, a1 + 288, a1 + 240);
  v19 = (id)objc_claimAutoreleasedReturnValue();
  v20 = *(_QWORD *)(a1 + 96);
  v21 = (uint64_t *)(a1 + 96);
  if ((unint64_t)(*(_QWORD *)(a1 + 104) - v20) <= 0x20)
  {
    std::vector<std::any>::resize((_QWORD *)(a1 + 96), 2uLL);
    v20 = *v21;
  }
  v22 = (void ***)(v20 + 32);
  if (!*(_QWORD *)(v20 + 32))
  {
    v23 = v19;
    v84 = (uint8_t *)std::__any_imp::_SmallHandler<PHASEAssetRegistry * {__strong}>::__handle[abi:ne180100];
    v85 = v23;
    if (&v84 != (uint8_t **)v22)
    {
      v24 = *v22;
      if (*v22)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        ((void (*)(uint64_t, uint64_t, uint8_t *, _QWORD, _QWORD))v24)(2, v20 + 32, buf, 0, 0);
        ((void (*)(uint64_t, uint8_t **, uint64_t, _QWORD, _QWORD))v84)(2, &v84, v20 + 32, 0, 0);
        (*(void (**)(uint64_t, uint8_t *, uint8_t **, _QWORD, _QWORD))buf)(2, buf, &v84, 0, 0);
        std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))buf);
      }
      else
      {
        *(_QWORD *)(v20 + 32) = std::__any_imp::_SmallHandler<PHASEAssetRegistry * {__strong}>::__handle[abi:ne180100];
        *(_QWORD *)(v20 + 40) = v23;
        v84 = 0;
        v85 = 0;
      }
    }
    std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v84);
  }

  if (!*v80)
  {
    v25 = (Phase::Controller::ClientTapRegistryProxy *)operator new();
    v26 = objc_loadWeakRetained((id *)a1);
    Phase::Controller::ClientTapRegistryProxy::ClientTapRegistryProxy((uint64_t)v25, v26, *(_QWORD *)(a1 + 16));

    std::unique_ptr<Phase::Controller::ClientTapRegistryProxy>::reset[abi:ne180100](v80, v25);
    Phase::Controller::TaskManager::RegisterService<Phase::Controller::ClientTapRegistryProxy>((_QWORD *)(a1 + 48), *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 472));
  }
  v27 = operator new();
  v28 = objc_loadWeakRetained((id *)a1);
  objc_initWeak((id *)v27, v28);
  *(_QWORD *)(v27 + 168) = 0;
  *(_OWORD *)(v27 + 8) = 0u;
  *(_OWORD *)(v27 + 24) = 0u;
  *(_DWORD *)(v27 + 40) = 1065353216;
  *(_DWORD *)(v27 + 80) = 1065353216;
  *(_QWORD *)(v27 + 96) = 0;
  *(_QWORD *)(v27 + 88) = v27 + 96;
  *(_QWORD *)(v27 + 120) = 0;
  *(_OWORD *)(v27 + 48) = 0u;
  *(_QWORD *)(v27 + 104) = 0;
  *(_QWORD *)(v27 + 112) = v27 + 120;
  *(_QWORD *)(v27 + 144) = 0;
  *(_OWORD *)(v27 + 64) = 0u;
  *(_QWORD *)(v27 + 128) = 0;
  *(_QWORD *)(v27 + 136) = v27 + 144;
  *(_QWORD *)(v27 + 176) = 0;
  *(_QWORD *)(v27 + 152) = 0;
  *(_QWORD *)(v27 + 160) = v27 + 168;

  std::unique_ptr<Phase::TapSourceRegistry>::reset[abi:ne180100]((uint64_t *)(a1 + 480), v27);
  v29 = *(_QWORD *)(a1 + 480);
  v30 = *(_QWORD *)(a1 + 96);
  if ((unint64_t)(*(_QWORD *)(a1 + 104) - v30) <= 0x220)
  {
    std::vector<std::any>::resize((_QWORD *)(a1 + 96), 0x12uLL);
    v30 = *v21;
  }
  if (!*(_QWORD *)(v30 + 544))
  {
    *(_QWORD *)buf = std::__any_imp::_SmallHandler<Phase::TapSourceRegistry *>::__handle[abi:ne180100];
    *(_QWORD *)&buf[8] = v29;
    if (buf != (uint8_t *)(v30 + 544))
    {
      *(_QWORD *)(v30 + 552) = v29;
      *(_QWORD *)(v30 + 544) = std::__any_imp::_SmallHandler<Phase::TapSourceRegistry *>::__handle[abi:ne180100];
      *(_QWORD *)buf = 0;
    }
    std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))buf);
  }
  v31 = operator new();
  v32 = Phase::Logger::GetInstancePtr((Phase::Logger *)v31);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::Commandable(v31, *(_QWORD *)(v32 + 704), 1, 0x20000);
  *(_QWORD *)v31 = off_24D57F338;
  *(_OWORD *)(v31 + 40) = 0u;
  *(_OWORD *)(v31 + 56) = 0u;
  *(_QWORD *)(v31 + 72) = 0;
  *(_DWORD *)(v31 + 80) = 1065353216;
  v33 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v31;
  if (v33)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
    v31 = *(_QWORD *)(a1 + 384);
  }
  v34 = objc_loadWeakRetained((id *)a1);
  objc_msgSend(v34, "assetRegistry");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(v31 + 40), v35);

  v36 = *(_QWORD *)(a1 + 384);
  v37 = *(_QWORD *)(a1 + 96);
  if ((unint64_t)(*(_QWORD *)(a1 + 104) - v37) <= 0xC0)
  {
    std::vector<std::any>::resize((_QWORD *)(a1 + 96), 7uLL);
    v37 = *v21;
  }
  if (!*(_QWORD *)(v37 + 192))
  {
    *(_QWORD *)buf = std::__any_imp::_SmallHandler<Phase::GlobalMetaParameterManager *>::__handle[abi:ne180100];
    *(_QWORD *)&buf[8] = v36;
    if (buf != (uint8_t *)(v37 + 192))
    {
      *(_QWORD *)(v37 + 192) = std::__any_imp::_SmallHandler<Phase::GlobalMetaParameterManager *>::__handle[abi:ne180100];
      *(_QWORD *)(v37 + 200) = v36;
      *(_QWORD *)buf = 0;
    }
    std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))buf);
    *(_QWORD *)buf = 0;
    std::vector<Phase::ICommandable *>::resize(a1 + 120, 7uLL, buf);
    *(_QWORD *)(*(_QWORD *)(a1 + 120) + 48) = v36;
  }
  v38 = (Phase::Controller::GroupManager *)operator new();
  v39 = Phase::Controller::GroupManager::GroupManager(v38);
  v40 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v38;
  if (v40)
  {
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v40 + 24))(v40, v39);
    v38 = *(Phase::Controller::GroupManager **)(a1 + 296);
  }
  v41 = *(_QWORD *)(a1 + 96);
  if ((unint64_t)(*(_QWORD *)(a1 + 104) - v41) <= 0x140)
  {
    std::vector<std::any>::resize((_QWORD *)(a1 + 96), 0xBuLL);
    v41 = *v21;
  }
  if (!*(_QWORD *)(v41 + 320))
  {
    *(_QWORD *)buf = std::__any_imp::_SmallHandler<Phase::Controller::GroupManager *>::__handle[abi:ne180100];
    *(_QWORD *)&buf[8] = v38;
    if (buf != (uint8_t *)(v41 + 320))
    {
      *(_QWORD *)(v41 + 320) = std::__any_imp::_SmallHandler<Phase::Controller::GroupManager *>::__handle[abi:ne180100];
      *(_QWORD *)(v41 + 328) = v38;
      *(_QWORD *)buf = 0;
    }
    std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))buf);
    *(_QWORD *)buf = 0;
    std::vector<Phase::ICommandable *>::resize(a1 + 120, 0xBuLL, buf);
    *(_QWORD *)(*(_QWORD *)(a1 + 120) + 80) = v38;
  }
  v42 = operator new();
  Phase::ActionTreeManager::ActionTreeManager(v42, (Phase::Logger *)(a1 + 48), *(_QWORD *)(a1 + 16));
  v43 = *(_QWORD **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = v42;
  if (v43)
    std::default_delete<Phase::ActionTreeManager>::operator()[abi:ne180100](v43);
  v44 = *(_QWORD *)(a1 + 96);
  if ((unint64_t)(*(_QWORD *)(a1 + 104) - v44) <= 0xE0)
  {
    std::vector<std::any>::resize((_QWORD *)(a1 + 96), 8uLL);
    v44 = *v21;
  }
  if (!*(_QWORD *)(v44 + 224))
  {
    *(_QWORD *)buf = std::__any_imp::_SmallHandler<Phase::ActionTreeManager *>::__handle[abi:ne180100];
    *(_QWORD *)&buf[8] = v42;
    if (buf != (uint8_t *)(v44 + 224))
    {
      *(_QWORD *)(v44 + 224) = std::__any_imp::_SmallHandler<Phase::ActionTreeManager *>::__handle[abi:ne180100];
      *(_QWORD *)(v44 + 232) = v42;
      *(_QWORD *)buf = 0;
    }
    std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))buf);
    *(_QWORD *)buf = 0;
    std::vector<Phase::ICommandable *>::resize(a1 + 120, 8uLL, buf);
    *(_QWORD *)(*(_QWORD *)(a1 + 120) + 56) = v42;
  }
  v45 = (id *)operator new();
  Phase::Controller::AssetUnloader::AssetUnloader(v45, (PHASEEngineImpl *)a1);
  v46 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = v45;
  if (v46)
    std::default_delete<Phase::Controller::AssetUnloader>::operator()[abi:ne180100](v46);
  v47 = *(_QWORD *)(a1 + 96);
  if ((unint64_t)(*(_QWORD *)(a1 + 104) - v47) <= 0x180)
  {
    std::vector<std::any>::resize((_QWORD *)(a1 + 96), 0xDuLL);
    v47 = *v21;
  }
  if (!*(_QWORD *)(v47 + 384))
  {
    *(_QWORD *)buf = std::__any_imp::_SmallHandler<Phase::Controller::AssetUnloader *>::__handle[abi:ne180100];
    *(_QWORD *)&buf[8] = v45;
    if (buf != (uint8_t *)(v47 + 384))
    {
      *(_QWORD *)(v47 + 384) = std::__any_imp::_SmallHandler<Phase::Controller::AssetUnloader *>::__handle[abi:ne180100];
      *(_QWORD *)(v47 + 392) = v45;
      *(_QWORD *)buf = 0;
    }
    std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))buf);
    *(_QWORD *)buf = 0;
    std::vector<Phase::ICommandable *>::resize(a1 + 120, 0xDuLL, buf);
    *(_QWORD *)(*(_QWORD *)(a1 + 120) + 96) = v45;
  }
  if (*(_QWORD *)(a1 + 512) == 1)
  {
    *(_QWORD *)buf = 0x871DE6BA7BE83574;
    *(_QWORD *)&buf[8] = "SimulatedIndirectPath";
    buf[16] = 1;
    Phase::Controller::LoadBalancer::SetProfile(*v81, (const Phase::StringId *)buf);
    if (!buf[16])
      free(*(void **)&buf[8]);
  }
  v48 = (_QWORD *)operator new();
  *v48 = &off_24D57B148;
  v48[1] = 0;
  v48[2] = 0;
  v48[3] = 0;
  v48[1] = Phase::Controller::TaskManager::GetService<Phase::Geometry::System>((Phase::Logger *)(a1 + 48), 2);
  v48[2] = Phase::Controller::TaskManager::GetService<Phase::Controller::ListenerManager>((Phase::Logger *)(a1 + 48), 26);
  v49 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v48;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *v81;
  v51 = (Phase::Dispatch::MiscClientDirectDispatcher *)operator new();
  Phase::Dispatch::MiscClientDirectDispatcher::MiscClientDirectDispatcher(v51, (Phase::Controller::TaskManager *)(a1 + 48), (Phase::Controller::LoadBalancer *)v50);
  v52 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 408) = v51;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = (Phase::Dispatch::ExternalStreamClientDirectDispatcher *)operator new();
  Phase::Dispatch::ExternalStreamClientDirectDispatcher::ExternalStreamClientDirectDispatcher(v53, (const Phase::Controller::TaskManager *)(a1 + 48));
  v54 = *(_QWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 416) = v53;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = (Phase::Dispatch::TapsClientDirectDispatcher *)operator new();
  Phase::Dispatch::TapsClientDirectDispatcher::TapsClientDirectDispatcher(v55, (Phase::Controller::TaskManager *)(a1 + 48));
  v56 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v55;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 488) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *(_QWORD *)(a1 + 392);
  v59 = *(_QWORD *)(a1 + 368);
  v60 = *(_QWORD *)(a1 + 408);
  v61 = *(Phase::Dispatch::ExternalStreamClientInterface **)(a1 + 416);
  v62 = *(Phase::Dispatch::TapsClientInterface **)(a1 + 424);
  v63 = operator new();
  Phase::Dispatch::ClientTransactionManager::ClientTransactionManager(v63, v58, v59, v61, v60, v62, v64, (Phase::Controller::TaskManager *)(a1 + 48));
  std::unique_ptr<Phase::Dispatch::ClientTransactionManager>::reset[abi:ne180100]((uint64_t *)(a1 + 400), v63);
  v65 = *(_QWORD *)(a1 + 264);
  v66 = *(_QWORD *)(a1 + 208);
  v67 = (Phase::ActionTreeServerCommandProcessor *)operator new();
  Phase::ActionTreeServerCommandProcessor::ActionTreeServerCommandProcessor((uint64_t)v67, (Phase::Controller::TaskManager *)(a1 + 48), v65, v66, v68, *(_QWORD *)(a1 + 16));
  std::unique_ptr<Phase::ActionTreeServerCommandProcessor>::reset[abi:ne180100]((Phase::ActionTreeServerCommandProcessor **)(a1 + 328), v67);
  (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 408) + 16))(buf);
  v69 = *v15;
  if (*v15)
  {
    v70 = *(_QWORD *)(a1 + 552);
    v71 = *v15;
    if ((void *)v70 != v69)
    {
      do
      {
        v70 -= 80;
        std::allocator<Phase::Controller::GeometryPermutation>::destroy[abi:ne180100](a1 + 560, v70);
      }
      while ((void *)v70 != v69);
      v71 = *v15;
    }
    *(_QWORD *)(a1 + 552) = v69;
    operator delete(v71);
    *v15 = 0;
    *(_QWORD *)(a1 + 552) = 0;
    *(_QWORD *)(a1 + 560) = 0;
  }
  *(_OWORD *)(a1 + 544) = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 560) = *(_QWORD *)&buf[16];
  memset(buf, 0, 24);
  v84 = buf;
  std::vector<Phase::Controller::GeometryPermutation>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
  if (*(_QWORD *)(a1 + 504) != 1)
  {
    v72 = operator new(0x20uLL);
    *v72 = &off_24D57F2F0;
    v72[1] = PHASEEngineImpl::UpdateFrame;
    v72[2] = 0;
    v72[3] = a1;
    v83 = v72;
    Phase::Controller::TaskManager::SetUpdateFunction(a1 + 48, v82);
    v73 = v83;
    if (v83 == v82)
    {
      v74 = 4;
      v73 = v82;
      goto LABEL_75;
    }
    if (v83)
    {
      v74 = 5;
LABEL_75:
      (*(void (**)(void))(*v73 + 8 * v74))();
    }
  }

  return a1;
}

void sub_216638620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t *a11, id **a12, id ***a13, Phase::SpatialModeler::ReverbPresetDatabase::Implementation ***a14, Phase::Controller::SpatializerManager **a15, uint64_t *a16, uint64_t a17, void *a18, Phase::ActionTreeServerCommandProcessor **a19, uint64_t *a20,Phase::Controller::VoiceManager::Implementation ***a21,uint64_t *a22,Phase::Controller::ClientTapRegistryProxy **a23,Phase::Controller::LoadBalancer **a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  void *v30;
  Phase::Controller::TaskManager **v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  __cxa_free_exception(v30);
  std::vector<Phase::Controller::GeometryPermutation>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);

  v34 = *(_QWORD *)(v29 + 488);
  *(_QWORD *)(v29 + 488) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  std::unique_ptr<Phase::TapSourceRegistry>::reset[abi:ne180100](a22, 0);
  std::unique_ptr<Phase::Controller::ClientTapRegistryProxy>::reset[abi:ne180100](a23, 0);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(a10);
  v35 = *(_QWORD *)(v29 + 424);
  *(_QWORD *)(v29 + 424) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *(_QWORD *)(v29 + 416);
  *(_QWORD *)(v29 + 416) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *(_QWORD *)(v29 + 408);
  *(_QWORD *)(v29 + 408) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  std::unique_ptr<Phase::Dispatch::ClientTransactionManager>::reset[abi:ne180100](a20, 0);
  v38 = *(_QWORD **)(v29 + 392);
  *(_QWORD *)(v29 + 392) = 0;
  if (v38)
    std::default_delete<Phase::ActionTreeManager>::operator()[abi:ne180100](v38);
  v39 = *(_QWORD *)(v29 + 384);
  *(_QWORD *)(v29 + 384) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
  v40 = *(_QWORD *)(v29 + 376);
  *(_QWORD *)(v29 + 376) = 0;
  if (v40)
    std::default_delete<Phase::Controller::AssetUnloader>::operator()[abi:ne180100](v40);
  v41 = *(_QWORD *)(v29 + 368);
  *(_QWORD *)(v29 + 368) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *(_QWORD *)(v29 + 360);
  *(_QWORD *)(v29 + 360) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
  std::unique_ptr<Phase::Controller::SharedEntityManager>::reset[abi:ne180100](a11, 0);
  std::unique_ptr<Phase::Controller::RoomCongruenceManager>::reset[abi:ne180100]((Phase::Controller::RoomCongruenceManager **)(v32 + 136), 0);
  std::unique_ptr<Phase::Controller::SessionManager>::reset[abi:ne180100](a12, 0);
  std::unique_ptr<Phase::ActionTreeServerCommandProcessor>::reset[abi:ne180100](a19, 0);
  std::unique_ptr<Phase::Controller::StatisticsDatabase>::reset[abi:ne180100](a13, 0);
  v43 = *(_QWORD *)(v29 + 312);
  *(_QWORD *)(v29 + 312) = 0;
  if (v43)
    MEMORY[0x2199F9D70](v43, 0x1000C4077B8E174);
  std::unique_ptr<Phase::SpatialModeler::ReverbPresetDatabase>::reset[abi:ne180100](a14, 0);
  v44 = *(_QWORD *)(v29 + 296);
  *(_QWORD *)(v29 + 296) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44);
  std::unique_ptr<Phase::Controller::SpatializerManager>::reset[abi:ne180100](a15, 0);
  v45 = *(_QWORD *)(v29 + 280);
  *(_QWORD *)(v29 + 280) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
  std::unique_ptr<Phase::Controller::LoadBalancer>::reset[abi:ne180100](a24, 0);
  std::unique_ptr<Phase::Controller::VoiceManager>::reset[abi:ne180100](a21, 0);
  v46 = *(_QWORD *)(v29 + 256);
  *(_QWORD *)(v29 + 256) = 0;
  if (v46)
    MEMORY[0x2199F9D70](v46, 0x1000C405A0DE52CLL);
  std::unique_ptr<Phase::Controller::ProfileRegistry>::reset[abi:ne180100]((uint64_t *)(v32 + 40), 0);
  std::unique_ptr<Phase::Controller::SpatialModelerRegistry>::reset[abi:ne180100](a16, 0);
  std::unique_ptr<Phase::Controller::ProcedureRegistry>::reset[abi:ne180100]((uint64_t *)(v32 + 24), 0);
  v47 = *(_QWORD *)(v29 + 224);
  *(_QWORD *)(v29 + 224) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
  std::unique_ptr<Phase::Controller::IR::IRBuilder>::reset[abi:ne180100]((Phase::Controller::IR::IRBuilder **)(v32 + 8), 0);
  std::unique_ptr<Phase::Geometry::System>::reset[abi:ne180100]((Phase::Geometry::System **)v32, 0);
  Phase::Controller::TaskManager::~TaskManager(v31);
  objc_destroyWeak((id *)v29);

  _Unwind_Resume(a1);
}

uint64_t PHASEEngineImpl::ServerInit(PHASEEngineImpl *this)
{
  Phase::Controller::ClientTapRegistryProxy *v2;
  id WeakRetained;
  Phase::Controller::VoicePoolRegistry *v4;
  uint64_t v5;
  std::string *v6;
  std::string **v7;
  Phase::Controller::ProcedureRegistry *v8;
  std::string::size_type v9;
  std::string *v10;
  Phase::Geometry::System *System;
  std::string::size_type v12;
  std::string *v13;
  const Phase::Controller::TaskManager *v14;
  Phase::Controller::SharedEntityManager *v15;
  std::string::size_type v16;
  std::string *v17;
  Phase::Controller::ListenerManager *v18;
  uint64_t v19;
  std::string *v20;
  _BOOL4 v21;
  Phase::Controller::SpatialModelerRegistry *v22;
  Phase::Controller::SpatialModelerRegistry **v23;
  std::string::size_type v24;
  std::string *v25;
  Phase::Controller::SpatializerManager *v26;
  std::string::size_type v27;
  std::string *v28;
  Phase::Controller::DeviceManager *v29;
  uint64_t v30;
  std::string *v31;
  double v32;
  Phase::Logger *v33;
  Phase::Logger *v34;
  Phase::Logger *v35;
  const Phase::Controller::Spatializer *ActiveSpatializer;
  Phase::Controller::IR::IRBuilder *v37;
  std::string::size_type v38;
  std::string *v39;
  void *v40;
  id v41;
  Phase::Logger *v42;
  Phase::SpatialModeler::ReverbPresetDatabase *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  void *v47;
  void *v48;
  void *v49;
  uint64_t *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Phase::Controller::ProfileRegistry **v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t j;
  std::string::size_type v62;
  NSURL *v63;
  id **v64;
  uint64_t v65;
  std::string::size_type v66;
  std::string *v67;
  std::string::size_type v68;
  uint64_t v69;
  std::string *v70;
  Phase::Controller::VoiceManager *v71;
  Phase::Controller::VoiceManager::Implementation ***v72;
  uint64_t v73;
  id *v74;
  std::string::size_type v75;
  std::string *v76;
  unsigned __int8 v77;
  void *v78;
  char v79;
  void *v80;
  Phase::Controller::RoomCongruenceManager *v81;
  std::string::size_type v82;
  std::string *v83;
  __int128 v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  unint64_t v91;
  unint64_t v92;
  double v93;
  char v94;
  unint64_t v95;
  std::string::size_type v96;
  std::string *v97;
  Phase::Controller::VoiceManager::Implementation **v98;
  Phase::Controller::ProfileRegistry *v99;
  Phase::Geometry::System *v100;
  Phase::Controller::LoadBalancer *v101;
  id v102;
  void *v103;
  void *v104;
  Phase::Logger *v105;
  Phase::Logger *v106;
  _BOOL8 v107;
  ExternalStreamManager *v108;
  void *v109;
  id v110;
  std::string *v111;
  std::string *v112;
  id v113;
  void (*v114)(uint64_t, std::string *, _BYTE *, _QWORD, _QWORD);
  NSObject *v116;
  std::runtime_error *v117;
  NSObject *v118;
  std::logic_error *exception;
  NSObject *v120;
  std::runtime_error *v121;
  NSObject *v122;
  NSObject *v123;
  NSObject *v124;
  std::runtime_error *v125;
  NSObject *v126;
  std::runtime_error *v127;
  NSObject *v128;
  std::runtime_error *v129;
  Phase::Geometry::System **v130;
  const Phase::Controller::TaskManager *v131;
  std::string **v132;
  PHASEEngineImpl *v133;
  id obj;
  void *v135;
  std::vector<char> v136;
  uint64_t v137;
  void *v138;
  char v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  int v149;
  _BYTE v150[32];
  uint64_t v151;
  _BYTE __p[32];
  int v153;
  std::string buf[2];
  __int128 v155;
  _BYTE v156[24];
  __int128 v157;
  int v158;
  void *v159[2];
  __int128 v160;
  _BYTE v161[128];
  _BYTE v162[128];
  void (*v163)(uint64_t);
  id v164;
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  Phase::Logger::GetInstancePtr((Phase::Logger *)this);
  if (!*((_QWORD *)this + 59))
  {
    v2 = (Phase::Controller::ClientTapRegistryProxy *)operator new();
    WeakRetained = objc_loadWeakRetained((id *)this);
    Phase::Controller::ClientTapRegistryProxy::ClientTapRegistryProxy((uint64_t)v2, WeakRetained, *((_QWORD *)this + 2));

    std::unique_ptr<Phase::Controller::ClientTapRegistryProxy>::reset[abi:ne180100]((Phase::Controller::ClientTapRegistryProxy **)this + 59, v2);
    Phase::Controller::TaskManager::RegisterService<Phase::Controller::ClientTapRegistryProxy>((_QWORD *)this + 6, *((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))this + 59));
  }
  v4 = (Phase::Controller::VoicePoolRegistry *)operator new();
  Phase::Controller::VoicePoolRegistry::VoicePoolRegistry(v4);
  v5 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    v4 = (Phase::Controller::VoicePoolRegistry *)*((_QWORD *)this + 28);
  }
  v6 = (std::string *)*((_QWORD *)this + 12);
  v7 = (std::string **)((char *)this + 96);
  if (*((_QWORD *)this + 13) - (_QWORD)v6 <= 0x60uLL)
  {
    std::vector<std::any>::resize((_QWORD *)this + 12, 4uLL);
    v6 = *v7;
  }
  v132 = (std::string **)((char *)this + 96);
  v133 = this;
  if (!v6[4].__r_.__value_.__r.__words[0])
  {
    buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::VoicePoolRegistry *>::__handle[abi:ne180100];
    buf[0].__r_.__value_.__l.__size_ = (std::string::size_type)v4;
    if (buf != &v6[4])
    {
      v6[4].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::VoicePoolRegistry *>::__handle[abi:ne180100];
      v6[4].__r_.__value_.__l.__size_ = (std::string::size_type)v4;
      buf[0].__r_.__value_.__r.__words[0] = 0;
    }
    std::any::reset[abi:ne180100](buf);
    buf[0].__r_.__value_.__r.__words[0] = 0;
    std::vector<Phase::ICommandable *>::resize((uint64_t)this + 120, 4uLL, buf);
    *(_QWORD *)(*((_QWORD *)this + 15) + 24) = v4;
    v7 = (std::string **)((char *)this + 96);
  }
  v8 = (Phase::Controller::ProcedureRegistry *)operator new();
  Phase::Controller::ProcedureRegistry::ProcedureRegistry(v8);
  std::unique_ptr<Phase::Controller::ProcedureRegistry>::reset[abi:ne180100]((uint64_t *)this + 29, (uint64_t)v8);
  v9 = *((_QWORD *)this + 29);
  v10 = (std::string *)*((_QWORD *)this + 12);
  if (*((_QWORD *)this + 13) - (_QWORD)v10 <= 0x80uLL)
  {
    std::vector<std::any>::resize(v7, 5uLL);
    v10 = *v7;
  }
  if (!v10[5].__r_.__value_.__l.__size_)
  {
    buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::ProcedureRegistry *>::__handle[abi:ne180100];
    buf[0].__r_.__value_.__l.__size_ = v9;
    if (buf != (std::string *)&v10[5].__r_.__value_.__r.__words[1])
    {
      v10[5].__r_.__value_.__l.__size_ = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::ProcedureRegistry *>::__handle[abi:ne180100];
      v10[5].__r_.__value_.__r.__words[2] = v9;
      buf[0].__r_.__value_.__r.__words[0] = 0;
    }
    std::any::reset[abi:ne180100](buf);
  }
  System = (Phase::Geometry::System *)Phase::Geometry::CreateSystem(*((Phase::JobManager **)this + 11));
  std::unique_ptr<Phase::Geometry::System>::reset[abi:ne180100]((Phase::Geometry::System **)this + 26, System);
  v12 = *((_QWORD *)this + 26);
  v13 = (std::string *)*((_QWORD *)this + 12);
  if (*((_QWORD *)this + 13) - (_QWORD)v13 <= 0x40uLL)
  {
    std::vector<std::any>::resize(v7, 3uLL);
    v13 = *v7;
  }
  if (!v13[2].__r_.__value_.__r.__words[2])
  {
    buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Geometry::System *>::__handle[abi:ne180100];
    buf[0].__r_.__value_.__l.__size_ = v12;
    if (buf != (std::string *)&v13[2].__r_.__value_.__r.__words[2])
    {
      v13[2].__r_.__value_.__r.__words[2] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Geometry::System *>::__handle[abi:ne180100];
      v13[3].__r_.__value_.__r.__words[0] = v12;
      buf[0].__r_.__value_.__r.__words[0] = 0;
    }
    std::any::reset[abi:ne180100](buf);
  }
  v14 = (const Phase::Controller::TaskManager *)(v7 - 6);
  if (*((_QWORD *)this + 2))
  {
    v15 = (Phase::Controller::SharedEntityManager *)operator new();
    Phase::Controller::SharedEntityManager::SharedEntityManager(v15, (const Phase::Controller::TaskManager *)(v7 - 6));
    std::unique_ptr<Phase::Controller::SharedEntityManager>::reset[abi:ne180100]((uint64_t *)this + 44, (uint64_t)v15);
    v16 = *((_QWORD *)this + 44);
    v17 = (std::string *)*((_QWORD *)this + 12);
    if (*((_QWORD *)this + 13) - (_QWORD)v17 <= 0x2A0uLL)
    {
      std::vector<std::any>::resize(v7, 0x16uLL);
      v17 = *v7;
    }
    if (!v17[28].__r_.__value_.__r.__words[0])
    {
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::SharedEntityManager *>::__handle[abi:ne180100];
      buf[0].__r_.__value_.__l.__size_ = v16;
      if (buf != &v17[28])
      {
        v17[28].__r_.__value_.__l.__size_ = v16;
        v17[28].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::SharedEntityManager *>::__handle[abi:ne180100];
        buf[0].__r_.__value_.__r.__words[0] = 0;
      }
      std::any::reset[abi:ne180100](buf);
    }
  }
  v18 = (Phase::Controller::ListenerManager *)operator new();
  Phase::Controller::ListenerManager::ListenerManager(v18, (const Phase::Controller::TaskManager *)(v7 - 6));
  v19 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v18 = (Phase::Controller::ListenerManager *)*((_QWORD *)this + 45);
  }
  v20 = (std::string *)*((_QWORD *)this + 12);
  if (*((_QWORD *)this + 13) - (_QWORD)v20 <= 0x340uLL)
  {
    std::vector<std::any>::resize(v7, 0x1BuLL);
    v20 = *v7;
  }
  v130 = (Phase::Geometry::System **)((char *)this + 208);
  v131 = (const Phase::Controller::TaskManager *)(v7 - 6);
  if (!v20[34].__r_.__value_.__r.__words[2])
  {
    buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::ListenerManager *>::__handle[abi:ne180100];
    buf[0].__r_.__value_.__l.__size_ = (std::string::size_type)v18;
    if (buf != (std::string *)&v20[34].__r_.__value_.__r.__words[2])
    {
      v20[35].__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
      v20[34].__r_.__value_.__r.__words[2] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::ListenerManager *>::__handle[abi:ne180100];
      buf[0].__r_.__value_.__r.__words[0] = 0;
    }
    std::any::reset[abi:ne180100](buf);
    buf[0].__r_.__value_.__r.__words[0] = 0;
    std::vector<Phase::ICommandable *>::resize((uint64_t)this + 120, 0x1BuLL, buf);
    *(_QWORD *)(*((_QWORD *)this + 15) + 208) = v18;
    v7 = (std::string **)((char *)this + 96);
    v14 = v131;
  }
  v21 = *((_QWORD *)this + 64) == 1;
  v22 = (Phase::Controller::SpatialModelerRegistry *)operator new();
  Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(v22, v21);
  v23 = (Phase::Controller::SpatialModelerRegistry **)((char *)this + 240);
  std::unique_ptr<Phase::Controller::SpatialModelerRegistry>::reset[abi:ne180100]((uint64_t *)this + 30, (uint64_t)v22);
  v24 = *((_QWORD *)this + 30);
  v25 = (std::string *)*((_QWORD *)this + 12);
  if (*((_QWORD *)this + 13) - (_QWORD)v25 <= 0xA0uLL)
  {
    std::vector<std::any>::resize(v7, 6uLL);
    v25 = *v7;
  }
  if (!v25[6].__r_.__value_.__r.__words[2])
  {
    buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::SpatialModelerRegistry *>::__handle[abi:ne180100];
    buf[0].__r_.__value_.__l.__size_ = v24;
    if (buf != (std::string *)&v25[6].__r_.__value_.__r.__words[2])
    {
      v25[6].__r_.__value_.__r.__words[2] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::SpatialModelerRegistry *>::__handle[abi:ne180100];
      v25[7].__r_.__value_.__r.__words[0] = v24;
      buf[0].__r_.__value_.__r.__words[0] = 0;
    }
    std::any::reset[abi:ne180100](buf);
  }
  v26 = (Phase::Controller::SpatializerManager *)operator new();
  Phase::Controller::SpatializerManager::SpatializerManager((uint64_t)v26, (uint64_t)v14, *((double *)this + 1));
  std::unique_ptr<Phase::Controller::SpatializerManager>::reset[abi:ne180100]((Phase::Controller::SpatializerManager **)this + 36, v26);
  v27 = *((_QWORD *)this + 36);
  v28 = (std::string *)*((_QWORD *)this + 12);
  if (*((_QWORD *)this + 13) - (_QWORD)v28 <= 0x120uLL)
  {
    std::vector<std::any>::resize(v7, 0xAuLL);
    v28 = *v7;
  }
  if (!v28[12].__r_.__value_.__r.__words[0])
  {
    buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::SpatializerManager *>::__handle[abi:ne180100];
    buf[0].__r_.__value_.__l.__size_ = v27;
    if (buf != &v28[12])
    {
      v28[12].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::SpatializerManager *>::__handle[abi:ne180100];
      v28[12].__r_.__value_.__l.__size_ = v27;
      buf[0].__r_.__value_.__r.__words[0] = 0;
    }
    std::any::reset[abi:ne180100](buf);
  }
  v29 = (Phase::Controller::DeviceManager *)operator new();
  Phase::Controller::DeviceManager::DeviceManager(v29, v14);
  v30 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = v29;
  if (v30)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
    v29 = (Phase::Controller::DeviceManager *)*((_QWORD *)this + 35);
  }
  v31 = (std::string *)*((_QWORD *)this + 12);
  if (*((_QWORD *)this + 13) - (_QWORD)v31 <= 0x320uLL)
  {
    std::vector<std::any>::resize(v7, 0x1AuLL);
    v31 = *v7;
  }
  if (!v31[33].__r_.__value_.__l.__size_)
  {
    buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::DeviceManager *>::__handle[abi:ne180100];
    buf[0].__r_.__value_.__l.__size_ = (std::string::size_type)v29;
    if (buf != (std::string *)&v31[33].__r_.__value_.__r.__words[1])
    {
      v31[33].__r_.__value_.__r.__words[2] = (std::string::size_type)v29;
      v31[33].__r_.__value_.__l.__size_ = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::DeviceManager *>::__handle[abi:ne180100];
      buf[0].__r_.__value_.__r.__words[0] = 0;
    }
    std::any::reset[abi:ne180100](buf);
    buf[0].__r_.__value_.__r.__words[0] = 0;
    std::vector<Phase::ICommandable *>::resize((uint64_t)this + 120, 0x1AuLL, buf);
    *(_QWORD *)(*((_QWORD *)this + 15) + 200) = v29;
    v7 = (std::string **)((char *)this + 96);
  }
  v32 = *((double *)this + 1);
  v148 = 0x40E7700000000000;
  v149 = 0x8000;
  memset(v150, 0, sizeof(v150));
  v151 = 0x3F80000000000000;
  if (v32 <= 0.0)
  {
    v118 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)&v150[4]) + 272));
    if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"IRBuilder.hpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 83;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
      *(double *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v32;
      _os_log_impl(&dword_2164CC000, v118, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inSampleRate <= 0 is true]: \"Invalid inSampleRate: %f\"", (uint8_t *)buf, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid inSampleRate: %f");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  v148 = *(_QWORD *)&v32;
  v33 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_impl<int,unsigned int &>((uint64_t)&v150[4], 3u, 2);
  if (!(_BYTE)v33)
  {
    v120 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v33) + 272));
    if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"IRBuilder.hpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 90;
      _os_log_impl(&dword_2164CC000, v120, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert 3 band filter order\"", (uint8_t *)buf, 0x12u);
    }
    v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v121, "Failed to insert 3 band filter order");
LABEL_186:
  }
  v34 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_impl<int,unsigned int &>((uint64_t)&v150[4], 0xAu, 4);
  if (!(_BYTE)v34)
  {
    v122 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v34) + 272));
    if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"IRBuilder.hpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 92;
      _os_log_impl(&dword_2164CC000, v122, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert 10 band filter order\"", (uint8_t *)buf, 0x12u);
    }
    v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v121, "Failed to insert 10 band filter order");
    goto LABEL_186;
  }
  v35 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_impl<int,unsigned int &>((uint64_t)&v150[4], 0x1Fu, 4);
  if (!(_BYTE)v35)
  {
    v123 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v35) + 272));
    if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"IRBuilder.hpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 94;
      _os_log_impl(&dword_2164CC000, v123, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert 31 band filter order\"", (uint8_t *)buf, 0x12u);
    }
    v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v121, "Failed to insert 31 band filter order");
    goto LABEL_186;
  }
  ActiveSpatializer = (const Phase::Controller::Spatializer *)Phase::Controller::SpatializerManager::GetActiveSpatializer(*((Phase::Controller::SpatializerManager **)this + 36));
  v37 = (Phase::Controller::IR::IRBuilder *)operator new();
  Phase::Controller::IR::IRBuilder::IRBuilder(v37, &v148, ActiveSpatializer);
  std::unique_ptr<Phase::Controller::IR::IRBuilder>::reset[abi:ne180100]((Phase::Controller::IR::IRBuilder **)this + 27, v37);
  v38 = *((_QWORD *)this + 27);
  v39 = (std::string *)*((_QWORD *)this + 12);
  if (*((std::string **)this + 13) == v39)
  {
    std::vector<std::any>::resize(v7, 1uLL);
    v39 = *v7;
  }
  if (!v39->__r_.__value_.__r.__words[0])
  {
    buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::IR::IRBuilder *>::__handle[abi:ne180100];
    buf[0].__r_.__value_.__l.__size_ = v38;
    if (buf != v39)
    {
      v39->__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::IR::IRBuilder *>::__handle[abi:ne180100];
      v39->__r_.__value_.__l.__size_ = v38;
      buf[0].__r_.__value_.__r.__words[0] = 0;
    }
    std::any::reset[abi:ne180100](buf);
  }
  v40 = (void *)MEMORY[0x24BDD1488];
  v41 = objc_loadWeakRetained((id *)this);
  objc_msgSend(v40, "bundleForClass:", objc_opt_class());
  v135 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v135)
  {
    v124 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v42) + 432));
    if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"PHASEEngineImpl.mm";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 373;
      _os_log_impl(&dword_2164CC000, v124, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nil == bundle is true]: \"Bundle is nil.\"", (uint8_t *)buf, 0x12u);
    }
    v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v125, "Bundle is nil.");
  }
  v43 = (Phase::SpatialModeler::ReverbPresetDatabase *)operator new();
  Phase::SpatialModeler::ReverbPresetDatabase::ReverbPresetDatabase(v43, -120.0, 32);
  std::unique_ptr<Phase::SpatialModeler::ReverbPresetDatabase>::reset[abi:ne180100]((Phase::SpatialModeler::ReverbPresetDatabase::Implementation ***)v133 + 38, (Phase::SpatialModeler::ReverbPresetDatabase::Implementation **)v43);
  objc_msgSend(v135, "URLsForResourcesWithExtension:subdirectory:", CFSTR("bin"), CFSTR("ReverbPresets"));
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v144, v162, 16);
  if (v44)
  {
    v45 = *(_QWORD *)v145;
    do
    {
      for (i = 0; i != v44; ++i)
      {
        if (*(_QWORD *)v145 != v45)
          objc_enumerationMutation(obj);
        v47 = *(void **)(*((_QWORD *)&v144 + 1) + 8 * i);
        objc_msgSend(v47, "lastPathComponent");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "stringByDeletingPathExtension");
        v49 = (void *)objc_claimAutoreleasedReturnValue();

        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v47), "fileSystemRepresentation"));
        v155 = 0u;
        *(_OWORD *)v156 = 0u;
        memset(buf, 0, sizeof(buf));
        Phase::SpatialModeler::ReverbPresetFile::Load(buf, (const std::string *)__p);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v50 = (uint64_t *)*((_QWORD *)v133 + 38);
        v51 = objc_retainAutorelease(v49);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v51, "UTF8String"));
        Phase::SpatialModeler::ReverbPresetDatabase::Implementation::AddPreset(*v50, (uint64_t *)buf, (unint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        *(_QWORD *)__p = &v155;
        std::vector<Phase::SpatialModeler::ReverbPresetFile::ReflectionEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        *(_QWORD *)__p = &buf[1];
        std::vector<Phase::SpatialModeler::ReverbPresetFile::ReflectionEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf[0].__r_.__value_.__l.__data_);

      }
      v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v144, v162, 16);
    }
    while (v44);
  }

  v52 = operator new();
  *(_OWORD *)(v52 + 64) = 0u;
  *(_OWORD *)(v52 + 80) = 0u;
  *(_OWORD *)(v52 + 96) = 0u;
  *(_OWORD *)(v52 + 112) = 0u;
  *(_OWORD *)(v52 + 128) = 0u;
  *(_QWORD *)(v52 + 144) = 0;
  *(_OWORD *)v52 = xmmword_216739DF0;
  *(_OWORD *)(v52 + 16) = 0u;
  *(_QWORD *)(v52 + 16) = 0x800000000100;
  *(_DWORD *)(v52 + 28) = 1000593162;
  *(_OWORD *)(v52 + 32) = xmmword_2166F7FE0;
  *(_OWORD *)(v52 + 48) = 0u;
  *(_QWORD *)(v52 + 48) = 1000;
  *(_OWORD *)(v52 + 56) = xmmword_2166F7FF0;
  *(_QWORD *)(v52 + 72) = 0x4040000040800000;
  *(_DWORD *)(v52 + 80) = 1167867904;
  *(_BYTE *)(v52 + 87) = 1;
  *(_OWORD *)(v52 + 88) = xmmword_2166F8000;
  *(_DWORD *)(v52 + 104) = 4;
  *(_BYTE *)(v52 + 108) = 1;
  *(_QWORD *)(v52 + 112) = 0xC2700000C1D00000;
  *(_WORD *)(v52 + 120) = 257;
  *(_BYTE *)(v52 + 123) = 1;
  *(_QWORD *)(v52 + 124) = 0x4E20000003E8;
  *(_BYTE *)(v52 + 132) = 1;
  *(_QWORD *)(v52 + 136) = 0x430300003DDB22D1;
  *(_BYTE *)(v52 + 145) = 1;
  v53 = *((_QWORD *)v133 + 39);
  *((_QWORD *)v133 + 39) = v52;
  if (v53)
    MEMORY[0x2199F9D70](v53, 0x1000C4077B8E174);
  v54 = operator new();
  *(_QWORD *)(v54 + 32) = 0;
  *(_OWORD *)v54 = 0u;
  *(_OWORD *)(v54 + 16) = 0u;
  *(_DWORD *)(v54 + 32) = 1065353216;
  v55 = (Phase::Controller::ProfileRegistry **)((char *)v133 + 248);
  std::unique_ptr<Phase::Controller::ProfileRegistry>::reset[abi:ne180100]((uint64_t *)v133 + 31, v54);
  +[ProfileRegistryHelper getDirectoryName](ProfileRegistryHelper, "getDirectoryName");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  +[ProfileRegistryHelper getFileExtension](ProfileRegistryHelper, "getFileExtension");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  +[ProfileRegistryHelper getFileNames:](ProfileRegistryHelper, "getFileNames:", *((_QWORD *)v133 + 64));
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v58 = (id)objc_claimAutoreleasedReturnValue();
  v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v140, v161, 16);
  if (v59)
  {
    v60 = *(_QWORD *)v141;
    do
    {
      for (j = 0; j != v59; ++j)
      {
        if (*(_QWORD *)v141 != v60)
          objc_enumerationMutation(v58);
        v62 = *(_QWORD *)(*((_QWORD *)&v140 + 1) + 8 * j);
        objc_msgSend(v135, "URLForResource:withExtension:subdirectory:", v62, v57, v56);
        v63 = (NSURL *)objc_claimAutoreleasedReturnValue();
        if (!v63)
        {
          v116 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
          if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136316162;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"PHASEEngineImpl.mm";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 408;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2112;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v62;
            WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2112;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v57;
            HIWORD(buf[1].__r_.__value_.__r.__words[1]) = 2112;
            buf[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v56;
            _os_log_impl(&dword_2164CC000, v116, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nil == profileFileURL is true]: \"PHASE failed to find a file in the bundle. [NSBundle URLForResource:%@ withExtension:%@ subdirectory:%@] returned nil.\"", (uint8_t *)buf, 0x30u);
          }
          v117 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v117, "PHASE failed to find a file in the bundle. [NSBundle URLForResource:%@ withExtension:%@ subdirectory:%@] returned nil.");
        }
        Phase::Controller::ProfileRegistry::AddFromJSONFile(*v55, v63, *v23);

      }
      v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v140, v161, 16);
    }
    while (v59);
  }

  v64 = (id **)operator new();
  v65 = operator new();
  *(_OWORD *)(v65 + 16) = 0u;
  *(_OWORD *)(v65 + 32) = 0u;
  *(_OWORD *)v65 = 0u;
  *(_DWORD *)(v65 + 40) = 1065353216;
  *v64 = (id *)v65;
  std::unique_ptr<Phase::Controller::StatisticsDatabase>::reset[abi:ne180100]((id ***)v133 + 40, v64);
  v66 = *((_QWORD *)v133 + 40);
  v67 = (std::string *)*((_QWORD *)v133 + 12);
  if (*((_QWORD *)v133 + 13) - (_QWORD)v67 <= 0x2C0uLL)
  {
    std::vector<std::any>::resize(v132, 0x17uLL);
    v67 = *v132;
  }
  if (!v67[29].__r_.__value_.__l.__size_)
  {
    buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::StatisticsDatabase *>::__handle[abi:ne180100];
    buf[0].__r_.__value_.__l.__size_ = v66;
    if (buf != (std::string *)&v67[29].__r_.__value_.__r.__words[1])
    {
      v67[29].__r_.__value_.__r.__words[2] = v66;
      v67[29].__r_.__value_.__l.__size_ = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::StatisticsDatabase *>::__handle[abi:ne180100];
      buf[0].__r_.__value_.__r.__words[0] = 0;
    }
    std::any::reset[abi:ne180100](buf);
  }
  v68 = operator new();
  *(_QWORD *)v68 = 0;
  *(_OWORD *)(v68 + 8) = xmmword_2166F75C0;
  *(_QWORD *)(v68 + 24) = 0x4058400000000000;
  *(_BYTE *)(v68 + 32) = 0;
  *(_OWORD *)(v68 + 40) = xmmword_2166F75D0;
  *(int64x2_t *)(v68 + 56) = vdupq_n_s64(0x4055400000000000uLL);
  *(_BYTE *)(v68 + 72) = 0;
  v69 = *((_QWORD *)v133 + 32);
  *((_QWORD *)v133 + 32) = v68;
  if (v69)
  {
    MEMORY[0x2199F9D70](v69, 0x1000C405A0DE52CLL);
    v68 = *((_QWORD *)v133 + 32);
  }
  v70 = (std::string *)*((_QWORD *)v133 + 12);
  if (*((_QWORD *)v133 + 13) - (_QWORD)v70 <= 0x300uLL)
  {
    std::vector<std::any>::resize(v132, 0x19uLL);
    v70 = *v132;
  }
  if (!v70[32].__r_.__value_.__r.__words[0])
  {
    buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::CalibrationManager *>::__handle[abi:ne180100];
    buf[0].__r_.__value_.__l.__size_ = v68;
    if (buf != &v70[32])
    {
      v70[32].__r_.__value_.__l.__size_ = v68;
      v70[32].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::CalibrationManager *>::__handle[abi:ne180100];
      buf[0].__r_.__value_.__r.__words[0] = 0;
    }
    std::any::reset[abi:ne180100](buf);
  }
  v71 = (Phase::Controller::VoiceManager *)operator new();
  Phase::Controller::VoiceManager::VoiceManager(v71);
  v72 = (Phase::Controller::VoiceManager::Implementation ***)((char *)v133 + 264);
  std::unique_ptr<Phase::Controller::VoiceManager>::reset[abi:ne180100]((Phase::Controller::VoiceManager::Implementation ***)v133 + 33, (Phase::Controller::VoiceManager::Implementation **)v71);
  v73 = *((_QWORD *)v133 + 33);
  v74 = (id *)operator new();
  Phase::Controller::SessionManager::SessionManager((uint64_t)v74, *((void **)v133 + 65), v73);
  std::unique_ptr<Phase::Controller::SessionManager>::reset[abi:ne180100]((id **)v133 + 42, v74);
  v75 = *((_QWORD *)v133 + 42);
  v76 = (std::string *)*((_QWORD *)v133 + 12);
  if (*((_QWORD *)v133 + 13) - (_QWORD)v76 <= 0x280uLL)
  {
    std::vector<std::any>::resize(v132, 0x15uLL);
    v76 = *v132;
  }
  if (!v76[26].__r_.__value_.__r.__words[2])
  {
    buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::SessionManager *>::__handle[abi:ne180100];
    buf[0].__r_.__value_.__l.__size_ = v75;
    if (buf != (std::string *)&v76[26].__r_.__value_.__r.__words[2])
    {
      v76[27].__r_.__value_.__r.__words[0] = v75;
      v76[26].__r_.__value_.__r.__words[2] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::SessionManager *>::__handle[abi:ne180100];
      buf[0].__r_.__value_.__r.__words[0] = 0;
    }
    std::any::reset[abi:ne180100](buf);
  }
  v77 = atomic_load((unsigned __int8 *)&qword_254E44938);
  if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_254E44938))
  {
    _MergedGlobals_19 = _os_feature_enabled_impl();
    __cxa_guard_release(&qword_254E44938);
  }
  v78 = (void *)*((_QWORD *)v133 + 65);
  if (_MergedGlobals_19)
  {
    if (v78)
    {
      v79 = objc_opt_respondsToSelector();
      v78 = (void *)*((_QWORD *)v133 + 65);
      if ((v79 & 1) != 0)
      {
        objc_msgSend(v78, "roomCongruenceInterface");
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        v81 = (Phase::Controller::RoomCongruenceManager *)operator new();
        Phase::Controller::RoomCongruenceManager::RoomCongruenceManager((uint64_t)v81, v80);
        std::unique_ptr<Phase::Controller::RoomCongruenceManager>::reset[abi:ne180100]((Phase::Controller::RoomCongruenceManager **)v133 + 43, v81);

        v82 = *((_QWORD *)v133 + 43);
        v83 = (std::string *)*((_QWORD *)v133 + 12);
        if (*((_QWORD *)v133 + 13) - (_QWORD)v83 <= 0x2E0uLL)
        {
          std::vector<std::any>::resize(v132, 0x18uLL);
          v83 = *v132;
        }
        if (!v83[30].__r_.__value_.__r.__words[2])
        {
          buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::RoomCongruenceManager *>::__handle[abi:ne180100];
          buf[0].__r_.__value_.__l.__size_ = v82;
          if (buf != (std::string *)&v83[30].__r_.__value_.__r.__words[2])
          {
            v83[31].__r_.__value_.__r.__words[0] = v82;
            v83[30].__r_.__value_.__r.__words[2] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::RoomCongruenceManager *>::__handle[abi:ne180100];
            buf[0].__r_.__value_.__r.__words[0] = 0;
          }
          std::any::reset[abi:ne180100](buf);
          buf[0].__r_.__value_.__r.__words[0] = 0;
          std::vector<Phase::ICommandable *>::resize((uint64_t)v133 + 120, 0x18uLL, buf);
          *(_QWORD *)(*((_QWORD *)v133 + 15) + 184) = v82;
        }
        v78 = (void *)*((_QWORD *)v133 + 65);
      }
    }
  }
  BYTE8(v155) = 0;
  *(_OWORD *)&v156[8] = 0u;
  v157 = 0u;
  v158 = 1065353216;
  *(_OWORD *)v159 = 0u;
  v160 = 0u;
  v84 = *(_OWORD *)((char *)v133 + 248);
  buf[0].__r_.__value_.__r.__words[0] = *((_QWORD *)v133 + 1);
  *(_OWORD *)&buf[0].__r_.__value_.__r.__words[1] = *((_OWORD *)v133 + 19);
  buf[1].__r_.__value_.__r.__words[0] = *((_QWORD *)v133 + 43);
  *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = v84;
  *(_QWORD *)&v155 = v131;
  *(_QWORD *)v156 = v78;
  v137 = 0x11326FD2590F4E5ELL;
  v138 = "Default";
  v139 = 1;
  if (!std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::find<Phase::StringId>(*((_QWORD **)v133 + 31), (unint64_t *)&v137))
  {
    v126 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
    if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = "PHASEEngineImpl.mm";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 455;
      _os_log_impl(&dword_2164CC000, v126, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!mpProfileRegistry->HasProfile(defaultProfileId) is true]: \"Failed to find a default Profile in the Profile Registry.\"", __p, 0x12u);
    }
    v127 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v127, "Failed to find a default Profile in the Profile Registry.");
  }
  Phase::Controller::ProfileRegistry::GetModelers(*v55, (const Phase::StringId *)&v137, (uint64_t *)__p);
  if (*((_QWORD *)&v157 + 1))
  {
    v85 = (_QWORD *)v157;
    if ((_QWORD)v157)
    {
      do
      {
        v86 = (_QWORD *)*v85;
        operator delete(v85);
        v85 = v86;
      }
      while (v86);
    }
    *(_QWORD *)&v157 = 0;
    v87 = *(_QWORD *)&v156[16];
    if (*(_QWORD *)&v156[16])
    {
      v88 = 0;
      do
        *(_QWORD *)(*(_QWORD *)&v156[8] + 8 * v88++) = 0;
      while (v87 != v88);
    }
    *((_QWORD *)&v157 + 1) = 0;
  }
  v89 = *(_QWORD *)__p;
  *(_QWORD *)__p = 0;
  v90 = *(void **)&v156[8];
  *(_QWORD *)&v156[8] = v89;
  if (v90)
    operator delete(v90);
  v91 = *(_QWORD *)&__p[8];
  *(_QWORD *)&__p[8] = 0;
  v157 = *(_OWORD *)&__p[16];
  v158 = v153;
  *(_QWORD *)&v156[16] = v91;
  if (*(_QWORD *)&__p[24])
  {
    v92 = *(_QWORD *)(*(_QWORD *)&__p[16] + 8);
    if ((v91 & (v91 - 1)) != 0)
    {
      if (v92 >= v91)
        v92 %= v91;
    }
    else
    {
      v92 &= v91 - 1;
    }
    *(_QWORD *)(*(_QWORD *)&v156[8] + 8 * v92) = &v157;
    *(_QWORD *)&__p[16] = 0;
    *(_QWORD *)&__p[24] = 0;
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)__p);
  Phase::Controller::ProfileRegistry::GetParameters(*v55, (const Phase::StringId *)&v137, 1.0, (void **)__p);
  if (v159[0])
  {
    v159[1] = v159[0];
    operator delete(v159[0]);
  }
  *(_OWORD *)v159 = *(_OWORD *)__p;
  *(_QWORD *)&v160 = *(_QWORD *)&__p[16];
  v93 = COERCE_DOUBLE(Phase::Controller::ProfileRegistry::GetComputeTime(*v55, (const Phase::StringId *)&v137));
  if (!v94)
    v93 = 0.0;
  *((double *)&v160 + 1) = v93;
  v95 = Phase::Controller::VoiceManager::Implementation::Initialize(**v72, (const Phase::Controller::VoiceManagerInitializeParameters *)buf, (Phase::Controller::VoiceManager *)*v72);
  if (!HIDWORD(v95) && (_BYTE)v95)
  {
    v128 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v95) + 432));
    if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = "PHASEEngineImpl.mm";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 462;
      _os_log_impl(&dword_2164CC000, v128, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [result != ErrorCode::Okay is true]: \"Failed to Initialize Controller Voice Manager.\"", __p, 0x12u);
    }
    v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v129, "Failed to Initialize Controller Voice Manager.");
  }
  v96 = *((_QWORD *)v133 + 33);
  v97 = (std::string *)*((_QWORD *)v133 + 12);
  if (*((_QWORD *)v133 + 13) - (_QWORD)v97 <= 0x100uLL)
  {
    std::vector<std::any>::resize(v132, 9uLL);
    v97 = *v132;
  }
  if (!v97[10].__r_.__value_.__r.__words[2])
  {
    *(_QWORD *)__p = std::__any_imp::_SmallHandler<Phase::Controller::VoiceManager *>::__handle[abi:ne180100];
    *(_QWORD *)&__p[8] = v96;
    if (__p != (_BYTE *)&v97[10].__r_.__value_.__r.__words[2])
    {
      v97[10].__r_.__value_.__r.__words[2] = (std::string::size_type)std::__any_imp::_SmallHandler<Phase::Controller::VoiceManager *>::__handle[abi:ne180100];
      v97[11].__r_.__value_.__r.__words[0] = v96;
      *(_QWORD *)__p = 0;
    }
    std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))__p);
  }
  v98 = *v72;
  v99 = *v55;
  v100 = *v130;
  v101 = (Phase::Controller::LoadBalancer *)operator new();
  Phase::Controller::LoadBalancer::LoadBalancer(v101, (const char **)&v137, (Phase::Controller::VoiceManager *)v98, v99, v100);
  std::unique_ptr<Phase::Controller::LoadBalancer>::reset[abi:ne180100]((Phase::Controller::LoadBalancer **)v133 + 34, v101);
  Phase::Controller::SystemAudioIO::AudioIOBase::GetRenderedChannelLayout(*(Phase::Controller::SystemAudioIO::AudioIOBase **)(**((_QWORD **)v133 + 33) + 688), &v136);
  v102 = objc_alloc(MEMORY[0x24BDB17E8]);
  v103 = (void *)objc_msgSend(v102, "initWithLayout:", v136.__begin_);
  v104 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1818]), "initStandardFormatWithSampleRate:channelLayout:", v103, *((double *)v133 + 1));
  v105 = (Phase::Logger *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)**v72 + 86) + 112))(*((_QWORD *)**v72 + 86));
  v106 = v105;
  v107 = *((_QWORD *)v133 + 2) == 3 && *(_BYTE *)(Phase::Logger::GetInstancePtr(v105) + 1568) != 0;
  v108 = -[ExternalStreamManager initWithTaskManager:engineMode:engineFormat:maximumFramesToRender:enableAudioIssueDetector:]([ExternalStreamManager alloc], "initWithTaskManager:engineMode:engineFormat:maximumFramesToRender:enableAudioIssueDetector:", v131, *((_QWORD *)v133 + 2), v104, v106, v107);
  v109 = (void *)*((_QWORD *)v133 + 62);
  *((_QWORD *)v133 + 62) = v108;

  v110 = *((id *)v133 + 62);
  v111 = (std::string *)*((_QWORD *)v133 + 12);
  if (*((_QWORD *)v133 + 13) - (_QWORD)v111 <= 0x1E0uLL)
  {
    std::vector<std::any>::resize(v132, 0x10uLL);
    v111 = *v132;
  }
  if (!v111[20].__r_.__value_.__r.__words[0])
  {
    v112 = v111 + 20;
    v113 = v110;
    v163 = std::__any_imp::_SmallHandler<ExternalStreamManager * {__strong}>::__handle[abi:ne180100];
    v164 = v113;
    if (&v163 != (void (**)(uint64_t))&v111[20])
    {
      v114 = (void (*)(uint64_t, std::string *, _BYTE *, _QWORD, _QWORD))v112->__r_.__value_.__r.__words[0];
      if (v112->__r_.__value_.__r.__words[0])
      {
        *(_QWORD *)__p = 0;
        *(_QWORD *)&__p[8] = 0;
        v114(2, v111 + 20, __p, 0, 0);
        ((void (*)(uint64_t, void (**)(uint64_t), std::string *, _QWORD, _QWORD))v163)(2, &v163, &v111[20], 0, 0);
        (*(void (**)(uint64_t, _BYTE *, void (**)(uint64_t), _QWORD, _QWORD))__p)(2, __p, &v163, 0, 0);
        std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))__p);
      }
      else
      {
        v111[20].__r_.__value_.__r.__words[0] = (std::string::size_type)std::__any_imp::_SmallHandler<ExternalStreamManager * {__strong}>::__handle[abi:ne180100];
        v111[20].__r_.__value_.__l.__size_ = (std::string::size_type)v113;
        v163 = 0;
        v164 = 0;
      }
    }
    std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v163);
  }

  objc_storeWeak((id *)(*((_QWORD *)v133 + 42) + 24), *((id *)v133 + 62));
  if (*((_QWORD *)v133 + 2) == 3)
    *((_QWORD *)v133 + 67) = 0x404E000000000000;

  if (v136.__begin_)
  {
    v136.__end_ = v136.__begin_;
    operator delete(v136.__begin_);
  }
  if (!v139)
    free(v138);
  if (v159[0])
  {
    v159[1] = v159[0];
    operator delete(v159[0]);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v156[8]);

  return std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v150[4]);
}

void sub_21663A30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  void *v62;
  void *v63;

  __cxa_guard_abort(&qword_254E44938);

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(a12);
  _Unwind_Resume(a1);
}

void PHASEEngineImpl::UpdateFrame(PHASEEngineImpl *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  Phase::Logger *v6;
  Phase::Logger *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  float v13;
  float v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  Phase::Logger *v19;
  uint64_t v20;
  Phase::Logger *v21;
  NSObject *v22;
  NSObject *v23;
  Phase::Logger *v24;
  Phase::Logger *v25;
  NSObject *v26;
  NSObject *v27;
  const char *v28;
  const char *v29;
  uint64_t InstancePtr;
  Phase::Logger *v31;
  NSObject *v32;
  NSObject *v33;
  Phase::Logger *v34;
  Phase::Logger *v35;
  NSObject *v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  Phase::Logger *v41;
  NSObject *v42;
  uint64_t v43;
  uint8_t buf[16];
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 2);
  switch(v4)
  {
    case 2:
      InstancePtr = Phase::Logger::GetInstancePtr((Phase::Logger *)this);
      v6 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 992));
      v31 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v6);
      if (*((_BYTE *)v31 + 1000))
      {
        v32 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v31)
                                                                                            + 992)));
        v33 = v32;
        if ((unint64_t)v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v32))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = this;
          _os_signpost_emit_with_name_impl(&dword_2164CC000, v33, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v6, "Phase_Client_Engine_Update", "impl@%p Client Engine Update Start", buf, 0xCu);
        }

      }
      PHASEEngineImpl::UpdateFrameClient(this, a2);
      v35 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v34);
      if (*((_BYTE *)v35 + 1000))
      {
        v36 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v35)
                                                                                            + 992)));
        v27 = v36;
        if ((unint64_t)v6 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v36))
          goto LABEL_47;
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = this;
        v28 = "Phase_Client_Engine_Update";
        v29 = "impl@%p Client Engine Update Finish";
        goto LABEL_46;
      }
      break;
    case 1:
      v20 = Phase::Logger::GetInstancePtr((Phase::Logger *)this);
      v6 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(v20 + 992));
      v21 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v6);
      if (*((_BYTE *)v21 + 1000))
      {
        v22 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v21)
                                                                                            + 992)));
        v23 = v22;
        if ((unint64_t)v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v22))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = this;
          _os_signpost_emit_with_name_impl(&dword_2164CC000, v23, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v6, "Phase_Client_Engine_Update", "impl@%p Client Engine Update Start", buf, 0xCu);
        }

      }
      PHASEEngineImpl::UpdateFrameClient(this, a2);
      v25 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v24);
      if (*((_BYTE *)v25 + 1000))
      {
        v26 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v25)
                                                                                            + 992)));
        v27 = v26;
        if ((unint64_t)v6 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v26))
          goto LABEL_47;
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = this;
        v28 = "Phase_Client_Engine_Update";
        v29 = "impl@%p Client Engine Update Finish";
        goto LABEL_46;
      }
      break;
    case 0:
      v5 = Phase::Logger::GetInstancePtr((Phase::Logger *)this);
      v6 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(v5 + 976));
      v7 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v6);
      if (*((_BYTE *)v7 + 984))
      {
        v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7)
                                                                                           + 976)));
        v9 = v8;
        if ((unint64_t)v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = this;
          _os_signpost_emit_with_name_impl(&dword_2164CC000, v9, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v6, "Phase_Engine_Update", "impl@%p Engine Update Start", buf, 0xCu);
        }

      }
      v10 = *(_QWORD *)(*((_QWORD *)this + 26) + 2400);
      *(_QWORD *)(v10 + 2736) = pthread_self();
      Phase::Controller::SpatializerManager::Update(*((Phase::Controller::SpatializerManager **)this + 36), a2);
      Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands(*((_QWORD *)this + 35));
      if (*((_QWORD *)this + 44))
      {
        v11 = atomic_load((unint64_t *)this + 3);
        if (v11 == 1)
        {
          v12 = a2;
          Phase::Controller::SharedEntityManager::Update(*((Phase::Controller::SharedEntityManager **)this + 44), v12);
        }
      }
      v13 = a2;
      Phase::Controller::ListenerManager::Update(*((id ****)this + 45), v13);
      v14 = a2;
      Phase::Geometry::SystemScheduler::Update((Phase::Geometry::SystemScheduler *)(*((_QWORD *)this + 26) + 2352), v14);
      if (*((_QWORD *)this + 43))
      {
        v15 = atomic_load((unsigned __int8 *)&qword_254E44938);
        if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254E44938))
        {
          _MergedGlobals_19 = _os_feature_enabled_impl();
          __cxa_guard_release(&qword_254E44938);
        }
        if (_MergedGlobals_19)
          Phase::Controller::RoomCongruenceManager::Update(*((id **)this + 43));
      }
      Phase::Controller::LoadBalancer::Update(*((Phase::Controller::LoadBalancer **)this + 34));
      PHASEEngineImpl::UpdateFrameClient(this, a2);
      v16 = *((_QWORD *)this + 50);
      v17 = (uint64_t *)*((_QWORD *)this + 41);
      v18 = *(_QWORD *)(v16 + 480);
      v17[6] = *(_QWORD *)(v16 + 472);
      v17[7] = v18;
      v17 += 6;
      v17[2] = 0;
      Phase::MessagePipeReader<Phase::ActionTreeServerCommand>::Execute(v17, v17 - 5);
      if (*(_QWORD *)(v16 + 472))
      {
        *(_QWORD *)(v16 + 480) = 0;
      }
      else
      {
        v19 = *(Phase::Logger **)(v16 + 528);
        if (v19)
        {
          *(_OWORD *)buf = 0u;
          v45 = 0u;
          v43 = 0;
          v19 = (Phase::Logger *)(*(uint64_t (**)(Phase::Logger *, uint64_t, uint8_t *, uint64_t *))(*(_QWORD *)v19 + 48))(v19, v16 + 472, buf, &v43);
          v37 = v45;
          *(_OWORD *)(v16 + 472) = *(_OWORD *)buf;
          *(_OWORD *)(v16 + 488) = v37;
        }
      }
      v38 = *((_QWORD *)this + 41);
      if (*(_QWORD *)(v38 + 200))
      {
        objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", *(_QWORD *)(v38 + 192));
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        Phase::Dispatch::ClientTransactionManager::AddTransaction(*((id **)this + 50), 0, v39);
        Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::Clear(*((_QWORD *)this + 41) + 192);

      }
      v40 = atomic_load((unint64_t *)this + 3);
      if (v40 == 1)
        v19 = (Phase::Logger *)Phase::Controller::VoiceManager::Implementation::Update(**((Phase::Controller::VoiceManager::Implementation ***)this + 33), a2);
      v41 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v19);
      if (*((_BYTE *)v41 + 984))
      {
        v42 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v41)
                                                                                            + 976)));
        v27 = v42;
        if ((unint64_t)v6 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v42))
          goto LABEL_47;
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = this;
        v28 = "Phase_Engine_Update";
        v29 = "impl@%p Engine Update Finish";
LABEL_46:
        _os_signpost_emit_with_name_impl(&dword_2164CC000, v27, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v6, v28, v29, buf, 0xCu);
LABEL_47:

      }
      break;
  }
}

void sub_21663AC4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254E44938);
  _Unwind_Resume(a1);
}

_QWORD *Phase::Controller::TaskManager::RegisterService<Phase::Controller::ClientTapRegistryProxy>(_QWORD *result, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t (*v5[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v5[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  v3 = result[6];
  v4 = result + 6;
  if ((unint64_t)(result[7] - v3) <= 0x200)
  {
    result = std::vector<std::any>::resize(result + 6, 0x11uLL);
    v3 = *v4;
  }
  if (!*(_QWORD *)(v3 + 512))
  {
    v5[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__any_imp::_SmallHandler<Phase::Controller::ClientTapRegistryProxy *>::__handle[abi:ne180100];
    v5[1] = a2;
    if (v5 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v3 + 512))
    {
      *(_QWORD *)(v3 + 520) = a2;
      *(_QWORD *)(v3 + 512) = std::__any_imp::_SmallHandler<Phase::Controller::ClientTapRegistryProxy *>::__handle[abi:ne180100];
      v5[0] = 0;
    }
    return std::any::reset[abi:ne180100](v5);
  }
  return result;
}

Phase::Geometry::System *std::unique_ptr<Phase::Geometry::System>::reset[abi:ne180100](Phase::Geometry::System **a1, Phase::Geometry::System *a2)
{
  Phase::Geometry::System *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Geometry::System::~System(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void Phase::SpatialModeler::ReverbPresetFile::~ReverbPresetFile(void **this)
{
  void **v2;

  v2 = this + 6;
  std::vector<Phase::SpatialModeler::ReverbPresetFile::ReflectionEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<Phase::SpatialModeler::ReverbPresetFile::ReflectionEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void Phase::Controller::VoiceManagerInitializeParameters::~VoiceManagerInitializeParameters(Phase::Controller::VoiceManagerInitializeParameters *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 72);

}

void PHASEEngineImpl::~PHASEEngineImpl(PHASEEngineImpl *this)
{
  Phase::Logger *v2;
  int v3;
  NSObject *v4;
  Phase::Logger *v5;
  int v6;
  NSObject *v7;
  Phase::Controller::VoiceManager::Implementation **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[12];
  __int16 v24;
  int v25;
  __int16 v26;
  PHASEEngineImpl *v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  PHASEEngineImpl::Stop(this);
  if (*((_BYTE *)this + 36))
  {
    v2 = (Phase::Logger *)CACentralStateDumpUnregisterSubsystem();
    v3 = (int)v2;
    if ((_DWORD)v2)
    {
      v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v2) + 432));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v23 = 136315906;
        *(_QWORD *)&v23[4] = "PHASEEngineImpl.mm";
        v24 = 1024;
        v25 = 508;
        v26 = 2048;
        v27 = this;
        v28 = 1024;
        v29 = v3;
        _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: failed to unregister client state dump: %d", v23, 0x22u);
      }
    }
  }
  if (*((_BYTE *)this + 44))
  {
    v5 = (Phase::Logger *)CACentralStateDumpUnregisterSubsystem();
    v6 = (int)v5;
    if ((_DWORD)v5)
    {
      v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v5) + 432));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v23 = 136315906;
        *(_QWORD *)&v23[4] = "PHASEEngineImpl.mm";
        v24 = 1024;
        v25 = 518;
        v26 = 2048;
        v27 = this;
        v28 = 1024;
        v29 = v6;
        _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: failed to unregister server state dump: %d", v23, 0x22u);
      }
    }
  }
  v8 = (Phase::Controller::VoiceManager::Implementation **)*((_QWORD *)this + 33);
  if (v8)
    Phase::Controller::VoiceManager::Implementation::Destroy(*v8);
  std::unique_ptr<Phase::Dispatch::ClientTransactionManager>::reset[abi:ne180100]((uint64_t *)this + 50, 0);
  std::unique_ptr<Phase::ActionTreeServerCommandProcessor>::reset[abi:ne180100]((Phase::ActionTreeServerCommandProcessor **)this + 41, 0);
  Phase::Controller::TaskManager::ClearServiceRegistry((Phase::Controller::TaskManager *)((char *)this + 48));
  Phase::Controller::TaskManager::ResetUpdateFunction((Phase::Controller::TaskManager *)((char *)this + 48));
  objc_storeWeak((id *)this, 0);
  *(_QWORD *)v23 = (char *)this + 544;
  std::vector<Phase::Controller::GeometryPermutation>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);

  v9 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::unique_ptr<Phase::TapSourceRegistry>::reset[abi:ne180100]((uint64_t *)this + 60, 0);
  std::unique_ptr<Phase::Controller::ClientTapRegistryProxy>::reset[abi:ne180100]((Phase::Controller::ClientTapRegistryProxy **)this + 59, 0);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 432);
  v10 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  std::unique_ptr<Phase::Dispatch::ClientTransactionManager>::reset[abi:ne180100]((uint64_t *)this + 50, 0);
  v13 = (_QWORD *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v13)
    std::default_delete<Phase::ActionTreeManager>::operator()[abi:ne180100](v13);
  v14 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v15 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v15)
    std::default_delete<Phase::Controller::AssetUnloader>::operator()[abi:ne180100](v15);
  v16 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  std::unique_ptr<Phase::Controller::SharedEntityManager>::reset[abi:ne180100]((uint64_t *)this + 44, 0);
  std::unique_ptr<Phase::Controller::RoomCongruenceManager>::reset[abi:ne180100]((Phase::Controller::RoomCongruenceManager **)this + 43, 0);
  std::unique_ptr<Phase::Controller::SessionManager>::reset[abi:ne180100]((id **)this + 42, 0);
  std::unique_ptr<Phase::ActionTreeServerCommandProcessor>::reset[abi:ne180100]((Phase::ActionTreeServerCommandProcessor **)this + 41, 0);
  std::unique_ptr<Phase::Controller::StatisticsDatabase>::reset[abi:ne180100]((id ***)this + 40, 0);
  v18 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v18)
    MEMORY[0x2199F9D70](v18, 0x1000C4077B8E174);
  std::unique_ptr<Phase::SpatialModeler::ReverbPresetDatabase>::reset[abi:ne180100]((Phase::SpatialModeler::ReverbPresetDatabase::Implementation ***)this + 38, 0);
  v19 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
  std::unique_ptr<Phase::Controller::SpatializerManager>::reset[abi:ne180100]((Phase::Controller::SpatializerManager **)this + 36, 0);
  v20 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
  std::unique_ptr<Phase::Controller::LoadBalancer>::reset[abi:ne180100]((Phase::Controller::LoadBalancer **)this + 34, 0);
  std::unique_ptr<Phase::Controller::VoiceManager>::reset[abi:ne180100]((Phase::Controller::VoiceManager::Implementation ***)this + 33, 0);
  v21 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v21)
    MEMORY[0x2199F9D70](v21, 0x1000C405A0DE52CLL);
  std::unique_ptr<Phase::Controller::ProfileRegistry>::reset[abi:ne180100]((uint64_t *)this + 31, 0);
  std::unique_ptr<Phase::Controller::SpatialModelerRegistry>::reset[abi:ne180100]((uint64_t *)this + 30, 0);
  std::unique_ptr<Phase::Controller::ProcedureRegistry>::reset[abi:ne180100]((uint64_t *)this + 29, 0);
  v22 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
  std::unique_ptr<Phase::Controller::IR::IRBuilder>::reset[abi:ne180100]((Phase::Controller::IR::IRBuilder **)this + 27, 0);
  std::unique_ptr<Phase::Geometry::System>::reset[abi:ne180100]((Phase::Geometry::System **)this + 26, 0);
  Phase::Controller::TaskManager::~TaskManager((Phase::Controller::TaskManager **)this + 6);
  objc_destroyWeak((id *)this);
}

void sub_21663B244(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void PHASEEngineImpl::Stop(PHASEEngineImpl *this)
{
  NSObject *v3;
  Phase::Controller::VoiceManager::Implementation **v4;
  unint64_t v5;
  BOOL v6;
  Phase::ActionTreeManager *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  std::runtime_error *exception;
  NSObject *v14;
  std::runtime_error *v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (atomic_load((unint64_t *)this + 3))
  {
    v3 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)this) + 432));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 136315394;
      v17 = "PHASEEngineImpl.mm";
      v18 = 1024;
      v19 = 912;
      _os_log_impl(&dword_2164CC000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PHASEEngine stopping", (uint8_t *)&v16, 0x12u);
    }
    *((_BYTE *)this + 528) = 1;
    Phase::Controller::TaskManager::StopUpdateLoop((Phase::Controller::TaskManager *)((char *)this + 48));
    v4 = (Phase::Controller::VoiceManager::Implementation **)*((_QWORD *)this + 33);
    if (v4)
    {
      v5 = Phase::Controller::VoiceManager::Implementation::Stop(*v4);
      if (HIDWORD(v5))
        v6 = 1;
      else
        v6 = v5 == 0;
      if (!v6)
      {
        v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v5) + 480));
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v16 = 136315394;
          v17 = "PHASEEngineImpl.mm";
          v18 = 1024;
          v19 = 922;
          _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: result.IsOkay() is false.", (uint8_t *)&v16, 0x12u);
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "POSTCONDITION: result.IsOkay() is false.");
      }
      if (atomic_load(**((unsigned __int8 ***)this + 33)))
      {
        v14 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v5) + 480));
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          v16 = 136315394;
          v17 = "PHASEEngineImpl.mm";
          v18 = 1024;
          v19 = 923;
          _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: mpVoiceManager->GetState() == State::Stopped is false.", (uint8_t *)&v16, 0x12u);
        }
        v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v15, "POSTCONDITION: mpVoiceManager->GetState() == State::Stopped is false.");
      }
    }
    v8 = (Phase::ActionTreeManager *)*((_QWORD *)this + 49);
    if (v8)
      Phase::ActionTreeManager::Reset(v8);
    v9 = *((_QWORD *)this + 48);
    if (v9 && *(int *)(v9 + 16) >= 1)
    {
      v10 = 0;
      do
        Phase::CommandQueue<Phase::LockFreeQueueMPSC>::Reset(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v10++));
      while (v10 < *(int *)(v9 + 16));
    }
    atomic_store(0, (unint64_t *)this + 3);
    *((_BYTE *)this + 528) = 0;
  }
}

void sub_21663B4F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<Phase::Dispatch::ClientTransactionManager>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 528);
    if (v3 == (_QWORD *)(v2 + 504))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 504);
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    v5 = *(void **)(v2 + 448);
    if (v5)
    {
      *(_QWORD *)(v2 + 456) = v5;
      operator delete(v5);
    }
    *(_QWORD *)(v2 + 352) = &off_24D57AD08;

    std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v2 + 360);
    *(_QWORD *)(v2 + 264) = &off_24D57AC90;

    std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v2 + 272);
    *(_QWORD *)(v2 + 176) = &off_24D57ACE0;

    std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v2 + 184);
    *(_QWORD *)(v2 + 88) = &off_24D576C70;

    std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v2 + 96);
    *(_QWORD *)v2 = &off_24D57ACB8;

    std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v2 + 8);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

Phase::ActionTreeServerCommandProcessor *std::unique_ptr<Phase::ActionTreeServerCommandProcessor>::reset[abi:ne180100](Phase::ActionTreeServerCommandProcessor **a1, Phase::ActionTreeServerCommandProcessor *a2)
{
  Phase::ActionTreeServerCommandProcessor *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::ActionTreeServerCommandProcessor::~ActionTreeServerCommandProcessor(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void PHASEEngineImpl::UpdateFrameClient(PHASEEngineImpl *this, double a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t i;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 46) + 552))(*((_QWORD *)this + 46));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 51) + 72))(*((_QWORD *)this + 51));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 52) + 96))(*((_QWORD *)this + 52));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 53) + 80))(*((_QWORD *)this + 53));
  v4 = *((_QWORD *)this + 61);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  Phase::Controller::AssetUnloader::Update(*((Phase::Controller::AssetUnloader **)this + 47));
  v5 = atomic_load((unint64_t *)this + 3);
  if (v5 == 1)
  {
    Phase::Dispatch::TransactionExecutor<Phase::Dispatch::GeometryServerMessageType>::ExecuteTransactions(*((_QWORD *)this + 50));
    Phase::Dispatch::TransactionExecutor<Phase::Dispatch::ExternalStreamServerMessageType>::ExecuteTransactions(*((_QWORD *)this + 50) + 264);
    Phase::Dispatch::TransactionExecutor<Phase::Dispatch::MiscServerMessageType>::ExecuteTransactions(*((_QWORD *)this + 50) + 176);
    Phase::Dispatch::TransactionExecutor<Phase::Dispatch::TapsServerMessageType>::ExecuteTransactions(*((_QWORD *)this + 50) + 352);
    Phase::Dispatch::TransactionExecutor<Phase::ActionTreeClientCommand>::ExecuteTransactions(*((_QWORD *)this + 50) + 88);
    if (*((_QWORD *)this + 57))
    {
      v6 = (_QWORD *)*((_QWORD *)this + 56);
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      *((_QWORD *)this + 56) = 0;
      v8 = *((_QWORD *)this + 55);
      if (v8)
      {
        for (i = 0; i != v8; ++i)
          *(_QWORD *)(*((_QWORD *)this + 54) + 8 * i) = 0;
      }
      *((_QWORD *)this + 57) = 0;
    }
    Phase::ActionTreeManager::GetActiveGroups(*((_QWORD **)this + 49), (uint64_t)this + 432);
    Phase::Controller::GroupManager::Update(*((_QWORD *)this + 37), (_QWORD *)this + 54, a2);
    Phase::GlobalMetaParameterManager::Update(*((Phase::GlobalMetaParameterManager **)this + 48), a2);
    Phase::ActionTreeManager::UpdateActionTrees(*((Phase::Logger **)this + 49), (_QWORD *)(*((_QWORD *)this + 50) + 472), a2);
  }
}

id PHASEEngineImpl::Start(PHASEEngineImpl *this, double a2)
{
  unint64_t v2;
  id v3;
  uint64_t v5;
  NSObject *v8;
  Phase::Logger *v9;
  id v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  id v14;
  NSObject *v16;
  std::runtime_error *exception;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  PHASEEngineImpl *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unint64_t *)this + 3);
  if (v2 != 1)
  {
    v5 = *((_QWORD *)this + 2);
    if (v5 != 3 && v5 != 0)
    {
      v16 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)this) + 432));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v19 = 136315394;
        v20 = "PHASEEngineImpl.mm";
        v21 = 1024;
        v22 = 839;
        _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Server type error starting PHASE system\"", (uint8_t *)&v19, 0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Server type error starting PHASE system");
    }
    v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)this) + 432));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 136315394;
      v20 = "PHASEEngineImpl.mm";
      v21 = 1024;
      v22 = 813;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PHASEEngine starting the voice manager", (uint8_t *)&v19, 0x12u);
    }
    v9 = (Phase::Logger *)Phase::Controller::VoiceManager::Implementation::Start(**((Phase::Controller::VoiceManager::Implementation ***)this + 33), 5.0);
    if ((_DWORD)v9)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), (int)v9, 0);
      v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());

      v3 = v10;
      goto LABEL_22;
    }
    if (*((_QWORD *)this + 63) == 1)
    {
      PHASEEngineImpl::UpdateFrame(this, 0.0);
    }
    else
    {
      if (a2 <= 0.0)
        std::terminate();
      v11 = *((double *)this + 24);
      *((double *)this + 67) = v11;
      if (*((_QWORD *)this + 22))
      {
        if (v11 != a2)
        {
          v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v9) + 432));
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v13 = *((_QWORD *)this + 67);
            v19 = 136316162;
            v20 = "PHASEEngineImpl.mm";
            v21 = 1024;
            v22 = 859;
            v23 = 2048;
            v24 = this;
            v25 = 2048;
            v26 = v13;
            v27 = 2048;
            v28 = a2;
            _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: engine already running in auto update mode at %ff Hz - new framerate %ff Hz ignored", (uint8_t *)&v19, 0x30u);
          }
        }
        goto LABEL_21;
      }
      Phase::Controller::TaskManager::StartUpdateLoop((Phase::Controller::TaskManager *)((char *)this + 48), a2);
    }
    *((double *)this + 67) = a2;
LABEL_21:
    v3 = 0;
    atomic_store(1uLL, (unint64_t *)this + 3);
    goto LABEL_22;
  }
  v3 = 0;
LABEL_22:
  v14 = v3;

  return v14;
}

void sub_21663BAA0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

PHASEEngineImpl *PHASEEngineImpl::Pause(PHASEEngineImpl *this)
{
  unint64_t v1;
  PHASEEngineImpl *v2;
  uint64_t v3;
  NSObject *v5;
  BOOL v6;
  NSObject *v7;
  std::runtime_error *v9;
  NSObject *v10;
  std::runtime_error *exception;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unint64_t *)this + 3);
  if (v1 == 1)
  {
    v2 = this;
    v3 = *((_QWORD *)this + 2);
    if (v3 != 3 && v3 != 0)
    {
      v10 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)this) + 432));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v13 = 136315394;
        v14 = "PHASEEngineImpl.mm";
        v15 = 1024;
        v16 = 901;
        _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Server type error pausing PHASE system\"", (uint8_t *)&v13, 0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Server type error pausing PHASE system");
    }
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)this) + 432));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 136315394;
      v14 = "PHASEEngineImpl.mm";
      v15 = 1024;
      v16 = 884;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PHASEEngine pausing", (uint8_t *)&v13, 0x12u);
    }
    this = (PHASEEngineImpl *)Phase::Controller::VoiceManager::Implementation::Pause(**((Phase::Controller::VoiceManager::Implementation ***)v2
                                                                                      + 33));
    if ((unint64_t)this >> 32)
      v6 = 1;
    else
      v6 = this == 0;
    if (!v6)
    {
      v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)this) + 480));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v13 = 136315394;
        v14 = "PHASEEngineImpl.mm";
        v15 = 1024;
        v16 = 888;
        _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: result.IsOkay() is false.", (uint8_t *)&v13, 0x12u);
      }
      v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v9, "POSTCONDITION: result.IsOkay() is false.");
    }
    atomic_store(2uLL, (unint64_t *)v2 + 3);
  }
  return this;
}

void sub_21663BD04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_impl<int,unsigned int &>(uint64_t a1, unsigned int a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *i;
  unint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  _BOOL8 v18;
  size_t v19;
  unint64_t v20;
  size_t v21;
  uint8x8_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = operator new(0x18uLL);
  v7 = v6;
  *((_DWORD *)v6 + 4) = a2;
  *((_DWORD *)v6 + 5) = a3;
  v8 = a2;
  *v6 = 0;
  v6[1] = a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = a2;
      if (v9 <= a2)
        v11 = a2 % v9;
    }
    else
    {
      v11 = ((_DWORD)v9 - 1) & a2;
    }
    v12 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v11);
    if (v12)
    {
      for (i = *v12; i; i = (uint64_t *)*i)
      {
        v14 = i[1];
        if (v14 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
          {
            operator delete(v6);
            return 0;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 2 * v9;
    v18 = v9 < 3 || (v9 & (v9 - 1)) != 0;
    v19 = v18 | v17;
    v20 = vcvtps_u32_f32(v15 / v16);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = v7[1];
  }
  v22 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    if (v8 >= v9)
      v8 %= v9;
  }
  else
  {
    v8 &= v9 - 1;
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v24)
  {
    *v7 = *v24;
LABEL_38:
    *v24 = v7;
    goto LABEL_39;
  }
  *v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(v23 + 8 * v8) = a1 + 16;
  if (*v7)
  {
    v25 = *(_QWORD *)(*v7 + 8);
    if (v22.u32[0] > 1uLL)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void sub_21663BF2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<Phase::SpatialModeler::ReverbPresetFile::ReflectionEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<Phase::SpatialModeler::ReverbPresetFile::ReflectionEntry>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<Phase::SpatialModeler::ReverbPresetFile::ReflectionEntry>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 24)
  {
    result = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (result)
      result = MEMORY[0x2199F9D4C](result, 0x1000C8052888210);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

Phase::Controller::IR::IRBuilder *std::unique_ptr<Phase::Controller::IR::IRBuilder>::reset[abi:ne180100](Phase::Controller::IR::IRBuilder **a1, Phase::Controller::IR::IRBuilder *a2)
{
  Phase::Controller::IR::IRBuilder *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::IR::IRBuilder::~IRBuilder(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t std::unique_ptr<Phase::Controller::ProcedureRegistry>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>>>::~__hash_table(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t std::unique_ptr<Phase::Controller::SpatialModelerRegistry>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>>>::~__hash_table(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t std::unique_ptr<Phase::Controller::ProfileRegistry>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::~__hash_table(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::__deallocate_node(uint64_t a1, void **a2)
{
  void **v2;
  void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (void **)*v2;
      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::~__hash_table((uint64_t)(v2 + 11));
      if (!*((_BYTE *)v2 + 56))
        free(v2[6]);
      v2[5] = 0;
      v2[6] = &str_33;
      *((_BYTE *)v2 + 56) = 1;
      if (!*((_BYTE *)v2 + 32))
        free(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<Phase::StringId const,Phase::Controller::ProfileRegistry::Category>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<Phase::StringId const,Phase::Controller::ProfileRegistry::Category>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>>>::~__hash_table(a1 + 80);
  if (!*(_BYTE *)(a1 + 64))
    free(*(void **)(a1 + 56));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &str_33;
  *(_BYTE *)(a1 + 64) = 1;
  if (!*(_BYTE *)(a1 + 40))
    free(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_33;
  *(_BYTE *)(a1 + 40) = 1;
  if (!*(_BYTE *)(a1 + 16))
    free(*(void **)(a1 + 8));
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = &str_33;
  *(_BYTE *)(a1 + 16) = 1;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>>>::__deallocate_node(uint64_t a1, void **a2)
{
  void **v2;
  void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (void **)*v2;
      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::~__hash_table((uint64_t)(v2 + 8));
      if (!*((_BYTE *)v2 + 56))
        free(v2[6]);
      v2[5] = 0;
      v2[6] = &str_33;
      *((_BYTE *)v2 + 56) = 1;
      if (!*((_BYTE *)v2 + 32))
        free(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::__deallocate_node(uint64_t a1, void **a2)
{
  void **v2;
  void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (void **)*v2;
      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::~__hash_table((uint64_t)(v2 + 8));
      if (!*((_BYTE *)v2 + 56))
        free(v2[6]);
      v2[5] = 0;
      v2[6] = &str_33;
      *((_BYTE *)v2 + 56) = 1;
      if (!*((_BYTE *)v2 + 32))
        free(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<Phase::StringId const,Phase::Controller::ProfileRegistry::Parameter>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<Phase::StringId const,Phase::Controller::ProfileRegistry::Parameter>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 48);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (!*(_BYTE *)(a1 + 40))
    free(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_33;
  *(_BYTE *)(a1 + 40) = 1;
  if (!*(_BYTE *)(a1 + 16))
    free(*(void **)(a1 + 8));
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = &str_33;
  *(_BYTE *)(a1 + 16) = 1;
}

Phase::Controller::VoiceManager::Implementation ***std::unique_ptr<Phase::Controller::VoiceManager>::reset[abi:ne180100](Phase::Controller::VoiceManager::Implementation ***result, Phase::Controller::VoiceManager::Implementation **a2)
{
  Phase::Controller::VoiceManager::Implementation **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<Phase::Controller::VoiceManager::Implementation>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

Phase::Controller::LoadBalancer *std::unique_ptr<Phase::Controller::LoadBalancer>::reset[abi:ne180100](Phase::Controller::LoadBalancer **a1, Phase::Controller::LoadBalancer *a2)
{
  Phase::Controller::LoadBalancer *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::LoadBalancer::~LoadBalancer(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

Phase::Controller::SpatializerManager *std::unique_ptr<Phase::Controller::SpatializerManager>::reset[abi:ne180100](Phase::Controller::SpatializerManager **a1, Phase::Controller::SpatializerManager *a2)
{
  Phase::Controller::SpatializerManager *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::SpatializerManager::~SpatializerManager(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

Phase::SpatialModeler::ReverbPresetDatabase::Implementation ***std::unique_ptr<Phase::SpatialModeler::ReverbPresetDatabase>::reset[abi:ne180100](Phase::SpatialModeler::ReverbPresetDatabase::Implementation ***result, Phase::SpatialModeler::ReverbPresetDatabase::Implementation **a2)
{
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<Phase::SpatialModeler::ReverbPresetDatabase::Implementation>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

id ***std::unique_ptr<Phase::Controller::StatisticsDatabase>::reset[abi:ne180100](id ***result, id **a2)
{
  id **v2;
  id *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      std::default_delete<Phase::Controller::StatisticsDatabase::Implementation>::operator()[abi:ne180100]((uint64_t)v2, v3);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

id *std::unique_ptr<Phase::Controller::SessionManager>::reset[abi:ne180100](id **a1, id *a2)
{
  id *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::SessionManager::~SessionManager(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

Phase::Controller::RoomCongruenceManager *std::unique_ptr<Phase::Controller::RoomCongruenceManager>::reset[abi:ne180100](Phase::Controller::RoomCongruenceManager **a1, Phase::Controller::RoomCongruenceManager *a2)
{
  Phase::Controller::RoomCongruenceManager *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::RoomCongruenceManager::~RoomCongruenceManager(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t *std::unique_ptr<Phase::Controller::SharedEntityManager>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<Phase::Controller::HeadTracker>::reset[abi:ne180100]((CFTypeRef ***)(v2 + 152), 0);
    v3 = *(void **)(v2 + 136);
    *(_QWORD *)(v2 + 136) = 0;

    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v2 + 88);
    std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::~__hash_table(v2 + 40);
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v2);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

CFTypeRef **std::unique_ptr<Phase::Controller::HeadTracker>::reset[abi:ne180100](CFTypeRef ***a1, CFTypeRef **a2)
{
  CFTypeRef **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::HeadTracker::~HeadTracker(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void std::default_delete<Phase::Controller::AssetUnloader>::operator()[abi:ne180100](uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 104));
  std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear((_QWORD *)(a1 + 64));
  std::__list_imp<Phase::Controller::AssetUnloader::UnloadRequest>::clear((_QWORD *)(a1 + 40));
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable((_QWORD *)a1);
  JUMPOUT(0x2199F9D70);
}

void std::default_delete<Phase::ActionTreeManager>::operator()[abi:ne180100](_QWORD *a1)
{
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::~guarded_lookup_hash_table((uint64_t)(a1 + 10));
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::~__hash_table((uint64_t)(a1 + 5));
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(a1);
  JUMPOUT(0x2199F9D70);
}

Phase::Controller::ClientTapRegistryProxy *std::unique_ptr<Phase::Controller::ClientTapRegistryProxy>::reset[abi:ne180100](Phase::Controller::ClientTapRegistryProxy **a1, Phase::Controller::ClientTapRegistryProxy *a2)
{
  Phase::Controller::ClientTapRegistryProxy *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::ClientTapRegistryProxy::~ClientTapRegistryProxy(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t *std::unique_ptr<Phase::TapSourceRegistry>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,PHASETapStreamType>,std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,PHASETapStreamType>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(*(_QWORD **)(v2 + 168));
    std::__tree<std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,std::string>,std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,std::string>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(*(char **)(v2 + 144));
    std::__tree<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,PHASETapStreamType>,std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,PHASETapStreamType>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(*(_QWORD **)(v2 + 120));
    std::__tree<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,PHASETapStreamType>,std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,PHASETapStreamType>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(*(_QWORD **)(v2 + 96));
    std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::~__hash_table(v2 + 48);
    std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::~__hash_table(v2 + 8);
    objc_destroyWeak((id *)v2);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void std::__tree<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,PHASETapStreamType>,std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,PHASETapStreamType>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(_QWORD *a1)
{
  id *v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,PHASETapStreamType>,std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,PHASETapStreamType>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,PHASETapStreamType>,std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,PHASETapStreamType>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(a1[1]);
    v2 = (id *)a1[6];
    a1[6] = 0;
    if (v2)
      std::default_delete<Phase::TapSourceRegistry::TapSourceInfo>::operator()[abi:ne180100]((uint64_t)(a1 + 6), v2);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,std::string>,std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,std::string>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(char *a1)
{
  id *v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,std::string>,std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,std::string>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,std::string>,std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,std::string>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (id *)*((_QWORD *)a1 + 8);
    *((_QWORD *)a1 + 8) = 0;
    if (v2)
      std::default_delete<Phase::TapSourceRegistry::TapSourceInfo>::operator()[abi:ne180100]((uint64_t)(a1 + 64), v2);
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  id *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (id *)v2[3];
      v2[3] = 0;
      if (v4)
        std::default_delete<Phase::TapSourceRegistry::TapSourceInfo>::operator()[abi:ne180100]((uint64_t)(v2 + 3), v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void std::__function::__func<std::__bind<void (PHASEEngineImpl::*)(double),PHASEEngineImpl*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (PHASEEngineImpl::*)(double),PHASEEngineImpl*,std::placeholders::__ph<1> const&>>,void ()(double)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<std::__bind<void (PHASEEngineImpl::*)(double),PHASEEngineImpl*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (PHASEEngineImpl::*)(double),PHASEEngineImpl*,std::placeholders::__ph<1> const&>>,void ()(double)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D57F2F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (PHASEEngineImpl::*)(double),PHASEEngineImpl*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (PHASEEngineImpl::*)(double),PHASEEngineImpl*,std::placeholders::__ph<1> const&>>,void ()(double)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D57F2F0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (PHASEEngineImpl::*)(double),PHASEEngineImpl*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (PHASEEngineImpl::*)(double),PHASEEngineImpl*,std::placeholders::__ph<1> const&>>,void ()(double)>::operator()(_QWORD *a1, double *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, double);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, double))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, double))(*v4 + v3);
  return v3(v4, *a2);
}

void std::__any_imp::_SmallHandler<PHASEAssetRegistry * {__strong}>::__handle[abi:ne180100](uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_21663CA90()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  uint64_t result;

  v2 = *(id *)(v0 + 8);
  result = 0;
  *v1 = std::__any_imp::_SmallHandler<PHASEAssetRegistry * {__strong}>::__handle[abi:ne180100];
  v1[1] = v2;
  return result;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Controller::ClientTapRegistryProxy *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663CB1C + 4 * byte_216739E05[a1]))(0);
}

uint64_t sub_21663CB1C(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663CB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::ClientTapRegistryProxy *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::TapSourceRegistry *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663CB94 + 4 * byte_216739E0A[a1]))(0);
}

uint64_t sub_21663CB94(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663CBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::TapSourceRegistry *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

void Phase::GlobalMetaParameterManager::~GlobalMetaParameterManager(id *this)
{
  *this = off_24D57F338;
  std::__hash_table<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>>>::~__hash_table((uint64_t)(this + 6));

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  *this = off_24D57F338;
  std::__hash_table<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>>>::~__hash_table((uint64_t)(this + 6));

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
  JUMPOUT(0x2199F9D70);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>>>::~__hash_table(uint64_t a1)
{
  id *v2;
  id *v3;
  void *v4;

  v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (id *)*v2;
      objc_destroyWeak(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__any_imp::_SmallHandler<Phase::GlobalMetaParameterManager *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663CCEC + 4 * byte_216739E0F[a1]))(0);
}

uint64_t sub_21663CCEC(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663CD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::GlobalMetaParameterManager *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Controller::GroupManager *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663CD64 + 4 * byte_216739E14[a1]))(0);
}

uint64_t sub_21663CD64(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663CDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::GroupManager *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::ActionTreeManager *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663CDDC + 4 * byte_216739E19[a1]))(0);
}

uint64_t sub_21663CDDC(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663CE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::ActionTreeManager *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Controller::AssetUnloader *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663CE54 + 4 * byte_216739E1E[a1]))(0);
}

uint64_t sub_21663CE54(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663CE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::AssetUnloader *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Controller::VoicePoolRegistry *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663CECC + 4 * byte_216739E23[a1]))(0);
}

uint64_t sub_21663CECC(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663CF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::VoicePoolRegistry *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Controller::ProcedureRegistry *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663CF44 + 4 * byte_216739E28[a1]))(0);
}

uint64_t sub_21663CF44(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663CF80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::ProcedureRegistry *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Geometry::System *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663CFBC + 4 * byte_216739E2D[a1]))(0);
}

uint64_t sub_21663CFBC(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663CFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Geometry::System *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Controller::SharedEntityManager *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663D034 + 4 * byte_216739E32[a1]))(0);
}

uint64_t sub_21663D034(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663D070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::SharedEntityManager *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Controller::ListenerManager *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663D0AC + 4 * byte_216739E37[a1]))(0);
}

uint64_t sub_21663D0AC(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663D0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::ListenerManager *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Controller::SpatialModelerRegistry *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663D124 + 4 * byte_216739E3C[a1]))(0);
}

uint64_t sub_21663D124(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663D160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::SpatialModelerRegistry *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Controller::SpatializerManager *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663D19C + 4 * byte_216739E41[a1]))(0);
}

uint64_t sub_21663D19C(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663D1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::SpatializerManager *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Controller::DeviceManager *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663D214 + 4 * byte_216739E46[a1]))(0);
}

uint64_t sub_21663D214(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663D250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::DeviceManager *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Controller::IR::IRBuilder *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663D28C + 4 * byte_216739E4B[a1]))(0);
}

uint64_t sub_21663D28C(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663D2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::IR::IRBuilder *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Controller::StatisticsDatabase *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663D304 + 4 * byte_216739E50[a1]))(0);
}

uint64_t sub_21663D304(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663D340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::StatisticsDatabase *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Controller::CalibrationManager *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663D37C + 4 * byte_216739E55[a1]))(0);
}

uint64_t sub_21663D37C(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663D3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::CalibrationManager *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Controller::SessionManager *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663D3F4 + 4 * byte_216739E5A[a1]))(0);
}

uint64_t sub_21663D3F4(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663D430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::SessionManager *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Controller::RoomCongruenceManager *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663D46C + 4 * byte_216739E5F[a1]))(0);
}

uint64_t sub_21663D46C(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663D4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::RoomCongruenceManager *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t std::__any_imp::_SmallHandler<Phase::Controller::VoiceManager *>::__handle[abi:ne180100](uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_21663D4E4 + 4 * byte_216739E64[a1]))(0);
}

uint64_t sub_21663D4E4(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_21663D520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::VoiceManager *>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

void std::__any_imp::_SmallHandler<ExternalStreamManager * {__strong}>::__handle[abi:ne180100](uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_21663D570()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  uint64_t result;

  v2 = *(id *)(v0 + 8);
  result = 0;
  *v1 = std::__any_imp::_SmallHandler<ExternalStreamManager * {__strong}>::__handle[abi:ne180100];
  v1[1] = v2;
  return result;
}

const __CFString *GetCalibrationModeString(PHASECalibrationMode a1)
{
  const __CFString *v1;

  v1 = CFSTR("none");
  if (a1 == PHASECalibrationModeRelativeSpl)
    v1 = CFSTR("relative_spl");
  if (a1 == PHASECalibrationModeAbsoluteSpl)
    return CFSTR("absolute_spl");
  else
    return v1;
}

const __CFString *GetCullOptionString(PHASECullOption a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("terminate");
  else
    return off_24D57F358[a1 - 1];
}

uint64_t GetCullOption(NSString *a1)
{
  NSString *v1;
  uint64_t v2;

  v1 = a1;
  if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("terminate")))
  {
    v2 = 0;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("sleep_wake_at_zero")))
  {
    v2 = 1;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("sleep_wake_at_random_offset")))
  {
    v2 = 2;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("sleep_wake_at_realtime_offset")))
  {
    v2 = 3;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("do_not_cull")))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_21663D6E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *GetPlaybackModeString(PHASEPlaybackMode a1)
{
  if (a1 == PHASEPlaybackModeLooping)
    return CFSTR("looping");
  else
    return CFSTR("one_shot");
}

uint64_t GetPlaybackMode(NSString *a1)
{
  NSString *v1;
  uint64_t v2;

  v1 = a1;
  if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("one_shot")))
    v2 = 0;
  else
    v2 = -[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("looping"));

  return v2;
}

void sub_21663D760(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *GetVoiceStealingTypeString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("none");
  if (a1 == 1)
    v1 = CFSTR("oldest");
  if (a1 == 2)
    return CFSTR("quietest");
  else
    return v1;
}

uint64_t GetVoiceStealingType(NSString *a1)
{
  NSString *v1;
  uint64_t v2;

  v1 = a1;
  if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("none")))
  {
    v2 = 0;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("oldest")))
  {
    v2 = 1;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("quietest")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_21663D814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *GetCurveTypeString(PHASECurveType a1)
{
  const __CFString *result;

  result = CFSTR("linear");
  if (a1 > 1668434002)
  {
    if (a1 <= 1668434258)
    {
      if (a1 > 1668434246)
      {
        if (a1 == PHASECurveTypeInverseSigmoid)
        {
          return CFSTR("inversesigmoid");
        }
        else if (a1 == PHASECurveTypeInverseSquared)
        {
          return CFSTR("inversesquared");
        }
      }
      else if (a1 == PHASECurveTypeHoldStartValue)
      {
        return CFSTR("holdstartvalue");
      }
      else if (a1 == PHASECurveTypeInverseCubed)
      {
        return CFSTR("inversecubed");
      }
    }
    else if (a1 <= 1668436838)
    {
      if (a1 == PHASECurveTypeInverseSine)
      {
        return CFSTR("inversesine");
      }
      else if (a1 == PHASECurveTypeJumpToEndValue)
      {
        return CFSTR("jumptoendvalue");
      }
    }
    else
    {
      switch(a1)
      {
        case PHASECurveTypeSigmoid:
          return CFSTR("sigmoid");
        case PHASECurveTypeSine:
          return CFSTR("sine");
        case PHASECurveTypeSquared:
          return CFSTR("squared");
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 1:
        return CFSTR("squared");
      case 2:
        return CFSTR("inversesquared");
      case 3:
        goto LABEL_25;
      case 4:
        return CFSTR("inversecubed");
      case 5:
        return CFSTR("inversesine");
      case 6:
        return CFSTR("sine");
      case 7:
        return CFSTR("sigmoid");
      case 8:
        return CFSTR("inversesigmoid");
      default:
        if (a1 == PHASECurveTypeCubed)
LABEL_25:
          result = CFSTR("cubed");
        break;
    }
  }
  return result;
}

uint64_t GetCurveType(NSString *a1)
{
  NSString *v1;
  uint64_t v2;

  v1 = a1;
  v2 = 1668435054;
  if (!-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("linear")))
  {
    if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("squared")))
    {
      v2 = 1668436849;
    }
    else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("inversesquared")))
    {
      v2 = 1668434257;
    }
    else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("cubed")))
    {
      v2 = 1668432757;
    }
    else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("inversecubed")))
    {
      v2 = 1668434243;
    }
    else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("inversesine")))
    {
      v2 = 1668434259;
    }
    else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("sine")))
    {
      v2 = 1668436846;
    }
    else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("sigmoid")))
    {
      v2 = 1668436839;
    }
    else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("inversesigmoid")))
    {
      v2 = 1668434247;
    }
    else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("holdstartvalue")))
    {
      v2 = 1668434003;
    }
    else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("jumptoendvalue")))
    {
      v2 = 1668434501;
    }
  }

  return v2;
}

void sub_21663DB04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GetMixerType(NSString *a1)
{
  NSString *v1;
  uint64_t v2;

  v1 = a1;
  if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("spatial")))
  {
    v2 = 1;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("channel")))
  {
    v2 = 3;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("ambient")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_21663DB8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GetDistanceModelType(NSString *a1)
{
  NSString *v1;
  uint64_t v2;

  v1 = a1;
  if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("none")))
  {
    v2 = 0;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("geometric_spreading")))
  {
    v2 = 1;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("envelope")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_21663DC14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GetDirectivityModelType(NSString *a1)
{
  NSString *v1;
  uint64_t v2;

  v1 = a1;
  if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("none")))
  {
    v2 = 0;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("cardioid")))
  {
    v2 = 1;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("cone")))
  {
    v2 = 2;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("sphericalcap")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_21663DCB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id GetChannelLayoutString(Phase::ChannelLayout *a1)
{
  void *v1;
  int v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void *v6;
  void *__p[2];
  char v9;

  Phase::ChannelLayout::GetStringFromLayoutTag(a1, __p);
  v1 = (void *)MEMORY[0x24BDD17C8];
  v2 = v9;
  v3 = (void **)__p[0];
  v4 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v2 >= 0)
    v5 = __p;
  else
    v5 = v3;
  objc_msgSend(v1, "stringWithCString:encoding:", v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_21663DD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t GetProcedureType(NSString *a1)
{
  NSString *v1;
  uint64_t v2;

  v1 = a1;
  v2 = !-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("none"))
    && -[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("water"));

  return v2;
}

void sub_21663DDB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GetSpatialCategory(NSString *a1)
{
  NSString *v1;
  uint64_t v2;

  v1 = a1;
  if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("direct_path_transmission")))
  {
    v2 = 1;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("early_reflections")))
  {
    v2 = 2;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("late_reverb")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_21663DE3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *GetSpatialCategoryString(int a1)
{
  if ((a1 - 1) > 2)
    return CFSTR("Invalid");
  else
    return off_24D57F378[a1 - 1];
}

const __CFString *GetSpatialCategoryStringFromSpatialCategoryKey(NSString *a1)
{
  NSString *v1;
  const __CFString *v2;

  v1 = a1;
  if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("PHASEDirectPathTransmission")))
  {
    v2 = CFSTR("direct_path_transmission");
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("PHASEEarlyReflections")))
  {
    v2 = CFSTR("early_reflections");
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("PHASELateReverb")))
  {
    v2 = CFSTR("late_reverb");
  }
  else
  {
    v2 = CFSTR("Invalid");
  }

  return v2;
}

void sub_21663DF0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *GetTapTypeString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Invalid");
  if (a1 == 1)
    v1 = CFSTR("PHASETapTypePreSpatial_PreSessionVolume");
  if (a1)
    return v1;
  else
    return CFSTR("PHASETapTypePreSpatial");
}

void sub_21663E0D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21663E424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24)
{
  void *v24;
  void *v25;

  a24 = (void **)&a12;
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100](&a24);

  _Unwind_Resume(a1);
}

double Phase::Envelope<double>::Range(uint64_t *a1)
{
  uint64_t v2;
  double result;

  v2 = std::__minmax_element_impl[abi:ne180100]<std::__wrap_iter<Phase::Envelope<double>::SegmentInternal const*>,std::__wrap_iter<Phase::Envelope<double>::SegmentInternal const*>,std::__identity,Phase::Envelope<double>::Range(void)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1}>(*a1, a1[1]);
  result = *(double *)(std::__minmax_element_impl[abi:ne180100]<std::__wrap_iter<Phase::Envelope<double>::SegmentInternal const*>,std::__wrap_iter<Phase::Envelope<double>::SegmentInternal const*>,std::__identity,Phase::Envelope<double>::Range(void)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#2}>(*a1, a1[1])+ 24);
  if (result >= *(double *)(v2 + 8))
    return *(double *)(v2 + 8);
  return result;
}

uint64_t std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__push_back_slow_path<Phase::Envelope<double>::Segment const&>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::Segment>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[48 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[48 * v9];
  *(_QWORD *)v11 = *a2;
  *((_QWORD *)v11 + 1) = a2[1];
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(v11 + 16), (uint64_t)(a2 + 2));
  v15 += 48;
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment> &>::~__split_buffer(v14);
  return v12;
}

void sub_21663E73C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::Envelope<double>::Segment>,std::reverse_iterator<Phase::Envelope<double>::Segment*>,std::reverse_iterator<Phase::Envelope<double>::Segment*>,std::reverse_iterator<Phase::Envelope<double>::Segment*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::Envelope<double>::Segment>,std::reverse_iterator<Phase::Envelope<double>::Segment*>,std::reverse_iterator<Phase::Envelope<double>::Segment*>,std::reverse_iterator<Phase::Envelope<double>::Segment*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(_QWORD *)(v9 - 48);
      v9 -= 48;
      *(_QWORD *)(v7 - 48) = v10;
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(v9 + 8);
      std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100](v7 - 32, v9 + 16);
      v7 = *((_QWORD *)&v16 + 1) - 48;
      *((_QWORD *)&v16 + 1) -= 48;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Envelope<double>::Segment>,std::reverse_iterator<Phase::Envelope<double>::Segment*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_21663E874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Envelope<double>::Segment>,std::reverse_iterator<Phase::Envelope<double>::Segment*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Envelope<double>::Segment>,std::reverse_iterator<Phase::Envelope<double>::Segment*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Envelope<double>::Segment>,std::reverse_iterator<Phase::Envelope<double>::Segment*>>::operator()[abi:ne180100]((_QWORD *)a1);
  return a1;
}

_QWORD *std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Envelope<double>::Segment>,std::reverse_iterator<Phase::Envelope<double>::Segment*>>::operator()[abi:ne180100](_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  while (v1 != v2)
  {
    result = *(_QWORD **)(v1 + 40);
    if ((_QWORD *)(v1 + 16) == result)
    {
      result = (_QWORD *)(v1 + 16);
      v3 = 4;
    }
    else
    {
      if (!result)
        goto LABEL_8;
      v3 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
LABEL_8:
    v1 += 48;
  }
  return result;
}

void **std::__split_buffer<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment> &>::~__split_buffer(void **a1)
{
  std::__split_buffer<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment> &>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment> &>::clear[abi:ne180100](_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = result[1];
  v1 = result[2];
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v3[2] = v1 - 48;
      result = *(_QWORD **)(v1 - 8);
      if (result == (_QWORD *)(v1 - 32))
      {
        result = (_QWORD *)(v1 - 32);
        v4 = 4;
      }
      else
      {
        if (!result)
        {
          v1 -= 48;
          continue;
        }
        v4 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
      v1 = v3[2];
    }
    while (v1 != v2);
  }
  return result;
}

void ***std::unique_ptr<Phase::Envelope<double>>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x2199F9D70](v2, 0x20C40960023A9);
  }
  return result;
}

uint64_t std::__minmax_element_impl[abi:ne180100]<std::__wrap_iter<Phase::Envelope<double>::SegmentInternal const*>,std::__wrap_iter<Phase::Envelope<double>::SegmentInternal const*>,std::__identity,Phase::Envelope<double>::Range(void)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1}>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;

  v2 = result;
  if (result != a2 && result + 64 != a2)
  {
    if (*(double *)(result + 72) >= *(double *)(result + 8))
    {
      v4 = result + 64;
    }
    else
    {
      result += 64;
      v4 = v2;
    }
    v5 = v2 + 128;
    while (v5 != a2)
    {
      v6 = v5;
      v7 = v5 + 64;
      if (v7 == a2)
      {
        if (*(double *)(v6 + 8) < *(double *)(result + 8))
          return v6;
        return result;
      }
      v8 = v2 + 192;
      v9 = *(double *)(v6 + 72);
      v10 = *(double *)(v6 + 8);
      v11 = *(double *)(result + 8);
      v12 = *(double *)(v4 + 8);
      if (v10 >= v11)
        v13 = result;
      else
        v13 = v6;
      if (v9 < v12)
        v8 = v4;
      if (v9 >= v11)
        v7 = result;
      if (v10 >= v12)
        v14 = v6;
      else
        v14 = v4;
      if (v9 < v10)
        result = v7;
      else
        result = v13;
      if (v9 < v10)
        v4 = v14;
      else
        v4 = v8;
      v5 = v6 + 128;
      v2 = v6;
    }
  }
  return result;
}

uint64_t std::__minmax_element_impl[abi:ne180100]<std::__wrap_iter<Phase::Envelope<double>::SegmentInternal const*>,std::__wrap_iter<Phase::Envelope<double>::SegmentInternal const*>,std::__identity,Phase::Envelope<double>::Range(void)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#2}>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;

  v2 = result;
  if (result != a2 && result + 64 != a2)
  {
    if (*(double *)(result + 88) >= *(double *)(result + 24))
    {
      v4 = result + 64;
    }
    else
    {
      result += 64;
      v4 = v2;
    }
    v5 = v2 + 128;
    while (v5 != a2)
    {
      v6 = v5;
      v7 = v5 + 64;
      if (v7 == a2)
      {
        if (*(double *)(v6 + 24) < *(double *)(result + 24))
          return v6;
        return result;
      }
      v8 = v2 + 192;
      v9 = *(double *)(v6 + 88);
      v10 = *(double *)(v6 + 24);
      v11 = *(double *)(result + 24);
      v12 = *(double *)(v4 + 24);
      if (v10 >= v11)
        v13 = result;
      else
        v13 = v6;
      if (v9 < v12)
        v8 = v4;
      if (v9 >= v11)
        v7 = result;
      if (v10 >= v12)
        v14 = v6;
      else
        v14 = v4;
      if (v9 < v10)
        result = v7;
      else
        result = v13;
      if (v9 < v10)
        v4 = v14;
      else
        v4 = v8;
      v5 = v6 + 128;
      v2 = v6;
    }
  }
  return result;
}

void sub_21663EBE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21663ED20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21663EDE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21663EED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21663F028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21663F0C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21663F1E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_21663F244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PHASEExternalStream;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_21663F3C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_21663F48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_21663F590(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21663F628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_21663F72C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21663F8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_21663FA48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21663FB24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sDefaultAudioSessionToken(void)
{
  BOOL v0;
  void *v1;
  uint64_t v2;

  if (gInProcessServer)
    v0 = 1;
  else
    v0 = ihdYoUjk3kGK <= 0;
  if (!v0)
    return 0;
  objc_msgSend(MEMORY[0x24BDB1858], "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "opaqueSessionID");

  return v2;
}

void sub_21663FB98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21663FD38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_21663FE48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21663FF14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216640024(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216640100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_216640864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location,id a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  _Unwind_Resume(a1);
}

void sub_216640C60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216640D60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216640E04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216640F2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216641004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_2166410EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216641834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25)
{

  _Unwind_Resume(a1);
}

void sub_216641BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v24 = v23;

  _Unwind_Resume(a1);
}

void sub_216641E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v29;

  v29 = v19;

  _Unwind_Resume(a1);
}

void sub_216641F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_21664204C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2166420D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_216642158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_21664237C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_216642A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  objc_sync_exit(v15);
  _Unwind_Resume(a1);
}

void sub_216642CF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_216642FE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2166432EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2166434F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_216643588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PHASEExternalOutputStreamController;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_21664371C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166437F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2166438A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216643910(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216643A20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216643AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_216644260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location,id a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  _Unwind_Resume(a1);
}

void sub_21664465C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216644844(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216644B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_216644C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_216644CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216644E10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216644EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_216644F80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2166450CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21664515C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_216645294(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216645430(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166454B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_216645648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void sub_216645940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216645A58(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_216645BB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216645CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  void *v14;
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a13;
  if (a13 == v15)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_216645F48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21664618C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216646280(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216646368(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216646594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a13;
  if (a13 == v18)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:

  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void sub_2166468EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_216646AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_216646B3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216646C04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216646C88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216646F80(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216646E88);
  }
  _Unwind_Resume(exception_object);
}

void sub_216647244(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216647144);
  }
  _Unwind_Resume(exception_object);
}

void sub_21664758C(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x21664749CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_216647900(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216647810);
  }
  _Unwind_Resume(exception_object);
}

void sub_216647C74(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216647B84);
  }
  _Unwind_Resume(exception_object);
}

void sub_216647FE8(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216647EF8);
  }
  _Unwind_Resume(exception_object);
}

void sub_2166482AC(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x2166481BCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_216648540(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216648454);
  }
  _Unwind_Resume(exception_object);
}

void sub_2166487D8(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x2166486E8);
  }
  _Unwind_Resume(exception_object);
}

void sub_216648A6C(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216648980);
  }
  _Unwind_Resume(exception_object);
}

void sub_216648E98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216649090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216649144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216649228(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216649490(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216649394);
  }
  _Unwind_Resume(exception_object);
}

void sub_216649774(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216649674);
  }
  _Unwind_Resume(exception_object);
}

void sub_216649A5C(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216649964);
  }
  _Unwind_Resume(exception_object);
}

void sub_216649D48(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216649C4CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_216649F70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21664A0D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21664A234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21664A2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_21664A398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21664A5BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_21664A6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21664A744(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21664A894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21664A8E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21664AD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21664B294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_21664B3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sGetFrequencies(uint64_t a1)
{
  char *result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)a1, Phase::sThirdOctaveBandFrequencies, (uint64_t)&qword_216739F28, 0x1FuLL);
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    std::terminate();
  return result;
}

void sub_21664B468(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21664B4CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21664B838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21664BC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_21664BDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21664BE34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21664C0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21664C558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_21664C69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21664C718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21664D9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_21664DF7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_21664E1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_21664EDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24)
{

  _Unwind_Resume(a1);
}

void sub_21664F40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_21664F8D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_21664F9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)PHASEMaterial;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_21664FA98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21664FCDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2166501DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  uint64_t v13;

  _Unwind_Resume(a1);
}

void sub_21665044C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_216650568(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21665093C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

double Phase::Geometry::WeatherUtility<double>::SetTemperatureInCelsius(uint64_t a1, double a2)
{
  double result;

  result = Phase::Controller::sClamp<double>((Phase::Logger *)a1, a2 + 273.15, *(double *)a1, *(double *)(a1 + 8));
  if (result == *(double *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      return result;
  }
  else
  {
    *(double *)(a1 + 24) = result;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return Phase::Geometry::WeatherUtility<double>::InitInternal(a1);
}

double Phase::Geometry::WeatherUtility<double>::SetRelativeHumidityPercentage(uint64_t a1, double a2)
{
  double result;

  result = Phase::Controller::sClamp<double>((Phase::Logger *)a1, a2, *(double *)(a1 + 40), *(double *)(a1 + 48));
  if (result == *(double *)(a1 + 64))
  {
    if (!*(_BYTE *)(a1 + 72))
      return result;
  }
  else
  {
    *(double *)(a1 + 64) = result;
    *(_BYTE *)(a1 + 72) = 1;
  }
  return Phase::Geometry::WeatherUtility<double>::InitInternal(a1);
}

long double Phase::Geometry::WeatherUtility<double>::AtmosphericAbsorptionInDecibelsPerMeter(double *a1, double a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  long double v9;

  v3 = a1[3];
  v4 = a2 * a2;
  v5 = 101.325 / (a1[13] / 1000.0) * 1.84e-11;
  v6 = fabs(sqrt(v3 / 293.16));
  if (v3 / 293.16 == -INFINITY)
    v7 = INFINITY;
  else
    v7 = v6;
  v8 = pow(v3 / 293.16, -2.5);
  v9 = exp(-2239.1 / v3) * 0.01278 / (a1[15] + v4 / a1[15]);
  return v4 * (v8 * (v9 + exp(-3352.0 / v3) * 0.1068 / (a1[16] + v4 / a1[16])) + v5 * v7) * 8.68588964 / 4.34294482;
}

void sub_216651024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

float PHASEGetPropertyBounded<float>(void *a1, void *a2, float a3, float a4, float a5)
{
  id v9;
  Phase::Logger *v10;
  Phase::Logger *v11;
  NSObject *v13;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v9 = a1;
  v10 = a2;
  v11 = v10;
  if (a3 < a4 || a3 > a5)
  {
    v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10)
                                                                                        + 432)));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      v15 = 136316674;
      v16 = "PHASEGetProperty.h";
      v17 = 1024;
      v18 = 28;
      v19 = 2080;
      v20 = objc_msgSend(objc_retainAutorelease(v9), "UTF8String");
      v21 = 2080;
      v22 = -[Phase::Logger UTF8String](objc_retainAutorelease(v11), "UTF8String");
      v23 = 2048;
      v24 = a3;
      v25 = 2048;
      v26 = a4;
      v27 = 2048;
      v28 = a5;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s:%s Value is out of bounds. Clamping %f to range [%f, %f]", (uint8_t *)&v15, 0x44u);
    }

    a3 = fminf(fmaxf(a3, a4), a5);
  }

  return a3;
}

void sub_21665127C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

double Phase::Geometry::WaterUtility<double>::SetTemperatureInCelsius(uint64_t a1, double a2)
{
  double result;

  result = Phase::Controller::sClamp<double>((Phase::Logger *)a1, a2, *(double *)a1, *(double *)(a1 + 8));
  if (result == *(double *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      return result;
  }
  else
  {
    *(double *)(a1 + 24) = result;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return Phase::Geometry::WaterUtility<double>::InitInternal(a1);
}

double Phase::Geometry::WaterUtility<double>::SetDepthInMeters(uint64_t a1, double a2)
{
  double result;

  result = Phase::Controller::sClamp<double>((Phase::Logger *)a1, a2, *(double *)(a1 + 40), *(double *)(a1 + 48));
  if (result == *(double *)(a1 + 64))
  {
    if (!*(_BYTE *)(a1 + 72))
      return result;
  }
  else
  {
    *(double *)(a1 + 64) = result;
    *(_BYTE *)(a1 + 72) = 1;
  }
  return Phase::Geometry::WaterUtility<double>::InitInternal(a1);
}

long double Phase::Geometry::WaterUtility<double>::WaterAbsorptionInDecibelsPerMeter(double *a1, double a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  long double v7;
  double v8;
  double v9;
  long double v10;

  v3 = a2 / 1000.0;
  v4 = a1[8] / 1000.0;
  v5 = v3 * v3;
  v6 = v3 * (v3 * a1[20]) / (v3 * v3 + a1[20] * a1[20]) * 0.106;
  v7 = v6 * exp((a1[18] + -8.0) / 0.56);
  v8 = a1[3];
  v9 = a1[13] / 35.0 * ((v8 / 43.0 + 1.0) * 0.52) * (v3 * (v3 * a1[21]) / (v3 * v3 + a1[21] * a1[21]));
  v10 = exp(v4 / -6.0) * v9;
  return (v5 * 0.00049 * exp(-(v4 / 17.0 + v8 / 27.0)) + v7 + v10) / 1000.0;
}

void sub_21665160C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_216651700(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2166517B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)PHASEMedium;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_216651870(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::Geometry::WeatherUtility<double>::WeatherUtility(uint64_t a1)
{
  Phase::Logger *v2;
  double v3;
  double v4;

  *(_OWORD *)a1 = xmmword_21673A180;
  *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0x4072526666666666uLL);
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_21673A190;
  *(_QWORD *)(a1 + 64) = 0x4049000000000000;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = xmmword_21673A1A0;
  *(int64x2_t *)(a1 + 96) = vdupq_n_s64(0x40F8BCD000000000uLL);
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v3 = Phase::Controller::sClamp<double>((Phase::Logger *)a1, 50.0, 0.0, 100.0);
  if (v3 != *(double *)(a1 + 64))
  {
    *(double *)(a1 + 64) = v3;
    *(_BYTE *)(a1 + 72) = 1;
  }
  v4 = Phase::Controller::sClamp<double>(v2, 101325.0, *(double *)(a1 + 80), *(double *)(a1 + 88));
  if (v4 != *(double *)(a1 + 104))
  {
    *(double *)(a1 + 104) = v4;
    *(_BYTE *)(a1 + 112) = 1;
  }
  Phase::Geometry::WeatherUtility<double>::InitInternal(a1);
  return a1;
}

long double Phase::Geometry::WeatherUtility<double>::InitInternal(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  long double v7;
  long double v8;
  double v9;
  double v10;
  long double v11;
  long double v12;
  double v13;
  double v14;
  long double v15;
  double v16;
  long double v17;
  long double result;

  v2 = *(double *)(a1 + 24);
  v3 = *(double *)(a1 + 64);
  v4 = *(double *)(a1 + 104);
  v5 = v4 / 1000.0 / 101.325;
  v6 = 1.0 - 273.16 / v2;
  v7 = log10(v2 / 273.16) * -5.02808 + v6 * 10.79586;
  v8 = v7 + (1.0 - __exp10((v2 / 273.16 + -1.0) * -8.29692)) * 0.000150474;
  v9 = __exp10(v6 * -4.76955);
  v10 = v3 * __exp10(v8 + (v9 + -1.0) * 0.00042873 + -2.2195983) / v5;
  *(double *)(a1 + 120) = v5 * (v10 * 40400.0 * ((v10 + 0.02) / (v10 + 0.391)) + 24.0);
  v11 = pow(v2 / 293.16, -0.5) * v5;
  v12 = pow(v2 / 293.16, -0.3333333);
  *(long double *)(a1 + 128) = v11 * (v10 * 280.0 * exp((v12 + -1.0) * -4.17) + 9.0);
  v13 = v2 + -273.15;
  v15 = -6343.1645 / v2 + 33.9371105;
  v16 = exp(v2 * -0.019121316 + v2 * v2 * 1.2378847 * 0.00000999999975);
  v17 = v3 * (v4 * 0.0000000314 + 1.00062 + v13 * v13 * 5.6 * 0.0000001) * (exp(v15) * v16) / v4 / 100.0;
  v14 = v13 * v13;
  result = (v13 * -0.228525 + -85.20931 + v14 * 5.91 / 100000.0) * 0.0004
         + (v13 * 0.0000000373 + -0.000000182 + v14 * -2.93 / 1.0e10) * v4
         + v13 * 0.603055
         + 331.5024
         + v14 * -5.28 / 10000.0
         + (v13 * 0.1495874 + 51.471935 + v14 * -7.82 / 10000.0) * v17
         - (v4 * v4 * 2.15 / 1.0e13
          + v17 * v17 * 2.835149
          + -0.00000466876192
          + v4 * (v17 * -0.000486) * 0.0004);
  *(long double *)(a1 + 136) = result;
  return result;
}

uint64_t Phase::Geometry::WaterUtility<double>::WaterUtility(uint64_t a1)
{
  Phase::Logger *v7;
  double v8;
  Phase::Logger *v9;
  double v10;
  double v11;

  *(_QWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_21673A1B0;
  *(_QWORD *)(a1 + 24) = 0x4034000000000000;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_21673A1C0;
  *(_QWORD *)(a1 + 64) = 0x4024000000000000;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_21673A1D0;
  *(_QWORD *)(a1 + 104) = 0x4041800000000000;
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_21673A1E0;
  __asm { FMOV            V0.2D, #8.0 }
  *(_OWORD *)(a1 + 136) = _Q0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v8 = Phase::Controller::sClamp<double>((Phase::Logger *)a1, 10.0, 0.0, 10000.0);
  if (v8 != *(double *)(a1 + 64))
  {
    *(double *)(a1 + 64) = v8;
    *(_BYTE *)(a1 + 72) = 1;
  }
  v10 = Phase::Controller::sClamp<double>(v7, 35.0, *(double *)(a1 + 80), *(double *)(a1 + 88));
  if (v10 != *(double *)(a1 + 104))
  {
    *(double *)(a1 + 104) = v10;
    *(_BYTE *)(a1 + 112) = 1;
  }
  v11 = Phase::Controller::sClamp<double>(v9, 8.0, *(double *)(a1 + 120), *(double *)(a1 + 128));
  if (v11 != *(double *)(a1 + 144))
  {
    *(double *)(a1 + 144) = v11;
    *(_BYTE *)(a1 + 152) = 1;
  }
  Phase::Geometry::WaterUtility<double>::InitInternal(a1);
  return a1;
}

long double Phase::Geometry::WaterUtility<double>::InitInternal(uint64_t a1)
{
  double v2;
  double v3;
  long double result;
  double v5;

  v2 = *(double *)(a1 + 104);
  v3 = *(double *)(a1 + 24);
  *(long double *)(a1 + 160) = sqrt(v2 / 35.0) * 0.78 * exp(v3 / 26.0);
  result = exp(v3 / 17.0) * 42.0;
  v5 = *(double *)(a1 + 64) / 1000.0;
  *(long double *)(a1 + 168) = result;
  *(double *)(a1 + 176) = v3 / 10.0 * 45.7
                        + 1449.05
                        + v3 / 10.0 * -5.21 * (v3 / 10.0)
                        + v3 / 10.0 * (v3 / 10.0 * 0.23) * (v3 / 10.0)
                        + (v2 + -35.0) * (v3 / 10.0 * -0.126 + 1.333 + v3 / 10.0 * 0.009 * (v3 / 10.0))
                        + (v3 / 10.0 * 0.352 + 16.23) * v5
                        + (v3 / 10.0 * -0.1 + 0.213) * v5 * v5
                        + v3 / 10.0 * ((v2 + -35.0) * ((v2 + -35.0) * 0.0002 + 0.016)) * v5;
  return result;
}

void sub_216651FE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216652038(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166520C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216652148(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166521F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2166522D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2166524F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665256C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665260C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2166526A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166526FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216652738(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216652774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166527B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216652850(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216652930(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2166529D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216652A94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216652C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_216652D74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216652DCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216652EC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_216652F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_216653000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216653058(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216653114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_21665315C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665327C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216653310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166539C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_216653BCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216653FAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_2166540D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216654170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216654214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21665437C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665442C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2166544EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216654644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2166546BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216654770(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2166549E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216654A6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216654B38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216654C28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216654D88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_216654F84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216654FE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216655158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_2166554AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, __int16 a17, int a18, __int16 a19, uint64_t a20)
{
  uint64_t v20;
  void *v21;
  Phase::Logger *v23;
  NSObject *v24;

  if (a2)
  {
    __cxa_free_exception(v21);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v20);
    __cxa_end_catch();
    v24 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v23) + 432));
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      JUMPOUT(0x21665529CLL);
    JUMPOUT(0x2166553C4);
  }
  _Unwind_Resume(exception_object);
}

void sub_216655728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166557D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_21665588C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216655990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166560B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_21665636C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2166565EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)PHASEObject;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_21665677C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2166568FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216656CA0(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216656BACLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_216656DC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216657C90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216658104(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216658274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216658324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166590E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21665926C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216659320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21665940C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166594B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float Phase::Determinant<float>(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  v1 = a1[4];
  v2 = a1[5];
  v3 = a1[8];
  v4 = a1[9];
  v6 = a1[12];
  v5 = a1[13];
  v7 = a1[10];
  v8 = a1[14];
  v9 = a1[6];
  v10 = a1[1];
  v11 = a1[2];
  return (float)((float)((float)(a1[7]
                               * (float)((float)((float)((float)((float)((float)(v6 * (float)(v7 * v10))
                                                                       + (float)((float)(v4 * *a1) * v8))
                                                               + (float)((float)(v3 * v11) * v5))
                                                       + (float)((float)-(float)(v11 * v4) * v6))
                                               + (float)((float)-(float)(v10 * v3) * v8))
                                       + (float)((float)-(float)(*a1 * v7) * v5)))
                       - (float)(a1[3]
                               * (float)((float)((float)((float)((float)((float)((float)(v2 * v7) * v6)
                                                                       + (float)((float)(v1 * v4) * v8))
                                                               + (float)((float)(v9 * v3) * v5))
                                                       + (float)((float)-(float)(v9 * v4) * v6))
                                               + (float)((float)-(float)(v2 * v3) * v8))
                                       + (float)((float)-(float)(v1 * v7) * v5))))
               - (float)(a1[11]
                       * (float)((float)((float)((float)((float)((float)(v6 * (float)(v9 * v10))
                                                               + (float)((float)(v2 * *a1) * v8))
                                                       + (float)((float)(v1 * v11) * v5))
                                               + (float)((float)-(float)(v11 * v2) * v6))
                                       + (float)((float)-(float)(v10 * v1) * v8))
                               + (float)((float)-(float)(*a1 * v9) * v5))))
       + (float)(a1[15]
               * (float)((float)((float)((float)((float)((float)(v3 * (float)(v9 * v10))
                                                       + (float)((float)(v2 * *a1) * v7))
                                               + (float)((float)(v1 * v11) * v4))
                                       + (float)((float)-(float)(v11 * v2) * v3))
                               + (float)((float)-(float)(v10 * v1) * v7))
                       + (float)((float)-(float)(*a1 * v9) * v4)));
}

void sub_2166596F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665982C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2166598F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216659AD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_216659CEC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_216659F04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21665A028(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_21665A148(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_21665A268(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_21665A388(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_21665A4C4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_21665A5E4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_21665A714(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_21665A900(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21665AA48(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_21665AB68(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_21665AC98(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_21665AE84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21665B4CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665B5E4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_21665B704(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_21665B824(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_21665BA04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21665BBDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21665BEB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21665BFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_21665C138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21665C288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_21665C3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21665C520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_21665C668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21665C7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_21665C900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21665CA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_21665CB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21665CCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  void *v14;
  void *v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == v16)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_21665CDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21665CE54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665CED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665CF4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665CFC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665D04C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665D0C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665D144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665D1C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665D23C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665D46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_21665D630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_21665D7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_21665D9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_21665DB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_21665DD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_21665DDCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665DE24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665DEDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_21665E000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665E0EC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_21665E1C8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_21665E3B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665E5BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21665E680(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665E7C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21665E8F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21665EA10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21665EC04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21665ECF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21665ED68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665EE24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21665EE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_21665EEF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21665F2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  _QWORD *v12;
  uint64_t v13;

  v12[8] = v13;

  _Unwind_Resume(a1);
}

void sub_21665F4D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_21665F658(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_21665F968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_21665FAD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_21665FFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  void *v30;

  _Unwind_Resume(a1);
}

void sub_21666017C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_216660250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216660360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)PHASEShape;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_2166609D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216660D88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166610F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  void *v14;

  a14 = (void **)&a11;
  std::vector<Phase::Controller::GeometryPermutation>::__destroy_vector::operator()[abi:ne180100](&a14);

  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::LocalizedGeometryPermutation>,Phase::LocalizedGeometryPermutation*,Phase::LocalizedGeometryPermutation*,Phase::LocalizedGeometryPermutation*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = a1 + v6;
      *(_DWORD *)(a3 + v6) = *(_DWORD *)(a1 + v6);
      std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map(a3 + v6 + 8, a1 + v6 + 8);
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      v9 = (_QWORD *)(a3 + v6 + 48);
      v9[2] = 0;
      std::vector<Phase::Geometry::EntityType>::__init_with_size[abi:ne180100]<Phase::Geometry::EntityType*,Phase::Geometry::EntityType*>(v9, *(const void **)(v8 + 48), *(_QWORD *)(v8 + 56), (uint64_t)(*(_QWORD *)(v8 + 56) - *(_QWORD *)(v8 + 48)) >> 2);
      *(_OWORD *)(a3 + v6 + 72) = *(_OWORD *)(a1 + v6 + 72);
      v6 += 88;
    }
    while (v8 + 88 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_2166612D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(v1 + v2 + 8);
  if (v2)
  {
    v4 = v1 - 88;
    do
    {
      std::allocator<Phase::LocalizedGeometryPermutation>::destroy[abi:ne180100](v4 + v2);
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(a1);
}

uint64_t std::allocator<Phase::LocalizedGeometryPermutation>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(a1 + 8);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::LocalizedGeometryPermutation *,Phase::LocalizedGeometryPermutation *,Phase::LocalizedGeometryPermutation *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void **v16;
  _BYTE *v17;
  unint64_t v18;
  char *v19;
  void **v21;

  v3 = a3;
  if (a1 != a2)
  {
    v4 = 0;
    v5 = a3;
    do
    {
      v6 = a1 + v4;
      v7 = v3 + v4;
      *(_DWORD *)(v3 + v4) = *(_DWORD *)(a1 + v4);
      if (v3 != a1)
      {
        *(_DWORD *)(v7 + 40) = *(_DWORD *)(v6 + 40);
        std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *> *>>((_QWORD *)(v7 + 8), *(uint64_t **)(v6 + 24), 0);
        v8 = *(char **)(v7 + 48);
        v10 = *(char **)(v6 + 48);
        v9 = *(_BYTE **)(v6 + 56);
        v11 = v9 - v10;
        v12 = (v9 - v10) >> 2;
        v13 = *(_QWORD *)(v7 + 64);
        if (v12 <= (v13 - (uint64_t)v8) >> 2)
        {
          v21 = (void **)(v5 + 56);
          v17 = *(_BYTE **)(a3 + v4 + 56);
          v18 = (v17 - v8) >> 2;
          if (v18 >= v12)
          {
            if (v9 != v10)
              memmove(v8, v10, v9 - v10);
            v3 = a3;
          }
          else
          {
            if (v17 != v8)
            {
              memmove(v8, v10, v17 - v8);
              v8 = *(char **)(a3 + v4 + 56);
            }
            v3 = a3;
            v19 = &v10[4 * v18];
            v11 = v9 - v19;
            if (v9 != v19)
              memmove(v8, v19, v9 - v19);
          }
          v16 = v21;
        }
        else
        {
          if (v8)
          {
            *(_QWORD *)(a3 + v4 + 56) = v8;
            operator delete(v8);
            v13 = 0;
            *(_QWORD *)(v7 + 48) = 0;
            *(_QWORD *)(v7 + 56) = 0;
            *(_QWORD *)(v7 + 64) = 0;
          }
          if (v11 < 0)
            std::vector<Phase::Controller::GeometryPermutation>::__throw_length_error[abi:ne180100]();
          v14 = v13 >> 1;
          if (v13 >> 1 <= v12)
            v14 = (v9 - v10) >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
            v15 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          std::vector<Phase::Geometry::EntityType>::__vallocate[abi:ne180100]((_QWORD *)(v7 + 48), v15);
          v3 = a3;
          v16 = (void **)(a3 + v4 + 56);
          v8 = (char *)*v16;
          if (v9 != v10)
            memmove(*(void **)(a3 + v4 + 56), v10, v9 - v10);
        }
        *v16 = &v8[v11];
      }
      *(_OWORD *)(v7 + 72) = *(_OWORD *)(v6 + 72);
      v4 += 88;
      v5 = v7 + 88;
    }
    while (v6 + 88 != a2);
    v3 += v4;
  }
  return v3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::LocalizedGeometryPermutation>>(unint64_t a1)
{
  if (a1 >= 0x2E8BA2E8BA2E8BBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(88 * a1);
}

__n128 std::allocator<Phase::LocalizedGeometryPermutation>::construct[abi:ne180100]<Phase::LocalizedGeometryPermutation,Phase::LocalizedGeometryPermutation const&>(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map(a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<Phase::Geometry::EntityType>::__init_with_size[abi:ne180100]<Phase::Geometry::EntityType*,Phase::Geometry::EntityType*>((_QWORD *)(a1 + 48), *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 2);
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  return result;
}

void sub_2166615C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<Phase::LocalizedGeometryPermutation>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    std::allocator<Phase::LocalizedGeometryPermutation>::destroy[abi:ne180100](i - 88);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2166616A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216661730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_2166618B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2166619FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216661A78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216661B10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216661CA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_216661D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_216661E74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216662008(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21666208C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_21666210C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216662148(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166621FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216662294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_216662324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)PHASESharedListener;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_216662778(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21666298C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216662AE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216662C50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216662C8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216662DA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216662F1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216662FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)PHASESharedRoot;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_21666318C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216664158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint8_t buf,int a40,int a41,__int16 a42,__int16 a43,__int16 a44,__int16 a45)
{
  uint64_t v45;
  void *v46;

  if (a2)
  {
    __cxa_free_exception(v46);
    std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v45);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(a11);
    __cxa_end_catch();
    if (!a34)
      JUMPOUT(0x216663CB0);
    JUMPOUT(0x216663C80);
  }
  _Unwind_Resume(exception_object);
}

void sub_216664668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216664870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_21666498C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216664A44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216664B28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_216664BFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216664CB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216664D98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_216664E50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216664EDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216664F94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216665034(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166650F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_216665418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216665850(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216665A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_216665C98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216665F20(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf, __int16 a14, __int16 a15)
{
  uint64_t v15;
  void *v16;
  Phase::Logger *v18;
  NSObject *v19;

  if (a2)
  {
    __cxa_free_exception(v16);
    __cxa_begin_catch(a1);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v15);
    __cxa_end_catch();
    v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v18) + 432));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315650;
      *(_QWORD *)((char *)&buf + 4) = "PHASESoundEvent.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 692;
      a15 = 2112;
      _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d %@ Command buffer full.  Unable to pause PHASESoundEvent.  Consider having fewer sound event API calls in a given frame", (uint8_t *)&buf, 0x1Cu);
    }
    JUMPOUT(0x216665E44);
  }
  _Unwind_Resume(a1);
}

void sub_216666248(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf, __int16 a14, __int16 a15)
{
  uint64_t v15;
  void *v16;
  Phase::Logger *v18;
  NSObject *v19;

  if (a2)
  {
    __cxa_free_exception(v16);
    __cxa_begin_catch(a1);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v15);
    __cxa_end_catch();
    v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v18) + 432));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315650;
      *(_QWORD *)((char *)&buf + 4) = "PHASESoundEvent.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 715;
      a15 = 2112;
      _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d %@ Command buffer full.  Unable to resume PHASESoundEvent.  Consider having fewer sound event API calls in a given frame", (uint8_t *)&buf, 0x1Cu);
    }
    JUMPOUT(0x21666616CLL);
  }
  _Unwind_Resume(a1);
}

void sub_21666664C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf, __int16 a14, __int16 a15)
{
  uint64_t v15;
  void *v16;
  Phase::Logger *v18;
  NSObject *v19;

  if (a2)
  {
    __cxa_free_exception(v16);
    __cxa_begin_catch(a1);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v15);
    __cxa_end_catch();
    v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v18) + 432));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315650;
      *(_QWORD *)((char *)&buf + 4) = "PHASESoundEvent.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 749;
      a15 = 2112;
      _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d %@ Command buffer full.  Unable to stop PHASESoundEvent.  Consider having fewer sound event API calls in a given frame", (uint8_t *)&buf, 0x1Cu);
    }
    JUMPOUT(0x21666656CLL);
  }
  _Unwind_Resume(a1);
}

void sub_2166668D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::TapSourceRegistry>(Phase::Logger *a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, char *, _QWORD, _QWORD, void *);
  uint64_t v3;
  NSObject *v5;
  std::logic_error *exception;
  NSObject *v7;
  std::string *v8;
  std::logic_error *v9;
  std::string __p;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  std::string *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if ((unint64_t)(a2 - (_QWORD)a1) <= 0x220)
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v12 = "TaskManager.hpp";
      v13 = 1024;
      v14 = 112;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  v2 = (uint64_t (*)(uint64_t, char *, _QWORD, _QWORD, void *))*((_QWORD *)a1 + 68);
  if (!v2)
  {
    v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1)
                                                                                       + 448)));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v12 = "TaskManager.hpp";
      v13 = 1024;
      v14 = 121;
      v15 = 1024;
      v16 = 17;
      v17 = 2080;
      v18 = v8;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v9, "No service registered for Id %i, in call \n%s");
  }
  v3 = v2(3, (char *)a1 + 544, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::TapSourceRegistry *>::__id);
  if (!v3)
    std::__throw_bad_any_cast[abi:ne180100]();
  return *(_QWORD *)v3;
}

void sub_216666B28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_216666C18(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_216666C38(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_216666D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_216666F58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21666718C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21666753C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216667AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_2166680C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  Phase::Logger *v35;
  NSObject *v36;

  if (a2)
  {
    __cxa_free_exception(v31);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v30);
    __cxa_end_catch();
    v36 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v35) + 432));
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)(v33 - 128) = 136315650;
      *(_QWORD *)(v32 + 4) = "PHASESoundEvent.mm";
      *(_WORD *)(v33 - 116) = 1024;
      *(_DWORD *)(v32 + 14) = 1090;
      *(_WORD *)(v33 - 110) = 2112;
      *(_QWORD *)(v32 + 20) = v29;
      _os_log_impl(&dword_2164CC000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d %@ Command buffer full.  Unable to Prepare PHASESoundEvent.  Consider having fewer sound event API calls in a given frame", (uint8_t *)(v33 - 128), 0x1Cu);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 16))(v28, 0, 1);
    JUMPOUT(0x216667DE4);
  }
  _Unwind_Resume(exception_object);
}

void *__Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_216668798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  Phase::Logger *v35;
  NSObject *v36;

  if (a2)
  {
    __cxa_free_exception(v31);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v30);
    __cxa_end_catch();
    v36 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v35) + 432));
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)(v33 - 128) = 136315650;
      *(_QWORD *)(v32 + 4) = "PHASESoundEvent.mm";
      *(_WORD *)(v33 - 116) = 1024;
      *(_DWORD *)(v32 + 14) = 1141;
      *(_WORD *)(v33 - 110) = 2112;
      *(_QWORD *)(v32 + 20) = v29;
      _os_log_impl(&dword_2164CC000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d %@ Command buffer full.  Unable to Start PHASESoundEvent.  Consider having fewer sound event API calls in a given frame", (uint8_t *)(v33 - 128), 0x1Cu);
    }
    (*(void (**)(uint64_t, _QWORD))(v28 + 16))(v28, 0);
    JUMPOUT(0x2166684C4);
  }
  _Unwind_Resume(exception_object);
}

void sub_216668A14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216668C70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21666A204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_21666A8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_21666AC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_21666ADF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_21666B390(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int16 a12, __int16 a13)
{
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  Phase::Logger *v18;
  NSObject *v19;

  if (a2)
  {
    __cxa_free_exception(v16);
    __cxa_begin_catch(a1);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v15);
    __cxa_end_catch();

    v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v18) + 432));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315650;
      *(_QWORD *)((char *)&buf + 4) = "PHASESoundEvent.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1675;
      a13 = 2112;
      _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d %@ Command buffer full.  Unable to Seek.  Consider having fewer sound event API calls in a given frame", (uint8_t *)&buf, 0x1Cu);
    }
    (*(void (**)(uint64_t, _QWORD))(v13 + 16))(v13, 0);
    JUMPOUT(0x21666B0F4);
  }
  _Unwind_Resume(a1);
}

void sub_21666B7DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_21666B950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_21666B9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_21666BAC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,std::shared_ptr<Phase::ActionTreeObject>>(int,BOOL (Phase::ActionTreeManager::*)(std::shared_ptr<Phase::ActionTreeObject>),std::shared_ptr<Phase::ActionTreeObject>)::{lambda(void)#1},void>::~LambdaFunction(_QWORD *a1)
{
  *a1 = &off_24D57FA78;
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,std::shared_ptr<Phase::ActionTreeObject>>(int,BOOL (Phase::ActionTreeManager::*)(std::shared_ptr<Phase::ActionTreeObject>),std::shared_ptr<Phase::ActionTreeObject>)::{lambda(void)#1},void>::~LambdaFunction(_QWORD *a1)
{
  *a1 = &off_24D57FA78;
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x2199F9D70);
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,std::shared_ptr<Phase::ActionTreeObject>>(int,BOOL (Phase::ActionTreeManager::*)(std::shared_ptr<Phase::ActionTreeObject>),std::shared_ptr<Phase::ActionTreeObject>)::{lambda(void)#1},void>::operator()(_QWORD *a1)
{
  void (*v2)(_QWORD *, uint64_t *);
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v2 = (void (*)(_QWORD *, uint64_t *))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t *))(*v4 + v2);
  v6 = a1[4];
  v5 = (std::__shared_weak_count *)a1[5];
  v12 = v6;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v2(v4, &v12);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_21666BBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, double a7)
{
  uint64_t v14;
  _DWORD *v15;
  NSObject *v16;
  NSObject *v18;
  std::logic_error *exception;
  Phase::Logger *InstancePtr;
  NSObject *v21;
  std::runtime_error *v22;
  BOOL v23;
  unint64_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*(int *)(a1 + 16) <= 0)
  {
    v18 = objc_retainAutorelease(**(id **)(a1 + 24));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v26 = "Commandable.hpp";
      v27 = 1024;
      v28 = 132;
      _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.");
  }
  v14 = **(_QWORD **)(a1 + 8);
  v24 = 0;
  v23 = 1;
  v15 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v14, 80, &v24, &v23);
  if (!v15)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v21 = objc_retainAutorelease(**(id **)(v14 + 48));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v26 = "CommandQueue.hpp";
      v27 = 1024;
      v28 = 100;
      _os_log_impl(&dword_2164CC000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v23)
  {
    v16 = objc_retainAutorelease(**(id **)(v14 + 48));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v26 = "CommandQueue.hpp";
      v27 = 1024;
      v28 = 89;
      v29 = 2048;
      v30 = v24;
      v31 = 2048;
      v32 = 80;
      _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(_QWORD *)v15 = &off_24D57FB18;
  *((_QWORD *)v15 + 1) = a1;
  *((_QWORD *)v15 + 2) = Phase::ActionTreeManager::SetMetaParameter;
  *((_QWORD *)v15 + 3) = 0;
  *((_QWORD *)v15 + 4) = a2;
  *((_QWORD *)v15 + 5) = a3;
  *((_QWORD *)v15 + 6) = a4;
  v15[14] = a5;
  *((_QWORD *)v15 + 8) = a6;
  *((double *)v15 + 9) = a7;
  Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v14, 80);
  atomic_store(0, (unsigned __int8 *)(v14 + 40));
  return 1;
}

void sub_21666BF84(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x21666BDFCLL);
  }
  _Unwind_Resume(exception_object);
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double>(int,BOOL (Phase::ActionTreeManager::*)(Phase::UniqueObjectId,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double),Phase::UniqueObjectId,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double)::{lambda(void)#1},void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double>(int,BOOL (Phase::ActionTreeManager::*)(Phase::UniqueObjectId,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double),Phase::UniqueObjectId,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double)::{lambda(void)#1},void>::operator()(uint64_t a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double);
  uint64_t v2;
  _QWORD *v3;

  v1 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double))(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 8) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double))(*v3 + v1);
  return v1(v3, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 64), *(double *)(a1 + 72));
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,unsigned long long,BOOL,PHASESoundEventPrepareHandlerReason,void *),void *>(int,BOOL (Phase::ActionTreeManager::*)(Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,unsigned long long,BOOL,PHASESoundEventPrepareHandlerReason,void *),void *),Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,unsigned long long,BOOL,PHASESoundEventPrepareHandlerReason,void *),void *)::{lambda(void)#1},void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,unsigned long long,BOOL,PHASESoundEventPrepareHandlerReason,void *),void *>(int,BOOL (Phase::ActionTreeManager::*)(Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,unsigned long long,BOOL,PHASESoundEventPrepareHandlerReason,void *),void *),Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,unsigned long long,BOOL,PHASESoundEventPrepareHandlerReason,void *),void *)::{lambda(void)#1},void>::operator()(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))(*v3 + v1);
  return v1(v3, a1[4], a1[5], a1[6], a1[7]);
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,Phase::Controller::IOTimeStamps const&,PHASESoundEventStartHandlerReason,void *),void *>(int,BOOL (Phase::ActionTreeManager::*)(Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,Phase::Controller::IOTimeStamps const&,PHASESoundEventStartHandlerReason,void *),void *),Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,Phase::Controller::IOTimeStamps const&,PHASESoundEventStartHandlerReason,void *),void *)::{lambda(void)#1},void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,Phase::Controller::IOTimeStamps const&,PHASESoundEventStartHandlerReason,void *),void *>(int,BOOL (Phase::ActionTreeManager::*)(Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,Phase::Controller::IOTimeStamps const&,PHASESoundEventStartHandlerReason,void *),void *),Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,Phase::Controller::IOTimeStamps const&,PHASESoundEventStartHandlerReason,void *),void *)::{lambda(void)#1},void>::operator()(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))(*v3 + v1);
  return v1(v3, a1[4], a1[5], a1[6], a1[7]);
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,double,void (*)(Phase::UniqueObjectId,PHASESoundEventSeekHandlerReason,void *),void *>(int,BOOL (Phase::ActionTreeManager::*)(Phase::UniqueObjectId,double,void (*)(Phase::UniqueObjectId,PHASESoundEventSeekHandlerReason,void *),void *),Phase::UniqueObjectId,double,void (*)(Phase::UniqueObjectId,PHASESoundEventSeekHandlerReason,void *),void *)::{lambda(void)#1},void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,double,void (*)(Phase::UniqueObjectId,PHASESoundEventSeekHandlerReason,void *),void *>(int,BOOL (Phase::ActionTreeManager::*)(Phase::UniqueObjectId,double,void (*)(Phase::UniqueObjectId,PHASESoundEventSeekHandlerReason,void *),void *),Phase::UniqueObjectId,double,void (*)(Phase::UniqueObjectId,PHASESoundEventSeekHandlerReason,void *),void *)::{lambda(void)#1},void>::operator()(uint64_t a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, double);
  uint64_t v2;
  _QWORD *v3;

  v1 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, double))(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 8) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, double))(*v3 + v1);
  return v1(v3, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(double *)(a1 + 48));
}

void sub_21666C130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21666C1A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21666C2DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21666C430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21666C4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21666C664(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21666C71C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_21666C820(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21666C94C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21666C9F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21666CAF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21666CB84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21666CC8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21666CDB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21666CED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_21666D0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_21666D1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_21666D2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_21666D408(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21666D4A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21666D5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21666D72C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21666D858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21666D8FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21666D9F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21666DA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21666DBD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21666DD20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21666DDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_21666DF50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_21666E058(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21666E110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_21666E528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_21666E640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21666E964(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x21666E878);
  }
  _Unwind_Resume(exception_object);
}

void sub_21666EC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  if (a2)
  {
    __cxa_free_exception(v10);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v11);
    __cxa_end_catch();
    JUMPOUT(0x21666EB84);
  }
  _Unwind_Resume(exception_object);
}

void sub_21666EFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  if (a2)
  {
    __cxa_free_exception(v10);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v11);
    __cxa_end_catch();
    JUMPOUT(0x21666EEACLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_21666F320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  void *v19;

  if (a2)
  {
    __cxa_free_exception(v19);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v18);
    __cxa_end_catch();
    JUMPOUT(0x21666F220);
  }
  _Unwind_Resume(exception_object);
}

void sub_21666F41C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21666F4D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_21666F8E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_21666FA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21666FB5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21666FD98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_21666FEA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21666FF58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216670144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_2166701E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216670288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21667032C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_2166703CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21667046C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216670510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_2166705B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216670654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216670BE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216670E3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_216670FC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_216671098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216671110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PHASESoundPrototype;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_216671198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21667122C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216671318(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21667144C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21667159C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166717D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_2166718C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216671A38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216671ACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216671B90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216671C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216671CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216671E00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216671E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216671F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216671FCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166721CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2166723AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166724C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216672630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21667275C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166728C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216672A08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216672C00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216672CB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216672D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::ClientTapRegistryProxy>(Phase::Logger *a1, int a2)
{
  uint64_t v3;
  Phase::Logger *v4;
  uint64_t (**v5)(uint64_t, _QWORD, _QWORD, _QWORD, void *);
  NSObject *v7;
  std::logic_error *exception;
  NSObject *v9;
  std::string *v10;
  std::logic_error *v11;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 7) - v3) >> 5))
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 112;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(_QWORD *)v4)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 121;
      v17 = 1024;
      v18 = a2;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  v5 = std::any_cast[abi:ne180100]<Phase::Controller::ClientTapRegistryProxy * const>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v4);
  if (!v5)
    std::__throw_bad_any_cast[abi:ne180100]();
  return (uint64_t)*v5;
}

void sub_216672F4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21667303C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_21667305C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_2166730F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216673178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21667320C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216673298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216673310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216673378(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166733E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216673544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216673608(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2166736C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)PHASEPreSpatialTapSource;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_21667376C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2166737FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2166739F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_216673C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_216673DA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216673E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216673ED4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216673F64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Controller::ClientTapRegistryProxy * const>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::ClientTapRegistryProxy *>::__id);
    else
      return 0;
  }
  return result;
}

void sub_2166740A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21667413C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_2166741D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216674274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21667430C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_2166743BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216674454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2166746A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166747BC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_2166748E4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_216674A08(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_216674AE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216674C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_216674D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216674F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_21667508C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216675258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  void *v12;
  uint64_t *v13;
  uint64_t *v15;
  uint64_t v16;

  v15 = a12;
  if (a12 == v13)
  {
    v16 = 4;
    v15 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_216675464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  void *v12;
  uint64_t *v13;
  uint64_t *v15;
  uint64_t v16;

  v15 = a12;
  if (a12 == v13)
  {
    v16 = 4;
    v15 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_216675670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  void *v12;
  uint64_t *v13;
  uint64_t *v15;
  uint64_t v16;

  v15 = a12;
  if (a12 == v13)
  {
    v16 = 4;
    v15 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_216675880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  void *v12;
  uint64_t *v13;
  uint64_t *v15;
  uint64_t v16;

  v15 = a12;
  if (a12 == v13)
  {
    v16 = 4;
    v15 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_216675AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_216675DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_216676158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216676210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2166762C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21667634C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2166764A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216676660(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2166766AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216676774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const char *Phase::SpatialModeler::PresetEarlyReflectionsErrorCategory::name(Phase::SpatialModeler::PresetEarlyReflectionsErrorCategory *this)
{
  return "Preset Early Reflections";
}

void Phase::SpatialModeler::PresetEarlyReflectionsErrorCategory::message(int a1@<W1>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v6;

  if (a1 >= 8)
    std::terminate();
  std::string::basic_string[abi:ne180100]<0>(__p, "Preset early reflections ");
  Phase::SpatialModeler::ModelerErrorMessage(a1, (const void **)__p, a2);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_2166769E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::PresetEarlyReflectionsErrorCategory::~PresetEarlyReflectionsErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::SpatialModeler::PresetEarlyReflections::GetSupportedQueryDescs(std::string **a1@<X8>)
{
  std::string *v3;
  uint64_t v4;
  char *v5;
  void *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[5];
  int v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[5];
  int v18;
  _OWORD v19[2];
  __int128 v20;

  *(_QWORD *)&v20 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v7, "CULL");
  v8 = 0;
  v9 = 0x100000001;
  v10 = 1;
  v11 = 0u;
  v12 = 0u;
  std::string::basic_string[abi:ne180100]<0>(v13, "CLUSTER");
  v13[3] = 1;
  v13[4] = 0x200000003;
  v14 = 1;
  v15 = 0u;
  v16 = 0u;
  std::string::basic_string[abi:ne180100]<0>(v17, "SPATIAL");
  v17[3] = 2;
  v17[4] = 0x300000002;
  v18 = 1;
  memset(v19, 0, sizeof(v19));
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (std::string *)operator new(0xF0uLL);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 10;
  v4 = 0;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::QueryDesc>,Phase::SpatialModeler::QueryDesc const*,Phase::SpatialModeler::QueryDesc const*,Phase::SpatialModeler::QueryDesc*>((uint64_t)(a1 + 2), &v7, &v20, v3);
  do
  {
    v5 = (char *)&v7 + v4 * 16;
    v6 = *(void **)&v19[v4];
    if (v6)
    {
      *((_QWORD *)v5 + 27) = v6;
      operator delete(v6);
    }
    if (v5[183] < 0)
      operator delete(*((void **)v5 + 20));
    v4 -= 5;
  }
  while (v4 != -15);
}

void sub_216676BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t i;

  *(_QWORD *)(v12 + 8) = v13;
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100](&a10);
  for (i = 160; i != -80; i -= 80)
    Phase::SpatialModeler::QueryDesc::~QueryDesc((Phase::SpatialModeler::QueryDesc *)(&a12 + i));
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::PresetEarlyReflections::Init(uint64_t a1, _QWORD *a2)
{
  Phase::HeapAllocator::InitializeWithBacking((Phase::HeapAllocator *)(a1 + 40), 0x100000uLL, "PresetEarlyReflectionsHeap", 16, 128, 64);
  *(_QWORD *)(a1 + 1024) = *a2;
}

void *Phase::SpatialModeler::PresetEarlyReflections::Shutdown(Phase::SpatialModeler::PresetEarlyReflections *this)
{
  return Phase::HeapAllocator::Destroy((Phase::SpatialModeler::PresetEarlyReflections *)((char *)this + 40));
}

void Phase::SpatialModeler::PresetEarlyReflections::RunQuery(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  double v14;
  const char *v15;
  Phase *v16;
  Phase *v17;
  uint64_t v18;
  char *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  float32x2_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  float *v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  Phase *v42;
  Phase *v43;
  uint64_t v44;
  char *v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  Phase *v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  _OWORD *v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  float v63;
  uint64_t v64;
  float *v65;
  float v66;
  float v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _OWORD *v88;
  _OWORD *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  float v114;
  uint64_t v115;
  uint64_t v116;
  float *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  double v130;
  uint64_t v131;
  float32x2_t *v132;
  uint64_t v133;
  float *v134;
  uint64_t v135;
  uint64_t v136;
  uint8_t *v137;
  float *v138;
  float v139;
  float v140;
  float v141;
  uint64_t v142;
  float v143;
  float *v144;
  uint64_t v145;
  float v146;
  float v147;
  float v148;
  uint64_t v149;
  double v150;
  uint64_t v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  __float2 v157;
  __float2 v158;
  uint64_t v159;
  unint64_t v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float *v167;
  uint64_t v168;
  _DWORD *v169;
  int *v170;
  int v171;
  BOOL v172;
  NSObject *v173;
  std::logic_error *exception;
  char v175;
  unint64_t v176;
  float v177;
  uint64_t v178;
  float v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  _BYTE v187[28];
  float32x2_t v188[2];
  uint8_t buf[32];
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  _OWORD v194[3];
  uint64_t v195[6];
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;

  v205 = *MEMORY[0x24BDAC8D0];
  v5 = a2[10];
  if (v5 == 2)
  {
    v22 = a2[11];
    if (!v22 || *(_DWORD *)v22 != 2)
      goto LABEL_42;
    v23 = a2[12];
    if (!v23 || *(_DWORD *)v23 != 3)
      goto LABEL_46;
    v24 = a2[8];
    if (!v24)
      goto LABEL_50;
    v25 = *(_QWORD *)(v22 + 552);
    v26 = *(_DWORD *)(v24 + 136);
    if (v26 <= v25
      || (v27 = *(_QWORD *)(v24 + 120), *(_DWORD *)(v27 + 24 * v25 + 20) != HIDWORD(v25))
      || (v28 = *(float32x2_t **)(v27 + 24 * *(_QWORD *)(v22 + 552))) == 0
      || v28->i32[0] != 2)
    {
      if (!a1)
        goto LABEL_136;
      v37 = (**(uint64_t (***)(uint64_t))a1)(a1);
      goto LABEL_134;
    }
    v29 = *(_QWORD *)(v24 + 160);
    memset(v188, 0, 12);
    if (*(_BYTE *)(a1 + 1068))
    {
      if (*(_QWORD *)(v22 + 192) || *(_QWORD *)(v22 + 200))
      {
        v30 = *(unsigned int *)(v22 + 508);
        v181 = 0u;
        v182 = 0u;
        v183 = 0u;
        v184 = 0u;
        v185 = 0u;
        v186 = 0u;
        memset(v187, 0, sizeof(v187));
        if ((_DWORD)v30)
        {
          v31 = (float *)&v181;
          v32 = v22;
          v33 = v30;
          do
          {
            *v31++ = *(float *)(v32 + 384) - *(float *)(v32 + 64);
            v32 += 4;
            --v33;
          }
          while (v33);
          v193 = 0u;
          memset(v194, 0, 28);
          v191 = 0u;
          v192 = 0u;
          v190 = 0u;
          memset(buf, 0, sizeof(buf));
          v34 = buf;
          v35 = (float *)&v181;
          HIDWORD(v194[1]) = v30;
          do
          {
            v36 = *v35++;
            *(float *)v34 = fmaxf(v36, 0.0);
            v34 += 4;
            --v30;
          }
          while (v30);
        }
        else
        {
          memset(v194, 0, 32);
          v192 = 0uLL;
          v193 = 0uLL;
          v190 = 0uLL;
          v191 = 0uLL;
          memset(buf, 0, sizeof(buf));
        }
        v201 = v192;
        v202 = v193;
        v203 = v194[0];
        v204 = v194[1];
        v197 = *(_OWORD *)buf;
        v198 = *(_OWORD *)&buf[16];
        v140 = 0.0;
        v177 = 0.0;
        v199 = v190;
        v200 = v191;
        v141 = 0.0;
LABEL_151:
        v179 = v141;
        v142 = *(_QWORD *)(v22 + 8);
        if (v142)
        {
          v143 = 0.0;
          v144 = (float *)&v197;
          v145 = *(_QWORD *)(v22 + 8);
          do
          {
            v146 = *v144++;
            v147 = v146;
            if (v146 > v143)
              v143 = v147;
            --v145;
          }
          while (v145);
        }
        else
        {
          v143 = 0.0;
        }
        v148 = -v143;
        if (v29 != *(_QWORD *)(a1 + 1056))
        {
          v149 = **(_QWORD **)(a1 + 1024);
          v150 = exp(v148 * 10.0 / 10.0 * 0.115129255);
          Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Query(v149, v29, 0, v142, (uint64_t)buf, v150);
          *(_DWORD *)(a1 + 1072) = *(_DWORD *)buf;
          *(_BYTE *)(a1 + 1076) = buf[4];
          std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 1080), (uint64_t *)&buf[8]);
          *(_QWORD *)(a1 + 1120) = v191;
          std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 1128), (uint64_t *)&v191 + 1);
          *(_QWORD *)(a1 + 1168) = *(_QWORD *)&v194[0];
          std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 1176), (uint64_t *)v194 + 1);
          std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 1216), v195);
          *(_QWORD *)(a1 + 1256) = v195[5];
          *(_OWORD *)(a1 + 1264) = v196;
          std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v195);
          std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)v194 + 1);
          std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v191 + 1);
          std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&buf[8]);
        }
        v151 = *(_QWORD *)(a1 + 1120);
        if (v151)
        {
          Phase::SpatialModeler::AllocMetadata<float,Phase::HeapAllocator>((uint64_t *)v23, (Phase *)(a1 + 40), v151, *(_QWORD *)(v22 + 8));
          *(_OWORD *)buf = xmmword_2166F7280;
          if (!*(_BYTE *)(a1 + 1068))
          {
            v152 = v140 < 0.0 ? -v140 : v140;
            if (v152 > 0.0001)
              goto LABEL_172;
            v153 = -v177;
            if (v177 >= 0.0)
              v153 = v177;
            if (v153 > 0.0001)
              goto LABEL_172;
            v154 = v179;
            if (v179 < 0.0)
              v154 = -v179;
            if (v154 > 0.0001)
            {
LABEL_172:
              v155 = asinf(v177 / sqrtf((float)((float)(v140 * v140) + (float)(v177 * v177)) + (float)(v179 * v179)));
              v156 = atan2f(-v140, -v179) * 0.5;
              v157 = __sincosf_stret(v155 * 0.5);
              v158 = __sincosf_stret(v156);
              *(float *)buf = (float)(v157.__sinval * v158.__cosval)
                            - (float)((float)(v157.__cosval * v158.__sinval) * 0.0);
              *(float *)&buf[4] = (float)(v157.__cosval * v158.__sinval)
                                + (float)((float)(v157.__sinval * v158.__cosval) * 0.0);
              *(float *)&buf[8] = (float)((float)(v157.__cosval * v158.__cosval) * 0.0)
                                - (float)(v157.__sinval * v158.__sinval);
              *(float *)&buf[12] = (float)(v157.__cosval * v158.__cosval)
                                 + (float)((float)(v157.__sinval * v158.__sinval) * 0.0);
            }
          }
          if (*(_QWORD *)(a1 + 1120))
          {
            v159 = 0;
            v160 = 0;
            do
            {
              if (*(_DWORD *)(a1 + 1276) != 1)
                __assert_rtn("RunSpatialQuery", "PresetEarlyReflectionsModeler.cpp", 570, "mLastPresetMetadataEntries.mDirectionType == DirectionalMetadataOutput<float>::DirectionType::CartesianInWorldSpace");
              Phase::operator*<float>((float *)buf, (float *)(*(_QWORD *)(a1 + 1080) + 12 * v160), (float *)&v181);
              v161 = *(float *)&v181;
              v162 = *((float *)&v181 + 2);
              v163 = sqrtf((float)((float)(v161 * v161) + (float)(*((float *)&v181 + 1) * *((float *)&v181 + 1)))+ (float)(v162 * v162));
              v164 = acosf(*((float *)&v181 + 1) / v163);
              v165 = atan2f(v161, v162);
              v166 = (float)((float)(180.0 - (float)(v165 * 57.296))
                           - (float)(floorf((float)(180.0 - (float)(v165 * 57.296)) / 360.0) * 360.0))
                   + 0.0;
              if (v166 >= 360.0)
                v166 = nextafterf(360.0, 0.0);
              v167 = (float *)(*(_QWORD *)(v23 + 8) + 12 * v160);
              *v167 = v163;
              v167[1] = v164 * 57.296;
              v167[2] = v166;
              *(_DWORD *)(*(_QWORD *)(v23 + 56) + 4 * v160) = *(_DWORD *)(*(_QWORD *)(a1 + 1128) + 4 * v160);
              v168 = *(_QWORD *)(v22 + 8);
              if (v168)
              {
                v169 = (_DWORD *)(*(_QWORD *)(v23 + 104) + *(_QWORD *)(*(_QWORD *)(v23 + 104) + 8) * v159 + 16);
                v170 = (int *)(*(_QWORD *)(a1 + 1176) + *(_QWORD *)(*(_QWORD *)(a1 + 1176) + 8) * v159 + 16);
                do
                {
                  v171 = *v170++;
                  *v169++ = v171;
                  --v168;
                }
                while (v168);
              }
              *(_BYTE *)(*(_QWORD *)(v23 + 144) + v160) = *(_BYTE *)(*(_QWORD *)(a1 + 1216) + v160);
              ++v160;
              v159 += 4;
            }
            while (v160 < *(_QWORD *)(a1 + 1120));
          }
          *(_BYTE *)(v23 + 201) = *(_BYTE *)(a1 + 1273);
          *(_DWORD *)(v23 + 204) = 0;
        }
        else
        {
          Phase::SpatialModeler::ClearMetadata<float>((uint64_t *)v23);
        }
        v172 = v29 != *(_QWORD *)(a1 + 1056)
            || *(float *)(a1 + 1064) != v148
            || v140 != *(float *)(a1 + 1032)
            || v177 != *(float *)(a1 + 1036)
            || v179 != *(float *)(a1 + 1040);
        *(_BYTE *)(v23 + 4) = v172;
        *(float *)(a1 + 1032) = v140;
        *(float *)(a1 + 1036) = v177;
        *(float *)(a1 + 1040) = v179;
        *(_QWORD *)(a1 + 1056) = v29;
        v8 = 1;
        *(float *)(a1 + 1064) = v148;
        goto LABEL_49;
      }
    }
    else
    {
      v131 = *(_QWORD *)(v22 + 208);
      if (v26 > v131 && *(_DWORD *)(v27 + 24 * v131 + 20) == HIDWORD(v131))
      {
        v132 = *(float32x2_t **)(v27 + 24 * *(_QWORD *)(v22 + 208));
        if (v132)
        {
          if (v132->i32[0] == 3)
          {
            v133 = *(unsigned int *)(v22 + 508);
            v181 = 0u;
            v182 = 0u;
            v183 = 0u;
            v184 = 0u;
            v185 = 0u;
            v186 = 0u;
            memset(v187, 0, sizeof(v187));
            if ((_DWORD)v133)
            {
              v134 = (float *)&v181;
              v135 = v22;
              v136 = v133;
              do
              {
                *v134++ = *(float *)(v135 + 384) - *(float *)(v135 + 64);
                v135 += 4;
                --v136;
              }
              while (v136);
              v193 = 0u;
              memset(v194, 0, 28);
              v191 = 0u;
              v192 = 0u;
              v190 = 0u;
              memset(buf, 0, sizeof(buf));
              v137 = buf;
              v138 = (float *)&v181;
              HIDWORD(v194[1]) = v133;
              do
              {
                v139 = *v138++;
                *(float *)v137 = fmaxf(v139, 0.0);
                v137 += 4;
                --v133;
              }
              while (v133);
            }
            else
            {
              memset(v194, 0, 32);
              v192 = 0uLL;
              v193 = 0uLL;
              v190 = 0uLL;
              v191 = 0uLL;
              memset(buf, 0, sizeof(buf));
            }
            v201 = v192;
            v202 = v193;
            v203 = v194[0];
            v204 = v194[1];
            v197 = *(_OWORD *)buf;
            v198 = *(_OWORD *)&buf[16];
            v199 = v190;
            v200 = v191;
            v188[0] = v132[8];
            v188[1].i32[0] = v132[9].i32[0];
            Phase::TransformPositionByInverse<float>(v28 + 6, v188, (float *)buf);
            v140 = *(float *)buf;
            v177 = *(float *)&buf[4];
            v141 = *(float *)&buf[8];
            goto LABEL_151;
          }
        }
      }
    }
    v37 = (**(uint64_t (***)(uint64_t))a1)(a1);
LABEL_148:
    v38 = 6;
    goto LABEL_48;
  }
  if (v5 == 1)
  {
    v9 = a2[11];
    if (v9 && *(_DWORD *)v9 == 3)
    {
      v10 = a2[12];
      if (v10 && *(_DWORD *)v10 == 2)
      {
        v11 = a2[8];
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 160);
          v13 = v12 != *(_QWORD *)(a1 + 1048);
          *(_QWORD *)(a1 + 1048) = v12;
          v14 = *(double *)(v9 + 40);
          *(_BYTE *)(a1 + 1068) = v14 == 1.0;
          v178 = v11;
          if (v14 == 1.0)
          {
            v175 = v13;
            if (*(_QWORD *)(a1 + 48))
              v15 = *(const char **)(a1 + 48);
            else
              v15 = "<Unnamed>";
            v16 = Phase::HeapAllocator::Allocate((Phase::HeapAllocator *)(a1 + 40), 0x150uLL, v15, 0, 0x10uLL);
            v17 = v16;
            v18 = 0;
            *(_OWORD *)v16 = 0u;
            *((_OWORD *)v16 + 1) = 0u;
            *((_DWORD *)v16 + 8) = 0;
            *(_QWORD *)((char *)v16 + 36) = 1065353216;
            *(_QWORD *)((char *)v16 + 44) = 0;
            *((_DWORD *)v16 + 13) = 1065353216;
            do
            {
              v19 = (char *)v16 + v18;
              *((_DWORD *)v19 + 14) = 0;
              *((_QWORD *)v19 + 8) = 0;
              v18 += 16;
            }
            while (v18 != 128);
            *((_QWORD *)v16 + 23) = 0;
            *(_QWORD *)buf = 0;
            *(_DWORD *)&buf[8] = 0;
            Phase::Subbands<float>::Subbands((uint64_t)v16 + 192, buf, 3);
            *((_BYTE *)v17 + 320) = 0;
            *(_QWORD *)buf = &off_24D57FF48;
            *(_QWORD *)&buf[8] = a1 + 40;
            *(_QWORD *)&buf[24] = buf;
            *(_QWORD *)&v197 = v17;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v197 + 8, (uint64_t)buf);
            v20 = *(uint8_t **)&buf[24];
            if (*(uint8_t **)&buf[24] == buf)
            {
              v21 = 4;
              v20 = buf;
            }
            else
            {
              if (!*(_QWORD *)&buf[24])
                goto LABEL_67;
              v21 = 5;
            }
            (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_67:
            v48 = v197;
            *(_QWORD *)&v197 = 0;
            *(_QWORD *)buf = v48;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v197 + 8);
            *((_QWORD *)&v190 + 1) = 1;
            std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v197);
            v49 = v10 + 8;
            std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v10 + 8), (uint64_t *)buf);
            *(_QWORD *)(v10 + 48) = *((_QWORD *)&v190 + 1);
            std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
            if (*(_QWORD *)(a1 + 48))
              v50 = *(const char **)(a1 + 48);
            else
              v50 = "<Unnamed>";
            v51 = Phase::HeapAllocator::Allocate((Phase::HeapAllocator *)(a1 + 40), 1uLL, v50, 0, 1uLL);
            *(_QWORD *)buf = &off_24D580068;
            *(_QWORD *)&buf[8] = a1 + 40;
            *(_QWORD *)&buf[24] = buf;
            *(_QWORD *)&v197 = v51;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v197 + 8, (uint64_t)buf);
            v52 = *(uint8_t **)&buf[24];
            if (*(uint8_t **)&buf[24] == buf)
            {
              v53 = 4;
              v52 = buf;
            }
            else
            {
              if (!*(_QWORD *)&buf[24])
              {
LABEL_75:
                v54 = v197;
                *(_QWORD *)&v197 = 0;
                *(_QWORD *)buf = v54;
                std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v197 + 8);
                *((_QWORD *)&v190 + 1) = 1;
                std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v197);
                std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v10 + 56), (uint64_t *)buf);
                *(_QWORD *)(v10 + 96) = *((_QWORD *)&v190 + 1);
                std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
                if (*(_QWORD *)(v9 + 96))
                {
                  v55 = *(__int128 **)(v9 + 56);
                  v56 = *(_OWORD **)v49;
                  v57 = *v55;
                  *((_QWORD *)v56 + 2) = *((_QWORD *)v55 + 2);
                  *v56 = v57;
                  *((_DWORD *)v56 + 6) = *((_DWORD *)v55 + 6);
                  *((_DWORD *)v56 + 7) = *((_DWORD *)v55 + 7);
                  *((_DWORD *)v56 + 8) = *((_DWORD *)v55 + 8);
                  *((_DWORD *)v56 + 9) = *((_DWORD *)v55 + 9);
                  *((_DWORD *)v56 + 10) = *((_DWORD *)v55 + 10);
                  *((_DWORD *)v56 + 11) = *((_DWORD *)v55 + 11);
                  *((_DWORD *)v56 + 12) = *((_DWORD *)v55 + 12);
                  *((_DWORD *)v56 + 13) = *((_DWORD *)v55 + 13);
                  memcpy((char *)v56 + 56, (char *)v55 + 56, 0x109uLL);
                  v58 = v175;
                }
                else
                {
                  MEMORY[0x2199FA6B8](buf);
                  *(_OWORD *)*(_QWORD *)v49 = *(_OWORD *)buf;
                  v58 = 1;
                }
                **(_BYTE **)(v10 + 56) = v58;
                *(_BYTE *)(*(_QWORD *)v49 + 320) = 1;
                v59 = *(_QWORD *)(v9 + 144);
                if (v59)
                {
                  v60 = 0;
                  v61 = *(_QWORD *)(v9 + 104);
                  v62 = (float *)(v61 + 16);
                  v63 = -3.4028e38;
                  do
                  {
                    v64 = *(unsigned int *)(v61 + 304 * v60 + 140);
                    v65 = v62;
                    if ((_DWORD)v64)
                    {
                      do
                      {
                        v66 = *v65++;
                        v67 = v66;
                        if (v66 > v63)
                          v63 = v67;
                        --v64;
                      }
                      while (v64);
                    }
                    ++v60;
                    v62 += 76;
                  }
                  while (v60 != v59);
                }
                else
                {
                  v63 = -3.4028e38;
                }
                *(float *)&v197 = v63;
                *((float *)&v197 + 1) = v63;
                *((float *)&v197 + 2) = v63;
                Phase::Subbands<float>::Subbands((uint64_t)buf, &v197, 3);
                v68 = *(_OWORD **)v49;
                v69 = v193;
                v68[16] = v192;
                v68[17] = v69;
                v70 = v194[1];
                v68[18] = v194[0];
                v68[19] = v70;
                v71 = *(_OWORD *)&buf[16];
                v68[12] = *(_OWORD *)buf;
                v68[13] = v71;
                v72 = v191;
                v68[14] = v190;
                v68[15] = v72;
LABEL_93:
                v96 = *(_QWORD *)(v9 + 152);
                if (*(_DWORD *)(v178 + 136) > v96)
                {
                  v97 = *(_QWORD *)(v178 + 120);
                  if (*(_DWORD *)(v97 + 24 * v96 + 20) == HIDWORD(v96))
                  {
                    v98 = *(_QWORD *)(v97 + 24 * *(_QWORD *)(v9 + 152));
                    if (v98)
                    {
                      if (*(_DWORD *)v98 == 2)
                      {
                        v99 = *(_QWORD *)(v9 + 144);
                        v180 = a1 + 40;
                        *(_QWORD *)&v181 = v99;
                        v188[0] = (float32x2_t)8;
                        *(_QWORD *)buf = a1 + 40;
                        *(_QWORD *)&buf[8] = &v181;
                        *(_QWORD *)&buf[16] = v188;
                        Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(v99, (uint64_t)buf, &v180, (Phase **)&v197);
                        v100 = v197;
                        *(_QWORD *)&v197 = 0;
                        *(_QWORD *)buf = v100;
                        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v197 + 8);
                        *((_QWORD *)&v190 + 1) = v99;
                        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v197);
                        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v10 + 104), (uint64_t *)buf);
                        *(_QWORD *)(v10 + 144) = *((_QWORD *)&v190 + 1);
                        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
                        v101 = *(_QWORD *)(v10 + 144);
                        if (!v101)
                          goto LABEL_9;
                        v102 = 0;
                        v103 = 0;
                        v104 = 0;
                        v105 = *(_QWORD *)(v10 + 104);
                        v106 = v178;
                        while (1)
                        {
                          v107 = *(unsigned __int8 *)(a1 + 1068);
                          v108 = *(_BYTE *)(a1 + 1068) ? 0 : v104;
                          *(_QWORD *)(v105 + v103) = v108;
                          v109 = *(_QWORD *)(v9 + 104);
                          v110 = *(_QWORD *)(v109 + v102 + 144);
                          if (*(_DWORD *)(v106 + 136) <= v110)
                            break;
                          v111 = *(_QWORD *)(v106 + 120);
                          if (*(_DWORD *)(v111 + 24 * v110 + 20) != HIDWORD(v110))
                            break;
                          v112 = *(_QWORD *)(v111 + 24 * *(_QWORD *)(v109 + v102 + 144));
                          if (!v112 || *(_DWORD *)v112 != 3)
                            break;
                          v113 = *(uint64_t **)(v112 + 120);
                          v114 = 0.0;
                          if (v113 != *(uint64_t **)(v112 + 128))
                          {
                            v115 = *v113;
                            if (*(_DWORD *)(v106 + 112) > *v113)
                            {
                              v116 = *(_QWORD *)(v106 + 96);
                              if (*(_DWORD *)(v116 + 24 * v115 + 20) == HIDWORD(v115))
                              {
                                v117 = *(float **)(v116 + 24 * v115);
                                if (v117)
                                  v114 = (float)(*(float *)(v112 + 76)
                                               * fmaxf(fmaxf(v117[9] - v117[6], v117[10] - v117[7]), v117[11] - v117[8]))
                                       * 0.5;
                              }
                            }
                          }
                          if (v107
                            && (*(_DWORD *)(v109 + v102 + 176) != 1
                              ? (v118 = 0)
                              : (v118 = *(_QWORD *)(v109 + v102 + 184)),
                                *(_DWORD *)(v106 + 40) > v118
                             && (v119 = *(_QWORD *)(v106 + 24),
                                 *(_DWORD *)(v119 + 24 * v118 + 20) == HIDWORD(v118))
                             && (v120 = *(_QWORD *)(v119 + 24 * v118)) != 0))
                          {
                            v121 = *(float *)(v98 + 64) - *(float *)(v112 + 64);
                            v122 = *(float *)(v98 + 68) - *(float *)(v112 + 68);
                            v123 = sqrtf((float)((float)(v121 * v121) + (float)(v122 * v122))+ (float)((float)(*(float *)(v98 + 72) - *(float *)(v112 + 72))* (float)(*(float *)(v98 + 72) - *(float *)(v112 + 72))));
                            v124 = *(double *)(v98 + 152);
                            v125 = fmaxf(v124, v114 + (float)(v123 - v114));
                            if (*(_DWORD *)v120 == 2)
                            {
                              v128 = **(_QWORD **)(v120 + 40);
                              if (!v128)
                                goto LABEL_136;
                              v129 = Phase::Envelope<float>::operator()((float **)(v128 + 16), v125);
                              if (v129 <= 0.0)
                                v129 = COERCE_FLOAT(1);
                              v126 = (float)((float)(logf(v129) * 8.6859) / 10.0) * 10.0;
                              v105 = *(_QWORD *)(v10 + 104);
                              v101 = *(_QWORD *)(v10 + 144);
                              v106 = v178;
                            }
                            else
                            {
                              v126 = 0.0;
                              if (*(_DWORD *)v120 == 1)
                              {
                                v176 = v101;
                                v127 = **(_QWORD **)(v120 + 40);
                                if (!v127)
                                  goto LABEL_136;
                                v126 = (float)(log2f(v125 / (float)(v114 + 1.0)) * -6.0206) * *(float *)(v127 + 16);
                                v101 = v176;
                                v106 = v178;
                              }
                            }
                            v130 = v126;
                            if (v126 > 0.0)
                              v130 = 0.0;
                            *(double *)(v105 + v103 + 8) = v130;
                          }
                          else
                          {
                            *(_QWORD *)(v105 + v103 + 8) = 0;
                          }
                          ++v104;
                          v103 += 16;
                          v102 += 304;
                          v8 = 1;
                          if (v104 >= v101)
                            goto LABEL_49;
                        }
                        v37 = (**(uint64_t (***)(uint64_t))a1)(a1);
                        goto LABEL_148;
                      }
                    }
                  }
                }
                if (!a1)
                  goto LABEL_136;
                v37 = (**(uint64_t (***)(uint64_t))a1)(a1);
LABEL_134:
                v38 = 7;
                goto LABEL_48;
              }
              v53 = 5;
            }
            (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
            goto LABEL_75;
          }
          v40 = *(_QWORD *)(v9 + 144);
          if (!v40)
          {
            v173 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 112);
            if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ManagedPtr.hpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 229;
              _os_log_impl(&dword_2164CC000, v173, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", buf, 0x12u);
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
          }
          if (*(_QWORD *)(a1 + 48))
            v41 = *(const char **)(a1 + 48);
          else
            v41 = "<Unnamed>";
          v42 = Phase::HeapAllocator::Allocate((Phase::HeapAllocator *)(a1 + 40), 336 * v40, v41, 0, 0x10uLL);
          v43 = v42;
          do
          {
            v44 = 0;
            *((_DWORD *)v43 + 8) = 0;
            *(_OWORD *)v43 = 0u;
            *((_OWORD *)v43 + 1) = 0u;
            *(_QWORD *)((char *)v43 + 36) = 1065353216;
            *(_QWORD *)((char *)v43 + 44) = 0;
            *((_DWORD *)v43 + 13) = 1065353216;
            do
            {
              v45 = (char *)v43 + v44;
              *((_DWORD *)v45 + 14) = 0;
              *((_QWORD *)v45 + 8) = 0;
              v44 += 16;
            }
            while (v44 != 128);
            *((_QWORD *)v43 + 23) = 0;
            *(_QWORD *)buf = 0;
            *(_DWORD *)&buf[8] = 0;
            Phase::Subbands<float>::Subbands((uint64_t)v43 + 192, buf, 3);
            *((_BYTE *)v43 + 320) = 0;
            v43 = (Phase *)((char *)v43 + 336);
          }
          while (v43 != (Phase *)((char *)v42 + 336 * v40));
          *(_QWORD *)buf = &off_24D57FF48;
          *(_QWORD *)&buf[8] = a1 + 40;
          *(_QWORD *)&buf[24] = buf;
          *(_QWORD *)&v197 = v42;
          std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v197 + 8, (uint64_t)buf);
          v46 = *(uint8_t **)&buf[24];
          if (*(uint8_t **)&buf[24] == buf)
          {
            v47 = 4;
            v46 = buf;
          }
          else
          {
            if (!*(_QWORD *)&buf[24])
              goto LABEL_90;
            v47 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_90:
          v73 = v197;
          *(_QWORD *)&v197 = 0;
          *(_QWORD *)buf = v73;
          std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v197 + 8);
          *((_QWORD *)&v190 + 1) = v40;
          std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v197);
          v74 = (_QWORD *)(v10 + 8);
          std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v10 + 8), (uint64_t *)buf);
          *(_QWORD *)(v10 + 48) = *((_QWORD *)&v190 + 1);
          std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
          v75 = *(_QWORD *)(v9 + 144);
          v180 = a1 + 40;
          *(_QWORD *)&v181 = v75;
          v188[0] = (float32x2_t)1;
          *(_QWORD *)buf = a1 + 40;
          *(_QWORD *)&buf[8] = &v181;
          *(_QWORD *)&buf[16] = v188;
          Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(v75, (uint64_t)buf, &v180, (Phase **)&v197);
          v76 = v197;
          *(_QWORD *)&v197 = 0;
          *(_QWORD *)buf = v76;
          std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v197 + 8);
          *((_QWORD *)&v190 + 1) = v75;
          std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v197);
          std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v10 + 56), (uint64_t *)buf);
          *(_QWORD *)(v10 + 96) = *((_QWORD *)&v190 + 1);
          std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
          if (*(_QWORD *)(v9 + 144))
          {
            v77 = 0;
            v78 = 0;
            v79 = 0;
            do
            {
              *(_OWORD *)(*v74 + v78) = *(_OWORD *)(*(_QWORD *)(v9 + 104) + v77);
              v80 = *(_QWORD *)(v9 + 104) + v77;
              v81 = *v74 + v78;
              *(_QWORD *)(v81 + 16) = *(_QWORD *)(v80 + 144);
              v82 = *(_OWORD *)(v80 + 160);
              v83 = *(_OWORD *)(v80 + 176);
              v84 = *(_OWORD *)(v80 + 192);
              *(_OWORD *)(v81 + 104) = *(_OWORD *)(v80 + 208);
              *(_OWORD *)(v81 + 88) = v84;
              *(_OWORD *)(v81 + 72) = v83;
              *(_OWORD *)(v81 + 56) = v82;
              v85 = *(_OWORD *)(v80 + 224);
              v86 = *(_OWORD *)(v80 + 240);
              v87 = *(_OWORD *)(v80 + 256);
              *(_OWORD *)(v81 + 168) = *(_OWORD *)(v80 + 272);
              *(_OWORD *)(v81 + 152) = v87;
              *(_OWORD *)(v81 + 136) = v86;
              *(_OWORD *)(v81 + 120) = v85;
              v88 = (_OWORD *)(*(_QWORD *)(v9 + 104) + v77);
              v89 = (_OWORD *)(*v74 + v78);
              v90 = v88[8];
              v92 = v88[5];
              v91 = v88[6];
              v89[18] = v88[7];
              v89[19] = v90;
              v89[16] = v92;
              v89[17] = v91;
              v93 = v88[1];
              v94 = v88[2];
              v95 = v88[4];
              v89[14] = v88[3];
              v89[15] = v95;
              v89[12] = v93;
              v89[13] = v94;
              *(_BYTE *)(*(_QWORD *)(v10 + 56) + v79++) = 1;
              v78 += 336;
              v77 += 304;
            }
            while (*(_QWORD *)(v9 + 144) > v79);
          }
          goto LABEL_93;
        }
LABEL_50:
        if (a1)
        {
          v37 = (**(uint64_t (***)(uint64_t))a1)(a1);
          v38 = 5;
          goto LABEL_48;
        }
        goto LABEL_136;
      }
LABEL_46:
      if (a1)
      {
        v37 = (**(uint64_t (***)(uint64_t))a1)(a1);
        v38 = 4;
        goto LABEL_48;
      }
      goto LABEL_136;
    }
LABEL_42:
    if (a1)
    {
      v37 = (**(uint64_t (***)(uint64_t))a1)(a1);
      v38 = 3;
LABEL_48:
      *(_QWORD *)a3 = v38;
      *(_QWORD *)(a3 + 8) = v37;
      v8 = 2;
      goto LABEL_49;
    }
LABEL_136:
    std::terminate();
  }
  if (v5)
  {
    if (a1)
    {
      v39 = (**(uint64_t (***)(uint64_t))a1)(a1);
      *(_QWORD *)a3 = 2;
      *(_QWORD *)(a3 + 8) = v39;
      *(_DWORD *)(a3 + 24) = 2;
      return;
    }
    goto LABEL_136;
  }
  v6 = (_DWORD *)a2[11];
  if (!v6 || *v6 != 1)
    goto LABEL_42;
  v7 = (_DWORD *)a2[12];
  if (!v7 || *v7 != 1)
    goto LABEL_46;
  v7[2] = 0;
LABEL_9:
  v8 = 1;
LABEL_49:
  *(_DWORD *)(a3 + 24) = v8;
}

void sub_216677ED8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::PresetEarlyReflections::GetGraphDescription@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  switch(a1)
  {
    case 2:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x2199F99B0](a2, "PresetEarlyReflectionsSpatialQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      v4 = *(_QWORD *)(a2 + 24);
      result = MEMORY[0x2199F99B0](v4, "FullPresetEarlyReflectionsSpatialGraph");
      goto LABEL_7;
    case 1:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x2199F99B0](a2, "PresetEarlyReflectionsClusterQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      v4 = *(_QWORD *)(a2 + 24);
      result = MEMORY[0x2199F99B0](v4, "FullPresetEarlyReflectionsClusterGraph");
      goto LABEL_7;
    case 0:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x2199F99B0](a2, "PresetEarlyReflectionsCullQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      v4 = *(_QWORD *)(a2 + 24);
      result = MEMORY[0x2199F99B0](v4, "FullPresetEarlyReflectionsCullGraph");
LABEL_7:
      *(_QWORD *)(v4 + 24) = 0xFFFFFFFFLL;
      return result;
  }
  *(_OWORD *)(a2 + 16) = 0uLL;
  *(_OWORD *)(a2 + 32) = 0uLL;
  *(_OWORD *)a2 = 0uLL;
  return result;
}

void sub_216677FF8(_Unwind_Exception *a1)
{
  void **v1;

  Phase::SpatialModeler::GraphDescription::~GraphDescription(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::PresetEarlyReflections::GetErrorCategory(Phase::SpatialModeler::PresetEarlyReflections *this)
{
  return (uint64_t)this + 32;
}

BOOL Phase::SpatialModeler::PresetEarlyReflections::IsQueryIndexValid(Phase::SpatialModeler::PresetEarlyReflections *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t *Phase::SpatialModeler::AllocMetadata<float,Phase::HeapAllocator>(uint64_t *a1, Phase *a2, uint64_t a3, uint64_t a4)
{
  Phase *v8;
  Phase *v9;
  Phase *v10;
  Phase *v12;
  uint64_t v13;
  uint64_t v14;
  Phase *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  Phase *v19;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x24BDAC8D0];
  v13 = 4;
  v14 = a3;
  v15 = a2;
  v16 = &v14;
  v17 = &v13;
  v12 = a2;
  Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(a3, (uint64_t)&v15, (uint64_t *)&v12, &v19);
  v8 = v19;
  v19 = 0;
  v15 = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v16, (uint64_t)v20);
  v18 = a3;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v19);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 1, (uint64_t *)&v15);
  a1[6] = v18;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v15);
  v13 = 4;
  v14 = a3;
  v15 = a2;
  v16 = &v14;
  v17 = &v13;
  v12 = a2;
  Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(a3, (uint64_t)&v15, (uint64_t *)&v12, &v19);
  v9 = v19;
  v19 = 0;
  v15 = v9;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v16, (uint64_t)v20);
  v18 = a3;
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v19);
  std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 7, (uint64_t *)&v15);
  a1[12] = v18;
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v15);
  Phase::AllocPackedSubbandArray<float,Phase::HeapAllocator>(a2, a3, a4, &v15);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 13, (uint64_t *)&v15);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v15);
  v13 = 1;
  v14 = a3;
  v15 = a2;
  v16 = &v14;
  v17 = &v13;
  v12 = a2;
  Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(a3, (uint64_t)&v15, (uint64_t *)&v12, &v19);
  v10 = v19;
  v19 = 0;
  v15 = v10;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v16, (uint64_t)v20);
  v18 = a3;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v19);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 18, (uint64_t *)&v15);
  a1[23] = v18;
  return std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v15);
}

uint64_t *Phase::SpatialModeler::ClearMetadata<float>(uint64_t *a1)
{
  uint64_t *result;

  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](a1 + 1);
  a1[6] = 0;
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](a1 + 7);
  a1[12] = 0;
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](a1 + 13, 0);
  result = std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](a1 + 18);
  a1[23] = 0;
  return result;
}

void Phase::SpatialModeler::PresetEarlyReflections::~PresetEarlyReflections(Phase::SpatialModeler::PresetEarlyReflections *this)
{
  Phase::HeapAllocator *v2;

  *(_QWORD *)this = &off_24D57FED8;
  v2 = (Phase::SpatialModeler::PresetEarlyReflections *)((char *)this + 40);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 152);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 147);
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 141);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 135);
  Phase::HeapAllocator::Destroy(v2);
  std::error_category::~error_category((std::error_category *)this + 4);
  *(_QWORD *)this = &off_24D577480;
  std::error_category::~error_category((std::error_category *)this + 1);
}

{
  Phase::HeapAllocator *v2;

  *(_QWORD *)this = &off_24D57FED8;
  v2 = (Phase::SpatialModeler::PresetEarlyReflections *)((char *)this + 40);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 152);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 147);
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 141);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 135);
  Phase::HeapAllocator::Destroy(v2);
  std::error_category::~error_category((std::error_category *)this + 4);
  *(_QWORD *)this = &off_24D577480;
  std::error_category::~error_category((std::error_category *)this + 1);
  JUMPOUT(0x2199F9D70);
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D57FF48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D57FF48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, Phase **a2)
{
  return Phase::HeapAllocator::Free(*(Phase::HeapAllocator **)(a1 + 8), *a2);
}

_QWORD *Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, Phase **a4@<X8>)
{
  const char *v6;
  Phase *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  NSObject *v11;
  std::logic_error *exception;
  _BYTE v13[18];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v11 = **(NSObject ***)(Phase::Logger::GetInstancePtr(0) + 112);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v13 = 136315394;
      *(_QWORD *)&v13[4] = "ManagedPtr.hpp";
      *(_WORD *)&v13[12] = 1024;
      *(_DWORD *)&v13[14] = 229;
      _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v13, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  if (*(_QWORD *)(*(_QWORD *)a2 + 8))
    v6 = *(const char **)(*(_QWORD *)a2 + 8);
  else
    v6 = "<Unnamed>";
  v7 = Phase::HeapAllocator::Allocate(*(Phase::HeapAllocator **)a2, **(_QWORD **)(a2 + 8), v6, 0, **(_QWORD **)(a2 + 16));
  v8 = *a3;
  *(_QWORD *)v13 = &off_24D580068;
  *(_QWORD *)&v13[8] = v8;
  v14 = v13;
  *a4 = v7;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v10 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_216678578(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D580068;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D580068;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, Phase **a2)
{
  return Phase::HeapAllocator::Free(*(Phase::HeapAllocator **)(a1 + 8), *a2);
}

_QWORD *Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, Phase **a4@<X8>)
{
  const char *v7;
  Phase *v8;
  Phase *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  NSObject *v13;
  std::logic_error *exception;
  _BYTE v15[18];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v13 = **(NSObject ***)(Phase::Logger::GetInstancePtr(0) + 112);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v15 = 136315394;
      *(_QWORD *)&v15[4] = "ManagedPtr.hpp";
      *(_WORD *)&v15[12] = 1024;
      *(_DWORD *)&v15[14] = 229;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v15, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  if (*(_QWORD *)(*(_QWORD *)a2 + 8))
    v7 = *(const char **)(*(_QWORD *)a2 + 8);
  else
    v7 = "<Unnamed>";
  v8 = Phase::HeapAllocator::Allocate(*(Phase::HeapAllocator **)a2, 16 * **(_QWORD **)(a2 + 8), v7, 0, **(_QWORD **)(a2 + 16));
  v9 = v8;
  do
  {
    *(_QWORD *)v9 = -1;
    *((_QWORD *)v9 + 1) = 0;
    v9 = (Phase *)((char *)v9 + 16);
  }
  while (v9 != (Phase *)((char *)v8 + 16 * a1));
  v10 = *a3;
  *(_QWORD *)v15 = &off_24D57FF90;
  *(_QWORD *)&v15[8] = v10;
  v16 = v15;
  *a4 = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v15);
  result = v16;
  if (v16 == v15)
  {
    v12 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_2166787A8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D57FF90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D57FF90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, Phase **a2)
{
  return Phase::HeapAllocator::Free(*(Phase::HeapAllocator **)(a1 + 8), *a2);
}

_QWORD *Phase::AllocPackedSubbandArray<float,Phase::HeapAllocator>@<X0>(Phase::HeapAllocator *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, Phase **a4@<X8>)
{
  unint64_t v7;
  const char *v8;
  _QWORD *result;
  uint64_t v10;
  Phase *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v7 = 4 * a2 * a3 + 16;
  if (*((_QWORD *)a1 + 1))
    v8 = (const char *)*((_QWORD *)a1 + 1);
  else
    v8 = "<Unnamed>";
  v12[0] = &off_24D5800B0;
  v12[1] = a1;
  v13 = v12;
  *a4 = Phase::HeapAllocator::Allocate(a1, v7, v8, 0, 8uLL);
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v12);
  result = v13;
  if (v13 == v12)
  {
    v10 = 4;
    result = v12;
    goto LABEL_8;
  }
  if (v13)
  {
    v10 = 5;
LABEL_8:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }
  v11 = *a4;
  *(_QWORD *)v11 = a2;
  *((_QWORD *)v11 + 1) = a3;
  return result;
}

_QWORD *Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, Phase **a4@<X8>)
{
  const char *v7;
  Phase *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  NSObject *v12;
  std::logic_error *exception;
  _BYTE v14[18];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v12 = **(NSObject ***)(Phase::Logger::GetInstancePtr(0) + 112);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v14 = 136315394;
      *(_QWORD *)&v14[4] = "ManagedPtr.hpp";
      *(_WORD *)&v14[12] = 1024;
      *(_DWORD *)&v14[14] = 229;
      _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v14, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  if (*(_QWORD *)(*(_QWORD *)a2 + 8))
    v7 = *(const char **)(*(_QWORD *)a2 + 8);
  else
    v7 = "<Unnamed>";
  v8 = Phase::HeapAllocator::Allocate(*(Phase::HeapAllocator **)a2, 12 * **(_QWORD **)(a2 + 8), v7, 0, **(_QWORD **)(a2 + 16));
  bzero(v8, 12 * ((12 * a1 - 12) / 0xCuLL) + 12);
  v9 = *a3;
  *(_QWORD *)v14 = &off_24D57FFD8;
  *(_QWORD *)&v14[8] = v9;
  v15 = v14;
  *a4 = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v14);
  result = v15;
  if (v15 == v14)
  {
    v11 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_216678ADC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D57FFD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D57FFD8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, Phase **a2)
{
  return Phase::HeapAllocator::Free(*(Phase::HeapAllocator **)(a1 + 8), *a2);
}

_QWORD *Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, Phase **a4@<X8>)
{
  const char *v6;
  Phase *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  NSObject *v11;
  std::logic_error *exception;
  _BYTE v13[18];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v11 = **(NSObject ***)(Phase::Logger::GetInstancePtr(0) + 112);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v13 = 136315394;
      *(_QWORD *)&v13[4] = "ManagedPtr.hpp";
      *(_WORD *)&v13[12] = 1024;
      *(_DWORD *)&v13[14] = 229;
      _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v13, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  if (*(_QWORD *)(*(_QWORD *)a2 + 8))
    v6 = *(const char **)(*(_QWORD *)a2 + 8);
  else
    v6 = "<Unnamed>";
  v7 = Phase::HeapAllocator::Allocate(*(Phase::HeapAllocator **)a2, 4 * **(_QWORD **)(a2 + 8), v6, 0, **(_QWORD **)(a2 + 16));
  v8 = *a3;
  *(_QWORD *)v13 = &off_24D580020;
  *(_QWORD *)&v13[8] = v8;
  v14 = v13;
  *a4 = v7;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v10 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_216678CE8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D580020;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D580020;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, Phase **a2)
{
  return Phase::HeapAllocator::Free(*(Phase::HeapAllocator **)(a1 + 8), *a2);
}

void std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5800B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5800B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, Phase **a2)
{
  return Phase::HeapAllocator::Free(*(Phase::HeapAllocator **)(a1 + 8), *a2);
}

const char *Phase::SpatialModeler::PresetLateReverbErrorCategory::name(Phase::SpatialModeler::PresetLateReverbErrorCategory *this)
{
  return "Preset Late Reverb";
}

void Phase::SpatialModeler::PresetLateReverbErrorCategory::message(int a1@<W1>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v6;

  if (a1 >= 8)
    std::terminate();
  std::string::basic_string[abi:ne180100]<0>(__p, "Preset late reverb ");
  Phase::SpatialModeler::ModelerErrorMessage(a1, (const void **)__p, a2);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_216678E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::PresetLateReverbErrorCategory::~PresetLateReverbErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::SpatialModeler::PresetLateReverb::GetSupportedQueryDescs(std::string **a1@<X8>)
{
  std::string *v3;
  uint64_t v4;
  char *v5;
  void *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[5];
  int v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[5];
  int v18;
  _OWORD v19[2];
  __int128 v20;

  *(_QWORD *)&v20 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v7, "CULL");
  v8 = 0;
  v9 = 0x100000001;
  v10 = 1;
  v11 = 0u;
  v12 = 0u;
  std::string::basic_string[abi:ne180100]<0>(v13, "CLUSTER");
  v13[3] = 1;
  v13[4] = 0x200000003;
  v14 = 1;
  v15 = 0u;
  v16 = 0u;
  std::string::basic_string[abi:ne180100]<0>(v17, "SPATIAL");
  v17[3] = 2;
  v17[4] = 0x300000002;
  v18 = 1;
  memset(v19, 0, sizeof(v19));
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (std::string *)operator new(0xF0uLL);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 10;
  v4 = 0;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::QueryDesc>,Phase::SpatialModeler::QueryDesc const*,Phase::SpatialModeler::QueryDesc const*,Phase::SpatialModeler::QueryDesc*>((uint64_t)(a1 + 2), &v7, &v20, v3);
  do
  {
    v5 = (char *)&v7 + v4 * 16;
    v6 = *(void **)&v19[v4];
    if (v6)
    {
      *((_QWORD *)v5 + 27) = v6;
      operator delete(v6);
    }
    if (v5[183] < 0)
      operator delete(*((void **)v5 + 20));
    v4 -= 5;
  }
  while (v4 != -15);
}

void sub_216679018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t i;

  *(_QWORD *)(v12 + 8) = v13;
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100](&a10);
  for (i = 160; i != -80; i -= 80)
    Phase::SpatialModeler::QueryDesc::~QueryDesc((Phase::SpatialModeler::QueryDesc *)(&a12 + i));
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::PresetLateReverb::Init(uint64_t a1, _QWORD *a2)
{
  Phase::HeapAllocator::InitializeWithBacking((Phase::HeapAllocator *)(a1 + 40), 0x800000uLL, "PresetLateReverbHeap", 16, 128, 64);
  *(_QWORD *)(a1 + 1024) = *a2;
}

void *Phase::SpatialModeler::PresetLateReverb::Shutdown(Phase::SpatialModeler::PresetLateReverb *this)
{
  return Phase::HeapAllocator::Destroy((Phase::SpatialModeler::PresetLateReverb *)((char *)this + 40));
}

void Phase::SpatialModeler::PresetLateReverb::RunQuery(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  Phase *v17;
  Phase *v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  float *v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  Phase *v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  __int128 *v41;
  _OWORD *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  float v48;
  uint64_t v49;
  float *v50;
  float v51;
  float v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  float *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  double v91;
  uint64_t v92;
  float v93;
  float *v94;
  uint64_t v95;
  float v96;
  float v97;
  float v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  uint64_t v110;
  uint64_t v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  _DWORD *v120;
  int *v121;
  _DWORD *v122;
  uint64_t i;
  int v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _BYTE v139[32];
  uint64_t v140[6];
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _BYTE v148[32];
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  v5 = a2[10];
  if (v5 == 2)
  {
    v9 = a2[11];
    if (v9 && *(_DWORD *)v9 == 2)
    {
      v10 = a2[12];
      if (v10 && *(_DWORD *)v10 == 3)
      {
        if (*(_QWORD *)(v9 + 208))
        {
          if (!a1)
            goto LABEL_130;
          v11 = (**(uint64_t (***)(uint64_t))a1)(a1);
LABEL_17:
          v12 = 6;
          goto LABEL_37;
        }
        v24 = a2[8];
        if (v24)
        {
          v25 = *(_QWORD *)(v24 + 160);
          v26 = *(unsigned int *)(v9 + 508);
          v133 = 0u;
          v134 = 0u;
          v135 = 0u;
          v136 = 0u;
          v137 = 0u;
          v138 = 0u;
          memset(v139, 0, 28);
          if ((_DWORD)v26)
          {
            v27 = (float *)&v133;
            v28 = v9;
            v29 = v26;
            do
            {
              *v27++ = *(float *)(v28 + 384) - *(float *)(v28 + 64);
              v28 += 4;
              --v29;
            }
            while (v29);
            v147 = 0u;
            memset(v148, 0, 28);
            v145 = 0u;
            v146 = 0u;
            v143 = 0u;
            v144 = 0u;
            v30 = (float *)&v142;
            v31 = (float *)&v133;
            v142 = 0u;
            do
            {
              v32 = *v31++;
              *v30++ = fmaxf(v32, 0.0);
              --v26;
            }
            while (v26);
          }
          else
          {
            memset(v148, 0, sizeof(v148));
            v146 = 0uLL;
            v147 = 0uLL;
            v144 = 0uLL;
            v145 = 0uLL;
            v142 = 0uLL;
            v143 = 0uLL;
          }
          v92 = *(_QWORD *)(v9 + 8);
          if (v92)
          {
            v93 = 0.0;
            v94 = (float *)&v142;
            v95 = *(_QWORD *)(v9 + 8);
            do
            {
              v96 = *v94++;
              v97 = v96;
              if (v96 > v93)
                v93 = v97;
              --v95;
            }
            while (v95);
          }
          else
          {
            v93 = 0.0;
          }
          v98 = -v93;
          if (v25 != *(_QWORD *)(a1 + 1040))
          {
            v99 = **(_QWORD **)(a1 + 1024);
            v100 = exp(v98 * 10.0 / 10.0 * 0.115129255);
            Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Query(v99, v25, 1, v92, (uint64_t)&v133, v100);
            *(_DWORD *)(a1 + 1056) = v133;
            *(_BYTE *)(a1 + 1060) = BYTE4(v133);
            std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 1064), (uint64_t *)&v133 + 1);
            *(_QWORD *)(a1 + 1104) = v136;
            std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 1112), (uint64_t *)&v136 + 1);
            *(_QWORD *)(a1 + 1152) = *(_QWORD *)v139;
            std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 1160), (uint64_t *)&v139[8]);
            std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 1200), v140);
            *(_QWORD *)(a1 + 1240) = v140[5];
            *(_OWORD *)(a1 + 1248) = v141;
            std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v140);
            std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v139[8]);
            std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v136 + 1);
            std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v133 + 1);
          }
          v101 = *(_QWORD *)(a1 + 1104);
          if (v101)
          {
            Phase::SpatialModeler::AllocMetadata<float,Phase::HeapAllocator>((uint64_t *)v10, (Phase *)(a1 + 40), v101, *(_QWORD *)(v9 + 8));
            v102 = *(_QWORD *)(a1 + 1104);
            if (v102)
            {
              v103 = 0;
              v104 = *(_QWORD *)(a1 + 1064);
              v105 = *(_QWORD *)(v10 + 8);
              v106 = *(_QWORD *)(a1 + 1112);
              v107 = *(_QWORD *)(v10 + 56);
              v108 = *(_QWORD *)(v10 + 104);
              v109 = (_DWORD *)(v108 + 16);
              v110 = *(_QWORD *)(v108 + 8);
              v111 = *(_QWORD *)(a1 + 1160);
              v112 = (int *)(v111 + 16);
              v113 = *(_QWORD *)(v111 + 8);
              v114 = *(_QWORD *)(v9 + 8);
              v115 = *(_QWORD *)(a1 + 1200);
              v116 = *(_QWORD *)(v10 + 144);
              v117 = 4 * v110;
              v118 = 4 * v113;
              do
              {
                v119 = (_DWORD *)(v104 + 12 * v103);
                v120 = (_DWORD *)(v105 + 12 * v103);
                *v120 = *v119;
                v120[1] = v119[1];
                v120[2] = v119[2];
                *(_DWORD *)(v107 + 4 * v103) = *(_DWORD *)(v106 + 4 * v103);
                v121 = v112;
                v122 = v109;
                for (i = v114; i; --i)
                {
                  v124 = *v121++;
                  *v122++ = v124;
                }
                *(_BYTE *)(v116 + v103) = *(_BYTE *)(v115 + v103);
                ++v103;
                v109 = (_DWORD *)((char *)v109 + v117);
                v112 = (int *)((char *)v112 + v118);
              }
              while (v103 != v102);
            }
            *(_BYTE *)(v10 + 201) = *(_BYTE *)(a1 + 1257);
            *(_DWORD *)(v10 + 204) = 0;
          }
          else
          {
            Phase::SpatialModeler::ClearMetadata<float>((uint64_t *)v10);
          }
          v8 = 1;
          v125 = 1;
          if (v25 == *(_QWORD *)(a1 + 1040))
            v125 = *(float *)(a1 + 1048) != v98;
          *(_BYTE *)(v10 + 4) = v125;
          *(_QWORD *)(a1 + 1040) = v25;
          *(float *)(a1 + 1048) = v98;
          goto LABEL_38;
        }
        goto LABEL_46;
      }
LABEL_35:
      if (a1)
      {
        v11 = (**(uint64_t (***)(uint64_t))a1)(a1);
        v12 = 4;
        goto LABEL_37;
      }
LABEL_130:
      std::terminate();
    }
LABEL_31:
    if (!a1)
      goto LABEL_130;
    v11 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v12 = 3;
LABEL_37:
    *(_QWORD *)a3 = v12;
    *(_QWORD *)(a3 + 8) = v11;
    v8 = 2;
    goto LABEL_38;
  }
  if (v5 == 1)
  {
    v13 = a2[11];
    if (v13 && *(_DWORD *)v13 == 3)
    {
      v14 = a2[12];
      if (v14 && *(_DWORD *)v14 == 2)
      {
        v15 = a2[8];
        if (v15)
        {
          v129 = a2[8];
          v126 = *(_QWORD *)(v15 + 160);
          v127 = *(_QWORD *)(a1 + 1032);
          *(_QWORD *)(a1 + 1032) = v126;
          if (*(_QWORD *)(a1 + 48))
            v16 = *(const char **)(a1 + 48);
          else
            v16 = "<Unnamed>";
          v17 = Phase::HeapAllocator::Allocate((Phase::HeapAllocator *)(a1 + 40), 0x150uLL, v16, 0, 0x10uLL);
          v18 = v17;
          v19 = 0;
          *(_OWORD *)v17 = 0u;
          *((_OWORD *)v17 + 1) = 0u;
          *((_DWORD *)v17 + 8) = 0;
          *(_QWORD *)((char *)v17 + 36) = 1065353216;
          *(_QWORD *)((char *)v17 + 44) = 0;
          *((_DWORD *)v17 + 13) = 1065353216;
          do
          {
            v20 = (char *)v17 + v19;
            *((_DWORD *)v20 + 14) = 0;
            *((_QWORD *)v20 + 8) = 0;
            v19 += 16;
          }
          while (v19 != 128);
          *((_QWORD *)v17 + 23) = 0;
          *(_QWORD *)&v133 = 0;
          DWORD2(v133) = 0;
          Phase::Subbands<float>::Subbands((uint64_t)v17 + 192, &v133, 3);
          *((_BYTE *)v18 + 320) = 0;
          *(_QWORD *)&v133 = &off_24D57FF48;
          *((_QWORD *)&v133 + 1) = a1 + 40;
          *((_QWORD *)&v134 + 1) = &v133;
          *(_QWORD *)&v142 = v18;
          std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v142 + 8, (uint64_t)&v133);
          v21 = (__int128 *)*((_QWORD *)&v134 + 1);
          if (*((__int128 **)&v134 + 1) == &v133)
          {
            v22 = 4;
            v21 = &v133;
          }
          else
          {
            if (!*((_QWORD *)&v134 + 1))
              goto LABEL_50;
            v22 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_50:
          v33 = v142;
          *(_QWORD *)&v142 = 0;
          *(_QWORD *)&v133 = v33;
          std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v133 + 8, (uint64_t)&v142 + 8);
          *((_QWORD *)&v135 + 1) = 1;
          std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v142);
          v34 = v14 + 8;
          std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v14 + 8), (uint64_t *)&v133);
          *(_QWORD *)(v14 + 48) = *((_QWORD *)&v135 + 1);
          std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v133);
          if (*(_QWORD *)(a1 + 48))
            v35 = *(const char **)(a1 + 48);
          else
            v35 = "<Unnamed>";
          v36 = Phase::HeapAllocator::Allocate((Phase::HeapAllocator *)(a1 + 40), 1uLL, v35, 0, 1uLL);
          *(_QWORD *)&v133 = &off_24D580068;
          *((_QWORD *)&v133 + 1) = a1 + 40;
          *((_QWORD *)&v134 + 1) = &v133;
          *(_QWORD *)&v142 = v36;
          std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v142 + 8, (uint64_t)&v133);
          v37 = (__int128 *)*((_QWORD *)&v134 + 1);
          if (*((__int128 **)&v134 + 1) == &v133)
          {
            v38 = 4;
            v37 = &v133;
          }
          else
          {
            if (!*((_QWORD *)&v134 + 1))
            {
LABEL_58:
              v39 = v142;
              *(_QWORD *)&v142 = 0;
              *(_QWORD *)&v133 = v39;
              std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v133 + 8, (uint64_t)&v142 + 8);
              *((_QWORD *)&v135 + 1) = 1;
              std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v142);
              std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v14 + 56), (uint64_t *)&v133);
              *(_QWORD *)(v14 + 96) = *((_QWORD *)&v135 + 1);
              std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v133);
              if (*(_QWORD *)(v13 + 96))
              {
                v40 = v126 != v127;
                v41 = *(__int128 **)(v13 + 56);
                v42 = *(_OWORD **)v34;
                v43 = *v41;
                *((_QWORD *)v42 + 2) = *((_QWORD *)v41 + 2);
                *v42 = v43;
                *((_DWORD *)v42 + 6) = *((_DWORD *)v41 + 6);
                *((_DWORD *)v42 + 7) = *((_DWORD *)v41 + 7);
                *((_DWORD *)v42 + 8) = *((_DWORD *)v41 + 8);
                *((_DWORD *)v42 + 9) = *((_DWORD *)v41 + 9);
                *((_DWORD *)v42 + 10) = *((_DWORD *)v41 + 10);
                *((_DWORD *)v42 + 11) = *((_DWORD *)v41 + 11);
                *((_DWORD *)v42 + 12) = *((_DWORD *)v41 + 12);
                *((_DWORD *)v42 + 13) = *((_DWORD *)v41 + 13);
                memcpy((char *)v42 + 56, (char *)v41 + 56, 0x109uLL);
              }
              else
              {
                MEMORY[0x2199FA6B8](&v133);
                *(_OWORD *)*(_QWORD *)v34 = v133;
                v40 = 1;
              }
              **(_BYTE **)(v14 + 56) = v40;
              *(_BYTE *)(*(_QWORD *)v34 + 320) = 1;
              v44 = *(_QWORD *)(v13 + 144);
              if (v44)
              {
                v45 = 0;
                v46 = *(_QWORD *)(v13 + 104);
                v47 = (float *)(v46 + 16);
                v48 = -3.4028e38;
                do
                {
                  v49 = *(unsigned int *)(v46 + 304 * v45 + 140);
                  v50 = v47;
                  if ((_DWORD)v49)
                  {
                    do
                    {
                      v51 = *v50++;
                      v52 = v51;
                      if (v51 > v48)
                        v48 = v52;
                      --v49;
                    }
                    while (v49);
                  }
                  ++v45;
                  v47 += 76;
                }
                while (v45 != v44);
              }
              else
              {
                v48 = -3.4028e38;
              }
              *(float *)&v142 = v48;
              *((float *)&v142 + 1) = v48;
              *((float *)&v142 + 2) = v48;
              Phase::Subbands<float>::Subbands((uint64_t)&v133, &v142, 3);
              v53 = *(_OWORD **)v34;
              v54 = v138;
              v53[16] = v137;
              v53[17] = v54;
              v55 = *(_OWORD *)&v139[16];
              v53[18] = *(_OWORD *)v139;
              v53[19] = v55;
              v56 = v134;
              v53[12] = v133;
              v53[13] = v56;
              v57 = v136;
              v53[14] = v135;
              v53[15] = v57;
              v58 = *(_QWORD *)(v13 + 152);
              if (*(_DWORD *)(v129 + 136) <= v58
                || (v59 = *(_QWORD *)(v129 + 120), *(_DWORD *)(v59 + 24 * v58 + 20) != HIDWORD(v58))
                || (v60 = *(_QWORD *)(v59 + 24 * *(_QWORD *)(v13 + 152))) == 0
                || *(_DWORD *)v60 != 2)
              {
                if (a1)
                {
                  v11 = (**(uint64_t (***)(uint64_t))a1)(a1);
                  v12 = 7;
                  goto LABEL_37;
                }
                goto LABEL_130;
              }
              v61 = *(_QWORD *)(v13 + 144);
              v131 = 8;
              v132 = v61;
              *(_QWORD *)&v133 = a1 + 40;
              *((_QWORD *)&v133 + 1) = &v132;
              *(_QWORD *)&v134 = &v131;
              v130 = a1 + 40;
              Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(v61, (uint64_t)&v133, &v130, (Phase **)&v142);
              v62 = v142;
              *(_QWORD *)&v142 = 0;
              *(_QWORD *)&v133 = v62;
              std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v133 + 8, (uint64_t)&v142 + 8);
              *((_QWORD *)&v135 + 1) = v61;
              std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v142);
              std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v14 + 104), (uint64_t *)&v133);
              *(_QWORD *)(v14 + 144) = *((_QWORD *)&v135 + 1);
              std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v133);
              v63 = *(_QWORD *)(v14 + 144);
              if (!v63)
                goto LABEL_9;
              v64 = 0;
              v65 = 0;
              v66 = 0;
              v67 = *(_QWORD *)(v14 + 104);
              v68 = v129;
              while (1)
              {
                *(_QWORD *)(v67 + v65) = 0;
                v69 = *(_QWORD *)(v13 + 104);
                v70 = *(_QWORD *)(v69 + v64 + 144);
                if (*(_DWORD *)(v68 + 136) <= v70)
                  break;
                v71 = *(_QWORD *)(v68 + 120);
                if (*(_DWORD *)(v71 + 24 * v70 + 20) != HIDWORD(v70))
                  break;
                v72 = *(_QWORD *)(v71 + 24 * *(_QWORD *)(v69 + v64 + 144));
                if (!v72 || *(_DWORD *)v72 != 3)
                  break;
                v73 = *(uint64_t **)(v72 + 120);
                v74 = 0.0;
                if (v73 != *(uint64_t **)(v72 + 128))
                {
                  v75 = *v73;
                  if (*(_DWORD *)(v68 + 112) > *v73)
                  {
                    v76 = *(_QWORD *)(v68 + 96);
                    if (*(_DWORD *)(v76 + 24 * v75 + 20) == HIDWORD(v75))
                    {
                      v77 = *(float **)(v76 + 24 * v75);
                      if (v77)
                        v74 = (float)(*(float *)(v72 + 76)
                                    * fmaxf(fmaxf(v77[9] - v77[6], v77[10] - v77[7]), v77[11] - v77[8]))
                            * 0.5;
                    }
                  }
                }
                v78 = v69 + v64;
                if (*(_DWORD *)(v78 + 176) == 1)
                  v79 = *(_QWORD *)(v78 + 184);
                else
                  v79 = 0;
                if (*(_DWORD *)(v68 + 40) > v79
                  && (v80 = *(_QWORD *)(v68 + 24), *(_DWORD *)(v80 + 24 * v79 + 20) == HIDWORD(v79))
                  && (v81 = *(_QWORD *)(v80 + 24 * v79)) != 0)
                {
                  v82 = *(float *)(v60 + 64) - *(float *)(v72 + 64);
                  v83 = *(float *)(v60 + 68) - *(float *)(v72 + 68);
                  v84 = sqrtf((float)((float)(v82 * v82) + (float)(v83 * v83))+ (float)((float)(*(float *)(v60 + 72) - *(float *)(v72 + 72))* (float)(*(float *)(v60 + 72) - *(float *)(v72 + 72))));
                  v85 = *(double *)(v60 + 152);
                  v86 = fmaxf(v85, v74 + (float)(v84 - v74));
                  if (*(_DWORD *)v81 == 2)
                  {
                    v89 = **(_QWORD **)(v81 + 40);
                    if (!v89)
                      goto LABEL_130;
                    v90 = Phase::Envelope<float>::operator()((float **)(v89 + 16), v86);
                    if (v90 <= 0.0)
                      v90 = COERCE_FLOAT(1);
                    v87 = (float)((float)(logf(v90) * 8.6859) / 10.0) * 10.0;
                    v67 = *(_QWORD *)(v14 + 104);
                    v63 = *(_QWORD *)(v14 + 144);
                    v68 = v129;
                  }
                  else
                  {
                    v87 = 0.0;
                    if (*(_DWORD *)v81 == 1)
                    {
                      v128 = v63;
                      v88 = **(_QWORD **)(v81 + 40);
                      if (!v88)
                        goto LABEL_130;
                      v87 = (float)((float)(log2f(v86 / (float)(v74 + 1.0)) * -6.0206) * 0.5) * *(float *)(v88 + 16);
                      v63 = v128;
                      v68 = v129;
                    }
                  }
                  v91 = v87;
                  if (v87 > 0.0)
                    v91 = 0.0;
                  *(double *)(v67 + v65 + 8) = v91;
                }
                else
                {
                  *(_QWORD *)(v67 + v65 + 8) = 0;
                }
                ++v66;
                v65 += 16;
                v64 += 304;
                v8 = 1;
                if (v66 >= v63)
                  goto LABEL_38;
              }
              if (!a1)
                goto LABEL_130;
              v11 = (**(uint64_t (***)(uint64_t))a1)(a1);
              goto LABEL_17;
            }
            v38 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
          goto LABEL_58;
        }
LABEL_46:
        if (a1)
        {
          v11 = (**(uint64_t (***)(uint64_t))a1)(a1);
          v12 = 5;
          goto LABEL_37;
        }
        goto LABEL_130;
      }
      goto LABEL_35;
    }
    goto LABEL_31;
  }
  if (v5)
  {
    if (a1)
    {
      v23 = (**(uint64_t (***)(uint64_t))a1)(a1);
      *(_QWORD *)a3 = 2;
      *(_QWORD *)(a3 + 8) = v23;
      *(_DWORD *)(a3 + 24) = 2;
      return;
    }
    goto LABEL_130;
  }
  v6 = (_DWORD *)a2[11];
  if (!v6 || *v6 != 1)
    goto LABEL_31;
  v7 = (_DWORD *)a2[12];
  if (!v7 || *v7 != 1)
    goto LABEL_35;
  v7[2] = 0;
LABEL_9:
  v8 = 1;
LABEL_38:
  *(_DWORD *)(a3 + 24) = v8;
}

uint64_t Phase::SpatialModeler::PresetLateReverb::GetGraphDescription@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  switch(a1)
  {
    case 2:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x2199F99B0](a2, "PresetLateReverbSpatialQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      v4 = *(_QWORD *)(a2 + 24);
      result = MEMORY[0x2199F99B0](v4, "FullPresetLateReverbSpatialGraph");
      goto LABEL_7;
    case 1:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x2199F99B0](a2, "PresetLateReverbClusterQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      v4 = *(_QWORD *)(a2 + 24);
      result = MEMORY[0x2199F99B0](v4, "FullPresetLateReverbClusterGraph");
      goto LABEL_7;
    case 0:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x2199F99B0](a2, "PresetLateReverbCullQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      v4 = *(_QWORD *)(a2 + 24);
      result = MEMORY[0x2199F99B0](v4, "FullPresetLateReverbCullGraph");
LABEL_7:
      *(_QWORD *)(v4 + 24) = 0xFFFFFFFFLL;
      return result;
  }
  *(_OWORD *)(a2 + 16) = 0uLL;
  *(_OWORD *)(a2 + 32) = 0uLL;
  *(_OWORD *)a2 = 0uLL;
  return result;
}

void sub_216679D3C(_Unwind_Exception *a1)
{
  void **v1;

  Phase::SpatialModeler::GraphDescription::~GraphDescription(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::PresetLateReverb::GetErrorCategory(Phase::SpatialModeler::PresetLateReverb *this)
{
  return (uint64_t)this + 32;
}

BOOL Phase::SpatialModeler::PresetLateReverb::IsQueryIndexValid(Phase::SpatialModeler::PresetLateReverb *this, unint64_t a2)
{
  return a2 < 3;
}

void Phase::SpatialModeler::PresetLateReverb::~PresetLateReverb(Phase::SpatialModeler::PresetLateReverb *this)
{
  Phase::HeapAllocator *v2;

  *(_QWORD *)this = &off_24D580140;
  v2 = (Phase::SpatialModeler::PresetLateReverb *)((char *)this + 40);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 150);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 145);
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 139);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 133);
  Phase::HeapAllocator::Destroy(v2);
  std::error_category::~error_category((std::error_category *)this + 4);
  *(_QWORD *)this = &off_24D577480;
  std::error_category::~error_category((std::error_category *)this + 1);
}

{
  Phase::HeapAllocator *v2;

  *(_QWORD *)this = &off_24D580140;
  v2 = (Phase::SpatialModeler::PresetLateReverb *)((char *)this + 40);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 150);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 145);
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 139);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 133);
  Phase::HeapAllocator::Destroy(v2);
  std::error_category::~error_category((std::error_category *)this + 4);
  *(_QWORD *)this = &off_24D577480;
  std::error_category::~error_category((std::error_category *)this + 1);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::PreSpatialTapSourceObject::PreSpatialTapSourceObject(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;

  *(_QWORD *)a1 = &off_24D5801B0;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  do
    v9 = __ldaxr(a2);
  while (__stlxr(v9 + 1, a2));
  *(_QWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 120) = a4;
  *(_QWORD *)(a1 + 128) = a5;
  *(_QWORD *)(a1 + 136) = a6;
  *(_QWORD *)(a1 + 144) = a7;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100](a1 + 152, a8);
  *(_BYTE *)(a1 + 184) = 0;
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDB17E8]), "initWithLayoutTag:", 6553601);
  v11 = objc_msgSend(objc_alloc(MEMORY[0x24BDB1818]), "initWithCommonFormat:sampleRate:interleaved:channelLayout:", 1, 0, v10, 48000.0);
  v12 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;

  return a1;
}

void sub_216679F60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  std::unique_ptr<Phase::Controller::VoiceBufferExchangeManager>::reset[abi:ne180100](v2, 0);
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*(_QWORD **)(v1 + 88));
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*(_QWORD **)(v1 + 64));
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*(_QWORD **)(v1 + 40));

  _Unwind_Resume(a1);
}

void Phase::Controller::PreSpatialTapSourceObject::~PreSpatialTapSourceObject(Phase::Controller::PreSpatialTapSourceObject *this)
{
  Phase::Controller::PreSpatialTapSourceObject *v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  Phase::Controller::PreSpatialTapSourceObject *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v1 = this;
  v17 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 184))
  {
    this = (Phase::Controller::PreSpatialTapSourceObject *)Phase::Controller::DVM::VoiceGraph::RemoveTap(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 16) + 72), *((_QWORD *)this + 14));
    if (!(_DWORD)this)
      *((_BYTE *)v1 + 184) = 0;
  }
  v2 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                     + 944)));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)v1 + 14);
    GetTapTypeString(*((_QWORD *)v1 + 18));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 136316162;
    v8 = "PreSpatialTap.mm";
    v9 = 1024;
    v10 = 43;
    v11 = 2048;
    v12 = v1;
    v13 = 2048;
    v14 = v3;
    v15 = 2112;
    v16 = v4;
    _os_log_impl(&dword_2164CC000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d pre-spatialTap@%p: tapId %llu, type %@ destroyed!", (uint8_t *)&v7, 0x30u);

  }
  v5 = (_QWORD *)*((_QWORD *)v1 + 22);
  if (v5 == (_QWORD *)((char *)v1 + 152))
  {
    v6 = 4;
    v5 = (_QWORD *)((char *)v1 + 152);
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  std::unique_ptr<Phase::Controller::VoiceBufferExchangeManager>::reset[abi:ne180100]((uint64_t *)v1 + 13, 0);
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*((_QWORD **)v1 + 11));
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*((_QWORD **)v1 + 8));
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*((_QWORD **)v1 + 5));

}

{
  Phase::Controller::PreSpatialTapSourceObject::~PreSpatialTapSourceObject(this);
  JUMPOUT(0x2199F9D70);
}

void sub_21667A168(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::PreSpatialTapSourceObject::UnregisterTap(uint64_t this)
{
  uint64_t v1;

  if (*(_BYTE *)(this + 184))
  {
    v1 = this;
    this = Phase::Controller::DVM::VoiceGraph::RemoveTap(*(Phase::Controller::DVM::VoiceGraph **)(**(_QWORD **)(this + 128) + 72), *(_QWORD *)(this + 112));
    if (!(_DWORD)this)
      *(_BYTE *)(v1 + 184) = 0;
  }
  return this;
}

void Phase::Controller::PreSpatialTapSourceObject::UnregisterTapsAndReset(Phase::Controller::PreSpatialTapSourceObject *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  if (*((_BYTE *)this + 184)
    && !Phase::Controller::DVM::VoiceGraph::RemoveTap(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 16) + 72), *((_QWORD *)this + 14)))
  {
    *((_BYTE *)this + 184) = 0;
  }
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*((_QWORD **)this + 11));
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = 0;
  v2 = (_QWORD *)((char *)this + 40);
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*((_QWORD **)this + 5));
  v4 = (_QWORD *)*((_QWORD *)this + 8);
  v3 = (_QWORD *)((char *)this + 64);
  *(v3 - 4) = v2;
  *v2 = 0;
  *(v3 - 2) = 0;
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(v4);
  *(v3 - 1) = v3;
  *v3 = 0;
  v3[1] = 0;
}

void Phase::Controller::PreSpatialTapSourceObject::RegisterTap(Phase::Controller::PreSpatialTapSourceObject *this)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  Phase::Logger *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  int v16;
  Phase::Logger *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  Phase::Logger *v23;
  uint64_t v24;
  void *v25;
  _DWORD *v26;
  uint64_t v27;
  Phase::Controller::VoiceBufferExchangeManager **v28;
  Phase::Controller::VoiceBufferExchangeManager *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  double v53;
  double *v54;
  unint64_t v55;
  double *v56;
  void **v57;
  double *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  double *v64;
  char *v65;
  Phase::Logger *v66;
  NSObject *v67;
  uint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t v77;
  uint64_t v78[3];
  void *__p[3];
  void **v80;
  _BYTE v81[24];
  Phase::Logger *v82;
  _BYTE buf[28];
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  void *v87;
  __int16 v88;
  unint64_t v89;
  _BYTE v90[24];
  Phase::Logger *v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 184))
  {
    v2 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                       + 944)));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *((_QWORD *)this + 14);
      GetTapTypeString(*((_QWORD *)this + 18));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "PreSpatialTap.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 59;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = this;
      v84 = 2048;
      v85 = v3;
      v86 = 2112;
      v87 = v4;
      _os_log_impl(&dword_2164CC000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d pre-spatialTap@%p: tapId %llu, type %@ already registered", buf, 0x30u);

    }
    return;
  }
  v5 = (uint64_t *)*((_QWORD *)this + 16);
  v6 = *((_QWORD *)this + 14);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v90, (uint64_t)this + 152);
  v7 = Phase::Controller::DSPVoiceManager::AddTap(v5, v6, (uint64_t)v90, *((_QWORD *)this + 18));
  v8 = v91;
  if (v91 == (Phase::Logger *)v90)
  {
    v9 = 4;
    v8 = (Phase::Logger *)v90;
  }
  else
  {
    if (!v91)
      goto LABEL_10;
    v9 = 5;
  }
  v8 = (Phase::Logger *)(*(uint64_t (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_10:
  if (v7 == 4)
  {
    v10 = (unint64_t *)*((_QWORD *)this + 3);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v8)
                                                                                        + 944)));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *((_QWORD *)this + 14);
      GetTapTypeString(*((_QWORD *)this + 18));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "PreSpatialTap.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 69;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = this;
      v84 = 2048;
      v85 = v13;
      v86 = 2112;
      v87 = v14;
      v88 = 2048;
      v89 = v11;
      _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d pre-spatialTap@%p: tapId %llu, type %@ already registered, trying with new id %llu", buf, 0x3Au);

    }
    v15 = (uint64_t *)*((_QWORD *)this + 16);
    std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v81, (uint64_t)this + 152);
    v16 = Phase::Controller::DSPVoiceManager::AddTap(v15, v11, (uint64_t)v81, *((_QWORD *)this + 18));
    v17 = v82;
    if (v82 == (Phase::Logger *)v81)
    {
      v18 = 4;
      v17 = (Phase::Logger *)v81;
    }
    else
    {
      if (!v82)
      {
LABEL_20:
        if (v16)
        {
          v19 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v17)
                                                                                              + 944)));
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            v20 = *((_QWORD *)this + 14);
            GetTapTypeString(*((_QWORD *)this + 18));
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "PreSpatialTap.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 81;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = this;
            v84 = 2048;
            v85 = v20;
            v86 = 2112;
            v87 = v21;
            _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d pre-spatialTap@%p: unable to register tapId %llu, type %@", buf, 0x30u);

          }
        }
        else
        {
          v22 = (_QWORD *)*((_QWORD *)this + 11);
          *((_QWORD *)this + 14) = v11;
          std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(v22);
          *((_QWORD *)this + 10) = (char *)this + 88;
          *((_QWORD *)this + 11) = 0;
          *((_QWORD *)this + 12) = 0;
          v19 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v23)
                                                                                              + 944)));
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            v24 = *((_QWORD *)this + 14);
            GetTapTypeString(*((_QWORD *)this + 18));
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "PreSpatialTap.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 76;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = this;
            v84 = 2048;
            v85 = v24;
            v86 = 2112;
            v87 = v25;
            _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d pre-spatialTap@%p: registered tapId %llu, type %@", buf, 0x30u);

          }
        }

        goto LABEL_26;
      }
      v18 = 5;
    }
    v17 = (Phase::Logger *)(*(uint64_t (**)(void))(*(_QWORD *)v17 + 8 * v18))();
    goto LABEL_20;
  }
LABEL_26:
  v26 = operator new(4uLL);
  *v26 = 0;
  __p[1] = v26 + 1;
  __p[2] = v26 + 1;
  __p[0] = v26;
  v27 = operator new();
  Phase::Controller::VoiceBufferExchangeManager::VoiceBufferExchangeManager(v27, (int **)__p);
  v28 = (Phase::Controller::VoiceBufferExchangeManager **)((char *)this + 104);
  std::unique_ptr<Phase::Controller::VoiceBufferExchangeManager>::reset[abi:ne180100]((uint64_t *)this + 13, v27);
  if (!*((_QWORD *)this + 13))
    std::terminate();
  v77 = 0xD1A51C852B332C81;
  memset(v78, 0, sizeof(v78));
  std::vector<Phase::Controller::DspNodeVoice>::resize(v78, 1uLL);
  *(_QWORD *)v78[0] = *((_QWORD *)this + 14);
  Phase::Controller::VoiceBufferExchangeManager::GetManagedVoiceBuffer(*((Phase::Controller::VoiceBufferExchangeManager **)this + 13), 0, 4096, &v75);
  v29 = *v28;
  v73 = v75;
  v74 = v76;
  if (v76)
  {
    p_shared_owners = (unint64_t *)&v76->__shared_owners_;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
  }
  Phase::Controller::VoiceBufferExchangeManager::CommitVoiceBuffer(v29, 0, &v73);
  v32 = v74;
  if (v74)
  {
    v33 = (unint64_t *)&v74->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  Phase::Controller::VoiceBufferExchangeManager::GetPreparedVoiceBufferParameters(*v28, (uint64_t *)buf);
  v35 = v78[0];
  std::vector<Phase::Controller::VoiceBufferParameter>::__vdeallocate((void **)(v78[0] + 8));
  *(_OWORD *)(v35 + 8) = *(_OWORD *)buf;
  *(_QWORD *)(v35 + 24) = *(_QWORD *)&buf[16];
  memset(buf, 0, 24);
  v80 = (void **)buf;
  std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v80);
  v36 = (_QWORD *)v78[0];
  v37 = *(_QWORD *)(v78[0] + 40);
  v38 = *(_QWORD *)(v78[0] + 48);
  if (v37 >= v38)
  {
    v40 = (void **)(v78[0] + 32);
    v41 = *(_QWORD *)(v78[0] + 32);
    v42 = (uint64_t)(v37 - v41) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
    v44 = v38 - v41;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>(v78[0] + 48, v45);
    v47 = &v46[16 * v42];
    v49 = &v46[16 * v48];
    *(_DWORD *)v47 = 0;
    *((_QWORD *)v47 + 1) = 0x3FF0000000000000;
    v39 = v47 + 16;
    v51 = (char *)v36[4];
    v50 = (char *)v36[5];
    if (v50 != v51)
    {
      do
      {
        *((_OWORD *)v47 - 1) = *((_OWORD *)v50 - 1);
        v47 -= 16;
        v50 -= 16;
      }
      while (v50 != v51);
      v50 = (char *)*v40;
    }
    v36[4] = v47;
    v36[5] = v39;
    v36[6] = v49;
    if (v50)
      operator delete(v50);
  }
  else
  {
    *(_DWORD *)v37 = 0;
    *(_QWORD *)(v37 + 8) = 0x3FF0000000000000;
    v39 = (char *)(v37 + 16);
  }
  v36[5] = v39;
  v52 = (_QWORD *)v78[0];
  v53 = (double)*((unint64_t *)this + 14);
  v54 = *(double **)(v78[0] + 88);
  v55 = *(_QWORD *)(v78[0] + 96);
  if ((unint64_t)v54 >= v55)
  {
    v57 = (void **)(v78[0] + 80);
    v58 = *(double **)(v78[0] + 80);
    v59 = ((char *)v54 - (char *)v58) >> 4;
    v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 60)
      std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
    v61 = v55 - (_QWORD)v58;
    if (v61 >> 3 > v60)
      v60 = v61 >> 3;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0)
      v62 = 0xFFFFFFFFFFFFFFFLL;
    else
      v62 = v60;
    if (v62)
    {
      v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>(v78[0] + 96, v62);
      v58 = (double *)v52[10];
      v54 = (double *)v52[11];
    }
    else
    {
      v63 = 0;
    }
    v64 = (double *)&v63[16 * v59];
    v65 = &v63[16 * v62];
    *(_DWORD *)v64 = 0;
    v64[1] = v53;
    v56 = v64 + 2;
    if (v54 != v58)
    {
      do
      {
        *((_OWORD *)v64 - 1) = *((_OWORD *)v54 - 1);
        v64 -= 2;
        v54 -= 2;
      }
      while (v54 != v58);
      v58 = (double *)*v57;
    }
    v52[10] = v64;
    v52[11] = v56;
    v52[12] = v65;
    if (v58)
      operator delete(v58);
  }
  else
  {
    *(_DWORD *)v54 = 0;
    v54[1] = v53;
    v56 = v54 + 2;
  }
  v52[11] = v56;
  v66 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::ConfigureTap(*(uint64_t **)(**((_QWORD **)this + 16) + 72), *((_QWORD *)this + 14), 1, (uint64_t)&v77);
  if ((_DWORD)v66)
  {
    v67 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v66)
                                                                                        + 944)));
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      v68 = *((_QWORD *)this + 14);
      GetTapTypeString(*((_QWORD *)this + 18));
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "PreSpatialTap.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 121;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = this;
      v84 = 2048;
      v85 = v68;
      v86 = 2112;
      v87 = v69;
      _os_log_impl(&dword_2164CC000, v67, OS_LOG_TYPE_ERROR, "%25s:%-5d pre-spatialTap@%p: unable to configure tapId %llu with type %@", buf, 0x30u);

    }
  }
  else
  {
    *((_BYTE *)this + 184) = 1;
  }
  v70 = v76;
  if (v76)
  {
    v71 = (unint64_t *)&v76->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  *(_QWORD *)buf = v78;
  std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (__p[0])
    operator delete(__p[0]);
}

void sub_21667AAC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *Phase::Controller::PreSpatialTapSourceObject::AddMixer(Phase::Controller::PreSpatialTapSourceObject *this, UniqueObjectId a2)
{
  uint64_t **v2;
  uint64_t *result;
  uint64_t **v4;
  UniqueObjectId *v5;
  UniqueObjectId v6;
  uint64_t v7;

  v6 = a2;
  v2 = (uint64_t **)((char *)this + 56);
  result = std::__tree<Phase::UniqueObjectId>::__find_equal<Phase::UniqueObjectId>((uint64_t)this + 56, &v7, v6.mStorage);
  if (!*result)
  {
    v4 = (uint64_t **)result;
    v5 = (UniqueObjectId *)operator new(0x30uLL);
    v5[2] = v6;
    return std::__tree<Phase::SpatialCategory>::__insert_node_at(v2, v7, v4, (uint64_t *)v5);
  }
  return result;
}

void Phase::Controller::PreSpatialTapSourceObject::AddSource(Phase::Controller::PreSpatialTapSourceObject *this, Handle64 a2)
{
  Handle64 *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t v10;

  v4 = (Handle64 *)operator new(0x28uLL);
  v5 = (uint64_t *)v4;
  v4[4].mData = a2.mData;
  v6 = (uint64_t **)((char *)this + 40);
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v7;
        v9 = v7[4];
        if (v9 <= a2.mData)
          break;
        v7 = (uint64_t *)*v7;
        v6 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v9 >= a2.mData)
        break;
      v7 = (uint64_t *)v7[1];
      if (!v7)
      {
        v6 = v8 + 1;
        goto LABEL_9;
      }
    }
    operator delete(v4);
  }
  else
  {
    v8 = (uint64_t **)((char *)this + 40);
LABEL_9:
    v4->mData = 0;
    v4[1].mData = 0;
    v4[2].mData = (unint64_t)v8;
    *v6 = (uint64_t *)v4;
    v10 = **((_QWORD **)this + 4);
    if (v10)
    {
      *((_QWORD *)this + 4) = v10;
      v5 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 5), v5);
    ++*((_QWORD *)this + 6);
  }
}

void Phase::Controller::PreSpatialTapSourceObject::RemoveMixer(uint64_t a1, unint64_t a2, unint64_t a3)
{
  std::__tree<Phase::UniqueObjectId>::__erase_unique<Phase::UniqueObjectId>((uint64_t **)(a1 + 56), a2, a3);
}

void Phase::Controller::PreSpatialTapSourceObject::RemoveSource(Phase::Controller::PreSpatialTapSourceObject *this, Handle64 a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = (uint64_t *)((char *)this + 40);
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2.mData;
      if (v7 >= a2.mData)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2.mData)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*((uint64_t **)this + 4) == v5)
        *((_QWORD *)this + 4) = v11;
      --*((_QWORD *)this + 6);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      operator delete(v5);
    }
  }
}

void Phase::Controller::PreSpatialTapSourceObject::Update(Phase::Controller::PreSpatialTapSourceObject *this)
{
  char *v2;
  char *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL4 v11;
  BOOL v12;
  _BOOL4 v13;
  unint64_t v14;
  char *v15;
  char *v16;
  Phase::Controller::PreSpatialTapSourceObject *v17;
  Phase::Controller::PreSpatialTapSourceObject *v18;
  Phase::Controller::PreSpatialTapSourceObject *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t Submix;
  uint64_t v28;
  std::vector<char>::pointer begin;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  unint64_t *v44;
  char v45;
  std::vector<char>::value_type __x[8];
  char *v47;
  char *v48;
  int v49;
  uint64_t **v50;
  uint64_t **v51;
  std::vector<char> v52;
  void *__p[3];
  char *v54;
  uint64_t *v55;
  unint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63[2];

  if (!*((_BYTE *)this + 184))
    return;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v55 = 0;
  v56 = 0;
  v54 = (char *)&v55;
  if (&v54 == (char **)((char *)this + 56)
    || (v2 = (char *)*((_QWORD *)this + 7), v3 = (char *)this + 64, v2 == (char *)this + 64))
  {
    v14 = 0;
  }
  else
  {
    do
    {
      v4 = (uint64_t *)operator new(0x30uLL);
      v5 = v4;
      *((_OWORD *)v4 + 2) = *((_OWORD *)v2 + 2);
      v6 = v55;
      v7 = &v55;
      v8 = &v55;
      if (v55)
      {
        v9 = v4[5];
        do
        {
          while (1)
          {
            v7 = (uint64_t **)v6;
            v10 = v6[5];
            v11 = v4[4] < (unint64_t)v6[4];
            v12 = v9 == v10;
            v13 = v9 < v10;
            if (v12)
              v13 = v11;
            if (!v13)
              break;
            v6 = *v7;
            v8 = v7;
            if (!*v7)
              goto LABEL_13;
          }
          v6 = v7[1];
        }
        while (v6);
        v8 = v7 + 1;
      }
LABEL_13:
      *v4 = 0;
      v4[1] = 0;
      v4[2] = (uint64_t)v7;
      *v8 = v4;
      if (*(_QWORD *)v54)
      {
        v54 = *(char **)v54;
        v5 = *v8;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v55, v5);
      v14 = ++v56;
      v15 = (char *)*((_QWORD *)v2 + 1);
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(char **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (char *)*((_QWORD *)v2 + 2);
          v12 = *(_QWORD *)v16 == (_QWORD)v2;
          v2 = v16;
        }
        while (!v12);
      }
      v2 = v16;
    }
    while (v16 != v3);
  }
  v17 = (Phase::Controller::PreSpatialTapSourceObject *)*((_QWORD *)this + 4);
  if (v17 != (Phase::Controller::PreSpatialTapSourceObject *)((char *)this + 40))
  {
    do
    {
      Phase::Controller::SubmixSystem::GetSubmixesForSource(*((uint64_t **)this + 17), *((uint64_t **)v17 + 4), (uint64_t **)&v54);
      v18 = (Phase::Controller::PreSpatialTapSourceObject *)*((_QWORD *)v17 + 1);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = *(Phase::Controller::PreSpatialTapSourceObject **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (Phase::Controller::PreSpatialTapSourceObject *)*((_QWORD *)v17 + 2);
          v12 = *(_QWORD *)v19 == (_QWORD)v17;
          v17 = v19;
        }
        while (!v12);
      }
      v17 = v19;
    }
    while (v19 != (Phase::Controller::PreSpatialTapSourceObject *)((char *)this + 40));
    v14 = v56;
  }
  if (v14 <= *((_QWORD *)this + 12))
    v20 = *((_QWORD *)this + 12);
  else
    v20 = v14;
  std::vector<Phase::UniqueObjectId>::resize((uint64_t)&v60, v20);
  std::vector<Phase::UniqueObjectId>::resize((uint64_t)&v57, v20);
  v21 = (char *)*((_QWORD *)this + 10);
  *(_QWORD *)__x = v54;
  __p[0] = &v55;
  v52.__begin_ = v21;
  v50 = (uint64_t **)((char *)this + 88);
  v63[0] = (uint64_t)v60;
  v22 = (char *)std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__wrap_iter<Phase::UniqueObjectId*> &>((uint64_t)__x, __p, (uint64_t)&v52, &v50, v63);
  *(_QWORD *)__x = *((_QWORD *)this + 10);
  __p[0] = (char *)this + 88;
  v52.__begin_ = v54;
  v50 = &v55;
  v63[0] = (uint64_t)v57;
  v23 = (char *)std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__wrap_iter<Phase::UniqueObjectId*> &>((uint64_t)__x, __p, (uint64_t)&v52, &v50, v63);
  std::vector<Phase::UniqueObjectId>::resize((uint64_t)&v60, (v22 - (char *)v60) >> 4);
  std::vector<Phase::UniqueObjectId>::resize((uint64_t)&v57, (v23 - (_BYTE *)v57) >> 4);
  v24 = (uint64_t **)((char *)this + 80);
  v25 = v60;
  if (v60 == v61)
  {
    v44 = (unint64_t *)v57;
    if (v57 == v58)
      goto LABEL_72;
    do
    {
LABEL_70:
      std::__tree<Phase::UniqueObjectId>::__erase_unique<Phase::UniqueObjectId>(v24, *v44, v44[1]);
      Phase::Controller::DVM::VoiceGraph::RemoveSubmixFromTap(*(_QWORD *)(**((_QWORD **)this + 16) + 72), *((_QWORD *)this + 14), *v44, v44[1]);
      v44 += 2;
    }
    while (v44 != v58);
LABEL_71:
    if (!Phase::Controller::DVM::VoiceGraph::ConnectTapToSubmixes(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 16) + 72), *((_QWORD *)this + 14)))goto LABEL_72;
LABEL_77:
    std::terminate();
  }
  v45 = 0;
  do
  {
    v26 = *((_QWORD *)this + 15);
    Submix = Phase::Controller::SubmixSystem::GetSubmix(*((Phase::Logger **)this + 17), *v25, v25[1]);
    if ((Phase::Controller::Submix::ExcludeFromTapBinding(Submix, v26) & 1) == 0)
    {
      v28 = Phase::Controller::SubmixSystem::GetSubmix(*((Phase::Logger **)this + 17), *v25, v25[1]);
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v28 + 272))(__p);
      __x[0] = 0;
      std::vector<char>::vector(&v52, 0x20uLL, __x);
      begin = v52.__begin_;
      *(_QWORD *)v52.__begin_ = 6553601;
      *((_DWORD *)begin + 2) = 0;
      Phase::ChannelLayout::GetCrossmixMatrix((int **)__p, (int **)&v52, (uint64_t *)&v50);
      *(_QWORD *)__x = 0;
      v47 = 0;
      v48 = 0;
      v49 = 1065353216;
      v30 = (uint64_t)v50;
      if (v51 != v50)
      {
        v31 = 0;
        v32 = 0;
        do
        {
          v33 = v30 + 24 * v32;
          v34 = *(_DWORD **)v33;
          if (*(_QWORD *)(v33 + 8) - *(_QWORD *)v33 != 4)
            goto LABEL_77;
          if (v31 >= v48)
          {
            v36 = *(char **)__x;
            v37 = (uint64_t)&v31[-*(_QWORD *)__x] >> 2;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v39 = (uint64_t)&v48[-*(_QWORD *)__x];
            if ((uint64_t)&v48[-*(_QWORD *)__x] >> 1 > v38)
              v38 = v39 >> 1;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
              v40 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v40 = v38;
            if (v40)
            {
              v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v48, v40);
              v36 = *(char **)__x;
              v31 = v47;
            }
            else
            {
              v41 = 0;
            }
            v42 = &v41[4 * v37];
            *(_DWORD *)v42 = *v34;
            v35 = v42 + 4;
            while (v31 != v36)
            {
              v43 = *((_DWORD *)v31 - 1);
              v31 -= 4;
              *((_DWORD *)v42 - 1) = v43;
              v42 -= 4;
            }
            *(_QWORD *)__x = v42;
            v47 = v35;
            v48 = &v41[4 * v40];
            if (v36)
              operator delete(v36);
          }
          else
          {
            *(_DWORD *)v31 = *v34;
            v35 = v31 + 4;
          }
          v47 = v35;
          ++v32;
          v30 = (uint64_t)v50;
          v31 = v35;
        }
        while (0xAAAAAAAAAAAAAAABLL * (v51 - v50) > v32);
      }
      if ((Phase::Controller::DVM::VoiceGraph::AddSubmixToTap(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 16) + 72), *((_QWORD *)this + 14), *v25, v25[1], (uint64_t)__x) & 0xFFFFFFFB) == 0)
      {
        std::__tree<Phase::UniqueObjectId>::__emplace_unique_key_args<Phase::UniqueObjectId,Phase::UniqueObjectId const&>((uint64_t **)this + 10, (unint64_t *)v25, v25);
        v45 = 1;
      }
      if (*(_QWORD *)__x)
      {
        v47 = *(char **)__x;
        operator delete(*(void **)__x);
      }
      *(_QWORD *)__x = &v50;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
      if (v52.__begin_)
      {
        v52.__end_ = v52.__begin_;
        operator delete(v52.__begin_);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    v25 += 2;
  }
  while (v25 != v61);
  v44 = (unint64_t *)v57;
  v24 = (uint64_t **)((char *)this + 80);
  if (v57 != v58)
    goto LABEL_70;
  if ((v45 & 1) != 0)
    goto LABEL_71;
LABEL_72:
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(v55);
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
}

void sub_21667B33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  void *v30;

  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(a25);
  if (__p)
    operator delete(__p);
  v30 = *(void **)(v28 - 136);
  if (v30)
  {
    *(_QWORD *)(v28 - 128) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::PreSpatialTapSourceObject::IsRegistered(Phase::Controller::PreSpatialTapSourceObject *this)
{
  return *((unsigned __int8 *)this + 184);
}

uint64_t std::unique_ptr<Phase::Controller::VoiceBufferExchangeManager>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>>>::~__hash_table(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = 0;
      v4 = (_QWORD *)*v2;
      do
      {
        if (LOBYTE(v2[v3 + 13]))
          std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&v2[v3 + 11]);
        v3 -= 3;
      }
      while (v3 != -9);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
}

void std::__tree<Phase::UniqueObjectId>::__erase_unique<Phase::UniqueObjectId>(uint64_t **a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t **v11;
  unint64_t v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = (uint64_t *)(a1 + 1);
  v4 = a1[1];
  if (v4)
  {
    v6 = v5;
    v7 = v4;
    do
    {
      v8 = v7[5];
      v10 = v8 == a3;
      v9 = v8 < a3;
      if (v10)
        v9 = v7[4] < a2;
      v10 = !v9;
      if (v9)
        v11 = (uint64_t **)(v7 + 1);
      else
        v11 = (uint64_t **)v7;
      if (v10)
        v6 = v7;
      v7 = *v11;
    }
    while (*v11);
    if (v6 != v5)
    {
      v12 = v6[5];
      v10 = v12 == a3;
      v13 = v12 > a3;
      if (v10)
        v13 = v6[4] > a2;
      if (!v13)
      {
        v14 = (uint64_t *)v6[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          v16 = v6;
          do
          {
            v15 = (uint64_t *)v16[2];
            v10 = *v15 == (_QWORD)v16;
            v16 = v15;
          }
          while (!v10);
        }
        if (*a1 == v6)
          *a1 = v15;
        a1[2] = (uint64_t *)((char *)a1[2] - 1);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v4, v6);
        operator delete(v6);
      }
    }
  }
}

_OWORD *std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__wrap_iter<Phase::UniqueObjectId*> &>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _BOOL4 v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _OWORD *v26;
  _QWORD *v27;
  _QWORD *v28;

  while (1)
  {
    v5 = *(_QWORD **)a1;
    v6 = (_QWORD *)*a2;
    if (*(_QWORD *)a1 == *a2)
      return (_OWORD *)*a5;
    v7 = *(_QWORD **)a3;
    if (*(_QWORD *)a3 == *a4)
      break;
    v9 = v5[4];
    v8 = v5[5];
    v11 = v7[4];
    v10 = v7[5];
    v12 = v9 < v11;
    if (v8 != v10)
      v12 = v8 < v10;
    if (v12)
    {
      *(_OWORD *)*a5 = *((_OWORD *)v5 + 2);
      v13 = *(_QWORD **)a1;
      v14 = *(_QWORD **)(*(_QWORD *)a1 + 8);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v13[2];
          v16 = *v15 == (_QWORD)v13;
          v13 = v15;
        }
        while (!v16);
      }
      *(_QWORD *)a1 = v15;
      *a5 += 16;
    }
    else
    {
      v17 = v11 < v9;
      if (v8 != v10)
        v17 = v10 < v8;
      if (v17)
      {
        v18 = (_QWORD *)v7[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v7[2];
            v16 = *v19 == (_QWORD)v7;
            v7 = v19;
          }
          while (!v16);
        }
        *(_QWORD *)a3 = v19;
      }
      else
      {
        v20 = (_QWORD *)v5[1];
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = (_QWORD *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (_QWORD *)v5[2];
            v16 = *v21 == (_QWORD)v5;
            v5 = v21;
          }
          while (!v16);
        }
        *(_QWORD *)a1 = v21;
        v22 = *(_QWORD **)a3;
        v23 = *(_QWORD **)(*(_QWORD *)a3 + 8);
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (_QWORD *)v22[2];
            v16 = *v24 == (_QWORD)v22;
            v22 = v24;
          }
          while (!v16);
        }
        *(_QWORD *)a3 = v24;
      }
    }
  }
  v25 = *a5;
  if (v5 == v6)
    return (_OWORD *)v25;
  v26 = (_OWORD *)*a5;
  do
  {
    *v26 = *((_OWORD *)v5 + 2);
    v27 = (_QWORD *)v5[1];
    if (v27)
    {
      do
      {
        v28 = v27;
        v27 = (_QWORD *)*v27;
      }
      while (v27);
    }
    else
    {
      do
      {
        v28 = (_QWORD *)v5[2];
        v16 = *v28 == (_QWORD)v5;
        v5 = v28;
      }
      while (!v16);
    }
    ++v26;
    v5 = v28;
  }
  while (v28 != v6);
  return v26;
}

void Phase::Controller::ProcedureManager_RT::Initialize(Phase::Controller::ProcedureManager_RT *this, int a2)
{
  float v4;

  v4 = (float)(unint64_t)a2;
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>((uint64_t)this + 8, vcvtps_u32_f32(v4 / *((float *)this + 10)));
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>((uint64_t)this + 48, vcvtps_u32_f32(v4 / *((float *)this + 20)));
  *(_DWORD *)this = a2;
}

BOOL Phase::Controller::ProcedureManager_RT::PlayProcedure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 active;
  uint64_t v7;

  active = Phase::Controller::ProcedureManager_RT::AddActiveProcedure((int *)a1, a2, a3);
  if (active)
  {
    v7 = a2;
    std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::__erase_unique<Phase::Controller::DVM::ProcedureBase *>((_QWORD *)(a1 + 48), &v7);
  }
  return active;
}

BOOL Phase::Controller::ProcedureManager_RT::AddActiveProcedure(int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD v6[2];
  uint64_t v7;

  v7 = a2;
  v4 = a1 + 2;
  if (*((_QWORD *)a1 + 4) >= (unint64_t)*a1)
    return std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::find<Phase::Controller::DVM::ProcedureBase *>(v4, &v7) != 0;
  v6[0] = a2;
  v6[1] = a3;
  std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::__emplace_unique_key_args<Phase::Controller::DVM::ProcedureBase *,std::pair<Phase::Controller::DVM::ProcedureBase *,long long>>((uint64_t)v4, v6, v6);
  return 1;
}

BOOL Phase::Controller::ProcedureManager_RT::PauseProcedure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v5;
  uint64_t v7;

  v5 = Phase::Controller::ProcedureManager_RT::AddInactiveProcedure((int *)a1, a2, a3);
  if (v5)
  {
    v7 = a2;
    std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::__erase_unique<Phase::Controller::DVM::ProcedureBase *>((_QWORD *)(a1 + 8), &v7);
  }
  return v5;
}

BOOL Phase::Controller::ProcedureManager_RT::AddInactiveProcedure(int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD v6[2];
  uint64_t v7;

  v7 = a2;
  v4 = a1 + 12;
  if (*((_QWORD *)a1 + 9) >= (unint64_t)*a1)
    return std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::find<Phase::Controller::DVM::ProcedureBase *>(v4, &v7) != 0;
  v6[0] = a2;
  v6[1] = a3;
  std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::__emplace_unique_key_args<Phase::Controller::DVM::ProcedureBase *,std::pair<Phase::Controller::DVM::ProcedureBase *,long long>>((uint64_t)v4, v6, v6);
  return 1;
}

uint64_t *Phase::Controller::ProcedureManager_RT::StopProcedure(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v5;

  v5 = a2;
  result = std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::__erase_unique<Phase::Controller::DVM::ProcedureBase *>((_QWORD *)(a1 + 8), &v5);
  if (result != (uint64_t *)1)
  {
    v5 = a2;
    return (uint64_t *)(std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::__erase_unique<Phase::Controller::DVM::ProcedureBase *>((_QWORD *)(a1 + 48), &v5) == (uint64_t *)1);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::__emplace_unique_key_args<Phase::Controller::DVM::ProcedureBase *,std::pair<Phase::Controller::DVM::ProcedureBase *,long long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  v14 = a3[1];
  i[2] = *a3;
  i[3] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_21667BBC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::find<Phase::Controller::DVM::ProcedureBase *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::__erase_unique<Phase::Controller::DVM::ProcedureBase *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>>>::find<void *>(a1, a2);
  if (result)
  {
    std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

Phase::Controller::ProcedureRegistry *Phase::Controller::ProcedureRegistry::ProcedureRegistry(Phase::Controller::ProcedureRegistry *this)
{
  uint64_t v1;
  uint64_t p_str;
  unint64_t v3;
  unsigned int v4;
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t v7;
  std::string *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int64x2_t v20;
  void *v21;
  std::string *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int64x2_t v34;
  void *v35;
  std::string *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int64x2_t v48;
  void *v49;
  std::string *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  int64x2_t v62;
  void *v63;
  std::string *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  int64x2_t v76;
  void *v77;
  std::string *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  int64x2_t v90;
  void *v91;
  std::string *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  int64x2_t v104;
  void *v105;
  std::string *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  int64x2_t v118;
  void *v119;
  std::string *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  int64x2_t v132;
  void *v133;
  std::string *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  int64x2_t v146;
  void *v147;
  std::string *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  int64x2_t v160;
  void *v161;
  std::string *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  int64x2_t v174;
  void *v175;
  std::string *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  int64x2_t v188;
  void *v189;
  std::string *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  int64x2_t v202;
  void *v203;
  std::string::value_type *v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  int64x2_t v216;
  void *v217;
  _BYTE *v218;
  uint64_t v219;
  std::string *v220;
  unsigned int v221;
  std::string::value_type *v222;
  unsigned int v223;
  Phase::Logger *v224;
  unint64_t v225;
  unint64_t v226;
  uint8x8_t v227;
  _QWORD *v228;
  _QWORD *i;
  unint64_t v230;
  std::string *v231;
  std::string *v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  char *v239;
  __int128 v240;
  uint64_t v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  float v245;
  float v246;
  _BOOL8 v247;
  unint64_t v248;
  unint64_t v249;
  int8x8_t prime;
  void *v251;
  void *v252;
  uint64_t v253;
  _QWORD *v254;
  unint64_t v255;
  uint8x8_t v256;
  unint64_t v257;
  uint8x8_t v258;
  uint64_t v259;
  _QWORD *v260;
  unint64_t v261;
  _QWORD *v262;
  double v263;
  unint64_t v264;
  uint64_t v265;
  void *v267;
  NSObject *v268;
  std::runtime_error *exception;
  NSObject *v271;
  _QWORD *v272;
  std::string __str;
  unint64_t v275;
  uint64_t p_size;
  char v277;
  char *v278;
  uint64_t v279;
  _BYTE v280[32];
  int64x2_t v281;
  void *v282[2];
  __int128 v283;
  void *__p[2];
  _OWORD v285[2];
  _QWORD v286[3];
  _QWORD *v287;
  _BYTE buf[32];
  void **v289;
  double v290[2];
  char v291;
  uint64_t v292;

  v292 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__str, "WaterProcedure");
  v287 = 0;
  memset(v280, 0, sizeof(v280));
  v281 = 0u;
  *(_OWORD *)v282 = 0u;
  v283 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v285, 0, sizeof(v285));
  std::string::operator=((std::string *)v280, &__str);
  v1 = 0xCBF29CE484222325;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v3 = (unint64_t)this;
    p_str = __str.__r_.__value_.__r.__words[0];
    if (!__str.__r_.__value_.__r.__words[0])
      goto LABEL_9;
  }
  else
  {
    p_str = (uint64_t)&__str;
    v3 = (unint64_t)this;
  }
  v4 = *(unsigned __int8 *)p_str;
  if (*(_BYTE *)p_str)
  {
    v5 = (unsigned __int8 *)(p_str + 1);
    p_str = 0xCBF29CE484222325;
    do
    {
      p_str = 0x100000001B3 * (p_str ^ v4);
      v6 = *v5++;
      v4 = v6;
    }
    while (v6);
  }
  else
  {
    p_str = 0;
  }
LABEL_9:
  *(_QWORD *)&v280[24] = p_str;
  LODWORD(v278) = 0;
  v290[0] = 0.1;
  p_size = 0x40E7700000000000;
  v279 = 0x408F400000000000;
  v7 = v281.i64[1];
  if ((void *)v281.i64[1] >= v282[0])
  {
    v9 = (v281.i64[1] - v281.i64[0]) >> 6;
    if ((unint64_t)(v9 + 1) >> 58)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v10 = ((uint64_t)v282[0] - v281.i64[0]) >> 5;
    if (v10 <= v9 + 1)
      v10 = v9 + 1;
    if ((char *)v282[0] - v281.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0)
      v11 = 0x3FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v289 = v282;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v11);
    else
      v12 = 0;
    *(_QWORD *)buf = v11;
    *(_QWORD *)&buf[8] = v11 + (v9 << 6);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[24] = v11 + (v12 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[10],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v14 = v281.i64[1];
    v13 = v281.i64[0];
    v16 = *(_QWORD *)&buf[8];
    v15 = *(_QWORD *)&buf[16];
    if (v281.i64[1] == v281.i64[0])
    {
      v20 = vdupq_n_s64(v281.u64[1]);
    }
    else
    {
      do
      {
        v17 = *(_OWORD *)(v14 - 64);
        *(_QWORD *)(v16 - 48) = *(_QWORD *)(v14 - 48);
        *(_OWORD *)(v16 - 64) = v17;
        *(_QWORD *)(v14 - 56) = 0;
        *(_QWORD *)(v14 - 48) = 0;
        *(_QWORD *)(v14 - 64) = 0;
        v18 = *(_OWORD *)(v14 - 40);
        v19 = *(_OWORD *)(v14 - 24);
        *(_QWORD *)(v16 - 8) = *(_QWORD *)(v14 - 8);
        *(_OWORD *)(v16 - 24) = v19;
        *(_OWORD *)(v16 - 40) = v18;
        v16 -= 64;
        v14 -= 64;
      }
      while (v14 != v13);
      v20 = v281;
    }
    v8 = (std::string *)(v15 + 64);
    v281.i64[0] = v16;
    v281.i64[1] = v15 + 64;
    *(int64x2_t *)&buf[8] = v20;
    v21 = v282[0];
    v282[0] = *(void **)&buf[24];
    *(_QWORD *)&buf[24] = v21;
    *(_QWORD *)buf = v20.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[10],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>((std::string *)v281.i64[1], (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v8 = (std::string *)(v7 + 64);
  }
  v281.i64[1] = (uint64_t)v8;
  LODWORD(v279) = 1;
  v290[0] = 0.1;
  LODWORD(v278) = 5;
  p_size = 0x3FF0000000000000;
  if (v8 >= v282[0])
  {
    v23 = ((uint64_t)v8 - v281.i64[0]) >> 6;
    if ((unint64_t)(v23 + 1) >> 58)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v24 = ((uint64_t)v282[0] - v281.i64[0]) >> 5;
    if (v24 <= v23 + 1)
      v24 = v23 + 1;
    if ((char *)v282[0] - v281.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0)
      v25 = 0x3FFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    v289 = v282;
    if (v25)
      v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v25);
    else
      v26 = 0;
    *(_QWORD *)buf = v25;
    *(_QWORD *)&buf[8] = v25 + (v23 << 6);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[24] = v25 + (v26 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[22],Phase::Controller::DVM::WaterProcedure::Parameter,double,int,double>(*(std::string **)&buf[8], (int *)&v279, v290, (int *)&v278, (double *)&p_size);
    v28 = v281.i64[1];
    v27 = v281.i64[0];
    v30 = *(_QWORD *)&buf[8];
    v29 = *(_QWORD *)&buf[16];
    if (v281.i64[1] == v281.i64[0])
    {
      v34 = vdupq_n_s64(v281.u64[1]);
    }
    else
    {
      do
      {
        v31 = *(_OWORD *)(v28 - 64);
        *(_QWORD *)(v30 - 48) = *(_QWORD *)(v28 - 48);
        *(_OWORD *)(v30 - 64) = v31;
        *(_QWORD *)(v28 - 56) = 0;
        *(_QWORD *)(v28 - 48) = 0;
        *(_QWORD *)(v28 - 64) = 0;
        v32 = *(_OWORD *)(v28 - 40);
        v33 = *(_OWORD *)(v28 - 24);
        *(_QWORD *)(v30 - 8) = *(_QWORD *)(v28 - 8);
        *(_OWORD *)(v30 - 24) = v33;
        *(_OWORD *)(v30 - 40) = v32;
        v30 -= 64;
        v28 -= 64;
      }
      while (v28 != v27);
      v34 = v281;
    }
    v22 = (std::string *)(v29 + 64);
    v281.i64[0] = v30;
    v281.i64[1] = v29 + 64;
    *(int64x2_t *)&buf[8] = v34;
    v35 = v282[0];
    v282[0] = *(void **)&buf[24];
    *(_QWORD *)&buf[24] = v35;
    *(_QWORD *)buf = v34.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[22],Phase::Controller::DVM::WaterProcedure::Parameter,double,int,double>(v8, (int *)&v279, v290, (int *)&v278, (double *)&p_size);
    v22 = (std::string *)((char *)v8 + 64);
  }
  v281.i64[1] = (uint64_t)v22;
  LODWORD(v278) = 2;
  v290[0] = 5.0;
  p_size = 0x4034000000000000;
  v279 = 0x4014000000000000;
  if (v22 >= v282[0])
  {
    v37 = ((uint64_t)v22 - v281.i64[0]) >> 6;
    if ((unint64_t)(v37 + 1) >> 58)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v38 = ((uint64_t)v282[0] - v281.i64[0]) >> 5;
    if (v38 <= v37 + 1)
      v38 = v37 + 1;
    if ((char *)v282[0] - v281.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0)
      v39 = 0x3FFFFFFFFFFFFFFLL;
    else
      v39 = v38;
    v289 = v282;
    if (v39)
      v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v39);
    else
      v40 = 0;
    *(_QWORD *)buf = v39;
    *(_QWORD *)&buf[8] = v39 + (v37 << 6);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[24] = v39 + (v40 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[18],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v42 = v281.i64[1];
    v41 = v281.i64[0];
    v44 = *(_QWORD *)&buf[8];
    v43 = *(_QWORD *)&buf[16];
    if (v281.i64[1] == v281.i64[0])
    {
      v48 = vdupq_n_s64(v281.u64[1]);
    }
    else
    {
      do
      {
        v45 = *(_OWORD *)(v42 - 64);
        *(_QWORD *)(v44 - 48) = *(_QWORD *)(v42 - 48);
        *(_OWORD *)(v44 - 64) = v45;
        *(_QWORD *)(v42 - 56) = 0;
        *(_QWORD *)(v42 - 48) = 0;
        *(_QWORD *)(v42 - 64) = 0;
        v46 = *(_OWORD *)(v42 - 40);
        v47 = *(_OWORD *)(v42 - 24);
        *(_QWORD *)(v44 - 8) = *(_QWORD *)(v42 - 8);
        *(_OWORD *)(v44 - 24) = v47;
        *(_OWORD *)(v44 - 40) = v46;
        v44 -= 64;
        v42 -= 64;
      }
      while (v42 != v41);
      v48 = v281;
    }
    v36 = (std::string *)(v43 + 64);
    v281.i64[0] = v44;
    v281.i64[1] = v43 + 64;
    *(int64x2_t *)&buf[8] = v48;
    v49 = v282[0];
    v282[0] = *(void **)&buf[24];
    *(_QWORD *)&buf[24] = v49;
    *(_QWORD *)buf = v48.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[18],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v22, (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v36 = (std::string *)((char *)v22 + 64);
  }
  v281.i64[1] = (uint64_t)v36;
  LODWORD(v278) = 3;
  v290[0] = 0.1;
  p_size = 0x4024000000000000;
  v279 = 0x3FF0000000000000;
  if (v36 >= v282[0])
  {
    v51 = ((uint64_t)v36 - v281.i64[0]) >> 6;
    if ((unint64_t)(v51 + 1) >> 58)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v52 = ((uint64_t)v282[0] - v281.i64[0]) >> 5;
    if (v52 <= v51 + 1)
      v52 = v51 + 1;
    if ((char *)v282[0] - v281.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0)
      v53 = 0x3FFFFFFFFFFFFFFLL;
    else
      v53 = v52;
    v289 = v282;
    if (v53)
      v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v53);
    else
      v54 = 0;
    *(_QWORD *)buf = v53;
    *(_QWORD *)&buf[8] = v53 + (v51 << 6);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[24] = v53 + (v54 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[14],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v56 = v281.i64[1];
    v55 = v281.i64[0];
    v58 = *(_QWORD *)&buf[8];
    v57 = *(_QWORD *)&buf[16];
    if (v281.i64[1] == v281.i64[0])
    {
      v62 = vdupq_n_s64(v281.u64[1]);
    }
    else
    {
      do
      {
        v59 = *(_OWORD *)(v56 - 64);
        *(_QWORD *)(v58 - 48) = *(_QWORD *)(v56 - 48);
        *(_OWORD *)(v58 - 64) = v59;
        *(_QWORD *)(v56 - 56) = 0;
        *(_QWORD *)(v56 - 48) = 0;
        *(_QWORD *)(v56 - 64) = 0;
        v60 = *(_OWORD *)(v56 - 40);
        v61 = *(_OWORD *)(v56 - 24);
        *(_QWORD *)(v58 - 8) = *(_QWORD *)(v56 - 8);
        *(_OWORD *)(v58 - 24) = v61;
        *(_OWORD *)(v58 - 40) = v60;
        v58 -= 64;
        v56 -= 64;
      }
      while (v56 != v55);
      v62 = v281;
    }
    v50 = (std::string *)(v57 + 64);
    v281.i64[0] = v58;
    v281.i64[1] = v57 + 64;
    *(int64x2_t *)&buf[8] = v62;
    v63 = v282[0];
    v282[0] = *(void **)&buf[24];
    *(_QWORD *)&buf[24] = v63;
    *(_QWORD *)buf = v62.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[14],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v36, (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v50 = (std::string *)((char *)v36 + 64);
  }
  v281.i64[1] = (uint64_t)v50;
  LODWORD(v278) = 4;
  v290[0] = 4.0;
  p_size = 0x401C000000000000;
  v279 = 0x4010000000000000;
  if (v50 >= v282[0])
  {
    v65 = ((uint64_t)v50 - v281.i64[0]) >> 6;
    if ((unint64_t)(v65 + 1) >> 58)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v66 = ((uint64_t)v282[0] - v281.i64[0]) >> 5;
    if (v66 <= v65 + 1)
      v66 = v65 + 1;
    if ((char *)v282[0] - v281.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0)
      v67 = 0x3FFFFFFFFFFFFFFLL;
    else
      v67 = v66;
    v289 = v282;
    if (v67)
      v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v67);
    else
      v68 = 0;
    *(_QWORD *)buf = v67;
    *(_QWORD *)&buf[8] = v67 + (v65 << 6);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[24] = v67 + (v68 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[22],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v70 = v281.i64[1];
    v69 = v281.i64[0];
    v72 = *(_QWORD *)&buf[8];
    v71 = *(_QWORD *)&buf[16];
    if (v281.i64[1] == v281.i64[0])
    {
      v76 = vdupq_n_s64(v281.u64[1]);
    }
    else
    {
      do
      {
        v73 = *(_OWORD *)(v70 - 64);
        *(_QWORD *)(v72 - 48) = *(_QWORD *)(v70 - 48);
        *(_OWORD *)(v72 - 64) = v73;
        *(_QWORD *)(v70 - 56) = 0;
        *(_QWORD *)(v70 - 48) = 0;
        *(_QWORD *)(v70 - 64) = 0;
        v74 = *(_OWORD *)(v70 - 40);
        v75 = *(_OWORD *)(v70 - 24);
        *(_QWORD *)(v72 - 8) = *(_QWORD *)(v70 - 8);
        *(_OWORD *)(v72 - 24) = v75;
        *(_OWORD *)(v72 - 40) = v74;
        v72 -= 64;
        v70 -= 64;
      }
      while (v70 != v69);
      v76 = v281;
    }
    v64 = (std::string *)(v71 + 64);
    v281.i64[0] = v72;
    v281.i64[1] = v71 + 64;
    *(int64x2_t *)&buf[8] = v76;
    v77 = v282[0];
    v282[0] = *(void **)&buf[24];
    *(_QWORD *)&buf[24] = v77;
    *(_QWORD *)buf = v76.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[22],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v50, (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v64 = (std::string *)((char *)v50 + 64);
  }
  v281.i64[1] = (uint64_t)v64;
  LODWORD(v278) = 5;
  v290[0] = 0.0;
  p_size = 0x3FF0000000000000;
  v279 = 0x3FF0000000000000;
  if (v64 >= v282[0])
  {
    v79 = ((uint64_t)v64 - v281.i64[0]) >> 6;
    if ((unint64_t)(v79 + 1) >> 58)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v80 = ((uint64_t)v282[0] - v281.i64[0]) >> 5;
    if (v80 <= v79 + 1)
      v80 = v79 + 1;
    if ((char *)v282[0] - v281.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0)
      v81 = 0x3FFFFFFFFFFFFFFLL;
    else
      v81 = v80;
    v289 = v282;
    if (v81)
      v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v81);
    else
      v82 = 0;
    *(_QWORD *)buf = v81;
    *(_QWORD *)&buf[8] = v81 + (v79 << 6);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[24] = v81 + (v82 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[13],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v84 = v281.i64[1];
    v83 = v281.i64[0];
    v86 = *(_QWORD *)&buf[8];
    v85 = *(_QWORD *)&buf[16];
    if (v281.i64[1] == v281.i64[0])
    {
      v90 = vdupq_n_s64(v281.u64[1]);
    }
    else
    {
      do
      {
        v87 = *(_OWORD *)(v84 - 64);
        *(_QWORD *)(v86 - 48) = *(_QWORD *)(v84 - 48);
        *(_OWORD *)(v86 - 64) = v87;
        *(_QWORD *)(v84 - 56) = 0;
        *(_QWORD *)(v84 - 48) = 0;
        *(_QWORD *)(v84 - 64) = 0;
        v88 = *(_OWORD *)(v84 - 40);
        v89 = *(_OWORD *)(v84 - 24);
        *(_QWORD *)(v86 - 8) = *(_QWORD *)(v84 - 8);
        *(_OWORD *)(v86 - 24) = v89;
        *(_OWORD *)(v86 - 40) = v88;
        v86 -= 64;
        v84 -= 64;
      }
      while (v84 != v83);
      v90 = v281;
    }
    v78 = (std::string *)(v85 + 64);
    v281.i64[0] = v86;
    v281.i64[1] = v85 + 64;
    *(int64x2_t *)&buf[8] = v90;
    v91 = v282[0];
    v282[0] = *(void **)&buf[24];
    *(_QWORD *)&buf[24] = v91;
    *(_QWORD *)buf = v90.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[13],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v64, (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v78 = (std::string *)((char *)v64 + 64);
  }
  v281.i64[1] = (uint64_t)v78;
  LODWORD(v279) = 6;
  v290[0] = 0.01;
  LODWORD(v278) = 10;
  p_size = 0x3FB999999999999ALL;
  if (v78 >= v282[0])
  {
    v93 = ((uint64_t)v78 - v281.i64[0]) >> 6;
    if ((unint64_t)(v93 + 1) >> 58)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v94 = ((uint64_t)v282[0] - v281.i64[0]) >> 5;
    if (v94 <= v93 + 1)
      v94 = v93 + 1;
    if ((char *)v282[0] - v281.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0)
      v95 = 0x3FFFFFFFFFFFFFFLL;
    else
      v95 = v94;
    v289 = v282;
    if (v95)
      v95 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v95);
    else
      v96 = 0;
    *(_QWORD *)buf = v95;
    *(_QWORD *)&buf[8] = v95 + (v93 << 6);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[24] = v95 + (v96 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[16],Phase::Controller::DVM::WaterProcedure::Parameter,double,int,double>(*(std::string **)&buf[8], (int *)&v279, v290, (int *)&v278, (double *)&p_size);
    v98 = v281.i64[1];
    v97 = v281.i64[0];
    v100 = *(_QWORD *)&buf[8];
    v99 = *(_QWORD *)&buf[16];
    if (v281.i64[1] == v281.i64[0])
    {
      v104 = vdupq_n_s64(v281.u64[1]);
    }
    else
    {
      do
      {
        v101 = *(_OWORD *)(v98 - 64);
        *(_QWORD *)(v100 - 48) = *(_QWORD *)(v98 - 48);
        *(_OWORD *)(v100 - 64) = v101;
        *(_QWORD *)(v98 - 56) = 0;
        *(_QWORD *)(v98 - 48) = 0;
        *(_QWORD *)(v98 - 64) = 0;
        v102 = *(_OWORD *)(v98 - 40);
        v103 = *(_OWORD *)(v98 - 24);
        *(_QWORD *)(v100 - 8) = *(_QWORD *)(v98 - 8);
        *(_OWORD *)(v100 - 24) = v103;
        *(_OWORD *)(v100 - 40) = v102;
        v100 -= 64;
        v98 -= 64;
      }
      while (v98 != v97);
      v104 = v281;
    }
    v92 = (std::string *)(v99 + 64);
    v281.i64[0] = v100;
    v281.i64[1] = v99 + 64;
    *(int64x2_t *)&buf[8] = v104;
    v105 = v282[0];
    v282[0] = *(void **)&buf[24];
    *(_QWORD *)&buf[24] = v105;
    *(_QWORD *)buf = v104.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[16],Phase::Controller::DVM::WaterProcedure::Parameter,double,int,double>(v78, (int *)&v279, v290, (int *)&v278, (double *)&p_size);
    v92 = (std::string *)((char *)v78 + 64);
  }
  v281.i64[1] = (uint64_t)v92;
  LODWORD(v278) = 7;
  v290[0] = 0.1;
  p_size = 0x4024000000000000;
  v279 = 0x4008000000000000;
  if (v92 >= v282[0])
  {
    v107 = ((uint64_t)v92 - v281.i64[0]) >> 6;
    if ((unint64_t)(v107 + 1) >> 58)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v108 = ((uint64_t)v282[0] - v281.i64[0]) >> 5;
    if (v108 <= v107 + 1)
      v108 = v107 + 1;
    if ((char *)v282[0] - v281.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0)
      v109 = 0x3FFFFFFFFFFFFFFLL;
    else
      v109 = v108;
    v289 = v282;
    if (v109)
      v109 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v109);
    else
      v110 = 0;
    *(_QWORD *)buf = v109;
    *(_QWORD *)&buf[8] = v109 + (v107 << 6);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[24] = v109 + (v110 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[26],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v112 = v281.i64[1];
    v111 = v281.i64[0];
    v114 = *(_QWORD *)&buf[8];
    v113 = *(_QWORD *)&buf[16];
    if (v281.i64[1] == v281.i64[0])
    {
      v118 = vdupq_n_s64(v281.u64[1]);
    }
    else
    {
      do
      {
        v115 = *(_OWORD *)(v112 - 64);
        *(_QWORD *)(v114 - 48) = *(_QWORD *)(v112 - 48);
        *(_OWORD *)(v114 - 64) = v115;
        *(_QWORD *)(v112 - 56) = 0;
        *(_QWORD *)(v112 - 48) = 0;
        *(_QWORD *)(v112 - 64) = 0;
        v116 = *(_OWORD *)(v112 - 40);
        v117 = *(_OWORD *)(v112 - 24);
        *(_QWORD *)(v114 - 8) = *(_QWORD *)(v112 - 8);
        *(_OWORD *)(v114 - 24) = v117;
        *(_OWORD *)(v114 - 40) = v116;
        v114 -= 64;
        v112 -= 64;
      }
      while (v112 != v111);
      v118 = v281;
    }
    v106 = (std::string *)(v113 + 64);
    v281.i64[0] = v114;
    v281.i64[1] = v113 + 64;
    *(int64x2_t *)&buf[8] = v118;
    v119 = v282[0];
    v282[0] = *(void **)&buf[24];
    *(_QWORD *)&buf[24] = v119;
    *(_QWORD *)buf = v118.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[26],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v92, (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v106 = (std::string *)((char *)v92 + 64);
  }
  v281.i64[1] = (uint64_t)v106;
  LODWORD(v278) = 8;
  v290[0] = 0.0;
  p_size = 0x3FF0000000000000;
  v279 = 0x3FF0000000000000;
  if (v106 >= v282[0])
  {
    v121 = ((uint64_t)v106 - v281.i64[0]) >> 6;
    if ((unint64_t)(v121 + 1) >> 58)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v122 = ((uint64_t)v282[0] - v281.i64[0]) >> 5;
    if (v122 <= v121 + 1)
      v122 = v121 + 1;
    if ((char *)v282[0] - v281.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0)
      v123 = 0x3FFFFFFFFFFFFFFLL;
    else
      v123 = v122;
    v289 = v282;
    if (v123)
      v123 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v123);
    else
      v124 = 0;
    *(_QWORD *)buf = v123;
    *(_QWORD *)&buf[8] = v123 + (v121 << 6);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[24] = v123 + (v124 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[12],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], "Bubble Gain", (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v126 = v281.i64[1];
    v125 = v281.i64[0];
    v128 = *(_QWORD *)&buf[8];
    v127 = *(_QWORD *)&buf[16];
    if (v281.i64[1] == v281.i64[0])
    {
      v132 = vdupq_n_s64(v281.u64[1]);
    }
    else
    {
      do
      {
        v129 = *(_OWORD *)(v126 - 64);
        *(_QWORD *)(v128 - 48) = *(_QWORD *)(v126 - 48);
        *(_OWORD *)(v128 - 64) = v129;
        *(_QWORD *)(v126 - 56) = 0;
        *(_QWORD *)(v126 - 48) = 0;
        *(_QWORD *)(v126 - 64) = 0;
        v130 = *(_OWORD *)(v126 - 40);
        v131 = *(_OWORD *)(v126 - 24);
        *(_QWORD *)(v128 - 8) = *(_QWORD *)(v126 - 8);
        *(_OWORD *)(v128 - 24) = v131;
        *(_OWORD *)(v128 - 40) = v130;
        v128 -= 64;
        v126 -= 64;
      }
      while (v126 != v125);
      v132 = v281;
    }
    v120 = (std::string *)(v127 + 64);
    v281.i64[0] = v128;
    v281.i64[1] = v127 + 64;
    *(int64x2_t *)&buf[8] = v132;
    v133 = v282[0];
    v282[0] = *(void **)&buf[24];
    *(_QWORD *)&buf[24] = v133;
    *(_QWORD *)buf = v132.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[12],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v106, "Bubble Gain", (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v120 = (std::string *)((char *)v106 + 64);
  }
  v281.i64[1] = (uint64_t)v120;
  LODWORD(v278) = 9;
  v290[0] = 0.25;
  p_size = 0x4010000000000000;
  v279 = 0x3FF0000000000000;
  if (v120 >= v282[0])
  {
    v135 = ((uint64_t)v120 - v281.i64[0]) >> 6;
    if ((unint64_t)(v135 + 1) >> 58)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v136 = ((uint64_t)v282[0] - v281.i64[0]) >> 5;
    if (v136 <= v135 + 1)
      v136 = v135 + 1;
    if ((char *)v282[0] - v281.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0)
      v137 = 0x3FFFFFFFFFFFFFFLL;
    else
      v137 = v136;
    v289 = v282;
    if (v137)
      v137 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v137);
    else
      v138 = 0;
    *(_QWORD *)buf = v137;
    *(_QWORD *)&buf[8] = v137 + (v135 << 6);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[24] = v137 + (v138 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[5],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], "Rate", (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v140 = v281.i64[1];
    v139 = v281.i64[0];
    v142 = *(_QWORD *)&buf[8];
    v141 = *(_QWORD *)&buf[16];
    if (v281.i64[1] == v281.i64[0])
    {
      v146 = vdupq_n_s64(v281.u64[1]);
    }
    else
    {
      do
      {
        v143 = *(_OWORD *)(v140 - 64);
        *(_QWORD *)(v142 - 48) = *(_QWORD *)(v140 - 48);
        *(_OWORD *)(v142 - 64) = v143;
        *(_QWORD *)(v140 - 56) = 0;
        *(_QWORD *)(v140 - 48) = 0;
        *(_QWORD *)(v140 - 64) = 0;
        v144 = *(_OWORD *)(v140 - 40);
        v145 = *(_OWORD *)(v140 - 24);
        *(_QWORD *)(v142 - 8) = *(_QWORD *)(v140 - 8);
        *(_OWORD *)(v142 - 24) = v145;
        *(_OWORD *)(v142 - 40) = v144;
        v142 -= 64;
        v140 -= 64;
      }
      while (v140 != v139);
      v146 = v281;
    }
    v134 = (std::string *)(v141 + 64);
    v281.i64[0] = v142;
    v281.i64[1] = v141 + 64;
    *(int64x2_t *)&buf[8] = v146;
    v147 = v282[0];
    v282[0] = *(void **)&buf[24];
    *(_QWORD *)&buf[24] = v147;
    *(_QWORD *)buf = v146.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[5],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v120, "Rate", (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v134 = (std::string *)((char *)v120 + 64);
  }
  v281.i64[1] = (uint64_t)v134;
  LODWORD(v278) = 10;
  v290[0] = 0.0;
  p_size = 0x3FF0000000000000;
  v279 = 0x3FF0000000000000;
  if (v134 >= v282[0])
  {
    v149 = ((uint64_t)v134 - v281.i64[0]) >> 6;
    if ((unint64_t)(v149 + 1) >> 58)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v150 = ((uint64_t)v282[0] - v281.i64[0]) >> 5;
    if (v150 <= v149 + 1)
      v150 = v149 + 1;
    if ((char *)v282[0] - v281.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0)
      v151 = 0x3FFFFFFFFFFFFFFLL;
    else
      v151 = v150;
    v289 = v282;
    if (v151)
      v151 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v151);
    else
      v152 = 0;
    *(_QWORD *)buf = v151;
    *(_QWORD *)&buf[8] = v151 + (v149 << 6);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[24] = v151 + (v152 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[5],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], "Gain", (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v154 = v281.i64[1];
    v153 = v281.i64[0];
    v156 = *(_QWORD *)&buf[8];
    v155 = *(_QWORD *)&buf[16];
    if (v281.i64[1] == v281.i64[0])
    {
      v160 = vdupq_n_s64(v281.u64[1]);
    }
    else
    {
      do
      {
        v157 = *(_OWORD *)(v154 - 64);
        *(_QWORD *)(v156 - 48) = *(_QWORD *)(v154 - 48);
        *(_OWORD *)(v156 - 64) = v157;
        *(_QWORD *)(v154 - 56) = 0;
        *(_QWORD *)(v154 - 48) = 0;
        *(_QWORD *)(v154 - 64) = 0;
        v158 = *(_OWORD *)(v154 - 40);
        v159 = *(_OWORD *)(v154 - 24);
        *(_QWORD *)(v156 - 8) = *(_QWORD *)(v154 - 8);
        *(_OWORD *)(v156 - 24) = v159;
        *(_OWORD *)(v156 - 40) = v158;
        v156 -= 64;
        v154 -= 64;
      }
      while (v154 != v153);
      v160 = v281;
    }
    v148 = (std::string *)(v155 + 64);
    v281.i64[0] = v156;
    v281.i64[1] = v155 + 64;
    *(int64x2_t *)&buf[8] = v160;
    v161 = v282[0];
    v282[0] = *(void **)&buf[24];
    *(_QWORD *)&buf[24] = v161;
    *(_QWORD *)buf = v160.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[5],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v134, "Gain", (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v148 = (std::string *)((char *)v134 + 64);
  }
  v281.i64[1] = (uint64_t)v148;
  LODWORD(v278) = 11;
  v290[0] = 20.0;
  p_size = 0x40D3880000000000;
  v279 = 0x40B3880000000000;
  if (v148 >= v282[0])
  {
    v163 = ((uint64_t)v148 - v281.i64[0]) >> 6;
    if ((unint64_t)(v163 + 1) >> 58)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v164 = ((uint64_t)v282[0] - v281.i64[0]) >> 5;
    if (v164 <= v163 + 1)
      v164 = v163 + 1;
    if ((char *)v282[0] - v281.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0)
      v165 = 0x3FFFFFFFFFFFFFFLL;
    else
      v165 = v164;
    v289 = v282;
    if (v165)
      v165 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v165);
    else
      v166 = 0;
    *(_QWORD *)buf = v165;
    *(_QWORD *)&buf[8] = v165 + (v163 << 6);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[24] = v165 + (v166 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[12],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], "ReferenceHF", (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v168 = v281.i64[1];
    v167 = v281.i64[0];
    v170 = *(_QWORD *)&buf[8];
    v169 = *(_QWORD *)&buf[16];
    if (v281.i64[1] == v281.i64[0])
    {
      v174 = vdupq_n_s64(v281.u64[1]);
    }
    else
    {
      do
      {
        v171 = *(_OWORD *)(v168 - 64);
        *(_QWORD *)(v170 - 48) = *(_QWORD *)(v168 - 48);
        *(_OWORD *)(v170 - 64) = v171;
        *(_QWORD *)(v168 - 56) = 0;
        *(_QWORD *)(v168 - 48) = 0;
        *(_QWORD *)(v168 - 64) = 0;
        v172 = *(_OWORD *)(v168 - 40);
        v173 = *(_OWORD *)(v168 - 24);
        *(_QWORD *)(v170 - 8) = *(_QWORD *)(v168 - 8);
        *(_OWORD *)(v170 - 24) = v173;
        *(_OWORD *)(v170 - 40) = v172;
        v170 -= 64;
        v168 -= 64;
      }
      while (v168 != v167);
      v174 = v281;
    }
    v162 = (std::string *)(v169 + 64);
    v281.i64[0] = v170;
    v281.i64[1] = v169 + 64;
    *(int64x2_t *)&buf[8] = v174;
    v175 = v282[0];
    v282[0] = *(void **)&buf[24];
    *(_QWORD *)&buf[24] = v175;
    *(_QWORD *)buf = v174.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[12],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v148, "ReferenceHF", (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v162 = (std::string *)((char *)v148 + 64);
  }
  v281.i64[1] = (uint64_t)v162;
  LODWORD(v278) = 12;
  v290[0] = 0.0;
  p_size = 0x3FF0000000000000;
  v279 = 0x3FF0000000000000;
  if (v162 >= v282[0])
  {
    v177 = ((uint64_t)v162 - v281.i64[0]) >> 6;
    if ((unint64_t)(v177 + 1) >> 58)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v178 = ((uint64_t)v282[0] - v281.i64[0]) >> 5;
    if (v178 <= v177 + 1)
      v178 = v177 + 1;
    if ((char *)v282[0] - v281.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0)
      v179 = 0x3FFFFFFFFFFFFFFLL;
    else
      v179 = v178;
    v289 = v282;
    if (v179)
      v179 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v179);
    else
      v180 = 0;
    *(_QWORD *)buf = v179;
    *(_QWORD *)&buf[8] = v179 + (v177 << 6);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[24] = v179 + (v180 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[7],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], "GainHF", (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v182 = v281.i64[1];
    v181 = v281.i64[0];
    v184 = *(_QWORD *)&buf[8];
    v183 = *(_QWORD *)&buf[16];
    if (v281.i64[1] == v281.i64[0])
    {
      v188 = vdupq_n_s64(v281.u64[1]);
    }
    else
    {
      do
      {
        v185 = *(_OWORD *)(v182 - 64);
        *(_QWORD *)(v184 - 48) = *(_QWORD *)(v182 - 48);
        *(_OWORD *)(v184 - 64) = v185;
        *(_QWORD *)(v182 - 56) = 0;
        *(_QWORD *)(v182 - 48) = 0;
        *(_QWORD *)(v182 - 64) = 0;
        v186 = *(_OWORD *)(v182 - 40);
        v187 = *(_OWORD *)(v182 - 24);
        *(_QWORD *)(v184 - 8) = *(_QWORD *)(v182 - 8);
        *(_OWORD *)(v184 - 24) = v187;
        *(_OWORD *)(v184 - 40) = v186;
        v184 -= 64;
        v182 -= 64;
      }
      while (v182 != v181);
      v188 = v281;
    }
    v176 = (std::string *)(v183 + 64);
    v281.i64[0] = v184;
    v281.i64[1] = v183 + 64;
    *(int64x2_t *)&buf[8] = v188;
    v189 = v282[0];
    v282[0] = *(void **)&buf[24];
    *(_QWORD *)&buf[24] = v189;
    *(_QWORD *)buf = v188.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[7],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v162, "GainHF", (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v176 = (std::string *)((char *)v162 + 64);
  }
  v281.i64[1] = (uint64_t)v176;
  LODWORD(v278) = 13;
  v290[0] = 20.0;
  p_size = 0x40D3880000000000;
  v279 = 0x407F400000000000;
  if (v176 >= v282[0])
  {
    v191 = ((uint64_t)v176 - v281.i64[0]) >> 6;
    if ((unint64_t)(v191 + 1) >> 58)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v192 = ((uint64_t)v282[0] - v281.i64[0]) >> 5;
    if (v192 <= v191 + 1)
      v192 = v191 + 1;
    if ((char *)v282[0] - v281.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0)
      v193 = 0x3FFFFFFFFFFFFFFLL;
    else
      v193 = v192;
    v289 = v282;
    if (v193)
      v193 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v193);
    else
      v194 = 0;
    *(_QWORD *)buf = v193;
    *(_QWORD *)&buf[8] = v193 + (v191 << 6);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[24] = v193 + (v194 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[12],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], "ReferenceLF", (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v196 = v281.i64[1];
    v195 = v281.i64[0];
    v198 = *(_QWORD *)&buf[8];
    v197 = *(_QWORD *)&buf[16];
    if (v281.i64[1] == v281.i64[0])
    {
      v202 = vdupq_n_s64(v281.u64[1]);
    }
    else
    {
      do
      {
        v199 = *(_OWORD *)(v196 - 64);
        *(_QWORD *)(v198 - 48) = *(_QWORD *)(v196 - 48);
        *(_OWORD *)(v198 - 64) = v199;
        *(_QWORD *)(v196 - 56) = 0;
        *(_QWORD *)(v196 - 48) = 0;
        *(_QWORD *)(v196 - 64) = 0;
        v200 = *(_OWORD *)(v196 - 40);
        v201 = *(_OWORD *)(v196 - 24);
        *(_QWORD *)(v198 - 8) = *(_QWORD *)(v196 - 8);
        *(_OWORD *)(v198 - 24) = v201;
        *(_OWORD *)(v198 - 40) = v200;
        v198 -= 64;
        v196 -= 64;
      }
      while (v196 != v195);
      v202 = v281;
    }
    v190 = (std::string *)(v197 + 64);
    v281.i64[0] = v198;
    v281.i64[1] = v197 + 64;
    *(int64x2_t *)&buf[8] = v202;
    v203 = v282[0];
    v282[0] = *(void **)&buf[24];
    *(_QWORD *)&buf[24] = v203;
    *(_QWORD *)buf = v202.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[12],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v176, "ReferenceLF", (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v190 = (std::string *)((char *)v176 + 64);
  }
  v281.i64[1] = (uint64_t)v190;
  LODWORD(v278) = 14;
  v290[0] = 0.0;
  p_size = 0x3FF0000000000000;
  v279 = 0x3FF0000000000000;
  if (v190 >= v282[0])
  {
    v205 = ((uint64_t)v190 - v281.i64[0]) >> 6;
    if ((unint64_t)(v205 + 1) >> 58)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v206 = ((uint64_t)v282[0] - v281.i64[0]) >> 5;
    if (v206 <= v205 + 1)
      v206 = v205 + 1;
    if ((char *)v282[0] - v281.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0)
      v207 = 0x3FFFFFFFFFFFFFFLL;
    else
      v207 = v206;
    v289 = v282;
    if (v207)
      v207 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v207);
    else
      v208 = 0;
    *(_QWORD *)buf = v207;
    *(_QWORD *)&buf[8] = v207 + (v205 << 6);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[24] = v207 + (v208 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[7],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], "GainLF", (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v210 = v281.i64[1];
    v209 = v281.i64[0];
    v212 = *(_QWORD *)&buf[8];
    v211 = *(_QWORD *)&buf[16];
    if (v281.i64[1] == v281.i64[0])
    {
      v216 = vdupq_n_s64(v281.u64[1]);
    }
    else
    {
      do
      {
        v213 = *(_OWORD *)(v210 - 64);
        *(_QWORD *)(v212 - 48) = *(_QWORD *)(v210 - 48);
        *(_OWORD *)(v212 - 64) = v213;
        *(_QWORD *)(v210 - 56) = 0;
        *(_QWORD *)(v210 - 48) = 0;
        *(_QWORD *)(v210 - 64) = 0;
        v214 = *(_OWORD *)(v210 - 40);
        v215 = *(_OWORD *)(v210 - 24);
        *(_QWORD *)(v212 - 8) = *(_QWORD *)(v210 - 8);
        *(_OWORD *)(v212 - 24) = v215;
        *(_OWORD *)(v212 - 40) = v214;
        v212 -= 64;
        v210 -= 64;
      }
      while (v210 != v209);
      v216 = v281;
    }
    v204 = (std::string::value_type *)(v211 + 64);
    v281.i64[0] = v212;
    v281.i64[1] = v211 + 64;
    *(int64x2_t *)&buf[8] = v216;
    v217 = v282[0];
    v282[0] = *(void **)&buf[24];
    *(_QWORD *)&buf[24] = v217;
    *(_QWORD *)buf = v216.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[7],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v190, "GainLF", (int *)&v278, v290, (double *)&p_size, (double *)&v279);
    v204 = &v190[2].__r_.__value_.__s.__data_[16];
  }
  *(_OWORD *)((char *)v285 + 8) = xmmword_2166F7AE0;
  v281.i64[1] = (uint64_t)v204;
  *((_QWORD *)&v285[1] + 1) = 0;
  *(_QWORD *)buf = &off_24D580228;
  v218 = v287;
  if (v287 == v286)
  {
    *(_QWORD *)&v290[0] = &off_24D580228;
    *(_QWORD *)&buf[24] = 0;
    (*(void (**)(_QWORD *, _BYTE *))(v286[0] + 24))(v286, buf);
    (*(void (**)(_QWORD *))(*v287 + 32))(v287);
    v287 = 0;
    *(_QWORD *)&buf[24] = buf;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)&v290[0] + 24))((uint64_t)v290, v286);
    (*(void (**)(double *))(*(_QWORD *)&v290[0] + 32))(v290);
    v287 = v286;
    v218 = *(_BYTE **)&buf[24];
  }
  else
  {
    *(_QWORD *)&buf[24] = v287;
    v286[0] = &off_24D580228;
    v287 = v286;
  }
  if (v218 == buf)
  {
    v219 = 4;
    v218 = buf;
  }
  else
  {
    if (!v218)
      goto LABEL_257;
    v219 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v218 + 8 * v219))();
LABEL_257:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v220 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (!__str.__r_.__value_.__r.__words[0])
    {
LABEL_264:
      v1 = 0;
      goto LABEL_265;
    }
  }
  else
  {
    v220 = &__str;
  }
  v221 = v220->__r_.__value_.__s.__data_[0];
  if (!v220->__r_.__value_.__s.__data_[0])
    goto LABEL_264;
  v222 = &v220->__r_.__value_.__s.__data_[1];
  do
  {
    v1 = 0x100000001B3 * (v1 ^ v221);
    v223 = *v222++;
    v221 = v223;
  }
  while (v223);
LABEL_265:
  v275 = v1;
  v224 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((_QWORD *)v3, &v275);
  if (v224)
  {
    v271 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v224) + 752));
    if (os_log_type_enabled(v271, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ProcedureRegistry.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 109;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v275;
      _os_log_impl(&dword_2164CC000, v271, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"A registry entry with id %llu already exists!\"", buf, 0x1Cu);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "A registry entry with id %llu already exists!");
LABEL_384:
  }
  v225 = v275;
  v226 = *((_QWORD *)this + 1);
  if (v226)
  {
    v227 = (uint8x8_t)vcnt_s8((int8x8_t)v226);
    v227.i16[0] = vaddlv_u8(v227);
    if (v227.u32[0] > 1uLL)
    {
      v3 = v275;
      if (v226 <= v275)
        v3 = v275 % v226;
    }
    else
    {
      v3 = (v226 - 1) & v275;
    }
    v228 = *(_QWORD **)(*(_QWORD *)this + 8 * v3);
    if (v228)
    {
      for (i = (_QWORD *)*v228; i; i = (_QWORD *)*i)
      {
        v230 = i[1];
        if (v230 == v275)
        {
          if (i[2] == v275)
          {
            v268 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 752));
            if (os_log_type_enabled(v268, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "ProcedureRegistry.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 105;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v275;
              _os_log_impl(&dword_2164CC000, v268, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to register procedure info with id %llu\"", buf, 0x1Cu);
            }
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Failed to register procedure info with id %llu");
            goto LABEL_384;
          }
        }
        else
        {
          if (v227.u32[0] > 1uLL)
          {
            if (v230 >= v226)
              v230 %= v226;
          }
          else
          {
            v230 &= v226 - 1;
          }
          if (v230 != v3)
            break;
        }
      }
    }
  }
  v231 = (std::string *)operator new(0xB8uLL);
  *(_QWORD *)&v290[0] = v231;
  *(_QWORD *)&v290[1] = (char *)this + 16;
  v272 = (_QWORD *)((char *)this + 16);
  v291 = 0;
  v231->__r_.__value_.__r.__words[0] = 0;
  v231->__r_.__value_.__l.__size_ = v225;
  v231->__r_.__value_.__r.__words[2] = v225;
  v232 = v231 + 1;
  v233 = v286;
  if ((v280[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v232, *(const std::string::value_type **)v280, *(std::string::size_type *)&v280[8]);
  }
  else
  {
    *(_OWORD *)&v232->__r_.__value_.__l.__data_ = *(_OWORD *)v280;
    v231[1].__r_.__value_.__r.__words[2] = *(_QWORD *)&v280[16];
  }
  v231[2].__r_.__value_.__l.__size_ = 0;
  v234 = v281.i64[0];
  v231[2].__r_.__value_.__r.__words[0] = *(_QWORD *)&v280[24];
  v231[2].__r_.__value_.__r.__words[2] = 0;
  v231[3].__r_.__value_.__r.__words[0] = 0;
  v235 = v281.i64[1];
  p_size = (uint64_t)&v231[2].__r_.__value_.__l.__size_;
  v277 = 0;
  v236 = v281.i64[1] - v234;
  if (v281.i64[1] != v234)
  {
    if (v236 < 0)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v237 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v236 >> 6);
    v231[3].__r_.__value_.__r.__words[0] = (std::string::size_type)&v237[64 * v238];
    v231[2].__r_.__value_.__l.__size_ = (std::string::size_type)v237;
    v231[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v237;
    v278 = v237;
    v279 = (uint64_t)v237;
    *(_QWORD *)buf = v231 + 3;
    *(_QWORD *)&buf[8] = &v278;
    *(_QWORD *)&buf[16] = &v279;
    v239 = v237;
    buf[24] = 0;
    do
    {
      if (*(char *)(v234 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v239, *(const std::string::value_type **)v234, *(_QWORD *)(v234 + 8));
        v241 = v279;
      }
      else
      {
        v240 = *(_OWORD *)v234;
        *((_QWORD *)v239 + 2) = *(_QWORD *)(v234 + 16);
        *(_OWORD *)v239 = v240;
        v241 = (uint64_t)v239;
      }
      v242 = *(_OWORD *)(v234 + 24);
      v243 = *(_OWORD *)(v234 + 40);
      *((_QWORD *)v239 + 7) = *(_QWORD *)(v234 + 56);
      *(_OWORD *)(v239 + 40) = v243;
      *(_OWORD *)(v239 + 24) = v242;
      v234 += 64;
      v239 = (char *)(v241 + 64);
      v279 = v241 + 64;
    }
    while (v234 != v235);
    buf[24] = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::ProcedureParameter>,Phase::Controller::ProcedureParameter*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)buf);
    v231[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v239;
  }
  v231[3].__r_.__value_.__l.__size_ = 0;
  v231[3].__r_.__value_.__r.__words[2] = 0;
  v231[4].__r_.__value_.__r.__words[0] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v231[3].__r_.__value_.__l.__size_, v282[1], v283, (uint64_t)(v283 - (unint64_t)v282[1]) >> 2);
  v231[4].__r_.__value_.__l.__size_ = 0;
  v231[4].__r_.__value_.__r.__words[2] = 0;
  v231[5].__r_.__value_.__r.__words[0] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v231[4].__r_.__value_.__l.__size_, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
  *(_OWORD *)&v231[5].__r_.__value_.__r.__words[1] = *(_OWORD *)((char *)v285 + 8);
  v231[6].__r_.__value_.__r.__words[0] = *((_QWORD *)&v285[1] + 1);
  v244 = (uint64_t)v287;
  if (v287)
  {
    if (v287 == v286)
    {
      v231[7].__r_.__value_.__l.__size_ = (std::string::size_type)&v231[6].__r_.__value_.__l.__size_;
      (*(void (**)(_QWORD *))(v286[0] + 24))(v286);
      goto LABEL_299;
    }
    v244 = (*(uint64_t (**)(void))(*v287 + 16))();
  }
  v231[7].__r_.__value_.__l.__size_ = v244;
LABEL_299:
  v291 = 1;
  v245 = (float)(unint64_t)(*((_QWORD *)this + 3) + 1);
  v246 = *((float *)this + 8);
  if (!v226 || (float)(v246 * (float)v226) < v245)
  {
    v247 = v226 < 3 || (v226 & (v226 - 1)) != 0;
    v248 = v247 | (2 * v226);
    v249 = vcvtps_u32_f32(v245 / v246);
    if (v248 <= v249)
      prime = (int8x8_t)v249;
    else
      prime = (int8x8_t)v248;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v226 = *((_QWORD *)this + 1);
    if (*(_QWORD *)&prime > v226)
      goto LABEL_312;
    if (*(_QWORD *)&prime < v226)
    {
      v257 = vcvtps_u32_f32((float)*((unint64_t *)this + 3) / *((float *)this + 8));
      if (v226 < 3 || (v258 = (uint8x8_t)vcnt_s8((int8x8_t)v226), v258.i16[0] = vaddlv_u8(v258), v258.u32[0] > 1uLL))
      {
        v257 = std::__next_prime(v257);
      }
      else
      {
        v259 = 1 << -(char)__clz(v257 - 1);
        if (v257 >= 2)
          v257 = v259;
      }
      if (*(_QWORD *)&prime <= v257)
        prime = (int8x8_t)v257;
      if (*(_QWORD *)&prime >= v226)
      {
        v226 = *((_QWORD *)this + 1);
      }
      else
      {
        if (prime)
        {
LABEL_312:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v251 = operator new(8 * *(_QWORD *)&prime);
          v252 = *(void **)this;
          *(_QWORD *)this = v251;
          if (v252)
            operator delete(v252);
          v253 = 0;
          *((int8x8_t *)this + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)this + 8 * v253++) = 0;
          while (*(_QWORD *)&prime != v253);
          v254 = (_QWORD *)*v272;
          if (*v272)
          {
            v255 = v254[1];
            v256 = (uint8x8_t)vcnt_s8(prime);
            v256.i16[0] = vaddlv_u8(v256);
            if (v256.u32[0] > 1uLL)
            {
              if (v255 >= *(_QWORD *)&prime)
                v255 %= *(_QWORD *)&prime;
            }
            else
            {
              v255 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)this + 8 * v255) = v272;
            v260 = (_QWORD *)*v254;
            if (*v254)
            {
              do
              {
                v261 = v260[1];
                if (v256.u32[0] > 1uLL)
                {
                  if (v261 >= *(_QWORD *)&prime)
                    v261 %= *(_QWORD *)&prime;
                }
                else
                {
                  v261 &= *(_QWORD *)&prime - 1;
                }
                if (v261 != v255)
                {
                  if (!*(_QWORD *)(*(_QWORD *)this + 8 * v261))
                  {
                    *(_QWORD *)(*(_QWORD *)this + 8 * v261) = v254;
                    goto LABEL_337;
                  }
                  *v254 = *v260;
                  *v260 = **(_QWORD **)(*(_QWORD *)this + 8 * v261);
                  **(_QWORD **)(*(_QWORD *)this + 8 * v261) = v260;
                  v260 = v254;
                }
                v261 = v255;
LABEL_337:
                v254 = v260;
                v260 = (_QWORD *)*v260;
                v255 = v261;
              }
              while (v260);
            }
          }
          v226 = (unint64_t)prime;
          goto LABEL_341;
        }
        v267 = *(void **)this;
        *(_QWORD *)this = 0;
        if (v267)
          operator delete(v267);
        v226 = 0;
        *((_QWORD *)this + 1) = 0;
      }
    }
LABEL_341:
    if ((v226 & (v226 - 1)) != 0)
    {
      if (v226 <= v225)
        v3 = v225 % v226;
      else
        v3 = v225;
    }
    else
    {
      v3 = (v226 - 1) & v225;
    }
  }
  v262 = *(_QWORD **)(*(_QWORD *)this + 8 * v3);
  v263 = v290[0];
  if (v262)
  {
    **(_QWORD **)&v290[0] = *v262;
  }
  else
  {
    **(_QWORD **)&v290[0] = *((_QWORD *)this + 2);
    *((double *)this + 2) = v263;
    *(_QWORD *)(*(_QWORD *)this + 8 * v3) = v272;
    if (!**(_QWORD **)&v263)
      goto LABEL_355;
    v264 = *(_QWORD *)(**(_QWORD **)&v263 + 8);
    if ((v226 & (v226 - 1)) != 0)
    {
      if (v264 >= v226)
        v264 %= v226;
    }
    else
    {
      v264 &= v226 - 1;
    }
    v262 = (_QWORD *)(*(_QWORD *)this + 8 * v264);
  }
  *(double *)v262 = v263;
LABEL_355:
  v290[0] = 0.0;
  ++*((_QWORD *)this + 3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v290);
  if (v287 == v286)
  {
    v265 = 4;
  }
  else
  {
    if (!v287)
      goto LABEL_360;
    v265 = 5;
    v233 = v287;
  }
  (*(void (**)(_QWORD *))(*v233 + 8 * v265))(v233);
LABEL_360:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v282[1])
  {
    *(void **)&v283 = v282[1];
    operator delete(v282[1]);
  }
  *(_QWORD *)buf = &v281;
  std::vector<Phase::Controller::ProcedureParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if ((v280[23] & 0x80000000) != 0)
    operator delete(*(void **)v280);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return this;
}

void sub_21667DB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void *v29;

  __cxa_free_exception(v29);
  Phase::Controller::ProcedureInfo::~ProcedureInfo((Phase::Controller::ProcedureInfo *)&a24);
  if (a18 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>>>::~__hash_table(a12);
  _Unwind_Resume(a1);
}

void Phase::Controller::ProcedureInfo::~ProcedureInfo(Phase::Controller::ProcedureInfo *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void **v7;

  v2 = (char *)this + 128;
  v3 = (char *)*((_QWORD *)this + 19);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
  {
    *((_QWORD *)this + 11) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 8) = v6;
    operator delete(v6);
  }
  v7 = (void **)((char *)this + 32);
  std::vector<Phase::Controller::ProcedureParameter>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

_QWORD *Phase::Controller::ProcedureRegistry::CreateProcedureInstance@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *result;
  unint64_t v11;

  v11 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(a1, &v11);
  if (result)
    return (_QWORD *)std::function<std::unique_ptr<Phase::Controller::DVM::ProcedureBase> ()(Phase::DspLayer::VoiceEngine &,int,PHASEVoiceStealingType)>::operator()((uint64_t)(result + 19), a3, a4, a5);
  *a6 = 0;
  return result;
}

uint64_t std::function<std::unique_ptr<Phase::Controller::DVM::ProcedureBase> ()(Phase::DspLayer::VoiceEngine &,int,PHASEVoiceStealingType)>::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  int v7;

  v7 = a3;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, a2, &v7, &v6);
}

void std::vector<Phase::Controller::ProcedureParameter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 41) < 0)
          operator delete(*(v4 - 8));
        v4 -= 8;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::ProcedureInfo>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::ProcedureInfo>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void **v7;

  v2 = (_QWORD *)(a1 + 136);
  v3 = *(_QWORD **)(a1 + 160);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 88);
  if (v5)
  {
    *(_QWORD *)(a1 + 96) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 64);
  if (v6)
  {
    *(_QWORD *)(a1 + 72) = v6;
    operator delete(v6);
  }
  v7 = (void **)(a1 + 40);
  std::vector<Phase::Controller::ProcedureParameter>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[10],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, int *a2, double *a3, double *a4, double *a5)
{
  void *__p[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "Fall Rate");
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a2, *a3, *a4, *a5);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_21667E018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *Phase::Controller::ProcedureParameter::ProcedureParameter(std::string *this, unsigned __int8 *a2, int a3, double a4, double a5, double a6)
{
  unsigned __int8 *v10;
  __int128 v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  NSObject *v18;
  std::logic_error *exception;
  NSObject *v20;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  uint64_t v31;

  v10 = a2;
  v31 = *MEMORY[0x24BDAC8D0];
  if ((char)a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v12 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v12;
  }
  if ((((char)v10[23] & 0x80000000) == 0 || (v10 = *(unsigned __int8 **)v10) != 0) && (v13 = *v10) != 0)
  {
    v14 = v10 + 1;
    v15 = 0xCBF29CE484222325;
    do
    {
      v15 = 0x100000001B3 * (v15 ^ v13);
      v16 = *v14++;
      v13 = v16;
    }
    while (v16);
  }
  else
  {
    v15 = 0;
  }
  this[1].__r_.__value_.__r.__words[0] = v15;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = a3;
  *(double *)&this[1].__r_.__value_.__r.__words[2] = a4;
  *(double *)&this[2].__r_.__value_.__l.__data_ = a5;
  *(double *)&this[2].__r_.__value_.__l.__size_ = a6;
  if (a4 > a5)
  {
    v18 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)this) + 752));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v21 = 136315906;
      v22 = "ProcedureRegistry.hpp";
      v23 = 1024;
      v24 = 45;
      v25 = 2048;
      v26 = a4;
      v27 = 2048;
      v28 = a5;
      _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inMinimum > inMaximum is true]: \"Invalid min: %f and max: %f\"", (uint8_t *)&v21, 0x26u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid min: %f and max: %f");
LABEL_21:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  if (a6 < a4 || a6 > a5)
  {
    v20 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)this) + 752));
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = 136316162;
      v22 = "ProcedureRegistry.hpp";
      v23 = 1024;
      v24 = 52;
      v25 = 2048;
      v26 = a6;
      v27 = 2048;
      v28 = a4;
      v29 = 2048;
      v30 = a5;
      _os_log_impl(&dword_2164CC000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inDefault < inMinimum || inDefault > inMaximum is true]: \"Invalid default: %f in range [%f, %f]\"", (uint8_t *)&v21, 0x30u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid default: %f in range [%f, %f]");
    goto LABEL_21;
  }
  return this;
}

void sub_21667E2BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(unint64_t a1)
{
  if (a1 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a1 << 6);
}

uint64_t std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 8;
      *(_QWORD *)(a1 + 16) = v2 - 8;
      if (*((char *)v2 - 41) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[22],Phase::Controller::DVM::WaterProcedure::Parameter,double,int,double>(std::string *a1, int *a2, double *a3, int *a4, double *a5)
{
  void *__p[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "Average Drop Diameter");
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a2, *a3, (double)*a4, *a5);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_21667E40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[18],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, int *a2, double *a3, double *a4, double *a5)
{
  void *__p[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "Max Drop Diameter");
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a2, *a3, *a4, *a5);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_21667E4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[14],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, int *a2, double *a3, double *a4, double *a5)
{
  void *__p[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "Impulse Shape");
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a2, *a3, *a4, *a5);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_21667E544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[22],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, int *a2, double *a3, double *a4, double *a5)
{
  void *__p[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "Impulse Gain Exponent");
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a2, *a3, *a4, *a5);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_21667E5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[13],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, int *a2, double *a3, double *a4, double *a5)
{
  void *__p[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "Impulse Gain");
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a2, *a3, *a4, *a5);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_21667E67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[16],Phase::Controller::DVM::WaterProcedure::Parameter,double,int,double>(std::string *a1, int *a2, double *a3, int *a4, double *a5)
{
  void *__p[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "Chirp Rise Rate");
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a2, *a3, (double)*a4, *a5);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_21667E71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[26],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, int *a2, double *a3, double *a4, double *a5)
{
  void *__p[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "Base Frequency Multiplier");
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a2, *a3, *a4, *a5);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_21667E7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[12],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, char *a2, int *a3, double *a4, double *a5, double *a6)
{
  void *__p[2];
  char v12;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a3, *a4, *a5, *a6);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_21667E84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[5],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, char *a2, int *a3, double *a4, double *a5, double *a6)
{
  void *__p[2];
  char v12;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a3, *a4, *a5, *a6);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_21667E8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[7],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, char *a2, int *a3, double *a4, double *a5, double *a6)
{
  void *__p[2];
  char v12;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a3, *a4, *a5, *a6);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_21667E974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Phase::Controller::ProcedureRegistry::ProcedureRegistry(void)::$_0,std::allocator<Phase::Controller::ProcedureRegistry::ProcedureRegistry(void)::$_0>,std::unique_ptr<Phase::Controller::DVM::ProcedureBase> ()(Phase::DspLayer::VoiceEngine &,int,PHASEVoiceStealingType)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Controller::ProcedureRegistry::ProcedureRegistry(void)::$_0,std::allocator<Phase::Controller::ProcedureRegistry::ProcedureRegistry(void)::$_0>,std::unique_ptr<Phase::Controller::DVM::ProcedureBase> ()(Phase::DspLayer::VoiceEngine &,int,PHASEVoiceStealingType)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D580228;
  return result;
}

void std::__function::__func<Phase::Controller::ProcedureRegistry::ProcedureRegistry(void)::$_0,std::allocator<Phase::Controller::ProcedureRegistry::ProcedureRegistry(void)::$_0>,std::unique_ptr<Phase::Controller::DVM::ProcedureBase> ()(Phase::DspLayer::VoiceEngine &,int,PHASEVoiceStealingType)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D580228;
}

uint64_t std::__function::__func<Phase::Controller::ProcedureRegistry::ProcedureRegistry(void)::$_0,std::allocator<Phase::Controller::ProcedureRegistry::ProcedureRegistry(void)::$_0>,std::unique_ptr<Phase::Controller::DVM::ProcedureBase> ()(Phase::DspLayer::VoiceEngine &,int,PHASEVoiceStealingType)>::operator()@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = *a2;
  v7 = *a3;
  v8 = operator new();
  result = Phase::Controller::DVM::WaterProcedure::WaterProcedure(v8, a1, v6, v7);
  *a4 = v8;
  return result;
}

void sub_21667EA4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10A1C40994E4CCELL);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::ProcedureParameter>,Phase::Controller::ProcedureParameter*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 8);
    for (i = **(_QWORD **)(a1 + 16); i != v3; i -= 64)
    {
      if (*(char *)(i - 41) < 0)
        operator delete(*(void **)(i - 64));
    }
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::ProcedureInfo>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

double Phase::Controller::DoubleFromDictionary(Phase::Controller *this, NSDictionary *a2, NSString *a3)
{
  Phase::Controller *v4;
  NSDictionary *v5;
  void *v6;
  double v7;
  double v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  Phase::Logger *v14;
  NSObject *v15;
  std::logic_error *exception;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  Phase::Logger *v21;
  NSObject *v22;
  std::logic_error *v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = this;
  v5 = a2;
  -[Phase::Controller objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    v10 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("[NSDictionary objectForKey] failed for key: %@"), &stru_24D582B00, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "stringWithFormat:", v12, v5);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v14)
                                                                                        + 784)));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v25 = "ProfileRegistry.mm";
      v26 = 1024;
      v27 = 278;
      v28 = 2080;
      v29 = objc_msgSend(objc_retainAutorelease(v13), "UTF8String");
      _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", buf, 0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s");
    exception->__vftable = (std::logic_error_vtbl *)&off_24D580378;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v17 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "localizedStringForKey:value:table:", CFSTR("[NSObject isKindOfClass:[[NSNumber class]]] failed for key: %@"), &stru_24D582B00, 0);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "stringWithFormat:", v19, v5);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    v22 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v21)
                                                                                        + 784)));
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v25 = "ProfileRegistry.mm";
      v26 = 1024;
      v27 = 285;
      v28 = 2080;
      v29 = objc_msgSend(objc_retainAutorelease(v20), "UTF8String");
      _os_log_impl(&dword_2164CC000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", buf, 0x1Cu);
    }

    v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v23, "%s");
    v23->__vftable = (std::logic_error_vtbl *)&off_24D5803A0;
  }
  objc_msgSend(v6, "doubleValue");
  v8 = v7;

  return v8;
}

void sub_21667EE40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void Phase::Controller::StringIdFromDictionary(Phase::Controller *this, NSDictionary *a2, NSString *a3)
{
  NSDictionary *v5;
  NSString *v6;
  void *v7;
  void *v8;
  id v9;
  unint64_t v10;
  void **v11;
  void *v12;
  void *v13;
  void *v14;
  Phase::Logger *v15;
  NSObject *v16;
  std::logic_error *exception;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  Phase::Logger *v22;
  NSObject *v23;
  std::logic_error *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  Phase::Logger *v29;
  NSObject *v30;
  uint64_t v31;
  std::logic_error *v32;
  void *__p[2];
  unsigned __int8 v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  -[NSDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x24BDD17C8];
  if (!v7)
  {
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("[NSDictionary objectForKey] failed for key: %@"), &stru_24D582B00, 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stringWithFormat:", v13, v6);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v16 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15)
                                                                                        + 784)));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v36 = "ProfileRegistry.mm";
      v37 = 1024;
      v38 = 299;
      v39 = 2080;
      v40 = objc_msgSend(objc_retainAutorelease(v14), "UTF8String");
      _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", buf, 0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s");
    exception->__vftable = (std::logic_error_vtbl *)&off_24D580378;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v18 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "localizedStringForKey:value:table:", CFSTR("[NSObject isKindOfClass:[[NSString class]]] failed for key: %@"), &stru_24D582B00, 0);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "stringWithFormat:", v20, v6);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    v23 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v22)
                                                                                        + 784)));
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v36 = "ProfileRegistry.mm";
      v37 = 1024;
      v38 = 306;
      v39 = 2080;
      v40 = objc_msgSend(objc_retainAutorelease(v21), "UTF8String");
      _os_log_impl(&dword_2164CC000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", buf, 0x1Cu);
    }

    v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v24, "%s");
    v24->__vftable = (std::logic_error_vtbl *)&off_24D5803A0;
  }
  v9 = objc_retainAutorelease(v7);
  std::string::basic_string[abi:ne180100](__p, (void *)objc_msgSend(v9, "UTF8String"), objc_msgSend(v9, "lengthOfBytesUsingEncoding:", 4));
  v10 = v34;
  if ((v34 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (!v10)
  {
    v25 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "localizedStringForKey:value:table:", CFSTR("String for key: %@ is empty"), &stru_24D582B00, 0);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "stringWithFormat:", v27, v6);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    v30 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v29)
                                                                                        + 784)));
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = objc_msgSend(objc_retainAutorelease(v28), "UTF8String");
      *(_DWORD *)buf = 136315650;
      v36 = "ProfileRegistry.mm";
      v37 = 1024;
      v38 = 313;
      v39 = 2080;
      v40 = v31;
      _os_log_impl(&dword_2164CC000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::EmptyString): \"%s\"", buf, 0x1Cu);
    }

    v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v32, "%s");
    v32->__vftable = (std::logic_error_vtbl *)&off_24D5803C8;
  }

  if ((v34 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  Phase::StringId::StringId(this, (const char *)v11);
  if ((char)v34 < 0)
    operator delete(__p[0]);
}

void sub_21667F394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void Phase::Controller::Vec2FromDictionary(Phase::Controller *this, NSDictionary *a2, NSString *a3)
{
  NSString *v5;
  Phase::Controller *v6;
  NSString *v7;
  Phase::Controller *v8;
  double v9;
  NSString *v10;
  double v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  Phase::Logger *v16;
  NSObject *v17;
  std::logic_error *exception;
  NSDictionary *v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v19 = a2;
  v5 = a3;
  -[NSDictionary objectForKeyedSubscript:](v19, "objectForKeyedSubscript:", v5);
  v6 = (Phase::Controller *)objc_claimAutoreleasedReturnValue();
  v8 = v6;
  if (!v6)
  {
    v12 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("[NSDictionary objectForKey] failed for key: %@"), &stru_24D582B00, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stringWithFormat:", v14, v5);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    v17 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v16)
                                                                                        + 784)));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v21 = "ProfileRegistry.mm";
      v22 = 1024;
      v23 = 332;
      v24 = 2080;
      v25 = objc_msgSend(objc_retainAutorelease(v15), "UTF8String");
      _os_log_impl(&dword_2164CC000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", buf, 0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s");
    exception->__vftable = (std::logic_error_vtbl *)&off_24D580378;
  }
  v9 = Phase::Controller::DoubleFromDictionary(v6, (NSDictionary *)CFSTR("X"), v7);
  v11 = Phase::Controller::DoubleFromDictionary(v8, (NSDictionary *)CFSTR("Y"), v10);
  *(double *)this = v9;
  *((double *)this + 1) = v11;

}

void sub_21667F68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void Phase::Controller::ParameterFromDictionary(Phase::Controller *this, NSDictionary *a2)
{
  NSDictionary *v3;
  NSDictionary *v4;
  __CFString *v5;
  NSDictionary *v6;
  long double v7;
  Phase::Logger *v8;
  double v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  NSDictionary *v14;
  Phase::Logger *v15;
  double v16;
  void *v17;
  void *v18;
  char v19;
  Phase::Logger *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  _QWORD *v24;
  uint64_t v25;
  NSDictionary *v26;
  __CFString *v27;
  NSDictionary *v28;
  NSDictionary *v29;
  __CFString *v30;
  void *v31;
  unint64_t v32;
  NSDictionary *v33;
  NSDictionary *v34;
  __CFString *v35;
  void *v36;
  void *v37;
  char v38;
  uint64_t (*v39)();
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  NSObject *v61;
  std::logic_error *v62;
  NSObject *v63;
  std::logic_error *v64;
  void *v65;
  void *v66;
  void *v67;
  Phase::Logger *v68;
  NSObject *v69;
  uint64_t v70;
  std::logic_error *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  Phase::Logger *v76;
  NSObject *v77;
  uint64_t v78;
  std::logic_error *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  Phase::Logger *v84;
  NSObject *v85;
  uint64_t v86;
  std::logic_error *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  Phase::Logger *v92;
  NSObject *v93;
  uint64_t v94;
  std::logic_error *exception;
  NSObject *v96;
  std::logic_error *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  Phase::Logger *v102;
  NSObject *v103;
  uint64_t v104;
  std::logic_error *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  Phase::Logger *v110;
  NSObject *v111;
  uint64_t v112;
  std::logic_error *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  Phase::Logger *v118;
  NSObject *v119;
  uint64_t v120;
  std::logic_error *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  Phase::Logger *v126;
  NSObject *v127;
  uint64_t v128;
  std::logic_error *v129;
  NSDictionary *v130;
  NSDictionary *v131;
  NSDictionary *v132;
  void **v133;
  NSDictionary *v134;
  Phase::Controller *v135;
  id obj;
  NSDictionary *obja;
  __int128 v138;
  uint64_t v139;
  double *v140;
  __int128 *v141;
  unint64_t v142;
  char v143[8];
  long double v144;
  _BYTE __y[28];
  _BYTE buf[28];
  _BYTE *v147;
  _BYTE v148[28];
  _BYTE *v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;

  v154 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = &str_33;
  *((_BYTE *)this + 16) = 1;
  v134 = v3;
  v135 = this;
  v133 = (void **)((char *)this + 24);
  Phase::Envelope<double>::Envelope((Phase::Controller *)((char *)this + 24));
  Phase::Controller::StringIdFromDictionary((Phase::Controller *)v148, v3, CFSTR("Name"));
  Phase::StringId::operator=((uint64_t)this, (uint64_t)v148);
  if (!v148[16])
    free(*(void **)&v148[8]);
  if (!Phase::Controller::IsSteppedParameter(this))
  {
    v26 = v3;
    v27 = CFSTR("Envelope");
    v132 = v26;
    -[NSDictionary objectForKeyedSubscript:](v26, "objectForKeyedSubscript:", CFSTR("Envelope"));
    v28 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
    if (!v28)
    {
      v88 = (void *)MEMORY[0x24BDD17C8];
      objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v89, "localizedStringForKey:value:table:", CFSTR("[NSDictionary objectForKey] failed for key: %@"), &stru_24D582B00, 0);
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v88, "stringWithFormat:", v90, CFSTR("Envelope"));
      v91 = (void *)objc_claimAutoreleasedReturnValue();

      v93 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v92)
                                                                                          + 784)));
      if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
      {
        v94 = objc_msgSend(objc_retainAutorelease(v91), "UTF8String");
        *(_DWORD *)v148 = 136315650;
        *(_QWORD *)&v148[4] = "ProfileRegistry.mm";
        *(_WORD *)&v148[12] = 1024;
        *(_DWORD *)&v148[14] = 429;
        *(_WORD *)&v148[18] = 2080;
        *(_QWORD *)&v148[20] = v94;
        _os_log_impl(&dword_2164CC000, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", v148, 0x1Cu);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "%s");
      exception->__vftable = (std::logic_error_vtbl *)&off_24D580378;
    }
    Phase::Controller::Vec2FromDictionary((Phase::Controller *)&v140, v28, CFSTR("StartPoint"));
    v29 = v28;
    v30 = CFSTR("Segments");
    obja = v29;
    -[NSDictionary objectForKeyedSubscript:](v29, "objectForKeyedSubscript:", CFSTR("Segments"));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v31)
    {
      v98 = (void *)MEMORY[0x24BDD17C8];
      objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
      v99 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v99, "localizedStringForKey:value:table:", CFSTR("[NSDictionary objectForKey] failed for key: %@"), &stru_24D582B00, 0);
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v98, "stringWithFormat:", v100, CFSTR("Segments"));
      v101 = (void *)objc_claimAutoreleasedReturnValue();

      v103 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v102)
                                                                                           + 784)));
      if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
        v104 = objc_msgSend(objc_retainAutorelease(v101), "UTF8String");
        *(_DWORD *)v148 = 136315650;
        *(_QWORD *)&v148[4] = "ProfileRegistry.mm";
        *(_WORD *)&v148[12] = 1024;
        *(_DWORD *)&v148[14] = 611;
        *(_WORD *)&v148[18] = 2080;
        *(_QWORD *)&v148[20] = v104;
        _os_log_impl(&dword_2164CC000, v103, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", v148, 0x1Cu);
      }

      v105 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v105, "%s");
      v105->__vftable = (std::logic_error_vtbl *)&off_24D580378;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v114 = (void *)MEMORY[0x24BDD17C8];
      objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
      v115 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v115, "localizedStringForKey:value:table:", CFSTR("[NSObject isKindOfClass:[[NSArray class]]] failed for key: %@"), &stru_24D582B00, 0);
      v116 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v114, "stringWithFormat:", v116, CFSTR("Segments"));
      v117 = (void *)objc_claimAutoreleasedReturnValue();

      v119 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v118)
                                                                                           + 784)));
      if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
      {
        v120 = objc_msgSend(objc_retainAutorelease(v117), "UTF8String");
        *(_DWORD *)v148 = 136315650;
        *(_QWORD *)&v148[4] = "ProfileRegistry.mm";
        *(_WORD *)&v148[12] = 1024;
        *(_DWORD *)&v148[14] = 618;
        *(_WORD *)&v148[18] = 2080;
        *(_QWORD *)&v148[20] = v120;
        _os_log_impl(&dword_2164CC000, v119, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", v148, 0x1Cu);
      }

      v121 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v121, "%s");
      v121->__vftable = (std::logic_error_vtbl *)&off_24D5803A0;
    }
    v32 = 0;
    memset(__y, 0, 24);
    while (1)
    {
      if (objc_msgSend(v31, "count") <= v32)
      {

        Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>((Phase::Logger *)&v138, (uint64_t)&v140, *(double **)__y, *(__int128 **)&__y[8]);
        *(_QWORD *)v148 = __y;
        std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100]((void ***)v148);

        goto LABEL_78;
      }
      objc_msgSend(v31, "objectAtIndexedSubscript:", v32);
      v33 = (NSDictionary *)(id)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)v148 = 0;
      *(_QWORD *)&v148[8] = 0;
      *(_QWORD *)&v148[16] = &off_24D576F70;
      v149 = &v148[16];
      Phase::Controller::Vec2FromDictionary((Phase::Controller *)&v150, v33, CFSTR("EndPoint"));
      *(_OWORD *)v148 = v150;
      v34 = v33;
      v35 = CFSTR("CurveType");
      -[NSDictionary objectForKeyedSubscript:](v34, "objectForKeyedSubscript:", CFSTR("CurveType"));
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = (void *)MEMORY[0x24BDD17C8];
      if (!v36)
      {
        objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v65, "localizedStringForKey:value:table:", CFSTR("[NSDictionary objectForKey] failed for key: %@"), &stru_24D582B00, 0);
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "stringWithFormat:", v66, CFSTR("CurveType"));
        v67 = (void *)objc_claimAutoreleasedReturnValue();

        v69 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v68)
                                                                                            + 784)));
        if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
        {
          v70 = objc_msgSend(objc_retainAutorelease(v67), "UTF8String");
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 346;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v70;
          _os_log_impl(&dword_2164CC000, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", buf, 0x1Cu);
        }

        v71 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v71, "%s");
        v71->__vftable = (std::logic_error_vtbl *)&off_24D580378;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v72 = (void *)MEMORY[0x24BDD17C8];
        objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v73, "localizedStringForKey:value:table:", CFSTR("[NSObject isKindOfClass:[[NSString class]]] failed for key: %@"), &stru_24D582B00, 0);
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v72, "stringWithFormat:", v74, CFSTR("CurveType"));
        v75 = (void *)objc_claimAutoreleasedReturnValue();

        v77 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v76)
                                                                                            + 784)));
        if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
        {
          v78 = objc_msgSend(objc_retainAutorelease(v75), "UTF8String");
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 353;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v78;
          _os_log_impl(&dword_2164CC000, v77, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", buf, 0x1Cu);
        }

        v79 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v79, "%s");
        v79->__vftable = (std::logic_error_vtbl *)&off_24D5803A0;
      }
      v38 = objc_msgSend(v36, "isEqualToString:", CFSTR("Linear"));
      v39 = Phase::CurveFunction::Linear<double>;
      if ((v38 & 1) == 0)
      {
        v40 = objc_msgSend(v36, "isEqualToString:", CFSTR("Squared"));
        v39 = (uint64_t (*)())Phase::CurveFunction::Squared<double>;
        if ((v40 & 1) == 0)
        {
          v41 = objc_msgSend(v36, "isEqualToString:", CFSTR("InverseSquared"));
          v39 = (uint64_t (*)())Phase::CurveFunction::InverseSquared<double>;
          if ((v41 & 1) == 0)
          {
            v42 = objc_msgSend(v36, "isEqualToString:", CFSTR("Cubed"));
            v39 = (uint64_t (*)())Phase::CurveFunction::Squared<double>;
            if ((v42 & 1) == 0)
            {
              v43 = objc_msgSend(v36, "isEqualToString:", CFSTR("InverseCubed"));
              v39 = (uint64_t (*)())Phase::CurveFunction::InverseSquared<double>;
              if ((v43 & 1) == 0)
              {
                v44 = objc_msgSend(v36, "isEqualToString:", CFSTR("InverseSine"));
                v39 = (uint64_t (*)())Phase::CurveFunction::InverseSine<double>;
                if ((v44 & 1) == 0)
                {
                  v45 = objc_msgSend(v36, "isEqualToString:", CFSTR("Sine"));
                  v39 = (uint64_t (*)())Phase::CurveFunction::Sine<double>;
                  if ((v45 & 1) == 0)
                  {
                    v46 = objc_msgSend(v36, "isEqualToString:", CFSTR("Sigmoid"));
                    v39 = (uint64_t (*)())Phase::CurveFunction::Sigmoid<double>;
                    if ((v46 & 1) == 0)
                    {
                      v47 = objc_msgSend(v36, "isEqualToString:", CFSTR("InverseSigmoid"));
                      v39 = (uint64_t (*)())Phase::CurveFunction::InverseSigmoid<double>;
                      if ((v47 & 1) == 0)
                      {
                        v48 = objc_msgSend(v36, "isEqualToString:", CFSTR("HoldStartValue"));
                        v39 = (uint64_t (*)())Phase::CurveFunction::HoldStartValue<double>;
                        if ((v48 & 1) == 0)
                        {
                          v49 = objc_msgSend(v36, "isEqualToString:", CFSTR("JumpToEndValue"));
                          v39 = (uint64_t (*)())Phase::CurveFunction::JumpToEndValue<double>;
                          if ((v49 & 1) == 0)
                          {
                            v122 = (void *)MEMORY[0x24BDD17C8];
                            objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
                            v123 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v123, "localizedStringForKey:value:table:", CFSTR("String: %@ for key: %@ is unrecognized"), &stru_24D582B00, 0);
                            v124 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v122, "stringWithFormat:", v124, v36, CFSTR("CurveType"));
                            v125 = (void *)objc_claimAutoreleasedReturnValue();

                            v127 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v126) + 784));
                            if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
                            {
                              v128 = objc_msgSend(objc_retainAutorelease(v125), "UTF8String");
                              *(_DWORD *)buf = 136315650;
                              *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 404;
                              *(_WORD *)&buf[18] = 2080;
                              *(_QWORD *)&buf[20] = v128;
                              _os_log_impl(&dword_2164CC000, v127, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::InvalidString): \"%s\"", buf, 0x1Cu);
                            }

                            v129 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                            std::logic_error::logic_error(v129, "%s");
                            v129->__vftable = (std::logic_error_vtbl *)&off_24D5803F0;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      *(_QWORD *)&v150 = &unk_24D5770F0;
      *((_QWORD *)&v150 + 1) = v39;
      *((_QWORD *)&v151 + 1) = &v150;

      std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](&v148[16], (uint64_t)&v150);
      v50 = (__int128 *)*((_QWORD *)&v151 + 1);
      if (*((__int128 **)&v151 + 1) == &v150)
      {
        v50 = &v150;
        v51 = 4;
      }
      else
      {
        if (!*((_QWORD *)&v151 + 1))
          goto LABEL_59;
        v51 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
LABEL_59:

      v52 = *(_QWORD *)&__y[8];
      if (*(_QWORD *)&__y[8] >= *(_QWORD *)&__y[16])
      {
        v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__y[8] - *(_QWORD *)__y) >> 4);
        v55 = v54 + 1;
        if (v54 + 1 > 0x555555555555555)
          std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&__y[16] - *(_QWORD *)__y) >> 4) > v55)
          v55 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&__y[16] - *(_QWORD *)__y) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__y[16] - *(_QWORD *)__y) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v56 = 0x555555555555555;
        else
          v56 = v55;
        *(_QWORD *)&v152 = &__y[16];
        if (v56)
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::Segment>>((uint64_t)&__y[16], v56);
        else
          v57 = 0;
        v58 = &v57[48 * v54];
        *(_QWORD *)&v150 = v57;
        *((_QWORD *)&v150 + 1) = v58;
        *((_QWORD *)&v151 + 1) = &v57[48 * v56];
        *(_QWORD *)v58 = *(_QWORD *)v148;
        *((_QWORD *)v58 + 1) = *(_QWORD *)&v148[8];
        std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)(v58 + 16), (uint64_t)&v148[16]);
        *(_QWORD *)&v151 = v58 + 48;
        std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__swap_out_circular_buffer((uint64_t *)__y, &v150);
        v53 = *(_QWORD *)&__y[8];
        std::__split_buffer<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment> &>::~__split_buffer((void **)&v150);
      }
      else
      {
        **(_QWORD **)&__y[8] = *(_QWORD *)v148;
        *(_QWORD *)(v52 + 8) = *(_QWORD *)&v148[8];
        std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](v52 + 16, (uint64_t)&v148[16]);
        v53 = v52 + 48;
      }
      *(_QWORD *)&__y[8] = v53;
      v59 = v149;
      if (v149 == &v148[16])
      {
        v59 = &v148[16];
        v60 = 4;
      }
      else
      {
        if (!v149)
          goto LABEL_76;
        v60 = 5;
      }
      (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_76:

      ++v32;
    }
  }
  v4 = v3;
  v5 = CFSTR("Envelope");
  v130 = v4;
  -[NSDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", CFSTR("Envelope"));
  v6 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
  v131 = v6;
  if (!v6)
  {
    v80 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v81, "localizedStringForKey:value:table:", CFSTR("[NSDictionary objectForKey] failed for key: %@"), &stru_24D582B00, 0);
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v80, "stringWithFormat:", v82, CFSTR("Envelope"));
    v83 = (void *)objc_claimAutoreleasedReturnValue();

    v85 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v84)
                                                                                        + 784)));
    if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
    {
      v86 = objc_msgSend(objc_retainAutorelease(v83), "UTF8String");
      *(_DWORD *)v148 = 136315650;
      *(_QWORD *)&v148[4] = "ProfileRegistry.mm";
      *(_WORD *)&v148[12] = 1024;
      *(_DWORD *)&v148[14] = 454;
      *(_WORD *)&v148[18] = 2080;
      *(_QWORD *)&v148[20] = v86;
      _os_log_impl(&dword_2164CC000, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", v148, 0x1Cu);
    }

    v87 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v87, "%s");
    v87->__vftable = (std::logic_error_vtbl *)&off_24D580378;
  }
  Phase::Controller::Vec2FromDictionary((Phase::Controller *)v143, v6, CFSTR("StartPoint"));
  v7 = v144;
  v9 = modf(v144, (long double *)v148);
  if (v9 < 0.0)
    v9 = -v9;
  if (v9 > 2.22044605e-16)
  {
    v96 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v8) + 784));
    if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v148 = 136315650;
      *(_QWORD *)&v148[4] = "ProfileRegistry.mm";
      *(_WORD *)&v148[12] = 1024;
      *(_DWORD *)&v148[14] = 459;
      *(_WORD *)&v148[18] = 2048;
      *(long double *)&v148[20] = v7;
      _os_log_impl(&dword_2164CC000, v96, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::InvalidNumber) [!IsInteger(startPoint.y) is true]: \"StartPoint y value '%f' must be an integer\"", v148, 0x1Cu);
    }
    v97 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v97, "StartPoint y value '%f' must be an integer");
    v97->__vftable = (std::logic_error_vtbl *)&off_24D580440;
  }
  v140 = 0;
  v141 = 0;
  v142 = 0;
  -[NSDictionary objectForKeyedSubscript:](v131, "objectForKeyedSubscript:", CFSTR("Segments"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v10)
  {
    v106 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v107, "localizedStringForKey:value:table:", CFSTR("NSArray object Segments doesn't exist in envelope %@"), &stru_24D582B00, 0);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v106, "stringWithFormat:", v108, CFSTR("Envelope"));
    v109 = (void *)objc_claimAutoreleasedReturnValue();

    v111 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v110)
                                                                                         + 784)));
    if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
    {
      v112 = objc_msgSend(objc_retainAutorelease(v109), "UTF8String");
      *(_DWORD *)v148 = 136315650;
      *(_QWORD *)&v148[4] = "ProfileRegistry.mm";
      *(_WORD *)&v148[12] = 1024;
      *(_DWORD *)&v148[14] = 468;
      *(_WORD *)&v148[18] = 2080;
      *(_QWORD *)&v148[20] = v112;
      _os_log_impl(&dword_2164CC000, v111, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", v148, 0x1Cu);
    }

    v113 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v113, "%s");
    v113->__vftable = (std::logic_error_vtbl *)&off_24D580378;
  }
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  obj = v10;
  v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v150, v148, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v151;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v151 != v12)
          objc_enumerationMutation(obj);
        v14 = *(NSDictionary **)(*((_QWORD *)&v150 + 1) + 8 * i);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)&buf[16] = &off_24D576F70;
        v147 = &buf[16];
        Phase::Controller::Vec2FromDictionary((Phase::Controller *)__y, v14, CFSTR("EndPoint"));
        *(_QWORD *)buf = *(_QWORD *)__y;
        *(_QWORD *)&buf[8] = *(_QWORD *)&__y[8];
        v16 = modf(*(long double *)&__y[8], (long double *)__y);
        if (v16 < 0.0)
          v16 = -v16;
        if (v16 > 2.22044605e-16)
        {
          v61 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15) + 784));
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__y = 136315650;
            *(_QWORD *)&__y[4] = "ProfileRegistry.mm";
            *(_WORD *)&__y[12] = 1024;
            *(_DWORD *)&__y[14] = 477;
            *(_WORD *)&__y[18] = 2048;
            *(_QWORD *)&__y[20] = *(_QWORD *)&buf[8];
            _os_log_impl(&dword_2164CC000, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::InvalidNumber) [!IsInteger(envelopeSegment.mEndPoint.y) is true]: \"EndPoint y value '%f' must be an integer\"", __y, 0x1Cu);
          }
          v62 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v62, "EndPoint y value '%f' must be an integer");
          v62->__vftable = (std::logic_error_vtbl *)&off_24D580440;
        }
        -[NSDictionary objectForKeyedSubscript:](v14, "objectForKeyedSubscript:", CFSTR("CurveType"));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v17, "isEqualToString:", CFSTR("HoldStartValue")))
        {

        }
        else
        {
          -[NSDictionary objectForKeyedSubscript:](v14, "objectForKeyedSubscript:", CFSTR("CurveType"));
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = objc_msgSend(v18, "isEqualToString:", CFSTR("JumpToEndValue"));

          if ((v19 & 1) == 0)
          {
            v63 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v20) + 784));
            if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__y = 136315394;
              *(_QWORD *)&__y[4] = "ProfileRegistry.mm";
              *(_WORD *)&__y[12] = 1024;
              *(_DWORD *)&__y[14] = 484;
              _os_log_impl(&dword_2164CC000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::InvalidEnvelopeSegmentType): \"Envelope segments must all have stepped curve types equal to HoldStartValue or JumpToEndValue\"", __y, 0x12u);
            }
            v64 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v64, "Envelope segments must all have stepped curve types equal to HoldStartValue or JumpToEndValue");
            v64->__vftable = (std::logic_error_vtbl *)&off_24D580468;
          }
        }
        v21 = v141;
        if ((unint64_t)v141 >= v142)
        {
          v23 = (__int128 *)std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__push_back_slow_path<Phase::Envelope<double>::Segment const&>((uint64_t *)&v140, buf);
          goto LABEL_28;
        }
        *(_QWORD *)v141 = *(_QWORD *)buf;
        *((_QWORD *)v21 + 1) = *(_QWORD *)&buf[8];
        v22 = (uint64_t)v147;
        if (v147)
        {
          if (v147 == &buf[16])
          {
            *((_QWORD *)v21 + 5) = v21 + 1;
            (*(void (**)(_BYTE *))(*(_QWORD *)v147 + 24))(v147);
            goto LABEL_27;
          }
          v22 = (*(uint64_t (**)(void))(*(_QWORD *)v147 + 16))();
        }
        *((_QWORD *)v21 + 5) = v22;
LABEL_27:
        v23 = v21 + 3;
LABEL_28:
        v141 = v23;
        v24 = v147;
        if (v147 == &buf[16])
        {
          v24 = &buf[16];
          v25 = 4;
        }
        else
        {
          if (!v147)
            continue;
          v25 = 5;
        }
        (*(void (**)(void))(*v24 + 8 * v25))();
      }
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v150, v148, 16);
    }
    while (v11);
  }

  Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>((Phase::Logger *)&v138, (uint64_t)v143, v140, v141);
  *(_QWORD *)buf = &v140;
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);

LABEL_78:
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vdeallocate(v133);
  *(_OWORD *)((char *)v135 + 24) = v138;
  *((_QWORD *)v135 + 5) = v139;
  v139 = 0;
  v138 = 0uLL;
  *(_QWORD *)v148 = &v138;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)v148);

}

void sub_216680AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void **a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,_QWORD *a42)
{
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  uint64_t v50;

  if (a42 == v46)
  {
    v50 = 4;
  }
  else
  {
    if (!a42)
      goto LABEL_6;
    v50 = 5;
    v46 = a42;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v50))(v46);
LABEL_6:

  a37 = &a27;
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);

  Phase::Controller::ProfileRegistry::Parameter::~Parameter(a17);
  _Unwind_Resume(a1);
}

void sub_216680B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  JUMPOUT(0x2166811F0);
}

void sub_216680C38()
{
  void *v0;

  JUMPOUT(0x2166810B4);
}

void sub_216680D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t *a31)
{

  a31 = &a22;
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100](&a31);

  JUMPOUT(0x2166811F0);
}

void sub_216680E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
  __cxa_end_catch();

  a31 = (void **)&a22;
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100](&a31);

  JUMPOUT(0x2166811F0);
}

void sub_216680F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37)
{
  __cxa_end_catch();
  a37 = (void **)&a27;
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100](&a37);
  JUMPOUT(0x216681128);
}

void sub_216680F54()
{
  JUMPOUT(0x2166811C4);
}

void sub_216680F5C()
{
  JUMPOUT(0x216681114);
}

void sub_216680F64()
{
  JUMPOUT(0x216681128);
}

void sub_216680F6C()
{
  JUMPOUT(0x216681130);
}

void sub_216680F74()
{
  JUMPOUT(0x2166811DCLL);
}

void sub_216680F7C()
{
  JUMPOUT(0x2166811D4);
}

void sub_216680F84()
{
  JUMPOUT(0x216681110);
}

void sub_216680F8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,char a39)
{
  Phase::Controller::ProfileRegistry::Parameter::~Parameter(a17);

  JUMPOUT(0x216681208);
}

void sub_216680FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  if (!*(_BYTE *)(a17 + 16))
    free(*(void **)(a17 + 8));
  *(_QWORD *)a17 = 0;
  *(_QWORD *)(a17 + 8) = v17;
  *(_BYTE *)(a17 + 16) = 1;
  JUMPOUT(0x2166811F8);
}

void sub_216680FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,_QWORD *a42)
{
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  uint64_t v49;

  if (a42 == v46)
  {
    v49 = 4;
  }
  else
  {
    if (!a42)
    {
LABEL_6:

      a37 = (void **)&a27;
      std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100](&a37);

      JUMPOUT(0x2166811F0);
    }
    v49 = 5;
    v46 = a42;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v49))(v46);
  goto LABEL_6;
}

void sub_216681010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,_QWORD *a42)
{
  _QWORD *v42;
  uint64_t v43;

  if (a42 == v42)
  {
    v43 = 4;
  }
  else
  {
    if (!a42)
      goto LABEL_6;
    v43 = 5;
    v42 = a42;
  }
  (*(void (**)(_QWORD *))(*v42 + 8 * v43))(v42);
LABEL_6:
  JUMPOUT(0x2166810FCLL);
}

void sub_216681068()
{
  JUMPOUT(0x2166810B8);
}

void sub_216681074(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_216681084()
{
  JUMPOUT(0x2166810C8);
}

void sub_21668108C()
{
  JUMPOUT(0x216681100);
}

void sub_216681098()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x216681184);
}

void sub_21668114C()
{
  JUMPOUT(0x216681184);
}

void sub_216681158()
{
  void *v0;

  JUMPOUT(0x216681178);
}

void sub_216681168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{

  JUMPOUT(0x2166811BCLL);
}

void Phase::Controller::ProfileRegistry::Parameter::~Parameter(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (!*((_BYTE *)this + 16))
    free(this[1]);
  *this = 0;
  this[1] = &str_33;
  *((_BYTE *)this + 16) = 1;
}

void Phase::Controller::CategoryFromDictionary(Phase::Controller *this, NSDictionary *a2)
{
  uint64_t v2;
  uint64_t v3;
  NSDictionary *v5;
  NSString *v6;
  NSDictionary *v7;
  __CFString *v8;
  uint64_t v9;
  unint64_t v10;
  NSDictionary *v11;
  NSDictionary *v12;
  __CFString *v13;
  void *v14;
  unint64_t v15;
  NSDictionary *v16;
  NSDictionary *v17;
  __CFString *v18;
  unint64_t v19;
  NSDictionary *v20;
  unint64_t v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  const char *v27;
  unint64_t v28;
  Phase::Logger *v29;
  _QWORD *v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  const char *v51;
  unint64_t v52;
  Phase::Logger *v53;
  _QWORD *v54;
  float v55;
  _BOOL8 v56;
  unint64_t v57;
  unint64_t v58;
  size_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint8x8_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  char *v75;
  unint64_t v76;
  Phase::Logger *v77;
  _QWORD *v78;
  float v79;
  _BOOL8 v80;
  unint64_t v81;
  unint64_t v82;
  size_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t i;
  void *v89;
  void *v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  NSObject *v96;
  std::logic_error *v97;
  NSObject *v98;
  std::logic_error *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  Phase::Logger *v104;
  NSObject *v105;
  uint64_t v106;
  std::logic_error *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  Phase::Logger *v112;
  NSObject *v113;
  uint64_t v114;
  std::logic_error *v115;
  NSObject *v116;
  std::logic_error *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  Phase::Logger *v122;
  NSObject *v123;
  uint64_t v124;
  std::logic_error *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  Phase::Logger *v130;
  NSObject *v131;
  uint64_t v132;
  std::logic_error *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  Phase::Logger *v138;
  NSObject *v139;
  uint64_t v140;
  std::logic_error *exception;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  Phase::Logger *v146;
  NSObject *v147;
  uint64_t v148;
  std::logic_error *v149;
  NSDictionary *v150;
  void **v151;
  NSDictionary *v152;
  unint64_t v153;
  void *v154;
  NSDictionary *v155;
  void *v156;
  unint64_t v157;
  NSDictionary *v158;
  Phase::Controller *v159;
  __int128 v160;
  __int128 v161;
  float v162;
  unint64_t v163;
  char *__s2;
  char v165;
  __int128 __p;
  __int128 v167;
  int v168;
  __int128 v169;
  __int128 v170;
  float v171;
  __int128 v172;
  __int128 v173;
  float v174;
  _BYTE v175[18];
  __int16 v176;
  _BYTE v177[20];
  __int128 v178;
  int v179;
  _BYTE buf[18];
  __int16 v181;
  uint64_t v182;
  _BYTE v183[18];
  __int16 v184;
  _BYTE v185[12];
  uint64_t v186;
  uint64_t v187;

  v187 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = &str_33;
  *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &str_33;
  *((_BYTE *)this + 40) = 1;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  v159 = this;
  v150 = v5;
  Phase::Controller::StringIdFromDictionary((Phase::Controller *)v175, v5, CFSTR("Name"));
  Phase::StringId::operator=((uint64_t)this, (uint64_t)v175);
  if (!v175[16])
    free(*(void **)&v175[8]);
  Phase::Controller::StringIdFromDictionary((Phase::Controller *)v175, v5, CFSTR("Modeler"));
  Phase::StringId::operator=((uint64_t)this + 24, (uint64_t)v175);
  if (!v175[16])
    free(*(void **)&v175[8]);
  v151 = (void **)((char *)this + 56);
  *((double *)this + 6) = Phase::Controller::DoubleFromDictionary((Phase::Controller *)v5, (NSDictionary *)CFSTR("ComputeWeight"), v6);
  v7 = v5;
  v8 = CFSTR("Graphs");
  v152 = v7;
  -[NSDictionary objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", CFSTR("Graphs"));
  v9 = objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    v134 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v135 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v135, "localizedStringForKey:value:table:", CFSTR("[NSDictionary objectForKey] failed for key: %@"), &stru_24D582B00, 0);
    v136 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v134, "stringWithFormat:", v136, CFSTR("Graphs"), v150);
    v137 = (void *)objc_claimAutoreleasedReturnValue();

    v139 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v138)
                                                                                         + 784)));
    if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
    {
      v140 = objc_msgSend(objc_retainAutorelease(v137), "UTF8String");
      *(_DWORD *)v175 = 136315650;
      *(_QWORD *)&v175[4] = "ProfileRegistry.mm";
      *(_WORD *)&v175[12] = 1024;
      *(_DWORD *)&v175[14] = 639;
      v176 = 2080;
      *(_QWORD *)v177 = v140;
      _os_log_impl(&dword_2164CC000, v139, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", v175, 0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s");
    exception->__vftable = (std::logic_error_vtbl *)&off_24D580378;
  }
  objc_opt_class();
  v154 = (void *)v9;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v142 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v143 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v143, "localizedStringForKey:value:table:", CFSTR("[NSObject isKindOfClass:[[NSArray class]]] failed for key: %@"), &stru_24D582B00, 0);
    v144 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v142, "stringWithFormat:", v144, CFSTR("Graphs"), v150);
    v145 = (void *)objc_claimAutoreleasedReturnValue();

    v147 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v146)
                                                                                         + 784)));
    if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
    {
      v148 = objc_msgSend(objc_retainAutorelease(v145), "UTF8String");
      *(_DWORD *)v175 = 136315650;
      *(_QWORD *)&v175[4] = "ProfileRegistry.mm";
      *(_WORD *)&v175[12] = 1024;
      *(_DWORD *)&v175[14] = 646;
      v176 = 2080;
      *(_QWORD *)v177 = v148;
      _os_log_impl(&dword_2164CC000, v147, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", v175, 0x1Cu);
    }

    v149 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v149, "%s");
    v149->__vftable = (std::logic_error_vtbl *)&off_24D5803A0;
  }
  v10 = 0;
  v160 = 0u;
  v161 = 0u;
  v162 = 1.0;
  while (objc_msgSend(v154, "count") > v10)
  {
    v153 = v10;
    objc_msgSend(v154, "objectAtIndexedSubscript:", v10);
    v11 = (NSDictionary *)(id)objc_claimAutoreleasedReturnValue();
    v163 = 0;
    __s2 = (char *)&str_33;
    v165 = 1;
    __p = 0u;
    v167 = 0u;
    v168 = 1065353216;
    Phase::Controller::StringIdFromDictionary((Phase::Controller *)v175, v11, CFSTR("Name"));
    Phase::StringId::operator=((uint64_t)&v163, (uint64_t)v175);
    if (!v175[16])
      free(*(void **)&v175[8]);
    v12 = v11;
    v13 = CFSTR("Stages");
    v155 = v12;
    -[NSDictionary objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", CFSTR("Stages"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v156 = v14;
    if (!v14)
    {
      v118 = (void *)MEMORY[0x24BDD17C8];
      objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
      v119 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v119, "localizedStringForKey:value:table:", CFSTR("[NSDictionary objectForKey] failed for key: %@"), &stru_24D582B00, 0);
      v120 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v118, "stringWithFormat:", v120, CFSTR("Stages"), v150);
      v121 = (void *)objc_claimAutoreleasedReturnValue();

      v123 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v122)
                                                                                           + 784)));
      if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
      {
        v124 = objc_msgSend(objc_retainAutorelease(v121), "UTF8String");
        *(_DWORD *)v175 = 136315650;
        *(_QWORD *)&v175[4] = "ProfileRegistry.mm";
        *(_WORD *)&v175[12] = 1024;
        *(_DWORD *)&v175[14] = 639;
        v176 = 2080;
        *(_QWORD *)v177 = v124;
        _os_log_impl(&dword_2164CC000, v123, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", v175, 0x1Cu);
      }

      v125 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v125, "%s");
      v125->__vftable = (std::logic_error_vtbl *)&off_24D580378;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v126 = (void *)MEMORY[0x24BDD17C8];
      objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
      v127 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v127, "localizedStringForKey:value:table:", CFSTR("[NSObject isKindOfClass:[[NSArray class]]] failed for key: %@"), &stru_24D582B00, 0);
      v128 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v126, "stringWithFormat:", v128, CFSTR("Stages"), v150);
      v129 = (void *)objc_claimAutoreleasedReturnValue();

      v131 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v130)
                                                                                           + 784)));
      if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
      {
        v132 = objc_msgSend(objc_retainAutorelease(v129), "UTF8String");
        *(_DWORD *)v175 = 136315650;
        *(_QWORD *)&v175[4] = "ProfileRegistry.mm";
        *(_WORD *)&v175[12] = 1024;
        *(_DWORD *)&v175[14] = 646;
        v176 = 2080;
        *(_QWORD *)v177 = v132;
        _os_log_impl(&dword_2164CC000, v131, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", v175, 0x1Cu);
      }

      v133 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v133, "%s");
      v133->__vftable = (std::logic_error_vtbl *)&off_24D5803A0;
    }
    v15 = 0;
    v169 = 0u;
    v170 = 0u;
    v171 = 1.0;
    while (objc_msgSend(v14, "count") > v15)
    {
      objc_msgSend(v14, "objectAtIndexedSubscript:", v15);
      v16 = (NSDictionary *)(id)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)v175 = 0;
      *(_QWORD *)&v175[8] = &str_33;
      v175[16] = 1;
      *(_OWORD *)&v177[4] = 0u;
      v178 = 0u;
      v179 = 1065353216;
      Phase::Controller::StringIdFromDictionary((Phase::Controller *)v183, v16, CFSTR("Name"));
      Phase::StringId::operator=((uint64_t)v175, (uint64_t)v183);
      v157 = v15;
      if (!v183[16])
        free(*(void **)&v183[8]);
      v17 = v16;
      v18 = CFSTR("Parameters");
      v158 = v17;
      -[NSDictionary objectForKeyedSubscript:](v17, "objectForKeyedSubscript:", CFSTR("Parameters"));
      v2 = objc_claimAutoreleasedReturnValue();
      if (!v2)
      {
        v108 = (void *)MEMORY[0x24BDD17C8];
        objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v109, "localizedStringForKey:value:table:", CFSTR("[NSDictionary objectForKey] failed for key: %@"), &stru_24D582B00, 0);
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v108, "stringWithFormat:", v110, CFSTR("Parameters"), v150);
        v111 = (void *)objc_claimAutoreleasedReturnValue();

        v113 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v112)
                                                                                             + 784)));
        if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
        {
          v114 = objc_msgSend(objc_retainAutorelease(v111), "UTF8String");
          *(_DWORD *)v183 = 136315650;
          *(_QWORD *)&v183[4] = "ProfileRegistry.mm";
          *(_WORD *)&v183[12] = 1024;
          *(_DWORD *)&v183[14] = 639;
          v184 = 2080;
          *(_QWORD *)v185 = v114;
          _os_log_impl(&dword_2164CC000, v113, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", v183, 0x1Cu);
        }

        v115 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v115, "%s");
        v115->__vftable = (std::logic_error_vtbl *)&off_24D580378;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v100 = (void *)MEMORY[0x24BDD17C8];
        objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
        v101 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v101, "localizedStringForKey:value:table:", CFSTR("[NSObject isKindOfClass:[[NSArray class]]] failed for key: %@"), &stru_24D582B00, 0);
        v102 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v100, "stringWithFormat:", v102, CFSTR("Parameters"), v150);
        v103 = (void *)objc_claimAutoreleasedReturnValue();

        v105 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v104)
                                                                                             + 784)));
        if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
        {
          v106 = objc_msgSend(objc_retainAutorelease(v103), "UTF8String");
          *(_DWORD *)v183 = 136315650;
          *(_QWORD *)&v183[4] = "ProfileRegistry.mm";
          *(_WORD *)&v183[12] = 1024;
          *(_DWORD *)&v183[14] = 646;
          v184 = 2080;
          *(_QWORD *)v185 = v106;
          _os_log_impl(&dword_2164CC000, v105, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", v183, 0x1Cu);
        }

        v107 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v107, "%s");
        v107->__vftable = (std::logic_error_vtbl *)&off_24D5803A0;
      }
      v19 = 0;
      v172 = 0u;
      v173 = 0u;
      v174 = 1.0;
      while (objc_msgSend((id)v2, "count") > v19)
      {
        objc_msgSend((id)v2, "objectAtIndexedSubscript:", v19);
        v20 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
        Phase::Controller::ParameterFromDictionary((Phase::Controller *)v183, v20);

        v21 = *(_QWORD *)v183;
        v22 = *((_QWORD *)&v172 + 1);
        if (*((_QWORD *)&v172 + 1))
        {
          v23 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v172 + 8));
          v23.i16[0] = vaddlv_u8(v23);
          v24 = v23.u32[0];
          if (v23.u32[0] > 1uLL)
          {
            v3 = *(_QWORD *)v183;
            if (*((_QWORD *)&v172 + 1) <= *(_QWORD *)v183)
              v3 = *(_QWORD *)v183 % *((_QWORD *)&v172 + 1);
          }
          else
          {
            v3 = (*((_QWORD *)&v172 + 1) - 1) & *(_QWORD *)v183;
          }
          v25 = *(_QWORD **)(v172 + 8 * v3);
          if (v25)
          {
            v26 = (_QWORD *)*v25;
            if (*v25)
            {
              v27 = *(const char **)&v183[8];
              while (1)
              {
                v28 = v26[1];
                if (v28 == v21)
                {
                  if (v26[2] == v21)
                  {
                    v29 = (Phase::Logger *)v26[3];
                    if (v29 == (Phase::Logger *)v27
                      || (v29 = (Phase::Logger *)strcmp((const char *)v29, v27), !(_DWORD)v29))
                    {
                      v96 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v29) + 784));
                      if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 136315650;
                        *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 656;
                        v181 = 2080;
                        v182 = *(_QWORD *)&v183[8];
                        _os_log_impl(&dword_2164CC000, v96, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::DuplicateEntry) [!pair.second is true]: \"Entry with name %s already exists\"", buf, 0x1Cu);
                      }

                      v97 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                      std::logic_error::logic_error(v97, "Entry with name %s already exists");
                      v97->__vftable = (std::logic_error_vtbl *)&off_24D5805C8;
                    }
                  }
                }
                else
                {
                  if (v24 > 1)
                  {
                    if (v28 >= v22)
                      v28 %= v22;
                  }
                  else
                  {
                    v28 &= v22 - 1;
                  }
                  if (v28 != v3)
                  {
LABEL_40:
                    this = v159;
                    break;
                  }
                }
                v26 = (_QWORD *)*v26;
                if (!v26)
                  goto LABEL_40;
              }
            }
          }
        }
        v30 = operator new(0x58uLL);
        *(_QWORD *)buf = v30;
        *(_QWORD *)&buf[8] = &v173;
        buf[16] = 0;
        *v30 = 0;
        v30[1] = v21;
        Phase::StringId::StringId((uint64_t)(v30 + 2), (uint64_t)v183);
        Phase::StringId::StringId((uint64_t)(v30 + 5), (uint64_t)v183);
        v30[8] = 0;
        v30[9] = 0;
        v30[10] = 0;
        std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__init_with_size[abi:ne180100]<Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(v30 + 8, *(uint64_t *)&v185[4], v186, (v186 - *(_QWORD *)&v185[4]) >> 6);
        buf[16] = 1;
        v31 = (float)(unint64_t)(*((_QWORD *)&v173 + 1) + 1);
        if (!v22 || (float)(v174 * (float)v22) < v31)
        {
          v32 = (v22 & (v22 - 1)) != 0;
          if (v22 < 3)
            v32 = 1;
          v33 = v32 | (2 * v22);
          v34 = vcvtps_u32_f32(v31 / v174);
          if (v33 <= v34)
            v35 = v34;
          else
            v35 = v33;
          std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)&v172, v35);
          v22 = *((_QWORD *)&v172 + 1);
          if ((*((_QWORD *)&v172 + 1) & (*((_QWORD *)&v172 + 1) - 1)) != 0)
          {
            if (*((_QWORD *)&v172 + 1) <= v21)
              v3 = v21 % *((_QWORD *)&v172 + 1);
            else
              v3 = v21;
          }
          else
          {
            v3 = (*((_QWORD *)&v172 + 1) - 1) & v21;
          }
        }
        v36 = v172;
        v37 = *(_QWORD **)(v172 + 8 * v3);
        if (v37)
        {
          *v30 = *v37;
        }
        else
        {
          *v30 = v173;
          *(_QWORD *)&v173 = v30;
          *(_QWORD *)(v36 + 8 * v3) = &v173;
          if (!*v30)
            goto LABEL_62;
          v38 = *(_QWORD *)(*v30 + 8);
          if ((v22 & (v22 - 1)) != 0)
          {
            if (v38 >= v22)
              v38 %= v22;
          }
          else
          {
            v38 &= v22 - 1;
          }
          v37 = (_QWORD *)(v172 + 8 * v38);
        }
        *v37 = v30;
LABEL_62:
        *(_QWORD *)buf = 0;
        ++*((_QWORD *)&v173 + 1);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
        *(_QWORD *)buf = &v185[4];
        std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if (!v183[16])
          free(*(void **)&v183[8]);
        ++v19;
      }

      if (*((_QWORD *)&v178 + 1))
      {
        std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::__deallocate_node((uint64_t)&v177[4], (_QWORD *)v178);
        *(_QWORD *)&v178 = 0;
        v39 = *(_QWORD *)&v177[12];
        if (*(_QWORD *)&v177[12])
        {
          v40 = 0;
          do
            *(_QWORD *)(*(_QWORD *)&v177[4] + 8 * v40++) = 0;
          while (v39 != v40);
        }
        *((_QWORD *)&v178 + 1) = 0;
      }
      v41 = v172;
      *(_QWORD *)&v172 = 0;
      v42 = *(void **)&v177[4];
      *(_QWORD *)&v177[4] = v41;
      if (v42)
        operator delete(v42);
      v43 = *((_QWORD *)&v172 + 1);
      *((_QWORD *)&v172 + 1) = 0;
      v178 = v173;
      v179 = LODWORD(v174);
      *(_QWORD *)&v177[12] = v43;
      if (*((_QWORD *)&v173 + 1))
      {
        v44 = *(_QWORD *)(v173 + 8);
        if ((v43 & (v43 - 1)) != 0)
        {
          if (v44 >= v43)
            v44 %= v43;
        }
        else
        {
          v44 &= v43 - 1;
        }
        *(_QWORD *)(*(_QWORD *)&v177[4] + 8 * v44) = &v178;
        v173 = 0uLL;
      }
      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::~__hash_table((uint64_t)&v172);

      v45 = *(_QWORD *)v175;
      v46 = *((_QWORD *)&v169 + 1);
      if (*((_QWORD *)&v169 + 1))
      {
        v47 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v169 + 8));
        v47.i16[0] = vaddlv_u8(v47);
        v48 = v47.u32[0];
        if (v47.u32[0] > 1uLL)
        {
          v2 = *(_QWORD *)v175;
          if (*((_QWORD *)&v169 + 1) <= *(_QWORD *)v175)
            v2 = *(_QWORD *)v175 % *((_QWORD *)&v169 + 1);
        }
        else
        {
          v2 = (*((_QWORD *)&v169 + 1) - 1) & *(_QWORD *)v175;
        }
        v49 = *(_QWORD **)(v169 + 8 * v2);
        if (v49)
        {
          v50 = (_QWORD *)*v49;
          if (*v49)
          {
            v51 = *(const char **)&v175[8];
            v3 = *((_QWORD *)&v169 + 1) - 1;
            do
            {
              v52 = v50[1];
              if (v52 == v45)
              {
                if (v50[2] == v45)
                {
                  v53 = (Phase::Logger *)v50[3];
                  if (v53 == (Phase::Logger *)v51
                    || (v53 = (Phase::Logger *)strcmp((const char *)v53, v51), !(_DWORD)v53))
                  {
                    v98 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v53) + 784));
                    if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v183 = 136315650;
                      *(_QWORD *)&v183[4] = "ProfileRegistry.mm";
                      *(_WORD *)&v183[12] = 1024;
                      *(_DWORD *)&v183[14] = 656;
                      v184 = 2080;
                      *(_QWORD *)v185 = *(_QWORD *)&v175[8];
                      _os_log_impl(&dword_2164CC000, v98, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::DuplicateEntry) [!pair.second is true]: \"Entry with name %s already exists\"", v183, 0x1Cu);
                    }

                    v99 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    std::logic_error::logic_error(v99, "Entry with name %s already exists");
                    v99->__vftable = (std::logic_error_vtbl *)&off_24D5805C8;
                  }
                }
              }
              else
              {
                if (v48 > 1)
                {
                  if (v52 >= v46)
                    v52 %= v46;
                }
                else
                {
                  v52 &= v3;
                }
                if (v52 != v2)
                  break;
              }
              v50 = (_QWORD *)*v50;
            }
            while (v50);
          }
        }
      }
      v54 = operator new(0x68uLL);
      *v54 = 0;
      v54[1] = v45;
      Phase::StringId::StringId((uint64_t)(v54 + 2), (uint64_t)v175);
      Phase::StringId::StringId((uint64_t)(v54 + 5), (uint64_t)v175);
      v14 = v156;
      std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>::unordered_map((uint64_t)(v54 + 8), (uint64_t)&v177[4]);
      v55 = (float)(unint64_t)(*((_QWORD *)&v170 + 1) + 1);
      if (!v46 || (float)(v171 * (float)v46) < v55)
      {
        v56 = (v46 & (v46 - 1)) != 0;
        if (v46 < 3)
          v56 = 1;
        v57 = v56 | (2 * v46);
        v58 = vcvtps_u32_f32(v55 / v171);
        if (v57 <= v58)
          v59 = v58;
        else
          v59 = v57;
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)&v169, v59);
        v46 = *((_QWORD *)&v169 + 1);
        if ((*((_QWORD *)&v169 + 1) & (*((_QWORD *)&v169 + 1) - 1)) != 0)
        {
          if (*((_QWORD *)&v169 + 1) <= v45)
            v2 = v45 % *((_QWORD *)&v169 + 1);
          else
            v2 = v45;
        }
        else
        {
          v2 = (*((_QWORD *)&v169 + 1) - 1) & v45;
        }
      }
      v60 = v169;
      v61 = *(_QWORD **)(v169 + 8 * v2);
      if (v61)
      {
        *v54 = *v61;
        goto LABEL_117;
      }
      *v54 = v170;
      *(_QWORD *)&v170 = v54;
      *(_QWORD *)(v60 + 8 * v2) = &v170;
      if (*v54)
      {
        v62 = *(_QWORD *)(*v54 + 8);
        if ((v46 & (v46 - 1)) != 0)
        {
          if (v62 >= v46)
            v62 %= v46;
        }
        else
        {
          v62 &= v46 - 1;
        }
        v61 = (_QWORD *)(v169 + 8 * v62);
LABEL_117:
        *v61 = v54;
      }
      ++*((_QWORD *)&v170 + 1);
      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::~__hash_table((uint64_t)&v177[4]);
      if (!v175[16])
        free(*(void **)&v175[8]);
      v15 = v157 + 1;
    }

    if (*((_QWORD *)&v167 + 1))
    {
      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::__deallocate_node((uint64_t)&__p, (void **)v167);
      *(_QWORD *)&v167 = 0;
      v63 = *((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v64 = 0;
        do
          *(_QWORD *)(__p + 8 * v64++) = 0;
        while (v63 != v64);
      }
      *((_QWORD *)&v167 + 1) = 0;
    }
    v65 = v169;
    *(_QWORD *)&v169 = 0;
    v66 = (void *)__p;
    *(_QWORD *)&__p = v65;
    if (v66)
      operator delete(v66);
    v67 = *((_QWORD *)&v169 + 1);
    *((_QWORD *)&v169 + 1) = 0;
    v167 = v170;
    v168 = LODWORD(v171);
    *((_QWORD *)&__p + 1) = v67;
    if (*((_QWORD *)&v170 + 1))
    {
      v68 = *(_QWORD *)(v170 + 8);
      if ((v67 & (v67 - 1)) != 0)
      {
        if (v68 >= v67)
          v68 %= v67;
      }
      else
      {
        v68 &= v67 - 1;
      }
      *(_QWORD *)(__p + 8 * v68) = &v167;
      v170 = 0uLL;
    }
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::~__hash_table((uint64_t)&v169);

    v69 = v163;
    v70 = *((_QWORD *)&v160 + 1);
    if (*((_QWORD *)&v160 + 1))
    {
      v71 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v160 + 8));
      v71.i16[0] = vaddlv_u8(v71);
      v72 = v71.u32[0];
      if (v71.u32[0] > 1uLL)
      {
        v2 = v163;
        if (*((_QWORD *)&v160 + 1) <= v163)
          v2 = v163 % *((_QWORD *)&v160 + 1);
      }
      else
      {
        v2 = (*((_QWORD *)&v160 + 1) - 1) & v163;
      }
      v73 = *(_QWORD **)(v160 + 8 * v2);
      if (v73)
      {
        v74 = (_QWORD *)*v73;
        if (*v73)
        {
          v75 = __s2;
          v3 = *((_QWORD *)&v160 + 1) - 1;
          do
          {
            v76 = v74[1];
            if (v76 == v69)
            {
              if (v74[2] == v69)
              {
                v77 = (Phase::Logger *)v74[3];
                if (v77 == (Phase::Logger *)v75
                  || (v77 = (Phase::Logger *)strcmp((const char *)v77, v75), !(_DWORD)v77))
                {
                  v116 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v77) + 784));
                  if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v175 = 136315650;
                    *(_QWORD *)&v175[4] = "ProfileRegistry.mm";
                    *(_WORD *)&v175[12] = 1024;
                    *(_DWORD *)&v175[14] = 656;
                    v176 = 2080;
                    *(_QWORD *)v177 = __s2;
                    _os_log_impl(&dword_2164CC000, v116, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::DuplicateEntry) [!pair.second is true]: \"Entry with name %s already exists\"", v175, 0x1Cu);
                  }

                  v117 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v117, "Entry with name %s already exists");
                  v117->__vftable = (std::logic_error_vtbl *)&off_24D5805C8;
                }
              }
            }
            else
            {
              if (v72 > 1)
              {
                if (v76 >= v70)
                  v76 %= v70;
              }
              else
              {
                v76 &= v3;
              }
              if (v76 != v2)
                break;
            }
            v74 = (_QWORD *)*v74;
          }
          while (v74);
        }
      }
    }
    v78 = operator new(0x68uLL);
    *v78 = 0;
    v78[1] = v69;
    Phase::StringId::StringId((uint64_t)(v78 + 2), (uint64_t)&v163);
    Phase::StringId::StringId((uint64_t)(v78 + 5), (uint64_t)&v163);
    std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>::unordered_map((uint64_t)(v78 + 8), (uint64_t)&__p);
    v79 = (float)(unint64_t)(*((_QWORD *)&v161 + 1) + 1);
    if (!v70 || (float)(v162 * (float)v70) < v79)
    {
      v80 = (v70 & (v70 - 1)) != 0;
      if (v70 < 3)
        v80 = 1;
      v81 = v80 | (2 * v70);
      v82 = vcvtps_u32_f32(v79 / v162);
      if (v81 <= v82)
        v83 = v82;
      else
        v83 = v81;
      std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)&v160, v83);
      v70 = *((_QWORD *)&v160 + 1);
      if ((*((_QWORD *)&v160 + 1) & (*((_QWORD *)&v160 + 1) - 1)) != 0)
      {
        if (*((_QWORD *)&v160 + 1) <= v69)
          v2 = v69 % *((_QWORD *)&v160 + 1);
        else
          v2 = v69;
      }
      else
      {
        v2 = (*((_QWORD *)&v160 + 1) - 1) & v69;
      }
    }
    v84 = v160;
    v85 = *(_QWORD **)(v160 + 8 * v2);
    if (v85)
    {
      *v78 = *v85;
      goto LABEL_173;
    }
    *v78 = v161;
    *(_QWORD *)&v161 = v78;
    *(_QWORD *)(v84 + 8 * v2) = &v161;
    if (*v78)
    {
      v86 = *(_QWORD *)(*v78 + 8);
      if ((v70 & (v70 - 1)) != 0)
      {
        if (v86 >= v70)
          v86 %= v70;
      }
      else
      {
        v86 &= v70 - 1;
      }
      v85 = (_QWORD *)(v160 + 8 * v86);
LABEL_173:
      *v85 = v78;
    }
    ++*((_QWORD *)&v161 + 1);
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::~__hash_table((uint64_t)&__p);
    if (!v165)
      free(__s2);
    v10 = v153 + 1;
  }

  if (*((_QWORD *)this + 10))
  {
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>>>::__deallocate_node((uint64_t)v151, *((void ***)this + 9));
    *((_QWORD *)this + 9) = 0;
    v87 = *((_QWORD *)this + 8);
    if (v87)
    {
      for (i = 0; i != v87; ++i)
        *((_QWORD *)*v151 + i) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  v89 = (void *)v160;
  *(_QWORD *)&v160 = 0;
  v90 = *v151;
  *v151 = v89;
  if (v90)
    operator delete(v90);
  v91 = *((_QWORD *)&v160 + 1);
  v92 = v161;
  *((_QWORD *)this + 9) = v161;
  v93 = (char *)this + 72;
  *((_QWORD *)v93 - 1) = v91;
  *((_QWORD *)&v160 + 1) = 0;
  v94 = *((_QWORD *)&v161 + 1);
  *((_QWORD *)v93 + 1) = *((_QWORD *)&v161 + 1);
  *((float *)v93 + 4) = v162;
  if (v94)
  {
    v95 = *(_QWORD *)(v92 + 8);
    if ((v91 & (v91 - 1)) != 0)
    {
      if (v95 >= v91)
        v95 %= v91;
    }
    else
    {
      v95 &= v91 - 1;
    }
    *((_QWORD *)*v151 + v95) = v93;
    v161 = 0uLL;
  }
  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>>>::~__hash_table((uint64_t)&v160);

}

void sub_21668291C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  void *v54;
  void *v55;

  Phase::Controller::ProfileRegistry::Category::~Category(a27);
  _Unwind_Resume(a1);
}

void Phase::Controller::ProfileRegistry::Category::~Category(void **this)
{
  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>>>::~__hash_table((uint64_t)(this + 7));
  if (!*((_BYTE *)this + 40))
    free(this[4]);
  this[3] = 0;
  this[4] = &str_33;
  *((_BYTE *)this + 40) = 1;
  if (!*((_BYTE *)this + 16))
    free(this[1]);
  *this = 0;
  this[1] = &str_33;
  *((_BYTE *)this + 16) = 1;
}

void Phase::Controller::ProfileRegistry::AddFromJSONFile(Phase::Controller::ProfileRegistry *this, NSURL *a2, Phase::Controller::SpatialModelerRegistry *a3)
{
  _QWORD *v3;
  NSURL *v6;
  uint64_t v7;
  id v8;
  uint64_t isKindOfClass;
  NSObject *v10;
  id v11;
  uint64_t v12;
  id v13;
  __CFString *v14;
  void *v15;
  unint64_t v16;
  NSDictionary *v17;
  NSString *v18;
  Phase::Controller *v19;
  __CFString *v20;
  unint64_t v21;
  uint64_t v22;
  NSString *v23;
  Phase::Controller *v24;
  __CFString *v25;
  void *v26;
  unint64_t v27;
  NSDictionary *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  const char *v34;
  unint64_t v35;
  Phase::Logger *v36;
  _QWORD *v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint8x8_t v54;
  unint64_t v55;
  _QWORD *v56;
  char *v57;
  unint64_t v58;
  Phase::Logger *v59;
  _QWORD *v60;
  float v61;
  _BOOL8 v62;
  unint64_t v63;
  unint64_t v64;
  size_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Phase::Logger *v71;
  const Phase::StringId *v72;
  unint64_t v73;
  Phase::Logger *SpatialCategoryFromStringId;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  void **v83;
  void **v84;
  void **v85;
  _QWORD *i;
  Phase::Logger *SpatialModelerGraphFromStringId;
  _QWORD *v88;
  Phase::Logger *SpatialModelerStageFromStringId;
  _QWORD *v90;
  Phase::Logger *SpatialModelerParameterFromStringId;
  int v92;
  double v93;
  double v94;
  double *v96;
  double *v97;
  _QWORD *v98;
  Phase::Logger *v99;
  double v100;
  double v101;
  double v102;
  Phase::Controller::SpatialModelerRegistry *v103;
  _QWORD *v104;
  char *v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  size_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t *v115;
  double *v116;
  double v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  const char *v130;
  unint64_t v131;
  unint64_t v132;
  uint8x8_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  char *v137;
  unint64_t v138;
  const char *v139;
  _QWORD *v140;
  Phase::Logger *v141;
  float v142;
  float v143;
  _BOOL8 v144;
  unint64_t v145;
  unint64_t v146;
  size_t v147;
  uint64_t v148;
  _QWORD *v149;
  unint64_t v150;
  NSObject *v151;
  Phase::Logger *v152;
  uint64_t v153;
  uint64_t j;
  NSObject *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void **v161;
  std::logic_error *v162;
  NSObject *v163;
  uint64_t v164;
  uint64_t v165;
  std::logic_error *v166;
  NSObject *v167;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  std::logic_error *v173;
  NSObject *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  std::logic_error *v179;
  NSObject *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  std::logic_error *v187;
  NSObject *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  NSObject *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  NSObject *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  NSObject *v209;
  std::logic_error *v210;
  NSObject *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  std::logic_error *v215;
  NSObject *v216;
  uint64_t v217;
  uint64_t v218;
  std::logic_error *v219;
  NSObject *v220;
  std::logic_error *v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  Phase::Logger *v226;
  NSObject *v227;
  uint64_t v228;
  std::logic_error *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  Phase::Logger *v234;
  NSObject *v235;
  uint64_t v236;
  std::logic_error *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  Phase::Logger *v242;
  NSObject *v243;
  uint64_t v244;
  std::logic_error *v245;
  void *v246;
  void *v247;
  void *v248;
  void *v249;
  Phase::Logger *v250;
  NSObject *v251;
  uint64_t v252;
  std::logic_error *v253;
  NSObject *v254;
  uint64_t v255;
  std::logic_error *v256;
  NSObject *v257;
  const char *v258;
  const char *v259;
  Phase::Logger *v260;
  NSObject *v261;
  _BOOL8 v262;
  _BYTE *v263;
  NSObject *v264;
  std::logic_error *v265;
  NSObject *v266;
  std::logic_error *v267;
  NSObject *v268;
  NSObject *v269;
  void (__cdecl *v270)(std::logic_error *__hidden);
  struct type_info *v271;
  void *v272;
  void *v273;
  void *v274;
  void *v275;
  Phase::Logger *v276;
  NSObject *v277;
  std::logic_error *exception;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  Phase::Logger *v285;
  NSObject *v286;
  uint64_t v287;
  std::logic_error *v288;
  void *v289;
  void *v290;
  void *v291;
  void *v292;
  void *v293;
  void *v294;
  Phase::Logger *v295;
  NSObject *v296;
  uint64_t v297;
  std::logic_error *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  void *v303;
  Phase::Logger *v304;
  NSObject *v305;
  uint64_t v306;
  std::logic_error *v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  Phase::Logger *v312;
  NSObject *v313;
  uint64_t v314;
  std::logic_error *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  Phase::Logger *v320;
  NSObject *v321;
  uint64_t v322;
  std::logic_error *v323;
  NSObject *v324;
  uint64_t v325;
  std::logic_error *v326;
  void *v327;
  NSURL *v328;
  id v329;
  void *v330;
  Phase::Controller::ProfileRegistry *v331;
  void *v332;
  _QWORD *v333;
  void *v334;
  unint64_t v335;
  Phase::Controller *v336;
  Phase::Controller *v337;
  Phase::Controller *v338;
  void *v339;
  _QWORD *v340;
  _QWORD *v341;
  _QWORD *v342;
  unint64_t v343;
  char *__s2;
  char v345;
  __int128 v346;
  double v347;
  __int128 __p;
  __int128 v349;
  int v350;
  _QWORD *v351;
  __int128 v352;
  __int128 v353;
  float v354;
  id v355;
  id v356;
  void *v357;
  char v358;
  _BYTE v359[38];
  __int16 v360;
  uint64_t v361;
  __int16 v362;
  uint64_t v363;
  __int16 v364;
  uint64_t v365;
  __int16 v366;
  unint64_t v367;
  __int16 v368;
  void **v369;
  _BYTE buf[18];
  __int16 v371;
  _BYTE v372[20];
  uint64_t v373;
  _BYTE v374[10];
  __int16 v375;
  uint64_t v376;
  __int16 v377;
  double v378;
  __int16 v379;
  double v380;
  __int16 v381;
  uint64_t v382;
  __int16 v383;
  uint64_t v384;
  uint8_t v385[40];
  uint64_t v386;

  v386 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v328 = v6;
  if (!v6)
  {
    v272 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v273 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v273, "localizedStringForKey:value:table:", CFSTR("inFileURL is nil"), &stru_24D582B00, 0);
    v274 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v272, "stringWithFormat:", v274);
    v275 = (void *)objc_claimAutoreleasedReturnValue();

    v277 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v276)
                                                                                         + 784)));
    if (os_log_type_enabled(v277, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 667;
      v371 = 2080;
      *(_QWORD *)v372 = objc_msgSend(objc_retainAutorelease(v275), "UTF8String");
      _os_log_impl(&dword_2164CC000, v277, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::NilURL): \"%s\"", buf, 0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s");
    exception->__vftable = (std::logic_error_vtbl *)&off_24D580490;
  }
  v331 = this;
  v356 = 0;
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfURL:options:error:", v6, 2, &v356);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v356;
  v327 = (void *)v7;
  if (!v7)
  {
    v279 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v280 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v280, "localizedStringForKey:value:table:", CFSTR("[NSData dataWithContentsOfUrl] failed to read file %@ with error: %@"), &stru_24D582B00, 0);
    v281 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSURL resourceSpecifier](v328, "resourceSpecifier");
    v282 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "localizedDescription");
    v283 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v279, "stringWithFormat:", v281, v282, v283);
    v284 = (void *)objc_claimAutoreleasedReturnValue();

    v286 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v285)
                                                                                         + 784)));
    if (os_log_type_enabled(v286, OS_LOG_TYPE_ERROR))
    {
      v287 = objc_msgSend(objc_retainAutorelease(v284), "UTF8String");
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 677;
      v371 = 2080;
      *(_QWORD *)v372 = v287;
      _os_log_impl(&dword_2164CC000, v286, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::InvalidURL): \"%s\"", buf, 0x1Cu);
    }

    v288 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v288, "%s");
    v288->__vftable = (std::logic_error_vtbl *)&off_24D5804B8;
  }
  v355 = v8;
  objc_msgSend(MEMORY[0x24BDD1608], "JSONObjectWithData:options:error:", v7, 0, &v355);
  v332 = (void *)objc_claimAutoreleasedReturnValue();
  v329 = v355;

  if (!v332 || v329)
  {
    v289 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v290 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v290, "localizedStringForKey:value:table:", CFSTR("[NSJSONSerialization JSONObjectWithData] failed to parse data %@ with error: %@"), &stru_24D582B00, 0);
    v291 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v327, "description");
    v292 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v329, "localizedDescription");
    v293 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v289, "stringWithFormat:", v291, v292, v293);
    v294 = (void *)objc_claimAutoreleasedReturnValue();

    v296 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v295)
                                                                                         + 784)));
    if (os_log_type_enabled(v296, OS_LOG_TYPE_ERROR))
    {
      v297 = objc_msgSend(objc_retainAutorelease(v294), "UTF8String");
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 686;
      v371 = 2080;
      *(_QWORD *)v372 = v297;
      _os_log_impl(&dword_2164CC000, v296, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::InvalidJSON): \"%s\"", buf, 0x1Cu);
    }

    v298 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v298, "%s");
    v298->__vftable = (std::logic_error_vtbl *)&off_24D5804E0;
  }
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) == 0)
  {
    v299 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v300 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v300, "localizedStringForKey:value:table:", CFSTR("[NSObject isKindOfClass:[[NSDictionary class]]] failed for jsonObject: %@"), &stru_24D582B00, 0);
    v301 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v332, "description");
    v302 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v299, "stringWithFormat:", v301, v302);
    v303 = (void *)objc_claimAutoreleasedReturnValue();

    v305 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v304)
                                                                                         + 784)));
    if (os_log_type_enabled(v305, OS_LOG_TYPE_ERROR))
    {
      v306 = objc_msgSend(objc_retainAutorelease(v303), "UTF8String");
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 694;
      v371 = 2080;
      *(_QWORD *)v372 = v306;
      _os_log_impl(&dword_2164CC000, v305, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", buf, 0x1Cu);
    }

    v307 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v307, "%s");
    v307->__vftable = (std::logic_error_vtbl *)&off_24D5803A0;
  }
  v10 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)isKindOfClass)
                                                                                      + 784)));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    -[NSURL absoluteString](v328, "absoluteString");
    v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v12 = objc_msgSend(v11, "UTF8String");
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 698;
    v371 = 2048;
    *(_QWORD *)v372 = v331;
    *(_WORD *)&v372[8] = 2080;
    *(_QWORD *)&v372[10] = v12;
    _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d profileregistry@%p: Loading profiles from file '%s'.", buf, 0x26u);

  }
  v13 = v332;
  v14 = CFSTR("Profiles");
  v330 = v13;
  objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("Profiles"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v334 = v15;
  if (!v15)
  {
    v308 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v309 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v309, "localizedStringForKey:value:table:", CFSTR("[NSDictionary objectForKey] failed for key: %@"), &stru_24D582B00, 0);
    v310 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v308, "stringWithFormat:", v310, CFSTR("Profiles"));
    v311 = (void *)objc_claimAutoreleasedReturnValue();

    v313 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v312)
                                                                                         + 784)));
    if (os_log_type_enabled(v313, OS_LOG_TYPE_ERROR))
    {
      v314 = objc_msgSend(objc_retainAutorelease(v311), "UTF8String");
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 639;
      v371 = 2080;
      *(_QWORD *)v372 = v314;
      _os_log_impl(&dword_2164CC000, v313, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", buf, 0x1Cu);
    }

    v315 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v315, "%s");
    v315->__vftable = (std::logic_error_vtbl *)&off_24D580378;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v316 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v317 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v317, "localizedStringForKey:value:table:", CFSTR("[NSObject isKindOfClass:[[NSArray class]]] failed for key: %@"), &stru_24D582B00, 0);
    v318 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v316, "stringWithFormat:", v318, CFSTR("Profiles"));
    v319 = (void *)objc_claimAutoreleasedReturnValue();

    v321 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v320)
                                                                                         + 784)));
    if (os_log_type_enabled(v321, OS_LOG_TYPE_ERROR))
    {
      v322 = objc_msgSend(objc_retainAutorelease(v319), "UTF8String");
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 646;
      v371 = 2080;
      *(_QWORD *)v372 = v322;
      _os_log_impl(&dword_2164CC000, v321, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", buf, 0x1Cu);
    }

    v323 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v323, "%s");
    v323->__vftable = (std::logic_error_vtbl *)&off_24D5803A0;
  }
  v16 = 0;
  v352 = 0u;
  v353 = 0u;
  v354 = 1.0;
  while (objc_msgSend(v15, "count") > v16)
  {
    objc_msgSend(v15, "objectAtIndexedSubscript:", v16);
    v17 = (NSDictionary *)(id)objc_claimAutoreleasedReturnValue();
    v343 = 0;
    __s2 = (char *)&str_33;
    v345 = 1;
    *(_QWORD *)&v346 = 0;
    *((_QWORD *)&v346 + 1) = 10;
    v347 = 0.2;
    __p = 0u;
    v349 = 0u;
    v350 = 1065353216;
    v336 = (Phase::Controller *)v17;
    Phase::Controller::StringIdFromDictionary((Phase::Controller *)buf, v17, CFSTR("Name"));
    Phase::StringId::operator=((uint64_t)&v343, (uint64_t)buf);
    v335 = v16;
    if (!buf[16])
      free(*(void **)&buf[8]);
    *(_QWORD *)&v346 = Phase::Controller::DoubleFromDictionary(v336, (NSDictionary *)CFSTR("ComputeTime"), v18);
    v19 = v336;
    v20 = CFSTR("OverflowDetectionHistoryLength");
    -[Phase::Controller objectForKeyedSubscript:](v19, "objectForKeyedSubscript:", CFSTR("OverflowDetectionHistoryLength"));
    v21 = objc_claimAutoreleasedReturnValue();
    if (!v21)
    {
      v230 = (void *)MEMORY[0x24BDD17C8];
      objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
      v231 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v231, "localizedStringForKey:value:table:", CFSTR("[NSDictionary objectForKey] failed for key: %@"), &stru_24D582B00, 0);
      v232 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v230, "stringWithFormat:", v232, CFSTR("OverflowDetectionHistoryLength"));
      v233 = (void *)objc_claimAutoreleasedReturnValue();

      v235 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v234)
                                                                                           + 784)));
      if (os_log_type_enabled(v235, OS_LOG_TYPE_ERROR))
      {
        v236 = objc_msgSend(objc_retainAutorelease(v233), "UTF8String");
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 257;
        v371 = 2080;
        *(_QWORD *)v372 = v236;
        _os_log_impl(&dword_2164CC000, v235, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", buf, 0x1Cu);
      }

      v237 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v237, "%s");
      v237->__vftable = (std::logic_error_vtbl *)&off_24D580378;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v222 = (void *)MEMORY[0x24BDD17C8];
      objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
      v223 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v223, "localizedStringForKey:value:table:", CFSTR("[NSObject isKindOfClass:[[NSNumber class]]] failed for key: %@"), &stru_24D582B00, 0);
      v224 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v222, "stringWithFormat:", v224, CFSTR("OverflowDetectionHistoryLength"));
      v225 = (void *)objc_claimAutoreleasedReturnValue();

      v227 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v226)
                                                                                           + 784)));
      if (os_log_type_enabled(v227, OS_LOG_TYPE_ERROR))
      {
        v228 = objc_msgSend(objc_retainAutorelease(v225), "UTF8String");
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 264;
        v371 = 2080;
        *(_QWORD *)v372 = v228;
        _os_log_impl(&dword_2164CC000, v227, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", buf, 0x1Cu);
      }

      v229 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v229, "%s");
      v229->__vftable = (std::logic_error_vtbl *)&off_24D5803A0;
    }
    v22 = objc_msgSend((id)v21, "longValue");

    *((_QWORD *)&v346 + 1) = v22;
    v347 = Phase::Controller::DoubleFromDictionary(v19, (NSDictionary *)CFSTR("OverflowDetectionTimingThresholdSeconds"), v23);
    v24 = v19;
    v25 = CFSTR("Categories");
    v338 = v24;
    -[Phase::Controller objectForKeyedSubscript:](v24, "objectForKeyedSubscript:", CFSTR("Categories"));
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v339 = v26;
    if (!v26)
    {
      v238 = (void *)MEMORY[0x24BDD17C8];
      objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
      v239 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v239, "localizedStringForKey:value:table:", CFSTR("[NSDictionary objectForKey] failed for key: %@"), &stru_24D582B00, 0);
      v240 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v238, "stringWithFormat:", v240, CFSTR("Categories"));
      v241 = (void *)objc_claimAutoreleasedReturnValue();

      v243 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v242)
                                                                                           + 784)));
      if (os_log_type_enabled(v243, OS_LOG_TYPE_ERROR))
      {
        v244 = objc_msgSend(objc_retainAutorelease(v241), "UTF8String");
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 639;
        v371 = 2080;
        *(_QWORD *)v372 = v244;
        _os_log_impl(&dword_2164CC000, v243, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", buf, 0x1Cu);
      }

      v245 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v245, "%s");
      v245->__vftable = (std::logic_error_vtbl *)&off_24D580378;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v246 = (void *)MEMORY[0x24BDD17C8];
      objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
      v247 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v247, "localizedStringForKey:value:table:", CFSTR("[NSObject isKindOfClass:[[NSArray class]]] failed for key: %@"), &stru_24D582B00, 0);
      v248 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v246, "stringWithFormat:", v248, CFSTR("Categories"));
      v249 = (void *)objc_claimAutoreleasedReturnValue();

      v251 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v250)
                                                                                           + 784)));
      if (os_log_type_enabled(v251, OS_LOG_TYPE_ERROR))
      {
        v252 = objc_msgSend(objc_retainAutorelease(v249), "UTF8String");
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 646;
        v371 = 2080;
        *(_QWORD *)v372 = v252;
        _os_log_impl(&dword_2164CC000, v251, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", buf, 0x1Cu);
      }

      v253 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v253, "%s");
      v253->__vftable = (std::logic_error_vtbl *)&off_24D5803A0;
    }
    v27 = 0;
    memset(v359, 0, 32);
    *(_DWORD *)&v359[32] = 1065353216;
    while (objc_msgSend(v26, "count") > v27)
    {
      objc_msgSend(v26, "objectAtIndexedSubscript:", v27);
      v28 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
      Phase::Controller::CategoryFromDictionary((Phase::Controller *)buf, v28);

      v21 = *(_QWORD *)buf;
      v29 = *(_QWORD *)&v359[8];
      if (*(_QWORD *)&v359[8])
      {
        v30 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v359[8]);
        v30.i16[0] = vaddlv_u8(v30);
        v31 = v30.u32[0];
        if (v30.u32[0] > 1uLL)
        {
          v3 = *(_QWORD **)buf;
          if (*(_QWORD *)&v359[8] <= *(_QWORD *)buf)
            v3 = (_QWORD *)(*(_QWORD *)buf % *(_QWORD *)&v359[8]);
        }
        else
        {
          v3 = (_QWORD *)((*(_QWORD *)&v359[8] - 1) & *(_QWORD *)buf);
        }
        v32 = *(_QWORD **)(*(_QWORD *)v359 + 8 * (_QWORD)v3);
        if (v32)
        {
          v33 = (_QWORD *)*v32;
          if (*v32)
          {
            v34 = *(const char **)&buf[8];
            while (1)
            {
              v35 = v33[1];
              if (v35 == v21)
              {
                if (v33[2] == v21)
                {
                  v36 = (Phase::Logger *)v33[3];
                  if (v36 == (Phase::Logger *)v34
                    || (v36 = (Phase::Logger *)strcmp((const char *)v36, v34), !(_DWORD)v36))
                  {
                    v209 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v36) + 784));
                    if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v385 = 136315650;
                      *(_QWORD *)&v385[4] = "ProfileRegistry.mm";
                      *(_WORD *)&v385[12] = 1024;
                      *(_DWORD *)&v385[14] = 656;
                      *(_WORD *)&v385[18] = 2080;
                      *(_QWORD *)&v385[20] = *(_QWORD *)&buf[8];
                      _os_log_impl(&dword_2164CC000, v209, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::DuplicateEntry) [!pair.second is true]: \"Entry with name %s already exists\"", v385, 0x1Cu);
                    }

                    v210 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    std::logic_error::logic_error(v210, "Entry with name %s already exists");
                    v210->__vftable = (std::logic_error_vtbl *)&off_24D5805C8;
                  }
                }
              }
              else
              {
                if (v31 > 1)
                {
                  if (v35 >= v29)
                    v35 %= v29;
                }
                else
                {
                  v35 &= v29 - 1;
                }
                if ((_QWORD *)v35 != v3)
                {
LABEL_39:
                  v26 = v339;
                  break;
                }
              }
              v33 = (_QWORD *)*v33;
              if (!v33)
                goto LABEL_39;
            }
          }
        }
      }
      v37 = operator new(0x88uLL);
      *(_QWORD *)v385 = v37;
      *(_QWORD *)&v385[8] = &v359[16];
      v385[16] = 0;
      *v37 = 0;
      v37[1] = v21;
      Phase::StringId::StringId((uint64_t)(v37 + 2), (uint64_t)buf);
      Phase::StringId::StringId((uint64_t)(v37 + 5), (uint64_t)buf);
      Phase::StringId::StringId((uint64_t)(v37 + 8), (uint64_t)&v372[4]);
      v37[11] = *(_QWORD *)v374;
      std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>::unordered_map((uint64_t)(v37 + 12), (uint64_t)&v374[8]);
      v385[16] = 1;
      v38 = (float)(unint64_t)(*(_QWORD *)&v359[24] + 1);
      if (!v29 || (float)(*(float *)&v359[32] * (float)v29) < v38)
      {
        v39 = (v29 & (v29 - 1)) != 0;
        if (v29 < 3)
          v39 = 1;
        v40 = v39 | (2 * v29);
        v41 = vcvtps_u32_f32(v38 / *(float *)&v359[32]);
        if (v40 <= v41)
          v42 = v41;
        else
          v42 = v40;
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v359, v42);
        v29 = *(_QWORD *)&v359[8];
        if ((*(_QWORD *)&v359[8] & (*(_QWORD *)&v359[8] - 1)) != 0)
        {
          if (*(_QWORD *)&v359[8] <= v21)
            v3 = (_QWORD *)(v21 % *(_QWORD *)&v359[8]);
          else
            v3 = (_QWORD *)v21;
        }
        else
        {
          v3 = (_QWORD *)((*(_QWORD *)&v359[8] - 1) & v21);
        }
      }
      v43 = *(_QWORD *)v359;
      v44 = *(_QWORD **)(*(_QWORD *)v359 + 8 * (_QWORD)v3);
      if (v44)
      {
        *v37 = *v44;
      }
      else
      {
        *v37 = *(_QWORD *)&v359[16];
        *(_QWORD *)&v359[16] = v37;
        *(_QWORD *)(v43 + 8 * (_QWORD)v3) = &v359[16];
        if (!*v37)
          goto LABEL_61;
        v45 = *(_QWORD *)(*v37 + 8);
        if ((v29 & (v29 - 1)) != 0)
        {
          if (v45 >= v29)
            v45 %= v29;
        }
        else
        {
          v45 &= v29 - 1;
        }
        v44 = (_QWORD *)(*(_QWORD *)v359 + 8 * v45);
      }
      *v44 = v37;
LABEL_61:
      *(_QWORD *)v385 = 0;
      ++*(_QWORD *)&v359[24];
      std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,void *>>>>::reset[abi:ne180100]((uint64_t)v385);
      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>>>::~__hash_table((uint64_t)&v374[8]);
      if (!(_BYTE)v373)
        free(*(void **)&v372[12]);
      *(_QWORD *)&v372[4] = 0;
      *(_QWORD *)&v372[12] = &str_33;
      LOBYTE(v373) = 1;
      if (!buf[16])
        free(*(void **)&buf[8]);
      ++v27;
    }

    if (*((_QWORD *)&v349 + 1))
    {
      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::__deallocate_node((uint64_t)&__p, (_QWORD *)v349);
      *(_QWORD *)&v349 = 0;
      v46 = *((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v47 = 0;
        do
          *(_QWORD *)(__p + 8 * v47++) = 0;
        while (v46 != v47);
      }
      *((_QWORD *)&v349 + 1) = 0;
    }
    v48 = *(_QWORD *)v359;
    *(_QWORD *)v359 = 0;
    v49 = (void *)__p;
    *(_QWORD *)&__p = v48;
    if (v49)
      operator delete(v49);
    v50 = *(_QWORD *)&v359[8];
    *(_QWORD *)&v359[8] = 0;
    v349 = *(_OWORD *)&v359[16];
    v350 = *(_DWORD *)&v359[32];
    *((_QWORD *)&__p + 1) = v50;
    if (*(_QWORD *)&v359[24])
    {
      v51 = *(_QWORD *)(*(_QWORD *)&v359[16] + 8);
      if ((v50 & (v50 - 1)) != 0)
      {
        if (v51 >= v50)
          v51 %= v50;
      }
      else
      {
        v51 &= v50 - 1;
      }
      *(_QWORD *)(__p + 8 * v51) = &v349;
      *(_OWORD *)&v359[16] = 0uLL;
    }
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::~__hash_table((uint64_t)v359);

    v52 = v343;
    v53 = *((_QWORD *)&v352 + 1);
    if (*((_QWORD *)&v352 + 1))
    {
      v54 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v352 + 8));
      v54.i16[0] = vaddlv_u8(v54);
      v55 = v54.u32[0];
      if (v54.u32[0] > 1uLL)
      {
        v21 = v343;
        if (*((_QWORD *)&v352 + 1) <= v343)
          v21 = v343 % *((_QWORD *)&v352 + 1);
      }
      else
      {
        v21 = (*((_QWORD *)&v352 + 1) - 1) & v343;
      }
      v56 = *(_QWORD **)(v352 + 8 * v21);
      if (v56)
      {
        v3 = (_QWORD *)*v56;
        if (*v56)
        {
          v57 = __s2;
          do
          {
            v58 = v3[1];
            if (v58 == v52)
            {
              if (v3[2] == v52)
              {
                v59 = (Phase::Logger *)v3[3];
                if (v59 == (Phase::Logger *)v57
                  || (v59 = (Phase::Logger *)strcmp((const char *)v59, v57), !(_DWORD)v59))
                {
                  v220 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v59) + 784));
                  if (os_log_type_enabled(v220, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 656;
                    v371 = 2080;
                    *(_QWORD *)v372 = __s2;
                    _os_log_impl(&dword_2164CC000, v220, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::DuplicateEntry) [!pair.second is true]: \"Entry with name %s already exists\"", buf, 0x1Cu);
                  }

                  v221 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v221, "Entry with name %s already exists");
                  v221->__vftable = (std::logic_error_vtbl *)&off_24D5805C8;
                }
              }
            }
            else
            {
              if (v55 > 1)
              {
                if (v58 >= v53)
                  v58 %= v53;
              }
              else
              {
                v58 &= v53 - 1;
              }
              if (v58 != v21)
                break;
            }
            v3 = (_QWORD *)*v3;
          }
          while (v3);
        }
      }
    }
    v60 = operator new(0x80uLL);
    *v60 = 0;
    v60[1] = v52;
    Phase::StringId::StringId((uint64_t)(v60 + 2), (uint64_t)&v343);
    Phase::StringId::StringId((uint64_t)(v60 + 5), (uint64_t)&v343);
    *((_OWORD *)v60 + 4) = v346;
    *((double *)v60 + 10) = v347;
    std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Category>::unordered_map((uint64_t)(v60 + 11), (uint64_t)&__p);
    v61 = (float)(unint64_t)(*((_QWORD *)&v353 + 1) + 1);
    if (!v53 || (float)(v354 * (float)v53) < v61)
    {
      v62 = (v53 & (v53 - 1)) != 0;
      if (v53 < 3)
        v62 = 1;
      v63 = v62 | (2 * v53);
      v64 = vcvtps_u32_f32(v61 / v354);
      if (v63 <= v64)
        v65 = v64;
      else
        v65 = v63;
      std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)&v352, v65);
      v53 = *((_QWORD *)&v352 + 1);
      if ((*((_QWORD *)&v352 + 1) & (*((_QWORD *)&v352 + 1) - 1)) != 0)
      {
        if (*((_QWORD *)&v352 + 1) <= v52)
          v21 = v52 % *((_QWORD *)&v352 + 1);
        else
          v21 = v52;
      }
      else
      {
        v21 = (*((_QWORD *)&v352 + 1) - 1) & v52;
      }
    }
    v66 = v352;
    v67 = *(_QWORD **)(v352 + 8 * v21);
    if (v67)
    {
      *v60 = *v67;
      goto LABEL_118;
    }
    *v60 = v353;
    *(_QWORD *)&v353 = v60;
    *(_QWORD *)(v66 + 8 * v21) = &v353;
    if (*v60)
    {
      v68 = *(_QWORD *)(*v60 + 8);
      if ((v53 & (v53 - 1)) != 0)
      {
        if (v68 >= v53)
          v68 %= v53;
      }
      else
      {
        v68 &= v53 - 1;
      }
      v67 = (_QWORD *)(v352 + 8 * v68);
LABEL_118:
      *v67 = v60;
    }
    ++*((_QWORD *)&v353 + 1);
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::~__hash_table((uint64_t)&__p);
    if (!v345)
      free(__s2);
    v16 = v335 + 1;
    v15 = v334;
  }

  v69 = v353;
  if ((_QWORD)v353)
  {
    v333 = (_QWORD *)((char *)v331 + 16);
    while (1)
    {
      v70 = v69;
      Phase::StringId::StringId((uint64_t)&v343, v69 + 16);
      Phase::StringId::StringId((uint64_t)&v346, v70 + 40);
      __p = *(_OWORD *)(v70 + 64);
      *(_QWORD *)&v349 = *(_QWORD *)(v70 + 80);
      v337 = (Phase::Controller *)v70;
      v71 = (Phase::Logger *)std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Category>::unordered_map((uint64_t)&v349 + 8, v70 + 88);
      if ((!(_QWORD)v346 || (_QWORD)v346 == -1) && (*((_UNKNOWN **)&v346 + 1) == &str_33 || !**((_BYTE **)&v346 + 1)))
      {
        v257 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v71)
                                                                                             + 784)));
        if (os_log_type_enabled(v257, OS_LOG_TYPE_ERROR))
        {
          v258 = "";
          if ((_QWORD)v346 != -1)
            goto LABEL_370;
          if (*((_UNKNOWN **)&v346 + 1) == &str_33)
          {
            v259 = "invalid";
            v258 = "<nullptr>";
            goto LABEL_371;
          }
          if (**((_BYTE **)&v346 + 1))
          {
LABEL_370:
            v259 = "empty";
          }
          else
          {
            v258 = "<nullptr>";
            v259 = "invalid";
          }
LABEL_371:
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 38;
          v371 = 2080;
          *(_QWORD *)v372 = v258;
          *(_WORD *)&v372[8] = 2080;
          *(_QWORD *)&v372[10] = v259;
          _os_log_impl(&dword_2164CC000, v257, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidString): \"Name %s is %s.\"", buf, 0x26u);
        }

        v267 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v267, "Name %s is %s.");
        v267->__vftable = (std::logic_error_vtbl *)&off_24D5803F0;
        v270 = Phase::Controller::ProfileRegistryException::InvalidString::~InvalidString;
        goto LABEL_373;
      }
      if (*(double *)&__p <= 0.0)
      {
        v266 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v71)
                                                                                             + 784)));
        if (os_log_type_enabled(v266, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 44;
          v371 = 2080;
          *(_QWORD *)v372 = *((_QWORD *)&v346 + 1);
          *(_WORD *)&v372[8] = 2048;
          *(_QWORD *)&v372[10] = __p;
          _os_log_impl(&dword_2164CC000, v266, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidNumber): \"[%s]: ComputeTime %f must be >= 0\"", buf, 0x26u);
        }

        v267 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v267, "[%s]: ComputeTime %f must be >= 0");
LABEL_346:
        v267->__vftable = (std::logic_error_vtbl *)&off_24D580440;
        v270 = Phase::Controller::ProfileRegistryException::InvalidNumber::~InvalidNumber;
LABEL_373:
        __cxa_throw(v267, v271, (void (*)(void *))v270);
      }
      if (*((uint64_t *)&__p + 1) <= 0)
      {
        v269 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v71)
                                                                                             + 784)));
        if (os_log_type_enabled(v269, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 51;
          v371 = 2080;
          *(_QWORD *)v372 = *((_QWORD *)&v346 + 1);
          *(_WORD *)&v372[8] = 2048;
          *(_QWORD *)&v372[10] = *((_QWORD *)&__p + 1);
          _os_log_impl(&dword_2164CC000, v269, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidNumber): \"[%s]: OverflowDetectionHistoryLength %ld must be > 0\"", buf, 0x26u);
        }

        v267 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v267, "[%s]: OverflowDetectionHistoryLength %ld must be > 0");
        goto LABEL_346;
      }
      if (*(double *)&v349 <= 0.0)
      {
        v268 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v71)
                                                                                             + 784)));
        if (os_log_type_enabled(v268, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 58;
          v371 = 2080;
          *(_QWORD *)v372 = *((_QWORD *)&v346 + 1);
          *(_WORD *)&v372[8] = 2048;
          *(_QWORD *)&v372[10] = v349;
          _os_log_impl(&dword_2164CC000, v268, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidNumber): \"[%s]: OverflowDetectionTimingThresholdSeconds %f must be > 0\"", buf, 0x26u);
        }

        v267 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v267, "[%s]: OverflowDetectionTimingThresholdSeconds %f must be > 0");
        goto LABEL_346;
      }
      memset(v385, 0, 24);
      v73 = (unint64_t)v351;
      if (v351)
      {
        while (1)
        {
          SpatialCategoryFromStringId = (Phase::Logger *)Phase::Controller::GetSpatialCategoryFromStringId((Phase::Controller *)(v73 + 16), v72);
          v340 = (_QWORD *)v73;
          if (!(_DWORD)SpatialCategoryFromStringId)
          {
            v254 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(SpatialCategoryFromStringId)
                                                                                                 + 784)));
            if (os_log_type_enabled(v254, OS_LOG_TYPE_ERROR))
            {
              v255 = *(_QWORD *)(v73 + 24);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 232;
              v371 = 2080;
              *(_QWORD *)v372 = *((_QWORD *)&v346 + 1);
              *(_WORD *)&v372[8] = 2080;
              *(_QWORD *)&v372[10] = v255;
              _os_log_impl(&dword_2164CC000, v254, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidString): \"[%s]: Category %s isn't recognized.\"", buf, 0x26u);
            }

            v256 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v256, "[%s]: Category %s isn't recognized.");
            v256->__vftable = (std::logic_error_vtbl *)&off_24D5803F0;
          }
          v75 = (_QWORD *)(v73 + 64);
          if (*(_QWORD *)&v385[8] >= *(_QWORD *)&v385[16])
          {
            v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v385[8] - *(_QWORD *)v385) >> 3);
            v78 = v77 + 1;
            if (v77 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v385[16] - *(_QWORD *)v385) >> 3) > v78)
              v78 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v385[16] - *(_QWORD *)v385) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v385[16] - *(_QWORD *)v385) >> 3) >= 0x555555555555555)
              v79 = 0xAAAAAAAAAAAAAAALL;
            else
              v79 = v78;
            if (v79)
            {
              if (v79 > 0xAAAAAAAAAAAAAAALL)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v80 = (char *)operator new(24 * v79);
            }
            else
            {
              v80 = 0;
            }
            v81 = &v80[24 * v79];
            v82 = Phase::StringId::StringId((uint64_t)&v80[24 * v77], v73 + 64);
            v76 = v82 + 24;
            v83 = *(void ***)v385;
            v84 = *(void ***)&v385[8];
            if (*(_QWORD *)&v385[8] == *(_QWORD *)v385)
            {
              *(_QWORD *)v385 = v82;
              *(_QWORD *)&v385[8] = v82 + 24;
              *(_QWORD *)&v385[16] = v81;
              if (!v84)
                goto LABEL_153;
            }
            else
            {
              do
              {
                v84 -= 3;
                v82 = Phase::StringId::StringId(v82 - 24, (uint64_t)v84);
              }
              while (v84 != v83);
              v84 = *(void ***)v385;
              v85 = *(void ***)&v385[8];
              *(_QWORD *)v385 = v82;
              *(_QWORD *)&v385[8] = v76;
              for (*(_QWORD *)&v385[16] = v81; v85 != v84; v85 -= 3)
              {
                if (!*((_BYTE *)v85 - 8))
                  free(*(v85 - 2));
                *(v85 - 3) = 0;
                *(v85 - 2) = &str_33;
                *((_BYTE *)v85 - 8) = 1;
              }
              if (!v84)
                goto LABEL_153;
            }
            operator delete(v84);
          }
          else
          {
            v76 = Phase::StringId::StringId(*(uint64_t *)&v385[8], v73 + 64) + 24;
          }
LABEL_153:
          *(_QWORD *)&v385[8] = v76;
          for (i = *(_QWORD **)(v73 + 112); i; i = (_QWORD *)*i)
          {
            SpatialModelerGraphFromStringId = (Phase::Logger *)Phase::Controller::GetSpatialModelerGraphFromStringId((Phase::Controller *)(i + 2), v72);
            v341 = i;
            if (!(_DWORD)SpatialModelerGraphFromStringId)
            {
              v216 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(SpatialModelerGraphFromStringId) + 784));
              if (os_log_type_enabled(v216, OS_LOG_TYPE_ERROR))
              {
                v217 = v340[3];
                v218 = v341[3];
                *(_DWORD *)buf = 136316162;
                *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 225;
                v371 = 2080;
                *(_QWORD *)v372 = *((_QWORD *)&v346 + 1);
                *(_WORD *)&v372[8] = 2080;
                *(_QWORD *)&v372[10] = v217;
                *(_WORD *)&v372[18] = 2080;
                v373 = v218;
                _os_log_impl(&dword_2164CC000, v216, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidString): \"[%s:%s]: Graph %s isn't recognized.\"", buf, 0x30u);
              }

              v219 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v219, "[%s:%s]: Graph %s isn't recognized.");
              v219->__vftable = (std::logic_error_vtbl *)&off_24D5803F0;
            }
            v88 = (_QWORD *)i[10];
            if (v88)
            {
              do
              {
                SpatialModelerStageFromStringId = (Phase::Logger *)Phase::Controller::GetSpatialModelerStageFromStringId((Phase::Controller *)(v88 + 2), v72);
                if (!(_DWORD)SpatialModelerStageFromStringId)
                {
                  v211 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(SpatialModelerStageFromStringId) + 784));
                  if (os_log_type_enabled(v211, OS_LOG_TYPE_ERROR))
                  {
                    v212 = v340[3];
                    v213 = v341[3];
                    v214 = v88[3];
                    *(_DWORD *)buf = 136316418;
                    *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 217;
                    v371 = 2080;
                    *(_QWORD *)v372 = *((_QWORD *)&v346 + 1);
                    *(_WORD *)&v372[8] = 2080;
                    *(_QWORD *)&v372[10] = v212;
                    *(_WORD *)&v372[18] = 2080;
                    v373 = v213;
                    *(_WORD *)v374 = 2080;
                    *(_QWORD *)&v374[2] = v214;
                    _os_log_impl(&dword_2164CC000, v211, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidString): \"[%s:%s:%s]: Stage %s isn't recognized.\"", buf, 0x3Au);
                  }

                  v215 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v215, "[%s:%s:%s]: Stage %s isn't recognized.");
                  v215->__vftable = (std::logic_error_vtbl *)&off_24D5803F0;
                }
                v342 = v88;
                v90 = (_QWORD *)v88[10];
                if (v90)
                {
                  while (2)
                  {
                    SpatialModelerParameterFromStringId = (Phase::Logger *)Phase::Controller::GetSpatialModelerParameterFromStringId((Phase::Controller *)(v90 + 2), v72);
                    v92 = (int)SpatialModelerParameterFromStringId;
                    if ((_DWORD)SpatialModelerParameterFromStringId)
                    {
                      v93 = *(double *)v90[8];
                      v94 = *(double *)(v90[9] - 48);
                      if (v93 < 0.0 || v94 > 1.0)
                      {
                        v167 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(SpatialModelerParameterFromStringId) + 784));
                        if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
                        {
                          v169 = v340[3];
                          v170 = v341[3];
                          v171 = v342[3];
                          v172 = v90[3];
                          *(_DWORD *)buf = 136317698;
                          *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 100;
                          v371 = 2080;
                          *(_QWORD *)v372 = *((_QWORD *)&v346 + 1);
                          *(_WORD *)&v372[8] = 2080;
                          *(_QWORD *)&v372[10] = v169;
                          *(_WORD *)&v372[18] = 2080;
                          v373 = v170;
                          *(_WORD *)v374 = 2080;
                          *(_QWORD *)&v374[2] = v171;
                          v375 = 2080;
                          v376 = v172;
                          v377 = 2048;
                          v378 = v93;
                          v379 = 2048;
                          v380 = v94;
                          v381 = 2048;
                          v382 = 0;
                          v383 = 2048;
                          v384 = 0x3FF0000000000000;
                          _os_log_impl(&dword_2164CC000, v167, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidEnvelopeDomain): \"[%s:%s:%s:%s:%s]: Envelope has invalid domain [%f, %f]. Must be within [%f, %f].\"", buf, 0x6Cu);
                        }

                        v173 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                        std::logic_error::logic_error(v173, "[%s:%s:%s:%s:%s]: Envelope has invalid domain [%f, %f]. Must be within [%f, %f].");
                        v173->__vftable = (std::logic_error_vtbl *)&off_24D580550;
                      }
                      *(_QWORD *)buf = *v75;
                      v96 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(a3, (unint64_t *)buf);
                      v97 = v96;
                      if (v96)
                        v98 = v96 + 3;
                      else
                        v98 = 0;
                      if (v96)
                      {
                        v101 = Phase::Envelope<double>::Range(v90 + 8);
                        v102 = v100;
                        switch(v92)
                        {
                          case 1:
                            if (v101 >= v97[21] && v100 <= v97[22])
                              goto LABEL_197;
                            v195 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v99) + 784));
                            if (os_log_type_enabled(v195, OS_LOG_TYPE_ERROR))
                            {
                              v196 = v340[3];
                              v197 = v341[3];
                              v198 = v342[3];
                              v199 = v90[3];
                              v200 = *((_QWORD *)v97 + 21);
                              v201 = *((_QWORD *)v97 + 22);
                              *(_DWORD *)buf = 136317698;
                              *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 126;
                              v371 = 2080;
                              *(_QWORD *)v372 = *((_QWORD *)&v346 + 1);
                              *(_WORD *)&v372[8] = 2080;
                              *(_QWORD *)&v372[10] = v196;
                              *(_WORD *)&v372[18] = 2080;
                              v373 = v197;
                              *(_WORD *)v374 = 2080;
                              *(_QWORD *)&v374[2] = v198;
                              v375 = 2080;
                              v376 = v199;
                              v377 = 2048;
                              v378 = v101;
                              v379 = 2048;
                              v380 = v102;
                              v381 = 2048;
                              v382 = v200;
                              v383 = 2048;
                              v384 = v201;
                              _os_log_impl(&dword_2164CC000, v195, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidEnvelopeRange): \"[%s:%s:%s:%s:%s]: Envelope has invalid UpdateRate range [%f, %f]. Must be within [%f, %f].\"", buf, 0x6Cu);
                            }

                            v187 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                            std::logic_error::logic_error(v187, "[%s:%s:%s:%s:%s]: Envelope has invalid UpdateRate range [%f, %f]. Must be within [%f, %f].");
                            goto LABEL_295;
                          case 2:
                            v103 = a3;
                            v104 = v3;
                            v106 = (char *)v90[8];
                            v105 = (char *)v90[9];
                            v107 = (v105 - v106) >> 6;
                            v108 = v107 + 1;
                            if ((v107 + 1) >> 60)
                              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
                            v109 = 2 * v108;
                            v110 = operator new(16 * v108);
                            bzero(v110, v109 * 8);
                            *v110 = *(_QWORD *)v106;
                            v110[1] = *((_QWORD *)v106 + 1);
                            if (v105 != v106)
                            {
                              if (v107 <= 1)
                                v111 = 1;
                              else
                                v111 = (v105 - v106) >> 6;
                              v112 = v110 + 3;
                              v113 = (uint64_t *)(v106 + 24);
                              do
                              {
                                *(v112 - 1) = *(v113 - 1);
                                v114 = *v113;
                                v113 += 8;
                                *v112 = v114;
                                v112 += 2;
                                --v111;
                              }
                              while (v111);
                            }
                            v115 = (unint64_t *)v98[13];
                            v116 = (double *)v110;
                            v3 = v104;
                            a3 = v103;
                            do
                            {
                              v117 = v116[1];
                              if ((unint64_t *)v98[12] == v115)
                                goto LABEL_265;
                              v118 = 0;
                              v119 = (unint64_t *)v98[12];
                              do
                              {
                                v120 = *v119++;
                                if (v117 == (double)v120)
                                  ++v118;
                              }
                              while (v119 != v115);
                              if (!v118)
                              {
LABEL_265:
                                v152 = (Phase::Logger *)std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
                                v153 = v98[12];
                                for (j = v98[13]; v153 != j; v153 += 8)
                                {
                                  std::ostream::operator<<();
                                  v152 = (Phase::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)" ", 1);
                                }
                                v155 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v152) + 784));
                                if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
                                {
                                  v156 = *((_QWORD *)&v346 + 1);
                                  v157 = v340[3];
                                  v158 = v341[3];
                                  v159 = v342[3];
                                  v160 = v90[3];
                                  std::stringbuf::str();
                                  v161 = v358 >= 0 ? &v357 : (void **)v357;
                                  *(_DWORD *)v359 = 136317186;
                                  *(_QWORD *)&v359[4] = "ProfileRegistry.mm";
                                  *(_WORD *)&v359[12] = 1024;
                                  *(_DWORD *)&v359[14] = 149;
                                  *(_WORD *)&v359[18] = 2080;
                                  *(_QWORD *)&v359[20] = v156;
                                  *(_WORD *)&v359[28] = 2080;
                                  *(_QWORD *)&v359[30] = v157;
                                  v360 = 2080;
                                  v361 = v158;
                                  v362 = 2080;
                                  v363 = v159;
                                  v364 = 2080;
                                  v365 = v160;
                                  v366 = 2048;
                                  v367 = (unint64_t)v117;
                                  v368 = 2080;
                                  v369 = v161;
                                  _os_log_impl(&dword_2164CC000, v155, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidEnvelopeRange): \"[%s:%s:%s:%s:%s]: Unsupported Subband Count %zu. Must be one of: %s\"", v359, 0x58u);
                                  if (v358 < 0)
                                    operator delete(v357);
                                }

                                v162 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                                std::logic_error::logic_error(v162, "[%s:%s:%s:%s:%s]: Unsupported Subband Count %zu. Must be one of: %s");
                                v162->__vftable = (std::logic_error_vtbl *)&off_24D5805A0;
                              }
                              v116 += 2;
                            }
                            while (v116 != (double *)&v110[v109]);
                            operator delete(v110);
                            goto LABEL_197;
                          case 3:
                            if (v101 >= v97[25] && v100 <= v97[26])
                              goto LABEL_197;
                            v180 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v99) + 784));
                            if (os_log_type_enabled(v180, OS_LOG_TYPE_ERROR))
                            {
                              v181 = v340[3];
                              v182 = v341[3];
                              v183 = v342[3];
                              v184 = v90[3];
                              v185 = *((_QWORD *)v97 + 25);
                              v186 = *((_QWORD *)v97 + 26);
                              *(_DWORD *)buf = 136317698;
                              *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 164;
                              v371 = 2080;
                              *(_QWORD *)v372 = *((_QWORD *)&v346 + 1);
                              *(_WORD *)&v372[8] = 2080;
                              *(_QWORD *)&v372[10] = v181;
                              *(_WORD *)&v372[18] = 2080;
                              v373 = v182;
                              *(_WORD *)v374 = 2080;
                              *(_QWORD *)&v374[2] = v183;
                              v375 = 2080;
                              v376 = v184;
                              v377 = 2048;
                              v378 = v101;
                              v379 = 2048;
                              v380 = v102;
                              v381 = 2048;
                              v382 = v185;
                              v383 = 2048;
                              v384 = v186;
                              _os_log_impl(&dword_2164CC000, v180, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidEnvelopeRange): \"[%s:%s:%s:%s:%s]: Envelope has invalid TimeLimit range [%f, %f]. Must be within [%f, %f].\"", buf, 0x6Cu);
                            }

                            v187 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                            std::logic_error::logic_error(v187, "[%s:%s:%s:%s:%s]: Envelope has invalid TimeLimit range [%f, %f]. Must be within [%f, %f].");
                            goto LABEL_295;
                          case 4:
                            if (v101 >= v97[23] && v100 <= v97[24])
                              goto LABEL_197;
                            v202 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v99) + 784));
                            if (os_log_type_enabled(v202, OS_LOG_TYPE_ERROR))
                            {
                              v203 = v340[3];
                              v204 = v341[3];
                              v205 = v342[3];
                              v206 = v90[3];
                              v207 = *((_QWORD *)v97 + 23);
                              v208 = *((_QWORD *)v97 + 24);
                              *(_DWORD *)buf = 136317698;
                              *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 180;
                              v371 = 2080;
                              *(_QWORD *)v372 = *((_QWORD *)&v346 + 1);
                              *(_WORD *)&v372[8] = 2080;
                              *(_QWORD *)&v372[10] = v203;
                              *(_WORD *)&v372[18] = 2080;
                              v373 = v204;
                              *(_WORD *)v374 = 2080;
                              *(_QWORD *)&v374[2] = v205;
                              v375 = 2080;
                              v376 = v206;
                              v377 = 2048;
                              v378 = v101;
                              v379 = 2048;
                              v380 = v102;
                              v381 = 2048;
                              v382 = v207;
                              v383 = 2048;
                              v384 = v208;
                              _os_log_impl(&dword_2164CC000, v202, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidEnvelopeRange): \"[%s:%s:%s:%s:%s]: Envelope has invalid CullabilityThreshold range [%f, %f]. Must \" \"be within [%f, %f].\"", buf, 0x6Cu);
                            }

                            v187 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                            std::logic_error::logic_error(v187, "[%s:%s:%s:%s:%s]: Envelope has invalid CullabilityThreshold range [%f, %f]. Must be within [%f, %f].");
                            goto LABEL_295;
                          case 5:
                            if (v101 >= v97[27] && v100 <= v97[28])
                              goto LABEL_197;
                            v188 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v99) + 784));
                            if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
                            {
                              v189 = v340[3];
                              v190 = v341[3];
                              v191 = v342[3];
                              v192 = v90[3];
                              v193 = *((_QWORD *)v97 + 27);
                              v194 = *((_QWORD *)v97 + 28);
                              *(_DWORD *)buf = 136317698;
                              *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 195;
                              v371 = 2080;
                              *(_QWORD *)v372 = *((_QWORD *)&v346 + 1);
                              *(_WORD *)&v372[8] = 2080;
                              *(_QWORD *)&v372[10] = v189;
                              *(_WORD *)&v372[18] = 2080;
                              v373 = v190;
                              *(_WORD *)v374 = 2080;
                              *(_QWORD *)&v374[2] = v191;
                              v375 = 2080;
                              v376 = v192;
                              v377 = 2048;
                              v378 = v101;
                              v379 = 2048;
                              v380 = v102;
                              v381 = 2048;
                              v382 = v193;
                              v383 = 2048;
                              v384 = v194;
                              _os_log_impl(&dword_2164CC000, v188, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidEnvelopeRange): \"[%s:%s:%s:%s:%s]: Envelope has invalid MaximumClusterCount range [%f, %f]. Must \" \"be within [%f, %f].\"", buf, 0x6Cu);
                            }

                            v187 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                            std::logic_error::logic_error(v187, "[%s:%s:%s:%s:%s]: Envelope has invalid MaximumClusterCount range [%f, %f]. Must be within [%f, %f].");
LABEL_295:
                            v187->__vftable = (std::logic_error_vtbl *)&off_24D5805A0;
                          default:
LABEL_197:
                            v90 = (_QWORD *)*v90;
                            if (!v90)
                              goto LABEL_198;
                            continue;
                        }
                      }
                      v163 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 784));
                      if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR))
                      {
                        v164 = v340[3];
                        v165 = v340[9];
                        *(_DWORD *)buf = 136316162;
                        *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 109;
                        v371 = 2080;
                        *(_QWORD *)v372 = *((_QWORD *)&v346 + 1);
                        *(_WORD *)&v372[8] = 2080;
                        *(_QWORD *)&v372[10] = v164;
                        *(_WORD *)&v372[18] = 2080;
                        v373 = v165;
                        _os_log_impl(&dword_2164CC000, v163, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidSpatialModeler): \"[%s:%s]: Invalid Spatial Modeler: %s\"", buf, 0x30u);
                      }

                      v166 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                      std::logic_error::logic_error(v166, "[%s:%s]: Invalid Spatial Modeler: %s");
                      v166->__vftable = (std::logic_error_vtbl *)&off_24D580578;
                    }
                    break;
                  }
                  v174 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(SpatialModelerParameterFromStringId) + 784));
                  if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
                  {
                    v175 = v340[3];
                    v176 = v341[3];
                    v177 = v342[3];
                    v178 = v90[3];
                    *(_DWORD *)buf = 136316674;
                    *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 87;
                    v371 = 2080;
                    *(_QWORD *)v372 = *((_QWORD *)&v346 + 1);
                    *(_WORD *)&v372[8] = 2080;
                    *(_QWORD *)&v372[10] = v175;
                    *(_WORD *)&v372[18] = 2080;
                    v373 = v176;
                    *(_WORD *)v374 = 2080;
                    *(_QWORD *)&v374[2] = v177;
                    v375 = 2080;
                    v376 = v178;
                    _os_log_impl(&dword_2164CC000, v174, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidString): \"[%s:%s:%s:%s]: Parameter %s isn't recognized.\"", buf, 0x44u);
                  }

                  v179 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v179, "[%s:%s:%s:%s]: Parameter %s isn't recognized.");
                  v179->__vftable = (std::logic_error_vtbl *)&off_24D5803F0;
                }
LABEL_198:
                i = v341;
                v88 = (_QWORD *)*v342;
                v73 = (unint64_t)v340;
              }
              while (*v342);
            }
          }
          v73 = *(_QWORD *)v73;
          if (!v73)
          {
            v121 = *(unint64_t **)v385;
            v122 = *(unint64_t **)&v385[8];
            goto LABEL_205;
          }
        }
      }
      v122 = 0;
      v121 = 0;
LABEL_205:
      v123 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v122 - v121));
      if (v122 == v121)
        v124 = 0;
      else
        v124 = v123;
      std::__introsort<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *,false>(v121, v122, v124, 1);
      v125 = *(uint64_t **)&v385[8];
      if (*(_QWORD *)v385 != *(_QWORD *)&v385[8])
      {
        v126 = (uint64_t *)(*(_QWORD *)v385 + 24);
        if (*(_QWORD *)v385 + 24 != *(_QWORD *)&v385[8])
        {
          v127 = **(_QWORD **)v385;
          while (1)
          {
            v128 = *v126;
            if (v127 == *v126)
            {
              v129 = (char *)*(v126 - 2);
              v130 = (const char *)v126[1];
              if (v129 == v130)
                break;
              v129 = (char *)strcmp(v129, v130);
              if (!(_DWORD)v129)
                break;
            }
            v126 += 3;
            v127 = v128;
            if (v126 == v125)
              goto LABEL_217;
          }
          if (v126 - 3 != v125)
          {
            v324 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v129)
                                                                                                 + 784)));
            if (os_log_type_enabled(v324, OS_LOG_TYPE_ERROR))
            {
              v325 = *(v126 - 2);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 242;
              v371 = 2080;
              *(_QWORD *)v372 = *((_QWORD *)&v346 + 1);
              *(_WORD *)&v372[8] = 2080;
              *(_QWORD *)&v372[10] = v325;
              _os_log_impl(&dword_2164CC000, v324, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::DuplicateEntry): \"[%s]: Found Modeler %s in more than one Category.\"", buf, 0x26u);
            }

            v326 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v326, "[%s]: Found Modeler %s in more than one Category.");
            v326->__vftable = (std::logic_error_vtbl *)&off_24D5805C8;
          }
        }
      }
LABEL_217:
      *(_QWORD *)buf = v385;
      std::vector<Phase::StringId>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      v131 = v343;
      v132 = *((_QWORD *)v331 + 1);
      if (v132)
      {
        v133 = (uint8x8_t)vcnt_s8((int8x8_t)v132);
        v133.i16[0] = vaddlv_u8(v133);
        v134 = v133.u32[0];
        if (v133.u32[0] > 1uLL)
        {
          v73 = v343;
          if (v132 <= v343)
            v73 = v343 % v132;
        }
        else
        {
          v73 = (v132 - 1) & v343;
        }
        v135 = *(_QWORD **)(*(_QWORD *)v331 + 8 * v73);
        if (v135)
        {
          v136 = (_QWORD *)*v135;
          if (*v135)
          {
            v137 = __s2;
            do
            {
              v138 = v136[1];
              if (v138 == v131)
              {
                if (v136[2] == v131)
                {
                  v139 = (const char *)v136[3];
                  if (v139 == v137 || !strcmp(v139, v137))
                  {
                    v260 = (Phase::Logger *)Phase::Controller::ProfileRegistry::DumpState((Phase::Controller::ProfileRegistry *)v359, (uint64_t)v331);
                    v261 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v260) + 784));
                    v262 = os_log_type_enabled(v261, OS_LOG_TYPE_ERROR);
                    if (v262)
                    {
                      v263 = v359;
                      if (v359[23] < 0)
                        v263 = *(_BYTE **)v359;
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 709;
                      v371 = 2080;
                      *(_QWORD *)v372 = v263;
                      _os_log_impl(&dword_2164CC000, v261, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
                    }
                    v264 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v262) + 784));
                    if (os_log_type_enabled(v264, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 711;
                      v371 = 2080;
                      *(_QWORD *)v372 = __s2;
                      _os_log_impl(&dword_2164CC000, v264, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::DuplicateEntry): \"Profile with name %s already exists\"", buf, 0x1Cu);
                    }

                    v265 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    std::logic_error::logic_error(v265, "Profile with name %s already exists");
                    v265->__vftable = (std::logic_error_vtbl *)&off_24D5805C8;
                  }
                }
              }
              else
              {
                if (v134 > 1)
                {
                  if (v138 >= v132)
                    v138 %= v132;
                }
                else
                {
                  v138 &= v132 - 1;
                }
                if (v138 != v73)
                  break;
              }
              v136 = (_QWORD *)*v136;
            }
            while (v136);
          }
        }
      }
      v140 = operator new(0x80uLL);
      *v140 = 0;
      v140[1] = v131;
      Phase::StringId::StringId((uint64_t)(v140 + 2), (uint64_t)&v343);
      Phase::StringId::StringId((uint64_t)(v140 + 5), (uint64_t)&v346);
      *((_OWORD *)v140 + 4) = __p;
      v140[10] = v349;
      v141 = (Phase::Logger *)std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Category>::unordered_map((uint64_t)(v140 + 11), (uint64_t)&v349 + 8);
      v142 = (float)(unint64_t)(*((_QWORD *)v331 + 3) + 1);
      v143 = *((float *)v331 + 8);
      if (!v132 || (float)(v143 * (float)v132) < v142)
      {
        v144 = (v132 & (v132 - 1)) != 0;
        if (v132 < 3)
          v144 = 1;
        v145 = v144 | (2 * v132);
        v146 = vcvtps_u32_f32(v142 / v143);
        if (v145 <= v146)
          v147 = v146;
        else
          v147 = v145;
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v331, v147);
        v132 = *((_QWORD *)v331 + 1);
        if ((v132 & (v132 - 1)) != 0)
        {
          if (v132 <= v131)
            v73 = v131 % v132;
          else
            v73 = v131;
        }
        else
        {
          v73 = (v132 - 1) & v131;
        }
      }
      v148 = *(_QWORD *)v331;
      v149 = *(_QWORD **)(*(_QWORD *)v331 + 8 * v73);
      if (v149)
        break;
      *v140 = *v333;
      *v333 = v140;
      *(_QWORD *)(v148 + 8 * v73) = v333;
      if (*v140)
      {
        v150 = *(_QWORD *)(*v140 + 8);
        if ((v132 & (v132 - 1)) != 0)
        {
          if (v150 >= v132)
            v150 %= v132;
        }
        else
        {
          v150 &= v132 - 1;
        }
        v149 = (_QWORD *)(*(_QWORD *)v331 + 8 * v150);
        goto LABEL_256;
      }
LABEL_257:
      ++*((_QWORD *)v331 + 3);
      v151 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v141)
                                                                                           + 784)));
      if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ProfileRegistry.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 715;
        v371 = 2048;
        *(_QWORD *)v372 = v331;
        *(_WORD *)&v372[8] = 2080;
        *(_QWORD *)&v372[10] = *((_QWORD *)&v346 + 1);
        _os_log_impl(&dword_2164CC000, v151, OS_LOG_TYPE_DEFAULT, "%25s:%-5d profileregistry@%p: Loaded profile with name '%s'.", buf, 0x26u);
      }

      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::~__hash_table((uint64_t)&v349 + 8);
      if (!LOBYTE(v347))
        free(*((void **)&v346 + 1));
      *(_QWORD *)&v346 = 0;
      *((_QWORD *)&v346 + 1) = &str_33;
      LOBYTE(v347) = 1;
      if (!v345)
        free(__s2);
      v69 = *(_QWORD *)v337;
      if (!*(_QWORD *)v337)
        goto LABEL_264;
    }
    *v140 = *v149;
LABEL_256:
    *v149 = v140;
    goto LABEL_257;
  }
LABEL_264:
  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::~__hash_table((uint64_t)&v352);

}

void sub_216686048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ProfileRegistry::DumpState(Phase::Controller::ProfileRegistry *this, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  size_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ProfileRegistry: ", 17);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" --- State ---", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\nProfiles (", 11);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)")", 1);
  v5 = (uint64_t **)(a2 + 16);
  while (1)
  {
    v5 = (uint64_t **)*v5;
    if (!v5)
      break;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\t ", 3);
    v7 = strlen((const char *)v5[3]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v5[3], v7);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\t\tName = ", 10);
    v9 = strlen((const char *)v5[6]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v5[6], v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\t\tComputeTime = ", 17);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\t\tOverflowDetectionHistoryLength = ", 36);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\t\tOverflowDetectionTimingThresholdSeconds = ", 45);
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  v12[0] = *MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v13[0] = v10;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2199F9CD4](&v15);
}

void sub_216686A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ProfileRegistry::FindProfileId@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_33;
  *(_BYTE *)(a3 + 16) = 1;
  v4 = (_QWORD *)(this + 16);
  while (1)
  {
    v4 = (_QWORD *)*v4;
    if (!v4)
      break;
    if (v4[2] == a2)
      return Phase::StringId::operator=(a3, (uint64_t)(v4 + 2));
  }
  return this;
}

void sub_216686B14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (!*(_BYTE *)(v1 + 16))
    free(*(void **)(v1 + 8));
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = v2;
  *(_BYTE *)(v1 + 16) = 1;
  _Unwind_Resume(exception_object);
}

void Phase::Controller::ProfileRegistry::GetModelers(Phase::Controller::ProfileRegistry *this@<X0>, const Phase::StringId *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3;
  _QWORD *v6;
  const Phase::StringId *v7;
  _QWORD *v8;
  _QWORD *v9;
  Phase::Logger *SpatialCategoryFromStringId;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  uint64_t **v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  NSObject *v40;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  NSObject *v45;
  uint64_t v46;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  *((_DWORD *)a3 + 8) = 1065353216;
  v6 = std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::find<Phase::StringId>(this, (unint64_t *)a2);
  if (!v6)
  {
    v45 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                        + 784)));
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      v46 = *((_QWORD *)a2 + 1);
      *(_DWORD *)buf = 136315650;
      v48 = "ProfileRegistry.mm";
      v49 = 1024;
      v50 = 760;
      v51 = 2080;
      v52 = v46;
      _os_log_impl(&dword_2164CC000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: Couldn't find profile %s. Returning an empty map.", buf, 0x1Cu);
    }

    return;
  }
  v8 = (_QWORD *)v6[13];
  if (!v8)
    return;
  v9 = a3 + 2;
  do
  {
    SpatialCategoryFromStringId = (Phase::Logger *)Phase::Controller::GetSpatialCategoryFromStringId((Phase::Controller *)(v8 + 2), v7);
    v11 = (int)SpatialCategoryFromStringId;
    v12 = v8[8];
    v13 = (int)SpatialCategoryFromStringId;
    v14 = a3[1];
    if (!v14)
      goto LABEL_20;
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v3 = (int)SpatialCategoryFromStringId;
      if (v14 <= (int)SpatialCategoryFromStringId)
        v3 = (int)SpatialCategoryFromStringId % v14;
    }
    else
    {
      v3 = (v14 - 1) & (int)SpatialCategoryFromStringId;
    }
    v16 = *(uint64_t ***)(*a3 + 8 * v3);
    if (!v16 || (v17 = *v16) == 0)
    {
LABEL_20:
      v19 = operator new(0x20uLL);
      *v19 = 0;
      v19[1] = v13;
      *((_DWORD *)v19 + 4) = v11;
      v19[3] = v12;
      v20 = (float)(unint64_t)(a3[3] + 1);
      v21 = *((float *)a3 + 8);
      if (v14 && (float)(v21 * (float)v14) >= v20)
      {
LABEL_66:
        v37 = *a3;
        v38 = *(_QWORD **)(*a3 + 8 * v3);
        if (v38)
        {
          *v19 = *v38;
        }
        else
        {
          *v19 = *v9;
          *v9 = v19;
          *(_QWORD *)(v37 + 8 * v3) = v9;
          if (!*v19)
          {
LABEL_75:
            ++a3[3];
            goto LABEL_76;
          }
          v39 = *(_QWORD *)(*v19 + 8);
          if ((v14 & (v14 - 1)) != 0)
          {
            if (v39 >= v14)
              v39 %= v14;
          }
          else
          {
            v39 &= v14 - 1;
          }
          v38 = (_QWORD *)(*a3 + 8 * v39);
        }
        *v38 = v19;
        goto LABEL_75;
      }
      v22 = (v14 & (v14 - 1)) != 0;
      if (v14 < 3)
        v22 = 1;
      v23 = v22 | (2 * v14);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v14 = a3[1];
      }
      if (*(_QWORD *)&prime > v14)
        goto LABEL_32;
      if (*(_QWORD *)&prime < v14)
      {
        v32 = vcvtps_u32_f32((float)(unint64_t)a3[3] / *((float *)a3 + 8));
        if (v14 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v14)
        {
          v14 = a3[1];
        }
        else
        {
          if (prime)
          {
LABEL_32:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = (void *)*a3;
            *a3 = (uint64_t)v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            a3[1] = (uint64_t)prime;
            do
              *(_QWORD *)(*a3 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v9;
            if (*v9)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*a3 + 8 * v30) = v9;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*a3 + 8 * v36))
                    {
                      *(_QWORD *)(*a3 + 8 * v36) = v29;
                      goto LABEL_57;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*a3 + 8 * v36);
                    **(_QWORD **)(*a3 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_57:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v14 = (unint64_t)prime;
            goto LABEL_61;
          }
          v44 = (void *)*a3;
          *a3 = 0;
          if (v44)
            operator delete(v44);
          v14 = 0;
          a3[1] = 0;
        }
      }
LABEL_61:
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v14 <= v13)
          v3 = v13 % v14;
        else
          v3 = v13;
      }
      else
      {
        v3 = (v14 - 1) & v13;
      }
      goto LABEL_66;
    }
    while (1)
    {
      v18 = v17[1];
      if (v18 == (int)SpatialCategoryFromStringId)
        break;
      if (v15.u32[0] > 1uLL)
      {
        if (v18 >= v14)
          v18 %= v14;
      }
      else
      {
        v18 &= v14 - 1;
      }
      if (v18 != v3)
        goto LABEL_20;
LABEL_19:
      v17 = (uint64_t *)*v17;
      if (!v17)
        goto LABEL_20;
    }
    if (*((_DWORD *)v17 + 4) != (_DWORD)SpatialCategoryFromStringId)
      goto LABEL_19;
    v40 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(SpatialCategoryFromStringId)
                                                                                        + 784)));
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v42 = v8[3];
      v43 = v8[9];
      *(_DWORD *)buf = 136315906;
      v48 = "ProfileRegistry.mm";
      v49 = 1024;
      v50 = 753;
      v51 = 2080;
      v52 = v42;
      v53 = 2080;
      v54 = v43;
      _os_log_impl(&dword_2164CC000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: Failed to insert [%s, %s]!", buf, 0x26u);
    }

LABEL_76:
    v8 = (_QWORD *)*v8;
  }
  while (v8);
}

void sub_2166870A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::ProfileRegistry::GetParameters(Phase::Controller::ProfileRegistry *this@<X0>, const Phase::StringId *a2@<X1>, double a3@<D0>, void **a4@<X8>)
{
  NSObject *v7;
  _QWORD *v9;
  const Phase::StringId *v10;
  _QWORD *v11;
  int SpatialCategoryFromStringId;
  _QWORD *v13;
  int SpatialModelerGraphFromStringId;
  _QWORD *v15;
  int SpatialModelerStageFromStringId;
  double **v17;
  int SpatialModelerParameterFromStringId;
  double v19;
  double v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  NSObject *v34;
  double v35;
  _QWORD *v36;
  _QWORD *v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  double v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3 >= 0.0 && a3 <= 1.0)
  {
    v9 = std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::find<Phase::StringId>(this, (unint64_t *)a2);
    if (v9)
    {
      v11 = (_QWORD *)v9[13];
      if (v11)
      {
        while (1)
        {
          SpatialCategoryFromStringId = Phase::Controller::GetSpatialCategoryFromStringId((Phase::Controller *)(v11 + 2), v10);
          if (!SpatialCategoryFromStringId)
            goto LABEL_34;
          v36 = v11;
          v13 = (_QWORD *)v11[14];
          if (v13)
            break;
LABEL_32:
          v11 = (_QWORD *)*v36;
          if (!*v36)
            return;
        }
        while (1)
        {
          SpatialModelerGraphFromStringId = Phase::Controller::GetSpatialModelerGraphFromStringId((Phase::Controller *)(v13 + 2), v10);
          if (!SpatialModelerGraphFromStringId)
            goto LABEL_34;
          v37 = v13;
          v15 = (_QWORD *)v13[10];
          if (v15)
            break;
LABEL_31:
          v13 = (_QWORD *)*v37;
          if (!*v37)
            goto LABEL_32;
        }
        while (1)
        {
          SpatialModelerStageFromStringId = Phase::Controller::GetSpatialModelerStageFromStringId((Phase::Controller *)(v15 + 2), v10);
          if (!SpatialModelerStageFromStringId)
            goto LABEL_34;
          v17 = (double **)v15[10];
          if (v17)
            break;
LABEL_30:
          v15 = (_QWORD *)*v15;
          if (!v15)
            goto LABEL_31;
        }
        while (1)
        {
          SpatialModelerParameterFromStringId = Phase::Controller::GetSpatialModelerParameterFromStringId((Phase::Controller *)(v17 + 2), v10);
          if (!SpatialModelerParameterFromStringId)
            break;
          v19 = Phase::Envelope<double>::operator()(v17 + 8, a3);
          v20 = v19;
          v21 = (char *)a4[1];
          v22 = (char *)a4[2];
          if (v21 >= v22)
          {
            v24 = 0xAAAAAAAAAAAAAAABLL * ((v21 - (_BYTE *)*a4) >> 3);
            v25 = v24 + 1;
            if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            v26 = 0xAAAAAAAAAAAAAAABLL * ((v22 - (_BYTE *)*a4) >> 3);
            if (2 * v26 > v25)
              v25 = 2 * v26;
            if (v26 >= 0x555555555555555)
              v27 = 0xAAAAAAAAAAAAAAALL;
            else
              v27 = v25;
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a4 + 2), v27);
            v29 = &v28[24 * v24];
            *(_DWORD *)v29 = SpatialCategoryFromStringId;
            *((_DWORD *)v29 + 1) = SpatialModelerGraphFromStringId;
            *((_DWORD *)v29 + 2) = SpatialModelerStageFromStringId;
            *((_DWORD *)v29 + 3) = SpatialModelerParameterFromStringId;
            *((double *)v29 + 2) = v20;
            v31 = (char *)*a4;
            v30 = (char *)a4[1];
            v32 = v29;
            if (v30 != *a4)
            {
              do
              {
                v33 = *(_OWORD *)(v30 - 24);
                *((_QWORD *)v32 - 1) = *((_QWORD *)v30 - 1);
                *(_OWORD *)(v32 - 24) = v33;
                v32 -= 24;
                v30 -= 24;
              }
              while (v30 != v31);
              v30 = (char *)*a4;
            }
            v23 = v29 + 24;
            *a4 = v32;
            a4[1] = v29 + 24;
            a4[2] = &v28[24 * (_QWORD)v10];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_DWORD *)v21 = SpatialCategoryFromStringId;
            *((_DWORD *)v21 + 1) = SpatialModelerGraphFromStringId;
            *((_DWORD *)v21 + 2) = SpatialModelerStageFromStringId;
            *((_DWORD *)v21 + 3) = SpatialModelerParameterFromStringId;
            v23 = v21 + 24;
            *((double *)v21 + 2) = v19;
          }
          a4[1] = v23;
          v17 = (double **)*v17;
          if (!v17)
            goto LABEL_30;
        }
LABEL_34:
        std::terminate();
      }
    }
    else
    {
      v34 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                          + 784)));
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        v35 = *((double *)a2 + 1);
        *(_DWORD *)buf = 136315650;
        v39 = "ProfileRegistry.mm";
        v40 = 1024;
        v41 = 806;
        v42 = 2080;
        v43 = v35;
        _os_log_impl(&dword_2164CC000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: Couldn't find profile %s. Returning empty parameters.", buf, 0x1Cu);
      }

    }
  }
  else
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 784));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      v39 = "ProfileRegistry.mm";
      v40 = 1024;
      v41 = 773;
      v42 = 2048;
      v43 = a3;
      v44 = 2048;
      v45 = 0;
      v46 = 2048;
      v47 = 0x3FF0000000000000;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d inBalance %f out-of-range [%f, %f]!", buf, 0x30u);
    }
  }
}

void sub_216687440(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::ProfileRegistry::GetComputeWeights(Phase::Controller::ProfileRegistry *this@<X0>, const Phase::StringId *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  _QWORD *v6;
  const Phase::StringId *v7;
  _QWORD *v8;
  _QWORD **v9;
  Phase::Logger *SpatialCategoryFromStringId;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  uint64_t **v16;
  uint64_t *i;
  unint64_t v18;
  _QWORD *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t j;
  int v39;
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v6 = std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::find<Phase::StringId>(this, (unint64_t *)a2);
  if (v6)
  {
    v8 = (_QWORD *)v6[13];
    if (!v8)
      return;
    v9 = (_QWORD **)(a3 + 16);
    while (1)
    {
      SpatialCategoryFromStringId = (Phase::Logger *)Phase::Controller::GetSpatialCategoryFromStringId((Phase::Controller *)(v8 + 2), v7);
      v11 = (int)SpatialCategoryFromStringId;
      v12 = v8[11];
      v13 = (int)SpatialCategoryFromStringId;
      v14 = *(_QWORD *)(a3 + 8);
      if (v14)
      {
        v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          v3 = (int)SpatialCategoryFromStringId;
          if (v14 <= (int)SpatialCategoryFromStringId)
            v3 = (int)SpatialCategoryFromStringId % v14;
        }
        else
        {
          v3 = (v14 - 1) & (int)SpatialCategoryFromStringId;
        }
        v16 = *(uint64_t ***)(*(_QWORD *)a3 + 8 * v3);
        if (v16)
        {
          for (i = *v16; i; i = (uint64_t *)*i)
          {
            v18 = i[1];
            if (v18 == (int)SpatialCategoryFromStringId)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)SpatialCategoryFromStringId)
              {
                v31 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(SpatialCategoryFromStringId) + 784));
                if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                {
                  v33 = v8[3];
                  v34 = v8[9];
                  v39 = 136315906;
                  v40 = "ProfileRegistry.mm";
                  v41 = 1024;
                  v42 = 825;
                  v43 = 2080;
                  v44 = v33;
                  v45 = 2080;
                  v46 = v34;
                  _os_log_impl(&dword_2164CC000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: Failed to insert [%s, %s]!", (uint8_t *)&v39, 0x26u);
                }

                if (*(_QWORD *)(a3 + 24))
                {
                  v35 = *v9;
                  if (*v9)
                  {
                    do
                    {
                      v36 = (_QWORD *)*v35;
                      operator delete(v35);
                      v35 = v36;
                    }
                    while (v36);
                  }
                  *(_QWORD *)(a3 + 16) = 0;
                  v37 = *(_QWORD *)(a3 + 8);
                  if (v37)
                  {
                    for (j = 0; j != v37; ++j)
                      *(_QWORD *)(*(_QWORD *)a3 + 8 * j) = 0;
                  }
                  *(_QWORD *)(a3 + 24) = 0;
                }
                return;
              }
            }
            else
            {
              if (v15.u32[0] > 1uLL)
              {
                if (v18 >= v14)
                  v18 %= v14;
              }
              else
              {
                v18 &= v14 - 1;
              }
              if (v18 != v3)
                break;
            }
          }
        }
      }
      v19 = operator new(0x20uLL);
      *v19 = 0;
      v19[1] = v13;
      *((_DWORD *)v19 + 4) = v11;
      v19[3] = v12;
      v20 = (float)(unint64_t)(*(_QWORD *)(a3 + 24) + 1);
      v21 = *(float *)(a3 + 32);
      if (!v14 || (float)(v21 * (float)v14) < v20)
      {
        v22 = (v14 & (v14 - 1)) != 0;
        if (v14 < 3)
          v22 = 1;
        v23 = v22 | (2 * v14);
        v24 = vcvtps_u32_f32(v20 / v21);
        if (v23 <= v24)
          v25 = v24;
        else
          v25 = v23;
        std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a3, v25);
        v14 = *(_QWORD *)(a3 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v14 <= v13)
            v3 = v13 % v14;
          else
            v3 = v13;
        }
        else
        {
          v3 = (v14 - 1) & v13;
        }
      }
      v26 = *(_QWORD *)a3;
      v27 = *(_QWORD **)(*(_QWORD *)a3 + 8 * v3);
      if (v27)
        break;
      *v19 = *v9;
      *v9 = v19;
      *(_QWORD *)(v26 + 8 * v3) = v9;
      if (*v19)
      {
        v28 = *(_QWORD *)(*v19 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v28 >= v14)
            v28 %= v14;
        }
        else
        {
          v28 &= v14 - 1;
        }
        v27 = (_QWORD *)(*(_QWORD *)a3 + 8 * v28);
        goto LABEL_40;
      }
LABEL_41:
      ++*(_QWORD *)(a3 + 24);
      v8 = (_QWORD *)*v8;
      if (!v8)
        return;
    }
    *v19 = *v27;
LABEL_40:
    *v27 = v19;
    goto LABEL_41;
  }
  v29 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                      + 784)));
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    v30 = *((_QWORD *)a2 + 1);
    v39 = 136315650;
    v40 = "ProfileRegistry.mm";
    v41 = 1024;
    v42 = 836;
    v43 = 2080;
    v44 = v30;
    _os_log_impl(&dword_2164CC000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: Couldn't find profile %s. Returning an empty map.", (uint8_t *)&v39, 0x1Cu);
  }

}

void sub_216687864(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ProfileRegistry::GetComputeTime(Phase::Controller::ProfileRegistry *this, const Phase::StringId *a2)
{
  _QWORD *v3;
  NSObject *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::find<Phase::StringId>(this, (unint64_t *)a2);
  if (v3)
    return v3[8];
  v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                     + 784)));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = *((_QWORD *)a2 + 1);
    v7 = 136315650;
    v8 = "ProfileRegistry.mm";
    v9 = 1024;
    v10 = 852;
    v11 = 2080;
    v12 = v6;
    _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: Couldn't find profile %s. Returning std::nullopt.", (uint8_t *)&v7, 0x1Cu);
  }

  return 0;
}

void Phase::Controller::ProfileRegistry::GetOverflowParameters(Phase::Controller::ProfileRegistry *this@<X0>, const Phase::StringId *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  char v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::find<Phase::StringId>(this, (unint64_t *)a2);
  if (v5)
  {
    *(_OWORD *)a3 = *(_OWORD *)(v5 + 9);
    v6 = 1;
  }
  else
  {
    v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                       + 784)));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = *((_QWORD *)a2 + 1);
      v9 = 136315650;
      v10 = "ProfileRegistry.mm";
      v11 = 1024;
      v12 = 867;
      v13 = 2080;
      v14 = v8;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: Couldn't find profile %s. Returning std::nullopt.", (uint8_t *)&v9, 0x1Cu);
    }

    v6 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v6;
}

void Phase::Controller::ProfileRegistryException::MissingRequiredField::~MissingRequiredField(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::ProfileRegistryException::FieldWithWrongType::~FieldWithWrongType(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::ProfileRegistryException::EmptyString::~EmptyString(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::ProfileRegistryException::InvalidString::~InvalidString(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::ProfileRegistryException::InvalidEnvelopeStartPoint::~InvalidEnvelopeStartPoint(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::ProfileRegistryException::InvalidNumber::~InvalidNumber(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::ProfileRegistryException::InvalidEnvelopeSegmentType::~InvalidEnvelopeSegmentType(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::ProfileRegistryException::NilURL::~NilURL(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::ProfileRegistryException::InvalidURL::~InvalidURL(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::ProfileRegistryException::InvalidJSON::~InvalidJSON(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

uint64_t std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Category>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  unint64_t v13;
  const char *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v26;
  _QWORD v27[2];
  char v28;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD **)(a2 + 16);
  if (v5)
  {
    v26 = (_QWORD *)(a1 + 16);
    do
    {
      v6 = v5[2];
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
      {
        v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v8.i16[0] = vaddlv_u8(v8);
        v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          v2 = v5[2];
          if (v7 <= v6)
            v2 = v6 % v7;
        }
        else
        {
          v2 = (v7 - 1) & v6;
        }
        v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        if (v10)
        {
          v11 = (_QWORD *)*v10;
          if (*v10)
          {
            v12 = (const char *)v5[3];
            do
            {
              v13 = v11[1];
              if (v13 == v6)
              {
                if (v11[2] == v6)
                {
                  v14 = (const char *)v11[3];
                  if (v14 == v12 || !strcmp(v14, v12))
                    goto LABEL_44;
                }
              }
              else
              {
                if (v9 > 1)
                {
                  if (v13 >= v7)
                    v13 %= v7;
                }
                else
                {
                  v13 &= v7 - 1;
                }
                if (v13 != v2)
                  break;
              }
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
        }
      }
      v15 = operator new(0x88uLL);
      v27[0] = v15;
      v27[1] = a1 + 16;
      v28 = 0;
      *v15 = 0;
      v15[1] = v6;
      Phase::StringId::StringId((uint64_t)(v15 + 2), (uint64_t)(v5 + 2));
      Phase::StringId::StringId((uint64_t)(v15 + 5), (uint64_t)(v5 + 5));
      Phase::StringId::StringId((uint64_t)(v15 + 8), (uint64_t)(v5 + 8));
      v15[11] = v5[11];
      std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>::unordered_map((uint64_t)(v15 + 12), (uint64_t)(v5 + 12));
      v28 = 1;
      v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v17 = *(float *)(a1 + 32);
      if (!v7 || (float)(v17 * (float)v7) < v16)
      {
        v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v18 = 1;
        v19 = v18 | (2 * v7);
        v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v21);
        v7 = *(_QWORD *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v2 = v6 % v7;
          else
            v2 = v6;
        }
        else
        {
          v2 = (v7 - 1) & v6;
        }
      }
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v23)
      {
        *v15 = *v23;
      }
      else
      {
        *v15 = *v26;
        *v26 = v15;
        *(_QWORD *)(v22 + 8 * v2) = v26;
        if (!*v15)
          goto LABEL_43;
        v24 = *(_QWORD *)(*v15 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7)
            v24 %= v7;
        }
        else
        {
          v24 &= v7 - 1;
        }
        v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
      }
      *v23 = v15;
LABEL_43:
      v27[0] = 0;
      ++*(_QWORD *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,void *>>>>::reset[abi:ne180100]((uint64_t)v27);
LABEL_44:
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_216687EB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  unint64_t v13;
  const char *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v26;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD **)(a2 + 16);
  if (v5)
  {
    v26 = (_QWORD *)(a1 + 16);
    do
    {
      v6 = v5[2];
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
      {
        v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v8.i16[0] = vaddlv_u8(v8);
        v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          v2 = v5[2];
          if (v7 <= v6)
            v2 = v6 % v7;
        }
        else
        {
          v2 = (v7 - 1) & v6;
        }
        v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        if (v10)
        {
          v11 = (_QWORD *)*v10;
          if (*v10)
          {
            v12 = (const char *)v5[3];
            do
            {
              v13 = v11[1];
              if (v13 == v6)
              {
                if (v11[2] == v6)
                {
                  v14 = (const char *)v11[3];
                  if (v14 == v12 || !strcmp(v14, v12))
                    goto LABEL_44;
                }
              }
              else
              {
                if (v9 > 1)
                {
                  if (v13 >= v7)
                    v13 %= v7;
                }
                else
                {
                  v13 &= v7 - 1;
                }
                if (v13 != v2)
                  break;
              }
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
        }
      }
      v15 = operator new(0x68uLL);
      *v15 = 0;
      v15[1] = v6;
      Phase::StringId::StringId((uint64_t)(v15 + 2), (uint64_t)(v5 + 2));
      Phase::StringId::StringId((uint64_t)(v15 + 5), (uint64_t)(v5 + 5));
      std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>::unordered_map((uint64_t)(v15 + 8), (uint64_t)(v5 + 8));
      v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v17 = *(float *)(a1 + 32);
      if (!v7 || (float)(v17 * (float)v7) < v16)
      {
        v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v18 = 1;
        v19 = v18 | (2 * v7);
        v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v21);
        v7 = *(_QWORD *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v2 = v6 % v7;
          else
            v2 = v6;
        }
        else
        {
          v2 = (v7 - 1) & v6;
        }
      }
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v23)
      {
        *v15 = *v23;
      }
      else
      {
        *v15 = *v26;
        *v26 = v15;
        *(_QWORD *)(v22 + 8 * v2) = v26;
        if (!*v15)
          goto LABEL_43;
        v24 = *(_QWORD *)(*v15 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7)
            v24 %= v7;
        }
        else
        {
          v24 &= v7 - 1;
        }
        v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
      }
      *v23 = v15;
LABEL_43:
      ++*(_QWORD *)(a1 + 24);
LABEL_44:
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_2166881B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  unint64_t v13;
  const char *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v26;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD **)(a2 + 16);
  if (v5)
  {
    v26 = (_QWORD *)(a1 + 16);
    do
    {
      v6 = v5[2];
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
      {
        v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v8.i16[0] = vaddlv_u8(v8);
        v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          v2 = v5[2];
          if (v7 <= v6)
            v2 = v6 % v7;
        }
        else
        {
          v2 = (v7 - 1) & v6;
        }
        v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        if (v10)
        {
          v11 = (_QWORD *)*v10;
          if (*v10)
          {
            v12 = (const char *)v5[3];
            do
            {
              v13 = v11[1];
              if (v13 == v6)
              {
                if (v11[2] == v6)
                {
                  v14 = (const char *)v11[3];
                  if (v14 == v12 || !strcmp(v14, v12))
                    goto LABEL_44;
                }
              }
              else
              {
                if (v9 > 1)
                {
                  if (v13 >= v7)
                    v13 %= v7;
                }
                else
                {
                  v13 &= v7 - 1;
                }
                if (v13 != v2)
                  break;
              }
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
        }
      }
      v15 = operator new(0x68uLL);
      *v15 = 0;
      v15[1] = v6;
      Phase::StringId::StringId((uint64_t)(v15 + 2), (uint64_t)(v5 + 2));
      Phase::StringId::StringId((uint64_t)(v15 + 5), (uint64_t)(v5 + 5));
      std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>::unordered_map((uint64_t)(v15 + 8), (uint64_t)(v5 + 8));
      v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v17 = *(float *)(a1 + 32);
      if (!v7 || (float)(v17 * (float)v7) < v16)
      {
        v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v18 = 1;
        v19 = v18 | (2 * v7);
        v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v21);
        v7 = *(_QWORD *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v2 = v6 % v7;
          else
            v2 = v6;
        }
        else
        {
          v2 = (v7 - 1) & v6;
        }
      }
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v23)
      {
        *v15 = *v23;
      }
      else
      {
        *v15 = *v26;
        *v26 = v15;
        *(_QWORD *)(v22 + 8 * v2) = v26;
        if (!*v15)
          goto LABEL_43;
        v24 = *(_QWORD *)(*v15 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7)
            v24 %= v7;
        }
        else
        {
          v24 &= v7 - 1;
        }
        v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
      }
      *v23 = v15;
LABEL_43:
      ++*(_QWORD *)(a1 + 24);
LABEL_44:
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_216688494(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  unint64_t v13;
  const char *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v26;
  _QWORD v27[2];
  char v28;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD **)(a2 + 16);
  if (v5)
  {
    v26 = (_QWORD *)(a1 + 16);
    do
    {
      v6 = v5[2];
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
      {
        v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v8.i16[0] = vaddlv_u8(v8);
        v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          v2 = v5[2];
          if (v7 <= v6)
            v2 = v6 % v7;
        }
        else
        {
          v2 = (v7 - 1) & v6;
        }
        v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        if (v10)
        {
          v11 = (_QWORD *)*v10;
          if (*v10)
          {
            v12 = (const char *)v5[3];
            do
            {
              v13 = v11[1];
              if (v13 == v6)
              {
                if (v11[2] == v6)
                {
                  v14 = (const char *)v11[3];
                  if (v14 == v12 || !strcmp(v14, v12))
                    goto LABEL_44;
                }
              }
              else
              {
                if (v9 > 1)
                {
                  if (v13 >= v7)
                    v13 %= v7;
                }
                else
                {
                  v13 &= v7 - 1;
                }
                if (v13 != v2)
                  break;
              }
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
        }
      }
      v15 = operator new(0x58uLL);
      v27[0] = v15;
      v27[1] = a1 + 16;
      v28 = 0;
      *v15 = 0;
      v15[1] = v6;
      Phase::StringId::StringId((uint64_t)(v15 + 2), (uint64_t)(v5 + 2));
      Phase::StringId::StringId((uint64_t)(v15 + 5), (uint64_t)(v5 + 5));
      v15[8] = 0;
      v15[9] = 0;
      v15[10] = 0;
      std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__init_with_size[abi:ne180100]<Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(v15 + 8, v5[8], v5[9], (uint64_t)(v5[9] - v5[8]) >> 6);
      v28 = 1;
      v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v17 = *(float *)(a1 + 32);
      if (!v7 || (float)(v17 * (float)v7) < v16)
      {
        v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v18 = 1;
        v19 = v18 | (2 * v7);
        v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v21);
        v7 = *(_QWORD *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v2 = v6 % v7;
          else
            v2 = v6;
        }
        else
        {
          v2 = (v7 - 1) & v6;
        }
      }
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v23)
      {
        *v15 = *v23;
      }
      else
      {
        *v15 = *v26;
        *v26 = v15;
        *(_QWORD *)(v22 + 8 * v2) = v26;
        if (!*v15)
          goto LABEL_43;
        v24 = *(_QWORD *)(*v15 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7)
            v24 %= v7;
        }
        else
        {
          v24 &= v7 - 1;
        }
        v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
      }
      *v23 = v15;
LABEL_43:
      v27[0] = 0;
      ++*(_QWORD *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,void *>>>>::reset[abi:ne180100]((uint64_t)v27);
LABEL_44:
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_2166887AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<Phase::StringId const,Phase::Controller::ProfileRegistry::Parameter>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,void *>>>::operator()[abi:ne180100](char a1, uint64_t a2)
{
  if (a1)
  {
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::~__hash_table(a2 + 64);
    if (!*(_BYTE *)(a2 + 56))
      free(*(void **)(a2 + 48));
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = &str_33;
    *(_BYTE *)(a2 + 56) = 1;
    if (!*(_BYTE *)(a2 + 32))
      free(*(void **)(a2 + 24));
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,void *>>>::operator()[abi:ne180100](char a1, uint64_t a2)
{
  if (a1)
  {
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::~__hash_table(a2 + 64);
    if (!*(_BYTE *)(a2 + 56))
      free(*(void **)(a2 + 48));
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = &str_33;
    *(_BYTE *)(a2 + 56) = 1;
    if (!*(_BYTE *)(a2 + 32))
      free(*(void **)(a2 + 24));
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<Phase::StringId const,Phase::Controller::ProfileRegistry::Category>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void Phase::Controller::ProfileRegistryException::InvalidEnvelopeDomain::~InvalidEnvelopeDomain(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::ProfileRegistryException::InvalidSpatialModeler::~InvalidSpatialModeler(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::ProfileRegistryException::InvalidEnvelopeRange::~InvalidEnvelopeRange(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

void std::__introsort<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  char v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  char v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v71;
  uint64_t v72;
  char v73[8];
  void *v74;
  char v75;
  unint64_t v76;
  void *v77;
  char v78;

void sub_21668920C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, char a16)
{
  if (!a16)
    free(a15);
  _Unwind_Resume(exception_object);
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>(uint64_t a1, uint64_t a2)
{
  _BYTE v4[8];
  void *v5;
  char v6;

  Phase::StringId::StringId((uint64_t)v4, a1);
  Phase::StringId::operator=(a1, a2);
  Phase::StringId::operator=(a2, (uint64_t)v4);
  if (!v6)
    free(v5);
}

void sub_2166892E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, char a12)
{
  if (!a12)
    free(a11);
  _Unwind_Resume(exception_object);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = a1;
  v6 = *a2;
  v7 = *a3;
  if (*a2 < *a1)
  {
    if (v7 >= v6)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)a1, (uint64_t)a2);
      if (*a3 >= *a2)
        return;
      a1 = a2;
    }
    v8 = (uint64_t)a3;
    goto LABEL_9;
  }
  if (v7 < v6)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)a2, (uint64_t)a3);
    if (*a2 < *v5)
    {
      a1 = v5;
      v8 = (uint64_t)a2;
LABEL_9:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)a1, v8);
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(unint64_t *a1, unint64_t *a2)
{
  _BOOL8 v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v18;
  void *v19;
  char v20;

  v4 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      if (*(a2 - 3) < *a1)
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)a1, (uint64_t)(a2 - 3));
      return v4;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, a1 + 3, a2 - 3);
      return v4;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, a1 + 3, a1 + 6, a2 - 3);
      return v4;
    case 5uLL:
      v12 = a1 + 3;
      v13 = a1 + 6;
      v14 = a1 + 9;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, a1 + 3, a1 + 6, a1 + 9);
      v16 = *(a2 - 3);
      v15 = (uint64_t)(a2 - 3);
      if (v16 < a1[9])
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)(a1 + 9), v15);
        if (*v14 < *v13)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)(a1 + 6), (uint64_t)(a1 + 9));
          if (*v13 < *v12)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)(a1 + 3), (uint64_t)(a1 + 6));
            if (a1[3] < *a1)
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)a1, (uint64_t)(a1 + 3));
          }
        }
      }
      return 1;
    default:
      v5 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, a1 + 3, a1 + 6);
      v6 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v7 = 0;
      v8 = 0;
      break;
  }
  while (*v6 >= *v5)
  {
LABEL_15:
    v5 = v6;
    v7 += 24;
    v6 += 3;
    if (v6 == a2)
      return 1;
  }
  Phase::StringId::StringId((uint64_t)&v18, (uint64_t)v6);
  v9 = v7;
  while (1)
  {
    Phase::StringId::operator=((uint64_t)a1 + v9 + 72, (uint64_t)a1 + v9 + 48);
    if (v9 == -48)
      break;
    v10 = *(unint64_t *)((char *)a1 + v9 + 24);
    v9 -= 24;
    if (v18 >= v10)
    {
      v11 = (uint64_t)a1 + v9 + 72;
      goto LABEL_12;
    }
  }
  v11 = (uint64_t)a1;
LABEL_12:
  Phase::StringId::operator=(v11, (uint64_t)&v18);
  if (++v8 != 8)
  {
    if (!v20)
      free(v19);
    goto LABEL_15;
  }
  v4 = v6 + 3 == a2;
  if (!v20)
    free(v19);
  return v4;
}

void sub_2166895E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, char a12)
{
  if (!a12)
    free(a11);
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, a2, a3);
  if (*a4 < *a3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)a3, (uint64_t)a4);
    if (*a3 < *a2)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)a2, (uint64_t)a3);
      if (*a2 < *a1)
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)a1, (uint64_t)a2);
    }
  }
}

void std::vector<Phase::StringId>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (!*((_BYTE *)v4 - 8))
          free(*(v4 - 2));
        *(v4 - 3) = 0;
        *(v4 - 2) = &str_33;
        *((_BYTE *)v4 - 8) = 1;
        v4 -= 3;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Phase::Controller::ProfileRegistryException::DuplicateEntry::~DuplicateEntry(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,void *>>>::operator()[abi:ne180100](char a1, uint64_t a2)
{
  if (a1)
  {
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::~__hash_table(a2 + 88);
    if (!*(_BYTE *)(a2 + 56))
      free(*(void **)(a2 + 48));
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = &str_33;
    *(_BYTE *)(a2 + 56) = 1;
    if (!*(_BYTE *)(a2 + 32))
      free(*(void **)(a2 + 24));
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

_QWORD *std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::find<Phase::StringId>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  unint64_t v10;
  const char *v11;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  v5 = v4.u32[0];
  if (v4.u32[0] > 1uLL)
  {
    v6 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v6 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v6 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  v8 = (_QWORD *)*v7;
  if (*v7)
  {
    v9 = (const char *)a2[1];
    do
    {
      v10 = v8[1];
      if (v3 == v10)
      {
        if (v8[2] == v3)
        {
          v11 = (const char *)v8[3];
          if (v11 == v9 || !strcmp(v11, v9))
            return v8;
        }
      }
      else
      {
        if (v5 > 1)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v6)
          return 0;
      }
      v8 = (_QWORD *)*v8;
    }
    while (v8);
  }
  return v8;
}

int64x2_t *Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(Phase::DspLayer::PullStreamSampler *this)
{
  char *v1;
  int64x2_t *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v6[2];
  char v7;
  void *__p[2];
  char v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v1 = (char *)malloc_type_malloc(0xA8uLL, 0x1050040B063AAFAuLL);
  *(_QWORD *)v1 = "Gain";
  *((_QWORD *)v1 + 1) = 0x500000000;
  *(_QWORD *)(v1 + 20) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_21673A710;
  *((_QWORD *)v1 + 6) = 0x3FF0000000000000;
  *((_QWORD *)v1 + 7) = "Gain Interpolation Duration";
  *((_QWORD *)v1 + 8) = 0x500000001;
  *(_QWORD *)(v1 + 76) = 0x100000000;
  *((_DWORD *)v1 + 21) = 3;
  *(_OWORD *)(v1 + 88) = xmmword_21673A720;
  *((_QWORD *)v1 + 13) = 0x3F91111120000000;
  *((_QWORD *)v1 + 14) = "Gain Damping Constant";
  *((_QWORD *)v1 + 15) = 0x500000002;
  *(_QWORD *)(v1 + 132) = 0x100000000;
  *((_DWORD *)v1 + 35) = 3;
  *((_OWORD *)v1 + 9) = xmmword_21673A730;
  *((_QWORD *)v1 + 20) = 0x3FF0000000000000;
  v2 = (int64x2_t *)operator new();
  v10[0] = &off_24D5806E8;
  v11 = v10;
  Phase::Controller::VoicePoolEntry::VoicePoolEntry((uint64_t)v2, "PullStreamSampler", 3, (uint64_t)v1, (uint64_t)v10);
  v3 = v11;
  if (v11 == v10)
  {
    v4 = 4;
    v3 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(__p, "Output");
  Phase::Controller::VoicePoolEntry::AddOutput(v2->i64, (__int128 *)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "buffer0");
  Phase::Controller::VoicePoolEntry::AddBuffer(v2, 0, (uint64_t)v6, 3, 1);
  if (v7 < 0)
    operator delete(v6[0]);
  return v2;
}

void sub_216689B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::PullStreamSampler::~PullStreamSampler(Phase::DspLayer::PullStreamSampler *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);
  JUMPOUT(0x2199F9D70);
}

void `anonymous namespace'::PullStreamSamplerSlice::~PullStreamSamplerSlice(_anonymous_namespace_::PullStreamSamplerSlice *this)
{
  JUMPOUT(0x2199F9D70);
}

double `anonymous namespace'::PullStreamSamplerSlice::Reset(_anonymous_namespace_::PullStreamSamplerSlice *this, Phase::DspLayer::VoiceEngine *a2)
{
  uint64_t v3;
  uint64_t v9;
  double result;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v3 = 0;
  v13 = *MEMORY[0x24BDAC8D0];
  __asm { FMOV            V1.4S, #1.0 }
  *((_OWORD *)this + 1) = _Q1;
  *((int32x4_t *)this + 2) = vdupq_n_s32(0x3C888889u);
  *((_OWORD *)this + 3) = _Q1;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  v11 = _Q1;
  v12 = xmmword_2166F7490;
  do
  {
    *((_DWORD *)this + *(int *)((char *)&v11 + v3 + 16) + 76) = *(_DWORD *)((char *)&v11 + v3);
    v3 += 4;
  }
  while (v3 != 16);
  v9 = 0;
  v12 = xmmword_2166F7490;
  v11 = 0uLL;
  do
  {
    *((_DWORD *)this + *(int *)((char *)&v11 + v9 + 16) + 80) = *(_DWORD *)((char *)&v11 + v9);
    v9 += 4;
  }
  while (v9 != 16);
  (*(void (**)(_anonymous_namespace_::PullStreamSamplerSlice *, Phase::DspLayer::VoiceEngine *))(*(_QWORD *)this + 48))(this, a2);
  result = 0.0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  return result;
}

uint64_t `anonymous namespace'::PullStreamSamplerSlice::Reset(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  _DWORD *v7;
  uint64_t v8;
  uint64_t result;

  v7 = (_DWORD *)a1 + a3;
  v7[4] = 1065353216;
  v7[8] = 1015580809;
  v7[12] = 1065353216;
  v7[16] = 0;
  v8 = *a1;
  a1[a3 + 10] = 0;
  *((_DWORD *)a1 + a3 + 28) = 0;
  v7[72] = 0;
  v7[76] = 1065353216;
  v7[80] = 0;
  result = (*(uint64_t (**)(void))(v8 + 56))();
  a1[a3 + 42] = a4;
  return result;
}

uint64_t `anonymous namespace'::PullStreamSamplerSlice::GetParameter(_anonymous_namespace_::PullStreamSamplerSlice *this, unsigned int a2)
{
  if (a2 > 2)
    return 9;
  else
    return 0;
}

uint64_t `anonymous namespace'::PullStreamSamplerSlice::SetParameter(_anonymous_namespace_::PullStreamSamplerSlice *this, int a2, int a3, double a4)
{
  uint64_t result;
  float v6;
  float v7;
  float v8;

  if (a2 == 2)
  {
    result = 0;
    v7 = a4;
    *((float *)this + a3 + 12) = v7;
  }
  else if (a2 == 1)
  {
    result = 0;
    v8 = a4;
    *((float *)this + a3 + 8) = v8;
  }
  else if (a2)
  {
    return 9;
  }
  else
  {
    result = 0;
    v6 = a4;
    *((float *)this + a3 + 4) = v6;
  }
  return result;
}

int32x4_t `anonymous namespace'::PullStreamSamplerSlice::UpdateParameters(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  int32x4_t result;
  int32x4_t v4;
  __int128 v5;

  v1 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 272) = v1;
  v2 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a1 + 80);
  result = *(int32x4_t *)(a1 + 272);
  v4.i64[0] = -1;
  v4.i64[1] = -1;
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 128) = v2;
  *(int32x4_t *)(a1 + 144) = result;
  *(int32x4_t *)(a1 + 160) = vaddq_s32(result, v4);
  *(_OWORD *)(a1 + 176) = v5;
  return result;
}

uint64_t `anonymous namespace'::PullStreamSamplerSlice::UpdateParameters(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;
  float *v11;
  float v12;
  _DWORD *v13;

  *(_QWORD *)(result + 240 + 8 * a3) = *(_QWORD *)(result + 80 + 8 * a3);
  v3 = *(_DWORD *)(result + 80 + 4 * a3 + 32);
  *(_DWORD *)(result + 240 + 4 * a3 + 32) = v3;
  v4 = result + 4 * a3;
  v5 = *(_DWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 16);
  v7 = *(float *)(v4 + 32);
  if (v7 >= 0.001)
  {
    v9 = 6.2832 / v7;
    v10 = v9 * v9;
    v11 = (float *)(result + 4 * a3);
    v12 = v9 * (float)(v11[12] + v11[12]);
    v11[52] = v10;
    v11[56] = v12;
  }
  else
  {
    v8 = result + 4 * a3;
    *(_DWORD *)(v8 + 320) = 0;
    *(_DWORD *)(v8 + 304) = v6;
  }
  v13 = (_DWORD *)(result + 4 * a3);
  v13[32] = v5;
  v13[36] = v3;
  v13[40] = v3 - 1;
  v13[44] = v6;
  return result;
}

int32x4_t `anonymous namespace'::PullStreamSamplerSlice::Run(_anonymous_namespace_::PullStreamSamplerSlice *this, Phase::DspLayer::VoiceEngine *a2, Phase::DspLayer::VoicePool *a3, int a4)
{
  int32x4_t v7;
  int8x16_t v8;
  int32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  char v12;
  int32x4_t v13;
  float32x4_t v14;
  int v15;
  unint64_t v16;
  int32x4_t v17;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t result;
  _QWORD v27[2];
  int32x4_t v28;
  unsigned int v29[6];
  _QWORD v30[2];

  v30[1] = *MEMORY[0x24BDAC8D0];
  v7 = *((int32x4_t *)this + 18);
  v8 = vandq_s8((int8x16_t)vceqzq_s32(v7), (int8x16_t)xmmword_21673A740);
  v9 = (int32x4_t)vorrq_s8(vextq_s8(v8, v8, 8uLL), v8);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s32(v9, 3), (int8x16_t)v9).u32[0] & a4) != 0)
  {
    MEMORY[0x24BDAC7A8](this);
    v30[0] = v27;
    v27[0] = 0;
    v27[1] = 0;
    v29[0] = 1;
    v29[2] = 2;
    v28 = v10;
    Phase::DspLayer::VoicePool::ExternalCallbackWithMessage(v11, 0, (uint64_t *)this + 42, v12, v29, v30);
    v7 = v28;
  }
  v13 = *((int32x4_t *)this + 9);
  v14 = 0uLL;
  HIDWORD(v16) = a4 - 1;
  LODWORD(v16) = a4 - 1;
  v15 = v16 >> 1;
  v17 = vminq_s32(vmaxq_s32(v7, (int32x4_t)0), *((int32x4_t *)this + 10));
  switch(v15)
  {
    case 0:
      v14.i32[0] = *(_DWORD *)(*((_QWORD *)this + 30) + 4 * v17.i32[0]);
      break;
    case 1:
      v14.i32[0] = *(_DWORD *)(*((_QWORD *)this + 30) + 4 * v17.i32[0]);
      v14.i32[1] = *(_DWORD *)(*((_QWORD *)this + 31) + 4 * v17.i32[1]);
      break;
    case 3:
      v14.i32[0] = *(_DWORD *)(*((_QWORD *)this + 30) + 4 * v17.i32[0]);
      v14.i32[1] = *(_DWORD *)(*((_QWORD *)this + 31) + 4 * v17.i32[1]);
      v14.i32[2] = *(_DWORD *)(*((_QWORD *)this + 32) + 4 * v17.i32[2]);
      break;
    case 7:
      v14.i32[0] = *(_DWORD *)(*((_QWORD *)this + 30) + 4 * v17.i32[0]);
      v14.i32[1] = *(_DWORD *)(*((_QWORD *)this + 31) + 4 * v17.i32[1]);
      v14.i32[2] = *(_DWORD *)(*((_QWORD *)this + 32) + 4 * v17.i32[2]);
      v14.i32[3] = *(_DWORD *)(*((_QWORD *)this + 33) + 4 * v17.i32[3]);
      break;
    default:
      break;
  }
  v18 = *((float *)a2 + 2);
  v19 = *((float32x4_t *)this + 19);
  v20 = vmlaq_n_f32(*((float32x4_t *)this + 20), vmlaq_f32(vmulq_f32(*((float32x4_t *)this + 20), vnegq_f32(*((float32x4_t *)this + 14))), vsubq_f32(*((float32x4_t *)this + 11), v19), *((float32x4_t *)this + 13)), v18);
  v21 = vmlaq_n_f32(v19, v20, v18);
  *((float32x4_t *)this + 19) = v21;
  *((float32x4_t *)this + 20) = v20;
  v22 = vmulq_f32(v14, v21);
  v23 = vandq_s8((int8x16_t)v22, vorrq_s8((int8x16_t)vcltzq_f32(v22), (int8x16_t)vcgezq_f32(v22)));
  switch(v15)
  {
    case 0:
      goto LABEL_12;
    case 1:
      goto LABEL_11;
    case 3:
      goto LABEL_10;
    case 7:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * *((int *)this + 35)) = v23.i32[3];
LABEL_10:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * *((int *)this + 34)) = v23.i32[2];
LABEL_11:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * *((int *)this + 33)) = v23.i32[1];
LABEL_12:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * *((int *)this + 32)) = v23.i32[0];
      break;
    default:
      break;
  }
  v24.i64[0] = 0x100000001;
  v24.i64[1] = 0x100000001;
  v25 = vaddq_s32(v7, v24);
  result = vsubq_s32(v25, (int32x4_t)vbicq_s8((int8x16_t)v13, (int8x16_t)vcgtq_s32(v13, v25)));
  *((int32x4_t *)this + 18) = result;
  return result;
}

uint64_t `anonymous namespace'::PullStreamSamplerSlice::OnPlay(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  *(_DWORD *)(result + 4 * (int)a4 + 288) = *(_DWORD *)(a2 + 28);
  if (*(int *)(a2 + 28) >= 1)
  {
    v6 = result;
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)result + 192))(result, 0, a4, *(_QWORD *)(a2 + 74944), *(unsigned int *)(a2 + 24));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 56))(v6, a2, a4);
  }
  return result;
}

uint64_t `anonymous namespace'::PullStreamSamplerSlice::OnResume(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

float `anonymous namespace'::PullStreamSamplerSlice::CopyVoiceState(_anonymous_namespace_::PullStreamSamplerSlice *this, Phase::DspLayer::VoicePoolSlice *a2, unsigned int a3, unsigned int a4)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  char *v7;
  char *v8;
  float result;

  v4 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  v5 = (_DWORD *)((char *)this + 4 * (int)a4);
  v5[4] = v4[4];
  v5[8] = v4[8];
  v5[12] = v4[12];
  v5[16] = v4[16];
  *((_QWORD *)this + (int)a4 + 10) = *((_QWORD *)a2 + (int)a3 + 10);
  *((_DWORD *)this + (int)a4 + 28) = *((_DWORD *)a2 + (int)a3 + 28);
  v5[32] = v4[32];
  v5[36] = v4[36];
  v5[40] = v4[40];
  v5[44] = v4[44];
  v5[52] = v4[52];
  v6 = v4[56];
  *((_QWORD *)this + (int)a4 + 30) = *((_QWORD *)a2 + (int)a3 + 30);
  v5[56] = v6;
  *((_DWORD *)this + (int)a4 + 68) = *((_DWORD *)a2 + (int)a3 + 68);
  if (a3 >= 4)
    __assert_rtn("Copy", "DelaylineLinear.hpp", 507, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  if (a4 >= 4)
    __assert_rtn("Copy", "DelaylineLinear.hpp", 508, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  v7 = (char *)a2 + 4 * a3;
  v8 = (char *)this + 4 * a4;
  *((_DWORD *)v8 + 72) = *((_DWORD *)v7 + 72);
  *((_DWORD *)v8 + 76) = *((_DWORD *)v7 + 76);
  result = *((float *)v7 + 80);
  *((float *)v8 + 80) = result;
  *((_QWORD *)this + (int)a4 + 42) = *((_QWORD *)a2 + (int)a3 + 42);
  return result;
}

unint64_t `anonymous namespace'::PullStreamSamplerSlice::GetOutput(_anonymous_namespace_::PullStreamSamplerSlice *this, int a2, int a3)
{
  if (a2)
    return 0xFFFFFFFF00000008;
  else
    return (unint64_t)*((unsigned int *)this + a3 + 16) << 32;
}

uint64_t `anonymous namespace'::PullStreamSamplerSlice::SetOutput(_anonymous_namespace_::PullStreamSamplerSlice *this, int a2, int a3, int a4)
{
  uint64_t result;

  if (a2)
    return 8;
  result = 0;
  *((_DWORD *)this + a3 + 16) = a4;
  return result;
}

uint64_t `anonymous namespace'::PullStreamSamplerSlice::GetBuffer@<X0>(uint64_t this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;

  if (a2)
  {
    v4 = 0;
    v5 = -1;
    v6 = 10;
  }
  else
  {
    v6 = 0;
    v4 = *(_QWORD *)(this + 80 + 8 * a3);
    v5 = *(_DWORD *)(this + 80 + 4 * a3 + 32);
  }
  *(_DWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v5;
  return this;
}

uint64_t `anonymous namespace'::PullStreamSamplerSlice::SetBuffer(_anonymous_namespace_::PullStreamSamplerSlice *this, int a2, int a3, void *a4, int a5)
{
  uint64_t result;

  if (a2)
    return 10;
  result = 0;
  this = (_anonymous_namespace_::PullStreamSamplerSlice *)((char *)this + 80);
  *((_QWORD *)this + a3) = a4;
  *((_DWORD *)this + a3 + 8) = a5;
  return result;
}

void std::__function::__func<Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D5806E8;
  return result;
}

void std::__function::__func<Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D5806E8;
}

uint64_t std::__function::__func<Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()(uint64_t a1, Phase::DspLayer::VoiceEngine **a2, int *a3)
{
  Phase::DspLayer::VoiceEngine *v3;
  int v4;
  uint64_t v5;
  int v6;
  Phase::DspLayer::VoiceEngine *v7;
  _anonymous_namespace_::PullStreamSamplerSlice *v8;

  v3 = *a2;
  v4 = *a3;
  v5 = operator new();
  Phase::DspLayer::VoicePool::VoicePool((Phase::DspLayer::VoicePool *)v5, "PullStreamSampler", v3, v4, 368);
  *(_QWORD *)v5 = &off_24D5805F0;
  if (*(int *)(v5 + 40) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(Phase::DspLayer::VoiceEngine **)(v5 + 32);
      v8 = (_anonymous_namespace_::PullStreamSamplerSlice *)(*(_QWORD *)(v5 + 24) + *(int *)(v5 + 16) * (uint64_t)v6);
      *(_QWORD *)v8 = &off_24D580610;
      *((_QWORD *)v8 + 1) = 0;
      ++v6;
    }
    while (v6 < *(_DWORD *)(v5 + 40));
  }
  return v5;
}

void sub_21668A4C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

int64x2_t *Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(Phase::DspLayer::PushStreamSampler *this)
{
  char *v1;
  int64x2_t *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  void *__p[2];
  char v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v1 = (char *)malloc_type_malloc(0x1F8uLL, 0x1050040B063AAFAuLL);
  *(_QWORD *)v1 = "Rate";
  *((_QWORD *)v1 + 1) = 0x500000000;
  *(_QWORD *)(v1 + 20) = 0x200000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2166F7740;
  *((_QWORD *)v1 + 6) = 0x3FF0000000000000;
  *((_QWORD *)v1 + 7) = "Gain";
  *((_QWORD *)v1 + 8) = 0x500000001;
  *(_QWORD *)(v1 + 76) = 0x100000000;
  *((_DWORD *)v1 + 21) = 3;
  *(_OWORD *)(v1 + 88) = xmmword_21673A710;
  *((_QWORD *)v1 + 13) = 0x3FF0000000000000;
  *((_QWORD *)v1 + 14) = "ReferenceHF";
  *((_QWORD *)v1 + 15) = 0x500000002;
  *(_QWORD *)(v1 + 132) = 0x100000000;
  *((_DWORD *)v1 + 35) = 3;
  *((_OWORD *)v1 + 9) = xmmword_21673A770;
  *((_QWORD *)v1 + 20) = 0x40B3880000000000;
  *((_QWORD *)v1 + 21) = "GainHF";
  *((_QWORD *)v1 + 22) = 0x500000003;
  *(_QWORD *)(v1 + 188) = 0x100000000;
  *((_DWORD *)v1 + 49) = 3;
  *(_OWORD *)(v1 + 200) = xmmword_2166F7470;
  *((_QWORD *)v1 + 27) = 0x3FF0000000000000;
  *((_QWORD *)v1 + 28) = "ReferenceLF";
  *((_QWORD *)v1 + 29) = 0x500000004;
  *(_QWORD *)(v1 + 244) = 0x100000000;
  *((_DWORD *)v1 + 63) = 3;
  *((_OWORD *)v1 + 16) = xmmword_21673A770;
  *((_QWORD *)v1 + 34) = 0x407F400000000000;
  *((_QWORD *)v1 + 35) = "GainLF";
  *((_QWORD *)v1 + 36) = 0x500000005;
  *((_DWORD *)v1 + 75) = 0;
  *((_QWORD *)v1 + 38) = 0x300000001;
  *((_QWORD *)v1 + 39) = 0;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)v1 + 20) = _Q1;
  *((_QWORD *)v1 + 42) = "SeekPointInSeconds";
  *((_QWORD *)v1 + 43) = 0x500000006;
  *((_DWORD *)v1 + 89) = 0;
  *((_QWORD *)v1 + 45) = 0x300000002;
  *((_OWORD *)v1 + 23) = xmmword_21673A780;
  *((_QWORD *)v1 + 48) = 0;
  *((_QWORD *)v1 + 49) = "Gain Interpolation Duration";
  *((_QWORD *)v1 + 50) = 0x500000007;
  *((_DWORD *)v1 + 103) = 0;
  *((_QWORD *)v1 + 52) = 0x300000001;
  *((_QWORD *)v1 + 53) = 0;
  *((_OWORD *)v1 + 27) = xmmword_21673A790;
  *((_QWORD *)v1 + 56) = "Gain Damping Constant";
  *((_QWORD *)v1 + 57) = 0x500000008;
  *((_DWORD *)v1 + 117) = 0;
  *((_QWORD *)v1 + 59) = 0x300000001;
  *((_OWORD *)v1 + 30) = xmmword_21673A730;
  *((_QWORD *)v1 + 62) = 0x3FF0000000000000;
  v7 = (int64x2_t *)operator new();
  v15[0] = &off_24D580828;
  v16 = v15;
  Phase::Controller::VoicePoolEntry::VoicePoolEntry((uint64_t)v7, "PushStreamSampler", 9, (uint64_t)v1, (uint64_t)v15);
  v8 = v16;
  if (v16 == v15)
  {
    v9 = 4;
    v8 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(__p, "Output");
  Phase::Controller::VoicePoolEntry::AddOutput(v7->i64, (__int128 *)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v11, "buffer0");
  Phase::Controller::VoicePoolEntry::AddBuffer(v7, 0, (uint64_t)v11, 3, 1);
  if (v12 < 0)
    operator delete(v11[0]);
  return v7;
}

void sub_21668A800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::PushStreamSampler::~PushStreamSampler(Phase::DspLayer::PushStreamSampler *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);
  JUMPOUT(0x2199F9D70);
}

void PushStreamSamplerSlice::Slice::~Slice(PushStreamSamplerSlice::Slice *this)
{
  JUMPOUT(0x2199F9D70);
}

double PushStreamSamplerSlice::Slice::Reset(PushStreamSamplerSlice::Slice *this, Phase::DspLayer::VoiceEngine *a2)
{
  uint64_t v3;
  uint64_t v11;
  uint64_t v12;
  double result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v3 = 0;
  v17 = *MEMORY[0x24BDAC8D0];
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 1) = _Q0;
  *((_OWORD *)this + 2) = _Q0;
  __asm { FMOV            V1.4S, #1.0 }
  *((_OWORD *)this + 3) = _Q1;
  *((int32x4_t *)this + 4) = vdupq_n_s32(0x459C4000u);
  *((_OWORD *)this + 5) = _Q1;
  *((int32x4_t *)this + 6) = vdupq_n_s32(0x43FA0000u);
  *((_OWORD *)this + 7) = _Q1;
  *((int32x4_t *)this + 8) = vdupq_n_s32(0x3C888889u);
  *((_OWORD *)this + 9) = _Q1;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  v14 = _Q1;
  v15 = _Q1;
  v16 = xmmword_2166F7490;
  do
  {
    *((_QWORD *)this + *((int *)&v16 + v3) + 72) = *((_QWORD *)&v14 + v3);
    ++v3;
  }
  while (v3 != 4);
  v11 = 0;
  v14 = *((_OWORD *)this + 3);
  v15 = xmmword_2166F7490;
  do
  {
    *((_DWORD *)this + *(int *)((char *)&v14 + v11 + 16) + 200) = *(_DWORD *)((char *)&v14 + v11);
    v11 += 4;
  }
  while (v11 != 16);
  v12 = 0;
  v15 = xmmword_2166F7490;
  v14 = 0uLL;
  do
  {
    *((_DWORD *)this + *(int *)((char *)&v14 + v12 + 16) + 204) = *(_DWORD *)((char *)&v14 + v12);
    v12 += 4;
  }
  while (v12 != 16);
  (*(void (**)(PushStreamSamplerSlice::Slice *, Phase::DspLayer::VoiceEngine *))(*(_QWORD *)this + 48))(this, a2);
  result = 0.0;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  return result;
}

uint64_t PushStreamSamplerSlice::Slice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t result;

  v5 = (_QWORD *)(a1 + 8 * a3);
  v5[2] = 0x3FF0000000000000;
  v6 = (_DWORD *)(a1 + 4 * a3);
  v6[12] = 1065353216;
  v6[16] = 1167867904;
  v6[20] = 1065353216;
  v6[24] = 1140457472;
  v6[28] = 1065353216;
  v6[32] = 1015580809;
  v6[36] = 1065353216;
  v6[40] = 0;
  *(_QWORD *)(a1 + 176 + 8 * a3) = 0;
  *(_DWORD *)(a1 + 176 + 4 * a3 + 32) = 0;
  v6[152] = 0;
  *(_DWORD *)(a1 + 672 + 4 * a3) = 0;
  v7 = 4 * a3 + 16;
  *(_DWORD *)(a1 + 672 + v7) = 0;
  v6[156] = 0;
  *(_DWORD *)(a1 + 704 + 4 * a3) = 0;
  *(_DWORD *)(a1 + 704 + v7) = 0;
  v6[160] = 0;
  *(_DWORD *)(a1 + 736 + 4 * a3) = 0;
  *(_DWORD *)(a1 + 736 + v7) = 0;
  v6[164] = 0;
  *(_DWORD *)(a1 + 768 + 4 * a3) = 0;
  *(_DWORD *)(a1 + 768 + v7) = 0;
  v5[72] = 0xBFF0000000000000;
  v6[200] = 1065353216;
  v6[204] = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5[104] = a4;
  return result;
}

double PushStreamSamplerSlice::Slice::GetParameter(PushStreamSamplerSlice::Slice *this, int a2, int a3)
{
  double result;
  float v4;

  switch(a2)
  {
    case 0:
      return *((double *)this + a3 + 2);
    case 1:
      v4 = *((float *)this + a3 + 12);
      goto LABEL_12;
    case 2:
      v4 = *((float *)this + a3 + 16);
      goto LABEL_12;
    case 3:
      v4 = *((float *)this + a3 + 20);
      goto LABEL_12;
    case 4:
      v4 = *((float *)this + a3 + 24);
      goto LABEL_12;
    case 5:
      v4 = *((float *)this + a3 + 28);
      goto LABEL_12;
    case 6:
      return *((double *)this + a3 + 72) / **((double **)this + 108);
    case 7:
      v4 = *((float *)this + a3 + 32);
      goto LABEL_12;
    case 8:
      v4 = *((float *)this + a3 + 36);
LABEL_12:
      result = v4;
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

uint64_t PushStreamSamplerSlice::Slice::SetParameter(PushStreamSamplerSlice::Slice *this, int a2, int a3, double a4)
{
  uint64_t result;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  double v12;
  float v13;

  switch(a2)
  {
    case 0:
      result = 0;
      *((double *)this + a3 + 2) = a4;
      break;
    case 1:
      result = 0;
      v6 = a4;
      *((float *)this + a3 + 12) = v6;
      break;
    case 2:
      result = 0;
      v7 = a4;
      *((float *)this + a3 + 16) = v7;
      break;
    case 3:
      result = 0;
      v8 = a4;
      *((float *)this + a3 + 20) = v8;
      break;
    case 4:
      result = 0;
      v9 = a4;
      *((float *)this + a3 + 24) = v9;
      break;
    case 5:
      result = 0;
      v10 = a4;
      *((float *)this + a3 + 28) = v10;
      break;
    case 6:
      v12 = **((double **)this + 108) * a4;
      if (v12 >= 0.0 && v12 <= (double)(*((_DWORD *)this + a3 + 52) - 1))
      {
        result = 0;
        *((double *)this + a3 + 72) = v12;
      }
      else
      {
        result = 11;
      }
      break;
    case 7:
      result = 0;
      v11 = a4;
      *((float *)this + a3 + 32) = v11;
      break;
    case 8:
      result = 0;
      v13 = a4;
      *((float *)this + a3 + 36) = v13;
      break;
    default:
      result = 9;
      break;
  }
  return result;
}

float32x4_t PushStreamSamplerSlice::Slice::UpdateParameters(uint64_t a1, uint64_t a2)
{
  int32x4_t v4;
  float32x4_t v5;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  __int128 v24;
  float32x4_t v25;
  __int128 v26;
  __int128 v27;
  float32x4_t v28;
  __int128 v29;
  float32x4_t v30;
  float32x4_t result;
  simd_float4 v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  simd_float4 v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  simd_float4 v41;
  simd_float4 x;
  simd_float4 xa;
  float32x4_t v44;
  float32x4_t v45;
  simd_float4 v46;
  float32x4_t v47;
  simd_float4 v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  simd_float4 v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;

  v4 = *(int32x4_t *)(a1 + 208);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a1 + 192);
  *(int32x4_t *)(a1 + 560) = v4;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a1 + 176);
  v4.i64[0] = -1;
  v4.i64[1] = -1;
  v52 = *(int32x4_t *)(a1 + 560);
  v53 = vaddq_s32(v52, v4);
  v40 = (float32x4_t)vdupq_n_s32(0x3727C5ACu);
  v58 = _simd_log10_f4((simd_float4)vmaxnmq_f32(*(float32x4_t *)(a1 + 80), v40));
  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  v46 = _simd_exp10_f4((simd_float4)vmulq_f32((float32x4_t)v58, v5));
  __asm { FMOV            V1.4S, #1.0 }
  v61 = _Q1;
  v54 = vaddq_f32((float32x4_t)v46, _Q1);
  __asm { FMOV            V1.4S, #-1.0 }
  v38 = _Q1;
  v56 = vaddq_f32((float32x4_t)v46, _Q1);
  v36 = (float32x4_t)vdupq_n_s32(0x40C90FDBu);
  x = (simd_float4)vmulq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 64), *(float *)(a2 + 8)), v36);
  v48 = _simd_cos_f4(x);
  v50 = vmulq_f32(v56, (float32x4_t)v48);
  v44 = vaddq_f32(v54, v50);
  v12 = (float32x4_t)_simd_exp10_f4(v58);
  v59 = vmulq_f32(v56, vnegq_f32(v56));
  v35 = (float32x4_t)vdupq_n_s32(0x3F9837F0u);
  v13 = vmulq_f32((float32x4_t)_simd_sin_f4(x), vmlaq_f32(v59, v35, vsqrtq_f32(vaddq_f32(v12, v61))));
  v14 = vsubq_f32(v54, v50);
  v15 = vdivq_f32(v61, vaddq_f32(v14, v13));
  v51 = vmulq_f32(vmulq_f32((float32x4_t)v46, vaddq_f32(v44, v13)), v15);
  v16 = vmulq_f32(v54, (float32x4_t)v48);
  v17.i64[0] = 0xC0000000C0000000;
  v17.i64[1] = 0xC0000000C0000000;
  v18 = vmulq_f32(vmulq_f32(vmulq_f32((float32x4_t)v46, v17), vaddq_f32(v56, v16)), v15);
  v47 = vmulq_f32(vmulq_f32((float32x4_t)v46, vsubq_f32(v44, v13)), v15);
  v49 = v18;
  v19 = vsubq_f32(v56, v16);
  xa = (simd_float4)vmulq_f32(vsubq_f32(v14, v13), v15);
  v45 = vmulq_f32(vaddq_f32(v19, v19), v15);
  v34 = (float32x4_t)_simd_log10_f4((simd_float4)vmaxnmq_f32(*(float32x4_t *)(a1 + 112), v40));
  v20.i64[0] = 0x3F0000003F000000;
  v20.i64[1] = 0x3F0000003F000000;
  v41 = _simd_exp10_f4((simd_float4)vmulq_f32(v34, v20));
  v55 = vaddq_f32((float32x4_t)v41, v61);
  v57 = vaddq_f32((float32x4_t)v41, v38);
  v32 = (simd_float4)vmulq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 96), *(float *)(a2 + 8)), v36);
  v37 = _simd_cos_f4(v32);
  v33 = vmulq_f32(v57, (float32x4_t)v37);
  v39 = vsubq_f32(v55, v33);
  v60 = vmlaq_f32(v59, v35, vsqrtq_f32(vaddq_f32((float32x4_t)_simd_exp10_f4((simd_float4)v34), v61)));
  v21 = vmulq_f32((float32x4_t)_simd_sin_f4(v32), v60);
  v22 = vaddq_f32(v55, v33);
  v23 = vdivq_f32(v61, vaddq_f32(v22, v21));
  v24 = *(_OWORD *)(a1 + 160);
  v25 = vmulq_f32(v55, (float32x4_t)v37);
  v27 = *(_OWORD *)(a1 + 32);
  v26 = *(_OWORD *)(a1 + 48);
  v28 = vmulq_f32(vmulq_f32((float32x4_t)v41, vsubq_f32(v39, v21)), v23);
  *(int32x4_t *)(a1 + 224) = v52;
  *(int32x4_t *)(a1 + 240) = v53;
  v29 = *(_OWORD *)(a1 + 16);
  v30.i64[0] = 0xC0000000C0000000;
  v30.i64[1] = 0xC0000000C0000000;
  *(float32x4_t *)(a1 + 256) = v51;
  *(float32x4_t *)(a1 + 272) = v49;
  *(float32x4_t *)(a1 + 288) = v47;
  *(float32x4_t *)(a1 + 304) = v45;
  *(simd_float4 *)(a1 + 320) = xa;
  *(float32x4_t *)(a1 + 336) = vmulq_f32(vmulq_f32((float32x4_t)v41, vaddq_f32(v39, v21)), v23);
  result = vmulq_f32(vsubq_f32(v22, v21), v23);
  *(float32x4_t *)(a1 + 352) = vmulq_f32(vmulq_f32(vaddq_f32((float32x4_t)v41, (float32x4_t)v41), vsubq_f32(v57, v25)), v23);
  *(float32x4_t *)(a1 + 368) = v28;
  *(float32x4_t *)(a1 + 384) = vmulq_f32(vmulq_f32(vaddq_f32(v57, v25), v30), v23);
  *(float32x4_t *)(a1 + 400) = result;
  *(_OWORD *)(a1 + 416) = v24;
  *(_OWORD *)(a1 + 432) = v26;
  *(_OWORD *)(a1 + 448) = v29;
  *(_OWORD *)(a1 + 464) = v27;
  return result;
}

double PushStreamSamplerSlice::Slice::UpdateParameters(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  int v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  __float2 v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  __float2 v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  double result;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  int v50;
  float v51;
  double v52;

  v6 = a3;
  *(_QWORD *)(a1 + 528 + 8 * a3) = *(_QWORD *)(a1 + 176 + 8 * a3);
  v7 = *(_DWORD *)(a1 + 176 + 4 * a3 + 32);
  *(_DWORD *)(a1 + 528 + 4 * a3 + 32) = v7;
  v8 = a1 + 4 * a3;
  v9 = log10f(fmaxf(*(float *)(v8 + 80), 0.00001));
  v10 = __exp10f(v9 * 0.5);
  v48 = *(float *)(a2 + 8);
  v49 = *(float *)(v8 + 64);
  v51 = __exp10f(v9);
  v11 = log10f(fmaxf(*(float *)(v8 + 112), 0.00001));
  v12 = __exp10f(v11 * 0.5);
  v13 = *(float *)(v8 + 96);
  v14 = __exp10f(v11);
  v15 = *(_DWORD *)(v8 + 160);
  v16 = *(_DWORD *)(v8 + 48);
  v52 = *(double *)(a1 + 8 * a3 + 16);
  v17 = *(float *)(v8 + 128);
  v50 = v16;
  if (v17 >= 0.001)
  {
    v19 = 6.2832 / v17;
    v20 = v19 * v19;
    v21 = (float *)(a1 + 4 * v6);
    v22 = v19 * (float)(v21[36] + v21[36]);
    v21[124] = v20;
    v21[128] = v22;
  }
  else
  {
    v18 = a1 + 4 * v6;
    *(_DWORD *)(v18 + 816) = 0;
    *(_DWORD *)(v18 + 800) = v16;
  }
  v23 = __sincosf_stret((float)(v48 * v13) * 6.2832);
  v24 = (float)(v12 + -1.0) * v23.__cosval;
  v25 = (float)(v12 + 1.0) + v24;
  v26 = sqrtf(v14 + 1.0);
  v27 = v10 + -1.0;
  v28 = v23.__sinval * (float)((float)(v26 * 1.1892) - (float)(v27 * v27));
  v29 = v25 - v28;
  v30 = 1.0 / (float)(v25 + v28);
  v31 = (float)(v12 + 1.0) * v23.__cosval;
  v46 = (float)((float)((float)(v12 + -1.0) + v31) * -2.0) * v30;
  v47 = v29 * v30;
  v32 = (float)(v12 + 1.0) - v24;
  v45 = (float)(v12 * (float)(v32 - v28)) * v30;
  v33 = (float)((float)(v12 + v12) * (float)((float)(v12 + -1.0) - v31)) * v30;
  v34 = (float)(v12 * (float)(v32 + v28)) * v30;
  v35 = __sincosf_stret((float)(v49 * v48) * 6.2832);
  v36 = (float)(v10 + -1.0) * v35.__cosval;
  v37 = (float)(v10 + 1.0) - v36;
  v38 = v35.__sinval * (float)((float)(sqrtf(v51 + 1.0) * 1.1892) - (float)(v27 * v27));
  v39 = v37 - v38;
  v40 = 1.0 / (float)(v37 + v38);
  v41 = (float)(v10 + 1.0) * v35.__cosval;
  v42 = (float)(v10 + 1.0) + v36;
  v43 = a1 + 4 * v6;
  *(_DWORD *)(v43 + 224) = v7;
  *(_DWORD *)(v43 + 240) = v7 - 1;
  *(float *)(v43 + 256) = (float)(v10 * (float)(v42 + v38)) * v40;
  *(float *)(v43 + 272) = (float)((float)(v10 * -2.0) * (float)((float)(v10 + -1.0) + v41)) * v40;
  *(float *)(v43 + 288) = (float)(v10 * (float)(v42 - v38)) * v40;
  *(float *)(v43 + 304) = (float)((float)((float)(v10 + -1.0) - v41) + (float)((float)(v10 + -1.0) - v41)) * v40;
  *(float *)(v43 + 320) = v39 * v40;
  *(float *)(v43 + 336) = v34;
  *(float *)(v43 + 352) = v33;
  *(float *)(v43 + 368) = v45;
  *(float *)(v43 + 384) = v46;
  *(float *)(v43 + 400) = v47;
  *(_DWORD *)(v43 + 416) = v15;
  *(_DWORD *)(v43 + 432) = v50;
  result = v52;
  *(double *)(a1 + 8 * v6 + 448) = v52;
  return result;
}

uint64_t PushStreamSamplerSlice::Slice::Run(uint64_t this, Phase::DspLayer::VoiceEngine *a2, Phase::DspLayer::VoicePool *a3, int a4)
{
  uint64_t v5;
  int32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int32x4_t v26;
  float64x2_t v27;
  float64x2_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int64x2_t v32;
  float64x2_t v33;
  int32x4_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int v43;
  unint64_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int64x2_t v48;
  float64x2_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int32x4_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  uint64_t v74;
  char v75;
  int8x16_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int8x16_t v79;
  uint64_t v80;
  float32x4_t v81;
  int32x4_t v82;
  float32x4_t v83;
  uint64_t v84;
  uint64_t v85;
  int32x4_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int32x4_t v90;
  int32x4_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int32x4_t v96;
  int32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int64x2_t v113;
  float64x2_t v114;
  _QWORD v115[2];
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int32x4_t v119;
  int32x4_t v120;
  float64x2_t v121;
  float64x2_t v122;
  int8x16_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int8x16_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  unsigned int v141[6];
  _QWORD v142[2];

  v5 = this;
  v142[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(int32x4_t *)(this + 240);
  v7 = *(float32x4_t *)(this + 256);
  v8 = *(float32x4_t *)(this + 272);
  v10 = *(float32x4_t *)(this + 288);
  v9 = *(float32x4_t *)(this + 304);
  v11 = *(float32x4_t *)(this + 320);
  v12 = *(float32x4_t *)(this + 336);
  v14 = *(float32x4_t *)(this + 352);
  v13 = *(float32x4_t *)(this + 368);
  v16 = *(float32x4_t *)(this + 384);
  v15 = *(float32x4_t *)(this + 400);
  v18 = *(float64x2_t *)(this + 448);
  v17 = *(float64x2_t *)(this + 464);
  v19 = *(float64x2_t *)(this + 576);
  v20 = *(float64x2_t *)(this + 592);
  __asm { FMOV            V3.2D, #-1.0 }
  v26 = vuzp1q_s32((int32x4_t)vceqq_f64(v19, _Q3), (int32x4_t)vceqq_f64(v20, _Q3));
  v27 = (float64x2_t)vbicq_s8((int8x16_t)v19, (int8x16_t)vzip1q_s32(v26, v26));
  v28 = (float64x2_t)vbicq_s8((int8x16_t)v20, (int8x16_t)vzip2q_s32(v26, v26));
  v29 = *(int32x4_t *)(this + 608);
  v30 = 0uLL;
  v31 = (int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(this + 224), (int8x16_t)vceqzq_s32(v29)), (int8x16_t)v29);
  v32.i64[0] = v31.i32[2];
  v32.i64[1] = v31.i32[3];
  v33 = vcvtq_f64_s64(v32);
  v32.i64[0] = v31.i32[0];
  v32.i64[1] = v31.i32[1];
  v34 = (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v27, vcvtq_f64_s64(v32)), (int32x4_t)vcgeq_f64(v28, v33)), (int8x16_t)v31);
  v32.i64[0] = v34.i32[0];
  v32.i64[1] = v34.i32[1];
  v35 = vcvtq_f64_s64(v32);
  v32.i64[0] = v34.i32[2];
  v32.i64[1] = v34.i32[3];
  v36 = vsubq_f64(v28, vcvtq_f64_s64(v32));
  v37 = vsubq_f64(v27, v35);
  v38 = vrndq_f64(v37);
  v39 = vrndq_f64(v36);
  v40 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v38), (int32x4_t)vcvtq_s64_f64(v39));
  v34.i64[0] = -1;
  v34.i64[1] = -1;
  v41 = vaddq_s32(v31, v34);
  v42 = (int8x16_t)vceqq_s32(v41, v40);
  HIDWORD(v44) = a4 - 1;
  LODWORD(v44) = a4 - 1;
  v43 = v44 >> 1;
  v45 = vminq_s32(vmaxq_s32(v40, (int32x4_t)0), v6);
  switch(v43)
  {
    case 0:
      v30.i32[0] = *(_DWORD *)(*(_QWORD *)(this + 528) + 4 * v45.i32[0]);
      break;
    case 1:
      v30.i32[0] = *(_DWORD *)(*(_QWORD *)(this + 528) + 4 * v45.i32[0]);
      v30.i32[1] = *(_DWORD *)(*(_QWORD *)(this + 536) + 4 * v45.i32[1]);
      break;
    case 3:
      v30.i32[0] = *(_DWORD *)(*(_QWORD *)(this + 528) + 4 * v45.i32[0]);
      v30.i32[1] = *(_DWORD *)(*(_QWORD *)(this + 536) + 4 * v45.i32[1]);
      v30.i32[2] = *(_DWORD *)(*(_QWORD *)(this + 544) + 4 * v45.i32[2]);
      break;
    case 7:
      v30.i32[0] = *(_DWORD *)(*(_QWORD *)(this + 528) + 4 * v45.i32[0]);
      v30.i32[1] = *(_DWORD *)(*(_QWORD *)(this + 536) + 4 * v45.i32[1]);
      v30.i32[2] = *(_DWORD *)(*(_QWORD *)(this + 544) + 4 * v45.i32[2]);
      v30.i32[3] = *(_DWORD *)(*(_QWORD *)(this + 552) + 4 * v45.i32[3]);
      break;
    default:
      break;
  }
  v46 = *(int8x16_t *)(this + 640);
  v47 = vandq_s8((int8x16_t)vceqzq_s32(*(int32x4_t *)(this + 624)), v42);
  v48.i64[0] = v41.i32[2];
  v48.i64[1] = v41.i32[3];
  v49 = vcvtq_f64_s64(v48);
  v48.i64[0] = v41.i32[0];
  v48.i64[1] = v41.i32[1];
  v50 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v27, vcvtq_f64_s64(v48)), (int32x4_t)vcgeq_f64(v28, v49));
  v51 = vandq_s8(v50, vandq_s8((int8x16_t)vceqzq_s32(*(int32x4_t *)(this + 656)), (int8x16_t)xmmword_21673A740));
  v52 = (int32x4_t)vorrq_s8(vextq_s8(v51, v51, 8uLL), v51);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s32(v52, 3), (int8x16_t)v52).u32[0] & a4) != 0)
  {
    MEMORY[0x24BDAC7A8](this);
    v142[0] = v115;
    v115[0] = 0;
    v115[1] = 0;
    v141[0] = 1;
    v141[2] = 2;
    v139 = v54;
    v140 = v53;
    v137 = v56;
    v138 = v55;
    v135 = v58;
    v136 = v57;
    v133 = v59;
    v134 = v60;
    v132 = v61;
    v131 = v62;
    v130 = v63;
    v129 = v64;
    v128 = v65;
    v127 = v66;
    v126 = v67;
    v125 = v68;
    v124 = v69;
    v123 = v50;
    v122 = v38;
    v121 = v39;
    v120 = v6;
    v119 = v70;
    v118 = v71;
    v117 = v72;
    v116 = v73;
    this = Phase::DspLayer::VoicePool::ExternalCallbackWithMessage(v74, 0, (uint64_t *)(v5 + 832), v75, v141, v142);
    v47 = v116;
    v46 = v117;
    v30 = v118;
    v40 = v119;
    v6 = v120;
    v39 = v121;
    v38 = v122;
    v50 = v123;
    v8 = v124;
    v10 = v125;
    v7 = v126;
    v9 = v127;
    v11 = v128;
    v14 = v129;
    v13 = v130;
    v12 = v131;
    v16 = v132;
    v15 = v133;
    v42 = v134;
    v37 = v135;
    v36 = v136;
    v28 = v137;
    v27 = v138;
    v18 = v139;
    v17 = v140;
    v29 = *(int32x4_t *)(v5 + 608);
  }
  v76 = vbslq_s8(v47, v30, v46);
  v77 = *(int32x4_t *)(v5 + 560);
  v78.i64[0] = -1;
  v78.i64[1] = -1;
  v79 = (int8x16_t)vminq_s32(v40, vaddq_s32(v77, v78));
  switch(v43)
  {
    case 0:
      v80 = *(_QWORD *)(v5 + 528);
      v79.i32[0] = *(_DWORD *)(v80 + 4 * v79.i32[0]);
      v81 = (float32x4_t)vorrq_s8(vbicq_s8(v79, v42), vandq_s8(v76, v42));
      v82.i64[0] = 0x100000001;
      v82.i64[1] = 0x100000001;
      v83 = (float32x4_t)vminq_s32((int32x4_t)vbicq_s8((int8x16_t)vmaxq_s32(vaddq_s32(v40, v82), (int32x4_t)0), v42), v6);
      v83.i32[0] = *(_DWORD *)(v80 + 4 * v83.i32[0]);
      break;
    case 1:
      v84 = *(_QWORD *)(v5 + 528);
      v85 = *(_QWORD *)(v5 + 536);
      v79.i32[0] = *(_DWORD *)(v84 + 4 * v79.i32[0]);
      v79.i32[1] = *(_DWORD *)(v85 + 4 * v79.i32[1]);
      v81 = (float32x4_t)vorrq_s8(vbicq_s8(v79, v42), vandq_s8(v76, v42));
      v86.i64[0] = 0x100000001;
      v86.i64[1] = 0x100000001;
      v83 = (float32x4_t)vminq_s32((int32x4_t)vbicq_s8((int8x16_t)vmaxq_s32(vaddq_s32(v40, v86), (int32x4_t)0), v42), v6);
      v83.i32[0] = *(_DWORD *)(v84 + 4 * v83.i32[0]);
      v83.i32[1] = *(_DWORD *)(v85 + 4 * v83.i32[1]);
      break;
    case 3:
      v87 = *(_QWORD *)(v5 + 528);
      v88 = *(_QWORD *)(v5 + 536);
      v89 = *(_QWORD *)(v5 + 544);
      v79.i32[0] = *(_DWORD *)(v87 + 4 * v79.i32[0]);
      v79.i32[1] = *(_DWORD *)(v88 + 4 * v79.i32[1]);
      v79.i32[2] = *(_DWORD *)(v89 + 4 * v79.i32[2]);
      v83 = (float32x4_t)vandq_s8(v76, v42);
      v90.i64[0] = 0x100000001;
      v90.i64[1] = 0x100000001;
      v91 = vminq_s32((int32x4_t)vbicq_s8((int8x16_t)vmaxq_s32(vaddq_s32(v40, v90), (int32x4_t)0), v42), v6);
      v81 = (float32x4_t)vorrq_s8(vbicq_s8(v79, v42), (int8x16_t)v83);
      v83.i32[0] = *(_DWORD *)(v87 + 4 * v91.i32[0]);
      v83.i32[1] = *(_DWORD *)(v88 + 4 * v91.i32[1]);
      v83.i32[2] = *(_DWORD *)(v89 + 4 * v91.i32[2]);
      break;
    case 7:
      v92 = *(_QWORD *)(v5 + 528);
      v93 = *(_QWORD *)(v5 + 536);
      v94 = *(_QWORD *)(v5 + 544);
      v95 = *(_QWORD *)(v5 + 552);
      v79.i32[0] = *(_DWORD *)(v92 + 4 * v79.i32[0]);
      v79.i32[1] = *(_DWORD *)(v93 + 4 * v79.i32[1]);
      v79.i32[2] = *(_DWORD *)(v94 + 4 * v79.i32[2]);
      v79.i32[3] = *(_DWORD *)(v95 + 4 * v79.i32[3]);
      v81 = (float32x4_t)vorrq_s8(vbicq_s8(v79, v42), vandq_s8(v76, v42));
      v96.i64[0] = 0x100000001;
      v96.i64[1] = 0x100000001;
      v97 = vminq_s32((int32x4_t)vbicq_s8((int8x16_t)vmaxq_s32(vaddq_s32(v40, v96), (int32x4_t)0), v42), v6);
      v83.i32[0] = *(_DWORD *)(v92 + 4 * v97.i32[0]);
      v83.i32[1] = *(_DWORD *)(v93 + 4 * v97.i32[1]);
      v83.i32[2] = *(_DWORD *)(v94 + 4 * v97.i32[2]);
      v83.i32[3] = *(_DWORD *)(v95 + 4 * v97.i32[3]);
      break;
    default:
      v81 = (float32x4_t)vandq_s8(v76, v42);
      v83 = 0uLL;
      break;
  }
  v98 = vmlaq_f32(v81, vsubq_f32(v83, v81), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(v37, v38)), vsubq_f64(v36, v39)));
  v99 = *(float32x4_t *)(v5 + 672);
  v100 = vmlaq_f32(vmlaq_f32(vmulq_f32(v8, v99), v98, v7), *(float32x4_t *)(v5 + 688), v10);
  v101 = *(float32x4_t *)(v5 + 704);
  v102 = vmlsq_f32(vmlsq_f32(v100, v101, v9), *(float32x4_t *)(v5 + 720), v11);
  v103 = *(float32x4_t *)(v5 + 736);
  v104 = *(float32x4_t *)(v5 + 768);
  v105 = vmlsq_f32(vmlsq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v14, v103), v102, v12), *(float32x4_t *)(v5 + 752), v13), v104, v16), *(float32x4_t *)(v5 + 784), v15);
  v106 = *((float *)a2 + 2);
  v107 = *(float32x4_t *)(v5 + 800);
  v108 = vmlaq_n_f32(*(float32x4_t *)(v5 + 816), vmlaq_f32(vmulq_f32(*(float32x4_t *)(v5 + 816), vnegq_f32(*(float32x4_t *)(v5 + 512))), vsubq_f32(*(float32x4_t *)(v5 + 432), v107), *(float32x4_t *)(v5 + 496)), v106);
  v109 = vmlaq_n_f32(v107, v108, v106);
  *(float32x4_t *)(v5 + 800) = v109;
  *(float32x4_t *)(v5 + 816) = v108;
  v110 = vmulq_f32(v105, v109);
  v111 = vandq_s8((int8x16_t)v110, vorrq_s8((int8x16_t)vcltzq_f32(v110), (int8x16_t)vcgezq_f32(v110)));
  switch(v43)
  {
    case 0:
      goto LABEL_18;
    case 1:
      goto LABEL_17;
    case 3:
      goto LABEL_16;
    case 7:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * *(int *)(v5 + 428)) = v111.i32[3];
LABEL_16:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * *(int *)(v5 + 424)) = v111.i32[2];
LABEL_17:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * *(int *)(v5 + 420)) = v111.i32[1];
LABEL_18:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * *(int *)(v5 + 416)) = v111.i32[0];
      v99 = *(float32x4_t *)(v5 + 672);
      v101 = *(float32x4_t *)(v5 + 704);
      v103 = *(float32x4_t *)(v5 + 736);
      v104 = *(float32x4_t *)(v5 + 768);
      break;
    default:
      break;
  }
  v112.i64[0] = 0x100000001;
  v112.i64[1] = 0x100000001;
  v113.i64[0] = v29.i32[2];
  v113.i64[1] = v29.i32[3];
  v114 = vcvtq_f64_s64(v113);
  v113.i64[0] = v29.i32[0];
  v113.i64[1] = v29.i32[1];
  *(float64x2_t *)(v5 + 576) = vaddq_f64(v18, v37);
  *(float64x2_t *)(v5 + 592) = vaddq_f64(v17, v36);
  *(int8x16_t *)(v5 + 608) = vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v27, vcvtq_f64_s64(v113)), (int32x4_t)vcgeq_f64(v28, v114)), (int8x16_t)v77, (int8x16_t)v29);
  *(int8x16_t *)(v5 + 624) = v42;
  *(int8x16_t *)(v5 + 640) = v76;
  *(int8x16_t *)(v5 + 656) = vandq_s8(v50, v112);
  *(float32x4_t *)(v5 + 672) = v98;
  *(float32x4_t *)(v5 + 688) = v99;
  *(float32x4_t *)(v5 + 704) = v102;
  *(float32x4_t *)(v5 + 720) = v101;
  *(float32x4_t *)(v5 + 736) = v102;
  *(float32x4_t *)(v5 + 752) = v103;
  *(float32x4_t *)(v5 + 768) = v105;
  *(float32x4_t *)(v5 + 784) = v104;
  return this;
}

float PushStreamSamplerSlice::Slice::CopyVoiceState(PushStreamSamplerSlice::Slice *this, Phase::DspLayer::VoicePoolSlice *a2, unsigned int a3, unsigned int a4)
{
  char *v4;
  char *v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  float result;

  v4 = (char *)a2 + 8 * (int)a3;
  v5 = (char *)this + 8 * (int)a4;
  *((_QWORD *)v5 + 2) = *((_QWORD *)v4 + 2);
  v6 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  v7 = (_DWORD *)((char *)this + 4 * (int)a4);
  v7[12] = v6[12];
  v7[16] = v6[16];
  v7[20] = v6[20];
  v7[24] = v6[24];
  v7[28] = v6[28];
  v7[32] = v6[32];
  v7[36] = v6[36];
  v7[40] = v6[40];
  *((_QWORD *)this + (int)a4 + 22) = *((_QWORD *)a2 + (int)a3 + 22);
  *((_DWORD *)this + (int)a4 + 52) = *((_DWORD *)a2 + (int)a3 + 52);
  v7[56] = v6[56];
  v7[60] = v6[60];
  v7[64] = v6[64];
  v7[68] = v6[68];
  v7[72] = v6[72];
  v7[76] = v6[76];
  v7[80] = v6[80];
  v7[84] = v6[84];
  v7[88] = v6[88];
  v7[92] = v6[92];
  v7[96] = v6[96];
  v7[100] = v6[100];
  v7[104] = v6[104];
  v7[108] = v6[108];
  *((_QWORD *)v5 + 56) = *((_QWORD *)v4 + 56);
  v7[124] = v6[124];
  v8 = v6[128];
  *((_QWORD *)this + (int)a4 + 66) = *((_QWORD *)a2 + (int)a3 + 66);
  v7[128] = v8;
  *((_DWORD *)this + (int)a4 + 140) = *((_DWORD *)a2 + (int)a3 + 140);
  if (a3 >= 4)
    __assert_rtn("Copy", "DelaylineLinear.hpp", 507, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  if (a4 >= 4)
    __assert_rtn("Copy", "DelaylineLinear.hpp", 508, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  *((_QWORD *)this + a4 + 72) = *((_QWORD *)a2 + a3 + 72);
  v9 = (char *)a2 + 4 * a3;
  v10 = (char *)this + 4 * a4;
  *((_DWORD *)v10 + 152) = *((_DWORD *)v9 + 152);
  *((_DWORD *)v10 + 156) = *((_DWORD *)v9 + 156);
  *((_DWORD *)v10 + 160) = *((_DWORD *)v9 + 160);
  *((_DWORD *)this + a4 + 168) = *((_DWORD *)a2 + a3 + 168);
  v11 = 4 * a3 + 16;
  v12 = *(_DWORD *)((char *)a2 + v11 + 672);
  *((_DWORD *)v10 + 164) = *((_DWORD *)v9 + 164);
  v13 = 4 * a4 + 16;
  *(_DWORD *)((char *)this + v13 + 672) = v12;
  *((_DWORD *)this + a4 + 176) = *((_DWORD *)a2 + a3 + 176);
  *(_DWORD *)((char *)this + v13 + 704) = *(_DWORD *)((char *)a2 + v11 + 704);
  *((_DWORD *)this + a4 + 184) = *((_DWORD *)a2 + a3 + 184);
  *(_DWORD *)((char *)this + v13 + 736) = *(_DWORD *)((char *)a2 + v11 + 736);
  *((_DWORD *)this + a4 + 192) = *((_DWORD *)a2 + a3 + 192);
  *(_DWORD *)((char *)this + v13 + 768) = *(_DWORD *)((char *)a2 + v11 + 768);
  *((_DWORD *)v10 + 200) = *((_DWORD *)v9 + 200);
  result = *((float *)v9 + 204);
  *((float *)v10 + 204) = result;
  *((_QWORD *)this + (int)a4 + 104) = *((_QWORD *)a2 + (int)a3 + 104);
  return result;
}

unint64_t PushStreamSamplerSlice::Slice::GetOutput(PushStreamSamplerSlice::Slice *this, int a2, int a3)
{
  if (a2)
    return 0xFFFFFFFF00000008;
  else
    return (unint64_t)*((unsigned int *)this + a3 + 40) << 32;
}

uint64_t PushStreamSamplerSlice::Slice::SetOutput(PushStreamSamplerSlice::Slice *this, int a2, int a3, int a4)
{
  uint64_t result;

  if (a2)
    return 8;
  result = 0;
  *((_DWORD *)this + a3 + 40) = a4;
  return result;
}

uint64_t PushStreamSamplerSlice::Slice::GetBuffer@<X0>(uint64_t this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;

  if (a2)
  {
    v4 = 0;
    v5 = -1;
    v6 = 10;
  }
  else
  {
    v6 = 0;
    v4 = *(_QWORD *)(this + 176 + 8 * a3);
    v5 = *(_DWORD *)(this + 176 + 4 * a3 + 32);
  }
  *(_DWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v5;
  return this;
}

uint64_t PushStreamSamplerSlice::Slice::SetBuffer(PushStreamSamplerSlice::Slice *this, int a2, int a3, void *a4, int a5)
{
  uint64_t result;

  if (a2)
    return 10;
  result = 0;
  this = (PushStreamSamplerSlice::Slice *)((char *)this + 176);
  *((_QWORD *)this + a3) = a4;
  *((_DWORD *)this + a3 + 8) = a5;
  return result;
}

void std::__function::__func<Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D580828;
  return result;
}

void std::__function::__func<Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D580828;
}

uint64_t std::__function::__func<Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()(uint64_t a1, Phase::DspLayer::VoiceEngine **a2, int *a3)
{
  Phase::DspLayer::VoiceEngine *v3;
  int v4;
  uint64_t v5;
  int v6;
  Phase::DspLayer::VoiceEngine *v7;
  PushStreamSamplerSlice::Slice *v8;

  v3 = *a2;
  v4 = *a3;
  v5 = operator new();
  Phase::DspLayer::VoicePool::VoicePool((Phase::DspLayer::VoicePool *)v5, "PushStreamSampler", v3, v4, 880);
  *(_QWORD *)v5 = &off_24D580730;
  if (*(int *)(v5 + 40) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(Phase::DspLayer::VoiceEngine **)(v5 + 32);
      v8 = (PushStreamSamplerSlice::Slice *)(*(_QWORD *)(v5 + 24) + *(int *)(v5 + 16) * (uint64_t)v6);
      *(_QWORD *)v8 = &off_24D580750;
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 108) = v7;
      PushStreamSamplerSlice::Slice::Reset(v8, v7);
      ++v6;
    }
    while (v6 < *(_DWORD *)(v5 + 40));
  }
  return v5;
}

void sub_21668BDC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

Phase::DspLayer::RainBubble *Phase::DspLayer::RainBubble::RainBubble(Phase::DspLayer::VoiceEngine **this, Phase::DspLayer::VoiceEngine *a2, int a3)
{
  Phase::DspLayer::VoicePool *v4;
  int v5;
  Phase::DspLayer::VoiceEngine *v6;
  _anonymous_namespace_::RainBubbleSlice *v7;

  v4 = Phase::DspLayer::VoicePool::VoicePool((Phase::DspLayer::VoicePool *)this, "RainBubble", a2, a3, 288);
  *(_QWORD *)v4 = &off_24D580870;
  if (*((int *)v4 + 10) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = this[4];
      v7 = (Phase::DspLayer::VoiceEngine *)((char *)this[3] + *((int *)this + 4) * (uint64_t)v5);
      *(_QWORD *)v7 = &off_24D580890;
      *((_QWORD *)v7 + 1) = 0;
      ++v5;
    }
    while (v5 < *((_DWORD *)this + 10));
  }
  return (Phase::DspLayer::RainBubble *)this;
}

void sub_21668BE80(_Unwind_Exception *a1)
{
  Phase::DspLayer::VoicePool *v1;

  Phase::DspLayer::VoicePool::~VoicePool(v1);
  _Unwind_Resume(a1);
}

void Phase::DspLayer::RainBubble::~RainBubble(Phase::DspLayer::RainBubble *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);
  JUMPOUT(0x2199F9D70);
}

void `anonymous namespace'::RainBubbleSlice::~RainBubbleSlice(_anonymous_namespace_::RainBubbleSlice *this)
{
  JUMPOUT(0x2199F9D70);
}

double `anonymous namespace'::RainBubbleSlice::Reset(_anonymous_namespace_::RainBubbleSlice *this, Phase::DspLayer::VoiceEngine *a2)
{
  uint64_t v3;
  uint64_t v10;
  double result;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v3 = 0;
  v14 = *MEMORY[0x24BDAC8D0];
  *((_OWORD *)this + 14) = 0u;
  __asm { FMOV            V2.4S, #3.0 }
  *((int32x4_t *)this + 1) = vdupq_n_s32(0x3A03126Fu);
  *((_OWORD *)this + 2) = _Q2;
  __asm { FMOV            V2.4S, #1.0 }
  *((int32x4_t *)this + 3) = vdupq_n_s32(0x3DCCCCCDu);
  *((_OWORD *)this + 4) = _Q2;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 15) = 0u;
  v12 = _Q2;
  v13 = xmmword_2166F7490;
  do
  {
    *((_DWORD *)this + *(int *)((char *)&v12 + v3 + 16) + 56) = *(_DWORD *)((char *)&v12 + v3);
    v3 += 4;
  }
  while (v3 != 16);
  v10 = 0;
  v13 = xmmword_2166F7490;
  v12 = 0uLL;
  do
  {
    *((_DWORD *)this + *(int *)((char *)&v12 + v10 + 16) + 60) = *(_DWORD *)((char *)&v12 + v10);
    v10 += 4;
  }
  while (v10 != 16);
  (*(void (**)(_anonymous_namespace_::RainBubbleSlice *, Phase::DspLayer::VoiceEngine *))(*(_QWORD *)this + 48))(this, a2);
  result = 0.0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  return result;
}

uint64_t `anonymous namespace'::RainBubbleSlice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _DWORD *v7;
  uint64_t result;

  v7 = (_DWORD *)(a1 + 4 * a3);
  v7[4] = 973279855;
  v7[8] = 1077936128;
  v7[12] = 1036831949;
  v7[16] = 1065353216;
  v7[20] = 0;
  v7[24] = 0;
  v7[52] = 0;
  v7[56] = 1065353216;
  v7[60] = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  *(_QWORD *)(a1 + 8 * a3 + 256) = a4;
  return result;
}

double `anonymous namespace'::RainBubbleSlice::GetParameter(_anonymous_namespace_::RainBubbleSlice *this, int a2, int a3)
{
  float *v3;
  double result;

  switch(a2)
  {
    case 0:
      v3 = (float *)((char *)this + 4 * a3 + 16);
      goto LABEL_7;
    case 1:
      v3 = (float *)((char *)this + 4 * a3 + 32);
      goto LABEL_7;
    case 2:
      v3 = (float *)((char *)this + 4 * a3 + 48);
      goto LABEL_7;
    case 3:
      v3 = (float *)((char *)this + 4 * a3 + 64);
      goto LABEL_7;
    case 4:
      v3 = (float *)((char *)this + 4 * a3 + 80);
LABEL_7:
      result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

float `anonymous namespace'::RainBubbleSlice::SetParameter(_anonymous_namespace_::RainBubbleSlice *this, int a2, int a3, double a4)
{
  switch(a2)
  {
    case 0:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 4) = LODWORD(a4);
      break;
    case 1:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 8) = LODWORD(a4);
      break;
    case 2:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 12) = LODWORD(a4);
      break;
    case 3:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 16) = LODWORD(a4);
      break;
    case 4:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 20) = LODWORD(a4);
      break;
    default:
      return *(float *)&a4;
  }
  return *(float *)&a4;
}

void `anonymous namespace'::RainBubbleSlice::UpdateParameters(uint64_t a1)
{
  float32x4_t v2;
  float32x4_t v8;
  simd_float4 v9;
  float32x4_t v10;
  __int128 v11;
  __int128 v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;

  v2 = *(float32x4_t *)(a1 + 16);
  v15 = vdivq_f32(*(float32x4_t *)(a1 + 32), v2);
  v13 = *(float32x4_t *)(a1 + 48);
  __asm { FMOV            V1.4S, #-1.5; y }
  v8 = vmlaq_f32(vdivq_f32((float32x4_t)vdupq_n_s32(0x3E051EB8u), v2), (float32x4_t)vdupq_n_s32(0x3BEBEDFAu), (float32x4_t)_simd_pow_f4((simd_float4)v2, _Q1));
  v12 = *(_OWORD *)(a1 + 96);
  v14 = vmulq_f32(v13, v8);
  v10 = vnegq_f32(v8);
  v11 = *(_OWORD *)(a1 + 64);
  v9 = _simd_exp_f4((simd_float4)vmulq_f32(*(float32x4_t *)(a1 + 80), v10));
  *(float32x4_t *)(a1 + 112) = v15;
  *(float32x4_t *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 160) = v11;
  *(float32x4_t *)(a1 + 176) = v10;
  *(simd_float4 *)(a1 + 192) = v9;
}

void `anonymous namespace'::RainBubbleSlice::UpdateParameters(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  int v9;
  int v10;
  float v11;
  float v12;

  v3 = a1 + 4 * a3;
  v4 = *(float *)(v3 + 16);
  v5 = *(float *)(v3 + 32) / v4;
  v6 = *(float *)(v3 + 48);
  v7 = (float)(0.13 / v4) + (float)(powf(v4, -1.5) * 0.0072);
  v8 = v6 * v7;
  v9 = *(_DWORD *)(v3 + 96);
  v10 = *(_DWORD *)(v3 + 64);
  v11 = -v7;
  v12 = expf(-(float)(v7 * *(float *)(v3 + 80)));
  *(float *)(v3 + 112) = v5;
  *(float *)(v3 + 128) = v8;
  *(_DWORD *)(v3 + 144) = v9;
  *(_DWORD *)(v3 + 160) = v10;
  *(float *)(v3 + 176) = v11;
  *(float *)(v3 + 192) = v12;
}

float32x4_t `anonymous namespace'::RainBubbleSlice::Run(float32x4_t *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, int a10)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  unint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t result;

  LODWORD(a8) = *(_DWORD *)(a2 + 8);
  v10 = a1[13];
  v11 = vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0));
  __asm { FMOV            V6.4S, #1.0 }
  v17 = vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(vmulq_f32(a1[7], vmlaq_f32(_Q6, v11, a1[8])), _Q6), (float32x4_t)vdupq_n_s32(0x469C4000u)), *(float *)&a8);
  v18 = (float32x4_t)vdupq_n_s32(0x40490FDBu);
  v19 = vmulq_f32(v17, vmulq_f32(v17, v18));
  v20 = a1[15];
  v21 = vmulq_f32(v17, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F7FFFD5u), v18, vmulq_f32(v19, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBE2AA6A7), v18, vmulq_f32(v19, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3C08232Du), (float32x4_t)vdupq_n_s32(0xBA17D6C1), v19))))));
  v22 = vmulq_f32(v21, v18);
  v23 = vdivq_f32(v22, vsqrtq_f32(vmlaq_f32(_Q6, (float32x4_t)vdupq_n_s32(0xC0490FDB), vmulq_f32(v21, v22))));
  v24 = vnegq_f32(v23);
  v25 = vmlsq_f32(a1[14], v20, v23);
  v26 = vmlaq_f32(v20, v25, vdivq_f32(vaddq_f32(v23, v23), vmlaq_f32(_Q6, v23, v23)));
  HIDWORD(v27) = a10 - 1;
  LODWORD(v27) = a10 - 1;
  v28 = vmulq_f32(vmulq_f32(a1[11], v10), (float32x4_t)vdupq_n_s32(0x3FB8AA3Bu));
  v29 = vrndmq_f32(v28);
  v30 = vsubq_f32(v28, v29);
  v31 = vmulq_f32(vsubq_f32((float32x4_t)vandq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v29), 0x17uLL), (int32x4_t)vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F7FF3F4u), v30, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F3262B4u), v30, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3E6585BCu), (float32x4_t)vdupq_n_s32(0x3DA1D752u), v30)))), (int8x16_t)vcgeq_f32(v28, (float32x4_t)vdupq_n_s32(0xC2FC0000))), a1[12]), vmulq_f32(a1[10], v26));
  v32 = vandq_s8((int8x16_t)v31, vorrq_s8((int8x16_t)vcltzq_f32(v31), (int8x16_t)vcgezq_f32(v31)));
  switch((v27 >> 1))
  {
    case 0u:
      goto LABEL_5;
    case 1u:
      goto LABEL_4;
    case 3u:
      goto LABEL_3;
    case 7u:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * a1[9].i32[3]) = v32.i32[3];
LABEL_3:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * a1[9].i32[2]) = v32.i32[2];
LABEL_4:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * a1[9].i32[1]) = v32.i32[1];
LABEL_5:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * a1[9].i32[0]) = v32.i32[0];
      break;
    default:
      break;
  }
  result = vmlaq_f32(v25, v26, v24);
  a1[13] = v11;
  a1[14] = result;
  a1[15] = v26;
  return result;
}

float `anonymous namespace'::RainBubbleSlice::CopyVoiceState(_anonymous_namespace_::RainBubbleSlice *this, Phase::DspLayer::VoicePoolSlice *a2, unsigned int a3, unsigned int a4)
{
  _DWORD *v4;
  _DWORD *v5;
  char *v6;
  char *v7;
  float result;

  v4 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  v5 = (_DWORD *)((char *)this + 4 * (int)a4);
  v5[4] = v4[4];
  v5[8] = v4[8];
  v5[12] = v4[12];
  v5[16] = v4[16];
  v5[20] = v4[20];
  v5[24] = v4[24];
  v5[28] = v4[28];
  v5[32] = v4[32];
  v5[36] = v4[36];
  v5[40] = v4[40];
  v5[44] = v4[44];
  v5[48] = v4[48];
  if (a3 >= 4)
    __assert_rtn("Copy", "DelaylineLinear.hpp", 507, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  if (a4 >= 4)
    __assert_rtn("Copy", "DelaylineLinear.hpp", 508, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  v6 = (char *)a2 + 4 * a3;
  v7 = (char *)this + 4 * a4;
  *((_DWORD *)v7 + 52) = *((_DWORD *)v6 + 52);
  *((_DWORD *)v7 + 56) = *((_DWORD *)v6 + 56);
  result = *((float *)v6 + 60);
  *((float *)v7 + 60) = result;
  *((_QWORD *)this + (int)a4 + 32) = *((_QWORD *)a2 + (int)a3 + 32);
  return result;
}

unint64_t `anonymous namespace'::RainBubbleSlice::GetOutput(_anonymous_namespace_::RainBubbleSlice *this, int a2, int a3)
{
  if (a2)
    return 0xFFFFFFFF00000008;
  else
    return (unint64_t)*((unsigned int *)this + a3 + 24) << 32;
}

uint64_t `anonymous namespace'::RainBubbleSlice::SetOutput(_anonymous_namespace_::RainBubbleSlice *this, int a2, int a3, int a4)
{
  uint64_t result;

  if (a2)
    return 8;
  result = 0;
  *((_DWORD *)this + a3 + 24) = a4;
  return result;
}

Phase::DspLayer::VoicePool *Phase::DspLayer::RainImpulse::RainImpulse(Phase::DspLayer::RainImpulse *this, Phase::DspLayer::VoiceEngine *a2, int a3)
{
  Phase::DspLayer::VoicePool *result;
  int v4;
  uint64_t v10;
  uint64_t v11;
  const float *v12;
  float32x4_t v13;

  result = Phase::DspLayer::VoicePool::VoicePool(this, "RainImpulse", a2, a3, 192);
  *(_QWORD *)result = &off_24D580968;
  if (*((int *)result + 10) >= 1)
  {
    v4 = 0;
    __asm { FMOV            V0.4S, #1.0 }
    do
    {
      v10 = *((_QWORD *)result + 4);
      v11 = *((_QWORD *)result + 3) + *((int *)result + 4) * (uint64_t)v4;
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)v11 = &off_24D580988;
      *(_OWORD *)(v11 + 16) = _Q0;
      *(_OWORD *)(v11 + 32) = _Q0;
      *(_OWORD *)(v11 + 48) = _Q0;
      *(_OWORD *)(v11 + 64) = 0uLL;
      *(_QWORD *)(v11 + 144) = 0;
      *(_QWORD *)(v11 + 152) = 0;
      v12 = (const float *)(v10 + 8);
      v13 = vld1q_dup_f32(v12);
      *(float32x4_t *)(v11 + 80) = v13;
      *(_OWORD *)(v11 + 96) = 0uLL;
      *(_OWORD *)(v11 + 112) = _Q0;
      *(_OWORD *)(v11 + 128) = _Q0;
      *(_OWORD *)(v11 + 160) = 0uLL;
      *(_OWORD *)(v11 + 176) = 0uLL;
      ++v4;
    }
    while (v4 < *((_DWORD *)result + 10));
  }
  return result;
}

void Phase::DspLayer::RainImpulse::~RainImpulse(Phase::DspLayer::RainImpulse *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);
  JUMPOUT(0x2199F9D70);
}

void `anonymous namespace'::RainImpulseSlice::~RainImpulseSlice(_anonymous_namespace_::RainImpulseSlice *this)
{
  JUMPOUT(0x2199F9D70);
}

double `anonymous namespace'::RainImpulseSlice::Reset(uint64_t a1)
{
  double result;

  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 16) = _Q0;
  *(_OWORD *)(a1 + 32) = _Q0;
  *(_OWORD *)(a1 + 48) = _Q0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  return result;
}

uint64_t `anonymous namespace'::RainImpulseSlice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _DWORD *v7;
  uint64_t result;

  v7 = (_DWORD *)(a1 + 4 * a3);
  v7[4] = 1065353216;
  v7[8] = 1065353216;
  v7[12] = 1065353216;
  v7[16] = 0;
  v7[36] = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  *(_QWORD *)(a1 + 8 * a3 + 160) = a4;
  return result;
}

uint64_t `anonymous namespace'::RainImpulseSlice::GetParameter(_anonymous_namespace_::RainImpulseSlice *this, unsigned int a2)
{
  if (a2 > 2)
    return 9;
  else
    return 0;
}

uint64_t `anonymous namespace'::RainImpulseSlice::SetParameter(_anonymous_namespace_::RainImpulseSlice *this, int a2, int a3, double a4)
{
  uint64_t result;
  float v6;
  float v7;
  float v8;

  if (a2 == 2)
  {
    result = 0;
    v7 = a4;
    *((float *)this + a3 + 12) = v7;
  }
  else if (a2 == 1)
  {
    result = 0;
    v8 = a4;
    *((float *)this + a3 + 8) = v8;
  }
  else if (a2)
  {
    return 9;
  }
  else
  {
    result = 0;
    v6 = a4;
    *((float *)this + a3 + 4) = v6;
  }
  return result;
}

float32x4_t `anonymous namespace'::RainImpulseSlice::UpdateParameters(uint64_t a1, uint64_t a2)
{
  const float *v2;
  float32x4_t v3;
  __int128 v4;
  float32x4_t result;
  __int128 v6;
  __int128 v7;

  v2 = (const float *)(a2 + 8);
  v3 = vld1q_dup_f32(v2);
  v4 = *(_OWORD *)(a1 + 32);
  result = vdivq_f32(v3, *(float32x4_t *)(a1 + 16));
  v7 = *(_OWORD *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 64);
  *(float32x4_t *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v4;
  return result;
}

float `anonymous namespace'::RainImpulseSlice::UpdateParameters(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  float result;

  v3 = a1 + 4 * a3;
  v4 = *(_DWORD *)(v3 + 64);
  v5 = *(_DWORD *)(v3 + 48);
  v6 = *(_DWORD *)(v3 + 32);
  result = *(float *)(a2 + 8) / *(float *)(v3 + 16);
  *(float *)(v3 + 80) = result;
  *(_DWORD *)(v3 + 96) = v4;
  *(_DWORD *)(v3 + 112) = v5;
  *(_DWORD *)(v3 + 128) = v6;
  return result;
}

float32x4_t `anonymous namespace'::RainImpulseSlice::Run(float32x4_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  float32x4_t v4;
  float32x4_t v5;
  unint64_t v6;
  int32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t result;

  v4 = a1[5];
  v5 = a1[9];
  HIDWORD(v6) = a4 - 1;
  LODWORD(v6) = a4 - 1;
  __asm
  {
    FMOV            V4.4S, #4.0
    FMOV            V5.4S, #1.0
  }
  v13 = (int32x4_t)vmulq_f32(vmulq_f32(v5, _Q4), vsubq_f32(_Q5, v5));
  v14.i64[0] = 0x7F0000007FLL;
  v14.i64[1] = 0x7F0000007FLL;
  v15 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v13, v14), (int8x16_t)_Q5);
  v14.i64[0] = 0x7E0000007ELL;
  v14.i64[1] = 0x7E0000007ELL;
  v16 = (int8x16_t)vaddq_f32(vmlaq_f32(vcvtq_f32_s32(vsraq_n_s32((int32x4_t)v14, v13, 0x17uLL)), v15, vmlaq_f32((float32x4_t)vdupq_n_s32(0x4040C0AEu), v15, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF83D8C2), (float32x4_t)vdupq_n_s32(0x3E1DB454u), v15))), (float32x4_t)vdupq_n_s32(0xC0089A41));
  v14.i64[0] = 0x7F0000007FLL;
  v14.i64[1] = 0x7F0000007FLL;
  v17 = vmulq_f32(a1[8], (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_s32(v13), v16, v14));
  v18 = vrndmq_f32(v17);
  v19 = vsubq_f32(v17, v18);
  v20 = vmulq_f32(a1[7], (float32x4_t)vandq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v18), 0x17uLL), (int32x4_t)vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F7FF3F4u), v19, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F3262B4u), v19, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3E6585BCu), (float32x4_t)vdupq_n_s32(0x3DA1D752u), v19)))), (int8x16_t)vcgeq_f32(v17, (float32x4_t)vdupq_n_s32(0xC2FC0000))));
  v21 = vandq_s8((int8x16_t)v20, vorrq_s8((int8x16_t)vcltzq_f32(v20), (int8x16_t)vcgezq_f32(v20)));
  switch((v6 >> 1))
  {
    case 0u:
      goto LABEL_5;
    case 1u:
      goto LABEL_4;
    case 3u:
      goto LABEL_3;
    case 7u:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * a1[6].i32[3]) = v21.i32[3];
LABEL_3:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * a1[6].i32[2]) = v21.i32[2];
LABEL_4:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * a1[6].i32[1]) = v21.i32[1];
LABEL_5:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * a1[6].i32[0]) = v21.i32[0];
      break;
    default:
      break;
  }
  result = vaddq_f32(v4, v5);
  a1[9] = result;
  return result;
}

float `anonymous namespace'::RainImpulseSlice::CopyVoiceState(_anonymous_namespace_::RainImpulseSlice *this, Phase::DspLayer::VoicePoolSlice *a2, unsigned int a3, unsigned int a4)
{
  _DWORD *v4;
  _DWORD *v5;
  float result;

  v4 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  v5 = (_DWORD *)((char *)this + 4 * (int)a4);
  v5[4] = v4[4];
  v5[8] = v4[8];
  v5[12] = v4[12];
  v5[16] = v4[16];
  v5[20] = v4[20];
  v5[24] = v4[24];
  v5[28] = v4[28];
  v5[32] = v4[32];
  if (a3 >= 4)
    __assert_rtn("Copy", "DelaylineLinear.hpp", 507, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  if (a4 >= 4)
    __assert_rtn("Copy", "DelaylineLinear.hpp", 508, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  result = *((float *)a2 + a3 + 36);
  *((float *)this + a4 + 36) = result;
  *((_QWORD *)this + (int)a4 + 20) = *((_QWORD *)a2 + (int)a3 + 20);
  return result;
}

unint64_t `anonymous namespace'::RainImpulseSlice::GetOutput(_anonymous_namespace_::RainImpulseSlice *this, int a2, int a3)
{
  if (a2)
    return 0xFFFFFFFF00000008;
  else
    return (unint64_t)*((unsigned int *)this + a3 + 16) << 32;
}

uint64_t `anonymous namespace'::RainImpulseSlice::SetOutput(_anonymous_namespace_::RainImpulseSlice *this, int a2, int a3, int a4)
{
  uint64_t result;

  if (a2)
    return 8;
  result = 0;
  *((_DWORD *)this + a3 + 16) = a4;
  return result;
}

Phase::SpatialModeler::RayTracerState *Phase::SpatialModeler::RayTracerState::RayTracerState(Phase::SpatialModeler::RayTracerState *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  __int128 v8;
  int32x4_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  char *__dst;

  *(_OWORD *)((char *)this + 8) = xmmword_2166F7FB0;
  v4 = (char *)this + 23664;
  *(_OWORD *)((char *)this + 24) = xmmword_2166F7FC0;
  v5 = (char *)this + 22568;
  v6 = (char *)this + 19416;
  *(_OWORD *)((char *)this + 40) = xmmword_2166F7FD0;
  *((int32x2_t *)this + 7) = vdup_n_s32(0x3E4CCCCDu);
  *((_QWORD *)this + 8) = 0x800000000100;
  *((_BYTE *)this + 72) = 0;
  *((_DWORD *)this + 19) = 1000593162;
  *((_OWORD *)this + 5) = xmmword_2166F7FE0;
  *((_QWORD *)this + 12) = 1000;
  *(_OWORD *)((char *)this + 104) = xmmword_2166F7FF0;
  *((_QWORD *)this + 15) = 0x4040000040800000;
  *((_DWORD *)this + 32) = 1167867904;
  *((_DWORD *)this + 33) = 0x1000000;
  *(_OWORD *)((char *)this + 136) = xmmword_2166F8000;
  *((_DWORD *)this + 38) = 4;
  *((_BYTE *)this + 156) = 1;
  *((_QWORD *)this + 20) = 0xC2700000C1D00000;
  *((_DWORD *)this + 42) = 16777473;
  *(_QWORD *)((char *)this + 172) = 0x4E20000003E8;
  *((_BYTE *)this + 180) = 1;
  *((_QWORD *)this + 23) = 0x430300003DDB22D1;
  *((_DWORD *)this + 48) = 256;
  *((_OWORD *)this + 13) = 0u;
  __dst = (char *)this + 208;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 116) = 1135312896;
  *((_QWORD *)this + 59) = 0;
  *((_DWORD *)this + 120) = 1065353216;
  v7 = (char *)this + 496;
  *((_DWORD *)this + 4756) = 0;
  *((_OWORD *)this + 1188) = 0u;
  *((_OWORD *)this + 1190) = 0u;
  *((_OWORD *)this + 1191) = 0u;
  *((_OWORD *)this + 1192) = 0u;
  *((_OWORD *)this + 1193) = 0u;
  *((_OWORD *)this + 1194) = 0u;
  *((_OWORD *)this + 1195) = 0u;
  *((_OWORD *)this + 1196) = 0u;
  *((_OWORD *)this + 1197) = 0u;
  *((_OWORD *)this + 1198) = 0u;
  *((_OWORD *)this + 1199) = 0u;
  *((_OWORD *)this + 1200) = 0u;
  *((_OWORD *)this + 1201) = 0u;
  *((_OWORD *)this + 1202) = 0u;
  *((_OWORD *)this + 1203) = 0u;
  *((_OWORD *)this + 1204) = 0u;
  *((_OWORD *)this + 1205) = 0u;
  *((_OWORD *)this + 1206) = 0u;
  *((_OWORD *)this + 1207) = 0u;
  *((_OWORD *)this + 1208) = 0u;
  *((_OWORD *)this + 1209) = 0u;
  bzero((char *)this + 496, 0x4848uLL);
  *((_QWORD *)this + 2422) = 0;
  *((_QWORD *)this + 2421) = 0;
  *(_OWORD *)((char *)this + 19384) = 0u;
  *((_QWORD *)this + 2420) = (char *)this + 19368;
  *(_OWORD *)((char *)this + 19400) = 0u;
  *(_DWORD *)v6 = 1065353216;
  *((_OWORD *)this + 1214) = 0u;
  *((_OWORD *)this + 1215) = 0u;
  *((_DWORD *)v6 + 10) = 1065353216;
  *(_OWORD *)((char *)this + 19464) = 0u;
  *(_OWORD *)((char *)this + 19480) = 0u;
  *((_DWORD *)v6 + 20) = 1065353216;
  *((_QWORD *)this + 2438) = 0;
  *((_DWORD *)v6 + 24) = 0;
  *((_QWORD *)this + 2621) = 0;
  *((_QWORD *)this + 2620) = 0;
  bzero((char *)this + 19520, 0x598uLL);
  *((_QWORD *)this + 2619) = (char *)this + 20960;
  *((_OWORD *)this + 1311) = 0u;
  *((_OWORD *)this + 1312) = 0u;
  *((_QWORD *)this + 2679) = 0;
  *((_DWORD *)v6 + 506) = 0;
  *((_DWORD *)v6 + 508) = 0;
  v6[2036] = 0;
  *((_QWORD *)this + 2682) = 0;
  *(_QWORD *)((char *)this + 22164) = 0;
  bzero((char *)this + 21472, 0x2A4uLL);
  *((_QWORD *)this + 2812) = 0;
  *((_QWORD *)this + 2811) = 0;
  *(_OWORD *)((char *)this + 21032) = 0u;
  *(_OWORD *)((char *)this + 21048) = 0u;
  *(_OWORD *)((char *)this + 21064) = 0u;
  *(_OWORD *)((char *)this + 21080) = 0u;
  *(_OWORD *)((char *)this + 21096) = 0u;
  *(_OWORD *)((char *)this + 21112) = 0u;
  *(_OWORD *)((char *)this + 21128) = 0u;
  *(_OWORD *)((char *)this + 21144) = 0u;
  *(_OWORD *)((char *)this + 21160) = 0u;
  *(_OWORD *)((char *)this + 21176) = 0u;
  *(_OWORD *)((char *)this + 21192) = 0u;
  *(_OWORD *)((char *)this + 21208) = 0u;
  *(_OWORD *)((char *)this + 21224) = 0u;
  *(_OWORD *)((char *)this + 21240) = 0u;
  *(_OWORD *)((char *)this + 21256) = 0u;
  *(_OWORD *)((char *)this + 21272) = 0u;
  *(_OWORD *)((char *)this + 21288) = 0u;
  *(_OWORD *)((char *)this + 21304) = 0u;
  *(_OWORD *)((char *)this + 21320) = 0u;
  *(_OWORD *)((char *)this + 21336) = 0u;
  *(_OWORD *)((char *)this + 21352) = 0u;
  *(_OWORD *)((char *)this + 21368) = 0u;
  *(_OWORD *)((char *)this + 21384) = 0u;
  *(_OWORD *)((char *)this + 21400) = 0u;
  *((_QWORD *)this + 2677) = 0;
  *((_QWORD *)this + 2810) = (char *)this + 22488;
  *((_QWORD *)this + 2815) = 0;
  *((_QWORD *)this + 2814) = 0;
  *((_QWORD *)this + 2813) = (char *)this + 22512;
  v6[3112] = 1;
  *((_DWORD *)v6 + 779) = 1097859072;
  *(_QWORD *)&v8 = 0x101010101010101;
  *((_QWORD *)&v8 + 1) = 0x101010101010101;
  *(_OWORD *)((char *)this + 22536) = v8;
  *(_OWORD *)((char *)this + 22552) = v8;
  *(_DWORD *)v5 = 2;
  *((_QWORD *)this + 2823) = 0;
  *((_QWORD *)this + 2822) = 0;
  *((_DWORD *)v5 + 6) = 0;
  *(_QWORD *)(v5 + 28) = 1065353216;
  *(_QWORD *)(v5 + 36) = 0;
  *(_OWORD *)(v5 + 44) = xmmword_2166F8010;
  *(_QWORD *)(v5 + 60) = 1065353216;
  *(_QWORD *)(v5 + 68) = 0;
  *((_DWORD *)v5 + 19) = 1065353216;
  v5[80] = 0;
  *((_QWORD *)this + 2838) = 0;
  *((_OWORD *)this + 1418) = 0u;
  *((_OWORD *)this + 1417) = 0u;
  *((_OWORD *)this + 1416) = 0u;
  *((_QWORD *)this + 2839) = 0xFFFFFFFFLL;
  *((_QWORD *)this + 2840) = 0x3FB999999999999ALL;
  *((_DWORD *)v5 + 40) = 0;
  *(_QWORD *)(v5 + 164) = 0;
  *((_QWORD *)this + 2843) = 0x3FF0000000000000;
  *((_OWORD *)this + 1422) = 0u;
  *((_OWORD *)this + 1423) = 0u;
  *((_DWORD *)v5 + 54) = 0;
  *(_QWORD *)(v5 + 220) = 1065353216;
  *(_QWORD *)(v5 + 228) = 0;
  *((_DWORD *)v5 + 59) = 1065353216;
  *(_OWORD *)((char *)this + 22808) = 0u;
  *(_OWORD *)((char *)this + 22824) = 0u;
  *(_OWORD *)((char *)this + 22840) = 0u;
  *(_OWORD *)((char *)this + 22856) = 0u;
  *(_OWORD *)((char *)this + 22870) = 0u;
  *((_OWORD *)this + 1446) = 0u;
  *((_OWORD *)this + 1445) = 0u;
  *((_OWORD *)this + 1444) = 0u;
  *((_OWORD *)this + 1443) = 0u;
  *((_OWORD *)this + 1442) = 0u;
  *((_OWORD *)this + 1441) = 0u;
  *((_OWORD *)this + 1440) = 0u;
  *((_OWORD *)this + 1439) = 0u;
  *((_OWORD *)this + 1438) = 0u;
  *((_OWORD *)this + 1437) = 0u;
  *((_OWORD *)this + 1436) = 0u;
  *((_OWORD *)this + 1435) = 0u;
  *((_OWORD *)this + 1434) = 0u;
  *((_OWORD *)this + 1433) = 0u;
  *((_OWORD *)this + 1432) = 0u;
  *((_OWORD *)this + 1431) = 0u;
  *((_DWORD *)v5 + 146) = 1;
  *((_QWORD *)this + 2896) = 0;
  *((_DWORD *)v5 + 152) = 1065353216;
  *((_QWORD *)this + 2905) = 0;
  *((_QWORD *)this + 2904) = 0;
  *((_QWORD *)this + 2906) = 0;
  *((_QWORD *)this + 2910) = 0;
  *((_QWORD *)this + 2909) = 0;
  *((_QWORD *)this + 2911) = 0;
  *((_QWORD *)this + 2914) = 0;
  *((_QWORD *)this + 2913) = 0;
  *((_QWORD *)this + 2915) = 0;
  *(_OWORD *)((char *)this + 23416) = 0u;
  *(_OWORD *)((char *)this + 23400) = 0u;
  *(_OWORD *)((char *)this + 23384) = 0u;
  *(_OWORD *)((char *)this + 23368) = 0u;
  *(_OWORD *)((char *)this + 23352) = 0u;
  *(_OWORD *)((char *)this + 23336) = 0u;
  *((_OWORD *)this + 1470) = 0u;
  *((_OWORD *)this + 1469) = 0u;
  *((_OWORD *)this + 1468) = 0u;
  *((_OWORD *)this + 1467) = 0u;
  *((_OWORD *)this + 1466) = 0u;
  *((_OWORD *)this + 1465) = 0u;
  *((_OWORD *)this + 1477) = 0u;
  *((_OWORD *)this + 1476) = 0u;
  *((_OWORD *)this + 1475) = 0u;
  *((_OWORD *)this + 1474) = 0u;
  *((_OWORD *)this + 1473) = 0u;
  *((_OWORD *)this + 1472) = 0u;
  *v4 = 0;
  *((_QWORD *)this + 2902) = 0;
  *((_OWORD *)this + 1450) = 0u;
  *((_OWORD *)this + 1449) = 0u;
  v9 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v4 + 4) = v9;
  *(int32x4_t *)(v4 + 20) = v9;
  *(int32x4_t *)(v4 + 36) = v9;
  *(int32x4_t *)(v4 + 52) = v9;
  *(_QWORD *)(v4 + 68) = v9.i64[0];
  bzero((char *)this + 23744, 0x508uLL);
  *((_WORD *)v4 + 688) = 0;
  *((_QWORD *)this + 3131) = 0;
  *(_QWORD *)this = *(_QWORD *)a2;
  v10 = *(_OWORD *)((char *)a2 + 8);
  v11 = *(_OWORD *)((char *)a2 + 24);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *(_OWORD *)((char *)this + 24) = v11;
  *(_OWORD *)((char *)this + 8) = v10;
  v12 = *((_OWORD *)a2 + 8);
  v14 = *((_OWORD *)a2 + 5);
  v13 = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 7) = *((_OWORD *)a2 + 7);
  *((_OWORD *)this + 8) = v12;
  *((_OWORD *)this + 5) = v14;
  *((_OWORD *)this + 6) = v13;
  v16 = *((_OWORD *)a2 + 10);
  v15 = *((_OWORD *)a2 + 11);
  v17 = *((_OWORD *)a2 + 9);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_OWORD *)this + 10) = v16;
  *((_OWORD *)this + 11) = v15;
  *((_OWORD *)this + 9) = v17;
  v18 = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 4) = v18;
  Phase::SpatialModeler::RayTracerState::State::operator=((uint64_t)v7, (uint64_t)a2 + 496);
  memcpy(__dst, (char *)a2 + 208, 0x114uLL);
  std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::destroy((uint64_t)this + 19360, *((_QWORD **)this + 2421));
  *((_QWORD *)this + 2420) = (char *)this + 19368;
  *(_OWORD *)((char *)this + 19368) = 0u;
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::clear((uint64_t)this + 19384);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::clear((uint64_t)this + 19424);
  Phase::SpatialModeler::RayTracerState::CopySourceListenerResults(this, a2);
  Phase::SpatialModeler::RayTracerState::CopyERClusteringResults(this, *((const Phase::SpatialModeler::RayTracerState **)a2 + 2425));
  Phase::SpatialModeler::RayTracerState::CopyLRClusteringResults(this, *((const Phase::SpatialModeler::RayTracerState **)a2 + 2430));
  Phase::SpatialModeler::RayTracerState::CopyRoomStatResults(this, a2);
  v19 = *((_OWORD *)a2 + 1315);
  v20 = *((_OWORD *)a2 + 1316);
  v21 = *((_OWORD *)a2 + 1318);
  *((_OWORD *)this + 1317) = *((_OWORD *)a2 + 1317);
  *((_OWORD *)this + 1318) = v21;
  *((_OWORD *)this + 1315) = v19;
  *((_OWORD *)this + 1316) = v20;
  v22 = *((_OWORD *)a2 + 1319);
  v23 = *((_OWORD *)a2 + 1320);
  v24 = *((_OWORD *)a2 + 1322);
  *((_OWORD *)this + 1321) = *((_OWORD *)a2 + 1321);
  *((_OWORD *)this + 1322) = v24;
  *((_OWORD *)this + 1319) = v22;
  *((_OWORD *)this + 1320) = v23;
  v25 = *((_QWORD *)a2 + 2679);
  *((_DWORD *)this + 5360) = *((_DWORD *)a2 + 5360);
  *((_QWORD *)this + 2679) = v25;
  *((_OWORD *)v6 + 127) = *(_OWORD *)((char *)a2 + 21448);
  Phase::Geometry::Listener::operator=((uint64_t)v5, (uint64_t)a2 + 22568);
  *((_QWORD *)this + 2846) = *((_QWORD *)a2 + 2846);
  *((_DWORD *)v5 + 52) = *((_DWORD *)a2 + 5694);
  *((_DWORD *)v5 + 53) = *((_DWORD *)a2 + 5695);
  *((_DWORD *)v5 + 54) = *((_DWORD *)a2 + 5696);
  *((_DWORD *)v5 + 55) = *((_DWORD *)a2 + 5697);
  *((_DWORD *)v5 + 56) = *((_DWORD *)a2 + 5698);
  *((_DWORD *)v5 + 57) = *((_DWORD *)a2 + 5699);
  *((_DWORD *)v5 + 58) = *((_DWORD *)a2 + 5700);
  *((_DWORD *)v5 + 59) = *((_DWORD *)a2 + 5701);
  Phase::SpatialModeler::ImportanceSampling::operator=((void **)this + 2896, (uint64_t)a2 + 23168);
  Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::operator=((uint64_t)this + 23200, (uint64_t)a2 + 23200);
  *((_WORD *)v4 + 688) = *((_WORD *)a2 + 12520);
  *((_QWORD *)this + 3131) = *((_QWORD *)a2 + 3131);
  if (this != a2)
  {
    std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__tree_node<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,void *> *,long>>((uint64_t **)this + 2810, *((_QWORD **)a2 + 2810), (_QWORD *)a2 + 2811);
    std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__tree_node<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,void *> *,long>>((uint64_t **)this + 2813, *((_QWORD **)a2 + 2813), (_QWORD *)a2 + 2814);
  }
  v26 = *((_OWORD *)a2 + 1408);
  v27 = *((_OWORD *)a2 + 1409);
  *((_QWORD *)v6 + 393) = *((_QWORD *)a2 + 2820);
  *(_OWORD *)(v6 + 3112) = v26;
  *(_OWORD *)(v6 + 3128) = v27;
  return this;
}

void sub_21668D1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, Phase::SpatialModeler::RayTracerState::State *a9, Phase::SpatialModeler::RendererStates *a10)
{
  Phase::Geometry::Listener *v10;
  Phase::SpatialModeler::RayTracerState::Results *v11;
  void **v12;
  Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *v13;

  Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::~RoomSimulationDebugView(v13);
  Phase::SpatialModeler::ImportanceSampling::~ImportanceSampling(v12);
  Phase::Geometry::Listener::~Listener(v10);
  Phase::SpatialModeler::RendererStates::~RendererStates(a10);
  Phase::SpatialModeler::RayTracerState::Results::~Results(v11);
  Phase::SpatialModeler::RayTracerState::State::~State(a9);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::RayTracerState::CopySourceListenerResults(Phase::SpatialModeler::RayTracerState *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  char *v2;
  char *v3;
  uint64_t **v5;
  unint64_t v6;
  const Phase::SpatialModeler::EarlyReflectionDetector *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t **v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  BOOL v30;
  __int128 v31;
  _QWORD v32[2];
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  int v36;

  v2 = (char *)*((_QWORD *)a2 + 2420);
  v3 = (char *)a2 + 19368;
  if (v2 != (char *)a2 + 19368)
  {
    v5 = (uint64_t **)((char *)this + 19360);
    do
    {
      v6 = *((_QWORD *)v2 + 4);
      v7 = (const Phase::SpatialModeler::EarlyReflectionDetector *)*((_QWORD *)v2 + 5);
      v32[0] = v6;
      v32[1] = v7;
      v8 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
      v33 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      v12 = *((_QWORD *)v2 + 7);
      v11 = (std::__shared_weak_count *)*((_QWORD *)v2 + 8);
      v34 = v12;
      v35 = v11;
      if (v11)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v36 = *((_DWORD *)v2 + 18);
      v15 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v5, v6, v32);
      if (v7)
      {
        std::allocate_shared[abi:ne180100]<Phase::SpatialModeler::EarlyReflectionDetector,std::allocator<Phase::SpatialModeler::EarlyReflectionDetector>,Phase::SpatialModeler::EarlyReflectionDetector&,void>((Phase::SpatialModeler::EarlyReflectionDetector **)&v31, v7);
        std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)(v15 + 5), &v31);
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
        if (*((_QWORD *)&v31 + 1))
        {
          v17 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v12 = v34;
      }
      if (v12)
      {
        Phase::SpatialModeler::RayTracerState::CopyDirectivityHistogram(this, &v34, (Phase::SpatialModeler::EnergyHistogram **)&v31);
        std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)(v15 + 7), &v31);
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
        if (*((_QWORD *)&v31 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      *((_DWORD *)v15 + 18) = v36;
      v22 = v35;
      if (v35)
      {
        v23 = (unint64_t *)&v35->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = v33;
      if (v33)
      {
        v26 = (unint64_t *)&v33->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = (char *)*((_QWORD *)v2 + 1);
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = *(char **)v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (char *)*((_QWORD *)v2 + 2);
          v30 = *(_QWORD *)v29 == (_QWORD)v2;
          v2 = v29;
        }
        while (!v30);
      }
      v2 = v29;
    }
    while (v29 != v3);
  }
}

void sub_21668D43C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

__n128 Phase::SpatialModeler::RayTracerState::CopyERClusteringResults(Phase::SpatialModeler::RayTracerState *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  const Phase::SpatialModeler::RayTracerState *v2;
  char *v3;
  __n128 *v4;
  __n128 result;
  _QWORD *v6;

  if (a2)
  {
    v2 = a2;
    v3 = (char *)this + 19384;
    do
    {
      v6 = (_QWORD *)((char *)v2 + 16);
      v4 = (__n128 *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v3, (unint64_t *)v2 + 2, (uint64_t)&std::piecewise_construct, &v6);
      if (*((_QWORD *)v2 + 21))
        Phase::SpatialModeler::CopyMetadata<float>((uint64_t)v2 + 64, (uint64_t)&v4[4]);
      if (v2 != (const Phase::SpatialModeler::RayTracerState *)v4)
      {
        v4[3].n128_u32[2] = *((_DWORD *)v2 + 14);
        std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,void *> *>>(&v4[1].n128_u64[1], *((uint64_t **)v2 + 5), 0);
      }
      result = *((__n128 *)v2 + 17);
      v4[17] = result;
      v2 = *(const Phase::SpatialModeler::RayTracerState **)v2;
    }
    while (v2);
  }
  return result;
}

float Phase::SpatialModeler::RayTracerState::CopyLRClusteringResults(Phase::SpatialModeler::RayTracerState *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  const Phase::SpatialModeler::RayTracerState *v2;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  float result;
  __int128 v10;

  if (a2)
  {
    v2 = a2;
    v4 = (char *)this + 19424;
    do
    {
      *(_QWORD *)&v10 = (char *)v2 + 16;
      v5 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v4, (unint64_t *)v2 + 2, (uint64_t)&std::piecewise_construct, (_QWORD **)&v10);
      if (*((_QWORD *)v2 + 8))
      {
        Phase::SpatialModeler::RayTracerState::CopyDirectivityHistogram(this, (uint64_t *)v2 + 8, (Phase::SpatialModeler::EnergyHistogram **)&v10);
        std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)(v5 + 64), &v10);
        v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
        if (*((_QWORD *)&v10 + 1))
        {
          v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
      if (v2 != (const Phase::SpatialModeler::RayTracerState *)v5)
      {
        *((_DWORD *)v5 + 14) = *((_DWORD *)v2 + 14);
        std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,void *> *>>((_QWORD *)v5 + 3, *((uint64_t **)v2 + 5), 0);
      }
      *(_OWORD *)(v5 + 88) = *(_OWORD *)((char *)v2 + 88);
      result = *((float *)v2 + 20);
      *((float *)v5 + 20) = result;
      v2 = *(const Phase::SpatialModeler::RayTracerState **)v2;
    }
    while (v2);
  }
  return result;
}

float Phase::SpatialModeler::RayTracerState::CopyRoomStatResults(Phase::SpatialModeler::RayTracerState *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  char *v25;
  BOOL v26;
  _QWORD *i;
  uint64_t **v28;
  _OWORD *v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t **v32;
  char *v33;
  char *v34;
  __int128 v35;
  float result;
  char *v37;
  char *v38;

  v4 = (char *)this + 20976;
  v5 = (char *)a2 + 20976;
  memcpy((char *)this + 19504, (char *)a2 + 19504, 0x590uLL);
  if (this != a2)
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 20928, *((char **)a2 + 2616), *((_QWORD *)a2 + 2617), (uint64_t)(*((_QWORD *)a2 + 2617) - *((_QWORD *)a2 + 2616)) >> 2);
    v6 = *((_OWORD *)a2 + 1315);
    v7 = *((_OWORD *)a2 + 1316);
    v8 = *((_OWORD *)a2 + 1317);
    *((_OWORD *)this + 1318) = *((_OWORD *)a2 + 1318);
    *((_OWORD *)this + 1317) = v8;
    *((_OWORD *)this + 1316) = v7;
    *((_OWORD *)this + 1315) = v6;
    v9 = *((_OWORD *)a2 + 1319);
    v10 = *((_OWORD *)a2 + 1320);
    v11 = *((_OWORD *)a2 + 1321);
    *((_OWORD *)this + 1322) = *((_OWORD *)a2 + 1322);
    *((_OWORD *)this + 1321) = v11;
    *((_OWORD *)this + 1320) = v10;
    *((_OWORD *)this + 1319) = v9;
    v12 = *((_QWORD *)a2 + 2679);
    *((_DWORD *)this + 5360) = *((_DWORD *)a2 + 5360);
    *((_QWORD *)this + 2679) = v12;
    *(_OWORD *)((char *)this + 21448) = *(_OWORD *)((char *)a2 + 21448);
    v13 = (char *)*((_QWORD *)a2 + 2619);
    v14 = (char *)a2 + 20960;
    if (*((_QWORD *)this + 2621))
    {
      v15 = *((_QWORD *)this + 2619);
      v16 = (uint64_t **)((char *)this + 20960);
      *((_QWORD *)this + 2619) = (char *)this + 20960;
      *(_QWORD *)(*((_QWORD *)this + 2620) + 16) = 0;
      *((_QWORD *)this + 2621) = 0;
      *((_QWORD *)this + 2620) = 0;
      if (*(_QWORD *)(v15 + 8))
        v17 = *(_QWORD *)(v15 + 8);
      else
        v17 = v15;
      if (v17)
      {
        v37 = v5;
        v18 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::_DetachedTreeCache::__detach_next(v17);
        v38 = v4;
        if (v13 == v14)
        {
          v20 = (_QWORD *)v17;
        }
        else
        {
          v19 = v13;
          do
          {
            v20 = v18;
            v21 = *((_QWORD *)v19 + 4);
            *(_QWORD *)(v17 + 32) = v21;
            *(_DWORD *)(v17 + 40) = *((_DWORD *)v19 + 10);
            v22 = *v16;
            v23 = (uint64_t **)((char *)this + 20960);
            v24 = (uint64_t **)((char *)this + 20960);
            if (*v16)
            {
              do
              {
                while (1)
                {
                  v23 = (uint64_t **)v22;
                  if (v21 >= v22[4])
                    break;
                  v22 = (uint64_t *)*v22;
                  v24 = v23;
                  if (!*v23)
                    goto LABEL_15;
                }
                v22 = (uint64_t *)v22[1];
              }
              while (v22);
              v24 = v23 + 1;
            }
LABEL_15:
            std::__tree<Phase::SpatialCategory>::__insert_node_at((uint64_t **)this + 2619, (uint64_t)v23, v24, (uint64_t *)v17);
            if (v18)
              v18 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::_DetachedTreeCache::__detach_next((uint64_t)v18);
            else
              v18 = 0;
            v25 = (char *)*((_QWORD *)v19 + 1);
            if (v25)
            {
              do
              {
                v13 = v25;
                v25 = *(char **)v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                v13 = (char *)*((_QWORD *)v19 + 2);
                v26 = *(_QWORD *)v13 == (_QWORD)v19;
                v19 = v13;
              }
              while (!v26);
            }
            if (!v20)
              break;
            v17 = (uint64_t)v20;
            v19 = v13;
          }
          while (v13 != v14);
        }
        std::__tree<Phase::SpatialCategory>::destroy((uint64_t)this + 20952, v20);
        if (v18)
        {
          for (i = (_QWORD *)v18[2]; i; i = (_QWORD *)i[2])
            v18 = i;
          std::__tree<Phase::SpatialCategory>::destroy((uint64_t)this + 20952, v18);
        }
        v5 = v37;
        v4 = v38;
      }
      else
      {
        std::__tree<Phase::SpatialCategory>::destroy((uint64_t)this + 20952, 0);
      }
    }
    if (v13 != v14)
    {
      v28 = (uint64_t **)((char *)this + 20960);
      do
      {
        v29 = operator new(0x30uLL);
        v29[2] = *((_OWORD *)v13 + 2);
        v30 = *v28;
        v31 = (uint64_t **)((char *)this + 20960);
        v32 = (uint64_t **)((char *)this + 20960);
        if (*v28)
        {
          do
          {
            while (1)
            {
              v31 = (uint64_t **)v30;
              if (*((_QWORD *)v29 + 4) >= (unint64_t)v30[4])
                break;
              v30 = (uint64_t *)*v30;
              v32 = v31;
              if (!*v31)
                goto LABEL_41;
            }
            v30 = (uint64_t *)v30[1];
          }
          while (v30);
          v32 = v31 + 1;
        }
LABEL_41:
        std::__tree<Phase::SpatialCategory>::__insert_node_at((uint64_t **)this + 2619, (uint64_t)v31, v32, (uint64_t *)v29);
        v33 = (char *)*((_QWORD *)v13 + 1);
        if (v33)
        {
          do
          {
            v34 = v33;
            v33 = *(char **)v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            v34 = (char *)*((_QWORD *)v13 + 2);
            v26 = *(_QWORD *)v34 == (_QWORD)v13;
            v13 = v34;
          }
          while (!v26);
        }
        v13 = v34;
      }
      while (v34 != v14);
    }
  }
  *(_DWORD *)v4 = *(_DWORD *)v5;
  *((_DWORD *)v4 + 1) = *((_DWORD *)v5 + 1);
  *((_DWORD *)v4 + 2) = *((_DWORD *)v5 + 2);
  *((_DWORD *)v4 + 3) = *((_DWORD *)v5 + 3);
  *((_DWORD *)v4 + 4) = *((_DWORD *)v5 + 4);
  *((_DWORD *)v4 + 5) = *((_DWORD *)v5 + 5);
  v35 = *(_OWORD *)((char *)a2 + 21016);
  *(_OWORD *)((char *)this + 21000) = *(_OWORD *)((char *)a2 + 21000);
  *(_OWORD *)((char *)this + 21016) = v35;
  *((_DWORD *)v4 + 14) = *((_DWORD *)v5 + 14);
  result = *((float *)v5 + 15);
  *((float *)v4 + 15) = result;
  return result;
}

void Phase::SpatialModeler::RayTracerState::~RayTracerState(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  Phase::SpatialModeler::RayTracerState::FreeSourceListenerResultsDirectivityHistograms((Phase::SpatialModeler::RayTracerState *)this);
  Phase::SpatialModeler::RayTracerState::FreeLRClusteringResultsDirectivityHistograms((Phase::SpatialModeler::RayTracerState *)this);
  Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::~RoomSimulationDebugView((Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)(this + 2900));
  free(this[2898]);
  free(this[2899]);
  v2 = this[2836];
  if (v2)
  {
    this[2837] = v2;
    operator delete(v2);
  }
  v3 = this[2833];
  if (v3)
  {
    this[2834] = v3;
    operator delete(v3);
  }
  std::__tree<Phase::SpatialCategory>::destroy((uint64_t)(this + 2813), this[2814]);
  std::__tree<Phase::SpatialCategory>::destroy((uint64_t)(this + 2810), this[2811]);
  std::__tree<Phase::SpatialCategory>::destroy((uint64_t)(this + 2619), this[2620]);
  v4 = this[2616];
  if (v4)
  {
    this[2617] = v4;
    operator delete(v4);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::~__hash_table((uint64_t)(this + 2433));
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::~__hash_table((uint64_t)(this + 2428));
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::~__hash_table((uint64_t)(this + 2423));
  std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::destroy((uint64_t)(this + 2420), this[2421]);
  v5 = this[2372];
  if (v5)
  {
    this[2373] = v5;
    operator delete(v5);
  }
  v6 = this[2369];
  if (v6)
  {
    this[2370] = v6;
    operator delete(v6);
  }
  v7 = this[2366];
  if (v7)
  {
    this[2367] = v7;
    operator delete(v7);
  }
}

void Phase::SpatialModeler::RayTracerState::FreeSourceListenerResultsDirectivityHistograms(Phase::SpatialModeler::RayTracerState *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;

  if (*(_QWORD *)this)
  {
    v2 = (char *)*((_QWORD *)this + 2420);
    v3 = (char *)this + 19368;
    if (v2 != (char *)this + 19368)
    {
      do
      {
        if (*((_QWORD *)v2 + 7))
          Phase::SpatialModeler::RayTracerState::FreeDirectivityHistogram(this, (_QWORD *)v2 + 7);
        v4 = (char *)*((_QWORD *)v2 + 1);
        if (v4)
        {
          do
          {
            v5 = v4;
            v4 = *(char **)v4;
          }
          while (v4);
        }
        else
        {
          do
          {
            v5 = (char *)*((_QWORD *)v2 + 2);
            v6 = *(_QWORD *)v5 == (_QWORD)v2;
            v2 = v5;
          }
          while (!v6);
        }
        v2 = v5;
      }
      while (v5 != v3);
    }
  }
}

void Phase::SpatialModeler::RayTracerState::FreeLRClusteringResultsDirectivityHistograms(Phase::SpatialModeler::RayTracerState *this)
{
  _QWORD *i;

  if (*(_QWORD *)this)
  {
    for (i = (_QWORD *)*((_QWORD *)this + 2430); i; i = (_QWORD *)*i)
    {
      if (i[8])
        Phase::SpatialModeler::RayTracerState::FreeDirectivityHistogram(this, i + 8);
    }
  }
}

uint64_t Phase::SpatialModeler::RayTracerState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  v4 = a1 + 22776;
  v5 = a2 + 22776;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_OWORD *)(a2 + 8);
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 8) = v6;
  v8 = *(_OWORD *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 80) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  v12 = *(_OWORD *)(a2 + 160);
  v11 = *(_OWORD *)(a2 + 176);
  v13 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 144) = v13;
  v14 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v14;
  Phase::SpatialModeler::RayTracerState::State::operator=(a1 + 496, a2 + 496);
  memcpy((void *)(a1 + 208), (const void *)(a2 + 208), 0x114uLL);
  Phase::Geometry::Listener::operator=(a1 + 22568, a2 + 22568);
  *(_QWORD *)(a1 + 22768) = *(_QWORD *)(a2 + 22768);
  *(_DWORD *)v4 = *(_DWORD *)v5;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(v5 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(v5 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(v5 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(v5 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(v5 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(v5 + 28);
  Phase::SpatialModeler::RayTracerState::FreeSourceListenerResultsDirectivityHistograms((Phase::SpatialModeler::RayTracerState *)a1);
  Phase::SpatialModeler::RayTracerState::FreeLRClusteringResultsDirectivityHistograms((Phase::SpatialModeler::RayTracerState *)a1);
  std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::destroy(a1 + 19360, *(_QWORD **)(a1 + 19368));
  *(_QWORD *)(a1 + 19360) = a1 + 19368;
  *(_QWORD *)(a1 + 19376) = 0;
  *(_QWORD *)(a1 + 19368) = 0;
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::clear(a1 + 19384);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::clear(a1 + 19424);
  Phase::SpatialModeler::RayTracerState::CopySourceListenerResults((Phase::SpatialModeler::RayTracerState *)a1, (const Phase::SpatialModeler::RayTracerState *)a2);
  Phase::SpatialModeler::RayTracerState::CopyERClusteringResults((Phase::SpatialModeler::RayTracerState *)a1, *(const Phase::SpatialModeler::RayTracerState **)(a2 + 19400));
  Phase::SpatialModeler::RayTracerState::CopyLRClusteringResults((Phase::SpatialModeler::RayTracerState *)a1, *(const Phase::SpatialModeler::RayTracerState **)(a2 + 19440));
  Phase::SpatialModeler::RayTracerState::CopyRoomStatResults((Phase::SpatialModeler::RayTracerState *)a1, (const Phase::SpatialModeler::RayTracerState *)a2);
  v15 = *(_OWORD *)(a2 + 21040);
  v16 = *(_OWORD *)(a2 + 21056);
  v17 = *(_OWORD *)(a2 + 21072);
  *(_OWORD *)(a1 + 21088) = *(_OWORD *)(a2 + 21088);
  *(_OWORD *)(a1 + 21072) = v17;
  *(_OWORD *)(a1 + 21056) = v16;
  *(_OWORD *)(a1 + 21040) = v15;
  v18 = *(_OWORD *)(a2 + 21104);
  v19 = *(_OWORD *)(a2 + 21120);
  v20 = *(_OWORD *)(a2 + 21136);
  *(_OWORD *)(a1 + 21152) = *(_OWORD *)(a2 + 21152);
  *(_OWORD *)(a1 + 21136) = v20;
  *(_OWORD *)(a1 + 21120) = v19;
  *(_OWORD *)(a1 + 21104) = v18;
  v21 = *(_QWORD *)(a2 + 21432);
  *(_DWORD *)(a1 + 21440) = *(_DWORD *)(a2 + 21440);
  *(_QWORD *)(a1 + 21432) = v21;
  *(_OWORD *)(a1 + 21448) = *(_OWORD *)(a2 + 21448);
  Phase::SpatialModeler::ImportanceSampling::operator=((void **)(a1 + 23168), a2 + 23168);
  Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::operator=(a1 + 23200, a2 + 23200);
  *(_WORD *)(v4 + 2264) = *(_WORD *)(v5 + 2264);
  *(_QWORD *)(a1 + 25048) = *(_QWORD *)(a2 + 25048);
  if (a1 != a2)
  {
    std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__tree_node<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,void *> *,long>>((uint64_t **)(a1 + 22480), *(_QWORD **)(a2 + 22480), (_QWORD *)(a2 + 22488));
    std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__tree_node<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,void *> *,long>>((uint64_t **)(a1 + 22504), *(_QWORD **)(a2 + 22504), (_QWORD *)(a2 + 22512));
  }
  v22 = *(_OWORD *)(a2 + 22528);
  v23 = *(_OWORD *)(a2 + 22544);
  *(_QWORD *)(a1 + 22560) = *(_QWORD *)(a2 + 22560);
  *(_OWORD *)(a1 + 22544) = v23;
  *(_OWORD *)(a1 + 22528) = v22;
  return a1;
}

void Phase::SpatialModeler::RayTracerState::CopyDirectivityHistogram(Phase::Logger *a1@<X0>, uint64_t *a2@<X1>, Phase::SpatialModeler::EnergyHistogram **a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  Phase::SpatialModeler::EnergyHistogram *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  _BYTE v14[18];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*a2)
  {
    *a3 = 0;
    a3[1] = 0;
    if (!*(_QWORD *)a1)
      goto LABEL_9;
    Phase::SpatialModeler::HistogramPtrStack::Pop((Phase::SpatialModeler::HistogramPtrStack *)(*(_QWORD *)a1 + 1328), v14);
    std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)v14);
    v5 = *(std::__shared_weak_count **)&v14[8];
    if (*(_QWORD *)&v14[8])
    {
      v6 = (unint64_t *)(*(_QWORD *)&v14[8] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *a3;
    if (!*a3)
    {
LABEL_9:
      v9 = operator new(0x1D8uLL);
      v9[1] = 0;
      v9[2] = 0;
      *v9 = &off_24D580A98;
      v9[5] = 0;
      v9[6] = 0;
      v9[4] = 0;
      *((_DWORD *)v9 + 14) = 1065353216;
      *((_BYTE *)v9 + 60) = 1;
      v9[8] = 0;
      v9[9] = 0;
      *((_DWORD *)v9 + 20) = 0;
      *(_QWORD *)((char *)v9 + 84) = 1065353216;
      *(_QWORD *)((char *)v9 + 92) = 0;
      *(_QWORD *)((char *)v9 + 100) = -3229614080;
      v9[3] = &off_24D57A7D8;
      v9[18] = 0;
      v9[15] = 0;
      v9[16] = 0;
      *((_DWORD *)v9 + 34) = 0;
      v9[14] = 0;
      *(_QWORD *)v14 = v9 + 3;
      *(_QWORD *)&v14[8] = v9;
      std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)v14);
      v10 = *(std::__shared_weak_count **)&v14[8];
      if (*(_QWORD *)&v14[8])
      {
        v11 = (unint64_t *)(*(_QWORD *)&v14[8] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v8 = *a3;
    }
    Phase::SpatialModeler::DirectivityHistogram::operator=(v8, *a2);
  }
  else
  {
    v13 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 1184);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v14 = 136315394;
      *(_QWORD *)&v14[4] = "RayTracerState.cpp";
      *(_WORD *)&v14[12] = 1024;
      *(_DWORD *)&v14[14] = 1400;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Copying a nullptr DirectivityHistogram.", v14, 0x12u);
    }
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_21668DFB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::RayTracerState::CopyStateAndAssignToModelerInstance(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  _BYTE buf[12];
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v10 = a1 + 22776;
  v11 = a5 + 22776;
  *(_QWORD *)a1 = a2;
  v12 = *(_OWORD *)(a5 + 8);
  v13 = *(_OWORD *)(a5 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a5 + 40);
  *(_OWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 8) = v12;
  v14 = *(_OWORD *)(a5 + 128);
  v16 = *(_OWORD *)(a5 + 80);
  v15 = *(_OWORD *)(a5 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a5 + 112);
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 80) = v16;
  *(_OWORD *)(a1 + 96) = v15;
  v18 = *(_OWORD *)(a5 + 160);
  v17 = *(_OWORD *)(a5 + 176);
  v19 = *(_OWORD *)(a5 + 144);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a5 + 192);
  *(_OWORD *)(a1 + 160) = v18;
  *(_OWORD *)(a1 + 176) = v17;
  *(_OWORD *)(a1 + 144) = v19;
  v20 = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(a1 + 64) = v20;
  Phase::SpatialModeler::RayTracerState::State::operator=(a1 + 496, a5 + 496);
  memcpy((void *)(a1 + 208), (const void *)(a5 + 208), 0x114uLL);
  Phase::Geometry::Listener::operator=(a1 + 22568, a5 + 22568);
  *(_QWORD *)(a1 + 22768) = *(_QWORD *)(a5 + 22768);
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_DWORD *)(v10 + 4) = *(_DWORD *)(v11 + 4);
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
  *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
  *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
  *(_DWORD *)(v10 + 20) = *(_DWORD *)(v11 + 20);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(v11 + 24);
  *(_DWORD *)(v10 + 28) = *(_DWORD *)(v11 + 28);
  Phase::SpatialModeler::RayTracerState::FreeSourceListenerResultsDirectivityHistograms((Phase::SpatialModeler::RayTracerState *)a1);
  std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::destroy(a1 + 19360, *(_QWORD **)(a1 + 19368));
  *(_QWORD *)(a1 + 19360) = a1 + 19368;
  *(_QWORD *)(a1 + 19376) = 0;
  *(_QWORD *)(a1 + 19368) = 0;
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::clear(a1 + 19384);
  Phase::SpatialModeler::RayTracerState::CopySourceListenerResults((Phase::SpatialModeler::RayTracerState *)a1, (const Phase::SpatialModeler::RayTracerState *)a5);
  Phase::SpatialModeler::RayTracerState::CopyERClusteringResults((Phase::SpatialModeler::RayTracerState *)a1, *(const Phase::SpatialModeler::RayTracerState **)(a5 + 19400));
  Phase::SpatialModeler::RayTracerState::CopyRoomStatResults((Phase::SpatialModeler::RayTracerState *)a1, (const Phase::SpatialModeler::RayTracerState *)a5);
  v21 = *(_OWORD *)(a5 + 21040);
  v22 = *(_OWORD *)(a5 + 21056);
  v23 = *(_OWORD *)(a5 + 21072);
  *(_OWORD *)(a1 + 21088) = *(_OWORD *)(a5 + 21088);
  *(_OWORD *)(a1 + 21072) = v23;
  *(_OWORD *)(a1 + 21056) = v22;
  *(_OWORD *)(a1 + 21040) = v21;
  v24 = *(_OWORD *)(a5 + 21104);
  v25 = *(_OWORD *)(a5 + 21120);
  v26 = *(_OWORD *)(a5 + 21136);
  *(_OWORD *)(a1 + 21152) = *(_OWORD *)(a5 + 21152);
  *(_OWORD *)(a1 + 21136) = v26;
  *(_OWORD *)(a1 + 21120) = v25;
  *(_OWORD *)(a1 + 21104) = v24;
  v27 = *(_QWORD *)(a5 + 21432);
  *(_DWORD *)(a1 + 21440) = *(_DWORD *)(a5 + 21440);
  *(_QWORD *)(a1 + 21432) = v27;
  *(_OWORD *)(a1 + 21448) = *(_OWORD *)(a5 + 21448);
  Phase::SpatialModeler::ImportanceSampling::operator=((void **)(a1 + 23168), a5 + 23168);
  v28 = Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::operator=(a1 + 23200, a5 + 23200);
  *(_WORD *)(v10 + 2264) = *(_WORD *)(v11 + 2264);
  *(_QWORD *)(a1 + 25048) = *(_QWORD *)(a5 + 25048);
  *(_QWORD *)(a1 + 18936) = *(_QWORD *)(a1 + 18928);
  if (a3 && a3[5])
  {
    v29 = *a3;
    do
    {
      v30 = *(_QWORD *)(v29 + 144);
      if (*(_DWORD *)(a6 + 136) > v30
        && (v31 = *(_QWORD *)(a6 + 120), *(_DWORD *)(v31 + 24 * v30 + 20) == HIDWORD(v30))
        && (v32 = *(_QWORD *)(v31 + 24 * *(_QWORD *)(v29 + 144))) != 0
        && *(_DWORD *)v32 == 3)
      {
        if (*(_DWORD *)(v29 + 208) == 3)
          v33 = *(_QWORD *)(v29 + 216);
        else
          v33 = 0;
        v36 = *(_QWORD *)(v32 + 8);
        v37 = 0xC6A4A7935BD1E995
            * ((0xC6A4A7935BD1E995
              * ((0xC6A4A7935BD1E995
                * ((0xC6A4A7935BD1E995 * *(_QWORD *)(a4 + 8)) ^ ((0xC6A4A7935BD1E995 * *(_QWORD *)(a4 + 8)) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v36) ^ ((0xC6A4A7935BD1E995 * v36) >> 47)) + 3864292196u))
              + 3864292196u) ^ (0xC6A4A7935BD1E995
                              * ((0xC6A4A7935BD1E995 * v33) ^ ((0xC6A4A7935BD1E995 * v33) >> 47))))
            + 3864292196u;
        *(_QWORD *)buf = v37;
        v38 = *(_DWORD *)(v32 + 48);
        v39 = *(_DWORD *)(v32 + 52);
        *(_DWORD *)&buf[8] = v38;
        LODWORD(v49) = v39;
        v40 = *(_DWORD *)(v32 + 56);
        v41 = *(_DWORD *)(v32 + 60);
        HIDWORD(v49) = v40;
        LODWORD(v50) = v41;
        v42 = *(_DWORD *)(v32 + 64);
        v43 = *(_DWORD *)(v32 + 68);
        HIDWORD(v50) = v42;
        v51 = v43;
        v44 = *(_DWORD *)(v32 + 72);
        v45 = *(_DWORD *)(v32 + 76);
        v52 = v44;
        v53 = v45;
        *(_QWORD *)&v54 = v33;
        *((_QWORD *)&v54 + 1) = v36;
        v46 = *(_QWORD *)(a1 + 18936);
        if (v46 >= *(_QWORD *)(a1 + 18944))
        {
          v28 = (uint64_t)std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>::__push_back_slow_path<Phase::SpatialModeler::PhaseRoomSimulationSoundSource const&>((char **)(a1 + 18928), (uint64_t)buf);
        }
        else
        {
          *(_QWORD *)v46 = v37;
          *(_DWORD *)(v46 + 8) = v38;
          *(_DWORD *)(v46 + 12) = v39;
          *(_DWORD *)(v46 + 16) = v40;
          *(_DWORD *)(v46 + 20) = v41;
          *(_DWORD *)(v46 + 24) = v42;
          *(_DWORD *)(v46 + 28) = v43;
          *(_DWORD *)(v46 + 32) = v44;
          *(_DWORD *)(v46 + 36) = v45;
          *(_OWORD *)(v46 + 40) = v54;
          v28 = v46 + 56;
        }
        *(_QWORD *)(a1 + 18936) = v28;
      }
      else
      {
        v34 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v28) + 1184);
        v28 = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v28)
        {
          v35 = *(_QWORD *)(v29 + 144);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "RayTracerState.cpp";
          v49 = 0x800000001100400;
          v50 = v35;
          _os_log_impl(&dword_2164CC000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d Source provided to cluster query (%llu) was not found in the Geometry Layer", buf, 0x1Cu);
        }
      }
      v29 += 304;
    }
    while (v29 != *a3 + 304 * a3[5]);
  }
}

void Phase::SpatialModeler::RayTracerState::InitRayTracerState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, Phase::SpatialModeler::RayTracerState *this)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  int v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  float *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t *v38;
  float v39;
  int v40;
  float *v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  BOOL v72;
  _QWORD *v73;
  unint64_t v74;
  char *v75;
  uint64_t **v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _DWORD **v83;
  unsigned int v84;
  _DWORD **v85;
  _DWORD *v86;
  _DWORD **v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  _QWORD *v101;
  _QWORD *v102;
  unint64_t v103;
  BOOL v104;
  _QWORD *v105;
  unint64_t v106;
  char *v107;
  uint64_t **v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  unint64_t v121;
  char **v122;
  char **v123;
  float32x2_t *v124;
  float v125;
  float32x2_t v126;
  uint64_t v127;
  __int128 v128;
  char *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t **v139;
  uint64_t **v140;
  uint64_t *v141;
  uint64_t *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *p_shared_owners;
  unint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  unint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  float v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  char **v197;
  _QWORD *v198;
  _DWORD **v199;
  unint64_t v200;
  uint64_t **v201;
  unint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  _BYTE v210[32];
  uint8_t buf[136];
  uint64_t v212;

  v212 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  v11 = *(_OWORD *)(a2 + 1072);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 1056);
  *(_OWORD *)(a1 + 64) = v11;
  v12 = *(_OWORD *)(a2 + 1088);
  v13 = *(_OWORD *)(a2 + 1104);
  v14 = *(_OWORD *)(a2 + 1136);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 1120);
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 80) = v12;
  *(_OWORD *)(a1 + 96) = v13;
  v15 = *(_OWORD *)(a2 + 1152);
  v16 = *(_OWORD *)(a2 + 1168);
  v17 = *(_OWORD *)(a2 + 1184);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 1200);
  *(_OWORD *)(a1 + 160) = v16;
  *(_OWORD *)(a1 + 176) = v17;
  *(_OWORD *)(a1 + 144) = v15;
  v18 = (_OWORD *)(a1 + 208);
  *(float *)(a1 + 480) = (float)(unint64_t)this;
  v209 = 0u;
  memset(v210, 0, 28);
  v207 = 0u;
  v208 = 0u;
  v205 = 0u;
  v206 = 0u;
  v204 = 0u;
  if (this == (Phase::SpatialModeler::RayTracerState *)31)
  {
    v208 = xmmword_21673A8F0;
    v209 = unk_21673A900;
    *(_OWORD *)v210 = xmmword_21673A910;
    *(_OWORD *)&v210[12] = *(__int128 *)((char *)&xmmword_21673A910 + 12);
    v204 = Phase::sThirdOctaveBandFrequencies;
    v205 = unk_21673A8C0;
    v19 = 31;
    v206 = xmmword_21673A8D0;
    v207 = unk_21673A8E0;
  }
  else if (this == (Phase::SpatialModeler::RayTracerState *)10)
  {
    memset(&buf[40], 0, 84);
    *(_QWORD *)&buf[32] = 0x467A000045FA0000;
    *(_OWORD *)buf = Phase::sOctaveBandFrequencies;
    *(_OWORD *)&buf[16] = unk_21673A894;
    *(_OWORD *)&v210[12] = *(_OWORD *)&buf[108];
    v209 = *(_OWORD *)&buf[80];
    *(_OWORD *)v210 = *(_OWORD *)&buf[96];
    v207 = *(_OWORD *)&buf[48];
    v208 = *(_OWORD *)&buf[64];
    v205 = unk_21673A894;
    v206 = *(_OWORD *)&buf[32];
    v19 = 10;
    v204 = Phase::sOctaveBandFrequencies;
  }
  else if (this == (Phase::SpatialModeler::RayTracerState *)3)
  {
    memset(&buf[12], 0, 112);
    *(_DWORD *)&buf[8] = 1165623296;
    *(_QWORD *)buf = 0x447A0000437A0000;
    v208 = *(_OWORD *)&buf[64];
    v209 = *(_OWORD *)&buf[80];
    *(_OWORD *)v210 = *(_OWORD *)&buf[96];
    *(_OWORD *)&v210[12] = 0uLL;
    v206 = *(_OWORD *)&buf[32];
    v207 = *(_OWORD *)&buf[48];
    v19 = 3;
    v204 = *(_OWORD *)buf;
    v205 = *(_OWORD *)&buf[16];
  }
  else
  {
    v20 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 1184);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "RayTracerState.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 499;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = this;
      _os_log_impl(&dword_2164CC000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported sub-band count: %zu\n", buf, 0x1Cu);
    }
    v19 = 0;
  }
  v21 = v209;
  v18[4] = v208;
  v18[5] = v21;
  v18[6] = *(_OWORD *)v210;
  *(_OWORD *)((char *)v18 + 108) = *(_OWORD *)&v210[12];
  v22 = v205;
  *v18 = v204;
  v18[1] = v22;
  v23 = v207;
  v18[2] = v206;
  v18[3] = v23;
  *(_DWORD *)(a1 + 332) = v19;
  *(_QWORD *)(a1 + 472) = Phase::SpatialModeler::RayTracerState::GetSubbandIndex(this);
  v24 = *(_QWORD *)(a3 + 152);
  v200 = (unint64_t)this;
  if (*(_DWORD *)(a3 + 64) <= v24)
    goto LABEL_20;
  v25 = *(_QWORD *)(a3 + 48);
  if (*(_DWORD *)(v25 + 24 * v24 + 20) != HIDWORD(v24))
    goto LABEL_20;
  v26 = *(_QWORD *)(v25 + 24 * v24);
  if (!v26)
    goto LABEL_20;
  if (*(_DWORD *)v26 != 1)
    goto LABEL_20;
  v27 = **(_QWORD **)(v26 + 40);
  v28 = *(_OWORD *)(v27 + 224);
  *(_OWORD *)&buf[64] = *(_OWORD *)(v27 + 208);
  *(_OWORD *)&buf[80] = v28;
  v29 = *(_OWORD *)(v27 + 256);
  *(_OWORD *)&buf[96] = *(_OWORD *)(v27 + 240);
  *(_OWORD *)&buf[112] = v29;
  v30 = *(_OWORD *)(v27 + 160);
  *(_OWORD *)buf = *(_OWORD *)(v27 + 144);
  *(_OWORD *)&buf[16] = v30;
  v31 = *(_OWORD *)(v27 + 192);
  *(_OWORD *)&buf[32] = *(_OWORD *)(v27 + 176);
  *(_OWORD *)&buf[48] = v31;
  if ((Phase::SpatialModeler::RayTracerState *)*(unsigned int *)(v27 + 140) != this)
    goto LABEL_20;
  if (Phase::operator==<float>(v27 + 16, (uint64_t)v18))
  {
    v32 = *(unsigned int *)&buf[124];
    v204 = 0u;
    v205 = 0u;
    v206 = 0u;
    v207 = 0u;
    v208 = 0u;
    v209 = 0u;
    memset(v210, 0, 28);
    *(_DWORD *)&v210[28] = *(_DWORD *)&buf[124];
    if (*(_DWORD *)&buf[124])
    {
      bzero(&v204, 4 * *(unsigned int *)&buf[124]);
      v33 = (float *)(a1 + 336);
      v34 = v209;
      *(_OWORD *)(a1 + 400) = v208;
      *(_OWORD *)(a1 + 416) = v34;
      v35 = *(_OWORD *)&v210[16];
      *(_OWORD *)(a1 + 432) = *(_OWORD *)v210;
      *(_OWORD *)(a1 + 448) = v35;
      v36 = v205;
      *(_OWORD *)(a1 + 336) = v204;
      *(_OWORD *)(a1 + 352) = v36;
      v37 = v207;
      v38 = buf;
      *(_OWORD *)(a1 + 368) = v206;
      *(_OWORD *)(a1 + 384) = v37;
      do
      {
        v39 = *(float *)v38;
        v38 += 4;
        *v33++ = fabsf(v39);
        --v32;
      }
      while (v32);
    }
    else
    {
      v193 = v209;
      *(_OWORD *)(a1 + 400) = v208;
      *(_OWORD *)(a1 + 416) = v193;
      v194 = *(_OWORD *)&v210[16];
      *(_OWORD *)(a1 + 432) = *(_OWORD *)v210;
      *(_OWORD *)(a1 + 448) = v194;
      v195 = v205;
      *(_OWORD *)(a1 + 336) = v204;
      *(_OWORD *)(a1 + 352) = v195;
      v196 = v207;
      *(_OWORD *)(a1 + 368) = v206;
      *(_OWORD *)(a1 + 384) = v196;
    }
    v50 = *(_DWORD *)(v27 + 272);
  }
  else
  {
LABEL_20:
    v40 = *(_DWORD *)(a1 + 332);
    if (v40)
    {
      v41 = (float *)(a1 + 336);
      v42 = *(unsigned int *)(a1 + 332);
      do
      {
        v43 = *(float *)(a2 + 1220);
        v44 = *(v41 - 32) * *(v41 - 32);
        v45 = (float)(101.32 / (float)(*(float *)(a2 + 1260) / 1000.0)) * 1.84e-11;
        v46 = fabsf(sqrtf(v43 / 293.16));
        if ((float)(v43 / 293.16) == -INFINITY)
          v47 = INFINITY;
        else
          v47 = v46;
        v48 = powf(v43 / 293.16, -2.5);
        v49 = (float)(expf(-2239.1 / v43) * 0.01278)
            / (float)(*(float *)(a2 + 1268) + (float)(v44 / *(float *)(a2 + 1268)));
        *v41++ = (float)((float)(v44
                               * (float)((float)(v48
                                               * (float)(v49
                                                       + (float)((float)(expf(-3352.0 / v43) * 0.1068)
                                                               / (float)(*(float *)(a2 + 1272)
                                                                       + (float)(v44 / *(float *)(a2 + 1272))))))
                                       + (float)(v45 * v47)))
                       * 8.6859)
               / 4.3429;
        --v42;
      }
      while (v42);
    }
    *(_DWORD *)(a1 + 460) = v40;
    v50 = *(_DWORD *)(a2 + 1276);
  }
  *(_DWORD *)(a1 + 464) = v50;
  Phase::SpatialModeler::GetFullSceneAABB((Phase::SpatialModeler *)a3, (uint64_t)buf);
  v201 = (uint64_t **)(a1 + 19360);
  *(_OWORD *)(a1 + 20976) = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 20992) = *(_QWORD *)&buf[16];
  v197 = (char **)(a1 + 18928);
  *(_QWORD *)(a1 + 18936) = *(_QWORD *)(a1 + 18928);
  if (a4)
  {
    if (a4[5])
    {
      v52 = *a4;
      v198 = (_QWORD *)(a1 + 19368);
      do
      {
        v53 = *(_QWORD *)(v52 + 144);
        if (*(_DWORD *)(a3 + 136) > v53
          && (v54 = *(_QWORD *)(a3 + 120), *(_DWORD *)(v54 + 24 * v53 + 20) == HIDWORD(v53))
          && (v55 = *(_QWORD *)(v54 + 24 * *(_QWORD *)(v52 + 144))) != 0
          && *(_DWORD *)v55 == 3)
        {
          if (*(_DWORD *)(v52 + 208) == 3)
            v56 = *(_QWORD *)(v52 + 216);
          else
            v56 = 0;
          v59 = *(_QWORD *)(v55 + 8);
          v60 = 0xC6A4A7935BD1E995
              * ((0xC6A4A7935BD1E995
                * ((0xC6A4A7935BD1E995
                  * ((0xC6A4A7935BD1E995 * *(_QWORD *)(a5 + 8)) ^ ((0xC6A4A7935BD1E995 * *(_QWORD *)(a5 + 8)) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v59) ^ ((0xC6A4A7935BD1E995 * v59) >> 47)) + 3864292196u))
                + 3864292196u) ^ (0xC6A4A7935BD1E995
                                * ((0xC6A4A7935BD1E995 * v56) ^ ((0xC6A4A7935BD1E995 * v56) >> 47))))
              + 3864292196u;
          *(_QWORD *)buf = v60;
          v61 = *(_DWORD *)(v55 + 48);
          v62 = *(_DWORD *)(v55 + 52);
          *(_DWORD *)&buf[8] = v61;
          *(_DWORD *)&buf[12] = v62;
          v63 = *(_DWORD *)(v55 + 56);
          v64 = *(_DWORD *)(v55 + 60);
          *(_DWORD *)&buf[16] = v63;
          *(_DWORD *)&buf[20] = v64;
          v65 = *(_DWORD *)(v55 + 64);
          v66 = *(_DWORD *)(v55 + 68);
          *(_DWORD *)&buf[24] = v65;
          *(_DWORD *)&buf[28] = v66;
          v67 = *(_DWORD *)(v55 + 72);
          v68 = *(_DWORD *)(v55 + 76);
          *(_DWORD *)&buf[32] = v67;
          *(_DWORD *)&buf[36] = v68;
          *(_QWORD *)&buf[40] = v56;
          *(_QWORD *)&buf[48] = v59;
          v203 = v60;
          v69 = (_QWORD *)*v198;
          if (!*v198)
            goto LABEL_52;
          v70 = (_QWORD *)(a1 + 19368);
          do
          {
            v71 = v69[4];
            v72 = v71 >= v60;
            if (v71 >= v60)
              v73 = v69;
            else
              v73 = v69 + 1;
            if (v72)
              v70 = v69;
            v69 = (_QWORD *)*v73;
          }
          while (*v73);
          if (v70 == v198 || v60 < v70[4])
          {
LABEL_52:
            v74 = *(_QWORD *)(a1 + 18936);
            if (v74 >= *(_QWORD *)(a1 + 18944))
            {
              v75 = std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>::__push_back_slow_path<Phase::SpatialModeler::PhaseRoomSimulationSoundSource const&>(v197, (uint64_t)buf);
            }
            else
            {
              *(_QWORD *)v74 = v60;
              *(_DWORD *)(v74 + 8) = v61;
              *(_DWORD *)(v74 + 12) = v62;
              *(_DWORD *)(v74 + 16) = v63;
              *(_DWORD *)(v74 + 20) = v64;
              *(_DWORD *)(v74 + 24) = v65;
              *(_DWORD *)(v74 + 28) = v66;
              *(_DWORD *)(v74 + 32) = v67;
              *(_DWORD *)(v74 + 36) = v68;
              *(_OWORD *)(v74 + 40) = *(_OWORD *)&buf[40];
              v75 = (char *)(v74 + 56);
            }
            *(_QWORD *)(a1 + 18936) = v75;
            LODWORD(v206) = 0;
            v204 = 0u;
            v205 = 0u;
            v76 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v201, v60, &v203);
            std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)(v76 + 5), &v204);
            v51 = std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)(v76 + 7), &v205);
            *((_DWORD *)v76 + 18) = v206;
            v77 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
            if (*((_QWORD *)&v205 + 1))
            {
              v78 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
              do
                v79 = __ldaxr(v78);
              while (__stlxr(v79 - 1, v78));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
              }
            }
            v80 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
            if (*((_QWORD *)&v204 + 1))
            {
              v81 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
              do
                v82 = __ldaxr(v81);
              while (__stlxr(v82 - 1, v81));
              if (!v82)
              {
                ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                std::__shared_weak_count::__release_weak(v80);
              }
            }
          }
        }
        else
        {
          v57 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v51) + 1184);
          v51 = os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v51)
          {
            v58 = *(_QWORD *)(v52 + 144);
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "RayTracerState.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 372;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v58;
            _os_log_impl(&dword_2164CC000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d Source provided to cluster query (%llu) was not found in the Geometry Layer", buf, 0x1Cu);
          }
        }
        v52 += 304;
      }
      while (v52 != *a4 + 304 * a4[5]);
    }
  }
  else
  {
    v83 = *(_DWORD ***)(a3 + 120);
    v84 = *(_DWORD *)(a3 + 136);
    v85 = &v83[3 * v84];
    if (v84)
    {
      v86 = *v83;
      if (!*v83)
      {
        v87 = v83 + 3;
        while (1)
        {
          v83 = v87;
          if (v87 >= v85)
            break;
          v87 += 3;
          v86 = *v83;
          if (*v83)
            goto LABEL_73;
        }
        v86 = 0;
      }
LABEL_73:
      v88 = (unint64_t)v85;
    }
    else
    {
      v86 = 0;
      v88 = *(_QWORD *)(a3 + 120);
    }
    if (v83 != v85)
    {
      v89 = (_QWORD *)(a1 + 19368);
      v199 = v85;
      do
      {
        if (v86 && *v86 == 3)
        {
          v90 = *(_QWORD *)(*(_QWORD *)(a3 + 120) + 24 * v86[2]);
          v91 = *(_QWORD *)(v90 + 8);
          v92 = 0x35A98F4D286A90B9
              * ((0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v91) ^ ((0xC6A4A7935BD1E995 * v91) >> 47))
                + 3864292196u) ^ (0xC6A4A7935BD1E995
                                * ((0xC6A4A7935BD1E995 * *(_QWORD *)(a5 + 8)) ^ ((0xC6A4A7935BD1E995
                                                                                  * *(_QWORD *)(a5 + 8)) >> 47))))
              - 0x34CB3A51FC270F68;
          *(_QWORD *)buf = v92;
          v93 = *(_DWORD *)(v90 + 48);
          v94 = *(_DWORD *)(v90 + 52);
          *(_DWORD *)&buf[8] = v93;
          *(_DWORD *)&buf[12] = v94;
          v95 = *(_DWORD *)(v90 + 56);
          v96 = *(_DWORD *)(v90 + 60);
          *(_DWORD *)&buf[16] = v95;
          *(_DWORD *)&buf[20] = v96;
          v97 = *(_DWORD *)(v90 + 64);
          v98 = *(_DWORD *)(v90 + 68);
          *(_DWORD *)&buf[24] = v97;
          *(_DWORD *)&buf[28] = v98;
          v99 = *(_DWORD *)(v90 + 72);
          v100 = *(_DWORD *)(v90 + 76);
          *(_DWORD *)&buf[32] = v99;
          *(_DWORD *)&buf[36] = v100;
          *(_QWORD *)&buf[40] = 0;
          *(_QWORD *)&buf[48] = v91;
          v101 = (_QWORD *)*v89;
          if (!*v89)
            goto LABEL_89;
          v102 = (_QWORD *)(a1 + 19368);
          do
          {
            v103 = v101[4];
            v104 = v103 >= v92;
            if (v103 >= v92)
              v105 = v101;
            else
              v105 = v101 + 1;
            if (v104)
              v102 = v101;
            v101 = (_QWORD *)*v105;
          }
          while (*v105);
          if (v102 == v89 || v92 < v102[4])
          {
LABEL_89:
            v106 = *(_QWORD *)(a1 + 18936);
            if (v106 >= *(_QWORD *)(a1 + 18944))
            {
              v107 = std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>::__push_back_slow_path<Phase::SpatialModeler::PhaseRoomSimulationSoundSource const&>(v197, (uint64_t)buf);
            }
            else
            {
              *(_QWORD *)v106 = v92;
              *(_DWORD *)(v106 + 8) = v93;
              *(_DWORD *)(v106 + 12) = v94;
              *(_DWORD *)(v106 + 16) = v95;
              *(_DWORD *)(v106 + 20) = v96;
              *(_DWORD *)(v106 + 24) = v97;
              *(_DWORD *)(v106 + 28) = v98;
              *(_DWORD *)(v106 + 32) = v99;
              *(_DWORD *)(v106 + 36) = v100;
              *(_OWORD *)(v106 + 40) = *(_OWORD *)&buf[40];
              v107 = (char *)(v106 + 56);
            }
            *(_QWORD *)(a1 + 18936) = v107;
            LODWORD(v206) = 0;
            v204 = 0u;
            v205 = 0u;
            v108 = (uint64_t **)(a1 + 19368);
            v109 = a1 + 19368;
            v110 = *(_QWORD *)(a1 + 19368);
            if (v110)
            {
              while (1)
              {
                while (1)
                {
                  v109 = v110;
                  v111 = *(_QWORD *)(v110 + 32);
                  if (v111 <= v92)
                    break;
                  v110 = *(_QWORD *)v109;
                  v108 = (uint64_t **)v109;
                  if (!*(_QWORD *)v109)
                    goto LABEL_99;
                }
                if (v111 >= v92)
                  break;
                v110 = *(_QWORD *)(v109 + 8);
                if (!v110)
                {
                  v108 = (uint64_t **)(v109 + 8);
                  goto LABEL_99;
                }
              }
            }
            else
            {
LABEL_99:
              v112 = (char *)operator new(0x50uLL);
              *((_QWORD *)v112 + 4) = v92;
              *(_OWORD *)(v112 + 40) = 0u;
              *(_OWORD *)(v112 + 56) = 0u;
              *((_QWORD *)v112 + 9) = 0;
              std::__tree<Phase::SpatialCategory>::__insert_node_at(v201, v109, v108, (uint64_t *)v112);
              v109 = (uint64_t)v112;
            }
            std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100](v109 + 40, &v204);
            std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100](v109 + 56, &v205);
            *(_DWORD *)(v109 + 72) = v206;
            v113 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
            if (*((_QWORD *)&v205 + 1))
            {
              v114 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 - 1, v114));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            v116 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
            if (*((_QWORD *)&v204 + 1))
            {
              v117 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
              do
                v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                std::__shared_weak_count::__release_weak(v116);
              }
            }
            v85 = v199;
          }
        }
        if ((unint64_t)v83 < v88)
        {
          v119 = v83 + 3;
          while (1)
          {
            v83 = v119;
            if ((unint64_t)v119 >= v88)
              break;
            v119 += 3;
            v86 = *v83;
            if (*v83)
              goto LABEL_117;
          }
          v86 = 0;
        }
LABEL_117:
        ;
      }
      while (v83 != v85);
    }
  }
  *(_QWORD *)(a1 + 18960) = *(_QWORD *)(a1 + 18952);
  *(_QWORD *)(a1 + 18984) = *(_QWORD *)(a1 + 18976);
  v120 = *(_QWORD *)(a1 + 18928);
  if (*(_QWORD *)(a1 + 18936) != v120)
  {
    v121 = 0;
    v122 = (char **)(a1 + 18952);
    v123 = (char **)(a1 + 18976);
    do
    {
      v124 = (float32x2_t *)(v120 + 56 * v121);
      v125 = v124[4].f32[0] - *(float *)(a5 + 72);
      v126 = vsub_f32(v124[3], *(float32x2_t *)(a5 + 64));
      Phase::SpatialModeler::RayTracerState::CreateDirectivityHistogram((Phase::SpatialModeler::RayTracerState *)a1, *(float *)(a1 + 112), *(float *)(a1 + 116), sqrtf(vaddv_f32(vmul_f32(v126, v126)) + (float)(v125 * v125)) / *(float *)(a1 + 464), v200, (Phase::SpatialModeler::DirectivityHistogram **)&v204);
      v127 = v204;
      v128 = *(_OWORD *)(a5 + 64);
      *(_OWORD *)(v204 + 48) = *(_OWORD *)(a5 + 48);
      *(_OWORD *)(v127 + 64) = v128;
      v129 = (char *)operator new(0xA0uLL);
      v130 = (std::__shared_weak_count *)v129;
      *((_QWORD *)v129 + 1) = 0;
      v131 = (unint64_t *)(v129 + 8);
      *((_QWORD *)v129 + 2) = 0;
      *(_QWORD *)v129 = &off_24D580A60;
      *(_OWORD *)(v129 + 40) = 0u;
      *(_OWORD *)(v129 + 24) = 0u;
      *((_DWORD *)v129 + 14) = 1065353216;
      *((_OWORD *)v129 + 4) = 0u;
      *((_OWORD *)v129 + 5) = 0u;
      *((_OWORD *)v129 + 6) = 0u;
      *((_OWORD *)v129 + 7) = 0u;
      *((_OWORD *)v129 + 8) = 0u;
      *((_OWORD *)v129 + 9) = 0u;
      *(_QWORD *)buf = v129 + 24;
      *(_QWORD *)&buf[8] = v129;
      do
        v132 = __ldxr(v131);
      while (__stxr(v132 + 1, v131));
      *(_QWORD *)&buf[16] = v127;
      *(_QWORD *)&buf[24] = *((_QWORD *)&v204 + 1);
      if (*((_QWORD *)&v204 + 1))
      {
        v133 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
        do
          v134 = __ldxr(v133);
        while (__stxr(v134 + 1, v133));
      }
      *(_DWORD *)&buf[32] = 0;
      do
        v135 = __ldaxr(v131);
      while (__stlxr(v135 - 1, v131));
      if (!v135)
      {
        (*(void (**)(char *))(*(_QWORD *)v129 + 16))(v129);
        std::__shared_weak_count::__release_weak(v130);
      }
      v136 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
      if (*((_QWORD *)&v204 + 1))
      {
        v137 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      *(float32x2_t *)&v204 = *v124;
      v139 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v201, v204, &v204);
      v140 = v139;
      v142 = *(uint64_t **)buf;
      v141 = *(uint64_t **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v143 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v144 = __ldxr(v143);
        while (__stxr(v144 + 1, v143));
      }
      v145 = (std::__shared_weak_count *)v139[6];
      v139[5] = v142;
      v139[6] = v141;
      if (v145)
      {
        p_shared_owners = (unint64_t *)&v145->__shared_owners_;
        do
          v147 = __ldaxr(p_shared_owners);
        while (__stlxr(v147 - 1, p_shared_owners));
        if (!v147)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }
      std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100](v140 + 7, (uint64_t *)&buf[16]);
      *((_DWORD *)v140 + 18) = *(_DWORD *)&buf[32];
      v148 = *(_QWORD *)&buf[16];
      v149 = *(_QWORD **)(a1 + 18960);
      v150 = *(_QWORD *)(a1 + 18968);
      if ((unint64_t)v149 >= v150)
      {
        v152 = ((char *)v149 - *v122) >> 3;
        if ((unint64_t)(v152 + 1) >> 61)
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        v153 = v150 - (_QWORD)*v122;
        v154 = v153 >> 2;
        if (v153 >> 2 <= (unint64_t)(v152 + 1))
          v154 = v152 + 1;
        if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
          v155 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v155 = v154;
        if (v155)
          v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a1 + 18968, v155);
        else
          v156 = 0;
        v157 = &v156[8 * v152];
        *(_QWORD *)v157 = v148;
        v151 = v157 + 8;
        v158 = *(char **)(a1 + 18960);
        v159 = *(char **)(a1 + 18952);
        if (v158 != v159)
        {
          do
          {
            v160 = *((_QWORD *)v158 - 1);
            v158 -= 8;
            *((_QWORD *)v157 - 1) = v160;
            v157 -= 8;
          }
          while (v158 != v159);
          v158 = *v122;
        }
        *(_QWORD *)(a1 + 18952) = v157;
        *(_QWORD *)(a1 + 18960) = v151;
        *(_QWORD *)(a1 + 18968) = &v156[8 * v155];
        if (v158)
          operator delete(v158);
      }
      else
      {
        *v149 = *(_QWORD *)&buf[16];
        v151 = v149 + 1;
      }
      *(_QWORD *)(a1 + 18960) = v151;
      v161 = *(_QWORD *)buf;
      v162 = *(_QWORD **)(a1 + 18984);
      v163 = *(_QWORD *)(a1 + 18992);
      if ((unint64_t)v162 >= v163)
      {
        v165 = ((char *)v162 - *v123) >> 3;
        if ((unint64_t)(v165 + 1) >> 61)
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        v166 = v163 - (_QWORD)*v123;
        v167 = v166 >> 2;
        if (v166 >> 2 <= (unint64_t)(v165 + 1))
          v167 = v165 + 1;
        if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF8)
          v168 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v168 = v167;
        if (v168)
          v169 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a1 + 18992, v168);
        else
          v169 = 0;
        v170 = &v169[8 * v165];
        *(_QWORD *)v170 = v161;
        v164 = v170 + 8;
        v171 = *(char **)(a1 + 18984);
        v172 = *(char **)(a1 + 18976);
        if (v171 != v172)
        {
          do
          {
            v173 = *((_QWORD *)v171 - 1);
            v171 -= 8;
            *((_QWORD *)v170 - 1) = v173;
            v170 -= 8;
          }
          while (v171 != v172);
          v171 = *v123;
        }
        *(_QWORD *)(a1 + 18976) = v170;
        *(_QWORD *)(a1 + 18984) = v164;
        *(_QWORD *)(a1 + 18992) = &v169[8 * v168];
        if (v171)
          operator delete(v171);
      }
      else
      {
        *v162 = *(_QWORD *)buf;
        v164 = v162 + 1;
      }
      *(_QWORD *)(a1 + 18984) = v164;
      v174 = *(std::__shared_weak_count **)&buf[24];
      if (*(_QWORD *)&buf[24])
      {
        v175 = (unint64_t *)(*(_QWORD *)&buf[24] + 8);
        do
          v176 = __ldaxr(v175);
        while (__stlxr(v176 - 1, v175));
        if (!v176)
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
      }
      v177 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v178 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
        }
      }
      ++v121;
      v120 = *(_QWORD *)(a1 + 18928);
    }
    while (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 18936) - v120) >> 3) > v121);
  }
  *(_DWORD *)(a1 + 22776) = *(_DWORD *)(a5 + 48);
  *(_DWORD *)(a1 + 22780) = *(_DWORD *)(a5 + 52);
  *(_DWORD *)(a1 + 22784) = *(_DWORD *)(a5 + 56);
  *(_DWORD *)(a1 + 22788) = *(_DWORD *)(a5 + 60);
  *(_DWORD *)(a1 + 22792) = *(_DWORD *)(a5 + 64);
  *(_DWORD *)(a1 + 22796) = *(_DWORD *)(a5 + 68);
  *(_DWORD *)(a1 + 22800) = *(_DWORD *)(a5 + 72);
  *(_DWORD *)(a1 + 22804) = *(_DWORD *)(a5 + 76);
  Phase::Geometry::Listener::operator=(a1 + 22568, a5);
  *(_QWORD *)(a1 + 22768) = 0;
  Phase::SpatialModeler::ImportanceSampling::init((void **)(a1 + 23168), (void *)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 18936) - *(_QWORD *)(a1 + 18928)) >> 3)), 1.0);
  memset(buf, 0, 124);
  *(_DWORD *)&buf[124] = v200;
  if (v200)
  {
    bzero(buf, 4 * v200);
    v180 = *(_OWORD *)&buf[80];
    *(_OWORD *)(a1 + 19104) = *(_OWORD *)&buf[64];
    *(_OWORD *)(a1 + 19120) = v180;
    v181 = *(_OWORD *)&buf[112];
    *(_OWORD *)(a1 + 19136) = *(_OWORD *)&buf[96];
    *(_OWORD *)(a1 + 19152) = v181;
    v182 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 19040) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 19056) = v182;
    v183 = *(_OWORD *)&buf[48];
    *(_OWORD *)(a1 + 19072) = *(_OWORD *)&buf[32];
    *(_OWORD *)(a1 + 19088) = v183;
    memset(buf, 0, 124);
    bzero(buf, 4 * v200);
  }
  else
  {
    v184 = *(_OWORD *)&buf[80];
    *(_OWORD *)(a1 + 19104) = *(_OWORD *)&buf[64];
    *(_OWORD *)(a1 + 19120) = v184;
    v185 = *(_OWORD *)&buf[112];
    *(_OWORD *)(a1 + 19136) = *(_OWORD *)&buf[96];
    *(_OWORD *)(a1 + 19152) = v185;
    v186 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 19040) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 19056) = v186;
    v187 = *(_OWORD *)&buf[48];
    *(_OWORD *)(a1 + 19072) = *(_OWORD *)&buf[32];
    *(_OWORD *)(a1 + 19088) = v187;
    memset(buf, 0, 124);
  }
  *(_DWORD *)&buf[124] = v200;
  v188 = *(_OWORD *)&buf[80];
  *(_OWORD *)(a1 + 19232) = *(_OWORD *)&buf[64];
  *(_OWORD *)(a1 + 19248) = v188;
  v189 = *(_OWORD *)&buf[112];
  *(_OWORD *)(a1 + 19264) = *(_OWORD *)&buf[96];
  v190 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 19168) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 19184) = v190;
  v191 = *(_OWORD *)&buf[48];
  *(_OWORD *)(a1 + 19200) = *(_OWORD *)&buf[32];
  *(_OWORD *)(a1 + 19216) = v191;
  *(_OWORD *)(a1 + 19280) = v189;
  *(std::chrono::steady_clock::time_point *)(a1 + 19312) = std::chrono::steady_clock::now();
  *(_BYTE *)(a1 + 25040) = 1;
  *(std::chrono::steady_clock::time_point *)(a1 + 25048) = std::chrono::steady_clock::now();
  if (*(_QWORD *)(a1 + 80) > 3uLL || *(_DWORD *)(a1 + 64) >= 0x101u)
    std::terminate();
  v192 = fminf(fmaxf(__exp10f((float)((float)(-1.0 / *(float *)(a1 + 120)) / *(float *)(a1 + 32)) * 6.0), 0.0), 1.0);
  *(float *)(a1 + 8) = v192;
  *(float *)(a1 + 12) = 1.0 - v192;
}

void sub_21668F634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](a5);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RayTracerState::GetSubbandIndex(Phase::SpatialModeler::RayTracerState *this)
{
  uint64_t v2;
  char *v3;
  NSObject *v5;
  std::logic_error *exception;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  Phase::SpatialModeler::RayTracerState *v15;
  uint64_t v16;

  v2 = 0;
  v16 = *MEMORY[0x24BDAC8D0];
  v7 = xmmword_21673A860;
  v8 = 31;
  v3 = (char *)&v9;
  while (*(Phase::SpatialModeler::RayTracerState **)((char *)&v7 + v2) != this)
  {
    v2 += 8;
    if (v2 == 24)
      goto LABEL_6;
  }
  v3 = (char *)&v7 + v2;
LABEL_6:
  if (v3 - (char *)&v7 == 24)
  {
    v5 = **(NSObject ***)(Phase::Logger::GetInstancePtr(this) + 1184);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v11 = "RayTracerState.cpp";
      v12 = 1024;
      v13 = 520;
      v14 = 2048;
      v15 = this;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [indexMinusOne == sTargetSubbandCounts.size() is true]: \"Unsupported Subband Count: %zu\"", buf, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported Subband Count: %zu");
  }
  return ((v3 - (char *)&v7) >> 3) + 1;
}

void sub_21668F7F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::operator==<float>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  float v4;
  float v5;

  v2 = *(unsigned int *)(a1 + 124);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 124))
    return 0;
  if (!(_DWORD)v2)
    return 1;
  if (*(float *)a1 != *(float *)a2)
    return 0;
  v3 = 0;
  while (v2 - 1 != v3)
  {
    v4 = *(float *)(a1 + 4 + 4 * v3);
    v5 = *(float *)(a2 + 4 + 4 * v3++);
    if (v4 != v5)
      return v3 >= v2;
  }
  v3 = *(unsigned int *)(a1 + 124);
  return v3 >= v2;
}

void Phase::SpatialModeler::RayTracerState::CreateDirectivityHistogram(Phase::SpatialModeler::RayTracerState *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, uint64_t a5@<X1>, Phase::SpatialModeler::DirectivityHistogram **a6@<X8>)
{
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  Phase::SpatialModeler::DirectivityHistogram *v15;
  Phase::SpatialModeler::DirectivityHistogram *v16;
  NSObject *v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _BYTE v22[18];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = 0;
  if (!*(_QWORD *)this)
    goto LABEL_15;
  Phase::SpatialModeler::HistogramPtrStack::Pop((Phase::SpatialModeler::HistogramPtrStack *)(*(_QWORD *)this + 1328), v22);
  std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)a6, (__int128 *)v22);
  v12 = *(std::__shared_weak_count **)&v22[8];
  if (*(_QWORD *)&v22[8])
  {
    v13 = (unint64_t *)(*(_QWORD *)&v22[8] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *a6;
  if (!*a6)
    goto LABEL_15;
  if (*((float *)v15 + 5) == a2 && *((_DWORD *)v15 + 7) == a5 && *((float *)v15 + 4) == a3)
  {
    Phase::SpatialModeler::DirectivityHistogram::resetDirectivityHistogram(v15, 1);
    v16 = *a6;
    *((float *)v16 + 10) = a4;
    *((_DWORD *)v16 + 8) = 1065353216;
    return;
  }
  v17 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v15) + 1184);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v22 = 136315394;
    *(_QWORD *)&v22[4] = "RayTracerState.cpp";
    *(_WORD *)&v22[12] = 1024;
    *(_DWORD *)&v22[14] = 1359;
    _os_log_impl(&dword_2164CC000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d DirectivityHistogram format changed.\n", v22, 0x12u);
  }
  Phase::SpatialModeler::HistogramPtrStack::Clear((Phase::SpatialModeler::HistogramPtrStack *)(*(_QWORD *)this + 1328));
  std::shared_ptr<Phase::Job>::reset[abi:ne180100](a6);
  if (!*a6)
  {
LABEL_15:
    v18 = operator new(0x1D8uLL);
    v18[1] = 0;
    v18[2] = 0;
    *v18 = &off_24D580A98;
    v18[5] = 0;
    v18[6] = 0;
    v18[4] = 0;
    *((_DWORD *)v18 + 14) = 1065353216;
    *((_BYTE *)v18 + 60) = 1;
    v18[8] = 0;
    v18[9] = 0;
    *((_DWORD *)v18 + 20) = 0;
    *(_QWORD *)((char *)v18 + 84) = 1065353216;
    *(_QWORD *)((char *)v18 + 92) = 0;
    *(_QWORD *)((char *)v18 + 100) = -3229614080;
    v18[3] = &off_24D57A7D8;
    v18[18] = 0;
    v18[15] = 0;
    v18[16] = 0;
    *((_DWORD *)v18 + 34) = 0;
    v18[14] = 0;
    *(_QWORD *)v22 = v18 + 3;
    *(_QWORD *)&v22[8] = v18;
    std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)a6, (__int128 *)v22);
    v19 = *(std::__shared_weak_count **)&v22[8];
    if (*(_QWORD *)&v22[8])
    {
      v20 = (unint64_t *)(*(_QWORD *)&v22[8] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    Phase::SpatialModeler::DirectivityHistogram::initDirectivityHistogram(*a6, a2, a5, a3, a4, 1.0);
  }
}

void sub_21668FAFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::RayTracerState::NextRay(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  const char *v5;
  float v6;
  float v7;
  __float2 v8;
  __float2 v9;
  NSObject *v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a1)
  {
    (*(void (**)(int *__return_ptr))(**(_QWORD **)(*(_QWORD *)a1 + 51960) + 16))(&v11);
    v4 = a1[83];
    *(_DWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 68) = -1;
    *(_BYTE *)(a2 + 76) = 0;
    *(_DWORD *)(a2 + 80) = 1065353216;
    if ((_DWORD)v4)
    {
      memset_pattern16((void *)(a2 + 96), &unk_21673A810, 4 * v4);
      memset_pattern16((void *)(a2 + 224), &unk_21673A810, 4 * v4);
    }
    *(_DWORD *)(a2 + 220) = v4;
    *(_DWORD *)(a2 + 348) = v4;
    *(_DWORD *)a2 = a1[5698];
    *(_DWORD *)(a2 + 4) = a1[5699];
    *(_DWORD *)(a2 + 8) = a1[5700];
    *(_DWORD *)(a2 + 12) = 0;
    *(_DWORD *)(a2 + 28) = 1176256512;
    v5 = v12;
    v6 = 90.0 - *(float *)&v12;
    *(_DWORD *)(a2 + 60) = HIDWORD(v12);
    *(float *)(a2 + 64) = v6;
    if (*((float *)&v5 + 1) < 0.0 || *((float *)&v5 + 1) > 360.0 || v6 < -90.0 || v6 > 90.0)
      std::terminate();
    v7 = *(float *)&v11;
    v8 = __sincosf_stret(*(float *)&v5 * 0.017453);
    v9 = __sincosf_stret(*((float *)&v5 + 1) * 0.017453);
    *(float *)(a2 + 16) = v9.__sinval * (float)(v8.__sinval * v7);
    *(float *)(a2 + 20) = v8.__cosval * v7;
    *(float *)(a2 + 24) = v9.__cosval * (float)(v8.__sinval * v7);
    ++a1[4754];
  }
  else
  {
    v10 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 1184);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "RayTracerState.cpp";
      v13 = 1024;
      v14 = 531;
      _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Modeler instance not set in state", (uint8_t *)&v11, 0x12u);
    }
  }
}

void Phase::SpatialModeler::RayTracerState::UpdateResultData(Phase::SpatialModeler::RayTracerState *this, Phase::SpatialModeler::RayTracerState *a2, Phase::Geometry::SystemState *a3)
{
  _DWORD *v5;
  _DWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;
  char *v17;
  _QWORD *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  Phase::SpatialModeler::RayTracerState *v24;
  void *v25;
  Phase::SpatialModeler::RayTracerState *v26;
  BOOL v27;
  Phase::SpatialModeler::RayTracerState *v28;

  v5 = (_DWORD *)((char *)this + 22776);
  v6 = (_DWORD *)((char *)a2 + 22776);
  v7 = *(_OWORD *)((char *)a2 + 8);
  v8 = *(_OWORD *)((char *)a2 + 24);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *(_OWORD *)((char *)this + 24) = v8;
  *(_OWORD *)((char *)this + 8) = v7;
  v9 = *((_OWORD *)a2 + 8);
  v11 = *((_OWORD *)a2 + 5);
  v10 = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 7) = *((_OWORD *)a2 + 7);
  *((_OWORD *)this + 8) = v9;
  *((_OWORD *)this + 5) = v11;
  *((_OWORD *)this + 6) = v10;
  v13 = *((_OWORD *)a2 + 10);
  v12 = *((_OWORD *)a2 + 11);
  v14 = *((_OWORD *)a2 + 9);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_OWORD *)this + 10) = v13;
  *((_OWORD *)this + 11) = v12;
  *((_OWORD *)this + 9) = v14;
  v15 = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 4) = v15;
  memcpy((char *)this + 208, (char *)a2 + 208, 0x114uLL);
  if (this != a2)
    std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>::__assign_with_size[abi:ne180100]<Phase::SpatialModeler::PhaseRoomSimulationSoundSource*,Phase::SpatialModeler::PhaseRoomSimulationSoundSource*>((_QWORD *)this + 2366, *((_QWORD *)a2 + 2366), *((_QWORD *)a2 + 2367), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 2367) - *((_QWORD *)a2 + 2366)) >> 3));
  memcpy((char *)this + 19008, (char *)a2 + 19008, 0x160uLL);
  Phase::Geometry::Listener::operator=((uint64_t)this + 22568, (uint64_t)a2 + 22568);
  *((_QWORD *)this + 2846) = *((_QWORD *)a2 + 2846);
  *v5 = *v6;
  v5[1] = v6[1];
  v5[2] = v6[2];
  v5[3] = v6[3];
  v5[4] = v6[4];
  v5[5] = v6[5];
  v5[6] = v6[6];
  v5[7] = v6[7];
  Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::operator=((uint64_t)this + 23200, (uint64_t)a2 + 23200);
  v16 = (uint64_t *)*((_QWORD *)this + 2420);
  if (v16 != (uint64_t *)((char *)this + 19368))
  {
    v17 = (char *)a2 + 19368;
    do
    {
      v18 = *(_QWORD **)v17;
      if (!*(_QWORD *)v17)
        goto LABEL_16;
      v19 = v16[4];
      v20 = (char *)a2 + 19368;
      do
      {
        v21 = v18[4];
        v22 = v21 >= v19;
        if (v21 >= v19)
          v23 = v18;
        else
          v23 = v18 + 1;
        if (v22)
          v20 = (char *)v18;
        v18 = (_QWORD *)*v23;
      }
      while (*v23);
      if (v20 != v17 && v19 >= *((_QWORD *)v20 + 4))
      {
        v28 = (Phase::SpatialModeler::RayTracerState *)v16[1];
        if (v28)
        {
          do
          {
            v26 = v28;
            v28 = *(Phase::SpatialModeler::RayTracerState **)v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v26 = (Phase::SpatialModeler::RayTracerState *)v16[2];
            v27 = *(_QWORD *)v26 == (_QWORD)v16;
            v16 = (uint64_t *)v26;
          }
          while (!v27);
        }
      }
      else
      {
LABEL_16:
        Phase::SpatialModeler::RayTracerState::FreeDirectivityHistogram(this, v16 + 7);
        v24 = (Phase::SpatialModeler::RayTracerState *)v16[1];
        v25 = v16;
        if (v24)
        {
          do
          {
            v26 = v24;
            v24 = *(Phase::SpatialModeler::RayTracerState **)v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v26 = (Phase::SpatialModeler::RayTracerState *)*((_QWORD *)v25 + 2);
            v27 = *(_QWORD *)v26 == (_QWORD)v25;
            v25 = v26;
          }
          while (!v27);
        }
        if (*((uint64_t **)this + 2420) == v16)
          *((_QWORD *)this + 2420) = v26;
        --*((_QWORD *)this + 2422);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 2421), v16);
        std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(v16 + 7));
        std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(v16 + 5));
        operator delete(v16);
      }
      v16 = (uint64_t *)v26;
    }
    while (v26 != (Phase::SpatialModeler::RayTracerState *)((char *)this + 19368));
  }
}

void Phase::SpatialModeler::RayTracerState::FreeDirectivityHistogram(Phase::Logger *a1, _QWORD *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int128 *v14;
  unsigned __int128 v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int128 v18;
  int v19;
  unsigned __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  const char *v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a2;
  if (*a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (v4)
    {
      if (v4->__shared_owners_ >= 1)
      {
        v5 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 1184);
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          return;
        v29 = 136315394;
        v30 = "RayTracerState.cpp";
        v31 = 1024;
        v32 = 1415;
        v6 = "%25s:%-5d Cannot free DirectivityHistogram still in use\n";
        goto LABEL_8;
      }
      v7 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v8 = v2 + 53;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        v2[53] = 0;
        v2[54] = v2;
        v2[55] = v4;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
LABEL_20:
        v14 = (unsigned __int128 *)(v7 + 1328);
        do
          v15 = __ldaxp(v14);
        while (__stlxp(v15, v14));
        atomic_store(v15, v8);
        do
        {
          while (1)
          {
            v18 = __ldaxp(v14);
            v17 = *((_QWORD *)&v18 + 1);
            v16 = v18;
            v19 = (_QWORD)v18 != (_QWORD)v15;
            if (*((_QWORD *)&v18 + 1) != *((_QWORD *)&v15 + 1))
              ++v19;
            if (!v19)
              break;
            if (!__stlxp(v18, v14))
              goto LABEL_29;
          }
        }
        while (__stlxp(__PAIR128__(*((_QWORD *)&v15 + 1) + 1, (unint64_t)v8), v14));
LABEL_29:
        if ((_QWORD)v18 != (_QWORD)v15 || *((_QWORD *)&v18 + 1) != *((_QWORD *)&v15 + 1))
        {
          do
          {
            atomic_store(v16, v8);
            do
            {
              while (1)
              {
                v21 = __ldaxp(v14);
                v22 = (_QWORD)v21 != v16;
                if (*((_QWORD *)&v21 + 1) != v17)
                  ++v22;
                if (!v22)
                  break;
                if (!__stlxp(v21, v14))
                  goto LABEL_40;
              }
            }
            while (__stlxp(__PAIR128__(v17 + 1, (unint64_t)v8), v14));
LABEL_40:
            v23 = *((_QWORD *)&v21 + 1) ^ v17;
            v24 = v21 ^ v16;
            v17 = v21 >> 64;
            v16 = v21;
          }
          while (v24 | v23);
        }
        if (v4)
        {
          v25 = (unint64_t *)&v4->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
          do
            v27 = __ldaxr(v25);
          while (__stlxr(v27 - 1, v25));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
          do
            v28 = __ldaxr(v25);
          while (__stlxr(v28 - 1, v25));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
      }
    }
    else
    {
      v7 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v8 = v2 + 53;
        v2[53] = 0;
        v2[54] = v2;
        v2[55] = 0;
        goto LABEL_20;
      }
    }
    std::shared_ptr<Phase::Job>::reset[abi:ne180100](a2);
    return;
  }
  v5 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 1184);
  if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    return;
  v29 = 136315394;
  v30 = "RayTracerState.cpp";
  v31 = 1024;
  v32 = 1426;
  v6 = "%25s:%-5d Trying to free a nullptr DirectivityHistogram.";
LABEL_8:
  _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v29, 0x12u);
}

void Phase::SpatialModeler::RayTracerState::AggregateResultData(Phase::SpatialModeler::RayTracerState *this, Phase::SpatialModeler::RayTracerState *a2, Phase::Geometry::SystemState *a3)
{
  Phase::Geometry::SystemState *v3;
  float *v6;
  float v7;
  float v8;
  uint64_t IsHistogramEnergyLowerThanTheoreticalPrediction;
  __int128 v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int32x4_t v16;
  char *v17;
  char *v18;
  char *v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;
  unint64_t v24;
  BOOL v25;
  _QWORD *v26;
  uint64_t **v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  int64x2_t v39;
  uint64_t v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64x2_t v46;
  __int32 *v47;
  int64x2_t v48;
  int64x2_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  int32x2_t v53;
  int8x16_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64x2_t v59;
  __int32 *v60;
  int64x2_t v61;
  int64x2_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  int32x2_t v66;
  int8x16_t v67;
  float v68;
  char v69;
  BOOL v70;
  NSObject *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  float v78;
  unint64_t *v79;
  unint64_t v80;
  Phase::SpatialModeler::EarlyReflectionDetector *v81;
  uint64_t v82;
  Phase::SpatialModeler::EarlyReflectionDetector *v83;
  float *v84;
  float v85;
  uint64_t v86;
  _QWORD *v87;
  float v88;
  float *v89;
  unint64_t *v90;
  char *v91;
  char *v92;
  uint64_t **v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  Phase::SpatialModeler::RayTracerState *v103;
  float v104;
  uint64_t **v105;
  uint64_t **v106;
  uint64_t **v107;
  unint64_t v108;
  uint64_t *v109;
  _QWORD *v110;
  Phase::SpatialModeler::RayTracerState *v111;
  Phase::SpatialModeler::RayTracerState *v112;
  uint64_t *v113;
  uint64_t *v114;
  Phase::Logger *v115;
  float *v116;
  uint64_t v117;
  __int128 *v118;
  _OWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  NSObject *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  unsigned int *v137;
  float *v138;
  Phase::Geometry::SystemState *v139;
  int64x2_t v140;
  _OWORD v141[8];
  _OWORD v142[8];
  uint8_t buf[32];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _BYTE v148[32];
  uint64_t v149;

  v3 = a3;
  v149 = *MEMORY[0x24BDAC8D0];
  v137 = (unsigned int *)((char *)a2 + 19016);
  v6 = (float *)((char *)this + 19504);
  v8 = *((float *)a2 + 6);
  v7 = *((float *)a2 + 7);
  if (*(_DWORD *)(*(_QWORD *)this + 32) == 2 && *((_BYTE *)this + 195) && *((_BYTE *)this + 72))
  {
    v8 = *((float *)a2 + 4);
    v7 = *((float *)a2 + 5);
  }
  Phase::SpatialModeler::RayTracerState::UpdateResultData(this, a2, a3);
  v138 = v6;
  if (!*((_BYTE *)this + 168) || !*((_BYTE *)this + 169))
  {
    *(float *)&v10 = v6[381] / (float)*v137;
    if (*(float *)&v10 == 0.0)
    {
      v7 = 1.0;
      v8 = 0.0;
    }
    LODWORD(v11) = 2.0;
    if (*(float *)&v10 > 2.0)
    {
      LODWORD(v11) = 1120403456;
      *(float *)&v10 = 1.0 / fminf(fmaxf(*(float *)&v10, 2.0), 100.0);
      v7 = v7 * *(float *)&v10;
      v8 = 1.0 - v7;
    }
  }
  v17 = (char *)*((_QWORD *)a2 + 2420);
  v18 = (char *)a2 + 19368;
  if (v17 != (char *)a2 + 19368)
  {
    v19 = (char *)this + 19368;
    v20 = vdupq_n_s64(4uLL);
    v140 = v20;
    v139 = v3;
    while (1)
    {
      v21 = *((_QWORD *)v17 + 4);
      *(_QWORD *)&v142[0] = v21;
      v22 = *(_QWORD **)v19;
      if (!*(_QWORD *)v19)
        goto LABEL_24;
      v23 = (char *)this + 19368;
      do
      {
        v24 = v22[4];
        v25 = v24 >= v21;
        if (v24 >= v21)
          v26 = v22;
        else
          v26 = v22 + 1;
        if (v25)
          v23 = (char *)v22;
        v22 = (_QWORD *)*v26;
      }
      while (*v26);
      if (v23 == v19 || v21 < *((_QWORD *)v23 + 4))
      {
LABEL_24:
        std::allocate_shared[abi:ne180100]<Phase::SpatialModeler::EarlyReflectionDetector,std::allocator<Phase::SpatialModeler::EarlyReflectionDetector>,Phase::SpatialModeler::EarlyReflectionDetector&,void>((Phase::SpatialModeler::EarlyReflectionDetector **)buf, *((const Phase::SpatialModeler::EarlyReflectionDetector **)v17 + 5));
        Phase::SpatialModeler::RayTracerState::CopyDirectivityHistogram(this, (uint64_t *)v17 + 7, (Phase::SpatialModeler::EnergyHistogram **)&buf[16]);
        LODWORD(v144) = 0;
        v27 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)this + 2420, v21, v142);
        std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)(v27 + 5), (__int128 *)buf);
        IsHistogramEnergyLowerThanTheoreticalPrediction = std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)(v27 + 7), (__int128 *)&buf[16]);
        *((_DWORD *)v27 + 18) = v144;
        v28 = *(std::__shared_weak_count **)&buf[24];
        if (*(_QWORD *)&buf[24])
        {
          v29 = (unint64_t *)(*(_QWORD *)&buf[24] + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v31 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_114;
        v32 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        goto LABEL_32;
      }
      v34 = v23 + 56;
      v35 = *((_QWORD *)v23 + 7);
      if (v35)
        break;
      v71 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)IsHistogramEnergyLowerThanTheoreticalPrediction)
                           + 1184);
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "RayTracerState.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 820;
        _os_log_impl(&dword_2164CC000, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d Sound source found, but no histogram initialized", buf, 0x12u);
      }
      Phase::SpatialModeler::RayTracerState::CopyDirectivityHistogram(this, (uint64_t *)v17 + 7, (Phase::SpatialModeler::EnergyHistogram **)buf);
      v18 = (char *)a2 + 19368;
      IsHistogramEnergyLowerThanTheoreticalPrediction = std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)(v23 + 56), (__int128 *)buf);
      v72 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v73 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
LABEL_101:
      v83 = (Phase::SpatialModeler::EarlyReflectionDetector *)*((_QWORD *)v23 + 5);
      v82 = (uint64_t)(v23 + 40);
      v81 = v83;
      if (v83)
      {
        v84 = (float *)*((_QWORD *)v81 + 2);
        if (v84)
        {
          v85 = *((float *)a2 + 2);
          do
          {
            *(float *)&v10 = v85 * v84[44];
            *((_DWORD *)v84 + 44) = v10;
            v84 = *(float **)v84;
          }
          while (v84);
        }
        v86 = *((_QWORD *)v17 + 5);
        v87 = *(_QWORD **)(v86 + 16);
        if (v87)
        {
          v88 = *((float *)a2 + 3);
          v89 = *(float **)(v86 + 16);
          do
          {
            v89[44] = v88 * v89[44];
            v89 = *(float **)v89;
          }
          while (v89);
          do
          {
            Phase::SpatialModeler::EarlyReflectionDetector::AddToScoreBoard(v81, (const Phase::SpatialModeler::AudibleEarlyReflection *)(v87 + 4));
            v87 = (_QWORD *)*v87;
          }
          while (v87);
        }
        goto LABEL_114;
      }
      std::allocate_shared[abi:ne180100]<Phase::SpatialModeler::EarlyReflectionDetector,std::allocator<Phase::SpatialModeler::EarlyReflectionDetector>,Phase::SpatialModeler::EarlyReflectionDetector&,void>((Phase::SpatialModeler::EarlyReflectionDetector **)buf, *((const Phase::SpatialModeler::EarlyReflectionDetector **)v17 + 5));
      IsHistogramEnergyLowerThanTheoreticalPrediction = std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100](v82, (__int128 *)buf);
      v31 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v90 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v33 = __ldaxr(v90);
        while (__stlxr(v33 - 1, v90));
LABEL_32:
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
LABEL_114:
      v91 = (char *)*((_QWORD *)v17 + 1);
      if (v91)
      {
        do
        {
          v92 = v91;
          v91 = *(char **)v91;
        }
        while (v91);
      }
      else
      {
        do
        {
          v92 = (char *)*((_QWORD *)v17 + 2);
          v70 = *(_QWORD *)v92 == (_QWORD)v17;
          v17 = v92;
        }
        while (!v70);
      }
      v17 = v92;
      if (v92 == v18)
        goto LABEL_120;
    }
    v36 = (std::__shared_weak_count *)*((_QWORD *)v23 + 8);
    *(_QWORD *)buf = *((_QWORD *)v23 + 7);
    *(_QWORD *)&buf[8] = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(p_shared_owners);
      while (__stxr(v38 + 1, p_shared_owners));
    }
    IsHistogramEnergyLowerThanTheoreticalPrediction = *((_QWORD *)v17 + 7);
    if (IsHistogramEnergyLowerThanTheoreticalPrediction)
    {
      if (!*((_BYTE *)this + 156))
        goto LABEL_70;
      v20.i32[0] = *((_DWORD *)this + 40);
      IsHistogramEnergyLowerThanTheoreticalPrediction = Phase::SpatialModeler::IsHistogramEnergyLowerThanTheoreticalPrediction((Phase::SpatialModeler::EnergyHistogram *)IsHistogramEnergyLowerThanTheoreticalPrediction, (uint64_t)this + 20800, *(double *)v20.i64, *(double *)&v10, v11, v12, v13, v14, v15, (uint64x2_t)v16);
      if (!(_DWORD)IsHistogramEnergyLowerThanTheoreticalPrediction)
        goto LABEL_70;
      v40 = *((_QWORD *)v17 + 7);
      v41 = 0.0;
      v42 = 0.0;
      if (!*(_BYTE *)(v40 + 36))
      {
        v43 = (*(_DWORD *)(v40 + 28) * *(_DWORD *)(v40 + 24));
        if ((_DWORD)v43)
        {
          v44 = *(_QWORD *)(v40 + 8);
          v45 = (v43 + 3) & 0x1FFFFFFFCLL;
          v46 = (uint64x2_t)vdupq_n_s64(v43 - 1);
          v47 = (__int32 *)(v44 + 8);
          v48 = (int64x2_t)xmmword_2166F7AE0;
          v49 = (int64x2_t)xmmword_2166F7AD0;
          v50 = (float32x4_t)xmmword_2166F7AF0;
          do
          {
            v51 = v50;
            v52 = (int32x4_t)vcgeq_u64(v46, (uint64x2_t)v48);
            *(int32x2_t *)v16.i8 = vmovn_s64((int64x2_t)v52);
            *(int16x4_t *)v50.f32 = vmovn_s32(v16);
            if ((v50.i8[0] & 1) != 0)
              v50.i32[0] = *(v47 - 2);
            if ((vmovn_s32(v16).i8[2] & 1) != 0)
              v50.i32[1] = *(v47 - 1);
            v16 = (int32x4_t)vcgeq_u64(v46, (uint64x2_t)v49);
            v53 = (int32x2_t)vmovn_s32(vmovn_hight_s64(*(int32x2_t *)v39.i8, (int64x2_t)v16));
            if ((v53.i8[4] & 1) != 0)
              v50.i32[2] = *v47;
            if ((vmovn_s32(vmovn_hight_s64(v53, *(int64x2_t *)&v16)).i8[6] & 1) != 0)
              v50.i32[3] = v47[1];
            v50 = vaddq_f32(v51, v50);
            v39.i64[0] = v140.i64[0];
            v49 = vaddq_s64(v49, v140);
            v48 = vaddq_s64(v48, v140);
            v47 += 4;
            v45 -= 4;
          }
          while (v45);
          v54 = vbslq_s8((int8x16_t)vuzp1q_s32(v52, v16), (int8x16_t)v50, (int8x16_t)v51);
          v42 = (float)(vaddv_f32(*(float32x2_t *)v54.i8) + *(float *)&v54.i32[2]) + *(float *)&v54.i32[3];
        }
      }
      v55 = *(_QWORD *)v34;
      if (!*(_BYTE *)(*(_QWORD *)v34 + 36))
      {
        v56 = (*(_DWORD *)(v55 + 28) * *(_DWORD *)(v55 + 24));
        if ((_DWORD)v56)
        {
          v57 = *(_QWORD *)(v55 + 8);
          v58 = (v56 + 3) & 0x1FFFFFFFCLL;
          v59 = (uint64x2_t)vdupq_n_s64(v56 - 1);
          v60 = (__int32 *)(v57 + 8);
          v61 = (int64x2_t)xmmword_2166F7AE0;
          v62 = (int64x2_t)xmmword_2166F7AD0;
          v63 = (float32x4_t)xmmword_2166F7AF0;
          do
          {
            v64 = v63;
            v65 = (int32x4_t)vcgeq_u64(v59, (uint64x2_t)v61);
            *(int32x2_t *)v16.i8 = vmovn_s64((int64x2_t)v65);
            *(int16x4_t *)v63.f32 = vmovn_s32(v16);
            if ((v63.i8[0] & 1) != 0)
              v63.i32[0] = *(v60 - 2);
            if ((vmovn_s32(v16).i8[2] & 1) != 0)
              v63.i32[1] = *(v60 - 1);
            v16 = (int32x4_t)vcgeq_u64(v59, (uint64x2_t)v62);
            v66 = (int32x2_t)vmovn_s32(vmovn_hight_s64(*(int32x2_t *)v39.i8, (int64x2_t)v16));
            if ((v66.i8[4] & 1) != 0)
              v63.i32[2] = *v60;
            if ((vmovn_s32(vmovn_hight_s64(v66, *(int64x2_t *)&v16)).i8[6] & 1) != 0)
              v63.i32[3] = v60[1];
            v63 = vaddq_f32(v64, v63);
            v39 = vdupq_n_s64(4uLL);
            v62 = vaddq_s64(v62, v39);
            v61 = vaddq_s64(v61, v39);
            v60 += 4;
            v58 -= 4;
          }
          while (v58);
          v67 = vbslq_s8((int8x16_t)vuzp1q_s32(v65, v16), (int8x16_t)v63, (int8x16_t)v64);
          v41 = (float)(vaddv_f32(*(float32x2_t *)v67.i8) + *(float *)&v67.i32[2]) + *(float *)&v67.i32[3];
        }
      }
      v68 = (float)(v42 / (float)(v41 + 1.1755e-38)) + 1.1755e-38;
      v69 = 1;
      if (v68 <= 0.0)
        v68 = COERCE_FLOAT(1);
      if ((float)((float)((float)(logf(v68) * 4.3429) / 10.0) * 10.0) > -3.0)
      {
LABEL_70:
        v70 = *(float *)(v35 + 32) > 1.0 && *((_BYTE *)a2 + 192) == 0;
        if (v70)
        {
          v69 = 0;
        }
        else
        {
          Phase::SpatialModeler::DirectivityHistogram::operator*=((_QWORD *)v35, v8);
          Phase::SpatialModeler::DirectivityHistogram::operator*=(*((_QWORD **)v17 + 7), v7);
          Phase::SpatialModeler::DirectivityHistogram::operator+=(v35, *((_QWORD *)v17 + 7));
          Phase::SpatialModeler::DirectivityHistogram::updateWasHitVector((Phase::SpatialModeler::DirectivityHistogram *)v35);
          v69 = 0;
          *((float *)v23 + 18) = (float)(v8 * *((float *)v23 + 18)) + (float)*v137;
        }
      }
      v75 = *(_QWORD *)v34;
      v76 = *((_QWORD *)v17 + 7);
      *(_DWORD *)(v75 + 40) = *(_DWORD *)(v76 + 40);
      v20 = *(int64x2_t *)(v76 + 48);
      v10 = *(_OWORD *)(v76 + 64);
      *(int64x2_t *)(v75 + 48) = v20;
      *(_OWORD *)(v75 + 64) = v10;
      if (!*((_BYTE *)this + 156))
        goto LABEL_95;
      if ((v69 & 1) == 0)
      {
        v78 = *(float *)(v35 + 32);
        *(float *)&v10 = v78 * 0.33333;
        if (v78 <= 1.0)
        {
          if (v78 >= 1.0)
            goto LABEL_95;
        }
        else
        {
          v78 = v78 * 0.33333;
        }
        if (v78 < 1.0)
          v78 = 1.0;
        goto LABEL_94;
      }
    }
    else if (!*((_BYTE *)this + 156))
    {
LABEL_95:
      v18 = (char *)a2 + 19368;
      if (v36)
      {
        v79 = (unint64_t *)&v36->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v3 = v139;
      goto LABEL_101;
    }
    *(float *)&v10 = *(float *)(v35 + 40) * *((float *)this + 116);
    v77 = *(float *)(v35 + 32);
    *(float *)&v11 = sqrtf(v77);
    if (*(float *)&v11 >= *(float *)&v10)
      goto LABEL_95;
    LODWORD(v10) = 1132462080;
    v78 = fminf(v77 * 3.0, 256.0);
LABEL_94:
    *(float *)(v35 + 32) = v78;
    goto LABEL_95;
  }
LABEL_120:
  v93 = (uint64_t **)((char *)this + 20952);
  v94 = (uint64_t *)*((_QWORD *)this + 2619);
  v95 = (uint64_t *)((char *)this + 20960);
  if (v94 != (uint64_t *)((char *)this + 20960))
  {
    do
    {
      v96 = v94[4];
      if (*((_DWORD *)v3 + 28) > v96
        && (v97 = *((_QWORD *)v3 + 12), *(_DWORD *)(v97 + 24 * v96 + 20) == HIDWORD(v96))
        && *(_QWORD *)(v97 + 24 * v94[4]))
      {
        v98 = (uint64_t *)v94[1];
        if (v98)
        {
          do
          {
            v99 = v98;
            v98 = (uint64_t *)*v98;
          }
          while (v98);
        }
        else
        {
          do
          {
            v99 = (uint64_t *)v94[2];
            v70 = *v99 == (_QWORD)v94;
            v94 = v99;
          }
          while (!v70);
        }
      }
      else
      {
        v99 = std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>>>::__remove_node_pointer((uint64_t **)this + 2619, v94);
        operator delete(v94);
      }
      v94 = v99;
    }
    while (v99 != v95);
    v94 = *v93;
  }
  if (v94 != v95)
  {
    v100 = v94;
    do
    {
      *((float *)v100 + 10) = v8 * *((float *)v100 + 10);
      v101 = (uint64_t *)v100[1];
      if (v101)
      {
        do
        {
          v102 = v101;
          v101 = (uint64_t *)*v101;
        }
        while (v101);
      }
      else
      {
        do
        {
          v102 = (uint64_t *)v100[2];
          v70 = *v102 == (_QWORD)v100;
          v100 = v102;
        }
        while (!v70);
      }
      v100 = v102;
    }
    while (v102 != v95);
  }
  v103 = (Phase::SpatialModeler::RayTracerState *)*((_QWORD *)a2 + 2619);
  if (v103 != (Phase::SpatialModeler::RayTracerState *)((char *)a2 + 20960))
  {
    do
    {
      v104 = *((float *)v103 + 10);
      if (v104 > 0.0)
      {
        v105 = (uint64_t **)*v95;
        v106 = (uint64_t **)((char *)this + 20960);
        v107 = (uint64_t **)((char *)this + 20960);
        if (*v95)
        {
          v108 = *((_QWORD *)v103 + 4);
          while (1)
          {
            while (1)
            {
              v107 = v105;
              v109 = v105[4];
              if ((unint64_t)v109 <= v108)
                break;
              v105 = (uint64_t **)*v107;
              v106 = v107;
              if (!*v107)
                goto LABEL_151;
            }
            if ((unint64_t)v109 >= v108)
              break;
            v105 = (uint64_t **)v107[1];
            if (!v105)
            {
              v106 = v107 + 1;
              goto LABEL_151;
            }
          }
        }
        else
        {
LABEL_151:
          v110 = operator new(0x30uLL);
          v110[4] = *((_QWORD *)v103 + 4);
          *((_DWORD *)v110 + 10) = 0;
          std::__tree<Phase::SpatialCategory>::__insert_node_at((uint64_t **)this + 2619, (uint64_t)v107, v106, v110);
          v107 = (uint64_t **)v110;
        }
        *((float *)v107 + 10) = v104;
      }
      v111 = (Phase::SpatialModeler::RayTracerState *)*((_QWORD *)v103 + 1);
      if (v111)
      {
        do
        {
          v112 = v111;
          v111 = *(Phase::SpatialModeler::RayTracerState **)v111;
        }
        while (v111);
      }
      else
      {
        do
        {
          v112 = (Phase::SpatialModeler::RayTracerState *)*((_QWORD *)v103 + 2);
          v70 = *(_QWORD *)v112 == (_QWORD)v103;
          v103 = v112;
        }
        while (!v70);
      }
      v103 = v112;
    }
    while (v112 != (Phase::SpatialModeler::RayTracerState *)((char *)a2 + 20960));
    v94 = *v93;
  }
  if (v94 != v95)
  {
    do
    {
      if (*((float *)v94 + 10) >= *((float *)a2 + 11))
      {
        v114 = (uint64_t *)v94[1];
        if (v114)
        {
          do
          {
            v113 = v114;
            v114 = (uint64_t *)*v114;
          }
          while (v114);
        }
        else
        {
          do
          {
            v113 = (uint64_t *)v94[2];
            v70 = *v113 == (_QWORD)v94;
            v94 = v113;
          }
          while (!v70);
        }
      }
      else
      {
        v113 = std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>>>::__remove_node_pointer((uint64_t **)this + 2619, v94);
        operator delete(v94);
      }
      v94 = v113;
    }
    while (v113 != v95);
  }
  Phase::SpatialModeler::countSurfaceArea((uint64_t)v3, (_QWORD *)this + 2619, (Phase::SpatialModeler::RayTracerState *)*((unsigned int *)this + 83), (uint64_t *)this + 2616, (float *)this + 4877, (float *)this + 4912, *((float *)this + 34), *((float *)this + 35));
  Phase::SpatialModeler::RayTracerState::UpdateLocalMeanFreePathAndMeanAbsorption(a2);
  Phase::SpatialModeler::RayTracerState::UpdateLocalVolumeEstimate(a2, v3);
  v116 = (float *)((char *)a2 + 19504);
  *v138 = (float)(v7 * *((float *)a2 + 4876)) + (float)(*v138 * v8);
  v117 = *((unsigned int *)a2 + 4911);
  if ((_DWORD)v117)
  {
    v118 = (__int128 *)((char *)a2 + 19520);
    v119 = (_OWORD *)((char *)this + 19520);
    v120 = *((unsigned int *)v138 + 35);
    if ((_DWORD)v120)
    {
      v121 = 0;
      v122 = 4 * v120;
      memset(v142, 0, 124);
      do
      {
        *(float *)((char *)v142 + v121) = v8 * *(float *)((char *)v119 + v121);
        v121 += 4;
      }
      while (v122 != v121);
      v123 = 0;
      v124 = 4 * v117;
      memset(v141, 0, 124);
      do
      {
        *(float *)((char *)v141 + v123) = v7 * *(float *)((char *)v118 + v123);
        v123 += 4;
      }
      while (v124 != v123);
      v125 = 0;
      v147 = 0u;
      memset(v148, 0, 28);
      v145 = 0u;
      v146 = 0u;
      v144 = 0u;
      memset(buf, 0, sizeof(buf));
      *(_DWORD *)&v148[28] = v120;
      do
      {
        *(float *)&buf[v125] = *(float *)((char *)v142 + v125) + *(float *)((char *)v141 + v125);
        v125 += 4;
      }
      while (v122 != v125);
      v126 = v147;
      *((_OWORD *)this + 1224) = v146;
      *((_OWORD *)this + 1225) = v126;
      v127 = *(_OWORD *)&v148[16];
      *((_OWORD *)this + 1226) = *(_OWORD *)v148;
      *((_OWORD *)this + 1227) = v127;
      v128 = *(_OWORD *)&buf[16];
      *v119 = *(_OWORD *)buf;
      *((_OWORD *)this + 1221) = v128;
      v129 = v145;
      *((_OWORD *)this + 1222) = v144;
      *((_OWORD *)this + 1223) = v129;
    }
    else
    {
      v131 = *v118;
      v132 = *((_OWORD *)a2 + 1221);
      v133 = *((_OWORD *)a2 + 1223);
      *((_OWORD *)this + 1222) = *((_OWORD *)a2 + 1222);
      *((_OWORD *)this + 1223) = v133;
      *v119 = v131;
      *((_OWORD *)this + 1221) = v132;
      v134 = *((_OWORD *)a2 + 1224);
      v135 = *((_OWORD *)a2 + 1225);
      v136 = *((_OWORD *)a2 + 1227);
      *((_OWORD *)this + 1226) = *((_OWORD *)a2 + 1226);
      *((_OWORD *)this + 1227) = v136;
      *((_OWORD *)this + 1224) = v134;
      *((_OWORD *)this + 1225) = v135;
    }
  }
  else
  {
    v130 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v115) + 1184);
    if (os_log_type_enabled(v130, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "RayTracerState.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 727;
      _os_log_impl(&dword_2164CC000, v130, OS_LOG_TYPE_DEBUG, "%25s:%-5d RoomStats of new state empty.", buf, 0x12u);
    }
  }
  Phase::SpatialModeler::RayTracerState::UpdateLocalVolumeEstimate(this, v3);
  Phase::SpatialModeler::RayTracerState::UpdateLocalRT60Estimate(this);
  Phase::SpatialModeler::RayTracerState::calculateTotalEarlyAndLateEnergy((unsigned int *)this, (_OWORD *)this + 1292, (_OWORD *)this + 1300, v3);
  v138[383] = v116[383];
}

void sub_216690F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::RayTracerState::UpdateLocalMeanFreePathAndMeanAbsorption(Phase::SpatialModeler::RayTracerState *this)
{
  float *v1;
  unsigned int v2;
  unsigned int v3;
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;

  v1 = (float *)((char *)this + 19504);
  if (*((_DWORD *)this + 4826))
  {
    v2 = *((_DWORD *)this + 4824);
    v3 = *((_DWORD *)this + 4825);
    if (v3 + v2)
    {
      v4 = *((float *)this + 4756);
      if (!v3 || (v5 = (float)v3, v3 <= 0x12B) && (float)((float)v2 / v5) >= 3.0)
      {
        v5 = (float)(v3 + v2);
        v4 = v4 + (float)(*((float *)this + 4755) * 1.1);
      }
      v6 = v4 / v5;
    }
    else
    {
      v6 = 0.0;
    }
    *v1 = v6;
    Phase::SpatialModeler::GetMeanAbsorptionEstimateFromFirstAndHigherOrderTotalAbsorption((uint64_t)this + 19040, (uint64_t)this + 19168, v2, v3, (_OWORD *)this + 1220);
  }
  else
  {
    *v1 = 0.0;
    v7 = *((unsigned int *)this + 4911);
    if ((_DWORD)v7)
    {
      v8 = (_DWORD *)((char *)this + 19520);
      v9 = *((_DWORD *)this + 14);
      do
      {
        *v8++ = v9;
        --v7;
      }
      while (v7);
    }
  }
}

void Phase::SpatialModeler::RayTracerState::UpdateLocalVolumeEstimate(Phase::SpatialModeler::RayTracerState *this, Phase::Geometry::SystemState *a2)
{
  char *v2;
  float v3;
  float v4;
  float v5;
  float v7;
  float v8;
  float32x2_t v9;
  float v10;
  float v11;
  int v12;
  float v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  float v17[6];

  v2 = (char *)this + 19304;
  if (*((_DWORD *)this + 4826))
  {
    v3 = *((float *)this + 4876);
    if (v3 <= 0.0 || (v4 = *((float *)this + 4877), v4 <= 0.0))
      v5 = 3.4028e38;
    else
      v5 = (float)(v3 * v4) * 0.25;
    *((float *)this + 4878) = v5;
  }
  else
  {
    if (*((float *)this + 4877) <= 0.0)
    {
      v9 = vsub_f32(*(float32x2_t *)((char *)this + 20992), *(float32x2_t *)((char *)this + 20980));
      v10 = vmuls_lane_f32((float)(*((float *)this + 5247) - *((float *)this + 5244)) * v9.f32[0], v9, 1);
      v11 = fabsf(v10);
      v12 = LODWORD(v10) & 0x7FFFFFFF;
      v7 = 0.0;
      if (v12 < 2139095040)
        v7 = v11;
      v8 = v7 + v7;
      *((float *)this + 4877) = v7 + v7;
    }
    else
    {
      Phase::SpatialModeler::GetHitShapesAABB((uint64_t)a2, (uint64_t)this + 20952, (uint64_t)v17);
      v7 = fabsf((float)((float)(v17[3] - v17[0]) * (float)(v17[4] - v17[1])) * (float)(v17[5] - v17[2]));
      v8 = *((float *)v2 + 51);
    }
    *((float *)v2 + 52) = v7;
    v13 = 0.0;
    if (v8 > 0.0)
      v13 = (float)(v7 * 4.0) / v8;
    *((float *)v2 + 50) = v13;
    v14 = *((unsigned int *)v2 + 85);
    if ((_DWORD)v14)
    {
      v15 = v2 + 216;
      v16 = *((_DWORD *)this + 14);
      do
      {
        *v15++ = v16;
        --v14;
      }
      while (v14);
    }
  }
}

double Phase::SpatialModeler::RayTracerState::UpdateLocalRT60Estimate(Phase::SpatialModeler::RayTracerState *this)
{
  uint64_t v2;
  char *v3;
  __int128 v4;
  float *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  double result;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[2];

  v2 = *((unsigned int *)this + 83);
  v3 = (char *)this + 19776;
  v4 = 0uLL;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  memset(v53, 0, 28);
  HIDWORD(v53[1]) = v2;
  if ((_DWORD)v2)
  {
    bzero(&v47, 4 * v2);
    v4 = 0uLL;
  }
  v5 = (float *)((char *)this + 19504);
  v6 = v52;
  *((_OWORD *)v3 + 4) = v51;
  *((_OWORD *)v3 + 5) = v6;
  v7 = v53[1];
  *((_OWORD *)v3 + 6) = v53[0];
  *((_OWORD *)v3 + 7) = v7;
  v8 = v48;
  *(_OWORD *)v3 = v47;
  *((_OWORD *)v3 + 1) = v8;
  v9 = v50;
  *((_OWORD *)v3 + 2) = v49;
  *((_OWORD *)v3 + 3) = v9;
  *(_OWORD *)((char *)v53 + 12) = v4;
  v52 = v4;
  v53[0] = v4;
  v50 = v4;
  v51 = v4;
  v48 = v4;
  v49 = v4;
  v47 = v4;
  HIDWORD(v53[1]) = v2;
  if ((_DWORD)v2)
  {
    bzero(&v47, 4 * v2);
    v10 = v52;
    *((_OWORD *)this + 1248) = v51;
    *((_OWORD *)this + 1249) = v10;
    v11 = v53[1];
    *((_OWORD *)this + 1250) = v53[0];
    *((_OWORD *)this + 1251) = v11;
    v12 = v48;
    *((_OWORD *)this + 1244) = v47;
    *((_OWORD *)this + 1245) = v12;
    v13 = v50;
    *((_OWORD *)this + 1246) = v49;
    *((_OWORD *)this + 1247) = v13;
    v52 = 0u;
    memset(v53, 0, 28);
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v47 = 0u;
    HIDWORD(v53[1]) = v2;
    bzero(&v47, 4 * v2);
    v14 = v52;
    *((_OWORD *)this + 1256) = v51;
    *((_OWORD *)this + 1257) = v14;
    v15 = v53[1];
    *((_OWORD *)this + 1258) = v53[0];
    *((_OWORD *)this + 1259) = v15;
    v16 = v48;
    *((_OWORD *)this + 1252) = v47;
    *((_OWORD *)this + 1253) = v16;
    v17 = v50;
    *((_OWORD *)this + 1254) = v49;
    *((_OWORD *)this + 1255) = v17;
    v52 = 0u;
    memset(v53, 0, 28);
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v47 = 0u;
    HIDWORD(v53[1]) = v2;
    bzero(&v47, 4 * v2);
  }
  else
  {
    v18 = v52;
    *((_OWORD *)this + 1248) = v51;
    *((_OWORD *)this + 1249) = v18;
    v19 = v53[1];
    *((_OWORD *)this + 1250) = v53[0];
    *((_OWORD *)this + 1251) = v19;
    v20 = v48;
    *((_OWORD *)this + 1244) = v47;
    *((_OWORD *)this + 1245) = v20;
    v21 = v50;
    *((_OWORD *)this + 1246) = v49;
    *((_OWORD *)this + 1247) = v21;
    *((_OWORD *)this + 1259) = 0u;
    *((_OWORD *)this + 1258) = 0u;
    *((_OWORD *)this + 1257) = 0u;
    *((_OWORD *)this + 1256) = 0u;
    *((_OWORD *)this + 1255) = 0u;
    *((_OWORD *)this + 1254) = 0u;
    *((_OWORD *)this + 1253) = 0u;
    *((_OWORD *)this + 1252) = 0u;
    memset(v53, 0, sizeof(v53));
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
  }
  v22 = v52;
  *((_OWORD *)this + 1288) = v51;
  *((_OWORD *)this + 1289) = v22;
  v23 = v53[1];
  *((_OWORD *)this + 1290) = v53[0];
  *((_OWORD *)this + 1291) = v23;
  v24 = v48;
  *((_OWORD *)this + 1284) = v47;
  *((_OWORD *)this + 1285) = v24;
  v25 = v50;
  *((_OWORD *)this + 1286) = v49;
  *((_OWORD *)this + 1287) = v25;
  v26 = *((unsigned int *)v3 + 31);
  if ((_DWORD)v26)
  {
    v27 = 0;
    v28 = *((unsigned int *)this + 115);
    v29 = *v5;
    v30 = (float)(*v5 * 6.0) * 2.3026;
    do
    {
      v31 = 0.0;
      if (v27 < v28)
        v31 = *((float *)this + v27 + 84);
      v32 = *((float *)v3 - 64);
      if (v32 <= 0.0)
        v32 = *((float *)this + 14);
      if (v29 > 0.0)
      {
        v33 = 1.0;
        v34 = fminf(fmaxf(v32, 1.0e-10), 1.0);
        v35 = *((float *)this + 116);
        v36 = logf(1.0 - v34);
        *(float *)v3 = v30 / (float)((float)-(float)(v36 - (float)(v31 * v29)) * v35);
        *((float *)v3 + 32) = v30 / (float)-(float)(v36 * v35);
        v37 = *((_QWORD *)this + 2616);
        if (v27 < (*((_QWORD *)this + 2617) - v37) >> 2)
        {
          if (*(float *)(v37 + 4 * v27) > 0.0)
            v33 = *(float *)(v37 + 4 * v27);
          else
            v33 = 1.0;
        }
        *((float *)v3 + 64) = v30 / (float)(v35 * (float)-(float)(logf(1.0 - (float)(v34 / v33)) - (float)(v31 * v29)));
      }
      ++v27;
      v3 += 4;
    }
    while (v26 != v27);
  }
  else
  {
    v29 = *v5;
  }
  v38 = Phase::SpatialModeler::TRAP::CalculateSeatbeltReverbTimeAndConfidenceFromMFP((Phase::SpatialModeler::RayTracerState *)((char *)this + 20288), (uint64_t)this + 20416, v29);
  v39 = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v38);
  v40 = 0;
  HIDWORD(v53[1]) = 10;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  memset(v53, 0, 28);
  v41 = *((_DWORD *)v39 + 112);
  do
  {
    *(_DWORD *)((char *)&v47 + v40) = v41;
    v40 += 4;
  }
  while (v40 != 40);
  v42 = v52;
  *((_OWORD *)this + 1264) = v51;
  *((_OWORD *)this + 1265) = v42;
  v43 = v53[1];
  *((_OWORD *)this + 1266) = v53[0];
  *((_OWORD *)this + 1267) = v43;
  v44 = v48;
  *((_OWORD *)this + 1260) = v47;
  *((_OWORD *)this + 1261) = v44;
  result = *(double *)&v49;
  v46 = v50;
  *((_OWORD *)this + 1262) = v49;
  *((_OWORD *)this + 1263) = v46;
  return result;
}

float Phase::SpatialModeler::RayTracerState::UpdateLaunchedRayHistory(Phase::SpatialModeler::RayTracerState *this, unsigned int a2)
{
  float *v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  float result;

  v2 = (float *)((char *)this + 21008);
  v3 = *((unsigned int *)this + 5250);
  v4 = *((_DWORD *)this + 5251);
  *((float *)this + v3 + 5252) = (float)a2;
  v5 = ((int)v3 + 1) % 5u;
  if ((v4 + 1) < 5)
    v6 = (v4 + 1);
  else
    v6 = 5;
  *((_DWORD *)this + 5250) = v5;
  *((_DWORD *)this + 5251) = v6;
  if ((_DWORD)v6)
  {
    v7 = 4 * v6;
    v8 = 0.0;
    do
    {
      v9 = *v2++;
      v8 = v8 + v9;
      v7 -= 4;
    }
    while (v7);
  }
  else
  {
    v8 = 0.0;
  }
  result = v8 / (float)v6;
  *((float *)this + 5257) = result;
  return result;
}

float Phase::SpatialModeler::RayTracerState::GetSourceListenerResult@<S0>(Phase::SpatialModeler::RayTracerState *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  float result;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v3 = (_QWORD *)*((_QWORD *)this + 2421);
  if (!v3)
    goto LABEL_12;
  v4 = *a2;
  v5 = (char *)this + 19368;
  do
  {
    v6 = v3[4];
    v7 = v6 >= v4;
    if (v6 >= v4)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (char *)v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != (char *)this + 19368 && v4 >= *((_QWORD *)v5 + 4))
  {
    v10 = *((_QWORD *)v5 + 6);
    *(_QWORD *)a3 = *((_QWORD *)v5 + 5);
    *(_QWORD *)(a3 + 8) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *((_QWORD *)v5 + 8);
    *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 7);
    *(_QWORD *)(a3 + 24) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    result = *((float *)v5 + 18);
    *(float *)(a3 + 32) = result;
  }
  else
  {
LABEL_12:
    *(_DWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

float Phase::SpatialModeler::RayTracerState::GetSourceListenerResult@<S0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t SoundSourceHash;
  _QWORD *v8;
  float *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  float result;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  SoundSourceHash = Phase::SpatialModeler::GetSoundSourceHash(*a2, *a3, a4);
  v8 = *(_QWORD **)(a1 + 19368);
  if (!v8)
    goto LABEL_12;
  v9 = (float *)(a1 + 19368);
  do
  {
    v10 = v8[4];
    v11 = v10 >= SoundSourceHash;
    if (v10 >= SoundSourceHash)
      v12 = v8;
    else
      v12 = v8 + 1;
    if (v11)
      v9 = (float *)v8;
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 != (float *)(a1 + 19368) && SoundSourceHash >= *((_QWORD *)v9 + 4))
  {
    v14 = *((_QWORD *)v9 + 6);
    *(_QWORD *)a5 = *((_QWORD *)v9 + 5);
    *(_QWORD *)(a5 + 8) = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = *((_QWORD *)v9 + 8);
    *(_QWORD *)(a5 + 16) = *((_QWORD *)v9 + 7);
    *(_QWORD *)(a5 + 24) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    result = v9[18];
    *(float *)(a5 + 32) = result;
  }
  else
  {
LABEL_12:
    *(_DWORD *)(a5 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return result;
}

void Phase::SpatialModeler::RayTracerState::calculateTotalSpecularEarlyEnergy(Phase::SpatialModeler::RayTracerState *this@<X0>, char *a2@<X8>)
{
  float *v3;
  uint64_t v4;
  Phase::SpatialModeler::RayTracerState *v5;
  int v6;
  char *EarlyReflections;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  Phase::SpatialModeler::RayTracerState *v15;
  Phase::SpatialModeler::RayTracerState *v16;
  BOOL v17;

  v3 = (float *)a2;
  v4 = *((unsigned int *)this + 83);
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 6) = 0u;
  *(_OWORD *)(a2 + 108) = 0u;
  *((_DWORD *)a2 + 31) = v4;
  if ((_DWORD)v4)
    bzero(a2, 4 * v4);
  v5 = (Phase::SpatialModeler::RayTracerState *)*((_QWORD *)this + 2420);
  if (v5 != (Phase::SpatialModeler::RayTracerState *)((char *)this + 19368))
  {
    v6 = 0;
    do
    {
      EarlyReflections = Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(*((Phase::SpatialModeler::EarlyReflectionDetector **)v5 + 5), *((_DWORD *)this + 22), 0, 343.0);
      v8 = *(_QWORD *)EarlyReflections;
      v9 = *((_QWORD *)EarlyReflections + 1);
      if (*(_QWORD *)EarlyReflections != v9)
      {
        v10 = *((float *)this + 116);
        v11 = *(_QWORD *)EarlyReflections;
        do
        {
          if ((_DWORD)v4)
          {
            v12 = 0;
            v13 = 1.0 / (float)(v10 * *(float *)(v11 + 12));
            do
            {
              v14 = fabsf(*(float *)(v11 + v12 * 4 + 16));
              v3[v12] = v3[v12] + (float)((float)(v13 * v14) * (float)(v13 * v14));
              ++v12;
            }
            while (v4 != v12);
          }
          v11 += 288;
        }
        while (v11 != v9);
      }
      if (v9 != v8)
        ++v6;
      v15 = (Phase::SpatialModeler::RayTracerState *)*((_QWORD *)v5 + 1);
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(Phase::SpatialModeler::RayTracerState **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (Phase::SpatialModeler::RayTracerState *)*((_QWORD *)v5 + 2);
          v17 = *(_QWORD *)v16 == (_QWORD)v5;
          v5 = v16;
        }
        while (!v17);
      }
      v5 = v16;
    }
    while (v16 != (Phase::SpatialModeler::RayTracerState *)((char *)this + 19368));
    if (v6 > 1 && (_DWORD)v4)
    {
      do
      {
        *v3 = (float)(1.0 / (float)v6) * *v3;
        ++v3;
        --v4;
      }
      while (v4);
    }
  }
}

__n64 Phase::SpatialModeler::RayTracerState::calculateTotalEarlyAndLateEnergy(unsigned int *a1, _OWORD *a2, _OWORD *a3, Phase::Geometry::SystemState *a4)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float *v16;
  __n64 result;
  float v18;
  float v19;
  float v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[32];
  _OWORD v32[8];

  v7 = a1[83];
  Phase::SpatialModeler::RayTracerState::predictTotalRoomEnergy((Phase::SpatialModeler::RayTracerState *)a1, a4, v32);
  Phase::SpatialModeler::RayTracerState::calculateTotalSpecularEarlyEnergy((Phase::SpatialModeler::RayTracerState *)a1, (char *)&v25);
  v8 = v30;
  a2[4] = v29;
  a2[5] = v8;
  v9 = *(_OWORD *)&v31[16];
  a2[6] = *(_OWORD *)v31;
  a2[7] = v9;
  v10 = v26;
  *a2 = v25;
  a2[1] = v10;
  v11 = v28;
  a2[2] = v27;
  a2[3] = v11;
  v30 = 0u;
  memset(v31, 0, 28);
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v25 = 0u;
  *(_DWORD *)&v31[28] = v7;
  if ((_DWORD)v7)
  {
    bzero(&v25, 4 * v7);
    v12 = v30;
    a3[4] = v29;
    a3[5] = v12;
    v13 = *(_OWORD *)&v31[16];
    a3[6] = *(_OWORD *)v31;
    a3[7] = v13;
    v14 = v26;
    *a3 = v25;
    a3[1] = v14;
    result.n64_u32[1] = DWORD1(v27);
    v15 = v28;
    v16 = (float *)v32;
    a3[2] = v27;
    a3[3] = v15;
    result.n64_u32[0] = 0;
    do
    {
      v18 = *v16++;
      v19 = v18;
      v20 = *(float *)a2;
      a2 = (_OWORD *)((char *)a2 + 4);
      *(float *)a3 = fmaxf(v19 - v20, 0.0);
      a3 = (_OWORD *)((char *)a3 + 4);
      --v7;
    }
    while (v7);
  }
  else
  {
    v21 = v30;
    a3[4] = v29;
    a3[5] = v21;
    v22 = *(_OWORD *)&v31[16];
    a3[6] = *(_OWORD *)v31;
    a3[7] = v22;
    v23 = v26;
    *a3 = v25;
    a3[1] = v23;
    result.n64_u64[0] = v27;
    v24 = v28;
    a3[2] = v27;
    a3[3] = v24;
  }
  return result;
}

void Phase::SpatialModeler::RayTracerState::predictTotalRoomEnergy(Phase::SpatialModeler::RayTracerState *this@<X0>, Phase::Geometry::SystemState *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  float *v11;
  float *p_b;
  float v13;
  float v14;
  float v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  uint8_t *v19;
  float *v20;
  float v21;
  float *v22;
  float v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  Phase::Logger *v34;
  NSObject *v35;
  _OWORD v36[8];
  __int128 __b;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[32];
  uint8_t buf[32];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v6 = *((unsigned int *)this + 83);
  v42 = 0u;
  memset(v43, 0, 28);
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  __b = 0u;
  *(_DWORD *)&v43[28] = v6;
  if ((_DWORD)v6)
    bzero(&__b, 4 * v6);
  v7 = *((_QWORD *)this + 2366);
  if (*((_QWORD *)this + 2367) != v7)
  {
    if (*((_BYTE *)this + 180))
    {
      if ((_DWORD)v6)
        memset_pattern16(&__b, &unk_21673A810, 4 * v6);
      Phase::SpatialModeler::CalculateSoundPowerRelativeToOmni((Phase::Logger *)&__b, *(int **)(*(_QWORD *)this + 51936), v6);
    }
    else
    {
      v8 = 0;
      do
      {
        Phase::SpatialModeler::getSoundPowerRelativeToOmni((uint64_t)a2, *(_QWORD *)(v7 + 56 * v8 + 40), v6, v36);
        v9 = *(unsigned int *)&v43[28];
        memset(buf, 0, sizeof(buf));
        v45 = 0u;
        v46 = 0u;
        v47 = 0u;
        v48 = 0u;
        memset(v49, 0, 28);
        *(_DWORD *)&v49[28] = *(_DWORD *)&v43[28];
        if (*(_DWORD *)&v43[28])
        {
          v10 = buf;
          v11 = (float *)v36;
          p_b = (float *)&__b;
          do
          {
            v13 = *p_b++;
            v14 = v13;
            v15 = *v11++;
            *(float *)v10 = v14 + v15;
            v10 += 4;
            --v9;
          }
          while (v9);
        }
        v41 = v47;
        v42 = v48;
        *(_OWORD *)v43 = *(_OWORD *)v49;
        *(_OWORD *)&v43[16] = *(_OWORD *)&v49[16];
        __b = *(_OWORD *)buf;
        v38 = *(_OWORD *)&buf[16];
        v39 = v45;
        v40 = v46;
        ++v8;
        v7 = *((_QWORD *)this + 2366);
        v16 = 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 2367) - v7) >> 3);
      }
      while (v8 < v16);
      v17 = *(unsigned int *)&v43[28];
      memset(buf, 0, sizeof(buf));
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      memset(v49, 0, 28);
      *(_DWORD *)&v49[28] = *(_DWORD *)&v43[28];
      if (*(_DWORD *)&v43[28])
      {
        v18 = 1.0 / (float)v16;
        v19 = buf;
        v20 = (float *)&__b;
        do
        {
          v21 = *v20++;
          *(float *)v19 = v18 * v21;
          v19 += 4;
          --v17;
        }
        while (v17);
      }
      v41 = v47;
      v42 = v48;
      *(_OWORD *)v43 = *(_OWORD *)v49;
      *(_OWORD *)&v43[16] = *(_OWORD *)&v49[16];
      __b = *(_OWORD *)buf;
      v38 = *(_OWORD *)&buf[16];
      v39 = v45;
      v40 = v46;
    }
  }
  *(_OWORD *)((char *)a3 + 108) = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  *((_DWORD *)a3 + 31) = v6;
  if ((_DWORD)v6)
  {
    v22 = (float *)((char *)this + 19776);
    bzero(a3, 4 * v6);
    v23 = *((float *)this + 4878) + 1.0e-10;
    v24 = (float *)&__b;
    do
    {
      v25 = *v24++;
      v26 = v25;
      v27 = *v22++;
      *(float *)a3 = (float)((float)(v26 * 308.0) * v27) / v23;
      a3 = (_OWORD *)((char *)a3 + 4);
      --v6;
    }
    while (v6);
  }
  v28 = *(unsigned int *)&v43[28];
  v29 = *(float *)&__b;
  if (*(unsigned int *)&v43[28] <= 1uLL)
    v29 = 0.0;
  if (*(_DWORD *)&v43[28])
  {
    v30 = (float *)&__b;
    do
    {
      v31 = *v30++;
      v32 = v31;
      if (v29 < v31)
        v29 = v32;
      --v28;
    }
    while (v28);
  }
  v33 = v29 + 1.0e-15;
  if ((float)(log10f(v33) * 10.0) < -60.0)
  {
    v35 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v34) + 1184);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "RayTracerState.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1111;
      _os_log_impl(&dword_2164CC000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d The source(s) directivity reduced sound power by more than 60dB.", buf, 0x12u);
    }
  }
}

void Phase::SpatialModeler::RayTracerState::GetSumSharedReverbEnergy(Phase::SpatialModeler::RayTracerState *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  int v11;
  float *v12;

  if (*(_QWORD *)this)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 48);
    *a2 = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[6] = 0u;
    *(_OWORD *)((char *)a2 + 108) = 0u;
    *((_DWORD *)a2 + 31) = v4;
    if ((_DWORD)v4)
      bzero(a2, 4 * v4);
  }
  else
  {
    LODWORD(v4) = 0;
    a2[6] = 0u;
    a2[7] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
  }
  for (i = (_QWORD *)*((_QWORD *)this + 2430); i; i = (_QWORD *)*i)
  {
    if ((_DWORD)v4)
    {
      v6 = i[8];
      if (v6)
      {
        v7 = 0;
        v8 = 0;
        v9 = *(unsigned __int8 *)(v6 + 36);
        do
        {
          v10 = 0.0;
          if (!v9)
          {
            v11 = *(_DWORD *)(v6 + 24);
            if (v11)
            {
              v12 = (float *)(*(_QWORD *)(v6 + 8) + v7);
              do
              {
                v10 = v10 + *v12;
                v12 += *(unsigned int *)(v6 + 28);
                --v11;
              }
              while (v11);
            }
          }
          *((float *)a2 + v8) = v10 + *((float *)a2 + v8);
          ++v8;
          v7 += 4;
        }
        while (v8 != v4);
      }
    }
  }
}

float Phase::SpatialModeler::RayTracerState::GetSharedEnergyReFixedDb(Phase::SpatialModeler::RayTracerState *this, unint64_t *a2)
{
  float *v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v3 = (float *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)this + 2428, a2);
  if (!v3)
    return *((float *)this + 41);
  v4 = v3;
  v5 = *((float *)this + 41);
  v6 = expf((float)((float)(v5 * 10.0) / 10.0) * 0.23026) * (float)*((unsigned int *)this + 83);
  v7 = v4[20];
  if (v7 >= v6)
  {
    v8 = v7 / *((float *)this + 120);
    if (v8 <= 0.0)
      v8 = COERCE_FLOAT(1);
    return (float)((float)(logf(v8) * 4.3429) / 10.0) * 10.0;
  }
  return v5;
}

void Phase::SpatialModeler::GetMeanAbsorptionEstimateFromFirstAndHigherOrderTotalAbsorption(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, _OWORD *a5)
{
  float *v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float v23;
  uint64_t v24;
  float v25;
  float *v26;
  float v27;
  float *v28;
  float v29;
  float v30;
  uint64_t v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float *v36;
  float *v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[32];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[32];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[32];
  __int128 __b;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[32];

  v9 = (float *)a1;
  v10 = *(unsigned int *)(a1 + 124);
  __b = 0u;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  memset(v72, 0, 28);
  *(_DWORD *)&v72[28] = v10;
  if ((_DWORD)v10)
    memset_pattern16(&__b, &unk_21673A800, 4 * v10);
  if (a4 + a3)
  {
    if (a4 < 0x3E9)
    {
      v22 = 0uLL;
      v64 = 0u;
      memset(v65, 0, 28);
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v59 = 0u;
      *(_DWORD *)&v65[28] = v10;
      if ((_DWORD)v10)
      {
        memset_pattern16(&v59, &unk_21673A800, 4 * v10);
        v22 = 0uLL;
      }
      v23 = (float)a4;
      v24 = *(unsigned int *)(a2 + 124);
      v52 = v22;
      v53 = v22;
      v54 = v22;
      v55 = v22;
      v56 = v22;
      v57 = v22;
      *(_OWORD *)v58 = v22;
      *(_OWORD *)&v58[12] = v22;
      *(_DWORD *)&v58[28] = v24;
      if ((_DWORD)v24)
        memset_pattern16(&v52, &unk_21673A800, 4 * v24);
      v25 = (float)a3;
      if (a3)
      {
        v50 = 0u;
        memset(v51, 0, 28);
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v45 = 0u;
        *(_DWORD *)&v51[28] = v10;
        if ((_DWORD)v10)
        {
          v26 = (float *)&v45;
          do
          {
            v27 = *v9++;
            *v26++ = v27 / v25;
            --v10;
          }
          while (v10);
        }
        v63 = v49;
        v64 = v50;
        *(_OWORD *)v65 = *(_OWORD *)v51;
        *(_OWORD *)&v65[16] = *(_OWORD *)&v51[16];
        v59 = v45;
        v60 = v46;
        v61 = v47;
        v62 = v48;
      }
      if (a4)
      {
        v50 = 0u;
        memset(v51, 0, 28);
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v45 = 0u;
        *(_DWORD *)&v51[28] = v24;
        if ((_DWORD)v24)
        {
          v28 = (float *)&v45;
          do
          {
            v29 = *(float *)a2;
            a2 += 4;
            *v28++ = v29 / v23;
            --v24;
          }
          while (v24);
        }
        v56 = v49;
        v57 = v50;
        *(_OWORD *)v58 = *(_OWORD *)v51;
        *(_OWORD *)&v58[16] = *(_OWORD *)&v51[16];
        v52 = v45;
        v53 = v46;
        v54 = v47;
        v55 = v48;
      }
      v30 = (float)(v25 / (float)(a4 + a3)) * (float)((float)(v23 / -1000.0) + 1.0);
      v31 = *(unsigned int *)&v65[28];
      if (*(_DWORD *)&v65[28])
      {
        v32 = (float *)&v59;
        v33 = *(unsigned int *)&v65[28];
        do
        {
          *v32 = v30 * *v32;
          ++v32;
          --v33;
        }
        while (v33);
      }
      v34 = *(unsigned int *)&v58[28];
      if (*(_DWORD *)&v58[28])
      {
        v35 = (float *)&v52;
        do
        {
          *v35 = (float)(1.0 - v30) * *v35;
          ++v35;
          --v34;
        }
        while (v34);
      }
      v50 = 0u;
      memset(v51, 0, 28);
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v45 = 0u;
      *(_DWORD *)&v51[28] = v31;
      if ((_DWORD)v31)
      {
        v36 = (float *)&v45;
        v37 = (float *)&v52;
        v38 = (float *)&v59;
        do
        {
          v39 = *v38++;
          v40 = v39;
          v41 = *v37++;
          *v36++ = v40 + v41;
          --v31;
        }
        while (v31);
      }
      v42 = v50;
      a5[4] = v49;
      a5[5] = v42;
      v43 = *(_OWORD *)&v51[16];
      a5[6] = *(_OWORD *)v51;
      a5[7] = v43;
      v44 = v46;
      *a5 = v45;
      a5[1] = v44;
      v17 = v47;
      v18 = v48;
    }
    else
    {
      v11 = *(unsigned int *)(a2 + 124);
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      v64 = 0u;
      memset(v65, 0, 28);
      *(_DWORD *)&v65[28] = v11;
      if ((_DWORD)v11)
      {
        v12 = (float *)&v59;
        do
        {
          v13 = *(float *)a2;
          a2 += 4;
          *v12++ = v13 / (float)a4;
          --v11;
        }
        while (v11);
      }
      v14 = v64;
      a5[4] = v63;
      a5[5] = v14;
      v15 = *(_OWORD *)&v65[16];
      a5[6] = *(_OWORD *)v65;
      a5[7] = v15;
      v16 = v60;
      *a5 = v59;
      a5[1] = v16;
      v17 = v61;
      v18 = v62;
    }
  }
  else
  {
    v19 = v71;
    a5[4] = v70;
    a5[5] = v19;
    v20 = *(_OWORD *)&v72[16];
    a5[6] = *(_OWORD *)v72;
    a5[7] = v20;
    v21 = v67;
    *a5 = __b;
    a5[1] = v21;
    v17 = v68;
    v18 = v69;
  }
  a5[2] = v17;
  a5[3] = v18;
}

__n64 Phase::SpatialModeler::RayTracerState::CalculateRoomStats(Phase::SpatialModeler::RayTracerState *this, Phase::Geometry::SystemState *a2)
{
  Phase::SpatialModeler::countSurfaceArea((uint64_t)a2, (_QWORD *)this + 2619, (Phase::SpatialModeler::RayTracerState *)*((unsigned int *)this + 83), (uint64_t *)this + 2616, (float *)this + 4877, (float *)this + 4912, *((float *)this + 34), *((float *)this + 35));
  Phase::SpatialModeler::RayTracerState::UpdateLocalMeanFreePathAndMeanAbsorption(this);
  Phase::SpatialModeler::RayTracerState::UpdateLocalVolumeEstimate(this, a2);
  Phase::SpatialModeler::RayTracerState::UpdateLocalRT60Estimate(this);
  return Phase::SpatialModeler::RayTracerState::calculateTotalEarlyAndLateEnergy((unsigned int *)this, (_OWORD *)this + 1292, (_OWORD *)this + 1300, a2);
}

float Phase::SpatialModeler::RayTracerState::getSumOfActiveRays(Phase::SpatialModeler::RayTracerState *this)
{
  Phase::SpatialModeler::RayTracerState *v1;
  float result;
  uint64_t v3;
  Phase::SpatialModeler::RayTracerState *v4;
  Phase::SpatialModeler::RayTracerState *v5;
  BOOL v6;

  v1 = (Phase::SpatialModeler::RayTracerState *)*((_QWORD *)this + 2420);
  if (v1 == (Phase::SpatialModeler::RayTracerState *)((char *)this + 19368))
    return (float)*((unsigned int *)this + 4754);
  result = 0.0;
  do
  {
    v3 = *((_QWORD *)v1 + 7);
    if (v3 && !*(_BYTE *)(v3 + 36))
      result = result + *((float *)v1 + 18);
    v4 = (Phase::SpatialModeler::RayTracerState *)*((_QWORD *)v1 + 1);
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = *(Phase::SpatialModeler::RayTracerState **)v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (Phase::SpatialModeler::RayTracerState *)*((_QWORD *)v1 + 2);
        v6 = *(_QWORD *)v5 == (_QWORD)v1;
        v1 = v5;
      }
      while (!v6);
    }
    v1 = v5;
  }
  while (v5 != (Phase::SpatialModeler::RayTracerState *)((char *)this + 19368));
  if (result == 0.0)
    return (float)*((unsigned int *)this + 4754);
  return result;
}

float Phase::SpatialModeler::RayTracerState::getMinNumberOfActiveRaysAmongSources(Phase::SpatialModeler::RayTracerState *this)
{
  Phase::SpatialModeler::RayTracerState *v1;
  float result;
  uint64_t v3;
  Phase::SpatialModeler::RayTracerState *v4;
  Phase::SpatialModeler::RayTracerState *v5;
  BOOL v6;

  v1 = (Phase::SpatialModeler::RayTracerState *)*((_QWORD *)this + 2420);
  if (v1 == (Phase::SpatialModeler::RayTracerState *)((char *)this + 19368))
  {
    result = 3.4028e38;
  }
  else
  {
    result = 3.4028e38;
    do
    {
      v3 = *((_QWORD *)v1 + 7);
      if (v3 && !*(_BYTE *)(v3 + 36))
        result = fminf(*((float *)v1 + 18), result);
      v4 = (Phase::SpatialModeler::RayTracerState *)*((_QWORD *)v1 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(Phase::SpatialModeler::RayTracerState **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (Phase::SpatialModeler::RayTracerState *)*((_QWORD *)v1 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v1;
          v1 = v5;
        }
        while (!v6);
      }
      v1 = v5;
    }
    while (v5 != (Phase::SpatialModeler::RayTracerState *)((char *)this + 19368));
  }
  if (result > 3.4e37)
    return 0.0;
  return result;
}

void Phase::SpatialModeler::RayTracerState::descriptionString(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v5;
  const char *v6;
  void *__p[2];
  uint64_t v8;
  void *v9[2];
  uint64_t v10;

  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  if (*(_QWORD *)a1)
  {
    if (*(_DWORD *)(*(_QWORD *)a1 + 32) == 2)
      v5 = "ER ";
    else
      v5 = "LR ";
    MEMORY[0x2199F99B0](v9, v5);
    if (a2)
    {
      if (*(_BYTE *)(a2 + 48))
        v6 = "Attack";
      else
        v6 = "Sustain";
    }
    else
    {
      v6 = (const char *)&str_6_1;
    }
  }
  else
  {
    MEMORY[0x2199F99B0](v9, "Uninitialized");
    v6 = "N/A";
  }
  MEMORY[0x2199F99B0](__p, v6);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v9, (const void **)__p, a3);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
}

void sub_216692400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__tree_node<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t **v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t **v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t **v30;
  _QWORD *v31;
  uint64_t v32;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v8 = result + 1;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v9 = v6[1];
    else
      v9 = (uint64_t)v6;
    v30 = result;
    v31 = (_QWORD *)v9;
    v32 = v9;
    if (v9)
    {
      v10 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::_DetachedTreeCache::__detach_next(v9);
      v31 = v10;
      if (a2 != a3)
      {
        v11 = a2;
        do
        {
          v12 = (uint64_t)v10;
          v13 = v11[4];
          *(_QWORD *)(v9 + 32) = v13;
          v14 = *(_OWORD *)(v11 + 5);
          v15 = *(_OWORD *)(v11 + 7);
          *(_QWORD *)(v9 + 72) = v11[9];
          *(_OWORD *)(v9 + 56) = v15;
          *(_OWORD *)(v9 + 40) = v14;
          v16 = *v8;
          v17 = v5 + 1;
          v18 = v5 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                v17 = (uint64_t **)v16;
                if (v13 >= v16[4])
                  break;
                v16 = (uint64_t *)*v16;
                v18 = v17;
                if (!*v17)
                  goto LABEL_14;
              }
              v16 = (uint64_t *)v16[1];
            }
            while (v16);
            v18 = v17 + 1;
          }
LABEL_14:
          std::__tree<Phase::SpatialCategory>::__insert_node_at(v5, (uint64_t)v17, v18, (uint64_t *)v9);
          if (v12)
            v10 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::_DetachedTreeCache::__detach_next(v12);
          else
            v10 = 0;
          v19 = (_QWORD *)v11[1];
          if (v19)
          {
            do
            {
              a2 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v11[2];
              v20 = *a2 == (_QWORD)v11;
              v11 = a2;
            }
            while (!v20);
          }
          if (!v12)
            break;
          v9 = v12;
          v11 = a2;
        }
        while (a2 != a3);
        v31 = v10;
        v32 = v12;
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v30);
  }
  if (a2 != a3)
  {
    v21 = v5 + 1;
    do
    {
      v22 = operator new(0x50uLL);
      v24 = *((_OWORD *)a2 + 3);
      v23 = *((_OWORD *)a2 + 4);
      v22[2] = *((_OWORD *)a2 + 2);
      v22[3] = v24;
      v22[4] = v23;
      v25 = *v21;
      v26 = v5 + 1;
      v27 = v5 + 1;
      if (*v21)
      {
        do
        {
          while (1)
          {
            v26 = (uint64_t **)v25;
            if (*((_QWORD *)v22 + 4) >= (unint64_t)v25[4])
              break;
            v25 = (uint64_t *)*v25;
            v27 = v26;
            if (!*v26)
              goto LABEL_34;
          }
          v25 = (uint64_t *)v25[1];
        }
        while (v25);
        v27 = v26 + 1;
      }
LABEL_34:
      result = (uint64_t **)std::__tree<Phase::SpatialCategory>::__insert_node_at(v5, (uint64_t)v26, v27, (uint64_t *)v22);
      v28 = (_QWORD *)a2[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)a2[2];
          v20 = *v29 == (_QWORD)a2;
          a2 = v29;
        }
        while (!v20);
      }
      a2 = v29;
    }
    while (v29 != a3);
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<Phase::SpatialCategory>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<Phase::SpatialCategory>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t **std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0x50uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((_QWORD *)v9 + 9) = 0;
    std::__tree<Phase::SpatialCategory>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

Phase::SpatialModeler::EarlyReflectionDetector *std::allocate_shared[abi:ne180100]<Phase::SpatialModeler::EarlyReflectionDetector,std::allocator<Phase::SpatialModeler::EarlyReflectionDetector>,Phase::SpatialModeler::EarlyReflectionDetector&,void>(Phase::SpatialModeler::EarlyReflectionDetector **a1, const Phase::SpatialModeler::EarlyReflectionDetector *a2)
{
  _QWORD *v4;
  Phase::SpatialModeler::EarlyReflectionDetector *result;

  v4 = operator new(0xA0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24D580A60;
  result = Phase::SpatialModeler::EarlyReflectionDetector::EarlyReflectionDetector((Phase::SpatialModeler::EarlyReflectionDetector *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (Phase::SpatialModeler::EarlyReflectionDetector *)v4;
  return result;
}

void sub_21669283C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phase::SpatialModeler::EarlyReflectionDetector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D580A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::SpatialModeler::EarlyReflectionDetector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D580A60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

uint64_t std::__shared_ptr_emplace<Phase::SpatialModeler::EarlyReflectionDetector>::__on_zero_shared(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[8];
  if (v5)
  {
    a1[9] = v5;
    operator delete(v5);
  }
  return std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)(a1 + 3));
}

char *std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>::__push_back_slow_path<Phase::SpatialModeler::PhaseRoomSimulationSoundSource const&>(char **a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::EntityShapeTemplate>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v12 = &v10[56 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v11 + 3) = *(_DWORD *)(a2 + 12);
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  *((_DWORD *)v11 + 5) = *(_DWORD *)(a2 + 20);
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  *((_DWORD *)v11 + 7) = *(_DWORD *)(a2 + 28);
  *((_DWORD *)v11 + 8) = *(_DWORD *)(a2 + 32);
  *((_DWORD *)v11 + 9) = *(_DWORD *)(a2 + 36);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  v13 = v11 + 56;
  v15 = *a1;
  v14 = a1[1];
  if (v14 != *a1)
  {
    v16 = 0;
    do
    {
      v17 = &v11[v16];
      *((_DWORD *)v17 - 12) = *(_DWORD *)&v14[v16 - 48];
      *((_DWORD *)v17 - 11) = *(_DWORD *)&v14[v16 - 44];
      *((_DWORD *)v17 - 10) = *(_DWORD *)&v14[v16 - 40];
      *((_DWORD *)v17 - 9) = *(_DWORD *)&v14[v16 - 36];
      *((_DWORD *)v17 - 8) = *(_DWORD *)&v14[v16 - 32];
      v18 = *(_QWORD *)&v14[v16 - 56];
      *((_DWORD *)v17 - 7) = *(_DWORD *)&v14[v16 - 28];
      *((_DWORD *)v17 - 6) = *(_DWORD *)&v14[v16 - 24];
      v19 = *(_DWORD *)&v14[v16 - 20];
      *((_QWORD *)v17 - 7) = v18;
      *((_DWORD *)v17 - 5) = v19;
      *((_OWORD *)v17 - 1) = *(_OWORD *)&v14[v16 - 16];
      v16 -= 56;
    }
    while (&v14[v16] != v15);
    v14 = *a1;
    v11 += v16;
  }
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
  if (v14)
    operator delete(v14);
  return v13;
}

void std::__shared_ptr_emplace<Phase::SpatialModeler::DirectivityHistogram>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D580A98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::SpatialModeler::DirectivityHistogram>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D580A98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

uint64_t std::__shared_ptr_emplace<Phase::SpatialModeler::DirectivityHistogram>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

unint64_t Phase::SpatialModeler::GetSoundSourceHash(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  if (a3 && *(_DWORD *)(a3 + 48) == 3)
    v3 = 0xC6A4A7935BD1E995 * *(_QWORD *)(a3 + 56);
  else
    v3 = 0;
  return 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995 * (v3 ^ (v3 >> 47))) ^ (0xC6A4A7935BD1E995
                                                      * ((0x35A98F4D286A90B9
                                                        * ((0xC6A4A7935BD1E995 * a1) ^ ((0xC6A4A7935BD1E995 * a1) >> 47))
                                                        + 3864292196u) ^ (0xC6A4A7935BD1E995
                                                                        * ((0xC6A4A7935BD1E995 * a2) ^ ((0xC6A4A7935BD1E995 * a2) >> 47))))
                                                      + 3864292196u))
       + 3864292196u;
}

unint64_t Phase::SpatialModeler::GetClusterHash(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2++;
      v4 = 3864292196u
         - 0x395B586CA42E166BLL
         * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ v4);
    }
    while (v2 != v3);
  }
  return 3864292196u
       - 0x395B586CA42E166BLL
       * (v4 ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2) ^ ((0xC6A4A7935BD1E995 * a2) >> 47))));
}

void Phase::SpatialModeler::scatterVectorOnPlane(float *a1, float *a2, float a3, float a4)
{
  float v7;
  float v8;
  float v9;
  int8x16_t v10;
  int8x16_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  int8x16_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;

  v7 = sqrtf(1.0 - a3);
  v8 = a4 * 6.28318531;
  v9 = cosf(v8);
  v11.i32[0] = 1.0;
  v12 = (float)(v7 * v7) * (float)(1.0 - (float)(v9 * v9));
  if (v12 < 0.0)
    __assert_rtn("scatterVectorOnPlane", "RayTracingMath.cpp", 197, "tmp >= 0");
  v13 = sqrtf(a3);
  v15 = a2[1];
  v14 = a2[2];
  v16 = sqrtf((float)(v14 * v14) + (float)((float)(*a2 * *a2) + (float)(v15 * v15)));
  v17 = v14 / v16;
  *(float *)v10.i32 = *a2 / v16;
  v18 = v15 / v16;
  v19 = (float)((float)(a1[1] * v18) + (float)(*a1 * *(float *)v10.i32)) + (float)(a1[2] * v17);
  v20.i64[0] = 0x8000000080000000;
  v20.i64[1] = 0x8000000080000000;
  v20.i32[0] = vbslq_s8(v20, v11, v10).i32[0];
  v21 = 1.0 / (float)(*(float *)v10.i32 + *(float *)v20.i32);
  v22 = -(float)(*(float *)v20.i32 - (float)(v17 * (float)(v17 * v21)));
  v23 = v18 * v21;
  v24 = -(float)(*(float *)v20.i32 - (float)(v18 * v23));
  v25 = v17 * v23;
  v26 = v7 * v9;
  v27 = sqrtf(v12);
  if (v8 > 3.14159265)
    v27 = -v27;
  v28 = (float)(v13 * *(float *)v10.i32) + (float)(v26 * v18);
  v29 = (float)(v13 * v18) + (float)(v26 * v24);
  v30 = (float)(v13 * v17) + (float)(v26 * v25);
  v31 = v27 * v22;
  v32 = (float)(v27 * v17) + v28;
  v33 = (float)(v27 * v25) + v29;
  v34 = v31 + v30;
  *a1 = v32;
  a1[1] = v33;
  a1[2] = v34;
  if (v19 >= 0.0)
  {
    *a1 = -v32;
    a1[1] = -v33;
    a1[2] = -v34;
  }
}

void Phase::SpatialModeler::ApplyDirectivitySubbandGains(Phase::Logger *a1, int *a2, float32x2_t *a3, float32x2_t *a4)
{
  Phase::Logger *v4;
  int v5;
  float v6;
  int v7;
  float v8;
  float SubbandGainsFrom;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  NSObject *v28;
  int v29;
  int v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  int v39;
  Phase::Logger *v40;
  float v41;
  int v42;
  float v43;
  float v44;
  float v45;
  Phase::Logger *v46;
  int v48;
  Phase::Logger *v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  float *v61;
  float v62;
  uint64_t v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  uint64_t v69;
  float *v70;
  float v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  uint64_t v80;
  float *v81;
  float v82;
  uint64_t v83;
  float v84;
  uint64_t v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  uint64_t v91;
  float *v92;
  float v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  uint64_t v102;
  float v103;
  float v104;
  float v105;
  uint64_t v106;
  uint64_t v107;
  float v108;
  uint64_t v109;
  float *v110;
  float v111;
  uint64_t v112;
  float v113;
  uint64_t v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  uint64_t v120;
  float v121;
  float v122;
  float v123;
  uint64_t v124;
  uint64_t v125;
  float v126;
  uint64_t v127;
  float *v128;
  float v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  _BYTE v136[28];
  _BYTE buf[32];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _OWORD v142[2];
  uint64_t v143;

  v4 = a1;
  v143 = *MEMORY[0x24BDAC8D0];
  v5 = *((_DWORD *)a1 + 31);
  switch(v5)
  {
    case 3:
      v6 = 1.0;
      if (a2)
      {
        v7 = *a2;
        if (*a2 == 3)
        {
          v85 = **((_QWORD **)a2 + 5);
          if (v85)
          {
            Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
            v86 = *(float *)buf;
            v87 = *(float *)&buf[8];
            v88 = acosf(*(float *)&buf[4]/ sqrtf((float)((float)(v86 * v86) + (float)(*(float *)&buf[4] * *(float *)&buf[4])) + (float)(v87 * v87)));
            v89 = atan2f(v86, v87) + 3.1416;
            v90 = (float)(v89 - (float)(floorf(v89 / 6.2832) * 6.2832)) + 0.0;
            if (v90 >= 6.2832)
              v90 = nextafterf(6.2832, 0.0);
            SubbandGainsFrom = Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<3ul>(v85, v88, v90);
            goto LABEL_94;
          }
          goto LABEL_131;
        }
        if (v7 == 2)
        {
          v83 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 40);
          if (!v83)
            goto LABEL_131;
          Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
          v84 = acosf((float)-*(float *)&buf[8]/ sqrtf((float)((float)(*(float *)buf * *(float *)buf) + (float)(*(float *)&buf[4] * *(float *)&buf[4]))+ (float)(*(float *)&buf[8] * *(float *)&buf[8])));
          SubbandGainsFrom = Phase::Geometry::ConeDirectivity::CalculateSubbandGains<3ul>(v83, v84 + v84);
        }
        else
        {
          v8 = 1.0;
          SubbandGainsFrom = 1.0;
          if (v7 == 1)
          {
            v10 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 40);
            if (v10)
            {
              Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
              v11 = *(float *)buf;
              v12 = *(float *)&buf[8];
              v13 = acosf(*(float *)&buf[4]/ sqrtf((float)((float)(v11 * v11) + (float)(*(float *)&buf[4] * *(float *)&buf[4]))+ (float)(v12 * v12)));
              v14 = atan2f(v11, v12) + 3.1416;
              v15 = (float)(v14 - (float)(floorf(v14 / 6.2832) * 6.2832)) + 0.0;
              if (v15 >= 6.2832)
                v15 = nextafterf(6.2832, 0.0);
              Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<3ul>(v10, v13, v15);
              goto LABEL_94;
            }
LABEL_131:
            std::terminate();
          }
        }
      }
      else
      {
        v8 = 1.0;
        SubbandGainsFrom = 1.0;
      }
LABEL_94:
      *(float *)buf = SubbandGainsFrom;
      *(float *)&buf[4] = v8;
      *(float *)&buf[8] = v6;
      LODWORD(v91) = *((_DWORD *)v4 + 31);
      if (v91 >= 3)
        v91 = 3;
      else
        v91 = v91;
      if ((_DWORD)v91)
      {
        v92 = (float *)buf;
        do
        {
          v93 = *v92++;
          *(float *)v4 = *(float *)v4 * (float)(v93 * v93);
          v4 = (Phase::Logger *)((char *)v4 + 4);
          --v91;
        }
        while (v91);
      }
      return;
    case 4:
      v41 = 1.0;
      if (a2)
      {
        v42 = *a2;
        if (*a2 == 1)
        {
          v63 = **((_QWORD **)a2 + 5);
          if (!v63)
            goto LABEL_131;
          Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
          v64 = *(float *)buf;
          v65 = *(float *)&buf[8];
          v66 = acosf(*(float *)&buf[4]/ sqrtf((float)((float)(v64 * v64) + (float)(*(float *)&buf[4] * *(float *)&buf[4])) + (float)(v65 * v65)));
          v67 = atan2f(v64, v65) + 3.1416;
          v68 = (float)(v67 - (float)(floorf(v67 / 6.2832) * 6.2832)) + 0.0;
          if (v68 >= 6.2832)
            v68 = nextafterf(6.2832, 0.0);
          Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<4ul>(v63, v66, v68);
        }
        else if (v42 == 2)
        {
          v52 = **((_QWORD **)a2 + 5);
          if (!v52)
            goto LABEL_131;
          Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
          v53 = acosf((float)-*(float *)&buf[8]/ sqrtf((float)((float)(*(float *)buf * *(float *)buf) + (float)(*(float *)&buf[4] * *(float *)&buf[4]))+ (float)(*(float *)&buf[8] * *(float *)&buf[8])));
          v45 = Phase::Geometry::ConeDirectivity::CalculateSubbandGains<4ul>(v52, v53 + v53);
        }
        else
        {
          v43 = 1.0;
          v44 = 1.0;
          v45 = 1.0;
          if (v42 == 3)
          {
            if (**((_QWORD **)a2 + 5))
            {
              Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
              Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<4ul>(v46);
            }
            goto LABEL_131;
          }
        }
      }
      else
      {
        v43 = 1.0;
        v44 = 1.0;
        v45 = 1.0;
      }
      *(float *)buf = v45;
      *(float *)&buf[4] = v44;
      *(float *)&buf[8] = v43;
      *(float *)&buf[12] = v41;
      LODWORD(v69) = *((_DWORD *)v4 + 31);
      if (v69 >= 4)
        v69 = 4;
      else
        v69 = v69;
      if ((_DWORD)v69)
      {
        v70 = (float *)buf;
        do
        {
          v71 = *v70++;
          *(float *)v4 = *(float *)v4 * (float)(v71 * v71);
          v4 = (Phase::Logger *)((char *)v4 + 4);
          --v69;
        }
        while (v69);
      }
      return;
    case 5:
      __asm { FMOV            V0.4S, #1.0; jumptable 0000000216692DA8 case 5 }
      *(_OWORD *)buf = _Q0;
      *(_DWORD *)&buf[16] = 1065353216;
      if (!a2)
        goto LABEL_57;
      v39 = *a2;
      if (*a2 == 1)
      {
        v54 = **((_QWORD **)a2 + 5);
        if (!v54)
          goto LABEL_131;
        Phase::TransformPositionByInverse<float>(a3, a4, (float *)&v130);
        v55 = *(float *)&v130;
        v56 = *((float *)&v130 + 2);
        v57 = acosf(*((float *)&v130 + 1)/ sqrtf((float)((float)(v55 * v55) + (float)(*((float *)&v130 + 1) * *((float *)&v130 + 1)))+ (float)(v56 * v56)));
        v58 = atan2f(v55, v56) + 3.1416;
        v59 = (float)(v58 - (float)(floorf(v58 / 6.2832) * 6.2832)) + 0.0;
        if (v59 >= 6.2832)
          v59 = nextafterf(6.2832, 0.0);
        Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<5ul>((uint64_t)buf, v54, v57, v59);
      }
      else if (v39 == 2)
      {
        v50 = **((_QWORD **)a2 + 5);
        if (!v50)
          goto LABEL_131;
        Phase::TransformPositionByInverse<float>(a3, a4, (float *)&v130);
        v51 = acosf((float)-*((float *)&v130 + 2)/ sqrtf((float)((float)(*(float *)&v130 * *(float *)&v130)+ (float)(*((float *)&v130 + 1) * *((float *)&v130 + 1)))+ (float)(*((float *)&v130 + 2) * *((float *)&v130 + 2))));
        Phase::Geometry::ConeDirectivity::CalculateSubbandGains<5ul>((uint64_t)buf, v50, v51 + v51);
      }
      else if (v39 == 3)
      {
        if (**((_QWORD **)a2 + 5))
        {
          Phase::TransformPositionByInverse<float>(a3, a4, (float *)&v130);
          Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<5ul>(v40);
        }
        goto LABEL_131;
      }
LABEL_57:
      LODWORD(v60) = *((_DWORD *)v4 + 31);
      if (v60 >= 5)
        v60 = 5;
      else
        v60 = v60;
      if ((_DWORD)v60)
      {
        v61 = (float *)buf;
        do
        {
          v62 = *v61++;
          *(float *)v4 = *(float *)v4 * (float)(v62 * v62);
          v4 = (Phase::Logger *)((char *)v4 + 4);
          --v60;
        }
        while (v60);
      }
      return;
    case 6:
      __asm { FMOV            V0.4S, #1.0; jumptable 0000000216692DA8 case 6 }
      *(_OWORD *)buf = _Q0;
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)&buf[16] = _Q0;
      if (!a2)
        goto LABEL_81;
      v48 = *a2;
      if (*a2 == 1)
      {
        v74 = **((_QWORD **)a2 + 5);
        if (!v74)
          goto LABEL_131;
        Phase::TransformPositionByInverse<float>(a3, a4, (float *)&v130);
        v75 = *(float *)&v130;
        v76 = *((float *)&v130 + 2);
        v77 = acosf(*((float *)&v130 + 1)/ sqrtf((float)((float)(v75 * v75) + (float)(*((float *)&v130 + 1) * *((float *)&v130 + 1)))+ (float)(v76 * v76)));
        v78 = atan2f(v75, v76) + 3.1416;
        v79 = (float)(v78 - (float)(floorf(v78 / 6.2832) * 6.2832)) + 0.0;
        if (v79 >= 6.2832)
          v79 = nextafterf(6.2832, 0.0);
        Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<6ul>((uint64_t)buf, v74, v77, v79);
      }
      else if (v48 == 2)
      {
        v72 = **((_QWORD **)a2 + 5);
        if (!v72)
          goto LABEL_131;
        Phase::TransformPositionByInverse<float>(a3, a4, (float *)&v130);
        v73 = acosf((float)-*((float *)&v130 + 2)/ sqrtf((float)((float)(*(float *)&v130 * *(float *)&v130)+ (float)(*((float *)&v130 + 1) * *((float *)&v130 + 1)))+ (float)(*((float *)&v130 + 2) * *((float *)&v130 + 2))));
        Phase::Geometry::ConeDirectivity::CalculateSubbandGains<6ul>((uint64_t)buf, v72, v73 + v73);
      }
      else if (v48 == 3)
      {
        if (**((_QWORD **)a2 + 5))
        {
          Phase::TransformPositionByInverse<float>(a3, a4, (float *)&v130);
          Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<6ul>(v49);
        }
        goto LABEL_131;
      }
LABEL_81:
      LODWORD(v80) = *((_DWORD *)v4 + 31);
      if (v80 >= 6)
        v80 = 6;
      else
        v80 = v80;
      if ((_DWORD)v80)
      {
        v81 = (float *)buf;
        do
        {
          v82 = *v81++;
          *(float *)v4 = *(float *)v4 * (float)(v82 * v82);
          v4 = (Phase::Logger *)((char *)v4 + 4);
          --v80;
        }
        while (v80);
      }
      return;
    case 7:
    case 8:
    case 9:
      goto LABEL_19;
    case 10:
      __asm { FMOV            V0.4S, #1.0; jumptable 0000000216692DA8 case 10 }
      v130 = _Q0;
      v131 = _Q0;
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)&v132 = _Q0;
      if (!a2)
        goto LABEL_109;
      v31 = *a2;
      if (*a2 == 3)
      {
        v96 = **((_QWORD **)a2 + 5);
        if (!v96)
          goto LABEL_131;
        Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
        v97 = *(float *)buf;
        v98 = *(float *)&buf[8];
        v99 = acosf(*(float *)&buf[4]/ sqrtf((float)((float)(v97 * v97) + (float)(*(float *)&buf[4] * *(float *)&buf[4])) + (float)(v98 * v98)));
        v100 = atan2f(v97, v98);
        v101 = (float)((float)(v100 + 3.1416) - (float)(floorf((float)(v100 + 3.1416) / 6.2832) * 6.2832)) + 0.0;
        if (v101 >= 6.2832)
          v101 = nextafterf(6.2832, 0.0);
        v102 = **(_QWORD **)(v96 + 40);
        v103 = cosf(v101);
        v104 = cosf(v99 + -1.5708);
        v105 = acosf(v104 * v103);
        v106 = 0;
        v107 = *(_QWORD *)(*(_QWORD *)(v102 + 32)
                         + 8
                         * (((int)llroundf((float)(v105 * 57.296) / *(float *)(v102 + 28)) % *(_DWORD *)(v102 + 24)
                           + *(_DWORD *)(v102 + 24))
                          % *(_DWORD *)(v102 + 24)));
        do
        {
          v108 = *(double *)(v107 + 8 * v106);
          *(float *)&buf[4 * v106++] = v108;
        }
        while (v106 != 10);
        v130 = *(_OWORD *)buf;
        v131 = *(_OWORD *)&buf[16];
        *(_QWORD *)&v132 = v138;
      }
      else if (v31 == 2)
      {
        v94 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 80);
        if (!v94)
          goto LABEL_131;
        Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
        v95 = acosf((float)-*(float *)&buf[8]/ sqrtf((float)((float)(*(float *)buf * *(float *)buf) + (float)(*(float *)&buf[4] * *(float *)&buf[4]))+ (float)(*(float *)&buf[8] * *(float *)&buf[8])));
        Phase::Geometry::ConeDirectivity::CalculateSubbandGains<10ul>((uint64_t)&v130, v94, v95 + v95);
      }
      else if (v31 == 1)
      {
        v32 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 80);
        if (!v32)
          goto LABEL_131;
        Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
        v33 = *(float *)buf;
        v34 = *(float *)&buf[8];
        v35 = acosf(*(float *)&buf[4]/ sqrtf((float)((float)(v33 * v33) + (float)(*(float *)&buf[4] * *(float *)&buf[4])) + (float)(v34 * v34)));
        v36 = atan2f(v33, v34) + 3.1416;
        v37 = (float)(v36 - (float)(floorf(v36 / 6.2832) * 6.2832)) + 0.0;
        if (v37 >= 6.2832)
          v37 = nextafterf(6.2832, 0.0);
        Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<10ul>((uint64_t)&v130, v32, v35, v37);
      }
LABEL_109:
      LODWORD(v109) = *((_DWORD *)v4 + 31);
      if (v109 >= 0xA)
        v109 = 10;
      else
        v109 = v109;
      if ((_DWORD)v109)
      {
        v110 = (float *)&v130;
        do
        {
          v111 = *v110++;
          *(float *)v4 = *(float *)v4 * (float)(v111 * v111);
          v4 = (Phase::Logger *)((char *)v4 + 4);
          --v109;
        }
        while (v109);
      }
      return;
    default:
      if (v5 == 31)
      {
        __asm { FMOV            V0.4S, #1.0 }
        v130 = _Q0;
        v131 = _Q0;
        v132 = _Q0;
        v133 = _Q0;
        v134 = _Q0;
        v135 = _Q0;
        *(_OWORD *)v136 = _Q0;
        __asm { FMOV            V0.2S, #1.0 }
        *(_QWORD *)&v136[16] = _Q0;
        *(_DWORD *)&v136[24] = 1065353216;
        if (a2)
        {
          v21 = *a2;
          if (*a2 == 3)
          {
            v114 = **((_QWORD **)a2 + 5);
            if (!v114)
              goto LABEL_131;
            Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
            v115 = *(float *)buf;
            v116 = *(float *)&buf[8];
            v117 = acosf(*(float *)&buf[4]/ sqrtf((float)((float)(v115 * v115) + (float)(*(float *)&buf[4] * *(float *)&buf[4]))+ (float)(v116 * v116)));
            v118 = atan2f(v115, v116);
            v119 = (float)((float)(v118 + 3.1416) - (float)(floorf((float)(v118 + 3.1416) / 6.2832) * 6.2832)) + 0.0;
            if (v119 >= 6.2832)
              v119 = nextafterf(6.2832, 0.0);
            v120 = **(_QWORD **)(v114 + 32);
            v121 = cosf(v119);
            v122 = cosf(v117 + -1.5708);
            v123 = acosf(v122 * v121);
            v124 = 0;
            v125 = *(_QWORD *)(*(_QWORD *)(v120 + 32)
                             + 8
                             * (((int)llroundf((float)(v123 * 57.296) / *(float *)(v120 + 28)) % *(_DWORD *)(v120 + 24)
                               + *(_DWORD *)(v120 + 24))
                              % *(_DWORD *)(v120 + 24)));
            do
            {
              v126 = *(double *)(v125 + 8 * v124);
              *(float *)&buf[4 * v124++] = v126;
            }
            while (v124 != 31);
            v134 = v140;
            v135 = v141;
            *(_OWORD *)v136 = v142[0];
            *(_OWORD *)&v136[12] = *(_OWORD *)((char *)v142 + 12);
            v130 = *(_OWORD *)buf;
            v131 = *(_OWORD *)&buf[16];
            v132 = v138;
            v133 = v139;
          }
          else if (v21 == 2)
          {
            v112 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 120);
            if (!v112)
              goto LABEL_131;
            Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
            v113 = acosf((float)-*(float *)&buf[8]/ sqrtf((float)((float)(*(float *)buf * *(float *)buf) + (float)(*(float *)&buf[4] * *(float *)&buf[4]))+ (float)(*(float *)&buf[8] * *(float *)&buf[8])));
            Phase::Geometry::ConeDirectivity::CalculateSubbandGains<31ul>((uint64_t)&v130, v112, v113 + v113);
          }
          else if (v21 == 1)
          {
            v22 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 120);
            if (!v22)
              goto LABEL_131;
            Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
            v23 = *(float *)buf;
            v24 = *(float *)&buf[8];
            v25 = acosf(*(float *)&buf[4]/ sqrtf((float)((float)(v23 * v23) + (float)(*(float *)&buf[4] * *(float *)&buf[4])) + (float)(v24 * v24)));
            v26 = atan2f(v23, v24) + 3.1416;
            v27 = (float)(v26 - (float)(floorf(v26 / 6.2832) * 6.2832)) + 0.0;
            if (v27 >= 6.2832)
              v27 = nextafterf(6.2832, 0.0);
            Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<31ul>((uint64_t)&v130, v22, v25, v27);
          }
        }
        LODWORD(v127) = *((_DWORD *)v4 + 31);
        if (v127 >= 0x1F)
          v127 = 31;
        else
          v127 = v127;
        if ((_DWORD)v127)
        {
          v128 = (float *)&v130;
          do
          {
            v129 = *v128++;
            *(float *)v4 = *(float *)v4 * (float)(v129 * v129);
            v4 = (Phase::Logger *)((char *)v4 + 4);
            --v127;
          }
          while (v127);
        }
      }
      else
      {
LABEL_19:
        v28 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 1184);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          v29 = *((_DWORD *)v4 + 31);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "RayTracingMath.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 286;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v29;
          _os_log_impl(&dword_2164CC000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported subband count: %ui\n", buf, 0x18u);
        }
      }
      return;
  }
}

void Phase::SpatialModeler::applySourceDirectivity(_OWORD *a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X2>, uint64_t a4@<X3>, float32x2_t *a5@<X4>, Phase::Logger *a6@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int *v10;

  v6 = a1[5];
  *((_OWORD *)a6 + 4) = a1[4];
  *((_OWORD *)a6 + 5) = v6;
  v7 = a1[7];
  *((_OWORD *)a6 + 6) = a1[6];
  *((_OWORD *)a6 + 7) = v7;
  v8 = a1[1];
  *(_OWORD *)a6 = *a1;
  *((_OWORD *)a6 + 1) = v8;
  v9 = a1[3];
  *((_OWORD *)a6 + 2) = a1[2];
  *((_OWORD *)a6 + 3) = v9;
  if (*(_DWORD *)(a2 + 16) > a4
    && *(_DWORD *)(*(_QWORD *)a2 + 24 * a4 + 20) == HIDWORD(a4))
  {
    v10 = *(int **)(*(_QWORD *)a2 + 24 * a4);
  }
  else
  {
    v10 = 0;
  }
  Phase::SpatialModeler::ApplyDirectivitySubbandGains(a6, v10, a3, a5);
}

void Phase::SpatialModeler::applyListenerDirectivity(_OWORD *a1@<X0>, uint64_t a2@<X1>, float *a3@<X2>, uint64_t a4@<X3>, Phase::Logger *a5@<X8>, float a6@<S0>, float a7@<S1>)
{
  float v12;
  float32x2_t *v13;
  __float2 v14;
  __float2 v15;
  float32_t v16;
  float v17;
  float32x2_t v18;
  float v19;

  v12 = a6 * 0.017453;
  v13 = (float32x2_t *)(a3 + 12);
  v14 = __sincosf_stret((float)(90.0 - a7) * 0.017453);
  v15 = __sincosf_stret(v12);
  v16 = v14.__cosval + a3[17];
  v17 = (float)(v15.__cosval * v14.__sinval) + a3[18];
  v18.f32[0] = (float)(v15.__sinval * v14.__sinval) + a3[16];
  v18.f32[1] = v16;
  v19 = v17;
  Phase::SpatialModeler::applySourceDirectivity(a1, a2, v13, a4, &v18, a5);
}

void Phase::SpatialModeler::CalculateSoundPowerRelativeToOmni(Phase::Logger *a1, int *a2, uint64_t a3)
{
  Phase::Logger *v4;
  int v5;
  float v6;
  float v7;
  float32x2_t v8;
  uint64_t v9;
  int v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int kk;
  float v32;
  float v33;
  float v34;
  float v35;
  double v36;
  NSObject *v37;
  int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int ii;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int32x2_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v69;
  int v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  float *v113;
  float v114;
  uint64_t v115;
  int i;
  float v117;
  float v118;
  float v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  int j;
  float v131;
  float v132;
  float v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  float32x4_t *v144;
  float v145;
  uint64_t v146;
  int k;
  float v148;
  float v149;
  float v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  int32x2_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  int m;
  float v163;
  float v164;
  float v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  int32x2_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  float32x4_t *v177;
  float v178;
  uint64_t v179;
  int v180;
  float v181;
  float SubbandGainsFrom;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  int v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  float *v218;
  float v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  int v223;
  float v224;
  uint64_t v225;
  float v226;
  float v227;
  float v228;
  uint64_t v229;
  uint64_t v230;
  float v231;
  float32x4_t v232;
  float32x4_t v233;
  float v234;
  float32x2_t v235;
  float v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  int n;
  float v248;
  float v249;
  float v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  int32x2_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  float32x4_t *v262;
  float v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  int v267;
  float v268;
  uint64_t v269;
  float v270;
  float v271;
  float v272;
  uint64_t v273;
  uint64_t v274;
  float v275;
  float v276;
  float v277;
  float v278;
  double v279;
  uint64_t v280;
  int jj;
  float v282;
  float v283;
  float v284;
  float v285;
  double v286;
  uint64_t v287;
  float32x4_t *v288;
  float v289;
  float32x4_t v290;
  float32x2_t v291;
  float32x4_t v292;
  float32x2_t v293;
  float32x2_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  _OWORD v302[2];
  float32x4_t v303;
  float32x4_t v304;
  float32x2_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x2_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x2_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  _OWORD v318[2];
  _BYTE buf[32];
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  float32x4_t v323;
  _OWORD v324[2];
  uint64_t v325;

  v4 = a1;
  v325 = *MEMORY[0x24BDAC8D0];
  switch(a3)
  {
    case 3:
      if (a2)
      {
        v5 = *a2;
        if (*a2 == 3)
        {
          v179 = **((_QWORD **)a2 + 5);
          if (v179)
          {
            v180 = 0;
            v8 = 0;
            v6 = 0.0;
            do
            {
              v293 = v8;
              v181 = (float)((float)((float)v180 * 0.10833)
                           - (float)(floorf((float)((float)v180 * 0.10833) / 6.2832) * 6.2832))
                   + 0.0;
              if (v181 >= 6.2832)
                v181 = nextafterf(6.2832, 0.0);
              SubbandGainsFrom = Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<3ul>(v179, 1.5708, v181);
              v184 = v183;
              v186 = v185;
              v187 = 0.0014666;
              if (v180)
              {
                v187 = 0.0014666;
                if (v180 != 29)
                {
                  v188 = cosf((float)((float)(v180 - 1) * 0.10833) + 0.054165);
                  v187 = v188 - cosf((float)((float)v180 * 0.10833) + 0.054165);
                }
              }
              v189 = 0;
              v190 = 0;
              v191 = 0;
              v312.f32[0] = SubbandGainsFrom * SubbandGainsFrom;
              v312.f32[1] = v184 * v184;
              v312.f32[2] = v186 * v186;
              *(_QWORD *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v191 <= 2)
                {
                  v190 = v191 + 1;
                  *(_DWORD *)&buf[4 * v191++] = v312.i32[v189];
                }
                ++v189;
              }
              while (v189 != 3);
              if (v190 <= 2)
                bzero(&buf[4 * v190], 12 - 4 * v190);
              v192 = 0;
              v193 = 0;
              v194 = 0;
              *(float32x2_t *)v312.f32 = vmul_n_f32(*(float32x2_t *)buf, v187 * 0.5);
              v312.f32[2] = (float)(v187 * 0.5) * *(float *)&buf[8];
              *(_QWORD *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v194 <= 2)
                {
                  v193 = v194 + 1;
                  *(_DWORD *)&buf[4 * v194++] = v312.i32[v192];
                }
                ++v192;
              }
              while (v192 != 3);
              if (v193 <= 2)
                bzero(&buf[4 * v193], 12 - 4 * v193);
              v195 = 0;
              v196 = 0;
              v197 = 0;
              *(float32x2_t *)v312.f32 = vadd_f32(v293, *(float32x2_t *)buf);
              v312.f32[2] = v6 + *(float *)&buf[8];
              *(_QWORD *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v197 <= 2)
                {
                  v196 = v197 + 1;
                  *(_DWORD *)&buf[4 * v197++] = v312.i32[v195];
                }
                ++v195;
              }
              while (v195 != 3);
              if (v196 <= 2)
                bzero(&buf[4 * v196], 12 - 4 * v196);
              v8 = *(float32x2_t *)buf;
              v6 = *(float *)&buf[8];
              ++v180;
            }
            while (v180 != 30);
            goto LABEL_338;
          }
          goto LABEL_434;
        }
        if (v5 == 2)
        {
          v198 = **((_QWORD **)a2 + 5);
          if (v198)
          {
            v199 = 0;
            v8 = 0;
            v6 = 0.0;
            do
            {
              v294 = v8;
              v200 = (float)((float)((float)v199 * 0.10833)
                           - (float)(floorf((float)((float)v199 * 0.10833) / 6.2832) * 6.2832))
                   + 0.0;
              if (v200 >= 6.2832)
                v200 = nextafterf(6.2832, 0.0);
              v201 = Phase::Geometry::ConeDirectivity::CalculateSubbandGains<3ul>(v198, v200);
              v203 = v202;
              v205 = v204;
              v206 = 0.0014666;
              if (v199)
              {
                v206 = 0.0014666;
                if (v199 != 29)
                {
                  v207 = cosf((float)((float)(v199 - 1) * 0.10833) + 0.054165);
                  v206 = v207 - cosf((float)((float)v199 * 0.10833) + 0.054165);
                }
              }
              v208 = 0;
              v209 = 0;
              v210 = 0;
              v312.f32[0] = v201 * v201;
              v312.f32[1] = v203 * v203;
              v312.f32[2] = v205 * v205;
              *(_QWORD *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v210 <= 2)
                {
                  v209 = v210 + 1;
                  *(_DWORD *)&buf[4 * v210++] = v312.i32[v208];
                }
                ++v208;
              }
              while (v208 != 3);
              if (v209 <= 2)
                bzero(&buf[4 * v209], 12 - 4 * v209);
              v211 = 0;
              v212 = 0;
              v213 = 0;
              *(float32x2_t *)v312.f32 = vmul_n_f32(*(float32x2_t *)buf, v206 * 0.5);
              v312.f32[2] = (float)(v206 * 0.5) * *(float *)&buf[8];
              *(_QWORD *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v213 <= 2)
                {
                  v212 = v213 + 1;
                  *(_DWORD *)&buf[4 * v213++] = v312.i32[v211];
                }
                ++v211;
              }
              while (v211 != 3);
              if (v212 <= 2)
                bzero(&buf[4 * v212], 12 - 4 * v212);
              v214 = 0;
              v215 = 0;
              v216 = 0;
              *(float32x2_t *)v312.f32 = vadd_f32(v294, *(float32x2_t *)buf);
              v312.f32[2] = v6 + *(float *)&buf[8];
              *(_QWORD *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v216 <= 2)
                {
                  v215 = v216 + 1;
                  *(_DWORD *)&buf[4 * v216++] = v312.i32[v214];
                }
                ++v214;
              }
              while (v214 != 3);
              if (v215 <= 2)
                bzero(&buf[4 * v215], 12 - 4 * v215);
              v8 = *(float32x2_t *)buf;
              v6 = *(float *)&buf[8];
              ++v199;
            }
            while (v199 != 30);
            goto LABEL_338;
          }
LABEL_434:
          std::terminate();
        }
        v6 = 0.0;
        v7 = 0.0;
        v8.i32[0] = 0;
        if (v5 == 1)
        {
          v9 = **((_QWORD **)a2 + 5);
          if (v9)
          {
            v10 = 0;
            v8 = 0;
            do
            {
              v291 = v8;
              v11 = (float)((float)((float)v10 * 0.10833)
                          - (float)(floorf((float)((float)v10 * 0.10833) / 6.2832) * 6.2832))
                  + 0.0;
              if (v11 >= 6.2832)
                v11 = nextafterf(6.2832, 0.0);
              Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<3ul>(v9, 1.5708, v11);
              v13 = v12;
              v15 = v14;
              v17 = v16;
              v18 = 0.0014666;
              if (v10)
              {
                v18 = 0.0014666;
                if (v10 != 29)
                {
                  v19 = cosf((float)((float)(v10 - 1) * 0.10833) + 0.054165);
                  v18 = v19 - cosf((float)((float)v10 * 0.10833) + 0.054165);
                }
              }
              v20 = 0;
              v21 = 0;
              v22 = 0;
              v312.f32[0] = v13 * v13;
              v312.f32[1] = v15 * v15;
              v312.f32[2] = v17 * v17;
              *(_QWORD *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v22 <= 2)
                {
                  v21 = v22 + 1;
                  *(_DWORD *)&buf[4 * v22++] = v312.i32[v20];
                }
                ++v20;
              }
              while (v20 != 3);
              if (v21 <= 2)
                bzero(&buf[4 * v21], 12 - 4 * v21);
              v23 = 0;
              v24 = 0;
              v25 = 0;
              *(float32x2_t *)v312.f32 = vmul_n_f32(*(float32x2_t *)buf, v18 * 0.5);
              v312.f32[2] = (float)(v18 * 0.5) * *(float *)&buf[8];
              *(_QWORD *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v25 <= 2)
                {
                  v24 = v25 + 1;
                  *(_DWORD *)&buf[4 * v25++] = v312.i32[v23];
                }
                ++v23;
              }
              while (v23 != 3);
              if (v24 <= 2)
                bzero(&buf[4 * v24], 12 - 4 * v24);
              v26 = 0;
              v27 = 0;
              v28 = 0;
              *(float32x2_t *)v312.f32 = vadd_f32(v291, *(float32x2_t *)buf);
              v312.f32[2] = v6 + *(float *)&buf[8];
              *(_QWORD *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v28 <= 2)
                {
                  v27 = v28 + 1;
                  *(_DWORD *)&buf[4 * v28++] = v312.i32[v26];
                }
                ++v26;
              }
              while (v26 != 3);
              if (v27 <= 2)
                bzero(&buf[4 * v27], 12 - 4 * v27);
              v8 = *(float32x2_t *)buf;
              v6 = *(float *)&buf[8];
              ++v10;
            }
            while (v10 != 30);
LABEL_338:
            v7 = v8.f32[1];
            goto LABEL_339;
          }
          goto LABEL_434;
        }
      }
      else
      {
        v6 = 1.0;
        v7 = 1.0;
        v8.i32[0] = 1.0;
      }
LABEL_339:
      *(_DWORD *)buf = v8.i32[0];
      *(float *)&buf[4] = v7;
      *(float *)&buf[8] = v6;
      LODWORD(v217) = *((_DWORD *)v4 + 31);
      if (v217 >= 3)
        v217 = 3;
      else
        v217 = v217;
      if ((_DWORD)v217)
      {
        v218 = (float *)buf;
        do
        {
          v219 = *v218++;
          *(float *)v4 = *(float *)v4 * (float)(v219 * v219);
          v4 = (Phase::Logger *)((char *)v4 + 4);
          --v217;
        }
        while (v217);
      }
      return;
    case 4:
      if (!a2)
      {
        v39 = 1.0;
        v40 = 1.0;
        v41 = 1.0;
        v42 = 1.0;
        goto LABEL_158;
      }
      v38 = *a2;
      if (*a2 == 1)
      {
        v69 = **((_QWORD **)a2 + 5);
        if (!v69)
          goto LABEL_434;
        v70 = 0;
        v292 = 0u;
        do
        {
          v71 = (float)((float)((float)v70 * 0.10833) - (float)(floorf((float)((float)v70 * 0.10833) / 6.2832) * 6.2832))
              + 0.0;
          if (v71 >= 6.2832)
            v71 = nextafterf(6.2832, 0.0);
          Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<4ul>(v69, 1.5708, v71);
          v73 = v72;
          v75 = v74;
          v77 = v76;
          v79 = v78;
          v80 = 0.0014666;
          if (v70)
          {
            v80 = 0.0014666;
            if (v70 != 29)
            {
              v81 = cosf((float)((float)(v70 - 1) * 0.10833) + 0.054165);
              v80 = v81 - cosf((float)((float)v70 * 0.10833) + 0.054165);
            }
          }
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v312.f32[0] = v73 * v73;
          v312.f32[1] = v75 * v75;
          v312.f32[2] = v77 * v77;
          v312.f32[3] = v79 * v79;
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)buf = 0;
          do
          {
            if (v84 <= 3)
            {
              v83 = v84 + 1;
              *(_DWORD *)&buf[4 * v84++] = v312.i32[v82];
            }
            ++v82;
          }
          while (v82 != 4);
          if (v83 <= 3)
            bzero(&buf[4 * v83], 16 - 4 * v83);
          v85 = 0;
          v86 = 0;
          v87 = 0;
          v312 = vmulq_n_f32(*(float32x4_t *)buf, v80 * 0.5);
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)buf = 0;
          do
          {
            if (v87 <= 3)
            {
              v86 = v87 + 1;
              *(_DWORD *)&buf[4 * v87++] = v312.i32[v85];
            }
            ++v85;
          }
          while (v85 != 4);
          if (v86 <= 3)
            bzero(&buf[4 * v86], 16 - 4 * v86);
          v88 = 0;
          v89 = 0;
          v90 = 0;
          v312 = vaddq_f32(v292, *(float32x4_t *)buf);
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)buf = 0;
          do
          {
            if (v90 <= 3)
            {
              v89 = v90 + 1;
              *(_DWORD *)&buf[4 * v90++] = v312.i32[v88];
            }
            ++v88;
          }
          while (v88 != 4);
          if (v89 <= 3)
            bzero(&buf[4 * v89], 16 - 4 * v89);
          v292 = *(float32x4_t *)buf;
          ++v70;
        }
        while (v70 != 30);
LABEL_157:
        v42 = v292.f32[0];
        v39 = v292.f32[3];
        v40 = v292.f32[2];
        v41 = v292.f32[1];
        goto LABEL_158;
      }
      if (v38 == 2)
      {
        v91 = **((_QWORD **)a2 + 5);
        if (!v91)
          goto LABEL_434;
        v92 = 0;
        v292 = 0u;
        do
        {
          v93 = (float)((float)((float)v92 * 0.10833) - (float)(floorf((float)((float)v92 * 0.10833) / 6.2832) * 6.2832))
              + 0.0;
          if (v93 >= 6.2832)
            v93 = nextafterf(6.2832, 0.0);
          v94 = Phase::Geometry::ConeDirectivity::CalculateSubbandGains<4ul>(v91, v93);
          v96 = v95;
          v98 = v97;
          v100 = v99;
          v101 = 0.0014666;
          if (v92)
          {
            v101 = 0.0014666;
            if (v92 != 29)
            {
              v102 = cosf((float)((float)(v92 - 1) * 0.10833) + 0.054165);
              v101 = v102 - cosf((float)((float)v92 * 0.10833) + 0.054165);
            }
          }
          v103 = 0;
          v104 = 0;
          v105 = 0;
          v312.f32[0] = v94 * v94;
          v312.f32[1] = v96 * v96;
          v312.f32[2] = v98 * v98;
          v312.f32[3] = v100 * v100;
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)buf = 0;
          do
          {
            if (v105 <= 3)
            {
              v104 = v105 + 1;
              *(_DWORD *)&buf[4 * v105++] = v312.i32[v103];
            }
            ++v103;
          }
          while (v103 != 4);
          if (v104 <= 3)
            bzero(&buf[4 * v104], 16 - 4 * v104);
          v106 = 0;
          v107 = 0;
          v108 = 0;
          v312 = vmulq_n_f32(*(float32x4_t *)buf, v101 * 0.5);
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)buf = 0;
          do
          {
            if (v108 <= 3)
            {
              v107 = v108 + 1;
              *(_DWORD *)&buf[4 * v108++] = v312.i32[v106];
            }
            ++v106;
          }
          while (v106 != 4);
          if (v107 <= 3)
            bzero(&buf[4 * v107], 16 - 4 * v107);
          v109 = 0;
          v110 = 0;
          v111 = 0;
          v312 = vaddq_f32(v292, *(float32x4_t *)buf);
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)buf = 0;
          do
          {
            if (v111 <= 3)
            {
              v110 = v111 + 1;
              *(_DWORD *)&buf[4 * v111++] = v312.i32[v109];
            }
            ++v109;
          }
          while (v109 != 4);
          if (v110 <= 3)
            bzero(&buf[4 * v110], 16 - 4 * v110);
          v292 = *(float32x4_t *)buf;
          ++v92;
        }
        while (v92 != 30);
        goto LABEL_157;
      }
      v39 = 0.0;
      v40 = 0.0;
      v41 = 0.0;
      v42 = 0.0;
      if (v38 == 3)
      {
        if (**((_QWORD **)a2 + 5))
          Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<4ul>(a1);
        goto LABEL_434;
      }
LABEL_158:
      *(float *)buf = v42;
      *(float *)&buf[4] = v41;
      *(float *)&buf[8] = v40;
      *(float *)&buf[12] = v39;
      LODWORD(v112) = *((_DWORD *)v4 + 31);
      if (v112 >= 4)
        v112 = 4;
      else
        v112 = v112;
      if ((_DWORD)v112)
      {
        v113 = (float *)buf;
        do
        {
          v114 = *v113++;
          *(float *)v4 = *(float *)v4 * (float)(v114 * v114);
          v4 = (Phase::Logger *)((char *)v4 + 4);
          --v112;
        }
        while (v112);
      }
      return;
    case 5:
      v303 = 0uLL;
      v304.i32[0] = 0;
      if (a2)
      {
        v43 = *a2;
        if (*a2 == 1)
        {
          v115 = **((_QWORD **)a2 + 5);
          if (!v115)
            goto LABEL_434;
          for (i = 0; i != 30; ++i)
          {
            v117 = (float)((float)((float)i * 0.10833) - (float)(floorf((float)((float)i * 0.10833) / 6.2832) * 6.2832))
                 + 0.0;
            if (v117 >= 6.2832)
              v117 = nextafterf(6.2832, 0.0);
            Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<5ul>((uint64_t)&v312, v115, 1.5708, v117);
            v118 = 0.0014666;
            if (i)
            {
              v118 = 0.0014666;
              if (i != 29)
              {
                v119 = cosf((float)((float)(i - 1) * 0.10833) + 0.054165);
                v118 = v119 - cosf((float)((float)i * 0.10833) + 0.054165);
              }
            }
            v120 = 0;
            v121 = 0;
            v122 = 0;
            *(float32x4_t *)buf = vmulq_f32(v312, v312);
            *(float *)&buf[16] = v313.f32[0] * v313.f32[0];
            v296 = 0uLL;
            v297.i32[0] = 0;
            do
            {
              if (v122 <= 4)
              {
                v121 = v122 + 1;
                v296.i32[v122++] = *(_DWORD *)&buf[v120];
              }
              v120 += 4;
            }
            while (v120 != 20);
            if (v121 <= 4)
              bzero(&v296.f32[v121], 20 - 4 * v121);
            v123 = 0;
            v124 = 0;
            v125 = 0;
            *(float32x4_t *)buf = vmulq_n_f32(v296, v118 * 0.5);
            *(float *)&buf[16] = (float)(v118 * 0.5) * v297.f32[0];
            v306 = 0uLL;
            v307.i32[0] = 0;
            do
            {
              if (v125 <= 4)
              {
                v124 = v125 + 1;
                v306.i32[v125++] = *(_DWORD *)&buf[v123];
              }
              v123 += 4;
            }
            while (v123 != 20);
            if (v124 <= 4)
              bzero(&v306.f32[v124], 20 - 4 * v124);
            v126 = 0;
            v127 = 0;
            v128 = 0;
            *(float32x4_t *)buf = vaddq_f32(v303, v306);
            *(float *)&buf[16] = v304.f32[0] + v307.f32[0];
            v309 = 0uLL;
            v310.i32[0] = 0;
            do
            {
              if (v128 <= 4)
              {
                v127 = v128 + 1;
                v309.i32[v128++] = *(_DWORD *)&buf[v126];
              }
              v126 += 4;
            }
            while (v126 != 20);
            if (v127 <= 4)
              bzero(&v309.f32[v127], 20 - 4 * v127);
            v303 = v309;
            v304.i32[0] = v310.i32[0];
          }
        }
        else if (v43 == 2)
        {
          v129 = **((_QWORD **)a2 + 5);
          if (!v129)
            goto LABEL_434;
          for (j = 0; j != 30; ++j)
          {
            v131 = (float)((float)((float)j * 0.10833) - (float)(floorf((float)((float)j * 0.10833) / 6.2832) * 6.2832))
                 + 0.0;
            if (v131 >= 6.2832)
              v131 = nextafterf(6.2832, 0.0);
            Phase::Geometry::ConeDirectivity::CalculateSubbandGains<5ul>((uint64_t)&v312, v129, v131);
            v132 = 0.0014666;
            if (j)
            {
              v132 = 0.0014666;
              if (j != 29)
              {
                v133 = cosf((float)((float)(j - 1) * 0.10833) + 0.054165);
                v132 = v133 - cosf((float)((float)j * 0.10833) + 0.054165);
              }
            }
            v134 = 0;
            v135 = 0;
            v136 = 0;
            *(float32x4_t *)buf = vmulq_f32(v312, v312);
            *(float *)&buf[16] = v313.f32[0] * v313.f32[0];
            v296 = 0uLL;
            v297.i32[0] = 0;
            do
            {
              if (v136 <= 4)
              {
                v135 = v136 + 1;
                v296.i32[v136++] = *(_DWORD *)&buf[v134];
              }
              v134 += 4;
            }
            while (v134 != 20);
            if (v135 <= 4)
              bzero(&v296.f32[v135], 20 - 4 * v135);
            v137 = 0;
            v138 = 0;
            v139 = 0;
            *(float32x4_t *)buf = vmulq_n_f32(v296, v132 * 0.5);
            *(float *)&buf[16] = (float)(v132 * 0.5) * v297.f32[0];
            v306 = 0uLL;
            v307.i32[0] = 0;
            do
            {
              if (v139 <= 4)
              {
                v138 = v139 + 1;
                v306.i32[v139++] = *(_DWORD *)&buf[v137];
              }
              v137 += 4;
            }
            while (v137 != 20);
            if (v138 <= 4)
              bzero(&v306.f32[v138], 20 - 4 * v138);
            v140 = 0;
            v141 = 0;
            v142 = 0;
            *(float32x4_t *)buf = vaddq_f32(v303, v306);
            *(float *)&buf[16] = v304.f32[0] + v307.f32[0];
            v309 = 0uLL;
            v310.i32[0] = 0;
            do
            {
              if (v142 <= 4)
              {
                v141 = v142 + 1;
                v309.i32[v142++] = *(_DWORD *)&buf[v140];
              }
              v140 += 4;
            }
            while (v140 != 20);
            if (v141 <= 4)
              bzero(&v309.f32[v141], 20 - 4 * v141);
            v303 = v309;
            v304.i32[0] = v310.i32[0];
          }
        }
        else if (v43 == 3)
        {
          if (**((_QWORD **)a2 + 5))
            Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<5ul>(a1);
          goto LABEL_434;
        }
      }
      else
      {
        __asm { FMOV            V0.4S, #1.0 }
        v303 = _Q0;
        v304.i32[0] = 1065353216;
      }
      LODWORD(v143) = *((_DWORD *)v4 + 31);
      if (v143 >= 5)
        v143 = 5;
      else
        v143 = v143;
      if ((_DWORD)v143)
      {
        v144 = &v303;
        do
        {
          v145 = v144->f32[0];
          v144 = (float32x4_t *)((char *)v144 + 4);
          *(float *)v4 = *(float *)v4 * (float)(v145 * v145);
          v4 = (Phase::Logger *)((char *)v4 + 4);
          --v143;
        }
        while (v143);
      }
      return;
    case 6:
      v303 = 0uLL;
      v304.i64[0] = 0;
      if (a2)
      {
        v44 = *a2;
        if (*a2 == 1)
        {
          v146 = **((_QWORD **)a2 + 5);
          if (!v146)
            goto LABEL_434;
          for (k = 0; k != 30; ++k)
          {
            v148 = (float)((float)((float)k * 0.10833) - (float)(floorf((float)((float)k * 0.10833) / 6.2832) * 6.2832))
                 + 0.0;
            if (v148 >= 6.2832)
              v148 = nextafterf(6.2832, 0.0);
            Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<6ul>((uint64_t)&v312, v146, 1.5708, v148);
            v149 = 0.0014666;
            if (k)
            {
              v149 = 0.0014666;
              if (k != 29)
              {
                v150 = cosf((float)((float)(k - 1) * 0.10833) + 0.054165);
                v149 = v150 - cosf((float)((float)k * 0.10833) + 0.054165);
              }
            }
            v151 = 0;
            v152 = 0;
            v153 = 0;
            *(float32x4_t *)buf = vmulq_f32(v312, v312);
            v154 = (int32x2_t)vmul_f32(*(float32x2_t *)v313.f32, *(float32x2_t *)v313.f32);
            *(int32x2_t *)&buf[16] = v154;
            v297.i64[0] = 0;
            v296 = 0uLL;
            do
            {
              if (v153 <= 5)
              {
                v152 = v153 + 1;
                v296.i32[v153++] = *(_DWORD *)&buf[v151];
              }
              v151 += 4;
            }
            while (v151 != 24);
            if (v152 <= 5)
              bzero(&v296.f32[v152], 24 - 4 * v152);
            v155 = 0;
            v156 = 0;
            v157 = 0;
            *(float *)v154.i32 = v149 * 0.5;
            *(float32x4_t *)buf = vmulq_n_f32(v296, v149 * 0.5);
            *(float32x2_t *)&buf[16] = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(v154, 0), *(float32x2_t *)v297.f32);
            v307.i64[0] = 0;
            v306 = 0uLL;
            do
            {
              if (v157 <= 5)
              {
                v156 = v157 + 1;
                v306.i32[v157++] = *(_DWORD *)&buf[v155];
              }
              v155 += 4;
            }
            while (v155 != 24);
            if (v156 <= 5)
              bzero(&v306.f32[v156], 24 - 4 * v156);
            v158 = 0;
            v159 = 0;
            v160 = 0;
            *(float32x4_t *)buf = vaddq_f32(v303, v306);
            *(float32x2_t *)&buf[16] = vadd_f32(*(float32x2_t *)v304.f32, *(float32x2_t *)v307.f32);
            v310.i64[0] = 0;
            v309 = 0uLL;
            do
            {
              if (v160 <= 5)
              {
                v159 = v160 + 1;
                v309.i32[v160++] = *(_DWORD *)&buf[v158];
              }
              v158 += 4;
            }
            while (v158 != 24);
            if (v159 <= 5)
              bzero(&v309.f32[v159], 24 - 4 * v159);
            v303 = v309;
            v304.i64[0] = v310.i64[0];
          }
        }
        else if (v44 == 2)
        {
          v161 = **((_QWORD **)a2 + 5);
          if (!v161)
            goto LABEL_434;
          for (m = 0; m != 30; ++m)
          {
            v163 = (float)((float)((float)m * 0.10833) - (float)(floorf((float)((float)m * 0.10833) / 6.2832) * 6.2832))
                 + 0.0;
            if (v163 >= 6.2832)
              v163 = nextafterf(6.2832, 0.0);
            Phase::Geometry::ConeDirectivity::CalculateSubbandGains<6ul>((uint64_t)&v312, v161, v163);
            v164 = 0.0014666;
            if (m)
            {
              v164 = 0.0014666;
              if (m != 29)
              {
                v165 = cosf((float)((float)(m - 1) * 0.10833) + 0.054165);
                v164 = v165 - cosf((float)((float)m * 0.10833) + 0.054165);
              }
            }
            v166 = 0;
            v167 = 0;
            v168 = 0;
            *(float32x4_t *)buf = vmulq_f32(v312, v312);
            v169 = (int32x2_t)vmul_f32(*(float32x2_t *)v313.f32, *(float32x2_t *)v313.f32);
            *(int32x2_t *)&buf[16] = v169;
            v297.i64[0] = 0;
            v296 = 0uLL;
            do
            {
              if (v168 <= 5)
              {
                v167 = v168 + 1;
                v296.i32[v168++] = *(_DWORD *)&buf[v166];
              }
              v166 += 4;
            }
            while (v166 != 24);
            if (v167 <= 5)
              bzero(&v296.f32[v167], 24 - 4 * v167);
            v170 = 0;
            v171 = 0;
            v172 = 0;
            *(float *)v169.i32 = v164 * 0.5;
            *(float32x4_t *)buf = vmulq_n_f32(v296, v164 * 0.5);
            *(float32x2_t *)&buf[16] = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(v169, 0), *(float32x2_t *)v297.f32);
            v307.i64[0] = 0;
            v306 = 0uLL;
            do
            {
              if (v172 <= 5)
              {
                v171 = v172 + 1;
                v306.i32[v172++] = *(_DWORD *)&buf[v170];
              }
              v170 += 4;
            }
            while (v170 != 24);
            if (v171 <= 5)
              bzero(&v306.f32[v171], 24 - 4 * v171);
            v173 = 0;
            v174 = 0;
            v175 = 0;
            *(float32x4_t *)buf = vaddq_f32(v303, v306);
            *(float32x2_t *)&buf[16] = vadd_f32(*(float32x2_t *)v304.f32, *(float32x2_t *)v307.f32);
            v310.i64[0] = 0;
            v309 = 0uLL;
            do
            {
              if (v175 <= 5)
              {
                v174 = v175 + 1;
                v309.i32[v175++] = *(_DWORD *)&buf[v173];
              }
              v173 += 4;
            }
            while (v173 != 24);
            if (v174 <= 5)
              bzero(&v309.f32[v174], 24 - 4 * v174);
            v303 = v309;
            v304.i64[0] = v310.i64[0];
          }
        }
        else if (v44 == 3)
        {
          if (**((_QWORD **)a2 + 5))
            Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<6ul>(a1);
          goto LABEL_434;
        }
      }
      else
      {
        __asm { FMOV            V0.4S, #1.0 }
        v303 = _Q0;
        __asm { FMOV            V0.2S, #1.0 }
        v304.i64[0] = _Q0.i64[0];
      }
      LODWORD(v176) = *((_DWORD *)v4 + 31);
      if (v176 >= 6)
        v176 = 6;
      else
        v176 = v176;
      if ((_DWORD)v176)
      {
        v177 = &v303;
        do
        {
          v178 = v177->f32[0];
          v177 = (float32x4_t *)((char *)v177 + 4);
          *(float *)v4 = *(float *)v4 * (float)(v178 * v178);
          v4 = (Phase::Logger *)((char *)v4 + 4);
          --v176;
        }
        while (v176);
      }
      return;
    case 7:
    case 8:
    case 9:
      goto LABEL_47;
    case 10:
      v305 = 0;
      v303 = 0u;
      v304 = 0u;
      if (a2)
      {
        v45 = *a2;
        if (*a2 == 3)
        {
          v220 = **((_QWORD **)a2 + 5);
          if (!v220)
            goto LABEL_434;
          v221 = 0;
          v222 = **(_QWORD **)(v220 + 40);
          v223 = *(_DWORD *)(v222 + 24);
          v224 = *(float *)(v222 + 28);
          v225 = *(_QWORD *)(v222 + 32);
          do
          {
            v226 = (float)((float)((float)v221 * 0.10833)
                         - (float)(floorf((float)((float)v221 * 0.10833) / 6.2832) * 6.2832))
                 + 0.0;
            if (v226 >= 6.2832)
              v226 = nextafterf(6.2832, 0.0);
            v227 = cosf(v226);
            v228 = acosf(v227);
            v229 = 0;
            v230 = *(_QWORD *)(v225 + 8 * (((int)llroundf((float)(v228 * 57.296) / v224) % v223 + v223) % v223));
            do
            {
              v231 = *(double *)(v230 + 8 * v229);
              *(float *)&buf[4 * v229++] = v231;
            }
            while (v229 != 10);
            v232 = *(float32x4_t *)buf;
            v233 = *(float32x4_t *)&buf[16];
            v234 = 0.0014666;
            v235 = *(float32x2_t *)v320.f32;
            if (v221)
            {
              v234 = 0.0014666;
              if (v221 != 29)
              {
                v290 = *(float32x4_t *)buf;
                v295 = *(float32x4_t *)&buf[16];
                v236 = cosf((float)((float)(v221 - 1) * 0.10833) + 0.054165);
                v234 = v236 - cosf((float)((float)v221 * 0.10833) + 0.054165);
                v232 = v290;
                v233 = v295;
              }
            }
            v237 = 0;
            v238 = 0;
            v239 = 0;
            *(float32x4_t *)buf = vmulq_f32(v232, v232);
            *(float32x4_t *)&buf[16] = vmulq_f32(v233, v233);
            *(float32x2_t *)v320.f32 = vmul_f32(v235, v235);
            v232.i32[1] = 0;
            v306 = 0u;
            v307 = 0u;
            v308 = 0;
            do
            {
              if (v239 <= 9)
              {
                v238 = v239 + 1;
                v306.i32[v239++] = *(_DWORD *)&buf[v237];
              }
              v237 += 4;
            }
            while (v237 != 40);
            if (v238 <= 9)
              bzero(&v306.f32[v238], 40 - 4 * v238);
            v240 = 0;
            v241 = 0;
            v242 = 0;
            v232.f32[0] = v234 * 0.5;
            *(float32x4_t *)buf = vmulq_n_f32(v306, v234 * 0.5);
            *(float32x4_t *)&buf[16] = vmulq_n_f32(v307, v234 * 0.5);
            *(float32x2_t *)v320.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v232.f32, 0), v308);
            v309 = 0u;
            v310 = 0u;
            v311 = 0;
            do
            {
              if (v242 <= 9)
              {
                v241 = v242 + 1;
                v309.i32[v242++] = *(_DWORD *)&buf[v240];
              }
              v240 += 4;
            }
            while (v240 != 40);
            if (v241 <= 9)
              bzero(&v309.f32[v241], 40 - 4 * v241);
            v243 = 0;
            v244 = 0;
            v245 = 0;
            *(float32x4_t *)buf = vaddq_f32(v303, v309);
            *(float32x4_t *)&buf[16] = vaddq_f32(v304, v310);
            *(float32x2_t *)v320.f32 = vadd_f32(v305, v311);
            v312 = 0u;
            v313 = 0u;
            v314.i64[0] = 0;
            do
            {
              if (v245 <= 9)
              {
                v244 = v245 + 1;
                v312.i32[v245++] = *(_DWORD *)&buf[v243];
              }
              v243 += 4;
            }
            while (v243 != 40);
            if (v244 <= 9)
              bzero(&v312.f32[v244], 40 - 4 * v244);
            v303 = v312;
            v304 = v313;
            v305 = *(float32x2_t *)v314.f32;
            ++v221;
          }
          while (v221 != 30);
        }
        else if (v45 == 2)
        {
          v246 = **((_QWORD **)a2 + 5);
          if (!v246)
            goto LABEL_434;
          for (n = 0; n != 30; ++n)
          {
            v248 = (float)((float)((float)n * 0.10833) - (float)(floorf((float)((float)n * 0.10833) / 6.2832) * 6.2832))
                 + 0.0;
            if (v248 >= 6.2832)
              v248 = nextafterf(6.2832, 0.0);
            Phase::Geometry::ConeDirectivity::CalculateSubbandGains<10ul>((uint64_t)&v312, v246, v248);
            v249 = 0.0014666;
            if (n)
            {
              v249 = 0.0014666;
              if (n != 29)
              {
                v250 = cosf((float)((float)(n - 1) * 0.10833) + 0.054165);
                v249 = v250 - cosf((float)((float)n * 0.10833) + 0.054165);
              }
            }
            v251 = 0;
            v252 = 0;
            v253 = 0;
            *(float32x4_t *)buf = vmulq_f32(v312, v312);
            *(float32x4_t *)&buf[16] = vmulq_f32(v313, v313);
            *(float32x2_t *)v320.f32 = vmul_f32(*(float32x2_t *)v314.f32, *(float32x2_t *)v314.f32);
            v254.i32[1] = 0;
            v296 = 0u;
            v297 = 0u;
            v298.i64[0] = 0;
            do
            {
              if (v253 <= 9)
              {
                v252 = v253 + 1;
                v296.i32[v253++] = *(_DWORD *)&buf[v251];
              }
              v251 += 4;
            }
            while (v251 != 40);
            if (v252 <= 9)
              bzero(&v296.f32[v252], 40 - 4 * v252);
            v255 = 0;
            v256 = 0;
            v257 = 0;
            *(float *)v254.i32 = v249 * 0.5;
            *(float32x4_t *)buf = vmulq_n_f32(v296, v249 * 0.5);
            *(float32x4_t *)&buf[16] = vmulq_n_f32(v297, v249 * 0.5);
            *(float32x2_t *)v320.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(v254, 0), *(float32x2_t *)v298.f32);
            v306 = 0u;
            v307 = 0u;
            v308 = 0;
            do
            {
              if (v257 <= 9)
              {
                v256 = v257 + 1;
                v306.i32[v257++] = *(_DWORD *)&buf[v255];
              }
              v255 += 4;
            }
            while (v255 != 40);
            if (v256 <= 9)
              bzero(&v306.f32[v256], 40 - 4 * v256);
            v258 = 0;
            v259 = 0;
            v260 = 0;
            *(float32x4_t *)buf = vaddq_f32(v303, v306);
            *(float32x4_t *)&buf[16] = vaddq_f32(v304, v307);
            *(float32x2_t *)v320.f32 = vadd_f32(v305, v308);
            v309 = 0u;
            v310 = 0u;
            v311 = 0;
            do
            {
              if (v260 <= 9)
              {
                v259 = v260 + 1;
                v309.i32[v260++] = *(_DWORD *)&buf[v258];
              }
              v258 += 4;
            }
            while (v258 != 40);
            if (v259 <= 9)
              bzero(&v309.f32[v259], 40 - 4 * v259);
            v303 = v309;
            v304 = v310;
            v305 = v311;
          }
        }
        else if (v45 == 1)
        {
          v46 = **((_QWORD **)a2 + 5);
          if (!v46)
            goto LABEL_434;
          for (ii = 0; ii != 30; ++ii)
          {
            v48 = (float)((float)((float)ii * 0.10833) - (float)(floorf((float)((float)ii * 0.10833) / 6.2832) * 6.2832))
                + 0.0;
            if (v48 >= 6.2832)
              v48 = nextafterf(6.2832, 0.0);
            Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<10ul>((uint64_t)&v312, v46, 1.5708, v48);
            v49 = 0.0014666;
            if (ii)
            {
              v49 = 0.0014666;
              if (ii != 29)
              {
                v50 = cosf((float)((float)(ii - 1) * 0.10833) + 0.054165);
                v49 = v50 - cosf((float)((float)ii * 0.10833) + 0.054165);
              }
            }
            v51 = 0;
            v52 = 0;
            v53 = 0;
            *(float32x4_t *)buf = vmulq_f32(v312, v312);
            *(float32x4_t *)&buf[16] = vmulq_f32(v313, v313);
            *(float32x2_t *)v320.f32 = vmul_f32(*(float32x2_t *)v314.f32, *(float32x2_t *)v314.f32);
            v54.i32[1] = 0;
            v296 = 0u;
            v297 = 0u;
            v298.i64[0] = 0;
            do
            {
              if (v53 <= 9)
              {
                v52 = v53 + 1;
                v296.i32[v53++] = *(_DWORD *)&buf[v51];
              }
              v51 += 4;
            }
            while (v51 != 40);
            if (v52 <= 9)
              bzero(&v296.f32[v52], 40 - 4 * v52);
            v55 = 0;
            v56 = 0;
            v57 = 0;
            *(float *)v54.i32 = v49 * 0.5;
            *(float32x4_t *)buf = vmulq_n_f32(v296, v49 * 0.5);
            *(float32x4_t *)&buf[16] = vmulq_n_f32(v297, v49 * 0.5);
            *(float32x2_t *)v320.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(v54, 0), *(float32x2_t *)v298.f32);
            v306 = 0u;
            v307 = 0u;
            v308 = 0;
            do
            {
              if (v57 <= 9)
              {
                v56 = v57 + 1;
                v306.i32[v57++] = *(_DWORD *)&buf[v55];
              }
              v55 += 4;
            }
            while (v55 != 40);
            if (v56 <= 9)
              bzero(&v306.f32[v56], 40 - 4 * v56);
            v58 = 0;
            v59 = 0;
            v60 = 0;
            *(float32x4_t *)buf = vaddq_f32(v303, v306);
            *(float32x4_t *)&buf[16] = vaddq_f32(v304, v307);
            *(float32x2_t *)v320.f32 = vadd_f32(v305, v308);
            v309 = 0u;
            v310 = 0u;
            v311 = 0;
            do
            {
              if (v60 <= 9)
              {
                v59 = v60 + 1;
                v309.i32[v60++] = *(_DWORD *)&buf[v58];
              }
              v58 += 4;
            }
            while (v58 != 40);
            if (v59 <= 9)
              bzero(&v309.f32[v59], 40 - 4 * v59);
            v303 = v309;
            v304 = v310;
            v305 = v311;
          }
        }
      }
      else
      {
        __asm { FMOV            V0.4S, #1.0 }
        v303 = _Q0;
        v304 = _Q0;
        __asm { FMOV            V0.2S, #1.0 }
        v305 = *(float32x2_t *)_Q0.f32;
      }
      LODWORD(v261) = *((_DWORD *)v4 + 31);
      if (v261 >= 0xA)
        v261 = 10;
      else
        v261 = v261;
      if ((_DWORD)v261)
      {
        v262 = &v303;
        do
        {
          v263 = v262->f32[0];
          v262 = (float32x4_t *)((char *)v262 + 4);
          *(float *)v4 = *(float *)v4 * (float)(v263 * v263);
          v4 = (Phase::Logger *)((char *)v4 + 4);
          --v261;
        }
        while (v261);
      }
      return;
    default:
      if (a3 == 31)
      {
        v301 = 0u;
        memset(v302, 0, 28);
        v299 = 0u;
        v300 = 0u;
        v297 = 0u;
        v298 = 0u;
        v296 = 0u;
        if (a2)
        {
          v29 = *a2;
          if (*a2 == 3)
          {
            v264 = **((_QWORD **)a2 + 5);
            if (!v264)
              goto LABEL_434;
            v265 = 0;
            v266 = **(_QWORD **)(v264 + 32);
            v267 = *(_DWORD *)(v266 + 24);
            v268 = *(float *)(v266 + 28);
            v269 = *(_QWORD *)(v266 + 32);
            do
            {
              v270 = (float)((float)((float)v265 * 0.10833)
                           - (float)(floorf((float)((float)v265 * 0.10833) / 6.2832) * 6.2832))
                   + 0.0;
              if (v270 >= 6.2832)
                v270 = nextafterf(6.2832, 0.0);
              v271 = cosf(v270);
              v272 = acosf(v271);
              v273 = 0;
              v274 = *(_QWORD *)(v269 + 8 * (((int)llroundf((float)(v272 * 57.296) / v268) % v267 + v267) % v267));
              do
              {
                v275 = *(double *)(v274 + 8 * v273);
                *(float *)&buf[4 * v273++] = v275;
              }
              while (v273 != 31);
              v316 = v322;
              v317 = v323;
              v318[0] = v324[0];
              *(_OWORD *)((char *)v318 + 12) = *(_OWORD *)((char *)v324 + 12);
              v312 = *(float32x4_t *)buf;
              v313 = *(float32x4_t *)&buf[16];
              v314 = v320;
              v315 = v321;
              v276 = 0.0014666;
              if (v265)
              {
                v276 = 0.0014666;
                if (v265 != 29)
                {
                  v277 = cosf((float)((float)(v265 - 1) * 0.10833) + 0.054165);
                  v276 = v277 - cosf((float)((float)v265 * 0.10833) + 0.054165);
                }
              }
              v278 = v276 * 0.5;
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator*<float,31ul>(Phase::PackedSubbands<float,31ul> const&,Phase::PackedSubbands<float,31ul> const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(&v306, (uint64_t)&v312, (uint64_t)&v312);
              *(float *)&v279 = v278;
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator*<float,31ul>(Phase::PackedSubbands<float,31ul> const&,float const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(&v309, (uint64_t)&v306, v279);
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator+<float,31ul>(Phase::PackedSubbands<float,31ul> const&,Phase::PackedSubbands<float,31ul> const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(buf, (uint64_t)&v296, (uint64_t)&v309);
              v300 = v322;
              v301 = v323;
              v302[0] = v324[0];
              *(_OWORD *)((char *)v302 + 12) = *(_OWORD *)((char *)v324 + 12);
              v296 = *(float32x4_t *)buf;
              v297 = *(float32x4_t *)&buf[16];
              ++v265;
              v298 = v320;
              v299 = v321;
            }
            while (v265 != 30);
          }
          else if (v29 == 2)
          {
            v280 = **((_QWORD **)a2 + 5);
            if (!v280)
              goto LABEL_434;
            for (jj = 0; jj != 30; ++jj)
            {
              v282 = (float)((float)((float)jj * 0.10833)
                           - (float)(floorf((float)((float)jj * 0.10833) / 6.2832) * 6.2832))
                   + 0.0;
              if (v282 >= 6.2832)
                v282 = nextafterf(6.2832, 0.0);
              Phase::Geometry::ConeDirectivity::CalculateSubbandGains<31ul>((uint64_t)buf, v280, v282);
              v283 = 0.0014666;
              if (jj)
              {
                v283 = 0.0014666;
                if (jj != 29)
                {
                  v284 = cosf((float)((float)(jj - 1) * 0.10833) + 0.054165);
                  v283 = v284 - cosf((float)((float)jj * 0.10833) + 0.054165);
                }
              }
              v285 = v283 * 0.5;
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator*<float,31ul>(Phase::PackedSubbands<float,31ul> const&,Phase::PackedSubbands<float,31ul> const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(&v306, (uint64_t)buf, (uint64_t)buf);
              *(float *)&v286 = v285;
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator*<float,31ul>(Phase::PackedSubbands<float,31ul> const&,float const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(&v309, (uint64_t)&v306, v286);
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator+<float,31ul>(Phase::PackedSubbands<float,31ul> const&,Phase::PackedSubbands<float,31ul> const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(&v312, (uint64_t)&v296, (uint64_t)&v309);
              v300 = v316;
              v301 = v317;
              v302[0] = v318[0];
              *(_OWORD *)((char *)v302 + 12) = *(_OWORD *)((char *)v318 + 12);
              v296 = v312;
              v297 = v313;
              v298 = v314;
              v299 = v315;
            }
          }
          else if (v29 == 1)
          {
            v30 = **((_QWORD **)a2 + 5);
            if (!v30)
              goto LABEL_434;
            for (kk = 0; kk != 30; ++kk)
            {
              v32 = (float)((float)((float)kk * 0.10833)
                          - (float)(floorf((float)((float)kk * 0.10833) / 6.2832) * 6.2832))
                  + 0.0;
              if (v32 >= 6.2832)
                v32 = nextafterf(6.2832, 0.0);
              Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<31ul>((uint64_t)buf, v30, 1.5708, v32);
              v33 = 0.0014666;
              if (kk)
              {
                v33 = 0.0014666;
                if (kk != 29)
                {
                  v34 = cosf((float)((float)(kk - 1) * 0.10833) + 0.054165);
                  v33 = v34 - cosf((float)((float)kk * 0.10833) + 0.054165);
                }
              }
              v35 = v33 * 0.5;
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator*<float,31ul>(Phase::PackedSubbands<float,31ul> const&,Phase::PackedSubbands<float,31ul> const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(&v306, (uint64_t)buf, (uint64_t)buf);
              *(float *)&v36 = v35;
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator*<float,31ul>(Phase::PackedSubbands<float,31ul> const&,float const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(&v309, (uint64_t)&v306, v36);
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator+<float,31ul>(Phase::PackedSubbands<float,31ul> const&,Phase::PackedSubbands<float,31ul> const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(&v312, (uint64_t)&v296, (uint64_t)&v309);
              v300 = v316;
              v301 = v317;
              v302[0] = v318[0];
              *(_OWORD *)((char *)v302 + 12) = *(_OWORD *)((char *)v318 + 12);
              v296 = v312;
              v297 = v313;
              v298 = v314;
              v299 = v315;
            }
          }
        }
        else
        {
          __asm { FMOV            V0.4S, #1.0 }
          v296 = _Q0;
          v297 = _Q0;
          v298 = _Q0;
          v299 = _Q0;
          v300 = _Q0;
          v301 = _Q0;
          v302[0] = _Q0;
          __asm { FMOV            V0.2S, #1.0 }
          *(_QWORD *)&v302[1] = _Q0.i64[0];
          DWORD2(v302[1]) = 1065353216;
        }
        LODWORD(v287) = *((_DWORD *)v4 + 31);
        if (v287 >= 0x1F)
          v287 = 31;
        else
          v287 = v287;
        if ((_DWORD)v287)
        {
          v288 = &v296;
          do
          {
            v289 = v288->f32[0];
            v288 = (float32x4_t *)((char *)v288 + 4);
            *(float *)v4 = *(float *)v4 * (float)(v289 * v289);
            v4 = (Phase::Logger *)((char *)v4 + 4);
            --v287;
          }
          while (v287);
        }
      }
      else
      {
LABEL_47:
        v37 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 1184);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "RayTracingMath.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 373;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = a3;
          _os_log_impl(&dword_2164CC000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported subband count: %lu\n", buf, 0x1Cu);
        }
      }
      return;
  }
}

void Phase::SpatialModeler::getSoundPowerRelativeToOmni(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  int *v8;

  *(_OWORD *)((char *)a4 + 108) = 0u;
  a4[5] = 0u;
  a4[6] = 0u;
  a4[3] = 0u;
  a4[4] = 0u;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  *((_DWORD *)a4 + 31) = a3;
  if (a3)
    memset_pattern16(a4, &memset_pattern, 4 * a3);
  if (*(_DWORD *)(a1 + 16) > a2
    && *(_DWORD *)(*(_QWORD *)a1 + 24 * a2 + 20) == HIDWORD(a2))
  {
    v8 = *(int **)(*(_QWORD *)a1 + 24 * a2);
  }
  else
  {
    v8 = 0;
  }
  Phase::SpatialModeler::CalculateSoundPowerRelativeToOmni((Phase::Logger *)a4, v8, a3);
}

void Phase::SpatialModeler::applyScatteringFrequencyWeighting(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  float MeanScatteringCoefficient;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;

  v5 = a1[5];
  *(_OWORD *)(a3 + 64) = a1[4];
  *(_OWORD *)(a3 + 80) = v5;
  v6 = a1[7];
  *(_OWORD *)(a3 + 96) = a1[6];
  *(_OWORD *)(a3 + 112) = v6;
  v7 = a1[1];
  *(_OWORD *)a3 = *a1;
  *(_OWORD *)(a3 + 16) = v7;
  v8 = a1[3];
  *(_OWORD *)(a3 + 32) = a1[2];
  *(_OWORD *)(a3 + 48) = v8;
  MeanScatteringCoefficient = Phase::SpatialModeler::getMeanScatteringCoefficient((float *)a2);
  if (MeanScatteringCoefficient > 0.0)
  {
    v10 = *(_DWORD *)(a2 + 124);
    v11 = *(_DWORD *)(a3 + 124);
    if (v10 < v11)
      v11 = *(_DWORD *)(a2 + 124);
    if (v11)
    {
      v12 = 0;
      do
      {
        *(float *)(a3 + 4 * v12) = *(float *)(a3 + 4 * v12)
                                 * (float)(*(float *)(a2 + 4 * v12) / MeanScatteringCoefficient);
        ++v12;
        LODWORD(v13) = *(_DWORD *)(a3 + 124);
        if (v10 >= v13)
          v13 = v13;
        else
          v13 = v10;
      }
      while (v12 < v13);
    }
  }
}

float Phase::SpatialModeler::getMeanScatteringCoefficient(float *a1)
{
  unsigned int v1;
  float v2;
  uint64_t v3;
  float v4;
  NSObject *v5;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v1 = *((_DWORD *)a1 + 31);
  if (v1)
  {
    v2 = 0.0;
    v3 = *((unsigned int *)a1 + 31);
    do
    {
      v4 = *a1++;
      v2 = v2 + v4;
      --v3;
    }
    while (v3);
    if (v1 > 1)
      return v2 / (float)v1;
  }
  else
  {
    v5 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 1184);
    v2 = 0.0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 136315394;
      v8 = "RayTracingMath.cpp";
      v9 = 1024;
      v10 = 461;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d 0 scattering coefficients detected!", (uint8_t *)&v7, 0x12u);
    }
  }
  return v2;
}

float Phase::SpatialModeler::getMeanAbsorptionCoefficient(float *a1)
{
  unsigned int v1;
  float v2;
  uint64_t v3;
  float v4;
  NSObject *v5;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v1 = *((_DWORD *)a1 + 31);
  if (v1)
  {
    v2 = 0.0;
    v3 = *((unsigned int *)a1 + 31);
    do
    {
      v4 = *a1++;
      v2 = v2 + v4;
      --v3;
    }
    while (v3);
    if (v1 > 1)
      return v2 / (float)v1;
  }
  else
  {
    v5 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 1184);
    v2 = 0.0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 136315394;
      v8 = "RayTracingMath.cpp";
      v9 = 1024;
      v10 = 436;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d 0 absorption coefficients detected!", (uint8_t *)&v7, 0x12u);
    }
  }
  return v2;
}

void Phase::SpatialModeler::GetFullSceneAABB(Phase::SpatialModeler *this@<X0>, uint64_t a2@<X8>)
{
  float32x2_t **v5;
  unsigned int v6;
  float32x2_t **v7;
  float32x2_t *v8;
  float32x2_t **v9;
  unint64_t v10;
  float v11;
  float v12;
  float v13;
  float32x2_t v14;
  float v15;
  float32x2_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  float v23;
  float v24;
  float32x2_t v25;
  float v26;
  float v27;
  float v28;
  float32x2_t **v29;
  float32x2_t **v30;
  float v31[3];
  float32x2_t v32;
  float v33;

  *(_OWORD *)a2 = xmmword_2166F8300;
  *(_QWORD *)(a2 + 16) = 0x80000000800000;
  v5 = (float32x2_t **)*((_QWORD *)this + 15);
  v6 = *((_DWORD *)this + 34);
  v7 = &v5[3 * v6];
  if (v6)
  {
    v8 = *v5;
    if (!*v5)
    {
      v9 = v5 + 3;
      while (1)
      {
        v5 = v9;
        if (v9 >= v7)
          break;
        v9 += 3;
        v8 = *v5;
        if (*v5)
          goto LABEL_9;
      }
      v8 = 0;
    }
LABEL_9:
    v10 = (unint64_t)v7;
  }
  else
  {
    v8 = 0;
    v10 = *((_QWORD *)this + 15);
  }
  if (v5 != v7)
  {
    v11 = 3.4028e38;
    v12 = -3.4028e38;
    v13 = -3.4028e38;
    v14.i32[0] = -8388609;
    v15 = 3.4028e38;
    v16.i32[0] = 2139095039;
    v30 = v7;
    do
    {
      if (v8 && v8->i32[0] == 4)
      {
        v18 = (_QWORD *)v8[15];
        v17 = (_QWORD *)v8[16];
        if (v17 == v18)
        {
          v26 = v8[8].f32[0];
          v27 = v8[8].f32[1];
          v16.f32[0] = fminf(v16.f32[0], v26);
          v15 = fminf(v15, v27);
          v28 = v8[9].f32[0];
          v11 = fminf(v11, v28);
          v14.f32[0] = fmaxf(v14.f32[0], v26);
          v13 = fmaxf(v13, v27);
          v12 = fmaxf(v12, v28);
          *(_DWORD *)a2 = v16.i32[0];
          *(float *)(a2 + 4) = v15;
          *(float *)(a2 + 8) = v11;
          *(_DWORD *)(a2 + 12) = v14.i32[0];
          *(float *)(a2 + 16) = v13;
          *(float *)(a2 + 20) = v12;
        }
        else
        {
          do
          {
            if (*((_DWORD *)this + 28) > *v18)
            {
              v19 = *((_QWORD *)this + 12);
              if (*(_DWORD *)(v19 + 24 * *v18 + 20) == HIDWORD(*v18))
              {
                v20 = *(_QWORD *)(v19 + 24 * *v18);
                if (v20)
                {
                  v21 = 0;
                  v22 = (uint64_t *)(v20 + 24);
                  do
                  {
                    Phase::GetVertex<float>(v22, v21, (uint64_t)v31);
                    Phase::operator*<float>((float *)&v8[6], v31, (float *)&v32);
                    v23 = v8[9].f32[1];
                    v24 = (float)(v23 * v33) + v8[9].f32[0];
                    v25 = vadd_f32(vmul_n_f32(v32, v23), v8[8]);
                    v16 = vminnm_f32(*(float32x2_t *)a2, v25);
                    v11 = fminf(*(float *)(a2 + 8), v24);
                    v12 = fmaxf(*(float *)(a2 + 20), v24);
                    *(float32x2_t *)a2 = v16;
                    *(float *)(a2 + 8) = v11;
                    v14 = vmaxnm_f32(*(float32x2_t *)(a2 + 12), v25);
                    *(float32x2_t *)(a2 + 12) = v14;
                    *(float *)(a2 + 20) = v12;
                    ++v21;
                  }
                  while (v21 != 8);
                  v13 = v14.f32[1];
                  v15 = v16.f32[1];
                  v7 = v30;
                }
              }
            }
            ++v18;
          }
          while (v18 != v17);
        }
      }
      if ((unint64_t)v5 < v10)
      {
        v29 = v5 + 3;
        while (1)
        {
          v5 = v29;
          if ((unint64_t)v29 >= v10)
            break;
          v29 += 3;
          v8 = *v5;
          if (*v5)
            goto LABEL_30;
        }
        v8 = 0;
      }
LABEL_30:
      ;
    }
    while (v5 != v7);
  }
}

uint64_t *Phase::GetVertex<float>@<X0>(uint64_t *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  switch(a2)
  {
    case 1:
      v3 = *((_DWORD *)result + 5);
      v4 = *result;
      goto LABEL_11;
    case 2:
      v5 = *(_DWORD *)result;
      v6 = *((_DWORD *)result + 4);
      v7 = *((_DWORD *)result + 2);
      goto LABEL_9;
    case 3:
      *(_DWORD *)a3 = *(_DWORD *)result;
      v8 = result[2];
      goto LABEL_7;
    case 4:
      *(_DWORD *)a3 = *((_DWORD *)result + 3);
      v8 = *(uint64_t *)((char *)result + 4);
LABEL_7:
      *(_QWORD *)(a3 + 4) = v8;
      return result;
    case 5:
      v5 = *((_DWORD *)result + 3);
      v6 = *((_DWORD *)result + 1);
      v7 = *((_DWORD *)result + 5);
LABEL_9:
      *(_DWORD *)a3 = v5;
      *(_DWORD *)(a3 + 4) = v6;
      *(_DWORD *)(a3 + 8) = v7;
      return result;
    case 6:
      v3 = *((_DWORD *)result + 2);
      v4 = *(uint64_t *)((char *)result + 12);
LABEL_11:
      *(_QWORD *)a3 = v4;
      goto LABEL_13;
    case 7:
      *(_QWORD *)a3 = *(uint64_t *)((char *)result + 12);
      v3 = *((_DWORD *)result + 5);
      goto LABEL_13;
    default:
      *(_QWORD *)a3 = *result;
      v3 = *((_DWORD *)result + 2);
LABEL_13:
      *(_DWORD *)(a3 + 8) = v3;
      return result;
  }
}

void Phase::SpatialModeler::GetHitShapesAABB(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float32x2_t **v5;
  unsigned int v6;
  float32x2_t **v7;
  float32x2_t *v8;
  float32x2_t **v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *i;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  uint64_t *v22;
  float v23;
  float v24;
  float32x2_t v25;
  float v26;
  float v27;
  float32x2_t **v28;
  float32x2_t **v29;
  float32x2_t **v30;
  _QWORD *v31;
  float v32[3];
  float32x2_t v33;
  float v34;

  *(_OWORD *)a3 = xmmword_2166F8300;
  *(_QWORD *)(a3 + 16) = 0x80000000800000;
  v5 = *(float32x2_t ***)(a1 + 120);
  v6 = *(_DWORD *)(a1 + 136);
  v7 = &v5[3 * v6];
  if (v6)
  {
    v8 = *v5;
    if (!*v5)
    {
      v9 = v5 + 3;
      while (1)
      {
        v5 = v9;
        if (v9 >= v7)
          break;
        v9 += 3;
        v8 = *v5;
        if (*v5)
          goto LABEL_9;
      }
      v8 = 0;
    }
LABEL_9:
    v10 = (unint64_t)v7;
  }
  else
  {
    v8 = 0;
    v10 = *(_QWORD *)(a1 + 120);
  }
  if (v5 != v7)
  {
    v30 = v7;
    v31 = (_QWORD *)(a2 + 8);
    do
    {
      if (v8)
      {
        if (v8->i32[0] == 4)
        {
          v11 = (_QWORD *)v8[15];
          for (i = (_QWORD *)v8[16]; v11 != i; ++v11)
          {
            if (*(_DWORD *)(a1 + 112) > *v11)
            {
              v13 = *(_QWORD *)(a1 + 96);
              if (*(_DWORD *)(v13 + 24 * *v11 + 20) == HIDWORD(*v11))
              {
                v14 = *(_QWORD *)(v13 + 24 * *v11);
                if (v14)
                {
                  v15 = (_QWORD *)*v31;
                  if (*v31)
                  {
                    v16 = *(_QWORD *)(v14 + 8);
                    v17 = v31;
                    do
                    {
                      v18 = v15[4];
                      v19 = v18 >= v16;
                      if (v18 >= v16)
                        v20 = v15;
                      else
                        v20 = v15 + 1;
                      if (v19)
                        v17 = v15;
                      v15 = (_QWORD *)*v20;
                    }
                    while (*v20);
                    if (v17 != v31 && v16 >= v17[4])
                    {
                      v21 = 0;
                      v22 = (uint64_t *)(v14 + 24);
                      do
                      {
                        Phase::GetVertex<float>(v22, v21, (uint64_t)v32);
                        Phase::operator*<float>((float *)&v8[6], v32, (float *)&v33);
                        v23 = v8[9].f32[1];
                        v24 = (float)(v23 * v34) + v8[9].f32[0];
                        v25 = vadd_f32(vmul_n_f32(v33, v23), v8[8]);
                        v26 = fminf(*(float *)(a3 + 8), v24);
                        v27 = fmaxf(*(float *)(a3 + 20), v24);
                        *(float32x2_t *)a3 = vminnm_f32(*(float32x2_t *)a3, v25);
                        *(float *)(a3 + 8) = v26;
                        *(float32x2_t *)(a3 + 12) = vmaxnm_f32(*(float32x2_t *)(a3 + 12), v25);
                        *(float *)(a3 + 20) = v27;
                        ++v21;
                      }
                      while (v21 != 8);
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((unint64_t)v5 >= v10)
      {
        v29 = v30;
      }
      else
      {
        v28 = v5 + 3;
        v29 = v30;
        while (1)
        {
          v5 = v28;
          if ((unint64_t)v28 >= v10)
            break;
          v28 += 3;
          v8 = *v5;
          if (*v5)
            goto LABEL_39;
        }
        v8 = 0;
      }
LABEL_39:
      ;
    }
    while (v5 != v29);
  }
}

void Phase::SpatialModeler::countSurfaceArea(uint64_t a1, _QWORD *a2, Phase::SpatialModeler::RayTracerState *a3, uint64_t *a4, float *a5, float *a6, float a7, float a8)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t SubbandIndex;
  float *v22;
  float *v23;
  float *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  float v47;
  float v48;
  float *v49;
  float *v50;
  BOOL v51;
  unsigned int v53;
  float *v54;
  uint64_t v56;
  uint64_t v57;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  __int128 __b;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[32];

  *a5 = 0.0;
  v67 = 0u;
  memset(v68, 0, 28);
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  __b = 0u;
  *(_DWORD *)&v68[28] = (_DWORD)a3;
  if (a3)
  {
    bzero(&__b, 4 * (_QWORD)a3);
    v13 = v67;
    *((_OWORD *)a6 + 4) = v66;
    *((_OWORD *)a6 + 5) = v13;
    v14 = *(_OWORD *)&v68[16];
    *((_OWORD *)a6 + 6) = *(_OWORD *)v68;
    *((_OWORD *)a6 + 7) = v14;
    v15 = v63;
    *(_OWORD *)a6 = __b;
    *((_OWORD *)a6 + 1) = v15;
    v16 = v65;
    *((_OWORD *)a6 + 2) = v64;
    *((_OWORD *)a6 + 3) = v16;
    v67 = 0u;
    memset(v68, 0, 28);
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    __b = 0u;
    memset_pattern16(&__b, &unk_21673A800, 4 * (_QWORD)a3);
  }
  else
  {
    v17 = v67;
    *((_OWORD *)a6 + 4) = v66;
    *((_OWORD *)a6 + 5) = v17;
    v18 = *(_OWORD *)&v68[16];
    *((_OWORD *)a6 + 6) = *(_OWORD *)v68;
    *((_OWORD *)a6 + 7) = v18;
    v19 = v63;
    *(_OWORD *)a6 = __b;
    *((_OWORD *)a6 + 1) = v19;
    v20 = v65;
    *((_OWORD *)a6 + 2) = v64;
    *((_OWORD *)a6 + 3) = v20;
    v67 = 0uLL;
    memset(v68, 0, 28);
    v65 = 0uLL;
    v66 = 0uLL;
    v63 = 0uLL;
    v64 = 0uLL;
    __b = 0uLL;
  }
  SubbandIndex = Phase::SpatialModeler::RayTracerState::GetSubbandIndex(a3);
  v24 = (float *)*a2;
  v22 = (float *)(a2 + 1);
  v23 = v24;
  if (v24 != v22)
  {
    v25 = *(_DWORD *)(a1 + 112);
    v56 = 40 * SubbandIndex;
    v54 = v22;
    v53 = v25;
    do
    {
      v26 = *((_QWORD *)v23 + 4);
      if (v25 > v26)
      {
        v27 = *(_QWORD *)(a1 + 96);
        if (*(_DWORD *)(v27 + 24 * v26 + 20) == HIDWORD(v26))
        {
          v28 = *(_QWORD *)(v27 + 24 * *((_QWORD *)v23 + 4));
          if (v28)
          {
            v29 = (float)(fminf(fmaxf(v23[10], 0.1), 0.5) + -0.1) / 0.4;
            v30 = *(_QWORD *)(v28 + 72);
            v57 = v28;
            v31 = *(_QWORD *)(v28 + 80) - v30;
            if (v31)
            {
              v32 = 0;
              v33 = v31 >> 2;
              v34 = *(_QWORD *)(**(_QWORD **)(v28 + 144) + 16 * *(_QWORD *)(v28 + 152));
              v60 = *(_QWORD *)(v34 + 32);
              v61 = *(_QWORD *)(v34 + 8);
              v59 = *(_DWORD *)(a1 + 88);
              v35 = *a4;
              v36 = (a4[1] - *a4) >> 2;
              if (v33 <= 1)
                v37 = 1;
              else
                v37 = v33;
              do
              {
                v38 = *(_QWORD *)(v61 + v32 * v60);
                if (v59 > v38)
                {
                  v39 = *(_QWORD *)(a1 + 72);
                  if (*(_DWORD *)(v39 + 24 * v38 + 20) == HIDWORD(v38))
                  {
                    v40 = *(_QWORD *)(v39 + 24 * *(_QWORD *)(v61 + v32 * v60));
                    if (v40)
                    {
                      if (*(_DWORD *)v40 == 1)
                      {
                        v41 = *(_OWORD **)(*(_QWORD *)(v40 + 40) + v56);
                        if (v41)
                        {
                          v42 = v41[31];
                          v66 = v41[30];
                          v67 = v42;
                          v43 = v41[33];
                          *(_OWORD *)v68 = v41[32];
                          *(_OWORD *)&v68[16] = v43;
                          v44 = v41[27];
                          __b = v41[26];
                          v63 = v44;
                          v45 = v41[29];
                          v64 = v41[28];
                          v65 = v45;
                        }
                      }
                    }
                  }
                }
                if (a3)
                {
                  v46 = 0;
                  do
                  {
                    v47 = *((float *)&__b + v46);
                    if (v46 < v36)
                      v47 = v47 * *(float *)(v35 + 4 * v46);
                    v48 = *(float *)(v30 + 4 * v32);
                    a6[v46] = a6[v46]
                            + (float)((float)-(float)(v48 * v29)
                                    * logf((float)(1.0 - fminf(fmaxf(v47, a7), a8)) + 0.00000011921));
                    ++v46;
                  }
                  while (a3 != (Phase::SpatialModeler::RayTracerState *)v46);
                }
                ++v32;
              }
              while (v32 != v37);
            }
            v22 = v54;
            *a5 = *a5 + (float)(*(float *)(v57 + 64) * v29);
            v25 = v53;
          }
        }
      }
      v49 = (float *)*((_QWORD *)v23 + 1);
      if (v49)
      {
        do
        {
          v50 = v49;
          v49 = *(float **)v49;
        }
        while (v49);
      }
      else
      {
        do
        {
          v50 = (float *)*((_QWORD *)v23 + 2);
          v51 = *(_QWORD *)v50 == (_QWORD)v23;
          v23 = v50;
        }
        while (!v51);
      }
      v23 = v50;
    }
    while (v50 != v22);
  }
}

uint64_t Phase::SpatialModeler::calculateAbsorptionCorrectionToMatchReverbTime(_BOOL8 a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6, float a7, float a8, float a9)
{
  unint64_t v10;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  NSObject *v26;
  double v27;
  NSObject *v28;
  const char *v29;
  NSObject *v30;
  double v31;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  double v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v10 = *(unsigned int *)(a1 + 124);
  if (!(_DWORD)v10 || *(_DWORD *)(a2 + 124) != (_DWORD)v10)
    return 0;
  v14 = a1;
  v15 = *(float **)a4;
  if (v10 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2)
  {
    std::vector<float>::resize(a4, v10);
    v15 = *(float **)a4;
    v16 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
    if (v16 >= 1)
      memset_pattern16(*(void **)a4, &memset_pattern, 4 * (((unint64_t)v16 >> 2) - ((unint64_t)v16 > 3)) + 4);
  }
  if (*(_DWORD *)(a2 + 124))
  {
    v17 = 0;
    v18 = a5 * 55.262;
    v19 = a6 * a7;
    while (1)
    {
      v20 = *(float *)(a2 + 4 * v17);
      if (v20 <= 0.0)
        break;
      v21 = *(float *)(a3 + 4 * v17) * 4.0;
      if ((float)(0.163 / v21) <= 12.0)
        v22 = (float)(0.163 / v21) * 0.95;
      else
        v22 = 11.4;
      v23 = (float)(v21 * a5) / a6;
      v24 = 1.0 - expf(v23 - (float)(v18 / (float)(v19 * fminf(fmaxf(v20, 0.05), v22))));
      v25 = v15[v17]
          * (float)(a8
                  + (float)(a9
                          * (float)(v24
                                  / (float)(1.0 - expf(v23 - (float)(v18 / (float)(v19 * *(float *)(v14 + 4 * v17))))))));
      v15[v17] = v25;
      if ((LODWORD(v25) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      {
        v30 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 1184);
        a1 = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
        if (a1)
        {
          v31 = *(float *)(*(_QWORD *)a4 + 4 * v17);
          *(_DWORD *)buf = 136315650;
          v38 = "RayTracingMath.cpp";
          v39 = 1024;
          v40 = 831;
          v41 = 2048;
          v42 = v31;
          v28 = v30;
          v29 = "%25s:%-5d Error while calculating material correction factor (%f).";
LABEL_18:
          _os_log_impl(&dword_2164CC000, v28, OS_LOG_TYPE_ERROR, v29, buf, 0x1Cu);
        }
        goto LABEL_19;
      }
      v15[v17] = fminf(fmaxf(v25, 0.001), 1000.0);
LABEL_20:
      if (++v17 >= (unint64_t)*(unsigned int *)(a2 + 124))
        return 1;
    }
    v26 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 1184);
    a1 = os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
    if (a1)
    {
      v27 = *(float *)(a2 + 4 * v17);
      *(_DWORD *)buf = 136315650;
      v38 = "RayTracingMath.cpp";
      v39 = 1024;
      v40 = 781;
      v41 = 2048;
      v42 = v27;
      v28 = v26;
      v29 = "%25s:%-5d Zero or negative target RT60 requested (%f).";
      goto LABEL_18;
    }
LABEL_19:
    v15 = *(float **)a4;
    *(_DWORD *)(*(_QWORD *)a4 + 4 * v17) = 1065353216;
    goto LABEL_20;
  }
  return 1;
}

float *Phase::SpatialModeler::FilterTargetRoomAcousticParameters(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  float TimeSinceLastProcess;
  float *result;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  NSObject *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  _OWORD v47[8];
  _OWORD buf[8];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  memset(v46, 0, sizeof(v46));
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  memset(v39, 0, sizeof(v39));
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  switch(a2)
  {
    case 31:
      v9 = *(_OWORD *)(a1 + 252);
      v40 = *(_OWORD *)(a1 + 236);
      v41 = v9;
      v10 = *(_OWORD *)(a1 + 316);
      v44 = *(_OWORD *)(a1 + 300);
      v45 = v10;
      v46[0] = *(_OWORD *)(a1 + 332);
      *(_OWORD *)((char *)v46 + 12) = *(_OWORD *)(a1 + 344);
      v11 = *(_OWORD *)(a1 + 284);
      v42 = *(_OWORD *)(a1 + 268);
      v43 = v11;
      v12 = *(_OWORD *)(a1 + 608);
      v13 = *(_OWORD *)(a1 + 624);
      v14 = *(_OWORD *)(a1 + 656);
      v35 = *(_OWORD *)(a1 + 640);
      v36 = v14;
      v33 = v12;
      v34 = v13;
      v15 = *(_OWORD *)(a1 + 672);
      v16 = *(_OWORD *)(a1 + 688);
      v17 = *(_OWORD *)(a1 + 704);
      *(_OWORD *)((char *)v39 + 12) = *(_OWORD *)(a1 + 716);
      v38 = v16;
      v39[0] = v17;
      v37 = v15;
      HIDWORD(v46[1]) = 31;
      HIDWORD(v39[1]) = 31;
      goto LABEL_8;
    case 10:
      v18 = *(_OWORD *)(a1 + 92);
      buf[0] = *(_OWORD *)(a1 + 76);
      buf[1] = v18;
      *(_QWORD *)&buf[2] = *(_QWORD *)(a1 + 108);
      v19 = *(_OWORD *)(a1 + 212);
      v47[0] = *(_OWORD *)(a1 + 196);
      v47[1] = v19;
      *(_QWORD *)&v47[2] = *(_QWORD *)(a1 + 228);
      memset((char *)&buf[2] + 8, 0, 84);
      *(_OWORD *)((char *)v46 + 12) = *(_OWORD *)((char *)&buf[6] + 12);
      v45 = buf[5];
      v46[0] = buf[6];
      v43 = buf[3];
      v44 = buf[4];
      v41 = buf[1];
      v42 = buf[2];
      v40 = buf[0];
      v8 = 10;
      HIDWORD(v46[1]) = 10;
      memset((char *)&v47[2] + 8, 0, 84);
      goto LABEL_7;
    case 3:
      *(_QWORD *)&buf[0] = *(_QWORD *)(a1 + 28);
      DWORD2(buf[0]) = *(_DWORD *)(a1 + 36);
      *(_QWORD *)&v47[0] = *(_QWORD *)(a1 + 64);
      DWORD2(v47[0]) = *(_DWORD *)(a1 + 72);
      *(_OWORD *)((char *)buf + 12) = 0uLL;
      *(_OWORD *)((char *)&buf[1] + 12) = 0uLL;
      *(_OWORD *)((char *)&buf[2] + 12) = 0uLL;
      *(_OWORD *)((char *)&buf[3] + 12) = 0uLL;
      *(_OWORD *)((char *)&buf[5] + 12) = 0uLL;
      *(_OWORD *)((char *)&buf[4] + 12) = 0uLL;
      *(_OWORD *)((char *)&buf[6] + 12) = 0uLL;
      v42 = buf[2];
      v43 = buf[3];
      v40 = buf[0];
      v41 = buf[1];
      *(_OWORD *)((char *)v46 + 12) = 0uLL;
      v45 = buf[5];
      v46[0] = buf[6];
      v44 = buf[4];
      v8 = 3;
      HIDWORD(v46[1]) = 3;
      *(_OWORD *)((char *)&v47[6] + 12) = 0uLL;
      *(_OWORD *)((char *)&v47[5] + 12) = 0uLL;
      *(_OWORD *)((char *)&v47[4] + 12) = 0uLL;
      *(_OWORD *)((char *)&v47[3] + 12) = 0uLL;
      *(_OWORD *)((char *)&v47[2] + 12) = 0uLL;
      *(_OWORD *)((char *)&v47[1] + 12) = 0uLL;
      *(_OWORD *)((char *)v47 + 12) = 0uLL;
LABEL_7:
      v35 = v47[2];
      v36 = v47[3];
      v33 = v47[0];
      v34 = v47[1];
      *(_OWORD *)((char *)v39 + 12) = *(_OWORD *)((char *)&v47[6] + 12);
      v38 = v47[5];
      v39[0] = v47[6];
      v37 = v47[4];
      HIDWORD(v39[1]) = v8;
      goto LABEL_8;
  }
  v32 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 1184);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf[0]) = 136315650;
    *(_QWORD *)((char *)buf + 4) = "RayTracingMath.cpp";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 876;
    WORD1(buf[1]) = 2048;
    *(_QWORD *)((char *)&buf[1] + 4) = a2;
    _os_log_impl(&dword_2164CC000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported sub-band count: %zu\n", (uint8_t *)buf, 0x1Cu);
  }
LABEL_8:
  Phase::SpatialModeler::TRAP::RT60Processor::Process(&v40, (uint64_t)&v33, a1, a3);
  if (*(_BYTE *)(a3 + 194))
    TimeSinceLastProcess = 1.0 / a4;
  else
    TimeSinceLastProcess = Phase::SpatialModeler::TRAP::Sentinel::GetTimeSinceLastProcess(a3 + 21448);
  result = Phase::SpatialModeler::TRAP::Sentinel::Process(a1, a3, TimeSinceLastProcess);
  v22 = v45;
  *(_OWORD *)(a3 + 21664) = v44;
  *(_OWORD *)(a3 + 21680) = v22;
  v23 = v46[1];
  *(_OWORD *)(a3 + 21696) = v46[0];
  *(_OWORD *)(a3 + 21712) = v23;
  v24 = v41;
  *(_OWORD *)(a3 + 21600) = v40;
  *(_OWORD *)(a3 + 21616) = v24;
  v25 = v43;
  *(_OWORD *)(a3 + 21632) = v42;
  *(_OWORD *)(a3 + 21648) = v25;
  v26 = v33;
  v27 = v34;
  v28 = v35;
  *(_OWORD *)(a3 + 21776) = v36;
  *(_OWORD *)(a3 + 21760) = v28;
  *(_OWORD *)(a3 + 21744) = v27;
  *(_OWORD *)(a3 + 21728) = v26;
  v29 = v37;
  v30 = v38;
  v31 = v39[0];
  *(_OWORD *)(a3 + 21840) = v39[1];
  *(_OWORD *)(a3 + 21824) = v31;
  *(_OWORD *)(a3 + 21808) = v30;
  *(_OWORD *)(a3 + 21792) = v29;
  return result;
}

BOOL Phase::SpatialModeler::IsHistogramEnergyLowerThanTheoreticalPrediction(Phase::SpatialModeler::EnergyHistogram *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, uint64x2_t a10)
{
  float v10;
  float TotalEnergyDivBands;
  unsigned int v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;

  v10 = *(float *)&a3;
  TotalEnergyDivBands = Phase::SpatialModeler::EnergyHistogram::getTotalEnergyDivBands(a1, a3, a4, a5, a6, a7, a8, a9, a10);
  v13 = *(_DWORD *)(a2 + 124);
  if (v13)
  {
    v14 = 0.0;
    v15 = *(unsigned int *)(a2 + 124);
    do
    {
      v16 = *(float *)a2;
      a2 += 4;
      v14 = v14 + v16;
      --v15;
    }
    while (v15);
    if (v13 >= 2)
      v17 = v14 / (float)v13;
    else
      v17 = v14;
  }
  else
  {
    v17 = 0.0;
  }
  return TotalEnergyDivBands <= (float)(expf((float)((float)(fabsf(v10) * -10.0) / 10.0) * 0.23026) * v17);
}

float Phase::SpatialModeler::GetMaximumEnergy(Phase::SpatialModeler *this, const Phase::SpatialModeler::RayTracerState *a2, const Handle64 *a3)
{
  uint64_t v3;
  unint64_t v5;
  float v6;
  __n128 v7;
  int32x4_t v8;
  int32x2_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64x2_t v12;
  __int32 *v13;
  int64x2_t v14;
  int64x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int32x2_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int64x2_t v27;
  _BYTE v28[8];
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t v32;

  v3 = *((_QWORD *)this + 2366);
  if (*((_QWORD *)this + 2367) == v3)
    return 0.0;
  v5 = 0;
  v6 = 0.0;
  v27 = vdupq_n_s64(4uLL);
  do
  {
    v32 = *(_QWORD *)(v3 + 56 * v5);
    v7.n128_f32[0] = Phase::SpatialModeler::RayTracerState::GetSourceListenerResult(this, &v32, (uint64_t)v28);
    if (v30 && !*(_BYTE *)(v30 + 36))
    {
      v10 = (*(_DWORD *)(v30 + 28) * *(_DWORD *)(v30 + 24));
      if ((_DWORD)v10)
      {
        v11 = (v10 + 3) & 0x1FFFFFFFCLL;
        v12 = (uint64x2_t)vdupq_n_s64(v10 - 1);
        v13 = (__int32 *)(*(_QWORD *)(v30 + 8) + 8);
        v14 = (int64x2_t)xmmword_2166F7AE0;
        v15 = (int64x2_t)xmmword_2166F7AD0;
        v16 = (float32x4_t)xmmword_2166F7AF0;
        do
        {
          v17 = v16;
          v18 = (int32x4_t)vcgeq_u64(v12, (uint64x2_t)v14);
          *(int32x2_t *)v8.i8 = vmovn_s64((int64x2_t)v18);
          *(int16x4_t *)v16.f32 = vmovn_s32(v8);
          if ((v16.i8[0] & 1) != 0)
            v16.i32[0] = *(v13 - 2);
          if ((vmovn_s32(v8).i8[2] & 1) != 0)
            v16.i32[1] = *(v13 - 1);
          v8 = (int32x4_t)vcgeq_u64(v12, (uint64x2_t)v15);
          v19 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v9, (int64x2_t)v8));
          if ((v19.i8[4] & 1) != 0)
            v16.i32[2] = *v13;
          v9 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v19, (int64x2_t)v8));
          if ((v9.i8[6] & 1) != 0)
            v16.i32[3] = v13[1];
          v16 = vaddq_f32(v17, v16);
          v15 = vaddq_s64(v15, v27);
          v14 = vaddq_s64(v14, v27);
          v13 += 4;
          v11 -= 4;
        }
        while (v11);
        v7 = (__n128)vbslq_s8((int8x16_t)vuzp1q_s32(v18, v8), (int8x16_t)v16, (int8x16_t)v17);
        v7.n128_f32[0] = (float)(vaddv_f32((float32x2_t)v7.n128_u64[0]) + v7.n128_f32[2]) + v7.n128_f32[3];
      }
      else
      {
        v7.n128_u32[0] = 0;
      }
      if (v7.n128_f32[0] >= v6)
        v6 = v7.n128_f32[0];
    }
    v20 = v31;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v20->__on_zero_shared)(v20, v7);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v29;
    if (v29)
    {
      v24 = (unint64_t *)&v29->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v23->__on_zero_shared)(v23, v7);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    ++v5;
    v3 = *((_QWORD *)this + 2366);
  }
  while (v5 < 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 2367) - v3) >> 3));
  return v6;
}

uint64_t Phase::SpatialModeler::GetListenerOutsideEstimate(Phase::SpatialModeler *this, const Phase::SpatialModeler::RayTracerState *a2, const Phase::SpatialModeler::RayTracerState *a3)
{
  float *v5;
  unsigned int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  int v9;
  unsigned int v10;
  float v12;
  _BOOL4 v13;

  v5 = (float *)((char *)this + 19016);
  v6 = *((_DWORD *)this + 4826);
  if (v6)
    v7 = (float)((float)*((unsigned int *)this + 4833) / (float)v6) > 0.85;
  else
    v7 = 0;
  v8 = Phase::Contains<float>((float *)this + 5244, (float *)this + 5698);
  v9 = *((_DWORD *)this + 16);
  v10 = *(_DWORD *)v5 - v9;
  if (*(_DWORD *)v5 != v9)
    v10 = (float)(v5[73] / (float)v10) > 0.75;
  if (((v7 | v10) & 1) != 0)
    return 1;
  v12 = *((float *)this + 4876);
  v13 = v12 > 0.0;
  if ((float)(v12 / *((float *)a2 + 4876)) >= 0.15)
    v13 = 0;
  if (*((_DWORD *)this + 5258) >= 4u)
    v13 = 0;
  return !v8 | v13;
}

BOOL Phase::Contains<float>(float *a1, float *a2)
{
  float v3;
  float v5;

  if (*a1 > *a2 || *a2 > a1[3])
    return 0;
  v3 = a2[1];
  if (a1[1] > v3 || v3 > a1[4])
    return 0;
  v5 = a2[2];
  return a1[2] <= v5 && v5 <= a1[5];
}

void Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<4ul>(uint64_t a1, float a2, float a3)
{
  unsigned int v9;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  __int128 v16;

  __asm { FMOV            V1.4S, #1.0 }
  v16 = _Q1;
  if (*(_DWORD *)(a1 + 140) >= 4u)
    v9 = 4;
  else
    v9 = *(_DWORD *)(a1 + 140);
  if (v9)
  {
    v11 = sinf(a2);
    v12 = 0;
    v13 = v11 * cosf(a3);
    v14 = 4 * v9;
    do
    {
      v15 = (float)(1.0 - *(float *)(a1 + v12 + 144)) + (float)(v13 * *(float *)(a1 + v12 + 144));
      if (v15 < 0.0)
        v15 = -v15;
      *(float *)((char *)&v16 + v12) = powf(v15, *(float *)(a1 + v12 + 272));
      v12 += 4;
    }
    while (v14 != v12);
  }
}

float Phase::Geometry::ConeDirectivity::CalculateSubbandGains<4ul>(uint64_t a1, float a2)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  __int128 v15;

  __asm { FMOV            V1.4S, #1.0 }
  if (*(_DWORD *)(a1 + 140) >= 4u)
    v7 = 4;
  else
    v7 = *(_DWORD *)(a1 + 140);
  if (!v7)
    return 1.0;
  v8 = 0;
  v9 = 4 * v7;
  do
  {
    v10 = *(float *)(a1 + v8 + 144);
    v11 = *(float *)(a1 + v8 + 272);
    v12 = v10 - v11;
    if ((float)(v10 - v11) < 0.0)
      v12 = -(float)(v10 - v11);
    if (v12 <= 0.001745)
    {
      v13 = 0.0;
      if (v10 <= a2)
      {
        if (v10 >= a2)
          v13 = 0.5;
        else
          v13 = 1.0;
      }
    }
    else
    {
      v13 = fminf(fmaxf((float)(a2 - v10) / (float)(v11 - v10), 0.0), 1.0);
    }
    *(float *)((char *)&v15 + v8) = (float)(1.0 - v13) + (float)(*(float *)(a1 + v8 + 400) * v13);
    v8 += 4;
  }
  while (v9 != v8);
  return *(float *)&v15;
}

void Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<4ul>(Phase::Logger *a1)
{
  NSObject *v1;
  std::logic_error *exception;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 928);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    v3 = 136315394;
    v4 = "GeoSphericalCapDirectivity.hpp";
    v5 = 1024;
    v6 = 216;
    _os_log_impl(&dword_2164CC000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"SphericalCapDirectivity; unrecognized frequency resolution for GetG"
      "ainsFromDatabase.\"",
      (uint8_t *)&v3,
      0x12u);
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "SphericalCapDirectivity; unrecognized frequency resolution for GetGainsFromDatabase.");
}

void sub_216697720(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<5ul>(uint64_t a1, uint64_t a2, float a3, float a4)
{
  unsigned int v10;
  uint64_t v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)a1 = _Q1;
  *(_DWORD *)(a1 + 16) = 1065353216;
  v10 = *(_DWORD *)(a2 + 140);
  if (v10 >= 5)
    v11 = 5;
  else
    v11 = v10;
  if ((_DWORD)v11)
  {
    v12 = (float *)a1;
    v13 = (float *)(a2 + 272);
    v14 = sinf(a3);
    v15 = v14 * cosf(a4);
    do
    {
      v16 = *(v13 - 32);
      v17 = *v13++;
      v18 = v17;
      v19 = (float)(1.0 - v16) + (float)(v15 * v16);
      if (v19 < 0.0)
        v19 = -v19;
      *v12++ = powf(v19, v18);
      --v11;
    }
    while (v11);
  }
}

uint64_t Phase::Geometry::ConeDirectivity::CalculateSubbandGains<5ul>(uint64_t result, uint64_t a2, float a3)
{
  uint64_t v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;

  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)result = _Q1;
  *(_DWORD *)(result + 16) = 1065353216;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  if (v8 >= 5)
    v8 = 5;
  else
    v8 = v8;
  if ((_DWORD)v8)
  {
    v9 = (float *)(a2 + 400);
    do
    {
      v10 = *(v9 - 64);
      v11 = *(v9 - 32);
      v12 = v10 - v11;
      if ((float)(v10 - v11) < 0.0)
        v12 = -(float)(v10 - v11);
      if (v12 <= 0.001745)
      {
        v13 = 0.0;
        if (v10 <= a3)
        {
          if (v10 >= a3)
            v13 = 0.5;
          else
            v13 = 1.0;
        }
      }
      else
      {
        v13 = fminf(fmaxf((float)(a3 - v10) / (float)(v11 - v10), 0.0), 1.0);
      }
      v14 = *v9++;
      *(float *)result = (float)(1.0 - v13) + (float)(v14 * v13);
      result += 4;
      --v8;
    }
    while (v8);
  }
  return result;
}

void Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<5ul>(Phase::Logger *a1)
{
  NSObject *v1;
  std::logic_error *exception;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 928);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    v3 = 136315394;
    v4 = "GeoSphericalCapDirectivity.hpp";
    v5 = 1024;
    v6 = 216;
    _os_log_impl(&dword_2164CC000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"SphericalCapDirectivity; unrecognized frequency resolution for GetG"
      "ainsFromDatabase.\"",
      (uint8_t *)&v3,
      0x12u);
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "SphericalCapDirectivity; unrecognized frequency resolution for GetGainsFromDatabase.");
}

void sub_21669793C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<6ul>(uint64_t a1, uint64_t a2, float a3, float a4)
{
  unsigned int v10;
  uint64_t v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)a1 = _Q1;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 16) = _Q1;
  v10 = *(_DWORD *)(a2 + 140);
  if (v10 >= 6)
    v11 = 6;
  else
    v11 = v10;
  if ((_DWORD)v11)
  {
    v12 = (float *)a1;
    v13 = (float *)(a2 + 272);
    v14 = sinf(a3);
    v15 = v14 * cosf(a4);
    do
    {
      v16 = *(v13 - 32);
      v17 = *v13++;
      v18 = v17;
      v19 = (float)(1.0 - v16) + (float)(v15 * v16);
      if (v19 < 0.0)
        v19 = -v19;
      *v12++ = powf(v19, v18);
      --v11;
    }
    while (v11);
  }
}

uint64_t Phase::Geometry::ConeDirectivity::CalculateSubbandGains<6ul>(uint64_t result, uint64_t a2, float a3)
{
  uint64_t v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;

  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)result = _Q1;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(result + 16) = _Q1;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  if (v8 >= 6)
    v8 = 6;
  else
    v8 = v8;
  if ((_DWORD)v8)
  {
    v9 = (float *)(a2 + 400);
    do
    {
      v10 = *(v9 - 64);
      v11 = *(v9 - 32);
      v12 = v10 - v11;
      if ((float)(v10 - v11) < 0.0)
        v12 = -(float)(v10 - v11);
      if (v12 <= 0.001745)
      {
        v13 = 0.0;
        if (v10 <= a3)
        {
          if (v10 >= a3)
            v13 = 0.5;
          else
            v13 = 1.0;
        }
      }
      else
      {
        v13 = fminf(fmaxf((float)(a3 - v10) / (float)(v11 - v10), 0.0), 1.0);
      }
      v14 = *v9++;
      *(float *)result = (float)(1.0 - v13) + (float)(v14 * v13);
      result += 4;
      --v8;
    }
    while (v8);
  }
  return result;
}

void Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<6ul>(Phase::Logger *a1)
{
  NSObject *v1;
  std::logic_error *exception;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 928);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    v3 = 136315394;
    v4 = "GeoSphericalCapDirectivity.hpp";
    v5 = 1024;
    v6 = 216;
    _os_log_impl(&dword_2164CC000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"SphericalCapDirectivity; unrecognized frequency resolution for GetG"
      "ainsFromDatabase.\"",
      (uint8_t *)&v3,
      0x12u);
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "SphericalCapDirectivity; unrecognized frequency resolution for GetGainsFromDatabase.");
}

void sub_216697B58(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<10ul>(uint64_t a1, uint64_t a2, float a3, float a4)
{
  unsigned int v10;
  uint64_t v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)a1 = _Q1;
  *(_OWORD *)(a1 + 16) = _Q1;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 32) = _Q1;
  v10 = *(_DWORD *)(a2 + 140);
  if (v10 >= 0xA)
    v11 = 10;
  else
    v11 = v10;
  if ((_DWORD)v11)
  {
    v12 = (float *)a1;
    v13 = (float *)(a2 + 272);
    v14 = sinf(a3);
    v15 = v14 * cosf(a4);
    do
    {
      v16 = *(v13 - 32);
      v17 = *v13++;
      v18 = v17;
      v19 = (float)(1.0 - v16) + (float)(v15 * v16);
      if (v19 < 0.0)
        v19 = -v19;
      *v12++ = powf(v19, v18);
      --v11;
    }
    while (v11);
  }
}

uint64_t Phase::Geometry::ConeDirectivity::CalculateSubbandGains<10ul>(uint64_t result, uint64_t a2, float a3)
{
  uint64_t v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;

  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)result = _Q1;
  *(_OWORD *)(result + 16) = _Q1;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(result + 32) = _Q1;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  if (v8 >= 0xA)
    v8 = 10;
  else
    v8 = v8;
  if ((_DWORD)v8)
  {
    v9 = (float *)(a2 + 400);
    do
    {
      v10 = *(v9 - 64);
      v11 = *(v9 - 32);
      v12 = v10 - v11;
      if ((float)(v10 - v11) < 0.0)
        v12 = -(float)(v10 - v11);
      if (v12 <= 0.001745)
      {
        v13 = 0.0;
        if (v10 <= a3)
        {
          if (v10 >= a3)
            v13 = 0.5;
          else
            v13 = 1.0;
        }
      }
      else
      {
        v13 = fminf(fmaxf((float)(a3 - v10) / (float)(v11 - v10), 0.0), 1.0);
      }
      v14 = *v9++;
      *(float *)result = (float)(1.0 - v13) + (float)(v14 * v13);
      result += 4;
      --v8;
    }
    while (v8);
  }
  return result;
}

void Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<31ul>(uint64_t a1, uint64_t a2, float a3, float a4)
{
  unsigned int v10;
  uint64_t v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)a1 = _Q1;
  *(_OWORD *)(a1 + 16) = _Q1;
  *(_OWORD *)(a1 + 32) = _Q1;
  *(_OWORD *)(a1 + 48) = _Q1;
  *(_OWORD *)(a1 + 64) = _Q1;
  *(_OWORD *)(a1 + 80) = _Q1;
  *(_OWORD *)(a1 + 96) = _Q1;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 112) = _Q1;
  *(_DWORD *)(a1 + 120) = 1065353216;
  v10 = *(_DWORD *)(a2 + 140);
  if (v10 >= 0x1F)
    v11 = 31;
  else
    v11 = v10;
  if ((_DWORD)v11)
  {
    v12 = (float *)a1;
    v13 = (float *)(a2 + 272);
    v14 = sinf(a3);
    v15 = v14 * cosf(a4);
    do
    {
      v16 = *(v13 - 32);
      v17 = *v13++;
      v18 = v17;
      v19 = (float)(1.0 - v16) + (float)(v15 * v16);
      if (v19 < 0.0)
        v19 = -v19;
      *v12++ = powf(v19, v18);
      --v11;
    }
    while (v11);
  }
}

uint64_t Phase::Geometry::ConeDirectivity::CalculateSubbandGains<31ul>(uint64_t result, uint64_t a2, float a3)
{
  uint64_t v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;

  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)result = _Q1;
  *(_OWORD *)(result + 16) = _Q1;
  *(_OWORD *)(result + 32) = _Q1;
  *(_OWORD *)(result + 48) = _Q1;
  *(_OWORD *)(result + 64) = _Q1;
  *(_OWORD *)(result + 80) = _Q1;
  *(_OWORD *)(result + 96) = _Q1;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(result + 112) = _Q1;
  *(_DWORD *)(result + 120) = 1065353216;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  if (v8 >= 0x1F)
    v8 = 31;
  else
    v8 = v8;
  if ((_DWORD)v8)
  {
    v9 = (float *)(a2 + 400);
    do
    {
      v10 = *(v9 - 64);
      v11 = *(v9 - 32);
      v12 = v10 - v11;
      if ((float)(v10 - v11) < 0.0)
        v12 = -(float)(v10 - v11);
      if (v12 <= 0.001745)
      {
        v13 = 0.0;
        if (v10 <= a3)
        {
          if (v10 >= a3)
            v13 = 0.5;
          else
            v13 = 1.0;
        }
      }
      else
      {
        v13 = fminf(fmaxf((float)(a3 - v10) / (float)(v11 - v10), 0.0), 1.0);
      }
      v14 = *v9++;
      *(float *)result = (float)(1.0 - v13) + (float)(v14 * v13);
      result += 4;
      --v8;
    }
    while (v8);
  }
  return result;
}

void Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator+<float,31ul>(Phase::PackedSubbands<float,31ul> const&,Phase::PackedSubbands<float,31ul> const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  _OWORD v9[7];
  float32x2_t v10;
  float v11;
  uint64_t v12;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  v12 = *MEMORY[0x24BDAC8D0];
  v6 = vaddq_f32(*(float32x4_t *)(a2 + 16), *(float32x4_t *)(a3 + 16));
  v9[0] = vaddq_f32(*(float32x4_t *)a2, *(float32x4_t *)a3);
  v9[1] = v6;
  v7 = vaddq_f32(*(float32x4_t *)(a2 + 48), *(float32x4_t *)(a3 + 48));
  v9[2] = vaddq_f32(*(float32x4_t *)(a2 + 32), *(float32x4_t *)(a3 + 32));
  v9[3] = v7;
  v8 = vaddq_f32(*(float32x4_t *)(a2 + 80), *(float32x4_t *)(a3 + 80));
  v9[4] = vaddq_f32(*(float32x4_t *)(a2 + 64), *(float32x4_t *)(a3 + 64));
  v9[5] = v8;
  v9[6] = vaddq_f32(*(float32x4_t *)(a2 + 96), *(float32x4_t *)(a3 + 96));
  v8.i32[0] = *(_DWORD *)(a2 + 120);
  v10 = vadd_f32(*(float32x2_t *)(a2 + 112), *(float32x2_t *)(a3 + 112));
  v11 = v8.f32[0] + *(float *)(a3 + 120);
  *(_OWORD *)((char *)a1 + 108) = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  do
  {
    if (v5 <= 0x1E)
    {
      v4 = v5 + 1;
      *((_DWORD *)a1 + v5++) = *(_DWORD *)((char *)v9 + v3);
    }
    v3 += 4;
  }
  while (v3 != 124);
  if (v4 <= 0x1E)
    bzero((char *)a1 + 4 * v4, 124 - 4 * v4);
}

void Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator*<float,31ul>(Phase::PackedSubbands<float,31ul> const&,float const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(_OWORD *a1, uint64_t a2, double a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  _OWORD v9[7];
  float32x2_t v10;
  float v11;
  uint64_t v12;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  v12 = *MEMORY[0x24BDAC8D0];
  v6 = vmulq_n_f32(*(float32x4_t *)(a2 + 16), *(float *)&a3);
  v9[0] = vmulq_n_f32(*(float32x4_t *)a2, *(float *)&a3);
  v9[1] = v6;
  v7 = vmulq_n_f32(*(float32x4_t *)(a2 + 48), *(float *)&a3);
  v9[2] = vmulq_n_f32(*(float32x4_t *)(a2 + 32), *(float *)&a3);
  v9[3] = v7;
  v8 = vmulq_n_f32(*(float32x4_t *)(a2 + 80), *(float *)&a3);
  v9[4] = vmulq_n_f32(*(float32x4_t *)(a2 + 64), *(float *)&a3);
  v9[5] = v8;
  v9[6] = vmulq_n_f32(*(float32x4_t *)(a2 + 96), *(float *)&a3);
  v10 = vmul_f32(*(float32x2_t *)(a2 + 112), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&a3, 0));
  v11 = *(float *)(a2 + 120) * *(float *)&a3;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  *(_OWORD *)((char *)a1 + 108) = 0u;
  do
  {
    if (v5 <= 0x1E)
    {
      v4 = v5 + 1;
      *((_DWORD *)a1 + v5++) = *(_DWORD *)((char *)v9 + v3);
    }
    v3 += 4;
  }
  while (v3 != 124);
  if (v4 <= 0x1E)
    bzero((char *)a1 + 4 * v4, 124 - 4 * v4);
}

void Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator*<float,31ul>(Phase::PackedSubbands<float,31ul> const&,Phase::PackedSubbands<float,31ul> const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  _OWORD v9[7];
  float32x2_t v10;
  float v11;
  uint64_t v12;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  v12 = *MEMORY[0x24BDAC8D0];
  v6 = vmulq_f32(*(float32x4_t *)(a2 + 16), *(float32x4_t *)(a3 + 16));
  v9[0] = vmulq_f32(*(float32x4_t *)a2, *(float32x4_t *)a3);
  v9[1] = v6;
  v7 = vmulq_f32(*(float32x4_t *)(a2 + 48), *(float32x4_t *)(a3 + 48));
  v9[2] = vmulq_f32(*(float32x4_t *)(a2 + 32), *(float32x4_t *)(a3 + 32));
  v9[3] = v7;
  v8 = vmulq_f32(*(float32x4_t *)(a2 + 80), *(float32x4_t *)(a3 + 80));
  v9[4] = vmulq_f32(*(float32x4_t *)(a2 + 64), *(float32x4_t *)(a3 + 64));
  v9[5] = v8;
  v9[6] = vmulq_f32(*(float32x4_t *)(a2 + 96), *(float32x4_t *)(a3 + 96));
  v8.i32[0] = *(_DWORD *)(a2 + 120);
  v10 = vmul_f32(*(float32x2_t *)(a2 + 112), *(float32x2_t *)(a3 + 112));
  v11 = v8.f32[0] * *(float *)(a3 + 120);
  *(_OWORD *)((char *)a1 + 108) = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  do
  {
    if (v5 <= 0x1E)
    {
      v4 = v5 + 1;
      *((_DWORD *)a1 + v5++) = *(_DWORD *)((char *)v9 + v3);
    }
    v3 += 4;
  }
  while (v3 != 124);
  if (v4 <= 0x1E)
    bzero((char *)a1 + 4 * v4, 124 - 4 * v4);
}

int32x4_t Phase::DspLayer::ReblockerIn::AddFrame(int32x4_t *a1, int a2, int32x4_t result)
{
  unint64_t v3;
  int32x4_t v4;
  uint64_t v5;
  signed int v6;
  int32x4_t v7;
  int32x4_t v8;

  HIDWORD(v3) = a2 - 1;
  LODWORD(v3) = a2 - 1;
  v4 = *a1;
  switch((v3 >> 1))
  {
    case 0u:
      v5 = a1[1].i64[0];
      v6 = a1[1].i32[2];
      goto LABEL_8;
    case 1u:
      v5 = a1[1].i64[0];
      v6 = a1[1].i32[2];
      goto LABEL_7;
    case 3u:
      v5 = a1[1].i64[0];
      v6 = a1[1].i32[2];
      goto LABEL_6;
    case 7u:
      v5 = a1[1].i64[0];
      v6 = a1[1].i32[2];
      *(_DWORD *)(v5 + 12 * v6 + 4 * v4.i32[3]) = result.i32[3];
LABEL_6:
      *(_DWORD *)(v5 + 8 * v6 + 4 * v4.i32[2]) = result.i32[2];
LABEL_7:
      *(_DWORD *)(v5 + 4 * v6 + 4 * v4.i32[1]) = result.i32[1];
LABEL_8:
      *(_DWORD *)(v5 + 4 * v4.i32[0]) = result.i32[0];
      v7.i64[0] = 0x100000001;
      v7.i64[1] = 0x100000001;
      v8 = vaddq_s32(v4, v7);
      result = (int32x4_t)vbicq_s8((int8x16_t)v8, (int8x16_t)vceqq_s32(v8, vdupq_n_s32(v6)));
      *a1 = result;
      break;
    default:
      return result;
  }
  return result;
}

float Phase::DspLayer::ReblockerOut::GetNextFrame(int32x4_t *this, int a2)
{
  unint64_t v2;
  float result;
  int32x4_t v4;
  uint64_t v5;
  unsigned int v6;
  int32x4_t v7;
  int32x4_t v8;

  HIDWORD(v2) = a2 - 1;
  LODWORD(v2) = a2 - 1;
  result = 0.0;
  v4 = *this;
  switch((v2 >> 1))
  {
    case 0u:
      v5 = this[1].i64[0];
      v6 = this[1].u32[2];
      goto LABEL_6;
    case 1u:
      v5 = this[1].i64[0];
      v6 = this[1].u32[2];
      goto LABEL_6;
    case 3u:
      v5 = this[1].i64[0];
      v6 = this[1].u32[2];
      goto LABEL_6;
    case 7u:
      v5 = this[1].i64[0];
      v6 = this[1].u32[2];
LABEL_6:
      result = *(float *)(v5 + 4 * v4.i32[0]);
      v7.i64[0] = 0x100000001;
      v7.i64[1] = 0x100000001;
      v8 = vaddq_s32(v4, v7);
      *(int8x16_t *)this = vbicq_s8((int8x16_t)v8, (int8x16_t)vceqq_s32(v8, vdupq_n_s32(v6)));
      break;
    default:
      return result;
  }
  return result;
}

std::chrono::steady_clock::time_point Phase::SpatialModeler::RendererStates::UpdateRendererAssignments(_QWORD *a1, unint64_t a2, unint64_t a3, unint64_t **a4)
{
  std::chrono::steady_clock::time_point result;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t FirstInactiveRendererId;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;

  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v10 = a1 + 1;
  v9 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      if (!*((_BYTE *)v9 + 72))
      {
        *((_BYTE *)v9 + 72) = 1;
        v9[8] = result.__d_.__rep_;
      }
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != v10);
  }
  v14 = *a4;
  v15 = a4[1];
  while (v14 != v15)
  {
    v16 = *v14++;
    result.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)Phase::SpatialModeler::RendererStates::AssignRenderer((Phase::SpatialModeler::RendererStates *)a1, v16);
  }
  while (1)
  {
    v18 = (_QWORD *)*a1;
    if ((_QWORD *)*a1 == v10)
    {
      v19 = 0;
    }
    else
    {
      v19 = 0;
      do
      {
        if (!*((_BYTE *)v18 + 72))
          ++v19;
        v20 = (_QWORD *)v18[1];
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = (_QWORD *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (_QWORD *)v18[2];
            v13 = *v21 == (_QWORD)v18;
            v18 = v21;
          }
          while (!v13);
        }
        v18 = v21;
      }
      while (v21 != v10);
    }
    if (v19 >= a2)
      break;
    FirstInactiveRendererId = Phase::SpatialModeler::RendererStates::GetFirstInactiveRendererId((Phase::SpatialModeler::RendererStates *)a1);
    if (!FirstInactiveRendererId)
      FirstInactiveRendererId = *(_QWORD *)(a1[3] + 32);
    result.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)Phase::SpatialModeler::RendererStates::AssignRenderer((Phase::SpatialModeler::RendererStates *)a1, FirstInactiveRendererId);
  }
  while (a1[2] > a3)
  {
    v22 = (_QWORD *)*a1;
    if ((_QWORD *)*a1 == v10)
      goto LABEL_63;
    v23 = *a4;
    v24 = a4[1];
    v25 = (_QWORD *)*a1;
    do
    {
      if (v23 == v24)
      {
        v26 = *a4;
      }
      else
      {
        v26 = *a4;
        while (*v26 != v25[6])
        {
          if (++v26 == v24)
          {
            v26 = a4[1];
            break;
          }
        }
      }
      if (v26 == v24 && *((_BYTE *)v25 + 72))
      {
        if (v25 == v10)
          goto LABEL_48;
        goto LABEL_68;
      }
      v27 = (_QWORD *)v25[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v25[2];
          v13 = *v28 == (_QWORD)v25;
          v25 = v28;
        }
        while (!v13);
      }
      v25 = v28;
    }
    while (v28 != v10);
    while (1)
    {
LABEL_48:
      if (v23 == v24)
      {
        v29 = *a4;
      }
      else
      {
        v29 = *a4;
        while (*v29 != v22[6])
        {
          if (++v29 == v24)
          {
            v29 = a4[1];
            break;
          }
        }
      }
      if (v29 == v24)
        break;
      v30 = (_QWORD *)v22[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v22[2];
          v13 = *v31 == (_QWORD)v22;
          v22 = v31;
        }
        while (!v13);
      }
      v22 = v31;
      if (v31 == v10)
        goto LABEL_63;
    }
    v25 = v22;
    if (v22 == v10)
    {
LABEL_63:
      v32 = Phase::SpatialModeler::RendererStates::GetFirstInactiveRendererId((Phase::SpatialModeler::RendererStates *)a1);
      if (v32)
        goto LABEL_69;
      v33 = (_QWORD *)*v10;
      v34 = a1 + 1;
      if (*v10)
      {
        do
        {
          v25 = v33;
          v33 = (_QWORD *)v33[1];
        }
        while (v33);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v34[2];
          v13 = *v25 == (_QWORD)v34;
          v34 = v25;
        }
        while (v13);
      }
    }
LABEL_68:
    v32 = v25[6];
LABEL_69:
    result.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)Phase::SpatialModeler::RendererStates::UnassignRenderer((Phase::SpatialModeler::RendererStates *)a1, v32);
  }
  return result;
}

uint64_t **Phase::SpatialModeler::RendererStates::AssignRenderer(Phase::SpatialModeler::RendererStates *this, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t **result;
  unint64_t v14;

  v14 = a2;
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  if (v4)
  {
    v5 = (_QWORD *)((char *)this + 32);
    do
    {
      v6 = v4[4];
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = v4;
      else
        v8 = v4 + 1;
      if (v7)
        v5 = v4;
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != (_QWORD *)((char *)this + 32) && v5[4] <= a2)
    {
      v9 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)this + 3, a2, &v14);
      v10 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)this, a2, &v14);
      v11 = v9[9];
      v12 = *(_OWORD *)(v9 + 7);
      *(_OWORD *)(v10 + 5) = *(_OWORD *)(v9 + 5);
      *(_OWORD *)(v10 + 7) = v12;
      v10[9] = v11;
      std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__erase_unique<unsigned long long>((uint64_t **)this + 3, a2);
    }
  }
  *((_BYTE *)std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)this, a2, &v14)+ 40) = 1;
  result = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)this, a2, &v14);
  if (*((_BYTE *)result + 72))
    *((_BYTE *)result + 72) = 0;
  return result;
}

uint64_t Phase::SpatialModeler::RendererStates::GetFirstInactiveRendererId(Phase::SpatialModeler::RendererStates *this)
{
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;

  v3 = *(char **)this;
  v1 = (char *)this + 8;
  v2 = v3;
  if (v3 == v1)
    return 0;
  while (!v2[72])
  {
    v4 = (char *)*((_QWORD *)v2 + 1);
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = *(char **)v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (char *)*((_QWORD *)v2 + 2);
        v6 = *(_QWORD *)v5 == (_QWORD)v2;
        v2 = v5;
      }
      while (!v6);
    }
    v2 = v5;
    if (v5 == v1)
      return 0;
  }
  return *((_QWORD *)v2 + 4);
}

uint64_t **Phase::SpatialModeler::RendererStates::UnassignRenderer(Phase::SpatialModeler::RendererStates *this, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t **v13;
  std::chrono::steady_clock::time_point v14;
  uint64_t **result;
  unint64_t v16;

  v16 = a2;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (v4)
  {
    v5 = (_QWORD *)((char *)this + 8);
    do
    {
      v6 = v4[4];
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = v4;
      else
        v8 = v4 + 1;
      if (v7)
        v5 = v4;
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != (_QWORD *)((char *)this + 8) && v5[4] <= a2)
    {
      v9 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)this, a2, &v16);
      v10 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)this + 3, a2, &v16);
      v11 = v9[9];
      v12 = *(_OWORD *)(v9 + 7);
      *(_OWORD *)(v10 + 5) = *(_OWORD *)(v9 + 5);
      *(_OWORD *)(v10 + 7) = v12;
      v10[9] = v11;
      std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__erase_unique<unsigned long long>((uint64_t **)this, a2);
    }
  }
  v13 = (uint64_t **)((char *)this + 24);
  *((_BYTE *)std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)this + 3, a2, &v16)+ 40) = 0;
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  result = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v13, a2, &v16);
  if (!*((_BYTE *)result + 72))
    *((_BYTE *)result + 72) = 1;
  result[8] = (uint64_t *)v14.__d_.__rep_;
  return result;
}

void Phase::SpatialModeler::RendererStates::Update(uint64_t a1, unint64_t a2, uint64_t *a3, unint64_t **a4, char a5)
{
  *(_BYTE *)(a1 + 48) = a5;
  Phase::SpatialModeler::RendererStates::FillRenderers((uint64_t **)a1, a3, a4);
  Phase::SpatialModeler::RendererStates::UpdateRendererAssignments((_QWORD *)a1, a2, (unint64_t)a3, a4);
  Phase::SpatialModeler::RendererStates::UpdateKeepAliveFlags((uint64_t **)a1);
}

uint64_t **Phase::SpatialModeler::RendererStates::FillRenderers(uint64_t **result, uint64_t *a2, unint64_t **a3)
{
  uint64_t **v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t NextAvailable;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11;
  unint64_t v12;

  v4 = result;
  v5 = *a3;
  v6 = a3[1];
  if (*a3 != v6)
  {
    v7 = result + 7;
    do
    {
      v8 = *v5;
      v12 = v8;
      if (*((_BYTE *)v7 + v8) == 1)
      {
        if (v8 <= 0x1F)
          *((_BYTE *)v7 + v8) = 0;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        result = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v4 + 3, v8, &v12);
        *((_BYTE *)result + 40) = 0;
        result[6] = (uint64_t *)v8;
        result[7] = 0;
        result[8] = (uint64_t *)rep;
        *((_BYTE *)result + 72) = 1;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  for (; (char *)v4[2] + (unint64_t)v4[5] < (char *)a2; *((_BYTE *)result + 72) = 1)
  {
    NextAvailable = Phase::SpatialModeler::IndexStore<32ul,1ull,0ull>::GetNextAvailable((uint64_t)(v4 + 7));
    v12 = NextAvailable;
    v11 = std::chrono::steady_clock::now().__d_.__rep_;
    result = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v4 + 3, NextAvailable, &v12);
    *((_BYTE *)result + 40) = 0;
    result[6] = (uint64_t *)NextAvailable;
    result[7] = 0;
    result[8] = (uint64_t *)v11;
  }
  return result;
}

void Phase::SpatialModeler::RendererStates::UpdateKeepAliveFlags(uint64_t **this)
{
  std::chrono::steady_clock::time_point v2;
  uint64_t *v3;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  Phase::SpatialModeler::RendererStates *v16;
  Phase::SpatialModeler::RendererStates *v17;
  BOOL v18;
  unint64_t *v19;
  unint64_t *__p;
  unint64_t *v21;
  unint64_t *v22;

  __p = 0;
  v21 = 0;
  v22 = 0;
  v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v3 = *this;
  if (*this != (uint64_t *)(this + 1))
  {
    rep = v2.__d_.__rep_;
    do
    {
      v5 = (unint64_t *)(v3 + 4);
      if (*((_BYTE *)v3 + 72))
      {
        if ((float)((float)(rep - v3[8]) / 1000000000.0) > *((float *)this + 13) || !*((_BYTE *)this + 48))
        {
          *((_BYTE *)std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(this, *v5, v3 + 4)+ 40) = 0;
          v6 = v21;
          if (v21 >= v22)
          {
            v8 = __p;
            v9 = v21 - __p;
            v10 = v9 + 1;
            if ((unint64_t)(v9 + 1) >> 61)
              std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
            v11 = (char *)v22 - (char *)__p;
            if (((char *)v22 - (char *)__p) >> 2 > v10)
              v10 = v11 >> 2;
            if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
              v12 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v12 = v10;
            if (v12)
            {
              v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v22, v12);
              v8 = __p;
              v6 = v21;
            }
            else
            {
              v13 = 0;
            }
            v14 = (unint64_t *)&v13[8 * v9];
            *v14 = *v5;
            v7 = v14 + 1;
            while (v6 != v8)
            {
              v15 = *--v6;
              *--v14 = v15;
            }
            __p = v14;
            v22 = (unint64_t *)&v13[8 * v12];
            if (v8)
              operator delete(v8);
          }
          else
          {
            *v21 = *v5;
            v7 = v21 + 1;
          }
          v21 = v7;
        }
      }
      else
      {
        *((_BYTE *)std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(this, *v5, v3 + 4)+ 40) = 1;
      }
      v16 = (Phase::SpatialModeler::RendererStates *)v3[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(Phase::SpatialModeler::RendererStates **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (Phase::SpatialModeler::RendererStates *)v3[2];
          v18 = *(_QWORD *)v17 == (_QWORD)v3;
          v3 = (uint64_t *)v17;
        }
        while (!v18);
      }
      v3 = (uint64_t *)v17;
    }
    while (v17 != (Phase::SpatialModeler::RendererStates *)(this + 1));
    v19 = __p;
    if (__p != v21)
    {
      do
        Phase::SpatialModeler::RendererStates::UnassignRenderer((Phase::SpatialModeler::RendererStates *)this, *v19++);
      while (v19 != v21);
      v19 = __p;
    }
    if (v19)
      operator delete(v19);
  }
}

void sub_216698BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Phase::SpatialModeler::RendererStates::GetNRenderers(uint64_t a1, unint64_t a2, void **a3, unint64_t **a4)
{
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  uint8x8_t v44;
  unint64_t v45;
  __int128 **v46;
  __int128 *v47;
  uint64_t v48;
  unint64_t v49;
  __int128 *v50;
  __int128 *v51;
  __int128 *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *i;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  int v65;

  Phase::SpatialModeler::RendererStates::FillRenderers((uint64_t **)a1, (uint64_t *)a2, a4);
  v9 = (char *)*a3;
  v8 = (char *)a3[1];
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (_BYTE *)*a3) >> 3);
  v11 = a2 - v10;
  if (a2 <= v10)
  {
    if (a2 < v10)
      a3[1] = &v9[40 * a2];
  }
  else
  {
    v12 = a3[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v12 - v8) >> 3) >= v11)
    {
      v26 = &v8[40 * v11];
      do
      {
        *(_OWORD *)v8 = 0uLL;
        *((_OWORD *)v8 + 1) = 0uLL;
        *((_QWORD *)v8 + 4) = 0;
        *v8 = 1;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = 0;
        v8[24] = 0;
        v8 += 40;
      }
      while (v8 != v26);
      a3[1] = v26;
    }
    else
    {
      if (a2 > 0x666666666666666)
        std::vector<Phase::SpatialModeler::RendererInfo>::__throw_length_error[abi:ne180100]();
      v13 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - v9) >> 3);
      v14 = 2 * v13;
      if (2 * v13 <= a2)
        v14 = a2;
      if (v13 >= 0x333333333333333)
        v15 = 0x666666666666666;
      else
        v15 = v14;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>>((uint64_t)(a3 + 2), v15);
      v18 = &v16[40 * v10];
      v19 = &v16[40 * a2];
      v20 = v18;
      do
      {
        *(_OWORD *)v20 = 0uLL;
        *((_OWORD *)v20 + 1) = 0uLL;
        *((_QWORD *)v20 + 4) = 0;
        *v20 = 1;
        *((_QWORD *)v20 + 1) = 0;
        *((_QWORD *)v20 + 2) = 0;
        v20[24] = 0;
        v20 += 40;
      }
      while (v20 != v19);
      v21 = &v16[40 * v17];
      v23 = (char *)*a3;
      v22 = (char *)a3[1];
      if (v22 != *a3)
      {
        do
        {
          v24 = *(_OWORD *)(v22 - 40);
          v25 = *(_OWORD *)(v22 - 24);
          *((_QWORD *)v18 - 1) = *((_QWORD *)v22 - 1);
          *(_OWORD *)(v18 - 24) = v25;
          *(_OWORD *)(v18 - 40) = v24;
          v18 -= 40;
          v22 -= 40;
        }
        while (v22 != v23);
        v22 = (char *)*a3;
      }
      *a3 = v18;
      a3[1] = v19;
      a3[2] = v21;
      if (v22)
        operator delete(v22);
    }
  }
  v63 = 0u;
  v64 = 0u;
  v65 = 1065353216;
  v27 = *(uint64_t **)a1;
  if (*(_QWORD *)a1 == a1 + 8)
  {
    v28 = 0;
  }
  else
  {
    v28 = 0;
    do
    {
      if (v28 >= *(_QWORD *)(a1 + 16))
        break;
      std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v63, v27[4], v27 + 4)[3] = v27 + 5;
      v29 = (uint64_t *)v27[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (uint64_t *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (uint64_t *)v27[2];
          v31 = *v30 == (_QWORD)v27;
          v27 = v30;
        }
        while (!v31);
      }
      ++v28;
      v27 = v30;
    }
    while (v30 != (uint64_t *)(a1 + 8));
  }
  v32 = *(_QWORD **)(a1 + 24);
  if (v32 != (_QWORD *)(a1 + 32))
  {
    do
    {
      if (v28 >= a2 || v28 >= *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 16))
        break;
      std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v63, v32[4], v32 + 4)[3] = v32 + 5;
      v33 = (_QWORD *)v32[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v32[2];
          v31 = *v34 == (_QWORD)v32;
          v32 = v34;
        }
        while (!v31);
      }
      ++v28;
      v32 = v34;
    }
    while (v34 != (_QWORD *)(a1 + 32));
  }
  v35 = *a4;
  v36 = a4[1];
  if (*a4 == v36)
  {
    v37 = 0;
    goto LABEL_94;
  }
  v37 = 0;
  do
  {
    v38 = *v35;
    v62 = *v35;
    if (v37 >= a2)
      goto LABEL_91;
    v39 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v63, v38, &v62)[3];
    v40 = (uint64_t)*a3 + 40 * v37;
    v41 = *v39;
    v42 = v39[1];
    *(_QWORD *)(v40 + 32) = *((_QWORD *)v39 + 4);
    *(_OWORD *)v40 = v41;
    *(_OWORD *)(v40 + 16) = v42;
    v43 = *((_QWORD *)&v63 + 1);
    if (!*((_QWORD *)&v63 + 1))
      goto LABEL_90;
    v44 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v63 + 8));
    v44.i16[0] = vaddlv_u8(v44);
    if (v44.u32[0] > 1uLL)
    {
      v45 = v38;
      if (*((_QWORD *)&v63 + 1) <= v38)
        v45 = v38 % *((_QWORD *)&v63 + 1);
    }
    else
    {
      v45 = (*((_QWORD *)&v63 + 1) - 1) & v38;
    }
    v46 = *(__int128 ***)(v63 + 8 * v45);
    if (!v46)
      goto LABEL_90;
    v47 = *v46;
    if (!*v46)
      goto LABEL_90;
    v48 = *((_QWORD *)&v63 + 1) - 1;
    while (1)
    {
      v49 = *((_QWORD *)v47 + 1);
      if (v49 == v38)
        break;
      if (v44.u32[0] > 1uLL)
      {
        if (v49 >= *((_QWORD *)&v63 + 1))
          v49 %= *((_QWORD *)&v63 + 1);
      }
      else
      {
        v49 &= v48;
      }
      if (v49 != v45)
        goto LABEL_90;
LABEL_60:
      v47 = *(__int128 **)v47;
      if (!v47)
        goto LABEL_90;
    }
    if (*((_QWORD *)v47 + 2) != v38)
      goto LABEL_60;
    if (v44.u32[0] > 1uLL)
    {
      if (v38 >= *((_QWORD *)&v63 + 1))
        v38 %= *((_QWORD *)&v63 + 1);
    }
    else
    {
      v38 &= v48;
    }
    v50 = *(__int128 **)v47;
    v51 = *(__int128 **)(v63 + 8 * v38);
    do
    {
      v52 = v51;
      v51 = *(__int128 **)v51;
    }
    while (v51 != v47);
    if (v52 == &v64)
      goto LABEL_79;
    v53 = *((_QWORD *)v52 + 1);
    if (v44.u32[0] > 1uLL)
    {
      if (v53 >= *((_QWORD *)&v63 + 1))
        v53 %= *((_QWORD *)&v63 + 1);
    }
    else
    {
      v53 &= v48;
    }
    if (v53 == v38)
    {
LABEL_81:
      if (v50)
      {
        v54 = *((_QWORD *)v50 + 1);
        goto LABEL_83;
      }
    }
    else
    {
LABEL_79:
      if (!v50)
        goto LABEL_80;
      v54 = *((_QWORD *)v50 + 1);
      if (v44.u32[0] > 1uLL)
      {
        v55 = *((_QWORD *)v50 + 1);
        if (v54 >= *((_QWORD *)&v63 + 1))
          v55 = v54 % *((_QWORD *)&v63 + 1);
      }
      else
      {
        v55 = v54 & v48;
      }
      if (v55 != v38)
      {
LABEL_80:
        *(_QWORD *)(v63 + 8 * v38) = 0;
        v50 = *(__int128 **)v47;
        goto LABEL_81;
      }
LABEL_83:
      if (v44.u32[0] > 1uLL)
      {
        if (v54 >= v43)
          v54 %= v43;
      }
      else
      {
        v54 &= v48;
      }
      if (v54 != v38)
      {
        *(_QWORD *)(v63 + 8 * v54) = v52;
        v50 = *(__int128 **)v47;
      }
    }
    *(_QWORD *)v52 = v50;
    *(_QWORD *)v47 = 0;
    --*((_QWORD *)&v64 + 1);
    operator delete(v47);
LABEL_90:
    ++v37;
LABEL_91:
    ++v35;
  }
  while (v35 != v36);
LABEL_94:
  for (i = (_QWORD *)v64; i; i = (_QWORD *)*i)
  {
    if (v37 < a2)
    {
      v57 = (__int128 *)i[3];
      v58 = (uint64_t)*a3 + 40 * v37;
      v59 = *v57;
      v60 = v57[1];
      *(_QWORD *)(v58 + 32) = *((_QWORD *)v57 + 4);
      *(_OWORD *)v58 = v59;
      *(_OWORD *)(v58 + 16) = v60;
      ++v37;
    }
  }
  return std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v63);
}

void sub_2166990E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<Phase::SpatialModeler::RendererInfo>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v14 = 1;
  if (v7 >= 3)
    v14 = (v7 & (v7 - 1)) != 0;
  v15 = v14 | (2 * v7);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v30)
  {
    *i = *v30;
LABEL_72:
    *v30 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v29[v5] = a1 + 4;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_2166994E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0x50uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((_QWORD *)v9 + 9) = 0;
    v9[40] = 1;
    *((_QWORD *)v9 + 6) = 0;
    *((_QWORD *)v9 + 7) = 0;
    v9[64] = 0;
    std::__tree<Phase::SpatialCategory>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__erase_unique<unsigned long long>(uint64_t **a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = (uint64_t *)(a1 + 1);
  v3 = a1[1];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5)
        *a1 = v11;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      operator delete(v5);
    }
  }
}

_QWORD *Phase::Controller::RenderGroupMgr::GetRenderGroup(Phase::Controller::RenderGroupMgr *this, UniqueObjectId a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  UniqueObjectId v15;

  v15 = a2;
  v3 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)this + 17, &v15);
  if (!v3)
    return 0;
  v4 = (_QWORD *)((char *)this + 176);
  v5 = v3 + 4;
  v6 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v4, v3 + 4);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = (std::__shared_weak_count *)v6[4];
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      v10 = v9;
      v11 = v7[3];
      if (v11 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11) & 1) != 0)
        v5 = 0;
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  return v5;
}

void sub_216699750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::RenderGroupMgr::NewRenderGroup(Phase::Controller::RenderGroupMgr *this, Phase::SpatialModeler::RenderGroup *a2)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  _BYTE v53[265];
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 14);
  if (!v3
    || !*((_QWORD *)this + 15)
    || (Phase::Controller::RendererSystem::CreateRenderer(v3, *(_QWORD *)(*((_QWORD *)this + 16) + 240), &v41), !v41))
  {
    std::terminate();
  }
  v5 = *(_QWORD *)(v41 + 40);
  Phase::Controller::PerformNewRenderGroup((float *)this + 34, (_QWORD *)this + 22, (__int128 *)a2, &v41);
  if (*((_QWORD *)this + 65) != *((_QWORD *)this + 66))
  {
    v43 = *(_OWORD *)a2;
    v44 = *((_QWORD *)a2 + 2);
    v6 = *((_DWORD *)a2 + 6);
    v7 = *((_DWORD *)a2 + 7);
    v45 = v6;
    v46 = v7;
    v8 = *((_DWORD *)a2 + 8);
    v9 = *((_DWORD *)a2 + 9);
    v47 = v8;
    v48 = v9;
    v10 = *((_DWORD *)a2 + 10);
    v11 = *((_DWORD *)a2 + 11);
    v49 = v10;
    v50 = v11;
    v12 = *((_DWORD *)a2 + 12);
    v13 = *((_DWORD *)a2 + 13);
    v51 = v12;
    v52 = v13;
    memcpy(v53, (char *)a2 + 56, sizeof(v53));
    v15 = v41;
    v14 = v42;
    v54 = v41;
    v55 = v42;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v18 = operator new();
    *(_QWORD *)(v18 + 384) = 0;
    *(_QWORD *)(v18 + 392) = 0;
    *(_DWORD *)v18 = 3;
    *(_DWORD *)(v18 + 368) = -1;
    *(_OWORD *)(v18 + 16) = v43;
    *(_QWORD *)(v18 + 32) = v44;
    *(_DWORD *)(v18 + 40) = v6;
    *(_DWORD *)(v18 + 44) = v7;
    *(_DWORD *)(v18 + 48) = v8;
    *(_DWORD *)(v18 + 52) = v9;
    *(_DWORD *)(v18 + 56) = v10;
    *(_DWORD *)(v18 + 60) = v11;
    *(_DWORD *)(v18 + 64) = v12;
    *(_DWORD *)(v18 + 68) = v13;
    memcpy((void *)(v18 + 72), v53, 0x109uLL);
    *(_QWORD *)(v18 + 352) = v15;
    *(_QWORD *)(v18 + 360) = v14;
    if (v14)
    {
      p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
      do
        v20 = __ldxr(p_shared_weak_owners);
      while (__stxr(v20 + 1, p_shared_weak_owners));
      *(_DWORD *)(v18 + 368) = 3;
      *(_QWORD *)(v18 + 392) = *((_QWORD *)this + 13);
      *((_QWORD *)this + 13) = v18;
      v21 = (unint64_t *)&v14->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    else
    {
      *(_DWORD *)(v18 + 368) = 3;
      *(_QWORD *)(v18 + 392) = *((_QWORD *)this + 13);
      *((_QWORD *)this + 13) = v18;
    }
  }
  v23 = *((_QWORD *)this + 15);
  v39 = v41;
  v40 = v42;
  if (v42)
  {
    v24 = (unint64_t *)&v42->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = Phase::Controller::RouterCommand::AddRenderer(&v39);
  v27 = (unint64_t *)(v23 + 32);
  v28 = atomic_load((unint64_t *)(v23 + 32));
  *(_QWORD *)(v26 + 40) = v28;
  while (1)
  {
    v29 = __ldaxr(v27);
    if (v29 != v28)
      break;
    if (!__stlxr(v26, v27))
      goto LABEL_30;
  }
  __clrex();
  do
  {
    *(_QWORD *)(v26 + 40) = v29;
    while (1)
    {
      v30 = __ldaxr(v27);
      if (v30 != v29)
        break;
      if (!__stlxr(v26, v27))
      {
        v31 = 1;
        goto LABEL_29;
      }
    }
    v31 = 0;
    __clrex();
LABEL_29:
    v29 = v30;
  }
  while (!v31);
LABEL_30:
  v32 = v40;
  if (v40)
  {
    v33 = (unint64_t *)&v40->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  *((_BYTE *)this + 568) = 1;
  v35 = v42;
  if (v42)
  {
    v36 = (unint64_t *)&v42->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  return v5;
}

void sub_216699A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Phase::Controller::PerformNewRenderGroup(float *a1, _QWORD *a2, __int128 *a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  const void *v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  uint64_t **v17;
  uint64_t *v18;
  unint64_t v19;
  char *v21;
  __int128 v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t prime;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  _QWORD *v47;
  __int128 v48;
  __int128 v49;
  _BYTE buf[38];
  __int16 v51;
  unint64_t v52;
  uint64_t v53;

  v9 = 0;
  v53 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(*a4 + 40);
  v11 = *(__int128 *)((char *)a3 + 24);
  v12 = *(__int128 *)((char *)a3 + 40);
  v13 = (char *)a3 + 56;
  memset(&buf[7], 0, 24);
  v14 = 0xCBF29CE484222325;
  do
    v14 = 0x100000001B3 * (v14 ^ *((char *)a3 + v9++));
  while (v9 != 16);
  v15 = *((_QWORD *)a1 + 1);
  v48 = v12;
  v49 = v11;
  if (!v15)
    goto LABEL_24;
  v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v4 = v14;
    if (v14 >= v15)
      v4 = v14 % v15;
  }
  else
  {
    v4 = (v15 - 1) & v14;
  }
  v17 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
  if (!v17 || (v18 = *v17) == 0)
  {
LABEL_24:
    v21 = (char *)operator new(0x1A0uLL);
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = v14;
    v22 = *a3;
    *((_OWORD *)v21 + 1) = *a3;
    *((_QWORD *)v21 + 4) = v10;
    *((_OWORD *)v21 + 3) = v22;
    *((_QWORD *)v21 + 8) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(v21 + 72) = v49;
    *(_OWORD *)(v21 + 88) = v48;
    memcpy(v21 + 104, v13, 0x109uLL);
    v21[384] = 1;
    *(_OWORD *)(v21 + 385) = *(_OWORD *)buf;
    *((_OWORD *)v21 + 25) = *(_OWORD *)&buf[15];
    v23 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
    v24 = a1[8];
    if (v15 && (float)(v24 * (float)v15) >= v23)
    {
LABEL_70:
      v40 = *(_QWORD **)a1;
      v41 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
      if (v41)
      {
        *(_QWORD *)v21 = *v41;
      }
      else
      {
        *(_QWORD *)v21 = *((_QWORD *)a1 + 2);
        *((_QWORD *)a1 + 2) = v21;
        v40[v4] = a1 + 4;
        if (!*(_QWORD *)v21)
        {
LABEL_79:
          ++*((_QWORD *)a1 + 3);
          std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,std::shared_ptr<Phase::Controller::Renderer> &>((uint64_t)a2, v10, v10, *a4, a4[1]);
          return;
        }
        v42 = *(_QWORD *)(*(_QWORD *)v21 + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v42 >= v15)
            v42 %= v15;
        }
        else
        {
          v42 &= v15 - 1;
        }
        v41 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
      }
      *v41 = v21;
      goto LABEL_79;
    }
    v25 = 1;
    if (v15 >= 3)
      v25 = (v15 & (v15 - 1)) != 0;
    v26 = v25 | (2 * v15);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = (int8x8_t)v27;
    else
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v15 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v15)
      goto LABEL_36;
    if (*(_QWORD *)&prime < v15)
    {
      v35 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v15 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (*(_QWORD *)&prime <= v35)
        prime = (int8x8_t)v35;
      if (*(_QWORD *)&prime >= v15)
      {
        v15 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v29 = operator new(8 * *(_QWORD *)&prime);
          v30 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v29;
          if (v30)
            operator delete(v30);
          v31 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v31++) = 0;
          while (*(_QWORD *)&prime != v31);
          v32 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v32)
          {
            v33 = v32[1];
            v34 = (uint8x8_t)vcnt_s8(prime);
            v34.i16[0] = vaddlv_u8(v34);
            if (v34.u32[0] > 1uLL)
            {
              if (v33 >= *(_QWORD *)&prime)
                v33 %= *(_QWORD *)&prime;
            }
            else
            {
              v33 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = a1 + 4;
            v38 = (_QWORD *)*v32;
            if (*v32)
            {
              do
              {
                v39 = v38[1];
                if (v34.u32[0] > 1uLL)
                {
                  if (v39 >= *(_QWORD *)&prime)
                    v39 %= *(_QWORD *)&prime;
                }
                else
                {
                  v39 &= *(_QWORD *)&prime - 1;
                }
                if (v39 != v33)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v39))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v32;
                    goto LABEL_61;
                  }
                  *v32 = *v38;
                  *v38 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v39);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v39) = v38;
                  v38 = v32;
                }
                v39 = v33;
LABEL_61:
                v32 = v38;
                v38 = (_QWORD *)*v38;
                v33 = v39;
              }
              while (v38);
            }
          }
          v15 = (unint64_t)prime;
          goto LABEL_65;
        }
        v47 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v47)
          operator delete(v47);
        v15 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_65:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v4 = v14 % v15;
      else
        v4 = v14;
    }
    else
    {
      v4 = (v15 - 1) & v14;
    }
    goto LABEL_70;
  }
  while (1)
  {
    v19 = v18[1];
    if (v19 == v14)
      break;
    if (v16.u32[0] > 1uLL)
    {
      if (v19 >= v15)
        v19 %= v15;
    }
    else
    {
      v19 &= v15 - 1;
    }
    if (v19 != v4)
      goto LABEL_24;
LABEL_23:
    v18 = (uint64_t *)*v18;
    if (!v18)
      goto LABEL_24;
  }
  if (v18[2] != *(_QWORD *)a3 || v18[3] != *((_QWORD *)a3 + 1))
    goto LABEL_23;
  if (v18[4] != v10)
  {
    v43 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 224));
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      v44 = v18[6];
      v45 = v18[4];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "RenderGroupMgr.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 80;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v44;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v45;
      v51 = 2048;
      v52 = v10;
      _os_log_impl(&dword_2164CC000, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RenderGroupMgr: Replacing Renderer rendergroup: %llu renderer old: %llu new: %llu", buf, 0x30u);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__erase_unique<unsigned long long>(a2, v18[4]);
    std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,std::shared_ptr<Phase::Controller::Renderer> &>((uint64_t)a2, v10, v10, *a4, a4[1]);
  }
  v46 = *a3;
  v18[8] = *((_QWORD *)a3 + 2);
  *((_OWORD *)v18 + 3) = v46;
  *((_DWORD *)v18 + 18) = *((_DWORD *)a3 + 6);
  *((_DWORD *)v18 + 19) = *((_DWORD *)a3 + 7);
  *((_DWORD *)v18 + 20) = *((_DWORD *)a3 + 8);
  *((_DWORD *)v18 + 21) = *((_DWORD *)a3 + 9);
  *((_DWORD *)v18 + 22) = *((_DWORD *)a3 + 10);
  *((_DWORD *)v18 + 23) = *((_DWORD *)a3 + 11);
  *((_DWORD *)v18 + 24) = *((_DWORD *)a3 + 12);
  *((_DWORD *)v18 + 25) = *((_DWORD *)a3 + 13);
  memcpy(v18 + 13, v13, 0x109uLL);
  v18[4] = v10;
  *((_BYTE *)v18 + 384) = 1;
}

void sub_21669A100(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteNewRenderGroup(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12[2];

  if (a2)
  {
    v2 = a2;
    v3 = result;
    v4 = (float *)(result + 136);
    v5 = (_QWORD *)(result + 176);
    do
    {
      v6 = *(_QWORD *)(v2 + 392);
      if (*(_DWORD *)(v2 + 368) != 3)
        std::__throw_bad_variant_access[abi:ne180100]();
      v7 = *(std::__shared_weak_count **)(v2 + 360);
      if (v7)
      {
        v8 = std::__shared_weak_count::lock(v7);
        v12[1] = (uint64_t)v8;
        if (v8)
        {
          v9 = v8;
          v12[0] = *(_QWORD *)(v2 + 352);
          if (v12[0])
          {
            Phase::Controller::PerformNewRenderGroup(v4, v5, (__int128 *)(v2 + 16), v12);
            *(_BYTE *)(v3 + 568) = 1;
          }
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((_QWORD *)(v2 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v2 + 16);
      result = MEMORY[0x2199F9D70](v2, 0x1022C40083BFC85);
      v2 = v6;
    }
    while (v6);
  }
  return result;
}

uint64_t Phase::Controller::RenderGroupMgr::UpdateRenderGroup(Phase::Controller::RenderGroupMgr *this, Phase::SpatialModeler::RenderGroup *a2, char a3)
{
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[304];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  result = Phase::Controller::PerformUpdateRenderGroup((_QWORD *)this + 17, (__int128 *)a2, a3);
  if ((_DWORD)result)
  {
    if (*((_QWORD *)this + 65) != *((_QWORD *)this + 66))
    {
      v8 = *(_OWORD *)a2;
      v9 = *((_QWORD *)a2 + 2);
      v10 = *(_OWORD *)((char *)a2 + 24);
      v11 = *(_OWORD *)((char *)a2 + 40);
      memcpy(v12, (char *)a2 + 56, 0x109uLL);
      v12[280] = a3;
      v7 = operator new();
      *(_DWORD *)(v7 + 368) = 0;
      *(_QWORD *)(v7 + 384) = 0;
      *(_QWORD *)(v7 + 392) = 0;
      *(_DWORD *)v7 = 4;
      result = (uint64_t)std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__assign_alt[abi:ne180100]<4ul,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL> const&>(v7 + 16, v7 + 16, (uint64_t)&v8);
      *(_QWORD *)(v7 + 392) = *((_QWORD *)this + 13);
      *((_QWORD *)this + 13) = v7;
    }
    *((_BYTE *)this + 568) = 1;
  }
  return result;
}

BOOL Phase::Controller::PerformUpdateRenderGroup(_QWORD *a1, __int128 *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;

  v5 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1, a2);
  v6 = v5;
  if (v5)
  {
    v7 = *a2;
    v5[8] = *((_QWORD *)a2 + 2);
    *((_OWORD *)v5 + 3) = v7;
    *((_DWORD *)v5 + 18) = *((_DWORD *)a2 + 6);
    *((_DWORD *)v5 + 19) = *((_DWORD *)a2 + 7);
    *((_DWORD *)v5 + 20) = *((_DWORD *)a2 + 8);
    *((_DWORD *)v5 + 21) = *((_DWORD *)a2 + 9);
    *((_DWORD *)v5 + 22) = *((_DWORD *)a2 + 10);
    *((_DWORD *)v5 + 23) = *((_DWORD *)a2 + 11);
    *((_DWORD *)v5 + 24) = *((_DWORD *)a2 + 12);
    *((_DWORD *)v5 + 25) = *((_DWORD *)a2 + 13);
    memcpy(v5 + 13, (char *)a2 + 56, 0x109uLL);
    *((_BYTE *)v6 + 384) = a3;
  }
  return v6 != 0;
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteUpdateRenderGroup(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    v4 = (_QWORD *)(result + 136);
    do
    {
      v5 = v2;
      v2 = *(_QWORD *)(v2 + 392);
      if (*(_DWORD *)(v5 + 368) != 4)
        std::__throw_bad_variant_access[abi:ne180100]();
      if (Phase::Controller::PerformUpdateRenderGroup(v4, (__int128 *)(v5 + 16), *(_BYTE *)(v5 + 352)))
        *(_BYTE *)(v3 + 568) = 1;
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((_QWORD *)(v5 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v5 + 16);
      result = MEMORY[0x2199F9D70](v5, 0x1022C40083BFC85);
    }
    while (v2);
  }
  return result;
}

uint64_t Phase::Controller::RenderGroupMgr::RemoveRenderGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)&v6 = a2;
  *((_QWORD *)&v6 + 1) = a3;
  result = Phase::Controller::PerformRemoveRenderGroup((_QWORD *)(a1 + 136), (_QWORD *)(a1 + 176), a2, a3);
  if ((_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 520) != *(_QWORD *)(a1 + 528))
    {
      v5 = operator new();
      *(_DWORD *)(v5 + 368) = 0;
      *(_QWORD *)(v5 + 384) = 0;
      *(_QWORD *)(v5 + 392) = 0;
      *(_DWORD *)v5 = 2;
      result = std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>::operator=[abi:ne180100]<Phase::UniqueObjectId const&,0,Phase::UniqueObjectId,2ul,0>(v5 + 16, &v6);
      *(_QWORD *)(v5 + 392) = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v5;
    }
    *(_BYTE *)(a1 + 568) = 1;
  }
  return result;
}

BOOL Phase::Controller::PerformRemoveRenderGroup(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  Phase::Logger *v6;
  uint64_t *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v12[0] = a3;
  v12[1] = a4;
  v6 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1, v12);
  v7 = (uint64_t *)v6;
  if (v6)
  {
    v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v6) + 224));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = v7[2];
      v10 = v7[4];
      *(_DWORD *)buf = 136315906;
      v14 = "RenderGroupMgr.mm";
      v15 = 1024;
      v16 = 186;
      v17 = 2048;
      v18 = v9;
      v19 = 2048;
      v20 = v10;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RenderGroupMgr: RemoveRenderGroup rendererId: %llu, rendergroup id: %llu", buf, 0x26u);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__erase_unique<unsigned long long>(a2, v7[4]);
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>>>::erase(a1, v7);
  }
  return v7 != 0;
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteRemoveRenderGroup(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    v4 = (_QWORD *)(result + 136);
    v5 = (_QWORD *)(result + 176);
    do
    {
      v6 = v2;
      v2 = *(_QWORD *)(v2 + 392);
      if (*(_DWORD *)(v6 + 368) != 2)
        std::__throw_bad_variant_access[abi:ne180100]();
      if (Phase::Controller::PerformRemoveRenderGroup(v4, v5, *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24)))
        *(_BYTE *)(v3 + 568) = 1;
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((_QWORD *)(v6 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v6 + 16);
      result = MEMORY[0x2199F9D70](v6, 0x1022C40083BFC85);
    }
    while (v2);
  }
  return result;
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteRemoveRenderGroupForRenderer(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  Phase::Logger *v9;
  uint64_t *v10;
  NSObject *v11;
  uint64_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  unint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v2 = a2;
    v3 = result;
    v4 = (_QWORD *)(result + 136);
    v5 = (_QWORD *)(result + 176);
    v6 = (uint64_t *)(result + 152);
    do
    {
      v7 = v2;
      v2 = *(_QWORD *)(v2 + 392);
      if (*(_DWORD *)(v7 + 368) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v8 = *(_QWORD *)(v7 + 16);
      std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__erase_unique<unsigned long long>(v5, v8);
      v10 = v6;
      while (1)
      {
        v10 = (uint64_t *)*v10;
        if (!v10)
          break;
        if (v10[4] == v8)
        {
          v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v9) + 224));
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            v12 = v10[2];
            *(_DWORD *)buf = 136315906;
            v14 = "RenderGroupMgr.mm";
            v15 = 1024;
            v16 = 228;
            v17 = 2048;
            v18 = v8;
            v19 = 2048;
            v20 = v12;
            _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RenderGroupMgr: RemoveRenderGroupForRenderer rendererId: %llu rendergroup id: %llu", buf, 0x26u);
          }
          std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>>>::erase(v4, v10);
          *(_BYTE *)(v3 + 568) = 1;
          break;
        }
      }
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((_QWORD *)(v7 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v7 + 16);
      result = MEMORY[0x2199F9D70](v7, 0x1022C40083BFC85);
    }
    while (v2);
  }
  return result;
}

uint64_t Phase::Controller::RenderGroupMgr::SetSubmixRendererId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[3];

  result = Phase::Controller::PerformSetSubmixRendererId((float *)(a1 + 216), a2, a3, a4);
  if ((_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 520) != *(_QWORD *)(a1 + 528))
    {
      v10[0] = a2;
      v10[1] = a3;
      v10[2] = a4;
      v9 = operator new();
      *(_DWORD *)(v9 + 368) = 0;
      *(_QWORD *)(v9 + 384) = 0;
      *(_QWORD *)(v9 + 392) = 0;
      *(_DWORD *)v9 = 5;
      result = std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>::operator=[abi:ne180100]<std::pair<Phase::UniqueObjectId,unsigned long long> const&,0,std::pair<Phase::UniqueObjectId,unsigned long long>,6ul,0>(v9 + 16, (uint64_t)v10);
      *(_QWORD *)(v9 + 392) = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v9;
    }
    *(_BYTE *)(a1 + 568) = 1;
  }
  return result;
}

uint64_t Phase::Controller::PerformSetSubmixRendererId(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)&v9 = a2;
  *((_QWORD *)&v9 + 1) = a3;
  v6 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1, &v9);
  if (v6)
  {
    if (v6[4] == a4)
      return 0;
    v6[4] = a4;
  }
  else
  {
    *(_QWORD *)&v8 = a4;
    *((_QWORD *)&v8 + 1) = 0x3FF0000000000000;
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__emplace_unique_key_args<Phase::UniqueObjectId,Phase::UniqueObjectId&,Phase::Controller::SubmixParams>(a1, &v9, &v9, &v8);
  }
  return 1;
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteSetSubmixRendererId(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    v4 = (float *)(result + 216);
    do
    {
      v5 = v2;
      v2 = *(_QWORD *)(v2 + 392);
      if (*(_DWORD *)(v5 + 368) != 6)
        std::__throw_bad_variant_access[abi:ne180100]();
      if (Phase::Controller::PerformSetSubmixRendererId(v4, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32)))*(_BYTE *)(v3 + 568) = 1;
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((_QWORD *)(v5 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v5 + 16);
      result = MEMORY[0x2199F9D70](v5, 0x1022C40083BFC85);
    }
    while (v2);
  }
  return result;
}

uint64_t Phase::Controller::RenderGroupMgr::SetSubmixSendLevel(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[3];

  result = Phase::Controller::PerformSetSubmixSendLevel((float *)(a1 + 216), a2, a3, a4);
  if ((_DWORD)result)
  {
    v10[0] = a2;
    v10[1] = a3;
    *(double *)&v10[2] = a4;
    v9 = operator new();
    *(_DWORD *)(v9 + 368) = 0;
    *(_QWORD *)(v9 + 384) = 0;
    *(_QWORD *)(v9 + 392) = 0;
    *(_DWORD *)v9 = 6;
    result = std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>::operator=[abi:ne180100]<std::pair<Phase::UniqueObjectId,double> const&,0,std::pair<Phase::UniqueObjectId,double>,5ul,0>(v9 + 16, (uint64_t)v10);
    *(_QWORD *)(v9 + 392) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v9;
    *(_BYTE *)(a1 + 568) = 1;
  }
  return result;
}

uint64_t Phase::Controller::PerformSetSubmixSendLevel(float *a1, uint64_t a2, uint64_t a3, double a4)
{
  double v5;
  double *v6;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)&v9 = a2;
  *((_QWORD *)&v9 + 1) = a3;
  v5 = fmin(fmax(a4, 0.0), 1.0);
  v6 = (double *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1, &v9);
  if (!v6)
  {
    *(_QWORD *)&v8 = -1;
    *((double *)&v8 + 1) = v5;
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__emplace_unique_key_args<Phase::UniqueObjectId,Phase::UniqueObjectId&,Phase::Controller::SubmixParams>(a1, &v9, &v9, &v8);
    return 1;
  }
  if (v6[5] != v5)
  {
    v6[5] = v5;
    return 1;
  }
  return 0;
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteSetSubmixSendLevel(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    v4 = (float *)(result + 216);
    do
    {
      v5 = v2;
      v2 = *(_QWORD *)(v2 + 392);
      if (*(_DWORD *)(v5 + 368) != 5)
        std::__throw_bad_variant_access[abi:ne180100]();
      if (Phase::Controller::PerformSetSubmixSendLevel(v4, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(double *)(v5 + 32)))*(_BYTE *)(v3 + 568) = 1;
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((_QWORD *)(v5 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v5 + 16);
      result = MEMORY[0x2199F9D70](v5, 0x1022C40083BFC85);
    }
    while (v2);
  }
  return result;
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteRemoveSubmix(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    v4 = (_QWORD *)(result + 216);
    do
    {
      v5 = v2;
      v2 = *(_QWORD *)(v2 + 392);
      if (*(_DWORD *)(v5 + 368) != 2)
        std::__throw_bad_variant_access[abi:ne180100]();
      if (Phase::Controller::PerformRemoveSubmix(v4, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24)))
        *(_BYTE *)(v3 + 568) = 1;
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((_QWORD *)(v5 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v5 + 16);
      result = MEMORY[0x2199F9D70](v5, 0x1022C40083BFC85);
    }
    while (v2);
  }
  return result;
}

uint64_t Phase::Controller::RenderGroupMgr::RemoveSubmix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)&v6 = a2;
  *((_QWORD *)&v6 + 1) = a3;
  result = Phase::Controller::PerformRemoveSubmix((_QWORD *)(a1 + 216), a2, a3);
  if ((_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 520) != *(_QWORD *)(a1 + 528))
    {
      v5 = operator new();
      *(_DWORD *)(v5 + 368) = 0;
      *(_QWORD *)(v5 + 384) = 0;
      *(_QWORD *)(v5 + 392) = 0;
      *(_DWORD *)v5 = 7;
      result = std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>::operator=[abi:ne180100]<Phase::UniqueObjectId const&,0,Phase::UniqueObjectId,2ul,0>(v5 + 16, &v6);
      *(_QWORD *)(v5 + 392) = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v5;
    }
    *(_BYTE *)(a1 + 568) = 1;
  }
  return result;
}

BOOL Phase::Controller::PerformRemoveSubmix(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  v4 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1, v6);
  if (v4)
    std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(a1, v4);
  return v4 != 0;
}

uint64_t Phase::Controller::RenderGroupMgr::GetRenderer@<X0>(Phase::Controller::RenderGroupMgr *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t v8;

  v8 = a2;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)this + 22, &v8);
  if (!result)
    goto LABEL_6;
  v5 = result;
  *a3 = 0;
  a3[1] = 0;
  v6 = *(std::__shared_weak_count **)(result + 32);
  if (!v6
    || (result = (uint64_t)std::__shared_weak_count::lock(v6), (a3[1] = result) == 0)
    || (v7 = *(_QWORD *)(v5 + 24), (*a3 = v7) == 0))
  {
    result = std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)a3);
LABEL_6:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t Phase::Controller::RenderGroupMgr::GetRendererForRenderGroup@<X0>(Phase::Controller::RenderGroupMgr *this@<X0>, UniqueObjectId a2@<0:X1, 8:X2>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  UniqueObjectId v9;

  v9 = a2;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)this + 17, &v9);
  if (!result)
    goto LABEL_7;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)this + 22, (unint64_t *)(result + 32));
  if (!result)
    goto LABEL_7;
  v6 = result;
  *a3 = 0;
  a3[1] = 0;
  v7 = *(std::__shared_weak_count **)(result + 32);
  if (!v7
    || (result = (uint64_t)std::__shared_weak_count::lock(v7), (a3[1] = result) == 0)
    || (v8 = *(_QWORD *)(v6 + 24), (*a3 = v8) == 0))
  {
    result = std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)a3);
LABEL_7:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteUpdateRenderer(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  int updated;
  uint64_t v13[2];

  if (a2)
  {
    v2 = a2;
    v3 = result;
    v4 = result + 136;
    v5 = result + 216;
    v6 = result + 176;
    do
    {
      v7 = *(_QWORD *)(v2 + 392);
      if (*(_DWORD *)(v2 + 368) != 7)
        std::__throw_bad_variant_access[abi:ne180100]();
      v8 = *(_QWORD *)(v2 + 16);
      v9 = *(std::__shared_weak_count **)(v2 + 32);
      v13[0] = *(_QWORD *)(v2 + 24);
      v13[1] = (uint64_t)v9;
      if (v9)
      {
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      updated = Phase::Controller::PerformUpdateRenderer(v5, v6, v4, v8, v13);
      if (v9)
        std::__shared_weak_count::__release_weak(v9);
      if (updated)
        *(_BYTE *)(v3 + 568) = 1;
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((_QWORD *)(v2 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v2 + 16);
      result = MEMORY[0x2199F9D70](v2, 0x1022C40083BFC85);
      v2 = v7;
    }
    while (v7);
  }
  return result;
}

void Phase::Controller::RenderGroupMgr::UpdateRenderer(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  int updated;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];
  std::__shared_weak_count *v18;
  uint64_t v19[2];

  v6 = *a3;
  v7 = (std::__shared_weak_count *)a3[1];
  v8 = a1 + 136;
  v9 = a1 + 216;
  v19[0] = v6;
  v19[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  updated = Phase::Controller::PerformUpdateRenderer(v9, a1 + 176, v8, a2, v19);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  if (updated)
  {
    if (*(_QWORD *)(a1 + 520) != *(_QWORD *)(a1 + 528))
    {
      v14 = *a3;
      v13 = (std::__shared_weak_count *)a3[1];
      v17[0] = a2;
      v17[1] = v14;
      v18 = v13;
      if (v13)
      {
        v15 = (unint64_t *)&v13->__shared_weak_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::AddCommand<std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>((uint64_t *)(a1 + 104), 8, v17);
      if (v18)
        std::__shared_weak_count::__release_weak(v18);
    }
    *(_BYTE *)(a1 + 568) = 1;
  }
}

void sub_21669B11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
    std::__shared_weak_count::__release_weak(a12);
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::PerformUpdateRenderer(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *i;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;

  v48 = 0;
  v9 = (std::__shared_weak_count *)a5[1];
  if (!v9)
  {
    v11 = 0;
    goto LABEL_5;
  }
  v11 = std::__shared_weak_count::lock(v9);
  v48 = v11;
  if (!v11)
  {
LABEL_5:
    v12 = 0;
    goto LABEL_6;
  }
  v12 = *a5;
LABEL_6:
  v13 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)a2, a4);
  v14 = 0;
  if (!v12 || !v13)
    goto LABEL_68;
  v15 = (std::__shared_weak_count *)v13[4];
  v47 = a1;
  if (v15)
    v16 = std::__shared_weak_count::lock(v15);
  else
    v16 = 0;
  v17 = *(_QWORD *)(v12 + 40);
  v18 = *(_QWORD *)(a2 + 8);
  if (!v18)
    goto LABEL_28;
  v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.u32[0] > 1uLL)
  {
    a1 = *(_QWORD *)(v12 + 40);
    if (v18 <= v17)
      a1 = v17 % v18;
  }
  else
  {
    a1 = (v18 - 1) & v17;
  }
  v20 = *(_QWORD **)(*(_QWORD *)a2 + 8 * a1);
  if (!v20 || (v21 = (_QWORD *)*v20) == 0)
  {
LABEL_28:
    v23 = operator new(0x28uLL);
    *v23 = 0;
    v23[1] = v17;
    v23[2] = v17;
    v23[3] = v12;
    v23[4] = v11;
    if (v11)
    {
      p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v25 = __ldxr(p_shared_weak_owners);
      while (__stxr(v25 + 1, p_shared_weak_owners));
    }
    v26 = (float)(unint64_t)(*(_QWORD *)(a2 + 24) + 1);
    v27 = *(float *)(a2 + 32);
    if (!v18 || (float)(v27 * (float)v18) < v26)
    {
      v28 = 1;
      if (v18 >= 3)
        v28 = (v18 & (v18 - 1)) != 0;
      v29 = v28 | (2 * v18);
      v30 = vcvtps_u32_f32(v26 / v27);
      if (v29 <= v30)
        v31 = v30;
      else
        v31 = v29;
      std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a2, v31);
      v18 = *(_QWORD *)(a2 + 8);
      if ((v18 & (v18 - 1)) != 0)
      {
        if (v18 <= v17)
          a1 = v17 % v18;
        else
          a1 = v17;
      }
      else
      {
        a1 = (v18 - 1) & v17;
      }
    }
    v32 = *(_QWORD *)a2;
    v33 = *(_QWORD **)(*(_QWORD *)a2 + 8 * a1);
    if (v33)
    {
      *v23 = *v33;
      v34 = v47;
    }
    else
    {
      *v23 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v23;
      *(_QWORD *)(v32 + 8 * a1) = a2 + 16;
      v34 = v47;
      if (!*v23)
      {
LABEL_52:
        ++*(_QWORD *)(a2 + 24);
        goto LABEL_53;
      }
      v35 = *(_QWORD *)(*v23 + 8);
      if ((v18 & (v18 - 1)) != 0)
      {
        if (v35 >= v18)
          v35 %= v18;
      }
      else
      {
        v35 &= v18 - 1;
      }
      v33 = (_QWORD *)(*(_QWORD *)a2 + 8 * v35);
    }
    *v33 = v23;
    goto LABEL_52;
  }
  while (1)
  {
    v22 = v21[1];
    if (v22 == v17)
      break;
    if (v19.u32[0] > 1uLL)
    {
      if (v22 >= v18)
        v22 %= v18;
    }
    else
    {
      v22 &= v18 - 1;
    }
    if (v22 != a1)
      goto LABEL_28;
LABEL_27:
    v21 = (_QWORD *)*v21;
    if (!v21)
      goto LABEL_28;
  }
  if (v21[2] != v17)
    goto LABEL_27;
  if (v11)
  {
    v44 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = (std::__shared_weak_count *)v21[4];
  v21[3] = v12;
  v21[4] = v11;
  v34 = v47;
  if (v46)
    std::__shared_weak_count::__release_weak(v46);
LABEL_53:
  v36 = *(_QWORD **)(a3 + 16);
  if (v36)
  {
    while (v36[4] != a4)
    {
      v36 = (_QWORD *)*v36;
      if (!v36)
        goto LABEL_56;
    }
    v37 = *(_QWORD *)(v12 + 40);
    v36[4] = v37;
    for (i = *(_QWORD **)(v34 + 16); i; i = (_QWORD *)*i)
    {
      if (i[4] == a4)
        i[4] = v37;
    }
    v14 = 1;
    if (v16)
    {
LABEL_63:
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v40 = __ldaxr(p_shared_owners);
      while (__stlxr(v40 - 1, p_shared_owners));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
LABEL_56:
    v14 = 0;
    if (v16)
      goto LABEL_63;
  }
  v11 = v48;
LABEL_68:
  if (v11)
  {
    v41 = (unint64_t *)&v11->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v14;
}

void sub_21669B4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  _QWORD *v13;
  std::__shared_weak_count *v15;

  v15 = (std::__shared_weak_count *)v13[4];
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  operator delete(v13);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

_QWORD *Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::AddCommand<std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>(uint64_t *a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *result;

  v6 = operator new();
  *(_DWORD *)(v6 + 368) = 0;
  *(_QWORD *)(v6 + 384) = 0;
  *(_QWORD *)(v6 + 392) = 0;
  *(_DWORD *)v6 = a2;
  result = std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__assign_alt[abi:ne180100]<7ul,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>> const&>(v6 + 16, (_QWORD *)(v6 + 16), a3);
  *(_QWORD *)(v6 + 392) = *a1;
  *a1 = v6;
  return result;
}

uint64_t Phase::Controller::RenderGroupMgr::UpdatePointSourceHistory(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t result;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v11 = a2;
  v12 = a3;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 136), &v11);
  if (result)
  {
    v9 = *a4;
    *(_QWORD *)(result + 408) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(result + 392) = v9;
    if (*(_QWORD *)(a1 + 520) != *(_QWORD *)(a1 + 528))
    {
      v11 = a2;
      v12 = a3;
      v13 = *a4;
      v14 = *((_QWORD *)a4 + 2);
      v10 = operator new();
      *(_DWORD *)(v10 + 368) = 0;
      *(_QWORD *)(v10 + 384) = 0;
      *(_QWORD *)(v10 + 392) = 0;
      *(_DWORD *)v10 = 9;
      result = std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>::operator=[abi:ne180100]<std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory> const&,0,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>,8ul,0>(v10 + 16, (uint64_t)&v11);
      *(_QWORD *)(v10 + 392) = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v10;
    }
    *(_BYTE *)(a1 + 568) = 1;
  }
  return result;
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteUpdatePointSourceHistory(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    v4 = (_QWORD *)(result + 136);
    do
    {
      v5 = v2;
      v2 = *(_QWORD *)(v2 + 392);
      if (*(_DWORD *)(v5 + 368) != 8)
        std::__throw_bad_variant_access[abi:ne180100]();
      v8 = *(_OWORD *)(v5 + 16);
      v6 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v4, &v8);
      if (v6)
      {
        v7 = *(_OWORD *)(v5 + 32);
        v6[51] = *(_QWORD *)(v5 + 48);
        *(_OWORD *)(v6 + 49) = v7;
        *(_BYTE *)(v3 + 568) = 1;
      }
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((_QWORD *)(v5 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v5 + 16);
      result = MEMORY[0x2199F9D70](v5, 0x1022C40083BFC85);
    }
    while (v2);
  }
  return result;
}

unint64_t Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::Commit(unint64_t *a1, _QWORD *a2)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;

  result = operator new();
  *(_DWORD *)(result + 368) = 0;
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 384) = *a2;
  *(_QWORD *)(result + 392) = 0;
  *a2 = 0;
  v5 = atomic_load(a1);
  *(_QWORD *)(result + 392) = v5;
  while (1)
  {
    v6 = __ldaxr(a1);
    if (v6 != v5)
      break;
    if (!__stlxr(result, a1))
      return result;
  }
  __clrex();
  do
  {
    *(_QWORD *)(result + 392) = v6;
    while (1)
    {
      v7 = __ldaxr(a1);
      if (v7 != v6)
        break;
      if (!__stlxr(result, a1))
      {
        v8 = 1;
        goto LABEL_11;
      }
    }
    v8 = 0;
    __clrex();
LABEL_11:
    v6 = v7;
  }
  while (!v8);
  return result;
}

uint64_t Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::ExecuteCommands(unint64_t *a1)
{
  unsigned int *v2;
  uint64_t i;
  uint64_t result;
  _OWORD v5[5];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  memset(v5, 0, sizeof(v5));
  do
    v2 = (unsigned int *)__ldaxr(a1);
  while (__stlxr(0, a1));
  Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::SortCommandList((uint64_t)a1, v2, (uint64_t)v5);
  if (*(_QWORD *)&v5[0])
    std::terminate();
  for (i = 8; i != 80; i += 8)
    result = (*(uint64_t (**)(unint64_t, _QWORD))(a1[2] + i))(a1[1], *(_QWORD *)((char *)v5 + i));
  return result;
}

void Phase::Controller::RenderGroupMgr::AddDiffTarget(Phase::Controller::RenderGroupMgr *this, Phase::Controller::RenderGroupMgr *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = (_QWORD *)*((_QWORD *)this + 66);
  v5 = *((_QWORD *)this + 67);
  if ((unint64_t)v4 >= v5)
  {
    v7 = (void **)((char *)this + 520);
    v8 = *((_QWORD *)this + 65);
    v9 = ((uint64_t)v4 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<Phase::Controller::RenderGroupMgr *>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)this + 536, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v6 = v14 + 8;
    v16 = (char *)*((_QWORD *)this + 66);
    v17 = (char *)*((_QWORD *)this + 65);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*v7;
    }
    *((_QWORD *)this + 65) = v14;
    *((_QWORD *)this + 66) = v6;
    *((_QWORD *)this + 67) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v4 = a2;
    v6 = v4 + 1;
  }
  *((_QWORD *)this + 66) = v6;
}

void Phase::Controller::RenderGroupMgr::AddFullCopyTarget(Phase::Controller::RenderGroupMgr *this, Phase::Controller::RenderGroupMgr *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = (_QWORD *)*((_QWORD *)this + 69);
  v5 = *((_QWORD *)this + 70);
  if ((unint64_t)v4 >= v5)
  {
    v7 = (void **)((char *)this + 544);
    v8 = *((_QWORD *)this + 68);
    v9 = ((uint64_t)v4 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<Phase::Controller::RenderGroupMgr *>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)this + 560, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v6 = v14 + 8;
    v16 = (char *)*((_QWORD *)this + 69);
    v17 = (char *)*((_QWORD *)this + 68);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*v7;
    }
    *((_QWORD *)this + 68) = v14;
    *((_QWORD *)this + 69) = v6;
    *((_QWORD *)this + 70) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v4 = a2;
    v6 = v4 + 1;
  }
  *((_QWORD *)this + 69) = v6;
}

void Phase::Controller::RenderGroupMgr::SendChanges(Phase::Controller::RenderGroupMgr *this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;

  v2 = (uint64_t *)((char *)this + 104);
  if (*((_QWORD *)this + 13))
  {
    if (*((_QWORD *)this + 66) != *((_QWORD *)this + 65))
    {
      v3 = 0;
      do
      {
        v6 = 0;
        Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::CopyTo(v2, &v6);
        Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::Commit((unint64_t *)(*(_QWORD *)(*((_QWORD *)this + 65) + 8 * v3) + 80), &v6);
        Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear(&v6);
        ++v3;
      }
      while (v3 < (uint64_t)(*((_QWORD *)this + 66) - *((_QWORD *)this + 65)) >> 3);
    }
    Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear(v2);
  }
  if (*((_BYTE *)this + 568))
  {
    v4 = *((_QWORD *)this + 68);
    if (*((_QWORD *)this + 69) != v4)
    {
      v5 = 0;
      do
      {
        Phase::Controller::RenderGroupMgr::SendCopyTo(this, *(Phase::Controller::RenderGroupMgr **)(v4 + 8 * v5++));
        v4 = *((_QWORD *)this + 68);
      }
      while (v5 < (*((_QWORD *)this + 69) - v4) >> 3);
    }
  }
  *((_BYTE *)this + 568) = 0;
}

void sub_21669BB3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::CopyTo(uint64_t *result, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t i;

  v2 = a2;
  v3 = *a2;
  for (i = *result; i; i = *(_QWORD *)(i + 392))
  {
    result = (uint64_t *)Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::Command::Duplicate((int *)i);
    if (!result)
      std::terminate();
    *v2 = result;
    v2 = (uint64_t **)(result + 49);
  }
  *v2 = v3;
  return result;
}

void Phase::Controller::RenderGroupMgr::SendCopyTo(Phase::Controller::RenderGroupMgr *this, Phase::Controller::RenderGroupMgr *a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v3 = (unint64_t *)((char *)a2 + 512);
  v4 = atomic_load((unint64_t *)a2 + 64);
  if ((Phase::Controller::RenderGroupMgr *)((char *)this + 136) != (Phase::Controller::RenderGroupMgr *)v4)
  {
    *(_DWORD *)(v4 + 32) = *((_DWORD *)this + 42);
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,void *> *>>((_QWORD *)v4, *((uint64_t **)this + 19), 0);
    *(_DWORD *)(v4 + 72) = *((_DWORD *)this + 52);
    std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,void *> *>>((_QWORD *)(v4 + 40), *((_QWORD **)this + 24), 0);
    *(_DWORD *)(v4 + 112) = *((_DWORD *)this + 62);
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,void *> *>>((_QWORD *)(v4 + 80), *((uint64_t **)this + 29), 0);
  }
  v6 = (unint64_t *)((char *)a2 + 504);
  v7 = atomic_load(v3);
  do
    v8 = __ldaxr(v6);
  while (__stlxr(v7, v6));
  atomic_store(v8, (unint64_t *)a2 + 64);
  v9 = (unint64_t *)((char *)a2 + 256);
  v10 = atomic_load((unint64_t *)a2 + 63);
  do
    __ldaxr(v9);
  while (__stlxr(v10, v9));
}

uint64_t Phase::Controller::RenderGroupMgr::LoadFreshData(Phase::Controller::RenderGroupMgr *this)
{
  unint64_t *v2;
  unint64_t v3;
  _QWORD *v4;
  char v5;

  v2 = (unint64_t *)((char *)this + 256);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(0, v2));
  if (v3)
  {
    v4 = (_QWORD *)((char *)this + 136);
    if ((Phase::Controller::RenderGroupMgr *)((char *)this + 136) != (Phase::Controller::RenderGroupMgr *)v3)
    {
      *((_DWORD *)this + 42) = *(_DWORD *)(v3 + 32);
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,void *> *>>(v4, *(uint64_t **)(v3 + 16), 0);
      *((_DWORD *)this + 52) = *(_DWORD *)(v3 + 72);
      std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,void *> *>>((_QWORD *)this + 22, *(_QWORD **)(v3 + 56), 0);
      *((_DWORD *)this + 62) = *(_DWORD *)(v3 + 112);
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,void *> *>>((_QWORD *)this + 27, *(uint64_t **)(v3 + 96), 0);
    }
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  *((_BYTE *)this + 568) = v5;
  return Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::ExecuteCommands((unint64_t *)this + 10);
}

_QWORD *Phase::Controller::RenderGroupMgr::Reset(Phase::Controller::RenderGroupMgr *this)
{
  Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::ClearCommands((unint64_t *)this + 10);
  Phase::Controller::RenderGroupMgr::LoadFreshData(this);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)this + 17);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::clear((uint64_t)this + 176);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)this + 27);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)this + 33);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::clear((uint64_t)this + 304);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)this + 43);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)this + 48);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::clear((uint64_t)this + 424);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)this + 58);
  return Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((_QWORD *)this + 13);
}

unint64_t *Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::ClearCommands(unint64_t *result)
{
  unint64_t v1;
  unint64_t v2;

  do
    v1 = __ldaxr(result);
  while (__stlxr(0, result));
  if (v1)
  {
    do
    {
      v2 = *(_QWORD *)(v1 + 392);
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((_QWORD *)(v1 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v1 + 16);
      result = (unint64_t *)MEMORY[0x2199F9D70](v1, 0x1022C40083BFC85);
      v1 = v2;
    }
    while (v2);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,std::shared_ptr<Phase::Controller::Renderer> &>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v5 = a2;
      if (v11 <= a2)
        v5 = a2 % v11;
    }
    else
    {
      v5 = (v11 - 1) & a2;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
    if (v13)
    {
      for (i = (_QWORD *)*v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == a2)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11)
              v15 %= v11;
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v5)
            break;
        }
      }
    }
  }
  v16 = operator new(0x28uLL);
  *v16 = 0;
  v16[1] = a2;
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  if (a5)
  {
    v17 = (unint64_t *)(a5 + 16);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= a2)
        v5 = a2 % v11;
      else
        v5 = a2;
    }
    else
    {
      v5 = (v11 - 1) & a2;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v26)
  {
    *v16 = *v26;
LABEL_41:
    *v26 = v16;
    goto LABEL_42;
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v25 + 8 * v5) = a1 + 16;
  if (*v16)
  {
    v27 = *(_QWORD *)(*v16 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
}

void sub_21669BFE0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  std::__shared_weak_count *v3;

  if (a1)
  {
    v3 = (std::__shared_weak_count *)__p[4];
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__erase_unique<unsigned long long>(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  int8x8_t v5;
  uint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;

  v3 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(a1, a2);
  if (!v3)
    return;
  v4 = v3;
  v5 = (int8x8_t)a1[1];
  v6 = *v3;
  v7 = v3[1];
  v8 = (uint8x8_t)vcnt_s8(v5);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    if (v7 >= *(_QWORD *)&v5)
      v7 %= *(_QWORD *)&v5;
  }
  else
  {
    v7 &= *(_QWORD *)&v5 - 1;
  }
  v9 = *(uint64_t **)(*a1 + 8 * v7);
  do
  {
    v10 = v9;
    v9 = (uint64_t *)*v9;
  }
  while (v9 != v3);
  if (v10 == a1 + 2)
    goto LABEL_20;
  v11 = v10[1];
  if (v8.u32[0] > 1uLL)
  {
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
  }
  else
  {
    v11 &= *(_QWORD *)&v5 - 1;
  }
  if (v11 != v7)
  {
LABEL_20:
    if (v6)
    {
      v12 = *(_QWORD *)(v6 + 8);
      if (v8.u32[0] > 1uLL)
      {
        v13 = *(_QWORD *)(v6 + 8);
        if (v12 >= *(_QWORD *)&v5)
          v13 = v12 % *(_QWORD *)&v5;
      }
      else
      {
        v13 = v12 & (*(_QWORD *)&v5 - 1);
      }
      if (v13 == v7)
        goto LABEL_24;
    }
    *(_QWORD *)(*a1 + 8 * v7) = 0;
    v6 = *v3;
  }
  if (v6)
  {
    v12 = *(_QWORD *)(v6 + 8);
LABEL_24:
    if (v8.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v5)
        v12 %= *(_QWORD *)&v5;
    }
    else
    {
      v12 &= *(_QWORD *)&v5 - 1;
    }
    if (v12 != v7)
    {
      *(_QWORD *)(*a1 + 8 * v12) = v10;
      v6 = *v3;
    }
  }
  *v10 = v6;
  *v3 = 0;
  --a1[3];
  v14 = (std::__shared_weak_count *)v3[4];
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  operator delete(v4);
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>>>::erase(_QWORD *a1, uint64_t *__p)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  v3 = *__p;
  v4 = __p[1];
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v2)
      v4 %= *(_QWORD *)&v2;
  }
  else
  {
    v4 &= *(_QWORD *)&v2 - 1;
  }
  v6 = *(uint64_t **)(*a1 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (uint64_t *)*v6;
  }
  while (v6 != __p);
  if (v7 != a1 + 2)
  {
    v8 = v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v2)
        v8 %= *(_QWORD *)&v2;
    }
    else
    {
      v8 &= *(_QWORD *)&v2 - 1;
    }
    if (v8 == v4)
    {
LABEL_20:
      if (!v3)
        goto LABEL_27;
      goto LABEL_21;
    }
  }
  if (!v3)
    goto LABEL_19;
  v9 = *(_QWORD *)(v3 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v9 >= *(_QWORD *)&v2)
      v9 %= *(_QWORD *)&v2;
  }
  else
  {
    v9 &= *(_QWORD *)&v2 - 1;
  }
  if (v9 != v4)
  {
LABEL_19:
    *(_QWORD *)(*a1 + 8 * v4) = 0;
    v3 = *__p;
    goto LABEL_20;
  }
LABEL_21:
  v10 = *(_QWORD *)(v3 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(_QWORD *)&v2)
      v10 %= *(_QWORD *)&v2;
  }
  else
  {
    v10 &= *(_QWORD *)&v2 - 1;
  }
  if (v10 != v4)
  {
    *(_QWORD *)(*a1 + 8 * v10) = v7;
    v3 = *__p;
  }
LABEL_27:
  *v7 = v3;
  *__p = 0;
  --a1[3];
  operator delete(__p);
}

_QWORD *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__emplace_unique_key_args<Phase::UniqueObjectId,Phase::UniqueObjectId&,Phase::Controller::SubmixParams>(float *a1, _QWORD *a2, _OWORD *a3, __int128 *a4)
{
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v38;

  v8 = 0;
  v9 = 0xCBF29CE484222325;
  do
    v9 = 0x100000001B3 * (v9 ^ *((char *)a2 + v8++));
  while (v8 != 16);
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2 && v13[3] == a2[1])
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x30uLL);
  *v13 = 0;
  v13[1] = v9;
  v16 = *a4;
  *((_OWORD *)v13 + 1) = *a3;
  *((_OWORD *)v13 + 2) = v16;
  v17 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v18 = a1[8];
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = (int8x8_t)v21;
    else
      prime = (int8x8_t)v20;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v10 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v10)
      goto LABEL_36;
    if (*(_QWORD *)&prime < v10)
    {
      v29 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (*(_QWORD *)&prime <= v29)
        prime = (int8x8_t)v29;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v23 = operator new(8 * *(_QWORD *)&prime);
          v24 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v23;
          if (v24)
            operator delete(v24);
          v25 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
          while (*(_QWORD *)&prime != v25);
          v26 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v26)
          {
            v27 = v26[1];
            v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(_QWORD *)&prime)
                v27 %= *(_QWORD *)&prime;
            }
            else
            {
              v27 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = a1 + 4;
            v32 = (_QWORD *)*v26;
            if (*v26)
            {
              do
              {
                v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&prime)
                    v33 %= *(_QWORD *)&prime;
                }
                else
                {
                  v33 &= *(_QWORD *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v26;
                    goto LABEL_61;
                  }
                  *v26 = *v32;
                  *v32 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v33);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v33) = v32;
                  v32 = v26;
                }
                v33 = v27;
LABEL_61:
                v26 = v32;
                v32 = (_QWORD *)*v32;
                v27 = v33;
              }
              while (v32);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_65;
        }
        v38 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v38)
          operator delete(v38);
        v10 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_65:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v34 = *(_QWORD **)a1;
  v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v35)
  {
    *v13 = *v35;
LABEL_78:
    *v35 = v13;
    goto LABEL_79;
  }
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v34[v4] = a1 + 4;
  if (*v13)
  {
    v36 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v36 >= v10)
        v36 %= v10;
    }
    else
    {
      v36 &= v10 - 1;
    }
    v35 = (_QWORD *)(*(_QWORD *)a1 + 8 * v36);
    goto LABEL_78;
  }
LABEL_79:
  ++*((_QWORD *)a1 + 3);
  return v13;
}

void sub_21669C6F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t j;
  uint64_t *v17;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_OWORD *)v8 + 1) = *((_OWORD *)a2 + 1);
      v8[4] = a2[4];
      v9 = *((_OWORD *)a2 + 3);
      v8[8] = a2[8];
      *((_OWORD *)v8 + 3) = v9;
      *((_DWORD *)v8 + 18) = *((_DWORD *)a2 + 18);
      *((_DWORD *)v8 + 19) = *((_DWORD *)a2 + 19);
      *((_DWORD *)v8 + 20) = *((_DWORD *)a2 + 20);
      *((_DWORD *)v8 + 21) = *((_DWORD *)a2 + 21);
      *((_DWORD *)v8 + 22) = *((_DWORD *)a2 + 22);
      *((_DWORD *)v8 + 23) = *((_DWORD *)a2 + 23);
      *((_DWORD *)v8 + 24) = *((_DWORD *)a2 + 24);
      *((_DWORD *)v8 + 25) = *((_DWORD *)a2 + 25);
      memcpy(v8 + 13, a2 + 13, 0x109uLL);
      v10 = *((_OWORD *)a2 + 25);
      *((_OWORD *)v8 + 24) = *((_OWORD *)a2 + 24);
      *((_OWORD *)v8 + 25) = v10;
      v11 = (uint64_t *)*v8;
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__node_insert_multi((uint64_t)a1, v8);
      a2 = (uint64_t *)*a2;
      v8 = v11;
      if (!v11)
        goto LABEL_7;
    }
    do
    {
      v17 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v17;
    }
    while (v17);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v12 = operator new(0x1A0uLL);
      *(_QWORD *)v12 = 0;
      v12[1] = *((_OWORD *)a2 + 1);
      *((_QWORD *)v12 + 4) = a2[4];
      v13 = *((_OWORD *)a2 + 3);
      *((_QWORD *)v12 + 8) = a2[8];
      v12[3] = v13;
      *((_DWORD *)v12 + 18) = *((_DWORD *)a2 + 18);
      *((_DWORD *)v12 + 19) = *((_DWORD *)a2 + 19);
      *((_DWORD *)v12 + 20) = *((_DWORD *)a2 + 20);
      *((_DWORD *)v12 + 21) = *((_DWORD *)a2 + 21);
      *((_DWORD *)v12 + 22) = *((_DWORD *)a2 + 22);
      *((_DWORD *)v12 + 23) = *((_DWORD *)a2 + 23);
      *((_DWORD *)v12 + 24) = *((_DWORD *)a2 + 24);
      *((_DWORD *)v12 + 25) = *((_DWORD *)a2 + 25);
      memcpy((char *)v12 + 104, a2 + 13, 0x109uLL);
      v14 = *((_OWORD *)a2 + 25);
      v12[24] = *((_OWORD *)a2 + 24);
      v12[25] = v14;
      v15 = 0xCBF29CE484222325;
      for (j = 16; j != 32; ++j)
        v15 = 0x100000001B3 * (v15 ^ *((char *)v12 + j));
      *((_QWORD *)v12 + 1) = v15;
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__node_insert_multi((uint64_t)a1, v12);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_21669C900(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_21669C920(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,void *> *>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t v16;
  _QWORD *inserted;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v11 = v4[3];
        v8[2] = v4[2];
        v12 = v4[4];
        if (v12)
        {
          v13 = (unint64_t *)(v12 + 16);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        v15 = (std::__shared_weak_count *)v8[4];
        v8[3] = v11;
        v8[4] = v12;
        if (v15)
          std::__shared_weak_count::__release_weak(v15);
        v10 = (_QWORD *)*v8;
        v16 = v8[2];
        v8[1] = v16;
        inserted = std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__node_insert_multi_prepare((uint64_t)a1, v16, v8 + 2);
        std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform(a1, v8, inserted);
        v4 = (_QWORD *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    v18 = operator new(0x28uLL);
    v19 = v18;
    *v18 = 0;
    v18[1] = 0;
    v20 = v4[2];
    v21 = v4[3];
    v18[2] = v20;
    v22 = v4[4];
    v18[3] = v21;
    v18[4] = v22;
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 16);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v18[1] = v20;
    v25 = std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__node_insert_multi_prepare((uint64_t)a1, v20, v18 + 2);
    std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform(a1, v19, v25);
    v4 = (_QWORD *)*v4;
  }
}

void sub_21669CA9C(void *a1)
{
  int v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_21669CAB4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  _QWORD *i;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint8x8_t v26;
  unint64_t v27;
  _QWORD *v28;
  int v29;
  _QWORD *result;
  unint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  int v34;
  void *v35;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      prime = (int8x8_t)v11;
    else
      prime = (int8x8_t)v10;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_74;
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_43;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * *(_QWORD *)&prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (*(_QWORD *)&prime != v15);
      v16 = *(_QWORD **)(a1 + 16);
      if (v16)
      {
        v17 = v16[1];
        v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&prime)
            v17 %= *(_QWORD *)&prime;
        }
        else
        {
          v17 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = a1 + 16;
        for (i = (_QWORD *)*v16; *v16; i = (_QWORD *)*v16)
        {
          v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&prime)
              v23 %= *(_QWORD *)&prime;
          }
          else
          {
            v23 &= *(_QWORD *)&prime - 1;
          }
          if (v23 == v17)
          {
            v16 = i;
          }
          else
          {
            v24 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              do
              {
                v25 = v24;
                v24 = (_QWORD *)*v24;
              }
              while (v24 && i[2] == v24[2]);
              *v16 = v24;
              *v25 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v16;
              v16 = i;
              v17 = v23;
            }
          }
        }
      }
      v6 = (unint64_t)prime;
    }
    else
    {
      v35 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v35)
        operator delete(v35);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v27 = a2;
    if (v6 <= a2)
      v27 = a2 % v6;
  }
  else
  {
    v27 = (v6 - 1) & a2;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v27);
  if (!v28)
    return 0;
  v29 = 0;
  do
  {
    result = v28;
    v28 = (_QWORD *)*v28;
    if (!v28)
      break;
    v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      v32 = v28[1];
      if (v31 >= v6)
        v32 = v31 % v6;
    }
    else
    {
      v32 = v31 & (v6 - 1);
    }
    if (v32 != v27)
      break;
    v33 = v31 == a2 && v28[2] == *a3;
    v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_OWORD *)v8 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)v8 + 2) = *((_OWORD *)a2 + 2);
      v9 = (uint64_t *)*v8;
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__node_insert_multi(a1, v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_9;
    }
    do
    {
      v10 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__emplace_multi<std::pair<Phase::UniqueObjectId const,Phase::Controller::SubmixParams> const&>(a1, (_OWORD *)a2 + 1);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_21669CEF0(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_21669CF10(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__node_insert_multi(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t i;
  _QWORD *inserted;

  v4 = a2 + 2;
  v5 = 0xCBF29CE484222325;
  for (i = 16; i != 32; ++i)
    v5 = 0x100000001B3 * (v5 ^ *((char *)a2 + i));
  a2[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

_QWORD *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  _QWORD *i;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint8x8_t v27;
  unint64_t v28;
  _QWORD *v29;
  int v30;
  _QWORD *result;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  _BOOL4 v35;
  int v36;
  void *v37;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      prime = (int8x8_t)v11;
    else
      prime = (int8x8_t)v10;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_82;
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_46;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_46;
    }
    if (prime)
    {
LABEL_82:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * *(_QWORD *)&prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (*(_QWORD *)&prime != v15);
      v16 = *(_QWORD **)(a1 + 16);
      if (v16)
      {
        v17 = v16[1];
        v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&prime)
            v17 %= *(_QWORD *)&prime;
        }
        else
        {
          v17 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = a1 + 16;
        for (i = (_QWORD *)*v16; *v16; i = (_QWORD *)*v16)
        {
          v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&prime)
              v23 %= *(_QWORD *)&prime;
          }
          else
          {
            v23 &= *(_QWORD *)&prime - 1;
          }
          if (v23 == v17)
          {
            v16 = i;
          }
          else
          {
            v24 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              do
              {
                v25 = v24;
                v24 = (_QWORD *)*v24;
                if (!v24)
                  break;
              }
              while (i[2] == v24[2] && i[3] == v24[3]);
              *v16 = v24;
              *v25 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v16;
              v16 = i;
              v17 = v23;
            }
          }
        }
      }
      v6 = (unint64_t)prime;
    }
    else
    {
      v37 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v37)
        operator delete(v37);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_46:
  v27 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v27.i16[0] = vaddlv_u8(v27);
  if (v27.u32[0] > 1uLL)
  {
    v28 = a2;
    if (v6 <= a2)
      v28 = a2 % v6;
  }
  else
  {
    v28 = (v6 - 1) & a2;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
  if (!v29)
    return 0;
  v30 = 0;
  do
  {
    result = v29;
    v29 = (_QWORD *)*v29;
    if (!v29)
      break;
    v32 = v29[1];
    if (v27.u32[0] > 1uLL)
    {
      v33 = v29[1];
      if (v32 >= v6)
        v33 = v32 % v6;
    }
    else
    {
      v33 = v32 & (v6 - 1);
    }
    if (v33 != v28)
      break;
    if (v32 == a2)
    {
      v34 = v29[2] == *a3 && v29[3] == a3[1];
      v35 = v34;
    }
    else
    {
      v35 = 0;
    }
    v36 = v30 & !v35;
    v30 |= v35;
  }
  while (v36 != 1);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__emplace_multi<std::pair<Phase::UniqueObjectId const,Phase::Controller::SubmixParams> const&>(_QWORD *a1, _OWORD *a2)
{
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t i;

  v4 = operator new(0x30uLL);
  *(_QWORD *)v4 = 0;
  v5 = a2[1];
  v4[1] = *a2;
  v4[2] = v5;
  v6 = 0xCBF29CE484222325;
  for (i = 16; i != 32; ++i)
    v6 = 0x100000001B3 * (v6 ^ *((char *)v4 + i));
  *((_QWORD *)v4 + 1) = v6;
  return std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__node_insert_multi(a1, v4);
}

void sub_21669D374(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__assign_alt[abi:ne180100]<4ul,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  void *result;

  if (*(_DWORD *)(a1 + 352) != 4)
    return (void *)std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<4ul,std::pair<Phase::SpatialModeler::RenderGroup,BOOL> const&>(a1, (__int128 *)a3);
  v5 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = v5;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a3 + 36);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a3 + 44);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a3 + 52);
  result = memcpy((void *)(a2 + 56), (const void *)(a3 + 56), 0x109uLL);
  *(_BYTE *)(a2 + 336) = *(_BYTE *)(a3 + 336);
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<4ul,std::pair<Phase::SpatialModeler::RenderGroup,BOOL> const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v4])(&v7, a1);
  *(_DWORD *)(a1 + 352) = -1;
  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 + 7);
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 11);
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(_DWORD *)(a1 + 52) = *((_DWORD *)a2 + 13);
  memcpy((void *)(a1 + 56), (char *)a2 + 56, 0x109uLL);
  *(_BYTE *)(a1 + 336) = *((_BYTE *)a2 + 336);
  *(_DWORD *)(a1 + 352) = 4;
  return a1;
}

uint64_t std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>::operator=[abi:ne180100]<Phase::UniqueObjectId const&,0,Phase::UniqueObjectId,2ul,0>(uint64_t a1, _OWORD *a2)
{
  if (*(_DWORD *)(a1 + 352) == 2)
    *(_OWORD *)a1 = *a2;
  else
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<2ul,Phase::UniqueObjectId const&>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<2ul,Phase::UniqueObjectId const&>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v4])(&v6, a1);
  *(_DWORD *)(a1 + 352) = -1;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 352) = 2;
  return a1;
}

uint64_t std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>::operator=[abi:ne180100]<std::pair<Phase::UniqueObjectId,unsigned long long> const&,0,std::pair<Phase::UniqueObjectId,unsigned long long>,6ul,0>(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 352) == 6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<6ul,std::pair<Phase::UniqueObjectId,unsigned long long> const&>(a1, (__int128 *)a2);
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<6ul,std::pair<Phase::UniqueObjectId,unsigned long long> const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v4])(&v7, a1);
  *(_DWORD *)(a1 + 352) = -1;
  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *(_DWORD *)(a1 + 352) = 6;
  return a1;
}

uint64_t std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>::operator=[abi:ne180100]<std::pair<Phase::UniqueObjectId,double> const&,0,std::pair<Phase::UniqueObjectId,double>,5ul,0>(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 352) == 5)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<5ul,std::pair<Phase::UniqueObjectId,double> const&>(a1, (__int128 *)a2);
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<5ul,std::pair<Phase::UniqueObjectId,double> const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v4])(&v7, a1);
  *(_DWORD *)(a1 + 352) = -1;
  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *(_DWORD *)(a1 + 352) = 5;
  return a1;
}

_QWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__assign_alt[abi:ne180100]<7ul,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>> const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*(_DWORD *)(a1 + 352) == 7)
    return std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>::operator=[abi:ne180100](a2, a3);
  else
    return (_QWORD *)std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<7ul,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>> const&>(a1, a3);
}

_QWORD *std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>::operator=[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;

  v3 = a2[1];
  *a1 = *a2;
  v4 = a2[2];
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[2];
  a1[1] = v3;
  a1[2] = v4;
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<7ul,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>> const&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char v10;

  v4 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v4])(&v10, a1);
  *(_DWORD *)(a1 + 352) = -1;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  *(_QWORD *)(a1 + 16) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_DWORD *)(a1 + 352) = 7;
  return a1;
}

uint64_t std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>::operator=[abi:ne180100]<std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory> const&,0,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>,8ul,0>(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  if (*(_DWORD *)(a1 + 352) == 8)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v3 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v3;
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<8ul,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory> const&>(a1, (__int128 *)a2);
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<8ul,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory> const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  char v8;

  v4 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v4])(&v8, a1);
  *(_DWORD *)(a1 + 352) = -1;
  v5 = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 352) = 8;
  return a1;
}

uint64_t Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::SortCommandList(uint64_t result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  _QWORD *v8;

  if (a2)
  {
    v4 = a2;
    v5 = result;
    do
    {
      while (1)
      {
        v6 = v4;
        v4 = (unsigned int *)*((_QWORD *)v4 + 49);
        v7 = *v6;
        if ((_DWORD)v7)
          break;
        Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::SortCommandList(v5, *((_QWORD *)v6 + 48), a3);
        *((_QWORD *)v6 + 48) = 0;
        v8 = v6 + 96;
LABEL_9:
        Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear(v8);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v6 + 4));
        result = MEMORY[0x2199F9D70](v6, 0x1022C40083BFC85);
        if (!v4)
          return result;
      }
      if ((int)v7 > 9)
      {
        v8 = v6 + 96;
        goto LABEL_9;
      }
      *((_QWORD *)v6 + 49) = *(_QWORD *)(a3 + 8 * v7);
      *(_QWORD *)(a3 + 8 * v7) = v6;
    }
    while (v4);
  }
  return result;
}

void std::vector<Phase::Controller::RenderGroupMgr *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::Command::Duplicate(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v6;

  v2 = operator new();
  v3 = v2;
  *(_DWORD *)(v2 + 368) = 0;
  *(_QWORD *)(v2 + 384) = 0;
  *(_QWORD *)(v2 + 392) = 0;
  v4 = *a1;
  *(_DWORD *)v2 = *a1;
  if (v4)
  {
    if ((v4 - 10) < 2)
      std::terminate();
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1> const&>(v2 + 16, (uint64_t)(a1 + 4));
  }
  else
  {
    v6 = 0;
    Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::CopyTo(a1 + 96, &v6);
    *(_QWORD *)(v3 + 384) = v6;
    v6 = 0;
    Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear(&v6);
  }
  return v3;
}

void sub_21669DA64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 352);
  v4 = *(unsigned int *)(a2 + 352);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 352) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8ne180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRSV_OT0_E_JRSO_SU_EEEDcmSW_DpOT0____fdiagonal[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 352);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 352) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 352);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 352) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 352) != 2)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<2ul,Phase::UniqueObjectId const&>(result, a3);
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 352);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      v7 = *a3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)a2 = v7;
      *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
      *(_DWORD *)(a2 + 28) = *((_DWORD *)a3 + 7);
      *(_DWORD *)(a2 + 32) = *((_DWORD *)a3 + 8);
      *(_DWORD *)(a2 + 36) = *((_DWORD *)a3 + 9);
      *(_DWORD *)(a2 + 40) = *((_DWORD *)a3 + 10);
      *(_DWORD *)(a2 + 44) = *((_DWORD *)a3 + 11);
      *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
      *(_DWORD *)(a2 + 52) = *((_DWORD *)a3 + 13);
      memcpy((void *)(a2 + 56), (char *)a3 + 56, 0x109uLL);
      v9 = *((_QWORD *)a3 + 42);
      v8 = *((_QWORD *)a3 + 43);
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 16);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v12 = *(std::__shared_weak_count **)(a2 + 344);
      *(_QWORD *)(a2 + 336) = v9;
      *(_QWORD *)(a2 + 344) = v8;
      if (v12)
        std::__shared_weak_count::__release_weak(v12);
      return;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v5])(&v17, v4);
  }
  *(_DWORD *)(v4 + 352) = -1;
  v13 = *a3;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v4 = v13;
  *(_DWORD *)(v4 + 24) = *((_DWORD *)a3 + 6);
  *(_DWORD *)(v4 + 28) = *((_DWORD *)a3 + 7);
  *(_DWORD *)(v4 + 32) = *((_DWORD *)a3 + 8);
  *(_DWORD *)(v4 + 36) = *((_DWORD *)a3 + 9);
  *(_DWORD *)(v4 + 40) = *((_DWORD *)a3 + 10);
  *(_DWORD *)(v4 + 44) = *((_DWORD *)a3 + 11);
  *(_DWORD *)(v4 + 48) = *((_DWORD *)a3 + 12);
  *(_DWORD *)(v4 + 52) = *((_DWORD *)a3 + 13);
  memcpy((void *)(v4 + 56), (char *)a3 + 56, 0x109uLL);
  v14 = *((_QWORD *)a3 + 43);
  *(_QWORD *)(v4 + 336) = *((_QWORD *)a3 + 42);
  *(_QWORD *)(v4 + 344) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 16);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_DWORD *)(v4 + 352) = 3;
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__assign_alt[abi:ne180100]<4ul,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL> const&>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 352) != 5)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<5ul,std::pair<Phase::UniqueObjectId,double> const&>(result, (__int128 *)a3);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 352) != 6)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<6ul,std::pair<Phase::UniqueObjectId,unsigned long long> const&>(result, (__int128 *)a3);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  return result;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__assign_alt[abi:ne180100]<7ul,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>> const&>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  __int128 v4;

  result = *a1;
  if (*(_DWORD *)(result + 352) != 8)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<8ul,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory> const&>(result, (__int128 *)a3);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

int64x2_t *Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(Phase::DspLayer::ResidentSampler *this)
{
  char *v1;
  int64x2_t *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  void *__p[2];
  char v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v1 = (char *)malloc_type_malloc(0x1F8uLL, 0x1050040B063AAFAuLL);
  *(_QWORD *)v1 = "Rate";
  *((_QWORD *)v1 + 1) = 0x500000000;
  *(_QWORD *)(v1 + 20) = 0x200000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2166F7740;
  *((_QWORD *)v1 + 6) = 0x3FF0000000000000;
  *((_QWORD *)v1 + 7) = "Gain";
  *((_QWORD *)v1 + 8) = 0x500000001;
  *(_QWORD *)(v1 + 76) = 0x100000000;
  *((_DWORD *)v1 + 21) = 3;
  *(_OWORD *)(v1 + 88) = xmmword_21673A710;
  *((_QWORD *)v1 + 13) = 0x3FF0000000000000;
  *((_QWORD *)v1 + 14) = "ReferenceHF";
  *((_QWORD *)v1 + 15) = 0x500000002;
  *(_QWORD *)(v1 + 132) = 0x100000000;
  *((_DWORD *)v1 + 35) = 3;
  *((_OWORD *)v1 + 9) = xmmword_21673A770;
  *((_QWORD *)v1 + 20) = 0x40B3880000000000;
  *((_QWORD *)v1 + 21) = "GainHF";
  *((_QWORD *)v1 + 22) = 0x500000003;
  *(_QWORD *)(v1 + 188) = 0x100000000;
  *((_DWORD *)v1 + 49) = 3;
  *(_OWORD *)(v1 + 200) = xmmword_21673A9A0;
  *((_QWORD *)v1 + 27) = 0x3FF0000000000000;
  *((_QWORD *)v1 + 28) = "ReferenceLF";
  *((_QWORD *)v1 + 29) = 0x500000004;
  *(_QWORD *)(v1 + 244) = 0x100000000;
  *((_DWORD *)v1 + 63) = 3;
  *((_OWORD *)v1 + 16) = xmmword_21673A770;
  *((_QWORD *)v1 + 34) = 0x407F400000000000;
  *((_QWORD *)v1 + 35) = "GainLF";
  *((_QWORD *)v1 + 36) = 0x500000005;
  *((_DWORD *)v1 + 75) = 0;
  *((_QWORD *)v1 + 38) = 0x300000001;
  *((_QWORD *)v1 + 39) = 0x3EE4F8B580000000;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)v1 + 20) = _Q1;
  *((_QWORD *)v1 + 42) = "SeekPointInSeconds";
  *((_QWORD *)v1 + 43) = 0x500000006;
  *((_DWORD *)v1 + 89) = 0;
  *((_QWORD *)v1 + 45) = 0x300000002;
  *((_OWORD *)v1 + 23) = xmmword_21673A780;
  *((_QWORD *)v1 + 48) = 0;
  *((_QWORD *)v1 + 49) = "Gain Interpolation Duration";
  *((_QWORD *)v1 + 50) = 0x500000007;
  *((_DWORD *)v1 + 103) = 0;
  *((_QWORD *)v1 + 52) = 0x300000001;
  *((_QWORD *)v1 + 53) = 0;
  *((_OWORD *)v1 + 27) = xmmword_21673A790;
  *((_QWORD *)v1 + 56) = "Gain Damping Constant";
  *((_QWORD *)v1 + 57) = 0x500000008;
  *((_DWORD *)v1 + 117) = 0;
  *((_QWORD *)v1 + 59) = 0x300000001;
  *((_OWORD *)v1 + 30) = xmmword_21673A730;
  *((_QWORD *)v1 + 62) = 0x3FF0000000000000;
  v7 = (int64x2_t *)operator new();
  v15[0] = &off_24D580C58;
  v16 = v15;
  Phase::Controller::VoicePoolEntry::VoicePoolEntry((uint64_t)v7, "ResidentSampler", 9, (uint64_t)v1, (uint64_t)v15);
  v8 = v16;
  if (v16 == v15)
  {
    v9 = 4;
    v8 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(__p, "Output");
  Phase::Controller::VoicePoolEntry::AddOutput(v7->i64, (__int128 *)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v11, "buffer0");
  Phase::Controller::VoicePoolEntry::AddBuffer(v7, 0, (uint64_t)v11, 3, 1);
  if (v12 < 0)
    operator delete(v11[0]);
  return v7;
}

void sub_21669E188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::ResidentSampler::~ResidentSampler(Phase::DspLayer::ResidentSampler *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);
  JUMPOUT(0x2199F9D70);
}

void `anonymous namespace'::ResidentSamplerSlice::~ResidentSamplerSlice(_anonymous_namespace_::ResidentSamplerSlice *this)
{
  JUMPOUT(0x2199F9D70);
}

double `anonymous namespace'::ResidentSamplerSlice::Reset(_anonymous_namespace_::ResidentSamplerSlice *this, Phase::DspLayer::VoiceEngine *a2)
{
  uint64_t v3;
  uint64_t v10;
  double result;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v3 = 0;
  v14 = *MEMORY[0x24BDAC8D0];
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 1) = _Q0;
  *((_OWORD *)this + 2) = _Q0;
  __asm { FMOV            V1.4S, #1.0 }
  *((_OWORD *)this + 3) = _Q1;
  *((int32x4_t *)this + 4) = vdupq_n_s32(0x459C4000u);
  *((_OWORD *)this + 5) = _Q1;
  *((int32x4_t *)this + 6) = vdupq_n_s32(0x43FA0000u);
  *((_OWORD *)this + 7) = _Q1;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((int32x4_t *)this + 11) = vdupq_n_s32(0x3C888889u);
  *((_OWORD *)this + 12) = _Q1;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  v12 = _Q1;
  v13 = xmmword_2166F7490;
  do
  {
    *((_DWORD *)this + *(int *)((char *)&v12 + v3 + 16) + 200) = *(_DWORD *)((char *)&v12 + v3);
    v3 += 4;
  }
  while (v3 != 16);
  v10 = 0;
  v13 = xmmword_2166F7490;
  v12 = 0uLL;
  do
  {
    *((_DWORD *)this + *(int *)((char *)&v12 + v10 + 16) + 204) = *(_DWORD *)((char *)&v12 + v10);
    v10 += 4;
  }
  while (v10 != 16);
  (*(void (**)(_anonymous_namespace_::ResidentSamplerSlice *, Phase::DspLayer::VoiceEngine *))(*(_QWORD *)this + 48))(this, a2);
  result = 0.0;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  return result;
}

uint64_t `anonymous namespace'::ResidentSamplerSlice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t result;

  v5 = (_QWORD *)(a1 + 8 * a3);
  v5[2] = 0x3FF0000000000000;
  v6 = (_DWORD *)(a1 + 4 * a3);
  v6[12] = 1065353216;
  v6[16] = 1167867904;
  v6[20] = 1065353216;
  v6[24] = 1140457472;
  v6[28] = 1065353216;
  v5[16] = 0;
  v6[40] = 0;
  v6[44] = 1015580809;
  *(_QWORD *)(a1 + 224 + 8 * a3) = 0;
  v6[48] = 1065353216;
  *(_DWORD *)(a1 + 224 + 4 * a3 + 32) = 0;
  *(_DWORD *)(a1 + 672 + 4 * a3) = 0;
  v7 = 4 * a3 + 16;
  *(_DWORD *)(a1 + 672 + v7) = 0;
  *(_DWORD *)(a1 + 704 + 4 * a3) = 0;
  v6[52] = 0;
  *(_DWORD *)(a1 + 704 + v7) = 0;
  *(_DWORD *)(a1 + 736 + 4 * a3) = 0;
  v5[80] = 0;
  *(_DWORD *)(a1 + 736 + v7) = 0;
  *(_DWORD *)(a1 + 768 + 4 * a3) = 0;
  *(_DWORD *)(a1 + 768 + v7) = 0;
  v6[200] = 1065353216;
  v6[204] = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5[104] = a4;
  return result;
}

double `anonymous namespace'::ResidentSamplerSlice::GetParameter(_anonymous_namespace_::ResidentSamplerSlice *this, int a2, int a3)
{
  double result;
  float v4;

  switch(a2)
  {
    case 0:
      return *((double *)this + a3 + 2);
    case 1:
      v4 = *((float *)this + a3 + 12);
      goto LABEL_12;
    case 2:
      v4 = *((float *)this + a3 + 16);
      goto LABEL_12;
    case 3:
      v4 = *((float *)this + a3 + 20);
      goto LABEL_12;
    case 4:
      v4 = *((float *)this + a3 + 24);
      goto LABEL_12;
    case 5:
      v4 = *((float *)this + a3 + 28);
      goto LABEL_12;
    case 6:
      return *((double *)this + a3 + 16);
    case 7:
      v4 = *((float *)this + a3 + 44);
      goto LABEL_12;
    case 8:
      v4 = *((float *)this + a3 + 48);
LABEL_12:
      result = v4;
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

uint64_t `anonymous namespace'::ResidentSamplerSlice::SetParameter(_anonymous_namespace_::ResidentSamplerSlice *this, int a2, int a3, double a4)
{
  uint64_t result;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  switch(a2)
  {
    case 0:
      result = 0;
      *((double *)this + a3 + 2) = a4;
      break;
    case 1:
      result = 0;
      v6 = a4;
      *((float *)this + a3 + 12) = v6;
      break;
    case 2:
      result = 0;
      v7 = a4;
      *((float *)this + a3 + 16) = v7;
      break;
    case 3:
      result = 0;
      v8 = a4;
      *((float *)this + a3 + 20) = v8;
      break;
    case 4:
      result = 0;
      v9 = a4;
      *((float *)this + a3 + 24) = v9;
      break;
    case 5:
      result = 0;
      v10 = a4;
      *((float *)this + a3 + 28) = v10;
      break;
    case 6:
      if (a4 < 0.0 || **((double **)this + 108) * a4 >= (double)*((int *)this + a3 + 64))
      {
        result = 11;
      }
      else
      {
        result = 0;
        *((double *)this + a3 + 16) = a4;
        *((_DWORD *)this + a3 + 40) = 1;
      }
      break;
    case 7:
      result = 0;
      v11 = a4;
      *((float *)this + a3 + 44) = v11;
      break;
    case 8:
      result = 0;
      v12 = a4;
      *((float *)this + a3 + 48) = v12;
      break;
    default:
      result = 9;
      break;
  }
  return result;
}

float32x4_t `anonymous namespace'::ResidentSamplerSlice::UpdateParameters(uint64_t a1, uint64_t a2)
{
  int32x4_t v4;
  float32x4_t v5;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  __int128 v24;
  float32x4_t v25;
  float32x4_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  float32x4_t v30;
  float32x4_t result;
  int64x2_t v32;
  float64x2_t v33;
  simd_float4 v34;
  float32x4_t v35;
  float32x4_t v36;
  simd_float4 v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  simd_float4 v42;
  simd_float4 x;
  simd_float4 xa;
  float32x4_t v45;
  float32x4_t v46;
  simd_float4 v47;
  float32x4_t v48;
  simd_float4 v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  simd_float4 v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;

  v4 = *(int32x4_t *)(a1 + 256);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a1 + 240);
  *(int32x4_t *)(a1 + 624) = v4;
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a1 + 224);
  v4.i64[0] = -1;
  v4.i64[1] = -1;
  v53 = *(int32x4_t *)(a1 + 624);
  v54 = vaddq_s32(v53, v4);
  v59 = _simd_log10_f4(*(simd_float4 *)(a1 + 80));
  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  v47 = _simd_exp10_f4((simd_float4)vmulq_f32((float32x4_t)v59, v5));
  __asm { FMOV            V1.4S, #1.0 }
  v62 = _Q1;
  v55 = vaddq_f32((float32x4_t)v47, _Q1);
  __asm { FMOV            V1.4S, #-1.0 }
  v41 = _Q1;
  v57 = vaddq_f32((float32x4_t)v47, _Q1);
  v39 = (float32x4_t)vdupq_n_s32(0x40C90FDBu);
  x = (simd_float4)vmulq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 64), *(float *)(a2 + 8)), v39);
  v49 = _simd_cos_f4(x);
  v51 = vmulq_f32(v57, (float32x4_t)v49);
  v45 = vaddq_f32(v55, v51);
  v12 = (float32x4_t)_simd_exp10_f4(v59);
  v60 = vmulq_f32(v57, vnegq_f32(v57));
  v38 = (float32x4_t)vdupq_n_s32(0x3F9837F0u);
  v13 = vmulq_f32((float32x4_t)_simd_sin_f4(x), vmlaq_f32(v60, v38, vsqrtq_f32(vaddq_f32(v12, v62))));
  v14 = vsubq_f32(v55, v51);
  v15 = vdivq_f32(v62, vaddq_f32(v14, v13));
  v52 = vmulq_f32(vmulq_f32((float32x4_t)v47, vaddq_f32(v45, v13)), v15);
  v16 = vmulq_f32(v55, (float32x4_t)v49);
  v17.i64[0] = 0xC0000000C0000000;
  v17.i64[1] = 0xC0000000C0000000;
  v18 = vmulq_f32(vmulq_f32(vmulq_f32((float32x4_t)v47, v17), vaddq_f32(v57, v16)), v15);
  v48 = vmulq_f32(vmulq_f32((float32x4_t)v47, vsubq_f32(v45, v13)), v15);
  v50 = v18;
  v19 = vsubq_f32(v57, v16);
  xa = (simd_float4)vmulq_f32(vsubq_f32(v14, v13), v15);
  v46 = vmulq_f32(vaddq_f32(v19, v19), v15);
  v36 = (float32x4_t)_simd_log10_f4(*(simd_float4 *)(a1 + 112));
  v20.i64[0] = 0x3F0000003F000000;
  v20.i64[1] = 0x3F0000003F000000;
  v37 = _simd_exp10_f4((simd_float4)vmulq_f32(v36, v20));
  v56 = vaddq_f32((float32x4_t)v37, v62);
  v58 = vaddq_f32((float32x4_t)v37, v41);
  v34 = (simd_float4)vmulq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 96), *(float *)(a2 + 8)), v39);
  v42 = _simd_cos_f4(v34);
  v35 = vmulq_f32(v58, (float32x4_t)v42);
  v40 = vsubq_f32(v56, v35);
  v61 = vmlaq_f32(v60, v38, vsqrtq_f32(vaddq_f32((float32x4_t)_simd_exp10_f4((simd_float4)v36), v62)));
  v21 = vmulq_f32((float32x4_t)_simd_sin_f4(v34), v61);
  v22 = vaddq_f32(v56, v35);
  v23 = vdivq_f32(v62, vaddq_f32(v22, v21));
  v24 = *(_OWORD *)(a1 + 208);
  *(int32x4_t *)(a1 + 272) = v53;
  *(int32x4_t *)(a1 + 288) = v54;
  v25 = vmulq_f32(v56, (float32x4_t)v42);
  v26 = vmulq_f32(vmulq_f32((float32x4_t)v37, vsubq_f32(v40, v21)), v23);
  v27 = *(_OWORD *)(a1 + 16);
  v29 = *(_OWORD *)(a1 + 32);
  v28 = *(_OWORD *)(a1 + 48);
  *(float32x4_t *)(a1 + 304) = v52;
  *(float32x4_t *)(a1 + 320) = v50;
  v30.i64[0] = 0xC0000000C0000000;
  v30.i64[1] = 0xC0000000C0000000;
  *(float32x4_t *)(a1 + 336) = v48;
  *(float32x4_t *)(a1 + 352) = v46;
  *(simd_float4 *)(a1 + 368) = xa;
  *(float32x4_t *)(a1 + 384) = vmulq_f32(vmulq_f32((float32x4_t)v37, vaddq_f32(v40, v21)), v23);
  result = vmulq_f32(vsubq_f32(v22, v21), v23);
  v32.i64[0] = v53.i32[2];
  v32.i64[1] = v53.i32[3];
  v33 = vcvtq_f64_s64(v32);
  *(float32x4_t *)(a1 + 400) = vmulq_f32(vmulq_f32(vaddq_f32((float32x4_t)v37, (float32x4_t)v37), vsubq_f32(v58, v25)), v23);
  *(float32x4_t *)(a1 + 416) = v26;
  v32.i64[0] = v53.i32[0];
  v32.i64[1] = v53.i32[1];
  *(float32x4_t *)(a1 + 432) = vmulq_f32(vmulq_f32(vaddq_f32(v58, v25), v30), v23);
  *(float32x4_t *)(a1 + 448) = result;
  *(_OWORD *)(a1 + 464) = v24;
  *(_OWORD *)(a1 + 480) = v28;
  *(_OWORD *)(a1 + 496) = v27;
  *(_OWORD *)(a1 + 512) = v29;
  *(float64x2_t *)(a1 + 528) = vcvtq_f64_s64(v32);
  *(float64x2_t *)(a1 + 544) = v33;
  return result;
}

double `anonymous namespace'::ResidentSamplerSlice::UpdateParameters(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  _DWORD *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  __float2 v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  __float2 v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  double result;
  float v47;
  float v48;
  float v49;
  int v50;
  float v51;
  float v52;
  uint64_t v53;

  v6 = a3;
  *(_QWORD *)(a1 + 592 + 8 * a3) = *(_QWORD *)(a1 + 224 + 8 * a3);
  v7 = *(_DWORD *)(a1 + 224 + 4 * a3 + 32);
  *(_DWORD *)(a1 + 592 + 4 * a3 + 32) = v7;
  v8 = a1 + 4 * a3;
  v9 = log10f(*(float *)(v8 + 80));
  v10 = __exp10f(v9 * 0.5);
  v51 = *(float *)(v8 + 64);
  v11 = *(float *)(a2 + 8);
  v52 = __exp10f(v9);
  v12 = log10f(*(float *)(v8 + 112));
  v13 = __exp10f(v12 * 0.5);
  v14 = *(float *)(v8 + 96);
  v15 = __exp10f(v12);
  v17 = *(_DWORD *)(v8 + 160);
  v16 = (_DWORD *)(v8 + 160);
  v18 = v16[12];
  v19 = *(v16 - 28);
  if (v17)
    *(double *)(a1 + 8 * v6 + 640) = *(double *)(a1 + 8 * v6 + 128) * *(double *)a2;
  v53 = *(_QWORD *)(a1 + 8 * a3 + 16);
  v20 = a1 + 4 * v6;
  v21 = *(float *)(v20 + 176);
  v50 = v19;
  if (v21 >= 0.001)
  {
    v22 = 6.2832 / v21;
    v23 = v22 * v22;
    v24 = v22 * (float)(*(float *)(v20 + 192) + *(float *)(v20 + 192));
    *(float *)(v20 + 560) = v23;
    *(float *)(v20 + 576) = v24;
  }
  else
  {
    *(_DWORD *)(v20 + 816) = 0;
    *(_DWORD *)(v20 + 800) = v19;
  }
  v25 = __sincosf_stret((float)(v11 * v14) * 6.2832);
  v26 = (float)(v13 + -1.0) * v25.__cosval;
  v27 = (float)(v13 + 1.0) + v26;
  v28 = sqrtf(v15 + 1.0);
  v29 = v10 + -1.0;
  v30 = v25.__sinval * (float)((float)(v28 * 1.1892) - (float)(v29 * v29));
  v31 = v27 - v30;
  v32 = 1.0 / (float)(v27 + v30);
  v49 = v31 * v32;
  v33 = (float)(v13 + 1.0) * v25.__cosval;
  v34 = (float)(v13 + 1.0) - v26;
  v47 = (float)(v13 * (float)(v34 - v30)) * v32;
  v48 = (float)((float)((float)(v13 + -1.0) + v33) * -2.0) * v32;
  v35 = (float)((float)(v13 + v13) * (float)((float)(v13 + -1.0) - v33)) * v32;
  v36 = (float)(v13 * (float)(v34 + v30)) * v32;
  v37 = __sincosf_stret((float)(v51 * v11) * 6.2832);
  v38 = (float)(v10 + -1.0) * v37.__cosval;
  v39 = (float)(v10 + 1.0) - v38;
  v40 = v37.__sinval * (float)((float)(sqrtf(v52 + 1.0) * 1.1892) - (float)(v29 * v29));
  v41 = 1.0 / (float)(v39 + v40);
  v42 = (float)(v10 + 1.0) * v37.__cosval;
  v43 = (float)(v10 + 1.0) + v38;
  v44 = a1 + 4 * v6;
  *(_DWORD *)(v44 + 272) = v7;
  *(_DWORD *)(v44 + 288) = v7 - 1;
  *(float *)(v44 + 304) = (float)(v10 * (float)(v43 + v40)) * v41;
  *(float *)(v44 + 320) = (float)((float)(v10 * -2.0) * (float)((float)(v10 + -1.0) + v42)) * v41;
  *(float *)(v44 + 336) = (float)(v10 * (float)(v43 - v40)) * v41;
  *(float *)(v44 + 352) = (float)((float)((float)(v10 + -1.0) - v42) + (float)((float)(v10 + -1.0) - v42)) * v41;
  *(float *)(v44 + 368) = (float)(v39 - v40) * v41;
  *(float *)(v44 + 384) = v36;
  *(float *)(v44 + 400) = v35;
  *(float *)(v44 + 416) = v47;
  *(float *)(v44 + 432) = v48;
  *(float *)(v44 + 448) = v49;
  *(_DWORD *)(v44 + 464) = v18;
  *(_DWORD *)(v44 + 480) = v50;
  v45 = a1 + 8 * v6;
  *(_QWORD *)(v45 + 496) = v53;
  result = (double)v7;
  *(double *)(v45 + 528) = (double)v7;
  *v16 = 0;
  return result;
}

__n128 `anonymous namespace'::ResidentSamplerSlice::Run(_anonymous_namespace_::ResidentSamplerSlice *this, Phase::DspLayer::VoiceEngine *a2, Phase::DspLayer::VoicePool *a3, int a4)
{
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float32x4_t v13;
  int v14;
  unint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x4_t v26;
  int32x4_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  float64x2_t v51;
  float64x2_t v52;
  int32x4_t v53;
  int8x16_t v54;
  int32x4_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float64x2_t v60;
  float32x4_t v61;
  int32x4_t v62;
  float64x2_t v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __n128 result;
  _QWORD v70[2];
  int32x4_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float64x2_t v77;
  float64x2_t v78;
  unsigned int v79[6];
  _QWORD v80[2];

  v80[1] = *MEMORY[0x24BDAC8D0];
  v5 = *((float64x2_t *)this + 31);
  v6 = *((float64x2_t *)this + 32);
  v7 = *((float64x2_t *)this + 33);
  v8 = *((float64x2_t *)this + 34);
  v9 = *((float64x2_t *)this + 40);
  v10 = *((float64x2_t *)this + 41);
  v11 = vrndq_f64(v9);
  v12 = vrndq_f64(v10);
  v13 = 0uLL;
  HIDWORD(v15) = a4 - 1;
  LODWORD(v15) = a4 - 1;
  v14 = v15 >> 1;
  v17 = *((int32x4_t *)this + 17);
  v16 = *((int32x4_t *)this + 18);
  v18 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v11), (int32x4_t)vcvtq_s64_f64(v12));
  v19 = vminq_s32(vmaxq_s32(v18, (int32x4_t)0), v16);
  v20 = 0uLL;
  switch(v14)
  {
    case 0:
      v21 = *((_QWORD *)this + 74);
      v13.i32[0] = *(_DWORD *)(v21 + 4 * v19.i32[0]);
      v22.i64[0] = 0x100000001;
      v22.i64[1] = 0x100000001;
      v23 = vaddq_s32(v18, v22);
      v20 = (float32x4_t)vcgtq_s32(v17, v23);
      v20.i32[0] = *(_DWORD *)(v21
                             + 4
                             * vminq_s32(vmaxq_s32((int32x4_t)vbslq_s8((int8x16_t)v20, (int8x16_t)v23, (int8x16_t)vsubq_s32(v17, v23)), (int32x4_t)0), v16).i32[0]);
      break;
    case 1:
      v24 = *((_QWORD *)this + 74);
      v25 = *((_QWORD *)this + 75);
      v13.i32[0] = *(_DWORD *)(v24 + 4 * v19.i32[0]);
      v13.i32[1] = *(_DWORD *)(v25 + 4 * v19.i32[1]);
      v26.i64[0] = 0x100000001;
      v26.i64[1] = 0x100000001;
      v27 = vaddq_s32(v18, v26);
      v20 = (float32x4_t)vcgtq_s32(v17, v27);
      v28 = vminq_s32(vmaxq_s32((int32x4_t)vbslq_s8((int8x16_t)v20, (int8x16_t)v27, (int8x16_t)vsubq_s32(v17, v27)), (int32x4_t)0), v16).u64[0];
      v20.i32[0] = *(_DWORD *)(v24 + 4 * (int)v28);
      v20.i32[1] = *(_DWORD *)(v25 + 4 * SHIDWORD(v28));
      break;
    case 2:
    case 4:
    case 5:
    case 6:
      break;
    case 3:
      v29 = *((_QWORD *)this + 74);
      v30 = *((_QWORD *)this + 75);
      v31 = *((_QWORD *)this + 76);
      v13.i32[0] = *(_DWORD *)(v29 + 4 * v19.i32[0]);
      v13.i32[1] = *(_DWORD *)(v30 + 4 * v19.i32[1]);
      v13.i32[2] = *(_DWORD *)(v31 + 4 * v19.i32[2]);
      v32.i64[0] = 0x100000001;
      v32.i64[1] = 0x100000001;
      v33 = vaddq_s32(v18, v32);
      v20 = (float32x4_t)vcgtq_s32(v17, v33);
      v34 = vminq_s32(vmaxq_s32((int32x4_t)vbslq_s8((int8x16_t)v20, (int8x16_t)v33, (int8x16_t)vsubq_s32(v17, v33)), (int32x4_t)0), v16);
      v20.i32[0] = *(_DWORD *)(v29 + 4 * v34.i32[0]);
      v20.i32[1] = *(_DWORD *)(v30 + 4 * v34.i32[1]);
      v20.i32[2] = *(_DWORD *)(v31 + 4 * v34.i32[2]);
      break;
    case 7:
      v35 = *((_QWORD *)this + 74);
      v36 = *((_QWORD *)this + 75);
      v37 = *((_QWORD *)this + 76);
      v38 = *((_QWORD *)this + 77);
      v13.i32[0] = *(_DWORD *)(v35 + 4 * v19.i32[0]);
      v13.i32[1] = *(_DWORD *)(v36 + 4 * v19.i32[1]);
      v13.i32[2] = *(_DWORD *)(v37 + 4 * v19.i32[2]);
      v13.i32[3] = *(_DWORD *)(v38 + 4 * v19.i32[3]);
      v39.i64[0] = 0x100000001;
      v39.i64[1] = 0x100000001;
      v40 = vaddq_s32(v18, v39);
      v41 = vminq_s32(vmaxq_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(v17, v40), (int8x16_t)v40, (int8x16_t)vsubq_s32(v17, v40)), (int32x4_t)0), v16);
      v20.i32[0] = *(_DWORD *)(v35 + 4 * v41.i32[0]);
      v20.i32[1] = *(_DWORD *)(v36 + 4 * v41.i32[1]);
      v20.i32[2] = *(_DWORD *)(v37 + 4 * v41.i32[2]);
      v20.i32[3] = *(_DWORD *)(v38 + 4 * v41.i32[3]);
      break;
    default:
      v20 = 0uLL;
      break;
  }
  v42 = vmlaq_f32(v13, vsubq_f32(v20, v13), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(v9, v11)), vsubq_f64(v10, v12)));
  v43 = vmlsq_f32(vmlsq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*((float32x4_t *)this + 20), *((float32x4_t *)this + 42)), v42, *((float32x4_t *)this + 19)), *((float32x4_t *)this + 43), *((float32x4_t *)this + 21)), *((float32x4_t *)this + 44), *((float32x4_t *)this + 22)), *((float32x4_t *)this + 45), *((float32x4_t *)this + 23));
  v44 = vmlsq_f32(vmlsq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*((float32x4_t *)this + 25), *((float32x4_t *)this + 46)), v43, *((float32x4_t *)this + 24)), *((float32x4_t *)this + 47), *((float32x4_t *)this + 26)), *((float32x4_t *)this + 48), *((float32x4_t *)this + 27)), *((float32x4_t *)this + 49), *((float32x4_t *)this + 28));
  v45 = *((float *)a2 + 2);
  v46 = *((float32x4_t *)this + 50);
  v47 = vmlaq_n_f32(*((float32x4_t *)this + 51), vmlaq_f32(vmulq_f32(*((float32x4_t *)this + 51), vnegq_f32(*((float32x4_t *)this + 36))), vsubq_f32(*((float32x4_t *)this + 30), v46), *((float32x4_t *)this + 35)), v45);
  v48 = vmlaq_n_f32(v46, v47, v45);
  *((float32x4_t *)this + 50) = v48;
  *((float32x4_t *)this + 51) = v47;
  v49 = vmulq_f32(v44, v48);
  v50 = vandq_s8((int8x16_t)v49, vorrq_s8((int8x16_t)vcltzq_f32(v49), (int8x16_t)vcgezq_f32(v49)));
  switch(v14)
  {
    case 0:
      goto LABEL_11;
    case 1:
      goto LABEL_10;
    case 3:
      goto LABEL_9;
    case 7:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * *((int *)this + 119)) = v50.i32[3];
LABEL_9:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * *((int *)this + 118)) = v50.i32[2];
LABEL_10:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * *((int *)this + 117)) = v50.i32[1];
LABEL_11:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * *((int *)this + 116)) = v50.i32[0];
      break;
    default:
      break;
  }
  v51 = vaddq_f64(v6, v10);
  v52 = vaddq_f64(v5, v9);
  v53 = vuzp1q_s32((int32x4_t)vcgeq_f64(v52, v7), (int32x4_t)vcgeq_f64(v51, v8));
  v54 = vandq_s8((int8x16_t)v53, (int8x16_t)xmmword_21673A740);
  v55 = (int32x4_t)vorrq_s8(vextq_s8(v54, v54, 8uLL), v54);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s32(v55, 3), (int8x16_t)v55).u32[0] & a4) != 0)
  {
    MEMORY[0x24BDAC7A8](this);
    v80[0] = v70;
    v70[0] = 0;
    v70[1] = 0;
    v79[0] = 1;
    v79[2] = 2;
    v77 = v57;
    v78 = v56;
    v75 = v58;
    v76 = v59;
    v73 = v60;
    v74 = v61;
    v71 = v62;
    v72 = v63;
    Phase::DspLayer::VoicePool::ExternalCallbackWithMessage(v64, 0, (uint64_t *)this + 104, v65, v79, v80);
    v53 = v71;
    v51 = v72;
    v52 = v73;
    v44 = v74;
    v43 = v75;
    v42 = v76;
    v8 = v77;
    v7 = v78;
  }
  *((int8x16_t *)this + 40) = vbslq_s8((int8x16_t)vzip1q_s32(v53, v53), (int8x16_t)vsubq_f64(v52, v7), (int8x16_t)v52);
  *((int8x16_t *)this + 41) = vbslq_s8((int8x16_t)vzip2q_s32(v53, v53), (int8x16_t)vsubq_f64(v51, v8), (int8x16_t)v51);
  v66 = *((_OWORD *)this + 42);
  *((float32x4_t *)this + 42) = v42;
  *((_OWORD *)this + 43) = v66;
  v67 = *((_OWORD *)this + 44);
  *((float32x4_t *)this + 44) = v43;
  *((_OWORD *)this + 45) = v67;
  v68 = *((_OWORD *)this + 46);
  *((float32x4_t *)this + 46) = v43;
  *((_OWORD *)this + 47) = v68;
  result = *((__n128 *)this + 48);
  *((float32x4_t *)this + 48) = v44;
  *((__n128 *)this + 49) = result;
  return result;
}

float `anonymous namespace'::ResidentSamplerSlice::CopyVoiceState(_anonymous_namespace_::ResidentSamplerSlice *this, Phase::DspLayer::VoicePoolSlice *a2, unsigned int a3, unsigned int a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  float result;

  v4 = (_QWORD *)((char *)a2 + 8 * (int)a3);
  v5 = (_QWORD *)((char *)this + 8 * (int)a4);
  v5[2] = v4[2];
  v6 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  v7 = (_DWORD *)((char *)this + 4 * (int)a4);
  v7[12] = v6[12];
  v7[16] = v6[16];
  v7[20] = v6[20];
  v7[24] = v6[24];
  v7[28] = v6[28];
  v5[16] = v4[16];
  v7[40] = v6[40];
  v7[44] = v6[44];
  v7[48] = v6[48];
  v7[52] = v6[52];
  *((_QWORD *)this + (int)a4 + 28) = *((_QWORD *)a2 + (int)a3 + 28);
  *((_DWORD *)this + (int)a4 + 64) = *((_DWORD *)a2 + (int)a3 + 64);
  v7[68] = v6[68];
  v7[72] = v6[72];
  v7[76] = v6[76];
  v7[80] = v6[80];
  v7[84] = v6[84];
  v7[88] = v6[88];
  v7[92] = v6[92];
  v7[96] = v6[96];
  v7[100] = v6[100];
  v7[104] = v6[104];
  v7[108] = v6[108];
  v7[112] = v6[112];
  v7[116] = v6[116];
  v7[120] = v6[120];
  v5[62] = v4[62];
  v5[66] = v4[66];
  v7[140] = v6[140];
  v8 = v6[144];
  *((_QWORD *)this + (int)a4 + 74) = *((_QWORD *)a2 + (int)a3 + 74);
  v7[144] = v8;
  *((_DWORD *)this + (int)a4 + 156) = *((_DWORD *)a2 + (int)a3 + 156);
  if (a3 >= 4)
    __assert_rtn("Copy", "DelaylineLinear.hpp", 507, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  if (a4 >= 4)
    __assert_rtn("Copy", "DelaylineLinear.hpp", 508, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  *((_QWORD *)this + a4 + 80) = *((_QWORD *)a2 + a3 + 80);
  *((_DWORD *)this + a4 + 168) = *((_DWORD *)a2 + a3 + 168);
  v9 = 4 * a3 + 16;
  v10 = 4 * a4 + 16;
  *(_DWORD *)((char *)this + v10 + 672) = *(_DWORD *)((char *)a2 + v9 + 672);
  *((_DWORD *)this + a4 + 176) = *((_DWORD *)a2 + a3 + 176);
  *(_DWORD *)((char *)this + v10 + 704) = *(_DWORD *)((char *)a2 + v9 + 704);
  *((_DWORD *)this + a4 + 184) = *((_DWORD *)a2 + a3 + 184);
  *(_DWORD *)((char *)this + v10 + 736) = *(_DWORD *)((char *)a2 + v9 + 736);
  *((_DWORD *)this + a4 + 192) = *((_DWORD *)a2 + a3 + 192);
  *(_DWORD *)((char *)this + v10 + 768) = *(_DWORD *)((char *)a2 + v9 + 768);
  v11 = (char *)a2 + 4 * a3;
  v12 = (char *)this + 4 * a4;
  *((_DWORD *)v12 + 200) = *((_DWORD *)v11 + 200);
  result = *((float *)v11 + 204);
  *((float *)v12 + 204) = result;
  *((_QWORD *)this + (int)a4 + 104) = *((_QWORD *)a2 + (int)a3 + 104);
  return result;
}

unint64_t `anonymous namespace'::ResidentSamplerSlice::GetOutput(_anonymous_namespace_::ResidentSamplerSlice *this, int a2, int a3)
{
  if (a2)
    return 0xFFFFFFFF00000008;
  else
    return (unint64_t)*((unsigned int *)this + a3 + 52) << 32;
}

uint64_t `anonymous namespace'::ResidentSamplerSlice::SetOutput(_anonymous_namespace_::ResidentSamplerSlice *this, int a2, int a3, int a4)
{
  uint64_t result;

  if (a2)
    return 8;
  result = 0;
  *((_DWORD *)this + a3 + 52) = a4;
  return result;
}

uint64_t `anonymous namespace'::ResidentSamplerSlice::GetBuffer@<X0>(uint64_t this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;

  if (a2)
  {
    v4 = 0;
    v5 = -1;
    v6 = 10;
  }
  else
  {
    v6 = 0;
    v4 = *(_QWORD *)(this + 224 + 8 * a3);
    v5 = *(_DWORD *)(this + 224 + 4 * a3 + 32);
  }
  *(_DWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v5;
  return this;
}

uint64_t `anonymous namespace'::ResidentSamplerSlice::SetBuffer(_anonymous_namespace_::ResidentSamplerSlice *this, int a2, int a3, void *a4, int a5)
{
  uint64_t result;

  if (a2)
    return 10;
  result = 0;
  this = (_anonymous_namespace_::ResidentSamplerSlice *)((char *)this + 224);
  *((_QWORD *)this + a3) = a4;
  *((_DWORD *)this + a3 + 8) = a5;
  return result;
}

void std::__function::__func<Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D580C58;
  return result;
}

void std::__function::__func<Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D580C58;
}

uint64_t std::__function::__func<Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()(uint64_t a1, Phase::DspLayer::VoiceEngine **a2, int *a3)
{
  Phase::DspLayer::VoiceEngine *v3;
  int v4;
  uint64_t v5;
  int v6;
  Phase::DspLayer::VoiceEngine *v7;
  _anonymous_namespace_::ResidentSamplerSlice *v8;

  v3 = *a2;
  v4 = *a3;
  v5 = operator new();
  Phase::DspLayer::VoicePool::VoicePool((Phase::DspLayer::VoicePool *)v5, "ResidentSampler", v3, v4, 880);
  *(_QWORD *)v5 = &off_24D580B60;
  if (*(int *)(v5 + 40) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(Phase::DspLayer::VoiceEngine **)(v5 + 32);
      v8 = (_anonymous_namespace_::ResidentSamplerSlice *)(*(_QWORD *)(v5 + 24) + *(int *)(v5 + 16) * (uint64_t)v6);
      *(_QWORD *)v8 = &off_24D580B80;
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 108) = v7;
      ++v6;
    }
    while (v6 < *(_DWORD *)(v5 + 40));
  }
  return v5;
}

void sub_21669F44C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

BOOL Phase::Controller::ResidentSoundAssetInfo::InitWithURL(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, double a6, double a7, uint64_t a8, _QWORD *a9)
{
  id v16;
  id v17;
  _BOOL8 v18;
  NSObject *v19;
  uint64_t v20;
  id v21;
  void *v22;
  Phase::Logger *v23;
  id v24;
  void *v25;
  int v26;
  _BOOL8 v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  char v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  Phase::Logger *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  Phase::Logger *v48;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v16 = a4;
  v17 = a5;
  v18 = Phase::Controller::SoundAssetInfo::BaseInit(a1, 0, a2, a3, a9, a7);
  if (!v18)
  {
    v27 = 0;
    goto LABEL_27;
  }
  v19 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v18)
                                                                                      + 816)));
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v20 = *(_QWORD *)(a1 + 16);
    objc_msgSend(v16, "description");
    v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *(_DWORD *)buf = 136315906;
    v50 = "ResidentSoundAssetInfo.mm";
    v51 = 1024;
    v52 = 101;
    v53 = 2048;
    v54 = v20;
    v55 = 2080;
    v56 = objc_msgSend(v21, "UTF8String");
    _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ResidentSoundAssetInfo::InitWithURL for assetId %llu url: %s", buf, 0x26u);

  }
  v22 = (void *)MEMORY[0x2199FA298]();
  *(_DWORD *)(a1 + 32) = 1;
  if (!v16)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("File URL was nil"));
    v23 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    v28 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v23)
                                                                                        + 816)));
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = *(_QWORD *)(a1 + 16);
      v30 = -[Phase::Logger UTF8String](objc_retainAutorelease(v23), "UTF8String");
      *(_DWORD *)buf = 136315906;
      v50 = "ResidentSoundAssetInfo.mm";
      v51 = 1024;
      v52 = 112;
      v53 = 2048;
      v54 = v29;
      v55 = 2080;
      v56 = v30;
      _os_log_impl(&dword_2164CC000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a9)
    {
      v47 = *MEMORY[0x24BDD0FC8];
      v48 = v23;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920805, v31);
      *a9 = (id)objc_claimAutoreleasedReturnValue();

    }
    goto LABEL_15;
  }
  v44 = 0;
  v23 = (Phase::Logger *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1810]), "initForReading:commonFormat:interleaved:error:", v16, 1, 0, &v44);
  v24 = v44;
  if (!v24)
  {
    if (v23)
    {
      objc_msgSend(v16, "description");
      v32 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v26 = Phase::Controller::ResidentSoundAssetInfo::InitializeWithAudioFile(a1, a3, v23, objc_msgSend(v32, "UTF8String"), v17, a9, a6);

      if (v26)
      {
        v25 = 0;
        *(_DWORD *)(a1 + 32) = 4;
        LOBYTE(v26) = 1;
        goto LABEL_17;
      }
LABEL_16:
      v25 = 0;
      goto LABEL_17;
    }
LABEL_15:
    LOBYTE(v26) = 0;
    goto LABEL_16;
  }
  v25 = v24;

  v23 = 0;
  LOBYTE(v26) = 0;
LABEL_17:

  objc_autoreleasePoolPop(v22);
  v27 = v16 != 0;
  if (v16)
    v33 = v26;
  else
    v33 = 1;
  if ((v33 & 1) == 0)
  {
    v34 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(v16, "description");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "description");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "stringWithFormat:", CFSTR("[AVAudioFile initForReading] failed on file '%@' with error '%@'"), v35, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    v39 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v38)
                                                                                        + 816)));
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v40 = *(_QWORD *)(a1 + 16);
      v41 = objc_msgSend(objc_retainAutorelease(v37), "UTF8String");
      *(_DWORD *)buf = 136315906;
      v50 = "ResidentSoundAssetInfo.mm";
      v51 = 1024;
      v52 = 142;
      v53 = 2048;
      v54 = v40;
      v55 = 2080;
      v56 = v41;
      _os_log_impl(&dword_2164CC000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a9)
    {
      v45 = *MEMORY[0x24BDD0FC8];
      v46 = v37;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v42);
      *a9 = (id)objc_claimAutoreleasedReturnValue();

    }
    v27 = 0;
  }

LABEL_27:
  return v27;
}

void sub_21669F958(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ResidentSoundAssetInfo::InitializeWithAudioFile(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, _QWORD *a6, double a7)
{
  AVAudioFile *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;
  Phase::Logger *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _BYTE *v27;
  Phase::Logger *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unsigned __int16 v36;
  void *v37;
  BOOL v38;
  void *v39;
  _BYTE *v40;
  unsigned __int16 v41;
  void *v42;
  Phase::Logger *v43;
  NSObject *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  _BYTE *v49;
  Phase::Logger *v50;
  NSObject *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  int v57;
  void *v58;
  int v59;
  id v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  void *v65;
  double v66;
  double v67;
  void *v68;
  uint64_t v69;
  unsigned int v70;
  double v71;
  double v72;
  double v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  _BOOL8 v80;
  _BOOL4 v81;
  double v82;
  unsigned int v83;
  vDSP_Length v84;
  AVAudioPCMBuffer *v85;
  AVAudioPCMBuffer *v86;
  BOOL v87;
  Phase::Logger *v88;
  BOOL v89;
  unsigned int v90;
  uint64_t v91;
  AVAudioFrameCount v92;
  uint64_t v93;
  Phase::Logger *v94;
  unsigned int v95;
  AVAudioFrameCount v96;
  unsigned int v97;
  uint64_t v98;
  Phase::Logger *v99;
  BOOL v100;
  Phase::Logger *v101;
  BOOL v102;
  Phase::Logger *v103;
  NSObject *v104;
  uint64_t v105;
  uint64_t v106;
  Phase::Logger *v107;
  Phase::Logger *v108;
  NSObject *v109;
  void *v110;
  uint64_t v111;
  Phase::Logger *v112;
  NSObject *v113;
  void *v114;
  uint64_t v115;
  void *v116;
  NSObject *v117;
  void *v118;
  uint64_t v119;
  void *v120;
  void *v121;
  void *v122;
  Phase::Logger *v123;
  NSObject *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  Phase::Logger *v129;
  NSObject *v130;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  AVAudioPCMBuffer *v134;
  Phase::Logger *v135;
  int v136;
  int v137;
  double v138;
  double v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unint64_t v143;
  BOOL v144;
  unsigned int v145;
  void *v146;
  unsigned int v147;
  unint64_t v148;
  NSObject *v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  NSObject *v153;
  uint64_t v154;
  uint64_t v155;
  NSObject *v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  NSObject *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  AVAudioFrameCount v164;
  unint64_t v165;
  uint64_t i;
  void *v167;
  BOOL v168;
  NSObject *v169;
  uint64_t v170;
  uint64_t v171;
  NSObject *v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  NSObject *v176;
  uint64_t v177;
  uint64_t v178;
  NSObject *v179;
  uint64_t v180;
  uint64_t v181;
  NSObject *v183;
  std::runtime_error *v184;
  NSObject *v185;
  id v186;
  uint64_t v187;
  std::runtime_error *exception;
  unsigned int v189;
  unsigned int v190;
  AVAudioPCMBuffer *v191;
  AVAudioPCMBuffer *v192;
  Phase::Logger *v193;
  id v196;
  Phase::Logger *v197;
  id v198;
  id v199;
  uint64_t v200;
  Phase::Logger *v201;
  uint64_t v202;
  Phase::Logger *v203;
  uint64_t v204;
  Phase::Logger *v205;
  uint64_t v206;
  Phase::Logger *v207;
  uint64_t v208;
  Phase::Logger *v209;
  uint64_t v210;
  Phase::Logger *v211;
  uint64_t v212;
  Phase::Logger *v213;
  uint64_t v214;
  Phase::Logger *v215;
  uint64_t v216;
  Phase::Logger *v217;
  uint64_t v218;
  AVAudioPCMBuffer *v219;
  _BYTE __p[12];
  __int16 v221;
  int v222;
  __int16 v223;
  uint64_t v224;
  __int16 v225;
  uint64_t v226;
  _BYTE buf[12];
  __int16 v228;
  int v229;
  __int16 v230;
  void *v231;
  __int16 v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  char v236;
  uint64_t v237;
  Phase::Logger *v238;
  uint64_t v239;
  Phase::Logger *v240;
  uint64_t v241;
  Phase::Logger *v242;
  uint64_t v243;
  Phase::Logger *v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  void *v248;
  uint64_t v249;
  _QWORD v250[4];

  v250[1] = *MEMORY[0x24BDAC8D0];
  v11 = a3;
  v196 = a5;
  -[AVAudioFile processingFormat](v11, "processingFormat");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v12, "channelCount") == 1)
  {

  }
  else
  {
    -[AVAudioFile processingFormat](v11, "processingFormat");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v13, "channelCount") <= 1)
    {

      std::terminate();
    }
    -[AVAudioFile processingFormat](v11, "processingFormat");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "isInterleaved");

    if (v15)
      goto LABEL_198;
  }
  -[AVAudioFile processingFormat](v11, "processingFormat");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "commonFormat");

  if (v17 != 1)
    goto LABEL_198;
  if (a7 <= 0.0)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Invalid sample rate %f for audio file '%s'!"), *(_QWORD *)&a7, a4);
    v197 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    v29 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v197)
                                                                                        + 816)));
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v30 = *(void **)(a1 + 16);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
      v228 = 1024;
      v229 = 798;
      v230 = 2048;
      v231 = v30;
      v232 = 2080;
      v233 = -[Phase::Logger UTF8String](objc_retainAutorelease(v197), "UTF8String");
      _os_log_impl(&dword_2164CC000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a6)
    {
      v249 = *MEMORY[0x24BDD0FC8];
      v250[0] = v197;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v250, &v249, 1);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v31);
      v32 = (id)objc_claimAutoreleasedReturnValue();
LABEL_25:
      v33 = 0;
      *a6 = v32;
      goto LABEL_210;
    }
LABEL_120:
    v33 = 0;
    goto LABEL_211;
  }
  if (a2)
    v19 = 1;
  else
    v19 = 3;
  if (!v196)
  {
    -[AVAudioFile fileFormat](v11, "fileFormat");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "channelLayout");
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v21)
    {
      -[AVAudioFile fileFormat](v11, "fileFormat");
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v55, "channelCount") == 1)
      {

LABEL_50:
        -[AVAudioFile fileFormat](v11, "fileFormat");
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        v59 = objc_msgSend(v58, "channelCount");

        v60 = objc_alloc(MEMORY[0x24BDB17E8]);
        if (v59 == 1)
          v61 = 6553601;
        else
          v61 = 6619138;
        v197 = (Phase::Logger *)objc_msgSend(v60, "initWithLayoutTag:", v61);
        goto LABEL_54;
      }
      -[AVAudioFile fileFormat](v11, "fileFormat");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      v57 = objc_msgSend(v56, "channelCount");

      if (v57 == 2)
        goto LABEL_50;
      v121 = (void *)MEMORY[0x24BDD17C8];
      -[AVAudioFile processingFormat](v11, "processingFormat");
      v122 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v121, "stringWithFormat:", CFSTR("Cannot synthesize audio channel layout for audio file '%s' with channel count %d."), a4, objc_msgSend(v122, "channelCount"));
      v197 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();

      v124 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v123)
                                                                                           + 816)));
      if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
      {
        v125 = *(void **)(a1 + 16);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
        v228 = 1024;
        v229 = 853;
        v230 = 2048;
        v231 = v125;
        v232 = 2080;
        v233 = -[Phase::Logger UTF8String](objc_retainAutorelease(v197), "UTF8String");
        _os_log_impl(&dword_2164CC000, v124, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
      }

      if (a6)
      {
        v243 = *MEMORY[0x24BDD0FC8];
        v244 = v197;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v244, &v243, 1);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v31);
        v32 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_25;
      }
      goto LABEL_120;
    }
  }
  v22 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v18)
                                                                                      + 816)));
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    -[AVAudioFile url](v11, "url");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "absoluteString");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[AVAudioFile fileFormat](v11, "fileFormat");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "channelLayout");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    Phase::ChannelLayout::GetStringFromLayoutTag((Phase::ChannelLayout *)objc_msgSend(v26, "layoutTag"), __p);
    if ((v224 & 0x80000000) == 0)
      v27 = __p;
    else
      v27 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
    v228 = 1024;
    v229 = 822;
    v230 = 2112;
    v231 = v24;
    v232 = 2080;
    v233 = (uint64_t)v27;
    _os_log_impl(&dword_2164CC000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Loading audio file %@  as resident with layout tag %s for assetId", buf, 0x26u);
    if (SBYTE3(v224) < 0)
      operator delete(*(void **)__p);

  }
  if (v196)
  {
    v28 = (Phase::Logger *)v196;
  }
  else
  {
    -[AVAudioFile fileFormat](v11, "fileFormat");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "channelLayout");
    v35 = objc_claimAutoreleasedReturnValue();

    v28 = (Phase::Logger *)v35;
  }
  v197 = v28;
  if ((Phase::Controller::StreamRenderer::SupportsInputLayout(v28, v19) & 1) == 0)
  {
    v48 = (void *)MEMORY[0x24BDD17C8];
    Phase::ChannelLayout::GetStringFromLayoutTag((Phase::ChannelLayout *)-[Phase::Logger layoutTag](v197, "layoutTag"), buf);
    if (SBYTE3(v231) >= 0)
      v49 = buf;
    else
      v49 = *(_BYTE **)buf;
    objc_msgSend(v48, "stringWithFormat:", CFSTR("Unsupported channel layout '%s' on audio file '%s'!"), v49, a4);
    v50 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    v31 = v50;
    if (SBYTE3(v231) < 0)
      operator delete(*(void **)buf);
    v51 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v50)
                                                                                        + 816)));
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      v52 = *(void **)(a1 + 16);
      v53 = objc_msgSend(objc_retainAutorelease(v31), "UTF8String");
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
      v228 = 1024;
      v229 = 829;
      v230 = 2048;
      v231 = v52;
      v232 = 2080;
      v233 = v53;
      _os_log_impl(&dword_2164CC000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a6)
    {
      v247 = *MEMORY[0x24BDD0FC8];
      v248 = v31;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v248, &v247, 1);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v54);
      *a6 = (id)objc_claimAutoreleasedReturnValue();

    }
    goto LABEL_46;
  }
  v36 = -[Phase::Logger layoutTag](v197, "layoutTag");
  -[AVAudioFile processingFormat](v11, "processingFormat");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = v36 == objc_msgSend(v37, "channelCount");

  if (!v38)
  {
    v39 = (void *)MEMORY[0x24BDD17C8];
    v40 = buf;
    Phase::ChannelLayout::GetStringFromLayoutTag((Phase::ChannelLayout *)-[Phase::Logger layoutTag](v197, "layoutTag"), buf);
    if (SBYTE3(v231) < 0)
      v40 = *(_BYTE **)buf;
    v41 = -[Phase::Logger layoutTag](v197, "layoutTag");
    -[AVAudioFile processingFormat](v11, "processingFormat");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "stringWithFormat:", CFSTR("Channel layout '%s' on audio file '%s' has mismatched channel count [layout: %d, file: %d]!"), v40, a4, v41, objc_msgSend(v42, "channelCount"));
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    if (SBYTE3(v231) < 0)
      operator delete(*(void **)buf);
    v44 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v43)
                                                                                        + 816)));
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      v45 = *(void **)(a1 + 16);
      v46 = objc_msgSend(objc_retainAutorelease(v31), "UTF8String");
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
      v228 = 1024;
      v229 = 839;
      v230 = 2048;
      v231 = v45;
      v232 = 2080;
      v233 = v46;
      _os_log_impl(&dword_2164CC000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a6)
    {
      v245 = *MEMORY[0x24BDD0FC8];
      v246 = v31;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v246, &v245, 1);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v47);
      *a6 = (id)objc_claimAutoreleasedReturnValue();

    }
LABEL_46:
    v33 = 0;
    goto LABEL_210;
  }
LABEL_54:
  if (!v197)
    goto LABEL_198;
  *(_DWORD *)(a1 + 36) = -[Phase::Logger layoutTag](v197, "layoutTag");
  v62 = objc_alloc(MEMORY[0x24BDB1818]);
  -[AVAudioFile processingFormat](v11, "processingFormat");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = objc_msgSend(v63, "commonFormat");
  -[AVAudioFile processingFormat](v11, "processingFormat");
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v65, "sampleRate");
  v67 = v66;
  -[AVAudioFile processingFormat](v11, "processingFormat");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = (void *)objc_msgSend(v62, "initWithCommonFormat:sampleRate:interleaved:channelLayout:", v64, objc_msgSend(v68, "isInterleaved"), v197, v67);

  if (!v31)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("[AVAudioFormat initWithCommonFormat] for input format failed on audio file '%s'"), a4);
    v193 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    v109 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v193)
                                                                                         + 816)));
    if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
    {
      v110 = *(void **)(a1 + 16);
      v111 = -[Phase::Logger UTF8String](objc_retainAutorelease(v193), "UTF8String");
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
      v228 = 1024;
      v229 = 869;
      v230 = 2048;
      v231 = v110;
      v232 = 2080;
      v233 = v111;
      _os_log_impl(&dword_2164CC000, v109, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a6)
    {
      v241 = *MEMORY[0x24BDD0FC8];
      v242 = v193;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v242, &v241, 1);
      v112 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801);
      v33 = 0;
      *a6 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_208;
    }
    v33 = 0;
    goto LABEL_209;
  }
  v193 = (Phase::Logger *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1818]), "initWithCommonFormat:sampleRate:interleaved:channelLayout:", 1, 0, v197, a7);
  if (!v193)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("[AVAudioFormat initWithCommonFormat] for output format failed on audio file '%s'"), a4);
    v112 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    v113 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v112)
                                                                                         + 816)));
    if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
    {
      v114 = *(void **)(a1 + 16);
      v115 = -[Phase::Logger UTF8String](objc_retainAutorelease(v112), "UTF8String");
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
      v228 = 1024;
      v229 = 883;
      v230 = 2048;
      v231 = v114;
      v232 = 2080;
      v233 = v115;
      _os_log_impl(&dword_2164CC000, v113, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a6)
    {
      v239 = *MEMORY[0x24BDD0FC8];
      v240 = v112;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v240, &v239, 1);
      v116 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v116);
      *a6 = (id)objc_claimAutoreleasedReturnValue();

    }
    v193 = 0;
    goto LABEL_115;
  }
  v69 = -[AVAudioFile length](v11, "length");
  v70 = v69 & ~(v69 >> 63);
  if (!v70)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Audio file '%s' must contain at least one sample frame!"), a4);
    v112 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    v117 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v112)
                                                                                         + 816)));
    if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
    {
      v118 = *(void **)(a1 + 16);
      v119 = -[Phase::Logger UTF8String](objc_retainAutorelease(v112), "UTF8String");
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
      v228 = 1024;
      v229 = 895;
      v230 = 2048;
      v231 = v118;
      v232 = 2080;
      v233 = v119;
      _os_log_impl(&dword_2164CC000, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a6)
    {
      v237 = *MEMORY[0x24BDD0FC8];
      v238 = v112;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v238, &v237, 1);
      v120 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v120);
      *a6 = (id)objc_claimAutoreleasedReturnValue();

    }
LABEL_115:
    v33 = 0;
    goto LABEL_208;
  }
  -[Phase::Logger sampleRate](v193, "sampleRate");
  v72 = v71;
  objc_msgSend(v31, "sampleRate");
  LODWORD(v74) = vcvtpd_u64_f64(v72 / v73 * (double)v70);
  if (!(_DWORD)v74)
    goto LABEL_198;
  v190 = v74;
  Phase::Controller::ResidentSoundAssetInfo::AllocateAudioBuffer((Phase::Controller::ResidentSoundAssetInfo *)a1, (AVAudioFormat *)v193, v74);
  v75 = *(void **)(a1 + 48);
  if (!v75 || !objc_msgSend(v75, "floatChannelData"))
    goto LABEL_198;
  v76 = v190 >= 0x800 ? 2048 : v190;
  v189 = v76;
  v191 = (AVAudioPCMBuffer *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1838]), "initWithPCMFormat:frameCapacity:", v193, v76);
  if (!v191 || !-[AVAudioPCMBuffer floatChannelData](v191, "floatChannelData"))
    goto LABEL_198;
  Phase::Controller::StreamRenderer::StreamRenderer((uint64_t)buf, v31, v193, v76, v19);
  if (!v234)
  {
    v126 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(v31, "description");
    v127 = (void *)objc_claimAutoreleasedReturnValue();
    -[Phase::Logger description](v193, "description");
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v126, "stringWithFormat:", CFSTR("Failed to create Stream Renderer with input format '%@', output format '%@' and maximum frame count '%d' for audio file '%s'!"), v127, v128, v76, a4);
    v192 = (AVAudioPCMBuffer *)objc_claimAutoreleasedReturnValue();

    v130 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v129)
                                                                                         + 816)));
    if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
    {
      v131 = *(_QWORD *)(a1 + 16);
      v132 = -[AVAudioPCMBuffer UTF8String](objc_retainAutorelease(v192), "UTF8String");
      *(_DWORD *)__p = 136315906;
      *(_QWORD *)&__p[4] = "ResidentSoundAssetInfo.mm";
      v221 = 1024;
      v222 = 949;
      v223 = 2048;
      v224 = v131;
      v225 = 2080;
      v226 = v132;
      _os_log_impl(&dword_2164CC000, v130, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
    }

    if (a6)
    {
      v218 = *MEMORY[0x24BDD0FC8];
      v219 = v192;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v219, &v218, 1);
      v108 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920806);
      *a6 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_205;
    }
    goto LABEL_206;
  }
  if (a2 == 1)
  {
    objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.audio.PHASE"));
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v77, "URLForResource:withExtension:subdirectory:", CFSTR("MPEGDefault12LKFSSuperiorV2"), CFSTR("aupreset"), CFSTR("AUPresets/AULoudnessNormalizer"));
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    v79 = Phase::Controller::StreamRenderer::SetPreset((uint64_t)buf, 0, v78, *(double *)(a1 + 40));
    if ((v79 & 1) == 0)
    {
      v185 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v79)
                                                                                           + 816)));
      if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v78, "description");
        v186 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v187 = objc_msgSend(v186, "UTF8String");
        *(_DWORD *)__p = 136315906;
        *(_QWORD *)&__p[4] = "ResidentSoundAssetInfo.mm";
        v221 = 1024;
        v222 = 968;
        v223 = 2080;
        v224 = v187;
        v225 = 2080;
        v226 = a4;
        _os_log_impl(&dword_2164CC000, v185, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [not presetWasLoaded is true]: \"Failed to load preset '%s' for audio file '%s'!\"", __p, 0x26u);

      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Failed to load preset '%s' for audio file '%s'!");
    }

  }
  v80 = Phase::Controller::StreamRenderer::Prepare((Phase::Controller::StreamRenderer *)buf);
  if (v234)
    v81 = v80;
  else
    v81 = 0;
  if (!v81 || !v235)
  {
    v183 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v80) + 816));
    if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = "ResidentSoundAssetInfo.mm";
      v221 = 1024;
      v222 = 977;
      v223 = 2080;
      v224 = a4;
      _os_log_impl(&dword_2164CC000, v183, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!prepared || !streamRenderer.IsPrepared() is true]: \"Failed to prepare stream renderer for audio file '%s'!\"", __p, 0x1Cu);
    }
    v184 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v184, "Failed to prepare stream renderer for audio file '%s'!");
  }
  if (a2 == 1)
  {
    objc_msgSend(v31, "sampleRate");
    v83 = vcvtpd_u64_f64(v82);
    if (v70 >= v83)
      v84 = v83;
    else
      v84 = v70;
    if (!(_DWORD)v84)
      goto LABEL_198;
    v85 = (AVAudioPCMBuffer *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1838]), "initWithPCMFormat:frameCapacity:", v31, v84);
    v86 = v85;
    if (!v85 || !-[AVAudioPCMBuffer floatChannelData](v85, "floatChannelData"))
      goto LABEL_198;
    v199 = 0;
    v192 = v86;
    v87 = -[AVAudioFile readIntoBuffer:frameCount:error:](v11, "readIntoBuffer:frameCount:error:", v86, v84, &v199);
    v88 = (Phase::Logger *)v199;
    if (v88)
      v89 = 0;
    else
      v89 = v87;
    if (!v89)
    {
      v108 = v88;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Failed to read %d sample frames for audio file '%s'!"), v84, a4);
      v103 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
      v156 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v103)
                                                                                           + 816)));
      if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
      {
        v157 = *(_QWORD *)(a1 + 16);
        v158 = -[Phase::Logger UTF8String](objc_retainAutorelease(v103), "UTF8String");
        *(_DWORD *)__p = 136315906;
        *(_QWORD *)&__p[4] = "ResidentSoundAssetInfo.mm";
        v221 = 1024;
        v222 = 1012;
        v223 = 2048;
        v224 = v157;
        v225 = 2080;
        v226 = v158;
        _os_log_impl(&dword_2164CC000, v156, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
      }

      if (a6)
      {
        v216 = *MEMORY[0x24BDD0FC8];
        v217 = v103;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v217, &v216, 1);
        v159 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920806, v159);
        *a6 = (id)objc_claimAutoreleasedReturnValue();

      }
      goto LABEL_204;
    }
    v90 = -[AVAudioPCMBuffer frameLength](v86, "frameLength");
    if (v90 < -[AVAudioPCMBuffer frameCapacity](v86, "frameCapacity"))
    {
      v91 = -[AVAudioFile framePosition](v11, "framePosition");
      if (v91 != -[AVAudioPCMBuffer frameLength](v86, "frameLength"))
        goto LABEL_198;
      v92 = -[AVAudioPCMBuffer frameCapacity](v86, "frameCapacity");
      v93 = v92 - -[AVAudioPCMBuffer frameLength](v86, "frameLength");
      v94 = (Phase::Logger *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1838]), "initWithPCMFormat:frameCapacity:", v31, v93);
      if (!v94)
        goto LABEL_198;
      while (1)
      {
        v95 = -[AVAudioPCMBuffer frameLength](v86, "frameLength");
        if (v95 >= -[AVAudioPCMBuffer frameCapacity](v86, "frameCapacity"))
          break;
        v96 = -[AVAudioPCMBuffer frameCapacity](v86, "frameCapacity");
        v97 = v96 - -[AVAudioPCMBuffer frameLength](v86, "frameLength");
        if (v93 >= v97)
          v98 = v97;
        else
          v98 = v93;
        v198 = 0;
        v99 = v94;
        v100 = -[AVAudioFile readIntoBuffer:frameCount:error:](v11, "readIntoBuffer:frameCount:error:", v94, v98, &v198);
        v101 = (Phase::Logger *)v198;
        if (v101)
          v102 = 0;
        else
          v102 = v100;
        if (!v102)
        {
          v108 = v101;
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Failed to read %d sample frames for audio file '%s'!"), v98, a4);
          v107 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
          v172 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v107)
                                                                                               + 816)));
          if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
          {
            v173 = *(_QWORD *)(a1 + 16);
            v174 = -[Phase::Logger UTF8String](objc_retainAutorelease(v107), "UTF8String");
            *(_DWORD *)__p = 136315906;
            *(_QWORD *)&__p[4] = "ResidentSoundAssetInfo.mm";
            v221 = 1024;
            v222 = 1063;
            v223 = 2048;
            v224 = v173;
            v225 = 2080;
            v226 = v174;
            _os_log_impl(&dword_2164CC000, v172, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
          }

          if (a6)
          {
            v214 = *MEMORY[0x24BDD0FC8];
            v215 = v107;
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v215, &v214, 1);
            v175 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v175);
            *a6 = (id)objc_claimAutoreleasedReturnValue();

          }
          v103 = v99;
LABEL_191:

          goto LABEL_204;
        }
        v94 = v99;
        if ((-[AVAudioPCMBuffer appendDataFromBuffer:](v86, "appendDataFromBuffer:", v99) & 1) == 0)
        {
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Failed to append buffer for audio file '%s'!"), a4);
          v103 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
          v104 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v103)
                                                                                               + 816)));
          if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
          {
            v105 = *(_QWORD *)(a1 + 16);
            v106 = -[Phase::Logger UTF8String](objc_retainAutorelease(v103), "UTF8String");
            *(_DWORD *)__p = 136315906;
            *(_QWORD *)&__p[4] = "ResidentSoundAssetInfo.mm";
            v221 = 1024;
            v222 = 1072;
            v223 = 2048;
            v224 = v105;
            v225 = 2080;
            v226 = v106;
            _os_log_impl(&dword_2164CC000, v104, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
          }

          if (a6)
          {
            v212 = *MEMORY[0x24BDD0FC8];
            v213 = v103;
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v213, &v212, 1);
            v107 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v107);
            *a6 = (id)objc_claimAutoreleasedReturnValue();
            v108 = v99;
            goto LABEL_191;
          }
          v108 = v99;
LABEL_204:

          goto LABEL_205;
        }
      }
      v163 = -[AVAudioFile framePosition](v11, "framePosition");
      if (v163 != -[AVAudioPCMBuffer frameLength](v86, "frameLength"))
        goto LABEL_198;
      v164 = -[AVAudioPCMBuffer frameLength](v86, "frameLength");
      if (v164 != -[AVAudioPCMBuffer frameCapacity](v86, "frameCapacity")
        || -[AVAudioPCMBuffer frameCapacity](v86, "frameCapacity") != (_DWORD)v84)
      {
        goto LABEL_198;
      }

    }
    v165 = 0;
    for (i = 16; ; i += 16)
    {
      -[AVAudioPCMBuffer format](v192, "format");
      v167 = (void *)objc_claimAutoreleasedReturnValue();
      v168 = v165 < objc_msgSend(v167, "channelCount");

      if (!v168)
        break;
      vDSP_vrvrs(*(float **)(-[AVAudioPCMBuffer mutableAudioBufferList](v192, "mutableAudioBufferList") + i), 1, v84);
      ++v165;
    }
    v134 = v192;
    v135 = v193;
    if (!Phase::Controller::StreamRenderer::ScheduleBuffer((Phase::Controller::StreamRenderer *)buf, v192, 0, 1uLL))
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Failed to schedule reverse audio buffer from audio file '%s' for rendering!"), a4);
      v108 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
      v169 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v108)
                                                                                           + 816)));
      if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
      {
        v170 = *(_QWORD *)(a1 + 16);
        v171 = -[Phase::Logger UTF8String](objc_retainAutorelease(v108), "UTF8String");
        *(_DWORD *)__p = 136315906;
        *(_QWORD *)&__p[4] = "ResidentSoundAssetInfo.mm";
        v221 = 1024;
        v222 = 1096;
        v223 = 2048;
        v224 = v170;
        v225 = 2080;
        v226 = v171;
        _os_log_impl(&dword_2164CC000, v169, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
      }

      if (!a6)
        goto LABEL_205;
      v210 = *MEMORY[0x24BDD0FC8];
      v211 = v108;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v211, &v210, 1);
      v103 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v103);
      v152 = (id)objc_claimAutoreleasedReturnValue();
LABEL_203:
      *a6 = v152;
      goto LABEL_204;
    }
  }
  else
  {
    v133 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v80) + 816));
    if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 136315906;
      *(_QWORD *)&__p[4] = "ResidentSoundAssetInfo.mm";
      v221 = 1024;
      v222 = 1106;
      v223 = 2080;
      v224 = a4;
      v225 = 2048;
      v226 = 0;
      _os_log_impl(&dword_2164CC000, v133, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Skipping reversed audio buffer algorithm for gain-stabilized normalization for audio file '%s'. The reversed time in seconds is %f.", __p, 0x26u);
    }
    v134 = 0;
    v135 = v193;
  }
  v192 = v134;
  if (!Phase::Controller::StreamRenderer::ScheduleFile((Phase::Controller::StreamRenderer *)buf, v11, 0, 0))
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Failed to schedule reverse audio buffer from audio file '%s' for rendering!"), a4);
    v108 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    v153 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v108)
                                                                                         + 816)));
    if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
    {
      v154 = *(_QWORD *)(a1 + 16);
      v155 = -[Phase::Logger UTF8String](objc_retainAutorelease(v108), "UTF8String");
      *(_DWORD *)__p = 136315906;
      *(_QWORD *)&__p[4] = "ResidentSoundAssetInfo.mm";
      v221 = 1024;
      v222 = 1115;
      v223 = 2048;
      v224 = v154;
      v225 = 2080;
      v226 = v155;
      _os_log_impl(&dword_2164CC000, v153, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
    }

    if (!a6)
      goto LABEL_205;
    v208 = *MEMORY[0x24BDD0FC8];
    v209 = v108;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v209, &v208, 1);
    v103 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v103);
    v152 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_203;
  }
  v136 = Phase::Controller::StreamRenderer::Start((Phase::Controller::StreamRenderer *)buf);
  if (v234)
    v137 = v136;
  else
    v137 = 0;
  if (v137 != 1 || !v235 || !v236)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Failed to start stream renderer for audio file '%s'!"), a4);
    v108 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    v160 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v108)
                                                                                         + 816)));
    if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
    {
      v161 = *(_QWORD *)(a1 + 16);
      v162 = -[Phase::Logger UTF8String](objc_retainAutorelease(v108), "UTF8String");
      *(_DWORD *)__p = 136315906;
      *(_QWORD *)&__p[4] = "ResidentSoundAssetInfo.mm";
      v221 = 1024;
      v222 = 1125;
      v223 = 2048;
      v224 = v161;
      v225 = 2080;
      v226 = v162;
      _os_log_impl(&dword_2164CC000, v160, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
    }

    if (!a6)
      goto LABEL_205;
    v206 = *MEMORY[0x24BDD0FC8];
    v207 = v108;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v207, &v206, 1);
    v103 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v103);
    v152 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_203;
  }
  if (v134)
  {
    -[Phase::Logger sampleRate](v135, "sampleRate");
    v139 = 0.0;
    if (a2 == 1)
      v139 = 1.0;
    v140 = vcvtpd_u64_f64(v139 * v138);
    v141 = 0;
    if (v190 >= v140)
      v142 = v140;
    else
      v142 = v190;
    if (v142)
    {
      while (1)
      {
        v143 = v189 >= v142 - v141 ? v142 - v141 : v189;
        if (!Phase::Controller::StreamRenderer::RenderOffline((id *)buf, v143, v191))
          break;
        if ((_DWORD)v143 != -[AVAudioPCMBuffer frameLength](v191, "frameLength"))
          goto LABEL_198;
        v141 += v143;
        if (v141 >= v142)
          goto LABEL_148;
      }
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Failed to render buffer for audio file '%s'!"), a4);
      v108 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
      v179 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v108)
                                                                                           + 816)));
      if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
      {
        v180 = *(_QWORD *)(a1 + 16);
        v181 = -[Phase::Logger UTF8String](objc_retainAutorelease(v108), "UTF8String");
        *(_DWORD *)__p = 136315906;
        *(_QWORD *)&__p[4] = "ResidentSoundAssetInfo.mm";
        v221 = 1024;
        v222 = 1148;
        v223 = 2048;
        v224 = v180;
        v225 = 2080;
        v226 = v181;
        _os_log_impl(&dword_2164CC000, v179, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
      }

      if (!a6)
        goto LABEL_205;
      v204 = *MEMORY[0x24BDD0FC8];
      v205 = v108;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v205, &v204, 1);
      v103 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v103);
      v152 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_203;
    }
LABEL_148:
    v144 = v141 == v142;
    v134 = v192;
    if (!v144)
      goto LABEL_198;
  }
  if (objc_msgSend(*(id *)(a1 + 48), "frameCapacity") < v190)
LABEL_198:
    std::terminate();
  do
  {
    v145 = objc_msgSend(*(id *)(a1 + 48), "frameLength");
    v146 = *(void **)(a1 + 48);
    if (v145 >= v190)
    {
      if (objc_msgSend(v146, "frameLength") == v190)
      {
        v33 = 1;
        goto LABEL_207;
      }
      goto LABEL_198;
    }
    v147 = v190 - objc_msgSend(v146, "frameLength");
    if (v189 >= v147)
      v148 = v147;
    else
      v148 = v189;
    if (!Phase::Controller::StreamRenderer::RenderOffline((id *)buf, v148, v191))
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Failed to render buffer for audio file '%s'!"), a4);
      v108 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
      v176 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v108)
                                                                                           + 816)));
      if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
      {
        v177 = *(_QWORD *)(a1 + 16);
        v178 = -[Phase::Logger UTF8String](objc_retainAutorelease(v108), "UTF8String");
        *(_DWORD *)__p = 136315906;
        *(_QWORD *)&__p[4] = "ResidentSoundAssetInfo.mm";
        v221 = 1024;
        v222 = 1171;
        v223 = 2048;
        v224 = v177;
        v225 = 2080;
        v226 = v178;
        _os_log_impl(&dword_2164CC000, v176, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
      }

      if (!a6)
        goto LABEL_205;
      v202 = *MEMORY[0x24BDD0FC8];
      v203 = v108;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v203, &v202, 1);
      v103 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v103);
      v152 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_203;
    }
    if ((_DWORD)v148 != -[AVAudioPCMBuffer frameLength](v191, "frameLength"))
      goto LABEL_198;
  }
  while ((objc_msgSend(*(id *)(a1 + 48), "appendDataFromBuffer:", v191) & 1) != 0);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Failed to append buffer for audio file '%s'!"), a4);
  v108 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
  v149 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v108)
                                                                                       + 816)));
  if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
  {
    v150 = *(_QWORD *)(a1 + 16);
    v151 = -[Phase::Logger UTF8String](objc_retainAutorelease(v108), "UTF8String");
    *(_DWORD *)__p = 136315906;
    *(_QWORD *)&__p[4] = "ResidentSoundAssetInfo.mm";
    v221 = 1024;
    v222 = 1181;
    v223 = 2048;
    v224 = v150;
    v225 = 2080;
    v226 = v151;
    _os_log_impl(&dword_2164CC000, v149, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
  }

  if (a6)
  {
    v200 = *MEMORY[0x24BDD0FC8];
    v201 = v108;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v201, &v200, 1);
    v103 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v103);
    v152 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_203;
  }
LABEL_205:

LABEL_206:
  v33 = 0;
  v134 = v192;
LABEL_207:

  Phase::Controller::StreamRenderer::~StreamRenderer((Phase::Controller::StreamRenderer *)buf);
  v112 = (Phase::Logger *)v191;
LABEL_208:

LABEL_209:
LABEL_210:

LABEL_211:
  return v33;
}

void sub_2166A2588()
{
  void *v0;
  void *v1;

  __cxa_end_catch();
  JUMPOUT(0x2166A26E4);
}

void sub_2166A25C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_2166A25E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;

  JUMPOUT(0x2166A27C8);
}

void sub_2166A25F8()
{
  void *v0;

  JUMPOUT(0x2166A26CCLL);
}

void sub_2166A2604()
{
  void *v0;
  void *v1;

  JUMPOUT(0x2166A274CLL);
}

void sub_2166A2618()
{
  void *v0;

  JUMPOUT(0x2166A27C8);
}

void sub_2166A2630(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  void *v60;
  void *v61;

  if (a60 < 0)
    operator delete(__p);

  JUMPOUT(0x2166A27C8);
}

void sub_2166A2670(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
    operator delete(__p);

  JUMPOUT(0x2166A27C8);
}

void sub_2166A2688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;

  JUMPOUT(0x2166A27C8);
}

void sub_2166A269C()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  JUMPOUT(0x2166A27C8);
}

void sub_2166A26A4()
{
  JUMPOUT(0x2166A2764);
}

void sub_2166A26AC()
{
  JUMPOUT(0x2166A2768);
}

void sub_2166A26B4()
{
  JUMPOUT(0x2166A276CLL);
}

void sub_2166A26BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;

  JUMPOUT(0x2166A27C8);
}

void sub_2166A26C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;

  Phase::Controller::StreamRenderer::~StreamRenderer((Phase::Controller::StreamRenderer *)&a55);
  JUMPOUT(0x2166A27C8);
}

void sub_2166A26FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;

  JUMPOUT(0x2166A27C8);
}

void sub_2166A270C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;

  JUMPOUT(0x2166A27C8);
}

void sub_2166A2738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{

  JUMPOUT(0x2166A27C8);
}

void sub_2166A2758()
{
  void *v0;

  JUMPOUT(0x2166A2760);
}

void sub_2166A278C()
{
  void *v0;

  JUMPOUT(0x2166A27A0);
}

void sub_2166A27A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{

  JUMPOUT(0x2166A27C8);
}

void sub_2166A27B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ResidentSoundAssetInfo::InitWithData(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, AudioFileTypeID a5, void *a6, double a7, double a8, uint64_t a9, uint64_t a10)
{
  id v18;
  id v19;
  _BOOL8 v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  OSStatus v24;
  id v25;
  void *v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  void *v30;
  _BYTE *v31;
  void *v32;
  Phase::Logger *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  Phase::Logger *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  int v45;
  _BYTE *v46;
  uint64_t v47;
  void *v48;
  _BYTE *v49;
  void *v50;
  Phase::Logger *v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  _BYTE *v57;
  id v58;
  ExtAudioFileRef outExtAudioFile;
  id v60;
  AudioFileID inFileID;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  Phase::Logger *v67;
  _BYTE buf[12];
  __int16 v69;
  int v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v18 = a4;
  v19 = a6;
  v20 = Phase::Controller::SoundAssetInfo::BaseInit(a1, 0, a2, a3, (_QWORD *)a10, a8);
  if (v20)
  {
    v21 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v20) + 816));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
      v69 = 1024;
      v70 = 165;
      v71 = 2048;
      v72 = v22;
      _os_log_impl(&dword_2164CC000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ResidentSoundAssetInfo::InitWithData for assetId %llu", buf, 0x1Cu);
    }
    v23 = (void *)MEMORY[0x2199FA298]();
    *(_DWORD *)(a1 + 32) = 1;
    if (!v18)
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("NSData was nil"));
      v38 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
      v39 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v38)
                                                                                          + 816)));
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        v40 = *(_QWORD *)(a1 + 16);
        v41 = -[Phase::Logger UTF8String](objc_retainAutorelease(v38), "UTF8String");
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
        v69 = 1024;
        v70 = 173;
        v71 = 2048;
        v72 = v40;
        v73 = 2080;
        v74 = v41;
        _os_log_impl(&dword_2164CC000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
      }

      if (a10)
      {
        v66 = *MEMORY[0x24BDD0FC8];
        v67 = v38;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v67, &v66, 1);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920805, v42);
        *(_QWORD *)a10 = (id)objc_claimAutoreleasedReturnValue();

      }
      a10 = 0;
      goto LABEL_37;
    }
    v60 = 0;
    inFileID = 0;
    if ((Phase::Controller::InMemoryAudioFile::Init((uint64_t)&v60, v18, a5, *(_QWORD *)(a1 + 16), (_QWORD *)a10) & 1) == 0)
    {
      a10 = 0;
LABEL_36:
      Phase::Controller::InMemoryAudioFile::~InMemoryAudioFile((Phase::Controller::InMemoryAudioFile *)&v60);
LABEL_37:
      objc_autoreleasePoolPop(v23);
      goto LABEL_38;
    }
    outExtAudioFile = 0;
    v24 = ExtAudioFileWrapAudioFileID(inFileID, 0, &outExtAudioFile);
    if (v24)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD1100], v24, 0);
      v25 = (id)objc_claimAutoreleasedReturnValue();
      v26 = (void *)MEMORY[0x24BDD17C8];
      Phase::Controller::InMemoryAudioFile::Description(&v60, buf);
      v27 = SBYTE3(v72);
      v28 = *(_BYTE **)buf;
      objc_msgSend(v25, "description");
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = (void *)v29;
      v31 = buf;
      if (v27 < 0)
        v31 = v28;
      objc_msgSend(v26, "stringWithFormat:", CFSTR("ExtAudioFileWrapAudioFileID() failed to wrap audio file data '%s' with error '%@'."), v31, v29);
      v32 = (void *)objc_claimAutoreleasedReturnValue();

      if (SBYTE3(v72) < 0)
        operator delete(*(void **)buf);
      v34 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v33)
                                                                                          + 816)));
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        v35 = *(_QWORD *)(a1 + 16);
        v36 = objc_msgSend(objc_retainAutorelease(v32), "UTF8String");
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
        v69 = 1024;
        v70 = 195;
        v71 = 2048;
        v72 = v35;
        v73 = 2080;
        v74 = v36;
        _os_log_impl(&dword_2164CC000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
      }

      if (!a10)
        goto LABEL_35;
      v64 = *MEMORY[0x24BDD0FC8];
      v65 = v32;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v65, &v64, 1);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v37);
      *(_QWORD *)a10 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      if (!outExtAudioFile)
        std::terminate();
      v43 = objc_alloc(MEMORY[0x24BDB1810]);
      v58 = 0;
      v32 = (void *)objc_msgSend(v43, "initForReadingFromExtAudioFile:error:", outExtAudioFile, &v58);
      v25 = v58;
      if (v25)
      {

      }
      else if (v32)
      {
        Phase::Controller::InMemoryAudioFile::Description(&v60, buf);
        if ((v72 & 0x80000000) == 0)
          v57 = buf;
        else
          v57 = *(_BYTE **)buf;
        a10 = Phase::Controller::ResidentSoundAssetInfo::InitializeWithAudioFile(a1, a3, v32, (uint64_t)v57, v19, (_QWORD *)a10, a7);
        if (SBYTE3(v72) < 0)
          operator delete(*(void **)buf);
        v25 = 0;
        if ((_DWORD)a10)
        {
          *(_DWORD *)(a1 + 32) = 4;
          a10 = 1;
        }
        goto LABEL_35;
      }
      v44 = (void *)MEMORY[0x24BDD17C8];
      Phase::Controller::InMemoryAudioFile::Description(&v60, buf);
      v45 = SBYTE3(v72);
      v46 = *(_BYTE **)buf;
      objc_msgSend(v25, "description");
      v47 = objc_claimAutoreleasedReturnValue();
      v48 = (void *)v47;
      v49 = buf;
      if (v45 < 0)
        v49 = v46;
      objc_msgSend(v44, "stringWithFormat:", CFSTR("[AVAudioFile initForReading] failed on file '%s' with error '%@'"), v49, v47);
      v50 = (void *)objc_claimAutoreleasedReturnValue();

      if (SBYTE3(v72) < 0)
        operator delete(*(void **)buf);
      v52 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v51)
                                                                                          + 816)));
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        v53 = *(_QWORD *)(a1 + 16);
        v54 = objc_msgSend(objc_retainAutorelease(v50), "UTF8String");
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
        v69 = 1024;
        v70 = 215;
        v71 = 2048;
        v72 = v53;
        v73 = 2080;
        v74 = v54;
        _os_log_impl(&dword_2164CC000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
      }

      if (a10)
      {
        v62 = *MEMORY[0x24BDD0FC8];
        v63 = v50;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v63, &v62, 1);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v55);
        *(_QWORD *)a10 = (id)objc_claimAutoreleasedReturnValue();

      }
      v32 = 0;
    }
    a10 = 0;
LABEL_35:

    goto LABEL_36;
  }
  a10 = 0;
LABEL_38:

  return a10;
}

void sub_2166A2E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  if (a26 < 0)
    operator delete(__p);

  Phase::Controller::InMemoryAudioFile::~InMemoryAudioFile((Phase::Controller::InMemoryAudioFile *)&a13);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ResidentSoundAssetInfo::InitWithData(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, double a6, double a7, uint64_t a8, _QWORD *a9)
{
  id v16;
  id v17;
  _BOOL8 v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  BOOL v23;
  void *v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  Phase::Logger *v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  Phase::Logger *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  id v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  void *v49;
  int v50;
  _BYTE *v51;
  uint64_t v52;
  void *v53;
  _BYTE *v54;
  void *v55;
  Phase::Logger *v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  void *v66;
  Phase::Logger *v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  Phase::Logger *v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  void *v78;
  void *v79;
  Phase::Logger *v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  id v85;
  DSPComplex *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  Phase::Logger *v92;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  AVAudioFormat *v113;
  AVAudioFormat *v114;
  double v115;
  double v116;
  double v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  void *v121;
  _BOOL4 v122;
  _BOOL4 v123;
  AVAudioPCMBuffer *v124;
  double v125;
  vDSP_Length v126;
  AVAudioPCMBuffer *v127;
  AVAudioPCMBuffer *v128;
  AVAudioFrameCount v129;
  unsigned int *v130;
  AudioBufferList *v131;
  void *v132;
  unint64_t v133;
  uint64_t v134;
  AVAudioPCMBuffer *v135;
  void *v136;
  BOOL v137;
  void *v138;
  void *v139;
  void *v140;
  Phase::Logger *v141;
  NSObject *v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  Phase::Logger *v151;
  NSObject *v152;
  uint64_t v153;
  void *v154;
  void *v155;
  void *v156;
  Phase::Logger *v157;
  NSObject *v158;
  uint64_t v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  Phase::Logger *v165;
  NSObject *v166;
  uint64_t v167;
  void *v168;
  AVAudioPCMBuffer *v169;
  int v170;
  int v171;
  double v172;
  double v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unint64_t v177;
  unsigned int v178;
  void *v179;
  unsigned int v180;
  unint64_t v181;
  void *v182;
  void *v183;
  void *v184;
  Phase::Logger *v185;
  NSObject *v186;
  uint64_t v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  Phase::Logger *v192;
  NSObject *v193;
  uint64_t v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  Phase::Logger *v199;
  NSObject *v200;
  uint64_t v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  Phase::Logger *v206;
  NSObject *v207;
  uint64_t v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  Phase::Logger *v213;
  NSObject *v214;
  uint64_t v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  Phase::Logger *v220;
  NSObject *v221;
  uint64_t v222;
  void *v223;
  unsigned int v224;
  unsigned int v225;
  AVAudioPCMBuffer *v226;
  double *__A;
  double *__Aa;
  double *__Ab;
  double *__Ac;
  vDSP_Length __N;
  vDSP_Length __Na;
  void *v233;
  AVAudioPCMBuffer *v234;
  AVAudioPCMBuffer *v235;
  void *v236;
  AVAudioPCMBuffer *v237;
  void *context;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  void *v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  void *v248;
  uint64_t v249;
  void *v250;
  uint64_t v251;
  void *v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  void *v256;
  uint8_t v257[4];
  const char *v258;
  __int16 v259;
  int v260;
  __int16 v261;
  uint64_t v262;
  __int16 v263;
  uint64_t v264;
  _BYTE buf[18];
  __int16 v266;
  uint64_t v267;
  __int16 v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  char v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  AVAudioPCMBuffer *v276;
  uint64_t v277;
  AVAudioPCMBuffer *v278;
  uint64_t v279;
  AVAudioPCMBuffer *v280;
  uint64_t v281;
  AVAudioPCMBuffer *v282;
  uint64_t v283;
  void *v284;
  uint64_t v285;
  void *v286;
  uint64_t v287;
  void *v288;
  uint64_t v289;
  void *v290;
  uint64_t v291;
  _QWORD v292[4];

  v292[1] = *MEMORY[0x24BDAC8D0];
  v16 = a4;
  v17 = a5;
  v18 = Phase::Controller::SoundAssetInfo::BaseInit(a1, 0, a2, a3, a9, a7);
  if (v18)
  {
    v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v18) + 816));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 243;
      v266 = 2048;
      v267 = v20;
      _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ResidentSoundAssetInfo::InitWithData for assetId %llu", buf, 0x1Cu);
    }
    context = (void *)MEMORY[0x2199FA298]();
    *(_DWORD *)(a1 + 32) = 1;
    if (v16 && objc_msgSend(v16, "length"))
    {
      if (a6 <= 0.0)
      {
        v32 = (void *)MEMORY[0x24BDD17C8];
        objc_msgSend(v16, "description");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "stringWithFormat:", CFSTR("Invalid sample rate %f for data '%@'!"), *(_QWORD *)&a6, v33);
        v24 = (void *)objc_claimAutoreleasedReturnValue();

        v35 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v34)
                                                                                            + 816)));
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          v36 = *(_QWORD *)(a1 + 16);
          v37 = objc_msgSend(objc_retainAutorelease(v24), "UTF8String");
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 260;
          v266 = 2048;
          v267 = v36;
          v268 = 2080;
          v269 = v37;
          _os_log_impl(&dword_2164CC000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
        }

        if (!a9)
          goto LABEL_61;
        v289 = *MEMORY[0x24BDD0FC8];
        v290 = v24;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v290, &v289, 1);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801);
        v31 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        if (v17)
        {
          v21 = 3;
          if (a3)
            v21 = 1;
          v234 = (AVAudioPCMBuffer *)v21;
          objc_msgSend(v17, "channelLayout");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = v22 == 0;

          if (!v23)
          {
            objc_msgSend(v17, "channelLayout");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            if ((Phase::Controller::StreamRenderer::SupportsInputLayout(v24, (char)v234) & 1) == 0)
            {
              v49 = (void *)MEMORY[0x24BDD17C8];
              Phase::ChannelLayout::GetStringFromLayoutTag((Phase::ChannelLayout *)objc_msgSend(v24, "layoutTag"), buf);
              v50 = SBYTE3(v267);
              v51 = *(_BYTE **)buf;
              objc_msgSend(v16, "description");
              v52 = objc_claimAutoreleasedReturnValue();
              v53 = (void *)v52;
              v54 = buf;
              if (v50 < 0)
                v54 = v51;
              objc_msgSend(v49, "stringWithFormat:", CFSTR("Unsupported channel layout '%s' on audio data '%@'!"), v54, v52);
              v55 = (void *)objc_claimAutoreleasedReturnValue();

              if (SBYTE3(v267) < 0)
                operator delete(*(void **)buf);
              v57 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v56)
                                                                                                  + 816)));
              if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
              {
                v58 = *(_QWORD *)(a1 + 16);
                v59 = objc_msgSend(objc_retainAutorelease(v55), "UTF8String");
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 292;
                v266 = 2048;
                v267 = v58;
                v268 = 2080;
                v269 = v59;
                _os_log_impl(&dword_2164CC000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
              }

              if (a9)
              {
                v285 = *MEMORY[0x24BDD0FC8];
                v286 = v55;
                objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v286, &v285, 1);
                v60 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v60);
                *a9 = (id)objc_claimAutoreleasedReturnValue();

              }
              v26 = 0;
              v30 = v55;
              goto LABEL_27;
            }
            v25 = v24;
LABEL_34:
            if (!v25)
              goto LABEL_214;
            *(_DWORD *)(a1 + 36) = objc_msgSend(v25, "layoutTag");
            v233 = v25;
            if (objc_msgSend(v17, "commonFormat"))
            {
              if (*(_DWORD *)(objc_msgSend(v17, "streamDescription") + 24))
              {
                if (*(_DWORD *)(objc_msgSend(v17, "streamDescription") + 28))
                {
                  if (objc_msgSend(v17, "isInterleaved"))
                  {
                    v47 = *(_DWORD *)(objc_msgSend(v17, "streamDescription") + 24);
                    v48 = v47 / *(_DWORD *)(objc_msgSend(v17, "streamDescription") + 28);
                  }
                  else
                  {
                    v48 = *(_DWORD *)(objc_msgSend(v17, "streamDescription") + 24);
                  }
                  if (!v48)
                    goto LABEL_214;
                  v84 = objc_msgSend(v16, "length");
                  __N = v84 / (objc_msgSend(v17, "channelCount") * v48);
                  if (!(_DWORD)__N)
                    goto LABEL_214;
                  v85 = objc_alloc(MEMORY[0x24BDB1818]);
                  objc_msgSend(v17, "sampleRate");
                  v236 = (void *)objc_msgSend(v85, "initWithCommonFormat:sampleRate:interleaved:channelLayout:", 1, 0, v233);
                  if (v236)
                  {
                    v237 = (AVAudioPCMBuffer *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1838]), "initWithPCMFormat:frameCapacity:", v236, __N);
                    if (!v237)
                      goto LABEL_214;
                    if (objc_msgSend(v17, "isInterleaved"))
                    {
                      switch(objc_msgSend(v17, "commonFormat"))
                      {
                        case 0:
                          goto LABEL_214;
                        case 1:
                          v86 = (DSPComplex *)objc_msgSend(objc_retainAutorelease(v16), "bytes");
                          std::vector<float *>::vector(buf, objc_msgSend(v17, "channelCount"));
                          v87 = 0;
                          v88 = 16;
                          while (v87 < objc_msgSend(v17, "channelCount"))
                          {
                            v89 = -[AVAudioPCMBuffer mutableAudioBufferList](v237, "mutableAudioBufferList");
                            *(_QWORD *)(*(_QWORD *)buf + 8 * v87++) = *(_QWORD *)(v89 + v88);
                            v88 += 16;
                          }
                          Phase::ArrayFunction::Deinterleave(v86, *(void ***)buf, __N, objc_msgSend(v17, "channelCount"));
                          if (*(_QWORD *)buf)
                          {
                            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
                            operator delete(*(void **)buf);
                          }
                          goto LABEL_108;
                        case 2:
                          __Aa = (double *)objc_msgSend(objc_retainAutorelease(v16), "bytes");
                          v98 = 0;
                          v99 = 16;
                          while (v98 < objc_msgSend(v17, "channelCount"))
                          {
                            vDSP_vdpsp(__Aa, objc_msgSend(v17, "channelCount"), *(float **)(-[AVAudioPCMBuffer mutableAudioBufferList](v237, "mutableAudioBufferList")+ v99), 1, __N);
                            ++v98;
                            v99 += 16;
                          }
                          goto LABEL_108;
                        case 3:
                          __Ac = (double *)objc_msgSend(objc_retainAutorelease(v16), "bytes");
                          v108 = 0;
                          v109 = 16;
                          while (v108 < objc_msgSend(v17, "channelCount"))
                          {
                            vDSP_vflt16((const __int16 *)__Ac, objc_msgSend(v17, "channelCount"), *(float **)(-[AVAudioPCMBuffer mutableAudioBufferList](v237, "mutableAudioBufferList")+ v109), 1, __N);
                            ++v108;
                            v109 += 16;
                          }
                          goto LABEL_108;
                        case 4:
                          __Ab = (double *)objc_msgSend(objc_retainAutorelease(v16), "bytes");
                          v103 = 0;
                          v104 = 16;
                          while (v103 < objc_msgSend(v17, "channelCount"))
                          {
                            vDSP_vflt32((const int *)__Ab, objc_msgSend(v17, "channelCount"), *(float **)(-[AVAudioPCMBuffer mutableAudioBufferList](v237, "mutableAudioBufferList")+ v104), 1, __N);
                            ++v103;
                            v104 += 16;
                          }
                          goto LABEL_108;
                        default:
                          goto LABEL_108;
                      }
                    }
                    switch(objc_msgSend(v17, "commonFormat"))
                    {
                      case 0:
                        goto LABEL_214;
                      case 1:
                        v96 = 0;
                        v97 = 16;
                        while (v96 < objc_msgSend(v17, "channelCount"))
                        {
                          objc_msgSend(v16, "getBytes:range:", *(_QWORD *)(-[AVAudioPCMBuffer mutableAudioBufferList](v237, "mutableAudioBufferList") + v97), v96 * 4 * __N, 4 * __N);
                          ++v96;
                          v97 += 16;
                        }
                        goto LABEL_108;
                      case 2:
                        v100 = objc_msgSend(objc_retainAutorelease(v16), "bytes");
                        v101 = 0;
                        v102 = 16;
                        while (v101 < objc_msgSend(v17, "channelCount"))
                        {
                          vDSP_vdpsp((const double *)(v100 + 8 * (v101++ * __N)), 1, *(float **)(-[AVAudioPCMBuffer mutableAudioBufferList](v237, "mutableAudioBufferList") + v102), 1, __N);
                          v102 += 16;
                        }
                        goto LABEL_108;
                      case 3:
                        v110 = objc_msgSend(objc_retainAutorelease(v16), "bytes");
                        v111 = 0;
                        v112 = 16;
                        while (v111 < objc_msgSend(v17, "channelCount"))
                        {
                          vDSP_vflt16((const __int16 *)(v110 + 2 * (v111++ * __N)), 1, *(float **)(-[AVAudioPCMBuffer mutableAudioBufferList](v237, "mutableAudioBufferList") + v112), 1, __N);
                          v112 += 16;
                        }
                        goto LABEL_108;
                      case 4:
                        v105 = objc_msgSend(objc_retainAutorelease(v16), "bytes");
                        v106 = 0;
                        v107 = 16;
                        while (v106 < objc_msgSend(v17, "channelCount"))
                        {
                          vDSP_vflt32((const int *)(v105 + 4 * (v106++ * __N)), 1, *(float **)(-[AVAudioPCMBuffer mutableAudioBufferList](v237, "mutableAudioBufferList") + v107), 1, __N);
                          v107 += 16;
                        }
                        goto LABEL_108;
                      default:
LABEL_108:
                        -[AVAudioPCMBuffer setFrameLength:](v237, "setFrameLength:", __N);
                        v113 = (AVAudioFormat *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1818]), "initWithCommonFormat:sampleRate:interleaved:channelLayout:", 1, 0, v233, a6);
                        v114 = v113;
                        __A = (double *)v113;
                        if (!v113)
                        {
                          v138 = (void *)MEMORY[0x24BDD17C8];
                          objc_msgSend(v16, "description");
                          v139 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v138, "stringWithFormat:", CFSTR("[AVAudioFormat initWithCommonFormat] failed on data '%@'"), v139);
                          v140 = (void *)objc_claimAutoreleasedReturnValue();

                          v142 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v141) + 816));
                          if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
                          {
                            v143 = *(_QWORD *)(a1 + 16);
                            v144 = objc_msgSend(objc_retainAutorelease(v140), "UTF8String");
                            *(_DWORD *)buf = 136315906;
                            *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = 534;
                            v266 = 2048;
                            v267 = v143;
                            v268 = 2080;
                            v269 = v144;
                            _os_log_impl(&dword_2164CC000, v142, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
                          }

                          if (a9)
                          {
                            v273 = *MEMORY[0x24BDD0FC8];
                            v274 = v140;
                            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v274, &v273, 1);
                            v145 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v145);
                            *a9 = (id)objc_claimAutoreleasedReturnValue();

                          }
                          v26 = 0;
                          goto LABEL_223;
                        }
                        -[AVAudioFormat sampleRate](v113, "sampleRate");
                        v116 = v115;
                        objc_msgSend(v236, "sampleRate");
                        LODWORD(v118) = vcvtpd_u64_f64(v116 / v117 * (double)__N);
                        if (!(_DWORD)v118)
                          goto LABEL_214;
                        v225 = v118;
                        Phase::Controller::ResidentSoundAssetInfo::AllocateAudioBuffer((Phase::Controller::ResidentSoundAssetInfo *)a1, v114, v118);
                        v119 = *(void **)(a1 + 48);
                        if (!v119 || !objc_msgSend(v119, "floatChannelData"))
                          goto LABEL_214;
                        v120 = v225 >= 0x800 ? 2048 : v225;
                        v224 = v120;
                        v226 = (AVAudioPCMBuffer *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1838]), "initWithPCMFormat:frameCapacity:", v114, v120);
                        if (!v226 || !-[AVAudioPCMBuffer floatChannelData](v226, "floatChannelData"))
                          goto LABEL_214;
                        Phase::Controller::StreamRenderer::StreamRenderer((uint64_t)buf, v236, v114, v120, (uint64_t)v234);
                        if (v270)
                        {
                          if (a3 == 1)
                          {
                            objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.audio.PHASE"));
                            v235 = (AVAudioPCMBuffer *)objc_claimAutoreleasedReturnValue();
                            -[AVAudioPCMBuffer URLForResource:withExtension:subdirectory:](v235, "URLForResource:withExtension:subdirectory:", CFSTR("MPEGDefault12LKFSSuperiorV2"), CFSTR("aupreset"), CFSTR("AUPresets/AULoudnessNormalizer"));
                            v121 = (void *)objc_claimAutoreleasedReturnValue();
                            if ((Phase::Controller::StreamRenderer::SetPreset((uint64_t)buf, 0, v121, *(double *)(a1 + 40)) & 1) == 0)
                            {
                              v161 = (void *)MEMORY[0x24BDD17C8];
                              objc_msgSend(v121, "description");
                              v162 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v16, "description");
                              v163 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v161, "stringWithFormat:", CFSTR("Failed to load preset '%@' for audio data '%@'!"), v162, v163);
                              v164 = (void *)objc_claimAutoreleasedReturnValue();

                              v166 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v165) + 816));
                              if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR))
                              {
                                v167 = *(_QWORD *)(a1 + 16);
                                *(_DWORD *)v257 = 136315906;
                                v258 = "ResidentSoundAssetInfo.mm";
                                v259 = 1024;
                                v260 = 605;
                                v261 = 2048;
                                v262 = v167;
                                v263 = 2080;
                                v264 = objc_msgSend(objc_retainAutorelease(v164), "UTF8String");
                                _os_log_impl(&dword_2164CC000, v166, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                              }

                              if (a9)
                              {
                                v253 = *MEMORY[0x24BDD0FC8];
                                v254 = v164;
                                objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v254, &v253, 1);
                                v168 = (void *)objc_claimAutoreleasedReturnValue();
                                objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v168);
                                *a9 = (id)objc_claimAutoreleasedReturnValue();

                              }
                              goto LABEL_220;
                            }

                          }
                          v122 = Phase::Controller::StreamRenderer::Prepare((Phase::Controller::StreamRenderer *)buf);
                          if (v270)
                            v123 = v122;
                          else
                            v123 = 0;
                          if (v123 && v271)
                          {
                            v124 = v237;
                            if (a3 == 1)
                            {
                              objc_msgSend(v236, "sampleRate");
                              LODWORD(v126) = vcvtpd_u64_f64(v125);
                              if (__N >= v126)
                                v126 = v126;
                              else
                                v126 = __N;
                              __Na = v126;
                              if (!(_DWORD)v126)
                                goto LABEL_214;
                              v127 = (AVAudioPCMBuffer *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1838]), "initWithPCMFormat:frameCapacity:", v236, v126);
                              if (!v127)
                                goto LABEL_214;
                              v128 = v127;
                              if (!-[AVAudioPCMBuffer floatChannelData](v127, "floatChannelData"))
                                goto LABEL_214;
                              -[AVAudioPCMBuffer setFrameLength:](v128, "setFrameLength:", __Na);
                              v129 = -[AVAudioPCMBuffer frameLength](v128, "frameLength");
                              v235 = v128;
                              if (v129 != -[AVAudioPCMBuffer frameCapacity](v128, "frameCapacity"))
                                goto LABEL_214;
                              v130 = (unsigned int *)-[AVAudioPCMBuffer mutableAudioBufferList](v237, "mutableAudioBufferList");
                              v131 = (AudioBufferList *)-[AVAudioPCMBuffer mutableAudioBufferList](v128, "mutableAudioBufferList");
                              -[AVAudioPCMBuffer format](v128, "format");
                              v132 = (void *)objc_claimAutoreleasedReturnValue();
                              sCopyAudioBufferList(v130, v131, __Na, *(_DWORD *)(objc_msgSend(v132, "streamDescription") + 24));

                              v133 = 0;
                              v134 = 16;
                              v135 = v235;
                              while (1)
                              {
                                -[AVAudioPCMBuffer format](v135, "format");
                                v136 = (void *)objc_claimAutoreleasedReturnValue();
                                v137 = v133 < objc_msgSend(v136, "channelCount");

                                if (!v137)
                                  break;
                                v135 = v235;
                                vDSP_vrvrs(*(float **)(-[AVAudioPCMBuffer mutableAudioBufferList](v235, "mutableAudioBufferList")+ v134), 1, __Na);
                                ++v133;
                                v134 += 16;
                              }
                              v169 = v235;
                              if (!Phase::Controller::StreamRenderer::ScheduleBuffer((Phase::Controller::StreamRenderer *)buf, v235, 0, 1uLL))
                              {
                                v196 = (void *)MEMORY[0x24BDD17C8];
                                objc_msgSend(v16, "description");
                                v197 = (void *)objc_claimAutoreleasedReturnValue();
                                objc_msgSend(v196, "stringWithFormat:", CFSTR("Failed to schedule reverse audio buffer from audio data '%@' for rendering!"), v197);
                                v198 = (void *)objc_claimAutoreleasedReturnValue();

                                v200 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v199) + 816));
                                if (os_log_type_enabled(v200, OS_LOG_TYPE_ERROR))
                                {
                                  v201 = *(_QWORD *)(a1 + 16);
                                  *(_DWORD *)v257 = 136315906;
                                  v258 = "ResidentSoundAssetInfo.mm";
                                  v259 = 1024;
                                  v260 = 667;
                                  v261 = 2048;
                                  v262 = v201;
                                  v263 = 2080;
                                  v264 = objc_msgSend(objc_retainAutorelease(v198), "UTF8String");
                                  _os_log_impl(&dword_2164CC000, v200, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                                }

                                if (a9)
                                {
                                  v249 = *MEMORY[0x24BDD0FC8];
                                  v250 = v198;
                                  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v250, &v249, 1);
                                  v202 = (void *)objc_claimAutoreleasedReturnValue();
                                  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v202);
                                  *a9 = (id)objc_claimAutoreleasedReturnValue();

                                }
                                goto LABEL_220;
                              }
                              v124 = v237;
                            }
                            else
                            {
                              v169 = 0;
                            }
                            v235 = v169;
                            if (Phase::Controller::StreamRenderer::ScheduleBuffer((Phase::Controller::StreamRenderer *)buf, v124, 0, 1uLL))
                            {
                              v170 = Phase::Controller::StreamRenderer::Start((Phase::Controller::StreamRenderer *)buf);
                              if (v270)
                                v171 = v170;
                              else
                                v171 = 0;
                              if (v171 == 1 && v271 && v272)
                              {
                                if (!v169)
                                  goto LABEL_207;
                                objc_msgSend(__A, "sampleRate");
                                v173 = 0.0;
                                if (a3 == 1)
                                  v173 = 1.0;
                                v174 = vcvtpd_u64_f64(v173 * v172);
                                v175 = 0;
                                if (v225 >= v174)
                                  v176 = v174;
                                else
                                  v176 = v225;
                                if (v176)
                                {
                                  while (1)
                                  {
                                    v177 = v224 >= v176 - v175 ? v176 - v175 : v224;
                                    if (!Phase::Controller::StreamRenderer::RenderOffline((id *)buf, v177, v226))
                                      break;
                                    if ((_DWORD)v177 != -[AVAudioPCMBuffer frameLength](v226, "frameLength"))
                                      goto LABEL_214;
                                    v175 += v177;
                                    if (v175 >= v176)
                                      goto LABEL_179;
                                  }
                                  v217 = (void *)MEMORY[0x24BDD17C8];
                                  objc_msgSend(v16, "description");
                                  v218 = (void *)objc_claimAutoreleasedReturnValue();
                                  objc_msgSend(v217, "stringWithFormat:", CFSTR("Failed to render buffer for audio file '%@'!"), v218);
                                  v219 = (void *)objc_claimAutoreleasedReturnValue();

                                  v221 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v220) + 816));
                                  if (os_log_type_enabled(v221, OS_LOG_TYPE_ERROR))
                                  {
                                    v222 = *(_QWORD *)(a1 + 16);
                                    *(_DWORD *)v257 = 136315906;
                                    v258 = "ResidentSoundAssetInfo.mm";
                                    v259 = 1024;
                                    v260 = 718;
                                    v261 = 2048;
                                    v262 = v222;
                                    v263 = 2080;
                                    v264 = objc_msgSend(objc_retainAutorelease(v219), "UTF8String");
                                    _os_log_impl(&dword_2164CC000, v221, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                                  }

                                  if (a9)
                                  {
                                    v243 = *MEMORY[0x24BDD0FC8];
                                    v244 = v219;
                                    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v244, &v243, 1);
                                    v223 = (void *)objc_claimAutoreleasedReturnValue();
                                    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v223);
                                    *a9 = (id)objc_claimAutoreleasedReturnValue();

                                  }
                                  goto LABEL_220;
                                }
LABEL_179:
                                if (v175 == v176)
                                {
LABEL_207:
                                  if (objc_msgSend(*(id *)(a1 + 48), "frameCapacity") >= v225)
                                  {
                                    while (1)
                                    {
                                      v178 = objc_msgSend(*(id *)(a1 + 48), "frameLength");
                                      v179 = *(void **)(a1 + 48);
                                      if (v178 >= v225)
                                        break;
                                      v180 = v225 - objc_msgSend(v179, "frameLength");
                                      if (v224 >= v180)
                                        v181 = v180;
                                      else
                                        v181 = v224;
                                      if (!Phase::Controller::StreamRenderer::RenderOffline((id *)buf, v181, v226))
                                      {
                                        v210 = (void *)MEMORY[0x24BDD17C8];
                                        objc_msgSend(v16, "description");
                                        v211 = (void *)objc_claimAutoreleasedReturnValue();
                                        objc_msgSend(v210, "stringWithFormat:", CFSTR("Failed to render buffer for audio data '%@'!"), v211);
                                        v212 = (void *)objc_claimAutoreleasedReturnValue();

                                        v214 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v213) + 816));
                                        if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
                                        {
                                          v215 = *(_QWORD *)(a1 + 16);
                                          *(_DWORD *)v257 = 136315906;
                                          v258 = "ResidentSoundAssetInfo.mm";
                                          v259 = 1024;
                                          v260 = 741;
                                          v261 = 2048;
                                          v262 = v215;
                                          v263 = 2080;
                                          v264 = objc_msgSend(objc_retainAutorelease(v212), "UTF8String");
                                          _os_log_impl(&dword_2164CC000, v214, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                                        }

                                        if (a9)
                                        {
                                          v241 = *MEMORY[0x24BDD0FC8];
                                          v242 = v212;
                                          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v242, &v241, 1);
                                          v216 = (void *)objc_claimAutoreleasedReturnValue();
                                          objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v216);
                                          *a9 = (id)objc_claimAutoreleasedReturnValue();

                                        }
                                        goto LABEL_220;
                                      }
                                      if ((objc_msgSend(*(id *)(a1 + 48), "appendDataFromBuffer:", v226) & 1) == 0)
                                      {
                                        v182 = (void *)MEMORY[0x24BDD17C8];
                                        objc_msgSend(v16, "description");
                                        v183 = (void *)objc_claimAutoreleasedReturnValue();
                                        objc_msgSend(v182, "stringWithFormat:", CFSTR("Failed to append buffer for audio data  '%@'!"), v183);
                                        v184 = (void *)objc_claimAutoreleasedReturnValue();

                                        v186 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v185) + 816));
                                        if (os_log_type_enabled(v186, OS_LOG_TYPE_ERROR))
                                        {
                                          v187 = *(_QWORD *)(a1 + 16);
                                          *(_DWORD *)v257 = 136315906;
                                          v258 = "ResidentSoundAssetInfo.mm";
                                          v259 = 1024;
                                          v260 = 750;
                                          v261 = 2048;
                                          v262 = v187;
                                          v263 = 2080;
                                          v264 = objc_msgSend(objc_retainAutorelease(v184), "UTF8String");
                                          _os_log_impl(&dword_2164CC000, v186, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                                        }

                                        if (a9)
                                        {
                                          v239 = *MEMORY[0x24BDD0FC8];
                                          v240 = v184;
                                          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v240, &v239, 1);
                                          v188 = (void *)objc_claimAutoreleasedReturnValue();
                                          objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v188);
                                          *a9 = (id)objc_claimAutoreleasedReturnValue();

                                        }
                                        goto LABEL_220;
                                      }
                                    }
                                    if (objc_msgSend(v179, "frameLength") == v225)
                                    {
                                      *(_DWORD *)(a1 + 32) = 4;
                                      v26 = 1;
LABEL_221:
                                      v150 = v235;
                                      goto LABEL_222;
                                    }
                                  }
                                }
LABEL_214:
                                std::terminate();
                              }
                              v203 = (void *)MEMORY[0x24BDD17C8];
                              objc_msgSend(v16, "description");
                              v204 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v203, "stringWithFormat:", CFSTR("Failed to start stream renderer for audio data '%@'!"), v204);
                              v205 = (void *)objc_claimAutoreleasedReturnValue();

                              v207 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v206) + 816));
                              if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
                              {
                                v208 = *(_QWORD *)(a1 + 16);
                                *(_DWORD *)v257 = 136315906;
                                v258 = "ResidentSoundAssetInfo.mm";
                                v259 = 1024;
                                v260 = 695;
                                v261 = 2048;
                                v262 = v208;
                                v263 = 2080;
                                v264 = objc_msgSend(objc_retainAutorelease(v205), "UTF8String");
                                _os_log_impl(&dword_2164CC000, v207, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                              }

                              if (a9)
                              {
                                v245 = *MEMORY[0x24BDD0FC8];
                                v246 = v205;
                                objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v246, &v245, 1);
                                v209 = (void *)objc_claimAutoreleasedReturnValue();
                                objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v209);
                                *a9 = (id)objc_claimAutoreleasedReturnValue();

                              }
                            }
                            else
                            {
                              v189 = (void *)MEMORY[0x24BDD17C8];
                              objc_msgSend(v16, "description");
                              v190 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v189, "stringWithFormat:", CFSTR("Failed to schedule audio data '%@' for rendering!"), v190);
                              v191 = (void *)objc_claimAutoreleasedReturnValue();

                              v193 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v192) + 816));
                              if (os_log_type_enabled(v193, OS_LOG_TYPE_ERROR))
                              {
                                v194 = *(_QWORD *)(a1 + 16);
                                *(_DWORD *)v257 = 136315906;
                                v258 = "ResidentSoundAssetInfo.mm";
                                v259 = 1024;
                                v260 = 685;
                                v261 = 2048;
                                v262 = v194;
                                v263 = 2080;
                                v264 = objc_msgSend(objc_retainAutorelease(v191), "UTF8String");
                                _os_log_impl(&dword_2164CC000, v193, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                              }

                              if (a9)
                              {
                                v247 = *MEMORY[0x24BDD0FC8];
                                v248 = v191;
                                objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v248, &v247, 1);
                                v195 = (void *)objc_claimAutoreleasedReturnValue();
                                objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v195);
                                *a9 = (id)objc_claimAutoreleasedReturnValue();

                              }
                            }
LABEL_220:
                            v26 = 0;
                            goto LABEL_221;
                          }
                          v155 = (void *)MEMORY[0x24BDD17C8];
                          objc_msgSend(v16, "description");
                          v156 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v155, "stringWithFormat:", CFSTR("Failed to prepare stream renderer for audio data '%@'!"), v156);
                          v150 = (void *)objc_claimAutoreleasedReturnValue();

                          v158 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v157) + 816));
                          if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
                          {
                            v159 = *(_QWORD *)(a1 + 16);
                            *(_DWORD *)v257 = 136315906;
                            v258 = "ResidentSoundAssetInfo.mm";
                            v259 = 1024;
                            v260 = 615;
                            v261 = 2048;
                            v262 = v159;
                            v263 = 2080;
                            v264 = objc_msgSend(objc_retainAutorelease(v150), "UTF8String");
                            _os_log_impl(&dword_2164CC000, v158, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                          }

                          if (a9)
                          {
                            v251 = *MEMORY[0x24BDD0FC8];
                            v252 = v150;
                            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v252, &v251, 1);
                            v160 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v160);
                            *a9 = (id)objc_claimAutoreleasedReturnValue();

                          }
                        }
                        else
                        {
                          v146 = (void *)MEMORY[0x24BDD17C8];
                          objc_msgSend(v236, "description");
                          v147 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(__A, "description");
                          v148 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v16, "description");
                          v149 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v146, "stringWithFormat:", CFSTR("Failed to create Stream Renderer with input format '%@', output format '%@' and maximum frame count '%d' for audio data '%@'!"), v147, v148, v120, v149);
                          v150 = (void *)objc_claimAutoreleasedReturnValue();

                          v152 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v151) + 816));
                          if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
                          {
                            v153 = *(_QWORD *)(a1 + 16);
                            *(_DWORD *)v257 = 136315906;
                            v258 = "ResidentSoundAssetInfo.mm";
                            v259 = 1024;
                            v260 = 587;
                            v261 = 2048;
                            v262 = v153;
                            v263 = 2080;
                            v264 = objc_msgSend(objc_retainAutorelease(v150), "UTF8String");
                            _os_log_impl(&dword_2164CC000, v152, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                          }

                          if (a9)
                          {
                            v255 = *MEMORY[0x24BDD0FC8];
                            v256 = v150;
                            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v256, &v255, 1);
                            v154 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801, v154);
                            *a9 = (id)objc_claimAutoreleasedReturnValue();

                          }
                        }
                        v26 = 0;
LABEL_222:

                        Phase::Controller::StreamRenderer::~StreamRenderer((Phase::Controller::StreamRenderer *)buf);
                        v140 = v226;
LABEL_223:

                        goto LABEL_224;
                    }
                  }
                  v90 = (void *)MEMORY[0x24BDD17C8];
                  objc_msgSend(v16, "description");
                  v91 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v90, "stringWithFormat:", CFSTR("[AVAudioFormat initWithCommonFormat] failed on data '%@'"), v91);
                  v237 = (AVAudioPCMBuffer *)objc_claimAutoreleasedReturnValue();

                  v93 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v92) + 816));
                  if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
                  {
                    v94 = *(_QWORD *)(a1 + 16);
                    v95 = -[AVAudioPCMBuffer UTF8String](objc_retainAutorelease(v237), "UTF8String");
                    *(_DWORD *)buf = 136315906;
                    *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 354;
                    v266 = 2048;
                    v267 = v94;
                    v268 = 2080;
                    v269 = v95;
                    _os_log_impl(&dword_2164CC000, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
                  }

                  if (a9)
                  {
                    v277 = *MEMORY[0x24BDD0FC8];
                    v278 = v237;
                    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v278, &v277, 1);
                    __A = (double *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801);
                    v64 = (id)objc_claimAutoreleasedReturnValue();
                    goto LABEL_82;
                  }
LABEL_83:
                  v236 = 0;
                  v26 = 0;
LABEL_225:

                  v24 = v233;
                  v30 = v236;
                  goto LABEL_27;
                }
                v78 = (void *)MEMORY[0x24BDD17C8];
                objc_msgSend(v16, "description");
                v79 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v78, "stringWithFormat:", CFSTR("Data '%@' contains an invalid asbd mChannelsPerFrame == 0!"), v79);
                v237 = (AVAudioPCMBuffer *)objc_claimAutoreleasedReturnValue();

                v81 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v80) + 816));
                if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
                {
                  v82 = *(_QWORD *)(a1 + 16);
                  v83 = -[AVAudioPCMBuffer UTF8String](objc_retainAutorelease(v237), "UTF8String");
                  *(_DWORD *)buf = 136315906;
                  *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 330;
                  v266 = 2048;
                  v267 = v82;
                  v268 = 2080;
                  v269 = v83;
                  _os_log_impl(&dword_2164CC000, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
                }

                if (!a9)
                  goto LABEL_83;
                v279 = *MEMORY[0x24BDD0FC8];
                v280 = v237;
                objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v280, &v279, 1);
                __A = (double *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801);
                v64 = (id)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v65 = (void *)MEMORY[0x24BDD17C8];
                objc_msgSend(v16, "description");
                v66 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v65, "stringWithFormat:", CFSTR("Data '%@' contains an invalid asbd mBytesPerFrame == 0!"), v66);
                v237 = (AVAudioPCMBuffer *)objc_claimAutoreleasedReturnValue();

                v68 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v67) + 816));
                if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
                {
                  v69 = *(_QWORD *)(a1 + 16);
                  v70 = -[AVAudioPCMBuffer UTF8String](objc_retainAutorelease(v237), "UTF8String");
                  *(_DWORD *)buf = 136315906;
                  *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 322;
                  v266 = 2048;
                  v267 = v69;
                  v268 = 2080;
                  v269 = v70;
                  _os_log_impl(&dword_2164CC000, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
                }

                if (!a9)
                  goto LABEL_83;
                v281 = *MEMORY[0x24BDD0FC8];
                v282 = v237;
                objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v282, &v281, 1);
                __A = (double *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801);
                v64 = (id)objc_claimAutoreleasedReturnValue();
              }
            }
            else
            {
              objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("TODO: Implement support for other formats (e.g., compressed, fixed-point etc.)!"));
              v237 = (AVAudioPCMBuffer *)objc_claimAutoreleasedReturnValue();
              v61 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v237)
                                                                                                  + 816)));
              if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
              {
                v62 = *(_QWORD *)(a1 + 16);
                v63 = -[AVAudioPCMBuffer UTF8String](objc_retainAutorelease(v237), "UTF8String");
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 516;
                v266 = 2048;
                v267 = v62;
                v268 = 2080;
                v269 = v63;
                _os_log_impl(&dword_2164CC000, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
              }

              if (!a9)
                goto LABEL_83;
              v275 = *MEMORY[0x24BDD0FC8];
              v276 = v237;
              objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v276, &v275, 1);
              __A = (double *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920805);
              v64 = (id)objc_claimAutoreleasedReturnValue();
            }
LABEL_82:
            v236 = 0;
            v26 = 0;
            *a9 = v64;
LABEL_224:

            goto LABEL_225;
          }
          if (objc_msgSend(v17, "channelCount") == 1
            || objc_msgSend(v17, "channelCount") == 2)
          {
            v44 = objc_msgSend(v17, "channelCount");
            v45 = objc_alloc(MEMORY[0x24BDB17E8]);
            if (v44 == 1)
              v46 = 6553601;
            else
              v46 = 6619138;
            v25 = (void *)objc_msgSend(v45, "initWithLayoutTag:", v46);
            goto LABEL_34;
          }
          v71 = (void *)MEMORY[0x24BDD17C8];
          objc_msgSend(v16, "description");
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v71, "stringWithFormat:", CFSTR("Cannot synthesize audio channel layout for audio data '%@' with channel count %d."), v72, objc_msgSend(v17, "channelCount"));
          v24 = (void *)objc_claimAutoreleasedReturnValue();

          v74 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v73)
                                                                                              + 816)));
          if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
          {
            v75 = *(_QWORD *)(a1 + 16);
            v76 = objc_msgSend(objc_retainAutorelease(v24), "UTF8String");
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 306;
            v266 = 2048;
            v267 = v75;
            v268 = 2080;
            v269 = v76;
            _os_log_impl(&dword_2164CC000, v74, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
          }

          if (a9)
          {
            v283 = *MEMORY[0x24BDD0FC8];
            v284 = v24;
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v284, &v283, 1);
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801);
            v31 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_26;
          }
LABEL_61:
          v26 = 0;
          goto LABEL_62;
        }
        v38 = (void *)MEMORY[0x24BDD17C8];
        objc_msgSend(v16, "description");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "stringWithFormat:", CFSTR("DataAudioFormat is nil for data '%@'!"), v39);
        v24 = (void *)objc_claimAutoreleasedReturnValue();

        v41 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v40)
                                                                                            + 816)));
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          v42 = *(_QWORD *)(a1 + 16);
          v43 = objc_msgSend(objc_retainAutorelease(v24), "UTF8String");
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 267;
          v266 = 2048;
          v267 = v42;
          v268 = 2080;
          v269 = v43;
          _os_log_impl(&dword_2164CC000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
        }

        if (!a9)
          goto LABEL_61;
        v287 = *MEMORY[0x24BDD0FC8];
        v288 = v24;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v288, &v287, 1);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920801);
        v31 = (id)objc_claimAutoreleasedReturnValue();
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Data cannot be nil or zero size!"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v24)
                                                                                          + 816)));
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        v28 = *(_QWORD *)(a1 + 16);
        v29 = objc_msgSend(objc_retainAutorelease(v24), "UTF8String");
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ResidentSoundAssetInfo.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 253;
        v266 = 2048;
        v267 = v28;
        v268 = 2080;
        v269 = v29;
        _os_log_impl(&dword_2164CC000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
      }

      if (!a9)
        goto LABEL_61;
      v291 = *MEMORY[0x24BDD0FC8];
      v292[0] = v24;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v292, &v291, 1);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920803);
      v31 = (id)objc_claimAutoreleasedReturnValue();
    }
LABEL_26:
    v26 = 0;
    *a9 = v31;
LABEL_27:

LABEL_62:
    objc_autoreleasePoolPop(context);
    goto LABEL_63;
  }
  v26 = 0;
LABEL_63:

  return v26;
}

void sub_2166A5390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_objecta, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t buf,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p)
{
  void *v49;
  void *v50;
  void *v51;
  void *v52;

  Phase::Controller::StreamRenderer::~StreamRenderer((Phase::Controller::StreamRenderer *)&__p);
  _Unwind_Resume(a1);
}

void Phase::Controller::ResidentSoundAssetInfo::AllocateAudioBuffer(Phase::Controller::ResidentSoundAssetInfo *this, AVAudioFormat *a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  AVAudioFormat *v7;

  v7 = a2;
  v5 = objc_msgSend(objc_alloc(MEMORY[0x24BDB1838]), "initWithPCMFormat:frameCapacity:", v7, a3);
  v6 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v5;

}

void sub_2166A61C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

unsigned int *sCopyAudioBufferList(unsigned int *result, AudioBufferList *a2, int a3, int a4)
{
  unint64_t v4;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;

  v4 = *result;
  if (!(_DWORD)v4 || v4 != a2->mNumberBuffers)
LABEL_11:
    std::terminate();
  v6 = result;
  v7 = 0;
  v8 = 0;
  v9 = (a4 * a3);
  do
  {
    if (!v6[v7 / 4 + 2]
      || v9 > v6[v7 / 4 + 3]
      || v9 > a2->mBuffers[v7 / 0x10].mDataByteSize)
    {
      goto LABEL_11;
    }
    if ((_DWORD)v9)
    {
      result = (unsigned int *)memmove(a2->mBuffers[v7 / 0x10].mData, *(const void **)&v6[v7 / 4 + 4], v9);
      v4 = *v6;
    }
    ++v8;
    v7 += 16;
  }
  while (v8 < v4);
  return result;
}

void Phase::Controller::ResidentSoundAssetInfo::~ResidentSoundAssetInfo(Phase::Controller::ResidentSoundAssetInfo *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;

}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;

  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::ResidentSoundAssetInfo::SizeInBytes(Phase::Controller::ResidentSoundAssetInfo *this)
{
  void *v2;
  int v3;
  void *v4;
  uint64_t v5;

  v2 = (void *)*((_QWORD *)this + 6);
  if (!v2)
    return 0;
  v3 = objc_msgSend(v2, "frameCapacity");
  objc_msgSend(*((id *)this + 6), "format");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = 4 * objc_msgSend(v4, "channelCount") * v3;

  return v5;
}

void sub_2166A6350(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SoundAssetInfo::AsStreamedSoundAssetInfo(Phase::Controller::SoundAssetInfo *this)
{
  return 0;
}

_QWORD *std::vector<float *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
    *a1 = v4;
    a1[2] = &v4[8 * v5];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2166A63CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::GetRoomChangeProbabilityEstimate(Phase::SpatialModeler *this, Phase::SpatialModeler::RoomChangeDetector *a2)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  int v15;
  float v16;
  uint64_t v18;
  float *v19;
  float32x2_t v20;
  float v21;
  float v22;
  float32x2_t v23;
  float v24;
  float32x2_t v25;
  float v26;
  float32x2_t v27;
  float v28;
  float32x2_t v29;
  float v30;
  float v35;
  float v36;
  _BOOL4 v37;
  int *v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  float v49;
  float *v50;
  float v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  Phase::Logger *v56;
  NSObject *v57;
  void **v58;
  Phase::Logger *v59;
  NSObject *v60;
  void **v61;
  Phase::Logger *v62;
  NSObject *v63;
  void **v64;
  Phase::Logger *v65;
  NSObject *v66;
  void **v67;
  Phase::Logger *v68;
  NSObject *v69;
  void **v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  float v74;
  float *v75;
  float v76;
  Phase::Logger *v77;
  NSObject *v78;
  void **v79;
  int v80;
  uint64_t v81;
  float v82;
  float *v83;
  float v84;
  float v85;
  float32x2_t v86;
  uint64_t v87;
  float32x2_t v88;
  Phase::Logger *v89;
  NSObject *v90;
  void **v91;
  float v92;
  void *__p[2];
  char v94;
  float32x2_t v95;
  float32x2_t v96;
  int v97;
  uint64_t v98;
  _QWORD v99[8];
  std::string v100;
  _BYTE v101[152];
  _BYTE __str[28];
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  LODWORD(v3) = *((_DWORD *)this + 10);
  v4 = 0.0;
  if ((_DWORD)v3)
  {
    v5 = 1.0 / (float)(int)v3;
    if ((int)v3 < 1)
    {
      v6 = 0.0;
    }
    else
    {
      if ((int)v3 >= 8)
        v3 = 8;
      else
        v3 = v3;
      v6 = 0.0;
      v7 = (float *)this;
      do
      {
        v8 = *v7++;
        v6 = v6 + v8;
        --v3;
      }
      while (v3);
    }
    v9 = *((float *)this + 11);
    v10 = v5 * v6;
    if (*((_BYTE *)this + 180))
      v11 = *((float *)this + 42);
    else
      v11 = (float)(v9 * *((float *)this + 46)) / 2.8284;
    v4 = (float)(v10 - v9) * (float)(1.0 / v11);
  }
  v12 = fabsf(v4);
  if (v12 >= 0.12971)
  {
    v13 = 0;
    if (v12 >= 0.26192)
    {
      do
      {
        if (v13 == 15)
          break;
        v14 = Phase::SpatialModeler::RoomChangeDetector::foldedTValuesDf8[v13++ + 2];
      }
      while (v14 <= v12);
    }
  }
  v15 = *((_DWORD *)this + 36);
  if (v15)
  {
    v16 = 1.0 / (float)v15;
    _ZF = v15 == 1;
    if (v15 < 1)
    {
      v20 = 0;
      v21 = 0.0;
    }
    else
    {
      v18 = 1;
      if (!_ZF)
        v18 = 2;
      v19 = (float *)((char *)this + 120);
      v20 = 0;
      v21 = 0.0;
      do
      {
        v20 = vadd_f32(v20, *(float32x2_t *)(v19 - 2));
        v22 = *v19;
        v19 += 3;
        v21 = v21 + v22;
        --v18;
      }
      while (v18);
    }
    v25 = *(float32x2_t *)((char *)this + 148);
    v26 = *((float *)this + 39);
    v27 = vmul_n_f32(v20, v16);
    v28 = v16 * v21;
    if (*((_BYTE *)this + 244))
    {
      v29 = *(float32x2_t *)((char *)this + 208);
      v30 = *((float *)this + 54);
    }
    else
    {
      v29 = vdiv_f32(vmul_f32(v25, *(float32x2_t *)((char *)this + 248)), (float32x2_t)vdup_n_s32(0x3FB504F3u));
      v30 = (float)(v26 * *((float *)this + 64)) / 1.4142;
    }
    __asm { FMOV            V6.2S, #1.0 }
    v23 = vmul_f32(vsub_f32(v27, v25), vdiv_f32(_D6, v29));
    v24 = (float)(v28 - v26) * (float)(1.0 / v30);
  }
  else
  {
    v23 = 0;
    v24 = 0.0;
  }
  v92 = *((float *)this + 43);
  if (v23.f32[0] < 0.0)
    v35 = -v23.f32[0];
  else
    v35 = v23.f32[0];
  if (v23.f32[1] < 0.0)
    v36 = -v23.f32[1];
  else
    v36 = v23.f32[1];
  if (v24 < 0.0)
    v24 = -v24;
  v37 = v35 > *((float *)this + 55);
  if (v24 > *((float *)this + 57))
    v37 = 1;
  v38 = (int *)((char *)this + 260);
  *((_DWORD *)this + *((int *)this + 85) + 65) = v37;
  v39 = ((*((_DWORD *)this + 90) - (*((_DWORD *)this + 89) + 1)) & ((*((_DWORD *)this + 90)
                                                                   - (*((_DWORD *)this + 89)
                                                                    + 1)) >> 31))
      + *((_DWORD *)this + 89)
      + 1;
  *((_DWORD *)this + 89) = v39;
  v40 = *((int *)this + 85);
  *((_DWORD *)this + 88) = (int)(float)((float)((float)(*((_DWORD *)this + v40 + 65) - *((_DWORD *)this + 88))
                                              / (float)v39)
                                      + (float)*((int *)this + 88));
  *((_DWORD *)this + 86) = v40;
  *((_DWORD *)this + 85) = ((int)v40 + 1) % 20;
  v41 = *((_DWORD *)this + 87) + ((19 - *((_DWORD *)this + 87)) & ((19 - *((_DWORD *)this + 87)) >> 31)) + 1;
  *((_DWORD *)this + 87) = v41;
  if (v37)
  {
    *((_DWORD *)this + 40) = 1;
    Phase::SpatialModeler::ParameterHistory<Phase::Vector<float,3ul>,2>::GetSampleMean(&v96, (uint64_t)this + 112);
    *(float32x2_t *)((char *)this + 148) = v96;
    *((_DWORD *)this + 39) = v97;
  }
  if (v41 < 1)
  {
    v44 = 0x80000000;
  }
  else
  {
    if (v41 >= 20)
      v42 = 20;
    else
      v42 = v41;
    v43 = -v42;
    v44 = 0x80000000;
    do
    {
      v46 = *v38++;
      v45 = v46;
      if (v44 <= v46)
        v44 = v45;
    }
    while (!__CFADD__(v43++, 1));
  }
  *((float *)this + 92) = *((float *)this + 92)
                        + (float)(*((float *)this + 91) * (float)((float)v44 - *((float *)this + 92)));
  if (*((_BYTE *)this + 372))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v96);
    v47 = *((_DWORD *)this + 10);
    if (v47 >= 1)
    {
      if (v47 >= 8)
        v48 = 8;
      else
        v48 = v47;
      v49 = 0.0;
      v50 = (float *)this;
      do
      {
        v51 = *v50++;
        v49 = v49 + v51;
        --v48;
      }
      while (v48);
    }
    Phase::SpatialModeler::ParameterHistory<Phase::Vector<float,3ul>,2>::GetSampleMean(&v95, (uint64_t)this + 112);
    if (v35 >= 0.13383)
    {
      v52 = 0;
      if (v35 >= 0.27072)
      {
        do
        {
          if (v52 == 15)
            break;
          v53 = Phase::SpatialModeler::RoomChangeDetector::foldedTValuesDf4[v52++ + 2];
        }
        while (v53 <= v35);
      }
    }
    if (v36 >= 0.13383)
    {
      v54 = 0;
      if (v36 >= 0.27072)
      {
        do
        {
          if (v54 == 15)
            break;
          v55 = Phase::SpatialModeler::RoomChangeDetector::foldedTValuesDf4[v54++ + 2];
        }
        while (v55 <= v36);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__str, "");
    std::string::operator=(&v100, (const std::string *)__str);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v99);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "RoomChange");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, "\n", "GetRoomChangeProbabilityEstimate Mfp:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "cumulative mean:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "sample mean:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "t:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "p:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "Tlevel:");
    v56 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    v57 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v56) + 1184);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      v58 = v94 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__str = 136315650;
      *(_QWORD *)&__str[4] = "RoomChangeDetector.cpp";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 123;
      *(_WORD *)&__str[18] = 2080;
      *(_QWORD *)&__str[20] = v58;
      _os_log_impl(&dword_2164CC000, v57, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", __str, 0x1Cu);
      if (v94 < 0)
        operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__str, "");
    std::string::operator=(&v100, (const std::string *)__str);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v99);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "RoomChange");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, "\n", "GetRoomChangeProbabilityEstimate Listener pos x:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "cumulative mean:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "sample mean:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "t:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "p:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "Tlevel:");
    v59 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    v60 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v59) + 1184);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      v61 = v94 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__str = 136315650;
      *(_QWORD *)&__str[4] = "RoomChangeDetector.cpp";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 132;
      *(_WORD *)&__str[18] = 2080;
      *(_QWORD *)&__str[20] = v61;
      _os_log_impl(&dword_2164CC000, v60, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", __str, 0x1Cu);
      if (v94 < 0)
        operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__str, "");
    std::string::operator=(&v100, (const std::string *)__str);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v99);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "RoomChange");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, "\n", "GetRoomChangeProbabilityEstimate Listener pos y:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "cumulative mean:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "sample mean:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "t:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "p:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "Tlevel:");
    v62 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    v63 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v62) + 1184);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      v64 = v94 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__str = 136315650;
      *(_QWORD *)&__str[4] = "RoomChangeDetector.cpp";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 141;
      *(_WORD *)&__str[18] = 2080;
      *(_QWORD *)&__str[20] = v64;
      _os_log_impl(&dword_2164CC000, v63, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", __str, 0x1Cu);
      if (v94 < 0)
        operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__str, "");
    std::string::operator=(&v100, (const std::string *)__str);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v99);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "RoomChange");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, "\n", "GetRoomChangeProbabilityEstimate:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "Combined probability:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "Smoothed listener movement detection:");
    v65 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    v66 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v65) + 1184);
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      v67 = v94 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__str = 136315650;
      *(_QWORD *)&__str[4] = "RoomChangeDetector.cpp";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 149;
      *(_WORD *)&__str[18] = 2080;
      *(_QWORD *)&__str[20] = v67;
      _os_log_impl(&dword_2164CC000, v66, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", __str, 0x1Cu);
      if (v94 < 0)
        operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__str, "");
    std::string::operator=(&v100, (const std::string *)__str);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v99);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "RoomChange");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, "\n", "inQuery stats:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "mfp:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "mMeanAbsorption:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "mListenerPos:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, " ");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, " ");
    v68 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    v69 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v68) + 1184);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      v70 = v94 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__str = 136315650;
      *(_QWORD *)&__str[4] = "RoomChangeDetector.cpp";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 160;
      *(_WORD *)&__str[18] = 2080;
      *(_QWORD *)&__str[20] = v70;
      _os_log_impl(&dword_2164CC000, v69, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", __str, 0x1Cu);
      if (v94 < 0)
        operator delete(__p[0]);
    }
    v96 = *(float32x2_t *)MEMORY[0x24BEDB7F0];
    v71 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(float32x2_t *)((char *)&v96 + *(_QWORD *)(*(_QWORD *)&v96 - 24)) = *(float32x2_t *)(MEMORY[0x24BEDB7F0] + 64);
    v98 = v71;
    v99[0] = MEMORY[0x24BEDB848] + 16;
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2199F9CD4](v101);
  }
  if (v12 > v92)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v96);
    v72 = *((_DWORD *)this + 10);
    if (v72 >= 1)
    {
      if (v72 >= 8)
        v73 = 8;
      else
        v73 = v72;
      v74 = 0.0;
      v75 = (float *)this;
      do
      {
        v76 = *v75++;
        v74 = v74 + v76;
        --v73;
      }
      while (v73);
    }
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, "\n", "RoomChangeDetector - Significant MFP change");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "cumulative mean:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "sample mean:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "t:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "p:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "Tlevel:");
    v77 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
    v78 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v77) + 1184);
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      v79 = v94 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__str = 136315650;
      *(_QWORD *)&__str[4] = "RoomChangeDetector.cpp";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 177;
      *(_WORD *)&__str[18] = 2080;
      *(_QWORD *)&__str[20] = v79;
      _os_log_impl(&dword_2164CC000, v78, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", __str, 0x1Cu);
      if (v94 < 0)
        operator delete(__p[0]);
    }
    *((_DWORD *)this + 12) = 1;
    v80 = *((_DWORD *)this + 10);
    if (v80 < 1)
    {
      v85 = 0.0;
    }
    else
    {
      if (v80 >= 8)
        v81 = 8;
      else
        v81 = v80;
      v82 = 0.0;
      v83 = (float *)this;
      do
      {
        v84 = *v83++;
        v82 = v82 + v84;
        --v81;
      }
      while (v81);
      v85 = (float)(1.0 / (float)v80) * v82;
    }
    *((float *)this + 11) = v85;
    v86 = *(float32x2_t *)MEMORY[0x24BEDB7F0];
    v96 = v86;
    v88 = *(float32x2_t *)(MEMORY[0x24BEDB7F0] + 64);
    v87 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(float32x2_t *)((char *)&v96 + *(_QWORD *)(*(_QWORD *)&v86 - 24)) = v88;
    v98 = v87;
    v99[0] = MEMORY[0x24BEDB848] + 16;
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2199F9CD4](v101);
    if (v44)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v96);
      Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, "\n", "RoomChangeDetector - Room change detected");
      Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "Smoothed listener movement detection:");
      Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
      Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v98, " ", "Combined probability:");
      v89 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v98, "\n");
      v90 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v89) + 1184);
      if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        v91 = v94 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)__str = 136315650;
        *(_QWORD *)&__str[4] = "RoomChangeDetector.cpp";
        *(_WORD *)&__str[12] = 1024;
        *(_DWORD *)&__str[14] = 190;
        *(_WORD *)&__str[18] = 2080;
        *(_QWORD *)&__str[20] = v91;
        _os_log_impl(&dword_2164CC000, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", __str, 0x1Cu);
        if (v94 < 0)
          operator delete(__p[0]);
      }
      v96 = v86;
      *(float32x2_t *)((char *)&v96 + *(_QWORD *)(*(_QWORD *)&v86 - 24)) = v88;
      v98 = v87;
      v99[0] = MEMORY[0x24BEDB848] + 16;
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v100.__r_.__value_.__l.__data_);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x2199F9CD4](v101);
    }
  }
}

void sub_2166A7698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

float32x2_t Phase::SpatialModeler::ParameterHistory<Phase::Vector<float,3ul>,2>::GetSampleMean(float32x2_t *a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  float v4;
  uint64_t v5;
  float *v6;
  float32x2_t v7;
  float v8;
  float v9;
  float v10;
  float32x2_t result;

  v2 = *(_DWORD *)(a2 + 32);
  v3 = v2 == 1;
  if (v2 < 1)
  {
    v7 = 0;
    v10 = 0.0;
    v8 = 0.0;
  }
  else
  {
    v4 = (float)v2;
    v5 = 1;
    if (!v3)
      v5 = 2;
    v6 = (float *)(a2 + 8);
    v7 = 0;
    v8 = 0.0;
    do
    {
      v7 = vadd_f32(v7, *(float32x2_t *)(v6 - 2));
      v9 = *v6;
      v6 += 3;
      v8 = v8 + v9;
      --v5;
    }
    while (v5);
    v10 = 1.0 / v4;
  }
  result = vmul_n_f32(v7, v10);
  *a1 = result;
  a1[1].f32[0] = v10 * v8;
  return result;
}

_QWORD *Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(_QWORD *a1, const char *a2, char *__s)
{
  size_t v6;
  _QWORD *v7;
  size_t v8;

  v6 = strlen(__s);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v6);
  v8 = strlen(a2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a2, v8);
}

_QWORD *Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>(uint64_t a1, const char *a2)
{
  _QWORD *v3;
  size_t v4;

  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = strlen(a2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)a2, v4);
}

uint64_t Phase::Controller::RoomCongruenceManager::RoomCongruenceManager(uint64_t a1, void *a2)
{
  Phase::Logger *v3;
  uint64_t InstancePtr;
  Phase::Logger *v5;
  void **v6;
  uint64_t v7;
  void *v8;
  double v9;
  uint64_t i;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  double v25;
  uint64_t v26;
  void *v27;
  double v28;
  uint64_t v29;
  void *v30;
  double v31;
  int v32;
  void *v33;
  void *v34;
  void *v35;
  double v36;
  void *v37;
  void *v38;
  double v39;
  void *v40;
  void *v41;
  double v42;
  void *v43;
  void *v44;
  double v45;
  void *v46;
  void *v47;
  double v48;
  void *v49;

  v3 = a2;
  InstancePtr = Phase::Logger::GetInstancePtr(v3);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::Commandable(a1, *(_QWORD *)(InstancePtr + 1184), 1, 0x20000);
  *(_QWORD *)a1 = off_24D580CD8;
  v5 = v3;
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = (void **)(a1 + 56);
  *(_QWORD *)(a1 + 40) = v5;
  *(_WORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 50) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  if (v5)
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 10);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = *v6;
    *v6 = (void *)v7;

    for (i = 0; i != 10; ++i)
    {
      v11 = *v6;
      LODWORD(v9) = Phase::sOctaveBandFrequencies[i];
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v9);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "addObject:", v12);

    }
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 10);
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = *(void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v13;

    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 10);
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = *(void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v15;

    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 10);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v17;

    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 10);
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v19;

    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 10);
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v21;

    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 10);
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = *(void **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v23;

    LODWORD(v25) = 0;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v25);
    v26 = objc_claimAutoreleasedReturnValue();
    v27 = *(void **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v26;

    LODWORD(v28) = 0;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v28);
    v29 = objc_claimAutoreleasedReturnValue();
    v30 = *(void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v29;

    v32 = 10;
    do
    {
      v33 = *(void **)(a1 + 64);
      LODWORD(v31) = 0;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v31);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "addObject:", v34);

      v35 = *(void **)(a1 + 88);
      LODWORD(v36) = 0;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "addObject:", v37);

      v38 = *(void **)(a1 + 72);
      LODWORD(v39) = 0;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "addObject:", v40);

      v41 = *(void **)(a1 + 96);
      LODWORD(v42) = 0;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v42);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "addObject:", v43);

      v44 = *(void **)(a1 + 80);
      LODWORD(v45) = 0;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v45);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "addObject:", v46);

      v47 = *(void **)(a1 + 104);
      LODWORD(v48) = 0;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v48);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v47, "addObject:", v49);

      --v32;
    }
    while (v32);
  }

  return a1;
}

void sub_2166A7B10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::Controller::RoomCongruenceManager::~RoomCongruenceManager(Phase::Controller::RoomCongruenceManager *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  Phase::Controller::RoomCongruenceManager::~RoomCongruenceManager(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::RoomCongruenceManager::SetTargetRoomAcousticParameters(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4;
  _DWORD *v5;
  void *v6;
  double v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  void *v12;

  v4 = 0;
  v5 = (_DWORD *)(a2 + 88);
  do
  {
    LODWORD(a3) = *(v5 - 10);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", a3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 64), "setObject:atIndexedSubscript:", v6, v4);

    LODWORD(v7) = *v5;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 88), "setObject:atIndexedSubscript:", v8, v4);

    LODWORD(v9) = v5[10];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 96), "setObject:atIndexedSubscript:", v10, v4);

    LODWORD(v11) = v5[20];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 104), "setObject:atIndexedSubscript:", v12, v4);

    ++v4;
    ++v5;
  }
  while (v4 != 10);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a1 + 50) ^ 1;
}

void sub_2166A7D44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::Controller::RoomCongruenceManager::SetModeledAcousticParameters(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t i;
  void *v6;
  uint64_t v7;
  double v8;
  void *v9;
  double v10;
  void *v11;
  uint64_t v12;
  void *v13;
  double v14;
  uint64_t v15;
  void *v16;

  for (i = 0; i != 10; ++i)
  {
    LODWORD(a3) = *(_DWORD *)(a2 + 4 * i);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", a3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 64), "setObject:atIndexedSubscript:", v6, i);

    v7 = a2 + 4 * i;
    LODWORD(v8) = *(_DWORD *)(v7 + 40);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 72), "setObject:atIndexedSubscript:", v9, i);

    LODWORD(v10) = *(_DWORD *)(v7 + 80);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 80), "setObject:atIndexedSubscript:", v11, i);

  }
  LODWORD(a3) = *(_DWORD *)(a2 + 120);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", a3);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v12;

  LODWORD(v14) = *(_DWORD *)(a2 + 124);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v14);
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v15;

  *(_WORD *)(a1 + 49) = 257;
}

void sub_2166A7E60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::Controller::RoomCongruenceManager::Update(id *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  if (this[5])
  {
    v12 = objc_alloc_init(MEMORY[0x24BDBCED8]);
    if (*((_BYTE *)this + 49))
    {
      v2 = (void *)objc_msgSend(this[7], "copy");
      objc_msgSend(v12, "setObject:forKey:", v2, CFSTR("CenterFreqs"));

      v3 = (void *)objc_msgSend(this[8], "copy");
      objc_msgSend(v12, "setObject:forKey:", v3, CFSTR("RT60"));

      v4 = (void *)objc_msgSend(this[9], "copy");
      objc_msgSend(v12, "setObject:forKey:", v4, CFSTR("EarlyRoomEnergy"));

      v5 = (void *)objc_msgSend(this[10], "copy");
      objc_msgSend(v12, "setObject:forKey:", v5, CFSTR("LateRoomEnergy"));

      v6 = (void *)objc_msgSend(this[14], "copy");
      objc_msgSend(v12, "setObject:forKey:", v6, CFSTR("RoomVolume"));

      v7 = (void *)objc_msgSend(this[15], "copy");
      objc_msgSend(v12, "setObject:forKey:", v7, CFSTR("RoomSurface"));
    }
    else
    {
      if (!*((_BYTE *)this + 48))
      {
LABEL_8:
        if (!*((_BYTE *)this + 49))
        {
LABEL_10:

          return;
        }
LABEL_9:
        objc_msgSend(this[5], "setRoomCongruenceParameters:", v12);
        *((_WORD *)this + 24) = 0;
        goto LABEL_10;
      }
      v8 = (void *)objc_msgSend(this[7], "copy");
      objc_msgSend(v12, "setObject:forKey:", v8, CFSTR("CenterFreqs"));

      v9 = (void *)objc_msgSend(this[8], "copy");
      objc_msgSend(v12, "setObject:forKey:", v9, CFSTR("RT60"));

      v10 = (void *)objc_msgSend(this[11], "copy");
      objc_msgSend(v12, "setObject:forKey:", v10, CFSTR("EarlyRoomEqDb"));

      v11 = (void *)objc_msgSend(this[12], "copy");
      objc_msgSend(v12, "setObject:forKey:", v11, CFSTR("LateRoomEqDb"));

      v7 = (void *)objc_msgSend(this[13], "copy");
      objc_msgSend(v12, "setObject:forKey:", v7, CFSTR("Confidence"));
    }

    if (*((_BYTE *)this + 48))
      goto LABEL_9;
    goto LABEL_8;
  }
}

void sub_2166A8088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL Phase::SpatialModeler::GetRT60EstimateFromDirectionalMetadata(uint64_t a1, uint64_t *a2, float a3, float a4)
{
  int v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  NSObject *v22;
  Phase::Logger *v23;
  float *v24;
  int v25;
  uint64_t v26;
  float v27;
  unsigned int v28;
  uint64_t v29;
  float v30;
  float *v31;
  float v32;
  uint64_t v33;
  unint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  size_t v40;
  float v41;
  _BOOL8 v42;
  float v43;
  float v44;
  NSObject *v45;
  float v46;
  NSObject *v47;
  NSObject *v48;
  float v49;
  NSObject *v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  float v54;
  vDSP_Length v55;
  NSObject *v56;
  uint64_t v57;
  int64x2_t v58;
  uint64_t v59;
  uint64x2_t v60;
  const float *v61;
  float32x4_t v62;
  const float *p_C;
  float32x4_t v64;
  __int32 *v65;
  int64x2_t v66;
  int64x2_t v67;
  float32x4_t v68;
  int32x4_t v69;
  __int32 *v70;
  float32x4_t v71;
  float32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x2_t v75;
  float32x4_t v76;
  int32x2_t v77;
  int32x2_t v78;
  float32x4_t v79;
  int8x16_t v80;
  int8x16_t v81;
  float v82;
  int8x16_t v83;
  float v84;
  NSObject *v85;
  float v86;
  float v87;
  double v89;
  char *v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  void *__p[3];
  uint64_t __C;
  uint8_t buf[4];
  const char *v99;
  __int16 v100;
  int v101;
  __int16 v102;
  double v103;
  __int16 v104;
  double v105;
  __int16 v106;
  int v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 *)(a1 + 201);
  if (*(_BYTE *)(a1 + 201))
  {
    v9 = *(_QWORD *)(a1 + 96);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
    *(float *)buf = 0.0;
    std::vector<float>::vector(__p, (v10 * v9), buf);
    v11 = (char *)__p[0];
    v12 = v10;
    if ((_DWORD)v10)
    {
      v13 = 0;
      v14 = 0;
      v15 = *(_QWORD *)(a1 + 104);
      v16 = (_DWORD *)(v15 + 16);
      v17 = v9;
      do
      {
        if ((_DWORD)v9)
        {
          v18 = &v11[4 * v13];
          v19 = 4 * *(_QWORD *)(v15 + 8);
          v20 = v16;
          v21 = v9;
          do
          {
            *(_DWORD *)v18 = *v20;
            v18 += 4;
            v20 = (_DWORD *)((char *)v20 + v19);
            --v21;
          }
          while (v21);
        }
        ++v14;
        v13 += v9;
        ++v16;
      }
      while (v14 != v12);
    }
    else
    {
      v17 = v9;
    }
    v94 = v11;
    v93 = *(_QWORD *)(a1 + 56);
    v92 = *a2;
    v23 = (Phase::Logger *)malloc_type_calloc(v17, 4uLL, 0x100004052888210uLL);
    v24 = (float *)v23;
    if (v12)
    {
      v25 = 0;
      v26 = 0;
      v27 = a3 - a4;
      if (v9 <= 1)
        v28 = 1;
      else
        v28 = v9;
      v29 = 4 * v28;
      v90 = (char *)v23 + 8;
      v91 = fabsf(v27 * 0.5);
      v30 = vabds_f32(a3, a4);
      v89 = v27;
      v95 = v12;
      while ((_DWORD)v9)
      {
        v31 = (float *)&v94[4 * v25];
        if ((((_DWORD)v9 - 1) & 0x80000000) == 0)
        {
          v32 = 0.0;
          v33 = (v9 - 1);
          do
          {
            v32 = v32 + (float)(v31[v33] * v31[v33]);
            v24[v33--] = v32;
          }
          while (v33 != -1);
        }
        v34 = 0;
        v35 = -3.4028e38;
        do
        {
          v36 = v24[v34 / 4];
          if (v36 < 0.0)
            v36 = 0.0;
          v37 = log10f(v36) * 10.0;
          v24[v34 / 4] = v37;
          if (v37 > v35)
            v35 = v37;
          v34 += 4;
        }
        while (v29 != v34);
        *(float *)buf = -v35;
        vDSP_vsadd(v24, 1, (const float *)buf, v24, 1, v17);
        v38 = -3.4028e38;
        v39 = 3.4028e38;
        v40 = v17;
        do
        {
          v41 = *v31++;
          v43 = log10f(v41 * v41) * 10.0;
          if (v43 > v38)
            v38 = v43;
          if (v43 < v39)
            v39 = v43;
          --v40;
        }
        while (v40);
        v44 = v38 - v39;
        if (v44 < 15.0)
          goto LABEL_41;
        if (v44 < v91)
        {
          v45 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v42) + 1184);
          v42 = os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
          if (v42)
          {
            *(float *)buf = 4.8154e-34;
            v99 = "RoomSimulationAnalysisFunctions.cpp";
            v100 = 1024;
            v101 = 162;
            v102 = 2048;
            v103 = v44;
            v104 = 2048;
            v105 = v89;
            v106 = 1024;
            v107 = v26;
            _os_log_impl(&dword_2164CC000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d dB Range %f of the subband gain vector is less than half of the input RT dB range %f, RT60 estimate may have very high error for the subband index %u\n", buf, 0x2Cu);
          }
        }
        v46 = a3;
LABEL_43:
        v49 = a4;
        if (v44 < v30)
        {
          v50 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v42) + 1184);
          v42 = os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG);
          if (v42)
          {
            *(float *)buf = 4.8153e-34;
            v99 = "RoomSimulationAnalysisFunctions.cpp";
            v100 = 1024;
            v101 = 171;
            v102 = 2048;
            v103 = v44;
            v104 = 2048;
            v105 = a4;
            _os_log_impl(&dword_2164CC000, v50, OS_LOG_TYPE_DEBUG, "%25s:%-5d dB Range of the subband gain vector %f is less than dB low limit %f, assigning this as a new low limit\n", buf, 0x26u);
          }
          v49 = -v44;
        }
        if (!(_DWORD)v9)
          goto LABEL_56;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        do
        {
          v54 = v24[v51];
          if ((LODWORD(v54) & 0x7FFFFFFFu) > 0x7F7FFFFF)
            break;
          if (v54 > v46)
            v52 = v51;
          if (v54 > v49)
            v53 = v51;
          ++v51;
        }
        while (v17 != v51);
        v55 = v53 - v52;
        if (v53 != v52)
        {
          __C = 0;
          vDSP_meanv((const float *)(v93 + 4 * v52), 1, (float *)&__C + 1, v55);
          vDSP_meanv(&v24[v52], 1, (float *)&__C, v55);
          v59 = (v55 + 3) & 0x1FFFFFFFCLL;
          v60 = (uint64x2_t)vdupq_n_s64(v55 - 1);
          v61 = (const float *)&__C + 1;
          v62 = vld1q_dup_f32(v61);
          p_C = (const float *)&__C;
          v64 = vld1q_dup_f32(p_C);
          v65 = (__int32 *)&v90[4 * v52];
          v66 = (int64x2_t)xmmword_2166F7AE0;
          v67 = (int64x2_t)xmmword_2166F7AD0;
          v68 = (float32x4_t)xmmword_2166F7AF0;
          v69 = (int32x4_t)xmmword_2166F7AF0;
          v70 = (__int32 *)(v93 + 8 + 4 * v52);
          do
          {
            v71 = v68;
            v72 = (float32x4_t)v69;
            v73 = (int32x4_t)vcgeq_u64(v60, (uint64x2_t)v66);
            *(int32x2_t *)v69.i8 = vmovn_s64((int64x2_t)v73);
            if ((vmovn_s32(v69).u8[0] & 1) != 0)
              v68.i32[0] = *(v70 - 2);
            if ((vmovn_s32(v69).i8[2] & 1) != 0)
              v68.i32[1] = *(v70 - 1);
            v74 = (int32x4_t)vcgeq_u64(v60, (uint64x2_t)v67);
            v75 = (int32x2_t)vmovn_s32(vmovn_hight_s64(*(int32x2_t *)v58.i8, (int64x2_t)v74));
            if ((v75.i8[4] & 1) != 0)
              v68.i32[2] = *v70;
            v76 = (float32x4_t)vmovn_hight_s64(v75, (int64x2_t)v74);
            if ((vmovn_s32(*(int32x4_t *)&v76).i8[6] & 1) != 0)
              v68.i32[3] = v70[1];
            *(int16x4_t *)v76.f32 = vmovn_s32(v69);
            if ((v76.i8[0] & 1) != 0)
              v76.i32[0] = *(v65 - 2);
            v77 = (int32x2_t)vmovn_s32(v69);
            if ((v77.i8[2] & 1) != 0)
              v76.i32[1] = *(v65 - 1);
            v78 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v77, (int64x2_t)v74));
            if ((v78.i8[4] & 1) != 0)
              v76.i32[2] = *v65;
            if ((vmovn_s32(vmovn_hight_s64(v78, *(int64x2_t *)&v74)).i8[6] & 1) != 0)
              v76.i32[3] = v65[1];
            v79 = vsubq_f32(v68, v62);
            v69 = (int32x4_t)vmlaq_f32(v72, vsubq_f32(v76, v64), v79);
            v58 = vdupq_n_s64(4uLL);
            v68 = vmlaq_f32(v71, v79, v79);
            v67 = vaddq_s64(v67, v58);
            v66 = vaddq_s64(v66, v58);
            v65 += 4;
            v70 += 4;
            v59 -= 4;
          }
          while (v59);
          v80 = (int8x16_t)vuzp1q_s32(v73, v74);
          v81 = vbslq_s8(v80, (int8x16_t)v69, (int8x16_t)v72);
          v82 = (float)(vaddv_f32(*(float32x2_t *)v81.i8) + *(float *)&v81.i32[2]) + *(float *)&v81.i32[3];
          v83 = vbslq_s8(v80, (int8x16_t)v68, (int8x16_t)v71);
          v84 = (float)(vaddv_f32(*(float32x2_t *)v83.i8) + *(float *)&v83.i32[2]) + *(float *)&v83.i32[3];
          if (v84 == 0.0)
          {
            v85 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v23) + 1184);
            v23 = (Phase::Logger *)os_log_type_enabled(v85, OS_LOG_TYPE_ERROR);
            v86 = 0.0;
            if ((_DWORD)v23)
            {
              *(float *)buf = 4.8151e-34;
              v99 = "RoomSimulationAnalysisFunctions.cpp";
              v100 = 1024;
              v101 = 53;
              _os_log_impl(&dword_2164CC000, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d about to divide by 0 in slope calculation, returning 0 slope", buf, 0x12u);
            }
          }
          else
          {
            v86 = v82 / v84;
          }
          v57 = v95;
          v87 = -60.0 / v86;
          if (v86 == 0.0)
            v87 = 0.0;
          *(float *)(v92 + 4 * v26) = v87;
        }
        else
        {
LABEL_56:
          v56 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v42) + 1184);
          v23 = (Phase::Logger *)os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
          v57 = v95;
          if ((_DWORD)v23)
          {
            *(float *)buf = 4.8152e-34;
            v99 = "RoomSimulationAnalysisFunctions.cpp";
            v100 = 1024;
            v101 = 203;
            v102 = 1024;
            LODWORD(v103) = v26;
            _os_log_impl(&dword_2164CC000, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d Number of samples to fit a linear decay curve is 0 with subband index %u, skipping it and continuing subband loop\n", buf, 0x18u);
          }
        }
        ++v26;
        v25 += v9;
        if (v26 == v57)
          goto LABEL_84;
      }
      v47 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v23) + 1184);
      v42 = os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
      if (v42)
      {
        *(float *)buf = 4.8151e-34;
        v99 = "RoomSimulationAnalysisFunctions.cpp";
        v100 = 1024;
        v101 = 70;
        _os_log_impl(&dword_2164CC000, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d inNumSamples 0, returning", buf, 0x12u);
      }
      v44 = -INFINITY;
LABEL_41:
      v48 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v42) + 1184);
      v42 = os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
      v46 = 0.0;
      if (v42)
      {
        *(float *)buf = 4.8153e-34;
        v99 = "RoomSimulationAnalysisFunctions.cpp";
        v100 = 1024;
        v101 = 151;
        v102 = 2048;
        v103 = v44;
        v104 = 1024;
        LODWORD(v105) = v26;
        _os_log_impl(&dword_2164CC000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d dB Range %f of the subband gain vector is less than 15dB, setting the high limit to 0 dB, RT60 estimate may have very high error for the subband index %u\n", buf, 0x22u);
      }
      goto LABEL_43;
    }
LABEL_84:
    free(v24);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    v22 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 1184);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(float *)buf = 4.8151e-34;
      v99 = "RoomSimulationAnalysisFunctions.cpp";
      v100 = 1024;
      v101 = 234;
      _os_log_impl(&dword_2164CC000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Input metadata needs to be sorted in time, returning and not modifying the data", buf, 0x12u);
    }
  }
  return v4 != 0;
}

void sub_2166A8A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::getClosestLRClusterToSourceInClusteringResults(float32x2_t *a1, Phase::SpatialModeler::RayTracerState *this, _QWORD *a3, _OWORD *a4, float *a5)
{
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t *v17;
  float SharedEnergyReFixedDb;
  float32x2_t *v19;
  float32x2_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float32x2_t v25;
  float v26;
  _OWORD *v28;
  _OWORD *v29;
  NSObject *v30;
  _QWORD v31[2];
  _BYTE buf[18];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 2431))
  {
    v30 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 1184);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "RoomSimulationClusteringFunctions.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 24;
      _os_log_impl(&dword_2164CC000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d getClosestLRClusterToSourceInClusteringResults: Empty clustering result", buf, 0x12u);
    }
    return;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v31[0] = 0;
  v31[1] = 0;
  v9 = (uint64_t *)*((_QWORD *)this + 2430);
  if (!v9)
  {
    v11 = 0;
    SharedEnergyReFixedDb = 0.0;
    v13 = 0.0;
    goto LABEL_24;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0.0;
  v14 = 3.4028e38;
  v15 = 3.4028e38;
  v16 = 0.0;
  do
  {
    v17 = v9 + 2;
    SharedEnergyReFixedDb = Phase::SpatialModeler::RayTracerState::GetSharedEnergyReFixedDb(this, (unint64_t *)v9 + 2);
    v19 = (float32x2_t *)v9[5];
    if (v19)
    {
      v20 = a1[8];
      v21 = a1[9].f32[0];
      v23 = *((float *)this + 36);
      v22 = *((float *)this + 37);
      do
      {
        v24 = v19[4].f32[1];
        v25 = vsub_f32(v19[3], v20);
        v26 = vaddv_f32(vmul_f32(v25, v25)) + (float)((float)(v19[4].f32[0] - v21) * (float)(v19[4].f32[0] - v21));
        if (v26 > 1.0e12)
          v26 = 1.0e12;
        if ((float)(v24 - SharedEnergyReFixedDb) >= v22 && (float)(v24 - SharedEnergyReFixedDb) <= v23)
        {
          if (v26 < v14)
          {
            v12 = *v17;
            v28 = buf;
            v16 = v19[4].f32[1];
            v14 = v26;
            goto LABEL_16;
          }
        }
        else if (v26 < v15)
        {
          v11 = *v17;
          v28 = v31;
          v13 = v19[4].f32[1];
          v15 = v26;
LABEL_16:
          *v28 = *(_OWORD *)(v9 + 11);
        }
        v19 = (float32x2_t *)*v19;
      }
      while (v19);
    }
    v9 = (uint64_t *)*v9;
  }
  while (v9);
  if (v14 != 3.4028e38)
  {
    v29 = buf;
    goto LABEL_25;
  }
LABEL_24:
  v29 = v31;
  v12 = v11;
  v16 = v13;
LABEL_25:
  *a3 = v12;
  *a4 = *v29;
  *a5 = v16;
  *a5 = fminf(fmaxf(v16, SharedEnergyReFixedDb + *((float *)this + 37)), SharedEnergyReFixedDb + *((float *)this + 36));
}

float Phase::SpatialModeler::getClosestERClusterToSourceInClusteringResults(float32x2_t *a1, _QWORD *a2, _QWORD *a3, _OWORD *a4, _DWORD *a5, float *a6)
{
  _QWORD *v6;
  float v7;
  float32x2_t *v8;
  _OWORD *v9;
  float v10;
  float32x2_t v11;
  float v12;
  NSObject *v13;
  float result;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a2[2426])
  {
    v6 = (_QWORD *)a2[2425];
    if (v6)
    {
      v7 = 3.4028e38;
      do
      {
        v8 = (float32x2_t *)v6[5];
        if (v8)
        {
          v9 = v6 + 34;
          while (1)
          {
            v10 = v8[4].f32[0] - a1[9].f32[0];
            v11 = vsub_f32(v8[3], a1[8]);
            v12 = vaddv_f32(vmul_f32(v11, v11)) + (float)(v10 * v10);
            if (v12 > 1.0e12)
              v12 = 1.0e12;
            if (3864292196u
               - 0x395B586CA42E166BLL
               * ((3864292196u
                 - 0x395B586CA42E166BLL
                 * ((0x35A98F4D286A90B9
                   * ((0xC6A4A7935BD1E995 * *(_QWORD *)&a1[1]) ^ ((0xC6A4A7935BD1E995 * *(_QWORD *)&a1[1]) >> 47))
                   + 3864292196u) ^ (0xC6A4A7935BD1E995
                                   * ((0xC6A4A7935BD1E995 * a2[2822]) ^ ((0xC6A4A7935BD1E995 * a2[2822]) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * *(_QWORD *)&a1[22]) ^ ((0xC6A4A7935BD1E995 * *(_QWORD *)&a1[22]) >> 47)))) == *(_QWORD *)&v8[2])
              break;
            if (v12 < v7)
            {
              *a5 = v8[4].i32[1];
              *a4 = *v9;
              *a3 = v6[2];
              v7 = v12;
            }
            v8 = (float32x2_t *)*v8;
            if (!v8)
              goto LABEL_14;
          }
          *a6 = sqrtf(v12);
          *a5 = v8[4].i32[1];
          *a4 = *v9;
          *a3 = v6[2];
        }
LABEL_14:
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      v7 = 3.4028e38;
    }
    result = sqrtf(v7);
    *a6 = result;
  }
  else
  {
    v13 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 1184);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v15 = 136315394;
      v16 = "RoomSimulationClusteringFunctions.cpp";
      v17 = 1024;
      v18 = 110;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d getClosestERClusterToSourceInClusteringResults: Empty clustering result", (uint8_t *)&v15, 0x12u);
    }
  }
  return result;
}

void Phase::SpatialModeler::getRendererIdsInERClusteringResults(Phase::SpatialModeler *this@<X0>, char **a2@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<Phase::UniqueObjectId>::reserve((void **)a2, *((_QWORD *)this + 2426));
  v5 = (_QWORD *)*((_QWORD *)this + 2425);
  if (v5)
  {
    v6 = a2 + 2;
    v7 = a2[1];
    do
    {
      v8 = v5 + 34;
      if ((unint64_t)v7 >= *v6)
      {
        v9 = (v7 - *a2) >> 4;
        if ((unint64_t)(v9 + 1) >> 60)
          std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
        v10 = *v6 - (_QWORD)*a2;
        v11 = v10 >> 3;
        if (v10 >> 3 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
          v12 = 0xFFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)(a2 + 2), v12);
        else
          v13 = 0;
        v14 = &v13[16 * v9];
        *(_OWORD *)v14 = *v8;
        v16 = *a2;
        v15 = a2[1];
        v17 = v14;
        if (v15 != *a2)
        {
          do
          {
            *((_OWORD *)v17 - 1) = *((_OWORD *)v15 - 1);
            v17 -= 16;
            v15 -= 16;
          }
          while (v15 != v16);
          v15 = *a2;
        }
        v7 = v14 + 16;
        *a2 = v17;
        a2[1] = v14 + 16;
        a2[2] = &v13[16 * v12];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_OWORD *)v7 = *v8;
        v7 += 16;
      }
      a2[1] = v7;
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
}

void sub_2166A8FCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::evaluateRendererKeepAliveFlagsAndUpdateState(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t *a4, _QWORD *a5, uint64_t a6, float a7)
{
  unint64_t v12;
  const void *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *__p[3];
  void *v22;
  void *v23;
  uint64_t v24;

  if (a3 >= a2)
    v12 = a2;
  else
    v12 = a3;
  v13 = *(const void **)a6;
  if ((uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 3 >= a3)
    v14 = a3;
  else
    v14 = (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 3;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v13, (uint64_t)v13 + 8 * v14, v14);
  *(float *)(a1 + 22532) = a7;
  Phase::SpatialModeler::RendererStates::Update(a1 + 22480, v12, (uint64_t *)a3, (unint64_t **)&v22, *(_BYTE *)(a1 + 171));
  std::vector<Phase::SpatialModeler::RendererInfo>::vector(__p, a4[5]);
  Phase::SpatialModeler::RendererStates::GetNRenderers(a1 + 22480, a4[5], __p, (unint64_t **)&v22);
  v15 = (char *)__p[0];
  if (a4[5])
  {
    v16 = 0;
    v17 = 0;
    v18 = *a4;
    v19 = 320;
    do
    {
      *(_OWORD *)(v18 + v19 - 320) = *(_OWORD *)&v15[v16 + 8];
      v15 = (char *)__p[0];
      v20 = (char *)__p[0] + v16;
      v18 = *a4;
      *(_BYTE *)(*a4 + v19) = *((_BYTE *)__p[0] + v16);
      *(_BYTE *)(*a5 + v17++) = v20[32] ^ 1;
      v16 += 40;
      v19 += 336;
    }
    while (v17 < a4[5]);
  }
  else if (!__p[0])
  {
    goto LABEL_13;
  }
  __p[1] = v15;
  operator delete(v15);
LABEL_13:
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
}

void sub_2166A913C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::getPerceptualCoordinatesFromNewDataAndPastAssignments(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, float *a5)
{
  _QWORD *v7;
  char *v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  float32x2_t v27;
  unint64_t v28;
  float32x2_t *v29;
  int32x2_t v30;
  float32x2_t v31;
  unint64_t v32;
  float32x2_t *v33;
  float32x2_t *v34;
  uint64_t v35;
  float32x2_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  float32x2_t *v42;
  __int32 v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;

  v7 = *(_QWORD **)(a1 + 19400);
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = v7 + 3;
      if (v9 >= v10)
      {
        v13 = (v9 - v8) >> 3;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        if ((v10 - v8) >> 2 > v14)
          v14 = (v10 - v8) >> 2;
        if ((unint64_t)(v10 - v8) >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          if (v15 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v16 = (char *)operator new(8 * v15);
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[8 * v13];
        *(_QWORD *)v17 = v11;
        v18 = v17 + 8;
        while (v9 != v8)
        {
          v19 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *((_QWORD *)v17 - 1) = v19;
          v17 -= 8;
        }
        v10 = &v16[8 * v15];
        if (v8)
          operator delete(v8);
        v8 = v17;
        v12 = v18;
      }
      else
      {
        *(_QWORD *)v9 = v11;
        v12 = v9 + 8;
      }
      v7 = (_QWORD *)*v7;
      v9 = v12;
    }
    while (v7);
  }
  else
  {
    v8 = 0;
    v12 = 0;
  }
  v20 = v12 - v8;
  if (v12 - v8 >= 192 && v12 != v8 && v20 >= 0x401)
  {
    v21 = (v20 >> 1) & 0x7FFFFFFFFFFFFFF8;
    v22 = *(_QWORD *)v8;
    *(_QWORD *)v8 = *(_QWORD *)&v8[v21];
    *(_QWORD *)&v8[v21] = v22;
  }
  if (v8 != v12)
  {
    v23 = v8;
    do
    {
      v24 = *(_QWORD **)(*(_QWORD *)v23 + 16);
      if (v24)
      {
        v25 = 0;
        v26 = *(_QWORD *)(*(_QWORD *)v23 + 248);
        v27 = 0;
        do
        {
          v28 = v24[2];
          v29 = (float32x2_t *)std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(a2, v28);
          if (v29)
          {
            v27 = vadd_f32(v27, v29[3]);
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, v28, v24 + 2)[3] = v26;
            ++v25;
          }
          v24 = (_QWORD *)*v24;
        }
        while (v24);
        if (v25)
        {
          *(float *)v30.i32 = (float)v25;
          v31 = vdiv_f32(v27, (float32x2_t)vdup_lane_s32(v30, 0));
          v33 = *(float32x2_t **)(a3 + 8);
          v32 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v33 >= v32)
          {
            v36 = *(float32x2_t **)a3;
            v37 = ((uint64_t)v33 - *(_QWORD *)a3) >> 3;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 61)
              std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__throw_length_error[abi:ne180100]();
            v39 = v32 - (_QWORD)v36;
            if (v39 >> 2 > v38)
              v38 = v39 >> 2;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
              v40 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v40 = v38;
            v35 = a4;
            if (v40)
            {
              v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a3 + 16, v40);
              v36 = *(float32x2_t **)a3;
              v33 = *(float32x2_t **)(a3 + 8);
            }
            else
            {
              v41 = 0;
            }
            v42 = (float32x2_t *)&v41[8 * v37];
            *v42 = v31;
            v34 = v42 + 1;
            while (v33 != v36)
            {
              v43 = v33[-1].i32[0];
              --v33;
              v42[-1].i32[0] = v43;
              --v42;
              v42->i32[1] = v33->i32[1];
            }
            *(_QWORD *)a3 = v42;
            *(_QWORD *)(a3 + 8) = v34;
            *(_QWORD *)(a3 + 16) = &v41[8 * v40];
            if (v36)
              operator delete(v36);
          }
          else
          {
            *v33 = v31;
            v34 = v33 + 1;
            v35 = a4;
          }
          *(_QWORD *)(a3 + 8) = v34;
          v45 = *(_QWORD **)(v35 + 8);
          v44 = *(_QWORD *)(v35 + 16);
          if ((unint64_t)v45 >= v44)
          {
            v47 = *(_QWORD **)v35;
            v48 = ((uint64_t)v45 - *(_QWORD *)v35) >> 3;
            v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 61)
              std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
            v50 = v44 - (_QWORD)v47;
            if (v50 >> 2 > v49)
              v49 = v50 >> 2;
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
              v51 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v51 = v49;
            if (v51)
            {
              v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v51);
              v47 = *(_QWORD **)v35;
              v45 = *(_QWORD **)(v35 + 8);
            }
            else
            {
              v52 = 0;
            }
            v53 = &v52[8 * v48];
            *(_QWORD *)v53 = v26;
            v46 = v53 + 8;
            while (v45 != v47)
            {
              v54 = *--v45;
              *((_QWORD *)v53 - 1) = v54;
              v53 -= 8;
            }
            *(_QWORD *)v35 = v53;
            *(_QWORD *)(v35 + 8) = v46;
            *(_QWORD *)(v35 + 16) = &v52[8 * v51];
            if (v47)
              operator delete(v47);
          }
          else
          {
            *v45 = v26;
            v46 = v45 + 1;
          }
          *(_QWORD *)(v35 + 8) = v46;
        }
      }
      v23 += 8;
    }
    while (v23 != v12);
  }
  if (v8)
    operator delete(v8);
}

void sub_2166A9510(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *Phase::SpatialModeler::getAttackQueryAssignments(uint64_t *this, const Phase::SpatialModeler::SourcePreProcessData *a2, Phase::SpatialModeler::ClusterPreProcessData *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  float *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  v4 = *this;
  v3 = this[1];
  if (v3 != *this)
  {
    v6 = this;
    v7 = 0;
    v8 = (_QWORD *)((char *)a2 + 40);
    v9 = (float *)((char *)a2 + 48);
    do
    {
      this = (uint64_t *)*((_QWORD *)a2 + 3);
      v10 = (uint64_t *)*((_QWORD *)a2 + 4);
      v11 = (uint64_t *)(v4 + 40 * v7 + 32);
      if (this == v10)
      {
        v12 = (uint64_t *)*((_QWORD *)a2 + 3);
      }
      else
      {
        v12 = (uint64_t *)*((_QWORD *)a2 + 3);
        while (*v12 != *v11)
        {
          if (++v12 == v10)
          {
            v12 = (uint64_t *)*((_QWORD *)a2 + 4);
            break;
          }
        }
      }
      if (v12 == v10)
      {
        v13 = *v11;
        if (*v11)
        {
          if ((unint64_t)v10 >= *v8)
          {
            v15 = v10 - this;
            v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 61)
              std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
            v17 = *v8 - (_QWORD)this;
            if (v17 >> 2 > v16)
              v16 = v17 >> 2;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
              v18 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v18 = v16;
            if (v18)
            {
              v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v8, v18);
              this = (uint64_t *)*((_QWORD *)a2 + 3);
              v10 = (uint64_t *)*((_QWORD *)a2 + 4);
              v13 = *v11;
            }
            else
            {
              v19 = 0;
            }
            v20 = &v19[8 * v15];
            *(_QWORD *)v20 = v13;
            v14 = v20 + 8;
            while (v10 != this)
            {
              v21 = *--v10;
              *((_QWORD *)v20 - 1) = v21;
              v20 -= 8;
            }
            *((_QWORD *)a2 + 3) = v20;
            *((_QWORD *)a2 + 4) = v14;
            *((_QWORD *)a2 + 5) = &v19[8 * v18];
            if (this)
              operator delete(this);
          }
          else
          {
            *v10 = v13;
            v14 = v10 + 1;
          }
          *((_QWORD *)a2 + 4) = v14;
          v22 = (unint64_t *)(*v6 + 40 * v7);
          v23 = v22[4];
          this = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v9, *v22, v22);
          this[3] = v23;
          v4 = *v6;
          v3 = v6[1];
        }
      }
      ++v7;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v3 - v4) >> 3) > v7);
  }
  return this;
}

void Phase::SpatialModeler::checkSubmixRendererChange(_BOOL8 a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  NSObject *v17;
  uint64_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 144))
  {
    v3 = (_QWORD *)a1;
    v4 = 0;
    v5 = 0;
    v6 = 288;
    do
    {
      v7 = (_QWORD *)(v3[13] + v6);
      if (*v7 != -1)
      {
        v8 = *(v7 - 36);
        v9 = *(_QWORD *)(v3[7] + 336 * *v7);
        v10 = *(_QWORD *)(a2[13] + v4);
        if (v10 != -1 && v10 < a2[6])
        {
          v11 = *(_QWORD *)(a2[1] + 336 * v10);
          if (v9 == v11)
            goto LABEL_12;
          v12 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 1184);
          a1 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
          if (!a1)
            goto LABEL_12;
          v13 = v3[18];
          *(_DWORD *)buf = 136316418;
          v20 = "RoomSimulationClusteringFunctions.cpp";
          v21 = 1024;
          v22 = 349;
          v23 = 2048;
          v24 = v8;
          v25 = 2048;
          v26 = v9;
          v27 = 2048;
          v28 = v11;
          v29 = 2048;
          v30 = v13;
          v14 = v12;
          v15 = OS_LOG_TYPE_DEFAULT;
          v16 = "%25s:%-5d Renderer Id changed for submix %llu, old Renderer Id %llu, new Renderer Id %llu, total number of submixes %zu";
          goto LABEL_11;
        }
        v17 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 1184);
        a1 = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
        if (a1)
        {
          v18 = v3[18];
          *(_DWORD *)buf = 136316418;
          v20 = "RoomSimulationClusteringFunctions.cpp";
          v21 = 1024;
          v22 = 335;
          v23 = 2048;
          v24 = v10;
          v25 = 2048;
          v26 = v8;
          v27 = 2048;
          v28 = v9;
          v29 = 2048;
          v30 = v18;
          v14 = v17;
          v15 = OS_LOG_TYPE_ERROR;
          v16 = "%25s:%-5d Invalid render ground index %llu assigned for submix %llu, old Renderer Id %llu, total number of submixes %zu";
LABEL_11:
          _os_log_impl(&dword_2164CC000, v14, v15, v16, buf, 0x3Au);
        }
      }
LABEL_12:
      ++v5;
      v4 += 16;
      v6 += 304;
    }
    while (v5 < v3[18]);
  }
}

uint64_t Phase::SpatialModeler::AssignSourcesToRenderers(unint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  float v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  char v49;
  char v50;
  float v51;
  float v52;
  unint64_t v53;
  float32x2_t *v54;
  float32x2_t v55;
  float v56;
  float v57;
  float32x2_t *v58;
  float32x2_t v59;
  float v60;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  int v75;
  __int128 v76;
  __int128 v77;
  int v78;
  uint64_t v79[2];

  v9 = *a2;
  v8 = a2[1];
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - *a2) >> 3);
  v12 = a3[3];
  v11 = a3[4];
  v13 = a4[2];
  v14 = (_BYTE *)*a4;
  if (v10 <= (v13 - *a4) >> 3)
  {
    v69 = a3[3];
    v70 = a3[4];
    v71 = a2[1];
    v18 = (_BYTE *)a4[1];
    v19 = (v18 - v14) >> 3;
    if (v19 >= v10)
      v20 = v10;
    else
      v20 = (v18 - v14) >> 3;
    if (v20)
      memset(v14, 255, 8 * v20);
    v21 = v10 >= v19;
    v22 = v10 - v19;
    if (v22 != 0 && v21)
    {
      memset(v18, 255, 8 * v10 - ((v18 - v14) & 0xFFFFFFFFFFFFFFF8));
      v23 = &v18[8 * v22];
    }
    else
    {
      v23 = &v14[8 * v10];
    }
    a4[1] = v23;
    v11 = v70;
    v8 = v71;
    v12 = v69;
  }
  else
  {
    if (v14)
    {
      a4[1] = v14;
      operator delete(v14);
      v13 = 0;
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
    if (v10 >> 61)
      std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
    v15 = v13 >> 2;
    if (v13 >> 2 <= v10)
      v15 = v10;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a4, v16);
    v17 = (char *)a4[1];
    memset(v17, 255, 8 * v10);
    a4[1] = &v17[8 * v10];
  }
  v76 = 0u;
  v77 = 0u;
  v78 = 1065353216;
  v73 = 0u;
  v74 = 0u;
  v75 = 1065353216;
  if (v8 == v9)
    goto LABEL_76;
  v24 = 0;
  v25 = (v11 - v12) >> 3;
  if (v10 <= 1)
    v10 = 1;
  do
  {
    v26 = (unint64_t *)(*a2 + 40 * v24);
    v27 = v26[4];
    if (v27)
    {
      v28 = a3[3];
      v29 = a3[4] - v28;
      if (!v29)
        goto LABEL_40;
      v30 = 0;
      v31 = v29 >> 3;
      if (v31 <= 1)
        v31 = 1;
      while (*(_QWORD *)(v28 + 8 * v30) != v27)
      {
        if (v31 == ++v30)
          goto LABEL_40;
      }
    }
    else
    {
      v32 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::find<unsigned long long>(a3[6], a3[7], *v26);
      if (!v32)
        goto LABEL_40;
      v33 = (_QWORD *)a3[3];
      v34 = (_QWORD *)a3[4];
      if (v33 == v34)
      {
        v35 = (_QWORD *)a3[3];
      }
      else
      {
        v35 = (_QWORD *)a3[3];
        while (*v35 != v32[3])
        {
          if (++v35 == v34)
          {
            v35 = (_QWORD *)a3[4];
            break;
          }
        }
      }
      v30 = v35 - v33;
    }
    if (v30 < a1)
    {
      *(_QWORD *)(*a4 + 8 * v24) = v30;
      v36 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v76, *v26, (uint64_t *)v26);
      v36[3] = v24;
      v36[4] = v30;
      goto LABEL_41;
    }
LABEL_40:
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v73, *v26, v26)[3] = v24;
LABEL_41:
    ++v24;
  }
  while (v24 != v10);
  v37 = (uint64_t *)v74;
  if ((_QWORD)v74)
  {
    while (1)
    {
      v38 = v37[2];
      v39 = v37[3];
      v72 = v38;
      v40 = (_QWORD *)v77;
      if (!(_QWORD)v77)
        break;
      v41 = 0;
      v42 = *a2;
      v43 = 3.4028e38;
      v44 = (_QWORD *)v77;
      do
      {
        v45 = v44[4];
        if (v45 < (uint64_t)(a3[1] - *a3) >> 3)
        {
          v46 = 0;
          v47 = *a3 + 8 * v45;
          v48 = 0.0;
          v49 = 1;
          do
          {
            v50 = v49;
            v51 = *(float *)(v47 + 4 * v46) - *(float *)(*a2 + 40 * v39 + 20 + 4 * v46);
            v48 = v48 + (float)(v51 * v51);
            v46 = 1;
            v49 = 0;
          }
          while ((v50 & 1) != 0);
          v52 = sqrtf(v48);
          if (v52 < v43)
          {
            v43 = v52;
            v41 = v44[2];
          }
        }
        v44 = (_QWORD *)*v44;
      }
      while (v44);
      v53 = 0;
      v54 = (float32x2_t *)(v42 + 40 * v39);
      v55 = v54[1];
      v56 = v54[2].f32[0];
      v57 = 3.4028e38;
      do
      {
        v58 = (float32x2_t *)(v42 + 40 * v40[3]);
        v59 = vsub_f32(v58[1], v55);
        v60 = sqrtf(vaddv_f32(vmul_f32(v59, v59)) + (float)((float)(v58[2].f32[0] - v56) * (float)(v58[2].f32[0] - v56)));
        if (v60 > 1000000.0)
          v60 = 1000000.0;
        if (v60 < v57)
        {
          v53 = v40[2];
          v57 = v60;
        }
        v40 = (_QWORD *)*v40;
      }
      while (v40);
      if (v43 < 0.001 && v41 != 0)
      {
LABEL_69:
        v79[0] = v41;
        v63 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v76, v41, v79)[4];
        *(_QWORD *)(*a4 + 8 * v39) = v63;
        v64 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v76, v41, v79);
        v64[3] = v39;
        v64[4] = v63;
        goto LABEL_75;
      }
      if (v57 >= 0.005 || v53 == 0)
      {
        if (v25 >= a1)
        {
          if (v43 < 3.4028e38)
            goto LABEL_69;
          if (v57 >= 3.4028e38)
          {
LABEL_74:
            *(_QWORD *)(*a4 + 8 * v39) = (unint64_t)(float)((float)((float)rand() * 4.6566e-10) * (float)a1);
            goto LABEL_75;
          }
          goto LABEL_66;
        }
LABEL_71:
        *(_QWORD *)(*a4 + 8 * v39) = v25;
        v65 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v76, v38, (uint64_t *)&v72);
        v65[3] = v39;
        v65[4] = v25;
        v37 = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::erase(&v73, v37);
        ++v25;
        if (!v37)
          goto LABEL_76;
      }
      else
      {
LABEL_66:
        v79[0] = v53;
        v66 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v76, v53, v79)[4];
        *(_QWORD *)(*a4 + 8 * v39) = v66;
        v67 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v76, v53, v79);
        v67[3] = v39;
        v67[4] = v66;
LABEL_75:
        v37 = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::erase(&v73, v37);
        if (!v37)
          goto LABEL_76;
      }
    }
    if (v25 >= a1)
      goto LABEL_74;
    goto LABEL_71;
  }
LABEL_76:
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v73);
  return std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v76);
}

void sub_2166A9E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::ConstructSharedHistogram(Phase::Logger *a1, uint64_t a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Phase::Logger *v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __n128 v18;
  int32x4_t v19;
  int32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64x2_t v24;
  __int32 *v25;
  int64x2_t v26;
  int64x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  int32x2_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  __n128 v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unsigned int v60;
  unsigned int v61;
  float v62;
  unsigned int v63;
  float v64;
  Phase::SpatialModeler::DirectivityHistogram **v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  Phase::Logger *v69;
  int32x4_t v70;
  int32x2_t v71;
  float v72;
  NSObject *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  float32x4_t v93;
  __int32 *v94;
  int64x2_t v95;
  float32x4_t v96;
  int32x4_t v97;
  int32x2_t v98;
  int8x16_t v99;
  Phase::Logger *v100;
  unint64_t v101;
  unsigned int v102;
  uint64_t v104;
  int64x2_t v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  unint64_t *v110;
  _BYTE buf[38];
  uint64_t v112;

  v8 = a1;
  v112 = *MEMORY[0x24BDAC8D0];
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v9 = *(_QWORD *)(a5 + 18928);
  if (*(_QWORD *)(a5 + 18936) == v9)
    goto LABEL_79;
  v100 = a1;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v104 = -1;
  v105 = vdupq_n_s64(4uLL);
  do
  {
    v14 = v9 + 56 * v12;
    v106 = 0;
    v106 = *(_QWORD *)v14;
    v15 = *(_QWORD *)(v14 + 24);
    v16 = *(_DWORD *)(v14 + 32);
    v110 = &v106;
    v17 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a6, &v106, (uint64_t)&std::piecewise_construct, &v110);
    v17[3] = v15;
    *((_DWORD *)v17 + 8) = v16;
    v18.n128_f32[0] = Phase::SpatialModeler::RayTracerState::GetSourceListenerResult((Phase::SpatialModeler::RayTracerState *)a5, &v106, (uint64_t)buf);
    v21 = *(_QWORD *)&buf[16];
    if (*(_QWORD *)&buf[16] && !*(_BYTE *)(*(_QWORD *)&buf[16] + 36))
    {
      v22 = (*(_DWORD *)(*(_QWORD *)&buf[16] + 28) * *(_DWORD *)(*(_QWORD *)&buf[16] + 24));
      if ((_DWORD)v22)
      {
        v23 = (v22 + 3) & 0x1FFFFFFFCLL;
        v24 = (uint64x2_t)vdupq_n_s64(v22 - 1);
        v25 = (__int32 *)(*(_QWORD *)(*(_QWORD *)&buf[16] + 8) + 8);
        v26 = (int64x2_t)xmmword_2166F7AE0;
        v27 = (int64x2_t)xmmword_2166F7AD0;
        v28 = (float32x4_t)xmmword_2166F7AF0;
        do
        {
          v29 = v28;
          v30 = (int32x4_t)vcgeq_u64(v24, (uint64x2_t)v26);
          *(int32x2_t *)v19.i8 = vmovn_s64((int64x2_t)v30);
          *(int16x4_t *)v28.f32 = vmovn_s32(v19);
          if ((v28.i8[0] & 1) != 0)
            v28.i32[0] = *(v25 - 2);
          if ((vmovn_s32(v19).i8[2] & 1) != 0)
            v28.i32[1] = *(v25 - 1);
          v19 = (int32x4_t)vcgeq_u64(v24, (uint64x2_t)v27);
          v31 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v20, (int64x2_t)v19));
          if ((v31.i8[4] & 1) != 0)
            v28.i32[2] = *v25;
          v20 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v31, (int64x2_t)v19));
          if ((v20.i8[6] & 1) != 0)
            v28.i32[3] = v25[1];
          v28 = vaddq_f32(v29, v28);
          v27 = vaddq_s64(v27, v105);
          v26 = vaddq_s64(v26, v105);
          v25 += 4;
          v23 -= 4;
        }
        while (v23);
        v18 = (__n128)vbslq_s8((int8x16_t)vuzp1q_s32(v30, v19), (int8x16_t)v28, (int8x16_t)v29);
        v18.n128_f32[0] = (float)(vaddv_f32((float32x2_t)v18.n128_u64[0]) + v18.n128_f32[2]) + v18.n128_f32[3];
      }
      else
      {
        v18.n128_u32[0] = 0;
      }
      if (v18.n128_f32[0] > a3)
      {
        v32 = *(_QWORD *)&buf[24];
        v33 = v108;
        if (v108 >= v109)
        {
          v102 = v13;
          v38 = a6;
          v39 = v11;
          v40 = v107;
          v41 = ((char *)v108 - (char *)v107) >> 4;
          v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 60)
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          v43 = (char *)v109 - (char *)v107;
          if (v109 - v107 > v42)
            v42 = v43 >> 3;
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
            v42 = 0xFFFFFFFFFFFFFFFLL;
          if (v42 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v101 = v42;
          a1 = (Phase::Logger *)operator new(16 * v42);
          v44 = (uint64_t *)((char *)a1 + 16 * v41);
          *v44 = v21;
          v44[1] = v32;
          v11 = v39;
          a6 = v38;
          v13 = v102;
          if (v32)
          {
            v45 = (unint64_t *)(v32 + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            v33 = v108;
          }
          if (v33 == v40)
          {
            v36 = v44 + 2;
            v107 = v44;
            v108 = v44 + 2;
            v109 = (uint64_t *)((char *)a1 + 16 * v101);
            v37 = a2;
          }
          else
          {
            v47 = v44;
            v37 = a2;
            do
            {
              v48 = *((__n128 *)v33 - 1);
              v33 -= 2;
              v18 = v48;
              *((__n128 *)v47 - 1) = v48;
              v47 -= 2;
              *v33 = 0;
              v33[1] = 0;
            }
            while (v33 != v40);
            v40 = v107;
            v49 = (uint64_t)v108;
            v36 = v44 + 2;
            v107 = v47;
            v108 = v44 + 2;
            v109 = (uint64_t *)((char *)a1 + 16 * v101);
            while ((uint64_t *)v49 != v40)
            {
              v49 -= 16;
              a1 = (Phase::Logger *)std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v49);
            }
          }
          if (v40)
            operator delete(v40);
        }
        else
        {
          *v108 = *(_QWORD *)&buf[16];
          v33[1] = v32;
          if (v32)
          {
            v34 = (unint64_t *)(v32 + 8);
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
          v36 = v33 + 2;
          v37 = a2;
        }
        v108 = v36;
        v50 = *(_DWORD *)(*(_QWORD *)&buf[16] + 44);
        if (*(_DWORD *)(a5 + 176) < v50)
          v50 = *(_DWORD *)(a5 + 176);
        v51 = *(_QWORD *)(v37 + 144);
        if (v51)
        {
          v52 = 0;
          v53 = (_BYTE *)(*(_QWORD *)(v37 + 104) + 152);
          while (*((_QWORD *)v53 - 1) != *(_QWORD *)(v9 + 56 * v12 + 48))
          {
            ++v52;
            v53 += 304;
            if (v51 == v52)
              goto LABEL_55;
          }
          if ((v52 & 0x8000000000000000) == 0 && !*v53)
          {
            v18.n128_u32[0] = *(_DWORD *)(*(_QWORD *)&buf[16] + 40);
            if (v18.n128_f32[0] < 0.000029155)
              v104 = v11;
          }
        }
LABEL_55:
        v13 += v50;
        ++v11;
      }
    }
    v54 = *(std::__shared_weak_count **)&buf[24];
    if (*(_QWORD *)&buf[24])
    {
      v55 = (unint64_t *)(*(_QWORD *)&buf[24] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v54->__on_zero_shared)(v54, v18);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v58 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v57->__on_zero_shared)(v57, v18);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    ++v12;
    v9 = *(_QWORD *)(a5 + 18928);
  }
  while (v12 < 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a5 + 18936) - v9) >> 3));
  v8 = v100;
  if (v11 && v13)
  {
    v60 = *(_DWORD *)(*v107 + 44);
    v61 = *(_DWORD *)(a5 + 176);
    Phase::SpatialModeler::RayTracerState::CopyDirectivityHistogram((Phase::Logger *)a5, v107, (Phase::SpatialModeler::EnergyHistogram **)buf);
    v62 = (float)v13;
    if (v61 >= v60)
      v63 = v60;
    else
      v63 = v61;
    v64 = (float)v63 / v62;
    v65 = (Phase::SpatialModeler::DirectivityHistogram **)(a6 + 40);
    std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100](a6 + 40, (__int128 *)buf);
    v66 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v67 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = (Phase::Logger *)Phase::SpatialModeler::DirectivityHistogram::operator*=(*v65, v64);
    if (v104)
      v72 = *(float *)(*v107 + 40);
    else
      v72 = 3.4028e38;
    if (v11 >= 2)
    {
      v77 = v107;
      if ((unint64_t)((char *)v108 - (char *)v107) >= 0x11)
      {
        v78 = 1;
        v79 = 2;
        do
        {
          v80 = v77[v79];
          v81 = *(_DWORD *)(v80 + 44);
          if (*(_DWORD *)(a5 + 176) < v81)
            v81 = *(_DWORD *)(a5 + 176);
          v69 = (Phase::Logger *)Phase::SpatialModeler::DirectivityHistogram::MultiplyAdd(*v65, (float **)v80, (float)v81 / v62);
          v77 = v107;
          if (v104 != v78)
          {
            v82 = v107[v79];
            if (*(float *)(v82 + 40) < v72)
              v72 = *(float *)(v82 + 40);
          }
          ++v78;
          v79 += 2;
        }
        while (v78 < ((char *)v108 - (char *)v107) >> 4);
      }
      if (v72 < 3.4028e38)
        *((float *)*v65 + 10) = v72;
      if (v11 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a5 + 18936) - *(_QWORD *)(a5 + 18928)) >> 3))
      {
        v83 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v69) + 1184);
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
        {
          v84 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a5 + 18936) - *(_QWORD *)(a5 + 18928)) >> 3);
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "RoomSimulationClusteringFunctions.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 713;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v11;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v84;
          _os_log_impl(&dword_2164CC000, v83, OS_LOG_TYPE_DEBUG, "%25s:%-5d ClusterLateReverb: Using %zu of %lu histograms for shared reverb.", buf, 0x26u);
        }
      }
    }
  }
  else
  {
LABEL_79:
    v73 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 1184);
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "RoomSimulationClusteringFunctions.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 719;
      _os_log_impl(&dword_2164CC000, v73, OS_LOG_TYPE_DEBUG, "%25s:%-5d ClusterLateReverb: All histograms are invalid or empty.", buf, 0x12u);
    }
    Phase::SpatialModeler::RayTracerState::CreateDirectivityHistogram((Phase::SpatialModeler::RayTracerState *)a5, *(float *)(a5 + 112), *(float *)(a5 + 116), 3.4028e38, *((_QWORD *)v8 + 6), (Phase::SpatialModeler::DirectivityHistogram **)buf);
    std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100](a6 + 40, (__int128 *)buf);
    v74 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v75 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
  }
  v85 = *(_QWORD *)(a6 + 40);
  v86 = 0.0;
  if (!*(_BYTE *)(v85 + 36))
  {
    v87 = (*(_DWORD *)(v85 + 28) * *(_DWORD *)(v85 + 24));
    if ((_DWORD)v87)
    {
      v88 = *(_QWORD *)(v85 + 8);
      v89 = (v87 + 3) & 0x1FFFFFFFCLL;
      v90 = (uint64x2_t)vdupq_n_s64(v87 - 1);
      v91 = (int64x2_t)xmmword_2166F7AD0;
      v92 = (int64x2_t)xmmword_2166F7AE0;
      v93 = (float32x4_t)xmmword_2166F7AF0;
      v94 = (__int32 *)(v88 + 8);
      v95 = vdupq_n_s64(4uLL);
      do
      {
        v96 = v93;
        v97 = (int32x4_t)vcgeq_u64(v90, (uint64x2_t)v92);
        *(int32x2_t *)v70.i8 = vmovn_s64((int64x2_t)v97);
        *(int16x4_t *)v93.f32 = vmovn_s32(v70);
        if ((v93.i8[0] & 1) != 0)
          v93.i32[0] = *(v94 - 2);
        if ((vmovn_s32(v70).i8[2] & 1) != 0)
          v93.i32[1] = *(v94 - 1);
        v70 = (int32x4_t)vcgeq_u64(v90, (uint64x2_t)v91);
        v98 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v71, (int64x2_t)v70));
        if ((v98.i8[4] & 1) != 0)
          v93.i32[2] = *v94;
        v71 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v98, (int64x2_t)v70));
        if ((v71.i8[6] & 1) != 0)
          v93.i32[3] = v94[1];
        v93 = vaddq_f32(v96, v93);
        v91 = vaddq_s64(v91, v95);
        v92 = vaddq_s64(v92, v95);
        v94 += 4;
        v89 -= 4;
      }
      while (v89);
      v99 = vbslq_s8((int8x16_t)vuzp1q_s32(v97, v70), (int8x16_t)v93, (int8x16_t)v96);
      v86 = (float)(vaddv_f32(*(float32x2_t *)v99.i8) + *(float *)&v99.i32[2]) + *(float *)&v99.i32[3];
    }
  }
  *(float *)(a6 + 56) = v86;
  *(_QWORD *)buf = &v107;
  std::vector<std::shared_ptr<Phase::Controller::Renderer>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_2166AA6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  a29 = (void **)&a24;
  std::vector<std::shared_ptr<Phase::Controller::Renderer>>::__destroy_vector::operator()[abi:ne180100](&a29);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::AggregateSharedHistogram(float *a1, unint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float SharedEnergyReFixedDb;
  float v13;
  int32x4_t v14;
  int32x2_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  float32x4_t v24;
  __int32 *v25;
  int64x2_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int32x2_t v29;
  int8x16_t v30;
  _QWORD *v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  char *v48;
  int8x8_t v49;
  unint64_t v50;
  uint8x8_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  NSObject *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  uint64_t *v63;
  float v64;
  _DWORD *v65;
  _DWORD *v66;
  unint64_t v67;
  _QWORD *v68;
  _BYTE __p[28];
  __int16 v70;
  const char *v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v67 = a2;
  *(_QWORD *)__p = &v67;
  v5 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(a1 + 4856), &v67, (uint64_t)&std::piecewise_construct, (_QWORD **)__p);
  v6 = v5;
  v7 = *((_QWORD *)v5 + 8);
  if (v7 && (v8 = *(_QWORD *)(a3 + 40)) != 0)
  {
    v9 = *(float *)(v8 + 40);
    v10 = a1[28];
    if (v9 <= v10)
    {
      v11 = *(float *)(v7 + 40);
      if (v11 <= v10)
        v9 = (float)(v9 * 0.29) + (float)(v11 * 0.71);
      *(float *)(v7 + 40) = v9;
    }
    SharedEnergyReFixedDb = Phase::SpatialModeler::RayTracerState::GetSharedEnergyReFixedDb((Phase::SpatialModeler::RayTracerState *)a1, &v67);
    v13 = expf((float)((float)(SharedEnergyReFixedDb * 10.0) / 10.0) * 0.23026);
    Phase::SpatialModeler::DirectivityHistogram::operator*=(*((_QWORD **)v6 + 8), v13 * 0.71);
    Phase::SpatialModeler::DirectivityHistogram::MultiplyAdd(*((Phase::SpatialModeler::DirectivityHistogram **)v6 + 8), *(float ***)(a3 + 40), 0.29);
    v16 = *((_QWORD *)v6 + 8);
    v17 = 0.0;
    if (!*(_BYTE *)(v16 + 36))
    {
      v18 = (*(_DWORD *)(v16 + 28) * *(_DWORD *)(v16 + 24));
      if ((_DWORD)v18)
      {
        v19 = *(_QWORD *)(v16 + 8);
        v20 = (v18 + 3) & 0x1FFFFFFFCLL;
        v21 = (uint64x2_t)vdupq_n_s64(v18 - 1);
        v22 = (int64x2_t)xmmword_2166F7AD0;
        v23 = (int64x2_t)xmmword_2166F7AE0;
        v24 = (float32x4_t)xmmword_2166F7AF0;
        v25 = (__int32 *)(v19 + 8);
        v26 = vdupq_n_s64(4uLL);
        do
        {
          v27 = v24;
          v28 = (int32x4_t)vcgeq_u64(v21, (uint64x2_t)v23);
          *(int32x2_t *)v14.i8 = vmovn_s64((int64x2_t)v28);
          *(int16x4_t *)v24.f32 = vmovn_s32(v14);
          if ((v24.i8[0] & 1) != 0)
            v24.i32[0] = *(v25 - 2);
          if ((vmovn_s32(v14).i8[2] & 1) != 0)
            v24.i32[1] = *(v25 - 1);
          v14 = (int32x4_t)vcgeq_u64(v21, (uint64x2_t)v22);
          v29 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v15, (int64x2_t)v14));
          if ((v29.i8[4] & 1) != 0)
            v24.i32[2] = *v25;
          v15 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v29, (int64x2_t)v14));
          if ((v15.i8[6] & 1) != 0)
            v24.i32[3] = v25[1];
          v24 = vaddq_f32(v27, v24);
          v22 = vaddq_s64(v22, v26);
          v23 = vaddq_s64(v23, v26);
          v25 += 4;
          v20 -= 4;
        }
        while (v20);
        v30 = vbslq_s8((int8x16_t)vuzp1q_s32(v28, v14), (int8x16_t)v24, (int8x16_t)v27);
        v17 = (float)(vaddv_f32(*(float32x2_t *)v30.i8) + *(float *)&v30.i32[2]) + *(float *)&v30.i32[3];
      }
    }
    v31 = v6 + 24;
    *((float *)v6 + 20) = v17;
    v32 = Phase::SpatialModeler::RayTracerState::GetSharedEnergyReFixedDb((Phase::SpatialModeler::RayTracerState *)a1, &v67);
    v33 = a1[37];
    memset(__p, 0, 24);
    v34 = (_QWORD *)*((_QWORD *)v6 + 5);
    if (v34)
    {
      do
      {
        v35 = v34 + 2;
        if (!std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)a3, v34 + 2))
        {
          v36 = *(char **)&__p[8];
          if (*(_QWORD *)&__p[8] >= *(_QWORD *)&__p[16])
          {
            v38 = *(char **)__p;
            v39 = (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3;
            v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 61)
              std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
            v41 = *(_QWORD *)&__p[16] - *(_QWORD *)__p;
            if ((uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)__p) >> 2 > v40)
              v40 = v41 >> 2;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
              v42 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v42 = v40;
            if (v42)
            {
              v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&__p[16], v42);
              v38 = *(char **)__p;
              v36 = *(char **)&__p[8];
            }
            else
            {
              v43 = 0;
            }
            v44 = &v43[8 * v39];
            *(_QWORD *)v44 = *v35;
            v37 = v44 + 8;
            while (v36 != v38)
            {
              v45 = *((_QWORD *)v36 - 1);
              v36 -= 8;
              *((_QWORD *)v44 - 1) = v45;
              v44 -= 8;
            }
            *(_QWORD *)__p = v44;
            *(_QWORD *)&__p[8] = v37;
            *(_QWORD *)&__p[16] = &v43[8 * v42];
            if (v38)
              operator delete(v38);
          }
          else
          {
            **(_QWORD **)&__p[8] = *v35;
            v37 = v36 + 8;
          }
          *(_QWORD *)&__p[8] = v37;
        }
        v34 = (_QWORD *)*v34;
      }
      while (v34);
      v46 = *(unint64_t **)__p;
      v47 = *(unint64_t **)&__p[8];
      while (1)
      {
        if (v46 == v47)
          goto LABEL_79;
        v48 = (char *)std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)v6 + 3, *v46);
        if (v48)
          break;
LABEL_71:
        ++v46;
      }
      v49 = *(int8x8_t *)(v6 + 32);
      v50 = *((_QWORD *)v48 + 1);
      v51 = (uint8x8_t)vcnt_s8(v49);
      v51.i16[0] = vaddlv_u8(v51);
      if (v51.u32[0] > 1uLL)
      {
        if (v50 >= *(_QWORD *)&v49)
          v50 %= *(_QWORD *)&v49;
      }
      else
      {
        v50 &= *(_QWORD *)&v49 - 1;
      }
      v52 = *(_QWORD *)v48;
      v53 = *(char **)(*v31 + 8 * v50);
      do
      {
        v54 = v53;
        v53 = *(char **)v53;
      }
      while (v53 != v48);
      if (v54 == v6 + 40)
        goto LABEL_60;
      v55 = *((_QWORD *)v54 + 1);
      if (v51.u32[0] > 1uLL)
      {
        if (v55 >= *(_QWORD *)&v49)
          v55 %= *(_QWORD *)&v49;
      }
      else
      {
        v55 &= *(_QWORD *)&v49 - 1;
      }
      if (v55 != v50)
      {
LABEL_60:
        if (v52)
        {
          v56 = *(_QWORD *)(v52 + 8);
          if (v51.u32[0] > 1uLL)
          {
            v57 = *(_QWORD *)(v52 + 8);
            if (v56 >= *(_QWORD *)&v49)
              v57 = v56 % *(_QWORD *)&v49;
          }
          else
          {
            v57 = v56 & (*(_QWORD *)&v49 - 1);
          }
          if (v57 == v50)
            goto LABEL_64;
        }
        *(_QWORD *)(*v31 + 8 * v50) = 0;
        v52 = *(_QWORD *)v48;
      }
      if (!v52)
      {
LABEL_70:
        *(_QWORD *)v54 = v52;
        *(_QWORD *)v48 = 0;
        --*((_QWORD *)v6 + 6);
        operator delete(v48);
        goto LABEL_71;
      }
      v56 = *(_QWORD *)(v52 + 8);
LABEL_64:
      if (v51.u32[0] > 1uLL)
      {
        if (v56 >= *(_QWORD *)&v49)
          v56 %= *(_QWORD *)&v49;
      }
      else
      {
        v56 &= *(_QWORD *)&v49 - 1;
      }
      if (v56 != v50)
      {
        *(_QWORD *)(*v31 + 8 * v56) = v54;
        v52 = *(_QWORD *)v48;
      }
      goto LABEL_70;
    }
LABEL_79:
    v63 = *(uint64_t **)(a3 + 16);
    if (v63)
    {
      v64 = v32 + v33;
      do
      {
        v65 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(v31, v63[2]);
        if (v65)
        {
          v65[6] = *((_DWORD *)v63 + 6);
          v65[7] = *((_DWORD *)v63 + 7);
          v65[8] = *((_DWORD *)v63 + 8);
        }
        else
        {
          v68 = v63 + 2;
          v66 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v31, (unint64_t *)v63 + 2, (uint64_t)&std::piecewise_construct, &v68);
          v66[6] = *((_DWORD *)v63 + 6);
          v66[7] = *((_DWORD *)v63 + 7);
          v66[8] = *((_DWORD *)v63 + 8);
          v66[9] = *((_DWORD *)v63 + 9);
          v68 = v63 + 2;
          *((float *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v31, (unint64_t *)v63 + 2, (uint64_t)&std::piecewise_construct, &v68)+ 9) = v64;
        }
        v63 = (uint64_t *)*v63;
      }
      while (v63);
    }
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
  }
  else
  {
    v58 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v5) + 1184);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      v59 = *((_QWORD *)v6 + 8);
      v60 = "ok";
      *(_QWORD *)&__p[4] = "RoomSimulationClusteringFunctions.cpp";
      v61 = *(_QWORD *)(a3 + 40);
      if (v59)
        v62 = "ok";
      else
        v62 = "null";
      *(_DWORD *)__p = 136315906;
      *(_WORD *)&__p[12] = 1024;
      if (!v61)
        v60 = "null";
      *(_DWORD *)&__p[14] = 824;
      *(_WORD *)&__p[18] = 2080;
      *(_QWORD *)&__p[20] = v62;
      v70 = 2080;
      v71 = v60;
      _os_log_impl(&dword_2164CC000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d AggregateSharedHistogram: Empty shared histogram(s) provided (persistent: %s, new: %s)", __p, 0x26u);
    }
  }
}

void sub_2166AAD24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2166AADAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<Phase::SpatialModeler::RendererInfo>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Phase::SpatialModeler::RendererInfo>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 40 * a2;
    do
    {
      *(_OWORD *)v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      *(_QWORD *)(v4 + 32) = 0;
      *(_BYTE *)v4 = 1;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_BYTE *)(v4 + 24) = 0;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_2166AAE38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Phase::SpatialModeler::RendererInfo>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<Phase::SpatialModeler::RendererInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v14 = 1;
  if (v7 >= 3)
    v14 = (v7 & (v7 - 1)) != 0;
  v15 = v14 | (2 * v7);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v30)
  {
    *i = *v30;
LABEL_72:
    *v30 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v29[v5] = a1 + 4;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_2166AB278(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::find<unsigned long long>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = (a2 - 1) & a3;
  }
  v5 = *(_QWORD **)(a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= a2)
            v7 %= a2;
        }
        else
        {
          v7 &= a2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(float *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v34;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v5;
  v12 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v12;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v22)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = a1 + 4;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v30 = *(_QWORD **)a1;
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v31)
  {
    *i = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v30[v5] = a1 + 4;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_2166AB70C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::erase(_QWORD *a1, uint64_t *__p)
{
  int8x8_t v2;
  unint64_t v3;
  uint64_t v4;
  uint8x8_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v2 = (int8x8_t)a1[1];
  v4 = *__p;
  v3 = __p[1];
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v6 = *(uint64_t **)(*a1 + 8 * v3);
  do
  {
    v7 = v6;
    v6 = (uint64_t *)*v6;
  }
  while (v6 != __p);
  if (v7 != a1 + 2)
  {
    v8 = v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v2)
        v8 %= *(_QWORD *)&v2;
    }
    else
    {
      v8 &= *(_QWORD *)&v2 - 1;
    }
    v9 = *__p;
    if (v8 == v3)
    {
LABEL_20:
      if (!v9)
        goto LABEL_27;
      goto LABEL_21;
    }
  }
  if (!v4)
    goto LABEL_19;
  v10 = *(_QWORD *)(v4 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(_QWORD *)&v2)
      v10 %= *(_QWORD *)&v2;
  }
  else
  {
    v10 &= *(_QWORD *)&v2 - 1;
  }
  v9 = *__p;
  if (v10 != v3)
  {
LABEL_19:
    *(_QWORD *)(*a1 + 8 * v3) = 0;
    v9 = *__p;
    goto LABEL_20;
  }
LABEL_21:
  v11 = *(_QWORD *)(v9 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v11 >= *(_QWORD *)&v2)
      v11 %= *(_QWORD *)&v2;
  }
  else
  {
    v11 &= *(_QWORD *)&v2 - 1;
  }
  if (v11 != v3)
  {
    *(_QWORD *)(*a1 + 8 * v11) = v7;
    v9 = *__p;
  }
LABEL_27:
  *v7 = v9;
  *__p = 0;
  --a1[3];
  operator delete(__p);
  return v4;
}

_QWORD *Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingIntersections(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  unint64_t v6;
  unint64_t *v7;

  v6 = a2;
  v7 = &v6;
  v4 = std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::__emplace_unique_key_args<Phase::Handle64,std::piecewise_construct_t const&,std::tuple<Phase::Handle64 const&>,std::tuple<>>((uint64_t **)(a1 + 64), &v6, (uint64_t)&std::piecewise_construct, &v7);
  return std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=(v4 + 7, a3);
}

_QWORD *std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingIntersections(Phase::SpatialModeler::RoomSimulationDebugger *this, Handle64 a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = (_QWORD *)*((_QWORD *)this + 9);
  result = (_QWORD *)((char *)this + 72);
  v3 = v4;
  if (v4)
  {
    v5 = result;
    do
    {
      v6 = v3[4];
      v7 = v6 >= a2.mData;
      if (v6 >= a2.mData)
        v8 = v3;
      else
        v8 = v3 + 1;
      if (v7)
        v5 = v3;
      v3 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != result && v5[4] <= a2.mData)
    {
      v9 = v5 + 7;
      result = (_QWORD *)v5[10];
      v5[10] = 0;
      if (result == v5 + 7)
      {
        v10 = 4;
        result = v9;
      }
      else
      {
        if (!result)
          return result;
        v10 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
    }
  }
  return result;
}

_QWORD *Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingEnergyHistogram(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  unint64_t v6;
  unint64_t *v7;

  v6 = a2;
  v7 = &v6;
  v4 = std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::__emplace_unique_key_args<Phase::Handle64,std::piecewise_construct_t const&,std::tuple<Phase::Handle64 const&>,std::tuple<>>((uint64_t **)(a1 + 64), &v6, (uint64_t)&std::piecewise_construct, &v7);
  return std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=(v4 + 11, a3);
}

_QWORD *Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingEnergyHistogram(Phase::SpatialModeler::RoomSimulationDebugger *this, Handle64 a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = (_QWORD *)*((_QWORD *)this + 9);
  result = (_QWORD *)((char *)this + 72);
  v3 = v4;
  if (v4)
  {
    v5 = result;
    do
    {
      v6 = v3[4];
      v7 = v6 >= a2.mData;
      if (v6 >= a2.mData)
        v8 = v3;
      else
        v8 = v3 + 1;
      if (v7)
        v5 = v3;
      v3 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != result && v5[4] <= a2.mData)
    {
      v9 = v5 + 11;
      result = (_QWORD *)v5[14];
      v5[14] = 0;
      if (result == v5 + 11)
      {
        v10 = 4;
        result = v9;
      }
      else
      {
        if (!result)
          return result;
        v10 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
    }
  }
  return result;
}

_QWORD *Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingImageSourceLocations(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  unint64_t v6;
  unint64_t *v7;

  v6 = a2;
  v7 = &v6;
  v4 = std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::__emplace_unique_key_args<Phase::Handle64,std::piecewise_construct_t const&,std::tuple<Phase::Handle64 const&>,std::tuple<>>((uint64_t **)(a1 + 64), &v6, (uint64_t)&std::piecewise_construct, &v7);
  return std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=(v4 + 15, a3);
}

_QWORD *Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingImageSourceLocations(Phase::SpatialModeler::RoomSimulationDebugger *this, Handle64 a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = (_QWORD *)*((_QWORD *)this + 9);
  result = (_QWORD *)((char *)this + 72);
  v3 = v4;
  if (v4)
  {
    v5 = result;
    do
    {
      v6 = v3[4];
      v7 = v6 >= a2.mData;
      if (v6 >= a2.mData)
        v8 = v3;
      else
        v8 = v3 + 1;
      if (v7)
        v5 = v3;
      v3 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != result && v5[4] <= a2.mData)
    {
      v9 = v5 + 15;
      result = (_QWORD *)v5[18];
      v5[18] = 0;
      if (result == v5 + 15)
      {
        v10 = 4;
        result = v9;
      }
      else
      {
        if (!result)
          return result;
        v10 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
    }
  }
  return result;
}

_QWORD *Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingListenerEarlyResponseMetadata(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  unint64_t v6;
  unint64_t *v7;

  v6 = a2;
  v7 = &v6;
  v4 = std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::__emplace_unique_key_args<Phase::Handle64,std::piecewise_construct_t const&,std::tuple<Phase::Handle64 const&>,std::tuple<>>((uint64_t **)(a1 + 64), &v6, (uint64_t)&std::piecewise_construct, &v7);
  return std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=(v4 + 19, a3);
}

_QWORD *Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingListenerEarlyResponseMetadata(Phase::SpatialModeler::RoomSimulationDebugger *this, Handle64 a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = (_QWORD *)*((_QWORD *)this + 9);
  result = (_QWORD *)((char *)this + 72);
  v3 = v4;
  if (v4)
  {
    v5 = result;
    do
    {
      v6 = v3[4];
      v7 = v6 >= a2.mData;
      if (v6 >= a2.mData)
        v8 = v3;
      else
        v8 = v3 + 1;
      if (v7)
        v5 = v3;
      v3 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != result && v5[4] <= a2.mData)
    {
      v9 = v5 + 19;
      result = (_QWORD *)v5[22];
      v5[22] = 0;
      if (result == v5 + 19)
      {
        v10 = 4;
        result = v9;
      }
      else
      {
        if (!result)
          return result;
        v10 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
    }
  }
  return result;
}

_QWORD *Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingListenerLateReverbMetadata(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  unint64_t v6;
  unint64_t *v7;

  v6 = a2;
  v7 = &v6;
  v4 = std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::__emplace_unique_key_args<Phase::Handle64,std::piecewise_construct_t const&,std::tuple<Phase::Handle64 const&>,std::tuple<>>((uint64_t **)(a1 + 64), &v6, (uint64_t)&std::piecewise_construct, &v7);
  return std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=(v4 + 23, a3);
}

_QWORD *Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingListenerLateReverbMetadata(Phase::SpatialModeler::RoomSimulationDebugger *this, Handle64 a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = (_QWORD *)*((_QWORD *)this + 9);
  result = (_QWORD *)((char *)this + 72);
  v3 = v4;
  if (v4)
  {
    v5 = result;
    do
    {
      v6 = v3[4];
      v7 = v6 >= a2.mData;
      if (v6 >= a2.mData)
        v8 = v3;
      else
        v8 = v3 + 1;
      if (v7)
        v5 = v3;
      v3 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != result && v5[4] <= a2.mData)
    {
      v9 = v5 + 23;
      result = (_QWORD *)v5[26];
      v5[26] = 0;
      if (result == v5 + 23)
      {
        v10 = 4;
        result = v9;
      }
      else
      {
        if (!result)
          return result;
        v10 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
    }
  }
  return result;
}

_QWORD *Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingRoomData(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  unint64_t v6;
  unint64_t *v7;

  v6 = a2;
  v7 = &v6;
  v4 = std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::__emplace_unique_key_args<Phase::Handle64,std::piecewise_construct_t const&,std::tuple<Phase::Handle64 const&>,std::tuple<>>((uint64_t **)(a1 + 64), &v6, (uint64_t)&std::piecewise_construct, &v7);
  return std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=(v4 + 27, a3);
}

_QWORD *Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingRoomData(Phase::SpatialModeler::RoomSimulationDebugger *this, Handle64 a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = (_QWORD *)*((_QWORD *)this + 9);
  result = (_QWORD *)((char *)this + 72);
  v3 = v4;
  if (v4)
  {
    v5 = result;
    do
    {
      v6 = v3[4];
      v7 = v6 >= a2.mData;
      if (v6 >= a2.mData)
        v8 = v3;
      else
        v8 = v3 + 1;
      if (v7)
        v5 = v3;
      v3 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != result && v5[4] <= a2.mData)
    {
      v9 = v5 + 27;
      result = (_QWORD *)v5[30];
      v5[30] = 0;
      if (result == v5 + 27)
      {
        v10 = 4;
        result = v9;
      }
      else
      {
        if (!result)
          return result;
        v10 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
    }
  }
  return result;
}

void Phase::SpatialModeler::RoomSimulationDebugger::ExecuteRoomDataCallbacks(int32x2_t *this, Phase::SpatialModeler::RayTracerState *a2, Phase::Geometry::System *a3, Phase::Geometry::SystemState *a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int32x2_t *v9;
  int32x2_t v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  int32x2_t *v17;
  __int32 *v18;
  __int32 v19;
  unint64_t v20;
  uint64_t v21;
  int32x2_t *v22;
  __int32 *v23;
  __int32 v24;
  unint64_t v25;
  uint64_t v26;
  __int32 *v27;
  __int32 v28;
  unint64_t v29;
  uint64_t v30;
  int32x2_t *v31;
  __int32 *v32;
  __int32 v33;
  uint64_t v34;
  _QWORD v35[16];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int32 v48;
  int32x2_t v49;
  _OWORD v50[3];
  _OWORD v51[3];
  _QWORD *v52;

  if (*((_QWORD *)a2 + 345))
  {
    v5 = Phase::Geometry::SystemDebugger::GetFromSystem((uint64_t)a2);
    if (v5)
    {
      v8 = *(_QWORD **)(v5 + 112);
      v6 = v5 + 112;
      v7 = v8;
      if (v8)
      {
        v9 = this + 2472;
        v10 = this[2822];
        v11 = (_QWORD *)v6;
        do
        {
          v12 = v7[4];
          v13 = v12 >= *(_QWORD *)&v10;
          if (v12 >= *(_QWORD *)&v10)
            v14 = v7;
          else
            v14 = v7 + 1;
          if (v13)
            v11 = v7;
          v7 = (_QWORD *)*v14;
        }
        while (*v14);
        if (v11 != (_QWORD *)v6 && v11[4] <= *(_QWORD *)&v10 && v11[30])
        {
          memset(&v35[9], 0, 24);
          memset(&v35[13], 0, 24);
          v36 = 0u;
          v37 = 0u;
          v38 = 0u;
          v39 = 0u;
          v40 = 0u;
          v41 = 0u;
          v42 = 0u;
          v43 = 0u;
          v44 = 0u;
          v45 = 0u;
          v46 = 0u;
          v47 = 0u;
          memset(v51, 0, sizeof(v51));
          memset(v50, 0, sizeof(v50));
          v35[0] = 0;
          v35[1] = 0;
          memset(&v35[4], 0, 24);
          v35[2] = v10;
          v48 = this[2439].i32[0];
          v49 = vrev64_s32(this[2438]);
          v15 = this[2455].u32[1];
          LODWORD(v52) = 0;
          std::vector<float>::assign((char **)v50, v15, &v52);
          v16 = this[2455].u32[1];
          if ((_DWORD)v16)
          {
            v17 = this + 2440;
            v18 = *(__int32 **)&v50[0];
            do
            {
              v19 = v17->i32[0];
              v17 = (int32x2_t *)((char *)v17 + 4);
              *v18++ = v19;
              --v16;
            }
            while (v16);
          }
          v20 = this[2471].u32[1];
          LODWORD(v52) = 0;
          std::vector<float>::assign((char **)&v50[1] + 1, v20, &v52);
          v21 = this[2471].u32[1];
          if ((_DWORD)v21)
          {
            v22 = this + 2456;
            v23 = (__int32 *)*((_QWORD *)&v50[1] + 1);
            do
            {
              v24 = v22->i32[0];
              v22 = (int32x2_t *)((char *)v22 + 4);
              *v23++ = v24;
              --v21;
            }
            while (v21);
          }
          v25 = this[2487].u32[1];
          LODWORD(v52) = 0;
          std::vector<float>::assign((char **)v51, v25, &v52);
          v26 = this[2455].u32[1];
          if ((_DWORD)v26)
          {
            v27 = *(__int32 **)&v51[0];
            do
            {
              v28 = v9->i32[0];
              v9 = (int32x2_t *)((char *)v9 + 4);
              *v27++ = v28;
              --v26;
            }
            while (v26);
          }
          v29 = this[41].u32[1];
          LODWORD(v52) = 0;
          std::vector<float>::assign((char **)&v51[1] + 1, v29, &v52);
          v30 = this[41].u32[1];
          if ((_DWORD)v30)
          {
            v31 = this + 26;
            v32 = (__int32 *)*((_QWORD *)&v51[1] + 1);
            do
            {
              v33 = v31->i32[0];
              v31 = (int32x2_t *)((char *)v31 + 4);
              *v32++ = v33;
              --v30;
            }
            while (v30);
          }
          v52 = v35;
          v34 = v11[30];
          if (!v34)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v34 + 48))(v34, &v52);
          Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::~RoomSimulationDebugView((Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)v35);
        }
      }
    }
  }
}

void sub_2166AC02C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::~RoomSimulationDebugView((Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::__emplace_unique_key_args<Phase::Handle64,std::piecewise_construct_t const&,std::tuple<Phase::Handle64 const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0xF8uLL);
    v14[1] = v7;
    v12[4] = **a4;
    *((_OWORD *)v12 + 13) = 0u;
    *((_OWORD *)v12 + 14) = 0u;
    *((_OWORD *)v12 + 11) = 0u;
    *((_OWORD *)v12 + 12) = 0u;
    *((_OWORD *)v12 + 9) = 0u;
    *((_OWORD *)v12 + 10) = 0u;
    *((_OWORD *)v12 + 7) = 0u;
    *((_OWORD *)v12 + 8) = 0u;
    *((_OWORD *)v12 + 5) = 0u;
    *((_OWORD *)v12 + 6) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((_OWORD *)v12 + 4) = 0u;
    v12[5] = -1;
    *((_DWORD *)v12 + 12) = -1;
    *((_BYTE *)v12 + 52) = 1;
    v12[30] = 0;
    v15 = 1;
    std::__tree<Phase::SpatialCategory>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<Phase::Handle64 const,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,0>(v2 + 4);
    operator delete(v2);
  }
}

_QWORD *std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2166AC310(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

const char *Phase::SpatialModeler::RoomSimulationErrorCategory::name(Phase::SpatialModeler::RoomSimulationErrorCategory *this)
{
  return "Room Simulation";
}

_QWORD *Phase::SpatialModeler::RoomSimulationErrorCategory::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v3;

  if ((a1 - 1) > 8)
    v3 = "(unrecognized error)";
  else
    v3 = off_24D580D48[a1 - 1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void Phase::SpatialModeler::RoomSimulationErrorCategory::~RoomSimulationErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::SpatialModeler::RoomSimulationImpl::CheckClusterQueryInput@<X0>(uint64_t this@<X0>, Phase::SpatialModeler::RoomSimulation *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;

  v4 = *((_QWORD *)a2 + 11);
  if (!v4 || *(_DWORD *)v4 != 3)
  {
    v11 = 3;
LABEL_16:
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = this + 72;
    v10 = 2;
    goto LABEL_17;
  }
  v5 = (_DWORD *)*((_QWORD *)a2 + 12);
  if (!v5 || *v5 != 2)
  {
    v11 = 4;
    goto LABEL_16;
  }
  v6 = *((_QWORD *)a2 + 8);
  if (!v6)
  {
    v11 = 5;
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v4 + 152);
  if (*(_DWORD *)(v6 + 136) <= v7
    || (v8 = *(_QWORD *)(v6 + 120), *(_DWORD *)(v8 + 24 * v7 + 20) != HIDWORD(v7))
    || (v9 = *(_DWORD **)(v8 + 24 * *(_QWORD *)(v4 + 152))) == 0
    || *v9 != 2)
  {
    v11 = 7;
    goto LABEL_16;
  }
  if (!*(_QWORD *)(v4 + 144))
  {
    v11 = 6;
    goto LABEL_16;
  }
  v10 = 1;
LABEL_17:
  *(_DWORD *)(a3 + 24) = v10;
  return this;
}

uint64_t Phase::SpatialModeler::RoomSimulationImpl::CheckSpatialQueryInput@<X0>(uint64_t this@<X0>, Phase::SpatialModeler::RoomSimulation *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;

  v4 = *((_QWORD *)a2 + 11);
  if (!v4 || *(_DWORD *)v4 != 2)
  {
    v11 = 3;
LABEL_15:
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = this + 72;
    v10 = 2;
    goto LABEL_16;
  }
  v5 = (_DWORD *)*((_QWORD *)a2 + 12);
  if (!v5 || *v5 != 3)
  {
    v11 = 4;
    goto LABEL_15;
  }
  v6 = *((_QWORD *)a2 + 8);
  if (!v6)
  {
    v11 = 5;
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(v4 + 552);
  if (*(_DWORD *)(v6 + 136) <= v7
    || (v8 = *(_QWORD *)(v6 + 120), *(_DWORD *)(v8 + 24 * v7 + 20) != HIDWORD(v7))
    || (v9 = *(_DWORD **)(v8 + 24 * v7)) == 0
    || *v9 != 2)
  {
    v11 = 7;
    goto LABEL_15;
  }
  v10 = 1;
LABEL_16:
  *(_DWORD *)(a3 + 24) = v10;
  return this;
}

void Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryCleanupCommon(Phase::SpatialModeler::RoomSimulationImpl *this, Phase::SpatialModeler::RoomSimulation *a2, Phase::SpatialModeler::Query *a3, Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState *a4)
{
  Phase::Logger *v4;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (*(_BYTE *)(*((_QWORD *)a2 + 11) + 48))
    v4 = (Phase::SpatialModeler::RoomSimulationImpl *)((char *)this + 26720);
  else
    v4 = (Phase::SpatialModeler::RoomSimulationImpl *)((char *)this + 1424);
  v5 = (_QWORD *)*((_QWORD *)a3 + 16514);
  v6 = (char *)a3 + 132120;
  if (v5 != (_QWORD *)((char *)a3 + 132120))
  {
    do
    {
      if (v5[7])
        Phase::SpatialModeler::RayTracerState::FreeDirectivityHistogram(v4, v5 + 7);
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != (_QWORD *)v6);
  }
}

void Phase::SpatialModeler::RoomSimulationImpl::ParseOptionalProperties(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, float *a5@<X4>, float *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  double *v25;
  int v26;
  BOOL v27;
  float v28;
  float v29;
  int v30;
  NSObject *v31;
  int v33;
  const char *v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a3 + 144);
  if (v8)
  {
    v10 = *(_QWORD *)(a3 + 104);
    v11 = v10 + 304 * v8;
    v12 = *a4;
    v13 = *(_DWORD *)(a2 + 136);
    v14 = 6;
    while (2)
    {
      v15 = *(_QWORD *)(v10 + 144);
      if (v13 <= v15
        || (v16 = *(_QWORD *)(a2 + 120), *(_DWORD *)(v16 + 24 * v15 + 20) != HIDWORD(v15))
        || (v17 = *(_QWORD *)(v16 + 24 * *(_QWORD *)(v10 + 144))) == 0
        || *(_DWORD *)v17 != 3
        || (v18 = *(uint64_t **)(v17 + 120), v18 != *(uint64_t **)(v17 + 128))
        && ((v19 = *v18, *(_DWORD *)(a2 + 112) <= *v18)
         || (v20 = *v18, v21 = *(_QWORD *)(a2 + 96), *(_DWORD *)(v21 + 24 * v19 + 20) != HIDWORD(v19))
         || !*(_QWORD *)(v21 + 24 * v20)))
      {
LABEL_27:
        *(_QWORD *)a7 = v14;
        *(_QWORD *)(a7 + 8) = a1 + 72;
        v30 = 2;
        goto LABEL_28;
      }
      v22 = 0;
      v23 = 0;
      v24 = v12;
      do
      {
        v25 = (double *)(v10 + v22);
        v26 = *(_DWORD *)(v10 + v22 + 160);
        switch(v26)
        {
          case 7:
            v28 = v25[21];
            *a6 = v28;
            break;
          case 6:
            v29 = *(double *)(v10 + v22 + 168);
            *a5 = v29;
            break;
          case 2:
            v12 = *(_QWORD *)(v10 + v22 + 168);
            if ((v23 & 1) != 0)
            {
              v27 = v12 == v24;
              v12 = v24;
              if (!v27)
              {
                v31 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v25) + 1184);
                if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                {
                  v33 = 136315394;
                  v34 = "RoomSimulationImpl.cpp";
                  v35 = 1024;
                  v36 = 161;
                  _os_log_impl(&dword_2164CC000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d Sources in a cluster query have different listener directivities.\n", (uint8_t *)&v33, 0x12u);
                }
                v14 = 8;
                goto LABEL_27;
              }
            }
            *a4 = v12;
            v23 = 1;
            v24 = v12;
            break;
        }
        v22 += 16;
      }
      while (v22 != 128);
      v10 += 304;
      if (v10 != v11)
        continue;
      break;
    }
  }
  v30 = 1;
LABEL_28:
  *(_DWORD *)(a7 + 24) = v30;
}

uint64_t Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationBeginInitCommon@<X0>(Phase::SpatialModeler::RoomSimulationImpl *this@<X0>, Phase::SpatialModeler::RoomSimulation *a2@<X1>, Phase::SpatialModeler::Query *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _DWORD v20[8];

  Phase::SpatialModeler::RoomSimulationImpl::CheckClusterQueryInput((uint64_t)this, a2, (uint64_t)v20);
  if (v20[6] == 2)
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor(a4, (uint64_t)v20);
  }
  else
  {
    v9 = *((_QWORD *)a2 + 8);
    v10 = *((_QWORD *)a2 + 11);
    v11 = *(_QWORD *)(*(_QWORD *)(v9 + 120) + 24 * *(unsigned int *)(v10 + 152));
    v12 = (uint64_t *)(v10 + 104);
    if (*(_BYTE *)(v10 + 48))
      v13 = (char *)this + 26640;
    else
      v13 = (char *)this + 1344;
    Phase::SpatialModeler::RoomSimulation::PersistingSimulationData::InitPersistingSimulationData((uint64_t)v13, (uint64_t)this, *((_QWORD *)a2 + 8), v12, v11, *((Phase::SpatialModeler::RayTracerState **)this + 6));
    Phase::SpatialModeler::RayTracerState::InitRayTracerState((uint64_t)a3 + 112752, (uint64_t)this, v9, v12, v11, *((Phase::SpatialModeler::RayTracerState **)this + 6));
    v15 = *((_QWORD *)this + 2);
    if (v15 && *(_QWORD *)(v15 + 2760))
    {
      v16 = Phase::Geometry::SystemDebugger::GetFromSystem(v15);
      v14.i64[0] = *(_QWORD *)(v16 + 56);
      *((_QWORD *)a3 + 14100) = v14.i64[0];
      *((_QWORD *)a3 + 14104) = *(unsigned int *)(v16 + 48);
    }
    Phase::SpatialModeler::RoomSimulationLogging::logAreSourcesAndListenerInsideSceneBoundingBox((uint64_t)a3 + 112752, *((_DWORD *)this + 8), (uint64_t)"RoomSimulationBeginInitCommon", 29, v14);
    v17 = *(_OWORD *)((char *)this + 1432);
    v18 = *(_OWORD *)((char *)this + 1448);
    *((_QWORD *)a3 + 14099) = *((_QWORD *)this + 183);
    *(_OWORD *)((char *)a3 + 112776) = v18;
    *(_OWORD *)((char *)a3 + 112760) = v17;
    *(_DWORD *)(a4 + 24) = 1;
  }
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v20);
}

void sub_2166AC910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationBeginHandleSustainQueryCommon(Phase::SpatialModeler::RoomSimulationImpl *this, Phase::SpatialModeler::RoomSimulation *a2, Phase::SpatialModeler::Query *a3, Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState *a4, Phase::SpatialModeler::RayTracerState *a5)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  float UpdateRate;
  __int128 v12;
  __n128 result;
  _OWORD v14[3];
  _BYTE v15[30];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)a2 + 8);
  if (*(_DWORD *)(v8 + 168))
    v9 = *(_BYTE *)(v8 + 932) == 0;
  else
    v9 = 0;
  if (v9)
  {
    v10 = *((_QWORD *)this + 6);
    UpdateRate = Phase::SpatialModeler::RoomSimulationConfig::GetUpdateRate((float *)a4 + 12, *((_DWORD *)this + 8));
    Phase::SpatialModeler::FilterTargetRoomAcousticParameters(v8 + 144, v10, (uint64_t)a4, UpdateRate);
  }
  Phase::SpatialModeler::SimulationController::RequireSimulation((float *)this + 20, (Phase::SpatialModeler::Query *)((char *)a3 + 112752), a4, (Phase::Geometry::SystemState *)v8, (uint64_t)v14);
  v12 = *(_OWORD *)v15;
  *(_OWORD *)((char *)a4 + 22840) = v14[2];
  *(_OWORD *)((char *)a4 + 22856) = v12;
  *(_OWORD *)((char *)a4 + 22870) = *(_OWORD *)&v15[14];
  result = (__n128)v14[1];
  *(_OWORD *)((char *)a4 + 22808) = v14[0];
  *(__n128 *)((char *)a4 + 22824) = result;
  return result;
}

float Phase::SpatialModeler::RoomSimulationConfig::GetUpdateRate(float *a1, int a2)
{
  NSObject *v4;
  double v5;
  float *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a2 == 3)
  {
    v6 = a1 + 19;
  }
  else
  {
    if (a2 != 2)
    {
      v4 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 1184);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5 = a1[18];
        v8 = 136315906;
        v9 = "RoomSimulationInitData.hpp";
        v10 = 1024;
        v11 = 103;
        v12 = 1024;
        v13 = a2;
        v14 = 2048;
        v15 = v5;
        _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Spatial category %d not available in simulated modelers, returning mEarlyResponseUpdateRate %f", (uint8_t *)&v8, 0x22u);
      }
    }
    v6 = a1 + 18;
  }
  return *v6;
}

void Phase::SpatialModeler::RoomSimulationImpl::PrepareRayTrace(Phase::SpatialModeler::RoomSimulationImpl *this, Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState *a2, Phase::SpatialModeler::RayTracerState *a3, int a4)
{
  int v4;
  char *v6;
  _DWORD *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;

  v4 = (int)a3;
  v6 = (char *)this + 131760;
  v7 = (_DWORD *)((char *)this + 112816);
  *((_DWORD *)this + 33446) = *((_DWORD *)a2 + 5258);
  if (a4 && (Phase::SpatialModeler::RoomSimulationImpl *)((char *)this + 112752) != a2)
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 133680, *((char **)a2 + 2616), *((_QWORD *)a2 + 2617), (uint64_t)(*((_QWORD *)a2 + 2617) - *((_QWORD *)a2 + 2616)) >> 2);
  LODWORD(v8) = *v7;
  if (*v7 > 0x100u)
    std::terminate();
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = (char *)this + 112;
    do
    {
      Phase::SpatialModeler::RayTracerState::NextRay((unsigned int *)this + 28188, (uint64_t)v10);
      ++v9;
      v8 = *v7;
      v10 += 352;
    }
    while (v9 < v8);
  }
  *(_DWORD *)v6 = v8;
  *((_DWORD *)this + 16) = v4;
  *((_QWORD *)this + 11) = (char *)this + 112;
  *((_DWORD *)this + 24) = v8;
  *((_DWORD *)this + 25) = 352;
  *((_QWORD *)v6 + 756) = Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections;
}

uint64_t Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections@<X0>(Phase::SpatialModeler::RoomSimulationImpl *this@<X0>, Phase::SpatialModeler::RoomSimulation *a2@<X1>, Phase::SpatialModeler::Query *a3@<X2>, Phase::Logger *a4@<X8>)
{
  Phase::SpatialModeler::RoomSimulationImpl *v7;
  uint64_t InstancePtr;
  Phase::Logger *v10;
  int v11;
  Phase::Logger *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE *v20;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  char *v28;
  uint64_t v29;
  uint64_t Normals;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  float *v44;
  float v45;
  uint64_t v46;
  int v47;
  char *v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  _BOOL4 v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  float32x4_t *v68;
  uint64_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  float v78;
  float32x4_t *p_b;
  float *v80;
  float v81;
  float v82;
  float v83;
  unsigned int v84;
  unsigned int v85;
  unint64_t v86;
  float v87;
  unint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  float32x4_t *v94;
  float *v95;
  float v96;
  Phase::SpatialModeler::EarlyReflectionDetector *v97;
  float v98;
  float v99;
  float v100;
  unint64_t v102;
  unint64_t v103;
  float v104;
  int v105;
  int v106;
  char *v107;
  float *v108;
  NSObject *v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  __int128 v118;
  char **v119;
  uint64_t v120;
  uint64_t v121;
  float32x2_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  __int32 v134;
  float32x4_t *v135;
  uint64_t v136;
  int v137;
  __int128 *v138;
  uint64_t v139;
  unint64_t v140;
  float *v141;
  float v142;
  float v143;
  float32x4_t *v144;
  float v145;
  float v146;
  float v147;
  float32x4_t *v148;
  uint64_t **i;
  uint64_t *v150;
  unint64_t v151;
  uint64_t **v152;
  uint64_t **v153;
  uint64_t *v154;
  unint64_t v155;
  BOOL v156;
  uint64_t **v157;
  unint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t j;
  float v162;
  float v163;
  unint64_t v164;
  unint64_t v165;
  float v166;
  float32x4_t *v167;
  uint64_t v168;
  float v169;
  float v170;
  char *v171;
  float v172;
  float v173;
  float v174;
  unint64_t v175;
  float v176;
  float v177;
  unint64_t v178;
  unint64_t v179;
  float v180;
  unint64_t v181;
  int v182;
  float32x2_t *v183;
  float v184;
  float v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  float v189;
  float32x2_t v190;
  int32x2_t v191;
  float32x2_t v192;
  float v193;
  uint64_t v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  int v203;
  int v204;
  int32x2_t *v205;
  __int32 v206;
  __int32 *v207;
  char *v208;
  int32x2_t v209;
  void (*v210)(int **@<X0>, Phase::SpatialModeler::RoomSimulation *@<X1>, Phase::SpatialModeler::Query *@<X2>, Phase::Logger *@<X8>);
  _QWORD *v211;
  Phase::SpatialModeler::ImportanceSampling *v212;
  Phase::Logger *v213;
  Phase::SpatialModeler::RoomSimulation *v214;
  Phase::SpatialModeler::Query *v215;
  void **v216;
  unint64_t *v217;
  char v218;
  int **v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int *v222;
  char *v223;
  _DWORD *v224;
  uint64_t v225;
  Phase::SpatialModeler::RoomSimulationImpl *v226;
  char *v227;
  _BYTE *v228;
  float *v229;
  float *v230;
  float *v231;
  float *v232;
  int *v233;
  uint64_t **v234;
  char *v235;
  char v236;
  int v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  int *v241;
  char *v242;
  float *v243;
  float *v244;
  int *v245;
  char *v246;
  float v247;
  float v248;
  _QWORD v249[3];
  int v250;
  _BYTE v251[32];
  _BYTE v252[32];
  _BYTE v253[32];
  _BYTE v254[32];
  _OWORD v255[2];
  float32x2_t v256;
  float v257;
  unint64_t v258;
  float v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  _OWORD v266[2];
  float32x4_t v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  _OWORD v273[2];
  float32x4_t __b;
  float32x4_t v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  _BYTE v280[32];
  _BYTE v281[32];
  _BYTE v282[24];
  int v283;
  _QWORD v284[3];
  int v285;
  _QWORD v286[2];
  Phase::Logger *v287;
  float32x4_t buf[2];
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  _BYTE v293[192];
  uint64_t v294;

  v7 = this;
  v294 = *MEMORY[0x24BDAC8D0];
  InstancePtr = Phase::Logger::GetInstancePtr(this);
  v10 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 208));
  v287 = v10;
  v11 = *((_DWORD *)v7 + 8);
  v12 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v10);
  if (v11 == 2)
  {
    if (!*((_BYTE *)v12 + 1192))
      goto LABEL_11;
    v13 = Phase::Logger::GetInstancePtr(v12);
    if ((unint64_t)v10 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_11;
    v14 = **(NSObject ***)(v13 + 1184);
    if (!os_signpost_enabled(v14))
      goto LABEL_11;
    buf[0].i16[0] = 0;
    v15 = "Phase_RoomSimulation_EarlyReflectionsnHandleIntersections";
    v16 = "EarlyReflectionsnHandleIntersections";
  }
  else
  {
    if (!*((_BYTE *)v12 + 1192))
      goto LABEL_11;
    v17 = Phase::Logger::GetInstancePtr(v12);
    if ((unint64_t)v10 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_11;
    v14 = **(NSObject ***)(v17 + 1184);
    if (!os_signpost_enabled(v14))
      goto LABEL_11;
    buf[0].i16[0] = 0;
    v15 = "Phase_RoomSimulation_LateReverbHandleIntersections";
    v16 = "LateReverbHandleIntersections";
  }
  _os_signpost_emit_with_name_impl(&dword_2164CC000, v14, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v10, v15, v16, (uint8_t *)buf, 2u);
LABEL_11:
  v286[0] = &v287;
  v286[1] = v7;
  v18 = atomic_load((unsigned int *)a3);
  if (v18 != 3)
  {
    v284[0] = 9;
    v284[1] = (char *)v7 + 72;
    v285 = 2;
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v286, (uint64_t)v284);
    v20 = v284;
    return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v20);
  }
  Phase::SpatialModeler::RoomSimulationImpl::CheckClusterQueryInput((uint64_t)v7, a2, (uint64_t)v282);
  if (v283 == 2)
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v281, (uint64_t)v282);
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v286, (uint64_t)v281);
    v19 = v281;
    goto LABEL_14;
  }
  v22 = (char *)a3 + 112752;
  v23 = *((_QWORD *)a2 + 11);
  v24 = *(_QWORD *)(v23 + 152);
  v238 = *((_QWORD *)a2 + 8);
  if (*(_DWORD *)(v238 + 136) <= v24
    || (v25 = *(_QWORD *)(v238 + 120), *(_DWORD *)(v25 + 24 * v24 + 20) != HIDWORD(v24))
    || (v220 = *(_QWORD *)(v25 + 24 * v24)) == 0
    || *(_DWORD *)v220 != 2)
  {
    v220 = 0;
  }
  v214 = a2;
  v218 = (*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(*(_QWORD *)v22 + 51952) + 16))(*(_QWORD *)(*(_QWORD *)v22 + 51952), (char *)a3 + 112752);
  v215 = a3;
  v28 = (char *)a3 + 131680;
  *((_DWORD *)a3 + 32941) = 0;
  v29 = *((_QWORD *)v7 + 6);
  __b = 0u;
  v275 = 0u;
  v276 = 0u;
  v277 = 0u;
  v278 = 0u;
  v279 = 0u;
  memset(v280, 0, 28);
  *(_DWORD *)&v280[28] = v29;
  if (v29)
  {
    memset_pattern16(&__b, &unk_21673A810, 4 * v29);
    v272 = 0u;
    memset(v273, 0, 28);
    v270 = 0u;
    v271 = 0u;
    v268 = 0u;
    v269 = 0u;
    v267 = 0u;
    HIDWORD(v273[1]) = v29;
    memset_pattern16(&v267, &unk_21673A810, 4 * v29);
    v265 = 0u;
    memset(v266, 0, 28);
    v263 = 0u;
    v264 = 0u;
    v261 = 0u;
    v262 = 0u;
    v260 = 0u;
    HIDWORD(v266[1]) = v29;
    memset_pattern16(&v260, &unk_21673A810, 4 * v29);
  }
  else
  {
    v272 = 0uLL;
    memset(v273, 0, sizeof(v273));
    v270 = 0uLL;
    v271 = 0uLL;
    v268 = 0uLL;
    v269 = 0uLL;
    v267 = 0uLL;
    v265 = 0uLL;
    memset(v266, 0, sizeof(v266));
    v263 = 0uLL;
    v264 = 0uLL;
    v261 = 0uLL;
    v262 = 0uLL;
    v260 = 0uLL;
  }
  Normals = *((_QWORD *)v7 + 2);
  v31 = v238;
  if (!*(_QWORD *)(Normals + 2760))
    goto LABEL_42;
  Normals = Phase::Geometry::SystemDebugger::GetFromSystem(Normals);
  if (!Normals)
    goto LABEL_42;
  v33 = *(_QWORD **)(Normals + 112);
  Normals += 112;
  v32 = v33;
  if (!v33)
    goto LABEL_42;
  v34 = *(_QWORD *)(v23 + 152);
  v35 = Normals;
  do
  {
    v36 = v32[4];
    v37 = v36 >= v34;
    if (v36 >= v34)
      v38 = v32;
    else
      v38 = v32 + 1;
    if (v37)
      v35 = (uint64_t)v32;
    v32 = (_QWORD *)*v38;
  }
  while (*v38);
  if (v35 != Normals)
  {
    v39 = *(_QWORD *)(v35 + 32);
    v40 = v35 + 40;
    if (v39 <= v34)
      v41 = v40;
    else
      v41 = 0;
    v225 = v41;
  }
  else
  {
LABEL_42:
    v225 = 0;
  }
  v216 = (void **)((char *)v215 + 135984);
  if (!*((_DWORD *)v28 + 20))
  {
LABEL_210:
    v203 = *((_DWORD *)v7 + 8);
    if (v203 == 3)
    {
      Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationFinish(v7, (Phase::Geometry::SystemState **)v214, v215, (Phase::Logger *)v253);
      Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v286, (uint64_t)v253);
      v19 = v253;
    }
    else
    {
      if (v203 != 2)
        goto LABEL_213;
      Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationFinish((float32x2_t *)v7, (Phase::Geometry::SystemState **)v214, v215, (Phase::Logger *)v254);
      Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v286, (uint64_t)v254);
      v19 = v254;
    }
    goto LABEL_14;
  }
  v213 = a4;
  v42 = 0;
  v236 = 0;
  v223 = (char *)v215 + 113248;
  v242 = (char *)v215 + 112;
  v240 = (char *)v215 + 90224;
  v219 = (int **)((char *)v7 + 51936);
  v217 = (unint64_t *)((char *)v215 + 137816);
  v43 = (unint64_t *)((char *)v215 + 136000);
  v234 = (uint64_t **)((char *)v215 + 133712);
  v212 = (Phase::SpatialModeler::Query *)((char *)v215 + 135920);
  v44 = (float *)((char *)v215 + 208);
  v243 = (float *)((char *)v215 + 336);
  v45 = 0.01;
  v235 = v22;
  v226 = v7;
  v227 = v28;
  do
  {
    v244 = v44;
    ++*((_DWORD *)v28 + 100);
    v46 = (uint64_t)&v242[352 * v42];
    v47 = *(_DWORD *)(v46 + 72);
    if (v47 >= 0)
      v48 = &v240[88 * v47];
    else
      v48 = 0;
    v245 = (int *)(v46 + 68);
    v246 = v48;
    ++*(_DWORD *)(v46 + 68);
    v258 = 0;
    v259 = 0.0;
    v49 = *(float *)(v46 + 32);
    v50 = 0.0;
    if (v49 == 3.4028e38)
    {
      v241 = 0;
      v49 = 3.4028e38;
    }
    else
    {
      v51 = *(_QWORD *)(v46 + 40);
      if (*(_DWORD *)(v31 + 112) > v51)
      {
        v52 = *(_QWORD *)(v31 + 96);
        if (*(_DWORD *)(v52 + 24 * v51 + 20) == HIDWORD(v51))
        {
          Normals = *(_QWORD *)(v52 + 24 * *(_QWORD *)(v46 + 40));
          if (Normals)
          {
            v241 = *(int **)(v52 + 24 * *(_QWORD *)(v46 + 40));
            Normals = Phase::Geometry::GetNormals((int *)Normals, (unsigned int *)(v46 + 36), 1, (uint64_t)&v258, 1, 1);
            v26.i32[0] = HIDWORD(v258);
            LODWORD(v53) = v258;
            v50 = v259;
            v49 = *(float *)(v46 + 32);
            goto LABEL_56;
          }
        }
      }
      v241 = 0;
    }
    v26.i32[0] = 0;
    v53 = 0.0;
LABEL_56:
    v54 = sqrtf((float)(v50 * v50) + (float)((float)(v26.f32[0] * v26.f32[0]) + (float)(v53 * v53)));
    v55 = v49 != 3.4028e38;
    if (v54 >= v45)
      v55 = 0;
    if (v49 < 0.000001 || v55)
    {
      v108 = v244;
      if (v54 < v45)
      {
        v109 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)Normals) + 1184);
        if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
        {
          buf[0].i32[0] = 136315394;
          *(uint64_t *)((char *)buf[0].i64 + 4) = (uint64_t)"RoomSimulationImpl.cpp";
          buf[0].i16[6] = 1024;
          *(__int32 *)((char *)&buf[0].i32[3] + 2) = 503;
          _os_log_impl(&dword_2164CC000, v109, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid normal vector == (0,0,0).\n", (uint8_t *)buf, 0x12u);
        }
        v49 = *(float *)(v46 + 32);
        v108 = v244;
        if (v49 == 3.4028e38)
        {
          ++*((_DWORD *)v28 + 104);
          v49 = 3.4028e38;
        }
        else
        {
          ++*((_DWORD *)v28 + 103);
        }
      }
      if (v49 < 0.000001)
      {
        if (*v245 < 1)
          ++*((_DWORD *)v28 + 106);
        else
          ++*((_DWORD *)v28 + 105);
      }
      *((float *)v28 + 95) = *((float *)v28 + 95) + 1.0;
      Phase::SpatialModeler::RayTracerState::NextRay((unsigned int *)v22, v46);
      goto LABEL_200;
    }
    v56 = *(float *)(v46 + 16);
    v57 = *(float *)(v46 + 20);
    v233 = (int *)(v46 + 16);
    v58 = *(float *)(v46 + 24);
    if (v49 != 3.4028e38
      && (float)((float)((float)(v53 * v56) + (float)(v26.f32[0] * v57)) + (float)(v50 * v58)) > -0.000001)
    {
      ++*((_DWORD *)v28 + 101);
    }
    if (v54 > 1.1755e-38)
    {
      v53 = v53 / v54;
      v26.f32[0] = v26.f32[0] / v54;
      v258 = __PAIR64__(v26.u32[0], LODWORD(v53));
      v50 = v50 / v54;
      v259 = v50;
    }
    v59 = (float)(v49 * v56) + *(float *)v46;
    v60 = (float)(v49 * v57) + *(float *)(v46 + 4);
    v61 = (float)(v49 * v58) + *(float *)(v46 + 8);
    v256.f32[0] = v59;
    v256.f32[1] = v60;
    v257 = v61;
    v62 = *v245;
    if (*v245 <= 2)
    {
      v63 = (uint64_t)&v223[72 * v42 + 24 * v62];
      *(float *)v63 = v59;
      *(float *)(v63 + 4) = v60;
      *(float *)(v63 + 8) = v61;
      *(float *)(v63 + 12) = v53;
      *(_DWORD *)(v63 + 16) = v26.i32[0];
      *(float *)(v63 + 20) = v50;
    }
    v224 = (_DWORD *)(v46 + 72);
    v239 = v42;
    if (v62 >= 1)
    {
      v64 = *(_QWORD *)v28;
      if (*((_QWORD *)v28 + 1) != *(_QWORD *)v28)
      {
        v65 = 0;
        v66 = &v242[352 * v42];
        v231 = (float *)(v66 + 80);
        v232 = (float *)(v66 + 56);
        v229 = (float *)(v66 + 64);
        v230 = (float *)(v66 + 60);
        v228 = v66 + 76;
        v221 = (uint64_t)&v223[72 * v42];
        v222 = (unsigned int *)(v66 + 348);
        do
        {
          if (v47 < 0 || v65 != *((_DWORD *)v246 + 15))
          {
            v67 = v64 + 56 * v65;
            v69 = *(_QWORD *)(v67 + 24);
            v68 = (float32x4_t *)(v67 + 24);
            v26.i64[0] = v69;
            v70 = v26;
            v70.i32[2] = v68->i32[2];
            v71 = vsubq_f32(*(float32x4_t *)v46, v70);
            v72 = vmulq_f32(v71, v71);
            v73 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), vaddq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1))).f32[0]);
            if (v73 < v49)
            {
              v26.i32[2] = v68->i32[2];
              v27.i64[0] = *(_QWORD *)(v46 + 16);
              v27.i32[2] = *(_DWORD *)(v46 + 24);
              v74 = vsubq_f32(v26, *(float32x4_t *)v46);
              v75 = vmulq_f32(v74, v27);
              v27 = vaddq_f32(v75, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.f32, 1));
              v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 2), v27);
              if (v26.f32[0] >= 0.0)
              {
                v76 = vmulq_f32(v74, v74);
                if ((float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1))).f32[0]- (float)(v26.f32[0] * v26.f32[0])) <= *(float *)(*(_QWORD *)(*((_QWORD *)v28 + 3) + 8 * v65)+ 32))
                {
                  v77 = *((_QWORD *)v7 + 6);
                  if (v77)
                  {
                    v78 = *v231;
                    p_b = &__b;
                    v80 = v244;
                    do
                    {
                      v81 = *v80++;
                      p_b->f32[0] = v81 / v78;
                      p_b = (float32x4_t *)((char *)p_b + 4);
                      --v77;
                    }
                    while (v77);
                  }
                  v82 = *((float *)v22 + 116);
                  v83 = *v232 + (float)(v73 / v82);
                  v291 = v278;
                  v292 = v279;
                  *(_OWORD *)&v293[16] = *(_OWORD *)&v280[16];
                  *(_OWORD *)v293 = *(_OWORD *)v280;
                  buf[0] = __b;
                  buf[1] = v275;
                  v289 = v276;
                  v290 = v277;
                  v84 = *((_DWORD *)v22 + 115);
                  v85 = *(_DWORD *)&v280[28];
                  if (v84 < *(_DWORD *)&v280[28])
                    v85 = v84;
                  if (v85)
                  {
                    v86 = 0;
                    v87 = v82 * v83;
                    do
                    {
                      buf[0].f32[v86] = buf[0].f32[v86] * expf(-(float)(*((float *)v215 + v86 + 28272) * v87));
                      ++v86;
                      if (v84 >= *(_DWORD *)&v293[28])
                        v88 = *(unsigned int *)&v293[28];
                      else
                        v88 = v84;
                    }
                    while (v86 < v88);
                  }
                  v278 = v291;
                  v279 = v292;
                  *(_OWORD *)v280 = *(_OWORD *)v293;
                  *(_OWORD *)&v280[16] = *(_OWORD *)&v293[16];
                  __b = buf[0];
                  v275 = buf[1];
                  v276 = v289;
                  v277 = v290;
                  v22 = v235;
                  if (v235[180])
                  {
                    v89 = *v219;
                    buf[0] = *(float32x4_t *)(v64 + 56 * v65 + 8);
                    buf[1] = *v68;
                    Phase::SpatialModeler::ApplyDirectivitySubbandGains((Phase::Logger *)&__b, v89, (float32x2_t *)buf, (float32x2_t *)v46);
                    v28 = v227;
                    v43 = (unint64_t *)((char *)v215 + 136000);
                    v7 = v226;
                  }
                  else
                  {
                    v90 = *(_QWORD *)(v64 + 56 * v65 + 40);
                    v7 = v226;
                    v28 = v227;
                    v43 = (unint64_t *)((char *)v215 + 136000);
                    if (v90)
                    {
                      v255[0] = *(_OWORD *)(v64 + 56 * v65 + 8);
                      v255[1] = *v68;
                      Phase::SpatialModeler::applySourceDirectivity(&__b, v238, (float32x2_t *)v255, v90, (float32x2_t *)v46, (Phase::Logger *)buf);
                      v278 = v291;
                      v279 = v292;
                      *(_OWORD *)v280 = *(_OWORD *)v293;
                      *(_OWORD *)&v280[16] = *(_OWORD *)&v293[16];
                      __b = buf[0];
                      v275 = buf[1];
                      v276 = v289;
                      v277 = v290;
                    }
                  }
                  if (v235[133])
                  {
                    v91 = *((_QWORD *)v215 + 16940);
                    if (v91)
                    {
                      Phase::SpatialModeler::applyListenerDirectivity(&__b, v238, (float *)v220, v91, (Phase::Logger *)buf, *v230, *v229);
                      v278 = v291;
                      v279 = v292;
                      *(_OWORD *)v280 = *(_OWORD *)v293;
                      *(_OWORD *)&v280[16] = *(_OWORD *)&v293[16];
                      __b = buf[0];
                      v275 = buf[1];
                      v276 = v289;
                      v277 = v290;
                    }
                  }
                  if (*((_QWORD *)v235 + 10) < (unint64_t)*v245 || *v228)
                  {
                    Phase::SpatialModeler::DirectivityHistogram::addEnergySphere(*(_QWORD *)(*((_QWORD *)v28 + 3) + 8 * v65), (uint64_t)&__b, v83, *v230, *v229);
                  }
                  else
                  {
                    v92 = *v222;
                    memset(buf, 0, sizeof(buf));
                    v289 = 0u;
                    v290 = 0u;
                    v291 = 0u;
                    v292 = 0u;
                    memset(v293, 0, 28);
                    *(_DWORD *)&v293[28] = v92;
                    if ((_DWORD)v92)
                    {
                      v93 = *v231;
                      v94 = buf;
                      v95 = v243;
                      do
                      {
                        v96 = *v95++;
                        v94->f32[0] = v93 * v96;
                        v94 = (float32x4_t *)((char *)v94 + 4);
                        --v92;
                      }
                      while (v92);
                    }
                    Phase::Subbands<float>::operator*=(&__b, buf);
                    v97 = *(Phase::SpatialModeler::EarlyReflectionDetector **)(*((_QWORD *)v28 + 6) + 8 * v65);
                    *(_QWORD *)&v255[0] = v68->i64[0];
                    DWORD2(v255[0]) = v68->i32[2];
                    Phase::SpatialModeler::AudibleEarlyReflection::AudibleEarlyReflection((int *)buf, v46, __b.f32, v221, (int *)v255, v233, (int *)(v220 + 64), v83);
                    Phase::SpatialModeler::EarlyReflectionDetector::AddToScoreBoard(v97, (const Phase::SpatialModeler::AudibleEarlyReflection *)buf);
                  }
                  v236 = 1;
                }
              }
            }
          }
          ++v65;
          v64 = *(_QWORD *)v28;
        }
        while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v28 + 1) - *(_QWORD *)v28) >> 3) > v65);
      }
    }
    if (*(float *)(v46 + 32) == 3.4028e38)
    {
      ++*((_DWORD *)v28 + 107);
      *((float *)v28 + 95) = *((float *)v28 + 95) + 1.0;
      Phase::SpatialModeler::RayTracerState::NextRay((unsigned int *)v22, v46);
      v31 = v238;
      v42 = v239;
      v108 = v244;
      goto LABEL_200;
    }
    v31 = v238;
    v42 = v239;
    if (v225 && *(_QWORD *)(v225 + 40))
    {
      v98 = *(float *)(v220 + 68);
      v99 = v98 + -0.5;
      v100 = v98 + 0.5;
      if (v60 > v99 && v60 < v100)
      {
        v102 = *((_QWORD *)v215 + 16999);
        v103 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v102 - (_QWORD)*v216) >> 2);
        if (v103 <= 0x3E7)
        {
          v247 = v45;
          v104 = (float)*v245;
          v105 = *(_DWORD *)(v46 + 4);
          v106 = *(_DWORD *)(v46 + 8);
          if (v102 >= *v43)
          {
            v237 = *(_DWORD *)v46;
            if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v43 - (_QWORD)*v216) >> 2) <= v103 + 1)
              v110 = v103 + 1;
            else
              v110 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v43 - (_QWORD)*v216) >> 2);
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v43 - (_QWORD)*v216) >> 2)) >= 0x492492492492492)
              v111 = 0x924924924924924;
            else
              v111 = v110;
            v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugIntersection>>((uint64_t)v43, v111);
            v114 = &v112[28 * v103];
            *(_DWORD *)v114 = v237;
            *((_DWORD *)v114 + 1) = v105;
            *((_DWORD *)v114 + 2) = v106;
            *((float *)v114 + 3) = v59;
            *((float *)v114 + 4) = v60;
            *((float *)v114 + 5) = v61;
            *((float *)v114 + 6) = v104;
            v116 = (char *)*v216;
            v115 = (char *)*((_QWORD *)v215 + 16999);
            v117 = v114;
            if (v115 == *v216)
            {
              v119 = (char **)((char *)v215 + 135984);
              v45 = v247;
            }
            else
            {
              v45 = v247;
              do
              {
                v118 = *(_OWORD *)(v115 - 28);
                *((_OWORD *)v117 - 1) = *((_OWORD *)v115 - 1);
                *(_OWORD *)(v117 - 28) = v118;
                v117 -= 28;
                v115 -= 28;
              }
              while (v115 != v116);
              v119 = (char **)((char *)v215 + 135984);
              v115 = (char *)*v216;
            }
            v107 = v114 + 28;
            *v119 = v117;
            v119[1] = v114 + 28;
            v119[2] = &v112[28 * v113];
            if (v115)
              operator delete(v115);
          }
          else
          {
            *(_DWORD *)v102 = *(_DWORD *)v46;
            *(_DWORD *)(v102 + 4) = v105;
            *(_DWORD *)(v102 + 8) = v106;
            *(float *)(v102 + 12) = v59;
            *(float *)(v102 + 16) = v60;
            *(float *)(v102 + 20) = v61;
            v107 = (char *)(v102 + 28);
            *(float *)(v102 + 24) = v104;
            v45 = v247;
          }
          *((_QWORD *)v215 + 16999) = v107;
        }
      }
    }
    buf[0].i64[0] = 0;
    Phase::Geometry::GetMaterials(v241, (unsigned int *)(v46 + 36), 1, buf, 1, 1);
    if (buf[0].i64[0]
      && *(_DWORD *)(v238 + 88) > buf[0].i32[0]
      && (v120 = *(_QWORD *)(v238 + 72), *(_DWORD *)(v120 + 24 * buf[0].u32[0] + 20) == buf[0].i32[1])
      && (v121 = *(_QWORD *)(v120 + 24 * buf[0].u32[0])) != 0
      && *(_DWORD *)v121 == 1
      && (v122 = *(float32x2_t *)(*(_QWORD *)(v121 + 40) + 40 * *((_QWORD *)v22 + 59)), *(_QWORD *)&v122))
    {
      v123 = *(_OWORD *)(*(_QWORD *)&v122 + 496);
      v271 = *(_OWORD *)(*(_QWORD *)&v122 + 480);
      v272 = v123;
      v124 = *(_OWORD *)(*(_QWORD *)&v122 + 528);
      v273[0] = *(_OWORD *)(*(_QWORD *)&v122 + 512);
      v273[1] = v124;
      v125 = *(_OWORD *)(*(_QWORD *)&v122 + 432);
      v267 = *(float32x4_t *)(*(_QWORD *)&v122 + 416);
      v268 = v125;
      v126 = *(_OWORD *)(*(_QWORD *)&v122 + 464);
      v269 = *(_OWORD *)(*(_QWORD *)&v122 + 448);
      v270 = v126;
      v127 = *(_OWORD *)(*(_QWORD *)&v122 + 672);
      v128 = *(_OWORD *)(*(_QWORD *)&v122 + 688);
      v129 = *(_OWORD *)(*(_QWORD *)&v122 + 720);
      v262 = *(_OWORD *)(*(_QWORD *)&v122 + 704);
      v263 = v129;
      v260 = v127;
      v261 = v128;
      v130 = *(_OWORD *)(*(_QWORD *)&v122 + 736);
      v131 = *(_OWORD *)(*(_QWORD *)&v122 + 752);
      v132 = *(_OWORD *)(*(_QWORD *)&v122 + 784);
      v266[0] = *(_OWORD *)(*(_QWORD *)&v122 + 768);
      v266[1] = v132;
      v264 = v130;
      v265 = v131;
    }
    else
    {
      v133 = *((_QWORD *)v7 + 6);
      if (v133)
      {
        v134 = *((_DWORD *)v22 + 14);
        v135 = &v267;
        v136 = *((_QWORD *)v7 + 6);
        do
        {
          v135->i32[0] = v134;
          v135 = (float32x4_t *)((char *)v135 + 4);
          --v136;
        }
        while (v136);
        HIDWORD(v273[1]) = v133;
        v137 = *((_DWORD *)v22 + 15);
        v138 = &v260;
        v139 = v133;
        do
        {
          *(_DWORD *)v138 = v137;
          v138 = (__int128 *)((char *)v138 + 4);
          --v139;
        }
        while (v139);
      }
      else
      {
        HIDWORD(v273[1]) = 0;
      }
      v122 = 0;
      HIDWORD(v266[1]) = v133;
    }
    if (!*(_DWORD *)(v238 + 168))
    {
      v140 = *((_QWORD *)v7 + 6);
LABEL_162:
      if (!v140)
        goto LABEL_165;
LABEL_163:
      v146 = *((float *)v22 + 34);
      v147 = *((float *)v22 + 35);
      v148 = &v267;
      do
      {
        v148->f32[0] = fminf(fmaxf(v148->f32[0], v146), v147);
        v148 = (float32x4_t *)((char *)v148 + 4);
        --v140;
      }
      while (v140);
      goto LABEL_165;
    }
    v140 = *((_QWORD *)v7 + 6);
    if (*(_BYTE *)(v238 + 932))
      goto LABEL_162;
    v141 = (float *)*((_QWORD *)v215 + 16710);
    if (v140 > (uint64_t)(*((_QWORD *)v215 + 16711) - (_QWORD)v141) >> 2)
      goto LABEL_163;
    if (v140)
    {
      v142 = *((float *)v22 + 34);
      v143 = *((float *)v22 + 35);
      v144 = &v267;
      do
      {
        v145 = *v141++;
        v144->f32[0] = fminf(fmaxf(v145 * v144->f32[0], v142), v143);
        v144 = (float32x4_t *)((char *)v144 + 4);
        --v140;
      }
      while (v140);
    }
LABEL_165:
    i = (uint64_t **)((char *)v215 + 133712);
    v150 = *v234;
    v151 = *(_QWORD *)(v46 + 40);
    v152 = (uint64_t **)((char *)v215 + 133712);
    if (*v234)
    {
      v153 = (uint64_t **)((char *)v215 + 133712);
      v154 = *v234;
      do
      {
        v155 = v154[4];
        v156 = v155 >= v151;
        if (v155 >= v151)
          v157 = (uint64_t **)v154;
        else
          v157 = (uint64_t **)(v154 + 1);
        if (v156)
          v153 = (uint64_t **)v154;
        v154 = *v157;
      }
      while (*v157);
      if (v153 != v234 && v151 >= (unint64_t)v153[4])
        goto LABEL_184;
      for (i = (uint64_t **)((char *)v215 + 133712); ; v150 = *i)
      {
        v152 = i;
        if (!v150)
          break;
        while (1)
        {
          i = (uint64_t **)v150;
          v158 = v150[4];
          if (v158 > v151)
            break;
          if (v158 >= v151)
            goto LABEL_184;
          v150 = i[1];
          if (!v150)
          {
            v152 = i + 1;
            goto LABEL_183;
          }
        }
      }
    }
LABEL_183:
    v159 = operator new(0x30uLL);
    v159[4] = v151;
    *((_DWORD *)v159 + 10) = 1065353216;
    std::__tree<Phase::SpatialCategory>::__insert_node_at((uint64_t **)v215 + 16713, (uint64_t)i, v152, v159);
LABEL_184:
    if (*v245 <= 0)
    {
      *((float *)v28 + 23) = v49 + *((float *)v28 + 23);
      Phase::Subbands<float>::operator+=((float32x4_t *)v215 + 8237, &v267);
      ++*((_DWORD *)v28 + 92);
    }
    else
    {
      *((float *)v28 + 24) = v49 + *((float *)v28 + 24);
      Phase::Subbands<float>::operator+=((float32x4_t *)v215 + 8245, &v267);
      ++*((_DWORD *)v28 + 93);
    }
    v22 = v235;
    v108 = v244;
    ++*((_DWORD *)v28 + 94);
    if ((v218 & 1) != 0)
      goto LABEL_199;
    *(float *)&v242[352 * v239 + 80] = (float)(1.0 - Phase::SpatialModeler::getMeanAbsorptionCoefficient(v267.f32))
                                     * *(float *)&v242[352 * v239 + 80];
    v160 = *((_QWORD *)v7 + 6);
    if (v160)
    {
      for (j = 0; j != v160; ++j)
      {
        v244[j] = v244[j] * (float)(1.0 - v267.f32[j]);
        v243[j] = v243[j] * (float)(1.0 - *((float *)&v260 + j));
      }
    }
    v163 = *((float *)v215 + 34460);
    v162 = *((float *)v215 + 34461);
    v164 = *((_QWORD *)v215 + 17228);
    v165 = (v164 >> 26) ^ ((*v217 ^ (*v217 << 23)) >> 17) ^ v164 ^ *v217 ^ (*v217 << 23);
    *v217 = v164;
    *((_QWORD *)v215 + 17228) = v165;
    if (HIDWORD(v273[1]))
    {
      v166 = 0.0;
      v167 = &v267;
      v168 = HIDWORD(v273[1]);
      do
      {
        v169 = v167->f32[0];
        v167 = (float32x4_t *)((char *)v167 + 4);
        v166 = v166 + v169;
        --v168;
      }
      while (v168);
    }
    else
    {
      v166 = 0.0;
    }
    v170 = v162 - v163;
    if ((float)(v166 / (float)HIDWORD(v273[1])) > (float)(v163
                                                         + (float)((float)(v162 - v163)
                                                                 * (float)((float)(v165 + v164) * 5.421e-20)))
      || (v171 = &v242[352 * v239],
          v172 = *((float *)v171 + 14) + (float)(v49 / *((float *)v235 + 116)),
          *((float *)v171 + 14) = v172,
          v172 > *((float *)v235 + 28)))
    {
      Phase::SpatialModeler::RayTracerState::NextRay((unsigned int *)v235, v46);
LABEL_199:
      v236 = 1;
      goto LABEL_200;
    }
    v173 = fminf(*(float *)(v46 + 32), v45);
    v174 = v257 - (float)(v173 * *(float *)(v46 + 24));
    *(float32x2_t *)v46 = vsub_f32(v256, vmul_n_f32(*(float32x2_t *)(v46 + 16), v173));
    *(float *)(v46 + 8) = v174;
    v175 = ((v164 ^ (v164 << 23)) >> 17) ^ (v165 >> 26) ^ v164 ^ (v164 << 23) ^ v165;
    *v217 = v165;
    *((_QWORD *)v215 + 17228) = v175;
    if (Phase::SpatialModeler::getMeanScatteringCoefficient((float *)&v260) <= (float)(v163
                                                                                      + (float)(v170
                                                                                              * (float)((float)(v175 + v165) * 5.421e-20))))
    {
      v195 = *(float *)(v46 + 16);
      v196 = *(float *)(v46 + 20);
      v197 = *(float *)(v46 + 24);
      v198 = (float)((float)(*(float *)&v258 * v195) + (float)(*((float *)&v258 + 1) * v196)) + (float)(v259 * v197);
      v199 = v198 + v198;
      v200 = *((float *)&v258 + 1) * v199;
      v201 = v195 - (float)(*(float *)&v258 * v199);
      v202 = v197 - (float)(v259 * v199);
      *(float *)(v46 + 16) = v201;
      *(float *)(v46 + 20) = v196 - v200;
      *(float *)(v46 + 24) = v202;
      *v224 = -1;
      v42 = v239;
    }
    else
    {
      v176 = *((float *)v215 + 34460);
      v177 = *((float *)v215 + 34461) - v176;
      v178 = *((_QWORD *)v215 + 17228);
      v179 = (v178 >> 26) ^ ((*v217 ^ (*v217 << 23)) >> 17) ^ v178 ^ *v217 ^ (*v217 << 23);
      v180 = v176 + (float)(v177 * (float)((float)(v179 + v178) * 5.421e-20));
      v181 = ((v178 ^ (v178 << 23)) >> 17) ^ (v179 >> 26) ^ v178 ^ (v178 << 23) ^ v179;
      *v217 = v179;
      *((_QWORD *)v215 + 17228) = v181;
      Phase::SpatialModeler::scatterVectorOnPlane((float *)v233, (float *)&v258, v180, v176 + (float)(v177 * (float)((float)(v181 + v179) * 5.421e-20)));
      v182 = *((_DWORD *)v28 + 21);
      *((_DWORD *)v28 + 21) = v182 + 1;
      *v224 = v182;
      v42 = v239;
      v242[352 * v239 + 76] = 1;
      if ((v182 & 0x80000000) == 0)
      {
        v183 = (float32x2_t *)&v240[88 * v182];
        v248 = sqrtf(*((float *)v215 + 33982));
        Phase::SpatialModeler::ImportanceSampling::computeProbabilityDistribution((uint64_t)v212, (uint64_t)&v256, (uint64_t)&v258, v28, (float *)&v183[8]);
        v185 = *((float *)v215 + 34460);
        v184 = *((float *)v215 + 34461);
        v186 = *((_QWORD *)v215 + 17228);
        v187 = (v186 >> 26) ^ ((*v217 ^ (*v217 << 23)) >> 17) ^ v186 ^ *v217 ^ (*v217 << 23);
        *v217 = v186;
        *((_QWORD *)v215 + 17228) = v187;
        Normals = Phase::SpatialModeler::ImportanceSampling::pickRandomSource(v212, v185 + (float)((float)(v184 - v185) * (float)((float)(v187 + v186) * 5.421e-20)));
        v188 = *(_QWORD *)v28 + 56 * Normals;
        v189 = *(float *)(v188 + 32);
        v26.f32[0] = *(float *)(v46 + 8) - v189;
        v183[7].i32[0] = v239;
        v183[7].i32[1] = Normals;
        v27.i64[0] = *(_QWORD *)(v188 + 24);
        v190 = vsub_f32(*(float32x2_t *)v46, *(float32x2_t *)v27.f32);
        *(float *)v191.i32 = sqrtf(vaddv_f32(vmul_f32(v190, v190)) + (float)(v26.f32[0] * v26.f32[0]));
        v192 = vdiv_f32(v190, (float32x2_t)vdup_lane_s32(v191, 0));
        v26.f32[0] = v26.f32[0] / *(float *)v191.i32;
        *v183 = vadd_f32(*(float32x2_t *)v27.f32, vmul_n_f32(v192, v248));
        v183[1].f32[0] = v189 + (float)(v248 * v26.f32[0]);
        v183[2] = v192;
        v183[1].i32[1] = 0;
        v193 = 0.05;
        if ((float)(*(float *)v191.i32 - v248) >= 0.05)
          v193 = *(float *)v191.i32 - v248;
        v183[3].i32[0] = v26.i32[0];
        v183[3].f32[1] = v193;
        v194 = buf[0].i64[0];
        v183[9] = v122;
        v183[10] = (float32x2_t)v194;
      }
    }
    v236 = 1;
    v108 = v244;
LABEL_200:
    ++v42;
    v44 = v108 + 88;
    v243 += 88;
  }
  while (v42 < *((unsigned int *)v28 + 20));
  a4 = v213;
  if ((v236 & 1) == 0)
    goto LABEL_210;
LABEL_213:
  if (!(*(unsigned int (**)(_QWORD, char *))(**(_QWORD **)(*(_QWORD *)v22 + 51952) + 16))(*(_QWORD *)(*(_QWORD *)v22 + 51952), v22))
  {
    if (*((_DWORD *)v28 + 21) >= *((_DWORD *)v22 + 38))
    {
      v207 = (__int32 *)((char *)v7 + 64);
      v205 = (int32x2_t *)v215;
      v208 = (char *)v215 + 90224;
      v209.i32[1] = 88;
      v209.i32[0] = *((_DWORD *)v28 + 21);
      v210 = Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleDiffuseRain;
    }
    else
    {
      v206 = *((_DWORD *)v22 + 16);
      *((_DWORD *)v28 + 20) = v206;
      v207 = (__int32 *)((char *)v7 + 60);
      v205 = (int32x2_t *)v215;
      v208 = (char *)v215 + 112;
      v209 = vdup_n_s32(0x160u);
      v209.i32[0] = v206;
      v210 = (void (*)(int **@<X0>, Phase::SpatialModeler::RoomSimulation *@<X1>, Phase::SpatialModeler::Query *@<X2>, Phase::Logger *@<X8>))Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections;
    }
    v205[8].i32[0] = *v207;
    v205[11] = (int32x2_t)v208;
    v205[12] = v209;
    *((_QWORD *)v215 + 17226) = v210;
    goto LABEL_222;
  }
  v204 = *((_DWORD *)v7 + 8);
  if (v204 == 3)
  {
    Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationFinish(v7, (Phase::Geometry::SystemState **)v214, v215, (Phase::Logger *)v251);
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v286, (uint64_t)v251);
    v19 = v251;
LABEL_14:
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v19);
    goto LABEL_15;
  }
  v205 = (int32x2_t *)v215;
  if (v204 == 2)
  {
    Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationFinish((float32x2_t *)v7, (Phase::Geometry::SystemState **)v214, v215, (Phase::Logger *)v252);
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v286, (uint64_t)v252);
    v19 = v252;
    goto LABEL_14;
  }
LABEL_222:
  v211 = operator new(8uLL);
  *v211 = v205;
  memset(buf, 0, 24);
  std::vector<Phase::Geometry::SceneQueryBatch *>::__init_with_size[abi:ne180100]<Phase::Geometry::SceneQueryBatch **,Phase::Geometry::SceneQueryBatch **>(buf, v211, (uint64_t)(v211 + 1), 1uLL);
  operator delete(v211);
  memset(v249, 0, sizeof(v249));
  std::vector<Phase::Geometry::SceneQueryBatch *>::__init_with_size[abi:ne180100]<Phase::Geometry::SceneQueryBatch **,Phase::Geometry::SceneQueryBatch **>(v249, (const void *)buf[0].i64[0], buf[0].i64[1], (buf[0].i64[1] - buf[0].i64[0]) >> 3);
  v250 = 3;
  Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v286, (uint64_t)v249);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v249);
  if (buf[0].i64[0])
  {
    buf[0].i64[1] = buf[0].i64[0];
    operator delete((void *)buf[0].i64[0]);
  }
LABEL_15:
  v20 = v282;
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v20);
}

void sub_2166AE2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a59);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x3F8]);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationFinishCommonPreProcess@<X0>(Phase::SpatialModeler::RoomSimulationImpl *this@<X0>, Phase::Geometry::SystemState **a2@<X1>, std::chrono::steady_clock::time_point *a3@<X2>, uint64_t a4@<X8>)
{
  std::chrono::steady_clock::time_point *v9;
  Phase::SpatialModeler::RayTracerState *v10;
  Phase::Throttle *v11;
  _DWORD v13[8];

  Phase::SpatialModeler::RoomSimulationImpl::CheckClusterQueryInput((uint64_t)this, (Phase::SpatialModeler::RoomSimulation *)a2, (uint64_t)v13);
  if (v13[6] == 2)
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor(a4, (uint64_t)v13);
  }
  else
  {
    v9 = a3 + 16463;
    a3[16509].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    Phase::SpatialModeler::RayTracerState::Results::CapERDetections((Phase::SpatialModeler::RayTracerState::Results *)&a3[16514]);
    Phase::SpatialModeler::RayTracerState::State::ScaleHistograms((Phase::SpatialModeler::RayTracerState::State *)&a3[14156], (float)LODWORD(a3[14102].__d_.__rep_));
    v10 = (Phase::SpatialModeler::RayTracerState *)&a3[14094];
    v9[1].__d_.__rep_ = v9->__d_.__rep_;
    v9[4].__d_.__rep_ = v9[3].__d_.__rep_;
    Phase::SpatialModeler::RayTracerState::CalculateRoomStats(v10, a2[8]);
    Phase::SpatialModeler::RoomSimulationLogging::logWhenExceedingTimeLimit(v10, (Phase::SpatialModeler::RoomSimulationImpl *)((char *)this + 51968), v11);
    *(_DWORD *)(a4 + 24) = 1;
  }
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
}

void sub_2166AE484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *Phase::SpatialModeler::RayTracerState::Results::CapERDetections(Phase::SpatialModeler::RayTracerState::Results *this)
{
  _QWORD *result;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  float *i;
  float v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v3 = *(_QWORD **)this;
  result = (_QWORD *)((char *)this + 8);
  v2 = v3;
  if (v3 != result)
  {
    do
    {
      v4 = v2[5];
      if (v4)
      {
        for (i = *(float **)(v4 + 16); i; i = *(float **)i)
        {
          v6 = i[44];
          if (v6 > 10.0)
            v6 = 10.0;
          i[44] = v6;
        }
      }
      v7 = (_QWORD *)v2[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v2[2];
          v9 = *v8 == (_QWORD)v2;
          v2 = v8;
        }
        while (!v9);
      }
      v2 = v8;
    }
    while (v8 != result);
  }
  return result;
}

void Phase::SpatialModeler::RayTracerState::State::ScaleHistograms(Phase::SpatialModeler::RayTracerState::State *this, float a2)
{
  int *v3;
  unsigned int v4;
  unsigned int v5;
  float v6;
  NSObject *v7;
  int v8;
  _QWORD **v9;
  _QWORD **i;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  unsigned int v18;
  __int16 v19;
  double v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = (int *)((char *)this + 18520);
  v4 = *((_DWORD *)this + 4630);
  v5 = (float)((float)v4 - a2);
  v6 = (float)v5 / (float)v4;
  if (v6 < 0.7)
  {
    v7 = **(NSObject ***)(Phase::Logger::GetInstancePtr(this) + 1184);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8 = *v3;
      v11 = 136316162;
      v12 = "RayTracerState.hpp";
      v13 = 1024;
      v14 = 205;
      v15 = 1024;
      v16 = v8;
      v17 = 1024;
      v18 = v5;
      v19 = 2048;
      v20 = (float)(v6 * 100.0);
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Launched %u rays but only finished %u (%.0f%%)", (uint8_t *)&v11, 0x28u);
    }
  }
  v9 = (_QWORD **)*((_QWORD *)this + 2307);
  for (i = (_QWORD **)*((_QWORD *)this + 2308); v9 != i; ++v9)
    Phase::SpatialModeler::DirectivityHistogram::operator*=(*v9, 1.0 / (float)((float)(*((float *)*v9 + 8) * (float)((v4 + v5) >> 1)) * 0.25));
}

double Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationFinishHandleMatchReverbTimes(Phase::SpatialModeler::RoomSimulationImpl *this, Phase::SpatialModeler::RayTracerState *a2, Phase::SpatialModeler::RayTracerState *a3, Phase::SpatialModeler::RayTracerState *a4)
{
  float *v6;
  double result;

  if (!*((_BYTE *)a3 + 25041))
  {
    v6 = (float *)((char *)a3 + 19508);
    if ((_DWORD)this)
    {
      Phase::SpatialModeler::RayTracerState::UpdateLocalRT60Estimate(a2);
      Phase::SpatialModeler::calculateAbsorptionCorrectionToMatchReverbTime((_BOOL8)a2 + 19776, (uint64_t)a3 + 21040, (uint64_t)a3 + 336, (uint64_t)a3 + 20928, v6[1], *v6, *((float *)a3 + 116), *((float *)a3 + 6), *((float *)a3 + 7));
    }
    else
    {
      *((_QWORD *)a2 + 2617) = *((_QWORD *)a2 + 2616);
      *((_QWORD *)a3 + 2617) = *((_QWORD *)a3 + 2616);
      *((_DWORD *)a2 + 5291) = 0;
      *((_DWORD *)a3 + 5291) = 0;
      *((_QWORD *)a2 + 2679) = 0;
      *((_DWORD *)a2 + 5360) = 0;
      result = 0.0;
      *(_OWORD *)((char *)a2 + 21448) = 0u;
      *((_QWORD *)a3 + 2679) = 0;
      *((_DWORD *)a3 + 5360) = 0;
      *(_OWORD *)((char *)a3 + 21448) = 0u;
    }
  }
  return result;
}

uint64_t Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  Phase::Logger *InstancePtr;
  uint64_t v8;
  os_signpost_id_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  __int16 v15;
  __int16 v16;

  v6 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 32);
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(a1);
  if (v6 == 2)
  {
    if (*((_BYTE *)InstancePtr + 1192))
    {
      v8 = Phase::Logger::GetInstancePtr(InstancePtr);
      v9 = **(_QWORD **)a2;
      if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v10 = **(NSObject ***)(v8 + 1184);
        if (os_signpost_enabled(v10))
        {
          v16 = 0;
          v11 = "Phase_RoomSimulation_EarlyReflectionsnHandleIntersections";
          v12 = (uint8_t *)&v16;
LABEL_10:
          _os_signpost_emit_with_name_impl(&dword_2164CC000, v10, OS_SIGNPOST_INTERVAL_END, v9, v11, (const char *)&unk_21676613F, v12, 2u);
        }
      }
    }
  }
  else if (*((_BYTE *)InstancePtr + 1192))
  {
    v13 = Phase::Logger::GetInstancePtr(InstancePtr);
    v9 = **(_QWORD **)a2;
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = **(NSObject ***)(v13 + 1184);
      if (os_signpost_enabled(v10))
      {
        v15 = 0;
        v11 = "Phase_RoomSimulation_LateReverbHandleIntersections";
        v12 = (uint8_t *)&v15;
        goto LABEL_10;
      }
    }
  }
  return std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, a3);
}

float32_t Phase::Subbands<float>::operator*=(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float *v13;
  float v14;

  v2 = a1[7].u32[3];
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == 10)
    {
      v4 = vmulq_f32(*a1, *a2);
      v11 = vmulq_f32(a1[1], a2[1]);
      v12 = vmulq_f32(a1[2], a2[2]);
      *a1 = v4;
      a1[1] = v11;
      a1[2] = v12;
    }
    else if ((_DWORD)v2 == 31)
    {
      v3 = vmulq_f32(a1[1], a2[1]);
      v4 = vmulq_f32(*a1, *a2);
      v5 = vmulq_f32(a1[3], a2[3]);
      v6 = vmulq_f32(a1[2], a2[2]);
      v7 = vmulq_f32(a1[5], a2[5]);
      v8 = vmulq_f32(a1[4], a2[4]);
      v9 = vmulq_f32(a1[6], a2[6]);
      v10 = vmulq_f32(a1[7], a2[7]);
      v10.i32[3] = HIDWORD(*(_OWORD *)&a1[7]);
      *a1 = v4;
      a1[1] = v3;
      a1[2] = v6;
      a1[3] = v5;
      a1[4] = v8;
      a1[5] = v7;
      a1[6] = v9;
      a1[7] = v10;
    }
    else
    {
      v13 = (float *)a1;
      do
      {
        v14 = a2->f32[0];
        a2 = (float32x4_t *)((char *)a2 + 4);
        v4.f32[0] = v14 * *v13;
        *v13++ = v4.f32[0];
        --v2;
      }
      while (v2);
    }
  }
  return v4.f32[0];
}

void Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleDiffuseRain(int **this@<X0>, Phase::SpatialModeler::RoomSimulation *a2@<X1>, Phase::SpatialModeler::Query *a3@<X2>, Phase::Logger *a4@<X8>)
{
  uint64_t InstancePtr;
  Phase::Logger *v10;
  int v11;
  Phase::Logger *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  int *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  float v29;
  int v30;
  Phase::Logger *v31;
  int v32;
  float *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  int *v41;
  float v42;
  float32x4_t *p_b;
  float v44;
  float *v45;
  float v46;
  float v47;
  char *v48;
  float v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  float v53;
  float v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  _QWORD *v62;
  BOOL v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  const char *v68;
  NSObject *v69;
  uint64_t v70;
  uint32_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  unint64_t v76;
  float v77;
  unint64_t v78;
  float32x4_t v79;
  char *v80;
  int *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  _QWORD *v90;
  _QWORD *v91;
  NSObject *log;
  uint64_t v93;
  float *v94;
  uint64_t *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  int v99;
  char *v100;
  _QWORD v101[3];
  int v102;
  _OWORD v103[2];
  float32x4_t __b;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[32];
  _QWORD v111[3];
  int v112;
  _QWORD v113[3];
  int v114;
  _QWORD v115[3];
  int v116;
  _QWORD v117[2];
  Phase::Logger *v118;
  _BYTE v119[48];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _BYTE buf[28];
  int v126;
  __int128 v127;
  uint64_t v128;
  _DWORD v129[76];
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  InstancePtr = Phase::Logger::GetInstancePtr((Phase::Logger *)this);
  v10 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 208));
  v118 = v10;
  v11 = *((_DWORD *)this + 8);
  v12 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v10);
  if (v11 == 2)
  {
    if (*((_BYTE *)v12 + 1192))
    {
      v13 = Phase::Logger::GetInstancePtr(v12);
      if ((unint64_t)v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v14 = **(NSObject ***)(v13 + 1184);
        if (os_signpost_enabled(v14))
        {
          *(_WORD *)buf = 0;
          v15 = "Phase_RoomSimulation_EarlyReflectionsHandleDiffuseRain";
          v16 = "EarlyReflectionsHandleDiffuseRain";
LABEL_10:
          _os_signpost_emit_with_name_impl(&dword_2164CC000, v14, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v10, v15, v16, buf, 2u);
        }
      }
    }
  }
  else if (*((_BYTE *)v12 + 1192))
  {
    v17 = Phase::Logger::GetInstancePtr(v12);
    if ((unint64_t)v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v14 = **(NSObject ***)(v17 + 1184);
      if (os_signpost_enabled(v14))
      {
        *(_WORD *)buf = 0;
        v15 = "Phase_RoomSimulation_LateReverbHandleDiffuseRain";
        v16 = "LateReverbHandleDiffuseRain";
        goto LABEL_10;
      }
    }
  }
  v117[0] = &v118;
  v117[1] = this;
  v18 = *((_QWORD *)a2 + 8);
  if (!v18)
  {
    v115[0] = 5;
    v115[1] = this + 9;
    v116 = 2;
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleDiffuseRain(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v117, (uint64_t)v115);
    v90 = v115;
    goto LABEL_73;
  }
  v19 = *((_QWORD *)a2 + 11);
  if (!v19 || *(_DWORD *)v19 != 3)
  {
    v113[0] = 3;
    v113[1] = this + 9;
    v114 = 2;
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleDiffuseRain(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v117, (uint64_t)v113);
    v90 = v113;
LABEL_73:
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v90);
    return;
  }
  v20 = *(_QWORD *)(v19 + 152);
  if (*(_DWORD *)(v18 + 136) <= v20
    || (v21 = *(_QWORD *)(v18 + 120), *(_DWORD *)(v21 + 24 * v20 + 20) != HIDWORD(v20))
    || (v22 = *(float **)(v21 + 24 * *(_QWORD *)(v19 + 152))) == 0
    || *(_DWORD *)v22 != 2)
  {
    v111[0] = 7;
    v111[1] = this + 9;
    v112 = 2;
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleDiffuseRain(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v117, (uint64_t)v111);
    v90 = v111;
    goto LABEL_73;
  }
  v94 = v22;
  v23 = this[6];
  v24 = (uint64_t *)((char *)a3 + 131680);
  __b = 0u;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  memset(v110, 0, 28);
  *(_DWORD *)&v110[28] = (_DWORD)v23;
  if (v23)
    memset_pattern16(&__b, &unk_21673A810, 4 * (_QWORD)v23);
  v25 = *((unsigned int *)a3 + 32941);
  if ((_DWORD)v25)
  {
    v26 = 0;
    v100 = (char *)a3 + 90224;
    while (1)
    {
      v27 = &v100[88 * v26];
      v28 = (char *)a3 + 352 * *((int *)v27 + 14) + 112;
      v29 = *(float *)v28;
      v98 = *(_OWORD *)(v28 + 4);
      *(_OWORD *)&buf[4] = v98;
      *(_QWORD *)&buf[20] = *(_QWORD *)(v28 + 20);
      v30 = *((_DWORD *)v28 + 7);
      *(float *)buf = v29;
      v126 = v30;
      v127 = *((_OWORD *)v28 + 2);
      v128 = *((_QWORD *)v28 + 6);
      v31 = (Phase::Logger *)memcpy(v129, v28 + 56, 0x128uLL);
      v34 = *((_DWORD *)v27 + 15);
      v33 = (float *)(v27 + 60);
      v32 = v34;
      if (*(v33 - 7) == 3.4028e38)
      {
        v35 = *v24;
        v36 = *v24 + 56 * v32;
        v38 = *(float *)(v36 + 24);
        v39 = *(float *)(v36 + 28);
        v37 = v36 + 24;
        v40 = sqrtf((float)((float)((float)(v29 - v38) * (float)(v29 - v38))+ (float)((float)(*(float *)&v98 - v39) * (float)(*(float *)&v98 - v39)))+ (float)((float)(*((float *)&v98 + 1) - *(float *)(v37 + 8))* (float)(*((float *)&v98 + 1) - *(float *)(v37 + 8))));
        if (v40 >= 0.000001)
          break;
      }
LABEL_65:
      if (++v26 >= v25)
        goto LABEL_66;
    }
    v96 = (_OWORD *)v37;
    v99 = v32;
    v41 = this[6];
    if (v41)
    {
      v42 = *(float *)&v100[88 * v26 + 64];
      p_b = &__b;
      v44 = *(float *)&v129[6];
      v45 = (float *)&v129[10];
      do
      {
        v46 = *v45++;
        p_b->f32[0] = (float)(v42 * v46) / v44;
        p_b = (float32x4_t *)((char *)p_b + 4);
        v41 = (int *)((char *)v41 - 1);
      }
      while (v41);
    }
    v97 = v35;
    v47 = *(float *)v129;
    v48 = (char *)a3 + 112752;
    v49 = *((float *)a3 + 28304);
    v50 = &v100[88 * v26];
    v52 = *((_QWORD *)v50 + 9);
    v51 = v50 + 72;
    v53 = v49;
    v54 = *(float *)v129;
    if (!v52)
    {
LABEL_48:
      v121 = v108;
      v122 = v109;
      v123 = *(_OWORD *)v110;
      v124 = *(_OWORD *)&v110[16];
      *(float32x4_t *)v119 = __b;
      *(_OWORD *)&v119[16] = v105;
      *(_OWORD *)&v119[32] = v106;
      v120 = v107;
      v74 = *((_DWORD *)v48 + 115);
      v75 = *(_DWORD *)&v110[28];
      if (v74 < *(_DWORD *)&v110[28])
        v75 = *((_DWORD *)v48 + 115);
      if (v75)
      {
        v76 = 0;
        v77 = v40 + (float)(v53 * v54);
        do
        {
          *(float *)&v119[4 * v76] = *(float *)&v119[4 * v76] * expf(-(float)(*((float *)a3 + v76 + 28272) * v77));
          ++v76;
          if (v74 >= HIDWORD(v124))
            v78 = HIDWORD(v124);
          else
            v78 = v74;
        }
        while (v76 < v78);
      }
      v108 = v121;
      v109 = v122;
      *(_OWORD *)v110 = v123;
      *(_OWORD *)&v110[16] = v124;
      __b = *(float32x4_t *)v119;
      v105 = *(_OWORD *)&v119[16];
      v79 = *(float32x4_t *)&v119[32];
      v106 = *(_OWORD *)&v119[32];
      v107 = v120;
      v80 = (char *)a3 + 112752;
      if (*((_BYTE *)a3 + 112932))
      {
        v81 = this[6492];
        *(_OWORD *)v119 = *(_OWORD *)(v97 + 56 * v99 + 8);
        *(_OWORD *)&v119[16] = *v96;
        Phase::SpatialModeler::ApplyDirectivitySubbandGains((Phase::Logger *)&__b, v81, (float32x2_t *)v119, (float32x2_t *)buf);
      }
      else
      {
        v82 = *(_QWORD *)(v97 + 56 * v99 + 40);
        if (!v82)
          goto LABEL_61;
        v103[0] = *(_OWORD *)(v97 + 56 * v99 + 8);
        v103[1] = *v96;
        Phase::SpatialModeler::applySourceDirectivity(&__b, v18, (float32x2_t *)v103, v82, (float32x2_t *)buf, (Phase::Logger *)v119);
        v108 = v121;
        v109 = v122;
        *(_OWORD *)v110 = v123;
        *(_OWORD *)&v110[16] = v124;
        __b = *(float32x4_t *)v119;
        v105 = *(_OWORD *)&v119[16];
        v79 = *(float32x4_t *)&v119[32];
        v106 = *(_OWORD *)&v119[32];
        v107 = v120;
      }
      v80 = (char *)a3 + 112752;
LABEL_61:
      v83 = (char *)a3 + 131680;
      if (v80[133])
      {
        v84 = *((_QWORD *)a3 + 16940);
        if (v84)
        {
          Phase::SpatialModeler::applyListenerDirectivity(&__b, v18, v94, v84, (Phase::Logger *)v119, *(float *)&v129[1], *(float *)&v129[2]);
          v108 = v121;
          v109 = v122;
          *(_OWORD *)v110 = v123;
          *(_OWORD *)&v110[16] = v124;
          __b = *(float32x4_t *)v119;
          v105 = *(_OWORD *)&v119[16];
          v79 = *(float32x4_t *)&v119[32];
          v106 = *(_OWORD *)&v119[32];
          v107 = v120;
          v83 = (char *)a3 + 131680;
        }
      }
      *(float *)v119 = *(float *)(*(_QWORD *)(*((_QWORD *)v83 + 3) + 8 * *(int *)v33) + 32) / *((float *)v83 + 1062);
      v79.f32[0] = *(float *)v119;
      Phase::Subbands<float>::operator*=(&__b, (float *)v119, v79);
      Phase::SpatialModeler::DirectivityHistogram::addEnergySphere(*(_QWORD *)(*((_QWORD *)v83 + 3) + 8 * *(int *)v33), (uint64_t)&__b, v47 + (float)(v40 / v49), *(float *)&v129[1], *(float *)&v129[2]);
      v24 = (uint64_t *)((char *)a3 + 131680);
      v25 = *((unsigned int *)a3 + 32941);
      goto LABEL_65;
    }
    v55 = &v100[88 * v26];
    v56 = *((_QWORD *)v55 + 10);
    v95 = (uint64_t *)(v55 + 80);
    if (v56)
    {
      if (*(_DWORD *)(v18 + 88) <= v56
        || (v57 = *(_QWORD *)(v18 + 72), *(_DWORD *)(v57 + 24 * v56 + 20) != HIDWORD(v56))
        || (v58 = *(_QWORD *)(v57 + 24 * v56)) == 0
        || *(_DWORD *)v58 != 1
        || (v59 = *(_QWORD *)(*(_QWORD *)(v58 + 40) + 40 * *((_QWORD *)a3 + 14153))) == 0)
      {
        v60 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v31) + 1184);
        v31 = (Phase::Logger *)os_log_type_enabled(v60, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v31)
        {
          v61 = *v95;
          *(_DWORD *)v119 = 136315650;
          *(_QWORD *)&v119[4] = "RoomSimulationImpl.cpp";
          *(_WORD *)&v119[12] = 1024;
          *(_DWORD *)&v119[14] = 1116;
          *(_WORD *)&v119[18] = 2048;
          *(_QWORD *)&v119[20] = v61;
          _os_log_impl(&dword_2164CC000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d Trying to retrieve material with handle %llu returned nullptr!", v119, 0x1Cu);
        }
        v59 = 0;
      }
      if (v59 == *v51)
        goto LABEL_47;
      v93 = v59;
      v62 = v51;
      v63 = *(_BYTE *)(v19 + 48) == 0;
      log = **(NSObject ***)(Phase::Logger::GetInstancePtr(v31) + 1184);
      v64 = os_log_type_enabled(log, OS_LOG_TYPE_ERROR);
      if (v63)
      {
        v51 = v62;
        if (v64)
        {
          v72 = *v95;
          v73 = *v62;
          *(_DWORD *)v119 = 136316162;
          *(_QWORD *)&v119[4] = "RoomSimulationImpl.cpp";
          *(_WORD *)&v119[12] = 1024;
          *(_DWORD *)&v119[14] = 1131;
          *(_WORD *)&v119[18] = 2048;
          *(_QWORD *)&v119[20] = v72;
          *(_WORD *)&v119[28] = 2048;
          *(_QWORD *)&v119[30] = v73;
          *(_WORD *)&v119[38] = 2048;
          *(_QWORD *)&v119[40] = v93;
          v67 = log;
          v68 = "%25s:%-5d The material with handle %llu has changed during a sustain cluster query - %p != %p";
          goto LABEL_45;
        }
      }
      else
      {
        v51 = v62;
        if (v64)
        {
          v65 = *v95;
          v66 = *v62;
          *(_DWORD *)v119 = 136316162;
          *(_QWORD *)&v119[4] = "RoomSimulationImpl.cpp";
          *(_WORD *)&v119[12] = 1024;
          *(_DWORD *)&v119[14] = 1125;
          *(_WORD *)&v119[18] = 2048;
          *(_QWORD *)&v119[20] = v65;
          *(_WORD *)&v119[28] = 2048;
          *(_QWORD *)&v119[30] = v66;
          *(_WORD *)&v119[38] = 2048;
          *(_QWORD *)&v119[40] = v93;
          v67 = log;
          v68 = "%25s:%-5d The material with handle %llu has changed during an attack cluster query - %p != %p";
LABEL_45:
          v71 = 48;
          goto LABEL_46;
        }
      }
    }
    else
    {
      v69 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v31) + 1184);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        v70 = *v95;
        *(_DWORD *)v119 = 136315650;
        *(_QWORD *)&v119[4] = "RoomSimulationImpl.cpp";
        *(_WORD *)&v119[12] = 1024;
        *(_DWORD *)&v119[14] = 1138;
        *(_WORD *)&v119[18] = 2048;
        *(_QWORD *)&v119[20] = v70;
        v67 = v69;
        v68 = "%25s:%-5d Material Handle is not set: %llu";
        v71 = 28;
LABEL_46:
        _os_log_impl(&dword_2164CC000, v67, OS_LOG_TYPE_ERROR, v68, v119, v71);
      }
    }
LABEL_47:
    Phase::SpatialModeler::applyScatteringFrequencyWeighting(&__b, *v51 + 672, (uint64_t)v119);
    v108 = v121;
    v109 = v122;
    *(_OWORD *)v110 = v123;
    *(_OWORD *)&v110[16] = v124;
    __b = *(float32x4_t *)v119;
    v105 = *(_OWORD *)&v119[16];
    v106 = *(_OWORD *)&v119[32];
    v107 = v120;
    v54 = *(float *)v129;
    v48 = (char *)a3 + 112752;
    v53 = *((float *)a3 + 28304);
    goto LABEL_48;
  }
LABEL_66:
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a3 + 14094) + 51952) + 16))(*(_QWORD *)(*((_QWORD *)a3 + 14094) + 51952)) & 1) != 0)
  {
    v85 = (char *)a3 + 131680;
    v86 = *((_DWORD *)a3 + 28204);
    v87 = *((_DWORD *)a3 + 32942) % v86;
    v88 = v86 - v87;
    if (v87)
      v89 = v88;
    else
      v89 = 0;
  }
  else
  {
    v85 = (char *)a3 + 131680;
    v89 = *((_DWORD *)a3 + 28204);
  }
  *((_DWORD *)v85 + 20) = v89;
  *((_DWORD *)a3 + 16) = *((_DWORD *)this + 15);
  *((_QWORD *)a3 + 11) = (char *)a3 + 112;
  *((_DWORD *)a3 + 24) = v89;
  *((_DWORD *)a3 + 25) = 352;
  *((_QWORD *)v85 + 766) = Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections;
  v91 = operator new(8uLL);
  *v91 = a3;
  memset(buf, 0, 24);
  std::vector<Phase::Geometry::SceneQueryBatch *>::__init_with_size[abi:ne180100]<Phase::Geometry::SceneQueryBatch **,Phase::Geometry::SceneQueryBatch **>(buf, v91, (uint64_t)(v91 + 1), 1uLL);
  operator delete(v91);
  memset(v101, 0, sizeof(v101));
  std::vector<Phase::Geometry::SceneQueryBatch *>::__init_with_size[abi:ne180100]<Phase::Geometry::SceneQueryBatch **,Phase::Geometry::SceneQueryBatch **>(v101, *(const void **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
  v102 = 3;
  Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleDiffuseRain(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v117, (uint64_t)v101);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v101);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
}

void sub_2166AF370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v34;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a33);
  v34 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleDiffuseRain(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  Phase::Logger *InstancePtr;
  uint64_t v8;
  os_signpost_id_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  __int16 v15;
  __int16 v16;

  v6 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 32);
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(a1);
  if (v6 == 2)
  {
    if (*((_BYTE *)InstancePtr + 1192))
    {
      v8 = Phase::Logger::GetInstancePtr(InstancePtr);
      v9 = **(_QWORD **)a2;
      if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v10 = **(NSObject ***)(v8 + 1184);
        if (os_signpost_enabled(v10))
        {
          v16 = 0;
          v11 = "Phase_RoomSimulation_EarlyReflectionsHandleDiffuseRain";
          v12 = (uint8_t *)&v16;
LABEL_10:
          _os_signpost_emit_with_name_impl(&dword_2164CC000, v10, OS_SIGNPOST_INTERVAL_END, v9, v11, (const char *)&unk_21676613F, v12, 2u);
        }
      }
    }
  }
  else if (*((_BYTE *)InstancePtr + 1192))
  {
    v13 = Phase::Logger::GetInstancePtr(InstancePtr);
    v9 = **(_QWORD **)a2;
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = **(NSObject ***)(v13 + 1184);
      if (os_signpost_enabled(v10))
      {
        v15 = 0;
        v11 = "Phase_RoomSimulation_LateReverbHandleDiffuseRain";
        v12 = (uint8_t *)&v15;
        goto LABEL_10;
      }
    }
  }
  return std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, a3);
}

float32_t Phase::Subbands<float>::operator*=(float32x4_t *a1, float *a2, float32x4_t a3)
{
  uint64_t v3;
  float v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float *v14;

  v3 = a1[7].u32[3];
  if ((_DWORD)v3)
  {
    v4 = *a2;
    if ((_DWORD)v3 == 10)
    {
      v12 = vmulq_n_f32(*a1, v4);
      v13 = vmulq_n_f32(a1[1], v4);
      a3 = vmulq_n_f32(a1[2], v4);
      *a1 = v12;
      a1[1] = v13;
      a1[2] = a3;
    }
    else if ((_DWORD)v3 == 31)
    {
      v5 = vmulq_n_f32(a1[1], v4);
      v6 = vmulq_n_f32(*a1, v4);
      v7 = vmulq_n_f32(a1[3], v4);
      v8 = vmulq_n_f32(a1[2], v4);
      v9 = vmulq_n_f32(a1[5], v4);
      v10 = vmulq_n_f32(a1[4], v4);
      v11 = vmulq_n_f32(a1[6], v4);
      a3 = vmulq_n_f32(a1[7], v4);
      a3.i32[3] = HIDWORD(*(_OWORD *)&a1[7]);
      *a1 = v6;
      a1[1] = v5;
      a1[2] = v8;
      a1[3] = v7;
      a1[4] = v10;
      a1[5] = v9;
      a1[6] = v11;
      a1[7] = a3;
    }
    else
    {
      v14 = (float *)a1;
      do
      {
        a3.f32[0] = *a2 * *v14;
        *v14++ = a3.f32[0];
        --v3;
      }
      while (v3);
    }
  }
  return a3.f32[0];
}

void Phase::SpatialModeler::RoomSimulationConfig::ReadDefaultsWriteFlags(Phase::SpatialModeler::RoomSimulationConfig *this)
{
  Phase::Logger *InstancePtr;
  Phase::Logger *v3;
  Phase::Logger *v4;
  Phase::Logger *v5;
  NSObject *v6;
  _BOOL8 v7;
  double v8;
  Phase::Logger *v9;
  Phase::Logger *v10;
  NSObject *v11;
  _BOOL8 v12;
  double v13;
  Phase::Logger *v14;
  Phase::Logger *v15;
  Phase::Logger *v16;
  Phase::Logger *v17;
  Phase::Logger *v18;
  Phase::Logger *v19;
  Phase::Logger *v20;
  Phase::Logger *v21;
  Phase::Logger *v22;
  Phase::Logger *v23;
  int v24;
  NSObject *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  _BYTE v41[10];
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(this);
  *((_BYTE *)this + 123) = *((_DWORD *)InstancePtr + 305) == 1;
  v3 = (Phase::Logger *)Phase::Logger::GetInstancePtr(InstancePtr);
  *((_BYTE *)this + 132) = *((_BYTE *)v3 + 1497);
  v4 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v3);
  v5 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v4);
  *((_DWORD *)this + 34) = *((_DWORD *)v5 + 375);
  v6 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v5) + 1184);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    v8 = *((float *)this + 34);
    v36 = 136315650;
    v37 = "RoomSimulationInitData.cpp";
    v38 = 1024;
    v39 = 39;
    v40 = 2048;
    *(double *)v41 = v8;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RoomSimulationConfig::ReadDefaultsWriteFlags: mFixedERLRDirectivitySphereRadius %f", (uint8_t *)&v36, 0x1Cu);
  }
  v9 = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)v7);
  v10 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v9);
  *((_DWORD *)this + 35) = *((_DWORD *)v10 + 376);
  v11 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v10) + 1184);
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    v13 = *((float *)this + 35);
    v36 = 136315650;
    v37 = "RoomSimulationInitData.cpp";
    v38 = 1024;
    v39 = 47;
    v40 = 2048;
    *(double *)v41 = v13;
    _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RoomSimulationConfig::ReadDefaultsWriteFlags: mFixedERLRDirectivityOpeningAngle %f", (uint8_t *)&v36, 0x1Cu);
  }
  v14 = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)v12);
  *((_BYTE *)this + 87) = *((_BYTE *)v14 + 1508);
  v15 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v14);
  *((_BYTE *)this + 144) = *((_BYTE *)v15 + 1509);
  v16 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v15);
  *((_BYTE *)this + 120) = *((_BYTE *)v16 + 1521);
  v17 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v16);
  *((_BYTE *)this + 121) = *((_BYTE *)v17 + 1522);
  v18 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v17);
  *((_BYTE *)this + 145) = *((_BYTE *)v18 + 1520);
  v19 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v18);
  *((_BYTE *)this + 84) = *((_BYTE *)v19 + 1523);
  v20 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v19);
  *((_BYTE *)this + 146) = *((_BYTE *)v20 + 1524);
  v21 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v20);
  *((_BYTE *)this + 147) = *((_DWORD *)v21 + 302) != 0;
  v22 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v21);
  *((_BYTE *)this + 108) = *((_DWORD *)v22 + 304) == 0;
  v23 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v22);
  v24 = *((_DWORD *)v23 + 306) & ~(*((int *)v23 + 306) >> 31);
  *((_DWORD *)this + 31) = ((0x10000 - v24) & ((0x10000 - v24) >> 31)) + v24;
  v25 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v23) + 1184);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    v26 = *((unsigned __int8 *)this + 123);
    v27 = *((unsigned __int8 *)this + 84);
    v28 = *((unsigned __int8 *)this + 132);
    v29 = *((unsigned __int8 *)this + 87);
    v30 = *((unsigned __int8 *)this + 144);
    v31 = *((unsigned __int8 *)this + 120);
    v32 = *((unsigned __int8 *)this + 121);
    v33 = *((unsigned __int8 *)this + 145);
    v34 = *((unsigned __int8 *)this + 146);
    v35 = *((unsigned __int8 *)this + 147);
    v36 = 136317954;
    v37 = "RoomSimulationInitData.cpp";
    v38 = 1024;
    v39 = 82;
    v40 = 1024;
    *(_DWORD *)v41 = v26;
    *(_WORD *)&v41[4] = 1024;
    *(_DWORD *)&v41[6] = v27;
    v42 = 1024;
    v43 = v28;
    v44 = 1024;
    v45 = v29;
    v46 = 1024;
    v47 = v30;
    v48 = 1024;
    v49 = v31;
    v50 = 1024;
    v51 = v32;
    v52 = 1024;
    v53 = v33;
    v54 = 1024;
    v55 = v34;
    v56 = 1024;
    v57 = v35;
    _os_log_impl(&dword_2164CC000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RoomSimulationConfig::ReadDefaultsWriteFlags:\nmKeepRendererAlive %d\nmForceLateResponseBuilding %d\nmFixedERLRDirectivity %d\nmDirectSoundDelayLR %d\nmIncludeSourcesOutsideInSharedReverb %d\nmUseSceneObserver %d\nmUseDynamicAggregation %d\nmEnableListenerOutsideMitigation %d\nmEnableDeterministicRayTracerMode %d\nmSingleTraceDisabled %d\n", (uint8_t *)&v36, 0x4Eu);
  }
}

float Phase::SpatialModeler::RoomSimulationLogging::logInvalidIntersections(Phase::SpatialModeler::RoomSimulationLogging *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  unsigned int *v2;
  unsigned int v3;
  float result;
  NSObject *v6;
  _BOOL8 v7;
  unsigned int v8;
  float v9;
  NSObject *v10;
  unsigned int v11;
  float v12;
  NSObject *v13;
  unsigned int v14;
  float v15;
  NSObject *v16;
  unsigned int v17;
  float v18;
  NSObject *v19;
  unsigned int v20;
  float v21;
  NSObject *v22;
  unsigned int v23;
  float v24;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  double v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int *)((char *)this + 19328);
  v3 = vaddvq_s32(*(int32x4_t *)((char *)this + 19340)) + *((_DWORD *)this + 4839);
  result = *((float *)this + 4878);
  if (result > 0.0 && v3 >= 3)
  {
    v6 = **(NSObject ***)(Phase::Logger::GetInstancePtr(this) + 1184);
    v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      v8 = v2[2];
      v9 = (float)v8 / (float)*v2;
      v25 = 136315906;
      v26 = "RoomSimulationLoggingFunctions.cpp";
      v27 = 1024;
      v28 = 34;
      v29 = 1024;
      v30 = v8;
      v31 = 2048;
      v32 = (float)(v9 * 100.0);
      _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Received %d invalid intersections, %.1f%% of total.\n", (uint8_t *)&v25, 0x22u);
    }
    if (v2[3])
    {
      v10 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v7) + 1184);
      v7 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
      if (v7)
      {
        v11 = v2[3];
        v12 = (float)v11 / (float)*v2;
        v25 = 136315906;
        v26 = "RoomSimulationLoggingFunctions.cpp";
        v27 = 1024;
        v28 = 41;
        v29 = 1024;
        v30 = v11;
        v31 = 2048;
        v32 = (float)(v12 * 100.0);
        _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d     - %d with positive intersection (mT < FLTMAX), but null-normal (0,0,0), %.1f%% of total.\n", (uint8_t *)&v25, 0x22u);
      }
    }
    if (v2[4])
    {
      v13 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v7) + 1184);
      v7 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      if (v7)
      {
        v14 = v2[4];
        v15 = (float)v14 / (float)*v2;
        v25 = 136315906;
        v26 = "RoomSimulationLoggingFunctions.cpp";
        v27 = 1024;
        v28 = 48;
        v29 = 1024;
        v30 = v14;
        v31 = 2048;
        v32 = (float)(v15 * 100.0);
        _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d     - %d with negative intersection (mT == FLTMAX), and null-normal (0,0,0), %.1f%% of total.\n", (uint8_t *)&v25, 0x22u);
      }
    }
    if (v2[5])
    {
      v16 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v7) + 1184);
      v7 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
      if (v7)
      {
        v17 = v2[5];
        v18 = (float)v17 / (float)*v2;
        v25 = 136315906;
        v26 = "RoomSimulationLoggingFunctions.cpp";
        v27 = 1024;
        v28 = 55;
        v29 = 1024;
        v30 = v17;
        v31 = 2048;
        v32 = (float)(v18 * 100.0);
        _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d     - %d with a self-intersection (mT == 0), %.1f%% of total.\n", (uint8_t *)&v25, 0x22u);
      }
    }
    if (v2[6])
    {
      v19 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v7) + 1184);
      v7 = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
      if (v7)
      {
        v20 = v2[6];
        v21 = (float)v20 / (float)*v2;
        v25 = 136315906;
        v26 = "RoomSimulationLoggingFunctions.cpp";
        v27 = 1024;
        v28 = 62;
        v29 = 1024;
        v30 = v20;
        v31 = 2048;
        v32 = (float)(v21 * 100.0);
        _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d     - %d with mT == 0, but not self-intersecting (origin away from boundary), %.1f%% of total.\n", (uint8_t *)&v25, 0x22u);
      }
    }
    if (v2[7])
    {
      v22 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v7) + 1184);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v23 = v2[7];
        v24 = (float)v23 / (float)*v2;
        v25 = 136315906;
        v26 = "RoomSimulationLoggingFunctions.cpp";
        v27 = 1024;
        v28 = 69;
        v29 = 1024;
        v30 = v23;
        v31 = 2048;
        v32 = (float)(v24 * 100.0);
        _os_log_impl(&dword_2164CC000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d     - %d with no intersection (mT == FLTMAX), %.1f%% of total.\n", (uint8_t *)&v25, 0x22u);
      }
    }
  }
  return result;
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logInQuerySources(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *__p[2];
  unsigned __int8 v21;
  void *v22[2];
  unsigned __int8 v23;
  _QWORD v24[2];
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  std::locale v28;

  result = Phase::Logger::GetInstancePtr(a1);
  if ((*(_BYTE *)(*(_QWORD *)(result + 1184) + 8) & 4) != 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
    std::string::basic_string[abi:ne180100]<0>(v22, "logInQuerySources");
    std::string::basic_string[abi:ne180100]<0>(__p, "source handles in inQuery:");
    if ((v23 & 0x80u) == 0)
      v7 = v22;
    else
      v7 = (void **)v22[0];
    if ((v23 & 0x80u) == 0)
      v8 = v23;
    else
      v8 = (uint64_t)v22[1];
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v7, v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" from ", 6);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, a2, a3);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
    if ((v21 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v21 & 0x80u) == 0)
      v14 = v21;
    else
      v14 = (uint64_t)__p[1];
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v28, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v28);
    std::ostream::put();
    std::ostream::flush();
    if (*((_QWORD *)a1 + 5))
    {
      v17 = *(_QWORD *)a1;
      do
      {
        v18 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
        v17 += 304;
      }
      while (v17 != *(_QWORD *)a1 + 304 * *((_QWORD *)a1 + 5));
    }
    if ((char)v21 < 0)
      operator delete(__p[0]);
    if ((char)v23 < 0)
      operator delete(v22[0]);
    v24[0] = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v25[0] = v19;
    v25[1] = MEMORY[0x24BEDB848] + 16;
    if (v26 < 0)
      operator delete((void *)v25[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x2199F9CD4](&v27);
  }
  return result;
}

void sub_2166AFF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logRayTracerStateStatus(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  Phase::SpatialModeler::RoomSimulationLogging::logState(a1, a2, a3);
  Phase::SpatialModeler::RoomSimulationLogging::logSourceListenerResults(a1, a2, a3);
  Phase::SpatialModeler::RoomSimulationLogging::logERClusterResults(a1, a2, a3);
  return Phase::SpatialModeler::RoomSimulationLogging::logLRClusterResults(a1, a2, a3);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logState(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *__p[2];
  unsigned __int8 v22;
  void *v23[2];
  unsigned __int8 v24;
  _QWORD v25[2];
  _QWORD v26[11];
  char v27;
  uint64_t v28;
  std::locale v29;

  result = Phase::Logger::GetInstancePtr(a1);
  if ((*(_BYTE *)(*(_QWORD *)(result + 1184) + 8) & 4) != 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v25);
    std::string::basic_string[abi:ne180100]<0>(v23, "logState");
    std::string::basic_string[abi:ne180100]<0>(__p, "source handles in mState:");
    if ((v24 & 0x80u) == 0)
      v7 = v23;
    else
      v7 = (void **)v23[0];
    if ((v24 & 0x80u) == 0)
      v8 = v24;
    else
      v8 = (uint64_t)v23[1];
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v7, v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" from ", 6);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, a2, a3);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
    if ((v22 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v22 & 0x80u) == 0)
      v14 = v22;
    else
      v14 = (uint64_t)__p[1];
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v29, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    if (*((_QWORD *)a1 + 2367) != *((_QWORD *)a1 + 2366))
    {
      v17 = 0;
      v18 = 48;
      do
      {
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
        ++v17;
        v18 += 56;
      }
      while (v17 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a1 + 2367) - *((_QWORD *)a1 + 2366)) >> 3));
    }
    if ((char)v22 < 0)
      operator delete(__p[0]);
    if ((char)v24 < 0)
      operator delete(v23[0]);
    v25[0] = *MEMORY[0x24BEDB7F0];
    v20 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v26[0] = v20;
    v26[1] = MEMORY[0x24BEDB848] + 16;
    if (v27 < 0)
      operator delete((void *)v26[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x2199F9CD4](&v28);
  }
  return result;
}

void sub_2166B0208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logSourceListenerResults(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  void *__p[2];
  unsigned __int8 v24;
  void *v25[2];
  unsigned __int8 v26;
  _QWORD v27[2];
  _QWORD v28[11];
  char v29;
  uint64_t v30;
  std::locale v31;

  result = Phase::Logger::GetInstancePtr(a1);
  if ((*(_BYTE *)(*(_QWORD *)(result + 1184) + 8) & 4) != 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v27);
    std::string::basic_string[abi:ne180100]<0>(v25, "logSourceListenerResults");
    std::string::basic_string[abi:ne180100]<0>(__p, "source handles in results:");
    if ((v26 & 0x80u) == 0)
      v7 = v25;
    else
      v7 = (void **)v25[0];
    if ((v26 & 0x80u) == 0)
      v8 = v26;
    else
      v8 = (uint64_t)v25[1];
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v7, v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" from ", 6);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, a2, a3);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
    if ((v24 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v24 & 0x80u) == 0)
      v14 = v24;
    else
      v14 = (uint64_t)__p[1];
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v31, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v31);
    std::ostream::put();
    std::ostream::flush();
    v17 = (_QWORD *)*((_QWORD *)a1 + 2420);
    if (v17 != (_QWORD *)((char *)a1 + 19368))
    {
      do
      {
        v18 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
        v19 = (_QWORD *)v17[1];
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v17[2];
            v21 = *v20 == (_QWORD)v17;
            v17 = v20;
          }
          while (!v21);
        }
        v17 = v20;
      }
      while (v20 != (_QWORD *)((char *)a1 + 19368));
    }
    if ((char)v24 < 0)
      operator delete(__p[0]);
    if ((char)v26 < 0)
      operator delete(v25[0]);
    v27[0] = *MEMORY[0x24BEDB7F0];
    v22 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v27 + *(_QWORD *)(v27[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v28[0] = v22;
    v28[1] = MEMORY[0x24BEDB848] + 16;
    if (v29 < 0)
      operator delete((void *)v28[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x2199F9CD4](&v30);
  }
  return result;
}

void sub_2166B0490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logERClusterResults(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  _QWORD *v15;
  uint64_t v16;
  std::locale::id *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  uint64_t v25;
  void *__p[2];
  unsigned __int8 v27;
  _QWORD v28[2];
  _QWORD v29[11];
  char v30;
  uint64_t v31;
  std::locale v32;

  result = Phase::Logger::GetInstancePtr(a1);
  if ((*(_BYTE *)(*(_QWORD *)(result + 1184) + 8) & 4) != 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
    std::string::basic_string[abi:ne180100]<0>(__p, "logERClusterResults");
    if ((v27 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v27 & 0x80u) == 0)
      v8 = v27;
    else
      v8 = (uint64_t)__p[1];
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v7, v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" from ", 6);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, a2, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", looping over ", 15);
    v12 = (_QWORD *)std::ostream::operator<<();
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" in order:", 10);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
    v14 = std::locale::use_facet(&v32, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    v15 = (_QWORD *)*((_QWORD *)a1 + 2425);
    if (v15)
    {
      v16 = 0;
      v17 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Cluster ", 8);
        v18 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" / ", 3);
        v19 = (_QWORD *)std::ostream::operator<<();
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" has handles:", 13);
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
        v21 = std::locale::use_facet(&v32, v17);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(&v32);
        std::ostream::put();
        std::ostream::flush();
        v22 = v15 + 5;
        while (1)
        {
          v22 = (_QWORD *)*v22;
          if (!v22)
            break;
          v23 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
          v24 = std::locale::use_facet(&v32, v17);
          ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
          std::locale::~locale(&v32);
          std::ostream::put();
          std::ostream::flush();
        }
        ++v16;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
    v28[0] = *MEMORY[0x24BEDB7F0];
    v25 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v28 + *(_QWORD *)(v28[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v29[0] = v25;
    v29[1] = MEMORY[0x24BEDB848] + 16;
    if (v30 < 0)
      operator delete((void *)v29[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x2199F9CD4](&v31);
  }
  return result;
}

void sub_2166B07C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logLRClusterResults(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  _QWORD *v15;
  uint64_t v16;
  std::locale::id *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  uint64_t v25;
  void *__p[2];
  unsigned __int8 v27;
  _QWORD v28[2];
  _QWORD v29[11];
  char v30;
  uint64_t v31;
  std::locale v32;

  result = Phase::Logger::GetInstancePtr(a1);
  if ((*(_BYTE *)(*(_QWORD *)(result + 1184) + 8) & 4) != 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
    std::string::basic_string[abi:ne180100]<0>(__p, "logLRClusterResults");
    if ((v27 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v27 & 0x80u) == 0)
      v8 = v27;
    else
      v8 = (uint64_t)__p[1];
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v7, v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" from ", 6);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, a2, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", looping over ", 15);
    v12 = (_QWORD *)std::ostream::operator<<();
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" in order:", 10);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
    v14 = std::locale::use_facet(&v32, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    v15 = (_QWORD *)*((_QWORD *)a1 + 2430);
    if (v15)
    {
      v16 = 0;
      v17 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Cluster ", 8);
        v18 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" / ", 3);
        v19 = (_QWORD *)std::ostream::operator<<();
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" has handles:", 13);
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
        v21 = std::locale::use_facet(&v32, v17);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(&v32);
        std::ostream::put();
        std::ostream::flush();
        v22 = v15 + 5;
        while (1)
        {
          v22 = (_QWORD *)*v22;
          if (!v22)
            break;
          v23 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
          v24 = std::locale::use_facet(&v32, v17);
          ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
          std::locale::~locale(&v32);
          std::ostream::put();
          std::ostream::flush();
        }
        ++v16;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
    v28[0] = *MEMORY[0x24BEDB7F0];
    v25 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v28 + *(_QWORD *)(v28[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v29[0] = v25;
    v29[1] = MEMORY[0x24BEDB848] + 16;
    if (v30 < 0)
      operator delete((void *)v29[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x2199F9CD4](&v31);
  }
  return result;
}

void sub_2166B0AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::MakeInfoString(uint64_t a1, int a2)
{
  uint64_t v3;
  const std::locale::facet *v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[11];
  char v9;
  uint64_t v10;
  std::locale v11;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
  v3 = v8[0];
  *(_QWORD *)((char *)&v7[2] + *(_QWORD *)(v7[0] - 24)) = 2;
  *(_DWORD *)((char *)&v8[1] + *(_QWORD *)(v3 - 24)) = *(_DWORD *)((_BYTE *)&v8[1] + *(_QWORD *)(v3 - 24)) & 0xFFFFFEFB | 4;
  if (a2 == 3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Late Reverb Simulation", 22);
  }
  else if (a2 == 2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Early Reflections Simulation", 28);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" @ ", 3);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Hz x ", 5);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ms", 2);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[0] - 24)));
  v4 = std::locale::use_facet(&v11, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v11);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v7[0] = *MEMORY[0x24BEDB7F0];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v8[0] = v5;
  v8[1] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2199F9CD4](&v10);
}

void sub_2166B0D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 72));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::CheckLRClusterResultAndSourceListenerResultCoherence(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  _QWORD *i;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  void *__p[2];
  unsigned __int8 v31;
  _QWORD v32[2];
  _QWORD v33[11];
  char v34;
  uint64_t v35;
  std::locale v36;

  result = Phase::Logger::GetInstancePtr((Phase::Logger *)a1);
  if ((*(_BYTE *)(*(_QWORD *)(result + 1184) + 8) & 4) != 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v32);
    std::string::basic_string[abi:ne180100]<0>(__p, "CheckLRClusterResultAndSourceListenerResultCoherence");
    if ((v31 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v31 & 0x80u) == 0)
      v8 = v31;
    else
      v8 = (uint64_t)__p[1];
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v7, v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" from ", 6);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, a2, a3);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
    v12 = std::locale::use_facet(&v36, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v36);
    std::ostream::put();
    std::ostream::flush();
    v13 = (_QWORD *)a1[2420];
    v14 = a1 + 2421;
    if (v13 != a1 + 2421)
    {
      do
      {
        v36.__locale_ = (std::locale::__imp *)v13[4];
        v15 = (_QWORD *)a1[2430];
        if (!v15)
          goto LABEL_27;
        v16 = 0;
        do
        {
          for (i = (_QWORD *)v15[5]; i; i = (_QWORD *)*i)
          {
            v18 = i[2];
            v19 = (_QWORD *)*v14;
            if (*v14)
            {
              v20 = a1 + 2421;
              do
              {
                v21 = v19[4];
                v22 = v21 >= v18;
                if (v21 >= v18)
                  v23 = v19;
                else
                  v23 = v19 + 1;
                if (v22)
                  v20 = v19;
                v19 = (_QWORD *)*v23;
              }
              while (*v23);
              if (v20 != v14 && v18 >= v20[4])
                continue;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"cluster source hash ", 20);
            v24 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" not in source listener result\n", 31);
          }
          v16 |= std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v15 + 3, (unint64_t *)&v36) != 0;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
        if ((v16 & 1) == 0)
        {
LABEL_27:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"source hash ", 12);
          v25 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" not in clustering results\n", 27);
        }
        v26 = (_QWORD *)v13[1];
        if (v26)
        {
          do
          {
            v27 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (_QWORD *)v13[2];
            v28 = *v27 == (_QWORD)v13;
            v13 = v27;
          }
          while (!v28);
        }
        v13 = v27;
      }
      while (v27 != v14);
    }
    if ((char)v31 < 0)
      operator delete(__p[0]);
    v32[0] = *MEMORY[0x24BEDB7F0];
    v29 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v32 + *(_QWORD *)(v32[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v33[0] = v29;
    v33[1] = MEMORY[0x24BEDB848] + 16;
    if (v34 < 0)
      operator delete((void *)v33[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x2199F9CD4](&v35);
  }
  return result;
}

void sub_2166B1010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v35;

  a15 = *MEMORY[0x24BEDB7F0];
  v35 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a17 = v35;
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199F9CD4](&a34);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::RoomSimulationLogging::logAreSourcesAndListenerInsideSceneBoundingBox(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int8x16_t a5)
{
  const char *v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  Phase::Logger *v31;
  NSObject *v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t v38;
  uint64_t v39;
  float v40;
  BOOL v41;
  float32x4_t v42;
  float32x4_t v43;
  _QWORD *v44;
  void **v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  Phase::Logger *v59;
  NSObject *v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int8x16_t v67;
  uint64_t v68;
  void *__p[2];
  char v70;
  _QWORD v71[2];
  uint64_t v72;
  uint64_t v73;
  void *v74;
  char v75;
  _BYTE v76[152];
  void **v77;
  uint64_t v78;
  uint64_t v79;
  uint8_t buf[4];
  const char *v81;
  __int16 v82;
  int v83;
  __int16 v84;
  void **v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v77 = 0;
  v78 = 0;
  v79 = 0;
  if (a2 == 3)
  {
    v6 = "LR";
  }
  else
  {
    if (a2 != 2)
      goto LABEL_6;
    v6 = "ER";
  }
  a5 = (int8x16_t)MEMORY[0x2199F99B0](&v77, v6);
LABEL_6:
  v7 = *(float *)(a1 + 20976);
  a5.i64[0] = *(_QWORD *)(a1 + 20980);
  v67 = a5;
  v8 = *(float *)(a1 + 20988);
  v9 = *(_QWORD *)(a1 + 20992);
  v68 = v9;
  v10 = *(float *)(a1 + 22792);
  v11 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v12 = v7 > v10 || v10 > v8;
  v13 = MEMORY[0x24BEDB848];
  if (v12
    || (v14.i32[0] = v9,
        v15 = (float32x4_t)vextq_s8(v67, v67, 0xCuLL),
        v15.i32[0] = *(_DWORD *)(a1 + 22796),
        v15.i32[3] = *(_DWORD *)(a1 + 22800),
        v14.i32[1] = v15.i32[0],
        v14.i64[1] = __PAIR64__(HIDWORD(v68), v15.u32[3]),
        (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vcgeq_f32(v14, v15)), 0xFuLL))) & 1) == 0))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v71);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"logAreSourcesAndListenerInsideSceneBoundingBox - called from ", 61);
    if (v79 >= 0)
      v17 = (void **)&v77;
    else
      v17 = v77;
    if (v79 >= 0)
      v18 = HIBYTE(v79);
    else
      v18 = v78;
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, a3, a4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"Listener Position ", 18);
    v22 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", ", 2);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"outside the scene boundingbox ", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"min ", 4);
    v25 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)", ", 2);
    v26 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", ", 2);
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"max ", 4);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", ", 2);
    v29 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", ", 2);
    v30 = (_QWORD *)std::ostream::operator<<();
    v31 = (Phase::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" ", 1);
    v32 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v31) + 1184);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str();
      v33 = v70 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v81 = "RoomSimulationLoggingFunctions.cpp";
      v82 = 1024;
      v83 = 387;
      v84 = 2080;
      v85 = v33;
      _os_log_impl(&dword_2164CC000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
      if (v70 < 0)
        operator delete(__p[0]);
    }
    v71[0] = *v11;
    v34 = v11[9];
    *(_QWORD *)((char *)v71 + *(_QWORD *)(v71[0] - 24)) = v11[8];
    v72 = v34;
    v73 = v13 + 16;
    if (v75 < 0)
      operator delete(v74);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2199F9CD4](v76);
  }
  v35 = *(_QWORD *)(a1 + 18928);
  v36 = *(_QWORD *)(a1 + 18936);
  if (v35 != v36)
  {
    v37 = *MEMORY[0x24BEDB7F0];
    v63 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v64 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v38.i64[0] = v68;
    v38.i64[1] = v67.i64[0];
    v39 = v13 + 16;
    v62 = vextq_s8(v38, v38, 8uLL).u64[0];
    do
    {
      v40 = *(float *)(v35 + 24);
      v41 = v7 > v40 || v40 > v8;
      if (v41
        || (v42.i64[0] = v68,
            v42.i64[1] = *(_QWORD *)(v35 + 28),
            v43.i64[0] = v42.i64[1],
            v43.i64[1] = v62,
            (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vcgeq_f32(v42, v43)), 0xFuLL))) & 1) == 0))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v71);
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"logAreSourcesAndListenerInsideSceneBoundingBox - called from ", 61);
        if (v79 >= 0)
          v45 = (void **)&v77;
        else
          v45 = v77;
        if (v79 >= 0)
          v46 = HIBYTE(v79);
        else
          v46 = v78;
        v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
        v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" ", 1);
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, a3, a4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"Source Position ", 16);
        v50 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)", ", 2);
        v51 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)", ", 2);
        v52 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" ", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"outside the scene boundingbox ", 30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"min ", 4);
        v53 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)", ", 2);
        v54 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)", ", 2);
        v55 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" ", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"max ", 4);
        v56 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)", ", 2);
        v57 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)", ", 2);
        v58 = (_QWORD *)std::ostream::operator<<();
        v59 = (Phase::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" ", 1);
        v60 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v59) + 1184);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
        {
          std::stringbuf::str();
          v61 = __p;
          if (v70 < 0)
            v61 = (void **)__p[0];
          *(_DWORD *)buf = 136315650;
          v81 = "RoomSimulationLoggingFunctions.cpp";
          v82 = 1024;
          v83 = 404;
          v84 = 2080;
          v85 = v61;
          _os_log_impl(&dword_2164CC000, v60, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
          if (v70 < 0)
            operator delete(__p[0]);
        }
        v71[0] = v37;
        *(_QWORD *)((char *)v71 + *(_QWORD *)(v37 - 24)) = v64;
        v72 = v63;
        v73 = v39;
        if (v75 < 0)
          operator delete(v74);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x2199F9CD4](v76);
      }
      v35 += 56;
    }
    while (v35 != v36);
  }
  if (SHIBYTE(v79) < 0)
    operator delete(v77);
}

void sub_2166B17BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a29);
  if (*(char *)(v29 - 193) < 0)
    operator delete(*(void **)(v29 - 216));
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::RoomSimulationLogging::logWhenExceedingTimeLimit(Phase::SpatialModeler::RoomSimulationLogging *this, const Phase::SpatialModeler::RayTracerState *a2, Phase::Throttle *a3)
{
  int v4;
  float v5;
  float v6;
  Phase::Logger *ShouldFire;
  NSObject *v8;
  void **v9;
  int v10;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  void **v18;
  __int16 v19;
  double v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(*(_QWORD *)this + 32);
  if (v4 == 3)
  {
    v5 = *((float *)this + 12);
  }
  else
  {
    v5 = 0.0;
    if (v4 == 2)
      v5 = *((float *)this + 13);
  }
  v6 = (float)(uint64_t)(*((_QWORD *)this + 2415) - *((_QWORD *)this + 2414)) / 1000000000.0;
  if (v6 > (float)(v5 * 1.25))
  {
    ShouldFire = (Phase::Logger *)Phase::Throttle::ShouldFire(a2, 0);
    if ((_DWORD)ShouldFire)
    {
      v8 = **(NSObject ***)(Phase::Logger::GetInstancePtr(ShouldFire) + 1184);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        Phase::SpatialModeler::RayTracerState::descriptionString((uint64_t)this, 0, (uint64_t)__p);
        if (v12 >= 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        v10 = *((_DWORD *)this + 4832);
        *(_DWORD *)buf = 136316162;
        v14 = "RoomSimulationLoggingFunctions.cpp";
        v15 = 1024;
        v16 = 427;
        v17 = 2080;
        v18 = v9;
        v19 = 2048;
        v20 = v6;
        v21 = 1024;
        v22 = v10;
        _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d %s ran %f sec to reach %i intersections", buf, 0x2Cu);
        if (v12 < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void Phase::SpatialModeler::RoomSimulationLogging::logRoomStatistics(unsigned int *a1, int a2, uint64_t a3, uint64_t a4)
{
  const char *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD v26[2];
  _QWORD v27[11];
  char v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;

  if ((*(_BYTE *)(*(_QWORD *)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 1184) + 8) & 4) == 0)
    return;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  if (a2 == 3)
  {
    v8 = "LR";
    goto LABEL_6;
  }
  if (a2 == 2)
  {
    v8 = "ER";
LABEL_6:
    MEMORY[0x2199F99B0](&v30, v8);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v26);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"logRoomStatistics - called from ", 32);
  if (v32 >= 0)
    v10 = (void **)&v30;
  else
    v10 = v30;
  if (v32 >= 0)
    v11 = HIBYTE(v32);
  else
    v11 = v31;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, a3, a4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Room volume ", 12);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Room surface area ", 18);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Mean free path ", 15);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n", 1);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Mean absorption per band:", 25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  v19 = a1[4911];
  if ((_DWORD)v19)
  {
    v20 = a1 + 4880;
    v21 = a1[4911];
    do
    {
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
      ++v20;
      --v21;
    }
    while (v21);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"RT60 per band:\n", 15);
  if ((_DWORD)v19)
  {
    v23 = a1 + 4944;
    do
    {
      v24 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", ", 2);
      ++v23;
      --v19;
    }
    while (v19);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\n", 1);
  v26[0] = *MEMORY[0x24BEDB7F0];
  v25 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v27[0] = v25;
  v27[1] = MEMORY[0x24BEDB848] + 16;
  if (v28 < 0)
    operator delete((void *)v27[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199F9CD4](&v29);
  if (SHIBYTE(v32) < 0)
    operator delete(v30);
}

void sub_2166B1C60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  _Unwind_Resume(exception_object);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logRoomStatisticsAtIRBuild(Phase::SpatialModeler::RoomSimulationLogging *this, const Phase::SpatialModeler::RayTracerState *a2, const Phase::SpatialModeler::DirectivityHistogram *a3, float a4)
{
  int v5;
  uint64_t InstancePtr;
  float v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  float v25;
  float *v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t i;
  float v34;
  int v35;
  float *v36;
  float v37;
  char *v38;
  uint64_t v39;
  uint64_t j;
  Phase::Logger *v41;
  NSObject *v42;
  void **v43;
  uint64_t v44;
  void *__p;
  char v47;
  _QWORD v48[2];
  _QWORD v49[11];
  char v50;
  uint64_t v51;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  int v55;
  __int16 v56;
  void **v57;
  uint64_t v58;

  v5 = (int)a3;
  v58 = *MEMORY[0x24BDAC8D0];
  InstancePtr = Phase::Logger::GetInstancePtr(this);
  v9 = expf((float)((float)(*(float *)(InstancePtr + 1204) * 10.0) / 10.0) * 0.23026);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v48);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"=== Room Statistics ===\n", 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"* Volume: ", 10);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (m^3), ", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Surface Area: ", 14);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" (m^2), ", 8);
  v12 = v49[0];
  *(_QWORD *)((char *)&v49[2] + *(_QWORD *)(v49[0] - 24)) = 3;
  *(_DWORD *)((char *)&v49[1] + *(_QWORD *)(v12 - 24)) = *(_DWORD *)((_BYTE *)&v49[1] + *(_QWORD *)(v12 - 24)) & 0xFFFFFEFB | 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Mean Free Path: ", 16);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (m), ", 6);
  if (v5)
    v14 = "OUTDOOR\n";
  else
    v14 = "INDOOR\n";
  if (v5)
    v15 = 8;
  else
    v15 = 7;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v14, v15);
  v16 = *((unsigned int *)a2 + 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"* Bands (Hz):", 13);
  v17 = v49[0];
  *(_QWORD *)((char *)&v49[2] + *(_QWORD *)(v49[0] - 24)) = 0;
  *(_DWORD *)((char *)&v49[1] + *(_QWORD *)(v17 - 24)) = *(_DWORD *)((_BYTE *)&v49[1] + *(_QWORD *)(v17 - 24)) & 0xFFFFFEFB | 4;
  if ((_DWORD)v16)
  {
    v18 = 0;
    v19 = &Phase::sThirdOctaveBandFrequencies;
    v20 = v16;
    do
    {
      *(_QWORD *)((char *)&v49[3] + *(_QWORD *)(v49[0] - 24)) = 8;
      std::ostream::operator<<();
      ++v18;
      ++v19;
      --v20;
    }
    while (v20);
    v17 = v49[0];
  }
  *(_QWORD *)((char *)&v49[2] + *(_QWORD *)(v17 - 24)) = 3;
  *(_DWORD *)((char *)&v49[1] + *(_QWORD *)(v17 - 24)) = *(_DWORD *)((_BYTE *)&v49[1] + *(_QWORD *)(v17 - 24)) & 0xFFFFFEFB | 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"\n* RT60 (sec):", 14);
  if ((_DWORD)v16)
  {
    v21 = (char *)this + 19776;
    v22 = v16;
    do
    {
      *(_QWORD *)((char *)&v49[3] + *(_QWORD *)(v49[0] - 24)) = 8;
      std::ostream::operator<<();
      v21 += 4;
      --v22;
    }
    while (v22);
  }
  v23 = (char *)this + 20544;
  v24 = *((unsigned int *)this + 5167);
  v25 = fabsf(*((float *)this + 5136));
  if (v24 <= 1)
    v25 = 0.0;
  if ((_DWORD)v24)
  {
    v26 = (float *)((char *)this + 20544);
    do
    {
      v27 = *v26++;
      v28 = fabsf(v27);
      if (v25 < v28)
        v25 = v28;
      --v24;
    }
    while (v24);
  }
  if (v25 > 0.0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"\n* EDT (sec): ", 14);
    if ((_DWORD)v16)
    {
      v29 = v16;
      do
      {
        *(_QWORD *)((char *)&v49[3] + *(_QWORD *)(v49[0] - 24)) = 8;
        std::ostream::operator<<();
        v23 += 4;
        --v29;
      }
      while (v29);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"\n* ER (dB):   ", 14);
  if ((_DWORD)v16)
  {
    v30 = 0;
    do
    {
      *(_QWORD *)((char *)&v49[3] + *(_QWORD *)(v49[0] - 24)) = 8;
      Phase::SpatialModeler::RayTracerState::calculateTotalSpecularEarlyEnergy(this, (char *)buf);
      v31 = v9 * *(float *)&buf[v30];
      if (v31 <= 0.0)
        v31 = COERCE_FLOAT(1);
      logf(v31);
      std::ostream::operator<<();
      v30 += 4;
    }
    while (4 * v16 != v30);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"\n* LR (dB):   ", 14);
  if ((_DWORD)v16)
  {
    v32 = 0;
    for (i = 0; i != v16; ++i)
    {
      *(_QWORD *)((char *)&v49[3] + *(_QWORD *)(v49[0] - 24)) = 8;
      v34 = 0.0;
      if (!*((_BYTE *)a2 + 36))
      {
        v35 = *((_DWORD *)a2 + 6);
        if (v35)
        {
          v36 = (float *)(*((_QWORD *)a2 + 1) + v32);
          do
          {
            v34 = v34 + *v36;
            v36 += *((unsigned int *)a2 + 7);
            --v35;
          }
          while (v35);
        }
      }
      v37 = (float)(v9 * v34) * a4;
      if (v37 <= 0.0)
        v37 = COERCE_FLOAT(1);
      logf(v37);
      std::ostream::operator<<();
      v32 += 4;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"\n* Mean Abs:  ", 14);
  if ((_DWORD)v16)
  {
    v38 = (char *)this + 19520;
    v39 = v16;
    do
    {
      *(_QWORD *)((char *)&v49[3] + *(_QWORD *)(v49[0] - 24)) = 8;
      std::ostream::operator<<();
      v38 += 4;
      --v39;
    }
    while (v39);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"\n* Abs Corr:  ", 14);
  if ((_DWORD)v16)
  {
    for (j = 0; j != v16; ++j)
    {
      *(_QWORD *)((char *)&v49[3] + *(_QWORD *)(v49[0] - 24)) = 8;
      std::ostream::operator<<();
    }
  }
  v41 = (Phase::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"\n", 1);
  v42 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v41) + 1184);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str();
    v43 = v47 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315650;
    v53 = "RoomSimulationLoggingFunctions.cpp";
    v54 = 1024;
    v55 = 557;
    v56 = 2080;
    v57 = v43;
    _os_log_impl(&dword_2164CC000, v42, OS_LOG_TYPE_DEFAULT, "%25s:%-5d \n%s", buf, 0x1Cu);
    if (v47 < 0)
      operator delete(__p);
  }
  v48[0] = *MEMORY[0x24BEDB7F0];
  v44 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v48 + *(_QWORD *)(v48[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v49[0] = v44;
  v49[1] = MEMORY[0x24BEDB848] + 16;
  if (v50 < 0)
    operator delete((void *)v49[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2199F9CD4](&v51);
}

void sub_2166B2330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logRoomStatisticsAtIRBuild(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, float a6)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  float v27;
  float *v28;
  float v29;
  float v30;
  uint64_t j;
  uint64_t k;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t m;
  uint64_t n;
  float v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  Phase::Logger *v46;
  NSObject *v47;
  void **v48;
  uint64_t v49;
  void *__p;
  char v52;
  _QWORD v53[2];
  _QWORD v54[11];
  char v55;
  uint64_t v56;
  uint8_t buf[4];
  const char *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  void **v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v53);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"=== Room Statistics ===\n", 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"* Volume: ", 10);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" (m^3), ", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" Surface Area: ", 15);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (m^2), ", 8);
  v14 = v54[0];
  *(_QWORD *)((char *)&v54[2] + *(_QWORD *)(v54[0] - 24)) = 3;
  *(_DWORD *)((char *)&v54[1] + *(_QWORD *)(v14 - 24)) = *(_DWORD *)((_BYTE *)&v54[1] + *(_QWORD *)(v14 - 24)) & 0xFFFFFEFB | 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Mean Free Path: ", 16);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" (m), ", 6);
  if (a4)
    v16 = "OUTDOOR";
  else
    v16 = "INDOOR";
  if (a4)
    v17 = 7;
  else
    v17 = 6;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v16, v17);
  v18 = v54[0];
  *(_QWORD *)((char *)&v54[2] + *(_QWORD *)(v54[0] - 24)) = 1;
  *(_DWORD *)((char *)&v54[1] + *(_QWORD *)(v18 - 24)) = *(_DWORD *)((_BYTE *)&v54[1] + *(_QWORD *)(v18 - 24)) & 0xFFFFFEFB | 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)", Immersed: ", 12);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"%, ", 3);
  if (a5)
    v20 = " Did SpaceBlend";
  else
    v20 = " No SpaceBlend";
  if (a5)
    v21 = 15;
  else
    v21 = 14;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v20, v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"* Bands (Hz):", 13);
  v22 = 0;
  v23 = v54[0];
  *(_QWORD *)((char *)&v54[2] + *(_QWORD *)(v54[0] - 24)) = 0;
  *(_DWORD *)((char *)&v54[1] + *(_QWORD *)(v23 - 24)) = *(_DWORD *)((_BYTE *)&v54[1] + *(_QWORD *)(v23 - 24)) & 0xFFFFFEFB | 4;
  do
  {
    *(_QWORD *)((char *)&v54[3] + *(_QWORD *)(v54[0] - 24)) = 8;
    std::ostream::operator<<();
    v22 += 4;
  }
  while (v22 != 40);
  v24 = v54[0];
  *(_QWORD *)((char *)&v54[2] + *(_QWORD *)(v54[0] - 24)) = 3;
  *(_DWORD *)((char *)&v54[1] + *(_QWORD *)(v24 - 24)) = *(_DWORD *)((_BYTE *)&v54[1] + *(_QWORD *)(v24 - 24)) & 0xFFFFFEFB | 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n* RT60 (sec):", 14);
  for (i = 0; i != 40; i += 4)
  {
    *(_QWORD *)((char *)&v54[3] + *(_QWORD *)(v54[0] - 24)) = 8;
    std::ostream::operator<<();
  }
  v26 = *(unsigned int *)(a1 + 20668);
  v27 = fabsf(*(float *)(a1 + 20544));
  if (v26 <= 1)
    v27 = 0.0;
  if ((_DWORD)v26)
  {
    v28 = (float *)(a1 + 20544);
    do
    {
      v29 = *v28++;
      v30 = fabsf(v29);
      if (v27 < v30)
        v27 = v30;
      --v26;
    }
    while (v26);
  }
  if (v27 > 0.0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n* EDT (sec): ", 14);
    for (j = 0; j != 40; j += 4)
    {
      *(_QWORD *)((char *)&v54[3] + *(_QWORD *)(v54[0] - 24)) = 8;
      std::ostream::operator<<();
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n* ER (dB):   ", 14);
  for (k = 0; k != 40; k += 4)
  {
    *(_QWORD *)((char *)&v54[3] + *(_QWORD *)(v54[0] - 24)) = 8;
    v33 = *(float *)(a3 + 40 + k);
    if (v33 <= 0.0)
      v33 = COERCE_FLOAT(1);
    logf(v33);
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n* LR (dB):   ", 14);
  v34 = 0;
  v35 = a3 + 80;
  do
  {
    *(_QWORD *)((char *)&v54[3] + *(_QWORD *)(v54[0] - 24)) = 8;
    v36 = *(float *)(v35 + v34);
    if (v36 <= 0.0)
      v36 = COERCE_FLOAT(1);
    logf(v36);
    std::ostream::operator<<();
    v34 += 4;
  }
  while (v34 != 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n* Mean Abs:  ", 14);
  for (m = 0; m != 40; m += 4)
  {
    *(_QWORD *)((char *)&v54[3] + *(_QWORD *)(v54[0] - 24)) = 8;
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n* Abs Corr:  ", 14);
  for (n = 0; n != 10; ++n)
  {
    *(_QWORD *)((char *)&v54[3] + *(_QWORD *)(v54[0] - 24)) = 8;
    std::ostream::operator<<();
  }
  *(_QWORD *)((char *)&v54[2] + *(_QWORD *)(v54[0] - 24)) = 1;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n* Sends (Offset ", 17);
  LODWORD(v39) = 1;
  if (a6 > 0.0)
    v39 = a6;
  logf(v39);
  v40 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"dB): ", 5);
  if (a2)
  {
    v41 = (_QWORD *)(a2 + 16);
    while (1)
    {
      v41 = (_QWORD *)*v41;
      if (!v41)
        break;
      *(_QWORD *)((char *)&v54[3] + *(_QWORD *)(v54[0] - 24)) = 3;
      v42 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" (", 2);
      v43 = (_QWORD *)std::ostream::operator<<();
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"m)", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" ", 1);
      v45 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"dB, ", 4);
    }
  }
  v46 = (Phase::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n", 1);
  v47 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v46) + 1184);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str();
    v48 = v52 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315650;
    v58 = "RoomSimulationLoggingFunctions.cpp";
    v59 = 1024;
    v60 = 642;
    v61 = 2080;
    v62 = v48;
    _os_log_impl(&dword_2164CC000, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d \n%s", buf, 0x1Cu);
    if (v52 < 0)
      operator delete(__p);
  }
  v53[0] = *MEMORY[0x24BEDB7F0];
  v49 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v53 + *(_QWORD *)(v53[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v54[0] = v49;
  v54[1] = MEMORY[0x24BEDB848] + 16;
  if (v55 < 0)
    operator delete((void *)v54[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2199F9CD4](&v56);
}

void sub_2166B2B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logTRAP(uint64_t a1)
{
  _QWORD *v2;
  const char *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  Phase::Logger *v36;
  NSObject *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  std::ios_base *v44;
  Phase::Logger *v45;
  _BYTE *v46;
  uint64_t v47;
  _QWORD *v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v53;
  _QWORD v54[2];
  _QWORD v55[11];
  char v56;
  uint64_t v57;
  char v58;
  _BYTE __p[18];
  __int16 v60;
  uint64_t v61;
  _BYTE buf[12];
  __int16 v63;
  int v64;
  __int16 v65;
  _BYTE *v66;
  _BYTE v67[96];
  uint64_t v68;
  _QWORD v69[20];

  v69[19] = *MEMORY[0x24BDAC8D0];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"=== TargetRoomAcousticParametersProcessor Log ===\n", 50);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Curated:", 8);
  if (*(_BYTE *)a1)
    v3 = "Y";
  else
    v3 = "N";
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\n", 1);
  v5 = v55[0];
  *(_QWORD *)((char *)&v55[2] + *(_QWORD *)(v55[0] - 24)) = 0;
  *(_DWORD *)((char *)&v55[1] + *(_QWORD *)(v5 - 24)) = *(_DWORD *)((_BYTE *)&v55[1] + *(_QWORD *)(v5 - 24)) & 0xFFFFFEFB | 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Blending:ARE:", 13);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"%/PRR:", 6);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"% SB:", 5);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"%/ARE&PRR:", 10);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"%\n", 2);
  v10 = v55[0];
  *(_QWORD *)((char *)&v55[2] + *(_QWORD *)(v55[0] - 24)) = 2;
  *(_DWORD *)((char *)&v55[1] + *(_QWORD *)(v10 - 24)) = *(_DWORD *)((_BYTE *)&v55[1] + *(_QWORD *)(v10 - 24)) & 0xFFFFFEFB | 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Broadband:ARE:", 14);
  v11 = (_QWORD *)std::ostream::operator<<();
  buf[0] = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)buf, 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") PRR:", 6);
  v13 = (_QWORD *)std::ostream::operator<<();
  buf[0] = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)buf, 1);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)") ARE&PRR:", 10);
  v15 = (_QWORD *)std::ostream::operator<<();
  buf[0] = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)buf, 1);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") SB:", 5);
  v17 = (_QWORD *)std::ostream::operator<<();
  buf[0] = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)buf, 1);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)") Final:", 8);
  v19 = (_QWORD *)std::ostream::operator<<();
  buf[0] = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)buf, 1);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)")\n", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"RC:Prob:", 8);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" Conf:", 6);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" Max:", 5);
  v23 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" AREMul:", 8);
  v24 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" Env:", 5);
  v25 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" Rate:", 6);
  std::ostream::operator<<();
  v53 = v54;
  Phase::SpatialModeler::RoomSimulationLogging::logTRAP(Phase::SpatialModeler::RoomSimulationLogging::TRAPLogData const&)::$_0::operator()<char const*,Phase::Subbands<float>,Phase::Subbands<float>>(&v53, "ARE:");
  Phase::SpatialModeler::RoomSimulationLogging::logTRAP(Phase::SpatialModeler::RoomSimulationLogging::TRAPLogData const&)::$_0::operator()<char const*,Phase::Subbands<float>,Phase::Subbands<float>>(&v53, "PRR:");
  Phase::SpatialModeler::RoomSimulationLogging::logTRAP(Phase::SpatialModeler::RoomSimulationLogging::TRAPLogData const&)::$_0::operator()<char const*,Phase::Subbands<float>,Phase::Subbands<float>>(&v53, "ARE&PRR:");
  Phase::SpatialModeler::RoomSimulationLogging::logTRAP(Phase::SpatialModeler::RoomSimulationLogging::TRAPLogData const&)::$_0::operator()<char const*,Phase::Subbands<float>,Phase::Subbands<float>>(&v53, "SB:");
  buf[0] = 10;
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)buf, 1);
  v27 = *v26;
  *(_DWORD *)((char *)v26 + *(_QWORD *)(*v26 - 24) + 8) = *(_DWORD *)((_BYTE *)v26 + *(_QWORD *)(*v26 - 24) + 8) & 0xFFFFFF4F | 0x20;
  *(uint64_t *)((char *)v26 + *(_QWORD *)(v27 - 24) + 24) = 8;
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Pre-RL:", 7);
  v29 = 0;
  *(_DWORD *)((char *)v28 + *(_QWORD *)(*v28 - 24) + 8) = *(_DWORD *)((_BYTE *)v28 + *(_QWORD *)(*v28 - 24) + 8) & 0xFFFFFF4F | 0x80;
  do
  {
    if (v29)
      v30 = 11;
    else
      v30 = 4;
    *(_QWORD *)((char *)&v55[3] + *(_QWORD *)(v55[0] - 24)) = v30;
    std::ostream::operator<<();
    ++v29;
  }
  while (v29 != 10);
  buf[0] = 10;
  v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)buf, 1);
  v32 = *v31;
  *(_DWORD *)((char *)v31 + *(_QWORD *)(*v31 - 24) + 8) = *(_DWORD *)((_BYTE *)v31 + *(_QWORD *)(*v31 - 24) + 8) & 0xFFFFFF4F | 0x20;
  *(uint64_t *)((char *)v31 + *(_QWORD *)(v32 - 24) + 24) = 8;
  v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Final:", 6);
  v34 = 0;
  *(_DWORD *)((char *)v33 + *(_QWORD *)(*v33 - 24) + 8) = *(_DWORD *)((_BYTE *)v33 + *(_QWORD *)(*v33 - 24) + 8) & 0xFFFFFF4F | 0x80;
  do
  {
    if (v34)
      v35 = 11;
    else
      v35 = 4;
    *(_QWORD *)((char *)&v55[3] + *(_QWORD *)(v55[0] - 24)) = v35;
    v36 = (Phase::Logger *)std::ostream::operator<<();
    ++v34;
  }
  while (v34 != 10);
  v37 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v36) + 1184);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str();
    v38 = (v61 & 0x80000000) == 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "RoomSimulationLoggingFunctions.cpp";
    v63 = 1024;
    v64 = 684;
    v65 = 2080;
    v66 = v38;
    _os_log_impl(&dword_2164CC000, v37, OS_LOG_TYPE_DEFAULT, "%25s:%-5d \n%s", buf, 0x1Cu);
    if (SBYTE3(v61) < 0)
      operator delete(*(void **)__p);
  }
  if (*(_QWORD *)(a1 + 1360))
  {
    v39 = MEMORY[0x24BEDB840];
    v40 = MEMORY[0x24BEDB840] + 64;
    v41 = (_QWORD *)MEMORY[0x24BEDB7E8];
    v42 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
    v43 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
    v69[0] = MEMORY[0x24BEDB840] + 64;
    *(_QWORD *)buf = v42;
    *(_QWORD *)&buf[*(_QWORD *)(v42 - 24)] = v43;
    v44 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
    std::ios_base::init(v44, &buf[8]);
    v44[1].__vftable = 0;
    v44[1].__fmtflags_ = -1;
    *(_QWORD *)buf = v39 + 24;
    v69[0] = v40;
    MEMORY[0x2199F9A1C](&buf[8]);
    v45 = (Phase::Logger *)std::ofstream::open();
    if (v68)
    {
      std::stringbuf::str();
      if ((v61 & 0x80000000) == 0)
        v46 = __p;
      else
        v46 = *(_BYTE **)__p;
      if ((v61 & 0x80000000) == 0)
        v47 = BYTE3(v61);
      else
        v47 = *(_QWORD *)&__p[8];
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v46, v47);
      v58 = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)&v58, 1);
      if (SBYTE3(v61) < 0)
        operator delete(*(void **)__p);
      if (!std::filebuf::close())
        std::ios_base::clear((std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)], *(_DWORD *)&v67[*(_QWORD *)(*(_QWORD *)buf - 24)] | 4);
    }
    else
    {
      v49 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v45) + 1184);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        v50 = *(_QWORD *)(a1 + 1360);
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = "RoomSimulationLoggingFunctions.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 691;
        v60 = 2080;
        v61 = v50;
        _os_log_impl(&dword_2164CC000, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot open %s\n;", __p, 0x1Cu);
      }
    }
    *(_QWORD *)buf = *v41;
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v41[3];
    MEMORY[0x2199F9A28](&buf[8]);
    std::ostream::~ostream();
    MEMORY[0x2199F9CD4](v69);
  }
  v54[0] = *MEMORY[0x24BEDB7F0];
  v51 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v54 + *(_QWORD *)(v54[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v55[0] = v51;
  v55[1] = MEMORY[0x24BEDB848] + 16;
  if (v56 < 0)
    operator delete((void *)v55[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2199F9CD4](&v57);
}

void sub_2166B3524(_Unwind_Exception *a1)
{
  std::ofstream::~ofstream(&STACK[0x650]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x510]);
  _Unwind_Resume(a1);
}

_QWORD *Phase::SpatialModeler::RoomSimulationLogging::logTRAP(Phase::SpatialModeler::RoomSimulationLogging::TRAPLogData const&)::$_0::operator()<char const*,Phase::Subbands<float>,Phase::Subbands<float>>(_QWORD *a1, const char *a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  size_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *result;
  char v17;
  char v18;
  char v19;

  v4 = (_QWORD *)(*a1 + 16);
  v17 = 10;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v17, 1);
  v6 = *v5;
  *(_DWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 8) & 0xFFFFFF4F | 0x20;
  *(uint64_t *)((char *)v5 + *(_QWORD *)(v6 - 24) + 24) = 8;
  v7 = strlen(a2);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)a2, v7);
  v9 = 0;
  v10 = *a1;
  v11 = (_QWORD *)(*a1 + 16);
  *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 8) & 0xFFFFFF4F | 0x80;
  v12 = v10 + 40;
  do
  {
    if (v9)
      v13 = 5;
    else
      v13 = 4;
    *(_QWORD *)(v12 + *(_QWORD *)(*v11 - 24)) = v13;
    v14 = (_QWORD *)std::ostream::operator<<();
    v18 = 40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v18, 1);
    v15 = (_QWORD *)std::ostream::operator<<();
    v19 = 41;
    result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v19, 1);
    ++v9;
  }
  while (v9 != 10);
  return result;
}

Phase::SpatialModeler::RoomSimulation *Phase::SpatialModeler::RoomSimulation::RoomSimulation(Phase::SpatialModeler::RoomSimulation *this)
{
  int *InstancePtr;
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  Phase::SpatialModeler::RayTracerState *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  NSObject *v27;
  double v28;
  Phase::Logger *v29;
  NSObject *v30;
  _BOOL8 v31;
  int v32;
  Phase::Logger *v33;
  NSObject *v34;
  _BOOL8 v35;
  int v36;
  Phase::Logger *v37;
  NSObject *v38;
  double v39;
  char v40;
  int v41;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  double v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 1) = &off_24D577A80;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0xFFFFFFFFLL;
  *(_QWORD *)this = &off_24D57C940;
  *((_QWORD *)this + 5) = 0x40E7700000000000;
  InstancePtr = (int *)Phase::Logger::GetInstancePtr(this);
  v3 = InstancePtr[303];
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 6) = v3;
  *(_QWORD *)((char *)this + 60) = 0;
  *((_QWORD *)this + 9) = &off_24D580D10;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_QWORD *)this + 58) = 0;
  *((_DWORD *)this + 118) = -1082130432;
  *((_BYTE *)this + 476) = 0;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 652) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_DWORD *)this + 176) = 0;
  *(_QWORD *)((char *)this + 708) = 7;
  *((_DWORD *)this + 179) = 0;
  *((_QWORD *)this + 90) = 0x3C00000000;
  *((_DWORD *)this + 190) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_QWORD *)((char *)this + 764) = 7;
  *((_DWORD *)this + 193) = 0;
  *((_QWORD *)this + 97) = 0x3C00000000;
  *((_QWORD *)this + 100) = 0;
  *((_QWORD *)this + 98) = 0;
  *((_QWORD *)this + 99) = 0;
  *((_QWORD *)this + 101) = 0x100000000;
  *((_QWORD *)this + 102) = 0;
  *((_QWORD *)this + 103) = 0;
  *((_QWORD *)this + 104) = 0x3C00000000;
  *((_QWORD *)this + 106) = 0;
  *((_DWORD *)this + 214) = 0;
  *((_QWORD *)this + 105) = 0;
  *((_BYTE *)this + 852) = 1;
  *(_QWORD *)((char *)this + 868) = 0;
  *(_QWORD *)((char *)this + 860) = 0;
  *((_DWORD *)this + 219) = 0;
  *((_BYTE *)this + 872) = 1;
  *((_QWORD *)this + 114) = 0;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_BYTE *)this + 916) = 1;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 1016) = xmmword_21673ABC0;
  *((_DWORD *)this + 258) = 60;
  *(_QWORD *)((char *)this + 1036) = 1048576000;
  *((_OWORD *)this + 66) = xmmword_216739DF0;
  *((_QWORD *)this + 134) = 0x800000000100;
  *((_BYTE *)this + 1080) = 0;
  *((_DWORD *)this + 271) = 1000593162;
  *((_OWORD *)this + 68) = xmmword_2166F7FE0;
  *((_QWORD *)this + 138) = 1000;
  *(_OWORD *)((char *)this + 1112) = xmmword_2166F7FF0;
  *((_QWORD *)this + 141) = 0x4040000040800000;
  *((_DWORD *)this + 284) = 1167867904;
  *((_DWORD *)this + 285) = 0x1000000;
  *(_OWORD *)((char *)this + 1144) = xmmword_2166F8000;
  *((_DWORD *)this + 290) = 4;
  *((_BYTE *)this + 1164) = 1;
  *((_QWORD *)this + 146) = 0xC2700000C1D00000;
  *((_DWORD *)this + 294) = 16777473;
  *(_QWORD *)((char *)this + 1180) = 0x4E20000003E8;
  *((_BYTE *)this + 1188) = 1;
  *((_QWORD *)this + 149) = 0x430300003DDB22D1;
  *((_DWORD *)this + 300) = 256;
  *(_OWORD *)((char *)this + 1208) = xmmword_21673ABD0;
  *((_BYTE *)this + 1224) = 0;
  *((_DWORD *)this + 307) = 0;
  *((_QWORD *)this + 154) = 0x4248000042C80000;
  *((_DWORD *)this + 310) = 1112014848;
  *((_BYTE *)this + 1244) = 0;
  *((_OWORD *)this + 78) = xmmword_21673ABE0;
  *((_BYTE *)this + 1264) = 0;
  *((_DWORD *)this + 317) = 0;
  *((_DWORD *)this + 318) = 0;
  *((_DWORD *)this + 319) = 0;
  v4 = Phase::Controller::sClamp<float>((Phase::Logger *)InstancePtr, 101320.0, 5000.0, 3.4028e38);
  v5 = *((float *)this + 315);
  if (v4 != v5)
  {
    *((float *)this + 315) = v4;
    *((_BYTE *)this + 1264) = 1;
    v5 = v4;
  }
  v6 = *((float *)this + 305);
  v7 = *((float *)this + 310);
  v8 = __exp10f((float)((float)(v6 / 273.16) + -1.0) * -8.2969);
  v9 = (float)(-273.16 / v6) + 1.0;
  v10 = __exp10f(v9 * -4.7695);
  v11 = log10f(v6 / 273.16);
  v12 = __exp10f((float)((float)((float)((float)(v11 * -5.0281) + (float)(v9 * 10.796))+ (float)((float)(1.0 - v8) * 0.00015047))+ (float)((float)(v10 + -1.0) * 0.00042873))+ -2.2196);
  v13 = (float)(v5 / 1000.0) / 101.32;
  v14 = (float)(v7 * v12) / v13;
  *((float *)this + 317) = v13
                         * (float)((float)((float)(v14 * 40400.0) * (float)((float)(v14 + 0.02) / (float)(v14 + 0.391)))
                                 + 24.0);
  v15 = v13 * powf(v6 / 293.16, -0.5);
  v16 = powf(v6 / 293.16, -0.33333);
  *((float *)this + 318) = v15 * (float)((float)((float)(v14 * 280.0) * expf((float)(v16 + -1.0) * -4.17)) + 9.0);
  v17 = v6 + -273.15;
  v18 = v17 * v17;
  v19 = expf((float)(v6 * -0.019121) + (float)((float)((float)(v6 * v6) * 1.2379) * 0.00001));
  v20 = (float)((float)((float)(expf((float)(-6343.2 / v6) + 33.937) * v19)
                      * (float)(v7
                              * (float)((float)((float)(v5 * 0.0000000314) + 1.0006)
                                      + (float)((float)((float)(v17 * v17) * 5.6) * 0.0000001))))
              / v5)
      / 100.0;
  *((float *)this + 319) = (float)((float)((float)((float)((float)((float)(v17 * -0.22852) + -85.209)
                                                         + (float)((float)(v18 * 5.91) / 100000.0))
                                                 * 0.0004)
                                         + (float)((float)((float)((float)(v17 * 0.0000000373) + -0.000000182)
                                                         + (float)((float)(v18 * -2.93) / 1.0e10))
                                                 * v5))
                                 + (float)((float)((float)((float)(v17 * 0.60306) + 331.5)
                                                 + (float)((float)(v18 * -5.28) / 10000.0))
                                         + (float)((float)((float)((float)(v17 * 0.14959) + 51.472)
                                                         + (float)((float)(v18 * -7.82) / 10000.0))
                                                 * v20)))
                         - (float)((float)((float)((float)((float)((float)(v5 * v5) * 2.15) / 1.0e13)
                                                 + (float)((float)(v20 * v20) * 2.8351))
                                         + -0.0000046688)
                                 + (float)((float)(v5 * (float)(v20 * -0.000486)) * 0.0004));
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_DWORD *)this + 324) = 0;
  *(_OWORD *)((char *)this + 1304) = 0u;
  *((_QWORD *)this + 168) = 850045863;
  *(_OWORD *)((char *)this + 1352) = 0u;
  *(_OWORD *)((char *)this + 1368) = 0u;
  *(_OWORD *)((char *)this + 1384) = 0u;
  *(_OWORD *)((char *)this + 1400) = 0u;
  Phase::SpatialModeler::RayTracerState::RayTracerState((Phase::SpatialModeler::RoomSimulation *)((char *)this + 1424));
  *((_OWORD *)this + 1659) = 0u;
  *((_OWORD *)this + 1658) = 0u;
  *((_OWORD *)this + 1657) = 0u;
  *((_OWORD *)this + 1656) = 0u;
  *((_OWORD *)this + 1655) = 0u;
  *(_OWORD *)((char *)this + 26556) = 0u;
  *((_QWORD *)this + 3322) = (unint64_t)(*(float *)&Phase::SpatialModeler::TailCorrection::sMinTimeBetweenLogs_sec
                                              * 24000000.0);
  *((_QWORD *)this + 3323) = 0;
  *((_DWORD *)this + 6648) = 0;
  *((_BYTE *)this + 26600) = 0;
  *((_QWORD *)this + 3326) = 0;
  *((_QWORD *)this + 3328) = 0;
  *((_QWORD *)this + 3327) = 0;
  *((_QWORD *)this + 3330) = 850045863;
  *(_OWORD *)((char *)this + 26648) = 0u;
  *(_OWORD *)((char *)this + 26664) = 0u;
  *(_OWORD *)((char *)this + 26680) = 0u;
  *(_OWORD *)((char *)this + 26696) = 0u;
  v21 = Phase::SpatialModeler::RayTracerState::RayTracerState((Phase::SpatialModeler::RoomSimulation *)((char *)this + 26720));
  *((_OWORD *)this + 3240) = 0u;
  *((_OWORD *)this + 3239) = 0u;
  *((_OWORD *)this + 3238) = 0u;
  *((_OWORD *)this + 3237) = 0u;
  *((_OWORD *)this + 3236) = 0u;
  *(_OWORD *)((char *)this + 51852) = 0u;
  *((_QWORD *)this + 6484) = (unint64_t)(*(float *)&Phase::SpatialModeler::TailCorrection::sMinTimeBetweenLogs_sec
                                              * 24000000.0);
  *((_QWORD *)this + 6485) = 0;
  *((_DWORD *)this + 12972) = 0;
  *((_BYTE *)this + 51896) = 0;
  *((_QWORD *)this + 6488) = 0;
  *((_QWORD *)this + 6490) = 0;
  *((_QWORD *)this + 6489) = 0;
  *((_OWORD *)this + 3246) = 0u;
  *((_OWORD *)this + 3247) = 0u;
  *((_OWORD *)this + 3248) = xmmword_21673ABF0;
  *((_DWORD *)this + 12996) = 0;
  v22 = *((_QWORD *)this + 6);
  if (v22)
  {
    v23 = (char *)operator new(0x18uLL);
    v24 = v23;
    v25 = 0;
    v26 = v23 + 24;
    *(_OWORD *)v23 = constinit_4;
    *((_QWORD *)v23 + 2) = 31;
    while (*(_QWORD *)&v23[v25] != v22)
    {
      v25 += 8;
      if (v25 == 24)
        goto LABEL_10;
    }
    v26 = &v23[v25];
LABEL_10:
    if (v26 - v23 == 24)
    {
      v27 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v23) + 1184);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        v28 = *((double *)this + 6);
        *(_DWORD *)buf = 136315650;
        v44 = "RoomSimulationModelerBase.cpp";
        v45 = 1024;
        v46 = 30;
        v47 = 2048;
        v48 = v28;
        _os_log_impl(&dword_2164CC000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported room simulation internal subband count: %zu\n", buf, 0x1Cu);
      }
      *((_QWORD *)this + 6) = 10;
    }
    operator delete(v24);
  }
  else
  {
    *((_QWORD *)this + 6) = 10;
  }
  v29 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v21);
  *((_BYTE *)this + 1044) = *((_BYTE *)v29 + 1510);
  v30 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v29) + 1184);
  v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
  if (v31)
  {
    v32 = *((unsigned __int8 *)this + 1044);
    *(_DWORD *)buf = 136315650;
    v44 = "RoomChangeDetector.hpp";
    v45 = 1024;
    v46 = 240;
    v47 = 1024;
    LODWORD(v48) = v32;
    _os_log_impl(&dword_2164CC000, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RoomChangeDetector::ReadDefaultsWriteFlags - mLogRoomChangeDetectorData %d", buf, 0x18u);
  }
  v33 = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)v31);
  *((_BYTE *)this + 1045) = *((_BYTE *)v33 + 1511);
  v34 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v33) + 1184);
  v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
  if (v35)
  {
    v36 = *((unsigned __int8 *)this + 1045);
    *(_DWORD *)buf = 136315650;
    v44 = "RoomChangeDetector.hpp";
    v45 = 1024;
    v46 = 246;
    v47 = 1024;
    LODWORD(v48) = v36;
    _os_log_impl(&dword_2164CC000, v34, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RoomChangeDetector::ReadDefaultsWriteFlags - mEnableRoomChangeMfpFixedSE %d", buf, 0x18u);
  }
  v37 = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)v35);
  *((_DWORD *)this + 262) = *((_DWORD *)v37 + 378);
  v38 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v37) + 1184);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    v39 = *((float *)this + 262);
    *(_DWORD *)buf = 136315650;
    v44 = "RoomChangeDetector.hpp";
    v45 = 1024;
    v46 = 252;
    v47 = 2048;
    v48 = v39;
    _os_log_impl(&dword_2164CC000, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RoomChangeDetector::ReadDefaultsWriteFlags - mRoomChangeMfpSE %f (NaN == non set, will be ignored)", buf, 0x1Cu);
  }
  v40 = *((_BYTE *)this + 1045);
  v41 = *((_DWORD *)this + 263);
  *((float *)this + 210) = *((float *)this + 262) / 2.8284;
  *(_QWORD *)((char *)this + 844) = 0x4100000040395F97;
  *((_BYTE *)this + 852) = v40;
  *((_DWORD *)this + 214) = v41;
  *((_OWORD *)this + 55) = xmmword_21673AC00;
  *((_OWORD *)this + 56) = xmmword_21673AC10;
  *((_DWORD *)this + 228) = 0x40000000;
  *((_BYTE *)this + 916) = 1;
  *((_QWORD *)this + 115) = 0;
  *((_DWORD *)this + 232) = 0;
  return this;
}

void sub_2166B41F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::error_category *v2;
  uint64_t v3;
  std::error_category *v4;
  uint64_t v5;
  Phase::SpatialModeler::RoomSimulation::PersistingSimulationData *v6;
  Phase::SpatialModeler::RoomSimulation::PersistingSimulationData *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = v8;
  operator delete(v10);
  v12 = *(_QWORD *)(v9 + 88);
  *(_QWORD *)(v9 + 88) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(v9 + 80);
  *(_QWORD *)(v9 + 80) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 6492));
  Phase::SpatialModeler::RoomSimulation::PersistingSimulationData::~PersistingSimulationData(v7);
  Phase::SpatialModeler::RoomSimulation::PersistingSimulationData::~PersistingSimulationData(v6);
  Phase::SpatialModeler::HistogramPtrStack::Clear((Phase::SpatialModeler::HistogramPtrStack *)(v1 + 166));
  v14 = v1[164];
  v1[164] = 0;
  if (v14)
    std::default_delete<caulk::concurrent::multi_buffer<Phase::SpatialModeler::RayTracerState,3>>::operator()[abi:ne180100]((uint64_t)(v1 + 164), v14);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v3);
  std::error_category::~error_category(v4);
  *v1 = &off_24D577480;
  std::error_category::~error_category(v2);
  _Unwind_Resume(a1);
}

void sub_2166B42E4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x2166B42DCLL);
}

void Phase::SpatialModeler::RoomSimulation::PersistingSimulationData::~PersistingSimulationData(Phase::SpatialModeler::RoomSimulation::PersistingSimulationData *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 3158);
  if (v2)
  {
    *((_QWORD *)this + 3159) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3149);
  if (v3)
  {
    *((_QWORD *)this + 3150) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 3146);
  if (v4)
  {
    *((_QWORD *)this + 3147) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 3143);
  if (v5)
  {
    *((_QWORD *)this + 3144) = v5;
    operator delete(v5);
  }
  Phase::SpatialModeler::RayTracerState::~RayTracerState((void **)this + 10);
  std::mutex::~mutex((std::mutex *)this);
}

void Phase::SpatialModeler::RoomSimulation::InitERtoLRModelerCache(Phase::SpatialModeler::RoomSimulation *this)
{
  unsigned int v1;
  _DWORD *v2;
  uint64_t v3;
  _BYTE *v4;

  do
    v1 = __ldaxr(&Phase::SpatialModeler::RoomSimulation::sERtoLRModelerCacheReferenceCounter);
  while (__stlxr(v1 + 1, &Phase::SpatialModeler::RoomSimulation::sERtoLRModelerCacheReferenceCounter));
  if (!v1)
  {
    v2 = (_DWORD *)operator new();
    bzero(v2, 0x125E0uLL);
    *v2 = -1;
    v3 = 3;
    v4 = v2;
    do
    {
      v4[16] = 0;
      v4 += 25072;
      *v4 = 0;
      --v3;
    }
    while (v3);
    Phase::SpatialModeler::RoomSimulation::psERtoLRModelerCache = (uint64_t)v2;
  }
}

uint64_t Phase::SpatialModeler::RoomSimulation::DeinitERtoLRModelerCache(Phase::SpatialModeler::RoomSimulation *this)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  do
  {
    v1 = __ldaxr(&Phase::SpatialModeler::RoomSimulation::sERtoLRModelerCacheReferenceCounter);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, &Phase::SpatialModeler::RoomSimulation::sERtoLRModelerCacheReferenceCounter));
  if (!v2)
  {
    v3 = Phase::SpatialModeler::RoomSimulation::psERtoLRModelerCache;
    if (Phase::SpatialModeler::RoomSimulation::psERtoLRModelerCache)
    {
      v4 = 75216;
      v5 = 50160;
      do
      {
        if (*(_BYTE *)(v3 + v4))
          Phase::SpatialModeler::RayTracerState::~RayTracerState((void **)(v3 + v5));
        v5 -= 25072;
        v4 -= 25072;
      }
      while (v4);
      result = MEMORY[0x2199F9D70](v3, 0x10F2C409C7F06A9);
    }
    Phase::SpatialModeler::RoomSimulation::psERtoLRModelerCache = 0;
  }
  return result;
}

void Phase::SpatialModeler::RoomSimulation::StoreRayTracerStateToERtoLRModelerCache(Phase::SpatialModeler::RoomSimulation *this, Phase::SpatialModeler::RayTracerState *a2)
{
  uint64_t v2;
  const Phase::SpatialModeler::RayTracerState *v3;
  _BYTE *v4;
  unsigned int *v5;
  void *v6[3134];

  v2 = MEMORY[0x24BDAC7A8](this);
  v6[3133] = *(void **)MEMORY[0x24BDAC8D0];
  if (Phase::SpatialModeler::RoomSimulation::psERtoLRModelerCache)
  {
    v3 = (const Phase::SpatialModeler::RayTracerState *)v2;
    v4 = (_BYTE *)(v2 + 25041);
    *(_BYTE *)(v2 + 25041) = 1;
    *(std::chrono::steady_clock::time_point *)(v2 + 25048) = std::chrono::steady_clock::now();
    v5 = (unsigned int *)Phase::SpatialModeler::RoomSimulation::psERtoLRModelerCache;
    Phase::SpatialModeler::RayTracerState::RayTracerState((Phase::SpatialModeler::RayTracerState *)v6, v3);
    caulk::concurrent::multi_buffer<Phase::SpatialModeler::RayTracerState,3>::write(v5, (const Phase::SpatialModeler::RayTracerState *)v6);
    Phase::SpatialModeler::RayTracerState::~RayTracerState(v6);
    *v4 = 0;
  }
}

void sub_2166B4540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  Phase::SpatialModeler::RayTracerState::~RayTracerState(&a9);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::RoomSimulation::PersistingSimulationData::InitPersistingSimulationData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, Phase::SpatialModeler::RayTracerState *a6)
{
  NSObject *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 25120))
  {
    if (*(_QWORD *)(a1 + 22656) != *(_QWORD *)(a5 + 8)
      || (Phase::SpatialModeler::RayTracerState *)*(unsigned int *)(a1 + 412) != a6)
    {
      v6 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 1184);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = 136315394;
        v8 = "RoomSimulationModelerBase.cpp";
        v9 = 1024;
        v10 = 135;
        _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Spatial modeler queried with a changed listener or subband count. This is not supported yet.", (uint8_t *)&v7, 0x12u);
      }
    }
  }
  else
  {
    Phase::SpatialModeler::RayTracerState::InitRayTracerState(a1 + 80, a2, a3, a4, a5, a6);
  }
}

float Phase::Controller::sClamp<float>(Phase::Logger *a1, float a2, float a3, float a4)
{
  float v4;
  NSObject *v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  double v15;
  __int16 v16;
  double v17;
  __int16 v18;
  double v19;
  uint64_t v20;

  v4 = a2;
  v20 = *MEMORY[0x24BDAC8D0];
  if (a2 < a3 || a2 > a4)
  {
    v8 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 704);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v10 = 136316162;
      v11 = "CvmParameter.hpp";
      v12 = 1024;
      v13 = 33;
      v14 = 2048;
      v15 = v4;
      v16 = 2048;
      v17 = a3;
      v18 = 2048;
      v19 = a4;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Value is out of bounds. Clamping %f to range [%f, %f]", (uint8_t *)&v10, 0x30u);
    }
    return fminf(fmaxf(v4, a3), a4);
  }
  return v4;
}

BOOL Phase::SpatialModeler::TimeLimitTermination::ShouldFinishSimulation(Phase::SpatialModeler::TimeLimitTermination *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  std::chrono::steady_clock::time_point v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  _BOOL4 v10;

  v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v4 = *(_DWORD *)(*(_QWORD *)a2 + 32);
  if (v4 == 3)
  {
    v5 = *((float *)a2 + 12);
    v7 = *((float *)a2 + 31);
  }
  else
  {
    v5 = 0.0;
    v6 = 0.0;
    if (v4 != 2)
      goto LABEL_6;
    v5 = *((float *)a2 + 13);
    v7 = *((float *)a2 + 30);
  }
  v6 = 1.0 / v7;
LABEL_6:
  v8 = (float)(v3.__d_.__rep_ - *((_QWORD *)a2 + 2414)) / 1000000000.0;
  v10 = v8 > v5 && *((_DWORD *)a2 + 4832) >= *((_DWORD *)a2 + 43);
  return v8 > (float)(v6 * 0.8) || v10;
}

BOOL Phase::SpatialModeler::DeterministicTermination::ShouldFinishSimulation(Phase::SpatialModeler::DeterministicTermination *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  unint64_t v3;
  unint64_t v4;
  std::chrono::steady_clock::time_point v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  double v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  if (v3 < v4)
  {
    *((_QWORD *)this + 2) = v3 + 1;
  }
  else
  {
    v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v7 = *((_QWORD *)a2 + 2414);
    *((_QWORD *)this + 2) = 0;
    v8 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v6.__d_.__rep_) + 1184);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v11 = 136316162;
      v9 = *((_QWORD *)this + 2);
      v12 = "RoomSimulationStrategies.cpp";
      v13 = 1024;
      v14 = 49;
      v15 = 2048;
      v16 = v9;
      v17 = 1024;
      v18 = 1;
      v19 = 2048;
      v20 = (float)((float)(v6.__d_.__rep_ - v7) / 1000000000.0);
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d DeterministicTermination mQueryCount %zu shouldFinish %d elapsed time %f s", (uint8_t *)&v11, 0x2Cu);
    }
  }
  return v3 >= v4;
}

Phase::SpatialModeler::DefaultRayDistribution *Phase::SpatialModeler::DefaultRayDistribution::DefaultRayDistribution(Phase::SpatialModeler::DefaultRayDistribution *this)
{
  uint64_t *v2;
  Phase::SpatialModeler::LaunchConfig *v3;

  *(_QWORD *)this = &off_24D580DA0;
  *((_QWORD *)this + 2) = 0;
  v2 = (uint64_t *)((char *)this + 16);
  v3 = (Phase::SpatialModeler::LaunchConfig *)operator new();
  Phase::SpatialModeler::LaunchConfig::LaunchConfig(v3, 0x100u, 0x8000u);
  std::unique_ptr<Phase::SpatialModeler::LaunchConfig>::reset[abi:ne180100](v2, (uint64_t)v3);
  *((_QWORD *)this + 1) = 0x800000000000;
  return this;
}

void sub_2166B49C8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x2199F9D70](v2, 0x1020C40B3A03649);
  std::unique_ptr<Phase::SpatialModeler::LaunchConfig>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::DefaultRayDistribution::NextRay@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(this + 16);
  v3 = *(unsigned int *)(this + 8);
  if (*(_QWORD *)(v2 + 56) <= v3)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 16) + 12 * v3;
    v5 = *(_QWORD *)v4;
    v6 = *(_DWORD *)(v4 + 8);
  }
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(this + 8) = (v3 + 1) % *(_DWORD *)(this + 12);
  return this;
}

void Phase::SpatialModeler::DeterministicTermination::~DeterministicTermination(Phase::SpatialModeler::DeterministicTermination *this)
{
  JUMPOUT(0x2199F9D70);
}

void Phase::SpatialModeler::TimeLimitTermination::~TimeLimitTermination(Phase::SpatialModeler::TimeLimitTermination *this)
{
  JUMPOUT(0x2199F9D70);
}

void Phase::SpatialModeler::DefaultRayDistribution::~DefaultRayDistribution(Phase::SpatialModeler::DefaultRayDistribution *this)
{
  *(_QWORD *)this = &off_24D580DA0;
  std::unique_ptr<Phase::SpatialModeler::LaunchConfig>::reset[abi:ne180100]((uint64_t *)this + 2, 0);
}

{
  *(_QWORD *)this = &off_24D580DA0;
  std::unique_ptr<Phase::SpatialModeler::LaunchConfig>::reset[abi:ne180100]((uint64_t *)this + 2, 0);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::SpatialModeler::RayDistributionStrategyBase::GetNextRayIndex(Phase::SpatialModeler::RayDistributionStrategyBase *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::LaunchConfig>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)(v2 + 16));
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void Phase::SpatialModeler::TRAP::RT60Processor::Process(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  float v33;
  _BOOL8 IsExpectedInputSubbandCount;
  float *v35;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t v39;
  float32x4_t v40;
  float v41;
  float v42;
  NSObject *v43;
  int v44;
  char *v45;
  char *v46;
  uint64_t v47;
  float v48;
  float *v49;
  float v50;
  float v51;
  float *v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char v62;
  float *v63;
  uint64_t v64;
  float v65;
  uint8_t *v66;
  float *v67;
  float v68;
  uint64_t v69;
  __int32 v70;
  float32x4_t *v71;
  float v72;
  char *v73;
  Phase::SpatialModeler::TRAP *v74;
  float32x4_t *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  float32x4_t v95;
  __int128 v96;
  __int128 v97;
  float32x2_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  __int32 v104;
  _OWORD v105[7];
  __int128 v106;
  _OWORD v107[7];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  float32x4_t v125;
  __int128 v126;
  float32x4_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint8_t buf[32];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _BYTE v146[32];
  float32x4_t v147;
  __int128 v148;
  float32x4_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;

  v195 = *MEMORY[0x24BDAC8D0];
  v8 = a1[5];
  v9 = a4 + 21036;
  v137 = a1[4];
  v138 = v8;
  v10 = a1[7];
  v139 = a1[6];
  v140 = v10;
  v11 = a1[1];
  v133 = *a1;
  v134 = v11;
  v12 = a1[3];
  v135 = a1[2];
  v136 = v12;
  v13 = *(_OWORD *)(a2 + 80);
  v129 = *(_OWORD *)(a2 + 64);
  v130 = v13;
  v14 = *(_OWORD *)(a2 + 112);
  v131 = *(_OWORD *)(a2 + 96);
  v132 = v14;
  v15 = *(_OWORD *)(a2 + 16);
  v125 = *(float32x4_t *)a2;
  v126 = v15;
  v16 = *(_OWORD *)(a2 + 48);
  v127 = *(float32x4_t *)(a2 + 32);
  v128 = v16;
  v17 = *(_OWORD *)(a4 + 20112);
  v121 = *(_OWORD *)(a4 + 20096);
  v122 = v17;
  v18 = *(_OWORD *)(a4 + 20144);
  v123 = *(_OWORD *)(a4 + 20128);
  v124 = v18;
  v19 = *(_OWORD *)(a4 + 20048);
  v117 = *(_OWORD *)(a4 + 20032);
  v118 = v19;
  v20 = *(_OWORD *)(a4 + 20080);
  v119 = *(_OWORD *)(a4 + 20064);
  v120 = v20;
  v21 = *(_OWORD *)(a4 + 20240);
  v113 = *(_OWORD *)(a4 + 20224);
  v114 = v21;
  v22 = *(_OWORD *)(a4 + 20272);
  v115 = *(_OWORD *)(a4 + 20256);
  v116 = v22;
  v23 = *(_OWORD *)(a4 + 20176);
  v109 = *(_OWORD *)(a4 + 20160);
  v110 = v23;
  v24 = *(_OWORD *)(a4 + 20208);
  v111 = *(_OWORD *)(a4 + 20192);
  v112 = v24;
  v25 = *(_OWORD *)(a4 + 20368);
  v107[4] = *(_OWORD *)(a4 + 20352);
  v107[5] = v25;
  v26 = *(_OWORD *)(a4 + 20400);
  v107[6] = *(_OWORD *)(a4 + 20384);
  v108 = v26;
  v27 = *(_OWORD *)(a4 + 20304);
  v107[0] = *(_OWORD *)(a4 + 20288);
  v107[1] = v27;
  v28 = *(_OWORD *)(a4 + 20336);
  v107[2] = *(_OWORD *)(a4 + 20320);
  v107[3] = v28;
  v29 = *(_OWORD *)(a4 + 20496);
  v105[4] = *(_OWORD *)(a4 + 20480);
  v105[5] = v29;
  v30 = *(_OWORD *)(a4 + 20528);
  v105[6] = *(_OWORD *)(a4 + 20512);
  v106 = v30;
  v31 = *(_OWORD *)(a4 + 20432);
  v105[0] = *(_OWORD *)(a4 + 20416);
  v105[1] = v31;
  v32 = *(_OWORD *)(a4 + 20464);
  v105[2] = *(_OWORD *)(a4 + 20448);
  v105[3] = v32;
  v33 = *(float *)(a4 + 21036);
  IsExpectedInputSubbandCount = Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)&v133, (uint64_t)"inOutAcousticReverbTime");
  if (IsExpectedInputSubbandCount)
  {
    IsExpectedInputSubbandCount = Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)&v125, (uint64_t)"inOutAcousticConfidence");
    if (IsExpectedInputSubbandCount)
    {
      IsExpectedInputSubbandCount = Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)&v117, (uint64_t)"inOutVisualReverbTime");
      if (IsExpectedInputSubbandCount)
      {
        IsExpectedInputSubbandCount = Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)&v109, (uint64_t)"inOutVisualConfidence");
        if (IsExpectedInputSubbandCount)
        {
          IsExpectedInputSubbandCount = Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)v107, (uint64_t)"inOutSeatbeltReverbTime");
          if (IsExpectedInputSubbandCount)
          {
            IsExpectedInputSubbandCount = Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)v105, (uint64_t)"inOutSeatbeltConfidence");
            if (IsExpectedInputSubbandCount)
            {
              for (i = 0; i != 10; ++i)
                Phase::SpatialModeler::TRAP::CleanInputReverbTimeAndConfidence((Phase::SpatialModeler::TRAP *)((char *)&v133 + i * 4), &v125.f32[i], v35);
              for (j = 0; j != 40; j += 4)
                Phase::SpatialModeler::TRAP::CleanInputReverbTimeAndConfidence((Phase::SpatialModeler::TRAP *)((char *)&v117 + j), (float *)((char *)&v109 + j), v35);
              for (k = 0; k != 40; k += 4)
                Phase::SpatialModeler::TRAP::CleanInputReverbTimeAndConfidence((Phase::SpatialModeler::TRAP *)((char *)v107 + k), (float *)((char *)v105 + k), v35);
              v33 = fminf(fmaxf(v33, 0.0), 1.0);
            }
          }
        }
      }
    }
  }
  v41 = Phase::SpatialModeler::TRAP::CalculateRoomChangeConfidence((Phase::SpatialModeler::TRAP *)IsExpectedInputSubbandCount, v33);
  if (*(_QWORD *)(a4 + 21432) == *(_QWORD *)(a3 + 736))
  {
    v42 = *(float *)(v9 + 404);
  }
  else
  {
    v43 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v39) + 1184);
    v39 = os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v39)
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "RT60Processor.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 46;
      _os_log_impl(&dword_2164CC000, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d TRAP detected new acoustic parameters", buf, 0x12u);
    }
    *(_QWORD *)(a4 + 21432) = *(_QWORD *)(a3 + 736);
    *(_DWORD *)(v9 + 404) = 0;
    v42 = 0.0;
  }
  if (v42 < v41)
    *(float *)(v9 + 404) = v41;
  v44 = *(_DWORD *)(a3 + 24);
  if (v44 == 2)
    goto LABEL_25;
  if (v44 != -1)
  {
    v62 = 0;
    goto LABEL_45;
  }
  v45 = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v39);
  v39 = Phase::operator==<float>((uint64_t)a1, (uint64_t)(v45 + 144));
  if ((_DWORD)v39
    && (v46 = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v39),
        v39 = Phase::operator==<float>(a2, (uint64_t)(v46 + 272)),
        (_DWORD)v39))
  {
LABEL_25:
    v47 = HIDWORD(v106);
    if (HIDWORD(v106) <= 1uLL)
      v48 = 0.0;
    else
      v48 = *(float *)v105;
    if (HIDWORD(v106))
    {
      v49 = (float *)v105;
      do
      {
        v50 = *v49++;
        v51 = v50;
        if (v48 < v50)
          v48 = v51;
        --v47;
      }
      while (v47);
    }
    v52 = (float *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v39);
    if (v48 >= v52[126])
    {
      v63 = (float *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v52);
      v64 = HIDWORD(v108);
      memset(buf, 0, sizeof(buf));
      v142 = 0u;
      v143 = 0u;
      v144 = 0u;
      v145 = 0u;
      memset(v146, 0, 28);
      *(_DWORD *)&v146[28] = HIDWORD(v108);
      if (HIDWORD(v108))
      {
        v65 = v63[113];
        v66 = buf;
        v67 = (float *)v107;
        do
        {
          v68 = *v67++;
          *(float *)v66 = v65 * v68;
          v66 += 4;
          --v64;
        }
        while (v64);
      }
      v137 = v144;
      v138 = v145;
      v139 = *(_OWORD *)v146;
      v140 = *(_OWORD *)&v146[16];
      v133 = *(_OWORD *)buf;
      v134 = *(_OWORD *)&buf[16];
      v135 = v142;
      v136 = v143;
      v39 = (uint64_t)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v63);
      v69 = HIDWORD(v132);
      if (HIDWORD(v132))
      {
        v70 = *(_DWORD *)(v39 + 456);
        v71 = &v125;
        do
        {
          v71->i32[0] = v70;
          v71 = (float32x4_t *)((char *)v71 + 4);
          --v69;
        }
        while (v69);
      }
    }
    else
    {
      v53 = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v52);
      v54 = *((_OWORD *)v53 + 14);
      v137 = *((_OWORD *)v53 + 13);
      v138 = v54;
      v55 = *((_OWORD *)v53 + 16);
      v139 = *((_OWORD *)v53 + 15);
      v140 = v55;
      v56 = *((_OWORD *)v53 + 10);
      v133 = *((_OWORD *)v53 + 9);
      v134 = v56;
      v57 = *((_OWORD *)v53 + 12);
      v135 = *((_OWORD *)v53 + 11);
      v136 = v57;
      v39 = (uint64_t)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v53);
      v58 = *(_OWORD *)(v39 + 352);
      v129 = *(_OWORD *)(v39 + 336);
      v130 = v58;
      v59 = *(_OWORD *)(v39 + 384);
      v131 = *(_OWORD *)(v39 + 368);
      v132 = v59;
      v60 = *(_OWORD *)(v39 + 288);
      v125 = *(float32x4_t *)(v39 + 272);
      v126 = v60;
      v40 = *(float32x4_t *)(v39 + 304);
      v61 = *(_OWORD *)(v39 + 320);
      v127 = v40;
      v128 = v61;
    }
    *(_DWORD *)(v9 + 404) = 0;
    v62 = 1;
  }
  else
  {
    v62 = 0;
  }
  v44 = *(_DWORD *)(a3 + 24);
LABEL_45:
  v40.i32[0] = 1.0;
  if (v44 != 3)
  {
    v72 = *(float *)(v9 + 404);
    v73 = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v39);
    v40.f32[0] = 1.0 - powf(v72, *((float *)v73 + 123));
  }
  v104 = v40.i32[0];
  Phase::Subbands<float>::operator*=(&v125, (float *)&v104, v40);
  if (*(_DWORD *)(a3 + 24) == -1)
  {
    v75 = (float32x4_t *)Phase::SpatialModeler::TRAP::TP(v74);
    Phase::Subbands<float>::operator*=(&v125, v75 + 1);
  }
  v144 = v137;
  v145 = v138;
  *(_OWORD *)v146 = v139;
  *(_OWORD *)&v146[16] = v140;
  *(_OWORD *)buf = v133;
  *(_OWORD *)&buf[16] = v134;
  v142 = v135;
  v143 = v136;
  v149 = v127;
  v150 = v128;
  v147 = v125;
  v148 = v126;
  v154 = v132;
  v152 = v130;
  v153 = v131;
  v151 = v129;
  v158 = v120;
  v157 = v119;
  v156 = v118;
  v155 = v117;
  v162 = v124;
  v161 = v123;
  v160 = v122;
  v159 = v121;
  v166 = v112;
  v165 = v111;
  v164 = v110;
  v163 = v109;
  v170 = v116;
  v169 = v115;
  v168 = v114;
  v167 = v113;
  v194 = 0u;
  v193 = 0u;
  v192 = 0u;
  v191 = 0u;
  v190 = 0u;
  v189 = 0u;
  v188 = 0u;
  v187 = 0u;
  v186 = 0u;
  v185 = 0u;
  v184 = 0u;
  v183 = 0u;
  v182 = 0u;
  v181 = 0u;
  v180 = 0u;
  v179 = 0u;
  v178 = 0u;
  v177 = 0u;
  v176 = 0u;
  v175 = 0u;
  v174 = 0u;
  v173 = 0u;
  v172 = 0u;
  v171 = 0u;
  Phase::SpatialModeler::TRAP::MixMultibandValuesAndConfidences((uint64_t)buf, &v98, (float (*)(float))Phase::Logarithm<float>, (float (*)(float))Phase::Exponential<float>, (float (*)(float, float, float, float))Phase::SpatialModeler::TRAP::CalculateAcousticAndVisualMix, (float (*)(float))Phase::SpatialModeler::TRAP::RT60Processor::Process(Phase::Subbands<float> const&,Phase::Subbands<float> const&,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_0::__invoke, (float (*)(float))Phase::SpatialModeler::TRAP::RT60Processor::Process(Phase::Subbands<float> const&,Phase::Subbands<float> const&,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_1::__invoke);
  v76 = v176;
  *(_OWORD *)(a4 + 21232) = v175;
  *(_OWORD *)(a4 + 21248) = v76;
  v77 = v178;
  *(_OWORD *)(a4 + 21264) = v177;
  *(_OWORD *)(a4 + 21280) = v77;
  v78 = v172;
  *(_OWORD *)(a4 + 21168) = v171;
  *(_OWORD *)(a4 + 21184) = v78;
  v79 = v174;
  *(_OWORD *)(a4 + 21200) = v173;
  *(_OWORD *)(a4 + 21216) = v79;
  v80 = v179;
  v81 = v180;
  v82 = v181;
  *(_OWORD *)(a4 + 21344) = v182;
  *(_OWORD *)(a4 + 21328) = v82;
  *(_OWORD *)(a4 + 21312) = v81;
  *(_OWORD *)(a4 + 21296) = v80;
  v83 = v183;
  v84 = v184;
  v85 = v185;
  *(_OWORD *)(a4 + 21408) = v186;
  *(_OWORD *)(a4 + 21392) = v85;
  *(_OWORD *)(a4 + 21376) = v84;
  *(_OWORD *)(a4 + 21360) = v83;
  LODWORD(v84) = v98.i32[0];
  *(_DWORD *)(v9 + 388) = v98.i32[1];
  *(_BYTE *)(a4 + 23664) = v62;
  *(_DWORD *)(a4 + 23668) = v103;
  LODWORD(v83) = v99;
  LODWORD(v85) = v100;
  *(_DWORD *)(a4 + 23676) = v84;
  *(_DWORD *)(a4 + 23680) = v83;
  LODWORD(v84) = v102;
  *(_DWORD *)(a4 + 23684) = v101;
  *(_DWORD *)(a4 + 23700) = v85;
  *(_DWORD *)(a4 + 23704) = v84;
  LODWORD(v84) = v104;
  *(_DWORD *)(a4 + 23724) = *(_DWORD *)(v9 + 404);
  *(_DWORD *)(a4 + 23728) = v84;
  v86 = *a1;
  v87 = a1[1];
  v88 = a1[2];
  *(_OWORD *)(a4 + 23792) = a1[3];
  *(_OWORD *)(a4 + 23776) = v88;
  *(_OWORD *)(a4 + 23760) = v87;
  *(_OWORD *)(a4 + 23744) = v86;
  v89 = a1[4];
  v90 = a1[5];
  v91 = a1[6];
  *(_OWORD *)(a4 + 23856) = a1[7];
  *(_OWORD *)(a4 + 23840) = v91;
  *(_OWORD *)(a4 + 23824) = v90;
  *(_OWORD *)(a4 + 23808) = v89;
  v92 = *(_OWORD *)(a2 + 96);
  v93 = *(_OWORD *)(a2 + 112);
  v94 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a4 + 23936) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a4 + 23984) = v93;
  *(_OWORD *)(a4 + 23968) = v92;
  *(_OWORD *)(a4 + 23952) = v94;
  v95 = *(float32x4_t *)a2;
  v96 = *(_OWORD *)(a2 + 16);
  v97 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a4 + 23920) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a4 + 23904) = v97;
  *(_OWORD *)(a4 + 23888) = v96;
  *(float32x4_t *)(a4 + 23872) = v95;
}

float Phase::SpatialModeler::TRAP::RT60Processor::Process(Phase::Subbands<float> const&,Phase::Subbands<float> const&,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_0::__invoke(Phase::SpatialModeler::TRAP *a1, float a2)
{
  char *v3;

  v3 = Phase::SpatialModeler::TRAP::TP(a1);
  return powf(a2, *((float *)v3 + 105));
}

float Phase::SpatialModeler::TRAP::RT60Processor::Process(Phase::Subbands<float> const&,Phase::Subbands<float> const&,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_1::__invoke(Phase::SpatialModeler::TRAP *a1, float a2)
{
  char *v3;

  v3 = Phase::SpatialModeler::TRAP::TP(a1);
  return powf(a2, *((float *)v3 + 106));
}

void Phase::SpatialModeler::SceneObserver::DetectSceneChanges(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, Phase::SpatialModeler::RayTracerState *a5@<X4>, __int128 *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *i;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float *v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  char *v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  BOOL v71;
  int v72;
  int v73;
  char *v74;
  __int128 v75;
  _OWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  float v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  float v91;
  float v92;
  BOOL v93;
  char v94;
  uint64_t v95;
  int v96;
  BOOL v97;
  int v98;
  uint64_t v99;
  int v100;
  BOOL v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  Phase::SpatialModeler::RayTracerState *v105;
  _BYTE *v106;
  uint64_t SubbandIndex;
  _QWORD *v108;
  unsigned int v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _OWORD *v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  float v139;
  float *v140;
  float *v141;
  Phase::SpatialModeler::RayTracerState *v142;
  float v143;
  int v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  _QWORD *v152;
  uint64_t v153;
  float v154;
  float v155;
  float v156;
  _OWORD *v157;
  uint64_t v158;
  float v159;
  float *v160;
  float v161;
  float v162;
  BOOL v163;
  uint64_t v164;
  BOOL v165;
  int v166;
  BOOL v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  unint64_t v172;
  _QWORD *v173;
  float *v174;
  unint64_t *v175;
  _QWORD *v176;
  __int128 *v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  float v181;
  float v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  int8x16_t v187;
  uint64_t v188;
  uint64_t v189;
  float32x2_t v191;
  int8x16_t v192;
  uint64_t v193;
  float v194;
  _BYTE v195[19];
  _BYTE v196[124];
  int v197;
  _OWORD __b[2];
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  _BYTE v203[32];
  _OWORD v204[5];
  __int128 v205;
  _BYTE v206[32];
  uint64_t v207;

  v207 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a7 + 62) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  v13 = (uint64_t *)a1[2];
  while (v13)
  {
    v14 = *(_QWORD **)a2;
    v15 = *(_QWORD **)(a2 + 8);
    if (*(_QWORD **)a2 == v15)
    {
LABEL_6:
      v13 = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::erase(a1, v13);
    }
    else
    {
      while (v13[2] != *v14)
      {
        v14 += 7;
        if (v14 == v15)
          goto LABEL_6;
      }
      v13 = (uint64_t *)*v13;
    }
  }
  v179 = a4;
  for (i = (uint64_t *)a1[7];
        i;
        i = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::erase(a1 + 5, i))
  {
    while (i[2] == *a3)
    {
      i = (uint64_t *)*i;
      if (!i)
        goto LABEL_13;
    }
  }
LABEL_13:
  v174 = (float *)(a1 + 5);
  v175 = a3;
  v177 = a6;
  v186 = a1;
  v17 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v17)
  {
    v18 = 0;
    v19 = v17 / 56;
    if (v19 <= 1)
      v20 = 1;
    else
      v20 = v19;
    v21 = a7 + 19;
    v22 = a7 + 38;
    v23 = a7 + 57;
    v184 = v20;
    do
    {
      v24 = *(_QWORD *)a2 + 56 * v18;
      *(_QWORD *)v196 = *(_QWORD *)v24;
      v25 = *(_QWORD *)v196;
      v26 = *(_QWORD *)(v24 + 40);
      v191 = *(float32x2_t *)(v24 + 8);
      *(float32x2_t *)&__b[0] = v191;
      v27 = *(float *)(v24 + 16);
      v28 = *(float *)(v24 + 20);
      *((_QWORD *)&__b[0] + 1) = __PAIR64__(LODWORD(v28), LODWORD(v27));
      v187 = *(int8x16_t *)(v24 + 24);
      __b[1] = v187;
      v29 = (float *)std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(v186, *(unint64_t *)v196);
      if (v29)
      {
        v30 = v29;
        Phase::SpatialModeler::SceneObserver::checkForNecessaryUpdates((_BYTE *)a7, v26, (float *)__b, (uint64_t)(v29 + 6));
        v31 = (float)(vmlas_n_f32(vmuls_lane_f32(v30[25], v191, 1), v30[24], v191.f32[0]) + (float)(v27 * v30[26]))
            + (float)(v28 * v30[27]);
        v32 = -v31;
        if (v31 >= 0.0)
          v32 = v31;
        v33 = acosf(v32);
        *(_BYTE *)(a7 + 4) |= (float)((float)(v33 + v33) * 57.296) > 20.0;
        v34 = (float)(vmlas_n_f32(vmuls_lane_f32(v30[33], v191, 1), v30[32], v191.f32[0]) + (float)(v27 * v30[34]))
            + (float)(v28 * v30[35]);
        v35 = -v34;
        if (v34 >= 0.0)
          v35 = v34;
        v36 = acosf(v35);
        v37 = 0;
        *(_BYTE *)(a7 + 23) |= (float)((float)(v36 + v36) * 57.296) > 361.0;
        *((_QWORD *)v30 + 3) = v26;
        do
        {
          v38 = *(unsigned __int8 *)(a7 + v37);
          if (*(_BYTE *)(a7 + v37))
            v39 = 1;
          else
            v39 = v37 == 18;
          ++v37;
        }
        while (!v39);
        if (v38)
        {
          *((float32x2_t *)v30 + 4) = v191;
          v30[10] = v27;
          v30[11] = v28;
          *((int8x16_t *)v30 + 3) = v187;
        }
        v40 = 0;
        do
        {
          v41 = *(unsigned __int8 *)(v21 + v40);
          if (*(_BYTE *)(v21 + v40))
            v42 = 1;
          else
            v42 = v40 == 18;
          ++v40;
        }
        while (!v42);
        if (v41)
        {
          *((float32x2_t *)v30 + 8) = v191;
          v30[18] = v27;
          v30[19] = v28;
          *((int8x16_t *)v30 + 5) = v187;
        }
        v43 = 0;
        do
        {
          v44 = *(unsigned __int8 *)(v22 + v43);
          if (*(_BYTE *)(v22 + v43))
            v45 = 1;
          else
            v45 = v43 == 18;
          ++v43;
        }
        while (!v45);
        if (v44)
        {
          *((float32x2_t *)v30 + 12) = v191;
          v30[26] = v27;
          v30[27] = v28;
          *((int8x16_t *)v30 + 7) = v187;
        }
        v46 = 0;
        do
        {
          v47 = *(unsigned __int8 *)(v23 + v46);
          if (*(_BYTE *)(v23 + v46))
            v48 = 1;
          else
            v48 = v46 == 18;
          ++v46;
        }
        while (!v48);
        if (v47)
        {
          *((float32x2_t *)v30 + 16) = v191;
          v30[34] = v27;
          v30[35] = v28;
          *((int8x16_t *)v30 + 9) = v187;
        }
      }
      else
      {
        v49 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)v186, v25, v196);
        *((_QWORD *)v49 + 3) = v26;
        *((float32x2_t *)v49 + 4) = v191;
        *((float *)v49 + 10) = v27;
        *((float *)v49 + 11) = v28;
        *(_QWORD *)&v50 = vextq_s8(v187, v187, 8uLL).u64[0];
        *((float32x2_t *)&v50 + 1) = v191;
        *((_QWORD *)v49 + 6) = v187.i64[0];
        *(_OWORD *)(v49 + 56) = v50;
        *((float *)v49 + 18) = v27;
        *((float *)v49 + 19) = v28;
        *((_QWORD *)v49 + 10) = v187.i64[0];
        *(_OWORD *)(v49 + 88) = v50;
        *((float *)v49 + 26) = v27;
        *((float *)v49 + 27) = v28;
        *((_QWORD *)v49 + 14) = v187.i64[0];
        *(_OWORD *)(v49 + 120) = v50;
        *((float *)v49 + 34) = v27;
        *((float *)v49 + 35) = v28;
        *((int8x16_t *)v49 + 9) = v187;
        memset((char *)&v204[3] + 11, 0, 19);
        LOWORD(v204[0]) = 256;
        memset((char *)v204 + 2, 0, 18);
        BYTE4(v204[1]) = 1;
        memset((char *)&v204[1] + 5, 0, 18);
        BYTE7(v204[2]) = 1;
        memset((char *)&v204[2] + 8, 0, 18);
        BYTE10(v204[3]) = 1;
        Phase::SpatialModeler::SimulationUpdate::operator|=(a7, (uint64_t)v204);
      }
      ++v18;
    }
    while (v18 != v184);
  }
  v51 = *v175;
  v52 = v179;
  if (*(_DWORD *)(v179 + 136) > *v175)
  {
    v53 = *(_QWORD *)(v179 + 120);
    if (*(_DWORD *)(v53 + 24 * v51 + 20) == HIDWORD(v51))
    {
      v54 = *(_QWORD *)(v53 + 24 * *v175);
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          v55 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(v174, *v175);
          if (v55)
          {
            v56 = v55;
            Phase::SpatialModeler::SceneObserver::checkForNecessaryUpdates((_BYTE *)a7, 0, (float *)(v54 + 48), (uint64_t)(v55 + 3));
            v57 = 0;
            do
            {
              v58 = *(unsigned __int8 *)(a7 + v57);
              if (*(_BYTE *)(a7 + v57))
                v59 = 1;
              else
                v59 = v57 == 18;
              ++v57;
            }
            while (!v59);
            if (v58)
            {
              v56[8] = *(_DWORD *)(v54 + 48);
              v56[9] = *(_DWORD *)(v54 + 52);
              v56[10] = *(_DWORD *)(v54 + 56);
              v56[11] = *(_DWORD *)(v54 + 60);
              v56[12] = *(_DWORD *)(v54 + 64);
              v56[13] = *(_DWORD *)(v54 + 68);
              v56[14] = *(_DWORD *)(v54 + 72);
              v56[15] = *(_DWORD *)(v54 + 76);
            }
            v60 = 0;
            v61 = a7 + 19;
            do
            {
              v62 = *(unsigned __int8 *)(v61 + v60);
              if (*(_BYTE *)(v61 + v60))
                v63 = 1;
              else
                v63 = v60 == 18;
              ++v60;
            }
            while (!v63);
            if (v62)
            {
              v56[16] = *(_DWORD *)(v54 + 48);
              v56[17] = *(_DWORD *)(v54 + 52);
              v56[18] = *(_DWORD *)(v54 + 56);
              v56[19] = *(_DWORD *)(v54 + 60);
              v56[20] = *(_DWORD *)(v54 + 64);
              v56[21] = *(_DWORD *)(v54 + 68);
              v56[22] = *(_DWORD *)(v54 + 72);
              v56[23] = *(_DWORD *)(v54 + 76);
            }
            v64 = 0;
            v65 = a7 + 38;
            do
            {
              v66 = *(unsigned __int8 *)(v65 + v64);
              if (*(_BYTE *)(v65 + v64))
                v67 = 1;
              else
                v67 = v64 == 18;
              ++v64;
            }
            while (!v67);
            if (v66)
            {
              v56[24] = *(_DWORD *)(v54 + 48);
              v56[25] = *(_DWORD *)(v54 + 52);
              v56[26] = *(_DWORD *)(v54 + 56);
              v56[27] = *(_DWORD *)(v54 + 60);
              v56[28] = *(_DWORD *)(v54 + 64);
              v56[29] = *(_DWORD *)(v54 + 68);
              v56[30] = *(_DWORD *)(v54 + 72);
              v56[31] = *(_DWORD *)(v54 + 76);
            }
            v68 = 0;
            v69 = a7 + 57;
            do
            {
              v70 = *(unsigned __int8 *)(v69 + v68);
              if (*(_BYTE *)(v69 + v68))
                v71 = 1;
              else
                v71 = v68 == 18;
              ++v68;
            }
            while (!v71);
            if (v70)
            {
              v56[32] = *(_DWORD *)(v54 + 48);
              v56[33] = *(_DWORD *)(v54 + 52);
              v56[34] = *(_DWORD *)(v54 + 56);
              v56[35] = *(_DWORD *)(v54 + 60);
              v56[36] = *(_DWORD *)(v54 + 64);
              v56[37] = *(_DWORD *)(v54 + 68);
              v56[38] = *(_DWORD *)(v54 + 72);
              v56[39] = *(_DWORD *)(v54 + 76);
            }
          }
          else
          {
            v72 = *(_DWORD *)(v54 + 56);
            v73 = *(_DWORD *)(v54 + 60);
            v192 = *(int8x16_t *)(v54 + 64);
            v188 = *(_QWORD *)(v54 + 48);
            v74 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v174, v51, v175);
            *((_QWORD *)v74 + 3) = 0;
            *((_QWORD *)v74 + 4) = v188;
            *((_DWORD *)v74 + 10) = v72;
            *((_DWORD *)v74 + 11) = v73;
            *((_QWORD *)v74 + 6) = v192.i64[0];
            *(_QWORD *)&v75 = vextq_s8(v192, v192, 8uLL).u64[0];
            *((_QWORD *)&v75 + 1) = v188;
            *(_OWORD *)(v74 + 56) = v75;
            *((_DWORD *)v74 + 18) = v72;
            *((_DWORD *)v74 + 19) = v73;
            *((_QWORD *)v74 + 10) = v192.i64[0];
            *(_OWORD *)(v74 + 88) = v75;
            *((_DWORD *)v74 + 26) = v72;
            *((_DWORD *)v74 + 27) = v73;
            *((_QWORD *)v74 + 14) = v192.i64[0];
            *(_OWORD *)(v74 + 120) = v75;
            *((_DWORD *)v74 + 34) = v72;
            *((_DWORD *)v74 + 35) = v73;
            *((int8x16_t *)v74 + 9) = v192;
            memset((char *)&v204[3] + 12, 0, 18);
            LOWORD(v204[0]) = 0;
            BYTE2(v204[0]) = 1;
            memset((char *)v204 + 3, 0, 18);
            BYTE5(v204[1]) = 1;
            memset((char *)&v204[1] + 6, 0, 18);
            BYTE8(v204[2]) = 1;
            memset((char *)&v204[2] + 9, 0, 18);
            BYTE11(v204[3]) = 1;
            Phase::SpatialModeler::SimulationUpdate::operator|=(a7, (uint64_t)v204);
          }
        }
      }
    }
  }
  if (*(_DWORD *)(v179 + 168))
  {
    v76 = v186 + 32;
    if (!*((_DWORD *)v186 + 95))
      goto LABEL_108;
    v77 = *((unsigned int *)v177 + 31);
    memset(__b, 0, sizeof(__b));
    v199 = 0u;
    v200 = 0u;
    v201 = 0u;
    v202 = 0u;
    memset(v203, 0, 28);
    if ((_DWORD)v77)
    {
      v78 = 0;
      v79 = 4 * v77;
      do
      {
        *(float *)((char *)__b + v78) = *(float *)((char *)v177 + v78) / *(float *)((char *)v76 + v78);
        v78 += 4;
      }
      while (v79 != v78);
      v80 = 0;
      v205 = 0u;
      memset(v206, 0, 28);
      memset(v204, 0, sizeof(v204));
      do
      {
        *(float *)((char *)v204 + v80) = *(float *)((char *)__b + v80) + -1.0;
        v80 += 4;
      }
      while (v79 != v80);
      v81 = 0;
      v82 = fabsf(*(float *)v204);
      if (v77 <= 1)
        v82 = 0.0;
      do
      {
        v83 = fabsf(*(float *)((char *)v204 + v81));
        if (v82 < v83)
          v82 = v83;
        v81 += 4;
      }
      while (v79 != v81);
      if (v82 > 0.02)
      {
LABEL_108:
        v84 = *v177;
        v85 = v177[1];
        v86 = v177[3];
        *((_OWORD *)v186 + 18) = v177[2];
        *((_OWORD *)v186 + 19) = v86;
        *v76 = v84;
        *((_OWORD *)v186 + 17) = v85;
        v87 = v177[4];
        v88 = v177[5];
        v89 = v177[7];
        *((_OWORD *)v186 + 22) = v177[6];
        *((_OWORD *)v186 + 23) = v89;
        *((_OWORD *)v186 + 20) = v87;
        *((_OWORD *)v186 + 21) = v88;
        *(_QWORD *)&v204[4] = 0;
        DWORD2(v204[4]) = 0;
        LODWORD(v204[0]) = 0;
        WORD2(v204[0]) = 0;
        BYTE6(v204[0]) = 1;
        memset((char *)v204 + 7, 0, 18);
        BYTE9(v204[1]) = 1;
        memset((char *)&v204[1] + 10, 0, 18);
        BYTE12(v204[2]) = 1;
        memset((char *)&v204[2] + 13, 0, 18);
        HIBYTE(v204[3]) = 1;
        WORD6(v204[4]) = 0;
        Phase::SpatialModeler::SimulationUpdate::operator|=(a7, (uint64_t)v204);
      }
    }
  }
  v90 = *(_QWORD *)(v179 + 904);
  v91 = *(float *)(v179 + 928);
  v92 = *((float *)v186 + 98);
  memset(__b, 0, 19);
  BYTE7(__b[0]) = v186[48] != v90;
  if (vabds_f32(v91, v92) >= 0.05)
  {
    v94 = 1;
  }
  else
  {
    v93 = v91 >= 0.96;
    if (v91 <= 0.04)
      v93 = 1;
    v94 = v92 != v91 && v93;
  }
  v95 = 0;
  BYTE8(__b[0]) = v94;
  do
  {
    v96 = *((unsigned __int8 *)__b + v95);
    if (*((_BYTE *)__b + v95))
      v97 = 1;
    else
      v97 = v95 == 18;
    ++v95;
  }
  while (!v97);
  if (v96)
  {
    v186[48] = v90;
    *((float *)v186 + 98) = v91;
    v204[0] = __b[0];
    *(_DWORD *)((char *)v204 + 15) = *(_DWORD *)((char *)__b + 15);
    *(_OWORD *)((char *)&v204[1] + 3) = __b[0];
    *(_DWORD *)((char *)&v204[2] + 2) = *(_DWORD *)((char *)__b + 15);
    *(_OWORD *)((char *)&v204[2] + 6) = __b[0];
    *(_DWORD *)((char *)&v204[3] + 5) = *(_DWORD *)((char *)__b + 15);
    DWORD2(v204[4]) = *(_DWORD *)((char *)__b + 15);
    *(_OWORD *)((char *)&v204[3] + 9) = __b[0];
    WORD6(v204[4]) = 0;
    Phase::SpatialModeler::SimulationUpdate::operator|=(a7, (uint64_t)v204);
  }
  v98 = *(unsigned __int8 *)(v179 + 932);
  if (*((unsigned __int8 *)v186 + 396) != v98)
  {
    *((_BYTE *)v186 + 396) = v98;
    *(_WORD *)((char *)&v204[4] + 1) = 256;
    *(_QWORD *)((char *)&v204[4] + 3) = 0;
    BYTE11(v204[4]) = 0;
    *(_QWORD *)&v204[0] = 0;
    WORD4(v204[0]) = 256;
    memset((char *)v204 + 10, 0, 18);
    BYTE12(v204[1]) = 1;
    memset((char *)&v204[1] + 13, 0, 18);
    HIBYTE(v204[2]) = 1;
    memset(&v204[3], 0, 17);
    WORD6(v204[4]) = 0;
    Phase::SpatialModeler::SimulationUpdate::operator|=(a7, (uint64_t)v204);
  }
  v99 = 0;
  do
  {
    v100 = *(unsigned __int8 *)(a7 + v99);
    if (*(_BYTE *)(a7 + v99))
      v101 = 1;
    else
      v101 = v99 == 18;
    ++v99;
  }
  while (!v101);
  if (!v100)
  {
    v102 = 19;
    do
    {
      v103 = *(unsigned __int8 *)(a7 + v102);
      if (*(_BYTE *)(a7 + v102))
        break;
      v39 = v102++ == 37;
    }
    while (!v39);
    if (!v103)
    {
      v104 = *(_QWORD *)(v179 + 936);
      if (v104 != v186[13])
      {
        v186[13] = v104;
        *(_QWORD *)&v204[0] = 0;
        WORD4(v204[0]) = 0;
        BYTE10(v204[0]) = 1;
        memset((char *)v204 + 11, 0, 18);
        BYTE13(v204[1]) = 1;
        memset((char *)&v204[1] + 14, 0, 18);
        LOBYTE(v204[3]) = 1;
        memset((char *)&v204[3] + 1, 0, 18);
        BYTE3(v204[4]) = 1;
        *(_QWORD *)((char *)&v204[4] + 4) = 0;
        WORD6(v204[4]) = 0;
        v106 = v204;
LABEL_211:
        Phase::SpatialModeler::SimulationUpdate::operator|=(a7, (uint64_t)v106);
        return;
      }
      v205 = 0u;
      memset(v206, 0, 28);
      memset(v204, 0, sizeof(v204));
      v105 = a5;
      *(_DWORD *)&v206[28] = (_DWORD)a5;
      if (a5)
      {
        bzero(v204, 4 * (_QWORD)a5);
        v202 = 0u;
        memset(v203, 0, 28);
        v200 = 0u;
        v201 = 0u;
        v199 = 0u;
        memset(__b, 0, sizeof(__b));
        memset_pattern16(__b, &unk_21673A800, 4 * (_QWORD)a5);
        v105 = a5;
      }
      else
      {
        v202 = 0uLL;
        memset(v203, 0, 28);
        v200 = 0uLL;
        v201 = 0uLL;
        v199 = 0uLL;
        memset(__b, 0, sizeof(__b));
      }
      *(_DWORD *)&v203[28] = (_DWORD)v105;
      SubbandIndex = Phase::SpatialModeler::RayTracerState::GetSubbandIndex(v105);
      v108 = *(_QWORD **)(v179 + 120);
      v109 = *(_DWORD *)(v179 + 136);
      v110 = &v108[3 * v109];
      if (v109)
      {
        v111 = *v108;
        if (!*v108)
        {
          v112 = v108 + 3;
          while (1)
          {
            v108 = v112;
            if (v112 >= v110)
              break;
            v112 += 3;
            v111 = *v108;
            if (*v108)
              goto LABEL_151;
          }
          v111 = 0;
        }
LABEL_151:
        v113 = (unint64_t)v110;
      }
      else
      {
        v111 = 0;
        v113 = *(_QWORD *)(v179 + 120);
      }
      v114 = 0.0;
      if (v108 == v110)
      {
        v118 = 3.4028e38;
        v120 = -3.4028e38;
        v119 = -3.4028e38;
        v115 = -3.4028e38;
        v117 = 3.4028e38;
        v116 = 3.4028e38;
        LODWORD(v153) = (_DWORD)a5;
      }
      else
      {
        v115 = -3.4028e38;
        v116 = 3.4028e38;
        v180 = 40 * SubbandIndex;
        v117 = 3.4028e38;
        v118 = 3.4028e38;
        v119 = -3.4028e38;
        v120 = -3.4028e38;
        v172 = v113;
        v173 = v110;
        do
        {
          if (v111 && *(_DWORD *)v111 == 4)
          {
            v122 = *(_QWORD **)(v111 + 120);
            v121 = *(_QWORD **)(v111 + 128);
            if (v121 == v122)
            {
              v149 = *(float *)(v111 + 64);
              v150 = *(float *)(v111 + 68);
              v116 = fminf(v116, v149);
              v117 = fminf(v117, v150);
              v151 = *(float *)(v111 + 72);
              v118 = fminf(v118, v151);
              v115 = fmaxf(v115, v149);
              v119 = fmaxf(v119, v150);
              v120 = fmaxf(v120, v151);
            }
            else
            {
              v176 = *(_QWORD **)(v111 + 128);
              v178 = v108;
              do
              {
                if (*(_DWORD *)(v52 + 112) > *v122)
                {
                  v123 = *(_QWORD *)(v52 + 96);
                  if (*(_DWORD *)(v123 + 24 * *v122 + 20) == HIDWORD(*v122))
                  {
                    v124 = *(_QWORD *)(v123 + 24 * *v122);
                    if (v124)
                    {
                      v181 = v115;
                      v182 = v114;
                      v183 = v124;
                      v185 = *(_QWORD *)(v124 + 72);
                      v125 = *(_QWORD *)(v124 + 80) - v185;
                      if (v125)
                      {
                        v126 = 0;
                        v127 = v125 >> 2;
                        v128 = *(_QWORD *)(**(_QWORD **)(v124 + 144) + 16 * *(_QWORD *)(v124 + 152));
                        v193 = *(_QWORD *)(v128 + 8);
                        v129 = *(_QWORD *)(v128 + 32);
                        v130 = *(_DWORD *)(v179 + 88);
                        v189 = *(_QWORD *)(v179 + 72);
                        if (v127 <= 1)
                          v131 = 1;
                        else
                          v131 = v127;
                        do
                        {
                          v132 = *(_QWORD *)(v193 + v126 * v129);
                          if (v130 > v132
                            && *(_DWORD *)(v189 + 24 * v132 + 20) == HIDWORD(v132))
                          {
                            v133 = *(_QWORD *)(v189 + 24 * *(_QWORD *)(v193 + v126 * v129));
                            if (v133)
                            {
                              if (*(_DWORD *)v133 == 1)
                              {
                                v134 = *(_OWORD **)(*(_QWORD *)(v133 + 40) + v180);
                                if (v134)
                                {
                                  v135 = v134[31];
                                  v201 = v134[30];
                                  v202 = v135;
                                  v136 = v134[33];
                                  *(_OWORD *)v203 = v134[32];
                                  *(_OWORD *)&v203[16] = v136;
                                  v137 = v134[27];
                                  __b[0] = v134[26];
                                  __b[1] = v137;
                                  v138 = v134[29];
                                  v199 = v134[28];
                                  v200 = v138;
                                }
                              }
                            }
                          }
                          if (a5)
                          {
                            v139 = -*(float *)(v185 + 4 * v126);
                            v140 = (float *)v204;
                            v141 = (float *)__b;
                            v142 = a5;
                            do
                            {
                              v143 = *v141++;
                              *v140 = *v140 + (float)(v139 * logf((float)(1.0 - v143) + 0.00000011921));
                              ++v140;
                              v142 = (Phase::SpatialModeler::RayTracerState *)((char *)v142 - 1);
                            }
                            while (v142);
                          }
                          ++v126;
                        }
                        while (v126 != v131);
                      }
                      v144 = 0;
                      v194 = *(float *)(v183 + 64);
                      v115 = v181;
                      do
                      {
                        Phase::GetVertex<float>((uint64_t *)(v183 + 24), v144, (uint64_t)v195);
                        Phase::operator*<float>((float *)(v111 + 48), (float *)v195, (float *)v196);
                        v145 = *(float *)(v111 + 76);
                        v146 = (float)(v145 * *(float *)v196) + *(float *)(v111 + 64);
                        v147 = (float)(v145 * *(float *)&v196[4]) + *(float *)(v111 + 68);
                        v148 = (float)(v145 * *(float *)&v196[8]) + *(float *)(v111 + 72);
                        v116 = fminf(v116, v146);
                        v117 = fminf(v117, v147);
                        v118 = fminf(v118, v148);
                        v115 = fmaxf(v115, v146);
                        v119 = fmaxf(v119, v147);
                        v120 = fmaxf(v120, v148);
                        ++v144;
                      }
                      while (v144 != 8);
                      v114 = v182 + v194;
                      v108 = v178;
                      v52 = v179;
                      v113 = v172;
                      v110 = v173;
                      v121 = v176;
                    }
                  }
                }
                ++v122;
              }
              while (v122 != v121);
            }
          }
          if ((unint64_t)v108 < v113)
          {
            v152 = v108 + 3;
            while (1)
            {
              v108 = v152;
              if ((unint64_t)v152 >= v113)
                break;
              v152 += 3;
              v111 = *v108;
              if (*v108)
                goto LABEL_187;
            }
            v111 = 0;
          }
LABEL_187:
          ;
        }
        while (v108 != v110);
        LODWORD(v153) = *(_DWORD *)&v206[28];
      }
      v154 = sqrtf((float)((float)((float)(*((float *)v186 + 20) - v116) * (float)(*((float *)v186 + 20) - v116))+ (float)((float)(*((float *)v186 + 21) - v117) * (float)(*((float *)v186 + 21) - v117)))+ (float)((float)(*((float *)v186 + 22) - v118) * (float)(*((float *)v186 + 22) - v118)));
      v155 = sqrtf((float)((float)((float)(*((float *)v186 + 23) - v115) * (float)(*((float *)v186 + 23) - v115))+ (float)((float)(*((float *)v186 + 24) - v119) * (float)(*((float *)v186 + 24) - v119)))+ (float)((float)(*((float *)v186 + 25) - v120) * (float)(*((float *)v186 + 25) - v120)));
      v156 = vabds_f32(*((float *)v186 + 28), v114);
      v157 = v186 + 16;
      memset(v196, 0, sizeof(v196));
      v197 = v153;
      if ((_DWORD)v153)
      {
        v158 = 0;
        v153 = v153;
        do
        {
          *(float *)&v196[v158] = *(float *)((char *)v204 + v158) - *(float *)((char *)v157 + v158);
          v158 += 4;
        }
        while (4 * v153 != v158);
        v159 = *(float *)v196;
        if (v153 <= 1)
          v159 = 0.0;
        v160 = (float *)v196;
        do
        {
          v161 = *v160++;
          v162 = v161;
          if (v159 < v161)
            v159 = v162;
          --v153;
        }
        while (v153);
        v163 = v159 > 3.0;
      }
      else
      {
        v163 = 0;
      }
      v164 = 0;
      v165 = v154 > 1.0;
      if (v155 > 1.0)
        v165 = 1;
      memset(v195, 0, sizeof(v195));
      v195[11] = v165;
      v195[12] = v156 > 10.0;
      v195[13] = v163;
      do
      {
        v166 = v195[v164];
        if (v195[v164])
          v167 = 1;
        else
          v167 = v164 == 18;
        ++v164;
      }
      while (!v167);
      if (v166)
      {
        *((float *)v186 + 20) = v116;
        *((float *)v186 + 21) = v117;
        *((float *)v186 + 22) = v118;
        *((float *)v186 + 23) = v115;
        *((float *)v186 + 24) = v119;
        *((float *)v186 + 25) = v120;
        *((float *)v186 + 28) = v114;
        v168 = v205;
        *((_OWORD *)v186 + 12) = v204[4];
        *((_OWORD *)v186 + 13) = v168;
        v169 = *(_OWORD *)&v206[16];
        *((_OWORD *)v186 + 14) = *(_OWORD *)v206;
        *((_OWORD *)v186 + 15) = v169;
        v170 = v204[1];
        *v157 = v204[0];
        *((_OWORD *)v186 + 9) = v170;
        v171 = v204[3];
        *((_OWORD *)v186 + 10) = v204[2];
        *((_OWORD *)v186 + 11) = v171;
        *(_OWORD *)v196 = *(_OWORD *)v195;
        *(_DWORD *)&v196[15] = *(_DWORD *)&v195[15];
        *(_OWORD *)&v196[19] = *(_OWORD *)v195;
        *(_DWORD *)&v196[34] = *(_DWORD *)&v195[15];
        *(_OWORD *)&v196[38] = *(_OWORD *)v195;
        *(_DWORD *)&v196[53] = *(_DWORD *)&v195[15];
        *(_DWORD *)&v196[72] = *(_DWORD *)&v195[15];
        *(_OWORD *)&v196[57] = *(_OWORD *)v195;
        *(_WORD *)&v196[76] = 0;
        v106 = v196;
        goto LABEL_211;
      }
    }
  }
}

BOOL Phase::SpatialModeler::SceneObserver::isDetectEnergyFluctuation(uint64_t a1, float *a2)
{
  unint64_t v3;
  float *v4;
  uint64_t v5;
  BOOL v6;
  float v7;
  float v8;
  float v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v3 = *((unsigned int *)a2 + 31);
  v4 = (float *)(a1 + 400);
  if ((_DWORD)v3 != *(_DWORD *)(a1 + 524))
  {
    v6 = 1;
LABEL_12:
    v10 = *(_OWORD *)a2;
    v11 = *((_OWORD *)a2 + 1);
    v12 = *((_OWORD *)a2 + 3);
    *((_OWORD *)v4 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)v4 + 3) = v12;
    *(_OWORD *)v4 = v10;
    *((_OWORD *)v4 + 1) = v11;
    v13 = *((_OWORD *)a2 + 4);
    v14 = *((_OWORD *)a2 + 5);
    v15 = *((_OWORD *)a2 + 7);
    *((_OWORD *)v4 + 6) = *((_OWORD *)a2 + 6);
    *((_OWORD *)v4 + 7) = v15;
    *((_OWORD *)v4 + 4) = v13;
    *((_OWORD *)v4 + 5) = v14;
    return v6;
  }
  if ((_DWORD)v3)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = a2[v5];
      if (v7 <= 0.0)
        v7 = COERCE_FLOAT(1);
      v8 = (float)((float)(logf(v7) * 4.3429) / 10.0) * 10.0;
      v9 = v4[v5];
      if (v9 <= 0.0)
        v9 = COERCE_FLOAT(1);
      if (vabds_f32(v8, (float)((float)(logf(v9) * 4.3429) / 10.0) * 10.0) > 2.5)
        goto LABEL_12;
      v6 = ++v5 < v3;
    }
    while (v3 != v5);
  }
  return 0;
}

void Phase::SpatialModeler::SceneObserver::checkForNecessaryUpdates(_BYTE *a1, uint64_t a2, float *a3, uint64_t a4)
{
  float v6;
  float v7;
  float v8;
  BOOL v9;
  float *v10;

  v6 = a3[4];
  v7 = a3[5];
  v8 = a3[6];
  a1[3] |= sqrtf((float)((float)((float)(v6 - *(float *)(a4 + 24)) * (float)(v6 - *(float *)(a4 + 24)))+ (float)((float)(v7 - *(float *)(a4 + 28)) * (float)(v7 - *(float *)(a4 + 28))))+ (float)((float)(v8 - *(float *)(a4 + 32)) * (float)(v8 - *(float *)(a4 + 32)))) > 0.8;
  a1[22] |= sqrtf((float)((float)((float)(v6 - *(float *)(a4 + 56)) * (float)(v6 - *(float *)(a4 + 56)))+ (float)((float)(v7 - *(float *)(a4 + 60)) * (float)(v7 - *(float *)(a4 + 60))))+ (float)((float)(v8 - *(float *)(a4 + 64)) * (float)(v8 - *(float *)(a4 + 64)))) > 1.5;
  v9 = *(_QWORD *)a4 != a2;
  a1[5] |= v9;
  a1[24] |= v9;
  a1[41] |= sqrtf((float)((float)((float)(v6 - *(float *)(a4 + 88)) * (float)(v6 - *(float *)(a4 + 88)))+ (float)((float)(v7 - *(float *)(a4 + 92)) * (float)(v7 - *(float *)(a4 + 92))))+ (float)((float)(v8 - *(float *)(a4 + 96)) * (float)(v8 - *(float *)(a4 + 96)))) > 0.1;
  v10 = (float *)(a4 + 104);
  a1[60] |= sqrtf((float)((float)((float)(v6 - *(float *)(a4 + 120)) * (float)(v6 - *(float *)(a4 + 120)))+ (float)((float)(v7 - *(float *)(a4 + 124)) * (float)(v7 - *(float *)(a4 + 124))))+ (float)((float)(v8 - *(float *)(a4 + 128)) * (float)(v8 - *(float *)(a4 + 128)))) > 1.5;
  a1[42] |= (float)(Phase::GetAngle<float>(a3, (float *)(a4 + 72)) * 57.296) > 5.0;
  a1[61] |= (float)(Phase::GetAngle<float>(a3, v10) * 57.296) > 361.0;
  a1[43] |= v9;
  a1[62] |= v9;
}

uint64_t Phase::SpatialModeler::SimulationUpdate::operator|=(uint64_t result, uint64_t a2)
{
  uint64_t i;

  for (i = 0; i != 19; ++i)
    *(_BYTE *)(result + i) |= *(_BYTE *)(a2 + i);
  do
  {
    *(_BYTE *)(result + i) |= *(_BYTE *)(a2 + i);
    ++i;
  }
  while (i != 38);
  do
  {
    *(_BYTE *)(result + i) |= *(_BYTE *)(a2 + i);
    ++i;
  }
  while (i != 57);
  do
  {
    *(_BYTE *)(result + i) |= *(_BYTE *)(a2 + i);
    ++i;
  }
  while (i != 76);
  *(_BYTE *)(result + 76) |= *(_BYTE *)(a2 + 76);
  *(_BYTE *)(result + 77) |= *(_BYTE *)(a2 + 77);
  return result;
}

float Phase::GetAngle<float>(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;

  v2 = a1[3];
  v3 = a2[2];
  v4 = a2[3];
  v5 = (float)((float)((float)(a1[1] * a2[1]) + (float)(*a1 * *a2)) + (float)(a1[2] * v3)) + (float)(v2 * v4);
  v6 = -v5;
  if (v5 >= 0.0)
    v6 = (float)((float)((float)(a1[1] * a2[1]) + (float)(*a1 * *a2)) + (float)(a1[2] * v3)) + (float)(v2 * v4);
  v7 = acosf(v6);
  return v7 + v7;
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_QWORD *)v10 + 2) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v10 = (char *)operator new(0xA0uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v5;
  *((_QWORD *)v10 + 2) = *a3;
  *((_QWORD *)v10 + 3) = 0;
  *((_QWORD *)v10 + 4) = 0;
  *((_QWORD *)v10 + 5) = 0;
  *(_QWORD *)(v10 + 44) = 1065353216;
  *(_QWORD *)(v10 + 52) = 0;
  *(_OWORD *)(v10 + 60) = xmmword_2166F8010;
  *(_QWORD *)(v10 + 76) = 1065353216;
  *(_QWORD *)(v10 + 84) = 0;
  *(_OWORD *)(v10 + 92) = xmmword_2166F8010;
  *(_QWORD *)(v10 + 108) = 1065353216;
  *(_QWORD *)(v10 + 116) = 0;
  *(_OWORD *)(v10 + 124) = xmmword_2166F8010;
  *(_QWORD *)(v10 + 140) = 1065353216;
  *(_QWORD *)(v10 + 148) = 0;
  *((_DWORD *)v10 + 39) = 1065353216;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v14 = 1;
  if (v7 >= 3)
    v14 = (v7 & (v7 - 1)) != 0;
  v15 = v14 | (2 * v7);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v30)
  {
    *(_QWORD *)v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *(_QWORD *)v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v5] = a1 + 4;
  if (*(_QWORD *)v10)
  {
    v31 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_2166B6A90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double Phase::Zeppelin::SCSRadiationModel::ComputeDirectionalResponse(Phase::Logger *a1, Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData **a2, int a3, float a4)
{
  Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData *v8;
  float64x2_t *v9;
  float64x2_t v10;
  unsigned int v11;
  double v12;
  double v13;
  long double v14;
  long double v15;
  unsigned int i;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData *v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double LegendreNthDegreeOfCosTheta;
  NSObject *v33;
  std::logic_error *exception;
  NSObject *v35;
  std::logic_error *v36;
  double v37;
  double CosTheta;
  double v39;
  double v40;
  double v41[2];
  float64x2_t v42;
  _BYTE buf[18];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v33 = **(NSObject ***)(Phase::Logger::GetInstancePtr(0) + 928);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "SCSRadiationModel.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 203;
      _os_log_impl(&dword_2164CC000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(nullptr == pInRadiationContextRef) is true]: ErrorDescriptions::kErrDescr_nullPtr", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nullPtr);
  }
  if (!a2)
  {
    v35 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 928);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "SCSRadiationModel.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 208;
      _os_log_impl(&dword_2164CC000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(nullptr == pInSharedRadiationData) is true]: ErrorDescriptions::kErrDescr_nullPtr", buf, 0x12u);
    }
    v36 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v36, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nullPtr);
  }
  v8 = *a2;
  v40 = *(double *)(*((_QWORD *)*a2 + 1) + 8 * a3);
  *(_OWORD *)buf = xmmword_21673AD10;
  v42 = *(float64x2_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 8 * a3) + 16);
  v39 = std::operator/[abi:ne180100]<double>((double *)buf, (long double *)v42.f64);
  CosTheta = Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::GetCosTheta(a2[1], a4);
  v9 = *(float64x2_t **)(*((_QWORD *)*a2 + 8) + 8 * a3);
  v10 = vmulq_n_f64(vsubq_f64(*v9, vaddq_f64(v9[2], v9[2])), *((double *)*a2 + 5));
  v42.f64[0] = (1.0 - *((double *)*a2 + 3)) * 3.0;
  v42.f64[1] = 0.0;
  *(float64x2_t *)buf = v10;
  v37 = std::operator/[abi:ne180100]<double>(v42.f64, (long double *)buf);
  v11 = *((_DWORD *)a1 + 4);
  v12 = 0.0;
  v13 = 0.0;
  if (v11 >= 2)
  {
    v14 = hypot(0.0, 1.0);
    v15 = log(v14);
    for (i = 2; i <= v11; ++i)
    {
      v17 = *((double *)*a2 + 2);
      v18 = *((double *)*a2 + 4);
      v41[0] = (double)i + 1.0;
      v41[1] = 0.0;
      v42.f64[0] = v15;
      v42.f64[1] = 1.57079633;
      *(_QWORD *)buf = std::operator*[abi:ne180100]<double>(v41, v42.f64);
      *(_QWORD *)&buf[8] = v19;
      std::exp[abi:ne180100]<double>((double *)buf);
      v20 = ((double)i * 2.0 + 1.0) * ((double)i * 2.0 + 1.0);
      v22 = v20 * v21;
      v24 = v20 * v23;
      v25 = *a2;
      v26 = v17 * *(double *)(*((_QWORD *)*a2 + 7) + 8 * (int)i)
          + v18 * *(double *)(*((_QWORD *)*a2 + 6) + 8 * (int)i);
      *(double *)buf = v22 * v26;
      *(double *)&buf[8] = v24 * v26;
      v27 = *(_QWORD *)(*((_QWORD *)v25 + 8) + 8 * a3);
      v42 = vmulq_n_f64(vsubq_f64(vmulq_n_f64(*(float64x2_t *)(v27 + 16 * (int)(i - 1)), (double)i), vmulq_n_f64(*(float64x2_t *)(v27 + 16 * (int)(i + 1)), (double)i + 1.0)), v18 * (double)((i - 1) * (i + 2)));
      v28 = std::operator/[abi:ne180100]<double>((double *)buf, (long double *)v42.f64);
      v30 = v29;
      LegendreNthDegreeOfCosTheta = Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::GetLegendreNthDegreeOfCosTheta(a2[1], i, a4);
      v12 = v12 + v28 * LegendreNthDegreeOfCosTheta;
      v13 = v13 + v30 * LegendreNthDegreeOfCosTheta;
    }
  }
  return -2.0 / v40 * (v39 + CosTheta * v37 + v12);
}

void sub_2166B6E98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **Phase::Zeppelin::SCSRadiationPrecomputedData::SCSRadiationPrecomputedData(uint64_t **a1, _QWORD *a2, int a3, uint64_t a4, float *a5, uint64_t a6)
{
  uint64_t **v7;
  Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData *v13;
  uint64_t *v14;
  uint64_t *v15;
  NSObject *v17;
  std::logic_error *exception;
  NSObject *v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  v7 = a1 + 1;
  *a1 = 0;
  if (!a4 || !a5 || !a6)
  {
    v17 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 928);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v20 = 136315394;
      v21 = "SCSRadiationPrecomputedData.cpp";
      v22 = 1024;
      v23 = 53;
      _os_log_impl(&dword_2164CC000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(nullptr == pInScsRadiationCtx || nullptr == pInPropagationMediumCtx || nullptr == pInNormalizationCtx) is true]: ErrorDescriptions::kErrDescr_nullPtr", (uint8_t *)&v20, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nullPtr);
LABEL_14:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  if (a2[1] == *a2)
  {
    v19 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 928);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = 136315394;
      v21 = "SCSRadiationPrecomputedData.cpp";
      v22 = 1024;
      v23 = 58;
      _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(0 == refInCenterFreqs.size()) is true]: ErrorDescriptions::kErrDescr_invalidCenterFrequenciesLength", (uint8_t *)&v20, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_invalidCenterFrequenciesLength);
    goto LABEL_14;
  }
  v13 = (Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData *)operator new();
  Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData::SCSRadiationSphereSamplingIndependentPrecomputedData((uint64_t)v13, a2, a4, a5, a6);
  std::unique_ptr<Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData>::reset[abi:ne180100]((Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData **)a1, v13);
  v14 = (uint64_t *)operator new();
  Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(v14, a4, a3);
  v15 = *v7;
  *v7 = v14;
  if (v15)
    std::default_delete<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData>::operator()[abi:ne180100]((uint64_t)v7, v15);
  return a1;
}

void sub_2166B7104(_Unwind_Exception *a1)
{
  Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData **v1;
  uint64_t **v2;
  void *v3;
  uint64_t *v5;

  __cxa_free_exception(v3);
  v5 = *v2;
  *v2 = 0;
  if (v5)
    std::default_delete<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData>::operator()[abi:ne180100]((uint64_t)v2, v5);
  std::unique_ptr<Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData *std::unique_ptr<Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData>::reset[abi:ne180100](Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData **a1, Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData *a2)
{
  Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData::~SCSRadiationSphereSamplingIndependentPrecomputedData(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void std::default_delete<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>>::reset[abi:ne180100](a2 + 3, 0);
    std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>>::reset[abi:ne180100](a2 + 2, 0);
    std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>>::reset[abi:ne180100](a2 + 1, 0);
    std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>>::reset[abi:ne180100](a2, 0);
    JUMPOUT(0x2199F9D70);
  }
}

uint64_t std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>::~NDimEquiangularHalfCircleData(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>::~NDimEquiangularData(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>::~NDimEquiangularData(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = 0;
    do
    {
      v3 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v3)
      {
        for (i = 0; i < v3; ++i)
        {
          v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v2) + 8 * i);
          if (v5)
          {
            MEMORY[0x2199F9D4C](v5, 0x1000C8000313F17);
            v3 = *(unsigned int *)(a1 + 24);
          }
        }
      }
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v2);
      if (v6)
        MEMORY[0x2199F9D4C](v6, 0x80C80B8603338);
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 28));
  }
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    MEMORY[0x2199F9D4C](v7, 0x80C80B8603338);
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t *Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  NSObject *v26;
  std::logic_error *exception;
  std::vector<unsigned int> v28;
  _QWORD v29[3];
  _QWORD *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void **v34;
  _QWORD v35[3];
  _QWORD *v36;
  void *__p[3];
  void **v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 1;
  *((_OWORD *)a1 + 1) = 0u;
  v5 = a1 + 2;
  *(_OWORD *)a1 = 0u;
  v6 = a1 + 3;
  if (!a2)
  {
    v26 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 928);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "SCSRadiationSphereSamplingDependentPrecomputedData.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 78;
      _os_log_impl(&dword_2164CC000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(nullptr == pInScsRadiationCtxRef) is true]: ErrorDescriptions::kErrDescr_nullPtr", (uint8_t *)__p, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nullPtr);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>>::reset[abi:ne180100](a1, 0);
  std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>>::reset[abi:ne180100](v4, 0);
  v9 = operator new(4uLL);
  *v9 = 0;
  v10 = operator new();
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v9, (uint64_t)(v9 + 1), 1uLL);
  Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>::NDimEquiangularHalfCircleData(v10, a3, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>>::reset[abi:ne180100](v5, v10);
  v38 = __p;
  v11 = *v5;
  v36 = v35;
  __p[0] = &off_24D580E20;
  v35[0] = &off_24D580E20;
  Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>::Populate(v11, (uint64_t)v35);
  v12 = v36;
  if (v36 == v35)
  {
    v13 = 4;
    v12 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_9;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_9:
  std::vector<unsigned int>::vector(&v28, (*(_DWORD *)(a2 + 16) + 1));
  begin = v28.__begin_;
  end = v28.__end_;
  if (v28.__begin_ != v28.__end_)
  {
    v16 = 0;
    do
      *begin++ = v16++;
    while (begin != end);
  }
  v17 = operator new();
  v31 = 0;
  v32 = 0;
  v33 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v31, v28.__begin_, (uint64_t)v28.__end_, v28.__end_ - v28.__begin_);
  Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>::NDimEquiangularHalfCircleData(v17, a3, (uint64_t)&v31);
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>>::reset[abi:ne180100](v6, v17);
  v31 = &off_24D580E68;
  v32 = a1;
  v34 = &v31;
  v18 = a1[3];
  v30 = v29;
  v29[0] = &off_24D580E68;
  v29[1] = a1;
  Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>::Populate(v18, (uint64_t)v29);
  v19 = v30;
  if (v30 == v29)
  {
    v20 = 4;
    v19 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_19;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_19:
  v21 = v34;
  if (v34 == &v31)
  {
    v22 = 4;
    v21 = &v31;
  }
  else
  {
    if (!v34)
      goto LABEL_24;
    v22 = 5;
  }
  (*((void (**)(void))*v21 + v22))();
LABEL_24:
  if (v28.__begin_)
  {
    v28.__end_ = v28.__begin_;
    operator delete(v28.__begin_);
  }
  v23 = v38;
  if (v38 == __p)
  {
    v24 = 4;
    v23 = __p;
    goto LABEL_30;
  }
  if (v38)
  {
    v24 = 5;
LABEL_30:
    (*((void (**)(void))*v23 + v24))();
  }
  operator delete(v9);
  return a1;
}

void sub_2166B7704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;

  std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>>::reset[abi:ne180100](v31, 0);
  std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>>::reset[abi:ne180100](v30, 0);
  std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>>::reset[abi:ne180100](v29, 0);
  std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>>::reset[abi:ne180100](v28, 0);
  _Unwind_Resume(a1);
}

void Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>::Populate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned int v6;
  float v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float v13;
  int v14;
  float v15;

  v2 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v2)
  {
    v5 = 0;
    v6 = 0;
    v7 = *(float *)(a1 + 28);
    v8 = v2 >> 2;
    v9 = *(unsigned int *)(a1 + 24);
    do
    {
      if ((_DWORD)v9)
      {
        v10 = 0;
        v11 = *(_DWORD *)(*(_QWORD *)a1 + 4 * v5);
        do
        {
          v12 = *(_QWORD *)(a2 + 24);
          v13 = (float)(v7 * (float)v10) * 0.0174532925;
          v15 = v13;
          v14 = v11;
          if (!v12)
            std::__throw_bad_function_call[abi:ne180100]();
          *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10++) + 8 * v5) = (*(double (**)(uint64_t, float *, int *))(*(_QWORD *)v12 + 48))(v12, &v15, &v14);
        }
        while (v9 != v10);
      }
      v5 = ++v6;
    }
    while (v8 > v6);
  }
}

double Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::GetCosTheta(Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData *this, float a2)
{
  uint64_t v2;
  NSObject *v4;
  std::logic_error *exception;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 2);
  if (!v2)
  {
    v4 = **(NSObject ***)(Phase::Logger::GetInstancePtr(0) + 928);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315394;
      v7 = "SCSRadiationSphereSamplingDependentPrecomputedData.cpp";
      v8 = 1024;
      v9 = 129;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(nullptr == mCosThetaHalfCircle) is true]: ErrorDescriptions::kErrDescr_nullPtr", (uint8_t *)&v6, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nullPtr);
  }
  return Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>::GetValueAt(v2, 0, a2);
}

void sub_2166B7A98(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

double Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>::GetValueAt(uint64_t a1, unsigned int a2, float a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(char **)a1;
  v4 = *(char **)(a1 + 8);
  v5 = (uint64_t)&v4[-*(_QWORD *)a1];
  if (v4 == *(char **)a1)
  {
    v7 = *(char **)(a1 + 8);
  }
  else
  {
    v6 = v5 >> 2;
    v7 = *(char **)a1;
    do
    {
      v8 = v6 >> 1;
      v9 = &v7[4 * (v6 >> 1)];
      v11 = *(_DWORD *)v9;
      v10 = v9 + 4;
      v6 += ~(v6 >> 1);
      if (v11 < a2)
        v7 = v10;
      else
        v6 = v8;
    }
    while (v6);
  }
  if (v3 == v7)
  {
    v13 = 0;
  }
  else if (v4 == v7)
  {
    v13 = (v5 >> 2) - 1;
  }
  else
  {
    if (*(_DWORD *)v7 - a2 <= a2 - *((_DWORD *)v7 - 1))
      v12 = v7 - v3;
    else
      v12 = v7 - 4 - v3;
    v13 = v12 >> 2;
  }
  return *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                               + 8
                               * (((int)llroundf((float)(a3 * 57.296) / *(float *)(a1 + 28)) % *(_DWORD *)(a1 + 24)
                                 + *(_DWORD *)(a1 + 24))
                                % *(_DWORD *)(a1 + 24)))
                   + 8 * v13);
}

double Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::GetLegendreNthDegreeOfCosTheta(Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData *this, unsigned int a2, float a3)
{
  uint64_t v3;
  NSObject *v5;
  std::logic_error *exception;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 3);
  if (!v3)
  {
    v5 = **(NSObject ***)(Phase::Logger::GetInstancePtr(0) + 928);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 136315394;
      v8 = "SCSRadiationSphereSamplingDependentPrecomputedData.cpp";
      v9 = 1024;
      v10 = 160;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(nullptr == mLegendreNthDegreeOfCosThetaHalfCircle) is true]: ErrorDescriptions::kErrDescr_nullPtr", (uint8_t *)&v7, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nullPtr);
  }
  return Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>::GetValueAt(v3, a2, a3);
}

void sub_2166B7C78(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>::NDimEquiangularHalfCircleData(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(_DWORD *)(a1 + 24) = a2;
  *(float *)(a1 + 28) = 180.0 / (float)(a2 - 1);
  *(_QWORD *)(a1 + 32) = operator new[]();
  if (*(_DWORD *)(a1 + 24))
  {
    v5 = 0;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5++) = operator new[]();
    while (v5 < *(unsigned int *)(a1 + 24));
  }
  return a1;
}

void sub_2166B7D6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_0,std::allocator<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_0>,double ()(float,unsigned int)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_0,std::allocator<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_0>,double ()(float,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D580E20;
  return result;
}

void std::__function::__func<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_0,std::allocator<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_0>,double ()(float,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D580E20;
}

double std::__function::__func<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_0,std::allocator<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_0>,double ()(float,unsigned int)>::operator()(Phase::Logger *a1, float *a2, _DWORD *a3)
{
  NSObject *v4;
  std::logic_error *exception;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*a3)
  {
    v4 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 928);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315394;
      v7 = "SCSRadiationSphereSamplingDependentPrecomputedData.cpp";
      v8 = 1024;
      v9 = 92;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(0 != dimension) is true]: ErrorDescriptions::kErrDescr_nonZeroDimension", (uint8_t *)&v6, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nonZeroDimension);
  }
  return cosf(*a2);
}

void sub_2166B7EDC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_1,std::allocator<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_1>,double ()(float,unsigned int)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_1,std::allocator<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_1>,double ()(float,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D580E68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_1,std::allocator<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_1>,double ()(float,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D580E68;
  a2[1] = v2;
  return result;
}

void std::__function::__func<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_1,std::allocator<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_1>,double ()(float,unsigned int)>::operator()(uint64_t a1, float *a2, unsigned int *a3)
{
  Phase::Zeppelin::MathUtils *v3;
  double ValueAt;

  v3 = (Phase::Zeppelin::MathUtils *)*a3;
  ValueAt = Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>::GetValueAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), *a3, *a2);
  Phase::Zeppelin::MathUtils::Legendre(v3, 0, ValueAt);
}

uint64_t Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData::SCSRadiationSphereSamplingIndependentPrecomputedData(uint64_t a1, _QWORD *a2, uint64_t a3, float *a4, uint64_t a5)
{
  uint64_t v6;
  float v9;
  double v10;
  __double2 v11;
  int v12;
  Phase::Zeppelin::MathUtils *v13;
  Phase::Zeppelin::AcousticsUtils *v14;
  unint64_t v15;
  int v16;
  size_t v17;
  double v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  NSObject *v27;
  std::logic_error *exception;
  NSObject *v29;
  std::logic_error *v30;
  _BYTE __p[18];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!a3 || !a4 || !a5)
  {
    v27 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 928);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = "SCSRadiationSphereSamplingIndependentPrecomputedData.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 39;
      _os_log_impl(&dword_2164CC000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(nullptr == pInScsRadiationCtx || nullptr == pInPropagationMediumCtx || nullptr == pInNormalizationCtx) is true]: ErrorDescriptions::kErrDescr_nullPtr", __p, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nullPtr);
  }
  v6 = a2[1] - *a2;
  if (!v6)
  {
    v29 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 928);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = "SCSRadiationSphereSamplingIndependentPrecomputedData.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 44;
      _os_log_impl(&dword_2164CC000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(0 == refInCenterFreqs.size()) is true]: ErrorDescriptions::kErrDescr_invalidCenterFrequenciesLength", __p, 0x12u);
    }
    v30 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v30, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_invalidCenterFrequenciesLength);
  }
  *(_QWORD *)(a1 + 72) = v6 >> 2;
  v9 = *a4;
  v10 = *(double *)a3;
  *(_QWORD *)a1 = operator new[]();
  *(_QWORD *)(a1 + 8) = operator new[]();
  v11 = __sincos_stret(*(double *)(a3 + 8));
  *(double *)(a1 + 16) = v11.__cosval;
  *(double *)(a1 + 24) = v11.__cosval * (v11.__cosval * v11.__cosval);
  *(double *)(a1 + 32) = v11.__sinval;
  *(double *)(a1 + 40) = v11.__sinval * v11.__sinval;
  v12 = *(_DWORD *)(a3 + 16);
  v13 = (Phase::Zeppelin::MathUtils *)(v12 + 1);
  *(_QWORD *)(a1 + 48) = operator new[]();
  *(_QWORD *)(a1 + 56) = operator new[]();
  v14 = (Phase::Zeppelin::AcousticsUtils *)operator new[]();
  *(_QWORD *)(a1 + 64) = v14;
  if (*(_QWORD *)(a1 + 72))
  {
    v15 = 0;
    v16 = v12 + 2;
    v17 = 16 * (v12 + 2);
    do
    {
      v18 = v10 * Phase::Zeppelin::AcousticsUtils::ComputeWavenumber(v14, *(float *)(*a2 + 4 * v15), v9);
      *(double *)(*(_QWORD *)a1 + 8 * v15) = v18;
      *(double *)(*(_QWORD *)(a1 + 8) + 8 * v15) = v18 * v18;
      v19 = (void *)operator new[]();
      v20 = v19;
      if (v16)
        bzero(v19, v17);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15) = v20;
      Phase::Zeppelin::MathUtils::ComputeSphHankelYUpToOrder(v13, *(long double *)(*(_QWORD *)a1 + 8 * v15), (double **)__p);
      if (*(_QWORD *)&__p[8] != *(_QWORD *)__p)
        memmove(*(void **)(*(_QWORD *)(a1 + 64) + 8 * v15), *(const void **)__p, *(_QWORD *)&__p[8] - *(_QWORD *)__p);
      v21 = *(_QWORD **)(a1 + 48);
      v22 = *(_QWORD **)(a1 + 56);
      *v21 = 0;
      *v22 = 0;
      v21[1] = 0;
      v22[1] = 0;
      if (v13 >= 3)
      {
        for (i = 2; (Phase::Zeppelin::MathUtils *)i != v13; ++i)
        {
          Phase::Zeppelin::MathUtils::Legendre((Phase::Zeppelin::MathUtils *)i, 0, *(long double *)(a1 + 16));
          *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i) = v24;
          Phase::Zeppelin::MathUtils::Legendre((Phase::Zeppelin::MathUtils *)i, 1, *(long double *)(a1 + 16));
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i) = v25;
        }
      }
      v14 = *(Phase::Zeppelin::AcousticsUtils **)__p;
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      ++v15;
    }
    while (*(_QWORD *)(a1 + 72) > v15);
  }
  return a1;
}

void sub_2166B8378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData::~SCSRadiationSphereSamplingIndependentPrecomputedData(Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)this;
  if (v2)
    MEMORY[0x2199F9D4C](v2, 0x1000C8000313F17);
  v3 = *((_QWORD *)this + 1);
  if (v3)
    MEMORY[0x2199F9D4C](v3, 0x1000C8000313F17);
  v4 = *((_QWORD *)this + 6);
  if (v4)
    MEMORY[0x2199F9D4C](v4, 0x1000C8000313F17);
  v5 = *((_QWORD *)this + 7);
  if (v5)
    MEMORY[0x2199F9D4C](v5, 0x1000C8000313F17);
  v6 = *((_QWORD *)this + 9);
  if (v6)
  {
    for (i = 0; i < v6; ++i)
    {
      v8 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * i);
      if (v8)
      {
        MEMORY[0x2199F9D4C](v8, 0x1000C80451B5BE8);
        v6 = *((_QWORD *)this + 9);
      }
    }
  }
  v9 = *((_QWORD *)this + 8);
  if (v9)
    MEMORY[0x2199F9D4C](v9, 0x20C8093837F09);
}

float Phase::SpatialModeler::TRAP::Sentinel::GetTimeSinceLastProcess(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    return (float)(std::chrono::steady_clock::now().__d_.__rep_ - v1) / 1000000000.0;
  else
    return 0.0;
}

float *Phase::SpatialModeler::TRAP::Sentinel::Process(uint64_t a1, uint64_t a2, float a3)
{
  float *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  float32x4_t v14;
  __int128 v15;
  float32x4_t v16;
  float32x4_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  float v26;
  char *IsExpectedInputSubbandCount;
  float *v28;
  uint64_t i;
  uint64_t j;
  float *v31;
  uint64_t k;
  float v33;
  Phase::SpatialModeler::TRAP *v34;
  char *v35;
  float32x4_t v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  float (*v44)(float, float, float, float);
  float *v45;
  float *v46;
  float v47;
  NSObject *v48;
  _BOOL8 v49;
  uint64_t v50;
  float v51;
  uint8_t *v52;
  float32x4_t *v53;
  float v54;
  float v55;
  float *v56;
  float v57;
  __int128 *v58;
  float v59;
  uint64_t v60;
  char v61;
  float v62;
  uint64_t v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  float *result;
  unsigned __int8 v78;
  int v79;
  __int32 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  Phase::SpatialModeler::TRAP *v123;
  float *v124;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _BYTE v132[32];
  float32x2_t v133;
  int v134;
  int v135;
  int v136;
  _OWORD v137[8];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  float v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  float32x4_t v203[7];
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  uint8_t buf[32];
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  _BYTE v226[32];
  uint64_t v227;

  v227 = *MEMORY[0x24BDAC8D0];
  v5 = (float *)(a2 + 21036);
  *(std::chrono::steady_clock::time_point *)(a2 + 21456) = std::chrono::steady_clock::now();
  v6 = *(_OWORD *)(a2 + 21248);
  v217 = *(_OWORD *)(a2 + 21232);
  v218 = v6;
  v7 = *(_OWORD *)(a2 + 21280);
  v219 = *(_OWORD *)(a2 + 21264);
  v220 = v7;
  v8 = *(_OWORD *)(a2 + 21184);
  v213 = *(_OWORD *)(a2 + 21168);
  v214 = v8;
  v9 = *(_OWORD *)(a2 + 21216);
  v215 = *(_OWORD *)(a2 + 21200);
  v216 = v9;
  v10 = *(_OWORD *)(a2 + 21376);
  v209 = *(_OWORD *)(a2 + 21360);
  v210 = v10;
  v11 = *(_OWORD *)(a2 + 21408);
  v211 = *(_OWORD *)(a2 + 21392);
  v212 = v11;
  v12 = *(_OWORD *)(a2 + 21312);
  v205 = *(_OWORD *)(a2 + 21296);
  v206 = v12;
  v13 = *(_OWORD *)(a2 + 21344);
  v207 = *(_OWORD *)(a2 + 21328);
  v208 = v13;
  v14 = *(float32x4_t *)(a2 + 20368);
  v203[4] = *(float32x4_t *)(a2 + 20352);
  v203[5] = v14;
  v15 = *(_OWORD *)(a2 + 20400);
  v203[6] = *(float32x4_t *)(a2 + 20384);
  v204 = v15;
  v16 = *(float32x4_t *)(a2 + 20304);
  v203[0] = *(float32x4_t *)(a2 + 20288);
  v203[1] = v16;
  v17 = *(float32x4_t *)(a2 + 20336);
  v203[2] = *(float32x4_t *)(a2 + 20320);
  v203[3] = v17;
  v18 = *(_OWORD *)(a2 + 20496);
  v199 = *(_OWORD *)(a2 + 20480);
  v200 = v18;
  v19 = *(_OWORD *)(a2 + 20528);
  v201 = *(_OWORD *)(a2 + 20512);
  v202 = v19;
  v20 = *(_OWORD *)(a2 + 20432);
  v195 = *(_OWORD *)(a2 + 20416);
  v196 = v20;
  v21 = *(_OWORD *)(a2 + 20464);
  v197 = *(_OWORD *)(a2 + 20448);
  v198 = v21;
  v22 = *(_OWORD *)(a2 + 21120);
  v191 = *(_OWORD *)(a2 + 21104);
  v192 = v22;
  v23 = *(_OWORD *)(a2 + 21152);
  v193 = *(_OWORD *)(a2 + 21136);
  v194 = v23;
  v24 = *(_OWORD *)(a2 + 21056);
  v187 = *(_OWORD *)(a2 + 21040);
  v188 = v24;
  v25 = *(_OWORD *)(a2 + 21088);
  v189 = *(_OWORD *)(a2 + 21072);
  v190 = v25;
  v26 = *v5;
  v124 = v5;
  v186 = v5[97];
  IsExpectedInputSubbandCount = (char *)Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)&v213, (uint64_t)"inOutAcousticVisualReverbTime");
  if ((_DWORD)IsExpectedInputSubbandCount)
  {
    IsExpectedInputSubbandCount = (char *)Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)&v205, (uint64_t)"inOutAcousticVisualConfidence");
    if ((_DWORD)IsExpectedInputSubbandCount)
    {
      IsExpectedInputSubbandCount = (char *)Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)v203, (uint64_t)"inOutSeatbeltReverbTime");
      if ((_DWORD)IsExpectedInputSubbandCount)
      {
        IsExpectedInputSubbandCount = (char *)Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)&v195, (uint64_t)"inOutSeatbeltConfidence");
        if ((_DWORD)IsExpectedInputSubbandCount)
        {
          IsExpectedInputSubbandCount = (char *)Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)&v187, (uint64_t)"inOutCurrentReverbTime");
          if ((_DWORD)IsExpectedInputSubbandCount)
          {
            for (i = 0; i != 40; i += 4)
              Phase::SpatialModeler::TRAP::CleanInputReverbTimeAndConfidence((Phase::SpatialModeler::TRAP *)((char *)&v213 + i), (float *)((char *)&v205 + i), v28);
            for (j = 0; j != 40; j += 4)
              Phase::SpatialModeler::TRAP::CleanInputReverbTimeAndConfidence((Phase::SpatialModeler::TRAP *)((char *)v203 + j), (float *)((char *)&v195 + j), v28);
            for (k = 0; k != 40; k += 4)
              Phase::SpatialModeler::TRAP::CleanInputReverbTime((char *)&v187 + k, v31);
            IsExpectedInputSubbandCount = Phase::SpatialModeler::TRAP::CleanInputReverbTime((char *)&v186, v31);
            v26 = fminf(fmaxf(v26, 0.0), 1.0);
          }
        }
      }
    }
  }
  v33 = Phase::SpatialModeler::TRAP::CalculateRoomChangeConfidence((Phase::SpatialModeler::TRAP *)IsExpectedInputSubbandCount, v26);
  v35 = Phase::SpatialModeler::TRAP::TP(v34);
  Phase::Subbands<float>::operator*=(v203, (float *)v35 + 115, v36);
  v38 = *v37;
  v39 = v37[1];
  v40 = v37[3];
  v137[2] = v37[2];
  v137[3] = v40;
  v137[0] = v38;
  v137[1] = v39;
  v41 = v37[4];
  v42 = v37[5];
  v43 = v37[7];
  v137[6] = v37[6];
  v137[7] = v43;
  v137[4] = v41;
  v137[5] = v42;
  v140 = v197;
  v141 = v198;
  v138 = v195;
  v139 = v196;
  v144 = v201;
  v145 = v202;
  v142 = v199;
  v143 = v200;
  v148 = v215;
  v149 = v216;
  v146 = v213;
  v147 = v214;
  v152 = v219;
  v153 = v220;
  v150 = v217;
  v151 = v218;
  v156 = v207;
  v157 = v208;
  v154 = v205;
  v155 = v206;
  v160 = v211;
  v161 = v212;
  v158 = v209;
  v159 = v210;
  v185 = 0u;
  v184 = 0u;
  v183 = 0u;
  v181 = 0u;
  v182 = 0u;
  v179 = 0u;
  v180 = 0u;
  v177 = 0u;
  v178 = 0u;
  v175 = 0u;
  v176 = 0u;
  v173 = 0u;
  v174 = 0u;
  v171 = 0u;
  v172 = 0u;
  v169 = 0u;
  v170 = 0u;
  v167 = 0u;
  v168 = 0u;
  v165 = 0u;
  v166 = 0u;
  v163 = 0u;
  v164 = 0u;
  if (*(_BYTE *)(a1 + 748))
    v44 = (float (*)(float, float, float, float))Phase::SpatialModeler::TRAP::CalculateSeatbeltAndAcousticVisualMix;
  else
    v44 = (float (*)(float, float, float, float))Phase::SpatialModeler::TRAP::Sentinel::Process(std::chrono::duration<float,std::ratio<1l,1l>>,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_2::__invoke;
  v162 = 0uLL;
  Phase::SpatialModeler::TRAP::MixMultibandValuesAndConfidences((uint64_t)v137, &v133, (float (*)(float))Phase::Logarithm<float>, (float (*)(float))Phase::Exponential<float>, v44, (float (*)(float))Phase::SpatialModeler::TRAP::Sentinel::Process(std::chrono::duration<float,std::ratio<1l,1l>>,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_0::__invoke, (float (*)(float))Phase::SpatialModeler::TRAP::Sentinel::Process(std::chrono::duration<float,std::ratio<1l,1l>>,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_1::__invoke);
  v46 = (float *)(a2 + 21448);
  if (!*(_BYTE *)(a2 + 21452))
  {
    v47 = v133.f32[1];
    v45 = (float *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v45);
    if (v47 >= v45[126])
    {
      v48 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v45) + 1184);
      v49 = os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
      if (v49)
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "Sentinel.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        _os_log_impl(&dword_2164CC000, v48, OS_LOG_TYPE_DEFAULT, "%25s:%-5d TRAP initialized the current reverb time", buf, 0x12u);
      }
      v45 = (float *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v49);
      v50 = HIDWORD(v204);
      memset(buf, 0, sizeof(buf));
      v222 = 0u;
      v223 = 0u;
      v224 = 0u;
      v225 = 0u;
      memset(v226, 0, 28);
      *(_DWORD *)&v226[28] = HIDWORD(v204);
      if (HIDWORD(v204))
      {
        v51 = v45[113];
        v52 = buf;
        v53 = v203;
        do
        {
          v54 = v53->f32[0];
          v53 = (float32x4_t *)((char *)v53 + 4);
          *(float *)v52 = v51 * v54;
          v52 += 4;
          --v50;
        }
        while (v50);
      }
      v191 = v224;
      v192 = v225;
      v193 = *(_OWORD *)v226;
      v194 = *(_OWORD *)&v226[16];
      v187 = *(_OWORD *)buf;
      v188 = *(_OWORD *)&buf[16];
      v189 = v222;
      v190 = v223;
      *(_BYTE *)(a2 + 21452) = 1;
    }
  }
  v55 = *v46;
  if (*v46 < v33)
  {
    *v46 = v33;
    v55 = v33;
  }
  v57 = Phase::SpatialModeler::TRAP::CalculateRateLimitingConfidenceWithRoomChange((Phase::SpatialModeler::TRAP *)v45, v186, v55);
  v58 = (__int128 *)(a2 + 21040);
  v59 = *(float *)(a1 + 752);
  if (v59 <= 0.0)
  {
    v224 = v166;
    v225 = v167;
    *(_OWORD *)v226 = v168;
    *(_OWORD *)&v226[16] = v169;
    *(_OWORD *)buf = v162;
    *(_OWORD *)&buf[16] = v163;
    v222 = v164;
    v223 = v165;
  }
  else
  {
    v60 = 0;
    memset(v226, 0, 28);
    v225 = 0u;
    v224 = 0u;
    v223 = 0u;
    v222 = 0u;
    memset(buf, 0, sizeof(buf));
    v61 = 1;
    *(_DWORD *)&v226[28] = 10;
LABEL_28:
    v62 = v33;
    v63 = v60;
    do
    {
      v64 = *((float *)&v187 + v63);
      v65 = *((float *)&v162 + v63) - v64;
      v66 = a3;
      if (v65 < 0.0)
        v66 = -a3;
      v67 = (float)(v57 * v64) * (float)(powf(1.2, v66 / v59) + -1.0);
      if (v65 >= 0.0)
      {
        if (v65 > v67)
        {
LABEL_37:
          v61 = 0;
          *(float *)&buf[4 * v63] = v64 + v67;
          v60 = v63 + 1;
          v33 = v62;
          if (v63 != 9)
            goto LABEL_28;
          goto LABEL_42;
        }
      }
      else if (v65 < v67)
      {
        goto LABEL_37;
      }
      *(float *)&buf[4 * v63++] = v64 + v65;
    }
    while (v63 != 10);
    v33 = v62;
    if ((v61 & 1) == 0)
      goto LABEL_42;
  }
  *v46 = 0.0;
LABEL_42:
  v68 = 0;
  v69 = *(float *)(a1 + 744);
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v131 = 0u;
  memset(v132, 0, 28);
  *(_DWORD *)&v132[28] = 10;
  do
  {
    v70 = *(float *)(a2 + 336 + v68);
    v71 = v69;
    if (v70 > 0.0)
      v71 = fminf(0.15811 / (float)(v70 * 4.0), v69);
    v72 = *(float *)&buf[v68];
    v56 = (float *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v56);
    *(float *)((char *)&v126 + v68) = fminf(fmaxf(v72, v56[100]), v71);
    v68 += 4;
  }
  while (v68 != 40);
  v73 = v131;
  *(_OWORD *)(a2 + 21104) = v130;
  *(_OWORD *)(a2 + 21120) = v73;
  v74 = *(_OWORD *)&v132[16];
  *(_OWORD *)(a2 + 21136) = *(_OWORD *)v132;
  *(_OWORD *)(a2 + 21152) = v74;
  v75 = v127;
  *v58 = v126;
  *(_OWORD *)(a2 + 21056) = v75;
  v76 = v129;
  *(_OWORD *)(a2 + 21072) = v128;
  *(_OWORD *)(a2 + 21088) = v76;
  result = (float *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v56);
  if (result[128] > 0.0)
  {
    v78 = atomic_load((unsigned __int8 *)&_MergedGlobals_20);
    if ((v78 & 1) == 0)
    {
      v123 = (Phase::SpatialModeler::TRAP *)__cxa_guard_acquire(&_MergedGlobals_20);
      if ((_DWORD)v123)
      {
        qword_254E44950 = (unint64_t)((float)(1.0 / *((float *)Phase::SpatialModeler::TRAP::TP(v123) + 128))
                                           * 24000000.0);
        unk_254E44958 = 0;
        dword_254E44960 = 0;
        __cxa_guard_release(&_MergedGlobals_20);
      }
    }
    result = (float *)Phase::Throttle::ShouldFire((Phase::Throttle *)&qword_254E44950, 0);
    if ((_DWORD)result)
    {
      v79 = v135;
      *(_DWORD *)(a2 + 23672) = v136;
      v80 = v133.i32[1];
      *(_DWORD *)(a2 + 23688) = v133.i32[0];
      *(_DWORD *)(a2 + 23692) = v134;
      *(float *)(a2 + 23696) = v124[97];
      *(_DWORD *)(a2 + 23708) = v80;
      *(_DWORD *)(a2 + 23712) = v79;
      *(float *)(a2 + 23716) = *v124;
      *(float *)(a2 + 23720) = v33;
      *(_DWORD *)(a2 + 23732) = *(_DWORD *)(a2 + 21448);
      *(float *)(a2 + 23736) = v57;
      *(_OWORD *)(a2 + 24112) = *(_OWORD *)(a2 + 20144);
      *(_OWORD *)(a2 + 24096) = *(_OWORD *)(a2 + 20128);
      *(_OWORD *)(a2 + 24080) = *(_OWORD *)(a2 + 20112);
      *(_OWORD *)(a2 + 24064) = *(_OWORD *)(a2 + 20096);
      *(_OWORD *)(a2 + 24048) = *(_OWORD *)(a2 + 20080);
      *(_OWORD *)(a2 + 24032) = *(_OWORD *)(a2 + 20064);
      *(_OWORD *)(a2 + 24016) = *(_OWORD *)(a2 + 20048);
      *(_OWORD *)(a2 + 24000) = *(_OWORD *)(a2 + 20032);
      v81 = *(_OWORD *)(a2 + 20160);
      v82 = *(_OWORD *)(a2 + 20176);
      v83 = *(_OWORD *)(a2 + 20192);
      *(_OWORD *)(a2 + 24176) = *(_OWORD *)(a2 + 20208);
      *(_OWORD *)(a2 + 24160) = v83;
      *(_OWORD *)(a2 + 24144) = v82;
      *(_OWORD *)(a2 + 24128) = v81;
      v84 = *(_OWORD *)(a2 + 20224);
      v85 = *(_OWORD *)(a2 + 20240);
      v86 = *(_OWORD *)(a2 + 20256);
      *(_OWORD *)(a2 + 24240) = *(_OWORD *)(a2 + 20272);
      *(_OWORD *)(a2 + 24224) = v86;
      *(_OWORD *)(a2 + 24208) = v85;
      *(_OWORD *)(a2 + 24192) = v84;
      v87 = *(_OWORD *)(a2 + 21168);
      v88 = *(_OWORD *)(a2 + 21184);
      v89 = *(_OWORD *)(a2 + 21200);
      *(_OWORD *)(a2 + 24304) = *(_OWORD *)(a2 + 21216);
      *(_OWORD *)(a2 + 24288) = v89;
      *(_OWORD *)(a2 + 24272) = v88;
      *(_OWORD *)(a2 + 24256) = v87;
      v90 = *(_OWORD *)(a2 + 21232);
      v91 = *(_OWORD *)(a2 + 21248);
      v92 = *(_OWORD *)(a2 + 21264);
      *(_OWORD *)(a2 + 24368) = *(_OWORD *)(a2 + 21280);
      *(_OWORD *)(a2 + 24352) = v92;
      *(_OWORD *)(a2 + 24336) = v91;
      *(_OWORD *)(a2 + 24320) = v90;
      v93 = *(_OWORD *)(a2 + 21296);
      v94 = *(_OWORD *)(a2 + 21312);
      v95 = *(_OWORD *)(a2 + 21328);
      *(_OWORD *)(a2 + 24432) = *(_OWORD *)(a2 + 21344);
      *(_OWORD *)(a2 + 24416) = v95;
      *(_OWORD *)(a2 + 24400) = v94;
      *(_OWORD *)(a2 + 24384) = v93;
      v96 = *(_OWORD *)(a2 + 21360);
      v97 = *(_OWORD *)(a2 + 21376);
      v98 = *(_OWORD *)(a2 + 21392);
      *(_OWORD *)(a2 + 24496) = *(_OWORD *)(a2 + 21408);
      *(_OWORD *)(a2 + 24480) = v98;
      *(_OWORD *)(a2 + 24464) = v97;
      *(_OWORD *)(a2 + 24448) = v96;
      v99 = *(_OWORD *)(a2 + 20288);
      v100 = *(_OWORD *)(a2 + 20304);
      v101 = *(_OWORD *)(a2 + 20320);
      *(_OWORD *)(a2 + 24560) = *(_OWORD *)(a2 + 20336);
      *(_OWORD *)(a2 + 24544) = v101;
      *(_OWORD *)(a2 + 24528) = v100;
      *(_OWORD *)(a2 + 24512) = v99;
      v102 = *(_OWORD *)(a2 + 20352);
      v103 = *(_OWORD *)(a2 + 20368);
      v104 = *(_OWORD *)(a2 + 20384);
      *(_OWORD *)(a2 + 24624) = *(_OWORD *)(a2 + 20400);
      *(_OWORD *)(a2 + 24608) = v104;
      *(_OWORD *)(a2 + 24592) = v103;
      *(_OWORD *)(a2 + 24576) = v102;
      v105 = v138;
      v106 = v139;
      v107 = v140;
      *(_OWORD *)(a2 + 24688) = v141;
      *(_OWORD *)(a2 + 24672) = v107;
      *(_OWORD *)(a2 + 24656) = v106;
      *(_OWORD *)(a2 + 24640) = v105;
      v108 = v142;
      v109 = v143;
      v110 = v144;
      *(_OWORD *)(a2 + 24752) = v145;
      *(_OWORD *)(a2 + 24736) = v110;
      *(_OWORD *)(a2 + 24720) = v109;
      *(_OWORD *)(a2 + 24704) = v108;
      v111 = v162;
      v112 = v163;
      v113 = v164;
      *(_OWORD *)(a2 + 24816) = v165;
      *(_OWORD *)(a2 + 24800) = v113;
      *(_OWORD *)(a2 + 24784) = v112;
      *(_OWORD *)(a2 + 24768) = v111;
      v114 = v166;
      v115 = v167;
      v116 = v168;
      *(_OWORD *)(a2 + 24880) = v169;
      *(_OWORD *)(a2 + 24864) = v116;
      *(_OWORD *)(a2 + 24848) = v115;
      *(_OWORD *)(a2 + 24832) = v114;
      v117 = *v58;
      v118 = *(_OWORD *)(a2 + 21056);
      v119 = *(_OWORD *)(a2 + 21072);
      *(_OWORD *)(a2 + 24944) = *(_OWORD *)(a2 + 21088);
      *(_OWORD *)(a2 + 24928) = v119;
      *(_OWORD *)(a2 + 24912) = v118;
      *(_OWORD *)(a2 + 24896) = v117;
      v120 = *(_OWORD *)(a2 + 21104);
      v121 = *(_OWORD *)(a2 + 21120);
      v122 = *(_OWORD *)(a2 + 21136);
      *(_OWORD *)(a2 + 25008) = *(_OWORD *)(a2 + 21152);
      *(_OWORD *)(a2 + 24992) = v122;
      *(_OWORD *)(a2 + 24976) = v121;
      *(_OWORD *)(a2 + 24960) = v120;
      *(_QWORD *)(a2 + 25024) = *((_QWORD *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)result) + 66);
      return (float *)Phase::SpatialModeler::RoomSimulationLogging::logTRAP(a2 + 23664);
    }
  }
  return result;
}

void sub_2166B8ED8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_MergedGlobals_20);
  _Unwind_Resume(a1);
}

float Phase::SpatialModeler::TRAP::Sentinel::Process(std::chrono::duration<float,std::ratio<1l,1l>>,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_2::__invoke()
{
  return 1.0;
}

float Phase::SpatialModeler::TRAP::Sentinel::Process(std::chrono::duration<float,std::ratio<1l,1l>>,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_0::__invoke(Phase::SpatialModeler::TRAP *a1, float a2)
{
  char *v3;

  v3 = Phase::SpatialModeler::TRAP::TP(a1);
  return powf(a2, *((float *)v3 + 107));
}

float Phase::SpatialModeler::TRAP::Sentinel::Process(std::chrono::duration<float,std::ratio<1l,1l>>,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_1::__invoke(Phase::SpatialModeler::TRAP *a1, float a2)
{
  char *v3;

  v3 = Phase::SpatialModeler::TRAP::TP(a1);
  return powf(a2, *((float *)v3 + 108));
}

uint64_t Phase::Controller::SessionManager::SessionManager(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  Phase::Logger *v11;
  NSObject *v12;
  void *v13;
  Phase::Logger *v14;
  NSObject *v15;
  void *v16;
  Phase::Logger *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  BOOL v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Phase::Logger *v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  NSObject *v30;
  _QWORD v32[5];
  _QWORD v33[5];
  _QWORD v34[5];
  _QWORD v35[6];
  _QWORD v36[4];
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v5, "sessionInterface");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (v6)
      {
        objc_msgSend(v5, "sessionInterface");
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = *(void **)a1;
        *(_QWORD *)a1 = v7;

        v36[0] = 0;
        v36[1] = v36;
        v36[2] = 0x2020000000;
        v36[3] = *(_QWORD *)(a1 + 16);
        v9 = *(void **)a1;
        v10 = MEMORY[0x24BDAC760];
        v35[0] = MEMORY[0x24BDAC760];
        v35[1] = 3221225472;
        v35[2] = ___ZN5Phase10Controller14SessionManagerC2EPU24objcproto13PHASEPlatform11objc_objectPNS0_12VoiceManagerE_block_invoke;
        v35[3] = &unk_24D580EA8;
        v35[4] = v36;
        v35[5] = a1;
        v11 = (Phase::Logger *)objc_msgSend(v9, "registerActivateAudioSessionBlock:", v35);
        if ((v11 & 1) == 0)
        {
          v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11) + 960));
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v38 = "SessionManager.mm";
            v39 = 1024;
            v40 = 72;
            v41 = 2048;
            v42 = a1;
            _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: Failed to register audio session activation block.", buf, 0x1Cu);
          }
        }
        v13 = *(void **)a1;
        v34[0] = v10;
        v34[1] = 3221225472;
        v34[2] = ___ZN5Phase10Controller14SessionManagerC2EPU24objcproto13PHASEPlatform11objc_objectPNS0_12VoiceManagerE_block_invoke_2;
        v34[3] = &unk_24D580ED0;
        v34[4] = v36;
        v14 = (Phase::Logger *)objc_msgSend(v13, "registerFadeClientsInAudioSessionBlock:", v34);
        if ((v14 & 1) == 0)
        {
          v15 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v14) + 960));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v38 = "SessionManager.mm";
            v39 = 1024;
            v40 = 82;
            v41 = 2048;
            v42 = a1;
            _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: Failed to register audio session fade block.", buf, 0x1Cu);
          }
        }
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v16 = *(void **)a1;
          v33[0] = v10;
          v33[1] = 3221225472;
          v33[2] = ___ZN5Phase10Controller14SessionManagerC2EPU24objcproto13PHASEPlatform11objc_objectPNS0_12VoiceManagerE_block_invoke_6;
          v33[3] = &__block_descriptor_40_e14_i20__0I8B12f16l;
          v33[4] = a1;
          v17 = (Phase::Logger *)objc_msgSend(v16, "registerMuteInputClientsInAudioSessionBlock:", v33);
          if ((v17 & 1) == 0)
          {
            v18 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v17) + 960));
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v38 = "SessionManager.mm";
              v39 = 1024;
              v40 = 104;
              v41 = 2048;
              v42 = a1;
              _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: Failed to register audio session mute input block.", buf, 0x1Cu);
            }
          }
        }
        v19 = _os_feature_enabled_impl();
        if ((v19 & 1) != 0)
        {
          if ((objc_opt_respondsToSelector() & 1) == 0)
            goto LABEL_23;
          objc_msgSend(*(id *)a1, "sessionVolumeInterface");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = v20 == 0;

          if (v21)
            goto LABEL_23;
          objc_msgSend(*(id *)a1, "sessionVolumeInterface");
          v22 = objc_claimAutoreleasedReturnValue();
          v23 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v22;

          v24 = *(void **)(a1 + 8);
          v32[0] = v10;
          v32[1] = 3221225472;
          v32[2] = ___ZN5Phase10Controller14SessionManagerC2EPU24objcproto13PHASEPlatform11objc_objectPNS0_12VoiceManagerE_block_invoke_10;
          v32[3] = &__block_descriptor_40_e28_B16__0__PHASEVolumeCommand_8l;
          v32[4] = a1;
          v25 = (Phase::Logger *)objc_msgSend(v24, "registerVolumeChangedNotificationBlock:", v32);
          if ((v25 & 1) != 0)
            goto LABEL_23;
          v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v25) + 960));
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            goto LABEL_23;
          *(_DWORD *)buf = 136315650;
          v38 = "SessionManager.mm";
          v39 = 1024;
          v40 = 126;
          v41 = 2048;
          v42 = a1;
          v27 = "%25s:%-5d impl@%p: Failed to register audio session volume changed notification block.";
          v28 = v26;
          v29 = OS_LOG_TYPE_ERROR;
        }
        else
        {
          v30 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v19) + 960));
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
LABEL_23:
            _Block_object_dispose(v36, 8);
            goto LABEL_24;
          }
          *(_DWORD *)buf = 136315650;
          v38 = "SessionManager.mm";
          v39 = 1024;
          v40 = 111;
          v41 = 2048;
          v42 = a1;
          v27 = "%25s:%-5d impl@%p: audio session volume feature disabled";
          v28 = v30;
          v29 = OS_LOG_TYPE_DEFAULT;
        }
        _os_log_impl(&dword_2164CC000, v28, v29, v27, buf, 0x1Cu);
        goto LABEL_23;
      }
    }
  }
LABEL_24:

  return a1;
}

void sub_2166B93F8(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  id *v3;
  uint64_t v4;

  _Block_object_dispose((const void *)(v4 - 160), 8);
  objc_destroyWeak(v3);

  _Unwind_Resume(a1);
}

void ___ZN5Phase10Controller14SessionManagerC2EPU24objcproto13PHASEPlatform11objc_objectPNS0_12VoiceManagerE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  NSObject *v8;
  id WeakRetained;
  void *v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 40);
  v6 = Phase::Controller::VoiceManager::Implementation::ActivateAudioSession(**(Phase::Controller::VoiceManager::Implementation ***)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a2, a3, 1);
  if (HIDWORD(v6))
    v7 = 1;
  else
    v7 = v6 == 0;
  if (!v7)
  {
    v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v6) + 960));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v11 = 136316418;
      v12 = "SessionManager.mm";
      v13 = 1024;
      v14 = 61;
      v15 = 2048;
      v16 = v5;
      v17 = 1024;
      v18 = a2;
      v19 = 1024;
      v20 = a3;
      v21 = 1024;
      v22 = 0;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: ActivateAudioSession(token=0x%x, active=%i) returned %i", (uint8_t *)&v11, 0x2Eu);
    }
  }
  WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
  v10 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "setExternalInputStreamSession:isActive:", a2, a3);

}

void sub_2166B9590(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN5Phase10Controller14SessionManagerC2EPU24objcproto13PHASEPlatform11objc_objectPNS0_12VoiceManagerE_block_invoke_2(uint64_t a1, int a2, float a3, float a4)
{
  return Phase::Controller::SubmixSystem::FadeAudioSession((Phase::Controller::SubmixSystem *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 224), a2, a3, a4, 1);
}

uint64_t ___ZN5Phase10Controller14SessionManagerC2EPU24objcproto13PHASEPlatform11objc_objectPNS0_12VoiceManagerE_block_invoke_6(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  id WeakRetained;
  double v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 24));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    *(float *)&v8 = a4;
    v10 = objc_msgSend(WeakRetained, "setExternalInputStreamSessionMute:isMuted:fadeTimeInSeconds:", a2, a3, v8);
  }
  else
  {
    v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 432));
    v10 = 0;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 136315394;
      v14 = "SessionManager.mm";
      v15 = 1024;
      v16 = 93;
      _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ignoring mute input notification because external stream manager was deallocated", (uint8_t *)&v13, 0x12u);
      v10 = 0;
    }
  }

  return v10;
}

void sub_2166B96E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ___ZN5Phase10Controller14SessionManagerC2EPU24objcproto13PHASEPlatform11objc_objectPNS0_12VoiceManagerE_block_invoke_10(uint64_t a1, void *a2)
{
  Phase::Controller::SessionManager *v2;
  id v3;
  Phase::Logger *v4;
  NSObject *v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  Phase::Logger *v11;
  NSObject *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  NSString *v19;
  NSString *v20;
  uint64_t v21;
  unint64_t AudioSessionVolume;
  unsigned __int8 v23;
  unsigned int v24;
  Phase::Logger *v25;
  NSObject *v26;
  uint64_t isKindOfClass;
  NSObject *v28;
  uint64_t v29;
  Phase::Logger *v31;
  int v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  Phase::Controller::SessionManager *v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  double v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v2 = *(Phase::Controller::SessionManager **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "description");
  v4 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
  v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                     + 960)));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    v34 = "SessionManager.mm";
    v35 = 1024;
    v36 = 362;
    v37 = 2048;
    v38 = v2;
    v39 = 2080;
    v40 = -[Phase::Logger UTF8String](objc_retainAutorelease(v4), "UTF8String");
    _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: --> volume notification - %s", buf, 0x26u);
  }

  if (!v3)
    std::terminate();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      v6 = v3;
      objc_msgSend(v6, "volume");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v6, "audioSessionToken");

      v9 = v7;
      if (v9)
      {
        v10 = v9;
        v11 = (Phase::Logger *)objc_msgSend(v10, "unit");
        if (v11)
        {
          v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11)
                                                                                              + 960)));
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v13 = objc_msgSend(v10, "unit");
            objc_msgSend(v10, "value");
            *(_DWORD *)buf = 136316162;
            v34 = "SessionManager.mm";
            v35 = 1024;
            v36 = 383;
            v37 = 2048;
            v38 = v2;
            v39 = 2048;
            v40 = v13;
            v41 = 2048;
            v42 = v14;
            _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: unimplemented volume unit %ld, value %f", buf, 0x30u);
          }

          v15 = 0;
          v16 = 0;
          v17 = 0;
        }
        else
        {
          objc_msgSend(v10, "value");
          v17 = v24;
          if (objc_msgSend(v10, "muted"))
            v15 = 0x100000000;
          else
            v15 = 0;
          v16 = 1;
        }

        AudioSessionVolume = v17 | v15;
        goto LABEL_22;
      }
    }
    else
    {
      v8 = 0;
    }
    AudioSessionVolume = Phase::Controller::SessionManager::GetAudioSessionVolume(v2, v8, 1);
    v16 = v23;
    v10 = 0;
    LOBYTE(v17) = AudioSessionVolume;
LABEL_22:
    v25 = (Phase::Logger *)(AudioSessionVolume & 0xFFFFFFFFFFFFFF00 | v17);
    v31 = v25;
    v32 = v16;
    if (v16)
    {
      v21 = Phase::Controller::SubmixSystem::SetAudioSessionLevel(**((_QWORD **)v2 + 2) + 224, v8, (uint64_t)&v31, 1);
    }
    else
    {
      v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v25) + 960));
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v34 = "SessionManager.mm";
        v35 = 1024;
        v36 = 440;
        v37 = 2048;
        v38 = v2;
        v39 = 1024;
        LODWORD(v40) = v8;
        _os_log_impl(&dword_2164CC000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: error: could not get/apply volume for session 0x%x", buf, 0x22u);
      }
      v21 = 0;
    }
    goto LABEL_27;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = v3;
    v18 = (_QWORD *)*((_QWORD *)v2 + 2);
    objc_msgSend(v10, "volumeCategory");
    v19 = (NSString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "volumeMode");
    v20 = (NSString *)objc_claimAutoreleasedReturnValue();
    v21 = Phase::Controller::SubmixSystem::SetAudioSessionLevelInVolumeCategoryAndMode((Phase::Controller::SubmixSystem *)(*v18 + 224), v19, v20, 1);

LABEL_27:
    goto LABEL_28;
  }
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    isKindOfClass = Phase::Controller::SubmixSystem::SetAudioSessionLevelOnAllSessions((Phase::Controller::SubmixSystem *)(**((_QWORD **)v2 + 2) + 224), 1);
    v21 = isKindOfClass;
  }
  else
  {
    v21 = 0;
  }
LABEL_28:
  v28 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)isKindOfClass)
                                                                                      + 960)));
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v29 = -[Phase::Logger UTF8String](objc_retainAutorelease(v4), "UTF8String");
    *(_DWORD *)buf = 136316162;
    v34 = "SessionManager.mm";
    v35 = 1024;
    v36 = 455;
    v37 = 2048;
    v38 = v2;
    v39 = 2080;
    v40 = v29;
    v41 = 2048;
    v42 = *(double *)&v21;
    _os_log_impl(&dword_2164CC000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: <-- volume notification - %s, submixes %zu", buf, 0x30u);
  }

  return v21 != 0;
}

void sub_2166B9C40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void Phase::Controller::SessionManager::~SessionManager(id *this)
{
  objc_destroyWeak(this + 3);

}

BOOL Phase::Controller::SessionManager::SetSessionPlayState(void **a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6, int32x2_t *a7)
{
  void *v9;
  int v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  _BOOL8 result;
  char *v18;
  const char *v19;
  int32x2_t v20;
  NSObject *v21;
  char *v22;
  const char *v23;
  _BYTE v24[4];
  int32x2_t v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  void **v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (!(_DWORD)a2 || (v9 = *a1) == 0)
  {
    if (!a7)
      return 1;
    v20 = (int32x2_t)1065353216;
LABEL_18:
    *a7 = v20;
    return 1;
  }
  v11 = a5;
  v13 = a2;
  v14 = a4 & 3 | (((a4 >> 2) & 1) << 6) | (32 * ((a4 >> 3) & 1));
  v24[0] = 0;
  if (a6)
  {
    v15 = objc_msgSend(v9, "setClientStateFromCallbackOnSession:clientToken:modes:state:outDuckingInfo:", a2, a3, v14, a5, v24);
    if ((v15 & 1) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
  v15 = objc_msgSend(v9, "setClientStateOnSession:clientToken:modes:state:outDuckingInfo:", a2, a3, v14, a5, v24);
  if ((_DWORD)v15)
  {
LABEL_12:
    v21 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v15) + 960));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = Phase::Controller::SessionManager::SetSessionPlayState(unsigned int,void *,unsigned int,AVAudioSessionClientPlayState,BOOL,Phase::Controller::SessionManager::DuckingInfo *)::statesStrings[v11];
      v27 = "SessionManager.mm";
      v23 = "";
      v29 = 187;
      *(_DWORD *)buf = 136317186;
      v28 = 1024;
      if (a6)
        v23 = ", from callback";
      v30 = 2048;
      v31 = a1;
      v32 = 2048;
      v33 = a3;
      v34 = 2080;
      v35 = v22;
      v36 = 1024;
      v37 = v14;
      v38 = 1024;
      v39 = v13;
      v40 = 2080;
      v41 = v23;
      v42 = 1024;
      v43 = v24[0];
      _os_log_impl(&dword_2164CC000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: Set client token %p state \"%s\" for modes 0x%x on session 0x%x%s - obtainedFromCM %d", buf, 0x4Cu);
    }
    if (!a7)
      return 1;
    v20 = vrev64_s32(v25);
    goto LABEL_18;
  }
LABEL_5:
  v16 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v15) + 960));
  result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v18 = Phase::Controller::SessionManager::SetSessionPlayState(unsigned int,void *,unsigned int,AVAudioSessionClientPlayState,BOOL,Phase::Controller::SessionManager::DuckingInfo *)::statesStrings[v11];
    *(_DWORD *)buf = 136316930;
    v27 = "SessionManager.mm";
    v19 = "";
    v28 = 1024;
    v29 = 200;
    if (a6)
      v19 = ", from callback";
    v30 = 2048;
    v31 = a1;
    v32 = 2048;
    v33 = a3;
    v34 = 2080;
    v35 = v18;
    v36 = 1024;
    v37 = v14;
    v38 = 1024;
    v39 = v13;
    v40 = 2080;
    v41 = v19;
    _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: Error setting client token %p state \"%s\" for modes 0x%x on session 0x%x%s", buf, 0x46u);
    return 0;
  }
  return result;
}

uint64_t Phase::Controller::SessionManager::GetSessionInputMuteState(id *this, uint64_t a2, uint64_t a3)
{
  int v3;
  int v5;
  uint64_t v8;
  void *v9;
  void *v10;
  NSObject *v11;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  id *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v3 = 0;
  v21 = *MEMORY[0x24BDAC8D0];
  if (!(_DWORD)a2)
  {
    v5 = 0;
    return v3 | (v5 << 8);
  }
  v5 = 0;
  if (*this)
  {
    v8 = objc_opt_respondsToSelector();
    if ((v8 & 1) != 0)
    {
      objc_msgSend(*this, "getInputMuteStateForSession:fromCallback:", a2, a3);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = v9;
      if (v9)
      {
        v3 = objc_msgSend(v9, "BOOLValue");

        v5 = 1;
        return v3 | (v5 << 8);
      }
    }
    else
    {
      v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v8) + 960));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v13 = 136315906;
        v14 = "SessionManager.mm";
        v15 = 1024;
        v16 = 233;
        v17 = 2048;
        v18 = this;
        v19 = 1024;
        v20 = a2;
        _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: Error getting input muted for session 0x%x", (uint8_t *)&v13, 0x22u);
      }
    }
    v3 = 0;
    v5 = 0;
  }
  return v3 | (v5 << 8);
}

void sub_2166BA138(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::Controller::SessionManager::SetSessionInputMuteState(void **this, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  void *v6;
  int v8;
  int v10;
  uint64_t v11;
  NSObject *v12;
  char *v13;
  const char *v14;
  void **v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *v19;
  const char *v20;
  void **v21;
  void *__p[2];
  char v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  void **v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  void **v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a2)
  {
    v6 = *this;
    if (v6)
    {
      v8 = a4;
      v10 = a2;
      if (a5)
      {
        v11 = objc_msgSend(v6, "setInputMuteStateFromCallbackOnSession:clientToken:isMuted:", a2, a3, a4);
        if ((v11 & 1) == 0)
          goto LABEL_5;
      }
      else
      {
        v11 = objc_msgSend(v6, "setInputMuteStateOnSession:clientToken:isMuted:", a2, a3, a4);
        if (!(_DWORD)v11)
        {
LABEL_5:
          v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v11)
                                                                                              + 960)));
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            if (a5)
              v13 = ", from callback";
            else
              v13 = "";
            std::string::basic_string[abi:ne180100]<0>(__p, v13);
            v25 = "SessionManager.mm";
            v14 = "False";
            if (v8)
              v14 = "True";
            v15 = (void **)__p[0];
            *(_DWORD *)buf = 136316674;
            v26 = 1024;
            if (v23 >= 0)
              v15 = __p;
            v27 = 270;
            v28 = 2048;
            v29 = this;
            v30 = 2048;
            v31 = a3;
            v32 = 2080;
            v33 = v14;
            v34 = 1024;
            v35 = v10;
            v36 = 2080;
            v37 = v15;
            v16 = "%25s:%-5d impl@%p: Error setting client token %p input muted %s on session 0x%x%s";
            v17 = v12;
            v18 = OS_LOG_TYPE_ERROR;
LABEL_24:
            _os_log_impl(&dword_2164CC000, v17, v18, v16, buf, 0x40u);
            if (v23 < 0)
              operator delete(__p[0]);
            goto LABEL_26;
          }
          goto LABEL_26;
        }
      }
      v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v11)
                                                                                          + 960)));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        if (a5)
          v19 = ", from callback";
        else
          v19 = "";
        std::string::basic_string[abi:ne180100]<0>(__p, v19);
        v25 = "SessionManager.mm";
        v20 = "False";
        if (v8)
          v20 = "True";
        v21 = (void **)__p[0];
        *(_DWORD *)buf = 136316674;
        v26 = 1024;
        if (v23 >= 0)
          v21 = __p;
        v27 = 264;
        v28 = 2048;
        v29 = this;
        v30 = 2048;
        v31 = a3;
        v32 = 2080;
        v33 = v20;
        v34 = 1024;
        v35 = v10;
        v36 = 2080;
        v37 = v21;
        v16 = "%25s:%-5d impl@%p: Set client token %p input muted %s on session 0x%x%s";
        v17 = v12;
        v18 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_24;
      }
LABEL_26:

    }
  }
}

void sub_2166BA3DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t Phase::Controller::SessionManager::GetAudioSessionVolume(Phase::Controller::SessionManager *this, uint64_t a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  int v7;
  PHASEVolumeCommandForSession *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  NSObject *v13;
  char *v14;
  void **v15;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  Phase::Controller::SessionManager *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  void **v28;
  uint64_t v29;

  v3 = 0;
  v29 = *MEMORY[0x24BDAC8D0];
  v4 = 0;
  if ((_DWORD)a2 && *((_QWORD *)this + 1))
  {
    v7 = a2;
    v8 = -[PHASEVolumeCommandForSession initWithSessionToken:]([PHASEVolumeCommandForSession alloc], "initWithSessionToken:", a2);
    v9 = (void *)*((_QWORD *)this + 1);
    if (a3)
      objc_msgSend(v9, "volumeForCommandFromCallback:", v8);
    else
      objc_msgSend(v9, "volumeForCommand:", v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v10)
    {
      objc_msgSend(v10, "value");
      v4 = v12;
      v3 = objc_msgSend(v11, "muted");
    }
    else
    {
      v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                          + 960)));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        if (a3)
          v14 = ", from callback";
        else
          v14 = "";
        std::string::basic_string[abi:ne180100]<0>(__p, v14);
        if (v18 >= 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        *(_DWORD *)buf = 136316162;
        v20 = "SessionManager.mm";
        v21 = 1024;
        v22 = 305;
        v23 = 2048;
        v24 = this;
        v25 = 1024;
        v26 = v7;
        v27 = 2080;
        v28 = v15;
        _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: could not get volume for session 0x%x%s", buf, 0x2Cu);
        if (v18 < 0)
          operator delete(__p[0]);
      }

      v3 = 0;
    }

  }
  return v4 | (unint64_t)(v3 << 32);
}

void sub_2166BA5EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t Phase::Controller::SessionManager::GetAudioSessionVolumeIfInVolumeCategoryAndMode(Phase::Controller::SessionManager *this, uint64_t a2, NSString *a3, NSString *a4, int a5)
{
  NSString *v9;
  NSString *v10;
  uint64_t v11;
  unsigned int v12;
  PHASEVolumeCommandForVolumeCategoryModeAndSession *v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void **v22;
  void *__p[2];
  char v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  Phase::Controller::SessionManager *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  void **v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  v10 = a4;
  v11 = 0;
  v12 = 0;
  if ((_DWORD)a2 && *((_QWORD *)this + 1))
  {
    v13 = -[PHASEVolumeCommandForVolumeCategoryModeAndSession initWithCategory:mode:sessionToken:]([PHASEVolumeCommandForVolumeCategoryModeAndSession alloc], "initWithCategory:mode:sessionToken:", v9, v10, a2);
    v14 = (void *)*((_QWORD *)this + 1);
    if (a5)
      objc_msgSend(v14, "volumeForCommandFromCallback:", v13);
    else
      objc_msgSend(v14, "volumeForCommand:", v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v15;
    if (v15)
    {
      objc_msgSend(v15, "value");
      v12 = v17;
      v11 = objc_msgSend(v16, "muted");
    }
    else
    {
      v18 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                          + 960)));
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        v19 = -[NSString UTF8String](objc_retainAutorelease(v9), "UTF8String");
        v20 = -[NSString UTF8String](objc_retainAutorelease(v10), "UTF8String");
        if (a5)
          v21 = ", from callback";
        else
          v21 = "";
        std::string::basic_string[abi:ne180100]<0>(__p, v21);
        if (v25 >= 0)
          v22 = __p;
        else
          v22 = (void **)__p[0];
        *(_DWORD *)buf = 136316674;
        v27 = "SessionManager.mm";
        v28 = 1024;
        v29 = 350;
        v30 = 2048;
        v31 = this;
        v32 = 1024;
        v33 = a2;
        v34 = 2080;
        v35 = v19;
        v36 = 2080;
        v37 = v20;
        v38 = 2080;
        v39 = v22;
        _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d impl@%p: could not get volume for session 0x%x in volume category/mode [%s, %s]%s", buf, 0x40u);
        if (v25 < 0)
          operator delete(__p[0]);
      }

      v11 = 0;
    }

  }
  return v12 | (unint64_t)(v11 << 32);
}

void sub_2166BA870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

Phase::Controller::HeadTracker *Phase::Controller::HeadTracker::HeadTracker(Phase::Controller::HeadTracker *this)
{
  Phase::Controller::HeadTrackerImpl *v2;

  v2 = (Phase::Controller::HeadTrackerImpl *)operator new(0x240uLL, (std::align_val_t)0x40uLL);
  Phase::Controller::HeadTrackerImpl::HeadTrackerImpl(v2);
  *(_QWORD *)this = v2;
  return this;
}

void sub_2166BA8F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D64](v1, 64);
  _Unwind_Resume(a1);
}

void Phase::Controller::HeadTracker::~HeadTracker(CFTypeRef **this)
{
  CFTypeRef *v1;

  v1 = *this;
  if (*this)
  {
    CFRelease(*v1);
    MEMORY[0x2199F9D64](v1, 64);
  }
}

void Phase::Controller::HeadTrackerImpl::UpdateAndGetLatest(unint64_t *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  double v6;
  unint64_t v7;
  double v8;
  double v9;
  Phase::Logger *v10;
  __int128 v11;
  NSObject *v12;
  double v13;
  const char *v14;
  unint64_t *v15;
  double v16;
  unint64_t v17;
  double v18;
  __int128 v19;
  Phase::Logger *ShouldFire;
  int v21;
  NSObject *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint32_t v25;
  Phase::Logger *v26;
  __int128 v27;
  double v28;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  double v35;
  _BYTE buf[48];
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v35 = 0.0;
  v4 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v31 = *MEMORY[0x24BDAEE00];
  v32 = v4;
  v5 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  v33 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  v34 = v5;
  if (ATThreadSafeHeadTrackerPredictLatestTransform())
  {
    mach_absolute_time();
    v6 = (double)(unint64_t)__udivti3() / 1000000000.0;
    v7 = atomic_load(a1 + 64);
    v8 = *(double *)&v7;
    v9 = COERCE_DOUBLE(atomic_load(a1 + 32));
    if (v8 <= v9)
    {
      v26 = (Phase::Logger *)caulk::concurrent::atomic_value<Phase::Affine<float>,2,6>::load((uint64_t)buf, (uint64_t)(a1 + 8));
      v27 = *(_OWORD *)&buf[16];
      *(_OWORD *)a2 = *(_OWORD *)buf;
      *(_OWORD *)(a2 + 16) = v27;
      v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v26) + 1024));
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        return;
      v28 = COERCE_DOUBLE(atomic_load(a1 + 32));
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "SharedEntityHeadTracker.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 86;
      *(_WORD *)&buf[18] = 2048;
      *(double *)&buf[20] = v6 - v28;
      v14 = "%25s:%-5d Failed to get prediction from headtracker, using latest tracker result that is %0.4f sec old";
    }
    else
    {
      v10 = (Phase::Logger *)caulk::concurrent::atomic_value<Phase::Affine<float>,2,6>::load((uint64_t)buf, (uint64_t)(a1 + 40));
      v11 = *(_OWORD *)&buf[16];
      *(_OWORD *)a2 = *(_OWORD *)buf;
      *(_OWORD *)(a2 + 16) = v11;
      v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10) + 1024));
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        return;
      v13 = COERCE_DOUBLE(atomic_load(a1 + 64));
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "SharedEntityHeadTracker.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 79;
      *(_WORD *)&buf[18] = 2048;
      *(double *)&buf[20] = v6 - v13;
      v14 = "%25s:%-5d Failed to get prediction from headtracker, using fallback transform that is %0.4f sec old";
    }
    v23 = v12;
    v24 = OS_LOG_TYPE_ERROR;
    v25 = 28;
    goto LABEL_16;
  }
  v15 = a1 + 32;
  v16 = COERCE_DOUBLE(atomic_load(a1 + 32));
  v17 = *(_QWORD *)&v35;
  if (v35 <= v16)
  {
LABEL_10:
    caulk::concurrent::atomic_value<Phase::Affine<float>,2,6>::load((uint64_t)buf, (uint64_t)(a1 + 8));
    v19 = *(_OWORD *)&buf[16];
    *(_OWORD *)a2 = *(_OWORD *)buf;
    *(_OWORD *)(a2 + 16) = v19;
    *(_QWORD *)&v30[0] = 0;
    ShouldFire = (Phase::Logger *)Phase::Throttle::ShouldFire((Phase::Throttle *)(a1 + 1), (double *)v30);
    v21 = (int)ShouldFire;
    if ((int)ShouldFire >= 1)
    {
      v22 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(ShouldFire) + 1024));
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "SharedEntityHeadTracker.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 130;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v21;
        *(_WORD *)&buf[24] = 2048;
        *(_QWORD *)&buf[26] = 0x4000000000000000;
        v14 = "%25s:%-5d Did not get updated prediction from headtracker for %d times in the last %.2f seconds - used cached values.";
        v23 = v22;
        v24 = OS_LOG_TYPE_DEFAULT;
        v25 = 34;
LABEL_16:
        _os_log_impl(&dword_2164CC000, v23, v24, v14, buf, v25);
      }
    }
  }
  else
  {
    do
    {
      while (1)
      {
        v18 = COERCE_DOUBLE(__ldaxr(v15));
        if (*(_QWORD *)&v18 == *(_QWORD *)&v16)
          break;
        __clrex();
        v17 = *(_QWORD *)&v35;
        v16 = v18;
        if (v35 <= v18)
          goto LABEL_10;
      }
    }
    while (__stlxr(v17, v15));
    *(_OWORD *)buf = v31;
    *(_OWORD *)&buf[16] = v32;
    *(_OWORD *)&buf[32] = v33;
    v37 = v34;
    Phase::AffineFrom<float>((float *)buf, (uint64_t)v30);
    v29 = v30[1];
    *(_OWORD *)a2 = v30[0];
    *(_OWORD *)(a2 + 16) = v29;
    caulk::concurrent::atomic_value<Phase::Affine<float>,2,6>::store((uint64_t)(a1 + 8), (unsigned int *)a2);
  }
}

Phase::Controller::HeadTrackerImpl *Phase::Controller::HeadTrackerImpl::HeadTrackerImpl(Phase::Controller::HeadTrackerImpl *this)
{
  uint64_t SharedInstance;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  _OWORD v8[2];

  SharedInstance = ATThreadSafeHeadTrackerGetSharedInstance();
  v3 = 0;
  *(_QWORD *)this = SharedInstance;
  *(_OWORD *)((char *)this + 8) = xmmword_2166F7500;
  *((_DWORD *)this + 6) = 0;
  *((_OWORD *)this + 2) = xmmword_2166F7500;
  *((_DWORD *)this + 12) = 0;
  *((_BYTE *)this + 64) = 0;
  *((_DWORD *)this + 17) = 0;
  do
  {
    v4 = (char *)this + v3;
    *((_QWORD *)v4 + 16) = 0;
    *((_QWORD *)v4 + 17) = 0;
    *((_QWORD *)v4 + 18) = 1065353216;
    *((_QWORD *)v4 + 19) = 0;
    v3 += 64;
    *((_DWORD *)v4 + 40) = 1065353216;
  }
  while (v3 != 128);
  v5 = 0;
  *((_QWORD *)this + 32) = 0;
  *((_BYTE *)this + 320) = 0;
  *((_DWORD *)this + 81) = 0;
  do
  {
    v6 = (char *)this + v5;
    *((_QWORD *)v6 + 48) = 0;
    *((_QWORD *)v6 + 49) = 0;
    *((_QWORD *)v6 + 50) = 1065353216;
    *((_QWORD *)v6 + 51) = 0;
    v5 += 64;
    *((_DWORD *)v6 + 104) = 1065353216;
  }
  while (v5 != 128);
  v8[0] = xmmword_2166F7280;
  v8[1] = xmmword_2166F7280;
  caulk::concurrent::atomic_value<Phase::Affine<float>,2,6>::store((uint64_t)this + 64, (unsigned int *)v8);
  CFRetain(*(CFTypeRef *)this);
  return this;
}

uint64_t caulk::concurrent::atomic_value<Phase::Affine<float>,2,6>::store(uint64_t result, unsigned int *a2)
{
  unsigned __int8 *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v3 = (unsigned __int8 *)result;
  v11 = 0;
  v4 = (unsigned int *)(result + 4);
  v5 = result + 64;
  do
LABEL_2:
    v6 = __ldaxr(v4);
  while (__stlxr(v6 + 1, v4));
  v7 = (unsigned int *)(v5 + ((unint64_t)(v6 & 1) << 6));
  v8 = 2 * v6;
  atomic_store(2 * v6, v7);
  v7[1] = *a2;
  v7[2] = a2[1];
  v7[3] = a2[2];
  v7[4] = a2[3];
  v7[5] = a2[4];
  v7[6] = a2[5];
  v7[7] = a2[6];
  v7[8] = a2[7];
  __dmb(0xBu);
  v9 = (2 * v6) | 1;
  do
  {
    v10 = __ldaxr(v7);
    if (v10 != v8)
    {
      __clrex();
      result = caulk::concurrent::details::spinloop::spin((uint64_t)&v11);
      goto LABEL_2;
    }
  }
  while (__stlxr(v9, v7));
  atomic_store(1u, v3);
  return result;
}

uint64_t caulk::concurrent::atomic_value<Phase::Affine<float>,2,6>::load(uint64_t result, uint64_t a2)
{
  _OWORD *v2;
  unsigned __int8 v3;
  unsigned __int8 v5;
  char v6;
  char v7;
  char v8;
  char v9;
  unint64_t v10;
  unsigned int v11;
  __int128 v12;
  unsigned __int8 v13;
  int v14;

  v2 = (_OWORD *)result;
  v3 = atomic_load((unsigned __int8 *)a2);
  if ((v3 & 1) != 0)
  {
    v14 = 0;
    v5 = atomic_load((unsigned __int8 *)a2);
    if ((v5 & 1) != 0)
    {
      do
      {
        v6 = atomic_load((unsigned int *)(a2 + 4));
        v7 = v6 - 1;
        v8 = 1;
        while (1)
        {
          v9 = v8;
          v10 = a2 + 64 + ((unint64_t)(v7 & 1) << 6);
          v11 = atomic_load((unsigned int *)v10);
          if ((v11 & 1) != 0)
            break;
          v8 = 0;
          --v7;
          if ((v9 & 1) == 0)
            goto LABEL_11;
        }
        v12 = *(_OWORD *)(v10 + 20);
        *v2 = *(_OWORD *)(v10 + 4);
        v2[1] = v12;
        __dmb(9u);
        if (v11 == *(_DWORD *)v10)
          return result;
        result = caulk::concurrent::details::spinloop::spin((uint64_t)&v14);
LABEL_11:
        v13 = atomic_load((unsigned __int8 *)a2);
      }
      while ((v13 & 1) != 0);
    }
    _os_assert_log();
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_OWORD *)result = xmmword_2166F7280;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 20) = 0;
    *(_DWORD *)(result + 28) = 1065353216;
  }
  return result;
}

Phase::Controller::SharedEntityManager *Phase::Controller::SharedEntityManager::SharedEntityManager(Phase::Controller::SharedEntityManager *this, const Phase::Controller::TaskManager *a2)
{
  NSObject *v3;
  dispatch_queue_t v4;
  void *v5;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = 1065353216;
  *((_QWORD *)this + 16) = Phase::Controller::TaskManager::GetService<Phase::Geometry::System>(a2, 2);
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 18) = 1819626849;
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = dispatch_queue_create("SharedEntityManager", v3);
  v5 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v4;

  return this;
}

void sub_2166BAFC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1 + 88);
  std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

id applesauce::dispatch::v1::queue::operator*(id *a1)
{
  return *a1;
}

uint64_t Phase::Controller::SharedEntityManager::Update(Phase::Controller::SharedEntityManager *this, float a2)
{
  Phase::Logger *v3;
  uint64_t v4;
  uint64_t *UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA;
  uint64_t v6;
  __int128 v7;
  dispatch_once_t *v8;
  uint64_t v9;
  unint64_t **v10;
  NSObject *v11;
  NSObject *v13;
  std::runtime_error *exception;
  __int128 v15;
  __int128 v16;
  _BYTE buf[24];
  void *v18;
  Phase::Controller::SharedEntityManager *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = (Phase::Logger *)atomic_load((unint64_t *)this + 10);
  v15 = xmmword_2166F7280;
  LODWORD(v16) = 0;
  *(_QWORD *)((char *)&v16 + 4) = 0;
  HIDWORD(v16) = 1065353216;
  v4 = *((_QWORD *)this + 18);
  if (v4 == 1819623797)
  {
    v8 = (dispatch_once_t *)((char *)this + 160);
    v9 = *((_QWORD *)this + 20);
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZN5Phase10Controller19SharedEntityManager22GetOrCreateHeadTrackerEv_block_invoke;
    v18 = &__block_descriptor_40_e5_v8__0l;
    v19 = this;
    if (v9 != -1)
      dispatch_once(v8, buf);
    v10 = (unint64_t **)*((_QWORD *)this + 19);
    if (!v10)
    {
      v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v8) + 1024));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "SharedEntityManager.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 390;
        _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [tracker == nullptr is true]: \"tracker is unexpectedly null\"", buf, 0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "tracker is unexpectedly null");
    }
    Phase::Controller::HeadTrackerImpl::UpdateAndGetLatest(*v10, (uint64_t)&v15);
    Phase::Geometry::SystemScheduler::UpdateTransform(*((_QWORD *)this + 16) + 2352, (uint64_t)v3, &v15);
  }
  else if (v4 == 1819626849)
  {
    *(_QWORD *)buf = *((_QWORD *)this + 16) + 1240;
    UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA = (uint64_t *)_ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(*(uint64_t *)buf, (uint64_t)v3, (uint64_t)buf);
    if (UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA)
    {
      v6 = *UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA;
      if (*UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA)
      {
        v7 = *(_OWORD *)(v6 + 64);
        v15 = *(_OWORD *)(v6 + 48);
        v16 = v7;
      }
    }
  }
  else
  {
    v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 1024));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "SharedEntityManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 402;
      _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid listener update mode!", buf, 0x12u);
    }
  }
  return Phase::Trace::PostSharedListenerTransformUpdate(v3, (float *)&v15);
}

void sub_2166BB24C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2166BB2AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void ___ZN5Phase37CurrentProcessCanModifySharedEntitiesEv_block_invoke()
{
  __SecTask *v0;
  __SecTask *v1;
  const __CFBoolean *v2;
  const __CFBoolean *v3;
  CFTypeID v4;
  BOOL v5;

  v0 = SecTaskCreateFromSelf(0);
  if (v0)
  {
    v1 = v0;
    v2 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v0, CFSTR("com.apple.coreaudio.control-shared-entities"), 0);
    if (v2)
    {
      v3 = v2;
      v4 = CFGetTypeID(v2);
      v5 = v4 == CFBooleanGetTypeID() && CFBooleanGetValue(v3) != 0;
      Phase::CurrentProcessCanModifySharedEntities(void)::currentProcessCanModifySharedEntities = v5;
      CFRelease(v3);
    }
    CFRelease(v1);
  }
}

void ___ZN5Phase33CurrentProcessCanSelectEngineModeEv_block_invoke()
{
  __SecTask *v0;
  __SecTask *v1;
  const __CFBoolean *v2;
  const __CFBoolean *v3;
  CFTypeID v4;
  BOOL v5;

  v0 = SecTaskCreateFromSelf(0);
  if (v0)
  {
    v1 = v0;
    v2 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v0, CFSTR("com.apple.coreaudio.allow-engine-mode-selection"), 0);
    if (v2)
    {
      v3 = v2;
      v4 = CFGetTypeID(v2);
      v5 = v4 == CFBooleanGetTypeID() && CFBooleanGetValue(v3) != 0;
      Phase::CurrentProcessCanSelectEngineMode(void)::currentProcessCanSelectEngineMode = v5;
      CFRelease(v3);
    }
    CFRelease(v1);
  }
}

BOOL Phase::GetListenerUpdateModeFromEnum(Phase::Logger *a1)
{
  _BOOL8 result;
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1 == (Phase::Logger *)1819626849)
    return 0;
  if (a1 == (Phase::Logger *)1819623797)
    return 1;
  v2 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 1024));
  result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v3 = 136315394;
    v4 = "SharedEntityUtils.mm";
    v5 = 1024;
    v6 = 141;
    _os_log_impl(&dword_2164CC000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d Unrecognized listener update mode, setting to Manual", (uint8_t *)&v3, 0x12u);
    return 0;
  }
  return result;
}

Phase::DspLayer::SimpleConvolver *Phase::DspLayer::SimpleConvolver::SimpleConvolver(Phase::DspLayer::SimpleConvolver *this, int a2, int a3)
{
  *(_QWORD *)this = &off_24D580FE8;
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_QWORD *)this + 2) = malloc_type_malloc(8 * a2 * a3, 0x100004052888210uLL);
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 7) = Phase::DspLayer::IConvolver::GetFftFwd(this, 2 * *((_DWORD *)this + 2));
  *((_QWORD *)this + 8) = Phase::DspLayer::IConvolver::GetFftInv(this, 2 * *((_DWORD *)this + 2));
  *((_QWORD *)this + 4) = malloc_type_malloc(4 * *((int *)this + 2), 0x100004052888210uLL);
  *((_DWORD *)this + 10) = a2;
  *((_DWORD *)this + 11) = a2;
  (*(void (**)(Phase::DspLayer::SimpleConvolver *))(*(_QWORD *)this + 32))(this);
  return this;
}

void Phase::DspLayer::SimpleConvolver::~SimpleConvolver(void **this)
{
  *this = &off_24D580FE8;
  free(this[2]);
  free(this[4]);
}

{
  *this = &off_24D580FE8;
  free(this[2]);
  free(this[4]);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::DspLayer::SimpleConvolver::SetFilter(Phase::DspLayer::SimpleConvolver *this, int a2, const DSPComplex *a3, int a4)
{
  uint64_t v9;
  float *v10;
  uint64_t v11;
  vDSP_Length v12;
  vDSP_Length v13;
  const DSPComplex *v14;
  size_t v15;
  DSPComplex *v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  DSPSplitComplex __Z;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a2 < 0 || *((_DWORD *)this + 3) <= a2)
    return 2;
  if (a4 < 1 || (*(int (**)(Phase::DspLayer::SimpleConvolver *))(*(_QWORD *)this + 48))(this) < a4)
    return 1;
  v9 = *((int *)this + 2);
  v10 = (float *)(*((_QWORD *)this + 2) + 8 * a2 * (int)v9);
  vDSP_vclr(v10, 1, 2 * v9);
  v12 = *((int *)this + 2);
  if ((_DWORD)v12 == a4)
  {
    __Z.realp = v10;
    __Z.imagp = &v10[a4];
    v13 = a4 >> 1;
    v14 = a3;
  }
  else
  {
    MEMORY[0x24BDAC7A8](v11);
    v16 = (DSPComplex *)((char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    bzero(v16, v15);
    vDSP_vclr((float *)v16, 1, v12);
    memcpy(v16, a3, 4 * a4);
    v17 = *((int *)this + 2);
    __Z.realp = v10;
    __Z.imagp = &v10[v17];
    v13 = (uint64_t)(int)(v17 + ((int)v17 < 0)) >> 1;
    v14 = v16;
  }
  vDSP_ctoz(v14, 2, &__Z, 1, v13);
  v18 = &v10[*((int *)this + 2)];
  vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)this + 7), v10, v18, v10, v18);
  return 0;
}

void Phase::DspLayer::SimpleConvolver::Process(Phase::DspLayer::SimpleConvolver *this, const DSPComplex *a2, float **a3)
{
  uint64_t v6;
  int v7;
  DSPComplex *v8;
  size_t v9;
  char *v10;
  vDSP_Length v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  float *v17;
  uint64_t v18;
  int v19;
  float v20;
  float v21;
  float *realp;
  float *imagp;
  float v24;
  float32x4_t *v25;
  vDSP_Length v26;
  int64_t v27;
  int32x4_t v28;
  int32x4_t v29;
  uint64_t v30;
  DSPSplitComplex __B;
  DSPSplitComplex __C;
  DSPSplitComplex __Z;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = *((int *)this + 2);
  if ((int)v6 >= 0)
    v7 = *((_DWORD *)this + 2);
  else
    v7 = v6 + 1;
  v8 = (DSPComplex *)*((_QWORD *)this + 4);
  MEMORY[0x24BDAC7A8](this);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v10, v9);
  __Z.realp = (float *)v10;
  __Z.imagp = (float *)&v10[4 * v6];
  v11 = (uint64_t)v7 >> 1;
  vDSP_ctoz(v8, 2, &__Z, 1, v11);
  __Z.realp += v7 >> 1;
  __Z.imagp += v7 >> 1;
  vDSP_ctoz(a2, 2, &__Z, 1, v11);
  v12 = *((int *)this + 2);
  v13 = (float *)&v10[4 * v12];
  __Z.realp = (float *)v10;
  __Z.imagp = v13;
  memcpy(v8, a2, 4 * v12);
  vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)this + 7), (const float *)v10, v13, (float *)v10, v13);
  v14 = *((int *)this + 2);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (float *)((char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __C.realp = v17;
  __C.imagp = &v17[v14];
  if (*((int *)this + 3) >= 1)
  {
    bzero(v17, v16);
    v18 = 0;
    v19 = v14;
    do
    {
      __B.realp = (float *)(*((_QWORD *)this + 2) + 8 * v18 * v19);
      __B.imagp = &__B.realp[v19];
      v20 = *__Z.realp * *__B.realp;
      v21 = *__Z.imagp * *__B.imagp;
      vDSP_zvmul(&__Z, 1, &__B, 1, &__C, 1, v19, 1);
      realp = __C.realp;
      *__C.realp = v20;
      imagp = __C.imagp;
      *__C.imagp = v21;
      vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)this + 8), realp, imagp, realp, imagp);
      v19 = *((_DWORD *)this + 2);
      if ((int)v11 < v19)
      {
        v24 = 0.125 / (float)v19;
        v25 = (float32x4_t *)(a3[v18] + 4);
        v26 = v11;
        v27 = v11;
        do
        {
          v28 = *(int32x4_t *)&__C.realp[v26];
          v29 = *(int32x4_t *)&__C.imagp[v26];
          v25[-1] = vmulq_n_f32((float32x4_t)vzip1q_s32(v28, v29), v24);
          *v25 = vmulq_n_f32((float32x4_t)vzip2q_s32(v28, v29), v24);
          v27 += 4;
          v26 += 4;
          v25 += 2;
        }
        while (v27 < *((int *)this + 2));
        v19 = *((_DWORD *)this + 2);
      }
      ++v18;
    }
    while (v18 < *((int *)this + 3));
  }
}

uint64_t Phase::DspLayer::SimpleConvolver::GetFilterState(Phase::DspLayer::SimpleConvolver *this)
{
  return (uint64_t)this + 24;
}

void Phase::DspLayer::SimpleConvolver::Reset(float **this)
{
  vDSP_vclr(this[2], 1, 2 * *((int *)this + 3) * (uint64_t)*((int *)this + 2));
  vDSP_vclr(this[4], 1, *((int *)this + 2));
}

uint64_t Phase::DspLayer::SimpleConvolver::GetFilterLength(Phase::DspLayer::SimpleConvolver *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t Phase::DspLayer::SimpleConvolver::GetMaxFilterLength(Phase::DspLayer::SimpleConvolver *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t Phase::DspLayer::SimpleConvolver::GetBlockSize(Phase::DspLayer::SimpleConvolver *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t Phase::DspLayer::SimpleConvolver::GetNumOutputChannels(Phase::DspLayer::SimpleConvolver *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t Phase::DspLayer::SimpleConvolver::GetNumPartitions(Phase::DspLayer::SimpleConvolver *this)
{
  return 1;
}

uint64_t Phase::DspLayer::SimpleConvolver::CopyStates(Phase::DspLayer::SimpleConvolver *this, Phase::DspLayer::IConvolver *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(Phase::DspLayer::IConvolver *, _QWORD))(*(_QWORD *)a2 + 80))(a2, 0);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3);
  return Phase::DspLayer::IConvolver::FilterState::Copy((uint64_t)this + 24, v4);
}

float *Phase::SpatialModeler::SimulationController::RequireSimulation@<X0>(float *this@<X0>, const Phase::SpatialModeler::RayTracerState *a2@<X1>, Phase::SpatialModeler::RayTracerState *a3@<X2>, Phase::Geometry::SystemState *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  float *v9;
  unint64_t v10;
  float v11;
  float v12;
  float v13;
  char *v14;
  Phase::SpatialModeler::RayTracerState *v15;
  float MinNumberOfActiveRaysAmongSources;
  _OWORD v17[8];
  unint64_t v18;

  if (*((_BYTE *)a3 + 168))
  {
    v8 = (uint64_t)this;
    v9 = (float *)((char *)a3 + 19648);
    v10 = *((unsigned int *)a3 + 4943);
    v11 = *((float *)a3 + 4912);
    if (v10 <= 1)
      v11 = 0.0;
    if ((_DWORD)v10)
    {
      do
      {
        v12 = *v9++;
        v13 = v12;
        if (v11 < v12)
          v11 = v13;
        --v10;
      }
      while (v10);
    }
    this[140] = 5000.0;
    this[141] = fminf(fmaxf((float)(v11 * 18.836) / 3.1416, 7500.0), 150000.0);
    v14 = (char *)a2 + 18928;
    v18 = *((_QWORD *)a2 + 2822);
    v15 = (Phase::SpatialModeler::RayTracerState *)*((unsigned int *)a2 + 83);
    MinNumberOfActiveRaysAmongSources = Phase::SpatialModeler::RayTracerState::getMinNumberOfActiveRaysAmongSources(a3);
    Phase::SpatialModeler::RayTracerState::GetSumSharedReverbEnergy(a3, v17);
    Phase::SpatialModeler::SimulationController::RequireSimulation(v8, (uint64_t)v14, &v18, (uint64_t)a4, v15, (float *)v17, (__int128 *)a3 + 1315, a5, MinNumberOfActiveRaysAmongSources);
    return (float *)Phase::SpatialModeler::Telemetry::AddSceneObserverResults((_DWORD *)a3 + 5368, a5);
  }
  else
  {
    *(_QWORD *)(a5 + 66) = 0;
    *(_QWORD *)(a5 + 58) = 0;
    *(_DWORD *)(a5 + 74) = 0;
    *(_BYTE *)a5 = 1;
    *(_QWORD *)(a5 + 9) = 0;
    *(_QWORD *)(a5 + 1) = 0;
    *(_WORD *)(a5 + 17) = 0;
    *(_BYTE *)(a5 + 19) = 1;
    *(_QWORD *)(a5 + 28) = 0;
    *(_QWORD *)(a5 + 20) = 0;
    *(_WORD *)(a5 + 36) = 0;
    *(_BYTE *)(a5 + 38) = 1;
    *(_QWORD *)(a5 + 47) = 0;
    *(_QWORD *)(a5 + 39) = 0;
    *(_WORD *)(a5 + 55) = 0;
    *(_BYTE *)(a5 + 57) = 1;
  }
  return this;
}

std::chrono::steady_clock::time_point Phase::SpatialModeler::SimulationController::RequireSimulation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, Phase::SpatialModeler::RayTracerState *a5@<X4>, float *a6@<X5>, __int128 *a7@<X6>, uint64_t a8@<X8>, float a9@<S0>)
{
  __int128 v13;
  __int128 v14;
  std::chrono::steady_clock::time_point result;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  float v23;
  float v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  _BYTE v39[78];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a8 + 62) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)a8 = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  Phase::SpatialModeler::SceneObserver::DetectSceneChanges((_QWORD *)a1, a2, a3, a4, a5, a7, (uint64_t)v39);
  v13 = *(_OWORD *)&v39[48];
  *(_OWORD *)(a8 + 32) = *(_OWORD *)&v39[32];
  *(_OWORD *)(a8 + 48) = v13;
  *(_OWORD *)(a8 + 62) = *(_OWORD *)&v39[62];
  v14 = *(_OWORD *)&v39[16];
  *(_OWORD *)a8 = *(_OWORD *)v39;
  *(_OWORD *)(a8 + 16) = v14;
  if (Phase::SpatialModeler::SceneObserver::isDetectEnergyFluctuation(a1, a6))
  {
    *(_QWORD *)&v39[63] = 0;
    *(_QWORD *)&v39[57] = 0;
    *(_QWORD *)v39 = 0;
    *(_QWORD *)&v39[6] = 0;
    v39[14] = 1;
    memset(&v39[15], 0, 18);
    v39[33] = 1;
    memset(&v39[34], 0, 18);
    v39[52] = 1;
    *(_DWORD *)&v39[53] = 0;
    v39[71] = 1;
    *(_DWORD *)&v39[72] = 0;
    *(_WORD *)&v39[76] = 0;
    Phase::SpatialModeler::SimulationUpdate::operator|=(a8, (uint64_t)v39);
  }
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v16 = 0;
  do
  {
    v17 = *(unsigned __int8 *)(a8 + v16);
    if (*(_BYTE *)(a8 + v16))
      v18 = 1;
    else
      v18 = v16 == 18;
    ++v16;
  }
  while (!v18);
  if (v17)
  {
    *(_DWORD *)(a1 + 568) = 0;
    *(_BYTE *)(a8 + 76) = 0;
  }
  else
  {
    *(_BYTE *)(a8 + 76) = 1;
    if (*(float *)(a1 + 568) < *(float *)(a1 + 560))
    {
      *(_BYTE *)(a8 + 16) = 1;
      *(_BYTE *)(a8 + 54) = 1;
    }
    *(float *)(a1 + 568) = a9;
  }
  v19 = 0;
  v20 = a8 + 19;
  do
  {
    v21 = *(unsigned __int8 *)(v20 + v19);
    if (*(_BYTE *)(v20 + v19))
      v22 = 1;
    else
      v22 = v19 == 18;
    ++v19;
  }
  while (!v22);
  if (v21)
  {
    *(_DWORD *)(a1 + 572) = 0;
    *(_BYTE *)(a8 + 77) = 0;
  }
  else
  {
    *(_BYTE *)(a8 + 77) = 1;
    v23 = *(float *)(a1 + 564);
    if (*(float *)(a1 + 572) < v23)
    {
      if (v23 <= a9)
      {
        *(_BYTE *)(a8 + 36) = 1;
        *(_BYTE *)(a8 + 74) = 1;
      }
      else
      {
        v24 = (float)(result.__d_.__rep_ - *(_QWORD *)(a1 + 552));
        *(_BYTE *)(a8 + 34) = 1;
        if ((float)(v24 / 1000000000.0) <= 15.0)
        {
          *(_QWORD *)(a8 + 65) = 0;
          *(_QWORD *)(a8 + 57) = 0;
          *(_DWORD *)(a8 + 72) = 0;
        }
        else
        {
          *(_BYTE *)(a8 + 75) = 1;
        }
      }
    }
    *(float *)(a1 + 572) = a9;
  }
  v25 = 0;
  do
  {
    v26 = *(unsigned __int8 *)(a8 + v25);
    if (*(_BYTE *)(a8 + v25))
      v27 = 1;
    else
      v27 = v25 == 18;
    ++v25;
  }
  while (!v27);
  if (v26)
    *(std::chrono::steady_clock::time_point *)(a1 + 528) = result;
  v28 = 0;
  v29 = a8 + 38;
  do
  {
    v30 = *(unsigned __int8 *)(v29 + v28);
    if (*(_BYTE *)(v29 + v28))
      v31 = 1;
    else
      v31 = v28 == 18;
    ++v28;
  }
  while (!v31);
  if (v30)
    *(std::chrono::steady_clock::time_point *)(a1 + 544) = result;
  v32 = 0;
  do
  {
    v33 = *(unsigned __int8 *)(v20 + v32);
    if (*(_BYTE *)(v20 + v32))
      v34 = 1;
    else
      v34 = v32 == 18;
    ++v32;
  }
  while (!v34);
  if (v33)
    *(std::chrono::steady_clock::time_point *)(a1 + 536) = result;
  v35 = 0;
  v36 = a8 + 57;
  do
  {
    v37 = *(unsigned __int8 *)(v36 + v35);
    if (*(_BYTE *)(v36 + v35))
      v38 = 1;
    else
      v38 = v35 == 18;
    ++v35;
  }
  while (!v38);
  if (v37)
    *(std::chrono::steady_clock::time_point *)(a1 + 552) = result;
  return result;
}

void Phase::SpatialModeler::SimulationController::AdjustAggregationCoefficientsDynamic(float32x2_t *a1, uint64_t a2, float *a3, float a4, float a5, float a6, float a7)
{
  uint64_t v13;
  int v14;
  float v16;
  float v17;
  float32x2_t v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  float v27;
  float v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  float v35;
  float v36;
  float32x2_t v37;
  float32x2_t v39;
  float32x2_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  float v50;
  float v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  float v57;

  v13 = 0;
  do
  {
    v14 = *(unsigned __int8 *)(a2 + v13);
    if (*(_BYTE *)(a2 + v13))
      _ZF = 1;
    else
      _ZF = v13 == 18;
    ++v13;
  }
  while (!_ZF);
  if (v14 && *(_BYTE *)(a2 + 76))
  {
    v16 = fminf(fmaxf(1.0 / (float)(a1[72].f32[0] + 1.0), 0.0), 1.0);
    *a3 = 1.0 - v16;
    a3[1] = v16;
    v17 = fminf(fmaxf(1.0 / (float)(a1[72].f32[1] + 1.0), 0.0), 1.0);
    a3[2] = 1.0 - v17;
    a3[3] = v17;
    __asm { FMOV            V1.2S, #1.0 }
    v22 = vadd_f32(a1[72], _D1);
  }
  else
  {
    v23 = -1.0 / a4;
    v24 = fminf(fmaxf(__exp10f((float)((float)(-1.0 / a4) / a3[6]) * 6.0), 0.0), 1.0);
    *a3 = v24;
    a3[1] = 1.0 - v24;
    v25 = __exp10f((float)(v23 / a3[7]) * 6.0);
    v26 = 0;
    v27 = fminf(fmaxf(v25, 0.0), 1.0);
    v28 = 1.0 - v27;
    a3[2] = v27;
    a3[3] = 1.0 - v27;
    do
    {
      v29 = *(unsigned __int8 *)(a2 + v26);
      if (*(_BYTE *)(a2 + v26))
        v30 = 1;
      else
        v30 = v26 == 18;
      ++v26;
    }
    while (!v30);
    if (v29)
      goto LABEL_24;
    v31 = 0;
    v32 = a2 + 19;
    do
    {
      v33 = *(unsigned __int8 *)(v32 + v31);
      if (*(_BYTE *)(v32 + v31))
        v34 = 1;
      else
        v34 = v31 == 18;
      ++v31;
    }
    while (!v34);
    if (v33)
    {
LABEL_24:
      v35 = a6 / a7;
      if ((float)(a6 / a7) == 0.0)
        *(_QWORD *)a3 = 0x3F80000000000000;
      if (v35 > 2.0)
      {
        v36 = (float)(1.0 / fminf(fmaxf(v35, 2.0), 100.0)) * a3[1];
        *a3 = 1.0 - v36;
        a3[1] = v36;
      }
    }
    else
    {
      v35 = a6 / a7;
    }
    if (v35 == 0.0)
    {
      *((_QWORD *)a3 + 1) = 0x3F80000000000000;
      v28 = 1.0;
    }
    if (v35 > 2.0)
    {
      v28 = (float)(1.0 / fminf(fmaxf(v35, 2.0), 100.0)) * v28;
      a3[2] = 1.0 - v28;
      a3[3] = v28;
    }
    v37.f32[0] = a3[1];
    v37.f32[1] = v28;
    __asm { FMOV            V0.2S, #1.0 }
    v39 = vdiv_f32(_D0, v37);
    __asm { FMOV            V1.2S, #-1.0 }
    v41 = vadd_f32(v39, _D1);
    v22 = (float32x2_t)vbic_s8((int8x8_t)v41, (int8x8_t)vcltz_f32(v41));
  }
  a1[72] = v22;
  v42 = 0;
  v43 = a2 + 19;
  do
  {
    v44 = *(unsigned __int8 *)(v43 + v42);
    if (*(_BYTE *)(v43 + v42))
      v45 = 1;
    else
      v45 = v42 == 18;
    ++v42;
  }
  while (!v45);
  if (v44 && *(_BYTE *)(a2 + 77))
  {
    v46 = fminf(fmaxf(1.0 / (float)(a1[73].f32[0] + 1.0), 0.0), 1.0);
    a3[4] = 1.0 - v46;
    a3[5] = v46;
    v47 = a1[73].f32[0] + 1.0;
  }
  else
  {
    v48 = __exp10f((float)((float)(-1.0 / a5) / a3[8]) * 6.0);
    v49 = 0;
    v50 = fminf(fmaxf(v48, 0.0), 1.0);
    v51 = 1.0 - v50;
    a3[4] = v50;
    a3[5] = 1.0 - v50;
    do
    {
      v52 = *(unsigned __int8 *)(a2 + v49);
      if (*(_BYTE *)(a2 + v49))
        v53 = 1;
      else
        v53 = v49 == 18;
      ++v49;
    }
    while (!v53);
    if (v52)
      goto LABEL_57;
    v54 = 0;
    do
    {
      v55 = *(unsigned __int8 *)(v43 + v54);
      if (*(_BYTE *)(v43 + v54))
        v56 = 1;
      else
        v56 = v54 == 18;
      ++v54;
    }
    while (!v56);
    if (v55)
    {
LABEL_57:
      v57 = a6 / a7;
      if ((float)(a6 / a7) == 0.0)
      {
        *((_QWORD *)a3 + 2) = 0x3F80000000000000;
        v51 = 1.0;
      }
      if (v57 > 2.0)
      {
        v51 = (float)(1.0 / fminf(fmaxf(v57, 2.0), 100.0)) * v51;
        a3[4] = 1.0 - v51;
        a3[5] = v51;
      }
    }
    v47 = (float)(1.0 / v51) + -1.0;
    if (v47 < 0.0)
      v47 = 0.0;
  }
  a1[73].f32[0] = v47;
}

float Phase::SpatialModeler::SimulationController::AdjustAggregationCoefficientsDefault(float a1, float a2, uint64_t a3, float *a4)
{
  float v6;
  float v7;
  float v8;
  float result;

  v6 = -1.0 / a1;
  v7 = fminf(fmaxf(__exp10f((float)((float)(-1.0 / a1) / a4[6]) * 6.0), 0.0), 1.0);
  *a4 = v7;
  a4[1] = 1.0 - v7;
  v8 = fminf(fmaxf(__exp10f((float)(v6 / a4[7]) * 6.0), 0.0), 1.0);
  a4[2] = v8;
  a4[3] = 1.0 - v8;
  result = fminf(fmaxf(__exp10f((float)((float)(-1.0 / a2) / a4[8]) * 6.0), 0.0), 1.0);
  a4[4] = result;
  a4[5] = 1.0 - result;
  return result;
}

uint64_t Phase::SpatialModeler::SimulationController::ShouldEnableListenerOutsideMitigation(Phase::SpatialModeler::SimulationController *this, const Phase::SpatialModeler::RayTracerState *a2, Phase::SpatialModeler::RayTracerState *a3, char a4)
{
  int32x4_t v6;
  int32x2_t v7;
  Phase::SpatialModeler::RayTracerState *v8;
  float v9;
  int64x2_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64x2_t v16;
  __int32 *v17;
  int64x2_t v18;
  int64x2_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  int32x2_t v23;
  int8x16_t v24;
  Phase::SpatialModeler::RayTracerState *v25;
  Phase::SpatialModeler::RayTracerState *v26;
  BOOL v27;

  if ((a4 & 1) != 0)
    return 0;
  if (Phase::SpatialModeler::GetListenerOutsideEstimate(a2, a3, a3))
  {
    ++*((_DWORD *)a3 + 5258);
    v8 = (Phase::SpatialModeler::RayTracerState *)*((_QWORD *)a3 + 2420);
    if (v8 != (Phase::SpatialModeler::RayTracerState *)((char *)a3 + 19368))
    {
      v9 = 0.0;
      v10 = vdupq_n_s64(4uLL);
      do
      {
        v11 = *((_QWORD *)v8 + 7);
        if (v11)
        {
          v12 = 0.0;
          if (!*(_BYTE *)(v11 + 36))
          {
            v13 = (*(_DWORD *)(v11 + 28) * *(_DWORD *)(v11 + 24));
            if ((_DWORD)v13)
            {
              v14 = *(_QWORD *)(v11 + 8);
              v15 = (v13 + 3) & 0x1FFFFFFFCLL;
              v16 = (uint64x2_t)vdupq_n_s64(v13 - 1);
              v17 = (__int32 *)(v14 + 8);
              v18 = (int64x2_t)xmmword_2166F7AE0;
              v19 = (int64x2_t)xmmword_2166F7AD0;
              v20 = (float32x4_t)xmmword_2166F7AF0;
              do
              {
                v21 = v20;
                v22 = (int32x4_t)vcgeq_u64(v16, (uint64x2_t)v18);
                *(int32x2_t *)v6.i8 = vmovn_s64((int64x2_t)v22);
                *(int16x4_t *)v20.f32 = vmovn_s32(v6);
                if ((v20.i8[0] & 1) != 0)
                  v20.i32[0] = *(v17 - 2);
                if ((vmovn_s32(v6).i8[2] & 1) != 0)
                  v20.i32[1] = *(v17 - 1);
                v6 = (int32x4_t)vcgeq_u64(v16, (uint64x2_t)v19);
                v23 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v7, (int64x2_t)v6));
                if ((v23.i8[4] & 1) != 0)
                  v20.i32[2] = *v17;
                v7 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v23, (int64x2_t)v6));
                if ((v7.i8[6] & 1) != 0)
                  v20.i32[3] = v17[1];
                v20 = vaddq_f32(v21, v20);
                v19 = vaddq_s64(v19, v10);
                v18 = vaddq_s64(v18, v10);
                v17 += 4;
                v15 -= 4;
              }
              while (v15);
              v24 = vbslq_s8((int8x16_t)vuzp1q_s32(v22, v6), (int8x16_t)v20, (int8x16_t)v21);
              v12 = (float)(vaddv_f32(*(float32x2_t *)v24.i8) + *(float *)&v24.i32[2]) + *(float *)&v24.i32[3];
            }
          }
          v9 = v9 + v12;
        }
        v25 = (Phase::SpatialModeler::RayTracerState *)*((_QWORD *)v8 + 1);
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = *(Phase::SpatialModeler::RayTracerState **)v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (Phase::SpatialModeler::RayTracerState *)*((_QWORD *)v8 + 2);
            v27 = *(_QWORD *)v26 == (_QWORD)v8;
            v8 = v26;
          }
          while (!v27);
        }
        v8 = v26;
      }
      while (v26 != (Phase::SpatialModeler::RayTracerState *)((char *)a3 + 19368));
      if (v9 > 0.01)
        return 1;
    }
  }
  else
  {
    *((_DWORD *)a3 + 5258) = 0;
  }
  return 0;
}

BOOL Phase::Controller::SoundAssetInfo::BaseInit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, double a6)
{
  Phase::Logger *v8;
  NSObject *v9;
  void *v10;
  uint64_t v12;
  Phase::Logger *v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = a4;
    *(_QWORD *)(a1 + 8) = a2;
    *(double *)(a1 + 40) = a6;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Invalid SoundAssetInfo Id!"));
    v8 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v8)
                                                                                       + 816)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v15 = "SoundAssetInfo.mm";
      v16 = 1024;
      v17 = 25;
      v18 = 2048;
      v19 = 0;
      v20 = 2080;
      v21 = -[Phase::Logger UTF8String](objc_retainAutorelease(v8), "UTF8String");
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a5)
    {
      v12 = *MEMORY[0x24BDD0FC8];
      v13 = v8;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.phase"), 1346920803, v10);
      *a5 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  return a3 != 0;
}

void sub_2166BC62C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::SpaceBlending(unint64_t *a1, float *a2, uint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, float a8, double a9, float a10)
{
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  float v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t *v23;
  NSObject *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  _BYTE v33[18];
  __int16 v34;
  int v35;
  uint64_t v36;
  uint64_t v37[5];
  uint64_t v38;
  uint64_t v39[5];
  uint64_t v40[5];
  uint64_t v41;
  __int128 v42;
  _BYTE v43[8];
  uint64_t v44[6];
  uint64_t v45[6];
  uint64_t v46[5];
  uint64_t v47[9];

  v47[8] = *MEMORY[0x24BDAC8D0];
  v10 = *a1;
  v11 = a8 <= 0.04 || v10 == 0;
  v12 = !v11;
  if (!v11)
  {
    if (a8 <= 0.96)
      v19 = a8;
    else
      v19 = 1.0;
    v20 = *a3;
    v21 = exp(a9 * 10.0 / 10.0 * 0.115129255);
    Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Query(v20, v10, a4, a7, (uint64_t)v43, v21);
    *(_OWORD *)v33 = xmmword_2166F7280;
    if (!Phase::IsNearlyEqual<float>(a2, (float *)v33, 0.000001))
      Phase::SpatialModeler::RotateMetadata<float>((uint64_t)v43, a2);
    if (a4 != 1 || a10 == 1.0)
    {
      if (!a4)
        Phase::SpatialModeler::ConvertMetadataCartesianToSpherical<float>((uint64_t)v43);
    }
    else
    {
      *(_DWORD *)v33 = sqrtf(a10);
      if (v46[0])
      {
        if (*(_QWORD *)v46[0])
        {
          v22 = *(_QWORD *)(v46[0] + 8);
          if (v22)
            vDSP_vsmul((const float *)(v46[0] + 16), 1, (const float *)v33, (float *)(v46[0] + 16), 1, v22 * *(_QWORD *)v46[0]);
        }
      }
    }
    switch(a5)
    {
      case 0:
        goto LABEL_36;
      case 1:
        Phase::SpatialModeler::MorphDirectionalMetadata(a6, (uint64_t)v43, (uint64_t)v33, 1.0 - v19, v19);
        goto LABEL_35;
      case 2:
        Phase::SpatialModeler::XfadeDirectionalMetadata(a6, (uint64_t)v43, (uint64_t)v33, 1.0 - v19, v19);
        goto LABEL_35;
      case 3:
        if (v19 < 0.04)
        {
          v25 = 0.0;
          v26 = -INFINITY;
          goto LABEL_34;
        }
        if (v19 < 0.3)
        {
          v27 = v19 / 0.3;
          v25 = (float)(v19 / 0.3) * -20.0;
          v28 = -120.0;
          v29 = 117.0;
LABEL_32:
          v26 = v28 + (float)(v27 * v29);
          goto LABEL_34;
        }
        if (v19 < 0.96)
        {
          v27 = (float)(v19 + -0.3) / 0.7;
          v25 = (float)(v27 * -100.0) + -20.0;
          v28 = -3.0;
          v29 = 3.0;
          goto LABEL_32;
        }
        v26 = 0.0;
        v25 = -INFINITY;
LABEL_34:
        v30 = expf((float)((float)(v25 * 10.0) / 10.0) * 0.23026);
        v31 = expf((float)((float)(v26 * 10.0) / 10.0) * 0.23026);
        Phase::SpatialModeler::XfadeDirectionalMetadata(a6, (uint64_t)v43, (uint64_t)v33, v30, v31);
LABEL_35:
        *(_DWORD *)a6 = *(_DWORD *)v33;
        *(_BYTE *)(a6 + 4) = v33[4];
        std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a6 + 8), (uint64_t *)&v33[8]);
        *(_QWORD *)(a6 + 48) = v36;
        std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a6 + 56), v37);
        *(_QWORD *)(a6 + 96) = v38;
        std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a6 + 104), v39);
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a6 + 144), v40);
        *(_QWORD *)(a6 + 184) = v41;
        *(_OWORD *)(a6 + 192) = v42;
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v40);
        std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v39);
        std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v37);
        std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v33[8]);
LABEL_36:
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v47);
        std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v46);
        std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v45);
        std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v44);
        break;
      default:
        Phase::SpatialModeler::MorphDirectionalMetadata(a6, (uint64_t)v43, (uint64_t)v33, 1.0 - v19, v19);
        *(_DWORD *)a6 = *(_DWORD *)v33;
        *(_BYTE *)(a6 + 4) = v33[4];
        std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a6 + 8), (uint64_t *)&v33[8]);
        *(_QWORD *)(a6 + 48) = v36;
        std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a6 + 56), v37);
        *(_QWORD *)(a6 + 96) = v38;
        std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a6 + 104), v39);
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a6 + 144), v40);
        *(_QWORD *)(a6 + 184) = v41;
        *(_OWORD *)(a6 + 192) = v42;
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v40);
        std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v39);
        std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v37);
        v23 = std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v33[8]);
        v24 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v23) + 1184);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v33 = 136315650;
          *(_QWORD *)&v33[4] = "SpaceBlending.cpp";
          *(_WORD *)&v33[12] = 1024;
          *(_DWORD *)&v33[14] = 116;
          v34 = 1024;
          v35 = a5;
          _os_log_impl(&dword_2164CC000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Selected invalid space blend algorithm (%i) via defaults-write. Valid choices: 0, 1, 2, 3. Using algorithm 1 (Morphing).", v33, 0x18u);
        }
        goto LABEL_36;
    }
  }
  return v12;
}

void sub_2166BCB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  Phase::SpatialModeler::DirectionalMetadataOutput<float>::~DirectionalMetadataOutput(&a36);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::EstimateEarlyEnergy(int *a1, _QWORD *a2, int a3, uint64_t *a4, unint64_t a5, float a6)
{
  int *v11;
  unint64_t v12;
  Phase::Logger *v13;
  unint64_t v14;
  float v15;
  float v16;
  _DWORD *v17;
  NSObject *v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  unint64_t v22;
  float v23;
  float TotalEnergyIn;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  _DWORD *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unint64_t v38;
  float v39;
  float v40;
  _DWORD *v41;
  int v42;
  const char *v43;
  __int16 v44;
  int v45;
  uint64_t v46[6];
  uint64_t v47[5];
  uint64_t v48[10];

  v11 = a1;
  v48[9] = *MEMORY[0x24BDAC8D0];
  v12 = a1[31];
  std::vector<float>::resize((uint64_t)a2, v12);
  if (a5)
  {
    Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Query(*a4, a5, 0, v12, (uint64_t)&v42, 0.0000000630957344);
    if (a3 == 1)
    {
      if (a2[1] != *a2)
      {
        v22 = 0;
        do
        {
          v23 = *(float *)&v11[v22];
          TotalEnergyIn = Phase::SpatialModeler::GetTotalEnergyInBand<float>((uint64_t)&v42, v22);
          if (v23 <= 0.0)
            v25 = COERCE_FLOAT(1);
          else
            v25 = v23;
          v26 = (float)((float)(logf(v25) * 4.3429) / 10.0) * 10.0;
          if (TotalEnergyIn <= 0.0)
            v27 = COERCE_FLOAT(1);
          else
            v27 = TotalEnergyIn;
          v28 = logf(v27);
          v29 = expf((float)((float)((float)((float)((float)((float)((float)(v28 * 4.3429) / 10.0) * 10.0) * a6)+ (float)((float)(1.0 - a6) * v26))* 10.0)/ 10.0)* 0.23026);
          v30 = (_DWORD *)*a2;
          *(float *)(*a2 + 4 * v22++) = v29;
        }
        while (v22 < (uint64_t)(a2[1] - (_QWORD)v30) >> 2);
      }
      goto LABEL_36;
    }
    if (a3 != 3)
    {
      if (a3 == 2 && a2[1] != *a2)
      {
        v14 = 0;
        do
        {
          v15 = *(float *)&v11[v14];
          v16 = Phase::SpatialModeler::GetTotalEnergyInBand<float>((uint64_t)&v42, v14);
          v17 = (_DWORD *)*a2;
          *(float *)(*a2 + 4 * v14++) = (float)(v16 * a6) + (float)((float)(1.0 - a6) * v15);
        }
        while (v14 < (uint64_t)(a2[1] - (_QWORD)v17) >> 2);
      }
LABEL_36:
      std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v48);
      std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v47);
      std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v46);
      std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)((char *)&v43 + 4));
      return;
    }
    if (a6 < 0.04)
    {
      v31 = 0.0;
      v32 = -INFINITY;
      goto LABEL_33;
    }
    if (a6 >= 0.3)
    {
      if (a6 >= 0.96)
      {
        v32 = 0.0;
        v31 = -INFINITY;
LABEL_33:
        if (a2[1] != *a2)
        {
          v36 = expf((float)((float)(v31 * 10.0) / 10.0) * 0.23026);
          v37 = expf((float)((float)(v32 * 10.0) / 10.0) * 0.23026);
          v38 = 0;
          do
          {
            v39 = *(float *)&v11[v38];
            v40 = Phase::SpatialModeler::GetTotalEnergyInBand<float>((uint64_t)&v42, v38);
            v41 = (_DWORD *)*a2;
            *(float *)(*a2 + 4 * v38++) = (float)(v37 * v40) + (float)(v39 * v36);
          }
          while (v38 < (uint64_t)(a2[1] - (_QWORD)v41) >> 2);
        }
        goto LABEL_36;
      }
      v33 = (float)(a6 + -0.3) / 0.7;
      v31 = (float)(v33 * -100.0) + -20.0;
      v34 = -3.0;
      v35 = 3.0;
    }
    else
    {
      v33 = a6 / 0.3;
      v31 = (float)(a6 / 0.3) * -20.0;
      v34 = -120.0;
      v35 = 117.0;
    }
    v32 = v34 + (float)(v33 * v35);
    goto LABEL_33;
  }
  v18 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v13) + 1184);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    v42 = 136315394;
    v43 = "SpaceBlending.cpp";
    v44 = 1024;
    v45 = 181;
    _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d The input space blend target preset string hash ID was invalid. Returning the simulated energy (without blending).", (uint8_t *)&v42, 0x12u);
  }
  v19 = v11[31];
  if ((_DWORD)v19)
  {
    v20 = (_DWORD *)*a2;
    do
    {
      v21 = *v11++;
      *v20++ = v21;
      --v19;
    }
    while (v19);
  }
}

void sub_2166BCEFC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

double Phase::Controller::SpatializerEncoder::AcquireFilters@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

Phase::Logger *Phase::Controller::SpatializerEncoder::GetCoordinateCount(Phase::Controller::SpatializerEncoder *this, const Phase::Controller::SpatializerFilterHandle *a2)
{
  Phase::Logger *result;
  NSObject *v3;
  std::logic_error *exception;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  result = (Phase::Logger *)*(unsigned int *)(*((_QWORD *)this + 2) + 20);
  if ((_DWORD)result != **(_DWORD **)a2)
  {
    v3 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 576));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315394;
      v6 = "Spatializer.mm";
      v7 = 1024;
      v8 = 34;
      _os_log_impl(&dword_2164CC000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: mSpatializer->mInitParameters.mCoordinateCount == inHandle->GetCoordinateCount() is false.", (uint8_t *)&v5, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: mSpatializer->mInitParameters.mCoordinateCount == inHandle->GetCoordinateCount() is false.");
  }
  return result;
}

void sub_2166BD034(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatializerEncoder::GetWorkBufferSizeInBytes(Phase::Controller::SpatializerEncoder *this, const Phase::Controller::SpatializerFilterHandle *a2)
{
  return 0;
}

uint64_t Phase::Controller::SpatializerEncoder::GetFilterLengthInSamples(Phase::Controller::SpatializerEncoder *this, const Phase::Controller::SpatializerFilterHandle *a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 2) + 16);
}

Phase::Logger *Phase::Controller::SpatializerEncoder::VerifyCoordinateRanges(Phase::Logger *this, float a2, float a3, float a4)
{
  NSObject *v6;
  std::logic_error *exception;
  NSObject *v8;
  std::logic_error *v10;
  NSObject *v11;
  std::logic_error *v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (a2 < 0.0 || a2 > 180.0)
  {
    v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 576));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v13 = 136315394;
      v14 = "Spatializer.mm";
      v15 = 1024;
      v16 = 56;
      _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inInclinationInDegrees >= 0.f && inInclinationInDegrees <= 180.f is false.", (uint8_t *)&v13, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: inInclinationInDegrees >= 0.f && inInclinationInDegrees <= 180.f is false.");
  }
  if (a3 < 0.0 || a3 >= 360.0)
  {
    v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 576));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v13 = 136315394;
      v14 = "Spatializer.mm";
      v15 = 1024;
      v16 = 58;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inAzimuthInDegrees >= 0.f && inAzimuthInDegrees < 360.f is false.", (uint8_t *)&v13, 0x12u);
    }
    v10 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v10, "PRECONDITION: inAzimuthInDegrees >= 0.f && inAzimuthInDegrees < 360.f is false.");
  }
  if (a4 < 0.0)
  {
    v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 576));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v13 = 136315394;
      v14 = "Spatializer.mm";
      v15 = 1024;
      v16 = 59;
      _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inDistance >= 0.f is false.", (uint8_t *)&v13, 0x12u);
    }
    v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v12, "PRECONDITION: inDistance >= 0.f is false.");
  }
  return this;
}

void sub_2166BD2C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatializerEncoder::HaveFiltersChanged(Phase::Controller::SpatializerEncoder *this)
{
  return 0;
}

_QWORD *Phase::Controller::SpatializerFilterHandle::SpatializerFilterHandle(_QWORD *this, const Phase::Controller::SpatializerFilterHandle *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *((_QWORD *)a2 + 1);
  *this = *(_QWORD *)a2;
  this[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *((_QWORD *)a2 + 3);
  this[2] = *((_QWORD *)a2 + 2);
  this[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *((_QWORD *)a2 + 5);
  this[4] = *((_QWORD *)a2 + 4);
  this[5] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return this;
}

uint64_t Phase::Controller::Spatializer::Spatializer(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4)
{
  __int128 v6;
  std::string *v7;
  __int128 v8;

  *(_QWORD *)a1 = &unk_24D581068;
  v6 = *a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((_QWORD *)(a1 + 24), *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (std::string *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v8 = *a4;
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_2166BD3E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;

  v5 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v3);
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void Phase::Controller::Spatializer::~Spatializer(void **this)
{
  void *v2;
  void *v3;

  *this = &unk_24D581068;
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  v2 = this[8];
  this[8] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  v3 = this[3];
  if (v3)
  {
    this[4] = v3;
    operator delete(v3);
  }
}

void Phase::Controller::Spatializer::AcquireFilters(Phase::Controller::Spatializer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v4 = *((_QWORD *)this + 6);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  v11 = v4;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100]((_QWORD *)(a2 + 16), &v11);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2166BD52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::Spatializer::Update(Phase::Controller::Spatializer *this, double a2)
{
  uint64_t v2;
  NSObject *v4;
  std::runtime_error *exception;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 6);
  if (!v2)
  {
    v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 576));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315394;
      v7 = "Spatializer.mm";
      v8 = 1024;
      v9 = 200;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: mEncoder.get() != nullptr is false.", (uint8_t *)&v6, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "PRECONDITION: mEncoder.get() != nullptr is false.");
  }
  return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v2 + 96))(v2, a2);
}

void sub_2166BD63C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::Spatializer::SetDeviceOrientation()
{
  return 0;
}

uint64_t Phase::Controller::Spatializer::OutputChannelLayoutChanged()
{
  return 0;
}

_QWORD *std::allocate_shared[abi:ne180100]<Phase::Controller::SpatializerFilterDatabase,std::allocator<Phase::Controller::SpatializerFilterDatabase>,Phase::Controller::Spatializer const*&,Phase::Controller::SpatializerEncoder const*&,unsigned int &,void>@<X0>(const Phase::Controller::Spatializer **a1@<X1>, const Phase::Controller::SpatializerEncoder **a2@<X2>, unsigned int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<Phase::Controller::SpatializerFilterDatabase>::__shared_ptr_emplace[abi:ne180100]<Phase::Controller::Spatializer const*&,Phase::Controller::SpatializerEncoder const*&,unsigned int &,std::allocator<Phase::Controller::SpatializerFilterDatabase>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_2166BD6C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<Phase::Controller::SpatializerFilterDatabase>::__shared_ptr_emplace[abi:ne180100]<Phase::Controller::Spatializer const*&,Phase::Controller::SpatializerEncoder const*&,unsigned int &,std::allocator<Phase::Controller::SpatializerFilterDatabase>,0>(_QWORD *a1, const Phase::Controller::Spatializer **a2, const Phase::Controller::SpatializerEncoder **a3, unsigned int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24D5810A0;
  Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase((Phase::Controller::SpatializerFilterDatabase *)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_2166BD718(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phase::Controller::SpatializerFilterDatabase>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5810A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Controller::SpatializerFilterDatabase>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5810A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

void std::__shared_ptr_emplace<Phase::Controller::SpatializerFilterDatabase>::__on_zero_shared(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
}

Phase::Controller::SpatializerFilterDatabase *Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::SpatializerFilterDatabase *this, const Phase::Controller::Spatializer *a2, const Phase::Controller::SpatializerEncoder *a3, unsigned int a4)
{
  int v4;
  const Phase::Controller::SpatializerEncoder *v5;
  Phase::Controller::SpatializerFilterDatabase *v7;
  void **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  Phase::Logger *v13;
  Phase::Logger *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float v18;
  float v19;
  unint64_t v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  float *v28;
  float *v29;
  std::locale::id *v30;
  _QWORD *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  const std::locale::facet *v34;
  float *v35;
  _BYTE *v36;
  int v37;
  int v38;
  float v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  const std::locale::facet *v47;
  uint64_t v48;
  uint64_t v49;
  std::locale::id *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  const std::locale::facet *v55;
  const std::locale::facet *v56;
  unint64_t v57;
  float v58;
  int v59;
  signed int v60;
  uint64_t v61;
  _DWORD *v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  uint64_t i;
  double v70;
  uint64_t Pointer;
  uint64_t v72;
  int v73;
  double v74;
  double v75;
  float v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  _DWORD *v87;
  uint64_t v88;
  uint8x8_t v89;
  unsigned int v90;
  unsigned int v91;
  BOOL v92;
  const Phase::Controller::SpatializerEncoder *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int *v99;
  int v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  float v105;
  float v106;
  void **v107;
  char *v108;
  int v109;
  uint64_t v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  char v116;
  float v117;
  uint64_t v118;
  int v119;
  int v120;
  signed int v121;
  int v122;
  _DWORD *v123;
  float *v124;
  uint64_t v125;
  float v126;
  int v127;
  unsigned int v128;
  float v129;
  uint64_t v130;
  const float *v131;
  int v132;
  uint64_t v133;
  unsigned int v134;
  signed int v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  float *v139;
  char *v140;
  float Value;
  int v142;
  unsigned int v143;
  float v144;
  unsigned int v145;
  int v146;
  int v147;
  uint64_t v148;
  int v149;
  vDSP_Length v150;
  const float *v151;
  int v152;
  NSObject *v154;
  std::runtime_error *v155;
  NSObject *v156;
  std::logic_error *exception;
  NSObject *v158;
  NSObject *v159;
  NSObject *v160;
  void **v161;
  unint64_t v162;
  const Phase::Controller::SpatializerEncoder *v163;
  Phase::Controller::SpatializerFilterDatabase *v164;
  int *v166;
  uint64_t v167;
  uint64_t v168;
  float *v169;
  int v170;
  int v171;
  int v172;
  int v173;
  uint64_t v174;
  char v175;
  unsigned int v176;
  int v177;
  uint64_t v178;
  unsigned int v179;
  vDSP_Length __N;
  void *v181[3];
  void *v182;
  float *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  __int128 v187;
  void *__p[2];
  __int128 v189;
  unsigned __int8 v190[8];
  int v191;
  uint64_t v192;
  void **v193;
  char *v194;
  void *v195;
  void *v196;
  float v197;
  std::locale v198[4];
  __int128 v199;
  char v200;
  uint64_t v201;
  int v202;
  __int128 v203;
  unsigned int v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;

  v4 = a4;
  v5 = a3;
  v7 = this;
  v212 = *MEMORY[0x24BDAC8D0];
  *((_OWORD *)this + 1) = 0u;
  v8 = (void **)((char *)this + 16);
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  if (!a3)
  {
    v5 = (const Phase::Controller::SpatializerEncoder *)*((_QWORD *)a2 + 6);
    v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 7);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v4 = a4;
  }
  *(_DWORD *)v7 = *((_DWORD *)a2 + 5);
  v163 = v5;
  v13 = (Phase::Logger *)(*(uint64_t (**)(const Phase::Controller::SpatializerEncoder *))(*(_QWORD *)v5 + 48))(v5);
  *((_DWORD *)v7 + 1) = (_DWORD)v13;
  *((_DWORD *)v7 + 2) = v4;
  v164 = v7;
  v161 = v8;
  if (*(int *)v7 <= 0)
  {
    v156 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v13) + 576));
    if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v198[0].__locale_) = 136315394;
      *(std::locale::__imp **)((char *)&v198[0].__locale_ + 4) = (std::locale::__imp *)"SpatializerFilterDatabase.mm";
      WORD2(v198[1].__locale_) = 1024;
      *(_DWORD *)((char *)&v198[1].__locale_ + 6) = 36;
      _os_log_impl(&dword_2164CC000, v156, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: mCoordinateCount > 0 is false.", (uint8_t *)v198, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: mCoordinateCount > 0 is false.");
LABEL_163:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  if (v4 <= 0)
  {
    v158 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v13) + 576));
    if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v198[0].__locale_) = 136315394;
      *(std::locale::__imp **)((char *)&v198[0].__locale_ + 4) = (std::locale::__imp *)"SpatializerFilterDatabase.mm";
      WORD2(v198[1].__locale_) = 1024;
      *(_DWORD *)((char *)&v198[1].__locale_ + 6) = 37;
      _os_log_impl(&dword_2164CC000, v158, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inFilterLengthInSamples > 0 is false.", (uint8_t *)v198, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: inFilterLengthInSamples > 0 is false.");
    goto LABEL_163;
  }
  if ((int)v13 <= 0)
  {
    v159 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v13) + 576));
    if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v198[0].__locale_) = 136315394;
      *(std::locale::__imp **)((char *)&v198[0].__locale_ + 4) = (std::locale::__imp *)"SpatializerFilterDatabase.mm";
      WORD2(v198[1].__locale_) = 1024;
      *(_DWORD *)((char *)&v198[1].__locale_ + 6) = 38;
      _os_log_impl(&dword_2164CC000, v159, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: mFilterChannelCount > 0 is false.", (uint8_t *)v198, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: mFilterChannelCount > 0 is false.");
    goto LABEL_163;
  }
  std::vector<float>::resize((uint64_t)v7 + 40, (int)v13 * v4 * *(_DWORD *)v7);
  v184 = 0;
  v185 = 0;
  v186 = 0;
  v14 = (Phase::Logger *)Phase::EQSphere::eq_point_set_polar(2u, *(_DWORD *)v7, (uint64_t *)&v184);
  if ((_DWORD)v14)
  {
    v160 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v14) + 576));
    if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v198[0].__locale_) = 136315394;
      *(std::locale::__imp **)((char *)&v198[0].__locale_ + 4) = (std::locale::__imp *)"SpatializerFilterDatabase.mm";
      WORD2(v198[1].__locale_) = 1024;
      *(_DWORD *)((char *)&v198[1].__locale_ + 6) = 47;
      _os_log_impl(&dword_2164CC000, v160, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: result == EXIT_SUCCESS is false.", (uint8_t *)v198, 0x12u);
    }
    v155 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v155, "POSTCONDITION: result == EXIT_SUCCESS is false.");
LABEL_167:
  }
  if (v185 == v184
    || v185 - v184 != 48
    || (v15 = (uint64_t)(*((_QWORD *)v184 + 1) - *(_QWORD *)v184) >> 2, v15 != *(_DWORD *)v7)
    || v15 != (uint64_t)(*((_QWORD *)v184 + 4) - *((_QWORD *)v184 + 3)) >> 2)
  {
    v154 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v14) + 576));
    if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v198[0].__locale_) = 136315394;
      *(std::locale::__imp **)((char *)&v198[0].__locale_ + 4) = (std::locale::__imp *)"SpatializerFilterDatabase.mm";
      WORD2(v198[1].__locale_) = 1024;
      *(_DWORD *)((char *)&v198[1].__locale_ + 6) = 50;
      _os_log_impl(&dword_2164CC000, v154, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: !angles.empty() && angles.size() == dimensionCount && angles[0].size() == mCoordinateCount && angles[1].size() == mCoordinateCount is false.", (uint8_t *)v198, 0x12u);
    }
    v155 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v155, "POSTCONDITION: !angles.empty() && angles.size() == dimensionCount && angles[0].size() == mCoordinateCount && angles[1].size() == mCoordinateCount is false.");
    goto LABEL_167;
  }
  std::vector<Phase::Vector<float,3ul>>::vector(&v182, v15);
  if (*((_QWORD *)v184 + 1) != *(_QWORD *)v184)
  {
    v16 = 0;
    v17 = 0;
    do
    {
      *(_DWORD *)((char *)v182 + v16) = 1065353216;
      *(float *)((char *)v182 + v16 + 4) = *(float *)(*((_QWORD *)v184 + 3) + 4 * v17) * 57.296;
      v18 = *(float *)(*(_QWORD *)v184 + 4 * v17) * 57.296;
      v19 = (float)(v18 - (float)(floorf(v18 / 360.0) * 360.0)) + 0.0;
      if (v19 >= 360.0)
        v19 = nextafterf(360.0, 0.0);
      *(float *)((char *)v182 + v16 + 8) = v19;
      ++v17;
      v16 += 12;
    }
    while (v17 < (uint64_t)(*((_QWORD *)v184 + 1) - *(_QWORD *)v184) >> 2);
  }
  v20 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v183 - (_BYTE *)v182) >> 2));
  if (v183 == v182)
    v21 = 0;
  else
    v21 = v20;
  v22 = std::__introsort<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *,false>((float *)v182, v183, v21, 1);
  v23 = *(_QWORD *)(*(_QWORD *)(Phase::Logger::GetInstancePtr((Phase::Logger *)v22) + 576) + 8);
  if ((v23 & 1) != 0)
  {
    v24 = (_QWORD *)MEMORY[0x24BEDB318];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"Directions: ", 12);
    v25 = (_QWORD *)std::ostream::operator<<();
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" [inclination, azimuth]", 23);
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
    v27 = std::locale::use_facet(v198, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale(v198);
    std::ostream::put();
    std::ostream::flush();
    v28 = (float *)v182;
    v29 = v183;
    if (v182 != v183)
    {
      v30 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        v31 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", ", 2);
        v32 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
        v33 = std::locale::use_facet(v198, v30);
        ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
        std::locale::~locale(v198);
        std::ostream::put();
        std::ostream::flush();
        v28 += 3;
      }
      while (v28 != v29);
    }
    v7 = v164;
    v8 = v161;
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
    v34 = std::locale::use_facet(v198, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
    std::locale::~locale(v198);
    std::ostream::put();
    std::ostream::flush();
  }
  *((_QWORD *)v7 + 3) = *((_QWORD *)v7 + 2);
  v36 = v182;
  v35 = v183;
  if ((char *)v183 - (_BYTE *)v182 == 12)
  {
    v37 = 0;
    v38 = 1;
    v39 = 0.0;
    v40 = 1;
    v41 = 1;
  }
  else
  {
    v42 = 0;
    v37 = 0;
    v43 = 0;
    v38 = 1;
    v39 = 0.0;
    do
    {
      if (*(float *)&v36[v42 + 4] == *(float *)&v36[v42 + 16])
      {
        ++v38;
      }
      else
      {
        std::vector<Phase::Controller::SpatializerFilterDatabase::Ring>::emplace_back<float &,int &,int &>(v8, v38, v37, v39);
        v39 = *(float *)&v36[v42 + 20];
        v37 = v43 + 1;
        v36 = v182;
        v35 = v183;
        v38 = 1;
      }
      ++v43;
      v40 = 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - v36) >> 2);
      v42 += 12;
    }
    while (v40 - 1 > v43);
    v41 = v37 + v38;
  }
  if (v40 != v41)
    goto LABEL_150;
  std::vector<Phase::Controller::SpatializerFilterDatabase::Ring>::emplace_back<float &,int &,int &>(v8, v38, v37, v39);
  if ((v23 & 1) != 0)
  {
    v44 = (_QWORD *)MEMORY[0x24BEDB318];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"Rings: ", 7);
    v45 = (_QWORD *)std::ostream::operator<<();
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" [start, step, count, index]", 28);
    std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(*v46 - 24)));
    v47 = std::locale::use_facet(v198, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
    std::locale::~locale(v198);
    std::ostream::put();
    std::ostream::flush();
    v48 = *((_QWORD *)v7 + 2);
    v49 = *((_QWORD *)v7 + 3);
    if (v48 != v49)
    {
      v50 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        v51 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)", ", 2);
        v52 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)", ", 2);
        v53 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)", ", 2);
        v54 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(_QWORD *)(*v54 - 24)));
        v55 = std::locale::use_facet(v198, v50);
        ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
        std::locale::~locale(v198);
        std::ostream::put();
        std::ostream::flush();
        v48 += 20;
      }
      while (v48 != v49);
    }
    v7 = v164;
    std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(_QWORD *)(*v44 - 24)));
    v56 = std::locale::use_facet(v198, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
    std::locale::~locale(v198);
    std::ostream::put();
    std::ostream::flush();
  }
  *((_DWORD *)v7 + 3) = 0;
  v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v7 + 3) - *((_QWORD *)v7 + 2)) >> 2);
  v58 = 0.0;
  if (v57 >= 2)
  {
    v58 = *(v183 - 2) / (float)(v57 - 1);
    *((float *)v7 + 3) = 1.0 / v58;
  }
  v60 = *((_DWORD *)v7 + 1);
  v59 = *((_DWORD *)v7 + 2);
  memset(v198, 0, sizeof(v198));
  v199 = 0u;
  v200 = 0;
  v201 = 0;
  v202 = 0;
  v205 = 0u;
  v206 = 0u;
  v207 = 0u;
  v208 = 0;
  v203 = 0uLL;
  v204 = 0;
  v210 = 0;
  v209 = 0;
  v211 = 0;
  if (v60 <= 0)
    goto LABEL_150;
  if (v59 < 0)
    goto LABEL_150;
  if (!v59)
    goto LABEL_150;
  v201 = 0x800000000BLL;
  v203 = xmmword_21673AE10;
  Phase::AudioBuffer<float>::AudioBuffer((uint64_t)&v193, 1u, 0x581u);
  v61 = Phase::AudioBuffer<float>::GetWritePointer((uint64_t)&v193, 0, 0);
  v187 = 0u;
  *(_OWORD *)__p = 0u;
  v189 = 0u;
  v190[0] = 0;
  if (*(double *)&v203 <= 0.0)
    goto LABEL_150;
  v62 = (_DWORD *)v61;
  v191 = 1407;
  v192 = v203;
  if (*(double *)&v203 >= 50.0)
  {
    v63 = (*(double *)&v203 + -8.7) * 0.1102;
  }
  else
  {
    v63 = 0.0;
    if (*(double *)&v203 > 21.0)
    {
      v64 = *(double *)&v203 + -21.0;
      v63 = v64 * 0.07886 + pow(*(double *)&v203 + -21.0, 0.4) * 0.5842;
    }
  }
  Phase::BesselFunction::I_0<double>(v63);
  v66 = v65;
  Phase::AudioBuffer<float>::AllocateInternal((uint64_t)&v187, 1u, 0x580u);
  v67 = 1.0 / v66;
  v68 = Phase::AudioBuffer<float>::GetWritePointer((uint64_t)&v187, 0, 1);
  for (i = 0; i != 1407; ++i)
  {
    Phase::BesselFunction::I_0<double>(v63 * sqrt(1.0- ((double)(int)i + -703.0) / 703.0 * (((double)(int)i + -703.0) / 703.0)));
    *(float *)&v70 = v67 * v70;
    *(_DWORD *)(v68 + 4 * i) = LODWORD(v70);
  }
  Phase::AudioBuffer<float>::SetValue((uint64_t)&v187, 0, 0.0);
  Pointer = Phase::AudioBuffer<float>::GetReadPointer((uint64_t)&v187, 0);
  v72 = 0;
  v73 = HIDWORD(v201);
  v74 = 3.14159265 / (double)SHIDWORD(v201);
  *v62 = 0;
  v75 = v74 * 0.9;
  do
  {
    v76 = sin(v75 * ((double)(int)v72 + -704.0))
        * 0.9
        * *(float *)(Pointer + 4 * v72)
        / (v75
         * ((double)(int)v72 + -704.0));
    *(float *)&v62[v72++] = v76;
  }
  while (v72 != 1408);
  *v62 = 0;
  v62[704] = 1063675494;
  v62[1408] = 0;
  if ((int)v201 >= 0)
    v77 = v201;
  else
    v77 = v201 + 1;
  v202 = (v77 >> 1) - 1;
  Phase::AudioBuffer<float>::AllocateInternal((uint64_t)v198, 1u, v201 + v201 * v73);
  v78 = Phase::AudioBuffer<float>::GetWritePointer((uint64_t)v198, 0, 0);
  v79 = HIDWORD(v201);
  v80 = a4;
  if ((v201 & 0x8000000000000000) == 0)
  {
    v81 = 0;
    v82 = v201;
    v83 = HIDWORD(v201) + 1;
    v84 = 4 * (int)v201;
    v85 = 4 * HIDWORD(v201);
    do
    {
      if ((int)v82 >= 1)
      {
        v86 = &v62[v79];
        v87 = (_DWORD *)v78;
        v88 = v82;
        do
        {
          *v87++ = *v86;
          v86 = (_DWORD *)((char *)v86 + v85);
          --v88;
        }
        while (v88);
      }
      ++v81;
      --v79;
      v78 += v84;
    }
    while (v81 != v83);
  }
  if (__p[1])
  {
    *(void **)&v189 = __p[1];
    operator delete(__p[1]);
  }
  v181[0] = &v187;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v181);
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  *(_QWORD *)&v187 = &v193;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v187);
  v89 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v201));
  v89.i16[0] = vaddlv_u8(v89);
  if (v89.i32[0] != 1)
    goto LABEL_150;
  v204 = 31 - __clz(HIDWORD(v201));
  v90 = v201 + 2 * v59 - 1;
  v91 = 1;
  do
  {
    v90 |= v90 >> v91;
    v92 = v91 >= 0x10;
    v91 *= 2;
  }
  while (!v92);
  LODWORD(v209) = v90 + v201;
  HIDWORD(v209) = v90;
  HIDWORD(v210) = v59;
  v211 = v59;
  Phase::AudioBuffer<float>::AllocateInternal((uint64_t)&v205, v60, v90 + v201);
  Phase::AudioBuffer<float>::Clear((uint64_t)&v205);
  LODWORD(v210) = v201 - 1;
  Phase::AudioBuffer<float>::AudioBuffer((uint64_t)&v187, *((_DWORD *)v7 + 1), *((_DWORD *)v7 + 2));
  Phase::AudioBuffer<float>::AudioBuffer((uint64_t)&v193, *((_DWORD *)v7 + 1), 1u);
  v93 = v163;
  std::vector<float>::vector(v181, *((int *)v7 + 1));
  v94 = *((_QWORD *)v7 + 2);
  v95 = *((_QWORD *)v7 + 3);
  if (v95 == v94)
    goto LABEL_137;
  v96 = 0;
  v97 = 0;
  do
  {
    v98 = v94 + 20 * v96;
    v99 = (int *)(v98 + 12);
    if (*(int *)(v98 + 12) < 1)
      goto LABEL_136;
    v100 = 0;
    v101 = v58 * (float)(int)v96;
    v162 = v96;
    v169 = (float *)(v94 + 20 * v96 + 4);
    v166 = (int *)(v98 + 12);
    v167 = v94 + 20 * v96;
    do
    {
      v102 = *(float *)v98 + (float)((float)v100 * *v169);
      atomic_store(0, v190);
      (*(void (**)(const Phase::Controller::SpatializerEncoder *, uint64_t, void *, void *, float, float, float))(*(_QWORD *)v93 + 24))(v93, v80, __p[1], v181[0], v101, v102, 0.0);
      LODWORD(v103) = *((_DWORD *)v7 + 1);
      if ((int)v103 < 1)
        goto LABEL_134;
      v170 = v100;
      v104 = 0;
      v105 = 0.0;
      do
      {
        v106 = *((float *)v181[0] + v104);
        Phase::AudioBuffer<float>::SetValue((uint64_t)&v193, v104, v106);
        v105 = v105 + v106;
        ++v104;
        v103 = *((int *)v7 + 1);
      }
      while (v104 < v103);
      v100 = v170;
      if (v105 <= 0.0)
        goto LABEL_134;
      v107 = v193;
      v108 = v194;
      if (v193 == (void **)v194)
        v109 = 0;
      else
        v109 = -1431655765 * ((unint64_t)(v194 - (char *)v193) >> 3);
      v110 = (*((_QWORD *)&v187 + 1) - (_QWORD)v187) >> 3;
      v111 = -1431655765 * v110;
      if ((_QWORD)v187 == *((_QWORD *)&v187 + 1))
        v111 = 0;
      if (v109 != v111)
        goto LABEL_150;
      if (v193 == (void **)v194)
      {
        LODWORD(v113) = 0;
LABEL_93:
        if ((_QWORD)v187 == *((_QWORD *)&v187 + 1))
          LODWORD(v114) = 0;
        else
          v114 = (*(_QWORD *)(v187 + 8) - *(_QWORD *)v187) >> 2;
        if ((_DWORD)v113 != (_DWORD)v114)
          goto LABEL_150;
        goto LABEL_97;
      }
      v112 = (_BYTE *)v193[1] - (_BYTE *)*v193;
      if ((v112 & 0x3FFFFFFFCLL) != 4)
      {
        v113 = v112 >> 2;
        goto LABEL_93;
      }
LABEL_97:
      if ((_QWORD)v187 == *((_QWORD *)&v187 + 1))
      {
        v177 = 0;
        LODWORD(v178) = 0;
      }
      else
      {
        v177 = -1431655765 * v110;
        v178 = (*(_QWORD *)(v187 + 8) - *(_QWORD *)v187) >> 2;
      }
      __N = v201;
      v176 = HIDWORD(v201);
      v115 = v209;
      v116 = v204;
      v117 = modff(0.5, &v197);
      if (v107 == (void **)v108 || (((_BYTE *)v107[1] - (_BYTE *)*v107) & 0x3FFFFFFFCLL) != 4)
        goto LABEL_150;
      v168 = v97;
      v118 = (__N - 1);
      v175 = 10 - v116;
      v119 = 1 << (9 - v116);
      v179 = v210;
      v120 = v178;
      if (v115 >= (int)v178)
      {
        if (v177 >= 1)
        {
          v135 = 0;
          v136 = (1 - __N);
          v172 = v119 - ((int)(float)((float)(v117 * 1024.0) + 0.5) + ((int)v197 << 10));
          v171 = v210 + v178;
          while (1)
          {
            v137 = v136;
            v138 = (char *)Phase::AudioBuffer<float>::GetReadPointer((uint64_t)&v187, v135);
            v139 = (float *)Phase::AudioBuffer<float>::GetWritePointer((uint64_t)&v187, v135, 0);
            v140 = (char *)Phase::AudioBuffer<float>::GetWritePointer((uint64_t)&v205, v135, 0);
            Value = Phase::AudioBuffer<float>::GetValue((char *)v193, v194, v135);
            v142 = v172
                 + (int)(float)((float)(modff(fminf(fmaxf(Value, 0.0), (float)SHIDWORD(v210)) + (float)__N, &v197)* 1024.0)+ 0.5);
            v143 = (unsigned __int16)(v142 & 0x3FF) >> v175;
            if (v143 >= v176)
              break;
            v144 = v197;
            v174 = Phase::AudioBuffer<float>::GetReadPointer((uint64_t)v198, 0);
            LODWORD(v210) = v179;
            v145 = v209;
            if (v171 >= (int)v209)
            {
              v146 = v209 - v179;
              v147 = v209 - v179;
              if ((_DWORD)v209 != v179)
                memmove(&v140[4 * v179], v138, 4 * v146);
              if ((_DWORD)v178 != v147)
                memmove(&v140[4 * v118], &v138[4 * v146], 4 * (int)v178 - 4 * v146);
              v145 = v209;
              v120 = v178;
              if (v178 > (int)v209 - (int)v118)
                break;
            }
            else if (v120)
            {
              memmove(&v140[4 * v179], v138, 4 * (int)v178);
              v145 = v209;
            }
            if ((_DWORD)__N != 1)
            {
              memmove(v140, &v140[4 * v145 + -4 * v118], 4 * v118);
              v145 = v209;
            }
            v148 = v174 + 4 * v143 * __N;
            v136 = v137;
            v149 = (v137 - ((v142 + ((int)v144 << 10)) >> 10) + v145 + v210) & HIDWORD(v209);
            if ((int)v118 + (int)v178 + v149 <= v145)
            {
              vDSP_conv((const float *)&v140[4 * v149], 1, (const float *)(v148 + 4 * v118), -1, v139, 1, (int)v178, __N);
            }
            else
            {
              v150 = v145 + v137 - v149;
              v151 = (const float *)(v148 + 4 * v118);
              vDSP_conv((const float *)&v140[4 * v149], 1, v151, -1, v139, 1, v150, __N);
              vDSP_conv((const float *)v140, 1, v151, -1, &v139[v150], 1, (v120 - v150), __N);
            }
            if ((int)v210 + v120 >= (int)v209)
              v152 = v118 - v209;
            else
              v152 = 0;
            LODWORD(v210) = v152 + v210 + v120;
            if (v177 == ++v135)
              goto LABEL_133;
          }
LABEL_150:
          std::terminate();
        }
      }
      else if (v177 >= 1)
      {
        v121 = 0;
        v122 = v115 - v118;
        v173 = v119 - ((int)(float)((float)(v117 * 1024.0) + 0.5) + ((int)v197 << 10));
        do
        {
          v123 = (_DWORD *)Phase::AudioBuffer<float>::GetReadPointer((uint64_t)&v187, v121);
          v124 = (float *)Phase::AudioBuffer<float>::GetWritePointer((uint64_t)&v187, v121, 0);
          v125 = Phase::AudioBuffer<float>::GetWritePointer((uint64_t)&v205, v121, 0);
          v126 = Phase::AudioBuffer<float>::GetValue((char *)v193, v194, v121);
          v127 = v173
               + (int)(float)((float)(modff(fminf(fmaxf(v126, 0.0), (float)SHIDWORD(v210)) + (float)__N, &v197)* 1024.0)+ 0.5);
          v128 = (unsigned __int16)(v127 & 0x3FF) >> v175;
          if (v128 >= v176)
            goto LABEL_150;
          v129 = v197;
          v130 = Phase::AudioBuffer<float>::GetReadPointer((uint64_t)v198, 0);
          LODWORD(v210) = v179;
          if (v120 >= 1)
          {
            v131 = (const float *)(v130 + 4 * v128 * __N);
            v132 = v122 - ((v127 + ((int)v129 << 10)) >> 10);
            v133 = v178;
            v134 = v179;
            do
            {
              *(_DWORD *)(v125 + 4 * (int)v134) = *v123;
              if (v134 < v118)
                *(_DWORD *)(v125 + 4 * (v134 + v122)) = *v123;
              vDSP_dotpr((const float *)(v125 + 4 * v118 + 4 * (int)(HIDWORD(v209) & (v132 + v134))), -1, v131, 1, v124, __N);
              v134 = HIDWORD(v209) & (v210 + 1);
              LODWORD(v210) = v134;
              ++v124;
              ++v123;
              --v133;
            }
            while (v133);
          }
          ++v121;
          v120 = v178;
        }
        while (v121 != v177);
      }
LABEL_133:
      Phase::AudioBuffer<float>::Clear((uint64_t)&v205);
      LODWORD(v210) = v201 - 1;
      v93 = v163;
      v7 = v164;
      LODWORD(v103) = *((_DWORD *)v164 + 1);
      v80 = a4;
      v98 = v167;
      v97 = v168;
      v99 = v166;
      v100 = v170;
LABEL_134:
      Phase::ArrayFunction::Interleave((const void **)__p[1], (DSPComplex *)(*((_QWORD *)v7 + 5) + 4 * v97), *((int *)v7 + 2), (int)v103);
      v97 += *((int *)v7 + 2) * (uint64_t)*((int *)v7 + 1);
      ++v100;
    }
    while (v100 < *v99);
    v94 = *((_QWORD *)v7 + 2);
    v95 = *((_QWORD *)v7 + 3);
    v96 = v162;
LABEL_136:
    ++v96;
  }
  while (0xCCCCCCCCCCCCCCCDLL * ((v95 - v94) >> 2) > v96);
LABEL_137:
  if (v181[0])
  {
    v181[1] = v181[0];
    operator delete(v181[0]);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  v181[0] = &v193;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v181);
  if (__p[1])
  {
    *(void **)&v189 = __p[1];
    operator delete(__p[1]);
  }
  v193 = (void **)&v187;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v193);
  if (*((_QWORD *)&v206 + 1))
  {
    *(_QWORD *)&v207 = *((_QWORD *)&v206 + 1);
    operator delete(*((void **)&v206 + 1));
  }
  *(_QWORD *)&v187 = &v205;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v187);
  if (v198[3].__locale_)
  {
    *(std::locale *)&v199 = v198[3];
    operator delete(v198[3].__locale_);
  }
  *(_QWORD *)&v187 = v198;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v187);
  if (v182)
  {
    v183 = (float *)v182;
    operator delete(v182);
  }
  v198[0].__locale_ = (std::locale::__imp *)&v184;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v198);
  return v7;
}

void sub_2166BED78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,std::locale a61)
{
  void **v61;
  void *v62;
  void *v64;
  void *v65;

  __cxa_free_exception(v62);
  a43 = &a40;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  v64 = *v61;
  if (*v61)
  {
    *(_QWORD *)(a14 + 48) = v64;
    operator delete(v64);
  }
  v65 = *a10;
  if (*a10)
  {
    *(_QWORD *)(a14 + 24) = v65;
    operator delete(v65);
  }
  _Unwind_Resume(a1);
}

void std::vector<Phase::Controller::SpatializerFilterDatabase::Ring>::emplace_back<float &,int &,int &>(void **a1, int a2, int a3, float a4)
{
  Phase::Controller::SpatializerFilterDatabase::Ring *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  Phase::Controller::SpatializerFilterDatabase::Ring *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;

  v8 = (Phase::Controller::SpatializerFilterDatabase::Ring *)a1[1];
  v9 = (unint64_t)a1[2];
  if ((unint64_t)v8 >= v9)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (Phase::Controller::SpatializerFilterDatabase::Ring *)*a1) >> 2);
    if (v12 + 1 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (_QWORD)*a1) >> 2);
    v14 = 2 * v13;
    if (2 * v13 <= v12 + 1)
      v14 = v12 + 1;
    if (v13 >= 0x666666666666666)
      v15 = 0xCCCCCCCCCCCCCCCLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 > 0xCCCCCCCCCCCCCCCLL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = (char *)operator new(20 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = (Phase::Controller::SpatializerFilterDatabase::Ring *)&v16[20 * v12];
    v18 = &v16[20 * v15];
    Phase::Controller::SpatializerFilterDatabase::Ring::Ring(v17, a4, a2, a3);
    v11 = v19 + 20;
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 20);
        *((_DWORD *)v19 - 1) = *((_DWORD *)v20 - 1);
        *(_OWORD *)(v19 - 20) = v22;
        v19 -= 20;
        v20 -= 20;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v19;
    a1[1] = v11;
    a1[2] = v18;
    if (v20)
      operator delete(v20);
  }
  else
  {
    Phase::Controller::SpatializerFilterDatabase::Ring::Ring(v8, a4, a2, a3);
    v11 = (void *)(v10 + 20);
  }
  a1[1] = v11;
}

void Phase::AudioBuffer<float>::SetValue(uint64_t a1, signed int a2, float a3)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2 < 0
    || (v3 = *(_QWORD **)a1, v4 = *(_QWORD *)(a1 + 8), *(_QWORD *)a1 == v4)
    || (int)(-1431655765 * ((unint64_t)(v4 - (_QWORD)v3) >> 3)) <= a2
    || (int)((v3[1] - *v3) >> 2) <= 0)
  {
    std::terminate();
  }
  *(float *)v3[3 * a2] = a3;
  atomic_store(0, (unsigned __int8 *)(a1 + 48));
}

uint64_t Phase::AudioBuffer<float>::~AudioBuffer(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v4 = (void **)a1;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

uint64_t Phase::PolyphaseKaiserFixedPointDelayLine<float>::~PolyphaseKaiserFixedPointDelayLine(uint64_t a1)
{
  void **v2;
  void *v3;
  void *v4;
  void **v6;

  v2 = (void **)(a1 + 96);
  v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(_QWORD *)(a1 + 128) = v3;
    operator delete(v3);
  }
  v6 = v2;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v6 = (void **)a1;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  return a1;
}

unint64_t Phase::Controller::SpatializerFilterDatabase::GetNearestFilter(Phase::Controller::SpatializerFilterDatabase *this, float a2, float a3)
{
  BOOL v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2 < 0.0 || a2 > 180.0;
  if (v3
    || (a3 >= 0.0 ? (v4 = a3 < 360.0) : (v4 = 0), !v4 || (v5 = *((_QWORD *)this + 2), v5 == *((_QWORD *)this + 3))))
  {
    std::terminate();
  }
  v6 = v5 + 20 * llroundf(*((float *)this + 3) * a2);
  v7 = llroundf((float)(a3 - *(float *)v6) * *(float *)(v6 + 8));
  v9 = *(int *)(v6 + 12);
  v8 = *(int *)(v6 + 16);
  if (v7 == v9)
    v7 = 0;
  return *((_QWORD *)this + 5) + 4 * (v7 + v8) * *((int *)this + 1) * *((int *)this + 2);
}

float *std::__introsort<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *,false>(float *result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *i;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float *v15;
  int v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  unint64_t v25;
  float v26;
  float *v27;
  float *v28;
  float v29;
  float *v30;
  float *v32;
  int v33;
  uint64_t v34;
  float v35;
  float v36;
  float *v37;
  BOOL v38;
  float v39;
  float v40;
  float v41;
  float *v42;
  float v43;
  float v44;
  float *v45;
  float *j;
  int v47;
  uint64_t v48;
  float v49;
  float *v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float *v57;
  BOOL v59;
  uint64_t v60;
  float *v61;
  float *v62;
  float v63;
  float v64;
  float v65;
  int v66;
  int v67;
  float *v68;
  uint64_t v69;
  float *v70;
  float v71;
  float v72;
  int v73;
  float *v74;
  int64_t v75;
  int64_t v76;
  int64_t v77;
  uint64_t v78;
  float *v79;
  uint64_t v80;
  float *v81;
  float v82;
  float v83;
  float *v84;
  float v85;
  float v86;
  float v87;
  int v88;
  float *v89;
  uint64_t v90;
  float *v91;
  float v92;
  float v93;
  float v94;
  int64_t v95;
  uint64_t v96;
  int v97;
  float v98;
  int v99;
  float *v100;
  float *v101;
  float *v102;
  uint64_t v103;
  float v104;
  float v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  float *v109;
  float v110;
  float v111;
  float v112;
  int v113;
  float *v114;
  unint64_t v115;
  float v116;
  float *k;
  float *v119;
  float v120;
  float v121;
  float v122;
  int v123;
  float *m;
  float v125;

  v7 = result;
LABEL_2:
  i = v7;
  while (2)
  {
    v7 = i;
    v9 = (char *)a2 - (char *)i;
    v10 = 0xAAAAAAAAAAAAAAABLL * (a2 - i);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v53 = *(a2 - 2);
        v54 = i[1];
        if (v53 >= v54)
        {
          if (v54 < v53)
            return result;
          v55 = i[2];
          if (*(a2 - 1) >= v55)
            return result;
        }
        else
        {
          v55 = i[2];
        }
        v56 = *i;
        *i = *(a2 - 3);
        i[1] = *(a2 - 2);
        i[2] = *(a2 - 1);
        *(a2 - 3) = v56;
        *(a2 - 2) = v54;
        *(a2 - 1) = v55;
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(i, i + 3, a2 - 3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(i, i + 3, i + 6, a2 - 3);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *,0>(i, i + 3, i + 6, i + 9, a2 - 3);
      default:
        if (v9 > 287)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v75 = (v10 - 2) >> 1;
            v76 = v75;
            while (1)
            {
              v77 = v76;
              if (v75 >= v76)
              {
                v78 = (2 * v76) | 1;
                v79 = &i[3 * v78];
                v80 = 2 * v76 + 2;
                if (v80 >= (uint64_t)v10
                  || (v81 = v79 + 3, v82 = v79[1], v83 = v79[4], v82 >= v83) && (v83 < v82 || v79[2] >= v79[5]))
                {
                  v81 = &i[3 * v78];
                  v80 = (2 * v77) | 1;
                }
                v84 = &i[3 * v77];
                v85 = v81[1];
                v86 = v84[1];
                if (v85 >= v86)
                {
                  if (v86 < v85)
                  {
                    v87 = v84[2];
LABEL_143:
                    v88 = *(_DWORD *)v84;
                    *v84 = *v81;
                    v84[1] = v81[1];
                    v84[2] = v81[2];
                    if (v75 >= v80)
                    {
                      while (1)
                      {
                        v90 = (2 * v80) | 1;
                        v91 = &i[3 * v90];
                        v80 = 2 * v80 + 2;
                        if (v80 >= (uint64_t)v10
                          || (v89 = v91 + 3, v92 = v91[1], v93 = v91[4], v92 >= v93) && (v93 < v92 || v91[2] >= v91[5]))
                        {
                          v89 = &i[3 * v90];
                          v80 = v90;
                        }
                        v94 = v89[1];
                        if (v94 < v86 || v86 >= v94 && v89[2] < v87)
                          break;
                        *v81 = *v89;
                        v81[1] = v89[1];
                        v81[2] = v89[2];
                        v81 = v89;
                        if (v75 < v80)
                          goto LABEL_145;
                      }
                    }
                    v89 = v81;
LABEL_145:
                    *(_DWORD *)v89 = v88;
                    v89[1] = v86;
                    v89[2] = v87;
                    goto LABEL_146;
                  }
                  v87 = v84[2];
                  if (v81[2] >= v87)
                    goto LABEL_143;
                }
              }
LABEL_146:
              v76 = v77 - 1;
              if (!v77)
              {
                v95 = v9 / 0xCuLL;
                while (1)
                {
                  v96 = 0;
                  v98 = *i;
                  v97 = *((_DWORD *)i + 1);
                  v99 = *((_DWORD *)i + 2);
                  v100 = i;
                  do
                  {
                    v101 = v100;
                    v102 = &v100[3 * v96 + 3];
                    v103 = (2 * v96) | 1;
                    v96 = 2 * v96 + 2;
                    if (v96 >= v95
                      || (v100 = v102 + 3, v104 = v102[1], v105 = v102[4], v104 >= v105)
                      && (v105 < v104 || v102[2] >= v102[5]))
                    {
                      v100 = v102;
                      v96 = v103;
                    }
                    *v101 = *v100;
                    v101[1] = v100[1];
                    v101[2] = v100[2];
                  }
                  while (v96 <= (uint64_t)((unint64_t)(v95 - 2) >> 1));
                  if (v100 == a2 - 3)
                  {
                    *v100 = v98;
                    *((_DWORD *)v100 + 1) = v97;
                    *((_DWORD *)v100 + 2) = v99;
                  }
                  else
                  {
                    *v100 = *(a2 - 3);
                    v100[1] = *(a2 - 2);
                    v100[2] = *(a2 - 1);
                    *(a2 - 3) = v98;
                    *((_DWORD *)a2 - 2) = v97;
                    *((_DWORD *)a2 - 1) = v99;
                    v106 = (char *)v100 - (char *)i + 12;
                    if (v106 >= 13)
                    {
                      v107 = v106 / 0xCuLL - 2;
                      v108 = v107 >> 1;
                      v109 = &i[3 * (v107 >> 1)];
                      v110 = v109[1];
                      v111 = v100[1];
                      if (v110 < v111)
                      {
                        v112 = v100[2];
LABEL_172:
                        v113 = *(_DWORD *)v100;
                        *v100 = *v109;
                        v100[1] = v109[1];
                        v100[2] = v109[2];
                        if (v107 >= 2)
                        {
                          while (1)
                          {
                            v115 = v108 - 1;
                            v108 = (v108 - 1) >> 1;
                            v114 = &i[3 * v108];
                            v116 = v114[1];
                            if (v116 >= v111 && (v111 < v116 || v114[2] >= v112))
                              break;
                            *v109 = *v114;
                            v109[1] = v116;
                            v109[2] = v114[2];
                            v109 = &i[3 * v108];
                            if (v115 <= 1)
                              goto LABEL_178;
                          }
                        }
                        v114 = v109;
LABEL_178:
                        *(_DWORD *)v114 = v113;
                        v114[1] = v111;
                        v114[2] = v112;
                        goto LABEL_179;
                      }
                      if (v111 >= v110)
                      {
                        v112 = v100[2];
                        if (v109[2] < v112)
                          goto LABEL_172;
                      }
                    }
                  }
LABEL_179:
                  a2 -= 3;
                  if (v95-- <= 2)
                    return result;
                }
              }
            }
          }
          v11 = v10 >> 1;
          v12 = &i[3 * (v10 >> 1)];
          if ((unint64_t)v9 < 0x601)
          {
            result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(&v7[3 * v11], v7, a2 - 3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(v7, &v7[3 * v11], a2 - 3);
            v13 = 3 * v11;
            v14 = &v7[3 * v11 - 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(v7 + 3, v14, a2 - 6);
            v15 = &v7[v13 + 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(v7 + 6, v15, a2 - 9);
            result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(v14, v12, v15);
            v16 = *((_DWORD *)v7 + 2);
            v7[2] = v12[2];
            v17 = *(_QWORD *)v7;
            *(_QWORD *)v7 = *(_QWORD *)v12;
            *(_QWORD *)v12 = v17;
            *((_DWORD *)v12 + 2) = v16;
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v19 = *(v7 - 2);
            v18 = v7[1];
            if (v19 < v18)
              goto LABEL_14;
            if (v18 < v19)
            {
              v20 = v7[2];
            }
            else
            {
              v20 = v7[2];
              if (*(v7 - 1) < v20)
                goto LABEL_14;
            }
            v39 = *(a2 - 2);
            if (v18 >= v39 && (v39 < v18 || v20 >= *(a2 - 1)))
            {
              for (i = v7 + 3; i < a2; i += 3)
              {
                v41 = i[1];
                if (v18 < v41 || v41 >= v18 && v20 < i[2])
                  break;
              }
            }
            else
            {
              v40 = v7[4];
              if (v18 >= v40)
              {
                v42 = v7 + 7;
                do
                {
                  if (v40 >= v18 && v20 < *(v42 - 2))
                    break;
                  v43 = *v42;
                  v42 += 3;
                  v40 = v43;
                }
                while (v18 >= v43);
                i = v42 - 4;
              }
              else
              {
                i = v7 + 3;
              }
            }
            v44 = *v7;
            v45 = a2;
            if (i < a2)
            {
              for (j = a2 - 1; v18 < v39 || v39 >= v18 && v20 < *j; j -= 3)
                v39 = *(j - 4);
              v45 = j - 2;
            }
            while (i < v45)
            {
              v47 = *((_DWORD *)i + 2);
              v48 = *(_QWORD *)i;
              *i = *v45;
              i[1] = v45[1];
              i[2] = v45[2];
              *(_QWORD *)v45 = v48;
              *((_DWORD *)v45 + 2) = v47;
              v49 = i[4];
              if (v18 >= v49)
              {
                v50 = i + 7;
                do
                {
                  if (v49 >= v18 && v20 < *(v50 - 2))
                    break;
                  v51 = *v50;
                  v50 += 3;
                  v49 = v51;
                }
                while (v18 >= v51);
                i = v50 - 4;
              }
              else
              {
                i += 3;
              }
              do
              {
                do
                {
                  v45 -= 3;
                  v52 = v45[1];
                }
                while (v18 < v52);
              }
              while (v52 >= v18 && v20 < v45[2]);
            }
            if (i - 3 != v7)
            {
              *v7 = *(i - 3);
              v7[1] = *(i - 2);
              v7[2] = *(i - 1);
            }
            a4 = 0;
            *(i - 3) = v44;
            *(i - 2) = v18;
            *(i - 1) = v20;
            continue;
          }
          v18 = v7[1];
LABEL_14:
          v21 = 0;
          v22 = *v7;
          v23 = v7[2];
          while (1)
          {
            v24 = v7[v21 + 4];
            if (v24 >= v18 && (v18 < v24 || v7[v21 + 5] >= v23))
              break;
            v21 += 3;
          }
          v25 = (unint64_t)&v7[v21 + 3];
          if (v21 * 4)
          {
            v26 = *(a2 - 2);
            v27 = a2 - 1;
            v28 = a2 - 3;
            if (v26 >= v18)
            {
              do
              {
                if (v18 >= v26 && *v27 < v23)
                  break;
                v26 = *(v27 - 4);
                v27 -= 3;
              }
              while (v26 >= v18);
LABEL_24:
              v28 = v27 - 2;
            }
          }
          else
          {
            v28 = a2;
            if (v25 < (unint64_t)a2)
            {
              v29 = *(a2 - 2);
              v28 = a2 - 3;
              if (v29 >= v18)
              {
                v27 = a2 - 1;
                v28 = a2 - 3;
                while (1)
                {
                  v30 = v27 - 2;
                  if (v18 >= v29)
                  {
                    if (*v27 < v23 || v25 >= (unint64_t)v30)
                    {
                      v28 = v27 - 2;
                      break;
                    }
                  }
                  else if (v25 >= (unint64_t)v30)
                  {
                    break;
                  }
                  v28 -= 3;
                  v29 = *(v27 - 4);
                  v27 -= 3;
                  if (v29 < v18)
                    goto LABEL_24;
                }
              }
            }
          }
          i = (float *)v25;
          if (v25 < (unint64_t)v28)
          {
            v32 = v28;
            do
            {
              v33 = *((_DWORD *)i + 2);
              v34 = *(_QWORD *)i;
              *i = *v32;
              i[1] = v32[1];
              i[2] = v32[2];
              *(_QWORD *)v32 = v34;
              *((_DWORD *)v32 + 2) = v33;
              do
              {
                do
                {
                  i += 3;
                  v35 = i[1];
                }
                while (v35 < v18);
              }
              while (v18 >= v35 && i[2] < v23);
              v36 = *(v32 - 2);
              if (v36 >= v18)
              {
                v37 = v32 - 1;
                do
                {
                  if (v18 >= v36 && *v37 < v23)
                    break;
                  v36 = *(v37 - 4);
                  v37 -= 3;
                }
                while (v36 >= v18);
                v32 = v37 - 2;
              }
              else
              {
                v32 -= 3;
              }
            }
            while (i < v32);
          }
          if (i - 3 != v7)
          {
            *v7 = *(i - 3);
            v7[1] = *(i - 2);
            v7[2] = *(i - 1);
          }
          *(i - 3) = v22;
          *(i - 2) = v18;
          *(i - 1) = v23;
          if (v25 < (unint64_t)v28)
          {
LABEL_57:
            result = (float *)std::__introsort<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *,false>(v7, i - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v38 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(v7, i - 3);
          result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(i, a2);
          if (!(_DWORD)result)
          {
            if (v38)
              continue;
            goto LABEL_57;
          }
          a2 = i - 3;
          if (v38)
            return result;
          goto LABEL_2;
        }
        v57 = i + 3;
        v59 = i == a2 || v57 == a2;
        if ((a4 & 1) == 0)
        {
          if (v59)
            return result;
          for (k = i + 2; ; k += 3)
          {
            v119 = v7;
            v7 = v57;
            v120 = v119[4];
            v121 = v119[1];
            if (v120 < v121)
              break;
            if (v121 >= v120)
            {
              v122 = v119[5];
              if (v122 < v119[2])
                goto LABEL_191;
            }
LABEL_197:
            v57 += 3;
            if (v7 + 3 == a2)
              return result;
          }
          v122 = v119[5];
LABEL_191:
          v123 = *(_DWORD *)v57;
          for (m = k; ; m -= 3)
          {
            *(_QWORD *)(m + 1) = *((_QWORD *)m - 1);
            m[3] = *m;
            v125 = *(m - 4);
            if (v120 >= v125 && (v125 < v120 || v122 >= *(m - 3)))
              break;
          }
          *((_DWORD *)m - 2) = v123;
          *(m - 1) = v120;
          *m = v122;
          goto LABEL_197;
        }
        if (v59)
          return result;
        v60 = 0;
        v61 = i;
        do
        {
          v62 = v61;
          v61 = v57;
          v63 = v62[4];
          v64 = v62[1];
          if (v63 >= v64)
          {
            if (v64 < v63)
              goto LABEL_129;
            v65 = v62[5];
            if (v65 >= v62[2])
              goto LABEL_129;
          }
          else
          {
            v65 = v62[5];
          }
          v66 = *((_DWORD *)v62 + 3);
          v67 = *((_DWORD *)v62 + 1);
          v62[3] = *v62;
          *((_DWORD *)v57 + 1) = v67;
          v57[2] = v62[2];
          v68 = i;
          if (v62 == i)
            goto LABEL_128;
          v69 = v60;
          while (1)
          {
            v70 = (float *)((char *)i + v69);
            v71 = *(float *)((char *)i + v69 - 8);
            if (v63 < v71)
            {
              v72 = *(v70 - 1);
              goto LABEL_124;
            }
            if (v71 < v63)
            {
              v68 = (float *)((char *)i + v69);
              goto LABEL_128;
            }
            v72 = *(float *)((char *)i + v69 - 4);
            if (v65 >= v72)
              break;
LABEL_124:
            v62 -= 3;
            v73 = *((_DWORD *)v70 - 3);
            v74 = (float *)((char *)i + v69);
            *(_DWORD *)v74 = v73;
            v74[1] = v71;
            v74[2] = v72;
            v69 -= 12;
            if (!v69)
            {
              v68 = i;
              goto LABEL_128;
            }
          }
          v68 = v62;
LABEL_128:
          *(_DWORD *)v68 = v66;
          v68[1] = v63;
          v68[2] = v65;
LABEL_129:
          v57 = v61 + 3;
          v60 += 12;
        }
        while (v61 + 3 != a2);
        return result;
    }
  }
}

float *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *,0>(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  float *result;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(a1, a2, a3, a4);
  v11 = a5[1];
  v12 = a4[1];
  if (v11 >= v12)
  {
    if (v12 < v11)
      return result;
    v13 = a4[2];
    if (a5[2] >= v13)
      return result;
  }
  else
  {
    v13 = a4[2];
  }
  v14 = *a4;
  *a4 = *a5;
  a4[1] = a5[1];
  a4[2] = a5[2];
  *a5 = v14;
  a5[1] = v12;
  a5[2] = v13;
  v15 = a4[1];
  v16 = a3[1];
  if (v15 >= v16)
  {
    if (v16 < v15)
      return result;
    v17 = a3[2];
    if (a4[2] >= v17)
      return result;
  }
  else
  {
    v17 = a3[2];
  }
  v18 = *a3;
  *a3 = *a4;
  a3[1] = a4[1];
  a3[2] = a4[2];
  *a4 = v18;
  a4[1] = v16;
  a4[2] = v17;
  v19 = a3[1];
  v20 = a2[1];
  if (v19 >= v20)
  {
    if (v20 < v19)
      return result;
    v21 = a2[2];
    if (a3[2] >= v21)
      return result;
  }
  else
  {
    v21 = a2[2];
  }
  v22 = *a2;
  *a2 = *a3;
  a2[1] = a3[1];
  a2[2] = a3[2];
  *a3 = v22;
  a3[1] = v20;
  a3[2] = v21;
  v23 = a2[1];
  v24 = a1[1];
  if (v23 < v24)
  {
    v25 = a1[2];
LABEL_9:
    v26 = *a1;
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    *a2 = v26;
    a2[1] = v24;
    a2[2] = v25;
    return result;
  }
  if (v24 >= v23)
  {
    v25 = a1[2];
    if (a2[2] < v25)
      goto LABEL_9;
  }
  return result;
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v3 = a2[1];
  v4 = result[1];
  if (v3 >= v4 && (v4 < v3 || a2[2] >= result[2]))
  {
    v8 = a3[1];
    if (v8 >= v3)
    {
      if (v3 < v8)
        return result;
      v9 = a2[2];
      if (a3[2] >= v9)
        return result;
    }
    else
    {
      v9 = a2[2];
    }
    v10 = *a2;
    *a2 = *a3;
    a2[1] = a3[1];
    a2[2] = a3[2];
    *a3 = v10;
    a3[1] = v3;
    a3[2] = v9;
    v11 = a2[1];
    v12 = result[1];
    if (v11 >= v12)
    {
      if (v12 < v11)
        return result;
      v13 = result[2];
      if (a2[2] >= v13)
        return result;
    }
    else
    {
      v13 = result[2];
    }
    v17 = *result;
    *result = *a2;
    result[1] = a2[1];
    result[2] = a2[2];
    *a2 = v17;
    a2[1] = v12;
    a2[2] = v13;
    return result;
  }
  v5 = a3[1];
  if (v5 < v3 || v3 >= v5 && a3[2] < a2[2])
  {
    v6 = *result;
    v7 = *((_DWORD *)result + 2);
    *result = *a3;
    result[1] = a3[1];
    result[2] = a3[2];
    *a3 = v6;
    a3[1] = v4;
    *((_DWORD *)a3 + 2) = v7;
  }
  else
  {
    v14 = *result;
    v15 = result[2];
    *result = *a2;
    result[1] = a2[1];
    result[2] = a2[2];
    *a2 = v14;
    a2[1] = v4;
    a2[2] = v15;
    v16 = a3[1];
    if (v16 < v4 || v4 >= v16 && a3[2] < v15)
    {
      *a2 = *a3;
      a2[1] = a3[1];
      a2[2] = a3[2];
      *a3 = v14;
      a3[1] = v4;
      a3[2] = v15;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(float *a1, float *a2)
{
  unint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  float v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;
  float *v22;
  float v23;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(a2 - 2);
      v7 = a1[1];
      if (v6 < v7)
      {
        v8 = a1[2];
LABEL_30:
        v23 = *a1;
        *a1 = *(a2 - 3);
        a1[1] = *(a2 - 2);
        a1[2] = *(a2 - 1);
        *(a2 - 3) = v23;
        *(a2 - 2) = v7;
        *(a2 - 1) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        v8 = a1[2];
        if (*(a2 - 1) < v8)
          goto LABEL_30;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *,0>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v9 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(a1, a1 + 3, a1 + 6);
      v10 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
LABEL_6:
  v13 = v10[1];
  v14 = v9[1];
  if (v13 >= v14)
  {
    if (v14 < v13)
      goto LABEL_21;
    v15 = v10[2];
    if (v15 >= v9[2])
      goto LABEL_21;
  }
  else
  {
    v15 = v10[2];
  }
  v16 = *(_DWORD *)v10;
  *v10 = *v9;
  v10[1] = v9[1];
  v10[2] = v9[2];
  v17 = (uint64_t)a1;
  if (v9 == a1)
    goto LABEL_20;
  v18 = v11;
  while (1)
  {
    v19 = (float *)((char *)a1 + v18);
    v20 = *(float *)((char *)a1 + v18 + 16);
    if (v13 >= v20)
    {
      if (v20 < v13)
      {
        v17 = (uint64_t)v9;
        goto LABEL_20;
      }
      v21 = *(float *)((char *)a1 + v18 + 20);
      if (v15 >= v21)
      {
        v17 = (uint64_t)a1 + v18 + 24;
LABEL_20:
        *(_DWORD *)v17 = v16;
        *(float *)(v17 + 4) = v13;
        *(float *)(v17 + 8) = v15;
        if (++v12 == 8)
          return v10 + 3 == a2;
LABEL_21:
        v9 = v10;
        v11 += 12;
        v10 += 3;
        if (v10 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v21 = v19[5];
    }
    v9 -= 3;
    v19[6] = v19[3];
    v22 = (float *)((char *)a1 + v18);
    v22[7] = v20;
    v22[8] = v21;
    v18 -= 12;
    if (v18 == -24)
    {
      v17 = (uint64_t)a1;
      goto LABEL_20;
    }
  }
}

float *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(float *a1, float *a2, float *a3, float *a4)
{
  float *result;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(a1, a2, a3);
  v9 = a4[1];
  v10 = a3[1];
  if (v9 >= v10)
  {
    if (v10 < v9)
      return result;
    v11 = a3[2];
    if (a4[2] >= v11)
      return result;
  }
  else
  {
    v11 = a3[2];
  }
  v12 = *a3;
  *a3 = *a4;
  a3[1] = a4[1];
  a3[2] = a4[2];
  *a4 = v12;
  a4[1] = v10;
  a4[2] = v11;
  v13 = a3[1];
  v14 = a2[1];
  if (v13 >= v14)
  {
    if (v14 < v13)
      return result;
    v15 = a2[2];
    if (a3[2] >= v15)
      return result;
  }
  else
  {
    v15 = a2[2];
  }
  v16 = *a2;
  *a2 = *a3;
  a2[1] = a3[1];
  a2[2] = a3[2];
  *a3 = v16;
  a3[1] = v14;
  a3[2] = v15;
  v17 = a2[1];
  v18 = a1[1];
  if (v17 < v18)
  {
    v19 = a1[2];
LABEL_15:
    v20 = *a1;
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    *a2 = v20;
    a2[1] = v18;
    a2[2] = v19;
    return result;
  }
  if (v18 >= v17)
  {
    v19 = a1[2];
    if (a2[2] < v19)
      goto LABEL_15;
  }
  return result;
}

float Phase::Controller::SpatializerFilterDatabase::Ring::Ring(Phase::Controller::SpatializerFilterDatabase::Ring *this, float a2, int a3, int a4)
{
  BOOL v4;
  float v5;
  float result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  v4 = a2 >= 0.0 && a2 < 360.0;
  if (!v4 || a3 <= 0 || a4 < 0)
    std::terminate();
  v5 = 360.0 / (float)a3;
  *(float *)this = a2;
  *((float *)this + 1) = v5;
  result = 1.0 / v5;
  *((float *)this + 2) = 1.0 / v5;
  *((_DWORD *)this + 3) = a3;
  *((_DWORD *)this + 4) = a4;
  return result;
}

uint64_t Phase::AudioBuffer<float>::GetWritePointer(uint64_t a1, signed int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2 < 0
    || (v3 = *(_QWORD **)a1, v4 = *(_QWORD *)(a1 + 8), *(_QWORD *)a1 == v4)
    || (int)(-1431655765 * ((unint64_t)(v4 - (_QWORD)v3) >> 3)) <= a2
    || (int)((v3[1] - *v3) >> 2) <= a3)
  {
    std::terminate();
  }
  atomic_store(0, (unsigned __int8 *)(a1 + 48));
  return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * a2) + 4 * a3;
}

void Phase::BesselFunction::I_0<double>(double a1)
{
  double v1;

  v1 = fabs(a1);
  if (v1 >= 3.75)
    exp(v1);
}

uint64_t Phase::AudioBuffer<float>::GetReadPointer(uint64_t a1, signed int a2)
{
  _QWORD *v2;
  uint64_t v3;

  if (a2 < 0
    || (v2 = *(_QWORD **)a1, v3 = *(_QWORD *)(a1 + 8), *(_QWORD *)a1 == v3)
    || (int)(-1431655765 * ((unint64_t)(v3 - (_QWORD)v2) >> 3)) <= a2
    || (int)((v2[1] - *v2) >> 2) <= 0)
  {
    std::terminate();
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * a2);
}

void Phase::AudioBuffer<float>::AllocateInternal(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;

  if ((a2 & 0x80000000) != 0 || (a3 & 0x80000000) != 0)
    std::terminate();
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v6)
  {
    if (a2)
      goto LABEL_9;
    LODWORD(v7) = 0;
  }
  else
  {
    if (-1431655765 * ((unint64_t)(v6 - (_QWORD)v5) >> 3) != a2)
      goto LABEL_9;
    v7 = (v5[1] - *v5) >> 2;
  }
  if ((_DWORD)v7 == a3)
    return;
LABEL_9:
  v8 = a2;
  std::vector<std::vector<float>>::resize((uint64_t *)a1, a2);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = (v10 - v9) >> 3;
  if (v8 <= v11)
  {
    if (v8 >= v11)
      goto LABEL_25;
    v25 = v9 + 8 * v8;
  }
  else
  {
    v12 = v8 - v11;
    v13 = *(_QWORD *)(a1 + 40);
    if (v8 - v11 > (v13 - v10) >> 3)
    {
      v14 = v13 - v9;
      v15 = v14 >> 2;
      if (v14 >> 2 <= v8)
        v15 = v8;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a1 + 40, v16);
      v18 = &v17[8 * v11];
      v20 = &v17[8 * v19];
      bzero(v18, 8 * v12);
      v21 = &v18[8 * v12];
      v23 = *(char **)(a1 + 24);
      v22 = *(char **)(a1 + 32);
      if (v22 != v23)
      {
        do
        {
          v24 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *((_QWORD *)v18 - 1) = v24;
          v18 -= 8;
        }
        while (v22 != v23);
        v22 = *(char **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 24) = v18;
      *(_QWORD *)(a1 + 32) = v21;
      *(_QWORD *)(a1 + 40) = v20;
      if (v22)
        operator delete(v22);
      goto LABEL_25;
    }
    bzero(*(void **)(a1 + 32), 8 * v12);
    v25 = v10 + 8 * v12;
  }
  *(_QWORD *)(a1 + 32) = v25;
LABEL_25:
  v26 = *(_QWORD *)a1;
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
  {
    v27 = 0;
    v28 = 0;
    do
    {
      v29 = (_QWORD *)(v26 + v27);
      std::vector<float>::resize(v26 + v27, a3);
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v28++) = *v29;
      v26 = *(_QWORD *)a1;
      v27 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3) > v28);
  }
}

uint64_t Phase::AudioBuffer<float>::AudioBuffer(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  Phase::AudioBuffer<float>::AllocateInternal(a1, a2, a3);
  return a1;
}

void sub_2166C07AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)(v10 + 24);
  if (v12)
  {
    *(_QWORD *)(v10 + 32) = v12;
    operator delete(v12);
  }
  a10 = (void **)v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

float Phase::AudioBuffer<float>::GetValue(char *a1, char *a2, signed int a3)
{
  if (a3 < 0
    || a1 == a2
    || (int)(-1431655765 * ((unint64_t)(a2 - a1) >> 3)) <= a3
    || (int)((*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 2) <= 0)
  {
    std::terminate();
  }
  return **(float **)&a1[24 * a3];
}

void Phase::AudioBuffer<float>::Clear(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = atomic_load((unsigned __int8 *)(a1 + 48));
  if ((v1 & 1) == 0)
  {
    v3 = *(_QWORD **)a1;
    v4 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 != v4)
    {
      v5 = 0;
      do
      {
        if (v5 >= (int)(-1431655765 * ((unint64_t)(v4 - (_QWORD)v3) >> 3)))
          break;
        vDSP_vclr(*(float **)(*(_QWORD *)(a1 + 24) + 8 * v5++), 1, (int)((uint64_t)(v3[1] - *v3) >> 2));
        v3 = *(_QWORD **)a1;
        v4 = *(_QWORD *)(a1 + 8);
      }
      while (*(_QWORD *)a1 != v4);
    }
    atomic_store(1u, (unsigned __int8 *)(a1 + 48));
  }
}

void Phase::Controller::InitializeBinauralSpatializer(uint64_t *a1, uint64_t *a2, char a3)
{
  _BYTE *v6;
  uint64_t v7;
  const void *v8;
  CFStringRef v9;
  void *v10;
  int v11;
  Phase::Logger *v12;
  NSObject *v13;
  const char *v14;
  CFURLRef v15;
  CFURLRef v16;
  CFTypeID v17;
  const void *v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  const void *v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  std::runtime_error *exception;
  std::runtime_error *v27;
  CFTypeRef v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  CFTypeRef v33;
  __int128 v34;
  CFTypeRef v35;
  _OWORD v36[2];
  CFTypeRef v37;
  uint64_t v38;
  int v39;
  const void *v40;
  CFTypeRef v41[3];
  _BYTE __p[40];
  __int128 v43;
  char v44;
  CFTypeRef cf[8];
  CFTypeRef v46;
  uint64_t v47;
  int v48;
  char __s[56];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  strcpy(__s, "/System/Library/Audio/Tunings/IRs/Generic/HRIR_Movie.ir");
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  if (__p[23] >= 0)
    v6 = __p;
  else
    v6 = *(_BYTE **)__p;
  if (__p[23] >= 0)
    v7 = __p[23];
  else
    v7 = *(_QWORD *)&__p[8];
  v8 = (const void *)MEMORY[0x2199F9674](0, v6, v7, 1, 0);
  v41[1] = v8;
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v9 = CFURLCopyFileSystemPath((CFURLRef)v8, kCFURLPOSIXPathStyle);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v41, v9);
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "fileExistsAtPath:", v41[0]);

  v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v12) + 576));
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = "General";
    *(_QWORD *)&__p[4] = "SpatializerManager.mm";
    *(_DWORD *)__p = 136315650;
    if (v11)
      v14 = "Movie";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = 71;
    *(_WORD *)&__p[18] = 2080;
    *(_QWORD *)&__p[20] = v14;
    _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default HRIR Database is type %s.", __p, 0x1Cu);
  }
  if (v11)
  {
    CFRetain(v8);
    v40 = v8;
    CFRetain(v8);
    v41[2] = v8;
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = 0x8000000000;
    *(_WORD *)&__p[16] = 1;
    *(_DWORD *)&__p[20] = 2;
    *(_QWORD *)&__p[24] = 0;
    *(_QWORD *)&__p[32] = 0;
    *(_QWORD *)&v43 = 0;
    *((_QWORD *)&v43 + 1) = 0x5DC00000000;
    v44 = 1;
    memset(cf, 0, 44);
    HIDWORD(cf[5]) = 1500;
    LOBYTE(cf[6]) = 1;
    HIDWORD(cf[6]) = 0;
    LOBYTE(cf[7]) = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v15 = CFURLCopyAbsoluteURL((CFURLRef)v8);
    v16 = v15;
    if (v15)
    {
      v17 = CFGetTypeID(v15);
      if (v17 != CFURLGetTypeID())
      {
        v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v27, "Could not construct");
      }
    }
    v18 = *(const void **)__p;
    *(_QWORD *)__p = v16;
    if (v18)
      CFRelease(v18);
    CFRelease(v8);
    CFRelease(v8);
  }
  else
  {
    IR::getPresetDataAttributes();
  }
  *(_DWORD *)&__p[20] = 0;
  v19 = *a2;
  v20 = *(double *)a2;
  *(float *)&__p[8] = v20;
  v21 = a2[1];
  v22 = *(const void **)__p;
  if (*(_QWORD *)__p)
    CFRetain(*(CFTypeRef *)__p);
  v28 = v22;
  v29 = *(_OWORD *)&__p[8];
  v30 = *(_OWORD *)&__p[24];
  v31 = v43;
  v32 = v44;
  v23 = cf[0];
  if (cf[0])
    CFRetain(cf[0]);
  v33 = v23;
  v34 = *(_OWORD *)&cf[1];
  v24 = cf[3];
  if (cf[3])
    CFRetain(cf[3]);
  v35 = v24;
  v36[0] = *(_OWORD *)&cf[4];
  *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)((char *)&cf[5] + 1);
  v25 = v46;
  if (v46)
    CFRetain(v46);
  v37 = v25;
  v38 = v47;
  v39 = v48;
  *a1 = Phase::Controller::Spatializer::Create<Phase::Controller::BinauralSpatializer,Phase::Controller::Spatializer::InitParameters,IR::IRDataAttributes,BOOL>(v19, v21, (uint64_t)&v28, a3);
  if (v37)
    CFRelease(v37);
  if (v35)
    CFRelease(v35);
  if (v33)
    CFRelease(v33);
  if (v28)
    CFRelease(v28);
  if (v46)
    CFRelease(v46);
  if (cf[3])
    CFRelease(cf[3]);
  if (cf[0])
    CFRelease(cf[0]);
  if (*(_QWORD *)__p)
    CFRelease(*(CFTypeRef *)__p);
  if (v41[0])
    CFRelease(v41[0]);
  CFRelease(v8);
}

void sub_2166C0CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,const void *a29,const void *a30,const void *a31,const void *a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,const void *a44,uint64_t a45,uint64_t a46,const void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,const void *a52)
{
  void *v52;
  const void *v53;

  __cxa_free_exception(v52);
  CFRelease(v53);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a52);
  applesauce::CF::URLRef::~URLRef(&a47);
  applesauce::CF::URLRef::~URLRef(&a44);
  applesauce::CF::URLRef::~URLRef((const void **)&__p);
  applesauce::CF::URLRef::~URLRef(&a32);
  applesauce::CF::URLRef::~URLRef(&a29);
  applesauce::CF::StringRef::~StringRef(&a30);
  applesauce::CF::URLRef::~URLRef(&a31);
  _Unwind_Resume(a1);
}

void applesauce::CF::URLRef::~URLRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t Phase::Controller::Spatializer::Create<Phase::Controller::BinauralSpatializer,Phase::Controller::Spatializer::InitParameters,IR::IRDataAttributes,BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  __int128 v8;

  *(_QWORD *)&v8 = a1;
  *((_QWORD *)&v8 + 1) = a2;
  v6 = operator new();
  Phase::Controller::BinauralSpatializer::BinauralSpatializer(v6, &v8, a3, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  return v6;
}

void sub_2166C0ED8(void *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10F3C40808D0D08);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2166C0EC0);
}

void Phase::Controller::InitializeXTCSpatializer(_QWORD *a1, double *a2)
{
  void *v4;
  CFStringRef v5;
  char v6;
  CFURLRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;
  const void *v11;
  Phase::Logger *v12;
  NSObject *v13;
  double v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  CFTypeRef v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  CFTypeRef v23;
  __int128 v24;
  CFTypeRef v25;
  _OWORD v26[2];
  CFTypeRef v27;
  uint64_t v28;
  int v29;
  CFURLRef anURL;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  CFTypeRef v35;
  __int128 v36;
  CFTypeRef v37;
  _OWORD v38[2];
  CFTypeRef cf;
  uint64_t v40;
  int v41;
  _BYTE buf[24];
  __int128 v43;
  __int128 v44;
  char v45;
  CFTypeRef v46;
  __int128 v47;
  const void *v48;
  _OWORD v49[2];
  CFTypeRef v50;
  uint64_t v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  IR::getPresetDataAttributes();
  if (!anURL)
    goto LABEL_5;
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, v5);
  v6 = objc_msgSend(v4, "fileExistsAtPath:", *(_QWORD *)buf);
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);

  if ((v6 & 1) == 0)
  {
LABEL_5:
    IR::getPresetDataAttributes();
    v7 = anURL;
    anURL = *(CFURLRef *)buf;
    v31 = *(_OWORD *)&buf[8];
    v32 = v43;
    v33 = v44;
    v34 = v45;
    v8 = v46;
    *(_QWORD *)buf = v7;
    v46 = v35;
    v36 = v47;
    v9 = v37;
    v10 = cf;
    v35 = v8;
    v37 = v48;
    *(_OWORD *)((char *)v38 + 9) = *(_OWORD *)((char *)v49 + 9);
    v38[0] = v49[0];
    v41 = v52;
    v11 = v50;
    v48 = v9;
    v50 = cf;
    cf = v11;
    v40 = v51;
    if (v50)
    {
      CFRelease(v10);
      v9 = v48;
    }
    if (v9)
      CFRelease(v9);
    if (v46)
      CFRelease(v46);
    v12 = *(Phase::Logger **)buf;
    if (*(_QWORD *)buf)
      CFRelease(*(CFTypeRef *)buf);
    v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v12) + 576));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "SpatializerManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 115;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d XTC HRIR doesn't exist for this device, falling back to default.", buf, 0x12u);
    }
  }
  HIDWORD(v31) = 0;
  v14 = *a2;
  v15 = *a2;
  *(float *)&v31 = v15;
  v16 = *((_QWORD *)a2 + 1);
  if (anURL)
    CFRetain(anURL);
  v18 = anURL;
  v19 = v31;
  v20 = v32;
  v21 = v33;
  v22 = v34;
  if (v35)
    CFRetain(v35);
  v23 = v35;
  v24 = v36;
  if (v37)
    CFRetain(v37);
  v25 = v37;
  v26[0] = v38[0];
  *(_OWORD *)((char *)v26 + 9) = *(_OWORD *)((char *)v38 + 9);
  if (cf)
    CFRetain(cf);
  v27 = cf;
  v28 = v40;
  v29 = v41;
  *(double *)buf = v14;
  *(_QWORD *)&buf[8] = v16;
  v17 = (_QWORD *)operator new();
  Phase::Controller::XTCBinauralSpatializer::XTCBinauralSpatializer(v17, (__int128 *)buf, (uint64_t)&v18);
  (*(void (**)(_QWORD *))(*v17 + 16))(v17);
  *a1 = v17;
  if (v27)
    CFRelease(v27);
  if (v25)
    CFRelease(v25);
  if (v23)
    CFRelease(v23);
  if (v18)
    CFRelease(v18);
  if (cf)
    CFRelease(cf);
  if (v37)
    CFRelease(v37);
  if (v35)
    CFRelease(v35);
  if (anURL)
    CFRelease(anURL);
}

void sub_2166C125C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void Phase::Controller::InitializeVBAPSpatializer(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *__p;
  void *v8;
  uint64_t v9;
  __int128 v10;

  v4 = *a2;
  v5 = a2[1];
  v8 = 0;
  v9 = 0;
  __p = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  *(_QWORD *)&v10 = v4;
  *((_QWORD *)&v10 + 1) = v5;
  v6 = (_QWORD *)operator new();
  Phase::Controller::VbapSpatializer::VbapSpatializer(v6, &v10, (uint64_t)&__p);
  (*(void (**)(_QWORD *))(*v6 + 16))(v6);
  *a1 = v6;
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_2166C13D4(void *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10B3C40569E7192);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2166C13ACLL);
}

void sub_2166C140C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::RegisterSpatializer(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  NSObject *v6;
  std::runtime_error *exception;
  unint64_t v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  if (!a1)
  {
    v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 576));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v10 = "SpatializerManager.mm";
      v11 = 1024;
      v12 = 168;
      _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: nullptr != pInSpatializer is false.", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "POSTCONDITION: nullptr != pInSpatializer is false.");
  }
  v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a2, a3, &v8);
  result = v4[3];
  v4[3] = a1;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2166C1574(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatializerManager::SpatializerManager(uint64_t a1, uint64_t a2, double a3)
{
  unsigned int **v6;
  uint64_t v7;
  uint64_t v8;
  Phase::Logger *v9;
  unsigned int *InstancePtr;
  uint64_t v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *size;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  std::string::size_type v37;
  std::string::size_type v38;
  unint64_t *v39;
  unint64_t v40;
  std::vector<char>::pointer begin;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t SpatializerForConfig;
  unint64_t v79;
  Phase::Logger *active;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92[2];
  uint64_t v93[2];
  std::vector<char> v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97[2];
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  __int128 v102;
  std::string v103;
  std::string v104;
  __int128 v105;
  std::vector<char>::value_type __x[40];
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v6 = (unsigned int **)(a1 + 48);
  __x[0] = 0;
  std::vector<char>::vector((std::vector<char> *)(a1 + 48), 0x20uLL, __x);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)v7 = 0;
  *(_DWORD *)(v7 + 8) = 0;
  *(int64x2_t *)(a1 + 72) = vdupq_n_s64(1uLL);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a2;
  v8 = *(_QWORD *)(a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__x, "SpatializerInit");
  v9 = (Phase::Logger *)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, std::vector<char>::value_type *))(*(_QWORD *)v8 + 16))(&v100, v8, __x);
  if (__x[23] < 0)
    operator delete(*(void **)__x);
  InstancePtr = (unsigned int *)Phase::Logger::GetInstancePtr(v9);
  v11 = InstancePtr[386];
  v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)InstancePtr) + 576));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__x = 136315650;
    *(_QWORD *)&__x[4] = "SpatializerManager.mm";
    *(_WORD *)&__x[12] = 1024;
    *(_DWORD *)&__x[14] = 199;
    *(_WORD *)&__x[18] = 1024;
    *(_DWORD *)&__x[20] = v11;
    _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initializing with spatializerCoordinateCount=%d", (uint8_t *)__x, 0x18u);
  }
  v14 = v100;
  v13 = v101;
  v97[1] = v100;
  v98 = v101;
  v99 = 0;
  if (v101)
  {
    p_shared_owners = (unint64_t *)&v101->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(&v103, "SpatializerManager-init-");
  v17 = std::string::append(&v103, "binaural");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v104.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v104, "-spatializer");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  *(_QWORD *)&__x[16] = *((_QWORD *)&v19->__r_.__value_.__l + 2);
  *(_OWORD *)__x = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(__int128 *__return_ptr, uint64_t, std::vector<char>::value_type *))(*(_QWORD *)v8 + 16))(&v105, v8, __x);
  if (__x[23] < 0)
    operator delete(*(void **)__x);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  *(_QWORD *)__x = v14;
  *(_QWORD *)&__x[8] = v13;
  if (v13)
  {
    v21 = (unint64_t *)&v13->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v105;
  if (*((_QWORD *)&v105 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  (*(void (**)(uint64_t, std::vector<char>::value_type *, std::string *))(*(_QWORD *)v8 + 24))(v8, __x, &v104);
  size = (std::__shared_weak_count *)v104.__r_.__value_.__l.__size_;
  if (v104.__r_.__value_.__l.__size_)
  {
    v26 = (unint64_t *)(v104.__r_.__value_.__l.__size_ + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v28 = (v11 << 32) | 0x80;
  v29 = *(std::__shared_weak_count **)&__x[8];
  if (*(_QWORD *)&__x[8])
  {
    v30 = (unint64_t *)(*(_QWORD *)&__x[8] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v105;
  *(_QWORD *)(v105 + 256) = &off_24D5810D8;
  *(_QWORD *)(v32 + 264) = Phase::Controller::InitializeBinauralSpatializer;
  *(_QWORD *)(v32 + 272) = &v99;
  *(double *)(v32 + 280) = a3;
  *(_QWORD *)(v32 + 288) = v28;
  *(_BYTE *)(v32 + 296) = 1;
  *(_BYTE *)(v32 + 383) = 1;
  atomic_store(1u, (unsigned __int8 *)(v32 + 40));
  if (*((_QWORD *)&v32 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 16))(*((_QWORD *)&v32 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32 + 1));
    }
  }
  if (v98)
  {
    v35 = &v98->__shared_owners_;
    do
      v36 = __ldaxr((unint64_t *)v35);
    while (__stlxr(v36 - 1, (unint64_t *)v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v38 = v100;
  v37 = (std::string::size_type)v101;
  v95 = v100;
  v96 = v101;
  v97[0] = 0;
  if (v101)
  {
    v39 = (unint64_t *)&v101->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  __x[0] = 0;
  std::vector<char>::vector(&v94, 0x20uLL, __x);
  begin = v94.__begin_;
  *(_QWORD *)v94.__begin_ = 6619138;
  *((_DWORD *)begin + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v103, "SpatializerManager-init-");
  v42 = std::string::append(&v103, "VBAP");
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v104.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  v44 = std::string::append(&v104, "-spatializer");
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  *(_QWORD *)&__x[16] = *((_QWORD *)&v44->__r_.__value_.__l + 2);
  *(_OWORD *)__x = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(__int128 *__return_ptr, uint64_t, std::vector<char>::value_type *))(*(_QWORD *)v8 + 16))(&v105, v8, __x);
  if (__x[23] < 0)
    operator delete(*(void **)__x);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  v103.__r_.__value_.__r.__words[0] = v38;
  v103.__r_.__value_.__l.__size_ = v37;
  if (v37)
  {
    v46 = (unint64_t *)(v37 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v102 = v105;
  if (*((_QWORD *)&v105 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  (*(void (**)(uint64_t, std::string *, __int128 *))(*(_QWORD *)v8 + 24))(v8, &v103, &v102);
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (std::__shared_weak_count *)v103.__r_.__value_.__l.__size_;
  if (v103.__r_.__value_.__l.__size_)
  {
    v54 = (unint64_t *)(v103.__r_.__value_.__l.__size_ + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v105;
  memset(&v104, 0, sizeof(v104));
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v104, v94.__begin_, (uint64_t)v94.__end_, v94.__end_ - v94.__begin_);
  memset(__x, 0, 24);
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(__x, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_, v104.__r_.__value_.__l.__size_ - v104.__r_.__value_.__r.__words[0]);
  *(_QWORD *)(v56 + 256) = &off_24D581128;
  *(_QWORD *)(v56 + 264) = Phase::Controller::InitializeVBAPSpatializer;
  *(_QWORD *)(v56 + 272) = v97;
  *(double *)(v56 + 280) = a3;
  *(_QWORD *)(v56 + 288) = v28;
  *(_OWORD *)(v56 + 296) = *(_OWORD *)__x;
  *(_QWORD *)(v56 + 312) = *(_QWORD *)&__x[16];
  memset(__x, 0, 24);
  *(_BYTE *)(v56 + 383) = 1;
  atomic_store(1u, (unsigned __int8 *)(v56 + 40));
  if (v104.__r_.__value_.__r.__words[0])
  {
    v104.__r_.__value_.__l.__size_ = v104.__r_.__value_.__r.__words[0];
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (*((_QWORD *)&v105 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (v94.__begin_)
  {
    v94.__end_ = v94.__begin_;
    operator delete(v94.__begin_);
  }
  v60 = v96;
  if (v96)
  {
    v61 = (unint64_t *)&v96->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v104.__r_.__value_.__r.__words[0] = 0;
  v63 = v101;
  v93[0] = v100;
  v93[1] = (uint64_t)v101;
  if (v101)
  {
    v64 = (unint64_t *)&v101->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  Phase::Controller::SetupSpatializerInitJob<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&),Phase::Controller::Spatializer::InitParameters>(v8, v93, (uint64_t)&v104, "xtc-binaural", (uint64_t)Phase::Controller::InitializeXTCSpatializer, *(uint64_t *)&a3, v28);
  if (v63)
  {
    v66 = (unint64_t *)&v63->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v68 = v101;
  v92[0] = v100;
  v92[1] = (uint64_t)v101;
  if (v101)
  {
    v69 = (unint64_t *)&v101->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  Phase::JobManager::RunJobAsync(v8, v92);
  if (v68)
  {
    v71 = (unint64_t *)&v68->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v90 = v100;
  v91 = v101;
  if (v101)
  {
    v73 = (unint64_t *)&v101->__shared_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  (*(void (**)(uint64_t, uint64_t *, double))(*(_QWORD *)v8 + 96))(v8, &v90, 0.0);
  v75 = v91;
  if (v91)
  {
    v76 = (unint64_t *)&v91->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  Phase::Controller::RegisterSpatializer(v99, a1, 1uLL);
  Phase::Controller::RegisterSpatializer(v97[0], a1, 2uLL);
  Phase::Controller::RegisterSpatializer((uint64_t)v104.__r_.__value_.__l.__data_, a1, 3uLL);
  *(_QWORD *)(a1 + 72) = 0;
  SpatializerForConfig = Phase::Controller::SpatializerManager::GetSpatializerForConfig(0, *(_DWORD *)(a1 + 40), v6);
  Phase::Controller::SpatializerManager::SetActiveSpatializer((Phase::Controller::SpatializerManager *)a1, SpatializerForConfig);
  *(_DWORD *)(a1 + 40) = 0;
  if (*(_QWORD *)(a1 + 72) == 2)
    v79 = 2;
  else
    v79 = 1;
  active = (Phase::Logger *)Phase::Controller::SpatializerManager::SetActiveSpatializer((Phase::Controller::SpatializerManager *)a1, v79);
  v81 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(active)
                                                                                      + 576)));
  if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
  {
    v82 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1, *(_QWORD *)(a1 + 80), (_QWORD *)(a1 + 80))[3];
    v85 = *(_QWORD *)(v82 + 72);
    v83 = v82 + 72;
    v84 = v85;
    if (*(char *)(v83 + 23) < 0)
      v83 = v84;
    *(_DWORD *)__x = 136315650;
    *(_QWORD *)&__x[4] = "SpatializerManager.mm";
    *(_WORD *)&__x[12] = 1024;
    *(_DWORD *)&__x[14] = 268;
    *(_WORD *)&__x[18] = 2080;
    *(_QWORD *)&__x[20] = v83;
    _os_log_impl(&dword_2164CC000, v81, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initializing default spatializer to %s", (uint8_t *)__x, 0x1Cu);
  }

  v86 = v101;
  if (v101)
  {
    v87 = (unint64_t *)&v101->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  return a1;
}

void sub_2166C1EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  void **v40;
  void *v41;
  void *v43;

  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  v43 = *v40;
  if (*v40)
  {
    *(_QWORD *)(v39 + 56) = v43;
    operator delete(v43);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::~__hash_table(v39);
  _Unwind_Resume(a1);
}

void Phase::Controller::SetupSpatializerInitJob<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&),Phase::Controller::Spatializer::InitParameters>(uint64_t a1, uint64_t *a2, uint64_t a3, const std::string::value_type *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::string v37;
  std::string v38;
  void *__p[2];
  std::string::size_type v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  std::string::basic_string[abi:ne180100]<0>(&v37, "SpatializerManager-init-");
  v14 = std::string::append(&v37, a4);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v38, "-spatializer");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v40 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)a1 + 16))(&v41, a1, __p);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  v18 = (std::__shared_weak_count *)a2[1];
  v35 = *a2;
  v36 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v33 = v41;
  v34 = v42;
  if (v42)
  {
    v21 = (unint64_t *)&v42->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 24))(a1, &v35, &v33);
  v23 = v34;
  if (v34)
  {
    v24 = (unint64_t *)&v34->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v41;
  *(_QWORD *)(v41 + 256) = &off_24D581100;
  *(_QWORD *)(v29 + 264) = a5;
  *(_QWORD *)(v29 + 272) = a3;
  *(_QWORD *)(v29 + 280) = a6;
  *(_QWORD *)(v29 + 288) = a7;
  *(_BYTE *)(v29 + 383) = 1;
  atomic_store(1u, (unsigned __int8 *)(v29 + 40));
  v30 = v42;
  if (v42)
  {
    v31 = (unint64_t *)&v42->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_2166C2298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v32 - 80);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatializerManager::SetSpatializerOutput(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t SpatializerForConfig;

  if (a3)
    Phase::Controller::SpatializerManager::SetOutputChannelLayout(a1, a3);
  *(_DWORD *)(a1 + 40) = a2;
  SpatializerForConfig = Phase::Controller::SpatializerManager::GetSpatializerForConfig(*(_QWORD *)(a1 + 72), a2, (unsigned int **)(a1 + 48));
  return Phase::Controller::SpatializerManager::SetActiveSpatializer((Phase::Controller::SpatializerManager *)a1, SpatializerForConfig) ^ 1;
}

void Phase::Controller::SpatializerManager::~SpatializerManager(Phase::Controller::SpatializerManager *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::~__hash_table((uint64_t)this);
}

uint64_t Phase::Controller::SpatializerManager::SetOutputChannelLayout(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t ActiveSpatializer;
  unint64_t v9;
  unint64_t *v10;

  v4 = (_QWORD *)(a1 + 48);
  result = Phase::ChannelLayout::AreLayoutsEqual((_QWORD *)a2, (uint64_t *)(a1 + 48));
  if ((result & 1) == 0)
  {
    if (v4 != (_QWORD *)a2)
      std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(v4, *(char **)a2, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    v9 = 2;
    v10 = &v9;
    v6 = (_QWORD *)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a1, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
    if (!Phase::ChannelLayout::AreLayoutsEqual(v6 + 3, (uint64_t *)a2)
      && (*(unsigned int (**)(_QWORD *, uint64_t))(*v6 + 32))(v6, a2)
      && *(_QWORD *)(a1 + 80) == 2
      && (v7 = *(_QWORD *)(a1 + 88)) != 0)
    {
      ActiveSpatializer = Phase::Controller::SpatializerManager::GetActiveSpatializer((Phase::Controller::SpatializerManager *)a1);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, ActiveSpatializer);
    }
    else
    {
      return Phase::Controller::SpatializerManager::SetSpatializerOutput(a1, *(unsigned int *)(a1 + 40), a2);
    }
  }
  return result;
}

uint64_t Phase::Controller::SpatializerManager::SetActiveSpatializer(Phase::Controller::SpatializerManager *this, unint64_t a2)
{
  unint64_t *v2;
  Phase::Logger *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *ActiveSpatializer;
  uint64_t v13;
  Phase::Logger *v15;
  _QWORD *i;
  NSObject *v17;
  void **v18;
  uint64_t v19;
  void *__p;
  char v21;
  uint8_t v22[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  void **v29;
  uint8_t buf[12];
  __int16 v31;
  _BYTE v32[18];
  void *v33;
  char v34;
  _QWORD v35[20];

  v35[19] = *MEMORY[0x24BDAC8D0];
  v2 = (unint64_t *)((char *)this + 80);
  if (*((_QWORD *)this + 10) == a2)
    return 0;
  v5 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(this, a2);
  if (!v5)
  {
    v15 = (Phase::Logger *)std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    for (i = (_QWORD *)*((_QWORD *)this + 2); i; i = (_QWORD *)*i)
    {
      std::ostream::operator<<();
      v15 = (Phase::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32[2], (uint64_t)", ", 2);
    }
    v17 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15)
                                                                                        + 576)));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str();
      v18 = v21 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)v22 = 136315906;
      v23 = "SpatializerManager.mm";
      v24 = 1024;
      v25 = 500;
      v26 = 2048;
      v27 = a2;
      v28 = 2080;
      v29 = v18;
      _os_log_impl(&dword_2164CC000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to switch spatializer to %llu - Spatializer map contains [%s]", v22, 0x26u);
      if (v21 < 0)
        operator delete(__p);
    }

    *(_QWORD *)buf = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    *(_QWORD *)&v32[2] = v19;
    *(_QWORD *)&v32[10] = MEMORY[0x24BEDB848] + 16;
    if (v34 < 0)
      operator delete(v33);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2199F9CD4](v35);
    return 0;
  }
  *v2 = a2;
  v6 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v5)
                                                                                     + 576)));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this, *((_QWORD *)this + 10), v2)[3];
    v10 = *(_QWORD *)(v7 + 72);
    v8 = v7 + 72;
    v9 = v10;
    if (*(char *)(v8 + 23) < 0)
      v8 = v9;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "SpatializerManager.mm";
    v31 = 1024;
    *(_DWORD *)v32 = 507;
    *(_WORD *)&v32[4] = 2080;
    *(_QWORD *)&v32[6] = v8;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Switching spatializer to %s", buf, 0x1Cu);
  }

  v11 = CAGetDeviceOrientation();
  Phase::Controller::SpatializerManager::SetDeviceOrientation(this, v11);
  ActiveSpatializer = (_QWORD *)Phase::Controller::SpatializerManager::GetActiveSpatializer(this);
  if (!Phase::ChannelLayout::AreLayoutsEqual(ActiveSpatializer + 3, (uint64_t *)this + 6))
    (*(void (**)(_QWORD *, char *))(*ActiveSpatializer + 32))(ActiveSpatializer, (char *)this + 48);
  v13 = *((_QWORD *)this + 11);
  if (v13)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 24))(v13, ActiveSpatializer);
  return 1;
}

void sub_2166C2778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatializerManager::GetSpatializerForConfig(uint64_t result, int a2, unsigned int **a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  __int32 v8;
  NSObject *v9;
  void **v10;
  uint8x8_t v11;
  NSObject *v12;
  void **v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  void **v21;
  __int16 v22;
  int v23;
  __int16 v24;
  void **v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (result != 2)
  {
    if (!a2)
      return 1;
    v5 = result;
    if (a2 != 2)
    {
      if (a2 == 1)
        return 3;
      v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result)
                                                                                         + 576)));
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        Phase::ChannelLayout::GetStringDescription(a3);
        if (v15 >= 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        *(_DWORD *)buf = 136316162;
        v17 = "SpatializerManager.mm";
        v18 = 1024;
        v19 = 473;
        v20 = 2048;
        v21 = (void **)v5;
        v22 = 1024;
        v23 = a2;
        v24 = 2080;
        v25 = v10;
        _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid spatializer configuration: mode %lu, output type %i, channel layout %s", buf, 0x2Cu);
        if (v15 < 0)
          operator delete(__p[0]);
      }

      return 1;
    }
    if (result == 1)
    {
      v6 = *a3;
      v7 = **a3;
      if (v7 == 0x10000)
      {
        v11 = (uint8x8_t)vcnt_s8((int8x8_t)v6[1]);
        v11.i16[0] = vaddlv_u8(v11);
        v8 = v11.i32[0];
      }
      else if (v7)
      {
        v8 = (unsigned __int16)**a3;
      }
      else
      {
        v8 = v6[2];
      }
      if (v8 == 2)
        return 1;
      v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)1)
                                                                                          + 576)));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        Phase::ChannelLayout::GetStringDescription(a3);
        v13 = v15 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        v17 = "SpatializerManager.mm";
        v18 = 1024;
        v19 = 459;
        v20 = 2080;
        v21 = v13;
        _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Ignoring spatialization mode (always binaural) because the output channel layout does not support it: %s", buf, 0x1Cu);
        if (v15 < 0)
          operator delete(__p[0]);
      }

    }
    return 2;
  }
  return result;
}

void sub_2166C2A10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatializerManager::GetActiveSpatializer(Phase::Controller::SpatializerManager *this)
{
  unint64_t v1;
  _QWORD *v2;
  NSObject *v4;
  std::runtime_error *exception;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 10);
  if (!v1)
  {
    v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 576));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315394;
      v7 = "SpatializerManager.mm";
      v8 = 1024;
      v9 = 483;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: kSpatializer_None != mActiveSpatializer is false.", (uint8_t *)&v6, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "PRECONDITION: kSpatializer_None != mActiveSpatializer is false.");
  }
  v2 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(this, v1);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2[3];
}

void sub_2166C2B38(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatializerManager::SetHeadphoneHRIR(Phase::Controller::SpatializerManager *this, NSURL *a2)
{
  NSURL *v3;
  uint64_t v4;
  float v5;
  _BOOL4 v6;
  id v7;
  const UInt8 *v8;
  CFIndex v9;
  const void *v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ActiveSpatializer;
  uint64_t v22;
  std::runtime_error *exception;
  unint64_t v25;
  CFTypeRef v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  CFTypeRef v31;
  __int128 v32;
  CFTypeRef v33;
  _OWORD v34[2];
  CFTypeRef v35;
  uint64_t v36;
  int v37;
  id v38;
  CFTypeRef cf;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  CFTypeRef v44;
  __int128 v45;
  CFTypeRef v46;
  _OWORD v47[2];
  CFTypeRef v48;
  uint64_t v49;
  int v50;
  _QWORD *v51[2];
  unsigned __int8 v52;

  v3 = a2;
  v51[0] = (_QWORD *)1;
  cf = v51;
  v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)this, (unint64_t *)v51, (uint64_t)&std::piecewise_construct, (_QWORD **)&cf)[3];
  IR::getPresetDataAttributes();
  HIDWORD(v40) = 0;
  v5 = *(double *)(v4 + 8);
  *(float *)&v40 = v5;
  if (!v3)
  {
    v7 = 0;
LABEL_16:
    v10 = cf;
    v12 = *(_QWORD *)(v4 + 8);
    v13 = *(_QWORD *)(v4 + 16);
    if (!cf)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (!-[NSURL isFileURL](v3, "isFileURL"))
  {
    v7 = 0;
    goto LABEL_40;
  }
  v38 = 0;
  v6 = -[NSURL checkResourceIsReachableAndReturnError:](v3, "checkResourceIsReachableAndReturnError:", &v38);
  v7 = v38;
  if (!v6)
  {
LABEL_40:
    v22 = 2;
    goto LABEL_41;
  }
  std::string::basic_string[abi:ne180100]<0>(v51, (char *)-[NSURL fileSystemRepresentation](objc_retainAutorelease(v3), "fileSystemRepresentation"));
  if ((v52 & 0x80u) == 0)
    v8 = (const UInt8 *)v51;
  else
    v8 = (const UInt8 *)v51[0];
  if ((v52 & 0x80u) == 0)
    v9 = v52;
  else
    v9 = (CFIndex)v51[1];
  v10 = CFURLCreateWithBytes(0, v8, v9, 0, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if ((char)v52 < 0)
    operator delete(v51[0]);
  v11 = cf;
  cf = v10;
  if (v11)
  {
    CFRelease(v11);
    goto LABEL_16;
  }
  v12 = *(_QWORD *)(v4 + 8);
  v13 = *(_QWORD *)(v4 + 16);
LABEL_17:
  CFRetain(v10);
LABEL_18:
  v26 = v10;
  v27 = v40;
  v28 = v41;
  v29 = v42;
  v30 = v43;
  v14 = v44;
  if (v44)
    CFRetain(v44);
  v31 = v14;
  v32 = v45;
  v15 = v46;
  if (v46)
    CFRetain(v46);
  v33 = v15;
  v34[0] = v47[0];
  *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)((char *)v47 + 9);
  v16 = v48;
  if (v48)
    CFRetain(v48);
  v35 = v16;
  v36 = v49;
  v37 = v50;
  v17 = Phase::Controller::Spatializer::Create<Phase::Controller::BinauralSpatializer,Phase::Controller::Spatializer::InitParameters,IR::IRDataAttributes,BOOL>(v12, v13, (uint64_t)&v26, 0);
  if (v35)
    CFRelease(v35);
  if (v33)
    CFRelease(v33);
  if (v31)
    CFRelease(v31);
  if (v26)
    CFRelease(v26);
  if (!v17)
    goto LABEL_40;
  v25 = 1;
  v51[0] = &v25;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)this, &v25, (uint64_t)&std::piecewise_construct, v51);
  v19 = v18[3];
  v18[3] = v17;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (*((_QWORD *)this + 10) == 1)
  {
    v20 = *((_QWORD *)this + 11);
    if (v20)
    {
      ActiveSpatializer = Phase::Controller::SpatializerManager::GetActiveSpatializer(this);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 24))(v20, ActiveSpatializer);
    }
  }
  v22 = 0;
LABEL_41:
  if (v48)
    CFRelease(v48);
  if (v46)
    CFRelease(v46);
  if (v44)
    CFRelease(v44);
  if (cf)
    CFRelease(cf);

  return v22;
}

void sub_2166C2E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;
  void *v31;
  uint64_t v32;

  if (*(char *)(v32 - 65) < 0)
    operator delete(*(void **)(v32 - 88));

  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&a30);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatializerManager::SetDeviceOrientation(Phase::Controller::SpatializerManager *a1, uint64_t a2)
{
  uint64_t ActiveSpatializer;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  ActiveSpatializer = Phase::Controller::SpatializerManager::GetActiveSpatializer(a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)ActiveSpatializer + 24))(ActiveSpatializer, a2);
  if ((_DWORD)result)
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v7 = Phase::Controller::SpatializerManager::GetActiveSpatializer(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, v7);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t Phase::Controller::SpatializerManager::Update(Phase::Controller::SpatializerManager *this, double a2)
{
  Phase::Controller::Spatializer *ActiveSpatializer;
  uint64_t result;

  ActiveSpatializer = (Phase::Controller::Spatializer *)Phase::Controller::SpatializerManager::GetActiveSpatializer(this);
  Phase::Controller::Spatializer::Update(ActiveSpatializer, a2);
  result = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)ActiveSpatializer + 6) + 104))(*((_QWORD **)ActiveSpatializer
                                                                                                + 6));
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, Phase::Controller::Spatializer *))(**((_QWORD **)this + 11) + 24))(*((_QWORD *)this + 11), ActiveSpatializer);
  return result;
}

_QWORD *std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<char>::__vallocate[abi:ne180100](v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_2166C32F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  uint64_t v3;

  if (a1)
  {
    v3 = __p[3];
    __p[3] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[3];
      v2[3] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void Phase::Command<128>::Invoker<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&,BOOL),void,Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters,BOOL>::~Invoker()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Command<128>::Invoker<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&,BOOL),void,Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters,BOOL>::Call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), a1 + 24, *(unsigned __int8 *)(a1 + 40));
}

void Phase::Command<128>::Invoker<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&),void,Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters>::~Invoker()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Command<128>::Invoker<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&),void,Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters>::Call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), a1 + 24);
}

_QWORD *Phase::Command<128>::Invoker<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&,CA::ChannelLayout const&),void,Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters,CA::ChannelLayout>::~Invoker(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D581128;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void Phase::Command<128>::Invoker<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&,CA::ChannelLayout const&),void,Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters,CA::ChannelLayout>::~Invoker(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D581128;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Command<128>::Invoker<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&,CA::ChannelLayout const&),void,Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters,CA::ChannelLayout>::Call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), a1 + 24, a1 + 40);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_2166C36DC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

const char *Phase::SpatialModeler::SystemErrorCategory::name(Phase::SpatialModeler::SystemErrorCategory *this)
{
  return "Phase Spatial Model Scheduler Error";
}

_QWORD *Phase::SpatialModeler::SystemErrorCategory::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_24D581188[a1 - 1]);
}

uint64_t Phase::SpatialModeler::ModelerErrorMessage@<X0>(int a1@<W0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  size_t v5;
  uint64_t result;
  const void *v7;
  char *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  const void *v12;
  size_t v13;
  const void *v14;
  size_t v15;
  const void *v16;
  size_t v17;
  const void *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  size_t v22;
  const void *v23;

  v4 = (char *)a3;
  switch(a1)
  {
    case 2:
      if (*((char *)a2 + 23) >= 0)
        v5 = *((unsigned __int8 *)a2 + 23);
      else
        v5 = (size_t)a2[1];
      result = std::string::basic_string[abi:ne180100](a3, v5 + 47);
      if (v4[23] < 0)
        v4 = *(char **)v4;
      if (v5)
      {
        if (*((char *)a2 + 23) >= 0)
          v7 = a2;
        else
          v7 = *a2;
        result = (uint64_t)memmove(v4, v7, v5);
      }
      qmemcpy(&v4[v5], "Modeler Error: Query has an invalid Query Index", 47);
      v8 = &v4[v5 + 47];
      break;
    case 3:
      if (*((char *)a2 + 23) >= 0)
        v11 = *((unsigned __int8 *)a2 + 23);
      else
        v11 = (size_t)a2[1];
      result = std::string::basic_string[abi:ne180100](a3, v11 + 96);
      if (v4[23] < 0)
        v4 = *(char **)v4;
      if (v11)
      {
        if (*((char *)a2 + 23) >= 0)
          v12 = a2;
        else
          v12 = *a2;
        result = (uint64_t)memmove(v4, v12, v11);
      }
      qmemcpy(&v4[v11], "Modeler Error: Query has an invalid QueryInput. It either doesn't exist, or it's the wrong type.", 96);
      v8 = &v4[v11 + 96];
      break;
    case 4:
      if (*((char *)a2 + 23) >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = (size_t)a2[1];
      result = std::string::basic_string[abi:ne180100](a3, v13 + 97);
      if (v4[23] < 0)
        v4 = *(char **)v4;
      if (v13)
      {
        if (*((char *)a2 + 23) >= 0)
          v14 = a2;
        else
          v14 = *a2;
        result = (uint64_t)memmove(v4, v14, v13);
      }
      qmemcpy(&v4[v13], "Modeler Error: Query has an invalid QueryOutput. It either doesn't exist, or it's the wrong type.", 97);
      v8 = &v4[v13 + 97];
      break;
    case 5:
      if (*((char *)a2 + 23) >= 0)
        v15 = *((unsigned __int8 *)a2 + 23);
      else
        v15 = (size_t)a2[1];
      result = std::string::basic_string[abi:ne180100](a3, v15 + 58);
      if (v4[23] < 0)
        v4 = *(char **)v4;
      if (v15)
      {
        if (*((char *)a2 + 23) >= 0)
          v16 = a2;
        else
          v16 = *a2;
        result = (uint64_t)memmove(v4, v16, v15);
      }
      qmemcpy(&v4[v15], "Modeler Error: Query has an invalid Geometry System State.", 58);
      v8 = &v4[v15 + 58];
      break;
    case 6:
      if (*((char *)a2 + 23) >= 0)
        v17 = *((unsigned __int8 *)a2 + 23);
      else
        v17 = (size_t)a2[1];
      result = std::string::basic_string[abi:ne180100](a3, v17 + 137);
      if (v4[23] < 0)
        v4 = *(char **)v4;
      if (v17)
      {
        if (*((char *)a2 + 23) >= 0)
          v18 = a2;
        else
          v18 = *a2;
        result = (uint64_t)memmove(v4, v18, v17);
      }
      v19 = &v4[v17];
      qmemcpy(&v4[v17 + 32], "lid Source. It either doesn't exist, or we couldn't find the Source Entity with the Source Entity Handle.", 105);
      v21 = *(_OWORD *)"Modeler Error: Query has an invalid Source. It either doesn't exist, or we couldn't find the Sour"
                       "ce Entity with the Source Entity Handle.";
      v20 = *(_OWORD *)"uery has an invalid Source. It either doesn't exist, or we couldn't find the Source Entity with the Source Entity Handle.";
      v8 = &v4[v17 + 137];
      goto LABEL_79;
    case 7:
      if (*((char *)a2 + 23) >= 0)
        v22 = *((unsigned __int8 *)a2 + 23);
      else
        v22 = (size_t)a2[1];
      result = std::string::basic_string[abi:ne180100](a3, v22 + 143);
      if (v4[23] < 0)
        v4 = *(char **)v4;
      if (v22)
      {
        if (*((char *)a2 + 23) >= 0)
          v23 = a2;
        else
          v23 = *a2;
        result = (uint64_t)memmove(v4, v23, v22);
      }
      v19 = &v4[v22];
      qmemcpy(&v4[v22 + 32], "lid Listener. It either doesn't exist, or we couldn't find the Listener Entity with the Listener Entity Handle.", 111);
      v21 = *(_OWORD *)"Modeler Error: Query has an invalid Listener. It either doesn't exist, or we couldn't find the Li"
                       "stener Entity with the Listener Entity Handle.";
      v20 = *(_OWORD *)"uery has an invalid Listener. It either doesn't exist, or we couldn't find the Listener Entity with the Listener Entity Handle.";
      v8 = &v4[v22 + 143];
LABEL_79:
      *(_OWORD *)v19 = v21;
      *((_OWORD *)v19 + 1) = v20;
      break;
    default:
      if (*((char *)a2 + 23) >= 0)
        v9 = *((unsigned __int8 *)a2 + 23);
      else
        v9 = (size_t)a2[1];
      result = std::string::basic_string[abi:ne180100](a3, v9 + 35);
      if (v4[23] < 0)
        v4 = *(char **)v4;
      if (v9)
      {
        if (*((char *)a2 + 23) >= 0)
          v10 = a2;
        else
          v10 = *a2;
        result = (uint64_t)memmove(v4, v10, v9);
      }
      qmemcpy(&v4[v9], "Modeler Error: <unrecognized error>", 35);
      v8 = &v4[v9 + 35];
      break;
  }
  *v8 = 0;
  return result;
}

void Phase::SpatialModeler::SystemErrorCategory::~SystemErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::SpatialModeler::GetOptionalPropertyDescriptions(_QWORD *a1@<X8>)
{
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  __int128 v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v12[2];
  char v13;
  char *v14;
  char *v15;
  char v16[24];
  int v17;
  char v18;
  uint64_t v19;
  _QWORD v20[2];
  char *v21;
  __int128 v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28[24];
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34[24];
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40[24];
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46[24];
  int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52[24];
  int v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v16[23] = 13;
  strcpy(v16, "DistanceModel");
  v17 = 1;
  v18 = 1;
  v20[0] = 0;
  v20[1] = 0;
  v19 = 0;
  v21 = (char *)operator new(0x20uLL);
  v22 = xmmword_21673AE40;
  strcpy(v21, "ListenerDirectivityModel");
  v23 = 2;
  v24 = 1;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  strcpy(v28, "SourceDirectivityModel");
  v28[23] = 22;
  v29 = 3;
  v30 = 1;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34[23] = 21;
  strcpy(v34, "ListenerDopplerFactor");
  v35 = 4;
  v36 = 0;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v40[23] = 19;
  strcpy(v40, "SourceDopplerFactor");
  v41 = 5;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v46[23] = 10;
  v45 = 0;
  strcpy(v46, "UpdateRate");
  v47 = 6;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v52[23] = 14;
  v51 = 0;
  strcpy(v52, "ResponseLength");
  v53 = 7;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = (char *)operator new(0x188uLL);
  v4 = 0;
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 392;
  v14 = v3;
  v15 = v3;
  v11 = a1 + 2;
  v12[0] = &v14;
  v12[1] = &v15;
  v5 = v3;
  v13 = 0;
  do
  {
    v6 = &v16[v4 * 8];
    if (v16[v4 * 8 + 23] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v5, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      v8 = v15;
    }
    else
    {
      v7 = *(_OWORD *)v6;
      *((_QWORD *)v5 + 2) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v5 = v7;
      v8 = v5;
    }
    v9 = *(_OWORD *)&v16[v4 * 8 + 24];
    *(_OWORD *)(v5 + 40) = *(_OWORD *)&v20[v4];
    *(_OWORD *)(v5 + 24) = v9;
    v5 = v8 + 56;
    v15 = v8 + 56;
    v4 += 7;
  }
  while (v4 != 49);
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::OptionalPropertyDescription>,Phase::SpatialModeler::OptionalPropertyDescription*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v11);
  a1[1] = v5;
  v10 = 49;
  do
  {
    if (SHIBYTE(v12[v10]) < 0)
      operator delete(*(void **)&v16[v10 * 8 - 56]);
    v10 -= 7;
  }
  while (v10 * 8);
}

void sub_2166C3E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v16;

  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__destroy_vector::operator()[abi:ne180100](&a9);
  v16 = 392;
  while (1)
  {
    if (*(&a15 + v16) < 0)
      operator delete(*(void **)((char *)&a10 + v16));
    v16 -= 56;
    if (!v16)
      _Unwind_Resume(a1);
  }
}

void Phase::SpatialModeler::PriorityQueue::~PriorityQueue(Phase::SpatialModeler::PriorityQueue *this)
{
  Phase::SpatialModeler::PriorityQueue *v2;
  uint64_t v3;
  Phase::SpatialModeler::PriorityQueue *v4;
  uint64_t v5;
  Phase::SpatialModeler::PriorityQueue *v6;
  uint64_t v7;
  Phase::SpatialModeler::PriorityQueue *v8;
  uint64_t v9;

  Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::ClearCommands((unint64_t *)this + 27);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)this + 5);
  v2 = (Phase::SpatialModeler::PriorityQueue *)*((_QWORD *)this + 26);
  if (v2 == (Phase::SpatialModeler::PriorityQueue *)((char *)this + 184))
  {
    v3 = 4;
    v2 = (Phase::SpatialModeler::PriorityQueue *)((char *)this + 184);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (Phase::SpatialModeler::PriorityQueue *)*((_QWORD *)this + 22);
  if (v4 == (Phase::SpatialModeler::PriorityQueue *)((char *)this + 152))
  {
    v5 = 4;
    v4 = (Phase::SpatialModeler::PriorityQueue *)((char *)this + 152);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_11:
  v6 = (Phase::SpatialModeler::PriorityQueue *)*((_QWORD *)this + 18);
  if (v6 == (Phase::SpatialModeler::PriorityQueue *)((char *)this + 120))
  {
    v7 = 4;
    v6 = (Phase::SpatialModeler::PriorityQueue *)((char *)this + 120);
  }
  else
  {
    if (!v6)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_16:
  v8 = (Phase::SpatialModeler::PriorityQueue *)*((_QWORD *)this + 14);
  if (v8 == (Phase::SpatialModeler::PriorityQueue *)((char *)this + 88))
  {
    v9 = 4;
    v8 = (Phase::SpatialModeler::PriorityQueue *)((char *)this + 88);
    goto LABEL_20;
  }
  if (v8)
  {
    v9 = 5;
LABEL_20:
    (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 40);
}

unint64_t Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::Commit(unint64_t *a1, _QWORD *a2)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;

  result = operator new();
  *(_DWORD *)(result + 72) = 0;
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 80) = *a2;
  *(_QWORD *)(result + 88) = 0;
  *a2 = 0;
  v5 = atomic_load(a1);
  *(_QWORD *)(result + 88) = v5;
  while (1)
  {
    v6 = __ldaxr(a1);
    if (v6 != v5)
      break;
    if (!__stlxr(result, a1))
      return result;
  }
  __clrex();
  do
  {
    *(_QWORD *)(result + 88) = v6;
    while (1)
    {
      v7 = __ldaxr(a1);
      if (v7 != v6)
        break;
      if (!__stlxr(result, a1))
      {
        v8 = 1;
        goto LABEL_11;
      }
    }
    v8 = 0;
    __clrex();
LABEL_11:
    v6 = v7;
  }
  while (!v8);
  return result;
}

unint64_t Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::AddCommand<Phase::SpatialModeler::PriorityQueueEntry>(unint64_t *a1, int a2, _OWORD *a3)
{
  unint64_t result;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;

  result = operator new();
  v7 = a3[1];
  *(_OWORD *)(result + 8) = *a3;
  *(_OWORD *)(result + 24) = v7;
  v8 = a3[3];
  *(_OWORD *)(result + 40) = a3[2];
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_DWORD *)result = a2;
  *(_OWORD *)(result + 56) = v8;
  *(_DWORD *)(result + 72) = 1;
  v9 = atomic_load(a1);
  *(_QWORD *)(result + 88) = v9;
  while (1)
  {
    v10 = __ldaxr(a1);
    if (v10 != v9)
      break;
    if (!__stlxr(result, a1))
      return result;
  }
  __clrex();
  do
  {
    *(_QWORD *)(result + 88) = v10;
    while (1)
    {
      v11 = __ldaxr(a1);
      if (v11 != v10)
        break;
      if (!__stlxr(result, a1))
      {
        v12 = 1;
        goto LABEL_11;
      }
    }
    v12 = 0;
    __clrex();
LABEL_11:
    v10 = v11;
  }
  while (!v12);
  return result;
}

unint64_t Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::AddCommand<Phase::UniqueObjectId>(unint64_t *a1, int a2, _OWORD *a3)
{
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;

  result = operator new();
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_DWORD *)result = a2;
  *(_OWORD *)(result + 8) = *a3;
  *(_DWORD *)(result + 72) = 2;
  v7 = atomic_load(a1);
  *(_QWORD *)(result + 88) = v7;
  while (1)
  {
    v8 = __ldaxr(a1);
    if (v8 != v7)
      break;
    if (!__stlxr(result, a1))
      return result;
  }
  __clrex();
  do
  {
    *(_QWORD *)(result + 88) = v8;
    while (1)
    {
      v9 = __ldaxr(a1);
      if (v9 != v8)
        break;
      if (!__stlxr(result, a1))
      {
        v10 = 1;
        goto LABEL_11;
      }
    }
    v10 = 0;
    __clrex();
LABEL_11:
    v8 = v9;
  }
  while (!v10);
  return result;
}

_QWORD *Phase::SpatialModeler::PriorityQueue::ClearEntries(Phase::SpatialModeler::PriorityQueue *this, int a2)
{
  _QWORD *i;
  uint64_t v4;

  if (a2)
  {
    if (*((_QWORD *)this + 22))
    {
      for (i = (_QWORD *)*((_QWORD *)this + 7); i; i = (_QWORD *)*i)
      {
        v4 = *((_QWORD *)this + 22);
        if (!v4)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 48))(v4, i + 4);
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)this + 5);
}

unint64_t *Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::ClearCommands(unint64_t *result)
{
  unint64_t v1;
  unint64_t v2;

  do
    v1 = __ldaxr(result);
  while (__stlxr(0, result));
  if (v1)
  {
    do
    {
      v2 = *(_QWORD *)(v1 + 88);
      Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear((_QWORD *)(v1 + 80));
      result = (unint64_t *)MEMORY[0x2199F9D70](v1, 0x1020C40994B1BD2);
      v1 = v2;
    }
    while (v2);
  }
  return result;
}

uint64_t Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::ExecuteCommands(unint64_t *a1)
{
  unsigned int *v2;
  uint64_t i;
  uint64_t result;
  _OWORD v5[2];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  do
    v2 = (unsigned int *)__ldaxr(a1);
  while (__stlxr(0, a1));
  Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::SortCommandList((uint64_t)a1, v2, (uint64_t)v5);
  if (*(_QWORD *)&v5[0])
    std::terminate();
  for (i = 8; i != 40; i += 8)
    result = (*(uint64_t (**)(unint64_t, _QWORD))(a1[2] + i))(a1[1], *(_QWORD *)((char *)v5 + i));
  return result;
}

uint64_t Phase::SpatialModeler::PriorityQueue::ExecuteAdd(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __int128 *v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  _QWORD *v17;
  _QWORD *i;
  unint64_t v19;
  _QWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  int8x8_t prime;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v48 = result;
  if (a2)
  {
    v3 = a2;
    v4 = (_QWORD *)(result + 40);
    v47 = (_QWORD *)(result + 56);
    while (1)
    {
      v5 = v3;
      v3 = *(_QWORD *)(v3 + 88);
      if (*(_DWORD *)(v5 + 72) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v6 = (__int128 *)(v5 + 8);
      v7 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v4, (_QWORD *)(v5 + 8));
      *(_QWORD *)(v5 + 64) = 0;
      if (!v7)
        break;
      *(_OWORD *)(v5 + 32) = *(_OWORD *)(v7 + 7);
      *(_QWORD *)(v5 + 48) = v7[9];
      *(_BYTE *)(v5 + 56) = *((_BYTE *)v7 + 80);
      v8 = *v6;
      v9 = *(_OWORD *)(v5 + 24);
      v10 = *(_OWORD *)(v5 + 56);
      *((_OWORD *)v7 + 4) = *(_OWORD *)(v5 + 40);
      *((_OWORD *)v7 + 5) = v10;
      *((_OWORD *)v7 + 2) = v8;
      *((_OWORD *)v7 + 3) = v9;
LABEL_84:
      Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear((_QWORD *)(v5 + 80));
      result = MEMORY[0x2199F9D70](v5, 0x1020C40994B1BD2);
      if (!v3)
        return result;
    }
    v11 = 0;
    v12 = *(_OWORD *)(v5 + 24);
    v49 = *v6;
    v50 = v49;
    v51 = v12;
    v13 = *(_OWORD *)(v5 + 56);
    v52 = *(_OWORD *)(v5 + 40);
    v53 = v13;
    v14 = 0xCBF29CE484222325;
    do
      v14 = 0x100000001B3 * (v14 ^ *((char *)&v49 + v11++));
    while (v11 != 16);
    v15 = *(_QWORD *)(v48 + 48);
    if (v15)
    {
      v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        v2 = v14;
        if (v14 >= v15)
          v2 = v14 % v15;
      }
      else
      {
        v2 = (v15 - 1) & v14;
      }
      v17 = *(_QWORD **)(*v4 + 8 * v2);
      if (v17)
      {
        for (i = (_QWORD *)*v17; i; i = (_QWORD *)*i)
        {
          v19 = i[1];
          if (v19 == v14)
          {
            if (i[2] == (_QWORD)v49 && i[3] == *((_QWORD *)&v49 + 1))
              goto LABEL_84;
          }
          else
          {
            if (v16.u32[0] > 1uLL)
            {
              if (v19 >= v15)
                v19 %= v15;
            }
            else
            {
              v19 &= v15 - 1;
            }
            if (v19 != v2)
              break;
          }
        }
      }
    }
    v21 = operator new(0x60uLL);
    *v21 = 0;
    v21[1] = v14;
    v22 = v50;
    v23 = v51;
    *((_OWORD *)v21 + 1) = v49;
    *((_OWORD *)v21 + 2) = v22;
    v24 = v52;
    v25 = v53;
    *((_OWORD *)v21 + 3) = v23;
    *((_OWORD *)v21 + 4) = v24;
    *((_OWORD *)v21 + 5) = v25;
    v26 = (float)(unint64_t)(*(_QWORD *)(v48 + 64) + 1);
    v27 = *(float *)(v48 + 72);
    if (v15 && (float)(v27 * (float)v15) >= v26)
    {
LABEL_74:
      v43 = (_QWORD *)*v4;
      v44 = *(_QWORD **)(*v4 + 8 * v2);
      if (v44)
      {
        *v21 = *v44;
      }
      else
      {
        *v21 = *v47;
        *v47 = v21;
        v43[v2] = v47;
        if (!*v21)
        {
LABEL_83:
          ++*(_QWORD *)(v48 + 64);
          goto LABEL_84;
        }
        v45 = *(_QWORD *)(*v21 + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v45 >= v15)
            v45 %= v15;
        }
        else
        {
          v45 &= v15 - 1;
        }
        v44 = (_QWORD *)(*v4 + 8 * v45);
      }
      *v44 = v21;
      goto LABEL_83;
    }
    v28 = (v15 & (v15 - 1)) != 0;
    if (v15 < 3)
      v28 = 1;
    v29 = v28 | (2 * v15);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = (int8x8_t)v30;
    else
      prime = (int8x8_t)v29;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v15 = *(_QWORD *)(v48 + 48);
    }
    if (*(_QWORD *)&prime > v15)
      goto LABEL_40;
    if (*(_QWORD *)&prime < v15)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(v48 + 64) / *(float *)(v48 + 72));
      if (v15 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (*(_QWORD *)&prime <= v38)
        prime = (int8x8_t)v38;
      if (*(_QWORD *)&prime >= v15)
      {
        v15 = *(_QWORD *)(v48 + 48);
      }
      else
      {
        if (prime)
        {
LABEL_40:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v32 = operator new(8 * *(_QWORD *)&prime);
          v33 = (_QWORD *)*v4;
          *v4 = v32;
          if (v33)
            operator delete(v33);
          v34 = 0;
          *(int8x8_t *)(v48 + 48) = prime;
          do
            *(_QWORD *)(*v4 + 8 * v34++) = 0;
          while (*(_QWORD *)&prime != v34);
          v35 = (_QWORD *)*v47;
          if (*v47)
          {
            v36 = v35[1];
            v37 = (uint8x8_t)vcnt_s8(prime);
            v37.i16[0] = vaddlv_u8(v37);
            if (v37.u32[0] > 1uLL)
            {
              if (v36 >= *(_QWORD *)&prime)
                v36 %= *(_QWORD *)&prime;
            }
            else
            {
              v36 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*v4 + 8 * v36) = v47;
            v41 = (_QWORD *)*v35;
            if (*v35)
            {
              do
              {
                v42 = v41[1];
                if (v37.u32[0] > 1uLL)
                {
                  if (v42 >= *(_QWORD *)&prime)
                    v42 %= *(_QWORD *)&prime;
                }
                else
                {
                  v42 &= *(_QWORD *)&prime - 1;
                }
                if (v42 != v36)
                {
                  if (!*(_QWORD *)(*v4 + 8 * v42))
                  {
                    *(_QWORD *)(*v4 + 8 * v42) = v35;
                    goto LABEL_65;
                  }
                  *v35 = *v41;
                  *v41 = **(_QWORD **)(*v4 + 8 * v42);
                  **(_QWORD **)(*v4 + 8 * v42) = v41;
                  v41 = v35;
                }
                v42 = v36;
LABEL_65:
                v35 = v41;
                v41 = (_QWORD *)*v41;
                v36 = v42;
              }
              while (v41);
            }
          }
          v15 = (unint64_t)prime;
          goto LABEL_69;
        }
        v46 = (_QWORD *)*v4;
        *v4 = 0;
        if (v46)
          operator delete(v46);
        v15 = 0;
        *(_QWORD *)(v48 + 48) = 0;
      }
    }
LABEL_69:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v2 = v14 % v15;
      else
        v2 = v14;
    }
    else
    {
      v2 = (v15 - 1) & v14;
    }
    goto LABEL_74;
  }
  return result;
}

uint64_t Phase::SpatialModeler::PriorityQueue::ExecuteRemove(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    v4 = (_QWORD *)(result + 40);
    do
    {
      v5 = v2;
      v2 = *(_QWORD *)(v2 + 88);
      if (*(_DWORD *)(v5 + 72) != 2)
        std::__throw_bad_variant_access[abi:ne180100]();
      v6 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v4, (_QWORD *)(v5 + 8));
      if (v6)
      {
        v7 = *(_QWORD *)(v3 + 176);
        if (v7)
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(v7, v6 + 4);
        std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(v4, v6);
      }
      Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear((_QWORD *)(v5 + 80));
      result = MEMORY[0x2199F9D70](v5, 0x1020C40994B1BD2);
    }
    while (v2);
  }
  return result;
}

uint64_t Phase::SpatialModeler::PriorityQueue::ExecuteUpdateClusterIndices(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  if (a2)
  {
    v2 = a2;
    v3 = (_QWORD *)(result + 40);
    do
    {
      v4 = v2;
      v2 = *(_QWORD *)(v2 + 88);
      if (*(_DWORD *)(v4 + 72) != 3)
        std::__throw_bad_variant_access[abi:ne180100]();
      v5 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v3, (_QWORD *)(v4 + 8));
      if (v5)
      {
        *(_OWORD *)(v5 + 7) = *(_OWORD *)(v4 + 24);
        v5[9] = *(_QWORD *)(v4 + 40);
      }
      Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear((_QWORD *)(v4 + 80));
      result = MEMORY[0x2199F9D70](v4, 0x1020C40994B1BD2);
    }
    while (v2);
  }
  return result;
}

uint64_t Phase::SpatialModeler::PriorityQueue::ExecuteUpdateGlobals(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(_QWORD *)(v2 + 88);
      if (*(_DWORD *)(v2 + 72) != 4)
        std::__throw_bad_variant_access[abi:ne180100]();
      Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear((_QWORD *)(v2 + 80));
      result = MEMORY[0x2199F9D70](v2, 0x1020C40994B1BD2);
      v2 = v3;
    }
    while (v3);
  }
  return result;
}

uint64_t Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::SortCommandList(uint64_t result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  _QWORD *v8;

  if (a2)
  {
    v4 = a2;
    v5 = result;
    do
    {
      while (1)
      {
        v6 = v4;
        v4 = (unsigned int *)*((_QWORD *)v4 + 11);
        v7 = *v6;
        if ((_DWORD)v7)
          break;
        Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::SortCommandList(v5, *((_QWORD *)v6 + 10), a3);
        *((_QWORD *)v6 + 10) = 0;
        v8 = v6 + 20;
LABEL_9:
        Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(v8);
        result = MEMORY[0x2199F9D70](v6, 0x1020C40994B1BD2);
        if (!v4)
          return result;
      }
      if (v7 > 4)
      {
        v8 = v6 + 20;
        goto LABEL_9;
      }
      *((_QWORD *)v6 + 11) = *(_QWORD *)(a3 + 8 * v7);
      *(_QWORD *)(a3 + 8 * v7) = v6;
    }
    while (v4);
  }
  return result;
}

BOOL Phase::InitInPlace<Phase::SpatialModeler::SubmixListenerInput<float>>(uint64_t a1)
{
  return Phase::SpatialModeler::SubmixListenerInput<float>::SubmixListenerInput(a1, 1) != 0;
}

uint64_t Phase::InitInPlace<Phase::SpatialModeler::RenderGroupInput<float>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = 0;
  v7 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0x200000002;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 244) = 1065353216;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 228) = 1065353216;
  *(_QWORD *)(a1 + 236) = 0;
  do
  {
    v3 = a1 + v2;
    *(_DWORD *)(v3 + 248) = 0;
    *(_QWORD *)(v3 + 256) = 0;
    v2 += 16;
  }
  while (v2 != 128);
  *(_QWORD *)(a1 + 376) = 0;
  v5 = 0;
  v6 = 0;
  Phase::Subbands<float>::Subbands(a1 + 384, &v5, 3);
  *(_BYTE *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_DWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  return 1;
}

uint64_t Phase::InitInPlace<Phase::SpatialModeler::ClusterSetInput<float>>(uint64_t a1)
{
  *(_QWORD *)a1 = 0x200000003;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  return 1;
}

uint64_t Phase::InitInPlace<Phase::SpatialModeler::StringInput>(uint64_t a1)
{
  *(_QWORD *)a1 = 0x200000004;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return 1;
}

uint64_t Phase::DestroyInPlace<Phase::SpatialModeler::SubmixListenerInput<float>>()
{
  return 1;
}

uint64_t Phase::DestroyInPlace<Phase::SpatialModeler::RenderGroupInput<float>>()
{
  return 1;
}

uint64_t Phase::DestroyInPlace<Phase::SpatialModeler::ClusterSetInput<float>>(uint64_t a1)
{
  std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)(a1 + 104));
  std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)(a1 + 56));
  return 1;
}

uint64_t Phase::DestroyInPlace<Phase::SpatialModeler::StringInput>(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return 1;
}

uint64_t Phase::InitInPlace<Phase::SpatialModeler::CullabilityOutput<float>>(uint64_t a1)
{
  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 4) = 1;
  *(_DWORD *)(a1 + 8) = 0;
  return 1;
}

uint64_t Phase::InitInPlace<Phase::SpatialModeler::ClusterSetOutput<float>>(uint64_t a1)
{
  *(_DWORD *)a1 = 2;
  *(_BYTE *)(a1 + 4) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return 1;
}

uint64_t Phase::InitInPlace<Phase::SpatialModeler::DirectionalMetadataOutput<float>>(uint64_t a1)
{
  *(_DWORD *)a1 = 3;
  *(_BYTE *)(a1 + 4) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 200) = 0;
  return 1;
}

uint64_t Phase::DestroyInPlace<Phase::SpatialModeler::CullabilityOutput<float>>()
{
  return 1;
}

uint64_t Phase::DestroyInPlace<Phase::SpatialModeler::ClusterSetOutput<float>>(uint64_t *a1)
{
  std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](a1 + 13);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](a1 + 7);
  std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](a1 + 1);
  return 1;
}

uint64_t Phase::DestroyInPlace<Phase::SpatialModeler::DirectionalMetadataOutput<float>>(uint64_t *a1)
{
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](a1 + 18);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](a1 + 13);
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](a1 + 7);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](a1 + 1);
  return 1;
}

uint64_t Phase::Controller::SpatialModelerInfo::GetDescription(Phase::Controller::SpatialModelerInfo *this)
{
  _QWORD *v2;
  int v3;
  Phase::Controller::SpatialModelerInfo *v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  const char *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"SpatialModeler ", 15);
  v3 = *((char *)this + 23);
  if (v3 >= 0)
    v4 = this;
  else
    v4 = *(Phase::Controller::SpatialModelerInfo **)this;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)this + 23);
  else
    v5 = *((_QWORD *)this + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (category ", 11);
  GetSpatialCategoryString(*((_DWORD *)this + 10));
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v8 = (const char *)objc_msgSend(v7, "UTF8String");
  v9 = strlen(v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"id ", 3);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)")", 1);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2199F9CD4](&v15);
}

void sub_2166C4EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

Phase::Controller::SpatialModelerRegistry *Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(Phase::Controller::SpatialModelerRegistry *this, int a2)
{
  unint64_t v3;
  std::string *p_str;
  unsigned int v5;
  std::string::value_type *v6;
  unint64_t v7;
  unsigned int v8;
  _DWORD *v9;
  _QWORD *v10;
  int64x2_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::string *v18;
  unsigned int v19;
  std::string::value_type *v20;
  unint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  int64x2_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  std::string *v32;
  unsigned int v33;
  std::string::value_type *v34;
  unint64_t v35;
  unsigned int v36;
  _DWORD *v37;
  _QWORD *v38;
  int64x2_t *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  Phase::SpatialModeler::EarlyReflectionsSimulation *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  std::string *v47;
  unsigned int v48;
  std::string::value_type *v49;
  unint64_t v50;
  unsigned int v51;
  _QWORD *v52;
  int64x2_t *v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  std::string *v61;
  unsigned int v62;
  std::string::value_type *v63;
  unint64_t v64;
  unsigned int v65;
  _DWORD *v66;
  _QWORD *v67;
  int64x2_t *v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  Phase::SpatialModeler::LateReverbSimulation *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  std::string *v76;
  unsigned int v77;
  std::string::value_type *v78;
  unsigned int v79;
  _QWORD *v80;
  int64x2_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  std::string __str;
  int64x2_t *v91;
  _BYTE v92[32];
  uint64_t v93;
  int v94;
  void *__p[2];
  _OWORD v96[2];
  void *v97[4];
  uint64_t v98;
  _QWORD v99[9];
  _QWORD v100[3];
  __int128 v101;
  int64x2_t v102;
  uint64_t v103;
  int64x2_t v104;
  uint64_t v105;
  int64x2_t *v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__str, "DirectPathTransmission");
  v3 = 0xCBF29CE484222325;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (!__str.__r_.__value_.__r.__words[0])
    {
LABEL_8:
      v7 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    p_str = &__str;
  }
  v5 = p_str->__r_.__value_.__s.__data_[0];
  if (!p_str->__r_.__value_.__s.__data_[0])
    goto LABEL_8;
  v6 = &p_str->__r_.__value_.__s.__data_[1];
  v7 = 0xCBF29CE484222325;
  do
  {
    v7 = 0x100000001B3 * (v7 ^ v5);
    v8 = *v6++;
    v5 = v8;
  }
  while (v8);
LABEL_9:
  memset(v92, 0, sizeof(v92));
  *(_OWORD *)__p = 0u;
  memset(v96, 0, sizeof(v96));
  memset(v97, 0, 28);
  memset(v99, 0, sizeof(v99));
  v101 = 0u;
  v102 = 0u;
  v103 = 0;
  std::string::operator=((std::string *)v92, &__str);
  *(_QWORD *)&v92[24] = v7;
  v93 = 1;
  v94 = 1;
  v9 = operator new(0x14uLL);
  *(_OWORD *)v9 = constinit;
  v9[4] = 5;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __p[0] = v9;
  __p[1] = v9 + 5;
  *(_QWORD *)&v96[0] = v9 + 5;
  Phase::SpatialModeler::DirectPathTransmission::GetSupportedQueryDescs((std::string **)&v104);
  std::vector<Phase::SpatialModeler::QueryDesc>::__vdeallocate((void **)v96 + 1);
  *(int64x2_t *)((char *)v96 + 8) = v104;
  *((_QWORD *)&v96[1] + 1) = v105;
  v105 = 0;
  v104 = 0uLL;
  v91 = &v104;
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
  v10 = operator new(8uLL);
  *v10 = 3;
  if (v97[0])
  {
    v97[1] = v97[0];
    operator delete(v97[0]);
  }
  v97[0] = v10;
  v97[1] = v10 + 1;
  v97[2] = v10 + 1;
  v98 = 3;
  v99[0] = 0x4039000000000000;
  LODWORD(v97[3]) = 0;
  v104.i64[0] = (uint64_t)&off_24D581288;
  v106 = &v104;
  std::__function::__value_func<Phase::SpatialModeler::BaseModeler * ()(void)>::swap[abi:ne180100](&v104, v100);
  v11 = v106;
  if (v106 == &v104)
  {
    v12 = 4;
    v11 = &v104;
  }
  else
  {
    if (!v106)
      goto LABEL_18;
    v12 = 5;
  }
  (*(void (**)(void))(v11->i64[0] + 8 * v12))();
LABEL_18:
  v13 = operator new();
  *(_QWORD *)v13 = &off_24D578258;
  *(_QWORD *)(v13 + 8) = 0x200000002;
  *(_QWORD *)(v13 + 16) = 0x23B449BA6;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = 0;
  *(_DWORD *)(v13 + 48) = 0;
  v14 = *((_QWORD *)&v101 + 1);
  *((_QWORD *)&v101 + 1) = v13;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  Phase::SpatialModeler::DirectPathTransmission::GetEntityShapeTemplates(v104.i64);
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__vdeallocate((void **)&v102);
  v102 = v104;
  v103 = v105;
  v105 = 0;
  v104 = 0uLL;
  v91 = &v104;
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
  *(_OWORD *)&v99[1] = xmmword_21673AEB0;
  *(_OWORD *)&v99[3] = xmmword_2166F7470;
  *(_OWORD *)&v99[5] = xmmword_21673AEC0;
  *(_OWORD *)&v99[7] = xmmword_21673AED0;
  Phase::Controller::SpatialModelerRegistry::RegisterSpatialModeler(this, v7, (Phase::Controller::SpatialModelerInfo *)v92);
  v104.i64[0] = (uint64_t)&v102;
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v15 = *((_QWORD *)&v101 + 1);
  *((_QWORD *)&v101 + 1) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (_QWORD *)v101;
  if ((_QWORD *)v101 == v100)
  {
    v17 = 4;
    v16 = v100;
  }
  else
  {
    if (!(_QWORD)v101)
      goto LABEL_27;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_27:
  if (v97[0])
  {
    v97[1] = v97[0];
    operator delete(v97[0]);
  }
  v104.i64[0] = (uint64_t)v96 + 8;
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((v92[23] & 0x80000000) != 0)
    operator delete(*(void **)v92);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "PresetEarlyReflections");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v18 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (!__str.__r_.__value_.__r.__words[0])
    {
LABEL_42:
      v21 = 0;
      goto LABEL_43;
    }
  }
  else
  {
    v18 = &__str;
  }
  v19 = v18->__r_.__value_.__s.__data_[0];
  if (!v18->__r_.__value_.__s.__data_[0])
    goto LABEL_42;
  v20 = &v18->__r_.__value_.__s.__data_[1];
  v21 = 0xCBF29CE484222325;
  do
  {
    v21 = 0x100000001B3 * (v21 ^ v19);
    v22 = *v20++;
    v19 = v22;
  }
  while (v22);
LABEL_43:
  memset(v92, 0, sizeof(v92));
  *(_OWORD *)__p = 0u;
  memset(v96, 0, sizeof(v96));
  memset(v97, 0, 28);
  memset(v99, 0, sizeof(v99));
  v101 = 0u;
  v102 = 0u;
  v103 = 0;
  std::string::operator=((std::string *)v92, &__str);
  *(_QWORD *)&v92[24] = v21;
  v93 = 1;
  v94 = 2;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v96[0] = 0;
  Phase::SpatialModeler::PresetEarlyReflections::GetSupportedQueryDescs((std::string **)&v104);
  std::vector<Phase::SpatialModeler::QueryDesc>::__vdeallocate((void **)v96 + 1);
  *(int64x2_t *)((char *)v96 + 8) = v104;
  *((_QWORD *)&v96[1] + 1) = v105;
  v105 = 0;
  v104 = 0uLL;
  v91 = &v104;
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
  v23 = operator new(0x18uLL);
  *(_OWORD *)v23 = constinit_2;
  v23[2] = 31;
  if (v97[0])
  {
    v97[1] = v97[0];
    operator delete(v97[0]);
  }
  v97[0] = v23;
  v97[1] = v23 + 3;
  v97[2] = v23 + 3;
  v98 = 10;
  v99[0] = 0x4024000000000000;
  LODWORD(v97[3]) = 0;
  v104.i64[0] = (uint64_t)&off_24D581330;
  v106 = &v104;
  std::__function::__value_func<Phase::SpatialModeler::BaseModeler * ()(void)>::swap[abi:ne180100](&v104, v100);
  v24 = v106;
  if (v106 == &v104)
  {
    v25 = 4;
    v24 = &v104;
  }
  else
  {
    if (!v106)
      goto LABEL_52;
    v25 = 5;
  }
  (*(void (**)(void))(v24->i64[0] + 8 * v25))();
LABEL_52:
  v26 = operator new(8uLL);
  *v26 = 0x40000000080;
  v27 = operator new();
  v104 = 0uLL;
  v105 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v104, v26, (uint64_t)(v26 + 1), 2uLL);
  *(_QWORD *)v27 = &off_24D578258;
  *(_QWORD *)(v27 + 8) = 2;
  *(_QWORD *)(v27 + 16) = 0x23FC00000;
  *(_QWORD *)(v27 + 32) = 0;
  *(_QWORD *)(v27 + 40) = 0;
  *(_QWORD *)(v27 + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v27 + 24), (const void *)v104.i64[0], v104.i64[1], (v104.i64[1] - v104.i64[0]) >> 2);
  *(_DWORD *)(v27 + 48) = 1;
  if (v104.i64[0])
  {
    v104.i64[1] = v104.i64[0];
    operator delete((void *)v104.i64[0]);
  }
  v28 = *((_QWORD *)&v101 + 1);
  *((_QWORD *)&v101 + 1) = v27;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v104 = 0uLL;
  v105 = 0;
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__vdeallocate((void **)&v102);
  v102 = v104;
  v103 = v105;
  v105 = 0;
  v104 = 0uLL;
  v91 = &v104;
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
  *(_OWORD *)&v99[1] = xmmword_21673AEB0;
  *(_OWORD *)&v99[3] = xmmword_2166F7470;
  *(_OWORD *)&v99[5] = xmmword_21673AEC0;
  *(_OWORD *)&v99[7] = xmmword_21673AED0;
  Phase::Controller::SpatialModelerRegistry::RegisterSpatialModeler(this, v21, (Phase::Controller::SpatialModelerInfo *)v92);
  operator delete(v26);
  v104.i64[0] = (uint64_t)&v102;
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v29 = *((_QWORD *)&v101 + 1);
  *((_QWORD *)&v101 + 1) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = (_QWORD *)v101;
  if ((_QWORD *)v101 == v100)
  {
    v31 = 4;
    v30 = v100;
  }
  else
  {
    if (!(_QWORD)v101)
      goto LABEL_63;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_63:
  if (v97[0])
  {
    v97[1] = v97[0];
    operator delete(v97[0]);
  }
  v104.i64[0] = (uint64_t)v96 + 8;
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((v92[23] & 0x80000000) != 0)
    operator delete(*(void **)v92);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "SimulatedEarlyReflections");
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      v32 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (!__str.__r_.__value_.__r.__words[0])
        goto LABEL_79;
    }
    else
    {
      v32 = &__str;
    }
    v33 = v32->__r_.__value_.__s.__data_[0];
    if (v32->__r_.__value_.__s.__data_[0])
    {
      v34 = &v32->__r_.__value_.__s.__data_[1];
      v35 = 0xCBF29CE484222325;
      do
      {
        v35 = 0x100000001B3 * (v35 ^ v33);
        v36 = *v34++;
        v33 = v36;
      }
      while (v36);
LABEL_80:
      memset(v92, 0, sizeof(v92));
      *(_OWORD *)__p = 0u;
      memset(v96, 0, sizeof(v96));
      memset(v97, 0, 28);
      memset(v99, 0, sizeof(v99));
      v101 = 0u;
      v102 = 0u;
      v103 = 0;
      std::string::operator=((std::string *)v92, &__str);
      *(_QWORD *)&v92[24] = v35;
      v93 = 1;
      v94 = 2;
      v37 = operator new(0x14uLL);
      *(_OWORD *)v37 = constinit_0;
      v37[4] = 5;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = v37;
      __p[1] = v37 + 5;
      *(_QWORD *)&v96[0] = v37 + 5;
      Phase::SpatialModeler::EarlyReflectionsSimulation::GetSupportedQueryDescs((std::string **)&v104);
      std::vector<Phase::SpatialModeler::QueryDesc>::__vdeallocate((void **)v96 + 1);
      *(int64x2_t *)((char *)v96 + 8) = v104;
      *((_QWORD *)&v96[1] + 1) = v105;
      v105 = 0;
      v104 = 0uLL;
      v91 = &v104;
      std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
      v38 = operator new(0x18uLL);
      *(_OWORD *)v38 = constinit_4;
      v38[2] = 31;
      if (v97[0])
      {
        v97[1] = v97[0];
        operator delete(v97[0]);
      }
      v97[0] = v38;
      v97[1] = v38 + 3;
      v97[2] = v38 + 3;
      v98 = 10;
      v99[0] = 0x4000000000000000;
      LODWORD(v97[3]) = 0;
      v104.i64[0] = (uint64_t)&off_24D581378;
      v106 = &v104;
      std::__function::__value_func<Phase::SpatialModeler::BaseModeler * ()(void)>::swap[abi:ne180100](&v104, v100);
      v39 = v106;
      if (v106 == &v104)
      {
        v40 = 4;
        v39 = &v104;
      }
      else
      {
        if (!v106)
          goto LABEL_89;
        v40 = 5;
      }
      (*(void (**)(void))(v39->i64[0] + 8 * v40))();
LABEL_89:
      v41 = operator new(8uLL);
      *v41 = 0x40000000080;
      v42 = operator new();
      v104 = 0uLL;
      v105 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v104, v41, (uint64_t)(v41 + 1), 2uLL);
      *(_QWORD *)v42 = &off_24D578258;
      *(_QWORD *)(v42 + 8) = 2;
      *(_QWORD *)(v42 + 16) = 0x23DF5C28FLL;
      *(_QWORD *)(v42 + 32) = 0;
      *(_QWORD *)(v42 + 40) = 0;
      *(_QWORD *)(v42 + 24) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v42 + 24), (const void *)v104.i64[0], v104.i64[1], (v104.i64[1] - v104.i64[0]) >> 2);
      *(_DWORD *)(v42 + 48) = 1;
      if (v104.i64[0])
      {
        v104.i64[1] = v104.i64[0];
        operator delete((void *)v104.i64[0]);
      }
      v43 = (Phase::SpatialModeler::EarlyReflectionsSimulation *)*((_QWORD *)&v101 + 1);
      *((_QWORD *)&v101 + 1) = v42;
      if (v43)
        v43 = (Phase::SpatialModeler::EarlyReflectionsSimulation *)(*(uint64_t (**)(Phase::SpatialModeler::EarlyReflectionsSimulation *))(*(_QWORD *)v43 + 8))(v43);
      Phase::SpatialModeler::EarlyReflectionsSimulation::GetEntityShapeTemplates(v43, v104.i64);
      std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__vdeallocate((void **)&v102);
      v102 = v104;
      v103 = v105;
      v105 = 0;
      v104 = 0uLL;
      v91 = &v104;
      std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
      *(_OWORD *)&v99[1] = xmmword_21673AEB0;
      *(_OWORD *)&v99[3] = xmmword_2166F7470;
      *(_OWORD *)&v99[5] = xmmword_21673AEC0;
      *(_OWORD *)&v99[7] = xmmword_21673AED0;
      Phase::Controller::SpatialModelerRegistry::RegisterSpatialModeler(this, v35, (Phase::Controller::SpatialModelerInfo *)v92);
      operator delete(v41);
      v104.i64[0] = (uint64_t)&v102;
      std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
      v44 = *((_QWORD *)&v101 + 1);
      *((_QWORD *)&v101 + 1) = 0;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
      v45 = (_QWORD *)v101;
      if ((_QWORD *)v101 == v100)
      {
        v46 = 4;
        v45 = v100;
      }
      else
      {
        if (!(_QWORD)v101)
        {
LABEL_100:
          if (v97[0])
          {
            v97[1] = v97[0];
            operator delete(v97[0]);
          }
          v104.i64[0] = (uint64_t)v96 + 8;
          std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if ((v92[23] & 0x80000000) != 0)
            operator delete(*(void **)v92);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          goto LABEL_108;
        }
        v46 = 5;
      }
      (*(void (**)(void))(*v45 + 8 * v46))();
      goto LABEL_100;
    }
LABEL_79:
    v35 = 0;
    goto LABEL_80;
  }
LABEL_108:
  std::string::basic_string[abi:ne180100]<0>(&__str, "PresetLateReverb");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v47 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (!__str.__r_.__value_.__r.__words[0])
    {
LABEL_115:
      v50 = 0;
      goto LABEL_116;
    }
  }
  else
  {
    v47 = &__str;
  }
  v48 = v47->__r_.__value_.__s.__data_[0];
  if (!v47->__r_.__value_.__s.__data_[0])
    goto LABEL_115;
  v49 = &v47->__r_.__value_.__s.__data_[1];
  v50 = 0xCBF29CE484222325;
  do
  {
    v50 = 0x100000001B3 * (v50 ^ v48);
    v51 = *v49++;
    v48 = v51;
  }
  while (v51);
LABEL_116:
  memset(v92, 0, sizeof(v92));
  *(_OWORD *)__p = 0u;
  memset(v96, 0, sizeof(v96));
  memset(v97, 0, 28);
  memset(v99, 0, sizeof(v99));
  v101 = 0u;
  v102 = 0u;
  v103 = 0;
  std::string::operator=((std::string *)v92, &__str);
  *(_QWORD *)&v92[24] = v50;
  v93 = 1;
  v94 = 3;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v96[0] = 0;
  Phase::SpatialModeler::PresetLateReverb::GetSupportedQueryDescs((std::string **)&v104);
  std::vector<Phase::SpatialModeler::QueryDesc>::__vdeallocate((void **)v96 + 1);
  *(int64x2_t *)((char *)v96 + 8) = v104;
  *((_QWORD *)&v96[1] + 1) = v105;
  v105 = 0;
  v104 = 0uLL;
  v91 = &v104;
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
  v52 = operator new(0x18uLL);
  *(_OWORD *)v52 = constinit_3;
  v52[2] = 31;
  if (v97[0])
  {
    v97[1] = v97[0];
    operator delete(v97[0]);
  }
  v97[0] = v52;
  v97[1] = v52 + 3;
  v97[2] = v52 + 3;
  v98 = 10;
  v99[0] = 0x4010000000000000;
  LODWORD(v97[3]) = 0;
  v104.i64[0] = (uint64_t)&off_24D5813C0;
  v106 = &v104;
  std::__function::__value_func<Phase::SpatialModeler::BaseModeler * ()(void)>::swap[abi:ne180100](&v104, v100);
  v53 = v106;
  if (v106 == &v104)
  {
    v54 = 4;
    v53 = &v104;
  }
  else
  {
    if (!v106)
      goto LABEL_125;
    v54 = 5;
  }
  (*(void (**)(void))(v53->i64[0] + 8 * v54))();
LABEL_125:
  v55 = operator new(0xCuLL);
  *(_QWORD *)v55 = 0x20000000080;
  v55[2] = 4096;
  v56 = operator new();
  v104 = 0uLL;
  v105 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v104, v55, (uint64_t)(v55 + 3), 3uLL);
  *(_QWORD *)v56 = &off_24D578258;
  *(_QWORD *)(v56 + 8) = 0x100000002;
  *(_QWORD *)(v56 + 16) = 0x240D00000;
  *(_QWORD *)(v56 + 32) = 0;
  *(_QWORD *)(v56 + 40) = 0;
  *(_QWORD *)(v56 + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v56 + 24), (const void *)v104.i64[0], v104.i64[1], (v104.i64[1] - v104.i64[0]) >> 2);
  *(_DWORD *)(v56 + 48) = 2;
  if (v104.i64[0])
  {
    v104.i64[1] = v104.i64[0];
    operator delete((void *)v104.i64[0]);
  }
  v57 = *((_QWORD *)&v101 + 1);
  *((_QWORD *)&v101 + 1) = v56;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v104 = 0uLL;
  v105 = 0;
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__vdeallocate((void **)&v102);
  v102 = v104;
  v103 = v105;
  v105 = 0;
  v104 = 0uLL;
  v91 = &v104;
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
  *(_OWORD *)&v99[1] = xmmword_21673AEB0;
  *(_OWORD *)&v99[3] = xmmword_2166F7470;
  *(_OWORD *)&v99[5] = xmmword_21673AEC0;
  *(_OWORD *)&v99[7] = xmmword_21673AED0;
  Phase::Controller::SpatialModelerRegistry::RegisterSpatialModeler(this, v50, (Phase::Controller::SpatialModelerInfo *)v92);
  operator delete(v55);
  v104.i64[0] = (uint64_t)&v102;
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v58 = *((_QWORD *)&v101 + 1);
  *((_QWORD *)&v101 + 1) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = (_QWORD *)v101;
  if ((_QWORD *)v101 == v100)
  {
    v60 = 4;
    v59 = v100;
  }
  else
  {
    if (!(_QWORD)v101)
      goto LABEL_136;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_136:
  if (v97[0])
  {
    v97[1] = v97[0];
    operator delete(v97[0]);
  }
  v104.i64[0] = (uint64_t)v96 + 8;
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((v92[23] & 0x80000000) != 0)
    operator delete(*(void **)v92);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "SimulatedLateReverb");
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      v61 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (!__str.__r_.__value_.__r.__words[0])
        goto LABEL_152;
    }
    else
    {
      v61 = &__str;
    }
    v62 = v61->__r_.__value_.__s.__data_[0];
    if (v61->__r_.__value_.__s.__data_[0])
    {
      v63 = &v61->__r_.__value_.__s.__data_[1];
      v64 = 0xCBF29CE484222325;
      do
      {
        v64 = 0x100000001B3 * (v64 ^ v62);
        v65 = *v63++;
        v62 = v65;
      }
      while (v65);
LABEL_153:
      memset(v92, 0, sizeof(v92));
      *(_OWORD *)__p = 0u;
      memset(v96, 0, sizeof(v96));
      memset(v97, 0, 28);
      memset(v99, 0, sizeof(v99));
      v101 = 0u;
      v102 = 0u;
      v103 = 0;
      std::string::operator=((std::string *)v92, &__str);
      *(_QWORD *)&v92[24] = v64;
      v93 = 1;
      v94 = 3;
      v66 = operator new(0x14uLL);
      *(_OWORD *)v66 = constinit_1;
      v66[4] = 5;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = v66;
      __p[1] = v66 + 5;
      *(_QWORD *)&v96[0] = v66 + 5;
      Phase::SpatialModeler::LateReverbSimulation::GetSupportedQueryDescs((std::string **)&v104);
      std::vector<Phase::SpatialModeler::QueryDesc>::__vdeallocate((void **)v96 + 1);
      *(int64x2_t *)((char *)v96 + 8) = v104;
      *((_QWORD *)&v96[1] + 1) = v105;
      v105 = 0;
      v104 = 0uLL;
      v91 = &v104;
      std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
      v67 = operator new(0x18uLL);
      *(_OWORD *)v67 = constinit_4;
      v67[2] = 31;
      if (v97[0])
      {
        v97[1] = v97[0];
        operator delete(v97[0]);
      }
      v97[0] = v67;
      v97[1] = v67 + 3;
      v97[2] = v67 + 3;
      v98 = 10;
      v99[0] = 0x3FF0000000000000;
      LODWORD(v97[3]) = 0;
      v104.i64[0] = (uint64_t)&off_24D581408;
      v106 = &v104;
      std::__function::__value_func<Phase::SpatialModeler::BaseModeler * ()(void)>::swap[abi:ne180100](&v104, v100);
      v68 = v106;
      if (v106 == &v104)
      {
        v69 = 4;
        v68 = &v104;
      }
      else
      {
        if (!v106)
          goto LABEL_162;
        v69 = 5;
      }
      (*(void (**)(void))(v68->i64[0] + 8 * v69))();
LABEL_162:
      v70 = operator new(0xCuLL);
      *(_QWORD *)v70 = 0x20000000080;
      v70[2] = 4096;
      v71 = operator new();
      v104 = 0uLL;
      v105 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v104, v70, (uint64_t)(v70 + 3), 3uLL);
      *(_QWORD *)v71 = &off_24D578258;
      *(_QWORD *)(v71 + 8) = 0x100000002;
      *(_QWORD *)(v71 + 16) = 0x240800000;
      *(_QWORD *)(v71 + 32) = 0;
      *(_QWORD *)(v71 + 40) = 0;
      *(_QWORD *)(v71 + 24) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v71 + 24), (const void *)v104.i64[0], v104.i64[1], (v104.i64[1] - v104.i64[0]) >> 2);
      *(_DWORD *)(v71 + 48) = 2;
      if (v104.i64[0])
      {
        v104.i64[1] = v104.i64[0];
        operator delete((void *)v104.i64[0]);
      }
      v72 = (Phase::SpatialModeler::LateReverbSimulation *)*((_QWORD *)&v101 + 1);
      *((_QWORD *)&v101 + 1) = v71;
      if (v72)
        v72 = (Phase::SpatialModeler::LateReverbSimulation *)(*(uint64_t (**)(Phase::SpatialModeler::LateReverbSimulation *))(*(_QWORD *)v72 + 8))(v72);
      Phase::SpatialModeler::LateReverbSimulation::GetEntityShapeTemplates(v72, v104.i64);
      std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__vdeallocate((void **)&v102);
      v102 = v104;
      v103 = v105;
      v105 = 0;
      v104 = 0uLL;
      v91 = &v104;
      std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
      *(_OWORD *)&v99[1] = xmmword_21673AEB0;
      *(_OWORD *)&v99[3] = xmmword_2166F7470;
      *(_OWORD *)&v99[5] = xmmword_21673AEC0;
      *(_OWORD *)&v99[7] = xmmword_21673AED0;
      Phase::Controller::SpatialModelerRegistry::RegisterSpatialModeler(this, v64, (Phase::Controller::SpatialModelerInfo *)v92);
      operator delete(v70);
      v104.i64[0] = (uint64_t)&v102;
      std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
      v73 = *((_QWORD *)&v101 + 1);
      *((_QWORD *)&v101 + 1) = 0;
      if (v73)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
      v74 = (_QWORD *)v101;
      if ((_QWORD *)v101 == v100)
      {
        v75 = 4;
        v74 = v100;
      }
      else
      {
        if (!(_QWORD)v101)
        {
LABEL_173:
          if (v97[0])
          {
            v97[1] = v97[0];
            operator delete(v97[0]);
          }
          v104.i64[0] = (uint64_t)v96 + 8;
          std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if ((v92[23] & 0x80000000) != 0)
            operator delete(*(void **)v92);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          goto LABEL_181;
        }
        v75 = 5;
      }
      (*(void (**)(void))(*v74 + 8 * v75))();
      goto LABEL_173;
    }
LABEL_152:
    v64 = 0;
    goto LABEL_153;
  }
LABEL_181:
  std::string::basic_string[abi:ne180100]<0>(&__str, "Ambient");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v76 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (!__str.__r_.__value_.__r.__words[0])
    {
LABEL_188:
      v3 = 0;
      goto LABEL_189;
    }
  }
  else
  {
    v76 = &__str;
  }
  v77 = v76->__r_.__value_.__s.__data_[0];
  if (!v76->__r_.__value_.__s.__data_[0])
    goto LABEL_188;
  v78 = &v76->__r_.__value_.__s.__data_[1];
  do
  {
    v3 = 0x100000001B3 * (v3 ^ v77);
    v79 = *v78++;
    v77 = v79;
  }
  while (v79);
LABEL_189:
  memset(v92, 0, sizeof(v92));
  *(_OWORD *)__p = 0u;
  memset(v96, 0, sizeof(v96));
  memset(v97, 0, 28);
  memset(v99, 0, sizeof(v99));
  v101 = 0u;
  v102 = 0u;
  v103 = 0;
  std::string::operator=((std::string *)v92, &__str);
  *(_QWORD *)&v92[24] = v3;
  v93 = 1;
  v94 = 4;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v96[0] = 0;
  Phase::SpatialModeler::Ambient::GetSupportedQueryDescs(&v104);
  std::vector<Phase::SpatialModeler::QueryDesc>::__vdeallocate((void **)v96 + 1);
  *(int64x2_t *)((char *)v96 + 8) = v104;
  *((_QWORD *)&v96[1] + 1) = v105;
  v105 = 0;
  v104 = 0uLL;
  v91 = &v104;
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
  v80 = operator new(8uLL);
  *v80 = 1;
  if (v97[0])
  {
    v97[1] = v97[0];
    operator delete(v97[0]);
  }
  v97[0] = v80;
  v97[1] = v80 + 1;
  v97[2] = v80 + 1;
  v98 = 1;
  v99[0] = 0x4039000000000000;
  LODWORD(v97[3]) = 1;
  v104.i64[0] = (uint64_t)&off_24D581450;
  v106 = &v104;
  std::__function::__value_func<Phase::SpatialModeler::BaseModeler * ()(void)>::swap[abi:ne180100](&v104, v100);
  v81 = v106;
  if (v106 == &v104)
  {
    v82 = 4;
    v81 = &v104;
  }
  else
  {
    if (!v106)
      goto LABEL_198;
    v82 = 5;
  }
  (*(void (**)(void))(v81->i64[0] + 8 * v82))();
LABEL_198:
  v83 = operator new();
  *(_QWORD *)v83 = &off_24D578258;
  *(_QWORD *)(v83 + 8) = 0x300000002;
  *(_QWORD *)(v83 + 16) = 0x23B449BA6;
  *(_QWORD *)(v83 + 24) = 0;
  *(_QWORD *)(v83 + 32) = 0;
  *(_QWORD *)(v83 + 40) = 0;
  *(_DWORD *)(v83 + 48) = 3;
  v84 = *((_QWORD *)&v101 + 1);
  *((_QWORD *)&v101 + 1) = v83;
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__vdeallocate((void **)&v102);
  v102 = 0uLL;
  v103 = 0;
  v105 = 0;
  v104 = 0uLL;
  v91 = &v104;
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
  *(_OWORD *)&v99[1] = xmmword_21673AEB0;
  *(_OWORD *)&v99[3] = xmmword_2166F7470;
  *(_OWORD *)&v99[5] = xmmword_21673AEC0;
  *(_OWORD *)&v99[7] = xmmword_21673AED0;
  Phase::Controller::SpatialModelerRegistry::RegisterSpatialModeler(this, v3, (Phase::Controller::SpatialModelerInfo *)v92);
  v104.i64[0] = (uint64_t)&v102;
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v85 = *((_QWORD *)&v101 + 1);
  *((_QWORD *)&v101 + 1) = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = (_QWORD *)v101;
  if ((_QWORD *)v101 == v100)
  {
    v87 = 4;
    v86 = v100;
  }
  else
  {
    if (!(_QWORD)v101)
      goto LABEL_207;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_207:
  if (v97[0])
  {
    v97[1] = v97[0];
    operator delete(v97[0]);
  }
  v104.i64[0] = (uint64_t)v96 + 8;
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((v92[23] & 0x80000000) != 0)
    operator delete(*(void **)v92);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return this;
}

void sub_2166C63CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;
  void *v27;

  operator delete(v27);
  Phase::Controller::SpatialModelerInfo::~SpatialModelerInfo((Phase::Controller::SpatialModelerInfo *)&a26);
  if (a24 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>>>::~__hash_table(v26);
  _Unwind_Resume(a1);
}

__n128 Phase::Controller::SpatialModelerRegistry::RegisterSpatialModeler(Phase::Controller::SpatialModelerRegistry *this, unint64_t a2, Phase::Controller::SpatialModelerInfo *a3)
{
  unint64_t v3;
  Phase::Logger *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void ***v10;
  void **i;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void ***v32;
  unint64_t v33;
  void **v34;
  __int128 v35;
  int v36;
  void *v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t *v43;
  uint64_t v44;
  Phase::Controller::SpatialModelerInfo **v45;
  _QWORD *v46;
  Phase::Controller::SpatialModelerInfo *v47;
  void *v48;
  void *v49;
  __n128 result;
  void *v51;
  NSObject *v52;
  std::runtime_error *exception;
  unint64_t v54;
  _BYTE buf[18];
  __int16 v56;
  unint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v54 = a2;
  v6 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(this, &v54);
  if (v6)
  {
    v52 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v6) + 736));
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "SpatialModelerRegistry.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 308;
      v56 = 2048;
      v57 = v54;
      _os_log_impl(&dword_2164CC000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"A registry entry with id %llu already exists!\"", buf, 0x1Cu);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "A registry entry with id %llu already exists!");
  }
  v7 = v54;
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v54;
      if (v8 <= v54)
        v3 = v54 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v54;
    }
    v10 = *(void ****)(*(_QWORD *)this + 8 * v3);
    if (v10)
    {
      for (i = *v10; i; i = (void **)*i)
      {
        v12 = (unint64_t)i[1];
        if (v12 == v54)
        {
          if (i[2] == (void *)v54)
            goto LABEL_74;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3)
            break;
        }
      }
    }
  }
  v13 = (char *)operator new(0x128uLL);
  v14 = (_QWORD *)((char *)this + 16);
  *(_QWORD *)buf = v13;
  *(_QWORD *)&buf[8] = (char *)this + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v7;
  *((_QWORD *)v13 + 2) = v7;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 136) = 0u;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_OWORD *)(v13 + 184) = 0u;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_OWORD *)(v13 + 232) = 0u;
  *(_OWORD *)(v13 + 248) = 0u;
  *(_OWORD *)(v13 + 264) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 280) = 0u;
  v15 = (float)(unint64_t)(*((_QWORD *)this + 3) + 1);
  buf[16] = 1;
  v16 = *((float *)this + 8);
  if ((((float)(v16 * (float)v8) >= v15) & ~(v8 == 0)) == 0)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)this + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v8)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)this + 3) / *((float *)this + 8));
      if (v8 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)this + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(void **)this;
          *(_QWORD *)this = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)this + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)this + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*v14;
          if (*v14)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)this + 8 * v25) = v14;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)this + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)this + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)this + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)this + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_59;
        }
        v51 = *(void **)this;
        *(_QWORD *)this = 0;
        if (v51)
          operator delete(v51);
        v8 = 0;
        *((_QWORD *)this + 1) = 0;
      }
    }
LABEL_59:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v32 = *(void ****)(*(_QWORD *)this + 8 * v3);
  i = *(void ***)buf;
  if (v32)
  {
    **(_QWORD **)buf = *v32;
LABEL_72:
    *v32 = i;
    goto LABEL_73;
  }
  **(_QWORD **)buf = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = i;
  *(_QWORD *)(*(_QWORD *)this + 8 * v3) = v14;
  if (*i)
  {
    v33 = *((_QWORD *)*i + 1);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8)
        v33 %= v8;
    }
    else
    {
      v33 &= v8 - 1;
    }
    v32 = (void ***)(*(_QWORD *)this + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  *(_QWORD *)buf = 0;
  ++*((_QWORD *)this + 3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
LABEL_74:
  v34 = i + 3;
  if (*((char *)i + 47) < 0)
    operator delete(*v34);
  v35 = *(_OWORD *)a3;
  i[5] = (void *)*((_QWORD *)a3 + 2);
  *(_OWORD *)v34 = v35;
  *((_BYTE *)a3 + 23) = 0;
  *(_BYTE *)a3 = 0;
  v36 = *((_DWORD *)a3 + 10);
  v37 = i[9];
  *((_OWORD *)i + 3) = *(_OWORD *)((char *)a3 + 24);
  *((_DWORD *)i + 16) = v36;
  if (v37)
  {
    i[10] = v37;
    operator delete(v37);
    i[9] = 0;
    i[10] = 0;
    i[11] = 0;
  }
  *(_OWORD *)(i + 9) = *((_OWORD *)a3 + 3);
  i[11] = (void *)*((_QWORD *)a3 + 8);
  *((_QWORD *)a3 + 6) = 0;
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  std::vector<Phase::SpatialModeler::QueryDesc>::__vdeallocate(i + 12);
  *((_OWORD *)i + 6) = *(_OWORD *)((char *)a3 + 72);
  i[14] = (void *)*((_QWORD *)a3 + 11);
  *((_QWORD *)a3 + 9) = 0;
  *((_QWORD *)a3 + 10) = 0;
  *((_QWORD *)a3 + 11) = 0;
  v38 = i[15];
  if (v38)
  {
    i[16] = v38;
    operator delete(v38);
    i[15] = 0;
    i[16] = 0;
    i[17] = 0;
  }
  *(_OWORD *)(i + 15) = *((_OWORD *)a3 + 6);
  i[17] = (void *)*((_QWORD *)a3 + 14);
  *((_QWORD *)a3 + 13) = 0;
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 12) = 0;
  v39 = *(_OWORD *)((char *)a3 + 136);
  *((_OWORD *)i + 9) = *(_OWORD *)((char *)a3 + 120);
  v40 = *(_OWORD *)((char *)a3 + 152);
  v41 = *(_OWORD *)((char *)a3 + 168);
  v42 = *(_OWORD *)((char *)a3 + 184);
  i[28] = (void *)*((_QWORD *)a3 + 25);
  *((_OWORD *)i + 12) = v41;
  *((_OWORD *)i + 13) = v42;
  *((_OWORD *)i + 10) = v39;
  *((_OWORD *)i + 11) = v40;
  v43 = (uint64_t *)i[32];
  i[32] = 0;
  if (v43 == (uint64_t *)(i + 29))
  {
    v44 = 4;
    v43 = (uint64_t *)(i + 29);
  }
  else
  {
    if (!v43)
      goto LABEL_85;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_85:
  v45 = (Phase::Controller::SpatialModelerInfo **)(i + 32);
  v46 = (_QWORD *)((char *)a3 + 232);
  v47 = (Phase::Controller::SpatialModelerInfo *)*((_QWORD *)a3 + 29);
  if (!v47)
  {
    v46 = i + 32;
    goto LABEL_89;
  }
  if (v47 != (Phase::Controller::SpatialModelerInfo *)((char *)a3 + 208))
  {
    *v45 = v47;
LABEL_89:
    *v46 = 0;
    goto LABEL_91;
  }
  *v45 = (Phase::Controller::SpatialModelerInfo *)(i + 29);
  (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*v46 + 24))(*v46, (uint64_t *)i + 29);
LABEL_91:
  v48 = (void *)*((_QWORD *)a3 + 30);
  *((_QWORD *)a3 + 30) = 0;
  v49 = i[33];
  i[33] = v48;
  if (v49)
    (*(void (**)(void *))(*(_QWORD *)v49 + 8))(v49);
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__vdeallocate(i + 34);
  result = *(__n128 *)((char *)a3 + 248);
  *((__n128 *)i + 17) = result;
  i[36] = (void *)*((_QWORD *)a3 + 33);
  *((_QWORD *)a3 + 31) = 0;
  *((_QWORD *)a3 + 32) = 0;
  *((_QWORD *)a3 + 33) = 0;
  return result;
}

void sub_2166C6C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void Phase::Controller::SpatialModelerInfo::~SpatialModelerInfo(Phase::Controller::SpatialModelerInfo *this)
{
  uint64_t v2;
  Phase::Controller::SpatialModelerInfo *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void **v7;

  v7 = (void **)((char *)this + 248);
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100](&v7);
  v2 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (Phase::Controller::SpatialModelerInfo *)*((_QWORD *)this + 29);
  if (v3 == (Phase::Controller::SpatialModelerInfo *)((char *)this + 208))
  {
    v4 = 4;
    v3 = (Phase::Controller::SpatialModelerInfo *)((char *)this + 208);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (void *)*((_QWORD *)this + 12);
  if (v5)
  {
    *((_QWORD *)this + 13) = v5;
    operator delete(v5);
  }
  v7 = (void **)((char *)this + 72);
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100](&v7);
  v6 = (void *)*((_QWORD *)this + 6);
  if (v6)
  {
    *((_QWORD *)this + 7) = v6;
    operator delete(v6);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

_QWORD *Phase::Controller::SpatialModelerRegistry::CreateSpatialModelerInstance(Phase::Controller::SpatialModelerRegistry *this, unint64_t a2)
{
  _QWORD *result;
  uint64_t v3;
  unint64_t v4;

  v4 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(this, &v4);
  if (result)
  {
    v3 = result[32];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  }
  return result;
}

void Phase::Controller::SpatialModelerRegistry::GetSpatialModelerIds(uint64_t a1@<X0>, int a2@<W1>, char **a3@<X8>)
{
  uint64_t *v3;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *(uint64_t **)(a1 + 16);
  if (v3)
  {
    v6 = 0;
    v7 = a3 + 2;
    do
    {
      if (*((_DWORD *)v3 + 16) == a2)
      {
        if ((unint64_t)v6 >= *v7)
        {
          v9 = *a3;
          v10 = (v6 - *a3) >> 3;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 61)
            std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
          v12 = *v7 - (_QWORD)v9;
          if (v12 >> 2 > v11)
            v11 = v12 >> 2;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v11;
          if (v13)
          {
            v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v7, v13);
            v9 = *a3;
            v6 = a3[1];
          }
          else
          {
            v14 = 0;
          }
          v15 = &v14[8 * v10];
          *(_QWORD *)v15 = v3[2];
          v8 = v15 + 8;
          while (v6 != v9)
          {
            v16 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *((_QWORD *)v15 - 1) = v16;
            v15 -= 8;
          }
          *a3 = v15;
          a3[1] = v8;
          a3[2] = &v14[8 * v13];
          if (v9)
            operator delete(v9);
        }
        else
        {
          *(_QWORD *)v6 = v3[2];
          v8 = v6 + 8;
        }
        a3[1] = v8;
        v6 = v8;
      }
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
}

void sub_2166C6E80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::SpatialModelerRegistry::GetSpatialCategories(Phase::Controller::SpatialModelerRegistry *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  Phase::Controller::SpatialModelerRegistry **v7;
  int v8;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  Phase::Controller::SpatialModelerRegistry *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  Phase::Controller::SpatialModelerRegistry *v23;
  size_t v24;
  uint8x8_t v25;
  uint8x8_t v26;
  Phase::Controller::SpatialModelerRegistry *v27;
  Phase::Controller::SpatialModelerRegistry *v28;
  size_t v29;
  uint64_t v30;
  Phase::Controller::SpatialModelerRegistry **v31;
  unint64_t v32;
  NSObject *v33;
  std::runtime_error *exception;
  int v35;
  const char *v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *((_DWORD *)a2 + 8) = 1065353216;
  v4 = (uint64_t *)*((_QWORD *)this + 2);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = (Phase::Controller::SpatialModelerRegistry **)(a2 + 2);
    while (1)
    {
      v8 = *((_DWORD *)v4 + 16);
      if (v8 == 5 || v8 == 0)
      {
        v33 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 736));
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          v35 = 136315394;
          v36 = "SpatialModelerRegistry.mm";
          v37 = 1024;
          v38 = 384;
          _os_log_impl(&dword_2164CC000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [spatialModelerInfo.mCategory == SpatialCategory::Invalid || spatialModelerInfo.mCategory == SpatialCategory::Count is true]: \"Invalid Spatial Category!\"", (uint8_t *)&v35, 0x12u);
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Invalid Spatial Category!");
      }
      if (v6)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          v2 = v8;
          if (v6 <= v8)
            v2 = v8 % v6;
        }
        else
        {
          v2 = (v6 - 1) & v8;
        }
        v11 = *(uint64_t ***)(*a2 + 8 * v2);
        if (v11)
        {
          for (i = *v11; i; i = (uint64_t *)*i)
          {
            v13 = i[1];
            if (v13 == v8)
            {
              if (*((_DWORD *)i + 4) == v8)
                goto LABEL_79;
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v13 >= v6)
                  v13 %= v6;
              }
              else
              {
                v13 &= v6 - 1;
              }
              if (v13 != v2)
                break;
            }
          }
        }
      }
      this = (Phase::Controller::SpatialModelerRegistry *)operator new(0x18uLL);
      v14 = this;
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = v8;
      *((_DWORD *)this + 4) = v8;
      v15 = (float)(unint64_t)(v5 + 1);
      v16 = *((float *)a2 + 8);
      if (!v6 || (float)(v16 * (float)v6) < v15)
        break;
LABEL_69:
      v30 = *a2;
      v31 = *(Phase::Controller::SpatialModelerRegistry ***)(*a2 + 8 * v2);
      if (v31)
      {
        *(_QWORD *)v14 = *v31;
      }
      else
      {
        *(_QWORD *)v14 = *v7;
        *v7 = v14;
        *(_QWORD *)(v30 + 8 * v2) = v7;
        if (!*(_QWORD *)v14)
          goto LABEL_78;
        v32 = *(_QWORD *)(*(_QWORD *)v14 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v32 >= v6)
            v32 %= v6;
        }
        else
        {
          v32 &= v6 - 1;
        }
        v31 = (Phase::Controller::SpatialModelerRegistry **)(*a2 + 8 * v32);
      }
      *v31 = v14;
LABEL_78:
      v5 = a2[3] + 1;
      a2[3] = v5;
LABEL_79:
      v4 = (uint64_t *)*v4;
      if (!v4)
        return;
    }
    v17 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3)
      v17 = 1;
    v18 = v17 | (2 * v6);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    if (v20 == 1)
    {
      v20 = 2;
    }
    else if ((v20 & (v20 - 1)) != 0)
    {
      this = (Phase::Controller::SpatialModelerRegistry *)std::__next_prime(v20);
      v20 = (size_t)this;
      v6 = a2[1];
    }
    if (v20 > v6)
      goto LABEL_35;
    if (v20 < v6)
    {
      this = (Phase::Controller::SpatialModelerRegistry *)vcvtps_u32_f32((float)(unint64_t)a2[3] / *((float *)a2 + 8));
      if (v6 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        this = (Phase::Controller::SpatialModelerRegistry *)std::__next_prime((size_t)this);
      }
      else
      {
        v27 = (Phase::Controller::SpatialModelerRegistry *)(1 << -(char)__clz((unint64_t)this - 1));
        if ((unint64_t)this >= 2)
          this = v27;
      }
      if (v20 <= (unint64_t)this)
        v20 = (size_t)this;
      if (v20 >= v6)
      {
        v6 = a2[1];
      }
      else
      {
        if (v20)
        {
LABEL_35:
          if (v20 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * v20);
          this = (Phase::Controller::SpatialModelerRegistry *)*a2;
          *a2 = (uint64_t)v21;
          if (this)
            operator delete(this);
          v22 = 0;
          a2[1] = v20;
          do
            *(_QWORD *)(*a2 + 8 * v22++) = 0;
          while (v20 != v22);
          v23 = *v7;
          if (*v7)
          {
            v24 = *((_QWORD *)v23 + 1);
            v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= v20)
                v24 %= v20;
            }
            else
            {
              v24 &= v20 - 1;
            }
            *(_QWORD *)(*a2 + 8 * v24) = v7;
            v28 = *(Phase::Controller::SpatialModelerRegistry **)v23;
            if (*(_QWORD *)v23)
            {
              do
              {
                v29 = *((_QWORD *)v28 + 1);
                if (v25.u32[0] > 1uLL)
                {
                  if (v29 >= v20)
                    v29 %= v20;
                }
                else
                {
                  v29 &= v20 - 1;
                }
                if (v29 != v24)
                {
                  if (!*(_QWORD *)(*a2 + 8 * v29))
                  {
                    *(_QWORD *)(*a2 + 8 * v29) = v23;
                    goto LABEL_60;
                  }
                  *(_QWORD *)v23 = *(_QWORD *)v28;
                  *(_QWORD *)v28 = **(_QWORD **)(*a2 + 8 * v29);
                  **(_QWORD **)(*a2 + 8 * v29) = v28;
                  v28 = v23;
                }
                v29 = v24;
LABEL_60:
                v23 = v28;
                v28 = *(Phase::Controller::SpatialModelerRegistry **)v28;
                v24 = v29;
              }
              while (v28);
            }
          }
          v6 = v20;
          goto LABEL_64;
        }
        this = (Phase::Controller::SpatialModelerRegistry *)*a2;
        *a2 = 0;
        if (this)
          operator delete(this);
        v6 = 0;
        a2[1] = 0;
      }
    }
LABEL_64:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v8)
        v2 = v8 % v6;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v6 - 1) & v8;
    }
    goto LABEL_69;
  }
}

void sub_2166C7374(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::SpatialModelerInfo>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::SpatialModelerInfo>,0>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void **v7;

  v7 = (void **)(a1 + 256);
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100](&v7);
  v2 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD **)(a1 + 240);
  if (v3 == (_QWORD *)(a1 + 216))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 216);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = *(void **)(a1 + 104);
  if (v5)
  {
    *(_QWORD *)(a1 + 112) = v5;
    operator delete(v5);
  }
  v7 = (void **)(a1 + 80);
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100](&v7);
  v6 = *(void **)(a1 + 56);
  if (v6)
  {
    *(_QWORD *)(a1 + 64) = v6;
    operator delete(v6);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::vector<Phase::SpatialModeler::QueryDesc>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        std::allocator<Phase::SpatialModeler::QueryDesc>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_0,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_0>,Phase::SpatialModeler::BaseModeler * ()(void)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_0,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_0>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D581288;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_0,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_0>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D581288;
}

uint64_t std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_0,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_0>,Phase::SpatialModeler::BaseModeler * ()(void)>::operator()()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t i;

  v0 = operator new();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  *(_OWORD *)(v0 + 320) = 0u;
  *(_OWORD *)(v0 + 336) = 0u;
  *(_OWORD *)(v0 + 352) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xFFFFFFFFLL;
  *(_OWORD *)(v0 + 368) = 0u;
  *(_OWORD *)(v0 + 384) = 0u;
  *(_QWORD *)v0 = &off_24D57AA28;
  *(_QWORD *)(v0 + 8) = &off_24D577A80;
  *(_QWORD *)(v0 + 48) = &off_24D57A7F8;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  *(_OWORD *)(v0 + 320) = 0u;
  *(_OWORD *)(v0 + 336) = 0u;
  os_unfair_lock_lock((os_unfair_lock_t)&caulk::alloc::shared_allocator<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::shared_instance(void)::global);
  if (qword_254E44978)
  {
    v1 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_254E44978);
    if (v1)
    {
      v2 = v1;
      v3 = qword_254E44970;
      if (qword_254E44970)
        goto LABEL_14;
      p_shared_owners = (unint64_t *)&v1->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  v2 = (std::__shared_weak_count *)operator new(0x1A0uLL);
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5812D0;
  v2->__shared_owners_ = 0;
  *(_OWORD *)&v2[1].__shared_owners_ = 0u;
  v3 = (uint64_t)&v2[1].__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2[2].std::__shared_count = 0u;
  *(_OWORD *)&v2[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[3].__shared_owners_ = 0u;
  v2[4].std::__shared_count = 0u;
  *(_OWORD *)&v2[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[5].__shared_owners_ = 0u;
  v2[6].std::__shared_count = 0u;
  *(_OWORD *)&v2[6].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[7].__shared_owners_ = 0u;
  v2[8].std::__shared_count = 0u;
  *(_OWORD *)&v2[8].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[9].__shared_owners_ = 0u;
  v2[10].std::__shared_count = 0u;
  *(_OWORD *)&v2[10].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[11].__shared_owners_ = 0u;
  v2[12].std::__shared_count = 0u;
  *(_OWORD *)&v2[12].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[13].__shared_owners_ = 0u;
  v2[14].std::__shared_count = 0u;
  *(_OWORD *)&v2[14].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[15].__shared_owners_ = 0u;
  v2[16].std::__shared_count = 0u;
  *(_OWORD *)&v2[16].__shared_weak_owners_ = 0u;
  v6 = caulk::alloc::global_page_cache::instance((caulk::alloc::global_page_cache *)v2);
  v2[3].__shared_owners_ = 0;
  v2[1].__shared_weak_owners_ = v6 + 16;
  v2[2].__vftable = 0;
  v2[2].__shared_owners_ = 0;
  v2[2].__shared_weak_owners_ = 0;
  v7 = 96;
  LODWORD(v2[3].__vftable) = 0;
  do
  {
    v8 = (std::__shared_weak_count_vtbl **)((char *)&v2->__vftable + v7);
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    v7 += 32;
  }
  while (v7 != 416);
  p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = (std::__shared_weak_count *)qword_254E44978;
  qword_254E44970 = (uint64_t)&v2[1].__shared_owners_;
  qword_254E44978 = (uint64_t)v2;
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
LABEL_14:
  v12 = (_QWORD *)(v0 + 264);
  os_unfair_lock_unlock((os_unfair_lock_t)&caulk::alloc::shared_allocator<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::shared_instance(void)::global);
  v13 = (unint64_t *)&v2->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  v15 = *(std::__shared_weak_count **)(v0 + 344);
  *(_QWORD *)(v0 + 336) = v3;
  *(_QWORD *)(v0 + 344) = v2;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  do
    v18 = __ldaxr(v13);
  while (__stlxr(v18 - 1, v13));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(_QWORD *)(v0 + 352) = &caulk::inplace_function_detail::vtable<void,caulk::concurrent::details::skiplist_node<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>>::layout_vk const&>::empty;
  caulk::concurrent::skiplist<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10,(caulk::concurrent::skiplist_options)0>::random_engine();
  v19 = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_DWORD *)(v0 + 88) = 167837706;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  do
  {
    atomic_store(0, (unint64_t *)(v0 + v19 + 104));
    atomic_store(0, (unint64_t *)(v0 + v19 + 112));
    v19 += 16;
  }
  while (v19 != 160);
  *v12 = 0;
  *(_QWORD *)(v0 + 272) = 0;
  *(_DWORD *)(v0 + 288) = 16908289;
  *(_QWORD *)(v0 + 280) = -1;
  *(_QWORD *)(v0 + 304) = 0;
  *(_QWORD *)(v0 + 312) = 0;
  *(_QWORD *)(v0 + 296) = 0;
  atomic_store(0, (unint64_t *)(v0 + 304));
  atomic_store(0, (unint64_t *)(v0 + 312));
  for (i = 104; i != 264; i += 16)
    atomic_store((unint64_t)v12, (unint64_t *)(v0 + i));
  __dmb(0xBu);
  return v0;
}

void sub_2166C78BC(void *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  os_unfair_lock_unlock((os_unfair_lock_t)&caulk::alloc::shared_allocator<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::shared_instance(void)::global);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v1 + 336);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5812D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5812D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

caulk::alloc::base_allocator *std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unint64_t *v6;
  caulk::alloc::base_allocator *result;
  unint64_t v8;
  unsigned int v9;
  unint64_t *v10;
  BOOL v12;
  unsigned int v14;
  unint64_t *i;

  v2 = 0;
  v3 = a1 + 96;
  v4 = (unsigned int *)(a1 + 72);
  do
  {
    v5 = caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[v2];
    v6 = (unint64_t *)(v3 + 32 * v2 + 16);
    while (1)
    {
      result = (caulk::alloc::base_allocator *)caulk::concurrent::stack<caulk::alloc::free_block,caulk::concurrent::intrusive_single_link_node<caulk::alloc::free_block>>::pop((unsigned __int128 *)(v3 + 32 * v2));
      if (!result)
        break;
      do
        v8 = __ldaxr(v6);
      while (__stlxr(v8 - 1, v6));
      do
        v9 = __ldaxr(v4);
      while (__stlxr(v9 + 2049, v4));
      v10 = *(unint64_t **)(a1 + 48);
      if (v10)
      {
        while (v10 + 4 > (unint64_t *)result || (char *)result + v5 > (char *)(v10 + 2048))
        {
          v10 = (unint64_t *)atomic_load(v10);
          if (!v10)
            goto LABEL_13;
        }
      }
      else
      {
LABEL_13:
        v10 = (unint64_t *)atomic_load((unint64_t *)(a1 + 80));
        if (v10)
          v12 = v10 + 4 > (unint64_t *)result;
        else
          v12 = 1;
        if (v12 || (char *)result + v5 > (char *)(v10 + 2048))
LABEL_29:
          caulk::alloc::base_allocator::bad_dealloc(result);
      }
      if (!v10)
        goto LABEL_29;
      if (v10 + 4 > (unint64_t *)result || (char *)result + v5 > (char *)(v10 + 2048))
        caulk::alloc::base_allocator::bad_dealloc(result);
      do
        v14 = __ldaxr(v4);
      while (__stlxr(v14 - 1, v4));
    }
    ++v2;
  }
  while (v2 != 10);
  for (i = *(unint64_t **)(a1 + 48);
        i;
        result = (caulk::alloc::base_allocator *)caulk::alloc::details::caching_page_allocator_base::deallocate())
  {
    i = (unint64_t *)atomic_load(i);
  }
  return result;
}

void sub_2166C7A80(void *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  __clang_call_terminate(a1);
}

void caulk::inplace_function_detail::vtable<void,caulk::concurrent::details::skiplist_node<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>>::layout_vk const&>::vtable(void)::{lambda(void *,caulk::concurrent::details::skiplist_node<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>>::layout_vk const&)#1}::__invoke()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

_QWORD *std::__function::__value_func<Phase::SpatialModeler::BaseModeler * ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2166C7C48(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 56;
        std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)(v3 - 48));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_1,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_1>,Phase::SpatialModeler::BaseModeler * ()(void)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_1,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_1>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D581330;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_1,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_1>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D581330;
}

uint64_t std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_1,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_1>,Phase::SpatialModeler::BaseModeler * ()(void)>::operator()()
{
  uint64_t v0;

  v0 = operator new();
  bzero((void *)(v0 + 32), 0x4E0uLL);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xFFFFFFFFLL;
  *(_QWORD *)v0 = &off_24D57FED8;
  *(_QWORD *)(v0 + 8) = &off_24D577A80;
  *(_QWORD *)(v0 + 32) = &off_24D57FE90;
  *(_QWORD *)(v0 + 160) = 0;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 108) = 0u;
  *(_QWORD *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_DWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_DWORD *)(v0 + 72) = 0;
  memset((void *)(v0 + 172), 255, 0x280uLL);
  *(_OWORD *)(v0 + 816) = 0u;
  *(_DWORD *)(v0 + 832) = 0;
  *(_OWORD *)(v0 + 1048) = 0u;
  *(_OWORD *)(v0 + 840) = 0u;
  *(_OWORD *)(v0 + 856) = 0u;
  *(_OWORD *)(v0 + 872) = 0u;
  *(_OWORD *)(v0 + 888) = 0u;
  *(_OWORD *)(v0 + 904) = 0u;
  *(_OWORD *)(v0 + 920) = 0u;
  *(_OWORD *)(v0 + 936) = 0u;
  *(_OWORD *)(v0 + 952) = 0u;
  *(_OWORD *)(v0 + 968) = 0u;
  *(_OWORD *)(v0 + 984) = 0u;
  *(_OWORD *)(v0 + 1000) = 0u;
  *(_OWORD *)(v0 + 1016) = 0u;
  *(_OWORD *)(v0 + 1028) = 0u;
  *(_DWORD *)(v0 + 1064) = 2139095039;
  *(_BYTE *)(v0 + 1068) = 1;
  *(_DWORD *)(v0 + 1072) = 3;
  *(_BYTE *)(v0 + 1076) = 1;
  *(_DWORD *)(v0 + 1276) = 0;
  *(_QWORD *)(v0 + 1128) = 0;
  *(_QWORD *)(v0 + 1112) = 0;
  *(_QWORD *)(v0 + 1120) = 0;
  *(_QWORD *)(v0 + 1176) = 0;
  *(_QWORD *)(v0 + 1160) = 0;
  *(_QWORD *)(v0 + 1168) = 0;
  *(_QWORD *)(v0 + 1208) = 0;
  *(_QWORD *)(v0 + 1216) = 0;
  *(_QWORD *)(v0 + 1264) = 0;
  *(_QWORD *)(v0 + 1248) = 0;
  *(_QWORD *)(v0 + 1256) = 0;
  *(_WORD *)(v0 + 1272) = 0;
  return v0;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_2,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_2>,Phase::SpatialModeler::BaseModeler * ()(void)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_2,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_2>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D581378;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_2,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_2>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D581378;
}

_QWORD *std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_2,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_2>,Phase::SpatialModeler::BaseModeler * ()(void)>::operator()()
{
  _QWORD *v0;

  v0 = (_QWORD *)operator new();
  bzero(v0, 0xCB20uLL);
  Phase::SpatialModeler::RoomSimulation::RoomSimulation((Phase::SpatialModeler::RoomSimulation *)v0);
  *v0 = &off_24D57C7D0;
  return v0;
}

void sub_2166C7EEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10F1C40D1858A81);
  _Unwind_Resume(a1);
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_3,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_3>,Phase::SpatialModeler::BaseModeler * ()(void)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_3,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_3>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D5813C0;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_3,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_3>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D5813C0;
}

uint64_t std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_3,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_3>,Phase::SpatialModeler::BaseModeler * ()(void)>::operator()()
{
  uint64_t v0;

  v0 = operator new();
  bzero((void *)(v0 + 32), 0x4D0uLL);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xFFFFFFFFLL;
  *(_QWORD *)v0 = &off_24D580140;
  *(_QWORD *)(v0 + 8) = &off_24D577A80;
  *(_QWORD *)(v0 + 32) = &off_24D5800F8;
  *(_QWORD *)(v0 + 160) = 0;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 108) = 0u;
  *(_QWORD *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_DWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_DWORD *)(v0 + 72) = 0;
  memset((void *)(v0 + 172), 255, 0x280uLL);
  *(_OWORD *)(v0 + 816) = 0u;
  *(_DWORD *)(v0 + 832) = 0;
  *(_OWORD *)(v0 + 840) = 0u;
  *(_OWORD *)(v0 + 856) = 0u;
  *(_OWORD *)(v0 + 872) = 0u;
  *(_OWORD *)(v0 + 888) = 0u;
  *(_OWORD *)(v0 + 904) = 0u;
  *(_OWORD *)(v0 + 920) = 0u;
  *(_OWORD *)(v0 + 936) = 0u;
  *(_OWORD *)(v0 + 952) = 0u;
  *(_OWORD *)(v0 + 968) = 0u;
  *(_OWORD *)(v0 + 984) = 0u;
  *(_OWORD *)(v0 + 1000) = 0u;
  *(_OWORD *)(v0 + 1016) = 0u;
  *(_OWORD *)(v0 + 1032) = 0u;
  *(_DWORD *)(v0 + 1048) = 2139095039;
  *(_DWORD *)(v0 + 1056) = 3;
  *(_BYTE *)(v0 + 1060) = 1;
  *(_DWORD *)(v0 + 1260) = 0;
  *(_QWORD *)(v0 + 1104) = 0;
  *(_QWORD *)(v0 + 1096) = 0;
  *(_QWORD *)(v0 + 1112) = 0;
  *(_QWORD *)(v0 + 1152) = 0;
  *(_QWORD *)(v0 + 1144) = 0;
  *(_QWORD *)(v0 + 1160) = 0;
  *(_QWORD *)(v0 + 1200) = 0;
  *(_QWORD *)(v0 + 1192) = 0;
  *(_QWORD *)(v0 + 1240) = 0;
  *(_WORD *)(v0 + 1256) = 0;
  *(_QWORD *)(v0 + 1248) = 0;
  *(_QWORD *)(v0 + 1232) = 0;
  return v0;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_4,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_4>,Phase::SpatialModeler::BaseModeler * ()(void)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_4,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_4>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D581408;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_4,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_4>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D581408;
}

_QWORD *std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_4,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_4>,Phase::SpatialModeler::BaseModeler * ()(void)>::operator()()
{
  _QWORD *v0;

  v0 = (_QWORD *)operator new();
  bzero(v0, 0xCB20uLL);
  Phase::SpatialModeler::RoomSimulation::RoomSimulation((Phase::SpatialModeler::RoomSimulation *)v0);
  *v0 = &off_24D57E628;
  return v0;
}

void sub_2166C8128(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10F1C40D1858A81);
  _Unwind_Resume(a1);
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_5,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_5>,Phase::SpatialModeler::BaseModeler * ()(void)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_5,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_5>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D581450;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_5,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_5>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D581450;
}

_QWORD *std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_5,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_5>,Phase::SpatialModeler::BaseModeler * ()(void)>::operator()()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[2] = 0;
  result[3] = 0xFFFFFFFFLL;
  *result = &off_24D577410;
  result[1] = &off_24D577A80;
  result[4] = 0;
  result[5] = &off_24D5773C8;
  result[7] = 0;
  result[8] = 0;
  result[6] = 0;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::SpatialModelerInfo>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

Phase::SpatialModeler::ReverbPresetDatabase *Phase::SpatialModeler::ReverbPresetDatabase::ReverbPresetDatabase(Phase::SpatialModeler::ReverbPresetDatabase *this, double a2, int a3)
{
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation *v6;

  v6 = (Phase::SpatialModeler::ReverbPresetDatabase::Implementation *)operator new();
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Implementation(v6, a2, a3);
  *(_QWORD *)this = v6;
  return this;
}

void sub_2166C82A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10F0C402509CF1DLL);
  _Unwind_Resume(a1);
}

uint64_t *Phase::SpatialModeler::ReverbPresetDatabase::Implementation::AddPreset(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  void **v10;
  _QWORD *v11;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8x8_t v23;
  _QWORD *v24;
  _QWORD *i;
  unint64_t v26;
  char *v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  int8x8_t prime;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  std::string *v48;
  std::string *v49;
  float v50;
  float v51;
  void *v53;
  uint64_t *v54;
  uint64_t *v55;
  std::string *v56;
  unint64_t v57;
  uint64_t v58[2];
  char v59;
  _QWORD v60[3];
  uint64_t (**v61)(Phase::SpatialModeler::ReverbPresetDatabase::Implementation::EarlyReflectionsCollection *__hidden);
  int v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  int v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int16 v89;
  uint64_t (**v90)(Phase::SpatialModeler::ReverbPresetDatabase::Implementation::LateReflectionsCollection *__hidden);
  int v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  int v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int16 v118;
  unint64_t v119;
  __int128 v120;
  uint64_t v121;
  _QWORD v122[53];
  _QWORD v123[55];

  v3 = a3;
  v123[53] = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0 || (v6 = *(_QWORD *)a3) != 0)
  {
    v7 = *(unsigned __int8 *)v6;
    if (*(_BYTE *)v6)
    {
      v8 = (unsigned __int8 *)(v6 + 1);
      v6 = 0xCBF29CE484222325;
      do
      {
        v6 = 0x100000001B3 * (v6 ^ v7);
        v9 = *v8++;
        v7 = v9;
      }
      while (v9);
    }
    else
    {
      v6 = 0;
    }
  }
  v57 = v6;
  v10 = (void **)(a1 + 992);
  v11 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((_QWORD *)(a1 + 992), &v57);
  if (v11)
  {
    v12 = *(int8x8_t *)(a1 + 1000);
    v13 = v11[1];
    v14 = (uint8x8_t)vcnt_s8(v12);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      if (v13 >= *(_QWORD *)&v12)
        v13 %= *(_QWORD *)&v12;
    }
    else
    {
      v13 &= *(_QWORD *)&v12 - 1;
    }
    v15 = (_QWORD *)*((_QWORD *)*v10 + v13);
    do
    {
      v16 = v15;
      v15 = (_QWORD *)*v15;
    }
    while (v15 != v11);
    if (v16 == (_QWORD *)(a1 + 1008))
      goto LABEL_26;
    v17 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      if (v17 >= *(_QWORD *)&v12)
        v17 %= *(_QWORD *)&v12;
    }
    else
    {
      v17 &= *(_QWORD *)&v12 - 1;
    }
    if (v17 != v13)
    {
LABEL_26:
      if (!*v11)
        goto LABEL_27;
      v18 = *(_QWORD *)(*v11 + 8);
      if (v14.u32[0] > 1uLL)
      {
        if (v18 >= *(_QWORD *)&v12)
          v18 %= *(_QWORD *)&v12;
      }
      else
      {
        v18 &= *(_QWORD *)&v12 - 1;
      }
      if (v18 != v13)
LABEL_27:
        *((_QWORD *)*v10 + v13) = 0;
    }
    v19 = *v11;
    if (*v11)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v14.u32[0] > 1uLL)
      {
        if (v20 >= *(_QWORD *)&v12)
          v20 %= *(_QWORD *)&v12;
      }
      else
      {
        v20 &= *(_QWORD *)&v12 - 1;
      }
      if (v20 != v13)
      {
        *((_QWORD *)*v10 + v20) = v16;
        v19 = *v11;
      }
    }
    *v16 = v19;
    *v11 = 0;
    --*(_QWORD *)(a1 + 1016);
    v119 = (unint64_t)v11;
    *(_QWORD *)&v120 = a1 + 1008;
    BYTE8(v120) = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,void *>>>>::reset[abi:ne180100]((uint64_t *)&v119);
  }
  v55 = a2;
  bzero(&v62, 0x348uLL);
  v62 = 3;
  v63 = 1;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v73 = 0;
  v74 = 0;
  v72 = 0;
  v75 = 0;
  v76 = 3;
  v77 = 1;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v87 = 0;
  v88 = 0;
  v86 = 0;
  v89 = 0;
  v91 = 3;
  v92 = 1;
  v95 = 0;
  v93 = 0;
  v94 = 0;
  v98 = 0;
  v96 = 0;
  v97 = 0;
  v100 = 0;
  v99 = 0;
  v104 = 0;
  v103 = 0;
  v101 = 0;
  v102 = 0;
  v105 = 3;
  v106 = 1;
  v109 = 0;
  v107 = 0;
  v108 = 0;
  v111 = 0;
  v110 = 0;
  v112 = 0;
  v114 = 0;
  v113 = 0;
  v118 = 0;
  v117 = 0;
  v115 = 0;
  v116 = 0;
  v90 = &off_24D5814F8;
  v119 = v57;
  v120 = 0uLL;
  v121 = 0;
  memset(v60, 0, sizeof(v60));
  v61 = &off_24D5814B8;
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Collection((uint64_t)v122, (uint64_t)&v61);
  v122[0] = &off_24D5814B8;
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Collection((uint64_t)v123, (uint64_t)&v90);
  v123[0] = &off_24D5814F8;
  v21 = v119;
  v22 = *(_QWORD *)(a1 + 1000);
  v56 = (std::string *)v3;
  if (v22)
  {
    v23 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      v3 = v119;
      if (v22 <= v119)
        v3 = v119 % v22;
    }
    else
    {
      v3 = (v22 - 1) & v119;
    }
    v24 = (_QWORD *)*((_QWORD *)*v10 + v3);
    if (v24)
    {
      for (i = (_QWORD *)*v24; i; i = (_QWORD *)*i)
      {
        v26 = i[1];
        if (v26 == v119)
        {
          if (i[2] == v119)
            goto LABEL_109;
        }
        else
        {
          if (v23.u32[0] > 1uLL)
          {
            if (v26 >= v22)
              v26 %= v22;
          }
          else
          {
            v26 &= v22 - 1;
          }
          if (v26 != v3)
            break;
        }
      }
    }
  }
  v27 = (char *)operator new(0x380uLL);
  v58[0] = (uint64_t)v27;
  v58[1] = a1 + 1008;
  v54 = (uint64_t *)(a1 + 1008);
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = v21;
  *((_QWORD *)v27 + 2) = v21;
  *(_OWORD *)(v27 + 24) = v120;
  *((_QWORD *)v27 + 5) = v121;
  v120 = 0uLL;
  v121 = 0;
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Collection((uint64_t)(v27 + 48), (uint64_t)v122);
  *((_QWORD *)v27 + 6) = &off_24D5814B8;
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Collection((uint64_t)(v27 + 472), (uint64_t)v123);
  *((_QWORD *)v27 + 59) = &off_24D5814F8;
  v59 = 1;
  v28 = (float)(unint64_t)(*(_QWORD *)(a1 + 1016) + 1);
  v29 = *(float *)(a1 + 1024);
  if (!v22 || (float)(v29 * (float)v22) < v28)
  {
    v30 = 1;
    if (v22 >= 3)
      v30 = (v22 & (v22 - 1)) != 0;
    v31 = v30 | (2 * v22);
    v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32)
      prime = (int8x8_t)v32;
    else
      prime = (int8x8_t)v31;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v22 = *(_QWORD *)(a1 + 1000);
    if (*(_QWORD *)&prime > v22)
      goto LABEL_65;
    if (*(_QWORD *)&prime < v22)
    {
      v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 1016) / *(float *)(a1 + 1024));
      if (v22 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v22), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (*(_QWORD *)&prime <= v40)
        prime = (int8x8_t)v40;
      if (*(_QWORD *)&prime >= v22)
      {
        v22 = *(_QWORD *)(a1 + 1000);
      }
      else
      {
        if (prime)
        {
LABEL_65:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v34 = operator new(8 * *(_QWORD *)&prime);
          v35 = *v10;
          *v10 = v34;
          if (v35)
            operator delete(v35);
          v36 = 0;
          *(int8x8_t *)(a1 + 1000) = prime;
          do
            *((_QWORD *)*v10 + v36++) = 0;
          while (*(_QWORD *)&prime != v36);
          v37 = (_QWORD *)*v54;
          if (*v54)
          {
            v38 = v37[1];
            v39 = (uint8x8_t)vcnt_s8(prime);
            v39.i16[0] = vaddlv_u8(v39);
            if (v39.u32[0] > 1uLL)
            {
              if (v38 >= *(_QWORD *)&prime)
                v38 %= *(_QWORD *)&prime;
            }
            else
            {
              v38 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)*v10 + v38) = v54;
            v43 = (_QWORD *)*v37;
            if (*v37)
            {
              do
              {
                v44 = v43[1];
                if (v39.u32[0] > 1uLL)
                {
                  if (v44 >= *(_QWORD *)&prime)
                    v44 %= *(_QWORD *)&prime;
                }
                else
                {
                  v44 &= *(_QWORD *)&prime - 1;
                }
                if (v44 != v38)
                {
                  if (!*((_QWORD *)*v10 + v44))
                  {
                    *((_QWORD *)*v10 + v44) = v37;
                    goto LABEL_90;
                  }
                  *v37 = *v43;
                  *v43 = **((_QWORD **)*v10 + v44);
                  **((_QWORD **)*v10 + v44) = v43;
                  v43 = v37;
                }
                v44 = v38;
LABEL_90:
                v37 = v43;
                v43 = (_QWORD *)*v43;
                v38 = v44;
              }
              while (v43);
            }
          }
          v22 = (unint64_t)prime;
          goto LABEL_94;
        }
        v53 = *v10;
        *v10 = 0;
        if (v53)
          operator delete(v53);
        v22 = 0;
        *(_QWORD *)(a1 + 1000) = 0;
      }
    }
LABEL_94:
    if ((v22 & (v22 - 1)) != 0)
    {
      if (v22 <= v21)
        v3 = v21 % v22;
      else
        v3 = v21;
    }
    else
    {
      v3 = (v22 - 1) & v21;
    }
  }
  v45 = (uint64_t *)*((_QWORD *)*v10 + v3);
  v46 = v58[0];
  if (v45)
  {
    *(_QWORD *)v58[0] = *v45;
LABEL_107:
    *v45 = v46;
    goto LABEL_108;
  }
  *(_QWORD *)v58[0] = *v54;
  *v54 = v46;
  *((_QWORD *)*v10 + v3) = v54;
  if (*(_QWORD *)v46)
  {
    v47 = *(_QWORD *)(*(_QWORD *)v46 + 8);
    if ((v22 & (v22 - 1)) != 0)
    {
      if (v47 >= v22)
        v47 %= v22;
    }
    else
    {
      v47 &= v22 - 1;
    }
    v45 = (uint64_t *)((char *)*v10 + 8 * v47);
    goto LABEL_107;
  }
LABEL_108:
  v58[0] = 0;
  ++*(_QWORD *)(a1 + 1016);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,void *>>>>::reset[abi:ne180100](v58);
LABEL_109:
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry::~Entry((Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry *)&v120);
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry::~Entry((Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry *)v60);
  v48 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((_QWORD *)(a1 + 992), &v57);
  v49 = v48;
  if (!v48)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::string::operator=(v48 + 1, v56);
  v50 = *(double *)a1;
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Load((uint64_t)&v49[2], v55 + 3, v55[9], (uint64_t *)(a1 + 8), (uint64_t *)v56, (uint64_t *)&Phase::SpatialModeler::ReverbPresetDatabase::Implementation::EarlyReflectionsCollection::sName, v50);
  v51 = *(double *)a1;
  return Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Load((uint64_t)&v49[19].__r_.__value_.__r.__words[2], v55 + 6, v55[9], (uint64_t *)(a1 + 8), (uint64_t *)v56, (uint64_t *)&Phase::SpatialModeler::ReverbPresetDatabase::Implementation::LateReflectionsCollection::sName, v51);
}

void sub_2166C8AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,void *>>>>::reset[abi:ne180100]((uint64_t *)va);
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry::~Entry(v5);
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry::~Entry((Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry *)va1);
  _Unwind_Resume(a1);
}

uint64_t *Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Query@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t *result;
  uint64_t (***v12)(_QWORD);
  unint64_t v13;

  v13 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((_QWORD *)(a1 + 992), &v13);
  if (!result)
    goto LABEL_5;
  if (a3 == 1)
  {
    v12 = (uint64_t (***)(_QWORD))(result + 59);
    return Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Query(v12, a4, (Phase *)(a1 + 8), a5, a6, *(double *)a1);
  }
  if (a3)
  {
LABEL_5:
    *(_DWORD *)a5 = 3;
    *(_BYTE *)(a5 + 4) = 1;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 204) = 0;
    *(_QWORD *)(a5 + 48) = 0;
    *(_QWORD *)(a5 + 56) = 0;
    *(_QWORD *)(a5 + 40) = 0;
    *(_QWORD *)(a5 + 96) = 0;
    *(_QWORD *)(a5 + 104) = 0;
    *(_QWORD *)(a5 + 88) = 0;
    *(_QWORD *)(a5 + 136) = 0;
    *(_QWORD *)(a5 + 144) = 0;
    *(_QWORD *)(a5 + 184) = 0;
    *(_QWORD *)(a5 + 192) = 0;
    *(_QWORD *)(a5 + 176) = 0;
    *(_WORD *)(a5 + 200) = 0;
    return result;
  }
  v12 = (uint64_t (***)(_QWORD))(result + 6);
  return Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Query(v12, a4, (Phase *)(a1 + 8), a5, a6, *(double *)a1);
}

uint64_t *Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Load(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, float a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Phase::Logger *v20;
  _DWORD *v21;
  uint64_t v22;
  float *v23;
  float *v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  _BOOL4 v28;
  _BOOL4 v29;
  NSObject *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  float v50;
  double v51;
  uint64_t v52;
  int v54;
  uint64_t v55;
  Phase *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v60;
  uint64_t v61;
  _BYTE buf[12];
  __int16 v63;
  int v64;
  __int16 v65;
  uint64_t *v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72[5];
  uint64_t v73;
  uint64_t v74[5];
  uint64_t v75[5];
  uint64_t v76;
  __int128 v77;
  uint64_t *v78[5];
  uint64_t *v79[5];
  uint64_t v80;
  _QWORD v81[5];
  uint64_t v82;
  _QWORD v83[5];
  uint64_t v84;
  _QWORD v85[7];

  v85[5] = *MEMORY[0x24BDAC8D0];
  if (a3 != 3 && a3 != 10)
    __assert_rtn("Load", "SpatialModelerReverbPresetDatabase.cpp", 334, "inSubbandCount == 3 || inSubbandCount == 10");
  v13 = a2[1];
  v58 = *a2;
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a2) >> 3);
  v80 = v14;
  v79[0] = (uint64_t *)4;
  v82 = (uint64_t)a4;
  v83[0] = &v80;
  v83[1] = v79;
  v78[0] = a4;
  Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(v14, (uint64_t)&v82, (uint64_t *)v78, (Phase **)buf);
  v15 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v84 = v15;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v85, (uint64_t)&buf[8]);
  v85[4] = v14;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
  v79[0] = (uint64_t *)v14;
  v78[0] = (uint64_t *)4;
  v80 = (uint64_t)a4;
  v81[0] = v79;
  v81[1] = v78;
  v61 = (uint64_t)a4;
  Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(v14, (uint64_t)&v80, &v61, (Phase **)buf);
  v16 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v82 = v16;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v83, (uint64_t)&buf[8]);
  v83[4] = v14;
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
  v78[0] = (uint64_t *)v14;
  v60 = a4;
  v61 = 1;
  v79[0] = a4;
  v79[1] = (uint64_t *)v78;
  v79[2] = &v61;
  Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(v14, (uint64_t)v79, (uint64_t *)&v60, (Phase **)buf);
  v56 = (Phase *)a4;
  v17 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v80 = v17;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v81, (uint64_t)&buf[8]);
  v57 = v14;
  v81[4] = v14;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
  v54 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v55 = v13;
  if (v13 != v58)
  {
    v18 = 0;
    if (v57 <= 1)
      v19 = 1;
    else
      v19 = v57;
    do
    {
      v20 = (Phase::Logger *)(*(_QWORD *(**)(_BYTE *__return_ptr, uint64_t, float, float))(*(_QWORD *)a1 + 8))(buf, a1, *(float *)(*a2 + 24 * v18), *(float *)(*a2 + 24 * v18 + 4));
      v21 = (_DWORD *)(v84 + 12 * v18);
      *v21 = *(_DWORD *)buf;
      v21[1] = *(_DWORD *)&buf[4];
      v21[2] = *(_DWORD *)&buf[8];
      v22 = *a2 + 24 * v18;
      *(_DWORD *)(v82 + 4 * v18) = *(_DWORD *)(v22 + 8);
      v23 = *(float **)(v22 + 16);
      v24 = &v23[a3];
      v25 = 4 * a3;
      v26 = v23;
      while (*v26 >= 0.0)
      {
        ++v26;
        v25 -= 4;
        if (!v25)
        {
          v26 = &v23[a3];
          break;
        }
      }
      v27 = 4 * a3;
      while (*v23 <= 0.0)
      {
        ++v23;
        v27 -= 4;
        if (!v27)
        {
          if (v26 != v24)
          {
            LOBYTE(v28) = 1;
            goto LABEL_23;
          }
          goto LABEL_17;
        }
      }
      v29 = v26 == v24;
      v28 = v27 == 0;
      if (((v29 ^ v28) & 1) != 0)
        goto LABEL_23;
LABEL_17:
      v30 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v20) + 560);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a5 + 23) >= 0)
          v31 = a5;
        else
          v31 = (uint64_t *)*a5;
        v32 = *a6;
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "SpatialModelerReverbPresetDatabase.cpp";
        v63 = 1024;
        v64 = 151;
        v65 = 2080;
        v66 = v31;
        v67 = 2080;
        v68 = v32;
        v69 = 2048;
        v70 = v18;
        _os_log_impl(&dword_2164CC000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d Invalid mix of positive and negative subband gains: %s (%s[%zu])", buf, 0x30u);
      }
      LOBYTE(v28) = 0;
LABEL_23:
      *(_BYTE *)(v80 + v18++) = v28;
    }
    while (v18 != v19);
  }
  Phase::AllocPackedSubbandArray<float,Phase::HeapAllocator>((Phase::HeapAllocator *)a4, v57, 3, (Phase **)v79);
  Phase::AllocPackedSubbandArray<float,Phase::HeapAllocator>((Phase::HeapAllocator *)a4, v57, 10, (Phase **)v78);
  if (a3 == 10)
  {
    if (v55 != v58)
    {
      v42 = 0;
      v43 = 0;
      if (v57 <= 1)
        v44 = 1;
      else
        v44 = v57;
      do
      {
        v45 = 0;
        v46 = v78[0][1];
        v47 = (char *)v78[0] + 4 * v46 * v43 + 16;
        v48 = *(_QWORD *)(*a2 + 24 * v43 + 16);
        v49 = (char *)v78[0] + v46 * v42 + 16;
        do
        {
          v50 = *(float *)(v48 + v45);
          if (v50 < 0.0)
            v50 = -v50;
          *(float *)&v49[v45] = v50;
          v45 += 4;
        }
        while (v45 != 40);
        Phase::GetValuesFromFrequencyResponse<float const*,float *,float const*,float *,&float Phase::Square<float>,&float Phase::SquareRoot<float>>(Phase::sOctaveBandFrequencies, Phase::sThreeBandFrequencies, (uint64_t)v47, Phase::sThreeBandFrequencies, (float *)&jpt_2166CC1B0, (uint64_t)v79[0] + 4 * v79[0][1] * v43++ + 16);
        v42 += 4;
      }
      while (v43 != v44);
    }
  }
  else if (a3 == 3 && v55 != v58)
  {
    v33 = 0;
    v34 = 0;
    if (v57 <= 1)
      v35 = 1;
    else
      v35 = v57;
    do
    {
      v36 = 0;
      v37 = v79[0][1];
      v38 = (char *)v79[0] + 4 * v37 * v34 + 16;
      v39 = *(_QWORD *)(*a2 + 24 * v34 + 16);
      v40 = (char *)v79[0] + v37 * v33 + 16;
      do
      {
        v41 = *(float *)(v39 + v36);
        if (v41 < 0.0)
          v41 = -v41;
        *(float *)&v40[v36] = v41;
        v36 += 4;
      }
      while (v36 != 12);
      Phase::GetValuesFromFrequencyResponse<float const*,float *,float const*,float *,&float Phase::Square<float>,&float Phase::SquareRoot<float>>(Phase::sThreeBandFrequencies, (float *)&jpt_2166CC1B0, (uint64_t)v38, Phase::sOctaveBandFrequencies, Phase::sThreeBandFrequencies, (uint64_t)v78[0] + 4 * v78[0][1] * v34++ + 16);
      v33 += 4;
    }
    while (v34 != v35);
  }
  v51 = a7;
  Phase::SpatialModeler::sGenerateReflections((uint64_t *)buf, &v84, &v82, v79, &v80, 1, v54, v56, v51, v51);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)buf;
  *(_BYTE *)(a1 + 12) = buf[4];
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 16), (uint64_t *)&buf[8]);
  *(_QWORD *)(a1 + 56) = v71;
  std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 64), v72);
  *(_QWORD *)(a1 + 104) = v73;
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 112), v74);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 152), v75);
  *(_QWORD *)(a1 + 192) = v76;
  *(_OWORD *)(a1 + 200) = v77;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v75);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v74);
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v72);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&buf[8]);
  Phase::SpatialModeler::sGenerateReflections((uint64_t *)buf, &v84, &v82, v78, &v80, 1, v54, v56, v51, v51);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)buf;
  v52 = a1 + 216;
  *(_BYTE *)(v52 + 4) = buf[4];
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v52 + 8), (uint64_t *)&buf[8]);
  *(_QWORD *)(v52 + 48) = v71;
  std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v52 + 56), v72);
  *(_QWORD *)(v52 + 96) = v73;
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v52 + 104), v74);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v52 + 144), v75);
  *(_QWORD *)(v52 + 184) = v76;
  *(_OWORD *)(v52 + 192) = v77;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v75);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v74);
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v72);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&buf[8]);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)v78);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)v79);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v80);
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v82);
  return std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v84);
}

void sub_2166C9300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t v52;

  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&a47);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&a52);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)(v52 - 256));
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)(v52 - 208));
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)(v52 - 160));
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
      Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry::~Entry((Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry *)(v1 + 24));
    operator delete((void *)v1);
  }
}

uint64_t Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Collection(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a2;
  *(_QWORD *)a1 = &unk_24D5814D8;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v4;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 24, a2 + 24);
  v5 = *(_QWORD *)(v2 + 56);
  v6 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v6;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 72, v2 + 72);
  v7 = *(_QWORD *)(v2 + 104);
  v8 = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(a1 + 104) = v7;
  *(_QWORD *)(a1 + 112) = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 120, v2 + 120);
  v9 = *(_QWORD *)(v2 + 152);
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(a1 + 152) = v9;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 160, v2 + 160);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(v2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(v2 + 200);
  v10 = *(_QWORD *)(v2 + 216);
  v2 += 216;
  *(_QWORD *)(a1 + 216) = v10;
  v11 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(a1 + 224) = v11;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 232, v2 + 16);
  v12 = *(_QWORD *)(v2 + 48);
  v13 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(a1 + 264) = v12;
  *(_QWORD *)(a1 + 272) = v13;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 280, v2 + 64);
  v14 = *(_QWORD *)(v2 + 96);
  v15 = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(a1 + 312) = v14;
  *(_QWORD *)(a1 + 320) = v15;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 328, v2 + 112);
  v16 = *(_QWORD *)(v2 + 144);
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(a1 + 360) = v16;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 368, v2 + 152);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(v2 + 184);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(v2 + 192);
  return a1;
}

uint64_t Phase::SpatialModeler::ReverbPresetDatabase::Implementation::EarlyReflectionsCollection::GetDirectionType(Phase::SpatialModeler::ReverbPresetDatabase::Implementation::EarlyReflectionsCollection *this)
{
  return 1;
}

float Phase::SpatialModeler::ReverbPresetDatabase::Implementation::EarlyReflectionsCollection::GetDirectionFromAngles@<S0>(float a1@<S0>, float a2@<S1>, float *a3@<X8>)
{
  float v6;
  float v7;
  float v8;
  __float2 v9;
  __float2 v10;
  float result;

  v6 = (float)((float)(a2 + -180.0) - (float)(floorf((float)(a2 + -180.0) / 360.0) * 360.0)) + 0.0;
  if (v6 >= 360.0)
    v6 = nextafterf(360.0, 0.0);
  v7 = (float)(90.0 - a1) * 0.017453;
  v8 = v6 * 0.017453;
  v9 = __sincosf_stret(v7);
  v10 = __sincosf_stret(v8);
  result = v9.__sinval * v10.__sinval;
  *a3 = v9.__sinval * v10.__sinval;
  a3[1] = v9.__cosval;
  a3[2] = v9.__sinval * v10.__cosval;
  return result;
}

uint64_t Phase::SpatialModeler::ReverbPresetDatabase::Implementation::LateReflectionsCollection::GetDirectionType(Phase::SpatialModeler::ReverbPresetDatabase::Implementation::LateReflectionsCollection *this)
{
  return 0;
}

void Phase::SpatialModeler::ReverbPresetDatabase::Implementation::LateReflectionsCollection::GetDirectionFromAngles(float a1@<S0>, float a2@<S1>, uint64_t a3@<X8>)
{
  float v6;

  v6 = (float)((float)(360.0 - a2) - (float)(floorf((float)(360.0 - a2) / 360.0) * 360.0)) + 0.0;
  if (v6 >= 360.0)
    v6 = nextafterf(360.0, 0.0);
  *(_DWORD *)a3 = 1065353216;
  *(float *)(a3 + 4) = 90.0 - a1;
  *(float *)(a3 + 8) = v6;
}

void Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry::~Entry(Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry *this)
{
  *((_QWORD *)this + 56) = &unk_24D5814D8;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 101);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 96);
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 90);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 84);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 75);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 70);
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 64);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 58);
  *((_QWORD *)this + 3) = &unk_24D5814D8;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 48);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 43);
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 37);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 31);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 22);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 17);
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 11);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 5);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t *Phase::SpatialModeler::sGenerateReflections(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t **a4, uint64_t *a5, char a6, int a7, Phase *a8, double a9, double a10)
{
  uint64_t *v17;
  double v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  float *v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  uint64_t v44;
  float v45;

  v17 = result;
  if (a9 >= a10)
    v18 = a9;
  else
    v18 = a10;
  v19 = *a4;
  v21 = **a4;
  v20 = (*a4)[1];
  if (v21)
  {
    v22 = 0;
    v23 = 0;
    v24 = (float *)(v19 + 2);
    v25 = (char *)v19 + 20;
    do
    {
      if (v20)
      {
        if (v18 >= v24[v22 * v20])
        {
          v27 = 0;
          do
          {
            v28 = v27;
            if (v20 - 1 == v27)
              break;
            v29 = *(float *)&v25[4 * v27++];
          }
          while (v18 >= v29);
          v26 = v20 > v28 + 1;
        }
        else
        {
          v26 = 1;
        }
      }
      else
      {
        v26 = 0;
      }
      v23 += v26;
      ++v22;
      v25 += 4 * v20;
    }
    while (v22 != v21);
  }
  else
  {
    v23 = 0;
  }
  *(_DWORD *)result = 3;
  *((_BYTE *)result + 4) = 1;
  result[1] = 0;
  *((_DWORD *)result + 51) = 0;
  result[6] = 0;
  result[7] = 0;
  result[5] = 0;
  result[12] = 0;
  result[13] = 0;
  result[11] = 0;
  result[17] = 0;
  result[18] = 0;
  result[23] = 0;
  result[24] = 0;
  result[22] = 0;
  *((_WORD *)result + 100) = 0;
  if (v23)
  {
    result = Phase::SpatialModeler::AllocMetadata<float,Phase::HeapAllocator>(result, a8, v23, v20);
    if (v21)
    {
      v30 = 0;
      v31 = 0;
      v32 = (uint64_t)(*a4 + 2);
      v33 = *a2;
      v34 = v17[1];
      v35 = *a3;
      v36 = v17[7];
      v37 = v17[13];
      v38 = *a5;
      result = (uint64_t *)v17[18];
      v39 = 4 * (*a4)[1];
      do
      {
        if (v20)
        {
          v40 = 0;
          while (v18 >= *(float *)(v32 + 4 * v40))
          {
            if (v20 == ++v40)
              goto LABEL_30;
          }
          v41 = 0;
          v42 = (_DWORD *)(v33 + 12 * v30);
          v43 = (_DWORD *)(v34 + 12 * v31);
          *v43 = *v42;
          v43[1] = v42[1];
          v43[2] = v42[2];
          *(_DWORD *)(v36 + 4 * v31) = *(_DWORD *)(v35 + 4 * v30);
          v44 = v37 + 16 + 4 * *(_QWORD *)(v37 + 8) * v31;
          do
          {
            v45 = *(float *)(v32 + 4 * v41);
            if (v45 <= a10)
              v45 = a10;
            *(float *)(v44 + 4 * v41++) = v45;
          }
          while (v20 != v41);
          *((_BYTE *)result + v31++) = *(_BYTE *)(v38 + v30);
        }
LABEL_30:
        ++v30;
        v32 += v39;
      }
      while (v30 != v21);
    }
    else
    {
      v31 = 0;
    }
    if (v23 != v31)
      __assert_rtn("sGenerateReflections", "SpatialModelerReverbPresetDatabase.cpp", 118, "outputReflectionCount == outIdx");
    *((_BYTE *)v17 + 201) = a6;
    *((_DWORD *)v17 + 51) = a7;
  }
  return result;
}

void sub_2166C9944(_Unwind_Exception *a1)
{
  uint64_t *v1;

  Phase::SpatialModeler::DirectionalMetadataOutput<float>::~DirectionalMetadataOutput(v1);
  _Unwind_Resume(a1);
}

void Phase::GetValuesFromFrequencyResponse<float const*,float *,float const*,float *,&float Phase::Square<float>,&float Phase::SquareRoot<float>>(float *a1, float *a2, uint64_t a3, float *a4, float *a5, uint64_t a6)
{
  uint64_t v9;
  float *i;
  float v11;
  float v12;
  float *j;
  float v14;
  float v15;
  float *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  float v24;
  float v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  float *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  float *v41;
  int v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  float *v52;
  float v53;
  float *v54;
  float v55;
  float *v56;
  unint64_t v57;
  float v58;
  float v59;
  float *v60;
  float v61;
  float v62;
  float v63;
  float *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  float *v70;
  int v71;
  double v72;
  float *v73;
  float v74;
  float v75;
  uint64_t v76;
  float *v78;
  float *v79;
  float *v80;
  void *v81;
  char *v82;
  char *v83;
  void *__p;
  float *v85;
  float *v86;
  void *v87[3];
  void *v88[4];

  v9 = (char *)a2 - (char *)a1;
  if (a2 != a1)
  {
    for (i = a1 + 1; i != a2; ++i)
    {
      v12 = *(i - 1);
      v11 = *i;
      if (v11 < v12)
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 262, "std::is_sorted(inFrequenciesFirst, inFrequenciesLast)");
    }
  }
  if (a4 != a5)
  {
    for (j = a4 + 1; j != a5; ++j)
    {
      v15 = *(j - 1);
      v14 = *j;
      if (v14 < v15)
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 263, "std::is_sorted(inOutputFrequenciesFirst, inOutputFrequenciesLast)");
    }
  }
  Phase::GetBandsFromCenterFrequencies<float const*,float>(a1, a2, (float **)v88, 22000.0);
  Phase::GetBandsFromCenterFrequencies<float const*,float>(a4, a5, (float **)v87, 22000.0);
  __p = 0;
  v85 = 0;
  v86 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v78 = 0;
  v80 = 0;
  if ((char *)a5 - (char *)a4 > 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = a5 - a4;
    v21 = v9 >> 2;
    v22 = (v9 >> 2) - 1;
    if (v20 <= 1)
      v20 = 1;
    v76 = v20;
    do
    {
      v23 = (float *)((char *)v87[0] + 8 * v19);
      v24 = *v23;
      v25 = v23[1];
      v85 = (float *)__p;
      v82 = v17;
      v79 = v16;
      if (v18 < v21)
      {
        v26 = (float *)((char *)v88[0] + 8 * v18);
        v27 = *v26;
        v28 = v26[1];
        if (v25 < v28)
          v28 = v25;
        if (v27 >= v24)
          v29 = *v26;
        else
          v29 = v24;
        v30 = fmaxf(v28 - v29, 0.0);
        v31 = v25;
        v32 = v18;
        if (v30 == 0.0)
        {
LABEL_62:
          v18 -= v27 != v31;
        }
        else
        {
          while (1)
          {
            v33 = v85;
            if (v85 >= v86)
            {
              v35 = (float *)__p;
              v36 = ((char *)v85 - (_BYTE *)__p) >> 2;
              v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v38 = (char *)v86 - (_BYTE *)__p;
              if (((char *)v86 - (_BYTE *)__p) >> 1 > v37)
                v37 = v38 >> 1;
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
                v39 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v39 = v37;
              if (v39)
              {
                v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v86, v39);
                v35 = (float *)__p;
                v33 = v85;
              }
              else
              {
                v40 = 0;
              }
              v41 = (float *)&v40[4 * v36];
              *v41 = v30;
              v34 = v41 + 1;
              while (v33 != v35)
              {
                v42 = *((_DWORD *)v33-- - 1);
                *((_DWORD *)v41-- - 1) = v42;
              }
              __p = v41;
              v85 = v34;
              v86 = (float *)&v40[4 * v39];
              if (v35)
                operator delete(v35);
            }
            else
            {
              *v85 = v30;
              v34 = v33 + 1;
            }
            v85 = v34;
            v43 = v82;
            if (v82 >= v83)
            {
              v44 = (char *)v81;
              v45 = (v82 - (_BYTE *)v81) >> 3;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 61)
                std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
              v47 = v83 - (_BYTE *)v81;
              if ((v83 - (_BYTE *)v81) >> 2 > v46)
                v46 = v47 >> 2;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
                v48 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v83, v48);
                v44 = (char *)v81;
                v43 = v82;
              }
              else
              {
                v49 = 0;
              }
              v50 = (uint64_t *)&v49[8 * v45];
              *v50 = v18;
              v17 = (char *)(v50 + 1);
              while (v43 != v44)
              {
                v51 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *--v50 = v51;
              }
              v81 = v50;
              v82 = v17;
              v83 = &v49[8 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_QWORD *)v82 = v18;
              v17 = v43 + 8;
            }
            v82 = v17;
            if (v18 == v22)
              v32 = v18;
            if (++v18 == v21)
              break;
            v52 = (float *)((char *)v88[0] + 8 * v18);
            v27 = *v52;
            v53 = v52[1];
            v54 = (float *)((char *)v87[0] + 8 * v19);
            v55 = *v54;
            v31 = v54[1];
            if (v31 < v53)
              v53 = v54[1];
            if (v27 >= v55)
              v55 = v27;
            v30 = fmaxf(v53 - v55, 0.0);
            if (v30 == 0.0)
              goto LABEL_62;
          }
          v18 = v32;
        }
      }
      v56 = v79;
      if (v17 == v81)
      {
        v59 = 0.0;
      }
      else
      {
        v57 = 0;
        v58 = v25 - v24;
        v59 = 0.0;
        v60 = v79;
        v17 = (char *)v81;
        do
        {
          v61 = *((float *)__p + v57) / v58;
          v62 = *(float *)(a3 + 4 * *(_QWORD *)&v17[8 * v57]);
          v63 = v61 * (float)(v62 * v62);
          if (v60 >= v80)
          {
            v64 = v78;
            v65 = v60 - v78;
            v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v67 = (char *)v80 - (char *)v78;
            if (((char *)v80 - (char *)v78) >> 1 > v66)
              v66 = v67 >> 1;
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
              v68 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v68 = v66;
            if (v68)
            {
              v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v80, v68);
              v64 = v78;
              v60 = v79;
            }
            else
            {
              v69 = 0;
            }
            v70 = (float *)&v69[4 * v65];
            *v70 = v63;
            v56 = v70 + 1;
            while (v60 != v64)
            {
              v71 = *((_DWORD *)v60-- - 1);
              *((_DWORD *)v70-- - 1) = v71;
            }
            v78 = v70;
            v80 = (float *)&v69[4 * v68];
            if (v64)
              operator delete(v64);
          }
          else
          {
            *v60 = v63;
            v56 = v60 + 1;
          }
          v79 = v56;
          v59 = v59 + v61;
          ++v57;
          v17 = (char *)v81;
          v60 = v56;
        }
        while (v57 < (v82 - (_BYTE *)v81) >> 3);
      }
      v16 = v78;
      v72 = 0.0;
      if (v78 != v56)
      {
        v73 = v78;
        do
        {
          v74 = *v73++;
          v72 = v72 + v74;
        }
        while (v73 != v56);
      }
      v75 = v72;
      v22 = (v9 >> 2) - 1;
      *(float *)(a6 + 4 * v19++) = sqrtf(v75 / v59);
    }
    while (v19 != v76);
    if (v78)
    {
      operator delete(v78);
      v17 = (char *)v81;
    }
    if (v17)
    {
      v82 = v17;
      operator delete(v17);
    }
  }
  if (__p)
  {
    v85 = (float *)__p;
    operator delete(__p);
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
}

void sub_2166C9EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Query@<X0>(uint64_t (***a1)(_QWORD)@<X0>, uint64_t a2@<X1>, Phase *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t (***v10)(_QWORD);
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19[6];
  uint64_t v20[6];
  uint64_t v21[5];
  uint64_t v22[6];
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[4];
  uint64_t v33;
  _QWORD v34[4];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  LODWORD(v24) = 3;
  BYTE4(v24) = 1;
  HIDWORD(v36) = 0;
  v25 = 0;
  v26[3] = 0;
  v27 = 0;
  v28 = 0;
  v29[3] = 0;
  v30 = 0;
  v31 = 0;
  v32[3] = 0;
  v33 = 0;
  v34[3] = 0;
  v35 = 0;
  *(_QWORD *)&v36 = 0;
  WORD4(v36) = 0;
  if (a2 == 10)
  {
    v10 = a1 + 27;
  }
  else
  {
    if (a2 != 3)
    {
      *(_DWORD *)a4 = 3;
      *(_BYTE *)(a4 + 4) = 1;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 204) = 0;
      *(_QWORD *)(a4 + 48) = 0;
      *(_QWORD *)(a4 + 56) = 0;
      *(_QWORD *)(a4 + 40) = 0;
      *(_QWORD *)(a4 + 96) = 0;
      *(_QWORD *)(a4 + 104) = 0;
      *(_QWORD *)(a4 + 88) = 0;
      *(_QWORD *)(a4 + 136) = 0;
      *(_QWORD *)(a4 + 144) = 0;
      *(_QWORD *)(a4 + 184) = 0;
      *(_QWORD *)(a4 + 192) = 0;
      *(_QWORD *)(a4 + 176) = 0;
      *(_WORD *)(a4 + 200) = 0;
      goto LABEL_7;
    }
    v10 = a1 + 1;
  }
  v11 = *((unsigned __int8 *)v10 + 201);
  v12 = (**a1)(a1);
  Phase::SpatialModeler::sGenerateReflections(&v18, (uint64_t *)v10 + 1, (uint64_t *)v10 + 7, (uint64_t **)v10 + 13, (uint64_t *)v10 + 18, v11 != 0, v12, a3, a5, a6);
  LODWORD(v24) = v18;
  BYTE4(v24) = BYTE4(v18);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](&v25, v19);
  v27 = v19[5];
  std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100](&v28, v20);
  v30 = v20[5];
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100](&v31, v21);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100](&v33, v22);
  v35 = v22[5];
  v36 = v23;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v22);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v21);
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v20);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v19);
  v13 = v25;
  v25 = 0;
  *(_QWORD *)a4 = v24;
  *(_QWORD *)(a4 + 8) = v13;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a4 + 16, (uint64_t)v26);
  v14 = v28;
  v28 = 0;
  *(_QWORD *)(a4 + 48) = v27;
  *(_QWORD *)(a4 + 56) = v14;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a4 + 64, (uint64_t)v29);
  v15 = v31;
  v31 = 0;
  *(_QWORD *)(a4 + 96) = v30;
  *(_QWORD *)(a4 + 104) = v15;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a4 + 112, (uint64_t)v32);
  v16 = v33;
  v33 = 0;
  *(_QWORD *)(a4 + 144) = v16;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a4 + 152, (uint64_t)v34);
  *(_QWORD *)(a4 + 184) = v35;
  *(_OWORD *)(a4 + 192) = v36;
LABEL_7:
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v33);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v31);
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v28);
  return std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v25);
}

void sub_2166CA19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  Phase::SpatialModeler::DirectionalMetadataOutput<float>::~DirectionalMetadataOutput(&a36);
  _Unwind_Resume(a1);
}

Phase::SpatialModeler::ReverbPresetDatabase::Implementation *Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Implementation(Phase::SpatialModeler::ReverbPresetDatabase::Implementation *this, double a2, int a3)
{
  Phase::HeapAllocator *v6;

  *((_BYTE *)this + 8) = 0;
  v6 = (Phase::SpatialModeler::ReverbPresetDatabase::Implementation *)((char *)this + 8);
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *((_QWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  memset((char *)this + 140, 255, 0x280uLL);
  *((_OWORD *)this + 49) = 0u;
  *((_DWORD *)this + 200) = 0;
  *((_OWORD *)v6 + 50) = 0u;
  *((_OWORD *)v6 + 51) = 0u;
  *((_OWORD *)v6 + 52) = 0u;
  *((_OWORD *)v6 + 53) = 0u;
  *((_OWORD *)v6 + 54) = 0u;
  *((_OWORD *)v6 + 55) = 0u;
  *((_OWORD *)v6 + 56) = 0u;
  *((_OWORD *)v6 + 57) = 0u;
  *((_OWORD *)v6 + 58) = 0u;
  *((_OWORD *)v6 + 59) = 0u;
  *((_OWORD *)v6 + 60) = 0u;
  *((_OWORD *)v6 + 61) = 0u;
  *((_OWORD *)v6 + 62) = 0u;
  *((_QWORD *)this + 127) = 0;
  *((_DWORD *)this + 256) = 1065353216;
  *(long double *)this = exp(a2 * 10.0 / 10.0 * 0.115129255);
  Phase::HeapAllocator::InitializeWithBacking(v6, 0x4000000uLL, "SpatialModelerReverbPresetDatabaseHeap", 16, 128, a3);
  return this;
}

void sub_2166CA2A0(_Unwind_Exception *a1)
{
  Phase::HeapAllocator *v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>>>::~__hash_table(v2 + 992);
  Phase::HeapAllocator::Destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry::~Entry((Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry *)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

Phase::SpatialModeler::ReverbPresetDatabase::Implementation *std::unique_ptr<Phase::SpatialModeler::ReverbPresetDatabase::Implementation>::reset[abi:ne180100](Phase::SpatialModeler::ReverbPresetDatabase::Implementation **a1, Phase::SpatialModeler::ReverbPresetDatabase::Implementation *a2)
{
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::SpatialModeler::ReverbPresetDatabase::Implementation::~Implementation(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void Phase::SpatialModeler::ReverbPresetDatabase::Implementation::~Implementation(Phase::SpatialModeler::ReverbPresetDatabase::Implementation *this)
{
  char *v2;

  v2 = (char *)this + 992;
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>>>::clear((uint64_t)this + 992);
  Phase::HeapAllocator::Destroy((Phase::SpatialModeler::ReverbPresetDatabase::Implementation *)((char *)this + 8));
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>>>::~__hash_table((uint64_t)v2);
  Phase::HeapAllocator::Destroy((Phase::SpatialModeler::ReverbPresetDatabase::Implementation *)((char *)this + 8));
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void Phase::SpatialModeler::ReverbPresetFile::Load(std::string *a1, const std::string *a2)
{
  Phase::Logger *v3;
  Phase::Logger *v4;
  NSObject *v5;
  int v6;
  const std::string *v7;
  int *v8;
  const std::string *v9;
  int v10;
  std::logic_error *v11;
  NSObject *v12;
  int v13;
  const std::string *v14;
  int *v15;
  const std::string *v16;
  int v17;
  std::logic_error *exception;
  _DWORD __p[3];
  __int16 v20;
  int v21;
  __int16 v22;
  const std::string *v23;
  __int16 v24;
  int v25;
  _QWORD v26[74];

  v26[72] = *MEMORY[0x24BDAC8D0];
  std::string::operator=(a1, a2);
  v3 = (Phase::Logger *)std::ifstream::basic_ifstream(v26);
  if (v26[17])
  {
    std::istream::seekg();
    std::istream::tellg();
    std::istream::seekg();
    v4 = (Phase::Logger *)std::istream::read();
    v12 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v4) + 560);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
      v14 = (const std::string *)a2->__r_.__value_.__r.__words[0];
      v15 = __error();
      if (v13 >= 0)
        v16 = a2;
      else
        v16 = v14;
      v17 = *v15;
      __p[0] = 136315906;
      *(_QWORD *)&__p[1] = "SpatialModelerReverbPresetFile.cpp";
      v20 = 1024;
      v21 = 89;
      v22 = 2080;
      v23 = v16;
      v24 = 1024;
      v25 = v17;
      _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [earlyReflectionCount == 0 is true]: \"Reverb preset file does not contain early reflections: %s (errno: %d)\"", (uint8_t *)__p, 0x22u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Reverb preset file does not contain early reflections: %s (errno: %d)");
  }
  v5 = **(NSObject ***)(Phase::Logger::GetInstancePtr(v3) + 560);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    v8 = __error();
    if (v6 >= 0)
      v9 = a2;
    else
      v9 = v7;
    v10 = *v8;
    __p[0] = 136315906;
    *(_QWORD *)&__p[1] = "SpatialModelerReverbPresetFile.cpp";
    v20 = 1024;
    v21 = 76;
    v22 = 2080;
    v23 = v9;
    v24 = 1024;
    v25 = v10;
    _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [!presetFile.is_open() is true]: \"Failed to open reverb preset file: %s (errno: %d)\"", (uint8_t *)__p, 0x22u);
  }
  v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(v11, "Failed to open reverb preset file: %s (errno: %d)");
}

void sub_2166CB028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::ifstream::~ifstream(&a31);
  _Unwind_Resume(a1);
}

void std::vector<Phase::SpatialModeler::ReverbPresetFile::ReflectionEntry>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *(_QWORD *)a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
      std::vector<Phase::SpatialModeler::ReverbPresetFile::ReflectionEntry>::__base_destruct_at_end[abi:ne180100](a1, v4 + 24 * a2);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 24 * ((24 * v6 - 24) / 0x18) + 24);
      *(_QWORD *)(a1 + 8) = v3 + 24 * ((24 * v6 - 24) / 0x18) + 24;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3);
      v9 = 2 * v8;
      if (2 * v8 <= a2)
        v9 = a2;
      if (v8 >= 0x555555555555555)
        v10 = 0xAAAAAAAAAAAAAAALL;
      else
        v10 = v9;
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = 3 * v10;
      v12 = (char *)operator new(24 * v10);
      v13 = &v12[24 * v5];
      v14 = &v12[8 * v11];
      v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v13, v15);
      v16 = &v13[v15];
      if (v3 == v4)
      {
        *(_QWORD *)a1 = v13;
        *(_QWORD *)(a1 + 8) = v16;
        *(_QWORD *)(a1 + 16) = v14;
      }
      else
      {
        do
        {
          v17 = *(_QWORD *)(v3 - 24);
          v3 -= 24;
          v18 = *(_DWORD *)(v3 + 8);
          *((_QWORD *)v13 - 3) = v17;
          v13 -= 24;
          *((_DWORD *)v13 + 2) = v18;
          v19 = *(_QWORD *)(v3 + 16);
          *(_QWORD *)(v3 + 16) = 0;
          *((_QWORD *)v13 + 2) = v19;
        }
        while (v3 != v4);
        v3 = *(_QWORD *)a1;
        v20 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)a1 = v13;
        *(_QWORD *)(a1 + 8) = v16;
        *(_QWORD *)(a1 + 16) = v14;
        while (v20 != v3)
        {
          v21 = *(_QWORD *)(v20 - 8);
          *(_QWORD *)(v20 - 8) = 0;
          if (v21)
            MEMORY[0x2199F9D4C](v21, 0x1000C8052888210);
          v20 -= 24;
        }
      }
      if (v3)
        operator delete((void *)v3);
    }
  }
}

uint64_t Phase::SpatialModeler::Scheduler::Init(Phase::Logger *a1, uint64_t a2, Phase::Logger *this, uint64_t a4)
{
  NSObject *v5;
  std::runtime_error *exception;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (!this)
  {
    v5 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 208);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 136315394;
      v8 = "SpatialModelerScheduler.cpp";
      v9 = 1024;
      v10 = 129;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nullptr == inpModeler is true]: \"SpatialModeler::Scheduler : null inModeler passed to Init()\"", (uint8_t *)&v7, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "SpatialModeler::Scheduler : null inModeler passed to Init()");
  }
  *(_QWORD *)a1 = this;
  *((_QWORD *)a1 + 1) = a2;
  *((_QWORD *)this + 2) = a2;
  return (*(uint64_t (**)(Phase::Logger *, uint64_t))(*(_QWORD *)this + 32))(this, a4);
}

void sub_2166CB3F8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

unsigned __int8 *Phase::SpatialModeler::Scheduler::SubmitQuery@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v4;
  unsigned __int8 v7;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18[6];

  v4 = (unsigned int *)result;
  v18[5] = *MEMORY[0x24BDAC8D0];
  if (a2 && a3 && a3[22] != a3[21])
  {
    v7 = atomic_load(result + 16);
    if ((v7 & 1) != 0)
    {
      v16 = result + 24;
      *(_BYTE *)a4 = 0;
      v17 = 9;
    }
    else
    {
      do
      {
        if (__ldaxr((unsigned int *)a2))
        {
          __clrex();
          v16 = result + 24;
          *(_BYTE *)a4 = 0;
          v17 = 2;
          goto LABEL_15;
        }
      }
      while (__stlxr(1u, (unsigned int *)a2));
      result = (unsigned __int8 *)(*(uint64_t (**)(void))(**(_QWORD **)result + 8))();
      if ((_DWORD)result)
      {
        v10 = v4 + 5;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 + 1;
        }
        while (__stlxr(v12, v10));
        v13 = (unsigned int *)(a2 + 104);
        while (!__ldaxr(v13))
        {
          if (!__stlxr(v12, v13))
          {
            std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100]((_QWORD *)(a2 + 64), a3 + 19);
            v15 = Phase::SpatialModeler::ActiveQueryList::Add((uint64_t **)(a3[21] + 56), (Phase::SpatialModeler::Query *)a2);
            (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)v4 + 80))(v18, *(_QWORD *)v4, a2);
            std::unique_ptr<Phase::SpatialModeler::QueryState,std::function<void ()(void *)>>::operator=[abi:ne180100](v15 + 1, v18);
            std::unique_ptr<Phase::SpatialModeler::QueryState,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v18);
            result = (unsigned __int8 *)std::system_category();
            *(_BYTE *)a4 = 1;
            *(_DWORD *)(a4 + 8) = 0;
            *(_QWORD *)(a4 + 16) = result;
            return result;
          }
        }
        __clrex();
      }
      v16 = (unsigned __int8 *)(v4 + 6);
      *(_BYTE *)a4 = 0;
      v17 = 7;
    }
  }
  else
  {
    v16 = result + 24;
    *(_BYTE *)a4 = 0;
    v17 = 8;
  }
LABEL_15:
  *(_QWORD *)(a4 + 8) = v17;
  *(_QWORD *)(a4 + 16) = v16;
  return result;
}

uint64_t *Phase::SpatialModeler::ActiveQueryList::Add(uint64_t **this, Phase::SpatialModeler::Query *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v7;

  v4 = operator new();
  *(_QWORD *)v4 = a2;
  *(_QWORD *)(v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  v5 = *this;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = v5;
  *this = 0;
  v7 = 0;
  std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](this, (uint64_t *)v4);
  std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&v7, 0);
  return *this;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::QueryState,std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  std::unique_ptr<Phase::SpatialModeler::QueryState,std::function<void ()(void *)>>::reset[abi:ne180100](a1, v4);
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void Phase::SpatialModeler::Scheduler::CancelAllQueries(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v11;
  uint64_t v12;
  std::chrono::nanoseconds __ns;

  if (a2)
  {
    atomic_store(1u, a2 + 25);
    v4 = atomic_load(a2 + 24);
    if ((v4 & 1) != 0)
    {
      do
      {
        __ns.__rep_ = 1000000;
        std::this_thread::sleep_for (&__ns);
        v5 = atomic_load(a2 + 24);
      }
      while ((v5 & 1) != 0);
    }
    v6 = *(_QWORD *)a2;
    v7 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 != v7)
    {
      do
      {
        v8 = *(_QWORD *)(v6 + 168);
        v9 = *(_QWORD *)(v6 + 176);
        while (v8 != v9)
        {
          for (i = *(_QWORD **)(v8 + 56); i; i = (_QWORD *)i[10])
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 72))(*a1, *i);
            v11 = *i;
            atomic_store(0, (unsigned int *)(*i + 104));
            atomic_store(5u, (unsigned int *)v11);
            v12 = *(_QWORD *)(v11 + 32);
            if (v12)
              (*(void (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
          }
          std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100]((uint64_t **)(v8 + 56), 0);
          v8 += 96;
        }
        v6 += 192;
      }
      while (v6 != v7);
    }
    atomic_store(0, a2 + 25);
  }
}

